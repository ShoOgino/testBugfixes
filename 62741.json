{"path":"solr/core/src/java/org/apache/solr/util/SolrLogLayout#_format(LoggingEvent).mjava","commits":[{"id":"66c4027d3915ee5838b3049d0801f6789e5b5f8b","date":1368652737,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrLogLayout#_format(LoggingEvent).mjava","pathOld":"/dev/null","sourceNew":"  public String _format(LoggingEvent event) {\n    String message = (String) event.getMessage();\n    \n    StringBuilder sb = new StringBuilder(message.length() + 80);\n    \n    long now = event.timeStamp;\n    long timeFromStart = now - startTime;\n    long timeSinceLast = now - lastTime;\n    lastTime = now;\n    String shortClassName = getShortClassName(event.getLocationInformation().getClassName(),\n        event.getLocationInformation().getMethodName());\n    \n    /***\n     * sb.append(timeFromStart).append(' ').append(timeSinceLast);\n     * sb.append(' ');\n     * sb.append(record.getSourceClassName()).append('.').append(\n     * record.getSourceMethodName()); sb.append(' ');\n     * sb.append(record.getLevel());\n     ***/\n    \n    SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();\n    SolrQueryRequest req = requestInfo == null ? null : requestInfo.getReq();\n    SolrCore core = req == null ? null : req.getCore();\n    ZkController zkController = null;\n    CoreInfo info = null;\n    \n    if (core != null) {\n      info = coreInfoMap.get(core);\n      if (info == null) {\n        info = new CoreInfo();\n        info.shortId = \"C\" + Integer.toString(CoreInfo.maxCoreNum++);\n        coreInfoMap.put(core, info);\n        \n        if (sb.length() == 0) sb.append(\"ASYNC \");\n        sb.append(\" NEW_CORE \" + info.shortId);\n        sb.append(\" name=\" + core.getName());\n        sb.append(\" \" + core);\n      }\n      \n      if (zkController == null) {\n        zkController = core.getCoreDescriptor().getCoreContainer()\n            .getZkController();\n      }\n      if (zkController != null) {\n        if (info.url == null) {\n          info.url = zkController.getBaseUrl() + \"/\" + core.getName();\n          sb.append(\" url=\" + info.url + \" node=\" + zkController.getNodeName());\n        }\n        \n        Map<String,Object> coreProps = getReplicaProps(zkController, core);\n        if (info.coreProps == null || !coreProps.equals(info.coreProps)) {\n          info.coreProps = coreProps;\n          final String corePropsString = \"coll:\"\n              + core.getCoreDescriptor().getCloudDescriptor()\n                  .getCollectionName() + \" core:\" + core.getName() + \" props:\"\n              + coreProps;\n          sb.append(\" \" + info.shortId + \"_STATE=\" + corePropsString);\n        }\n      }\n    }\n    \n    if (sb.length() > 0) sb.append('\\n');\n    sb.append(timeFromStart);\n    \n    // sb.append(\"\\nL\").append(record.getSequenceNumber()); // log number is\n    // useful for sequencing when looking at multiple parts of a log file, but\n    // ms since start should be fine.\n    appendThread(sb, event);\n    \n    if (info != null) {\n      sb.append(' ').append(info.shortId); // core\n    }\n    if (zkController != null) {\n      sb.append(\" P\").append(zkController.getHostPort()); // todo: should be\n                                                          // able to get this\n                                                          // from core container\n                                                          // for non zk tests\n    }\n    \n    if (shortClassName.length() > 0) {\n      sb.append(' ').append(shortClassName);\n    }\n    \n    if (event.getLevel() != Level.INFO) {\n      sb.append(' ').append(event.getLevel());\n    }\n    \n    sb.append(' ');\n    appendMultiLineString(sb, message);\n    ThrowableInformation thInfo = event.getThrowableInformation();\n    if (thInfo != null) {\n      Throwable th = event.getThrowableInformation().getThrowable();\n      if (th != null) {\n        sb.append(' ');\n        String err = SolrException.toStr(th);\n        String ignoredMsg = SolrException.doIgnore(th, err);\n        if (ignoredMsg != null) {\n          sb.append(ignoredMsg);\n        } else {\n          sb.append(err);\n        }\n      }\n    }\n    \n    sb.append('\\n');\n    \n    /***\n     * Isn't core specific... prob better logged from zkController if (info !=\n     * null) { ClusterState clusterState = zkController.getClusterState(); if\n     * (info.clusterState != clusterState) { // something has changed in the\n     * matrix... sb.append(zkController.getBaseUrl() +\n     * \" sees new ClusterState:\"); } }\n     ***/\n    \n    return sb.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70207332b7bf7ed74c7241d74598d075109a78b","date":1369142583,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrLogLayout#_format(LoggingEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrLogLayout#_format(LoggingEvent).mjava","sourceNew":"  public String _format(LoggingEvent event) {\n    String message = (String) event.getMessage();\n    \n    StringBuilder sb = new StringBuilder(message.length() + 80);\n    \n    long now = event.timeStamp;\n    long timeFromStart = now - startTime;\n    long timeSinceLast = now - lastTime;\n    lastTime = now;\n    String shortClassName = getShortClassName(event.getLocationInformation().getClassName(),\n        event.getLocationInformation().getMethodName());\n    \n    /***\n     * sb.append(timeFromStart).append(' ').append(timeSinceLast);\n     * sb.append(' ');\n     * sb.append(record.getSourceClassName()).append('.').append(\n     * record.getSourceMethodName()); sb.append(' ');\n     * sb.append(record.getLevel());\n     ***/\n    \n    SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();\n    SolrQueryRequest req = requestInfo == null ? null : requestInfo.getReq();\n    SolrCore core = req == null ? null : req.getCore();\n    ZkController zkController = null;\n    CoreInfo info = null;\n    \n    if (core != null) {\n      info = coreInfoMap.get(core.hashCode());\n      if (info == null) {\n        info = new CoreInfo();\n        info.shortId = \"C\" + Integer.toString(CoreInfo.maxCoreNum++);\n        coreInfoMap.put(core.hashCode(), info);\n        \n        if (sb.length() == 0) sb.append(\"ASYNC \");\n        sb.append(\" NEW_CORE \" + info.shortId);\n        sb.append(\" name=\" + core.getName());\n        sb.append(\" \" + core);\n      }\n      \n      if (zkController == null) {\n        zkController = core.getCoreDescriptor().getCoreContainer()\n            .getZkController();\n      }\n      if (zkController != null) {\n        if (info.url == null) {\n          info.url = zkController.getBaseUrl() + \"/\" + core.getName();\n          sb.append(\" url=\" + info.url + \" node=\" + zkController.getNodeName());\n        }\n        \n        Map<String,Object> coreProps = getReplicaProps(zkController, core);\n        if (info.coreProps == null || !coreProps.equals(info.coreProps)) {\n          info.coreProps = coreProps;\n          final String corePropsString = \"coll:\"\n              + core.getCoreDescriptor().getCloudDescriptor()\n                  .getCollectionName() + \" core:\" + core.getName() + \" props:\"\n              + coreProps;\n          sb.append(\" \" + info.shortId + \"_STATE=\" + corePropsString);\n        }\n      }\n    }\n    \n    if (sb.length() > 0) sb.append('\\n');\n    sb.append(timeFromStart);\n    \n    // sb.append(\"\\nL\").append(record.getSequenceNumber()); // log number is\n    // useful for sequencing when looking at multiple parts of a log file, but\n    // ms since start should be fine.\n    appendThread(sb, event);\n    \n    if (info != null) {\n      sb.append(' ').append(info.shortId); // core\n    }\n    if (zkController != null) {\n      sb.append(\" P\").append(zkController.getHostPort()); // todo: should be\n                                                          // able to get this\n                                                          // from core container\n                                                          // for non zk tests\n    }\n    \n    if (shortClassName.length() > 0) {\n      sb.append(' ').append(shortClassName);\n    }\n    \n    if (event.getLevel() != Level.INFO) {\n      sb.append(' ').append(event.getLevel());\n    }\n    \n    sb.append(' ');\n    appendMultiLineString(sb, message);\n    ThrowableInformation thInfo = event.getThrowableInformation();\n    if (thInfo != null) {\n      Throwable th = event.getThrowableInformation().getThrowable();\n      if (th != null) {\n        sb.append(' ');\n        String err = SolrException.toStr(th);\n        String ignoredMsg = SolrException.doIgnore(th, err);\n        if (ignoredMsg != null) {\n          sb.append(ignoredMsg);\n        } else {\n          sb.append(err);\n        }\n      }\n    }\n    \n    sb.append('\\n');\n    \n    /***\n     * Isn't core specific... prob better logged from zkController if (info !=\n     * null) { ClusterState clusterState = zkController.getClusterState(); if\n     * (info.clusterState != clusterState) { // something has changed in the\n     * matrix... sb.append(zkController.getBaseUrl() +\n     * \" sees new ClusterState:\"); } }\n     ***/\n    \n    return sb.toString();\n  }\n\n","sourceOld":"  public String _format(LoggingEvent event) {\n    String message = (String) event.getMessage();\n    \n    StringBuilder sb = new StringBuilder(message.length() + 80);\n    \n    long now = event.timeStamp;\n    long timeFromStart = now - startTime;\n    long timeSinceLast = now - lastTime;\n    lastTime = now;\n    String shortClassName = getShortClassName(event.getLocationInformation().getClassName(),\n        event.getLocationInformation().getMethodName());\n    \n    /***\n     * sb.append(timeFromStart).append(' ').append(timeSinceLast);\n     * sb.append(' ');\n     * sb.append(record.getSourceClassName()).append('.').append(\n     * record.getSourceMethodName()); sb.append(' ');\n     * sb.append(record.getLevel());\n     ***/\n    \n    SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();\n    SolrQueryRequest req = requestInfo == null ? null : requestInfo.getReq();\n    SolrCore core = req == null ? null : req.getCore();\n    ZkController zkController = null;\n    CoreInfo info = null;\n    \n    if (core != null) {\n      info = coreInfoMap.get(core);\n      if (info == null) {\n        info = new CoreInfo();\n        info.shortId = \"C\" + Integer.toString(CoreInfo.maxCoreNum++);\n        coreInfoMap.put(core, info);\n        \n        if (sb.length() == 0) sb.append(\"ASYNC \");\n        sb.append(\" NEW_CORE \" + info.shortId);\n        sb.append(\" name=\" + core.getName());\n        sb.append(\" \" + core);\n      }\n      \n      if (zkController == null) {\n        zkController = core.getCoreDescriptor().getCoreContainer()\n            .getZkController();\n      }\n      if (zkController != null) {\n        if (info.url == null) {\n          info.url = zkController.getBaseUrl() + \"/\" + core.getName();\n          sb.append(\" url=\" + info.url + \" node=\" + zkController.getNodeName());\n        }\n        \n        Map<String,Object> coreProps = getReplicaProps(zkController, core);\n        if (info.coreProps == null || !coreProps.equals(info.coreProps)) {\n          info.coreProps = coreProps;\n          final String corePropsString = \"coll:\"\n              + core.getCoreDescriptor().getCloudDescriptor()\n                  .getCollectionName() + \" core:\" + core.getName() + \" props:\"\n              + coreProps;\n          sb.append(\" \" + info.shortId + \"_STATE=\" + corePropsString);\n        }\n      }\n    }\n    \n    if (sb.length() > 0) sb.append('\\n');\n    sb.append(timeFromStart);\n    \n    // sb.append(\"\\nL\").append(record.getSequenceNumber()); // log number is\n    // useful for sequencing when looking at multiple parts of a log file, but\n    // ms since start should be fine.\n    appendThread(sb, event);\n    \n    if (info != null) {\n      sb.append(' ').append(info.shortId); // core\n    }\n    if (zkController != null) {\n      sb.append(\" P\").append(zkController.getHostPort()); // todo: should be\n                                                          // able to get this\n                                                          // from core container\n                                                          // for non zk tests\n    }\n    \n    if (shortClassName.length() > 0) {\n      sb.append(' ').append(shortClassName);\n    }\n    \n    if (event.getLevel() != Level.INFO) {\n      sb.append(' ').append(event.getLevel());\n    }\n    \n    sb.append(' ');\n    appendMultiLineString(sb, message);\n    ThrowableInformation thInfo = event.getThrowableInformation();\n    if (thInfo != null) {\n      Throwable th = event.getThrowableInformation().getThrowable();\n      if (th != null) {\n        sb.append(' ');\n        String err = SolrException.toStr(th);\n        String ignoredMsg = SolrException.doIgnore(th, err);\n        if (ignoredMsg != null) {\n          sb.append(ignoredMsg);\n        } else {\n          sb.append(err);\n        }\n      }\n    }\n    \n    sb.append('\\n');\n    \n    /***\n     * Isn't core specific... prob better logged from zkController if (info !=\n     * null) { ClusterState clusterState = zkController.getClusterState(); if\n     * (info.clusterState != clusterState) { // something has changed in the\n     * matrix... sb.append(zkController.getBaseUrl() +\n     * \" sees new ClusterState:\"); } }\n     ***/\n    \n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d3941bfa3eab67c480899f9699c6b829ac6f13b","date":1384984796,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrLogLayout#_format(LoggingEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrLogLayout#_format(LoggingEvent).mjava","sourceNew":"  public String _format(LoggingEvent event) {\n    String message = (String) event.getMessage();\n    if (message == null) {\n      message = \"\";\n    }\n    StringBuilder sb = new StringBuilder(message.length() + 80);\n    \n    long now = event.timeStamp;\n    long timeFromStart = now - startTime;\n    long timeSinceLast = now - lastTime;\n    lastTime = now;\n    String shortClassName = getShortClassName(event.getLocationInformation().getClassName(),\n        event.getLocationInformation().getMethodName());\n    \n    /***\n     * sb.append(timeFromStart).append(' ').append(timeSinceLast);\n     * sb.append(' ');\n     * sb.append(record.getSourceClassName()).append('.').append(\n     * record.getSourceMethodName()); sb.append(' ');\n     * sb.append(record.getLevel());\n     ***/\n    \n    SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();\n    SolrQueryRequest req = requestInfo == null ? null : requestInfo.getReq();\n    SolrCore core = req == null ? null : req.getCore();\n    ZkController zkController = null;\n    CoreInfo info = null;\n    \n    if (core != null) {\n      info = coreInfoMap.get(core.hashCode());\n      if (info == null) {\n        info = new CoreInfo();\n        info.shortId = \"C\" + Integer.toString(CoreInfo.maxCoreNum++);\n        coreInfoMap.put(core.hashCode(), info);\n        \n        if (sb.length() == 0) sb.append(\"ASYNC \");\n        sb.append(\" NEW_CORE \" + info.shortId);\n        sb.append(\" name=\" + core.getName());\n        sb.append(\" \" + core);\n      }\n      \n      if (zkController == null) {\n        zkController = core.getCoreDescriptor().getCoreContainer()\n            .getZkController();\n      }\n      if (zkController != null) {\n        if (info.url == null) {\n          info.url = zkController.getBaseUrl() + \"/\" + core.getName();\n          sb.append(\" url=\" + info.url + \" node=\" + zkController.getNodeName());\n        }\n        \n        Map<String,Object> coreProps = getReplicaProps(zkController, core);\n        if (info.coreProps == null || !coreProps.equals(info.coreProps)) {\n          info.coreProps = coreProps;\n          final String corePropsString = \"coll:\"\n              + core.getCoreDescriptor().getCloudDescriptor()\n                  .getCollectionName() + \" core:\" + core.getName() + \" props:\"\n              + coreProps;\n          sb.append(\" \" + info.shortId + \"_STATE=\" + corePropsString);\n        }\n      }\n    }\n    \n    if (sb.length() > 0) sb.append('\\n');\n    sb.append(timeFromStart);\n    \n    // sb.append(\"\\nL\").append(record.getSequenceNumber()); // log number is\n    // useful for sequencing when looking at multiple parts of a log file, but\n    // ms since start should be fine.\n    appendThread(sb, event);\n    \n    if (info != null) {\n      sb.append(' ').append(info.shortId); // core\n    }\n    if (zkController != null) {\n      sb.append(\" P\").append(zkController.getHostPort()); // todo: should be\n                                                          // able to get this\n                                                          // from core container\n                                                          // for non zk tests\n    }\n    \n    if (shortClassName.length() > 0) {\n      sb.append(' ').append(shortClassName);\n    }\n    \n    if (event.getLevel() != Level.INFO) {\n      sb.append(' ').append(event.getLevel());\n    }\n    \n    sb.append(' ');\n    appendMultiLineString(sb, message);\n    ThrowableInformation thInfo = event.getThrowableInformation();\n    if (thInfo != null) {\n      Throwable th = event.getThrowableInformation().getThrowable();\n      if (th != null) {\n        sb.append(' ');\n        String err = SolrException.toStr(th);\n        String ignoredMsg = SolrException.doIgnore(th, err);\n        if (ignoredMsg != null) {\n          sb.append(ignoredMsg);\n        } else {\n          sb.append(err);\n        }\n      }\n    }\n    \n    sb.append('\\n');\n    \n    /***\n     * Isn't core specific... prob better logged from zkController if (info !=\n     * null) { ClusterState clusterState = zkController.getClusterState(); if\n     * (info.clusterState != clusterState) { // something has changed in the\n     * matrix... sb.append(zkController.getBaseUrl() +\n     * \" sees new ClusterState:\"); } }\n     ***/\n    \n    return sb.toString();\n  }\n\n","sourceOld":"  public String _format(LoggingEvent event) {\n    String message = (String) event.getMessage();\n    \n    StringBuilder sb = new StringBuilder(message.length() + 80);\n    \n    long now = event.timeStamp;\n    long timeFromStart = now - startTime;\n    long timeSinceLast = now - lastTime;\n    lastTime = now;\n    String shortClassName = getShortClassName(event.getLocationInformation().getClassName(),\n        event.getLocationInformation().getMethodName());\n    \n    /***\n     * sb.append(timeFromStart).append(' ').append(timeSinceLast);\n     * sb.append(' ');\n     * sb.append(record.getSourceClassName()).append('.').append(\n     * record.getSourceMethodName()); sb.append(' ');\n     * sb.append(record.getLevel());\n     ***/\n    \n    SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();\n    SolrQueryRequest req = requestInfo == null ? null : requestInfo.getReq();\n    SolrCore core = req == null ? null : req.getCore();\n    ZkController zkController = null;\n    CoreInfo info = null;\n    \n    if (core != null) {\n      info = coreInfoMap.get(core.hashCode());\n      if (info == null) {\n        info = new CoreInfo();\n        info.shortId = \"C\" + Integer.toString(CoreInfo.maxCoreNum++);\n        coreInfoMap.put(core.hashCode(), info);\n        \n        if (sb.length() == 0) sb.append(\"ASYNC \");\n        sb.append(\" NEW_CORE \" + info.shortId);\n        sb.append(\" name=\" + core.getName());\n        sb.append(\" \" + core);\n      }\n      \n      if (zkController == null) {\n        zkController = core.getCoreDescriptor().getCoreContainer()\n            .getZkController();\n      }\n      if (zkController != null) {\n        if (info.url == null) {\n          info.url = zkController.getBaseUrl() + \"/\" + core.getName();\n          sb.append(\" url=\" + info.url + \" node=\" + zkController.getNodeName());\n        }\n        \n        Map<String,Object> coreProps = getReplicaProps(zkController, core);\n        if (info.coreProps == null || !coreProps.equals(info.coreProps)) {\n          info.coreProps = coreProps;\n          final String corePropsString = \"coll:\"\n              + core.getCoreDescriptor().getCloudDescriptor()\n                  .getCollectionName() + \" core:\" + core.getName() + \" props:\"\n              + coreProps;\n          sb.append(\" \" + info.shortId + \"_STATE=\" + corePropsString);\n        }\n      }\n    }\n    \n    if (sb.length() > 0) sb.append('\\n');\n    sb.append(timeFromStart);\n    \n    // sb.append(\"\\nL\").append(record.getSequenceNumber()); // log number is\n    // useful for sequencing when looking at multiple parts of a log file, but\n    // ms since start should be fine.\n    appendThread(sb, event);\n    \n    if (info != null) {\n      sb.append(' ').append(info.shortId); // core\n    }\n    if (zkController != null) {\n      sb.append(\" P\").append(zkController.getHostPort()); // todo: should be\n                                                          // able to get this\n                                                          // from core container\n                                                          // for non zk tests\n    }\n    \n    if (shortClassName.length() > 0) {\n      sb.append(' ').append(shortClassName);\n    }\n    \n    if (event.getLevel() != Level.INFO) {\n      sb.append(' ').append(event.getLevel());\n    }\n    \n    sb.append(' ');\n    appendMultiLineString(sb, message);\n    ThrowableInformation thInfo = event.getThrowableInformation();\n    if (thInfo != null) {\n      Throwable th = event.getThrowableInformation().getThrowable();\n      if (th != null) {\n        sb.append(' ');\n        String err = SolrException.toStr(th);\n        String ignoredMsg = SolrException.doIgnore(th, err);\n        if (ignoredMsg != null) {\n          sb.append(ignoredMsg);\n        } else {\n          sb.append(err);\n        }\n      }\n    }\n    \n    sb.append('\\n');\n    \n    /***\n     * Isn't core specific... prob better logged from zkController if (info !=\n     * null) { ClusterState clusterState = zkController.getClusterState(); if\n     * (info.clusterState != clusterState) { // something has changed in the\n     * matrix... sb.append(zkController.getBaseUrl() +\n     * \" sees new ClusterState:\"); } }\n     ***/\n    \n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrLogLayout#_format(LoggingEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrLogLayout#_format(LoggingEvent).mjava","sourceNew":"  public String _format(LoggingEvent event) {\n    String message = (String) event.getMessage();\n    if (message == null) {\n      message = \"\";\n    }\n    StringBuilder sb = new StringBuilder(message.length() + 80);\n    \n    long now = event.timeStamp;\n    long timeFromStart = now - startTime;\n    long timeSinceLast = now - lastTime;\n    lastTime = now;\n    String shortClassName = getShortClassName(event.getLocationInformation().getClassName(),\n        event.getLocationInformation().getMethodName());\n    \n    /***\n     * sb.append(timeFromStart).append(' ').append(timeSinceLast);\n     * sb.append(' ');\n     * sb.append(record.getSourceClassName()).append('.').append(\n     * record.getSourceMethodName()); sb.append(' ');\n     * sb.append(record.getLevel());\n     ***/\n    \n    SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();\n    SolrQueryRequest req = requestInfo == null ? null : requestInfo.getReq();\n    SolrCore core = req == null ? null : req.getCore();\n    ZkController zkController = null;\n    CoreInfo info = null;\n    \n    if (core != null) {\n      info = coreInfoMap.get(core.hashCode());\n      if (info == null) {\n        info = new CoreInfo();\n        info.shortId = \"C\" + Integer.toString(CoreInfo.maxCoreNum++);\n        coreInfoMap.put(core.hashCode(), info);\n        \n        if (sb.length() == 0) sb.append(\"ASYNC \");\n        sb.append(\" NEW_CORE \" + info.shortId);\n        sb.append(\" name=\" + core.getName());\n        sb.append(\" \" + core);\n      }\n      \n      if (zkController == null) {\n        zkController = core.getCoreDescriptor().getCoreContainer()\n            .getZkController();\n      }\n      if (zkController != null) {\n        if (info.url == null) {\n          info.url = zkController.getBaseUrl() + \"/\" + core.getName();\n          sb.append(\" url=\" + info.url + \" node=\" + zkController.getNodeName());\n        }\n        \n        Map<String,Object> coreProps = getReplicaProps(zkController, core);\n        if (info.coreProps == null || !coreProps.equals(info.coreProps)) {\n          info.coreProps = coreProps;\n          final String corePropsString = \"coll:\"\n              + core.getCoreDescriptor().getCloudDescriptor()\n                  .getCollectionName() + \" core:\" + core.getName() + \" props:\"\n              + coreProps;\n          sb.append(\" \" + info.shortId + \"_STATE=\" + corePropsString);\n        }\n      }\n    }\n    \n    if (sb.length() > 0) sb.append('\\n');\n    sb.append(timeFromStart);\n    \n    // sb.append(\"\\nL\").append(record.getSequenceNumber()); // log number is\n    // useful for sequencing when looking at multiple parts of a log file, but\n    // ms since start should be fine.\n    appendThread(sb, event);\n    \n    if (info != null) {\n      sb.append(' ').append(info.shortId); // core\n    }\n    if (zkController != null) {\n      sb.append(\" P\").append(zkController.getHostPort()); // todo: should be\n                                                          // able to get this\n                                                          // from core container\n                                                          // for non zk tests\n    }\n    \n    if (shortClassName.length() > 0) {\n      sb.append(' ').append(shortClassName);\n    }\n    \n    if (event.getLevel() != Level.INFO) {\n      sb.append(' ').append(event.getLevel());\n    }\n    \n    sb.append(' ');\n    appendMultiLineString(sb, message);\n    ThrowableInformation thInfo = event.getThrowableInformation();\n    if (thInfo != null) {\n      Throwable th = event.getThrowableInformation().getThrowable();\n      if (th != null) {\n        sb.append(' ');\n        String err = SolrException.toStr(th);\n        String ignoredMsg = SolrException.doIgnore(th, err);\n        if (ignoredMsg != null) {\n          sb.append(ignoredMsg);\n        } else {\n          sb.append(err);\n        }\n      }\n    }\n    \n    sb.append('\\n');\n    \n    /***\n     * Isn't core specific... prob better logged from zkController if (info !=\n     * null) { ClusterState clusterState = zkController.getClusterState(); if\n     * (info.clusterState != clusterState) { // something has changed in the\n     * matrix... sb.append(zkController.getBaseUrl() +\n     * \" sees new ClusterState:\"); } }\n     ***/\n    \n    return sb.toString();\n  }\n\n","sourceOld":"  public String _format(LoggingEvent event) {\n    String message = (String) event.getMessage();\n    \n    StringBuilder sb = new StringBuilder(message.length() + 80);\n    \n    long now = event.timeStamp;\n    long timeFromStart = now - startTime;\n    long timeSinceLast = now - lastTime;\n    lastTime = now;\n    String shortClassName = getShortClassName(event.getLocationInformation().getClassName(),\n        event.getLocationInformation().getMethodName());\n    \n    /***\n     * sb.append(timeFromStart).append(' ').append(timeSinceLast);\n     * sb.append(' ');\n     * sb.append(record.getSourceClassName()).append('.').append(\n     * record.getSourceMethodName()); sb.append(' ');\n     * sb.append(record.getLevel());\n     ***/\n    \n    SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();\n    SolrQueryRequest req = requestInfo == null ? null : requestInfo.getReq();\n    SolrCore core = req == null ? null : req.getCore();\n    ZkController zkController = null;\n    CoreInfo info = null;\n    \n    if (core != null) {\n      info = coreInfoMap.get(core.hashCode());\n      if (info == null) {\n        info = new CoreInfo();\n        info.shortId = \"C\" + Integer.toString(CoreInfo.maxCoreNum++);\n        coreInfoMap.put(core.hashCode(), info);\n        \n        if (sb.length() == 0) sb.append(\"ASYNC \");\n        sb.append(\" NEW_CORE \" + info.shortId);\n        sb.append(\" name=\" + core.getName());\n        sb.append(\" \" + core);\n      }\n      \n      if (zkController == null) {\n        zkController = core.getCoreDescriptor().getCoreContainer()\n            .getZkController();\n      }\n      if (zkController != null) {\n        if (info.url == null) {\n          info.url = zkController.getBaseUrl() + \"/\" + core.getName();\n          sb.append(\" url=\" + info.url + \" node=\" + zkController.getNodeName());\n        }\n        \n        Map<String,Object> coreProps = getReplicaProps(zkController, core);\n        if (info.coreProps == null || !coreProps.equals(info.coreProps)) {\n          info.coreProps = coreProps;\n          final String corePropsString = \"coll:\"\n              + core.getCoreDescriptor().getCloudDescriptor()\n                  .getCollectionName() + \" core:\" + core.getName() + \" props:\"\n              + coreProps;\n          sb.append(\" \" + info.shortId + \"_STATE=\" + corePropsString);\n        }\n      }\n    }\n    \n    if (sb.length() > 0) sb.append('\\n');\n    sb.append(timeFromStart);\n    \n    // sb.append(\"\\nL\").append(record.getSequenceNumber()); // log number is\n    // useful for sequencing when looking at multiple parts of a log file, but\n    // ms since start should be fine.\n    appendThread(sb, event);\n    \n    if (info != null) {\n      sb.append(' ').append(info.shortId); // core\n    }\n    if (zkController != null) {\n      sb.append(\" P\").append(zkController.getHostPort()); // todo: should be\n                                                          // able to get this\n                                                          // from core container\n                                                          // for non zk tests\n    }\n    \n    if (shortClassName.length() > 0) {\n      sb.append(' ').append(shortClassName);\n    }\n    \n    if (event.getLevel() != Level.INFO) {\n      sb.append(' ').append(event.getLevel());\n    }\n    \n    sb.append(' ');\n    appendMultiLineString(sb, message);\n    ThrowableInformation thInfo = event.getThrowableInformation();\n    if (thInfo != null) {\n      Throwable th = event.getThrowableInformation().getThrowable();\n      if (th != null) {\n        sb.append(' ');\n        String err = SolrException.toStr(th);\n        String ignoredMsg = SolrException.doIgnore(th, err);\n        if (ignoredMsg != null) {\n          sb.append(ignoredMsg);\n        } else {\n          sb.append(err);\n        }\n      }\n    }\n    \n    sb.append('\\n');\n    \n    /***\n     * Isn't core specific... prob better logged from zkController if (info !=\n     * null) { ClusterState clusterState = zkController.getClusterState(); if\n     * (info.clusterState != clusterState) { // something has changed in the\n     * matrix... sb.append(zkController.getBaseUrl() +\n     * \" sees new ClusterState:\"); } }\n     ***/\n    \n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dbf528c0e702c5cbd1339b2da1cdc823fd44a925","date":1427230904,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrLogLayout#_format(LoggingEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrLogLayout#_format(LoggingEvent).mjava","sourceNew":"  public String _format(LoggingEvent event) {\n    String message = (String) event.getMessage();\n    if (message == null) {\n      message = \"\";\n    }\n    StringBuilder sb = new StringBuilder(message.length() + 80);\n    \n    long now = event.timeStamp;\n    long timeFromStart = now - startTime;\n    long timeSinceLast = now - lastTime;\n    lastTime = now;\n    String shortClassName = getShortClassName(event.getLocationInformation().getClassName(),\n        event.getLocationInformation().getMethodName());\n    \n    /***\n     * sb.append(timeFromStart).append(' ').append(timeSinceLast);\n     * sb.append(' ');\n     * sb.append(record.getSourceClassName()).append('.').append(\n     * record.getSourceMethodName()); sb.append(' ');\n     * sb.append(record.getLevel());\n     ***/\n    \n    SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();\n    SolrQueryRequest req = requestInfo == null ? null : requestInfo.getReq();\n    SolrCore core = req == null ? null : req.getCore();\n    ZkController zkController = null;\n    CoreInfo info = null;\n    \n    if (core != null) {\n      info = coreInfoMap.get(core.hashCode());\n      if (info == null) {\n        info = new CoreInfo();\n        info.shortId = \"C\" + Integer.toString(CoreInfo.maxCoreNum++);\n        coreInfoMap.put(core.hashCode(), info);\n        \n        if (sb.length() == 0) sb.append(\"ASYNC \");\n        sb.append(\" NEW_CORE \" + info.shortId);\n        sb.append(\" name=\" + core.getName());\n        sb.append(\" \" + core);\n      }\n      \n      if (zkController == null) {\n        zkController = core.getCoreDescriptor().getCoreContainer()\n            .getZkController();\n      }\n      if (zkController != null) {\n        if (info.url == null) {\n          info.url = zkController.getBaseUrl() + \"/\" + core.getName();\n          sb.append(\" url=\" + info.url + \" node=\" + zkController.getNodeName());\n        }\n        \n        Map<String,Object> coreProps = getReplicaProps(zkController, core);\n        if (info.coreProps == null || !coreProps.equals(info.coreProps)) {\n          info.coreProps = coreProps;\n          final String corePropsString = \"coll:\"\n              + core.getCoreDescriptor().getCloudDescriptor()\n                  .getCollectionName() + \" core:\" + core.getName() + \" props:\"\n              + coreProps;\n          sb.append(\" \" + info.shortId + \"_STATE=\" + corePropsString);\n        }\n      }\n    }\n    \n    if (sb.length() > 0) sb.append('\\n');\n    sb.append(timeFromStart);\n    \n    // sb.append(\"\\nL\").append(record.getSequenceNumber()); // log number is\n    // useful for sequencing when looking at multiple parts of a log file, but\n    // ms since start should be fine.\n    appendThread(sb, event);\n\n    appendMDC(sb);\n\n    if (info != null) {\n      sb.append(' ').append(info.shortId); // core\n    }\n    if (zkController != null) {\n      sb.append(\" P\").append(zkController.getHostPort()); // todo: should be\n                                                          // able to get this\n                                                          // from core container\n                                                          // for non zk tests\n    }\n    \n    if (shortClassName.length() > 0) {\n      sb.append(' ').append(shortClassName);\n    }\n    \n    if (event.getLevel() != Level.INFO) {\n      sb.append(' ').append(event.getLevel());\n    }\n    \n    sb.append(' ');\n    appendMultiLineString(sb, message);\n    ThrowableInformation thInfo = event.getThrowableInformation();\n    if (thInfo != null) {\n      Throwable th = event.getThrowableInformation().getThrowable();\n      if (th != null) {\n        sb.append(' ');\n        String err = SolrException.toStr(th);\n        String ignoredMsg = SolrException.doIgnore(th, err);\n        if (ignoredMsg != null) {\n          sb.append(ignoredMsg);\n        } else {\n          sb.append(err);\n        }\n      }\n    }\n    \n    sb.append('\\n');\n    \n    /***\n     * Isn't core specific... prob better logged from zkController if (info !=\n     * null) { ClusterState clusterState = zkController.getClusterState(); if\n     * (info.clusterState != clusterState) { // something has changed in the\n     * matrix... sb.append(zkController.getBaseUrl() +\n     * \" sees new ClusterState:\"); } }\n     ***/\n    \n    return sb.toString();\n  }\n\n","sourceOld":"  public String _format(LoggingEvent event) {\n    String message = (String) event.getMessage();\n    if (message == null) {\n      message = \"\";\n    }\n    StringBuilder sb = new StringBuilder(message.length() + 80);\n    \n    long now = event.timeStamp;\n    long timeFromStart = now - startTime;\n    long timeSinceLast = now - lastTime;\n    lastTime = now;\n    String shortClassName = getShortClassName(event.getLocationInformation().getClassName(),\n        event.getLocationInformation().getMethodName());\n    \n    /***\n     * sb.append(timeFromStart).append(' ').append(timeSinceLast);\n     * sb.append(' ');\n     * sb.append(record.getSourceClassName()).append('.').append(\n     * record.getSourceMethodName()); sb.append(' ');\n     * sb.append(record.getLevel());\n     ***/\n    \n    SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();\n    SolrQueryRequest req = requestInfo == null ? null : requestInfo.getReq();\n    SolrCore core = req == null ? null : req.getCore();\n    ZkController zkController = null;\n    CoreInfo info = null;\n    \n    if (core != null) {\n      info = coreInfoMap.get(core.hashCode());\n      if (info == null) {\n        info = new CoreInfo();\n        info.shortId = \"C\" + Integer.toString(CoreInfo.maxCoreNum++);\n        coreInfoMap.put(core.hashCode(), info);\n        \n        if (sb.length() == 0) sb.append(\"ASYNC \");\n        sb.append(\" NEW_CORE \" + info.shortId);\n        sb.append(\" name=\" + core.getName());\n        sb.append(\" \" + core);\n      }\n      \n      if (zkController == null) {\n        zkController = core.getCoreDescriptor().getCoreContainer()\n            .getZkController();\n      }\n      if (zkController != null) {\n        if (info.url == null) {\n          info.url = zkController.getBaseUrl() + \"/\" + core.getName();\n          sb.append(\" url=\" + info.url + \" node=\" + zkController.getNodeName());\n        }\n        \n        Map<String,Object> coreProps = getReplicaProps(zkController, core);\n        if (info.coreProps == null || !coreProps.equals(info.coreProps)) {\n          info.coreProps = coreProps;\n          final String corePropsString = \"coll:\"\n              + core.getCoreDescriptor().getCloudDescriptor()\n                  .getCollectionName() + \" core:\" + core.getName() + \" props:\"\n              + coreProps;\n          sb.append(\" \" + info.shortId + \"_STATE=\" + corePropsString);\n        }\n      }\n    }\n    \n    if (sb.length() > 0) sb.append('\\n');\n    sb.append(timeFromStart);\n    \n    // sb.append(\"\\nL\").append(record.getSequenceNumber()); // log number is\n    // useful for sequencing when looking at multiple parts of a log file, but\n    // ms since start should be fine.\n    appendThread(sb, event);\n    \n    if (info != null) {\n      sb.append(' ').append(info.shortId); // core\n    }\n    if (zkController != null) {\n      sb.append(\" P\").append(zkController.getHostPort()); // todo: should be\n                                                          // able to get this\n                                                          // from core container\n                                                          // for non zk tests\n    }\n    \n    if (shortClassName.length() > 0) {\n      sb.append(' ').append(shortClassName);\n    }\n    \n    if (event.getLevel() != Level.INFO) {\n      sb.append(' ').append(event.getLevel());\n    }\n    \n    sb.append(' ');\n    appendMultiLineString(sb, message);\n    ThrowableInformation thInfo = event.getThrowableInformation();\n    if (thInfo != null) {\n      Throwable th = event.getThrowableInformation().getThrowable();\n      if (th != null) {\n        sb.append(' ');\n        String err = SolrException.toStr(th);\n        String ignoredMsg = SolrException.doIgnore(th, err);\n        if (ignoredMsg != null) {\n          sb.append(ignoredMsg);\n        } else {\n          sb.append(err);\n        }\n      }\n    }\n    \n    sb.append('\\n');\n    \n    /***\n     * Isn't core specific... prob better logged from zkController if (info !=\n     * null) { ClusterState clusterState = zkController.getClusterState(); if\n     * (info.clusterState != clusterState) { // something has changed in the\n     * matrix... sb.append(zkController.getBaseUrl() +\n     * \" sees new ClusterState:\"); } }\n     ***/\n    \n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrLogLayout#_format(LoggingEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrLogLayout#_format(LoggingEvent).mjava","sourceNew":"  public String _format(LoggingEvent event) {\n    String message = (String) event.getMessage();\n    if (message == null) {\n      message = \"\";\n    }\n    StringBuilder sb = new StringBuilder(message.length() + 80);\n    \n    long now = event.timeStamp;\n    long timeFromStart = now - startTime;\n    long timeSinceLast = now - lastTime;\n    lastTime = now;\n    String shortClassName = getShortClassName(event.getLocationInformation().getClassName(),\n        event.getLocationInformation().getMethodName());\n    \n    /***\n     * sb.append(timeFromStart).append(' ').append(timeSinceLast);\n     * sb.append(' ');\n     * sb.append(record.getSourceClassName()).append('.').append(\n     * record.getSourceMethodName()); sb.append(' ');\n     * sb.append(record.getLevel());\n     ***/\n    \n    SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();\n    SolrQueryRequest req = requestInfo == null ? null : requestInfo.getReq();\n    SolrCore core = req == null ? null : req.getCore();\n    ZkController zkController = null;\n    CoreInfo info = null;\n    \n    if (core != null) {\n      info = coreInfoMap.get(core.hashCode());\n      if (info == null) {\n        info = new CoreInfo();\n        info.shortId = \"C\" + Integer.toString(CoreInfo.maxCoreNum++);\n        coreInfoMap.put(core.hashCode(), info);\n        \n        if (sb.length() == 0) sb.append(\"ASYNC \");\n        sb.append(\" NEW_CORE \" + info.shortId);\n        sb.append(\" name=\" + core.getName());\n        sb.append(\" \" + core);\n      }\n      \n      if (zkController == null) {\n        zkController = core.getCoreDescriptor().getCoreContainer()\n            .getZkController();\n      }\n      if (zkController != null) {\n        if (info.url == null) {\n          info.url = zkController.getBaseUrl() + \"/\" + core.getName();\n          sb.append(\" url=\" + info.url + \" node=\" + zkController.getNodeName());\n        }\n        \n        Map<String,Object> coreProps = getReplicaProps(zkController, core);\n        if (info.coreProps == null || !coreProps.equals(info.coreProps)) {\n          info.coreProps = coreProps;\n          final String corePropsString = \"coll:\"\n              + core.getCoreDescriptor().getCloudDescriptor()\n                  .getCollectionName() + \" core:\" + core.getName() + \" props:\"\n              + coreProps;\n          sb.append(\" \" + info.shortId + \"_STATE=\" + corePropsString);\n        }\n      }\n    }\n    \n    if (sb.length() > 0) sb.append('\\n');\n    sb.append(timeFromStart);\n    \n    // sb.append(\"\\nL\").append(record.getSequenceNumber()); // log number is\n    // useful for sequencing when looking at multiple parts of a log file, but\n    // ms since start should be fine.\n    appendThread(sb, event);\n\n    appendMDC(sb);\n\n    if (info != null) {\n      sb.append(' ').append(info.shortId); // core\n    }\n    if (zkController != null) {\n      sb.append(\" P\").append(zkController.getHostPort()); // todo: should be\n                                                          // able to get this\n                                                          // from core container\n                                                          // for non zk tests\n    }\n    \n    if (shortClassName.length() > 0) {\n      sb.append(' ').append(shortClassName);\n    }\n    \n    if (event.getLevel() != Level.INFO) {\n      sb.append(' ').append(event.getLevel());\n    }\n    \n    sb.append(' ');\n    appendMultiLineString(sb, message);\n    ThrowableInformation thInfo = event.getThrowableInformation();\n    if (thInfo != null) {\n      Throwable th = event.getThrowableInformation().getThrowable();\n      if (th != null) {\n        sb.append(' ');\n        String err = SolrException.toStr(th);\n        String ignoredMsg = SolrException.doIgnore(th, err);\n        if (ignoredMsg != null) {\n          sb.append(ignoredMsg);\n        } else {\n          sb.append(err);\n        }\n      }\n    }\n    \n    sb.append('\\n');\n    \n    /***\n     * Isn't core specific... prob better logged from zkController if (info !=\n     * null) { ClusterState clusterState = zkController.getClusterState(); if\n     * (info.clusterState != clusterState) { // something has changed in the\n     * matrix... sb.append(zkController.getBaseUrl() +\n     * \" sees new ClusterState:\"); } }\n     ***/\n    \n    return sb.toString();\n  }\n\n","sourceOld":"  public String _format(LoggingEvent event) {\n    String message = (String) event.getMessage();\n    if (message == null) {\n      message = \"\";\n    }\n    StringBuilder sb = new StringBuilder(message.length() + 80);\n    \n    long now = event.timeStamp;\n    long timeFromStart = now - startTime;\n    long timeSinceLast = now - lastTime;\n    lastTime = now;\n    String shortClassName = getShortClassName(event.getLocationInformation().getClassName(),\n        event.getLocationInformation().getMethodName());\n    \n    /***\n     * sb.append(timeFromStart).append(' ').append(timeSinceLast);\n     * sb.append(' ');\n     * sb.append(record.getSourceClassName()).append('.').append(\n     * record.getSourceMethodName()); sb.append(' ');\n     * sb.append(record.getLevel());\n     ***/\n    \n    SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();\n    SolrQueryRequest req = requestInfo == null ? null : requestInfo.getReq();\n    SolrCore core = req == null ? null : req.getCore();\n    ZkController zkController = null;\n    CoreInfo info = null;\n    \n    if (core != null) {\n      info = coreInfoMap.get(core.hashCode());\n      if (info == null) {\n        info = new CoreInfo();\n        info.shortId = \"C\" + Integer.toString(CoreInfo.maxCoreNum++);\n        coreInfoMap.put(core.hashCode(), info);\n        \n        if (sb.length() == 0) sb.append(\"ASYNC \");\n        sb.append(\" NEW_CORE \" + info.shortId);\n        sb.append(\" name=\" + core.getName());\n        sb.append(\" \" + core);\n      }\n      \n      if (zkController == null) {\n        zkController = core.getCoreDescriptor().getCoreContainer()\n            .getZkController();\n      }\n      if (zkController != null) {\n        if (info.url == null) {\n          info.url = zkController.getBaseUrl() + \"/\" + core.getName();\n          sb.append(\" url=\" + info.url + \" node=\" + zkController.getNodeName());\n        }\n        \n        Map<String,Object> coreProps = getReplicaProps(zkController, core);\n        if (info.coreProps == null || !coreProps.equals(info.coreProps)) {\n          info.coreProps = coreProps;\n          final String corePropsString = \"coll:\"\n              + core.getCoreDescriptor().getCloudDescriptor()\n                  .getCollectionName() + \" core:\" + core.getName() + \" props:\"\n              + coreProps;\n          sb.append(\" \" + info.shortId + \"_STATE=\" + corePropsString);\n        }\n      }\n    }\n    \n    if (sb.length() > 0) sb.append('\\n');\n    sb.append(timeFromStart);\n    \n    // sb.append(\"\\nL\").append(record.getSequenceNumber()); // log number is\n    // useful for sequencing when looking at multiple parts of a log file, but\n    // ms since start should be fine.\n    appendThread(sb, event);\n    \n    if (info != null) {\n      sb.append(' ').append(info.shortId); // core\n    }\n    if (zkController != null) {\n      sb.append(\" P\").append(zkController.getHostPort()); // todo: should be\n                                                          // able to get this\n                                                          // from core container\n                                                          // for non zk tests\n    }\n    \n    if (shortClassName.length() > 0) {\n      sb.append(' ').append(shortClassName);\n    }\n    \n    if (event.getLevel() != Level.INFO) {\n      sb.append(' ').append(event.getLevel());\n    }\n    \n    sb.append(' ');\n    appendMultiLineString(sb, message);\n    ThrowableInformation thInfo = event.getThrowableInformation();\n    if (thInfo != null) {\n      Throwable th = event.getThrowableInformation().getThrowable();\n      if (th != null) {\n        sb.append(' ');\n        String err = SolrException.toStr(th);\n        String ignoredMsg = SolrException.doIgnore(th, err);\n        if (ignoredMsg != null) {\n          sb.append(ignoredMsg);\n        } else {\n          sb.append(err);\n        }\n      }\n    }\n    \n    sb.append('\\n');\n    \n    /***\n     * Isn't core specific... prob better logged from zkController if (info !=\n     * null) { ClusterState clusterState = zkController.getClusterState(); if\n     * (info.clusterState != clusterState) { // something has changed in the\n     * matrix... sb.append(zkController.getBaseUrl() +\n     * \" sees new ClusterState:\"); } }\n     ***/\n    \n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb5af3afeddbb803fb785098176e6e177c34261b","date":1428905393,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrLogLayout#_format(LoggingEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrLogLayout#_format(LoggingEvent).mjava","sourceNew":"  public String _format(LoggingEvent event) {\n    String message = (String) event.getMessage();\n    if (message == null) {\n      message = \"\";\n    }\n    StringBuilder sb = new StringBuilder(message.length() + 80);\n    \n    long now = event.timeStamp;\n    long timeFromStart = now - startTime;\n    long timeSinceLast = now - lastTime;\n    lastTime = now;\n    String shortClassName = getShortClassName(event.getLocationInformation().getClassName(),\n        event.getLocationInformation().getMethodName());\n    \n    /***\n     * sb.append(timeFromStart).append(' ').append(timeSinceLast);\n     * sb.append(' ');\n     * sb.append(record.getSourceClassName()).append('.').append(\n     * record.getSourceMethodName()); sb.append(' ');\n     * sb.append(record.getLevel());\n     ***/\n    \n    SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();\n    SolrQueryRequest req = requestInfo == null ? null : requestInfo.getReq();\n    SolrCore core = req == null ? null : req.getCore();\n    ZkController zkController = null;\n    CoreInfo info = null;\n    \n    if (core != null) {\n      info = coreInfoMap.get(core.hashCode());\n      if (info == null) {\n        info = new CoreInfo();\n        info.shortId = \"C\" + Integer.toString(CoreInfo.maxCoreNum++);\n        coreInfoMap.put(core.hashCode(), info);\n        \n        if (sb.length() == 0) sb.append(\"ASYNC \");\n        sb.append(\" NEW_CORE \" + info.shortId);\n        sb.append(\" name=\" + core.getName());\n        sb.append(\" \" + core);\n      }\n\n      zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n      if (zkController != null) {\n        if (info.url == null) {\n          info.url = zkController.getBaseUrl() + \"/\" + core.getName();\n          sb.append(\" url=\" + info.url + \" node=\" + zkController.getNodeName());\n        }\n        \n        Map<String,Object> coreProps = getReplicaProps(zkController, core);\n        if (info.coreProps == null || !coreProps.equals(info.coreProps)) {\n          info.coreProps = coreProps;\n          final String corePropsString = \"coll:\"\n              + core.getCoreDescriptor().getCloudDescriptor()\n                  .getCollectionName() + \" core:\" + core.getName() + \" props:\"\n              + coreProps;\n          sb.append(\" \" + info.shortId + \"_STATE=\" + corePropsString);\n        }\n      }\n    }\n    \n    if (sb.length() > 0) sb.append('\\n');\n    sb.append(timeFromStart);\n\n    // sb.append(\"\\nL\").append(record.getSequenceNumber()); // log number is\n    // useful for sequencing when looking at multiple parts of a log file, but\n    // ms since start should be fine.\n    appendThread(sb, event);\n\n    appendMDC(sb);\n\n    // todo: should be able to get port from core container for non zk tests\n\n    if (info != null) {\n      sb.append(' ').append(info.shortId); // core\n    }\n\n    if (shortClassName.length() > 0) {\n      sb.append(' ').append(shortClassName);\n    }\n\n    if (event.getLevel() != Level.INFO) {\n      sb.append(' ').append(event.getLevel());\n    }\n    \n    sb.append(' ');\n    appendMultiLineString(sb, message);\n    ThrowableInformation thInfo = event.getThrowableInformation();\n    if (thInfo != null) {\n      Throwable th = event.getThrowableInformation().getThrowable();\n      if (th != null) {\n        sb.append(' ');\n        String err = SolrException.toStr(th);\n        String ignoredMsg = SolrException.doIgnore(th, err);\n        if (ignoredMsg != null) {\n          sb.append(ignoredMsg);\n        } else {\n          sb.append(err);\n        }\n      }\n    }\n    \n    sb.append('\\n');\n    \n    /***\n     * Isn't core specific... prob better logged from zkController if (info !=\n     * null) { ClusterState clusterState = zkController.getClusterState(); if\n     * (info.clusterState != clusterState) { // something has changed in the\n     * matrix... sb.append(zkController.getBaseUrl() +\n     * \" sees new ClusterState:\"); } }\n     ***/\n    \n    return sb.toString();\n  }\n\n","sourceOld":"  public String _format(LoggingEvent event) {\n    String message = (String) event.getMessage();\n    if (message == null) {\n      message = \"\";\n    }\n    StringBuilder sb = new StringBuilder(message.length() + 80);\n    \n    long now = event.timeStamp;\n    long timeFromStart = now - startTime;\n    long timeSinceLast = now - lastTime;\n    lastTime = now;\n    String shortClassName = getShortClassName(event.getLocationInformation().getClassName(),\n        event.getLocationInformation().getMethodName());\n    \n    /***\n     * sb.append(timeFromStart).append(' ').append(timeSinceLast);\n     * sb.append(' ');\n     * sb.append(record.getSourceClassName()).append('.').append(\n     * record.getSourceMethodName()); sb.append(' ');\n     * sb.append(record.getLevel());\n     ***/\n    \n    SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();\n    SolrQueryRequest req = requestInfo == null ? null : requestInfo.getReq();\n    SolrCore core = req == null ? null : req.getCore();\n    ZkController zkController = null;\n    CoreInfo info = null;\n    \n    if (core != null) {\n      info = coreInfoMap.get(core.hashCode());\n      if (info == null) {\n        info = new CoreInfo();\n        info.shortId = \"C\" + Integer.toString(CoreInfo.maxCoreNum++);\n        coreInfoMap.put(core.hashCode(), info);\n        \n        if (sb.length() == 0) sb.append(\"ASYNC \");\n        sb.append(\" NEW_CORE \" + info.shortId);\n        sb.append(\" name=\" + core.getName());\n        sb.append(\" \" + core);\n      }\n      \n      if (zkController == null) {\n        zkController = core.getCoreDescriptor().getCoreContainer()\n            .getZkController();\n      }\n      if (zkController != null) {\n        if (info.url == null) {\n          info.url = zkController.getBaseUrl() + \"/\" + core.getName();\n          sb.append(\" url=\" + info.url + \" node=\" + zkController.getNodeName());\n        }\n        \n        Map<String,Object> coreProps = getReplicaProps(zkController, core);\n        if (info.coreProps == null || !coreProps.equals(info.coreProps)) {\n          info.coreProps = coreProps;\n          final String corePropsString = \"coll:\"\n              + core.getCoreDescriptor().getCloudDescriptor()\n                  .getCollectionName() + \" core:\" + core.getName() + \" props:\"\n              + coreProps;\n          sb.append(\" \" + info.shortId + \"_STATE=\" + corePropsString);\n        }\n      }\n    }\n    \n    if (sb.length() > 0) sb.append('\\n');\n    sb.append(timeFromStart);\n    \n    // sb.append(\"\\nL\").append(record.getSequenceNumber()); // log number is\n    // useful for sequencing when looking at multiple parts of a log file, but\n    // ms since start should be fine.\n    appendThread(sb, event);\n\n    appendMDC(sb);\n\n    if (info != null) {\n      sb.append(' ').append(info.shortId); // core\n    }\n    if (zkController != null) {\n      sb.append(\" P\").append(zkController.getHostPort()); // todo: should be\n                                                          // able to get this\n                                                          // from core container\n                                                          // for non zk tests\n    }\n    \n    if (shortClassName.length() > 0) {\n      sb.append(' ').append(shortClassName);\n    }\n    \n    if (event.getLevel() != Level.INFO) {\n      sb.append(' ').append(event.getLevel());\n    }\n    \n    sb.append(' ');\n    appendMultiLineString(sb, message);\n    ThrowableInformation thInfo = event.getThrowableInformation();\n    if (thInfo != null) {\n      Throwable th = event.getThrowableInformation().getThrowable();\n      if (th != null) {\n        sb.append(' ');\n        String err = SolrException.toStr(th);\n        String ignoredMsg = SolrException.doIgnore(th, err);\n        if (ignoredMsg != null) {\n          sb.append(ignoredMsg);\n        } else {\n          sb.append(err);\n        }\n      }\n    }\n    \n    sb.append('\\n');\n    \n    /***\n     * Isn't core specific... prob better logged from zkController if (info !=\n     * null) { ClusterState clusterState = zkController.getClusterState(); if\n     * (info.clusterState != clusterState) { // something has changed in the\n     * matrix... sb.append(zkController.getBaseUrl() +\n     * \" sees new ClusterState:\"); } }\n     ***/\n    \n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrLogLayout#_format(LoggingEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrLogLayout#_format(LoggingEvent).mjava","sourceNew":"  public String _format(LoggingEvent event) {\n    String message = (String) event.getMessage();\n    if (message == null) {\n      message = \"\";\n    }\n    StringBuilder sb = new StringBuilder(message.length() + 80);\n    \n    long now = event.timeStamp;\n    long timeFromStart = now - startTime;\n    long timeSinceLast = now - lastTime;\n    lastTime = now;\n    String shortClassName = getShortClassName(event.getLocationInformation().getClassName(),\n        event.getLocationInformation().getMethodName());\n    \n    /***\n     * sb.append(timeFromStart).append(' ').append(timeSinceLast);\n     * sb.append(' ');\n     * sb.append(record.getSourceClassName()).append('.').append(\n     * record.getSourceMethodName()); sb.append(' ');\n     * sb.append(record.getLevel());\n     ***/\n    \n    SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();\n    SolrQueryRequest req = requestInfo == null ? null : requestInfo.getReq();\n    SolrCore core = req == null ? null : req.getCore();\n    ZkController zkController = null;\n    CoreInfo info = null;\n    \n    if (core != null) {\n      info = coreInfoMap.get(core.hashCode());\n      if (info == null) {\n        info = new CoreInfo();\n        info.shortId = \"C\" + Integer.toString(CoreInfo.maxCoreNum++);\n        coreInfoMap.put(core.hashCode(), info);\n        \n        if (sb.length() == 0) sb.append(\"ASYNC \");\n        sb.append(\" NEW_CORE \" + info.shortId);\n        sb.append(\" name=\" + core.getName());\n        sb.append(\" \" + core);\n      }\n\n      zkController = core.getCoreContainer().getZkController();\n      if (zkController != null) {\n        if (info.url == null) {\n          info.url = zkController.getBaseUrl() + \"/\" + core.getName();\n          sb.append(\" url=\" + info.url + \" node=\" + zkController.getNodeName());\n        }\n        \n        Map<String,Object> coreProps = getReplicaProps(zkController, core);\n        if (info.coreProps == null || !coreProps.equals(info.coreProps)) {\n          info.coreProps = coreProps;\n          final String corePropsString = \"coll:\"\n              + core.getCoreDescriptor().getCloudDescriptor()\n                  .getCollectionName() + \" core:\" + core.getName() + \" props:\"\n              + coreProps;\n          sb.append(\" \" + info.shortId + \"_STATE=\" + corePropsString);\n        }\n      }\n    }\n    \n    if (sb.length() > 0) sb.append('\\n');\n    sb.append(timeFromStart);\n\n    // sb.append(\"\\nL\").append(record.getSequenceNumber()); // log number is\n    // useful for sequencing when looking at multiple parts of a log file, but\n    // ms since start should be fine.\n    appendThread(sb, event);\n\n    appendMDC(sb);\n\n    // todo: should be able to get port from core container for non zk tests\n\n    if (info != null) {\n      sb.append(' ').append(info.shortId); // core\n    }\n\n    if (shortClassName.length() > 0) {\n      sb.append(' ').append(shortClassName);\n    }\n\n    if (event.getLevel() != Level.INFO) {\n      sb.append(' ').append(event.getLevel());\n    }\n    \n    sb.append(' ');\n    appendMultiLineString(sb, message);\n    ThrowableInformation thInfo = event.getThrowableInformation();\n    if (thInfo != null) {\n      Throwable th = event.getThrowableInformation().getThrowable();\n      if (th != null) {\n        sb.append(' ');\n        String err = SolrException.toStr(th);\n        String ignoredMsg = SolrException.doIgnore(th, err);\n        if (ignoredMsg != null) {\n          sb.append(ignoredMsg);\n        } else {\n          sb.append(err);\n        }\n      }\n    }\n    \n    sb.append('\\n');\n    \n    /***\n     * Isn't core specific... prob better logged from zkController if (info !=\n     * null) { ClusterState clusterState = zkController.getClusterState(); if\n     * (info.clusterState != clusterState) { // something has changed in the\n     * matrix... sb.append(zkController.getBaseUrl() +\n     * \" sees new ClusterState:\"); } }\n     ***/\n    \n    return sb.toString();\n  }\n\n","sourceOld":"  public String _format(LoggingEvent event) {\n    String message = (String) event.getMessage();\n    if (message == null) {\n      message = \"\";\n    }\n    StringBuilder sb = new StringBuilder(message.length() + 80);\n    \n    long now = event.timeStamp;\n    long timeFromStart = now - startTime;\n    long timeSinceLast = now - lastTime;\n    lastTime = now;\n    String shortClassName = getShortClassName(event.getLocationInformation().getClassName(),\n        event.getLocationInformation().getMethodName());\n    \n    /***\n     * sb.append(timeFromStart).append(' ').append(timeSinceLast);\n     * sb.append(' ');\n     * sb.append(record.getSourceClassName()).append('.').append(\n     * record.getSourceMethodName()); sb.append(' ');\n     * sb.append(record.getLevel());\n     ***/\n    \n    SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();\n    SolrQueryRequest req = requestInfo == null ? null : requestInfo.getReq();\n    SolrCore core = req == null ? null : req.getCore();\n    ZkController zkController = null;\n    CoreInfo info = null;\n    \n    if (core != null) {\n      info = coreInfoMap.get(core.hashCode());\n      if (info == null) {\n        info = new CoreInfo();\n        info.shortId = \"C\" + Integer.toString(CoreInfo.maxCoreNum++);\n        coreInfoMap.put(core.hashCode(), info);\n        \n        if (sb.length() == 0) sb.append(\"ASYNC \");\n        sb.append(\" NEW_CORE \" + info.shortId);\n        sb.append(\" name=\" + core.getName());\n        sb.append(\" \" + core);\n      }\n\n      zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n      if (zkController != null) {\n        if (info.url == null) {\n          info.url = zkController.getBaseUrl() + \"/\" + core.getName();\n          sb.append(\" url=\" + info.url + \" node=\" + zkController.getNodeName());\n        }\n        \n        Map<String,Object> coreProps = getReplicaProps(zkController, core);\n        if (info.coreProps == null || !coreProps.equals(info.coreProps)) {\n          info.coreProps = coreProps;\n          final String corePropsString = \"coll:\"\n              + core.getCoreDescriptor().getCloudDescriptor()\n                  .getCollectionName() + \" core:\" + core.getName() + \" props:\"\n              + coreProps;\n          sb.append(\" \" + info.shortId + \"_STATE=\" + corePropsString);\n        }\n      }\n    }\n    \n    if (sb.length() > 0) sb.append('\\n');\n    sb.append(timeFromStart);\n\n    // sb.append(\"\\nL\").append(record.getSequenceNumber()); // log number is\n    // useful for sequencing when looking at multiple parts of a log file, but\n    // ms since start should be fine.\n    appendThread(sb, event);\n\n    appendMDC(sb);\n\n    // todo: should be able to get port from core container for non zk tests\n\n    if (info != null) {\n      sb.append(' ').append(info.shortId); // core\n    }\n\n    if (shortClassName.length() > 0) {\n      sb.append(' ').append(shortClassName);\n    }\n\n    if (event.getLevel() != Level.INFO) {\n      sb.append(' ').append(event.getLevel());\n    }\n    \n    sb.append(' ');\n    appendMultiLineString(sb, message);\n    ThrowableInformation thInfo = event.getThrowableInformation();\n    if (thInfo != null) {\n      Throwable th = event.getThrowableInformation().getThrowable();\n      if (th != null) {\n        sb.append(' ');\n        String err = SolrException.toStr(th);\n        String ignoredMsg = SolrException.doIgnore(th, err);\n        if (ignoredMsg != null) {\n          sb.append(ignoredMsg);\n        } else {\n          sb.append(err);\n        }\n      }\n    }\n    \n    sb.append('\\n');\n    \n    /***\n     * Isn't core specific... prob better logged from zkController if (info !=\n     * null) { ClusterState clusterState = zkController.getClusterState(); if\n     * (info.clusterState != clusterState) { // something has changed in the\n     * matrix... sb.append(zkController.getBaseUrl() +\n     * \" sees new ClusterState:\"); } }\n     ***/\n    \n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrLogLayout#_format(LoggingEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrLogLayout#_format(LoggingEvent).mjava","sourceNew":"  public String _format(LoggingEvent event) {\n    String message = (String) event.getMessage();\n    if (message == null) {\n      message = \"\";\n    }\n    StringBuilder sb = new StringBuilder(message.length() + 80);\n    \n    long now = event.timeStamp;\n    long timeFromStart = now - startTime;\n    long timeSinceLast = now - lastTime;\n    lastTime = now;\n    String shortClassName = getShortClassName(event.getLocationInformation().getClassName(),\n        event.getLocationInformation().getMethodName());\n    \n    /***\n     * sb.append(timeFromStart).append(' ').append(timeSinceLast);\n     * sb.append(' ');\n     * sb.append(record.getSourceClassName()).append('.').append(\n     * record.getSourceMethodName()); sb.append(' ');\n     * sb.append(record.getLevel());\n     ***/\n    \n    SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();\n    SolrQueryRequest req = requestInfo == null ? null : requestInfo.getReq();\n    SolrCore core = req == null ? null : req.getCore();\n    ZkController zkController = null;\n    CoreInfo info = null;\n    \n    if (core != null) {\n      info = coreInfoMap.get(core.hashCode());\n      if (info == null) {\n        info = new CoreInfo();\n        info.shortId = \"C\" + Integer.toString(CoreInfo.maxCoreNum++);\n        coreInfoMap.put(core.hashCode(), info);\n        \n        if (sb.length() == 0) sb.append(\"ASYNC \");\n        sb.append(\" NEW_CORE \" + info.shortId);\n        sb.append(\" name=\" + core.getName());\n        sb.append(\" \" + core);\n      }\n\n      zkController = core.getCoreContainer().getZkController();\n      if (zkController != null) {\n        if (info.url == null) {\n          info.url = zkController.getBaseUrl() + \"/\" + core.getName();\n          sb.append(\" url=\" + info.url + \" node=\" + zkController.getNodeName());\n        }\n        \n        Map<String,Object> coreProps = getReplicaProps(zkController, core);\n        if (info.coreProps == null || !coreProps.equals(info.coreProps)) {\n          info.coreProps = coreProps;\n          final String corePropsString = \"coll:\"\n              + core.getCoreDescriptor().getCloudDescriptor()\n                  .getCollectionName() + \" core:\" + core.getName() + \" props:\"\n              + coreProps;\n          sb.append(\" \" + info.shortId + \"_STATE=\" + corePropsString);\n        }\n      }\n    }\n    \n    if (sb.length() > 0) sb.append('\\n');\n    sb.append(timeFromStart);\n\n    // sb.append(\"\\nL\").append(record.getSequenceNumber()); // log number is\n    // useful for sequencing when looking at multiple parts of a log file, but\n    // ms since start should be fine.\n    appendThread(sb, event);\n\n    appendMDC(sb);\n\n    // todo: should be able to get port from core container for non zk tests\n\n    if (info != null) {\n      sb.append(' ').append(info.shortId); // core\n    }\n\n    if (shortClassName.length() > 0) {\n      sb.append(' ').append(shortClassName);\n    }\n\n    if (event.getLevel() != Level.INFO) {\n      sb.append(' ').append(event.getLevel());\n    }\n    \n    sb.append(' ');\n    appendMultiLineString(sb, message);\n    ThrowableInformation thInfo = event.getThrowableInformation();\n    if (thInfo != null) {\n      Throwable th = event.getThrowableInformation().getThrowable();\n      if (th != null) {\n        sb.append(' ');\n        String err = SolrException.toStr(th);\n        String ignoredMsg = SolrException.doIgnore(th, err);\n        if (ignoredMsg != null) {\n          sb.append(ignoredMsg);\n        } else {\n          sb.append(err);\n        }\n      }\n    }\n    \n    sb.append('\\n');\n    \n    /***\n     * Isn't core specific... prob better logged from zkController if (info !=\n     * null) { ClusterState clusterState = zkController.getClusterState(); if\n     * (info.clusterState != clusterState) { // something has changed in the\n     * matrix... sb.append(zkController.getBaseUrl() +\n     * \" sees new ClusterState:\"); } }\n     ***/\n    \n    return sb.toString();\n  }\n\n","sourceOld":"  public String _format(LoggingEvent event) {\n    String message = (String) event.getMessage();\n    if (message == null) {\n      message = \"\";\n    }\n    StringBuilder sb = new StringBuilder(message.length() + 80);\n    \n    long now = event.timeStamp;\n    long timeFromStart = now - startTime;\n    long timeSinceLast = now - lastTime;\n    lastTime = now;\n    String shortClassName = getShortClassName(event.getLocationInformation().getClassName(),\n        event.getLocationInformation().getMethodName());\n    \n    /***\n     * sb.append(timeFromStart).append(' ').append(timeSinceLast);\n     * sb.append(' ');\n     * sb.append(record.getSourceClassName()).append('.').append(\n     * record.getSourceMethodName()); sb.append(' ');\n     * sb.append(record.getLevel());\n     ***/\n    \n    SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();\n    SolrQueryRequest req = requestInfo == null ? null : requestInfo.getReq();\n    SolrCore core = req == null ? null : req.getCore();\n    ZkController zkController = null;\n    CoreInfo info = null;\n    \n    if (core != null) {\n      info = coreInfoMap.get(core.hashCode());\n      if (info == null) {\n        info = new CoreInfo();\n        info.shortId = \"C\" + Integer.toString(CoreInfo.maxCoreNum++);\n        coreInfoMap.put(core.hashCode(), info);\n        \n        if (sb.length() == 0) sb.append(\"ASYNC \");\n        sb.append(\" NEW_CORE \" + info.shortId);\n        sb.append(\" name=\" + core.getName());\n        sb.append(\" \" + core);\n      }\n\n      zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n      if (zkController != null) {\n        if (info.url == null) {\n          info.url = zkController.getBaseUrl() + \"/\" + core.getName();\n          sb.append(\" url=\" + info.url + \" node=\" + zkController.getNodeName());\n        }\n        \n        Map<String,Object> coreProps = getReplicaProps(zkController, core);\n        if (info.coreProps == null || !coreProps.equals(info.coreProps)) {\n          info.coreProps = coreProps;\n          final String corePropsString = \"coll:\"\n              + core.getCoreDescriptor().getCloudDescriptor()\n                  .getCollectionName() + \" core:\" + core.getName() + \" props:\"\n              + coreProps;\n          sb.append(\" \" + info.shortId + \"_STATE=\" + corePropsString);\n        }\n      }\n    }\n    \n    if (sb.length() > 0) sb.append('\\n');\n    sb.append(timeFromStart);\n\n    // sb.append(\"\\nL\").append(record.getSequenceNumber()); // log number is\n    // useful for sequencing when looking at multiple parts of a log file, but\n    // ms since start should be fine.\n    appendThread(sb, event);\n\n    appendMDC(sb);\n\n    // todo: should be able to get port from core container for non zk tests\n\n    if (info != null) {\n      sb.append(' ').append(info.shortId); // core\n    }\n\n    if (shortClassName.length() > 0) {\n      sb.append(' ').append(shortClassName);\n    }\n\n    if (event.getLevel() != Level.INFO) {\n      sb.append(' ').append(event.getLevel());\n    }\n    \n    sb.append(' ');\n    appendMultiLineString(sb, message);\n    ThrowableInformation thInfo = event.getThrowableInformation();\n    if (thInfo != null) {\n      Throwable th = event.getThrowableInformation().getThrowable();\n      if (th != null) {\n        sb.append(' ');\n        String err = SolrException.toStr(th);\n        String ignoredMsg = SolrException.doIgnore(th, err);\n        if (ignoredMsg != null) {\n          sb.append(ignoredMsg);\n        } else {\n          sb.append(err);\n        }\n      }\n    }\n    \n    sb.append('\\n');\n    \n    /***\n     * Isn't core specific... prob better logged from zkController if (info !=\n     * null) { ClusterState clusterState = zkController.getClusterState(); if\n     * (info.clusterState != clusterState) { // something has changed in the\n     * matrix... sb.append(zkController.getBaseUrl() +\n     * \" sees new ClusterState:\"); } }\n     ***/\n    \n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f15af35d55d70c34451f9df5edeaeff6b31f8cbe","date":1519625627,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrLogLayout#_format(LoggingEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrLogLayout#_format(LoggingEvent).mjava","sourceNew":"  public String _format(LoggingEvent event) {\n    String message = (String) event.getMessage();\n    if (message == null) {\n      message = \"\";\n    }\n    StringBuilder sb = new StringBuilder(message.length() + 80);\n    \n    long now = event.timeStamp;\n    long timeFromStart = now - startTime;\n    long timeSinceLast = now - lastTime;\n    lastTime = now;\n    String shortClassName = getShortClassName(event.getLocationInformation().getClassName(),\n        event.getLocationInformation().getMethodName());\n    \n    /***\n     * sb.append(timeFromStart).append(' ').append(timeSinceLast);\n     * sb.append(' ');\n     * sb.append(record.getSourceClassName()).append('.').append(\n     * record.getSourceMethodName()); sb.append(' ');\n     * sb.append(record.getLevel());\n     ***/\n    \n    SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();\n\n    SolrCore core;\n    try (SolrQueryRequest req = (requestInfo == null) ? null : requestInfo.getReq()) {\n      core = (req == null) ? null : req.getCore();\n    }\n    ZkController zkController = null;\n    CoreInfo info = null;\n    \n    if (core != null) {\n      info = coreInfoMap.get(core.hashCode());\n      if (info == null) {\n        info = new CoreInfo();\n        info.shortId = \"C\" + Integer.toString(CoreInfo.maxCoreNum++);\n        coreInfoMap.put(core.hashCode(), info);\n        \n        if (sb.length() == 0) sb.append(\"ASYNC \");\n        sb.append(\" NEW_CORE \" + info.shortId);\n        sb.append(\" name=\" + core.getName());\n        sb.append(\" \" + core);\n      }\n\n      zkController = core.getCoreContainer().getZkController();\n      if (zkController != null) {\n        if (info.url == null) {\n          info.url = zkController.getBaseUrl() + \"/\" + core.getName();\n          sb.append(\" url=\" + info.url + \" node=\" + zkController.getNodeName());\n        }\n        \n        Map<String,Object> coreProps = getReplicaProps(zkController, core);\n        if (info.coreProps == null || !coreProps.equals(info.coreProps)) {\n          info.coreProps = coreProps;\n          final String corePropsString = \"coll:\"\n              + core.getCoreDescriptor().getCloudDescriptor()\n                  .getCollectionName() + \" core:\" + core.getName() + \" props:\"\n              + coreProps;\n          sb.append(\" \" + info.shortId + \"_STATE=\" + corePropsString);\n        }\n      }\n    }\n    \n    if (sb.length() > 0) sb.append('\\n');\n    sb.append(timeFromStart);\n\n    // sb.append(\"\\nL\").append(record.getSequenceNumber()); // log number is\n    // useful for sequencing when looking at multiple parts of a log file, but\n    // ms since start should be fine.\n    appendThread(sb, event);\n\n    appendMDC(sb);\n\n    // todo: should be able to get port from core container for non zk tests\n\n    if (info != null) {\n      sb.append(' ').append(info.shortId); // core\n    }\n\n    if (shortClassName.length() > 0) {\n      sb.append(' ').append(shortClassName);\n    }\n\n    if (event.getLevel() != Level.INFO) {\n      sb.append(' ').append(event.getLevel());\n    }\n    \n    sb.append(' ');\n    appendMultiLineString(sb, message);\n    ThrowableInformation thInfo = event.getThrowableInformation();\n    if (thInfo != null) {\n      Throwable th = event.getThrowableInformation().getThrowable();\n      if (th != null) {\n        sb.append(' ');\n        String err = SolrException.toStr(th);\n        String ignoredMsg = SolrException.doIgnore(th, err);\n        if (ignoredMsg != null) {\n          sb.append(ignoredMsg);\n        } else {\n          sb.append(err);\n        }\n      }\n    }\n    \n    sb.append('\\n');\n    \n    /***\n     * Isn't core specific... prob better logged from zkController if (info !=\n     * null) { ClusterState clusterState = zkController.getClusterState(); if\n     * (info.clusterState != clusterState) { // something has changed in the\n     * matrix... sb.append(zkController.getBaseUrl() +\n     * \" sees new ClusterState:\"); } }\n     ***/\n    \n    return sb.toString();\n  }\n\n","sourceOld":"  public String _format(LoggingEvent event) {\n    String message = (String) event.getMessage();\n    if (message == null) {\n      message = \"\";\n    }\n    StringBuilder sb = new StringBuilder(message.length() + 80);\n    \n    long now = event.timeStamp;\n    long timeFromStart = now - startTime;\n    long timeSinceLast = now - lastTime;\n    lastTime = now;\n    String shortClassName = getShortClassName(event.getLocationInformation().getClassName(),\n        event.getLocationInformation().getMethodName());\n    \n    /***\n     * sb.append(timeFromStart).append(' ').append(timeSinceLast);\n     * sb.append(' ');\n     * sb.append(record.getSourceClassName()).append('.').append(\n     * record.getSourceMethodName()); sb.append(' ');\n     * sb.append(record.getLevel());\n     ***/\n    \n    SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();\n    SolrQueryRequest req = requestInfo == null ? null : requestInfo.getReq();\n    SolrCore core = req == null ? null : req.getCore();\n    ZkController zkController = null;\n    CoreInfo info = null;\n    \n    if (core != null) {\n      info = coreInfoMap.get(core.hashCode());\n      if (info == null) {\n        info = new CoreInfo();\n        info.shortId = \"C\" + Integer.toString(CoreInfo.maxCoreNum++);\n        coreInfoMap.put(core.hashCode(), info);\n        \n        if (sb.length() == 0) sb.append(\"ASYNC \");\n        sb.append(\" NEW_CORE \" + info.shortId);\n        sb.append(\" name=\" + core.getName());\n        sb.append(\" \" + core);\n      }\n\n      zkController = core.getCoreContainer().getZkController();\n      if (zkController != null) {\n        if (info.url == null) {\n          info.url = zkController.getBaseUrl() + \"/\" + core.getName();\n          sb.append(\" url=\" + info.url + \" node=\" + zkController.getNodeName());\n        }\n        \n        Map<String,Object> coreProps = getReplicaProps(zkController, core);\n        if (info.coreProps == null || !coreProps.equals(info.coreProps)) {\n          info.coreProps = coreProps;\n          final String corePropsString = \"coll:\"\n              + core.getCoreDescriptor().getCloudDescriptor()\n                  .getCollectionName() + \" core:\" + core.getName() + \" props:\"\n              + coreProps;\n          sb.append(\" \" + info.shortId + \"_STATE=\" + corePropsString);\n        }\n      }\n    }\n    \n    if (sb.length() > 0) sb.append('\\n');\n    sb.append(timeFromStart);\n\n    // sb.append(\"\\nL\").append(record.getSequenceNumber()); // log number is\n    // useful for sequencing when looking at multiple parts of a log file, but\n    // ms since start should be fine.\n    appendThread(sb, event);\n\n    appendMDC(sb);\n\n    // todo: should be able to get port from core container for non zk tests\n\n    if (info != null) {\n      sb.append(' ').append(info.shortId); // core\n    }\n\n    if (shortClassName.length() > 0) {\n      sb.append(' ').append(shortClassName);\n    }\n\n    if (event.getLevel() != Level.INFO) {\n      sb.append(' ').append(event.getLevel());\n    }\n    \n    sb.append(' ');\n    appendMultiLineString(sb, message);\n    ThrowableInformation thInfo = event.getThrowableInformation();\n    if (thInfo != null) {\n      Throwable th = event.getThrowableInformation().getThrowable();\n      if (th != null) {\n        sb.append(' ');\n        String err = SolrException.toStr(th);\n        String ignoredMsg = SolrException.doIgnore(th, err);\n        if (ignoredMsg != null) {\n          sb.append(ignoredMsg);\n        } else {\n          sb.append(err);\n        }\n      }\n    }\n    \n    sb.append('\\n');\n    \n    /***\n     * Isn't core specific... prob better logged from zkController if (info !=\n     * null) { ClusterState clusterState = zkController.getClusterState(); if\n     * (info.clusterState != clusterState) { // something has changed in the\n     * matrix... sb.append(zkController.getBaseUrl() +\n     * \" sees new ClusterState:\"); } }\n     ***/\n    \n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93baf46bd12096e0de407258b3b32cfaaf58e448","date":1522030569,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrLogLayout#_format(LogEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrLogLayout#_format(LoggingEvent).mjava","sourceNew":"  public String _format(LogEvent event) {\n    String message = event.getMessage().getFormattedMessage();\n    if (message == null) {\n      message = \"\";\n    }\n    StringBuilder sb = new StringBuilder(message.length() + 80);\n    \n    long now = event.getTimeMillis();\n    long timeFromStart = now - startTime;\n    long timeSinceLast = now - lastTime;\n    lastTime = now;\n    String shortClassName = getShortClassName(event.getSource().getClassName(),\n        event.getSource().getMethodName());\n    \n    /***\n     * sb.append(timeFromStart).append(' ').append(timeSinceLast);\n     * sb.append(' ');\n     * sb.append(record.getSourceClassName()).append('.').append(\n     * record.getSourceMethodName()); sb.append(' ');\n     * sb.append(record.getLevel());\n     ***/\n    \n    SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();\n\n    SolrCore core;\n    try (SolrQueryRequest req = (requestInfo == null) ? null : requestInfo.getReq()) {\n      core = (req == null) ? null : req.getCore();\n    }\n    ZkController zkController = null;\n    CoreInfo info = null;\n    \n    if (core != null) {\n      info = coreInfoMap.get(core.hashCode());\n      if (info == null) {\n        info = new CoreInfo();\n        info.shortId = \"C\" + Integer.toString(CoreInfo.maxCoreNum++);\n        coreInfoMap.put(core.hashCode(), info);\n        \n        if (sb.length() == 0) sb.append(\"ASYNC \");\n        sb.append(\" NEW_CORE \" + info.shortId);\n        sb.append(\" name=\" + core.getName());\n        sb.append(\" \" + core);\n      }\n\n      zkController = core.getCoreContainer().getZkController();\n      if (zkController != null) {\n        if (info.url == null) {\n          info.url = zkController.getBaseUrl() + \"/\" + core.getName();\n          sb.append(\" url=\" + info.url + \" node=\" + zkController.getNodeName());\n        }\n        \n        Map<String,Object> coreProps = getReplicaProps(zkController, core);\n        if (info.coreProps == null || !coreProps.equals(info.coreProps)) {\n          info.coreProps = coreProps;\n          final String corePropsString = \"coll:\"\n              + core.getCoreDescriptor().getCloudDescriptor()\n                  .getCollectionName() + \" core:\" + core.getName() + \" props:\"\n              + coreProps;\n          sb.append(\" \" + info.shortId + \"_STATE=\" + corePropsString);\n        }\n      }\n    }\n    \n    if (sb.length() > 0) sb.append('\\n');\n    sb.append(timeFromStart);\n\n    // sb.append(\"\\nL\").append(record.getSequenceNumber()); // log number is\n    // useful for sequencing when looking at multiple parts of a log file, but\n    // ms since start should be fine.\n    appendThread(sb, event);\n\n    appendMDC(sb);\n\n    // todo: should be able to get port from core container for non zk tests\n\n    if (info != null) {\n      sb.append(' ').append(info.shortId); // core\n    }\n\n    if (shortClassName.length() > 0) {\n      sb.append(' ').append(shortClassName);\n    }\n\n    if (event.getLevel() != Level.INFO) {\n      sb.append(' ').append(event.getLevel());\n    }\n    \n    sb.append(' ');\n    appendMultiLineString(sb, message);\n    Throwable th = event.getThrown();\n    \n    if (th != null) {\n      sb.append(' ');\n      String err = SolrException.toStr(th);\n      String ignoredMsg = SolrException.doIgnore(th, err);\n      if (ignoredMsg != null) {\n        sb.append(ignoredMsg);\n      } else {\n        sb.append(err);\n      }\n    }\n    \n    \n    sb.append('\\n');\n    \n    /***\n     * Isn't core specific... prob better logged from zkController if (info !=\n     * null) { ClusterState clusterState = zkController.getClusterState(); if\n     * (info.clusterState != clusterState) { // something has changed in the\n     * matrix... sb.append(zkController.getBaseUrl() +\n     * \" sees new ClusterState:\"); } }\n     ***/\n    \n    return sb.toString();\n  }\n\n","sourceOld":"  public String _format(LoggingEvent event) {\n    String message = (String) event.getMessage();\n    if (message == null) {\n      message = \"\";\n    }\n    StringBuilder sb = new StringBuilder(message.length() + 80);\n    \n    long now = event.timeStamp;\n    long timeFromStart = now - startTime;\n    long timeSinceLast = now - lastTime;\n    lastTime = now;\n    String shortClassName = getShortClassName(event.getLocationInformation().getClassName(),\n        event.getLocationInformation().getMethodName());\n    \n    /***\n     * sb.append(timeFromStart).append(' ').append(timeSinceLast);\n     * sb.append(' ');\n     * sb.append(record.getSourceClassName()).append('.').append(\n     * record.getSourceMethodName()); sb.append(' ');\n     * sb.append(record.getLevel());\n     ***/\n    \n    SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();\n\n    SolrCore core;\n    try (SolrQueryRequest req = (requestInfo == null) ? null : requestInfo.getReq()) {\n      core = (req == null) ? null : req.getCore();\n    }\n    ZkController zkController = null;\n    CoreInfo info = null;\n    \n    if (core != null) {\n      info = coreInfoMap.get(core.hashCode());\n      if (info == null) {\n        info = new CoreInfo();\n        info.shortId = \"C\" + Integer.toString(CoreInfo.maxCoreNum++);\n        coreInfoMap.put(core.hashCode(), info);\n        \n        if (sb.length() == 0) sb.append(\"ASYNC \");\n        sb.append(\" NEW_CORE \" + info.shortId);\n        sb.append(\" name=\" + core.getName());\n        sb.append(\" \" + core);\n      }\n\n      zkController = core.getCoreContainer().getZkController();\n      if (zkController != null) {\n        if (info.url == null) {\n          info.url = zkController.getBaseUrl() + \"/\" + core.getName();\n          sb.append(\" url=\" + info.url + \" node=\" + zkController.getNodeName());\n        }\n        \n        Map<String,Object> coreProps = getReplicaProps(zkController, core);\n        if (info.coreProps == null || !coreProps.equals(info.coreProps)) {\n          info.coreProps = coreProps;\n          final String corePropsString = \"coll:\"\n              + core.getCoreDescriptor().getCloudDescriptor()\n                  .getCollectionName() + \" core:\" + core.getName() + \" props:\"\n              + coreProps;\n          sb.append(\" \" + info.shortId + \"_STATE=\" + corePropsString);\n        }\n      }\n    }\n    \n    if (sb.length() > 0) sb.append('\\n');\n    sb.append(timeFromStart);\n\n    // sb.append(\"\\nL\").append(record.getSequenceNumber()); // log number is\n    // useful for sequencing when looking at multiple parts of a log file, but\n    // ms since start should be fine.\n    appendThread(sb, event);\n\n    appendMDC(sb);\n\n    // todo: should be able to get port from core container for non zk tests\n\n    if (info != null) {\n      sb.append(' ').append(info.shortId); // core\n    }\n\n    if (shortClassName.length() > 0) {\n      sb.append(' ').append(shortClassName);\n    }\n\n    if (event.getLevel() != Level.INFO) {\n      sb.append(' ').append(event.getLevel());\n    }\n    \n    sb.append(' ');\n    appendMultiLineString(sb, message);\n    ThrowableInformation thInfo = event.getThrowableInformation();\n    if (thInfo != null) {\n      Throwable th = event.getThrowableInformation().getThrowable();\n      if (th != null) {\n        sb.append(' ');\n        String err = SolrException.toStr(th);\n        String ignoredMsg = SolrException.doIgnore(th, err);\n        if (ignoredMsg != null) {\n          sb.append(ignoredMsg);\n        } else {\n          sb.append(err);\n        }\n      }\n    }\n    \n    sb.append('\\n');\n    \n    /***\n     * Isn't core specific... prob better logged from zkController if (info !=\n     * null) { ClusterState clusterState = zkController.getClusterState(); if\n     * (info.clusterState != clusterState) { // something has changed in the\n     * matrix... sb.append(zkController.getBaseUrl() +\n     * \" sees new ClusterState:\"); } }\n     ***/\n    \n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f67a921f6ec5ab488ce397cf05f95fcd8ce631b6","date":1522059649,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrLogLayout#_format(LogEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrLogLayout#_format(LoggingEvent).mjava","sourceNew":"  public String _format(LogEvent event) {\n    String message = event.getMessage().getFormattedMessage();\n    if (message == null) {\n      message = \"\";\n    }\n    StringBuilder sb = new StringBuilder(message.length() + 80);\n    \n    long now = event.getTimeMillis();\n    long timeFromStart = now - startTime;\n    long timeSinceLast = now - lastTime;\n    lastTime = now;\n    String shortClassName = getShortClassName(event.getSource().getClassName(),\n        event.getSource().getMethodName());\n    \n    /***\n     * sb.append(timeFromStart).append(' ').append(timeSinceLast);\n     * sb.append(' ');\n     * sb.append(record.getSourceClassName()).append('.').append(\n     * record.getSourceMethodName()); sb.append(' ');\n     * sb.append(record.getLevel());\n     ***/\n    \n    SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();\n\n    SolrCore core;\n    try (SolrQueryRequest req = (requestInfo == null) ? null : requestInfo.getReq()) {\n      core = (req == null) ? null : req.getCore();\n    }\n    ZkController zkController = null;\n    CoreInfo info = null;\n    \n    if (core != null) {\n      info = coreInfoMap.get(core.hashCode());\n      if (info == null) {\n        info = new CoreInfo();\n        info.shortId = \"C\" + Integer.toString(CoreInfo.maxCoreNum++);\n        coreInfoMap.put(core.hashCode(), info);\n        \n        if (sb.length() == 0) sb.append(\"ASYNC \");\n        sb.append(\" NEW_CORE \" + info.shortId);\n        sb.append(\" name=\" + core.getName());\n        sb.append(\" \" + core);\n      }\n\n      zkController = core.getCoreContainer().getZkController();\n      if (zkController != null) {\n        if (info.url == null) {\n          info.url = zkController.getBaseUrl() + \"/\" + core.getName();\n          sb.append(\" url=\" + info.url + \" node=\" + zkController.getNodeName());\n        }\n        \n        Map<String,Object> coreProps = getReplicaProps(zkController, core);\n        if (info.coreProps == null || !coreProps.equals(info.coreProps)) {\n          info.coreProps = coreProps;\n          final String corePropsString = \"coll:\"\n              + core.getCoreDescriptor().getCloudDescriptor()\n                  .getCollectionName() + \" core:\" + core.getName() + \" props:\"\n              + coreProps;\n          sb.append(\" \" + info.shortId + \"_STATE=\" + corePropsString);\n        }\n      }\n    }\n    \n    if (sb.length() > 0) sb.append('\\n');\n    sb.append(timeFromStart);\n\n    // sb.append(\"\\nL\").append(record.getSequenceNumber()); // log number is\n    // useful for sequencing when looking at multiple parts of a log file, but\n    // ms since start should be fine.\n    appendThread(sb, event);\n\n    appendMDC(sb);\n\n    // todo: should be able to get port from core container for non zk tests\n\n    if (info != null) {\n      sb.append(' ').append(info.shortId); // core\n    }\n\n    if (shortClassName.length() > 0) {\n      sb.append(' ').append(shortClassName);\n    }\n\n    if (event.getLevel() != Level.INFO) {\n      sb.append(' ').append(event.getLevel());\n    }\n    \n    sb.append(' ');\n    appendMultiLineString(sb, message);\n    Throwable th = event.getThrown();\n    \n    if (th != null) {\n      sb.append(' ');\n      String err = SolrException.toStr(th);\n      String ignoredMsg = SolrException.doIgnore(th, err);\n      if (ignoredMsg != null) {\n        sb.append(ignoredMsg);\n      } else {\n        sb.append(err);\n      }\n    }\n    \n    \n    sb.append('\\n');\n    \n    /***\n     * Isn't core specific... prob better logged from zkController if (info !=\n     * null) { ClusterState clusterState = zkController.getClusterState(); if\n     * (info.clusterState != clusterState) { // something has changed in the\n     * matrix... sb.append(zkController.getBaseUrl() +\n     * \" sees new ClusterState:\"); } }\n     ***/\n    \n    return sb.toString();\n  }\n\n","sourceOld":"  public String _format(LoggingEvent event) {\n    String message = (String) event.getMessage();\n    if (message == null) {\n      message = \"\";\n    }\n    StringBuilder sb = new StringBuilder(message.length() + 80);\n    \n    long now = event.timeStamp;\n    long timeFromStart = now - startTime;\n    long timeSinceLast = now - lastTime;\n    lastTime = now;\n    String shortClassName = getShortClassName(event.getLocationInformation().getClassName(),\n        event.getLocationInformation().getMethodName());\n    \n    /***\n     * sb.append(timeFromStart).append(' ').append(timeSinceLast);\n     * sb.append(' ');\n     * sb.append(record.getSourceClassName()).append('.').append(\n     * record.getSourceMethodName()); sb.append(' ');\n     * sb.append(record.getLevel());\n     ***/\n    \n    SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();\n\n    SolrCore core;\n    try (SolrQueryRequest req = (requestInfo == null) ? null : requestInfo.getReq()) {\n      core = (req == null) ? null : req.getCore();\n    }\n    ZkController zkController = null;\n    CoreInfo info = null;\n    \n    if (core != null) {\n      info = coreInfoMap.get(core.hashCode());\n      if (info == null) {\n        info = new CoreInfo();\n        info.shortId = \"C\" + Integer.toString(CoreInfo.maxCoreNum++);\n        coreInfoMap.put(core.hashCode(), info);\n        \n        if (sb.length() == 0) sb.append(\"ASYNC \");\n        sb.append(\" NEW_CORE \" + info.shortId);\n        sb.append(\" name=\" + core.getName());\n        sb.append(\" \" + core);\n      }\n\n      zkController = core.getCoreContainer().getZkController();\n      if (zkController != null) {\n        if (info.url == null) {\n          info.url = zkController.getBaseUrl() + \"/\" + core.getName();\n          sb.append(\" url=\" + info.url + \" node=\" + zkController.getNodeName());\n        }\n        \n        Map<String,Object> coreProps = getReplicaProps(zkController, core);\n        if (info.coreProps == null || !coreProps.equals(info.coreProps)) {\n          info.coreProps = coreProps;\n          final String corePropsString = \"coll:\"\n              + core.getCoreDescriptor().getCloudDescriptor()\n                  .getCollectionName() + \" core:\" + core.getName() + \" props:\"\n              + coreProps;\n          sb.append(\" \" + info.shortId + \"_STATE=\" + corePropsString);\n        }\n      }\n    }\n    \n    if (sb.length() > 0) sb.append('\\n');\n    sb.append(timeFromStart);\n\n    // sb.append(\"\\nL\").append(record.getSequenceNumber()); // log number is\n    // useful for sequencing when looking at multiple parts of a log file, but\n    // ms since start should be fine.\n    appendThread(sb, event);\n\n    appendMDC(sb);\n\n    // todo: should be able to get port from core container for non zk tests\n\n    if (info != null) {\n      sb.append(' ').append(info.shortId); // core\n    }\n\n    if (shortClassName.length() > 0) {\n      sb.append(' ').append(shortClassName);\n    }\n\n    if (event.getLevel() != Level.INFO) {\n      sb.append(' ').append(event.getLevel());\n    }\n    \n    sb.append(' ');\n    appendMultiLineString(sb, message);\n    ThrowableInformation thInfo = event.getThrowableInformation();\n    if (thInfo != null) {\n      Throwable th = event.getThrowableInformation().getThrowable();\n      if (th != null) {\n        sb.append(' ');\n        String err = SolrException.toStr(th);\n        String ignoredMsg = SolrException.doIgnore(th, err);\n        if (ignoredMsg != null) {\n          sb.append(ignoredMsg);\n        } else {\n          sb.append(err);\n        }\n      }\n    }\n    \n    sb.append('\\n');\n    \n    /***\n     * Isn't core specific... prob better logged from zkController if (info !=\n     * null) { ClusterState clusterState = zkController.getClusterState(); if\n     * (info.clusterState != clusterState) { // something has changed in the\n     * matrix... sb.append(zkController.getBaseUrl() +\n     * \" sees new ClusterState:\"); } }\n     ***/\n    \n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["cb5af3afeddbb803fb785098176e6e177c34261b"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["cb5af3afeddbb803fb785098176e6e177c34261b"],"66c4027d3915ee5838b3049d0801f6789e5b5f8b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["9d3941bfa3eab67c480899f9699c6b829ac6f13b","dbf528c0e702c5cbd1339b2da1cdc823fd44a925"],"9d3941bfa3eab67c480899f9699c6b829ac6f13b":["b70207332b7bf7ed74c7241d74598d075109a78b"],"b70207332b7bf7ed74c7241d74598d075109a78b":["66c4027d3915ee5838b3049d0801f6789e5b5f8b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"93baf46bd12096e0de407258b3b32cfaaf58e448":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["b70207332b7bf7ed74c7241d74598d075109a78b","9d3941bfa3eab67c480899f9699c6b829ac6f13b"],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"cb5af3afeddbb803fb785098176e6e177c34261b":["dbf528c0e702c5cbd1339b2da1cdc823fd44a925"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f67a921f6ec5ab488ce397cf05f95fcd8ce631b6"],"dbf528c0e702c5cbd1339b2da1cdc823fd44a925":["9d3941bfa3eab67c480899f9699c6b829ac6f13b"],"f67a921f6ec5ab488ce397cf05f95fcd8ce631b6":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe","93baf46bd12096e0de407258b3b32cfaaf58e448"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe"],"66c4027d3915ee5838b3049d0801f6789e5b5f8b":["b70207332b7bf7ed74c7241d74598d075109a78b"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"9d3941bfa3eab67c480899f9699c6b829ac6f13b":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","74f45af4339b0daf7a95c820ab88c1aea74fbce0","dbf528c0e702c5cbd1339b2da1cdc823fd44a925"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["66c4027d3915ee5838b3049d0801f6789e5b5f8b"],"b70207332b7bf7ed74c7241d74598d075109a78b":["9d3941bfa3eab67c480899f9699c6b829ac6f13b","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"93baf46bd12096e0de407258b3b32cfaaf58e448":["f67a921f6ec5ab488ce397cf05f95fcd8ce631b6"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["93baf46bd12096e0de407258b3b32cfaaf58e448","f67a921f6ec5ab488ce397cf05f95fcd8ce631b6"],"cb5af3afeddbb803fb785098176e6e177c34261b":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"dbf528c0e702c5cbd1339b2da1cdc823fd44a925":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cb5af3afeddbb803fb785098176e6e177c34261b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f67a921f6ec5ab488ce397cf05f95fcd8ce631b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}