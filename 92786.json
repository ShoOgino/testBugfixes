{"path":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceUtils#haversine(double,double,double,double,double).mjava","commits":[{"id":"5f900d5ce814fc22ea498d3303d1f833f5bf320c","date":1278720761,"type":1,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceUtils#haversine(double,double,double,double,double).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/distance/DistanceUtils#haversine(double,double,double,double,double).mjava","sourceNew":"  /**\n   * @param x1     The x coordinate of the first point, in radians\n   * @param y1     The y coordinate of the first point, in radians\n   * @param x2     The x coordinate of the second point, in radians\n   * @param y2     The y coordinate of the second point, in radians\n   * @param radius The radius of the sphere\n   * @return The distance between the two points, as determined by the Haversine formula.\n\n   */\n  public static double haversine(double x1, double y1, double x2, double y2, double radius) {\n    double result = 0;\n    //make sure they aren't all the same, as then we can just return 0\n    if ((x1 != x2) || (y1 != y2)) {\n      double diffX = x1 - x2;\n      double diffY = y1 - y2;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinX * hsinX +\n              (Math.cos(x1) * Math.cos(x2) * hsinY * hsinY);\n      result = (radius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * @param x1     The x coordinate of the first point\n   * @param y1     The y coordinate of the first point\n   * @param x2     The x coordinate of the second point\n   * @param y2     The y coordinate of the second point\n   * @param radius The radius of the sphere\n   * @return The distance between the two points, as determined by the Haversine formula.\n   * @see org.apache.solr.search.function.distance.HaversineFunction\n   */\n  public static double haversine(double x1, double y1, double x2, double y2, double radius) {\n    double result = 0;\n    //make sure they aren't all the same, as then we can just return 0\n    if ((x1 != x2) || (y1 != y2)) {\n      double diffX = x1 - x2;\n      double diffY = y1 - y2;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinX * hsinX +\n              (Math.cos(x1) * Math.cos(x2) * hsinY * hsinY);\n      result = (radius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"459be89020f9023e3b60066066a892c7edb5de58","date":1279657074,"type":5,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/DistanceUtils#haversine(double,double,double,double,double).mjava","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceUtils#haversine(double,double,double,double,double).mjava","sourceNew":"  /**\n   * @param x1     The x coordinate of the first point, in radians\n   * @param y1     The y coordinate of the first point, in radians\n   * @param x2     The x coordinate of the second point, in radians\n   * @param y2     The y coordinate of the second point, in radians\n   * @param radius The radius of the sphere\n   * @return The distance between the two points, as determined by the Haversine formula.\n\n   */\n  public static double haversine(double x1, double y1, double x2, double y2, double radius) {\n    double result = 0;\n    //make sure they aren't all the same, as then we can just return 0\n    if ((x1 != x2) || (y1 != y2)) {\n      double diffX = x1 - x2;\n      double diffY = y1 - y2;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinX * hsinX +\n              (Math.cos(x1) * Math.cos(x2) * hsinY * hsinY);\n      result = (radius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * @param x1     The x coordinate of the first point, in radians\n   * @param y1     The y coordinate of the first point, in radians\n   * @param x2     The x coordinate of the second point, in radians\n   * @param y2     The y coordinate of the second point, in radians\n   * @param radius The radius of the sphere\n   * @return The distance between the two points, as determined by the Haversine formula.\n\n   */\n  public static double haversine(double x1, double y1, double x2, double y2, double radius) {\n    double result = 0;\n    //make sure they aren't all the same, as then we can just return 0\n    if ((x1 != x2) || (y1 != y2)) {\n      double diffX = x1 - x2;\n      double diffY = y1 - y2;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinX * hsinX +\n              (Math.cos(x1) * Math.cos(x2) * hsinY * hsinY);\n      result = (radius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"5f900d5ce814fc22ea498d3303d1f833f5bf320c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"459be89020f9023e3b60066066a892c7edb5de58":["5f900d5ce814fc22ea498d3303d1f833f5bf320c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["459be89020f9023e3b60066066a892c7edb5de58"]},"commit2Childs":{"5f900d5ce814fc22ea498d3303d1f833f5bf320c":["459be89020f9023e3b60066066a892c7edb5de58"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5f900d5ce814fc22ea498d3303d1f833f5bf320c"],"459be89020f9023e3b60066066a892c7edb5de58":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}