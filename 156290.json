{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupStream#toExpression(StreamFactory,boolean).mjava","commits":[{"id":"ba0c9792c0fa279d2914d72a5d3d4b3ce0e5fea7","date":1493327009,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupStream#toExpression(StreamFactory,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    return expression;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d43c6d0a8b813b1c64f24d3ba07a65cd4a19e792","date":1493430356,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupStream#toExpression(StreamFactory,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupStream#toExpression(StreamFactory,boolean).mjava","sourceNew":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // add string based params\n    for(Entry<String,String> param : stringParams.entrySet()){\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), param.getValue()));\n    }\n    \n    // add evaluator based params\n    for(Entry<String,StreamEvaluator> param : evaluatorParams.entrySet()){\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), param.getValue().toExpression(factory)));\n    }\n\n    // add stream based params\n    for(Entry<String,TupleStream> param : streamParams.entrySet()){\n      if(includeStreams){\n        expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), ((Expressible)param.getValue()).toExpression(factory)));\n      }\n      else{\n        expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), \"<stream>\"));\n      }\n    }\n\n    return expression;\n  }\n\n","sourceOld":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    return expression;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TupStream#toExpression(StreamFactory,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // add string based params\n    for(Entry<String,String> param : stringParams.entrySet()){\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), param.getValue()));\n    }\n    \n    // add evaluator based params\n    for(Entry<String,StreamEvaluator> param : evaluatorParams.entrySet()){\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), param.getValue().toExpression(factory)));\n    }\n\n    // add stream based params\n    for(Entry<String,TupleStream> param : streamParams.entrySet()){\n      if(includeStreams){\n        expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), ((Expressible)param.getValue()).toExpression(factory)));\n      }\n      else{\n        expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), \"<stream>\"));\n      }\n    }\n\n    return expression;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba0c9792c0fa279d2914d72a5d3d4b3ce0e5fea7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d43c6d0a8b813b1c64f24d3ba07a65cd4a19e792"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d43c6d0a8b813b1c64f24d3ba07a65cd4a19e792":["ba0c9792c0fa279d2914d72a5d3d4b3ce0e5fea7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d43c6d0a8b813b1c64f24d3ba07a65cd4a19e792"]},"commit2Childs":{"ba0c9792c0fa279d2914d72a5d3d4b3ce0e5fea7":["d43c6d0a8b813b1c64f24d3ba07a65cd4a19e792"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba0c9792c0fa279d2914d72a5d3d4b3ce0e5fea7","e9017cf144952056066919f1ebc7897ff9bd71b1"],"d43c6d0a8b813b1c64f24d3ba07a65cd4a19e792":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}