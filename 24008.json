{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionPropsTest.Watcher#onStateChanged(Map[String,String]).mjava","commits":[{"id":"de3459a54b4c8751d9ef19b035577e2418064be7","date":1520297996,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionPropsTest.Watcher#onStateChanged(Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public boolean onStateChanged(Map<String, String> collectionProperties) {\n      triggered.incrementAndGet();\n      final ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n      props = zkStateReader.getCollectionProperties(collectionName);\n      synchronized (this) {\n        notifyAll();\n      }\n\n\n      return false;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd2416e0666fe28e88bf4c6db287f44aa41518b8","date":1564790537,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionPropsTest.Watcher#onStateChanged(Map[String,String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionPropsTest.Watcher#onStateChanged(Map[String,String]).mjava","sourceNew":"    @Override\n    public boolean onStateChanged(Map<String, String> collectionProperties) {\n      log.info(\"{}: state changed...\", name);\n      if (forceReadPropsFromZk) {\n        final ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n        props = Collections.unmodifiableMap(new HashMap(zkStateReader.getCollectionProperties(collectionName)));\n        log.info(\"{}: Setting props from zk={}\", name, props);\n      } else {\n        props = Collections.unmodifiableMap(new HashMap(collectionProperties));\n        log.info(\"{}: Setting props from caller={}\", name, props);\n      }\n      \n      synchronized (this) {\n        triggered.incrementAndGet();\n        log.info(\"{}: notifying\", name);\n        notifyAll();\n      }\n\n      log.info(\"{}: done\", name);\n      return false;\n    }\n\n","sourceOld":"    @Override\n    public boolean onStateChanged(Map<String, String> collectionProperties) {\n      triggered.incrementAndGet();\n      final ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n      props = zkStateReader.getCollectionProperties(collectionName);\n      synchronized (this) {\n        notifyAll();\n      }\n\n\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionPropsTest.Watcher#onStateChanged(Map[String,String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionPropsTest.Watcher#onStateChanged(Map[String,String]).mjava","sourceNew":"    @Override\n    public boolean onStateChanged(Map<String, String> collectionProperties) {\n      log.info(\"{}: state changed...\", name);\n      if (forceReadPropsFromZk) {\n        final ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n        props = Collections.unmodifiableMap(new HashMap(zkStateReader.getCollectionProperties(collectionName)));\n        log.info(\"{}: Setting props from zk={}\", name, props);\n      } else {\n        props = Collections.unmodifiableMap(new HashMap(collectionProperties));\n        log.info(\"{}: Setting props from caller={}\", name, props);\n      }\n      \n      synchronized (this) {\n        triggered.incrementAndGet();\n        log.info(\"{}: notifying\", name);\n        notifyAll();\n      }\n\n      log.info(\"{}: done\", name);\n      return false;\n    }\n\n","sourceOld":"    @Override\n    public boolean onStateChanged(Map<String, String> collectionProperties) {\n      triggered.incrementAndGet();\n      final ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n      props = zkStateReader.getCollectionProperties(collectionName);\n      synchronized (this) {\n        notifyAll();\n      }\n\n\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan HÃ¸ydahl","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionPropsTest.Watcher#onStateChanged(Map[String,String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionPropsTest.Watcher#onStateChanged(Map[String,String]).mjava","sourceNew":"    @Override\n    public boolean onStateChanged(Map<String, String> collectionProperties) {\n      log.info(\"{}: state changed...\", name);\n      if (forceReadPropsFromZk) {\n        final ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n        props = Collections.unmodifiableMap(new HashMap(zkStateReader.getCollectionProperties(collectionName)));\n        log.info(\"{}: Setting props from zk={}\", name, props);\n      } else {\n        props = Collections.unmodifiableMap(new HashMap(collectionProperties));\n        log.info(\"{}: Setting props from caller={}\", name, props);\n      }\n      \n      synchronized (this) {\n        triggered.incrementAndGet();\n        log.info(\"{}: notifying\", name);\n        notifyAll();\n      }\n\n      log.info(\"{}: done\", name);\n      return false;\n    }\n\n","sourceOld":"    @Override\n    public boolean onStateChanged(Map<String, String> collectionProperties) {\n      triggered.incrementAndGet();\n      final ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n      props = zkStateReader.getCollectionProperties(collectionName);\n      synchronized (this) {\n        notifyAll();\n      }\n\n\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionPropsTest.Watcher#onStateChanged(Map[String,String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionPropsTest.Watcher#onStateChanged(Map[String,String]).mjava","sourceNew":"    @Override\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    public boolean onStateChanged(Map<String, String> collectionProperties) {\n      log.info(\"{}: state changed...\", name);\n      if (forceReadPropsFromZk) {\n        final ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n        props = Collections.unmodifiableMap(new HashMap(zkStateReader.getCollectionProperties(collectionName)));\n        log.info(\"{}: Setting props from zk={}\", name, props);\n      } else {\n        props = Collections.unmodifiableMap(new HashMap(collectionProperties));\n        log.info(\"{}: Setting props from caller={}\", name, props);\n      }\n      \n      synchronized (this) {\n        triggered.incrementAndGet();\n        log.info(\"{}: notifying\", name);\n        notifyAll();\n      }\n\n      log.info(\"{}: done\", name);\n      return false;\n    }\n\n","sourceOld":"    @Override\n    public boolean onStateChanged(Map<String, String> collectionProperties) {\n      log.info(\"{}: state changed...\", name);\n      if (forceReadPropsFromZk) {\n        final ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n        props = Collections.unmodifiableMap(new HashMap(zkStateReader.getCollectionProperties(collectionName)));\n        log.info(\"{}: Setting props from zk={}\", name, props);\n      } else {\n        props = Collections.unmodifiableMap(new HashMap(collectionProperties));\n        log.info(\"{}: Setting props from caller={}\", name, props);\n      }\n      \n      synchronized (this) {\n        triggered.incrementAndGet();\n        log.info(\"{}: notifying\", name);\n        notifyAll();\n      }\n\n      log.info(\"{}: done\", name);\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd2416e0666fe28e88bf4c6db287f44aa41518b8"],"cd2416e0666fe28e88bf4c6db287f44aa41518b8":["de3459a54b4c8751d9ef19b035577e2418064be7"],"de3459a54b4c8751d9ef19b035577e2418064be7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["de3459a54b4c8751d9ef19b035577e2418064be7","cd2416e0666fe28e88bf4c6db287f44aa41518b8"],"f8061ddd97f3352007d927dae445884a6f3d857b":["de3459a54b4c8751d9ef19b035577e2418064be7","cd2416e0666fe28e88bf4c6db287f44aa41518b8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"]},"commit2Childs":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd2416e0666fe28e88bf4c6db287f44aa41518b8":["aa2585c33d5d66a1c837c312221eb55ddb3c4300","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"de3459a54b4c8751d9ef19b035577e2418064be7":["cd2416e0666fe28e88bf4c6db287f44aa41518b8","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["de3459a54b4c8751d9ef19b035577e2418064be7"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}