{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree#comparePrefixLV(LevelledValue,LevelledValue).mjava","commits":[{"id":"8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093","date":1401932592,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree#comparePrefixLV(LevelledValue,LevelledValue).mjava","pathOld":"/dev/null","sourceNew":"  /** Compares a to b, returning less than 0, 0, or greater than 0, if a is less than, equal to, or\n   * greater than b, respectively. Only min(a.levels,b.levels) are compared.\n   * @lucene.internal */\n  protected static int comparePrefixLV(LevelledValue a, LevelledValue b) {\n    int minLevel = Math.min(a.getLevel(), b.getLevel());\n    for (int level = 1; level <= minLevel; level++) {\n      int diff = a.getValAtLevel(level) - b.getValAtLevel(level);\n      if (diff != 0)\n        return diff;\n    }\n    return 0;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb53c8e9da2afe33252ee698dda412264252cfa7","date":1418531581,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree#comparePrefix(UnitNRShape,UnitNRShape).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree#comparePrefixLV(LevelledValue,LevelledValue).mjava","sourceNew":"  /** Compares a to b, returning less than 0, 0, or greater than 0, if a is less than, equal to, or\n   * greater than b, respectively, up to their common prefix (i.e. only min(a.levels,b.levels) are compared).\n   * @lucene.internal */\n  protected static int comparePrefix(UnitNRShape a, UnitNRShape b) {\n    int minLevel = Math.min(a.getLevel(), b.getLevel());\n    for (int level = 1; level <= minLevel; level++) {\n      int diff = a.getValAtLevel(level) - b.getValAtLevel(level);\n      if (diff != 0)\n        return diff;\n    }\n    return 0;\n  }\n\n","sourceOld":"  /** Compares a to b, returning less than 0, 0, or greater than 0, if a is less than, equal to, or\n   * greater than b, respectively. Only min(a.levels,b.levels) are compared.\n   * @lucene.internal */\n  protected static int comparePrefixLV(LevelledValue a, LevelledValue b) {\n    int minLevel = Math.min(a.getLevel(), b.getLevel());\n    for (int level = 1; level <= minLevel; level++) {\n      int diff = a.getValAtLevel(level) - b.getValAtLevel(level);\n      if (diff != 0)\n        return diff;\n    }\n    return 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cb53c8e9da2afe33252ee698dda412264252cfa7"],"cb53c8e9da2afe33252ee698dda412264252cfa7":["8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093"],"8c36d4fb2bcf3eed4016cffc0d0e64e308cc9093":["cb53c8e9da2afe33252ee698dda412264252cfa7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"cb53c8e9da2afe33252ee698dda412264252cfa7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}