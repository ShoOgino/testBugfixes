{"path":"lucene/facet/src/test/org/apache/lucene/facet/old/TestScoredDocIDsUtils#testAllDocs().mjava","commits":[{"id":"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6","date":1375108983,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/old/TestScoredDocIDsUtils#testAllDocs().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#testAllDocs().mjava","sourceNew":"  @Test\n  public void testAllDocs() throws Exception {\n    int maxDoc = 3;\n    Directory dir = newDirectory();\n    IndexReader reader = createReaderWithNDocs(random(), maxDoc, dir);\n    try {\n      ScoredDocIDs all = ScoredDocIdsUtils.createAllDocsScoredDocIDs(reader);\n      assertEquals(\"invalid size\", maxDoc, all.size());\n      ScoredDocIDsIterator iter = all.iterator();\n      int doc = 0;\n      while (iter.next()) {\n        assertEquals(\"invalid doc ID: \" + iter.getDocID(), doc++, iter.getDocID());\n        assertEquals(\"invalid score: \" + iter.getScore(), ScoredDocIDsIterator.DEFAULT_SCORE, iter.getScore(), 0.0f);\n      }\n      assertEquals(\"invalid maxDoc: \" + doc, maxDoc, doc);\n      \n      DocIdSet docIDs = all.getDocIDs();\n      assertTrue(\"should be cacheable\", docIDs.isCacheable());\n      DocIdSetIterator docIDsIter = docIDs.iterator();\n      assertEquals(\"nextDoc() hasn't been called yet\", -1, docIDsIter.docID());\n      assertEquals(0, docIDsIter.nextDoc());\n      assertEquals(1, docIDsIter.advance(1));\n      // if advance is smaller than current doc, advance to cur+1.\n      assertEquals(2, docIDsIter.advance(0));\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAllDocs() throws Exception {\n    int maxDoc = 3;\n    Directory dir = newDirectory();\n    IndexReader reader = createReaderWithNDocs(random(), maxDoc, dir);\n    try {\n      ScoredDocIDs all = ScoredDocIdsUtils.createAllDocsScoredDocIDs(reader);\n      assertEquals(\"invalid size\", maxDoc, all.size());\n      ScoredDocIDsIterator iter = all.iterator();\n      int doc = 0;\n      while (iter.next()) {\n        assertEquals(\"invalid doc ID: \" + iter.getDocID(), doc++, iter.getDocID());\n        assertEquals(\"invalid score: \" + iter.getScore(), ScoredDocIDsIterator.DEFAULT_SCORE, iter.getScore(), 0.0f);\n      }\n      assertEquals(\"invalid maxDoc: \" + doc, maxDoc, doc);\n      \n      DocIdSet docIDs = all.getDocIDs();\n      assertTrue(\"should be cacheable\", docIDs.isCacheable());\n      DocIdSetIterator docIDsIter = docIDs.iterator();\n      assertEquals(\"nextDoc() hasn't been called yet\", -1, docIDsIter.docID());\n      assertEquals(0, docIDsIter.nextDoc());\n      assertEquals(1, docIDsIter.advance(1));\n      // if advance is smaller than current doc, advance to cur+1.\n      assertEquals(2, docIDsIter.advance(0));\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/old/TestScoredDocIDsUtils#testAllDocs().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#testAllDocs().mjava","sourceNew":"  @Test\n  public void testAllDocs() throws Exception {\n    int maxDoc = 3;\n    Directory dir = newDirectory();\n    IndexReader reader = createReaderWithNDocs(random(), maxDoc, dir);\n    try {\n      ScoredDocIDs all = ScoredDocIdsUtils.createAllDocsScoredDocIDs(reader);\n      assertEquals(\"invalid size\", maxDoc, all.size());\n      ScoredDocIDsIterator iter = all.iterator();\n      int doc = 0;\n      while (iter.next()) {\n        assertEquals(\"invalid doc ID: \" + iter.getDocID(), doc++, iter.getDocID());\n        assertEquals(\"invalid score: \" + iter.getScore(), ScoredDocIDsIterator.DEFAULT_SCORE, iter.getScore(), 0.0f);\n      }\n      assertEquals(\"invalid maxDoc: \" + doc, maxDoc, doc);\n      \n      DocIdSet docIDs = all.getDocIDs();\n      assertTrue(\"should be cacheable\", docIDs.isCacheable());\n      DocIdSetIterator docIDsIter = docIDs.iterator();\n      assertEquals(\"nextDoc() hasn't been called yet\", -1, docIDsIter.docID());\n      assertEquals(0, docIDsIter.nextDoc());\n      assertEquals(1, docIDsIter.advance(1));\n      // if advance is smaller than current doc, advance to cur+1.\n      assertEquals(2, docIDsIter.advance(0));\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAllDocs() throws Exception {\n    int maxDoc = 3;\n    Directory dir = newDirectory();\n    IndexReader reader = createReaderWithNDocs(random(), maxDoc, dir);\n    try {\n      ScoredDocIDs all = ScoredDocIdsUtils.createAllDocsScoredDocIDs(reader);\n      assertEquals(\"invalid size\", maxDoc, all.size());\n      ScoredDocIDsIterator iter = all.iterator();\n      int doc = 0;\n      while (iter.next()) {\n        assertEquals(\"invalid doc ID: \" + iter.getDocID(), doc++, iter.getDocID());\n        assertEquals(\"invalid score: \" + iter.getScore(), ScoredDocIDsIterator.DEFAULT_SCORE, iter.getScore(), 0.0f);\n      }\n      assertEquals(\"invalid maxDoc: \" + doc, maxDoc, doc);\n      \n      DocIdSet docIDs = all.getDocIDs();\n      assertTrue(\"should be cacheable\", docIDs.isCacheable());\n      DocIdSetIterator docIDsIter = docIDs.iterator();\n      assertEquals(\"nextDoc() hasn't been called yet\", -1, docIDsIter.docID());\n      assertEquals(0, docIDsIter.nextDoc());\n      assertEquals(1, docIDsIter.advance(1));\n      // if advance is smaller than current doc, advance to cur+1.\n      assertEquals(2, docIDsIter.advance(0));\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/old/TestScoredDocIDsUtils#testAllDocs().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testAllDocs() throws Exception {\n    int maxDoc = 3;\n    Directory dir = newDirectory();\n    IndexReader reader = createReaderWithNDocs(random(), maxDoc, dir);\n    try {\n      ScoredDocIDs all = ScoredDocIdsUtils.createAllDocsScoredDocIDs(reader);\n      assertEquals(\"invalid size\", maxDoc, all.size());\n      ScoredDocIDsIterator iter = all.iterator();\n      int doc = 0;\n      while (iter.next()) {\n        assertEquals(\"invalid doc ID: \" + iter.getDocID(), doc++, iter.getDocID());\n        assertEquals(\"invalid score: \" + iter.getScore(), ScoredDocIDsIterator.DEFAULT_SCORE, iter.getScore(), 0.0f);\n      }\n      assertEquals(\"invalid maxDoc: \" + doc, maxDoc, doc);\n      \n      DocIdSet docIDs = all.getDocIDs();\n      assertTrue(\"should be cacheable\", docIDs.isCacheable());\n      DocIdSetIterator docIDsIter = docIDs.iterator();\n      assertEquals(\"nextDoc() hasn't been called yet\", -1, docIDsIter.docID());\n      assertEquals(0, docIDsIter.nextDoc());\n      assertEquals(1, docIDsIter.advance(1));\n      // if advance is smaller than current doc, advance to cur+1.\n      assertEquals(2, docIDsIter.advance(0));\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/old/TestScoredDocIDsUtils#testAllDocs().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testAllDocs() throws Exception {\n    int maxDoc = 3;\n    Directory dir = newDirectory();\n    IndexReader reader = createReaderWithNDocs(random(), maxDoc, dir);\n    try {\n      ScoredDocIDs all = ScoredDocIdsUtils.createAllDocsScoredDocIDs(reader);\n      assertEquals(\"invalid size\", maxDoc, all.size());\n      ScoredDocIDsIterator iter = all.iterator();\n      int doc = 0;\n      while (iter.next()) {\n        assertEquals(\"invalid doc ID: \" + iter.getDocID(), doc++, iter.getDocID());\n        assertEquals(\"invalid score: \" + iter.getScore(), ScoredDocIDsIterator.DEFAULT_SCORE, iter.getScore(), 0.0f);\n      }\n      assertEquals(\"invalid maxDoc: \" + doc, maxDoc, doc);\n      \n      DocIdSet docIDs = all.getDocIDs();\n      assertTrue(\"should be cacheable\", docIDs.isCacheable());\n      DocIdSetIterator docIDsIter = docIDs.iterator();\n      assertEquals(\"nextDoc() hasn't been called yet\", -1, docIDsIter.docID());\n      assertEquals(0, docIDsIter.nextDoc());\n      assertEquals(1, docIDsIter.advance(1));\n      // if advance is smaller than current doc, advance to cur+1.\n      assertEquals(2, docIDsIter.advance(0));\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6","d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}