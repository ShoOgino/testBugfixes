{"path":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefHash#testGet().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefHash#testGet().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestBytesRefHash#testGet().mjava","sourceNew":"  /**\n   * Test method for\n   * {@link org.apache.lucene.util.BytesRefHash#get(org.apache.lucene.util.BytesRefHash.Entry)}\n   * .\n   */\n  @Test\n  public void testGet() {\n    BytesRef ref = new BytesRef();\n    BytesRef scratch = new BytesRef();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n      Map<String, Integer> strings = new HashMap<String, Integer>();\n      int uniqueCount = 0;\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = _TestUtil.randomRealisticUnicodeString(random, 1000);\n        } while (str.length() == 0);\n        ref.copyChars(str);\n        int count = hash.size();\n        int key = hash.add(ref);\n        if (key >= 0) {\n          assertNull(strings.put(str, Integer.valueOf(key)));\n          assertEquals(uniqueCount, key);\n          uniqueCount++;\n          assertEquals(hash.size(), count + 1);\n        } else {\n          assertTrue((-key)-1 < count);\n          assertEquals(hash.size(), count);\n        }\n      }\n      for (Entry<String, Integer> entry : strings.entrySet()) {\n        ref.copyChars(entry.getKey());\n        assertEquals(ref, hash.get(entry.getValue().intValue(), scratch));\n      }\n      hash.clear();\n      assertEquals(0, hash.size());\n      hash.reinit();\n    }\n  }\n\n","sourceOld":"  /**\n   * Test method for\n   * {@link org.apache.lucene.util.BytesRefHash#get(org.apache.lucene.util.BytesRefHash.Entry)}\n   * .\n   */\n  @Test\n  public void testGet() {\n    BytesRef ref = new BytesRef();\n    BytesRef scratch = new BytesRef();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n      Map<String, Integer> strings = new HashMap<String, Integer>();\n      int uniqueCount = 0;\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = _TestUtil.randomRealisticUnicodeString(random, 1000);\n        } while (str.length() == 0);\n        ref.copyChars(str);\n        int count = hash.size();\n        int key = hash.add(ref);\n        if (key >= 0) {\n          assertNull(strings.put(str, Integer.valueOf(key)));\n          assertEquals(uniqueCount, key);\n          uniqueCount++;\n          assertEquals(hash.size(), count + 1);\n        } else {\n          assertTrue((-key)-1 < count);\n          assertEquals(hash.size(), count);\n        }\n      }\n      for (Entry<String, Integer> entry : strings.entrySet()) {\n        ref.copyChars(entry.getKey());\n        assertEquals(ref, hash.get(entry.getValue().intValue(), scratch));\n      }\n      hash.clear();\n      assertEquals(0, hash.size());\n      hash.reinit();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefHash#testGet().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefHash#testGet().mjava","sourceNew":"  /**\n   * Test method for\n   * {@link org.apache.lucene.util.BytesRefHash#get(org.apache.lucene.util.BytesRefHash.Entry)}\n   * .\n   */\n  @Test\n  public void testGet() {\n    BytesRef ref = new BytesRef();\n    BytesRef scratch = new BytesRef();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n      Map<String, Integer> strings = new HashMap<String, Integer>();\n      int uniqueCount = 0;\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = _TestUtil.randomRealisticUnicodeString(random(), 1000);\n        } while (str.length() == 0);\n        ref.copyChars(str);\n        int count = hash.size();\n        int key = hash.add(ref);\n        if (key >= 0) {\n          assertNull(strings.put(str, Integer.valueOf(key)));\n          assertEquals(uniqueCount, key);\n          uniqueCount++;\n          assertEquals(hash.size(), count + 1);\n        } else {\n          assertTrue((-key)-1 < count);\n          assertEquals(hash.size(), count);\n        }\n      }\n      for (Entry<String, Integer> entry : strings.entrySet()) {\n        ref.copyChars(entry.getKey());\n        assertEquals(ref, hash.get(entry.getValue().intValue(), scratch));\n      }\n      hash.clear();\n      assertEquals(0, hash.size());\n      hash.reinit();\n    }\n  }\n\n","sourceOld":"  /**\n   * Test method for\n   * {@link org.apache.lucene.util.BytesRefHash#get(org.apache.lucene.util.BytesRefHash.Entry)}\n   * .\n   */\n  @Test\n  public void testGet() {\n    BytesRef ref = new BytesRef();\n    BytesRef scratch = new BytesRef();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n      Map<String, Integer> strings = new HashMap<String, Integer>();\n      int uniqueCount = 0;\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = _TestUtil.randomRealisticUnicodeString(random, 1000);\n        } while (str.length() == 0);\n        ref.copyChars(str);\n        int count = hash.size();\n        int key = hash.add(ref);\n        if (key >= 0) {\n          assertNull(strings.put(str, Integer.valueOf(key)));\n          assertEquals(uniqueCount, key);\n          uniqueCount++;\n          assertEquals(hash.size(), count + 1);\n        } else {\n          assertTrue((-key)-1 < count);\n          assertEquals(hash.size(), count);\n        }\n      }\n      for (Entry<String, Integer> entry : strings.entrySet()) {\n        ref.copyChars(entry.getKey());\n        assertEquals(ref, hash.get(entry.getValue().intValue(), scratch));\n      }\n      hash.clear();\n      assertEquals(0, hash.size());\n      hash.reinit();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bd9ddb59e9d33950773d186a8b726b5610ae3aad","date":1341258232,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefHash#testGet().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefHash#testGet().mjava","sourceNew":"  /**\n   * Test method for\n   * {@link org.apache.lucene.util.BytesRefHash#get(int, BytesRef)}\n   * .\n   */\n  @Test\n  public void testGet() {\n    BytesRef ref = new BytesRef();\n    BytesRef scratch = new BytesRef();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n      Map<String, Integer> strings = new HashMap<String, Integer>();\n      int uniqueCount = 0;\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = _TestUtil.randomRealisticUnicodeString(random(), 1000);\n        } while (str.length() == 0);\n        ref.copyChars(str);\n        int count = hash.size();\n        int key = hash.add(ref);\n        if (key >= 0) {\n          assertNull(strings.put(str, Integer.valueOf(key)));\n          assertEquals(uniqueCount, key);\n          uniqueCount++;\n          assertEquals(hash.size(), count + 1);\n        } else {\n          assertTrue((-key)-1 < count);\n          assertEquals(hash.size(), count);\n        }\n      }\n      for (Entry<String, Integer> entry : strings.entrySet()) {\n        ref.copyChars(entry.getKey());\n        assertEquals(ref, hash.get(entry.getValue().intValue(), scratch));\n      }\n      hash.clear();\n      assertEquals(0, hash.size());\n      hash.reinit();\n    }\n  }\n\n","sourceOld":"  /**\n   * Test method for\n   * {@link org.apache.lucene.util.BytesRefHash#get(org.apache.lucene.util.BytesRefHash.Entry)}\n   * .\n   */\n  @Test\n  public void testGet() {\n    BytesRef ref = new BytesRef();\n    BytesRef scratch = new BytesRef();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n      Map<String, Integer> strings = new HashMap<String, Integer>();\n      int uniqueCount = 0;\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = _TestUtil.randomRealisticUnicodeString(random(), 1000);\n        } while (str.length() == 0);\n        ref.copyChars(str);\n        int count = hash.size();\n        int key = hash.add(ref);\n        if (key >= 0) {\n          assertNull(strings.put(str, Integer.valueOf(key)));\n          assertEquals(uniqueCount, key);\n          uniqueCount++;\n          assertEquals(hash.size(), count + 1);\n        } else {\n          assertTrue((-key)-1 < count);\n          assertEquals(hash.size(), count);\n        }\n      }\n      for (Entry<String, Integer> entry : strings.entrySet()) {\n        ref.copyChars(entry.getKey());\n        assertEquals(ref, hash.get(entry.getValue().intValue(), scratch));\n      }\n      hash.clear();\n      assertEquals(0, hash.size());\n      hash.reinit();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefHash#testGet().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefHash#testGet().mjava","sourceNew":"  /**\n   * Test method for\n   * {@link org.apache.lucene.util.BytesRefHash#get(int, BytesRef)}\n   * .\n   */\n  @Test\n  public void testGet() {\n    BytesRef ref = new BytesRef();\n    BytesRef scratch = new BytesRef();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n      Map<String, Integer> strings = new HashMap<String, Integer>();\n      int uniqueCount = 0;\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = _TestUtil.randomRealisticUnicodeString(random(), 1000);\n        } while (str.length() == 0);\n        ref.copyChars(str);\n        int count = hash.size();\n        int key = hash.add(ref);\n        if (key >= 0) {\n          assertNull(strings.put(str, Integer.valueOf(key)));\n          assertEquals(uniqueCount, key);\n          uniqueCount++;\n          assertEquals(hash.size(), count + 1);\n        } else {\n          assertTrue((-key)-1 < count);\n          assertEquals(hash.size(), count);\n        }\n      }\n      for (Entry<String, Integer> entry : strings.entrySet()) {\n        ref.copyChars(entry.getKey());\n        assertEquals(ref, hash.get(entry.getValue().intValue(), scratch));\n      }\n      hash.clear();\n      assertEquals(0, hash.size());\n      hash.reinit();\n    }\n  }\n\n","sourceOld":"  /**\n   * Test method for\n   * {@link org.apache.lucene.util.BytesRefHash#get(org.apache.lucene.util.BytesRefHash.Entry)}\n   * .\n   */\n  @Test\n  public void testGet() {\n    BytesRef ref = new BytesRef();\n    BytesRef scratch = new BytesRef();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n      Map<String, Integer> strings = new HashMap<String, Integer>();\n      int uniqueCount = 0;\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = _TestUtil.randomRealisticUnicodeString(random(), 1000);\n        } while (str.length() == 0);\n        ref.copyChars(str);\n        int count = hash.size();\n        int key = hash.add(ref);\n        if (key >= 0) {\n          assertNull(strings.put(str, Integer.valueOf(key)));\n          assertEquals(uniqueCount, key);\n          uniqueCount++;\n          assertEquals(hash.size(), count + 1);\n        } else {\n          assertTrue((-key)-1 < count);\n          assertEquals(hash.size(), count);\n        }\n      }\n      for (Entry<String, Integer> entry : strings.entrySet()) {\n        ref.copyChars(entry.getKey());\n        assertEquals(ref, hash.get(entry.getValue().intValue(), scratch));\n      }\n      hash.clear();\n      assertEquals(0, hash.size());\n      hash.reinit();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefHash#testGet().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefHash#testGet().mjava","sourceNew":"  /**\n   * Test method for\n   * {@link org.apache.lucene.util.BytesRefHash#get(int, BytesRef)}\n   * .\n   */\n  @Test\n  public void testGet() {\n    BytesRef ref = new BytesRef();\n    BytesRef scratch = new BytesRef();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n      Map<String, Integer> strings = new HashMap<String, Integer>();\n      int uniqueCount = 0;\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = TestUtil.randomRealisticUnicodeString(random(), 1000);\n        } while (str.length() == 0);\n        ref.copyChars(str);\n        int count = hash.size();\n        int key = hash.add(ref);\n        if (key >= 0) {\n          assertNull(strings.put(str, Integer.valueOf(key)));\n          assertEquals(uniqueCount, key);\n          uniqueCount++;\n          assertEquals(hash.size(), count + 1);\n        } else {\n          assertTrue((-key)-1 < count);\n          assertEquals(hash.size(), count);\n        }\n      }\n      for (Entry<String, Integer> entry : strings.entrySet()) {\n        ref.copyChars(entry.getKey());\n        assertEquals(ref, hash.get(entry.getValue().intValue(), scratch));\n      }\n      hash.clear();\n      assertEquals(0, hash.size());\n      hash.reinit();\n    }\n  }\n\n","sourceOld":"  /**\n   * Test method for\n   * {@link org.apache.lucene.util.BytesRefHash#get(int, BytesRef)}\n   * .\n   */\n  @Test\n  public void testGet() {\n    BytesRef ref = new BytesRef();\n    BytesRef scratch = new BytesRef();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n      Map<String, Integer> strings = new HashMap<String, Integer>();\n      int uniqueCount = 0;\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = _TestUtil.randomRealisticUnicodeString(random(), 1000);\n        } while (str.length() == 0);\n        ref.copyChars(str);\n        int count = hash.size();\n        int key = hash.add(ref);\n        if (key >= 0) {\n          assertNull(strings.put(str, Integer.valueOf(key)));\n          assertEquals(uniqueCount, key);\n          uniqueCount++;\n          assertEquals(hash.size(), count + 1);\n        } else {\n          assertTrue((-key)-1 < count);\n          assertEquals(hash.size(), count);\n        }\n      }\n      for (Entry<String, Integer> entry : strings.entrySet()) {\n        ref.copyChars(entry.getKey());\n        assertEquals(ref, hash.get(entry.getValue().intValue(), scratch));\n      }\n      hash.clear();\n      assertEquals(0, hash.size());\n      hash.reinit();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefHash#testGet().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefHash#testGet().mjava","sourceNew":"  /**\n   * Test method for\n   * {@link org.apache.lucene.util.BytesRefHash#get(int, BytesRef)}\n   * .\n   */\n  @Test\n  public void testGet() {\n    BytesRef ref = new BytesRef();\n    BytesRef scratch = new BytesRef();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n      Map<String, Integer> strings = new HashMap<>();\n      int uniqueCount = 0;\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = TestUtil.randomRealisticUnicodeString(random(), 1000);\n        } while (str.length() == 0);\n        ref.copyChars(str);\n        int count = hash.size();\n        int key = hash.add(ref);\n        if (key >= 0) {\n          assertNull(strings.put(str, Integer.valueOf(key)));\n          assertEquals(uniqueCount, key);\n          uniqueCount++;\n          assertEquals(hash.size(), count + 1);\n        } else {\n          assertTrue((-key)-1 < count);\n          assertEquals(hash.size(), count);\n        }\n      }\n      for (Entry<String, Integer> entry : strings.entrySet()) {\n        ref.copyChars(entry.getKey());\n        assertEquals(ref, hash.get(entry.getValue().intValue(), scratch));\n      }\n      hash.clear();\n      assertEquals(0, hash.size());\n      hash.reinit();\n    }\n  }\n\n","sourceOld":"  /**\n   * Test method for\n   * {@link org.apache.lucene.util.BytesRefHash#get(int, BytesRef)}\n   * .\n   */\n  @Test\n  public void testGet() {\n    BytesRef ref = new BytesRef();\n    BytesRef scratch = new BytesRef();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n      Map<String, Integer> strings = new HashMap<String, Integer>();\n      int uniqueCount = 0;\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = TestUtil.randomRealisticUnicodeString(random(), 1000);\n        } while (str.length() == 0);\n        ref.copyChars(str);\n        int count = hash.size();\n        int key = hash.add(ref);\n        if (key >= 0) {\n          assertNull(strings.put(str, Integer.valueOf(key)));\n          assertEquals(uniqueCount, key);\n          uniqueCount++;\n          assertEquals(hash.size(), count + 1);\n        } else {\n          assertTrue((-key)-1 < count);\n          assertEquals(hash.size(), count);\n        }\n      }\n      for (Entry<String, Integer> entry : strings.entrySet()) {\n        ref.copyChars(entry.getKey());\n        assertEquals(ref, hash.get(entry.getValue().intValue(), scratch));\n      }\n      hash.clear();\n      assertEquals(0, hash.size());\n      hash.reinit();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefHash#testGet().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestBytesRefHash#testGet().mjava","sourceNew":"  /**\n   * Test method for\n   * {@link org.apache.lucene.util.BytesRefHash#get(int, BytesRef)}\n   * .\n   */\n  @Test\n  public void testGet() {\n    BytesRefBuilder ref = new BytesRefBuilder();\n    BytesRef scratch = new BytesRef();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n      Map<String, Integer> strings = new HashMap<>();\n      int uniqueCount = 0;\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = TestUtil.randomRealisticUnicodeString(random(), 1000);\n        } while (str.length() == 0);\n        ref.copyChars(str);\n        int count = hash.size();\n        int key = hash.add(ref.get());\n        if (key >= 0) {\n          assertNull(strings.put(str, Integer.valueOf(key)));\n          assertEquals(uniqueCount, key);\n          uniqueCount++;\n          assertEquals(hash.size(), count + 1);\n        } else {\n          assertTrue((-key)-1 < count);\n          assertEquals(hash.size(), count);\n        }\n      }\n      for (Entry<String, Integer> entry : strings.entrySet()) {\n        ref.copyChars(entry.getKey());\n        assertEquals(ref.get(), hash.get(entry.getValue().intValue(), scratch));\n      }\n      hash.clear();\n      assertEquals(0, hash.size());\n      hash.reinit();\n    }\n  }\n\n","sourceOld":"  /**\n   * Test method for\n   * {@link org.apache.lucene.util.BytesRefHash#get(int, BytesRef)}\n   * .\n   */\n  @Test\n  public void testGet() {\n    BytesRef ref = new BytesRef();\n    BytesRef scratch = new BytesRef();\n    int num = atLeast(2);\n    for (int j = 0; j < num; j++) {\n      Map<String, Integer> strings = new HashMap<>();\n      int uniqueCount = 0;\n      for (int i = 0; i < 797; i++) {\n        String str;\n        do {\n          str = TestUtil.randomRealisticUnicodeString(random(), 1000);\n        } while (str.length() == 0);\n        ref.copyChars(str);\n        int count = hash.size();\n        int key = hash.add(ref);\n        if (key >= 0) {\n          assertNull(strings.put(str, Integer.valueOf(key)));\n          assertEquals(uniqueCount, key);\n          uniqueCount++;\n          assertEquals(hash.size(), count + 1);\n        } else {\n          assertTrue((-key)-1 < count);\n          assertEquals(hash.size(), count);\n        }\n      }\n      for (Entry<String, Integer> entry : strings.entrySet()) {\n        ref.copyChars(entry.getKey());\n        assertEquals(ref, hash.get(entry.getValue().intValue(), scratch));\n      }\n      hash.clear();\n      assertEquals(0, hash.size());\n      hash.reinit();\n    }\n  }\n\n","bugFix":["fb189bc11e1880ca8686216e1af74536edab3b1c","5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6613659748fe4411a7dcf85266e55db1f95f7315"],"bd9ddb59e9d33950773d186a8b726b5610ae3aad":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"6613659748fe4411a7dcf85266e55db1f95f7315":["bd9ddb59e9d33950773d186a8b726b5610ae3aad"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","bd9ddb59e9d33950773d186a8b726b5610ae3aad"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"bd9ddb59e9d33950773d186a8b726b5610ae3aad":["6613659748fe4411a7dcf85266e55db1f95f7315","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"6613659748fe4411a7dcf85266e55db1f95f7315":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["bd9ddb59e9d33950773d186a8b726b5610ae3aad","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}