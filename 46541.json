{"path":"lucene/core/src/test/org/apache/lucene/util/TestRamUsageEstimator#testCollection().mjava","commits":[{"id":"fe90d104db258964b96e50418b9caa0c156eafda","date":1561555614,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestRamUsageEstimator#testCollection().mjava","pathOld":"/dev/null","sourceNew":"  public void testCollection() {\n    List<Object> list = new ArrayList<>();\n    list.add(1234L);\n    list.add(\"string\");\n    list.add(new Term(\"foo\", \"bar\"));\n    long actual = sizeOf(list);\n    long estimated = RamUsageEstimator.sizeOfObject(list);\n    assertEquals(actual, estimated);\n\n    // test recursion\n    list.clear();\n    list.add(1234L);\n    list.add(list);\n    actual = sizeOf(list);\n    estimated = RamUsageEstimator.sizeOfObject(list);\n    assertEquals(actual + RamUsageEstimator.shallowSizeOf(list), estimated);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0633445968876e74a19e422a3a955ca6e00ad0da","date":1561710807,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestRamUsageEstimator#testCollection().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestRamUsageEstimator#testCollection().mjava","sourceNew":"  public void testCollection() {\n    List<Object> list = new ArrayList<>();\n    list.add(1234L);\n    list.add(\"string\");\n    for (int i = 0; i < 100; i++) {\n      list.add(new Term(\"foo \" + i, \"term \" + i));\n    }\n    long actual = sizeOf(list);\n    long estimated = RamUsageEstimator.sizeOfObject(list);\n    assertEquals((double)actual, (double)estimated, (double)actual * 0.1);\n\n    // test recursion\n    list.add(list);\n    actual = sizeOf(list);\n    estimated = RamUsageEstimator.sizeOfObject(list);\n    assertEquals((double)actual, (double)estimated, (double)actual * 0.1);\n  }\n\n","sourceOld":"  public void testCollection() {\n    List<Object> list = new ArrayList<>();\n    list.add(1234L);\n    list.add(\"string\");\n    list.add(new Term(\"foo\", \"bar\"));\n    long actual = sizeOf(list);\n    long estimated = RamUsageEstimator.sizeOfObject(list);\n    assertEquals(actual, estimated);\n\n    // test recursion\n    list.clear();\n    list.add(1234L);\n    list.add(list);\n    actual = sizeOf(list);\n    estimated = RamUsageEstimator.sizeOfObject(list);\n    assertEquals(actual + RamUsageEstimator.shallowSizeOf(list), estimated);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0633445968876e74a19e422a3a955ca6e00ad0da":["fe90d104db258964b96e50418b9caa0c156eafda"],"fe90d104db258964b96e50418b9caa0c156eafda":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0633445968876e74a19e422a3a955ca6e00ad0da"]},"commit2Childs":{"0633445968876e74a19e422a3a955ca6e00ad0da":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe90d104db258964b96e50418b9caa0c156eafda":["0633445968876e74a19e422a3a955ca6e00ad0da"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fe90d104db258964b96e50418b9caa0c156eafda"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}