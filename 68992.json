{"path":"lucene/queries/src/java/org/apache/lucene/queries/TermsFilter#equals(Object).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/TermsFilter#equals(Object).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/TermsFilter#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj) {\n      return true;\n    }\n    if ((obj == null) || (obj.getClass() != this.getClass())) {\n      return false;\n    }\n\n    TermsFilter test = (TermsFilter) obj;\n    return (terms == test.terms ||\n        (terms != null && terms.equals(test.terms)));\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj) {\n      return true;\n    }\n    if ((obj == null) || (obj.getClass() != this.getClass())) {\n      return false;\n    }\n\n    TermsFilter test = (TermsFilter) obj;\n    return (terms == test.terms ||\n        (terms != null && terms.equals(test.terms)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4107dd39b127d892359c5c1d67d0f14d92f1a9bf","date":1351689723,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/TermsFilter#equals(Object).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/TermsFilter#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj) {\n      return true;\n    }\n    if ((obj == null) || (obj.getClass() != this.getClass())) {\n      return false;\n    }\n    \n    TermsFilter test = (TermsFilter) obj;\n    if (test.hashCode == hashCode && this.termsAndFields.length == test.termsAndFields.length) {\n      // first check the fields before even comparing the bytes\n      for (int i = 0; i < termsAndFields.length; i++) {\n        TermsAndField current = termsAndFields[i];\n        if (!current.equals(test.termsAndFields[i])) {\n          return false;\n        }\n      }\n      // straight byte comparison since we sort they must be identical\n      int end = offsets[termsAndFields.length];\n      byte[] left = this.termsBytes;\n      byte[] right = test.termsBytes;\n      for(int i=0;i < end;i++) {\n        if (left[i] != right[i]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj) {\n      return true;\n    }\n    if ((obj == null) || (obj.getClass() != this.getClass())) {\n      return false;\n    }\n\n    TermsFilter test = (TermsFilter) obj;\n    return (terms == test.terms ||\n        (terms != null && terms.equals(test.terms)));\n  }\n\n","bugFix":["e141595402370bee958745de8b1c9de1fa182581"],"bugIntro":["dc5ed460ebaaf11698c901fe109e5d382145964d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dc5ed460ebaaf11698c901fe109e5d382145964d","date":1394525988,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/TermsFilter#equals(Object).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/TermsFilter#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj) {\n      return true;\n    }\n    if ((obj == null) || (obj.getClass() != this.getClass())) {\n      return false;\n    }\n    \n    TermsFilter test = (TermsFilter) obj;\n    // first check the fields before even comparing the bytes\n    if (test.hashCode == hashCode && Arrays.equals(termsAndFields, test.termsAndFields)) {\n      int lastOffset = termsAndFields[termsAndFields.length - 1].end;\n      // compare offsets since we sort they must be identical\n      if (ArrayUtil.equals(offsets, 0, test.offsets, 0, lastOffset + 1)) {\n        // straight byte comparison since we sort they must be identical\n        return  ArrayUtil.equals(termsBytes, 0, test.termsBytes, 0, offsets[lastOffset]);\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj) {\n      return true;\n    }\n    if ((obj == null) || (obj.getClass() != this.getClass())) {\n      return false;\n    }\n    \n    TermsFilter test = (TermsFilter) obj;\n    if (test.hashCode == hashCode && this.termsAndFields.length == test.termsAndFields.length) {\n      // first check the fields before even comparing the bytes\n      for (int i = 0; i < termsAndFields.length; i++) {\n        TermsAndField current = termsAndFields[i];\n        if (!current.equals(test.termsAndFields[i])) {\n          return false;\n        }\n      }\n      // straight byte comparison since we sort they must be identical\n      int end = offsets[termsAndFields.length];\n      byte[] left = this.termsBytes;\n      byte[] right = test.termsBytes;\n      for(int i=0;i < end;i++) {\n        if (left[i] != right[i]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":["4107dd39b127d892359c5c1d67d0f14d92f1a9bf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","date":1394564625,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/TermsFilter#equals(Object).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/TermsFilter#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj) {\n      return true;\n    }\n    if ((obj == null) || (obj.getClass() != this.getClass())) {\n      return false;\n    }\n    \n    TermsFilter test = (TermsFilter) obj;\n    // first check the fields before even comparing the bytes\n    if (test.hashCode == hashCode && Arrays.equals(termsAndFields, test.termsAndFields)) {\n      int lastOffset = termsAndFields[termsAndFields.length - 1].end;\n      // compare offsets since we sort they must be identical\n      if (ArrayUtil.equals(offsets, 0, test.offsets, 0, lastOffset + 1)) {\n        // straight byte comparison since we sort they must be identical\n        return  ArrayUtil.equals(termsBytes, 0, test.termsBytes, 0, offsets[lastOffset]);\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj) {\n      return true;\n    }\n    if ((obj == null) || (obj.getClass() != this.getClass())) {\n      return false;\n    }\n    \n    TermsFilter test = (TermsFilter) obj;\n    if (test.hashCode == hashCode && this.termsAndFields.length == test.termsAndFields.length) {\n      // first check the fields before even comparing the bytes\n      for (int i = 0; i < termsAndFields.length; i++) {\n        TermsAndField current = termsAndFields[i];\n        if (!current.equals(test.termsAndFields[i])) {\n          return false;\n        }\n      }\n      // straight byte comparison since we sort they must be identical\n      int end = offsets[termsAndFields.length];\n      byte[] left = this.termsBytes;\n      byte[] right = test.termsBytes;\n      for(int i=0;i < end;i++) {\n        if (left[i] != right[i]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2042d3e27841c5b60112990fc33559e10ccf6dd","date":1424537395,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/TermsQuery#equals(Object).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/TermsFilter#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj) {\n      return true;\n    }\n    if ((obj == null) || (obj.getClass() != this.getClass())) {\n      return false;\n    }\n\n    TermsQuery that = (TermsQuery) obj;\n    // first check the fields before even comparing the bytes\n    if (that.hashCode == hashCode && getBoost() == that.getBoost() && Arrays.equals(termsAndFields, that.termsAndFields)) {\n      int lastOffset = termsAndFields[termsAndFields.length - 1].end;\n      // compare offsets since we sort they must be identical\n      if (ArrayUtil.equals(offsets, 0, that.offsets, 0, lastOffset + 1)) {\n        // straight byte comparison since we sort they must be identical\n        return  ArrayUtil.equals(termsBytes, 0, that.termsBytes, 0, offsets[lastOffset]);\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj) {\n      return true;\n    }\n    if ((obj == null) || (obj.getClass() != this.getClass())) {\n      return false;\n    }\n    \n    TermsFilter test = (TermsFilter) obj;\n    // first check the fields before even comparing the bytes\n    if (test.hashCode == hashCode && Arrays.equals(termsAndFields, test.termsAndFields)) {\n      int lastOffset = termsAndFields[termsAndFields.length - 1].end;\n      // compare offsets since we sort they must be identical\n      if (ArrayUtil.equals(offsets, 0, test.offsets, 0, lastOffset + 1)) {\n        // straight byte comparison since we sort they must be identical\n        return  ArrayUtil.equals(termsBytes, 0, test.termsBytes, 0, offsets[lastOffset]);\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4107dd39b127d892359c5c1d67d0f14d92f1a9bf":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":["4107dd39b127d892359c5c1d67d0f14d92f1a9bf","dc5ed460ebaaf11698c901fe109e5d382145964d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dc5ed460ebaaf11698c901fe109e5d382145964d":["4107dd39b127d892359c5c1d67d0f14d92f1a9bf"],"c2042d3e27841c5b60112990fc33559e10ccf6dd":["dc5ed460ebaaf11698c901fe109e5d382145964d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c2042d3e27841c5b60112990fc33559e10ccf6dd"]},"commit2Childs":{"4107dd39b127d892359c5c1d67d0f14d92f1a9bf":["a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","dc5ed460ebaaf11698c901fe109e5d382145964d"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4107dd39b127d892359c5c1d67d0f14d92f1a9bf"],"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"dc5ed460ebaaf11698c901fe109e5d382145964d":["a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","c2042d3e27841c5b60112990fc33559e10ccf6dd"],"c2042d3e27841c5b60112990fc33559e10ccf6dd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}