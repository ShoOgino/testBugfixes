{"path":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testLogReplay().mjava","commits":[{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testLogReplay().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testLogReplay() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<Long>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      // make sure we can still access versions after a restart\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // make sure we can still access versions during recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      // make sure we can still access versions after recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      // no updates, so insure that recovery does not run\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); // no updates, so insure that recovery didn't run\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testLogReplay().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testLogReplay() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<Long>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      // make sure we can still access versions after a restart\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // make sure we can still access versions during recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      // make sure we can still access versions after recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      // no updates, so insure that recovery does not run\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); // no updates, so insure that recovery didn't run\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testLogReplay().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testLogReplay().mjava","sourceNew":"  @Test\n  public void testLogReplay() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      // make sure we can still access versions after a restart\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // make sure we can still access versions during recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      // make sure we can still access versions after recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      // no updates, so insure that recovery does not run\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); // no updates, so insure that recovery didn't run\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testLogReplay() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<Long>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      // make sure we can still access versions after a restart\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // make sure we can still access versions during recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      // make sure we can still access versions after recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      // no updates, so insure that recovery does not run\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); // no updates, so insure that recovery didn't run\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a0c04b71951333291abc7f317109a6a5957bd28","date":1457097827,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testLogReplay().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testLogReplay().mjava","sourceNew":"  @Test\n  public void testLogReplay() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      // make sure we can still access versions after a restart\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // make sure we can still access versions during recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      // make sure we can still access versions after recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      // no updates, so insure that recovery does not run\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); // no updates, so insure that recovery didn't run\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testLogReplay() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      // make sure we can still access versions after a restart\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // make sure we can still access versions during recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      // make sure we can still access versions after recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      // no updates, so insure that recovery does not run\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); // no updates, so insure that recovery didn't run\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"043df2e9a841864922c32756a44c939ed768cb89","date":1459876536,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testLogReplay().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testLogReplay().mjava","sourceNew":"  @Test\n  public void testLogReplay() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = logReplayFinish::release;\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      // make sure we can still access versions after a restart\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // make sure we can still access versions during recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      // make sure we can still access versions after recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      // no updates, so insure that recovery does not run\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); // no updates, so insure that recovery didn't run\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testLogReplay() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      // make sure we can still access versions after a restart\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // make sure we can still access versions during recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      // make sure we can still access versions after recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      // no updates, so insure that recovery does not run\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); // no updates, so insure that recovery didn't run\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6284684320a9808c41a5e43de958b2da22f89bd","date":1459977490,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testLogReplay().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testLogReplay().mjava","sourceNew":"  @Test\n  public void testLogReplay() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = logReplayFinish::release;\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      // make sure we can still access versions after a restart\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // make sure we can still access versions during recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      // make sure we can still access versions after recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      // no updates, so insure that recovery does not run\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); // no updates, so insure that recovery didn't run\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testLogReplay() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      // make sure we can still access versions after a restart\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // make sure we can still access versions during recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      // make sure we can still access versions after recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      // no updates, so insure that recovery does not run\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); // no updates, so insure that recovery didn't run\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c801a37c38aedbd2ddbd27f2aaeb30cd5c7af0f","date":1552317217,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testLogReplay().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testLogReplay().mjava","sourceNew":"  @Test\n  public void testLogReplay() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = logReplayFinish::release;\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      // make sure we can still access versions after a restart\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // make sure we can still access versions during recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      // make sure we can still access versions after recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      // no updates, so insure that recovery does not run\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); // no updates, so insure that recovery didn't run\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testLogReplay() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = logReplayFinish::release;\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      // make sure we can still access versions after a restart\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // make sure we can still access versions during recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      // make sure we can still access versions after recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      // no updates, so insure that recovery does not run\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); // no updates, so insure that recovery didn't run\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bdf107cf16be0f22504ae184fed81596665a244","date":1576012524,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testLogReplay().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testLogReplay().mjava","sourceNew":"  @Test\n  public void testLogReplay() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(TIMEOUT, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = logReplayFinish::release;\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      // make sure we can still access versions after a restart\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // make sure we can still access versions during recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(TIMEOUT, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      // make sure we can still access versions after recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(TIMEOUT, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      // no updates, so insure that recovery does not run\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); // no updates, so insure that recovery didn't run\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testLogReplay() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = logReplayFinish::release;\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      // make sure we can still access versions after a restart\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // make sure we can still access versions during recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      // make sure we can still access versions after recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      // no updates, so insure that recovery does not run\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); // no updates, so insure that recovery didn't run\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a229cb50768e988c50a2106bdae3a92154f428bf","date":1576051038,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testLogReplay().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testLogReplay().mjava","sourceNew":"  @Test\n  public void testLogReplay() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(TIMEOUT, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = logReplayFinish::release;\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      // make sure we can still access versions after a restart\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // make sure we can still access versions during recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(TIMEOUT, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      // make sure we can still access versions after recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(TIMEOUT, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      // no updates, so insure that recovery does not run\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); // no updates, so insure that recovery didn't run\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testLogReplay() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = logReplayFinish::release;\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      // make sure we can still access versions after a restart\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // make sure we can still access versions during recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      // make sure we can still access versions after recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      // no updates, so insure that recovery does not run\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); // no updates, so insure that recovery didn't run\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1","date":1579200426,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testLogReplay().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#testLogReplay().mjava","sourceNew":"  @Test\n  public void testLogReplay() throws Exception {\n    try {\n      TestInjection.skipIndexWriterCommitOnClose = true;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(TIMEOUT, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = logReplayFinish::release;\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      // make sure we can still access versions after a restart\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // make sure we can still access versions during recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(TIMEOUT, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      // make sure we can still access versions after recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(TIMEOUT, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      // no updates, so insure that recovery does not run\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); // no updates, so insure that recovery didn't run\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testLogReplay() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(TIMEOUT, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = logReplayFinish::release;\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      // make sure we can still access versions after a restart\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // make sure we can still access versions during recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(TIMEOUT, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      // make sure we can still access versions after recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(TIMEOUT, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      // no updates, so insure that recovery does not run\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); // no updates, so insure that recovery didn't run\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2c801a37c38aedbd2ddbd27f2aaeb30cd5c7af0f":["b6284684320a9808c41a5e43de958b2da22f89bd"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"043df2e9a841864922c32756a44c939ed768cb89":["3a0c04b71951333291abc7f317109a6a5957bd28"],"a229cb50768e988c50a2106bdae3a92154f428bf":["2c801a37c38aedbd2ddbd27f2aaeb30cd5c7af0f","6bdf107cf16be0f22504ae184fed81596665a244"],"b6284684320a9808c41a5e43de958b2da22f89bd":["3a0c04b71951333291abc7f317109a6a5957bd28","043df2e9a841864922c32756a44c939ed768cb89"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"6bdf107cf16be0f22504ae184fed81596665a244":["2c801a37c38aedbd2ddbd27f2aaeb30cd5c7af0f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1":["6bdf107cf16be0f22504ae184fed81596665a244"],"3a0c04b71951333291abc7f317109a6a5957bd28":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1"]},"commit2Childs":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"2c801a37c38aedbd2ddbd27f2aaeb30cd5c7af0f":["a229cb50768e988c50a2106bdae3a92154f428bf","6bdf107cf16be0f22504ae184fed81596665a244"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3a0c04b71951333291abc7f317109a6a5957bd28"],"043df2e9a841864922c32756a44c939ed768cb89":["b6284684320a9808c41a5e43de958b2da22f89bd"],"a229cb50768e988c50a2106bdae3a92154f428bf":[],"b6284684320a9808c41a5e43de958b2da22f89bd":["2c801a37c38aedbd2ddbd27f2aaeb30cd5c7af0f"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["849494cf2f3a96af5c8c84995108ddd8456fcd04","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"6bdf107cf16be0f22504ae184fed81596665a244":["a229cb50768e988c50a2106bdae3a92154f428bf","b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1"],"b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a0c04b71951333291abc7f317109a6a5957bd28":["043df2e9a841864922c32756a44c939ed768cb89","b6284684320a9808c41a5e43de958b2da22f89bd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a229cb50768e988c50a2106bdae3a92154f428bf","37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}