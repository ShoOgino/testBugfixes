{"path":"solr/core/src/test/org/apache/solr/update/processor/CategoryRoutedAliasUpdateProcessorTest#testNonEnglish().mjava","commits":[{"id":"b627755385655c7cd3fb296f17593658805cf4d5","date":1552455143,"type":0,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/CategoryRoutedAliasUpdateProcessorTest#testNonEnglish().mjava","pathOld":"/dev/null","sourceNew":"  public void testNonEnglish() throws Exception {\n    // test to document the expected behavior with non-english text for categories\n    // the present expectation is that non-latin text and many accented latin characters\n    // will get replaced with '_'. This is necessary to maintain collection naming\n    // conventions. The net effect is that documents get sorted by the number of characters\n    // in the category rather than the actual categories.\n\n    // This should be changed in an enhancement (wherein the category is RFC-4648 url-safe encoded).\n    // For now document it as an expected limitation.\n\n    String somethingInChinese = \"中文的东西\";      // 5 chars\n    String somethingInHebrew = \"משהו בסינית\";      // 11 chars\n    String somethingInThai = \"บางอย่างในภาษาจีน\";   // 17 chars\n    String somethingInArabic = \"شيء في الصينية\"; // 14 chars\n    String somethingInGreek = \"κάτι κινεζικό\";   // 13 chars\n    String somethingInGujarati = \"િનીમાં કંઈક\";       // 11 chars (same as hebrew)\n\n    String ONE_   = \"_\";\n    String TWO_   = \"__\";\n    String THREE_ = \"___\";\n    String FOUR_  = \"____\";\n    String FIVE_  = \"_____\";\n\n    String collectionChinese  = getAlias() + \"__CRA__\" + FIVE_;\n    String collectionHebrew   = getAlias() + \"__CRA__\" + FIVE_ + FIVE_ + ONE_;\n    String collectionThai     = getAlias() + \"__CRA__\" + FIVE_ + FIVE_ + FIVE_ + TWO_;\n    String collectionArabic   = getAlias() + \"__CRA__\" + FIVE_ + FIVE_ + FOUR_;\n    String collectionGreek    = getAlias() + \"__CRA__\" + FIVE_ + FIVE_ + THREE_;\n    // Note Gujarati not listed, because it duplicates hebrew.\n\n    String configName = getSaferTestName();\n    createConfigSet(configName);\n\n    List<String> retrievedConfigSetNames = new ConfigSetAdminRequest.List().process(solrClient).getConfigSets();\n    List<String> expectedConfigSetNames = Arrays.asList(\"_default\", configName);\n\n    // config sets leak between tests so we can't be any more specific than this on the next 2 asserts\n    assertTrue(\"We expect at least 2 configSets\",\n        retrievedConfigSetNames.size() >= expectedConfigSetNames.size());\n    assertTrue(\"ConfigNames should include :\" + expectedConfigSetNames, retrievedConfigSetNames.containsAll(expectedConfigSetNames));\n\n    CollectionAdminRequest.createCategoryRoutedAlias(getAlias(), categoryField, 20,\n        CollectionAdminRequest.createCollection(\"_unused_\", configName, 1, 1)\n            .setMaxShardsPerNode(2))\n        .process(solrClient);\n    addDocsAndCommit(true,\n        newDoc(somethingInChinese),\n        newDoc(somethingInHebrew),\n        newDoc(somethingInThai),\n        newDoc(somethingInArabic),\n        newDoc(somethingInGreek),\n        newDoc(somethingInGujarati));\n\n    // Note Gujarati not listed, because it duplicates hebrew.\n    assertInvariants(collectionChinese, collectionHebrew, collectionThai, collectionArabic, collectionGreek);\n\n    assertColHasDocCount(collectionChinese, 1);\n    assertColHasDocCount(collectionHebrew, 2);\n    assertColHasDocCount(collectionThai, 1);\n    assertColHasDocCount(collectionArabic, 1);\n    assertColHasDocCount(collectionGreek, 1);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7bf78a55e1864fa3f0c50ca04de0a010a800e533","date":1554818536,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/CategoryRoutedAliasUpdateProcessorTest#testNonEnglish().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/CategoryRoutedAliasUpdateProcessorTest#testNonEnglish().mjava","sourceNew":"  @Test\n  @Slow\n  public void testNonEnglish() throws Exception {\n    // test to document the expected behavior with non-english text for categories\n    // the present expectation is that non-latin text and many accented latin characters\n    // will get replaced with '_'. This is necessary to maintain collection naming\n    // conventions. The net effect is that documents get sorted by the number of characters\n    // in the category rather than the actual categories.\n\n    // This should be changed in an enhancement (wherein the category is RFC-4648 url-safe encoded).\n    // For now document it as an expected limitation.\n\n    String somethingInChinese = \"中文的东西\";      // 5 chars\n    String somethingInHebrew = \"משהו בסינית\";      // 11 chars\n    String somethingInThai = \"บางอย่างในภาษาจีน\";   // 17 chars\n    String somethingInArabic = \"شيء في الصينية\"; // 14 chars\n    String somethingInGreek = \"κάτι κινεζικό\";   // 13 chars\n    String somethingInGujarati = \"િનીમાં કંઈક\";       // 11 chars (same as hebrew)\n\n    String ONE_   = \"_\";\n    String TWO_   = \"__\";\n    String THREE_ = \"___\";\n    String FOUR_  = \"____\";\n    String FIVE_  = \"_____\";\n\n    String collectionChinese  = getAlias() + \"__CRA__\" + FIVE_;\n    String collectionHebrew   = getAlias() + \"__CRA__\" + FIVE_ + FIVE_ + ONE_;\n    String collectionThai     = getAlias() + \"__CRA__\" + FIVE_ + FIVE_ + FIVE_ + TWO_;\n    String collectionArabic   = getAlias() + \"__CRA__\" + FIVE_ + FIVE_ + FOUR_;\n    String collectionGreek    = getAlias() + \"__CRA__\" + FIVE_ + FIVE_ + THREE_;\n    // Note Gujarati not listed, because it duplicates hebrew.\n\n    String configName = getSaferTestName();\n    createConfigSet(configName);\n\n    List<String> retrievedConfigSetNames = new ConfigSetAdminRequest.List().process(solrClient).getConfigSets();\n    List<String> expectedConfigSetNames = Arrays.asList(\"_default\", configName);\n\n    // config sets leak between tests so we can't be any more specific than this on the next 2 asserts\n    assertTrue(\"We expect at least 2 configSets\",\n        retrievedConfigSetNames.size() >= expectedConfigSetNames.size());\n    assertTrue(\"ConfigNames should include :\" + expectedConfigSetNames, retrievedConfigSetNames.containsAll(expectedConfigSetNames));\n\n    CollectionAdminRequest.createCategoryRoutedAlias(getAlias(), categoryField, 20,\n        CollectionAdminRequest.createCollection(\"_unused_\", configName, 1, 1)\n            .setMaxShardsPerNode(12))\n        .process(solrClient);\n    addDocsAndCommit(true,\n        newDoc(somethingInChinese),\n        newDoc(somethingInHebrew),\n        newDoc(somethingInThai),\n        newDoc(somethingInArabic),\n        newDoc(somethingInGreek),\n        newDoc(somethingInGujarati));\n\n    // Note Gujarati not listed, because it duplicates hebrew.\n    assertInvariants(collectionChinese, collectionHebrew, collectionThai, collectionArabic, collectionGreek);\n\n    assertColHasDocCount(collectionChinese, 1);\n    assertColHasDocCount(collectionHebrew, 2);\n    assertColHasDocCount(collectionThai, 1);\n    assertColHasDocCount(collectionArabic, 1);\n    assertColHasDocCount(collectionGreek, 1);\n\n  }\n\n","sourceOld":"  public void testNonEnglish() throws Exception {\n    // test to document the expected behavior with non-english text for categories\n    // the present expectation is that non-latin text and many accented latin characters\n    // will get replaced with '_'. This is necessary to maintain collection naming\n    // conventions. The net effect is that documents get sorted by the number of characters\n    // in the category rather than the actual categories.\n\n    // This should be changed in an enhancement (wherein the category is RFC-4648 url-safe encoded).\n    // For now document it as an expected limitation.\n\n    String somethingInChinese = \"中文的东西\";      // 5 chars\n    String somethingInHebrew = \"משהו בסינית\";      // 11 chars\n    String somethingInThai = \"บางอย่างในภาษาจีน\";   // 17 chars\n    String somethingInArabic = \"شيء في الصينية\"; // 14 chars\n    String somethingInGreek = \"κάτι κινεζικό\";   // 13 chars\n    String somethingInGujarati = \"િનીમાં કંઈક\";       // 11 chars (same as hebrew)\n\n    String ONE_   = \"_\";\n    String TWO_   = \"__\";\n    String THREE_ = \"___\";\n    String FOUR_  = \"____\";\n    String FIVE_  = \"_____\";\n\n    String collectionChinese  = getAlias() + \"__CRA__\" + FIVE_;\n    String collectionHebrew   = getAlias() + \"__CRA__\" + FIVE_ + FIVE_ + ONE_;\n    String collectionThai     = getAlias() + \"__CRA__\" + FIVE_ + FIVE_ + FIVE_ + TWO_;\n    String collectionArabic   = getAlias() + \"__CRA__\" + FIVE_ + FIVE_ + FOUR_;\n    String collectionGreek    = getAlias() + \"__CRA__\" + FIVE_ + FIVE_ + THREE_;\n    // Note Gujarati not listed, because it duplicates hebrew.\n\n    String configName = getSaferTestName();\n    createConfigSet(configName);\n\n    List<String> retrievedConfigSetNames = new ConfigSetAdminRequest.List().process(solrClient).getConfigSets();\n    List<String> expectedConfigSetNames = Arrays.asList(\"_default\", configName);\n\n    // config sets leak between tests so we can't be any more specific than this on the next 2 asserts\n    assertTrue(\"We expect at least 2 configSets\",\n        retrievedConfigSetNames.size() >= expectedConfigSetNames.size());\n    assertTrue(\"ConfigNames should include :\" + expectedConfigSetNames, retrievedConfigSetNames.containsAll(expectedConfigSetNames));\n\n    CollectionAdminRequest.createCategoryRoutedAlias(getAlias(), categoryField, 20,\n        CollectionAdminRequest.createCollection(\"_unused_\", configName, 1, 1)\n            .setMaxShardsPerNode(2))\n        .process(solrClient);\n    addDocsAndCommit(true,\n        newDoc(somethingInChinese),\n        newDoc(somethingInHebrew),\n        newDoc(somethingInThai),\n        newDoc(somethingInArabic),\n        newDoc(somethingInGreek),\n        newDoc(somethingInGujarati));\n\n    // Note Gujarati not listed, because it duplicates hebrew.\n    assertInvariants(collectionChinese, collectionHebrew, collectionThai, collectionArabic, collectionGreek);\n\n    assertColHasDocCount(collectionChinese, 1);\n    assertColHasDocCount(collectionHebrew, 2);\n    assertColHasDocCount(collectionThai, 1);\n    assertColHasDocCount(collectionArabic, 1);\n    assertColHasDocCount(collectionGreek, 1);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/CategoryRoutedAliasUpdateProcessorTest#testNonEnglish().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/CategoryRoutedAliasUpdateProcessorTest#testNonEnglish().mjava","sourceNew":"  @Test\n  @Slow\n  public void testNonEnglish() throws Exception {\n    // test to document the expected behavior with non-english text for categories\n    // the present expectation is that non-latin text and many accented latin characters\n    // will get replaced with '_'. This is necessary to maintain collection naming\n    // conventions. The net effect is that documents get sorted by the number of characters\n    // in the category rather than the actual categories.\n\n    // This should be changed in an enhancement (wherein the category is RFC-4648 url-safe encoded).\n    // For now document it as an expected limitation.\n\n    String somethingInChinese = \"中文的东西\";      // 5 chars\n    String somethingInHebrew = \"משהו בסינית\";      // 11 chars\n    String somethingInThai = \"บางอย่างในภาษาจีน\";   // 17 chars\n    String somethingInArabic = \"شيء في الصينية\"; // 14 chars\n    String somethingInGreek = \"κάτι κινεζικό\";   // 13 chars\n    String somethingInGujarati = \"િનીમાં કંઈક\";       // 11 chars (same as hebrew)\n\n    String ONE_   = \"_\";\n    String TWO_   = \"__\";\n    String THREE_ = \"___\";\n    String FOUR_  = \"____\";\n    String FIVE_  = \"_____\";\n\n    String collectionChinese  = getAlias() + \"__CRA__\" + FIVE_;\n    String collectionHebrew   = getAlias() + \"__CRA__\" + FIVE_ + FIVE_ + ONE_;\n    String collectionThai     = getAlias() + \"__CRA__\" + FIVE_ + FIVE_ + FIVE_ + TWO_;\n    String collectionArabic   = getAlias() + \"__CRA__\" + FIVE_ + FIVE_ + FOUR_;\n    String collectionGreek    = getAlias() + \"__CRA__\" + FIVE_ + FIVE_ + THREE_;\n    // Note Gujarati not listed, because it duplicates hebrew.\n\n    String configName = getSaferTestName();\n    createConfigSet(configName);\n\n    List<String> retrievedConfigSetNames = new ConfigSetAdminRequest.List().process(solrClient).getConfigSets();\n    List<String> expectedConfigSetNames = Arrays.asList(\"_default\", configName);\n\n    // config sets leak between tests so we can't be any more specific than this on the next 2 asserts\n    assertTrue(\"We expect at least 2 configSets\",\n        retrievedConfigSetNames.size() >= expectedConfigSetNames.size());\n    assertTrue(\"ConfigNames should include :\" + expectedConfigSetNames, retrievedConfigSetNames.containsAll(expectedConfigSetNames));\n\n    CollectionAdminRequest.createCategoryRoutedAlias(getAlias(), categoryField, 20,\n        CollectionAdminRequest.createCollection(\"_unused_\", configName, 1, 1))\n        .process(solrClient);\n    addDocsAndCommit(true,\n        newDoc(somethingInChinese),\n        newDoc(somethingInHebrew),\n        newDoc(somethingInThai),\n        newDoc(somethingInArabic),\n        newDoc(somethingInGreek),\n        newDoc(somethingInGujarati));\n\n    // Note Gujarati not listed, because it duplicates hebrew.\n    assertInvariants(collectionChinese, collectionHebrew, collectionThai, collectionArabic, collectionGreek);\n\n    assertColHasDocCount(collectionChinese, 1);\n    assertColHasDocCount(collectionHebrew, 2);\n    assertColHasDocCount(collectionThai, 1);\n    assertColHasDocCount(collectionArabic, 1);\n    assertColHasDocCount(collectionGreek, 1);\n\n  }\n\n","sourceOld":"  @Test\n  @Slow\n  public void testNonEnglish() throws Exception {\n    // test to document the expected behavior with non-english text for categories\n    // the present expectation is that non-latin text and many accented latin characters\n    // will get replaced with '_'. This is necessary to maintain collection naming\n    // conventions. The net effect is that documents get sorted by the number of characters\n    // in the category rather than the actual categories.\n\n    // This should be changed in an enhancement (wherein the category is RFC-4648 url-safe encoded).\n    // For now document it as an expected limitation.\n\n    String somethingInChinese = \"中文的东西\";      // 5 chars\n    String somethingInHebrew = \"משהו בסינית\";      // 11 chars\n    String somethingInThai = \"บางอย่างในภาษาจีน\";   // 17 chars\n    String somethingInArabic = \"شيء في الصينية\"; // 14 chars\n    String somethingInGreek = \"κάτι κινεζικό\";   // 13 chars\n    String somethingInGujarati = \"િનીમાં કંઈક\";       // 11 chars (same as hebrew)\n\n    String ONE_   = \"_\";\n    String TWO_   = \"__\";\n    String THREE_ = \"___\";\n    String FOUR_  = \"____\";\n    String FIVE_  = \"_____\";\n\n    String collectionChinese  = getAlias() + \"__CRA__\" + FIVE_;\n    String collectionHebrew   = getAlias() + \"__CRA__\" + FIVE_ + FIVE_ + ONE_;\n    String collectionThai     = getAlias() + \"__CRA__\" + FIVE_ + FIVE_ + FIVE_ + TWO_;\n    String collectionArabic   = getAlias() + \"__CRA__\" + FIVE_ + FIVE_ + FOUR_;\n    String collectionGreek    = getAlias() + \"__CRA__\" + FIVE_ + FIVE_ + THREE_;\n    // Note Gujarati not listed, because it duplicates hebrew.\n\n    String configName = getSaferTestName();\n    createConfigSet(configName);\n\n    List<String> retrievedConfigSetNames = new ConfigSetAdminRequest.List().process(solrClient).getConfigSets();\n    List<String> expectedConfigSetNames = Arrays.asList(\"_default\", configName);\n\n    // config sets leak between tests so we can't be any more specific than this on the next 2 asserts\n    assertTrue(\"We expect at least 2 configSets\",\n        retrievedConfigSetNames.size() >= expectedConfigSetNames.size());\n    assertTrue(\"ConfigNames should include :\" + expectedConfigSetNames, retrievedConfigSetNames.containsAll(expectedConfigSetNames));\n\n    CollectionAdminRequest.createCategoryRoutedAlias(getAlias(), categoryField, 20,\n        CollectionAdminRequest.createCollection(\"_unused_\", configName, 1, 1)\n            .setMaxShardsPerNode(12))\n        .process(solrClient);\n    addDocsAndCommit(true,\n        newDoc(somethingInChinese),\n        newDoc(somethingInHebrew),\n        newDoc(somethingInThai),\n        newDoc(somethingInArabic),\n        newDoc(somethingInGreek),\n        newDoc(somethingInGujarati));\n\n    // Note Gujarati not listed, because it duplicates hebrew.\n    assertInvariants(collectionChinese, collectionHebrew, collectionThai, collectionArabic, collectionGreek);\n\n    assertColHasDocCount(collectionChinese, 1);\n    assertColHasDocCount(collectionHebrew, 2);\n    assertColHasDocCount(collectionThai, 1);\n    assertColHasDocCount(collectionArabic, 1);\n    assertColHasDocCount(collectionGreek, 1);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b627755385655c7cd3fb296f17593658805cf4d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7bf78a55e1864fa3f0c50ca04de0a010a800e533":["b627755385655c7cd3fb296f17593658805cf4d5"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["7bf78a55e1864fa3f0c50ca04de0a010a800e533"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b627755385655c7cd3fb296f17593658805cf4d5"],"b627755385655c7cd3fb296f17593658805cf4d5":["7bf78a55e1864fa3f0c50ca04de0a010a800e533"],"7bf78a55e1864fa3f0c50ca04de0a010a800e533":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}