{"path":"lucene/src/test/org/apache/lucene/util/TestArrayUtil#testInsertionSort().mjava","commits":[{"id":"ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b","date":1288192616,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestArrayUtil#testInsertionSort().mjava","pathOld":"/dev/null","sourceNew":"  public void testInsertionSort() {\n    for (int i = 0, c = 500 * RANDOM_MULTIPLIER; i < c; i++) {\n      Integer[] a1 = createRandomArray(30), a2 = a1.clone();\n      ArrayUtil.insertionSort(a1);\n      Arrays.sort(a2);\n      assertArrayEquals(a2, a1);\n      \n      a1 = createRandomArray(30);\n      a2 = a1.clone();\n      ArrayUtil.insertionSort(a1, Collections.reverseOrder());\n      Arrays.sort(a2, Collections.reverseOrder());\n      assertArrayEquals(a2, a1);\n      // reverse back, so we can test that completely backwards sorted array (worst case) is working:\n      ArrayUtil.insertionSort(a1);\n      Arrays.sort(a2);\n      assertArrayEquals(a2, a1);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d","date":1288424244,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestArrayUtil#testInsertionSort().mjava","pathOld":"/dev/null","sourceNew":"  public void testInsertionSort() {\n    for (int i = 0, c = 500 * RANDOM_MULTIPLIER; i < c; i++) {\n      Integer[] a1 = createRandomArray(30), a2 = a1.clone();\n      ArrayUtil.insertionSort(a1);\n      Arrays.sort(a2);\n      assertArrayEquals(a2, a1);\n      \n      a1 = createRandomArray(30);\n      a2 = a1.clone();\n      ArrayUtil.insertionSort(a1, Collections.reverseOrder());\n      Arrays.sort(a2, Collections.reverseOrder());\n      assertArrayEquals(a2, a1);\n      // reverse back, so we can test that completely backwards sorted array (worst case) is working:\n      ArrayUtil.insertionSort(a1);\n      Arrays.sort(a2);\n      assertArrayEquals(a2, a1);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestArrayUtil#testInsertionSort().mjava","pathOld":"/dev/null","sourceNew":"  public void testInsertionSort() {\n    for (int i = 0, c = 500 * RANDOM_MULTIPLIER; i < c; i++) {\n      Integer[] a1 = createRandomArray(30), a2 = a1.clone();\n      ArrayUtil.insertionSort(a1);\n      Arrays.sort(a2);\n      assertArrayEquals(a2, a1);\n      \n      a1 = createRandomArray(30);\n      a2 = a1.clone();\n      ArrayUtil.insertionSort(a1, Collections.reverseOrder());\n      Arrays.sort(a2, Collections.reverseOrder());\n      assertArrayEquals(a2, a1);\n      // reverse back, so we can test that completely backwards sorted array (worst case) is working:\n      ArrayUtil.insertionSort(a1);\n      Arrays.sort(a2);\n      assertArrayEquals(a2, a1);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f83af14a2a8131b14d7aee6274c740334e0363d3","date":1307579822,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestArrayUtil#testInsertionSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestArrayUtil#testInsertionSort().mjava","sourceNew":"  public void testInsertionSort() {\n    for (int i = 0, c = atLeast(500); i < c; i++) {\n      Integer[] a1 = createRandomArray(30), a2 = a1.clone();\n      ArrayUtil.insertionSort(a1);\n      Arrays.sort(a2);\n      assertArrayEquals(a2, a1);\n      \n      a1 = createRandomArray(30);\n      a2 = a1.clone();\n      ArrayUtil.insertionSort(a1, Collections.reverseOrder());\n      Arrays.sort(a2, Collections.reverseOrder());\n      assertArrayEquals(a2, a1);\n      // reverse back, so we can test that completely backwards sorted array (worst case) is working:\n      ArrayUtil.insertionSort(a1);\n      Arrays.sort(a2);\n      assertArrayEquals(a2, a1);\n    }\n  }\n\n","sourceOld":"  public void testInsertionSort() {\n    for (int i = 0, c = 500 * RANDOM_MULTIPLIER; i < c; i++) {\n      Integer[] a1 = createRandomArray(30), a2 = a1.clone();\n      ArrayUtil.insertionSort(a1);\n      Arrays.sort(a2);\n      assertArrayEquals(a2, a1);\n      \n      a1 = createRandomArray(30);\n      a2 = a1.clone();\n      ArrayUtil.insertionSort(a1, Collections.reverseOrder());\n      Arrays.sort(a2, Collections.reverseOrder());\n      assertArrayEquals(a2, a1);\n      // reverse back, so we can test that completely backwards sorted array (worst case) is working:\n      ArrayUtil.insertionSort(a1);\n      Arrays.sort(a2);\n      assertArrayEquals(a2, a1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestArrayUtil#testInsertionSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestArrayUtil#testInsertionSort().mjava","sourceNew":"  public void testInsertionSort() {\n    for (int i = 0, c = atLeast(500); i < c; i++) {\n      Integer[] a1 = createRandomArray(30), a2 = a1.clone();\n      ArrayUtil.insertionSort(a1);\n      Arrays.sort(a2);\n      assertArrayEquals(a2, a1);\n      \n      a1 = createRandomArray(30);\n      a2 = a1.clone();\n      ArrayUtil.insertionSort(a1, Collections.reverseOrder());\n      Arrays.sort(a2, Collections.reverseOrder());\n      assertArrayEquals(a2, a1);\n      // reverse back, so we can test that completely backwards sorted array (worst case) is working:\n      ArrayUtil.insertionSort(a1);\n      Arrays.sort(a2);\n      assertArrayEquals(a2, a1);\n    }\n  }\n\n","sourceOld":"  public void testInsertionSort() {\n    for (int i = 0, c = 500 * RANDOM_MULTIPLIER; i < c; i++) {\n      Integer[] a1 = createRandomArray(30), a2 = a1.clone();\n      ArrayUtil.insertionSort(a1);\n      Arrays.sort(a2);\n      assertArrayEquals(a2, a1);\n      \n      a1 = createRandomArray(30);\n      a2 = a1.clone();\n      ArrayUtil.insertionSort(a1, Collections.reverseOrder());\n      Arrays.sort(a2, Collections.reverseOrder());\n      assertArrayEquals(a2, a1);\n      // reverse back, so we can test that completely backwards sorted array (worst case) is working:\n      ArrayUtil.insertionSort(a1);\n      Arrays.sort(a2);\n      assertArrayEquals(a2, a1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestArrayUtil#testInsertionSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestArrayUtil#testInsertionSort().mjava","sourceNew":"  public void testInsertionSort() {\n    for (int i = 0, c = atLeast(500); i < c; i++) {\n      Integer[] a1 = createRandomArray(30), a2 = a1.clone();\n      ArrayUtil.insertionSort(a1);\n      Arrays.sort(a2);\n      assertArrayEquals(a2, a1);\n      \n      a1 = createRandomArray(30);\n      a2 = a1.clone();\n      ArrayUtil.insertionSort(a1, Collections.reverseOrder());\n      Arrays.sort(a2, Collections.reverseOrder());\n      assertArrayEquals(a2, a1);\n      // reverse back, so we can test that completely backwards sorted array (worst case) is working:\n      ArrayUtil.insertionSort(a1);\n      Arrays.sort(a2);\n      assertArrayEquals(a2, a1);\n    }\n  }\n\n","sourceOld":"  public void testInsertionSort() {\n    for (int i = 0, c = 500 * RANDOM_MULTIPLIER; i < c; i++) {\n      Integer[] a1 = createRandomArray(30), a2 = a1.clone();\n      ArrayUtil.insertionSort(a1);\n      Arrays.sort(a2);\n      assertArrayEquals(a2, a1);\n      \n      a1 = createRandomArray(30);\n      a2 = a1.clone();\n      ArrayUtil.insertionSort(a1, Collections.reverseOrder());\n      Arrays.sort(a2, Collections.reverseOrder());\n      assertArrayEquals(a2, a1);\n      // reverse back, so we can test that completely backwards sorted array (worst case) is working:\n      ArrayUtil.insertionSort(a1);\n      Arrays.sort(a2);\n      assertArrayEquals(a2, a1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestArrayUtil#testInsertionSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestArrayUtil#testInsertionSort().mjava","sourceNew":"  public void testInsertionSort() {\n    for (int i = 0, c = atLeast(500); i < c; i++) {\n      Integer[] a1 = createRandomArray(30), a2 = a1.clone();\n      ArrayUtil.insertionSort(a1);\n      Arrays.sort(a2);\n      assertArrayEquals(a2, a1);\n      \n      a1 = createRandomArray(30);\n      a2 = a1.clone();\n      ArrayUtil.insertionSort(a1, Collections.reverseOrder());\n      Arrays.sort(a2, Collections.reverseOrder());\n      assertArrayEquals(a2, a1);\n      // reverse back, so we can test that completely backwards sorted array (worst case) is working:\n      ArrayUtil.insertionSort(a1);\n      Arrays.sort(a2);\n      assertArrayEquals(a2, a1);\n    }\n  }\n\n","sourceOld":"  public void testInsertionSort() {\n    for (int i = 0, c = atLeast(500); i < c; i++) {\n      Integer[] a1 = createRandomArray(30), a2 = a1.clone();\n      ArrayUtil.insertionSort(a1);\n      Arrays.sort(a2);\n      assertArrayEquals(a2, a1);\n      \n      a1 = createRandomArray(30);\n      a2 = a1.clone();\n      ArrayUtil.insertionSort(a1, Collections.reverseOrder());\n      Arrays.sort(a2, Collections.reverseOrder());\n      assertArrayEquals(a2, a1);\n      // reverse back, so we can test that completely backwards sorted array (worst case) is working:\n      ArrayUtil.insertionSort(a1);\n      Arrays.sort(a2);\n      assertArrayEquals(a2, a1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b","f83af14a2a8131b14d7aee6274c740334e0363d3"],"f83af14a2a8131b14d7aee6274c740334e0363d3":["ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b"],"ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f83af14a2a8131b14d7aee6274c740334e0363d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["ca0ffea399542e8aac8ed7608f34f8ec4cb8904d","f83af14a2a8131b14d7aee6274c740334e0363d3"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b"],"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"f83af14a2a8131b14d7aee6274c740334e0363d3":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","3a119bbc8703c10faa329ec201c654b3a35a1e3e","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","f83af14a2a8131b14d7aee6274c740334e0363d3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ca0ffea399542e8aac8ed7608f34f8ec4cb8904d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ca0ffea399542e8aac8ed7608f34f8ec4cb8904d"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}