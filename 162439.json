{"path":"lucene/facet/src/java/org/apache/lucene/facet/DrillSideways#[R]_search(DrillDownQuery,CollectorManager[#,R]).mjava","commits":[{"id":"91eb857a56b1a3a6659c666f88e2398347fc1c5a","date":1483442809,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/DrillSideways#[R]_search(DrillDownQuery,CollectorManager[#,R]).mjava","pathOld":"/dev/null","sourceNew":"  /** Runs a search, using a {@link CollectorManager} to gather and merge search results */\n  public <R> ConcurrentDrillSidewaysResult<R> search(final DrillDownQuery query,\n          final CollectorManager<?, R> hitCollectorManager) throws IOException {\n\n    final Map<String, Integer> drillDownDims = query.getDims();\n    final List<CallableCollector> callableCollectors = new ArrayList<>(drillDownDims.size() + 1);\n\n    // Add the main DrillDownQuery\n    callableCollectors.add(new CallableCollector(-1, searcher, query,\n            new MultiCollectorManager(new FacetsCollectorManager(), hitCollectorManager)));\n    int i = 0;\n    final Query[] filters = query.getDrillDownQueries();\n    for (String dim : drillDownDims.keySet())\n      callableCollectors.add(new CallableCollector(i++, searcher, getDrillDownQuery(query, filters, dim),\n              new FacetsCollectorManager()));\n\n    final FacetsCollector mainFacetsCollector;\n    final FacetsCollector[] facetsCollectors = new FacetsCollector[drillDownDims.size()];\n    final R collectorResult;\n\n    try {\n      // Run the query pool\n      final List<Future<CallableResult>> futures = executor.invokeAll(callableCollectors);\n\n      // Extract the results\n      final Object[] mainResults = (Object[]) futures.get(0).get().result;\n      mainFacetsCollector = (FacetsCollector) mainResults[0];\n      collectorResult = (R) mainResults[1];\n      for (i = 1; i < futures.size(); i++) {\n        final CallableResult result = futures.get(i).get();\n        facetsCollectors[result.pos] = (FacetsCollector) result.result;\n      }\n      // Fill the null results with the mainFacetsCollector\n      for (i = 0; i < facetsCollectors.length; i++)\n        if (facetsCollectors[i] == null)\n          facetsCollectors[i] = mainFacetsCollector;\n\n    } catch (InterruptedException e) {\n      throw new ThreadInterruptedException(e);\n    } catch (ExecutionException e) {\n      throw new RuntimeException(e);\n    }\n\n    // build the facets and return the result\n    return new ConcurrentDrillSidewaysResult<>(buildFacetsResult(mainFacetsCollector, facetsCollectors,\n            drillDownDims.keySet().toArray(new String[drillDownDims.size()])), null, collectorResult);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/DrillSideways#[R]_search(DrillDownQuery,CollectorManager[#,R]).mjava","pathOld":"/dev/null","sourceNew":"  /** Runs a search, using a {@link CollectorManager} to gather and merge search results */\n  public <R> ConcurrentDrillSidewaysResult<R> search(final DrillDownQuery query,\n          final CollectorManager<?, R> hitCollectorManager) throws IOException {\n\n    final Map<String, Integer> drillDownDims = query.getDims();\n    final List<CallableCollector> callableCollectors = new ArrayList<>(drillDownDims.size() + 1);\n\n    // Add the main DrillDownQuery\n    callableCollectors.add(new CallableCollector(-1, searcher, query,\n            new MultiCollectorManager(new FacetsCollectorManager(), hitCollectorManager)));\n    int i = 0;\n    final Query[] filters = query.getDrillDownQueries();\n    for (String dim : drillDownDims.keySet())\n      callableCollectors.add(new CallableCollector(i++, searcher, getDrillDownQuery(query, filters, dim),\n              new FacetsCollectorManager()));\n\n    final FacetsCollector mainFacetsCollector;\n    final FacetsCollector[] facetsCollectors = new FacetsCollector[drillDownDims.size()];\n    final R collectorResult;\n\n    try {\n      // Run the query pool\n      final List<Future<CallableResult>> futures = executor.invokeAll(callableCollectors);\n\n      // Extract the results\n      final Object[] mainResults = (Object[]) futures.get(0).get().result;\n      mainFacetsCollector = (FacetsCollector) mainResults[0];\n      collectorResult = (R) mainResults[1];\n      for (i = 1; i < futures.size(); i++) {\n        final CallableResult result = futures.get(i).get();\n        facetsCollectors[result.pos] = (FacetsCollector) result.result;\n      }\n      // Fill the null results with the mainFacetsCollector\n      for (i = 0; i < facetsCollectors.length; i++)\n        if (facetsCollectors[i] == null)\n          facetsCollectors[i] = mainFacetsCollector;\n\n    } catch (InterruptedException e) {\n      throw new ThreadInterruptedException(e);\n    } catch (ExecutionException e) {\n      throw new RuntimeException(e);\n    }\n\n    // build the facets and return the result\n    return new ConcurrentDrillSidewaysResult<>(buildFacetsResult(mainFacetsCollector, facetsCollectors,\n            drillDownDims.keySet().toArray(new String[drillDownDims.size()])), null, collectorResult);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/DrillSideways#[R]_search(DrillDownQuery,CollectorManager[#,R]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/DrillSideways#[R]_search(DrillDownQuery,CollectorManager[#,R]).mjava","sourceNew":"  /** Runs a search, using a {@link CollectorManager} to gather and merge search results */\n  @SuppressWarnings(\"unchecked\")\n  public <R> ConcurrentDrillSidewaysResult<R> search(final DrillDownQuery query,\n          final CollectorManager<?, R> hitCollectorManager) throws IOException {\n\n    final Map<String, Integer> drillDownDims = query.getDims();\n    final List<CallableCollector> callableCollectors = new ArrayList<>(drillDownDims.size() + 1);\n\n    // Add the main DrillDownQuery\n    callableCollectors.add(new CallableCollector(-1, searcher, query,\n            new MultiCollectorManager(new FacetsCollectorManager(), hitCollectorManager)));\n    int i = 0;\n    final Query[] filters = query.getDrillDownQueries();\n    for (String dim : drillDownDims.keySet())\n      callableCollectors.add(new CallableCollector(i++, searcher, getDrillDownQuery(query, filters, dim),\n              new FacetsCollectorManager()));\n\n    final FacetsCollector mainFacetsCollector;\n    final FacetsCollector[] facetsCollectors = new FacetsCollector[drillDownDims.size()];\n    final R collectorResult;\n\n    try {\n      // Run the query pool\n      final List<Future<CallableResult>> futures = executor.invokeAll(callableCollectors);\n\n      // Extract the results\n      final Object[] mainResults = (Object[]) futures.get(0).get().result;\n      mainFacetsCollector = (FacetsCollector) mainResults[0];\n      collectorResult = (R) mainResults[1];\n      for (i = 1; i < futures.size(); i++) {\n        final CallableResult result = futures.get(i).get();\n        facetsCollectors[result.pos] = (FacetsCollector) result.result;\n      }\n      // Fill the null results with the mainFacetsCollector\n      for (i = 0; i < facetsCollectors.length; i++)\n        if (facetsCollectors[i] == null)\n          facetsCollectors[i] = mainFacetsCollector;\n\n    } catch (InterruptedException e) {\n      throw new ThreadInterruptedException(e);\n    } catch (ExecutionException e) {\n      throw new RuntimeException(e);\n    }\n\n    // build the facets and return the result\n    return new ConcurrentDrillSidewaysResult<>(buildFacetsResult(mainFacetsCollector, facetsCollectors,\n            drillDownDims.keySet().toArray(new String[drillDownDims.size()])), null, collectorResult);\n  }\n\n","sourceOld":"  /** Runs a search, using a {@link CollectorManager} to gather and merge search results */\n  public <R> ConcurrentDrillSidewaysResult<R> search(final DrillDownQuery query,\n          final CollectorManager<?, R> hitCollectorManager) throws IOException {\n\n    final Map<String, Integer> drillDownDims = query.getDims();\n    final List<CallableCollector> callableCollectors = new ArrayList<>(drillDownDims.size() + 1);\n\n    // Add the main DrillDownQuery\n    callableCollectors.add(new CallableCollector(-1, searcher, query,\n            new MultiCollectorManager(new FacetsCollectorManager(), hitCollectorManager)));\n    int i = 0;\n    final Query[] filters = query.getDrillDownQueries();\n    for (String dim : drillDownDims.keySet())\n      callableCollectors.add(new CallableCollector(i++, searcher, getDrillDownQuery(query, filters, dim),\n              new FacetsCollectorManager()));\n\n    final FacetsCollector mainFacetsCollector;\n    final FacetsCollector[] facetsCollectors = new FacetsCollector[drillDownDims.size()];\n    final R collectorResult;\n\n    try {\n      // Run the query pool\n      final List<Future<CallableResult>> futures = executor.invokeAll(callableCollectors);\n\n      // Extract the results\n      final Object[] mainResults = (Object[]) futures.get(0).get().result;\n      mainFacetsCollector = (FacetsCollector) mainResults[0];\n      collectorResult = (R) mainResults[1];\n      for (i = 1; i < futures.size(); i++) {\n        final CallableResult result = futures.get(i).get();\n        facetsCollectors[result.pos] = (FacetsCollector) result.result;\n      }\n      // Fill the null results with the mainFacetsCollector\n      for (i = 0; i < facetsCollectors.length; i++)\n        if (facetsCollectors[i] == null)\n          facetsCollectors[i] = mainFacetsCollector;\n\n    } catch (InterruptedException e) {\n      throw new ThreadInterruptedException(e);\n    } catch (ExecutionException e) {\n      throw new RuntimeException(e);\n    }\n\n    // build the facets and return the result\n    return new ConcurrentDrillSidewaysResult<>(buildFacetsResult(mainFacetsCollector, facetsCollectors,\n            drillDownDims.keySet().toArray(new String[drillDownDims.size()])), null, collectorResult);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/DrillSideways#[R]_search(DrillDownQuery,CollectorManager[#,R]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/DrillSideways#[R]_search(DrillDownQuery,CollectorManager[#,R]).mjava","sourceNew":"  /** Runs a search, using a {@link CollectorManager} to gather and merge search results */\n  public <R> ConcurrentDrillSidewaysResult<R> search(final DrillDownQuery query,\n          final CollectorManager<?, R> hitCollectorManager) throws IOException {\n\n    final Map<String, Integer> drillDownDims = query.getDims();\n    final List<CallableCollector> callableCollectors = new ArrayList<>(drillDownDims.size() + 1);\n\n    // Add the main DrillDownQuery\n    callableCollectors.add(new CallableCollector(-1, searcher, query,\n            new MultiCollectorManager(new FacetsCollectorManager(), hitCollectorManager)));\n    int i = 0;\n    final Query[] filters = query.getDrillDownQueries();\n    for (String dim : drillDownDims.keySet())\n      callableCollectors.add(new CallableCollector(i++, searcher, getDrillDownQuery(query, filters, dim),\n              new FacetsCollectorManager()));\n\n    final FacetsCollector mainFacetsCollector;\n    final FacetsCollector[] facetsCollectors = new FacetsCollector[drillDownDims.size()];\n    final R collectorResult;\n\n    try {\n      // Run the query pool\n      final List<Future<CallableResult>> futures = executor.invokeAll(callableCollectors);\n\n      // Extract the results\n      final Object[] mainResults = (Object[]) futures.get(0).get().result;\n      mainFacetsCollector = (FacetsCollector) mainResults[0];\n      collectorResult = (R) mainResults[1];\n      for (i = 1; i < futures.size(); i++) {\n        final CallableResult result = futures.get(i).get();\n        facetsCollectors[result.pos] = (FacetsCollector) result.result;\n      }\n      // Fill the null results with the mainFacetsCollector\n      for (i = 0; i < facetsCollectors.length; i++)\n        if (facetsCollectors[i] == null)\n          facetsCollectors[i] = mainFacetsCollector;\n\n    } catch (InterruptedException e) {\n      throw new ThreadInterruptedException(e);\n    } catch (ExecutionException e) {\n      throw new RuntimeException(e);\n    }\n\n    // build the facets and return the result\n    return new ConcurrentDrillSidewaysResult<>(buildFacetsResult(mainFacetsCollector, facetsCollectors,\n            drillDownDims.keySet().toArray(new String[drillDownDims.size()])), null, collectorResult);\n  }\n\n","sourceOld":"  /** Runs a search, using a {@link CollectorManager} to gather and merge search results */\n  @SuppressWarnings(\"unchecked\")\n  public <R> ConcurrentDrillSidewaysResult<R> search(final DrillDownQuery query,\n          final CollectorManager<?, R> hitCollectorManager) throws IOException {\n\n    final Map<String, Integer> drillDownDims = query.getDims();\n    final List<CallableCollector> callableCollectors = new ArrayList<>(drillDownDims.size() + 1);\n\n    // Add the main DrillDownQuery\n    callableCollectors.add(new CallableCollector(-1, searcher, query,\n            new MultiCollectorManager(new FacetsCollectorManager(), hitCollectorManager)));\n    int i = 0;\n    final Query[] filters = query.getDrillDownQueries();\n    for (String dim : drillDownDims.keySet())\n      callableCollectors.add(new CallableCollector(i++, searcher, getDrillDownQuery(query, filters, dim),\n              new FacetsCollectorManager()));\n\n    final FacetsCollector mainFacetsCollector;\n    final FacetsCollector[] facetsCollectors = new FacetsCollector[drillDownDims.size()];\n    final R collectorResult;\n\n    try {\n      // Run the query pool\n      final List<Future<CallableResult>> futures = executor.invokeAll(callableCollectors);\n\n      // Extract the results\n      final Object[] mainResults = (Object[]) futures.get(0).get().result;\n      mainFacetsCollector = (FacetsCollector) mainResults[0];\n      collectorResult = (R) mainResults[1];\n      for (i = 1; i < futures.size(); i++) {\n        final CallableResult result = futures.get(i).get();\n        facetsCollectors[result.pos] = (FacetsCollector) result.result;\n      }\n      // Fill the null results with the mainFacetsCollector\n      for (i = 0; i < facetsCollectors.length; i++)\n        if (facetsCollectors[i] == null)\n          facetsCollectors[i] = mainFacetsCollector;\n\n    } catch (InterruptedException e) {\n      throw new ThreadInterruptedException(e);\n    } catch (ExecutionException e) {\n      throw new RuntimeException(e);\n    }\n\n    // build the facets and return the result\n    return new ConcurrentDrillSidewaysResult<>(buildFacetsResult(mainFacetsCollector, facetsCollectors,\n            drillDownDims.keySet().toArray(new String[drillDownDims.size()])), null, collectorResult);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2","date":1591961131,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/DrillSideways#[R]_search(DrillDownQuery,CollectorManager[#,R]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/DrillSideways#[R]_search(DrillDownQuery,CollectorManager[#,R]).mjava","sourceNew":"  /** Runs a search, using a {@link CollectorManager} to gather and merge search results */\n  @SuppressWarnings(\"unchecked\")\n  public <R> ConcurrentDrillSidewaysResult<R> search(final DrillDownQuery query,\n          final CollectorManager<?, R> hitCollectorManager) throws IOException {\n\n    final Map<String, Integer> drillDownDims = query.getDims();\n    final List<CallableCollector> callableCollectors = new ArrayList<>(drillDownDims.size() + 1);\n\n    // Add the main DrillDownQuery\n    callableCollectors.add(new CallableCollector(-1, searcher, query,\n            new MultiCollectorManager(new FacetsCollectorManager(), hitCollectorManager)));\n    int i = 0;\n    final Query[] filters = query.getDrillDownQueries();\n    for (String dim : drillDownDims.keySet())\n      callableCollectors.add(new CallableCollector(i++, searcher, getDrillDownQuery(query, filters, dim),\n              new FacetsCollectorManager()));\n\n    final FacetsCollector mainFacetsCollector;\n    final FacetsCollector[] facetsCollectors = new FacetsCollector[drillDownDims.size()];\n    final R collectorResult;\n\n    try {\n      // Run the query pool\n      final List<Future<CallableResult>> futures = executor.invokeAll(callableCollectors);\n\n      // Extract the results\n      final Object[] mainResults = (Object[]) futures.get(0).get().result;\n      mainFacetsCollector = (FacetsCollector) mainResults[0];\n      collectorResult = (R) mainResults[1];\n      for (i = 1; i < futures.size(); i++) {\n        final CallableResult result = futures.get(i).get();\n        facetsCollectors[result.pos] = (FacetsCollector) result.result;\n      }\n      // Fill the null results with the mainFacetsCollector\n      for (i = 0; i < facetsCollectors.length; i++)\n        if (facetsCollectors[i] == null)\n          facetsCollectors[i] = mainFacetsCollector;\n\n    } catch (InterruptedException e) {\n      throw new ThreadInterruptedException(e);\n    } catch (ExecutionException e) {\n      throw new RuntimeException(e);\n    }\n\n    // build the facets and return the result\n    return new ConcurrentDrillSidewaysResult<>(buildFacetsResult(mainFacetsCollector, facetsCollectors,\n            drillDownDims.keySet().toArray(new String[drillDownDims.size()])), null, collectorResult);\n  }\n\n","sourceOld":"  /** Runs a search, using a {@link CollectorManager} to gather and merge search results */\n  public <R> ConcurrentDrillSidewaysResult<R> search(final DrillDownQuery query,\n          final CollectorManager<?, R> hitCollectorManager) throws IOException {\n\n    final Map<String, Integer> drillDownDims = query.getDims();\n    final List<CallableCollector> callableCollectors = new ArrayList<>(drillDownDims.size() + 1);\n\n    // Add the main DrillDownQuery\n    callableCollectors.add(new CallableCollector(-1, searcher, query,\n            new MultiCollectorManager(new FacetsCollectorManager(), hitCollectorManager)));\n    int i = 0;\n    final Query[] filters = query.getDrillDownQueries();\n    for (String dim : drillDownDims.keySet())\n      callableCollectors.add(new CallableCollector(i++, searcher, getDrillDownQuery(query, filters, dim),\n              new FacetsCollectorManager()));\n\n    final FacetsCollector mainFacetsCollector;\n    final FacetsCollector[] facetsCollectors = new FacetsCollector[drillDownDims.size()];\n    final R collectorResult;\n\n    try {\n      // Run the query pool\n      final List<Future<CallableResult>> futures = executor.invokeAll(callableCollectors);\n\n      // Extract the results\n      final Object[] mainResults = (Object[]) futures.get(0).get().result;\n      mainFacetsCollector = (FacetsCollector) mainResults[0];\n      collectorResult = (R) mainResults[1];\n      for (i = 1; i < futures.size(); i++) {\n        final CallableResult result = futures.get(i).get();\n        facetsCollectors[result.pos] = (FacetsCollector) result.result;\n      }\n      // Fill the null results with the mainFacetsCollector\n      for (i = 0; i < facetsCollectors.length; i++)\n        if (facetsCollectors[i] == null)\n          facetsCollectors[i] = mainFacetsCollector;\n\n    } catch (InterruptedException e) {\n      throw new ThreadInterruptedException(e);\n    } catch (ExecutionException e) {\n      throw new RuntimeException(e);\n    }\n\n    // build the facets and return the result\n    return new ConcurrentDrillSidewaysResult<>(buildFacetsResult(mainFacetsCollector, facetsCollectors,\n            drillDownDims.keySet().toArray(new String[drillDownDims.size()])), null, collectorResult);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["91eb857a56b1a3a6659c666f88e2398347fc1c5a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"91eb857a56b1a3a6659c666f88e2398347fc1c5a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","91eb857a56b1a3a6659c666f88e2398347fc1c5a"]},"commit2Childs":{"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91eb857a56b1a3a6659c666f88e2398347fc1c5a","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"],"91eb857a56b1a3a6659c666f88e2398347fc1c5a":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}