{"path":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testLocalParamsInQP().mjava","commits":[{"id":"3cdb67100dc016748799a77218aa409478372d79","date":1353699950,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testLocalParamsInQP().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testLocalParamsInQP() throws Exception {\n    assertJQ(req(\"q\",\"qaz {!term f=text v=$qq} wsx\", \"qq\",\"now\")\n        ,\"/response/numFound==2\"\n    );\n\n    assertJQ(req(\"q\",\"qaz {!term f=text v=$qq} wsx\", \"qq\",\"nomatch\")\n        ,\"/response/numFound==0\"\n    );\n\n    assertJQ(req(\"q\",\"qaz {!term f=text}now wsx\", \"qq\",\"now\")\n        ,\"/response/numFound==2\"\n    );\n\n    assertJQ(req(\"q\",\"qaz {!term f=foo_s v='a \\\\' \\\" \\\\\\\\ {! ) } ( { z'} wsx\")           // single quote escaping\n        ,\"/response/numFound==1\"\n    );\n\n    assertJQ(req(\"q\",\"qaz {!term f=foo_s v=\\\"a ' \\\\\\\" \\\\\\\\ {! ) } ( { z\\\"} wsx\")         // double quote escaping\n        ,\"/response/numFound==1\"\n    );\n\n    // double-join to test back-to-back local params\n    assertJQ(req(\"q\",\"qaz {!join from=www_s to=eee_s}{!join from=qqq_s to=www_s}id:10\" )\n        ,\"/response/docs/[0]/id=='12'\"\n    );\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7d959d418bddfa46d8eea54f0d8b855165586838"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testLocalParamsInQP().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testLocalParamsInQP() throws Exception {\n    assertJQ(req(\"q\",\"qaz {!term f=text v=$qq} wsx\", \"qq\",\"now\")\n        ,\"/response/numFound==2\"\n    );\n\n    assertJQ(req(\"q\",\"qaz {!term f=text v=$qq} wsx\", \"qq\",\"nomatch\")\n        ,\"/response/numFound==0\"\n    );\n\n    assertJQ(req(\"q\",\"qaz {!term f=text}now wsx\", \"qq\",\"now\")\n        ,\"/response/numFound==2\"\n    );\n\n    assertJQ(req(\"q\",\"qaz {!term f=foo_s v='a \\\\' \\\" \\\\\\\\ {! ) } ( { z'} wsx\")           // single quote escaping\n        ,\"/response/numFound==1\"\n    );\n\n    assertJQ(req(\"q\",\"qaz {!term f=foo_s v=\\\"a ' \\\\\\\" \\\\\\\\ {! ) } ( { z\\\"} wsx\")         // double quote escaping\n        ,\"/response/numFound==1\"\n    );\n\n    // double-join to test back-to-back local params\n    assertJQ(req(\"q\",\"qaz {!join from=www_s to=eee_s}{!join from=qqq_s to=www_s}id:10\" )\n        ,\"/response/docs/[0]/id=='12'\"\n    );\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85af36ac27b1cd05e76c9ba0b2161063944753e9","date":1357349397,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testLocalParamsInQP().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testLocalParamsInQP().mjava","sourceNew":"  @Test\n  public void testLocalParamsInQP() throws Exception {\n    assertJQ(req(\"q\",\"qaz {!term f=text v=$qq} wsx\", \"qq\",\"now\")\n        ,\"/response/numFound==2\"\n    );\n\n    assertJQ(req(\"q\",\"qaz {!term f=text v=$qq} wsx\", \"qq\",\"nomatch\")\n        ,\"/response/numFound==0\"\n    );\n\n    assertJQ(req(\"q\",\"qaz {!term f=text}now wsx\", \"qq\",\"now\")\n        ,\"/response/numFound==2\"\n    );\n\n    assertJQ(req(\"q\",\"qaz {!term f=foo_s v='a \\\\' \\\" \\\\\\\\ {! ) } ( { z'} wsx\")           // single quote escaping\n        ,\"/response/numFound==1\"\n    );\n\n    assertJQ(req(\"q\",\"qaz {!term f=foo_s v=\\\"a ' \\\\\\\" \\\\\\\\ {! ) } ( { z\\\"} wsx\")         // double quote escaping\n        ,\"/response/numFound==1\"\n    );\n\n    // double-join to test back-to-back local params\n    assertJQ(req(\"q\",\"qaz {!join from=www_s to=eee_s}{!join from=qqq_s to=www_s}id:10\" )\n        ,\"/response/docs/[0]/id=='12'\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testLocalParamsInQP() throws Exception {\n    assertJQ(req(\"q\",\"qaz {!term f=text v=$qq} wsx\", \"qq\",\"now\")\n        ,\"/response/numFound==2\"\n    );\n\n    assertJQ(req(\"q\",\"qaz {!term f=text v=$qq} wsx\", \"qq\",\"nomatch\")\n        ,\"/response/numFound==0\"\n    );\n\n    assertJQ(req(\"q\",\"qaz {!term f=text}now wsx\", \"qq\",\"now\")\n        ,\"/response/numFound==2\"\n    );\n\n    assertJQ(req(\"q\",\"qaz {!term f=foo_s v='a \\\\' \\\" \\\\\\\\ {! ) } ( { z'} wsx\")           // single quote escaping\n        ,\"/response/numFound==1\"\n    );\n\n    assertJQ(req(\"q\",\"qaz {!term f=foo_s v=\\\"a ' \\\\\\\" \\\\\\\\ {! ) } ( { z\\\"} wsx\")         // double quote escaping\n        ,\"/response/numFound==1\"\n    );\n\n    // double-join to test back-to-back local params\n    assertJQ(req(\"q\",\"qaz {!join from=www_s to=eee_s}{!join from=qqq_s to=www_s}id:10\" )\n        ,\"/response/docs/[0]/id=='12'\"\n    );\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testLocalParamsInQP().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testLocalParamsInQP().mjava","sourceNew":"  @Test\n  public void testLocalParamsInQP() throws Exception {\n    assertJQ(req(\"q\",\"qaz {!term f=text v=$qq} wsx\", \"qq\",\"now\")\n        ,\"/response/numFound==2\"\n    );\n\n    assertJQ(req(\"q\",\"qaz {!term f=text v=$qq} wsx\", \"qq\",\"nomatch\")\n        ,\"/response/numFound==0\"\n    );\n\n    assertJQ(req(\"q\",\"qaz {!term f=text}now wsx\", \"qq\",\"now\")\n        ,\"/response/numFound==2\"\n    );\n\n    assertJQ(req(\"q\",\"qaz {!term f=foo_s v='a \\\\' \\\" \\\\\\\\ {! ) } ( { z'} wsx\")           // single quote escaping\n        ,\"/response/numFound==1\"\n    );\n\n    assertJQ(req(\"q\",\"qaz {!term f=foo_s v=\\\"a ' \\\\\\\" \\\\\\\\ {! ) } ( { z\\\"} wsx\")         // double quote escaping\n        ,\"/response/numFound==1\"\n    );\n\n    // double-join to test back-to-back local params\n    assertJQ(req(\"q\",\"qaz {!join from=www_s to=eee_s}{!join from=qqq_s to=www_s}id:10\" )\n        ,\"/response/docs/[0]/id=='12'\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testLocalParamsInQP() throws Exception {\n    assertJQ(req(\"q\",\"qaz {!term f=text v=$qq} wsx\", \"qq\",\"now\")\n        ,\"/response/numFound==2\"\n    );\n\n    assertJQ(req(\"q\",\"qaz {!term f=text v=$qq} wsx\", \"qq\",\"nomatch\")\n        ,\"/response/numFound==0\"\n    );\n\n    assertJQ(req(\"q\",\"qaz {!term f=text}now wsx\", \"qq\",\"now\")\n        ,\"/response/numFound==2\"\n    );\n\n    assertJQ(req(\"q\",\"qaz {!term f=foo_s v='a \\\\' \\\" \\\\\\\\ {! ) } ( { z'} wsx\")           // single quote escaping\n        ,\"/response/numFound==1\"\n    );\n\n    assertJQ(req(\"q\",\"qaz {!term f=foo_s v=\\\"a ' \\\\\\\" \\\\\\\\ {! ) } ( { z\\\"} wsx\")         // double quote escaping\n        ,\"/response/numFound==1\"\n    );\n\n    // double-join to test back-to-back local params\n    assertJQ(req(\"q\",\"qaz {!join from=www_s to=eee_s}{!join from=qqq_s to=www_s}id:10\" )\n        ,\"/response/docs/[0]/id=='12'\"\n    );\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d959d418bddfa46d8eea54f0d8b855165586838","date":1453938797,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testLocalParamsInQP().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testLocalParamsInQP().mjava","sourceNew":"  @Test\n  public void testLocalParamsInQP() throws Exception {\n    assertJQ(req(\"q\", \"qaz {!term f=text v=$qq} wsx\", \"qq\", \"now\")\n        , \"/response/numFound==2\"\n    );\n\n    assertJQ(req(\"q\", \"qaz {!term f=text v=$qq} wsx\", \"qq\", \"nomatch\")\n        , \"/response/numFound==0\"\n    );\n\n    assertJQ(req(\"q\", \"qaz {!term f=text}now wsx\", \"qq\", \"now\")\n        , \"/response/numFound==2\"\n    );\n\n    assertJQ(req(\"q\", \"qaz {!term f=foo_s v='a \\\\' \\\" \\\\\\\\ {! ) } ( { z'} wsx\")           // single quote escaping\n        , \"/response/numFound==1\"\n    );\n\n    assertJQ(req(\"q\", \"qaz {!term f=foo_s v=\\\"a ' \\\\\\\" \\\\\\\\ {! ) } ( { z\\\"} wsx\")         // double quote escaping\n        , \"/response/numFound==1\"\n    );\n\n    // double-join to test back-to-back local params\n    assertJQ(req(\"q\", \"qaz {!join from=www_s to=eee_s}{!join from=qqq_s to=www_s}id:10\")\n        , \"/response/docs/[0]/id=='12'\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testLocalParamsInQP() throws Exception {\n    assertJQ(req(\"q\",\"qaz {!term f=text v=$qq} wsx\", \"qq\",\"now\")\n        ,\"/response/numFound==2\"\n    );\n\n    assertJQ(req(\"q\",\"qaz {!term f=text v=$qq} wsx\", \"qq\",\"nomatch\")\n        ,\"/response/numFound==0\"\n    );\n\n    assertJQ(req(\"q\",\"qaz {!term f=text}now wsx\", \"qq\",\"now\")\n        ,\"/response/numFound==2\"\n    );\n\n    assertJQ(req(\"q\",\"qaz {!term f=foo_s v='a \\\\' \\\" \\\\\\\\ {! ) } ( { z'} wsx\")           // single quote escaping\n        ,\"/response/numFound==1\"\n    );\n\n    assertJQ(req(\"q\",\"qaz {!term f=foo_s v=\\\"a ' \\\\\\\" \\\\\\\\ {! ) } ( { z\\\"} wsx\")         // double quote escaping\n        ,\"/response/numFound==1\"\n    );\n\n    // double-join to test back-to-back local params\n    assertJQ(req(\"q\",\"qaz {!join from=www_s to=eee_s}{!join from=qqq_s to=www_s}id:10\" )\n        ,\"/response/docs/[0]/id=='12'\"\n    );\n  }\n\n","bugFix":["3cdb67100dc016748799a77218aa409478372d79"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testLocalParamsInQP().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testLocalParamsInQP().mjava","sourceNew":"  @Test\n  public void testLocalParamsInQP() throws Exception {\n    assertJQ(req(\"q\", \"qaz {!term f=text v=$qq} wsx\", \"qq\", \"now\")\n        , \"/response/numFound==2\"\n    );\n\n    assertJQ(req(\"q\", \"qaz {!term f=text v=$qq} wsx\", \"qq\", \"nomatch\")\n        , \"/response/numFound==0\"\n    );\n\n    assertJQ(req(\"q\", \"qaz {!term f=text}now wsx\", \"qq\", \"now\")\n        , \"/response/numFound==2\"\n    );\n\n    assertJQ(req(\"q\", \"qaz {!term f=foo_s v='a \\\\' \\\" \\\\\\\\ {! ) } ( { z'} wsx\")           // single quote escaping\n        , \"/response/numFound==1\"\n    );\n\n    assertJQ(req(\"q\", \"qaz {!term f=foo_s v=\\\"a ' \\\\\\\" \\\\\\\\ {! ) } ( { z\\\"} wsx\")         // double quote escaping\n        , \"/response/numFound==1\"\n    );\n\n    // double-join to test back-to-back local params\n    assertJQ(req(\"q\", \"qaz {!join from=www_s to=eee_s}{!join from=qqq_s to=www_s}id:10\")\n        , \"/response/docs/[0]/id=='12'\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testLocalParamsInQP() throws Exception {\n    assertJQ(req(\"q\",\"qaz {!term f=text v=$qq} wsx\", \"qq\",\"now\")\n        ,\"/response/numFound==2\"\n    );\n\n    assertJQ(req(\"q\",\"qaz {!term f=text v=$qq} wsx\", \"qq\",\"nomatch\")\n        ,\"/response/numFound==0\"\n    );\n\n    assertJQ(req(\"q\",\"qaz {!term f=text}now wsx\", \"qq\",\"now\")\n        ,\"/response/numFound==2\"\n    );\n\n    assertJQ(req(\"q\",\"qaz {!term f=foo_s v='a \\\\' \\\" \\\\\\\\ {! ) } ( { z'} wsx\")           // single quote escaping\n        ,\"/response/numFound==1\"\n    );\n\n    assertJQ(req(\"q\",\"qaz {!term f=foo_s v=\\\"a ' \\\\\\\" \\\\\\\\ {! ) } ( { z\\\"} wsx\")         // double quote escaping\n        ,\"/response/numFound==1\"\n    );\n\n    // double-join to test back-to-back local params\n    assertJQ(req(\"q\",\"qaz {!join from=www_s to=eee_s}{!join from=qqq_s to=www_s}id:10\" )\n        ,\"/response/docs/[0]/id=='12'\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","85af36ac27b1cd05e76c9ba0b2161063944753e9"],"85af36ac27b1cd05e76c9ba0b2161063944753e9":["3cdb67100dc016748799a77218aa409478372d79"],"3cdb67100dc016748799a77218aa409478372d79":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["85af36ac27b1cd05e76c9ba0b2161063944753e9","7d959d418bddfa46d8eea54f0d8b855165586838"],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb67100dc016748799a77218aa409478372d79"],"7d959d418bddfa46d8eea54f0d8b855165586838":["85af36ac27b1cd05e76c9ba0b2161063944753e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7d959d418bddfa46d8eea54f0d8b855165586838"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"85af36ac27b1cd05e76c9ba0b2161063944753e9":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","1e6acbaae7af722f17204ceccf0f7db5753eccf3","7d959d418bddfa46d8eea54f0d8b855165586838"],"3cdb67100dc016748799a77218aa409478372d79":["85af36ac27b1cd05e76c9ba0b2161063944753e9","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cdb67100dc016748799a77218aa409478372d79","407687e67faf6e1f02a211ca078d8e3eed631027"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"7d959d418bddfa46d8eea54f0d8b855165586838":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}