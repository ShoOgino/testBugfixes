{"path":"lucene/facet/src/test/org/apache/lucene/facet/params/PerDimensionIndexingParamsTest#testTopLevelSettings().mjava","commits":[{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/params/PerDimensionIndexingParamsTest#testTopLevelSettings().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/params/PerDimensionIndexingParamsTest#testTopLevelSettings().mjava","sourceNew":"  @Test\n  public void testTopLevelSettings() {\n    FacetIndexingParams ifip = new PerDimensionIndexingParams(Collections.<CategoryPath, CategoryListParams>emptyMap());\n    assertNotNull(\"Missing default category list\", ifip.getAllCategoryListParams());\n    assertEquals(\"Expected default category list field is $facets\", \"$facets\", ifip.getCategoryListParams(null).field);\n    String expectedDDText = \"a\" + ifip.getFacetDelimChar() + \"b\";\n    CategoryPath cp = new CategoryPath(\"a\", \"b\");\n    assertEquals(\"wrong drill-down term\", new Term(\"$facets\", expectedDDText), DrillDown.term(ifip,cp));\n    char[] buf = new char[20];\n    int numchars = ifip.drillDownTermText(cp, buf);\n    assertEquals(\"3 characters should be written\", 3, numchars);\n    assertEquals(\"wrong drill-down term text\", expectedDDText, new String(buf, 0, numchars));\n    \n    assertEquals(\"partition for all ordinals is the first\", \"\", PartitionsUtils.partitionNameByOrdinal(ifip, 250));\n    assertEquals(\"for partition 0, the same name should be returned\", \"\", PartitionsUtils.partitionName(0));\n    assertEquals(\"for any other, it's the concatenation of name + partition\", PartitionsUtils.PART_NAME_PREFIX + \"1\", PartitionsUtils.partitionName(1));\n    assertEquals(\"default partition number is always 0\", 0, PartitionsUtils.partitionNumber(ifip,100));\n    assertEquals(\"default partition size is unbounded\", Integer.MAX_VALUE, ifip.getPartitionSize());\n  }\n\n","sourceOld":"  @Test\n  public void testTopLevelSettings() {\n    FacetIndexingParams ifip = new PerDimensionIndexingParams(Collections.<CategoryPath, CategoryListParams>emptyMap());\n    assertNotNull(\"Missing default category list\", ifip.getAllCategoryListParams());\n    assertEquals(\"Expected default category list field is $facets\", \"$facets\", ifip.getCategoryListParams(null).field);\n    String expectedDDText = \"a\" + ifip.getFacetDelimChar() + \"b\";\n    CategoryPath cp = new CategoryPath(\"a\", \"b\");\n    assertEquals(\"wrong drill-down term\", new Term(\"$facets\", expectedDDText), DrillDown.term(ifip,cp));\n    char[] buf = new char[20];\n    int numchars = ifip.drillDownTermText(cp, buf);\n    assertEquals(\"3 characters should be written\", 3, numchars);\n    assertEquals(\"wrong drill-down term text\", expectedDDText, new String(buf, 0, numchars));\n    \n    assertEquals(\"partition for all ordinals is the first\", \"\", PartitionsUtils.partitionNameByOrdinal(ifip, 250));\n    assertEquals(\"for partition 0, the same name should be returned\", \"\", PartitionsUtils.partitionName(0));\n    assertEquals(\"for any other, it's the concatenation of name + partition\", PartitionsUtils.PART_NAME_PREFIX + \"1\", PartitionsUtils.partitionName(1));\n    assertEquals(\"default partition number is always 0\", 0, PartitionsUtils.partitionNumber(ifip,100));\n    assertEquals(\"default partition size is unbounded\", Integer.MAX_VALUE, ifip.getPartitionSize());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f793470bad5ce8422502e33eaae65fc6a3271bd2","date":1360479442,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/params/PerDimensionIndexingParamsTest#testTopLevelSettings().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/params/PerDimensionIndexingParamsTest#testTopLevelSettings().mjava","sourceNew":"  @Test\n  public void testTopLevelSettings() {\n    FacetIndexingParams ifip = new PerDimensionIndexingParams(Collections.<CategoryPath, CategoryListParams>emptyMap());\n    assertNotNull(\"Missing default category list\", ifip.getAllCategoryListParams());\n    assertEquals(\"Expected default category list field is $facets\", \"$facets\", ifip.getCategoryListParams(null).field);\n    String expectedDDText = \"a\" + ifip.getFacetDelimChar() + \"b\";\n    CategoryPath cp = new CategoryPath(\"a\", \"b\");\n    assertEquals(\"wrong drill-down term\", new Term(\"$facets\", expectedDDText), DrillDownQuery.term(ifip,cp));\n    char[] buf = new char[20];\n    int numchars = ifip.drillDownTermText(cp, buf);\n    assertEquals(\"3 characters should be written\", 3, numchars);\n    assertEquals(\"wrong drill-down term text\", expectedDDText, new String(buf, 0, numchars));\n    \n    assertEquals(\"partition for all ordinals is the first\", \"\", PartitionsUtils.partitionNameByOrdinal(ifip, 250));\n    assertEquals(\"for partition 0, the same name should be returned\", \"\", PartitionsUtils.partitionName(0));\n    assertEquals(\"for any other, it's the concatenation of name + partition\", PartitionsUtils.PART_NAME_PREFIX + \"1\", PartitionsUtils.partitionName(1));\n    assertEquals(\"default partition number is always 0\", 0, PartitionsUtils.partitionNumber(ifip,100));\n    assertEquals(\"default partition size is unbounded\", Integer.MAX_VALUE, ifip.getPartitionSize());\n  }\n\n","sourceOld":"  @Test\n  public void testTopLevelSettings() {\n    FacetIndexingParams ifip = new PerDimensionIndexingParams(Collections.<CategoryPath, CategoryListParams>emptyMap());\n    assertNotNull(\"Missing default category list\", ifip.getAllCategoryListParams());\n    assertEquals(\"Expected default category list field is $facets\", \"$facets\", ifip.getCategoryListParams(null).field);\n    String expectedDDText = \"a\" + ifip.getFacetDelimChar() + \"b\";\n    CategoryPath cp = new CategoryPath(\"a\", \"b\");\n    assertEquals(\"wrong drill-down term\", new Term(\"$facets\", expectedDDText), DrillDown.term(ifip,cp));\n    char[] buf = new char[20];\n    int numchars = ifip.drillDownTermText(cp, buf);\n    assertEquals(\"3 characters should be written\", 3, numchars);\n    assertEquals(\"wrong drill-down term text\", expectedDDText, new String(buf, 0, numchars));\n    \n    assertEquals(\"partition for all ordinals is the first\", \"\", PartitionsUtils.partitionNameByOrdinal(ifip, 250));\n    assertEquals(\"for partition 0, the same name should be returned\", \"\", PartitionsUtils.partitionName(0));\n    assertEquals(\"for any other, it's the concatenation of name + partition\", PartitionsUtils.PART_NAME_PREFIX + \"1\", PartitionsUtils.partitionName(1));\n    assertEquals(\"default partition number is always 0\", 0, PartitionsUtils.partitionNumber(ifip,100));\n    assertEquals(\"default partition size is unbounded\", Integer.MAX_VALUE, ifip.getPartitionSize());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/params/PerDimensionIndexingParamsTest#testTopLevelSettings().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/params/PerDimensionIndexingParamsTest#testTopLevelSettings().mjava","sourceNew":"  @Test\n  public void testTopLevelSettings() {\n    FacetIndexingParams ifip = new PerDimensionIndexingParams(Collections.<FacetLabel, CategoryListParams>emptyMap());\n    assertNotNull(\"Missing default category list\", ifip.getAllCategoryListParams());\n    assertEquals(\"Expected default category list field is $facets\", \"$facets\", ifip.getCategoryListParams(null).field);\n    String expectedDDText = \"a\" + ifip.getFacetDelimChar() + \"b\";\n    FacetLabel cp = new FacetLabel(\"a\", \"b\");\n    assertEquals(\"wrong drill-down term\", new Term(\"$facets\", expectedDDText), DrillDownQuery.term(ifip,cp));\n    char[] buf = new char[20];\n    int numchars = ifip.drillDownTermText(cp, buf);\n    assertEquals(\"3 characters should be written\", 3, numchars);\n    assertEquals(\"wrong drill-down term text\", expectedDDText, new String(buf, 0, numchars));\n    \n    assertEquals(\"partition for all ordinals is the first\", \"\", PartitionsUtils.partitionNameByOrdinal(ifip, 250));\n    assertEquals(\"for partition 0, the same name should be returned\", \"\", PartitionsUtils.partitionName(0));\n    assertEquals(\"for any other, it's the concatenation of name + partition\", PartitionsUtils.PART_NAME_PREFIX + \"1\", PartitionsUtils.partitionName(1));\n    assertEquals(\"default partition number is always 0\", 0, PartitionsUtils.partitionNumber(ifip,100));\n    assertEquals(\"default partition size is unbounded\", Integer.MAX_VALUE, ifip.getPartitionSize());\n  }\n\n","sourceOld":"  @Test\n  public void testTopLevelSettings() {\n    FacetIndexingParams ifip = new PerDimensionIndexingParams(Collections.<CategoryPath, CategoryListParams>emptyMap());\n    assertNotNull(\"Missing default category list\", ifip.getAllCategoryListParams());\n    assertEquals(\"Expected default category list field is $facets\", \"$facets\", ifip.getCategoryListParams(null).field);\n    String expectedDDText = \"a\" + ifip.getFacetDelimChar() + \"b\";\n    CategoryPath cp = new CategoryPath(\"a\", \"b\");\n    assertEquals(\"wrong drill-down term\", new Term(\"$facets\", expectedDDText), DrillDownQuery.term(ifip,cp));\n    char[] buf = new char[20];\n    int numchars = ifip.drillDownTermText(cp, buf);\n    assertEquals(\"3 characters should be written\", 3, numchars);\n    assertEquals(\"wrong drill-down term text\", expectedDDText, new String(buf, 0, numchars));\n    \n    assertEquals(\"partition for all ordinals is the first\", \"\", PartitionsUtils.partitionNameByOrdinal(ifip, 250));\n    assertEquals(\"for partition 0, the same name should be returned\", \"\", PartitionsUtils.partitionName(0));\n    assertEquals(\"for any other, it's the concatenation of name + partition\", PartitionsUtils.PART_NAME_PREFIX + \"1\", PartitionsUtils.partitionName(1));\n    assertEquals(\"default partition number is always 0\", 0, PartitionsUtils.partitionNumber(ifip,100));\n    assertEquals(\"default partition size is unbounded\", Integer.MAX_VALUE, ifip.getPartitionSize());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f01616d06510fc630b6ef0ec324bdebc2fc49b3c","date":1385331328,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/params/PerDimensionIndexingParamsTest#testTopLevelSettings().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testTopLevelSettings() {\n    FacetIndexingParams ifip = new PerDimensionIndexingParams(Collections.<FacetLabel, CategoryListParams>emptyMap());\n    assertNotNull(\"Missing default category list\", ifip.getAllCategoryListParams());\n    assertEquals(\"Expected default category list field is $facets\", \"$facets\", ifip.getCategoryListParams(null).field);\n    String expectedDDText = \"a\" + ifip.getFacetDelimChar() + \"b\";\n    FacetLabel cp = new FacetLabel(\"a\", \"b\");\n    assertEquals(\"wrong drill-down term\", new Term(\"$facets\", expectedDDText), DrillDownQuery.term(ifip,cp));\n    char[] buf = new char[20];\n    int numchars = ifip.drillDownTermText(cp, buf);\n    assertEquals(\"3 characters should be written\", 3, numchars);\n    assertEquals(\"wrong drill-down term text\", expectedDDText, new String(buf, 0, numchars));\n    \n    assertEquals(\"partition for all ordinals is the first\", \"\", PartitionsUtils.partitionNameByOrdinal(ifip, 250));\n    assertEquals(\"for partition 0, the same name should be returned\", \"\", PartitionsUtils.partitionName(0));\n    assertEquals(\"for any other, it's the concatenation of name + partition\", PartitionsUtils.PART_NAME_PREFIX + \"1\", PartitionsUtils.partitionName(1));\n    assertEquals(\"default partition number is always 0\", 0, PartitionsUtils.partitionNumber(ifip,100));\n    assertEquals(\"default partition size is unbounded\", Integer.MAX_VALUE, ifip.getPartitionSize());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/params/PerDimensionIndexingParamsTest#testTopLevelSettings().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testTopLevelSettings() {\n    FacetIndexingParams ifip = new PerDimensionIndexingParams(Collections.<CategoryPath, CategoryListParams>emptyMap());\n    assertNotNull(\"Missing default category list\", ifip.getAllCategoryListParams());\n    assertEquals(\"Expected default category list field is $facets\", \"$facets\", ifip.getCategoryListParams(null).field);\n    String expectedDDText = \"a\" + ifip.getFacetDelimChar() + \"b\";\n    CategoryPath cp = new CategoryPath(\"a\", \"b\");\n    assertEquals(\"wrong drill-down term\", new Term(\"$facets\", expectedDDText), DrillDownQuery.term(ifip,cp));\n    char[] buf = new char[20];\n    int numchars = ifip.drillDownTermText(cp, buf);\n    assertEquals(\"3 characters should be written\", 3, numchars);\n    assertEquals(\"wrong drill-down term text\", expectedDDText, new String(buf, 0, numchars));\n    \n    assertEquals(\"partition for all ordinals is the first\", \"\", PartitionsUtils.partitionNameByOrdinal(ifip, 250));\n    assertEquals(\"for partition 0, the same name should be returned\", \"\", PartitionsUtils.partitionName(0));\n    assertEquals(\"for any other, it's the concatenation of name + partition\", PartitionsUtils.PART_NAME_PREFIX + \"1\", PartitionsUtils.partitionName(1));\n    assertEquals(\"default partition number is always 0\", 0, PartitionsUtils.partitionNumber(ifip,100));\n    assertEquals(\"default partition size is unbounded\", Integer.MAX_VALUE, ifip.getPartitionSize());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["f793470bad5ce8422502e33eaae65fc6a3271bd2","f01616d06510fc630b6ef0ec324bdebc2fc49b3c"],"f01616d06510fc630b6ef0ec324bdebc2fc49b3c":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"f793470bad5ce8422502e33eaae65fc6a3271bd2":["607428da722dcb3e86bbd11c63de8986e6275c36"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["f793470bad5ce8422502e33eaae65fc6a3271bd2"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["f793470bad5ce8422502e33eaae65fc6a3271bd2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["607428da722dcb3e86bbd11c63de8986e6275c36"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f01616d06510fc630b6ef0ec324bdebc2fc49b3c":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"f793470bad5ce8422502e33eaae65fc6a3271bd2":["3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["f01616d06510fc630b6ef0ec324bdebc2fc49b3c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}