{"path":"lucene/src/java/org/apache/lucene/util/fst/FST#addNode(Builder.UnCompiledNode[T]).mjava","commits":[{"id":"8be6e1e4fbbc94d90b78f175c03ff389b6949373","date":1306674752,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#addNode(Builder.UnCompiledNode[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#addNode(Builder.UnCompiledNode[T]).mjava","sourceNew":"  // serializes new node by appending its bytes to the end\n  // of the current byte[]\n  int addNode(Builder.UnCompiledNode<T> node) throws IOException {\n    //System.out.println(\"FST.addNode pos=\" + posWrite + \" numArcs=\" + node.numArcs);\n    if (node.numArcs == 0) {\n      if (node.isFinal) {\n        return FINAL_END_NODE;\n      } else {\n        return NON_FINAL_END_NODE;\n      }\n    }\n\n    int startAddress = writer.posWrite;\n    //System.out.println(\"  startAddr=\" + startAddress);\n\n    final boolean doFixedArray = shouldExpand(node);\n    final int fixedArrayStart;\n    if (doFixedArray) {\n      if (bytesPerArc.length < node.numArcs) {\n        bytesPerArc = new int[ArrayUtil.oversize(node.numArcs, 1)];\n      }\n      // write a \"false\" first arc:\n      writer.writeByte((byte) BIT_ARCS_AS_FIXED_ARRAY);\n      writer.writeVInt(node.numArcs);\n      // placeholder -- we'll come back and write the number\n      // of bytes per arc here:\n      writer.writeByte((byte) 0);\n      fixedArrayStart = writer.posWrite;\n      //System.out.println(\"  do fixed arcs array arcsStart=\" + fixedArrayStart);\n    } else {\n      fixedArrayStart = 0;\n    }\n\n    nodeCount++;\n    arcCount += node.numArcs;\n    \n    final int lastArc = node.numArcs-1;\n\n    int lastArcStart = writer.posWrite;\n    int maxBytesPerArc = 0;\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      final Builder.CompiledNode target = (Builder.CompiledNode) arc.target;\n      int flags = 0;\n\n      if (arcIdx == lastArc) {\n        flags += BIT_LAST_ARC;\n      }\n\n      if (lastFrozenNode == target.address && !doFixedArray) {\n        flags += BIT_TARGET_NEXT;\n      }\n\n      if (arc.isFinal) {\n        flags += BIT_FINAL_ARC;\n        if (arc.nextFinalOutput != NO_OUTPUT) {\n          flags += BIT_ARC_HAS_FINAL_OUTPUT;\n        }\n      } else {\n        assert arc.nextFinalOutput == NO_OUTPUT;\n      }\n\n      boolean targetHasArcs = target.address > 0;\n\n      if (!targetHasArcs) {\n        flags += BIT_STOP_NODE;\n      }\n\n      if (arc.output != NO_OUTPUT) {\n        flags += BIT_ARC_HAS_OUTPUT;\n      }\n\n      writer.writeByte((byte) flags);\n      writeLabel(arc.label);\n\n      //System.out.println(\"  write arc: label=\" + arc.label + \" flags=\" + flags);\n\n      if (arc.output != NO_OUTPUT) {\n        outputs.write(arc.output, writer);\n        arcWithOutputCount++;\n      }\n      if (arc.nextFinalOutput != NO_OUTPUT) {\n        outputs.write(arc.nextFinalOutput, writer);\n      }\n\n      if (targetHasArcs && (doFixedArray || lastFrozenNode != target.address)) {\n        assert target.address > 0;\n        writer.writeInt(target.address);\n      }\n\n      // just write the arcs \"like normal\" on first pass,\n      // but record how many bytes each one took, and max\n      // byte size:\n      if (doFixedArray) {\n        bytesPerArc[arcIdx] = writer.posWrite - lastArcStart;\n        lastArcStart = writer.posWrite;\n        maxBytesPerArc = Math.max(maxBytesPerArc, bytesPerArc[arcIdx]);\n        //System.out.println(\"    bytes=\" + bytesPerArc[arcIdx]);\n      }\n    }\n\n    if (doFixedArray) {\n      assert maxBytesPerArc > 0;\n      // 2nd pass just \"expands\" all arcs to take up a fixed\n      // byte size\n      final int sizeNeeded = fixedArrayStart + node.numArcs * maxBytesPerArc;\n      bytes = ArrayUtil.grow(bytes, sizeNeeded);\n      if (maxBytesPerArc > 255) {\n        throw new IllegalStateException(\"max arc size is too large (\" + maxBytesPerArc + \")\");\n      }\n      bytes[fixedArrayStart-1] = (byte) maxBytesPerArc;\n\n      // expand the arcs in place, backwards\n      int srcPos = writer.posWrite;\n      int destPos = fixedArrayStart + node.numArcs*maxBytesPerArc;\n      writer.posWrite = destPos;\n      for(int arcIdx=node.numArcs-1;arcIdx>=0;arcIdx--) {\n        //System.out.println(\"  repack arcIdx=\" + arcIdx + \" srcPos=\" + srcPos + \" destPos=\" + destPos);\n        destPos -= maxBytesPerArc;\n        srcPos -= bytesPerArc[arcIdx];\n        if (srcPos != destPos) {\n          assert destPos > srcPos;\n          System.arraycopy(bytes, srcPos, bytes, destPos, bytesPerArc[arcIdx]);\n        }\n      }\n    }\n\n    // reverse bytes in-place; we do this so that the\n    // \"BIT_TARGET_NEXT\" opto can work, ie, it reads the\n    // node just before the current one\n    final int endAddress = lastFrozenNode = writer.posWrite - 1;\n\n    int left = startAddress;\n    int right = endAddress;\n    while (left < right) {\n      final byte b = bytes[left];\n      bytes[left++] = bytes[right];\n      bytes[right--] = b;\n    }\n\n    return endAddress;\n  }\n\n","sourceOld":"  // serializes new node by appending its bytes to the end\n  // of the current byte[]\n  int addNode(Builder.UnCompiledNode<T> node) throws IOException {\n    //System.out.println(\"FST.addNode pos=\" + posWrite + \" numArcs=\" + node.numArcs);\n    if (node.numArcs == 0) {\n      if (node.isFinal) {\n        return FINAL_END_NODE;\n      } else {\n        return NON_FINAL_END_NODE;\n      }\n    }\n\n    int startAddress = writer.posWrite;\n    //System.out.println(\"  startAddr=\" + startAddress);\n\n    final boolean doFixedArray = shouldExpand(node);\n    final int fixedArrayStart;\n    if (doFixedArray) {\n      if (bytesPerArc.length < node.numArcs) {\n        bytesPerArc = new int[ArrayUtil.oversize(node.numArcs, 1)];\n      }\n      // write a \"false\" first arc:\n      writer.writeByte((byte) BIT_ARCS_AS_FIXED_ARRAY);\n      writer.writeVInt(node.numArcs);\n      // placeholder -- we'll come back and write the number\n      // of bytes per arc here:\n      writer.writeByte((byte) 0);\n      fixedArrayStart = writer.posWrite;\n      //System.out.println(\"  do fixed arcs array arcsStart=\" + fixedArrayStart);\n    } else {\n      fixedArrayStart = 0;\n    }\n\n    nodeCount++;\n    arcCount += node.numArcs;\n    \n    final int lastArc = node.numArcs-1;\n\n    int lastArcStart = writer.posWrite;\n    int maxBytesPerArc = 0;\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      final Builder.CompiledNode target = (Builder.CompiledNode) arc.target;\n      int flags = 0;\n\n      if (arcIdx == lastArc) {\n        flags += BIT_LAST_ARC;\n      }\n\n      if (lastFrozenNode == target.address && !doFixedArray) {\n        flags += BIT_TARGET_NEXT;\n      }\n\n      if (arc.isFinal) {\n        flags += BIT_FINAL_ARC;\n        if (arc.nextFinalOutput != NO_OUTPUT) {\n          flags += BIT_ARC_HAS_FINAL_OUTPUT;\n        }\n      } else {\n        assert arc.nextFinalOutput == NO_OUTPUT;\n      }\n\n      boolean targetHasArcs = target.address > 0;\n\n      if (!targetHasArcs) {\n        flags += BIT_STOP_NODE;\n      }\n\n      if (arc.output != NO_OUTPUT) {\n        flags += BIT_ARC_HAS_OUTPUT;\n      }\n\n      writer.writeByte((byte) flags);\n      writeLabel(arc.label);\n\n      //System.out.println(\"  write arc: label=\" + arc.label + \" flags=\" + flags);\n\n      if (arc.output != NO_OUTPUT) {\n        outputs.write(arc.output, writer);\n        arcWithOutputCount++;\n      }\n      if (arc.nextFinalOutput != NO_OUTPUT) {\n        outputs.write(arc.nextFinalOutput, writer);\n      }\n\n      if (targetHasArcs && (doFixedArray || lastFrozenNode != target.address)) {\n        assert target.address > 0;\n        writer.writeInt(target.address);\n      }\n\n      // just write the arcs \"like normal\" on first pass,\n      // but record how many bytes each one took, and max\n      // byte size:\n      if (doFixedArray) {\n        bytesPerArc[arcIdx] = writer.posWrite - lastArcStart;\n        lastArcStart = writer.posWrite;\n        maxBytesPerArc = Math.max(maxBytesPerArc, bytesPerArc[arcIdx]);\n        //System.out.println(\"    bytes=\" + bytesPerArc[arcIdx]);\n      }\n    }\n\n    if (doFixedArray) {\n      assert maxBytesPerArc > 0;\n      // 2nd pass just \"expands\" all arcs to take up a fixed\n      // byte size\n      final int sizeNeeded = fixedArrayStart + node.numArcs * maxBytesPerArc;\n      bytes = ArrayUtil.grow(bytes, sizeNeeded);\n      if (maxBytesPerArc > 255) {\n        throw new IllegalStateException(\"max arc size is too large (\" + maxBytesPerArc + \")\");\n      }\n      bytes[fixedArrayStart-1] = (byte) maxBytesPerArc;\n\n      // expand the arcs in place, backwards\n      int srcPos = writer.posWrite;\n      int destPos = fixedArrayStart + node.numArcs*maxBytesPerArc;\n      writer.posWrite = destPos;\n      for(int arcIdx=node.numArcs-1;arcIdx>=0;arcIdx--) {\n        //System.out.println(\"  repack arcIdx=\" + arcIdx + \" srcPos=\" + srcPos + \" destPos=\" + destPos);\n        destPos -= maxBytesPerArc;\n        srcPos -= bytesPerArc[arcIdx];\n        if (srcPos != destPos) {\n          assert destPos > srcPos;\n          System.arraycopy(bytes, srcPos, bytes, destPos, bytesPerArc[arcIdx]);\n        }\n      }\n    }\n\n    // reverse bytes in-place; we do this so that the\n    // \"BIT_TARGET_NEXT\" opto can work, ie, it reads the\n    // node just before the current one\n    final int endAddress = lastFrozenNode = writer.posWrite - 1;\n\n    int left = startAddress;\n    int right = endAddress;\n    while (left < right) {\n      final byte b = bytes[left];\n      bytes[left++] = bytes[right];\n      bytes[right--] = b;\n    }\n\n    return endAddress;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#addNode(Builder.UnCompiledNode[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#addNode(Builder.UnCompiledNode[T]).mjava","sourceNew":"  // serializes new node by appending its bytes to the end\n  // of the current byte[]\n  int addNode(Builder.UnCompiledNode<T> node) throws IOException {\n    //System.out.println(\"FST.addNode pos=\" + posWrite + \" numArcs=\" + node.numArcs);\n    if (node.numArcs == 0) {\n      if (node.isFinal) {\n        return FINAL_END_NODE;\n      } else {\n        return NON_FINAL_END_NODE;\n      }\n    }\n\n    int startAddress = writer.posWrite;\n    //System.out.println(\"  startAddr=\" + startAddress);\n\n    final boolean doFixedArray = shouldExpand(node);\n    final int fixedArrayStart;\n    if (doFixedArray) {\n      if (bytesPerArc.length < node.numArcs) {\n        bytesPerArc = new int[ArrayUtil.oversize(node.numArcs, 1)];\n      }\n      // write a \"false\" first arc:\n      writer.writeByte((byte) BIT_ARCS_AS_FIXED_ARRAY);\n      writer.writeVInt(node.numArcs);\n      // placeholder -- we'll come back and write the number\n      // of bytes per arc here:\n      writer.writeByte((byte) 0);\n      fixedArrayStart = writer.posWrite;\n      //System.out.println(\"  do fixed arcs array arcsStart=\" + fixedArrayStart);\n    } else {\n      fixedArrayStart = 0;\n    }\n\n    nodeCount++;\n    arcCount += node.numArcs;\n    \n    final int lastArc = node.numArcs-1;\n\n    int lastArcStart = writer.posWrite;\n    int maxBytesPerArc = 0;\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      final Builder.CompiledNode target = (Builder.CompiledNode) arc.target;\n      int flags = 0;\n\n      if (arcIdx == lastArc) {\n        flags += BIT_LAST_ARC;\n      }\n\n      if (lastFrozenNode == target.address && !doFixedArray) {\n        flags += BIT_TARGET_NEXT;\n      }\n\n      if (arc.isFinal) {\n        flags += BIT_FINAL_ARC;\n        if (arc.nextFinalOutput != NO_OUTPUT) {\n          flags += BIT_ARC_HAS_FINAL_OUTPUT;\n        }\n      } else {\n        assert arc.nextFinalOutput == NO_OUTPUT;\n      }\n\n      boolean targetHasArcs = target.address > 0;\n\n      if (!targetHasArcs) {\n        flags += BIT_STOP_NODE;\n      }\n\n      if (arc.output != NO_OUTPUT) {\n        flags += BIT_ARC_HAS_OUTPUT;\n      }\n\n      writer.writeByte((byte) flags);\n      writeLabel(arc.label);\n\n      //System.out.println(\"  write arc: label=\" + arc.label + \" flags=\" + flags);\n\n      if (arc.output != NO_OUTPUT) {\n        outputs.write(arc.output, writer);\n        arcWithOutputCount++;\n      }\n      if (arc.nextFinalOutput != NO_OUTPUT) {\n        outputs.write(arc.nextFinalOutput, writer);\n      }\n\n      if (targetHasArcs && (doFixedArray || lastFrozenNode != target.address)) {\n        assert target.address > 0;\n        writer.writeInt(target.address);\n      }\n\n      // just write the arcs \"like normal\" on first pass,\n      // but record how many bytes each one took, and max\n      // byte size:\n      if (doFixedArray) {\n        bytesPerArc[arcIdx] = writer.posWrite - lastArcStart;\n        lastArcStart = writer.posWrite;\n        maxBytesPerArc = Math.max(maxBytesPerArc, bytesPerArc[arcIdx]);\n        //System.out.println(\"    bytes=\" + bytesPerArc[arcIdx]);\n      }\n    }\n\n    if (doFixedArray) {\n      assert maxBytesPerArc > 0;\n      // 2nd pass just \"expands\" all arcs to take up a fixed\n      // byte size\n      final int sizeNeeded = fixedArrayStart + node.numArcs * maxBytesPerArc;\n      bytes = ArrayUtil.grow(bytes, sizeNeeded);\n      if (maxBytesPerArc > 255) {\n        throw new IllegalStateException(\"max arc size is too large (\" + maxBytesPerArc + \")\");\n      }\n      bytes[fixedArrayStart-1] = (byte) maxBytesPerArc;\n\n      // expand the arcs in place, backwards\n      int srcPos = writer.posWrite;\n      int destPos = fixedArrayStart + node.numArcs*maxBytesPerArc;\n      writer.posWrite = destPos;\n      for(int arcIdx=node.numArcs-1;arcIdx>=0;arcIdx--) {\n        //System.out.println(\"  repack arcIdx=\" + arcIdx + \" srcPos=\" + srcPos + \" destPos=\" + destPos);\n        destPos -= maxBytesPerArc;\n        srcPos -= bytesPerArc[arcIdx];\n        if (srcPos != destPos) {\n          assert destPos > srcPos;\n          System.arraycopy(bytes, srcPos, bytes, destPos, bytesPerArc[arcIdx]);\n        }\n      }\n    }\n\n    // reverse bytes in-place; we do this so that the\n    // \"BIT_TARGET_NEXT\" opto can work, ie, it reads the\n    // node just before the current one\n    final int endAddress = lastFrozenNode = writer.posWrite - 1;\n\n    int left = startAddress;\n    int right = endAddress;\n    while (left < right) {\n      final byte b = bytes[left];\n      bytes[left++] = bytes[right];\n      bytes[right--] = b;\n    }\n\n    return endAddress;\n  }\n\n","sourceOld":"  // serializes new node by appending its bytes to the end\n  // of the current byte[]\n  int addNode(Builder.UnCompiledNode<T> node) throws IOException {\n    //System.out.println(\"FST.addNode pos=\" + posWrite + \" numArcs=\" + node.numArcs);\n    if (node.numArcs == 0) {\n      if (node.isFinal) {\n        return FINAL_END_NODE;\n      } else {\n        return NON_FINAL_END_NODE;\n      }\n    }\n\n    int startAddress = writer.posWrite;\n    //System.out.println(\"  startAddr=\" + startAddress);\n\n    final boolean doFixedArray = shouldExpand(node);\n    final int fixedArrayStart;\n    if (doFixedArray) {\n      if (bytesPerArc.length < node.numArcs) {\n        bytesPerArc = new int[ArrayUtil.oversize(node.numArcs, 1)];\n      }\n      // write a \"false\" first arc:\n      writer.writeByte((byte) BIT_ARCS_AS_FIXED_ARRAY);\n      writer.writeVInt(node.numArcs);\n      // placeholder -- we'll come back and write the number\n      // of bytes per arc here:\n      writer.writeByte((byte) 0);\n      fixedArrayStart = writer.posWrite;\n      //System.out.println(\"  do fixed arcs array arcsStart=\" + fixedArrayStart);\n    } else {\n      fixedArrayStart = 0;\n    }\n\n    nodeCount++;\n    arcCount += node.numArcs;\n    \n    final int lastArc = node.numArcs-1;\n\n    int lastArcStart = writer.posWrite;\n    int maxBytesPerArc = 0;\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      final Builder.CompiledNode target = (Builder.CompiledNode) arc.target;\n      int flags = 0;\n\n      if (arcIdx == lastArc) {\n        flags += BIT_LAST_ARC;\n      }\n\n      if (lastFrozenNode == target.address && !doFixedArray) {\n        flags += BIT_TARGET_NEXT;\n      }\n\n      if (arc.isFinal) {\n        flags += BIT_FINAL_ARC;\n        if (arc.nextFinalOutput != NO_OUTPUT) {\n          flags += BIT_ARC_HAS_FINAL_OUTPUT;\n        }\n      } else {\n        assert arc.nextFinalOutput == NO_OUTPUT;\n      }\n\n      boolean targetHasArcs = target.address > 0;\n\n      if (!targetHasArcs) {\n        flags += BIT_STOP_NODE;\n      }\n\n      if (arc.output != NO_OUTPUT) {\n        flags += BIT_ARC_HAS_OUTPUT;\n      }\n\n      writer.writeByte((byte) flags);\n      writeLabel(arc.label);\n\n      //System.out.println(\"  write arc: label=\" + arc.label + \" flags=\" + flags);\n\n      if (arc.output != NO_OUTPUT) {\n        outputs.write(arc.output, writer);\n        arcWithOutputCount++;\n      }\n      if (arc.nextFinalOutput != NO_OUTPUT) {\n        outputs.write(arc.nextFinalOutput, writer);\n      }\n\n      if (targetHasArcs && (doFixedArray || lastFrozenNode != target.address)) {\n        assert target.address > 0;\n        writer.writeInt(target.address);\n      }\n\n      // just write the arcs \"like normal\" on first pass,\n      // but record how many bytes each one took, and max\n      // byte size:\n      if (doFixedArray) {\n        bytesPerArc[arcIdx] = writer.posWrite - lastArcStart;\n        lastArcStart = writer.posWrite;\n        maxBytesPerArc = Math.max(maxBytesPerArc, bytesPerArc[arcIdx]);\n        //System.out.println(\"    bytes=\" + bytesPerArc[arcIdx]);\n      }\n    }\n\n    if (doFixedArray) {\n      assert maxBytesPerArc > 0;\n      // 2nd pass just \"expands\" all arcs to take up a fixed\n      // byte size\n      final int sizeNeeded = fixedArrayStart + node.numArcs * maxBytesPerArc;\n      bytes = ArrayUtil.grow(bytes, sizeNeeded);\n      if (maxBytesPerArc > 255) {\n        throw new IllegalStateException(\"max arc size is too large (\" + maxBytesPerArc + \")\");\n      }\n      bytes[fixedArrayStart-1] = (byte) maxBytesPerArc;\n\n      // expand the arcs in place, backwards\n      int srcPos = writer.posWrite;\n      int destPos = fixedArrayStart + node.numArcs*maxBytesPerArc;\n      writer.posWrite = destPos;\n      for(int arcIdx=node.numArcs-1;arcIdx>=0;arcIdx--) {\n        //System.out.println(\"  repack arcIdx=\" + arcIdx + \" srcPos=\" + srcPos + \" destPos=\" + destPos);\n        destPos -= maxBytesPerArc;\n        srcPos -= bytesPerArc[arcIdx];\n        if (srcPos != destPos) {\n          assert destPos > srcPos;\n          System.arraycopy(bytes, srcPos, bytes, destPos, bytesPerArc[arcIdx]);\n        }\n      }\n    }\n\n    // reverse bytes in-place; we do this so that the\n    // \"BIT_TARGET_NEXT\" opto can work, ie, it reads the\n    // node just before the current one\n    final int endAddress = lastFrozenNode = writer.posWrite - 1;\n\n    int left = startAddress;\n    int right = endAddress;\n    while (left < right) {\n      final byte b = bytes[left];\n      bytes[left++] = bytes[right];\n      bytes[right--] = b;\n    }\n\n    return endAddress;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#addNode(Builder.UnCompiledNode[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#addNode(Builder.UnCompiledNode[T]).mjava","sourceNew":"  // serializes new node by appending its bytes to the end\n  // of the current byte[]\n  int addNode(Builder.UnCompiledNode<T> node) throws IOException {\n    //System.out.println(\"FST.addNode pos=\" + posWrite + \" numArcs=\" + node.numArcs);\n    if (node.numArcs == 0) {\n      if (node.isFinal) {\n        return FINAL_END_NODE;\n      } else {\n        return NON_FINAL_END_NODE;\n      }\n    }\n\n    int startAddress = writer.posWrite;\n    //System.out.println(\"  startAddr=\" + startAddress);\n\n    final boolean doFixedArray = shouldExpand(node);\n    final int fixedArrayStart;\n    if (doFixedArray) {\n      if (bytesPerArc.length < node.numArcs) {\n        bytesPerArc = new int[ArrayUtil.oversize(node.numArcs, 1)];\n      }\n      // write a \"false\" first arc:\n      writer.writeByte((byte) BIT_ARCS_AS_FIXED_ARRAY);\n      writer.writeVInt(node.numArcs);\n      // placeholder -- we'll come back and write the number\n      // of bytes per arc here:\n      writer.writeByte((byte) 0);\n      fixedArrayStart = writer.posWrite;\n      //System.out.println(\"  do fixed arcs array arcsStart=\" + fixedArrayStart);\n    } else {\n      fixedArrayStart = 0;\n    }\n\n    nodeCount++;\n    arcCount += node.numArcs;\n    \n    final int lastArc = node.numArcs-1;\n\n    int lastArcStart = writer.posWrite;\n    int maxBytesPerArc = 0;\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      final Builder.CompiledNode target = (Builder.CompiledNode) arc.target;\n      int flags = 0;\n\n      if (arcIdx == lastArc) {\n        flags += BIT_LAST_ARC;\n      }\n\n      if (lastFrozenNode == target.address && !doFixedArray) {\n        flags += BIT_TARGET_NEXT;\n      }\n\n      if (arc.isFinal) {\n        flags += BIT_FINAL_ARC;\n        if (arc.nextFinalOutput != NO_OUTPUT) {\n          flags += BIT_ARC_HAS_FINAL_OUTPUT;\n        }\n      } else {\n        assert arc.nextFinalOutput == NO_OUTPUT;\n      }\n\n      boolean targetHasArcs = target.address > 0;\n\n      if (!targetHasArcs) {\n        flags += BIT_STOP_NODE;\n      }\n\n      if (arc.output != NO_OUTPUT) {\n        flags += BIT_ARC_HAS_OUTPUT;\n      }\n\n      writer.writeByte((byte) flags);\n      writeLabel(arc.label);\n\n      //System.out.println(\"  write arc: label=\" + arc.label + \" flags=\" + flags);\n\n      if (arc.output != NO_OUTPUT) {\n        outputs.write(arc.output, writer);\n        arcWithOutputCount++;\n      }\n      if (arc.nextFinalOutput != NO_OUTPUT) {\n        outputs.write(arc.nextFinalOutput, writer);\n      }\n\n      if (targetHasArcs && (doFixedArray || lastFrozenNode != target.address)) {\n        assert target.address > 0;\n        writer.writeInt(target.address);\n      }\n\n      // just write the arcs \"like normal\" on first pass,\n      // but record how many bytes each one took, and max\n      // byte size:\n      if (doFixedArray) {\n        bytesPerArc[arcIdx] = writer.posWrite - lastArcStart;\n        lastArcStart = writer.posWrite;\n        maxBytesPerArc = Math.max(maxBytesPerArc, bytesPerArc[arcIdx]);\n        //System.out.println(\"    bytes=\" + bytesPerArc[arcIdx]);\n      }\n    }\n\n    if (doFixedArray) {\n      assert maxBytesPerArc > 0;\n      // 2nd pass just \"expands\" all arcs to take up a fixed\n      // byte size\n      final int sizeNeeded = fixedArrayStart + node.numArcs * maxBytesPerArc;\n      bytes = ArrayUtil.grow(bytes, sizeNeeded);\n      if (maxBytesPerArc > 255) {\n        throw new IllegalStateException(\"max arc size is too large (\" + maxBytesPerArc + \")\");\n      }\n      bytes[fixedArrayStart-1] = (byte) maxBytesPerArc;\n\n      // expand the arcs in place, backwards\n      int srcPos = writer.posWrite;\n      int destPos = fixedArrayStart + node.numArcs*maxBytesPerArc;\n      writer.posWrite = destPos;\n      for(int arcIdx=node.numArcs-1;arcIdx>=0;arcIdx--) {\n        //System.out.println(\"  repack arcIdx=\" + arcIdx + \" srcPos=\" + srcPos + \" destPos=\" + destPos);\n        destPos -= maxBytesPerArc;\n        srcPos -= bytesPerArc[arcIdx];\n        if (srcPos != destPos) {\n          assert destPos > srcPos;\n          System.arraycopy(bytes, srcPos, bytes, destPos, bytesPerArc[arcIdx]);\n        }\n      }\n    }\n\n    // reverse bytes in-place; we do this so that the\n    // \"BIT_TARGET_NEXT\" opto can work, ie, it reads the\n    // node just before the current one\n    final int endAddress = lastFrozenNode = writer.posWrite - 1;\n\n    int left = startAddress;\n    int right = endAddress;\n    while (left < right) {\n      final byte b = bytes[left];\n      bytes[left++] = bytes[right];\n      bytes[right--] = b;\n    }\n\n    return endAddress;\n  }\n\n","sourceOld":"  // serializes new node by appending its bytes to the end\n  // of the current byte[]\n  int addNode(Builder.UnCompiledNode<T> node) throws IOException {\n    //System.out.println(\"FST.addNode pos=\" + posWrite + \" numArcs=\" + node.numArcs);\n    if (node.numArcs == 0) {\n      if (node.isFinal) {\n        return FINAL_END_NODE;\n      } else {\n        return NON_FINAL_END_NODE;\n      }\n    }\n\n    int startAddress = writer.posWrite;\n    //System.out.println(\"  startAddr=\" + startAddress);\n\n    final boolean doFixedArray = shouldExpand(node);\n    final int fixedArrayStart;\n    if (doFixedArray) {\n      if (bytesPerArc.length < node.numArcs) {\n        bytesPerArc = new int[ArrayUtil.oversize(node.numArcs, 1)];\n      }\n      // write a \"false\" first arc:\n      writer.writeByte((byte) BIT_ARCS_AS_FIXED_ARRAY);\n      writer.writeVInt(node.numArcs);\n      // placeholder -- we'll come back and write the number\n      // of bytes per arc here:\n      writer.writeByte((byte) 0);\n      fixedArrayStart = writer.posWrite;\n      //System.out.println(\"  do fixed arcs array arcsStart=\" + fixedArrayStart);\n    } else {\n      fixedArrayStart = 0;\n    }\n\n    nodeCount++;\n    arcCount += node.numArcs;\n    \n    final int lastArc = node.numArcs-1;\n\n    int lastArcStart = writer.posWrite;\n    int maxBytesPerArc = 0;\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      final Builder.CompiledNode target = (Builder.CompiledNode) arc.target;\n      int flags = 0;\n\n      if (arcIdx == lastArc) {\n        flags += BIT_LAST_ARC;\n      }\n\n      if (lastFrozenNode == target.address && !doFixedArray) {\n        flags += BIT_TARGET_NEXT;\n      }\n\n      if (arc.isFinal) {\n        flags += BIT_FINAL_ARC;\n        if (arc.nextFinalOutput != NO_OUTPUT) {\n          flags += BIT_ARC_HAS_FINAL_OUTPUT;\n        }\n      } else {\n        assert arc.nextFinalOutput == NO_OUTPUT;\n      }\n\n      boolean targetHasArcs = target.address > 0;\n\n      if (!targetHasArcs) {\n        flags += BIT_STOP_NODE;\n      }\n\n      if (arc.output != NO_OUTPUT) {\n        flags += BIT_ARC_HAS_OUTPUT;\n      }\n\n      writer.writeByte((byte) flags);\n      writeLabel(arc.label);\n\n      //System.out.println(\"  write arc: label=\" + arc.label + \" flags=\" + flags);\n\n      if (arc.output != NO_OUTPUT) {\n        outputs.write(arc.output, writer);\n        arcWithOutputCount++;\n      }\n      if (arc.nextFinalOutput != NO_OUTPUT) {\n        outputs.write(arc.nextFinalOutput, writer);\n      }\n\n      if (targetHasArcs && (doFixedArray || lastFrozenNode != target.address)) {\n        assert target.address > 0;\n        writer.writeInt(target.address);\n      }\n\n      // just write the arcs \"like normal\" on first pass,\n      // but record how many bytes each one took, and max\n      // byte size:\n      if (doFixedArray) {\n        bytesPerArc[arcIdx] = writer.posWrite - lastArcStart;\n        lastArcStart = writer.posWrite;\n        maxBytesPerArc = Math.max(maxBytesPerArc, bytesPerArc[arcIdx]);\n        //System.out.println(\"    bytes=\" + bytesPerArc[arcIdx]);\n      }\n    }\n\n    if (doFixedArray) {\n      assert maxBytesPerArc > 0;\n      // 2nd pass just \"expands\" all arcs to take up a fixed\n      // byte size\n      final int sizeNeeded = fixedArrayStart + node.numArcs * maxBytesPerArc;\n      bytes = ArrayUtil.grow(bytes, sizeNeeded);\n      if (maxBytesPerArc > 255) {\n        throw new IllegalStateException(\"max arc size is too large (\" + maxBytesPerArc + \")\");\n      }\n      bytes[fixedArrayStart-1] = (byte) maxBytesPerArc;\n\n      // expand the arcs in place, backwards\n      int srcPos = writer.posWrite;\n      int destPos = fixedArrayStart + node.numArcs*maxBytesPerArc;\n      writer.posWrite = destPos;\n      for(int arcIdx=node.numArcs-1;arcIdx>=0;arcIdx--) {\n        //System.out.println(\"  repack arcIdx=\" + arcIdx + \" srcPos=\" + srcPos + \" destPos=\" + destPos);\n        destPos -= maxBytesPerArc;\n        srcPos -= bytesPerArc[arcIdx];\n        if (srcPos != destPos) {\n          assert destPos > srcPos;\n          System.arraycopy(bytes, srcPos, bytes, destPos, bytesPerArc[arcIdx]);\n        }\n      }\n    }\n\n    // reverse bytes in-place; we do this so that the\n    // \"BIT_TARGET_NEXT\" opto can work, ie, it reads the\n    // node just before the current one\n    final int endAddress = lastFrozenNode = writer.posWrite - 1;\n\n    int left = startAddress;\n    int right = endAddress;\n    while (left < right) {\n      final byte b = bytes[left];\n      bytes[left++] = bytes[right];\n      bytes[right--] = b;\n    }\n\n    return endAddress;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c58aef9c3fa8ab2b0cd50c64ed37f85a00c6050","date":1309961034,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#addNode(Builder.UnCompiledNode[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#addNode(Builder.UnCompiledNode[T]).mjava","sourceNew":"  // serializes new node by appending its bytes to the end\n  // of the current byte[]\n  int addNode(Builder.UnCompiledNode<T> node) throws IOException {\n    //System.out.println(\"FST.addNode pos=\" + posWrite + \" numArcs=\" + node.numArcs);\n    if (node.numArcs == 0) {\n      if (node.isFinal) {\n        return FINAL_END_NODE;\n      } else {\n        return NON_FINAL_END_NODE;\n      }\n    }\n\n    int startAddress = writer.posWrite;\n    //System.out.println(\"  startAddr=\" + startAddress);\n\n    final boolean doFixedArray = shouldExpand(node);\n    final int fixedArrayStart;\n    if (doFixedArray) {\n      if (bytesPerArc.length < node.numArcs) {\n        bytesPerArc = new int[ArrayUtil.oversize(node.numArcs, 1)];\n      }\n      // write a \"false\" first arc:\n      writer.writeByte((byte) BIT_ARCS_AS_FIXED_ARRAY);\n      writer.writeVInt(node.numArcs);\n      // placeholder -- we'll come back and write the number\n      // of bytes per arc here:\n      writer.writeByte((byte) 0);\n      fixedArrayStart = writer.posWrite;\n      //System.out.println(\"  do fixed arcs array arcsStart=\" + fixedArrayStart);\n    } else {\n      fixedArrayStart = 0;\n    }\n\n    nodeCount++;\n    arcCount += node.numArcs;\n    \n    final int lastArc = node.numArcs-1;\n\n    int lastArcStart = writer.posWrite;\n    int maxBytesPerArc = 0;\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      final Builder.CompiledNode target = (Builder.CompiledNode) arc.target;\n      int flags = 0;\n\n      if (arcIdx == lastArc) {\n        flags += BIT_LAST_ARC;\n      }\n\n      if (lastFrozenNode == target.address && !doFixedArray) {\n        flags += BIT_TARGET_NEXT;\n      }\n\n      if (arc.isFinal) {\n        flags += BIT_FINAL_ARC;\n        if (arc.nextFinalOutput != NO_OUTPUT) {\n          flags += BIT_ARC_HAS_FINAL_OUTPUT;\n        }\n      } else {\n        assert arc.nextFinalOutput == NO_OUTPUT;\n      }\n\n      boolean targetHasArcs = target.address > 0;\n\n      if (!targetHasArcs) {\n        flags += BIT_STOP_NODE;\n      }\n\n      if (arc.output != NO_OUTPUT) {\n        flags += BIT_ARC_HAS_OUTPUT;\n      }\n\n      writer.writeByte((byte) flags);\n      writeLabel(arc.label);\n\n      //System.out.println(\"  write arc: label=\" + arc.label + \" flags=\" + flags);\n\n      if (arc.output != NO_OUTPUT) {\n        outputs.write(arc.output, writer);\n        arcWithOutputCount++;\n      }\n      if (arc.nextFinalOutput != NO_OUTPUT) {\n        outputs.write(arc.nextFinalOutput, writer);\n      }\n\n      if (targetHasArcs && (doFixedArray || lastFrozenNode != target.address)) {\n        assert target.address > 0;\n        writer.writeInt(target.address);\n      }\n\n      // just write the arcs \"like normal\" on first pass,\n      // but record how many bytes each one took, and max\n      // byte size:\n      if (doFixedArray) {\n        bytesPerArc[arcIdx] = writer.posWrite - lastArcStart;\n        lastArcStart = writer.posWrite;\n        maxBytesPerArc = Math.max(maxBytesPerArc, bytesPerArc[arcIdx]);\n        //System.out.println(\"    bytes=\" + bytesPerArc[arcIdx]);\n      }\n    }\n\n    if (doFixedArray) {\n      assert maxBytesPerArc > 0;\n      // 2nd pass just \"expands\" all arcs to take up a fixed\n      // byte size\n      final int sizeNeeded = fixedArrayStart + node.numArcs * maxBytesPerArc;\n      bytes = ArrayUtil.grow(bytes, sizeNeeded);\n      if (maxBytesPerArc > 255) {\n        throw new IllegalStateException(\"max arc size is too large (\" + maxBytesPerArc + \"); disable array arcs by calling Builder.setAllowArrayArcs(false)\");\n      }\n      bytes[fixedArrayStart-1] = (byte) maxBytesPerArc;\n\n      // expand the arcs in place, backwards\n      int srcPos = writer.posWrite;\n      int destPos = fixedArrayStart + node.numArcs*maxBytesPerArc;\n      writer.posWrite = destPos;\n      for(int arcIdx=node.numArcs-1;arcIdx>=0;arcIdx--) {\n        //System.out.println(\"  repack arcIdx=\" + arcIdx + \" srcPos=\" + srcPos + \" destPos=\" + destPos);\n        destPos -= maxBytesPerArc;\n        srcPos -= bytesPerArc[arcIdx];\n        if (srcPos != destPos) {\n          assert destPos > srcPos;\n          System.arraycopy(bytes, srcPos, bytes, destPos, bytesPerArc[arcIdx]);\n        }\n      }\n    }\n\n    // reverse bytes in-place; we do this so that the\n    // \"BIT_TARGET_NEXT\" opto can work, ie, it reads the\n    // node just before the current one\n    final int endAddress = lastFrozenNode = writer.posWrite - 1;\n\n    int left = startAddress;\n    int right = endAddress;\n    while (left < right) {\n      final byte b = bytes[left];\n      bytes[left++] = bytes[right];\n      bytes[right--] = b;\n    }\n\n    return endAddress;\n  }\n\n","sourceOld":"  // serializes new node by appending its bytes to the end\n  // of the current byte[]\n  int addNode(Builder.UnCompiledNode<T> node) throws IOException {\n    //System.out.println(\"FST.addNode pos=\" + posWrite + \" numArcs=\" + node.numArcs);\n    if (node.numArcs == 0) {\n      if (node.isFinal) {\n        return FINAL_END_NODE;\n      } else {\n        return NON_FINAL_END_NODE;\n      }\n    }\n\n    int startAddress = writer.posWrite;\n    //System.out.println(\"  startAddr=\" + startAddress);\n\n    final boolean doFixedArray = shouldExpand(node);\n    final int fixedArrayStart;\n    if (doFixedArray) {\n      if (bytesPerArc.length < node.numArcs) {\n        bytesPerArc = new int[ArrayUtil.oversize(node.numArcs, 1)];\n      }\n      // write a \"false\" first arc:\n      writer.writeByte((byte) BIT_ARCS_AS_FIXED_ARRAY);\n      writer.writeVInt(node.numArcs);\n      // placeholder -- we'll come back and write the number\n      // of bytes per arc here:\n      writer.writeByte((byte) 0);\n      fixedArrayStart = writer.posWrite;\n      //System.out.println(\"  do fixed arcs array arcsStart=\" + fixedArrayStart);\n    } else {\n      fixedArrayStart = 0;\n    }\n\n    nodeCount++;\n    arcCount += node.numArcs;\n    \n    final int lastArc = node.numArcs-1;\n\n    int lastArcStart = writer.posWrite;\n    int maxBytesPerArc = 0;\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      final Builder.CompiledNode target = (Builder.CompiledNode) arc.target;\n      int flags = 0;\n\n      if (arcIdx == lastArc) {\n        flags += BIT_LAST_ARC;\n      }\n\n      if (lastFrozenNode == target.address && !doFixedArray) {\n        flags += BIT_TARGET_NEXT;\n      }\n\n      if (arc.isFinal) {\n        flags += BIT_FINAL_ARC;\n        if (arc.nextFinalOutput != NO_OUTPUT) {\n          flags += BIT_ARC_HAS_FINAL_OUTPUT;\n        }\n      } else {\n        assert arc.nextFinalOutput == NO_OUTPUT;\n      }\n\n      boolean targetHasArcs = target.address > 0;\n\n      if (!targetHasArcs) {\n        flags += BIT_STOP_NODE;\n      }\n\n      if (arc.output != NO_OUTPUT) {\n        flags += BIT_ARC_HAS_OUTPUT;\n      }\n\n      writer.writeByte((byte) flags);\n      writeLabel(arc.label);\n\n      //System.out.println(\"  write arc: label=\" + arc.label + \" flags=\" + flags);\n\n      if (arc.output != NO_OUTPUT) {\n        outputs.write(arc.output, writer);\n        arcWithOutputCount++;\n      }\n      if (arc.nextFinalOutput != NO_OUTPUT) {\n        outputs.write(arc.nextFinalOutput, writer);\n      }\n\n      if (targetHasArcs && (doFixedArray || lastFrozenNode != target.address)) {\n        assert target.address > 0;\n        writer.writeInt(target.address);\n      }\n\n      // just write the arcs \"like normal\" on first pass,\n      // but record how many bytes each one took, and max\n      // byte size:\n      if (doFixedArray) {\n        bytesPerArc[arcIdx] = writer.posWrite - lastArcStart;\n        lastArcStart = writer.posWrite;\n        maxBytesPerArc = Math.max(maxBytesPerArc, bytesPerArc[arcIdx]);\n        //System.out.println(\"    bytes=\" + bytesPerArc[arcIdx]);\n      }\n    }\n\n    if (doFixedArray) {\n      assert maxBytesPerArc > 0;\n      // 2nd pass just \"expands\" all arcs to take up a fixed\n      // byte size\n      final int sizeNeeded = fixedArrayStart + node.numArcs * maxBytesPerArc;\n      bytes = ArrayUtil.grow(bytes, sizeNeeded);\n      if (maxBytesPerArc > 255) {\n        throw new IllegalStateException(\"max arc size is too large (\" + maxBytesPerArc + \")\");\n      }\n      bytes[fixedArrayStart-1] = (byte) maxBytesPerArc;\n\n      // expand the arcs in place, backwards\n      int srcPos = writer.posWrite;\n      int destPos = fixedArrayStart + node.numArcs*maxBytesPerArc;\n      writer.posWrite = destPos;\n      for(int arcIdx=node.numArcs-1;arcIdx>=0;arcIdx--) {\n        //System.out.println(\"  repack arcIdx=\" + arcIdx + \" srcPos=\" + srcPos + \" destPos=\" + destPos);\n        destPos -= maxBytesPerArc;\n        srcPos -= bytesPerArc[arcIdx];\n        if (srcPos != destPos) {\n          assert destPos > srcPos;\n          System.arraycopy(bytes, srcPos, bytes, destPos, bytesPerArc[arcIdx]);\n        }\n      }\n    }\n\n    // reverse bytes in-place; we do this so that the\n    // \"BIT_TARGET_NEXT\" opto can work, ie, it reads the\n    // node just before the current one\n    final int endAddress = lastFrozenNode = writer.posWrite - 1;\n\n    int left = startAddress;\n    int right = endAddress;\n    while (left < right) {\n      final byte b = bytes[left];\n      bytes[left++] = bytes[right];\n      bytes[right--] = b;\n    }\n\n    return endAddress;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#addNode(Builder.UnCompiledNode[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#addNode(Builder.UnCompiledNode[T]).mjava","sourceNew":"  // serializes new node by appending its bytes to the end\n  // of the current byte[]\n  int addNode(Builder.UnCompiledNode<T> node) throws IOException {\n    //System.out.println(\"FST.addNode pos=\" + posWrite + \" numArcs=\" + node.numArcs);\n    if (node.numArcs == 0) {\n      if (node.isFinal) {\n        return FINAL_END_NODE;\n      } else {\n        return NON_FINAL_END_NODE;\n      }\n    }\n\n    int startAddress = writer.posWrite;\n    //System.out.println(\"  startAddr=\" + startAddress);\n\n    final boolean doFixedArray = shouldExpand(node);\n    final int fixedArrayStart;\n    if (doFixedArray) {\n      if (bytesPerArc.length < node.numArcs) {\n        bytesPerArc = new int[ArrayUtil.oversize(node.numArcs, 1)];\n      }\n      // write a \"false\" first arc:\n      writer.writeByte((byte) BIT_ARCS_AS_FIXED_ARRAY);\n      writer.writeVInt(node.numArcs);\n      // placeholder -- we'll come back and write the number\n      // of bytes per arc here:\n      writer.writeByte((byte) 0);\n      fixedArrayStart = writer.posWrite;\n      //System.out.println(\"  do fixed arcs array arcsStart=\" + fixedArrayStart);\n    } else {\n      fixedArrayStart = 0;\n    }\n\n    nodeCount++;\n    arcCount += node.numArcs;\n    \n    final int lastArc = node.numArcs-1;\n\n    int lastArcStart = writer.posWrite;\n    int maxBytesPerArc = 0;\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      final Builder.CompiledNode target = (Builder.CompiledNode) arc.target;\n      int flags = 0;\n\n      if (arcIdx == lastArc) {\n        flags += BIT_LAST_ARC;\n      }\n\n      if (lastFrozenNode == target.address && !doFixedArray) {\n        flags += BIT_TARGET_NEXT;\n      }\n\n      if (arc.isFinal) {\n        flags += BIT_FINAL_ARC;\n        if (arc.nextFinalOutput != NO_OUTPUT) {\n          flags += BIT_ARC_HAS_FINAL_OUTPUT;\n        }\n      } else {\n        assert arc.nextFinalOutput == NO_OUTPUT;\n      }\n\n      boolean targetHasArcs = target.address > 0;\n\n      if (!targetHasArcs) {\n        flags += BIT_STOP_NODE;\n      }\n\n      if (arc.output != NO_OUTPUT) {\n        flags += BIT_ARC_HAS_OUTPUT;\n      }\n\n      writer.writeByte((byte) flags);\n      writeLabel(arc.label);\n\n      //System.out.println(\"  write arc: label=\" + arc.label + \" flags=\" + flags);\n\n      if (arc.output != NO_OUTPUT) {\n        outputs.write(arc.output, writer);\n        arcWithOutputCount++;\n      }\n      if (arc.nextFinalOutput != NO_OUTPUT) {\n        outputs.write(arc.nextFinalOutput, writer);\n      }\n\n      if (targetHasArcs && (doFixedArray || lastFrozenNode != target.address)) {\n        assert target.address > 0;\n        writer.writeInt(target.address);\n      }\n\n      // just write the arcs \"like normal\" on first pass,\n      // but record how many bytes each one took, and max\n      // byte size:\n      if (doFixedArray) {\n        bytesPerArc[arcIdx] = writer.posWrite - lastArcStart;\n        lastArcStart = writer.posWrite;\n        maxBytesPerArc = Math.max(maxBytesPerArc, bytesPerArc[arcIdx]);\n        //System.out.println(\"    bytes=\" + bytesPerArc[arcIdx]);\n      }\n    }\n\n    if (doFixedArray) {\n      assert maxBytesPerArc > 0;\n      // 2nd pass just \"expands\" all arcs to take up a fixed\n      // byte size\n      final int sizeNeeded = fixedArrayStart + node.numArcs * maxBytesPerArc;\n      bytes = ArrayUtil.grow(bytes, sizeNeeded);\n      if (maxBytesPerArc > 255) {\n        throw new IllegalStateException(\"max arc size is too large (\" + maxBytesPerArc + \"); disable array arcs by calling Builder.setAllowArrayArcs(false)\");\n      }\n      bytes[fixedArrayStart-1] = (byte) maxBytesPerArc;\n\n      // expand the arcs in place, backwards\n      int srcPos = writer.posWrite;\n      int destPos = fixedArrayStart + node.numArcs*maxBytesPerArc;\n      writer.posWrite = destPos;\n      for(int arcIdx=node.numArcs-1;arcIdx>=0;arcIdx--) {\n        //System.out.println(\"  repack arcIdx=\" + arcIdx + \" srcPos=\" + srcPos + \" destPos=\" + destPos);\n        destPos -= maxBytesPerArc;\n        srcPos -= bytesPerArc[arcIdx];\n        if (srcPos != destPos) {\n          assert destPos > srcPos;\n          System.arraycopy(bytes, srcPos, bytes, destPos, bytesPerArc[arcIdx]);\n        }\n      }\n    }\n\n    // reverse bytes in-place; we do this so that the\n    // \"BIT_TARGET_NEXT\" opto can work, ie, it reads the\n    // node just before the current one\n    final int endAddress = lastFrozenNode = writer.posWrite - 1;\n\n    int left = startAddress;\n    int right = endAddress;\n    while (left < right) {\n      final byte b = bytes[left];\n      bytes[left++] = bytes[right];\n      bytes[right--] = b;\n    }\n\n    return endAddress;\n  }\n\n","sourceOld":"  // serializes new node by appending its bytes to the end\n  // of the current byte[]\n  int addNode(Builder.UnCompiledNode<T> node) throws IOException {\n    //System.out.println(\"FST.addNode pos=\" + posWrite + \" numArcs=\" + node.numArcs);\n    if (node.numArcs == 0) {\n      if (node.isFinal) {\n        return FINAL_END_NODE;\n      } else {\n        return NON_FINAL_END_NODE;\n      }\n    }\n\n    int startAddress = writer.posWrite;\n    //System.out.println(\"  startAddr=\" + startAddress);\n\n    final boolean doFixedArray = shouldExpand(node);\n    final int fixedArrayStart;\n    if (doFixedArray) {\n      if (bytesPerArc.length < node.numArcs) {\n        bytesPerArc = new int[ArrayUtil.oversize(node.numArcs, 1)];\n      }\n      // write a \"false\" first arc:\n      writer.writeByte((byte) BIT_ARCS_AS_FIXED_ARRAY);\n      writer.writeVInt(node.numArcs);\n      // placeholder -- we'll come back and write the number\n      // of bytes per arc here:\n      writer.writeByte((byte) 0);\n      fixedArrayStart = writer.posWrite;\n      //System.out.println(\"  do fixed arcs array arcsStart=\" + fixedArrayStart);\n    } else {\n      fixedArrayStart = 0;\n    }\n\n    nodeCount++;\n    arcCount += node.numArcs;\n    \n    final int lastArc = node.numArcs-1;\n\n    int lastArcStart = writer.posWrite;\n    int maxBytesPerArc = 0;\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      final Builder.CompiledNode target = (Builder.CompiledNode) arc.target;\n      int flags = 0;\n\n      if (arcIdx == lastArc) {\n        flags += BIT_LAST_ARC;\n      }\n\n      if (lastFrozenNode == target.address && !doFixedArray) {\n        flags += BIT_TARGET_NEXT;\n      }\n\n      if (arc.isFinal) {\n        flags += BIT_FINAL_ARC;\n        if (arc.nextFinalOutput != NO_OUTPUT) {\n          flags += BIT_ARC_HAS_FINAL_OUTPUT;\n        }\n      } else {\n        assert arc.nextFinalOutput == NO_OUTPUT;\n      }\n\n      boolean targetHasArcs = target.address > 0;\n\n      if (!targetHasArcs) {\n        flags += BIT_STOP_NODE;\n      }\n\n      if (arc.output != NO_OUTPUT) {\n        flags += BIT_ARC_HAS_OUTPUT;\n      }\n\n      writer.writeByte((byte) flags);\n      writeLabel(arc.label);\n\n      //System.out.println(\"  write arc: label=\" + arc.label + \" flags=\" + flags);\n\n      if (arc.output != NO_OUTPUT) {\n        outputs.write(arc.output, writer);\n        arcWithOutputCount++;\n      }\n      if (arc.nextFinalOutput != NO_OUTPUT) {\n        outputs.write(arc.nextFinalOutput, writer);\n      }\n\n      if (targetHasArcs && (doFixedArray || lastFrozenNode != target.address)) {\n        assert target.address > 0;\n        writer.writeInt(target.address);\n      }\n\n      // just write the arcs \"like normal\" on first pass,\n      // but record how many bytes each one took, and max\n      // byte size:\n      if (doFixedArray) {\n        bytesPerArc[arcIdx] = writer.posWrite - lastArcStart;\n        lastArcStart = writer.posWrite;\n        maxBytesPerArc = Math.max(maxBytesPerArc, bytesPerArc[arcIdx]);\n        //System.out.println(\"    bytes=\" + bytesPerArc[arcIdx]);\n      }\n    }\n\n    if (doFixedArray) {\n      assert maxBytesPerArc > 0;\n      // 2nd pass just \"expands\" all arcs to take up a fixed\n      // byte size\n      final int sizeNeeded = fixedArrayStart + node.numArcs * maxBytesPerArc;\n      bytes = ArrayUtil.grow(bytes, sizeNeeded);\n      if (maxBytesPerArc > 255) {\n        throw new IllegalStateException(\"max arc size is too large (\" + maxBytesPerArc + \")\");\n      }\n      bytes[fixedArrayStart-1] = (byte) maxBytesPerArc;\n\n      // expand the arcs in place, backwards\n      int srcPos = writer.posWrite;\n      int destPos = fixedArrayStart + node.numArcs*maxBytesPerArc;\n      writer.posWrite = destPos;\n      for(int arcIdx=node.numArcs-1;arcIdx>=0;arcIdx--) {\n        //System.out.println(\"  repack arcIdx=\" + arcIdx + \" srcPos=\" + srcPos + \" destPos=\" + destPos);\n        destPos -= maxBytesPerArc;\n        srcPos -= bytesPerArc[arcIdx];\n        if (srcPos != destPos) {\n          assert destPos > srcPos;\n          System.arraycopy(bytes, srcPos, bytes, destPos, bytesPerArc[arcIdx]);\n        }\n      }\n    }\n\n    // reverse bytes in-place; we do this so that the\n    // \"BIT_TARGET_NEXT\" opto can work, ie, it reads the\n    // node just before the current one\n    final int endAddress = lastFrozenNode = writer.posWrite - 1;\n\n    int left = startAddress;\n    int right = endAddress;\n    while (left < right) {\n      final byte b = bytes[left];\n      bytes[left++] = bytes[right];\n      bytes[right--] = b;\n    }\n\n    return endAddress;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#addNode(Builder.UnCompiledNode[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#addNode(Builder.UnCompiledNode[T]).mjava","sourceNew":"  // serializes new node by appending its bytes to the end\n  // of the current byte[]\n  int addNode(Builder.UnCompiledNode<T> node) throws IOException {\n    //System.out.println(\"FST.addNode pos=\" + posWrite + \" numArcs=\" + node.numArcs);\n    if (node.numArcs == 0) {\n      if (node.isFinal) {\n        return FINAL_END_NODE;\n      } else {\n        return NON_FINAL_END_NODE;\n      }\n    }\n\n    int startAddress = writer.posWrite;\n    //System.out.println(\"  startAddr=\" + startAddress);\n\n    final boolean doFixedArray = shouldExpand(node);\n    final int fixedArrayStart;\n    if (doFixedArray) {\n      if (bytesPerArc.length < node.numArcs) {\n        bytesPerArc = new int[ArrayUtil.oversize(node.numArcs, 1)];\n      }\n      // write a \"false\" first arc:\n      writer.writeByte((byte) BIT_ARCS_AS_FIXED_ARRAY);\n      writer.writeVInt(node.numArcs);\n      // placeholder -- we'll come back and write the number\n      // of bytes per arc here:\n      writer.writeByte((byte) 0);\n      fixedArrayStart = writer.posWrite;\n      //System.out.println(\"  do fixed arcs array arcsStart=\" + fixedArrayStart);\n    } else {\n      fixedArrayStart = 0;\n    }\n\n    nodeCount++;\n    arcCount += node.numArcs;\n    \n    final int lastArc = node.numArcs-1;\n\n    int lastArcStart = writer.posWrite;\n    int maxBytesPerArc = 0;\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      final Builder.CompiledNode target = (Builder.CompiledNode) arc.target;\n      int flags = 0;\n\n      if (arcIdx == lastArc) {\n        flags += BIT_LAST_ARC;\n      }\n\n      if (lastFrozenNode == target.address && !doFixedArray) {\n        flags += BIT_TARGET_NEXT;\n      }\n\n      if (arc.isFinal) {\n        flags += BIT_FINAL_ARC;\n        if (arc.nextFinalOutput != NO_OUTPUT) {\n          flags += BIT_ARC_HAS_FINAL_OUTPUT;\n        }\n      } else {\n        assert arc.nextFinalOutput == NO_OUTPUT;\n      }\n\n      boolean targetHasArcs = target.address > 0;\n\n      if (!targetHasArcs) {\n        flags += BIT_STOP_NODE;\n      }\n\n      if (arc.output != NO_OUTPUT) {\n        flags += BIT_ARC_HAS_OUTPUT;\n      }\n\n      writer.writeByte((byte) flags);\n      writeLabel(arc.label);\n\n      //System.out.println(\"  write arc: label=\" + arc.label + \" flags=\" + flags);\n\n      if (arc.output != NO_OUTPUT) {\n        outputs.write(arc.output, writer);\n        arcWithOutputCount++;\n      }\n      if (arc.nextFinalOutput != NO_OUTPUT) {\n        outputs.write(arc.nextFinalOutput, writer);\n      }\n\n      if (targetHasArcs && (doFixedArray || lastFrozenNode != target.address)) {\n        assert target.address > 0;\n        writer.writeInt(target.address);\n      }\n\n      // just write the arcs \"like normal\" on first pass,\n      // but record how many bytes each one took, and max\n      // byte size:\n      if (doFixedArray) {\n        bytesPerArc[arcIdx] = writer.posWrite - lastArcStart;\n        lastArcStart = writer.posWrite;\n        maxBytesPerArc = Math.max(maxBytesPerArc, bytesPerArc[arcIdx]);\n        //System.out.println(\"    bytes=\" + bytesPerArc[arcIdx]);\n      }\n    }\n\n    if (doFixedArray) {\n      assert maxBytesPerArc > 0;\n      // 2nd pass just \"expands\" all arcs to take up a fixed\n      // byte size\n      final int sizeNeeded = fixedArrayStart + node.numArcs * maxBytesPerArc;\n      bytes = ArrayUtil.grow(bytes, sizeNeeded);\n      if (maxBytesPerArc > 255) {\n        throw new IllegalStateException(\"max arc size is too large (\" + maxBytesPerArc + \"); disable array arcs by calling Builder.setAllowArrayArcs(false)\");\n      }\n      bytes[fixedArrayStart-1] = (byte) maxBytesPerArc;\n\n      // expand the arcs in place, backwards\n      int srcPos = writer.posWrite;\n      int destPos = fixedArrayStart + node.numArcs*maxBytesPerArc;\n      writer.posWrite = destPos;\n      for(int arcIdx=node.numArcs-1;arcIdx>=0;arcIdx--) {\n        //System.out.println(\"  repack arcIdx=\" + arcIdx + \" srcPos=\" + srcPos + \" destPos=\" + destPos);\n        destPos -= maxBytesPerArc;\n        srcPos -= bytesPerArc[arcIdx];\n        if (srcPos != destPos) {\n          assert destPos > srcPos;\n          System.arraycopy(bytes, srcPos, bytes, destPos, bytesPerArc[arcIdx]);\n        }\n      }\n    }\n\n    // reverse bytes in-place; we do this so that the\n    // \"BIT_TARGET_NEXT\" opto can work, ie, it reads the\n    // node just before the current one\n    final int endAddress = lastFrozenNode = writer.posWrite - 1;\n\n    int left = startAddress;\n    int right = endAddress;\n    while (left < right) {\n      final byte b = bytes[left];\n      bytes[left++] = bytes[right];\n      bytes[right--] = b;\n    }\n\n    return endAddress;\n  }\n\n","sourceOld":"  // serializes new node by appending its bytes to the end\n  // of the current byte[]\n  int addNode(Builder.UnCompiledNode<T> node) throws IOException {\n    //System.out.println(\"FST.addNode pos=\" + posWrite + \" numArcs=\" + node.numArcs);\n    if (node.numArcs == 0) {\n      if (node.isFinal) {\n        return FINAL_END_NODE;\n      } else {\n        return NON_FINAL_END_NODE;\n      }\n    }\n\n    int startAddress = writer.posWrite;\n    //System.out.println(\"  startAddr=\" + startAddress);\n\n    final boolean doFixedArray = shouldExpand(node);\n    final int fixedArrayStart;\n    if (doFixedArray) {\n      if (bytesPerArc.length < node.numArcs) {\n        bytesPerArc = new int[ArrayUtil.oversize(node.numArcs, 1)];\n      }\n      // write a \"false\" first arc:\n      writer.writeByte((byte) BIT_ARCS_AS_FIXED_ARRAY);\n      writer.writeVInt(node.numArcs);\n      // placeholder -- we'll come back and write the number\n      // of bytes per arc here:\n      writer.writeByte((byte) 0);\n      fixedArrayStart = writer.posWrite;\n      //System.out.println(\"  do fixed arcs array arcsStart=\" + fixedArrayStart);\n    } else {\n      fixedArrayStart = 0;\n    }\n\n    nodeCount++;\n    arcCount += node.numArcs;\n    \n    final int lastArc = node.numArcs-1;\n\n    int lastArcStart = writer.posWrite;\n    int maxBytesPerArc = 0;\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      final Builder.CompiledNode target = (Builder.CompiledNode) arc.target;\n      int flags = 0;\n\n      if (arcIdx == lastArc) {\n        flags += BIT_LAST_ARC;\n      }\n\n      if (lastFrozenNode == target.address && !doFixedArray) {\n        flags += BIT_TARGET_NEXT;\n      }\n\n      if (arc.isFinal) {\n        flags += BIT_FINAL_ARC;\n        if (arc.nextFinalOutput != NO_OUTPUT) {\n          flags += BIT_ARC_HAS_FINAL_OUTPUT;\n        }\n      } else {\n        assert arc.nextFinalOutput == NO_OUTPUT;\n      }\n\n      boolean targetHasArcs = target.address > 0;\n\n      if (!targetHasArcs) {\n        flags += BIT_STOP_NODE;\n      }\n\n      if (arc.output != NO_OUTPUT) {\n        flags += BIT_ARC_HAS_OUTPUT;\n      }\n\n      writer.writeByte((byte) flags);\n      writeLabel(arc.label);\n\n      //System.out.println(\"  write arc: label=\" + arc.label + \" flags=\" + flags);\n\n      if (arc.output != NO_OUTPUT) {\n        outputs.write(arc.output, writer);\n        arcWithOutputCount++;\n      }\n      if (arc.nextFinalOutput != NO_OUTPUT) {\n        outputs.write(arc.nextFinalOutput, writer);\n      }\n\n      if (targetHasArcs && (doFixedArray || lastFrozenNode != target.address)) {\n        assert target.address > 0;\n        writer.writeInt(target.address);\n      }\n\n      // just write the arcs \"like normal\" on first pass,\n      // but record how many bytes each one took, and max\n      // byte size:\n      if (doFixedArray) {\n        bytesPerArc[arcIdx] = writer.posWrite - lastArcStart;\n        lastArcStart = writer.posWrite;\n        maxBytesPerArc = Math.max(maxBytesPerArc, bytesPerArc[arcIdx]);\n        //System.out.println(\"    bytes=\" + bytesPerArc[arcIdx]);\n      }\n    }\n\n    if (doFixedArray) {\n      assert maxBytesPerArc > 0;\n      // 2nd pass just \"expands\" all arcs to take up a fixed\n      // byte size\n      final int sizeNeeded = fixedArrayStart + node.numArcs * maxBytesPerArc;\n      bytes = ArrayUtil.grow(bytes, sizeNeeded);\n      if (maxBytesPerArc > 255) {\n        throw new IllegalStateException(\"max arc size is too large (\" + maxBytesPerArc + \")\");\n      }\n      bytes[fixedArrayStart-1] = (byte) maxBytesPerArc;\n\n      // expand the arcs in place, backwards\n      int srcPos = writer.posWrite;\n      int destPos = fixedArrayStart + node.numArcs*maxBytesPerArc;\n      writer.posWrite = destPos;\n      for(int arcIdx=node.numArcs-1;arcIdx>=0;arcIdx--) {\n        //System.out.println(\"  repack arcIdx=\" + arcIdx + \" srcPos=\" + srcPos + \" destPos=\" + destPos);\n        destPos -= maxBytesPerArc;\n        srcPos -= bytesPerArc[arcIdx];\n        if (srcPos != destPos) {\n          assert destPos > srcPos;\n          System.arraycopy(bytes, srcPos, bytes, destPos, bytesPerArc[arcIdx]);\n        }\n      }\n    }\n\n    // reverse bytes in-place; we do this so that the\n    // \"BIT_TARGET_NEXT\" opto can work, ie, it reads the\n    // node just before the current one\n    final int endAddress = lastFrozenNode = writer.posWrite - 1;\n\n    int left = startAddress;\n    int right = endAddress;\n    while (left < right) {\n      final byte b = bytes[left];\n      bytes[left++] = bytes[right];\n      bytes[right--] = b;\n    }\n\n    return endAddress;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","date":1310389132,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#addNode(Builder.UnCompiledNode[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#addNode(Builder.UnCompiledNode[T]).mjava","sourceNew":"  // serializes new node by appending its bytes to the end\n  // of the current byte[]\n  int addNode(Builder.UnCompiledNode<T> node) throws IOException {\n    //System.out.println(\"FST.addNode pos=\" + posWrite + \" numArcs=\" + node.numArcs);\n    if (node.numArcs == 0) {\n      if (node.isFinal) {\n        return FINAL_END_NODE;\n      } else {\n        return NON_FINAL_END_NODE;\n      }\n    }\n\n    int startAddress = writer.posWrite;\n    //System.out.println(\"  startAddr=\" + startAddress);\n\n    final boolean doFixedArray = shouldExpand(node);\n    final int fixedArrayStart;\n    if (doFixedArray) {\n      if (bytesPerArc.length < node.numArcs) {\n        bytesPerArc = new int[ArrayUtil.oversize(node.numArcs, 1)];\n      }\n      // write a \"false\" first arc:\n      writer.writeByte((byte) BIT_ARCS_AS_FIXED_ARRAY);\n      writer.writeVInt(node.numArcs);\n      // placeholder -- we'll come back and write the number\n      // of bytes per arc (int) here:\n      // TODO: we could make this a vInt instead\n      writer.writeInt(0);\n      fixedArrayStart = writer.posWrite;\n      //System.out.println(\"  do fixed arcs array arcsStart=\" + fixedArrayStart);\n    } else {\n      fixedArrayStart = 0;\n    }\n\n    nodeCount++;\n    arcCount += node.numArcs;\n    \n    final int lastArc = node.numArcs-1;\n\n    int lastArcStart = writer.posWrite;\n    int maxBytesPerArc = 0;\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      final Builder.CompiledNode target = (Builder.CompiledNode) arc.target;\n      int flags = 0;\n\n      if (arcIdx == lastArc) {\n        flags += BIT_LAST_ARC;\n      }\n\n      if (lastFrozenNode == target.address && !doFixedArray) {\n        flags += BIT_TARGET_NEXT;\n      }\n\n      if (arc.isFinal) {\n        flags += BIT_FINAL_ARC;\n        if (arc.nextFinalOutput != NO_OUTPUT) {\n          flags += BIT_ARC_HAS_FINAL_OUTPUT;\n        }\n      } else {\n        assert arc.nextFinalOutput == NO_OUTPUT;\n      }\n\n      boolean targetHasArcs = target.address > 0;\n\n      if (!targetHasArcs) {\n        flags += BIT_STOP_NODE;\n      }\n\n      if (arc.output != NO_OUTPUT) {\n        flags += BIT_ARC_HAS_OUTPUT;\n      }\n\n      writer.writeByte((byte) flags);\n      writeLabel(arc.label);\n\n      //System.out.println(\"  write arc: label=\" + arc.label + \" flags=\" + flags);\n\n      if (arc.output != NO_OUTPUT) {\n        outputs.write(arc.output, writer);\n        arcWithOutputCount++;\n      }\n      if (arc.nextFinalOutput != NO_OUTPUT) {\n        outputs.write(arc.nextFinalOutput, writer);\n      }\n\n      if (targetHasArcs && (doFixedArray || lastFrozenNode != target.address)) {\n        assert target.address > 0;\n        writer.writeInt(target.address);\n      }\n\n      // just write the arcs \"like normal\" on first pass,\n      // but record how many bytes each one took, and max\n      // byte size:\n      if (doFixedArray) {\n        bytesPerArc[arcIdx] = writer.posWrite - lastArcStart;\n        lastArcStart = writer.posWrite;\n        maxBytesPerArc = Math.max(maxBytesPerArc, bytesPerArc[arcIdx]);\n        //System.out.println(\"    bytes=\" + bytesPerArc[arcIdx]);\n      }\n    }\n\n    // TODO: if arc'd arrays will be \"too wasteful\" by some\n    // measure, eg if arcs have vastly different sized\n    // outputs, then we should selectively disable array for\n    // such cases\n\n    if (doFixedArray) {\n      assert maxBytesPerArc > 0;\n      // 2nd pass just \"expands\" all arcs to take up a fixed\n      // byte size\n      final int sizeNeeded = fixedArrayStart + node.numArcs * maxBytesPerArc;\n      bytes = ArrayUtil.grow(bytes, sizeNeeded);\n      // TODO: we could make this a vInt instead\n      bytes[fixedArrayStart-4] = (byte) (maxBytesPerArc >> 24);\n      bytes[fixedArrayStart-3] = (byte) (maxBytesPerArc >> 16);\n      bytes[fixedArrayStart-2] = (byte) (maxBytesPerArc >> 8);\n      bytes[fixedArrayStart-1] = (byte) maxBytesPerArc;\n\n      // expand the arcs in place, backwards\n      int srcPos = writer.posWrite;\n      int destPos = fixedArrayStart + node.numArcs*maxBytesPerArc;\n      writer.posWrite = destPos;\n      for(int arcIdx=node.numArcs-1;arcIdx>=0;arcIdx--) {\n        //System.out.println(\"  repack arcIdx=\" + arcIdx + \" srcPos=\" + srcPos + \" destPos=\" + destPos);\n        destPos -= maxBytesPerArc;\n        srcPos -= bytesPerArc[arcIdx];\n        if (srcPos != destPos) {\n          assert destPos > srcPos;\n          System.arraycopy(bytes, srcPos, bytes, destPos, bytesPerArc[arcIdx]);\n        }\n      }\n    }\n\n    // reverse bytes in-place; we do this so that the\n    // \"BIT_TARGET_NEXT\" opto can work, ie, it reads the\n    // node just before the current one\n    final int endAddress = lastFrozenNode = writer.posWrite - 1;\n\n    int left = startAddress;\n    int right = endAddress;\n    while (left < right) {\n      final byte b = bytes[left];\n      bytes[left++] = bytes[right];\n      bytes[right--] = b;\n    }\n\n    return endAddress;\n  }\n\n","sourceOld":"  // serializes new node by appending its bytes to the end\n  // of the current byte[]\n  int addNode(Builder.UnCompiledNode<T> node) throws IOException {\n    //System.out.println(\"FST.addNode pos=\" + posWrite + \" numArcs=\" + node.numArcs);\n    if (node.numArcs == 0) {\n      if (node.isFinal) {\n        return FINAL_END_NODE;\n      } else {\n        return NON_FINAL_END_NODE;\n      }\n    }\n\n    int startAddress = writer.posWrite;\n    //System.out.println(\"  startAddr=\" + startAddress);\n\n    final boolean doFixedArray = shouldExpand(node);\n    final int fixedArrayStart;\n    if (doFixedArray) {\n      if (bytesPerArc.length < node.numArcs) {\n        bytesPerArc = new int[ArrayUtil.oversize(node.numArcs, 1)];\n      }\n      // write a \"false\" first arc:\n      writer.writeByte((byte) BIT_ARCS_AS_FIXED_ARRAY);\n      writer.writeVInt(node.numArcs);\n      // placeholder -- we'll come back and write the number\n      // of bytes per arc here:\n      writer.writeByte((byte) 0);\n      fixedArrayStart = writer.posWrite;\n      //System.out.println(\"  do fixed arcs array arcsStart=\" + fixedArrayStart);\n    } else {\n      fixedArrayStart = 0;\n    }\n\n    nodeCount++;\n    arcCount += node.numArcs;\n    \n    final int lastArc = node.numArcs-1;\n\n    int lastArcStart = writer.posWrite;\n    int maxBytesPerArc = 0;\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      final Builder.CompiledNode target = (Builder.CompiledNode) arc.target;\n      int flags = 0;\n\n      if (arcIdx == lastArc) {\n        flags += BIT_LAST_ARC;\n      }\n\n      if (lastFrozenNode == target.address && !doFixedArray) {\n        flags += BIT_TARGET_NEXT;\n      }\n\n      if (arc.isFinal) {\n        flags += BIT_FINAL_ARC;\n        if (arc.nextFinalOutput != NO_OUTPUT) {\n          flags += BIT_ARC_HAS_FINAL_OUTPUT;\n        }\n      } else {\n        assert arc.nextFinalOutput == NO_OUTPUT;\n      }\n\n      boolean targetHasArcs = target.address > 0;\n\n      if (!targetHasArcs) {\n        flags += BIT_STOP_NODE;\n      }\n\n      if (arc.output != NO_OUTPUT) {\n        flags += BIT_ARC_HAS_OUTPUT;\n      }\n\n      writer.writeByte((byte) flags);\n      writeLabel(arc.label);\n\n      //System.out.println(\"  write arc: label=\" + arc.label + \" flags=\" + flags);\n\n      if (arc.output != NO_OUTPUT) {\n        outputs.write(arc.output, writer);\n        arcWithOutputCount++;\n      }\n      if (arc.nextFinalOutput != NO_OUTPUT) {\n        outputs.write(arc.nextFinalOutput, writer);\n      }\n\n      if (targetHasArcs && (doFixedArray || lastFrozenNode != target.address)) {\n        assert target.address > 0;\n        writer.writeInt(target.address);\n      }\n\n      // just write the arcs \"like normal\" on first pass,\n      // but record how many bytes each one took, and max\n      // byte size:\n      if (doFixedArray) {\n        bytesPerArc[arcIdx] = writer.posWrite - lastArcStart;\n        lastArcStart = writer.posWrite;\n        maxBytesPerArc = Math.max(maxBytesPerArc, bytesPerArc[arcIdx]);\n        //System.out.println(\"    bytes=\" + bytesPerArc[arcIdx]);\n      }\n    }\n\n    if (doFixedArray) {\n      assert maxBytesPerArc > 0;\n      // 2nd pass just \"expands\" all arcs to take up a fixed\n      // byte size\n      final int sizeNeeded = fixedArrayStart + node.numArcs * maxBytesPerArc;\n      bytes = ArrayUtil.grow(bytes, sizeNeeded);\n      if (maxBytesPerArc > 255) {\n        throw new IllegalStateException(\"max arc size is too large (\" + maxBytesPerArc + \"); disable array arcs by calling Builder.setAllowArrayArcs(false)\");\n      }\n      bytes[fixedArrayStart-1] = (byte) maxBytesPerArc;\n\n      // expand the arcs in place, backwards\n      int srcPos = writer.posWrite;\n      int destPos = fixedArrayStart + node.numArcs*maxBytesPerArc;\n      writer.posWrite = destPos;\n      for(int arcIdx=node.numArcs-1;arcIdx>=0;arcIdx--) {\n        //System.out.println(\"  repack arcIdx=\" + arcIdx + \" srcPos=\" + srcPos + \" destPos=\" + destPos);\n        destPos -= maxBytesPerArc;\n        srcPos -= bytesPerArc[arcIdx];\n        if (srcPos != destPos) {\n          assert destPos > srcPos;\n          System.arraycopy(bytes, srcPos, bytes, destPos, bytesPerArc[arcIdx]);\n        }\n      }\n    }\n\n    // reverse bytes in-place; we do this so that the\n    // \"BIT_TARGET_NEXT\" opto can work, ie, it reads the\n    // node just before the current one\n    final int endAddress = lastFrozenNode = writer.posWrite - 1;\n\n    int left = startAddress;\n    int right = endAddress;\n    while (left < right) {\n      final byte b = bytes[left];\n      bytes[left++] = bytes[right];\n      bytes[right--] = b;\n    }\n\n    return endAddress;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b3be20ca1091c0b7cdb2308b9023606a5e451cec","date":1327877325,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#addNode(Builder.UnCompiledNode[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#addNode(Builder.UnCompiledNode[T]).mjava","sourceNew":"  // serializes new node by appending its bytes to the end\n  // of the current byte[]\n  int addNode(Builder.UnCompiledNode<T> nodeIn) throws IOException {\n    //System.out.println(\"FST.addNode pos=\" + writer.posWrite + \" numArcs=\" + nodeIn.numArcs);\n    if (nodeIn.numArcs == 0) {\n      if (nodeIn.isFinal) {\n        return FINAL_END_NODE;\n      } else {\n        return NON_FINAL_END_NODE;\n      }\n    }\n\n    int startAddress = writer.posWrite;\n    //System.out.println(\"  startAddr=\" + startAddress);\n\n    final boolean doFixedArray = shouldExpand(nodeIn);\n    final int fixedArrayStart;\n    if (doFixedArray) {\n      if (bytesPerArc.length < nodeIn.numArcs) {\n        bytesPerArc = new int[ArrayUtil.oversize(nodeIn.numArcs, 1)];\n      }\n      // write a \"false\" first arc:\n      writer.writeByte(ARCS_AS_FIXED_ARRAY);\n      writer.writeVInt(nodeIn.numArcs);\n      // placeholder -- we'll come back and write the number\n      // of bytes per arc (int) here:\n      // TODO: we could make this a vInt instead\n      writer.writeInt(0);\n      fixedArrayStart = writer.posWrite;\n      //System.out.println(\"  do fixed arcs array arcsStart=\" + fixedArrayStart);\n    } else {\n      fixedArrayStart = 0;\n    }\n\n    arcCount += nodeIn.numArcs;\n    \n    final int lastArc = nodeIn.numArcs-1;\n\n    int lastArcStart = writer.posWrite;\n    int maxBytesPerArc = 0;\n    for(int arcIdx=0;arcIdx<nodeIn.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = nodeIn.arcs[arcIdx];\n      final Builder.CompiledNode target = (Builder.CompiledNode) arc.target;\n      int flags = 0;\n\n      if (arcIdx == lastArc) {\n        flags += BIT_LAST_ARC;\n      }\n\n      if (lastFrozenNode == target.node && !doFixedArray) {\n        // TODO: for better perf (but more RAM used) we\n        // could avoid this except when arc is \"near\" the\n        // last arc:\n        flags += BIT_TARGET_NEXT;\n      }\n\n      if (arc.isFinal) {\n        flags += BIT_FINAL_ARC;\n        if (arc.nextFinalOutput != NO_OUTPUT) {\n          flags += BIT_ARC_HAS_FINAL_OUTPUT;\n        }\n      } else {\n        assert arc.nextFinalOutput == NO_OUTPUT;\n      }\n\n      boolean targetHasArcs = target.node > 0;\n\n      if (!targetHasArcs) {\n        flags += BIT_STOP_NODE;\n      } else if (inCounts != null) {\n        inCounts[target.node]++;\n      }\n\n      if (arc.output != NO_OUTPUT) {\n        flags += BIT_ARC_HAS_OUTPUT;\n      }\n\n      writer.writeByte((byte) flags);\n      writeLabel(arc.label);\n\n      // System.out.println(\"  write arc: label=\" + (char) arc.label + \" flags=\" + flags + \" target=\" + target.node + \" pos=\" + writer.posWrite + \" output=\" + outputs.outputToString(arc.output));\n\n      if (arc.output != NO_OUTPUT) {\n        outputs.write(arc.output, writer);\n        //System.out.println(\"    write output\");\n        arcWithOutputCount++;\n      }\n\n      if (arc.nextFinalOutput != NO_OUTPUT) {\n        //System.out.println(\"    write final output\");\n        outputs.write(arc.nextFinalOutput, writer);\n      }\n\n      if (targetHasArcs && (flags & BIT_TARGET_NEXT) == 0) {\n        assert target.node > 0;\n        //System.out.println(\"    write target\");\n        writer.writeInt(target.node);\n      }\n\n      // just write the arcs \"like normal\" on first pass,\n      // but record how many bytes each one took, and max\n      // byte size:\n      if (doFixedArray) {\n        bytesPerArc[arcIdx] = writer.posWrite - lastArcStart;\n        lastArcStart = writer.posWrite;\n        maxBytesPerArc = Math.max(maxBytesPerArc, bytesPerArc[arcIdx]);\n        //System.out.println(\"    bytes=\" + bytesPerArc[arcIdx]);\n      }\n    }\n\n    // TODO: if arc'd arrays will be \"too wasteful\" by some\n    // measure, eg if arcs have vastly different sized\n    // outputs, then we should selectively disable array for\n    // such cases\n\n    if (doFixedArray) {\n      //System.out.println(\"  doFixedArray\");\n      assert maxBytesPerArc > 0;\n      // 2nd pass just \"expands\" all arcs to take up a fixed\n      // byte size\n      final int sizeNeeded = fixedArrayStart + nodeIn.numArcs * maxBytesPerArc;\n      bytes = ArrayUtil.grow(bytes, sizeNeeded);\n      // TODO: we could make this a vInt instead\n      bytes[fixedArrayStart-4] = (byte) (maxBytesPerArc >> 24);\n      bytes[fixedArrayStart-3] = (byte) (maxBytesPerArc >> 16);\n      bytes[fixedArrayStart-2] = (byte) (maxBytesPerArc >> 8);\n      bytes[fixedArrayStart-1] = (byte) maxBytesPerArc;\n\n      // expand the arcs in place, backwards\n      int srcPos = writer.posWrite;\n      int destPos = fixedArrayStart + nodeIn.numArcs*maxBytesPerArc;\n      writer.posWrite = destPos;\n      for(int arcIdx=nodeIn.numArcs-1;arcIdx>=0;arcIdx--) {\n        //System.out.println(\"  repack arcIdx=\" + arcIdx + \" srcPos=\" + srcPos + \" destPos=\" + destPos);\n        destPos -= maxBytesPerArc;\n        srcPos -= bytesPerArc[arcIdx];\n        if (srcPos != destPos) {\n          assert destPos > srcPos;\n          System.arraycopy(bytes, srcPos, bytes, destPos, bytesPerArc[arcIdx]);\n        }\n      }\n    }\n\n    // reverse bytes in-place; we do this so that the\n    // \"BIT_TARGET_NEXT\" opto can work, ie, it reads the\n    // node just before the current one\n    final int endAddress = writer.posWrite - 1;\n\n    int left = startAddress;\n    int right = endAddress;\n    while (left < right) {\n      final byte b = bytes[left];\n      bytes[left++] = bytes[right];\n      bytes[right--] = b;\n    }\n    //System.out.println(\"  endAddress=\" + endAddress);\n\n    nodeCount++;\n    final int node;\n    if (nodeAddress != null) {\n      // Nodes are addressed by 1+ord:\n      if (nodeCount == nodeAddress.length) {\n        nodeAddress = ArrayUtil.grow(nodeAddress);\n        inCounts = ArrayUtil.grow(inCounts);\n      }\n      nodeAddress[nodeCount] = endAddress;\n      // System.out.println(\"  write nodeAddress[\" + nodeCount + \"] = \" + endAddress);\n      node = nodeCount;\n    } else {\n      node = endAddress;\n    }\n    lastFrozenNode = node;\n\n    return node;\n  }\n\n","sourceOld":"  // serializes new node by appending its bytes to the end\n  // of the current byte[]\n  int addNode(Builder.UnCompiledNode<T> node) throws IOException {\n    //System.out.println(\"FST.addNode pos=\" + posWrite + \" numArcs=\" + node.numArcs);\n    if (node.numArcs == 0) {\n      if (node.isFinal) {\n        return FINAL_END_NODE;\n      } else {\n        return NON_FINAL_END_NODE;\n      }\n    }\n\n    int startAddress = writer.posWrite;\n    //System.out.println(\"  startAddr=\" + startAddress);\n\n    final boolean doFixedArray = shouldExpand(node);\n    final int fixedArrayStart;\n    if (doFixedArray) {\n      if (bytesPerArc.length < node.numArcs) {\n        bytesPerArc = new int[ArrayUtil.oversize(node.numArcs, 1)];\n      }\n      // write a \"false\" first arc:\n      writer.writeByte((byte) BIT_ARCS_AS_FIXED_ARRAY);\n      writer.writeVInt(node.numArcs);\n      // placeholder -- we'll come back and write the number\n      // of bytes per arc (int) here:\n      // TODO: we could make this a vInt instead\n      writer.writeInt(0);\n      fixedArrayStart = writer.posWrite;\n      //System.out.println(\"  do fixed arcs array arcsStart=\" + fixedArrayStart);\n    } else {\n      fixedArrayStart = 0;\n    }\n\n    nodeCount++;\n    arcCount += node.numArcs;\n    \n    final int lastArc = node.numArcs-1;\n\n    int lastArcStart = writer.posWrite;\n    int maxBytesPerArc = 0;\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      final Builder.CompiledNode target = (Builder.CompiledNode) arc.target;\n      int flags = 0;\n\n      if (arcIdx == lastArc) {\n        flags += BIT_LAST_ARC;\n      }\n\n      if (lastFrozenNode == target.address && !doFixedArray) {\n        flags += BIT_TARGET_NEXT;\n      }\n\n      if (arc.isFinal) {\n        flags += BIT_FINAL_ARC;\n        if (arc.nextFinalOutput != NO_OUTPUT) {\n          flags += BIT_ARC_HAS_FINAL_OUTPUT;\n        }\n      } else {\n        assert arc.nextFinalOutput == NO_OUTPUT;\n      }\n\n      boolean targetHasArcs = target.address > 0;\n\n      if (!targetHasArcs) {\n        flags += BIT_STOP_NODE;\n      }\n\n      if (arc.output != NO_OUTPUT) {\n        flags += BIT_ARC_HAS_OUTPUT;\n      }\n\n      writer.writeByte((byte) flags);\n      writeLabel(arc.label);\n\n      //System.out.println(\"  write arc: label=\" + arc.label + \" flags=\" + flags);\n\n      if (arc.output != NO_OUTPUT) {\n        outputs.write(arc.output, writer);\n        arcWithOutputCount++;\n      }\n      if (arc.nextFinalOutput != NO_OUTPUT) {\n        outputs.write(arc.nextFinalOutput, writer);\n      }\n\n      if (targetHasArcs && (doFixedArray || lastFrozenNode != target.address)) {\n        assert target.address > 0;\n        writer.writeInt(target.address);\n      }\n\n      // just write the arcs \"like normal\" on first pass,\n      // but record how many bytes each one took, and max\n      // byte size:\n      if (doFixedArray) {\n        bytesPerArc[arcIdx] = writer.posWrite - lastArcStart;\n        lastArcStart = writer.posWrite;\n        maxBytesPerArc = Math.max(maxBytesPerArc, bytesPerArc[arcIdx]);\n        //System.out.println(\"    bytes=\" + bytesPerArc[arcIdx]);\n      }\n    }\n\n    // TODO: if arc'd arrays will be \"too wasteful\" by some\n    // measure, eg if arcs have vastly different sized\n    // outputs, then we should selectively disable array for\n    // such cases\n\n    if (doFixedArray) {\n      assert maxBytesPerArc > 0;\n      // 2nd pass just \"expands\" all arcs to take up a fixed\n      // byte size\n      final int sizeNeeded = fixedArrayStart + node.numArcs * maxBytesPerArc;\n      bytes = ArrayUtil.grow(bytes, sizeNeeded);\n      // TODO: we could make this a vInt instead\n      bytes[fixedArrayStart-4] = (byte) (maxBytesPerArc >> 24);\n      bytes[fixedArrayStart-3] = (byte) (maxBytesPerArc >> 16);\n      bytes[fixedArrayStart-2] = (byte) (maxBytesPerArc >> 8);\n      bytes[fixedArrayStart-1] = (byte) maxBytesPerArc;\n\n      // expand the arcs in place, backwards\n      int srcPos = writer.posWrite;\n      int destPos = fixedArrayStart + node.numArcs*maxBytesPerArc;\n      writer.posWrite = destPos;\n      for(int arcIdx=node.numArcs-1;arcIdx>=0;arcIdx--) {\n        //System.out.println(\"  repack arcIdx=\" + arcIdx + \" srcPos=\" + srcPos + \" destPos=\" + destPos);\n        destPos -= maxBytesPerArc;\n        srcPos -= bytesPerArc[arcIdx];\n        if (srcPos != destPos) {\n          assert destPos > srcPos;\n          System.arraycopy(bytes, srcPos, bytes, destPos, bytesPerArc[arcIdx]);\n        }\n      }\n    }\n\n    // reverse bytes in-place; we do this so that the\n    // \"BIT_TARGET_NEXT\" opto can work, ie, it reads the\n    // node just before the current one\n    final int endAddress = lastFrozenNode = writer.posWrite - 1;\n\n    int left = startAddress;\n    int right = endAddress;\n    while (left < right) {\n      final byte b = bytes[left];\n      bytes[left++] = bytes[right];\n      bytes[right--] = b;\n    }\n\n    return endAddress;\n  }\n\n","bugFix":null,"bugIntro":["7f32ed90e12610550e1363aea43afe3d6e292cf9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817882884229bace7dc5d1b75f6b0e4aa1e47122","date":1327879145,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#addNode(Builder.UnCompiledNode[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#addNode(Builder.UnCompiledNode[T]).mjava","sourceNew":"  // serializes new node by appending its bytes to the end\n  // of the current byte[]\n  int addNode(Builder.UnCompiledNode<T> nodeIn) throws IOException {\n    //System.out.println(\"FST.addNode pos=\" + writer.posWrite + \" numArcs=\" + nodeIn.numArcs);\n    if (nodeIn.numArcs == 0) {\n      if (nodeIn.isFinal) {\n        return FINAL_END_NODE;\n      } else {\n        return NON_FINAL_END_NODE;\n      }\n    }\n\n    int startAddress = writer.posWrite;\n    //System.out.println(\"  startAddr=\" + startAddress);\n\n    final boolean doFixedArray = shouldExpand(nodeIn);\n    final int fixedArrayStart;\n    if (doFixedArray) {\n      if (bytesPerArc.length < nodeIn.numArcs) {\n        bytesPerArc = new int[ArrayUtil.oversize(nodeIn.numArcs, 1)];\n      }\n      // write a \"false\" first arc:\n      writer.writeByte(ARCS_AS_FIXED_ARRAY);\n      writer.writeVInt(nodeIn.numArcs);\n      // placeholder -- we'll come back and write the number\n      // of bytes per arc (int) here:\n      // TODO: we could make this a vInt instead\n      writer.writeInt(0);\n      fixedArrayStart = writer.posWrite;\n      //System.out.println(\"  do fixed arcs array arcsStart=\" + fixedArrayStart);\n    } else {\n      fixedArrayStart = 0;\n    }\n\n    arcCount += nodeIn.numArcs;\n    \n    final int lastArc = nodeIn.numArcs-1;\n\n    int lastArcStart = writer.posWrite;\n    int maxBytesPerArc = 0;\n    for(int arcIdx=0;arcIdx<nodeIn.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = nodeIn.arcs[arcIdx];\n      final Builder.CompiledNode target = (Builder.CompiledNode) arc.target;\n      int flags = 0;\n\n      if (arcIdx == lastArc) {\n        flags += BIT_LAST_ARC;\n      }\n\n      if (lastFrozenNode == target.node && !doFixedArray) {\n        // TODO: for better perf (but more RAM used) we\n        // could avoid this except when arc is \"near\" the\n        // last arc:\n        flags += BIT_TARGET_NEXT;\n      }\n\n      if (arc.isFinal) {\n        flags += BIT_FINAL_ARC;\n        if (arc.nextFinalOutput != NO_OUTPUT) {\n          flags += BIT_ARC_HAS_FINAL_OUTPUT;\n        }\n      } else {\n        assert arc.nextFinalOutput == NO_OUTPUT;\n      }\n\n      boolean targetHasArcs = target.node > 0;\n\n      if (!targetHasArcs) {\n        flags += BIT_STOP_NODE;\n      } else if (inCounts != null) {\n        inCounts[target.node]++;\n      }\n\n      if (arc.output != NO_OUTPUT) {\n        flags += BIT_ARC_HAS_OUTPUT;\n      }\n\n      writer.writeByte((byte) flags);\n      writeLabel(arc.label);\n\n      // System.out.println(\"  write arc: label=\" + (char) arc.label + \" flags=\" + flags + \" target=\" + target.node + \" pos=\" + writer.posWrite + \" output=\" + outputs.outputToString(arc.output));\n\n      if (arc.output != NO_OUTPUT) {\n        outputs.write(arc.output, writer);\n        //System.out.println(\"    write output\");\n        arcWithOutputCount++;\n      }\n\n      if (arc.nextFinalOutput != NO_OUTPUT) {\n        //System.out.println(\"    write final output\");\n        outputs.write(arc.nextFinalOutput, writer);\n      }\n\n      if (targetHasArcs && (flags & BIT_TARGET_NEXT) == 0) {\n        assert target.node > 0;\n        //System.out.println(\"    write target\");\n        writer.writeInt(target.node);\n      }\n\n      // just write the arcs \"like normal\" on first pass,\n      // but record how many bytes each one took, and max\n      // byte size:\n      if (doFixedArray) {\n        bytesPerArc[arcIdx] = writer.posWrite - lastArcStart;\n        lastArcStart = writer.posWrite;\n        maxBytesPerArc = Math.max(maxBytesPerArc, bytesPerArc[arcIdx]);\n        //System.out.println(\"    bytes=\" + bytesPerArc[arcIdx]);\n      }\n    }\n\n    // TODO: if arc'd arrays will be \"too wasteful\" by some\n    // measure, eg if arcs have vastly different sized\n    // outputs, then we should selectively disable array for\n    // such cases\n\n    if (doFixedArray) {\n      //System.out.println(\"  doFixedArray\");\n      assert maxBytesPerArc > 0;\n      // 2nd pass just \"expands\" all arcs to take up a fixed\n      // byte size\n      final int sizeNeeded = fixedArrayStart + nodeIn.numArcs * maxBytesPerArc;\n      bytes = ArrayUtil.grow(bytes, sizeNeeded);\n      // TODO: we could make this a vInt instead\n      bytes[fixedArrayStart-4] = (byte) (maxBytesPerArc >> 24);\n      bytes[fixedArrayStart-3] = (byte) (maxBytesPerArc >> 16);\n      bytes[fixedArrayStart-2] = (byte) (maxBytesPerArc >> 8);\n      bytes[fixedArrayStart-1] = (byte) maxBytesPerArc;\n\n      // expand the arcs in place, backwards\n      int srcPos = writer.posWrite;\n      int destPos = fixedArrayStart + nodeIn.numArcs*maxBytesPerArc;\n      writer.posWrite = destPos;\n      for(int arcIdx=nodeIn.numArcs-1;arcIdx>=0;arcIdx--) {\n        //System.out.println(\"  repack arcIdx=\" + arcIdx + \" srcPos=\" + srcPos + \" destPos=\" + destPos);\n        destPos -= maxBytesPerArc;\n        srcPos -= bytesPerArc[arcIdx];\n        if (srcPos != destPos) {\n          assert destPos > srcPos;\n          System.arraycopy(bytes, srcPos, bytes, destPos, bytesPerArc[arcIdx]);\n        }\n      }\n    }\n\n    // reverse bytes in-place; we do this so that the\n    // \"BIT_TARGET_NEXT\" opto can work, ie, it reads the\n    // node just before the current one\n    final int endAddress = writer.posWrite - 1;\n\n    int left = startAddress;\n    int right = endAddress;\n    while (left < right) {\n      final byte b = bytes[left];\n      bytes[left++] = bytes[right];\n      bytes[right--] = b;\n    }\n    //System.out.println(\"  endAddress=\" + endAddress);\n\n    nodeCount++;\n    final int node;\n    if (nodeAddress != null) {\n      // Nodes are addressed by 1+ord:\n      if (nodeCount == nodeAddress.length) {\n        nodeAddress = ArrayUtil.grow(nodeAddress);\n        inCounts = ArrayUtil.grow(inCounts);\n      }\n      nodeAddress[nodeCount] = endAddress;\n      // System.out.println(\"  write nodeAddress[\" + nodeCount + \"] = \" + endAddress);\n      node = nodeCount;\n    } else {\n      node = endAddress;\n    }\n    lastFrozenNode = node;\n\n    return node;\n  }\n\n","sourceOld":"  // serializes new node by appending its bytes to the end\n  // of the current byte[]\n  int addNode(Builder.UnCompiledNode<T> node) throws IOException {\n    //System.out.println(\"FST.addNode pos=\" + posWrite + \" numArcs=\" + node.numArcs);\n    if (node.numArcs == 0) {\n      if (node.isFinal) {\n        return FINAL_END_NODE;\n      } else {\n        return NON_FINAL_END_NODE;\n      }\n    }\n\n    int startAddress = writer.posWrite;\n    //System.out.println(\"  startAddr=\" + startAddress);\n\n    final boolean doFixedArray = shouldExpand(node);\n    final int fixedArrayStart;\n    if (doFixedArray) {\n      if (bytesPerArc.length < node.numArcs) {\n        bytesPerArc = new int[ArrayUtil.oversize(node.numArcs, 1)];\n      }\n      // write a \"false\" first arc:\n      writer.writeByte((byte) BIT_ARCS_AS_FIXED_ARRAY);\n      writer.writeVInt(node.numArcs);\n      // placeholder -- we'll come back and write the number\n      // of bytes per arc (int) here:\n      // TODO: we could make this a vInt instead\n      writer.writeInt(0);\n      fixedArrayStart = writer.posWrite;\n      //System.out.println(\"  do fixed arcs array arcsStart=\" + fixedArrayStart);\n    } else {\n      fixedArrayStart = 0;\n    }\n\n    nodeCount++;\n    arcCount += node.numArcs;\n    \n    final int lastArc = node.numArcs-1;\n\n    int lastArcStart = writer.posWrite;\n    int maxBytesPerArc = 0;\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      final Builder.CompiledNode target = (Builder.CompiledNode) arc.target;\n      int flags = 0;\n\n      if (arcIdx == lastArc) {\n        flags += BIT_LAST_ARC;\n      }\n\n      if (lastFrozenNode == target.address && !doFixedArray) {\n        flags += BIT_TARGET_NEXT;\n      }\n\n      if (arc.isFinal) {\n        flags += BIT_FINAL_ARC;\n        if (arc.nextFinalOutput != NO_OUTPUT) {\n          flags += BIT_ARC_HAS_FINAL_OUTPUT;\n        }\n      } else {\n        assert arc.nextFinalOutput == NO_OUTPUT;\n      }\n\n      boolean targetHasArcs = target.address > 0;\n\n      if (!targetHasArcs) {\n        flags += BIT_STOP_NODE;\n      }\n\n      if (arc.output != NO_OUTPUT) {\n        flags += BIT_ARC_HAS_OUTPUT;\n      }\n\n      writer.writeByte((byte) flags);\n      writeLabel(arc.label);\n\n      //System.out.println(\"  write arc: label=\" + arc.label + \" flags=\" + flags);\n\n      if (arc.output != NO_OUTPUT) {\n        outputs.write(arc.output, writer);\n        arcWithOutputCount++;\n      }\n      if (arc.nextFinalOutput != NO_OUTPUT) {\n        outputs.write(arc.nextFinalOutput, writer);\n      }\n\n      if (targetHasArcs && (doFixedArray || lastFrozenNode != target.address)) {\n        assert target.address > 0;\n        writer.writeInt(target.address);\n      }\n\n      // just write the arcs \"like normal\" on first pass,\n      // but record how many bytes each one took, and max\n      // byte size:\n      if (doFixedArray) {\n        bytesPerArc[arcIdx] = writer.posWrite - lastArcStart;\n        lastArcStart = writer.posWrite;\n        maxBytesPerArc = Math.max(maxBytesPerArc, bytesPerArc[arcIdx]);\n        //System.out.println(\"    bytes=\" + bytesPerArc[arcIdx]);\n      }\n    }\n\n    // TODO: if arc'd arrays will be \"too wasteful\" by some\n    // measure, eg if arcs have vastly different sized\n    // outputs, then we should selectively disable array for\n    // such cases\n\n    if (doFixedArray) {\n      assert maxBytesPerArc > 0;\n      // 2nd pass just \"expands\" all arcs to take up a fixed\n      // byte size\n      final int sizeNeeded = fixedArrayStart + node.numArcs * maxBytesPerArc;\n      bytes = ArrayUtil.grow(bytes, sizeNeeded);\n      // TODO: we could make this a vInt instead\n      bytes[fixedArrayStart-4] = (byte) (maxBytesPerArc >> 24);\n      bytes[fixedArrayStart-3] = (byte) (maxBytesPerArc >> 16);\n      bytes[fixedArrayStart-2] = (byte) (maxBytesPerArc >> 8);\n      bytes[fixedArrayStart-1] = (byte) maxBytesPerArc;\n\n      // expand the arcs in place, backwards\n      int srcPos = writer.posWrite;\n      int destPos = fixedArrayStart + node.numArcs*maxBytesPerArc;\n      writer.posWrite = destPos;\n      for(int arcIdx=node.numArcs-1;arcIdx>=0;arcIdx--) {\n        //System.out.println(\"  repack arcIdx=\" + arcIdx + \" srcPos=\" + srcPos + \" destPos=\" + destPos);\n        destPos -= maxBytesPerArc;\n        srcPos -= bytesPerArc[arcIdx];\n        if (srcPos != destPos) {\n          assert destPos > srcPos;\n          System.arraycopy(bytes, srcPos, bytes, destPos, bytesPerArc[arcIdx]);\n        }\n      }\n    }\n\n    // reverse bytes in-place; we do this so that the\n    // \"BIT_TARGET_NEXT\" opto can work, ie, it reads the\n    // node just before the current one\n    final int endAddress = lastFrozenNode = writer.posWrite - 1;\n\n    int left = startAddress;\n    int right = endAddress;\n    while (left < right) {\n      final byte b = bytes[left];\n      bytes[left++] = bytes[right];\n      bytes[right--] = b;\n    }\n\n    return endAddress;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#addNode(Builder.UnCompiledNode[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#addNode(Builder.UnCompiledNode[T]).mjava","sourceNew":"  // serializes new node by appending its bytes to the end\n  // of the current byte[]\n  int addNode(Builder.UnCompiledNode<T> nodeIn) throws IOException {\n    //System.out.println(\"FST.addNode pos=\" + writer.posWrite + \" numArcs=\" + nodeIn.numArcs);\n    if (nodeIn.numArcs == 0) {\n      if (nodeIn.isFinal) {\n        return FINAL_END_NODE;\n      } else {\n        return NON_FINAL_END_NODE;\n      }\n    }\n\n    int startAddress = writer.posWrite;\n    //System.out.println(\"  startAddr=\" + startAddress);\n\n    final boolean doFixedArray = shouldExpand(nodeIn);\n    final int fixedArrayStart;\n    if (doFixedArray) {\n      if (bytesPerArc.length < nodeIn.numArcs) {\n        bytesPerArc = new int[ArrayUtil.oversize(nodeIn.numArcs, 1)];\n      }\n      // write a \"false\" first arc:\n      writer.writeByte(ARCS_AS_FIXED_ARRAY);\n      writer.writeVInt(nodeIn.numArcs);\n      // placeholder -- we'll come back and write the number\n      // of bytes per arc (int) here:\n      // TODO: we could make this a vInt instead\n      writer.writeInt(0);\n      fixedArrayStart = writer.posWrite;\n      //System.out.println(\"  do fixed arcs array arcsStart=\" + fixedArrayStart);\n    } else {\n      fixedArrayStart = 0;\n    }\n\n    arcCount += nodeIn.numArcs;\n    \n    final int lastArc = nodeIn.numArcs-1;\n\n    int lastArcStart = writer.posWrite;\n    int maxBytesPerArc = 0;\n    for(int arcIdx=0;arcIdx<nodeIn.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = nodeIn.arcs[arcIdx];\n      final Builder.CompiledNode target = (Builder.CompiledNode) arc.target;\n      int flags = 0;\n\n      if (arcIdx == lastArc) {\n        flags += BIT_LAST_ARC;\n      }\n\n      if (lastFrozenNode == target.node && !doFixedArray) {\n        // TODO: for better perf (but more RAM used) we\n        // could avoid this except when arc is \"near\" the\n        // last arc:\n        flags += BIT_TARGET_NEXT;\n      }\n\n      if (arc.isFinal) {\n        flags += BIT_FINAL_ARC;\n        if (arc.nextFinalOutput != NO_OUTPUT) {\n          flags += BIT_ARC_HAS_FINAL_OUTPUT;\n        }\n      } else {\n        assert arc.nextFinalOutput == NO_OUTPUT;\n      }\n\n      boolean targetHasArcs = target.node > 0;\n\n      if (!targetHasArcs) {\n        flags += BIT_STOP_NODE;\n      } else if (inCounts != null) {\n        inCounts[target.node]++;\n      }\n\n      if (arc.output != NO_OUTPUT) {\n        flags += BIT_ARC_HAS_OUTPUT;\n      }\n\n      writer.writeByte((byte) flags);\n      writeLabel(arc.label);\n\n      // System.out.println(\"  write arc: label=\" + (char) arc.label + \" flags=\" + flags + \" target=\" + target.node + \" pos=\" + writer.posWrite + \" output=\" + outputs.outputToString(arc.output));\n\n      if (arc.output != NO_OUTPUT) {\n        outputs.write(arc.output, writer);\n        //System.out.println(\"    write output\");\n        arcWithOutputCount++;\n      }\n\n      if (arc.nextFinalOutput != NO_OUTPUT) {\n        //System.out.println(\"    write final output\");\n        outputs.write(arc.nextFinalOutput, writer);\n      }\n\n      if (targetHasArcs && (flags & BIT_TARGET_NEXT) == 0) {\n        assert target.node > 0;\n        //System.out.println(\"    write target\");\n        writer.writeInt(target.node);\n      }\n\n      // just write the arcs \"like normal\" on first pass,\n      // but record how many bytes each one took, and max\n      // byte size:\n      if (doFixedArray) {\n        bytesPerArc[arcIdx] = writer.posWrite - lastArcStart;\n        lastArcStart = writer.posWrite;\n        maxBytesPerArc = Math.max(maxBytesPerArc, bytesPerArc[arcIdx]);\n        //System.out.println(\"    bytes=\" + bytesPerArc[arcIdx]);\n      }\n    }\n\n    // TODO: if arc'd arrays will be \"too wasteful\" by some\n    // measure, eg if arcs have vastly different sized\n    // outputs, then we should selectively disable array for\n    // such cases\n\n    if (doFixedArray) {\n      //System.out.println(\"  doFixedArray\");\n      assert maxBytesPerArc > 0;\n      // 2nd pass just \"expands\" all arcs to take up a fixed\n      // byte size\n      final int sizeNeeded = fixedArrayStart + nodeIn.numArcs * maxBytesPerArc;\n      bytes = ArrayUtil.grow(bytes, sizeNeeded);\n      // TODO: we could make this a vInt instead\n      bytes[fixedArrayStart-4] = (byte) (maxBytesPerArc >> 24);\n      bytes[fixedArrayStart-3] = (byte) (maxBytesPerArc >> 16);\n      bytes[fixedArrayStart-2] = (byte) (maxBytesPerArc >> 8);\n      bytes[fixedArrayStart-1] = (byte) maxBytesPerArc;\n\n      // expand the arcs in place, backwards\n      int srcPos = writer.posWrite;\n      int destPos = fixedArrayStart + nodeIn.numArcs*maxBytesPerArc;\n      writer.posWrite = destPos;\n      for(int arcIdx=nodeIn.numArcs-1;arcIdx>=0;arcIdx--) {\n        //System.out.println(\"  repack arcIdx=\" + arcIdx + \" srcPos=\" + srcPos + \" destPos=\" + destPos);\n        destPos -= maxBytesPerArc;\n        srcPos -= bytesPerArc[arcIdx];\n        if (srcPos != destPos) {\n          assert destPos > srcPos;\n          System.arraycopy(bytes, srcPos, bytes, destPos, bytesPerArc[arcIdx]);\n        }\n      }\n    }\n\n    // reverse bytes in-place; we do this so that the\n    // \"BIT_TARGET_NEXT\" opto can work, ie, it reads the\n    // node just before the current one\n    final int endAddress = writer.posWrite - 1;\n\n    int left = startAddress;\n    int right = endAddress;\n    while (left < right) {\n      final byte b = bytes[left];\n      bytes[left++] = bytes[right];\n      bytes[right--] = b;\n    }\n    //System.out.println(\"  endAddress=\" + endAddress);\n\n    nodeCount++;\n    final int node;\n    if (nodeAddress != null) {\n      // Nodes are addressed by 1+ord:\n      if (nodeCount == nodeAddress.length) {\n        nodeAddress = ArrayUtil.grow(nodeAddress);\n        inCounts = ArrayUtil.grow(inCounts);\n      }\n      nodeAddress[nodeCount] = endAddress;\n      // System.out.println(\"  write nodeAddress[\" + nodeCount + \"] = \" + endAddress);\n      node = nodeCount;\n    } else {\n      node = endAddress;\n    }\n    lastFrozenNode = node;\n\n    return node;\n  }\n\n","sourceOld":"  // serializes new node by appending its bytes to the end\n  // of the current byte[]\n  int addNode(Builder.UnCompiledNode<T> node) throws IOException {\n    //System.out.println(\"FST.addNode pos=\" + posWrite + \" numArcs=\" + node.numArcs);\n    if (node.numArcs == 0) {\n      if (node.isFinal) {\n        return FINAL_END_NODE;\n      } else {\n        return NON_FINAL_END_NODE;\n      }\n    }\n\n    int startAddress = writer.posWrite;\n    //System.out.println(\"  startAddr=\" + startAddress);\n\n    final boolean doFixedArray = shouldExpand(node);\n    final int fixedArrayStart;\n    if (doFixedArray) {\n      if (bytesPerArc.length < node.numArcs) {\n        bytesPerArc = new int[ArrayUtil.oversize(node.numArcs, 1)];\n      }\n      // write a \"false\" first arc:\n      writer.writeByte((byte) BIT_ARCS_AS_FIXED_ARRAY);\n      writer.writeVInt(node.numArcs);\n      // placeholder -- we'll come back and write the number\n      // of bytes per arc (int) here:\n      // TODO: we could make this a vInt instead\n      writer.writeInt(0);\n      fixedArrayStart = writer.posWrite;\n      //System.out.println(\"  do fixed arcs array arcsStart=\" + fixedArrayStart);\n    } else {\n      fixedArrayStart = 0;\n    }\n\n    nodeCount++;\n    arcCount += node.numArcs;\n    \n    final int lastArc = node.numArcs-1;\n\n    int lastArcStart = writer.posWrite;\n    int maxBytesPerArc = 0;\n    for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = node.arcs[arcIdx];\n      final Builder.CompiledNode target = (Builder.CompiledNode) arc.target;\n      int flags = 0;\n\n      if (arcIdx == lastArc) {\n        flags += BIT_LAST_ARC;\n      }\n\n      if (lastFrozenNode == target.address && !doFixedArray) {\n        flags += BIT_TARGET_NEXT;\n      }\n\n      if (arc.isFinal) {\n        flags += BIT_FINAL_ARC;\n        if (arc.nextFinalOutput != NO_OUTPUT) {\n          flags += BIT_ARC_HAS_FINAL_OUTPUT;\n        }\n      } else {\n        assert arc.nextFinalOutput == NO_OUTPUT;\n      }\n\n      boolean targetHasArcs = target.address > 0;\n\n      if (!targetHasArcs) {\n        flags += BIT_STOP_NODE;\n      }\n\n      if (arc.output != NO_OUTPUT) {\n        flags += BIT_ARC_HAS_OUTPUT;\n      }\n\n      writer.writeByte((byte) flags);\n      writeLabel(arc.label);\n\n      //System.out.println(\"  write arc: label=\" + arc.label + \" flags=\" + flags);\n\n      if (arc.output != NO_OUTPUT) {\n        outputs.write(arc.output, writer);\n        arcWithOutputCount++;\n      }\n      if (arc.nextFinalOutput != NO_OUTPUT) {\n        outputs.write(arc.nextFinalOutput, writer);\n      }\n\n      if (targetHasArcs && (doFixedArray || lastFrozenNode != target.address)) {\n        assert target.address > 0;\n        writer.writeInt(target.address);\n      }\n\n      // just write the arcs \"like normal\" on first pass,\n      // but record how many bytes each one took, and max\n      // byte size:\n      if (doFixedArray) {\n        bytesPerArc[arcIdx] = writer.posWrite - lastArcStart;\n        lastArcStart = writer.posWrite;\n        maxBytesPerArc = Math.max(maxBytesPerArc, bytesPerArc[arcIdx]);\n        //System.out.println(\"    bytes=\" + bytesPerArc[arcIdx]);\n      }\n    }\n\n    // TODO: if arc'd arrays will be \"too wasteful\" by some\n    // measure, eg if arcs have vastly different sized\n    // outputs, then we should selectively disable array for\n    // such cases\n\n    if (doFixedArray) {\n      assert maxBytesPerArc > 0;\n      // 2nd pass just \"expands\" all arcs to take up a fixed\n      // byte size\n      final int sizeNeeded = fixedArrayStart + node.numArcs * maxBytesPerArc;\n      bytes = ArrayUtil.grow(bytes, sizeNeeded);\n      // TODO: we could make this a vInt instead\n      bytes[fixedArrayStart-4] = (byte) (maxBytesPerArc >> 24);\n      bytes[fixedArrayStart-3] = (byte) (maxBytesPerArc >> 16);\n      bytes[fixedArrayStart-2] = (byte) (maxBytesPerArc >> 8);\n      bytes[fixedArrayStart-1] = (byte) maxBytesPerArc;\n\n      // expand the arcs in place, backwards\n      int srcPos = writer.posWrite;\n      int destPos = fixedArrayStart + node.numArcs*maxBytesPerArc;\n      writer.posWrite = destPos;\n      for(int arcIdx=node.numArcs-1;arcIdx>=0;arcIdx--) {\n        //System.out.println(\"  repack arcIdx=\" + arcIdx + \" srcPos=\" + srcPos + \" destPos=\" + destPos);\n        destPos -= maxBytesPerArc;\n        srcPos -= bytesPerArc[arcIdx];\n        if (srcPos != destPos) {\n          assert destPos > srcPos;\n          System.arraycopy(bytes, srcPos, bytes, destPos, bytesPerArc[arcIdx]);\n        }\n      }\n    }\n\n    // reverse bytes in-place; we do this so that the\n    // \"BIT_TARGET_NEXT\" opto can work, ie, it reads the\n    // node just before the current one\n    final int endAddress = lastFrozenNode = writer.posWrite - 1;\n\n    int left = startAddress;\n    int right = endAddress;\n    while (left < right) {\n      final byte b = bytes[left];\n      bytes[left++] = bytes[right];\n      bytes[right--] = b;\n    }\n\n    return endAddress;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#addNode(Builder.UnCompiledNode[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#addNode(Builder.UnCompiledNode[T]).mjava","sourceNew":"  // serializes new node by appending its bytes to the end\n  // of the current byte[]\n  int addNode(Builder.UnCompiledNode<T> nodeIn) throws IOException {\n    //System.out.println(\"FST.addNode pos=\" + writer.posWrite + \" numArcs=\" + nodeIn.numArcs);\n    if (nodeIn.numArcs == 0) {\n      if (nodeIn.isFinal) {\n        return FINAL_END_NODE;\n      } else {\n        return NON_FINAL_END_NODE;\n      }\n    }\n\n    int startAddress = writer.posWrite;\n    //System.out.println(\"  startAddr=\" + startAddress);\n\n    final boolean doFixedArray = shouldExpand(nodeIn);\n    final int fixedArrayStart;\n    if (doFixedArray) {\n      if (bytesPerArc.length < nodeIn.numArcs) {\n        bytesPerArc = new int[ArrayUtil.oversize(nodeIn.numArcs, 1)];\n      }\n      // write a \"false\" first arc:\n      writer.writeByte(ARCS_AS_FIXED_ARRAY);\n      writer.writeVInt(nodeIn.numArcs);\n      // placeholder -- we'll come back and write the number\n      // of bytes per arc (int) here:\n      // TODO: we could make this a vInt instead\n      writer.writeInt(0);\n      fixedArrayStart = writer.posWrite;\n      //System.out.println(\"  do fixed arcs array arcsStart=\" + fixedArrayStart);\n    } else {\n      fixedArrayStart = 0;\n    }\n\n    arcCount += nodeIn.numArcs;\n    \n    final int lastArc = nodeIn.numArcs-1;\n\n    int lastArcStart = writer.posWrite;\n    int maxBytesPerArc = 0;\n    for(int arcIdx=0;arcIdx<nodeIn.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = nodeIn.arcs[arcIdx];\n      final Builder.CompiledNode target = (Builder.CompiledNode) arc.target;\n      int flags = 0;\n\n      if (arcIdx == lastArc) {\n        flags += BIT_LAST_ARC;\n      }\n\n      if (lastFrozenNode == target.node && !doFixedArray) {\n        // TODO: for better perf (but more RAM used) we\n        // could avoid this except when arc is \"near\" the\n        // last arc:\n        flags += BIT_TARGET_NEXT;\n      }\n\n      if (arc.isFinal) {\n        flags += BIT_FINAL_ARC;\n        if (arc.nextFinalOutput != NO_OUTPUT) {\n          flags += BIT_ARC_HAS_FINAL_OUTPUT;\n        }\n      } else {\n        assert arc.nextFinalOutput == NO_OUTPUT;\n      }\n\n      boolean targetHasArcs = target.node > 0;\n\n      if (!targetHasArcs) {\n        flags += BIT_STOP_NODE;\n      } else if (inCounts != null) {\n        inCounts[target.node]++;\n      }\n\n      if (arc.output != NO_OUTPUT) {\n        flags += BIT_ARC_HAS_OUTPUT;\n      }\n\n      writer.writeByte((byte) flags);\n      writeLabel(arc.label);\n\n      // System.out.println(\"  write arc: label=\" + (char) arc.label + \" flags=\" + flags + \" target=\" + target.node + \" pos=\" + writer.posWrite + \" output=\" + outputs.outputToString(arc.output));\n\n      if (arc.output != NO_OUTPUT) {\n        outputs.write(arc.output, writer);\n        //System.out.println(\"    write output\");\n        arcWithOutputCount++;\n      }\n\n      if (arc.nextFinalOutput != NO_OUTPUT) {\n        //System.out.println(\"    write final output\");\n        outputs.write(arc.nextFinalOutput, writer);\n      }\n\n      if (targetHasArcs && (flags & BIT_TARGET_NEXT) == 0) {\n        assert target.node > 0;\n        //System.out.println(\"    write target\");\n        writer.writeInt(target.node);\n      }\n\n      // just write the arcs \"like normal\" on first pass,\n      // but record how many bytes each one took, and max\n      // byte size:\n      if (doFixedArray) {\n        bytesPerArc[arcIdx] = writer.posWrite - lastArcStart;\n        lastArcStart = writer.posWrite;\n        maxBytesPerArc = Math.max(maxBytesPerArc, bytesPerArc[arcIdx]);\n        //System.out.println(\"    bytes=\" + bytesPerArc[arcIdx]);\n      }\n    }\n\n    // TODO: if arc'd arrays will be \"too wasteful\" by some\n    // measure, eg if arcs have vastly different sized\n    // outputs, then we should selectively disable array for\n    // such cases\n\n    if (doFixedArray) {\n      //System.out.println(\"  doFixedArray\");\n      assert maxBytesPerArc > 0;\n      // 2nd pass just \"expands\" all arcs to take up a fixed\n      // byte size\n      final int sizeNeeded = fixedArrayStart + nodeIn.numArcs * maxBytesPerArc;\n      bytes = ArrayUtil.grow(bytes, sizeNeeded);\n      // TODO: we could make this a vInt instead\n      bytes[fixedArrayStart-4] = (byte) (maxBytesPerArc >> 24);\n      bytes[fixedArrayStart-3] = (byte) (maxBytesPerArc >> 16);\n      bytes[fixedArrayStart-2] = (byte) (maxBytesPerArc >> 8);\n      bytes[fixedArrayStart-1] = (byte) maxBytesPerArc;\n\n      // expand the arcs in place, backwards\n      int srcPos = writer.posWrite;\n      int destPos = fixedArrayStart + nodeIn.numArcs*maxBytesPerArc;\n      writer.posWrite = destPos;\n      for(int arcIdx=nodeIn.numArcs-1;arcIdx>=0;arcIdx--) {\n        //System.out.println(\"  repack arcIdx=\" + arcIdx + \" srcPos=\" + srcPos + \" destPos=\" + destPos);\n        destPos -= maxBytesPerArc;\n        srcPos -= bytesPerArc[arcIdx];\n        if (srcPos != destPos) {\n          assert destPos > srcPos;\n          System.arraycopy(bytes, srcPos, bytes, destPos, bytesPerArc[arcIdx]);\n        }\n      }\n    }\n\n    // reverse bytes in-place; we do this so that the\n    // \"BIT_TARGET_NEXT\" opto can work, ie, it reads the\n    // node just before the current one\n    final int endAddress = writer.posWrite - 1;\n\n    int left = startAddress;\n    int right = endAddress;\n    while (left < right) {\n      final byte b = bytes[left];\n      bytes[left++] = bytes[right];\n      bytes[right--] = b;\n    }\n    //System.out.println(\"  endAddress=\" + endAddress);\n\n    nodeCount++;\n    final int node;\n    if (nodeAddress != null) {\n      // Nodes are addressed by 1+ord:\n      if (nodeCount == nodeAddress.length) {\n        nodeAddress = ArrayUtil.grow(nodeAddress);\n        inCounts = ArrayUtil.grow(inCounts);\n      }\n      nodeAddress[nodeCount] = endAddress;\n      // System.out.println(\"  write nodeAddress[\" + nodeCount + \"] = \" + endAddress);\n      node = nodeCount;\n    } else {\n      node = endAddress;\n    }\n    lastFrozenNode = node;\n\n    return node;\n  }\n\n","sourceOld":"  // serializes new node by appending its bytes to the end\n  // of the current byte[]\n  int addNode(Builder.UnCompiledNode<T> nodeIn) throws IOException {\n    //System.out.println(\"FST.addNode pos=\" + writer.posWrite + \" numArcs=\" + nodeIn.numArcs);\n    if (nodeIn.numArcs == 0) {\n      if (nodeIn.isFinal) {\n        return FINAL_END_NODE;\n      } else {\n        return NON_FINAL_END_NODE;\n      }\n    }\n\n    int startAddress = writer.posWrite;\n    //System.out.println(\"  startAddr=\" + startAddress);\n\n    final boolean doFixedArray = shouldExpand(nodeIn);\n    final int fixedArrayStart;\n    if (doFixedArray) {\n      if (bytesPerArc.length < nodeIn.numArcs) {\n        bytesPerArc = new int[ArrayUtil.oversize(nodeIn.numArcs, 1)];\n      }\n      // write a \"false\" first arc:\n      writer.writeByte(ARCS_AS_FIXED_ARRAY);\n      writer.writeVInt(nodeIn.numArcs);\n      // placeholder -- we'll come back and write the number\n      // of bytes per arc (int) here:\n      // TODO: we could make this a vInt instead\n      writer.writeInt(0);\n      fixedArrayStart = writer.posWrite;\n      //System.out.println(\"  do fixed arcs array arcsStart=\" + fixedArrayStart);\n    } else {\n      fixedArrayStart = 0;\n    }\n\n    arcCount += nodeIn.numArcs;\n    \n    final int lastArc = nodeIn.numArcs-1;\n\n    int lastArcStart = writer.posWrite;\n    int maxBytesPerArc = 0;\n    for(int arcIdx=0;arcIdx<nodeIn.numArcs;arcIdx++) {\n      final Builder.Arc<T> arc = nodeIn.arcs[arcIdx];\n      final Builder.CompiledNode target = (Builder.CompiledNode) arc.target;\n      int flags = 0;\n\n      if (arcIdx == lastArc) {\n        flags += BIT_LAST_ARC;\n      }\n\n      if (lastFrozenNode == target.node && !doFixedArray) {\n        // TODO: for better perf (but more RAM used) we\n        // could avoid this except when arc is \"near\" the\n        // last arc:\n        flags += BIT_TARGET_NEXT;\n      }\n\n      if (arc.isFinal) {\n        flags += BIT_FINAL_ARC;\n        if (arc.nextFinalOutput != NO_OUTPUT) {\n          flags += BIT_ARC_HAS_FINAL_OUTPUT;\n        }\n      } else {\n        assert arc.nextFinalOutput == NO_OUTPUT;\n      }\n\n      boolean targetHasArcs = target.node > 0;\n\n      if (!targetHasArcs) {\n        flags += BIT_STOP_NODE;\n      } else if (inCounts != null) {\n        inCounts[target.node]++;\n      }\n\n      if (arc.output != NO_OUTPUT) {\n        flags += BIT_ARC_HAS_OUTPUT;\n      }\n\n      writer.writeByte((byte) flags);\n      writeLabel(arc.label);\n\n      // System.out.println(\"  write arc: label=\" + (char) arc.label + \" flags=\" + flags + \" target=\" + target.node + \" pos=\" + writer.posWrite + \" output=\" + outputs.outputToString(arc.output));\n\n      if (arc.output != NO_OUTPUT) {\n        outputs.write(arc.output, writer);\n        //System.out.println(\"    write output\");\n        arcWithOutputCount++;\n      }\n\n      if (arc.nextFinalOutput != NO_OUTPUT) {\n        //System.out.println(\"    write final output\");\n        outputs.write(arc.nextFinalOutput, writer);\n      }\n\n      if (targetHasArcs && (flags & BIT_TARGET_NEXT) == 0) {\n        assert target.node > 0;\n        //System.out.println(\"    write target\");\n        writer.writeInt(target.node);\n      }\n\n      // just write the arcs \"like normal\" on first pass,\n      // but record how many bytes each one took, and max\n      // byte size:\n      if (doFixedArray) {\n        bytesPerArc[arcIdx] = writer.posWrite - lastArcStart;\n        lastArcStart = writer.posWrite;\n        maxBytesPerArc = Math.max(maxBytesPerArc, bytesPerArc[arcIdx]);\n        //System.out.println(\"    bytes=\" + bytesPerArc[arcIdx]);\n      }\n    }\n\n    // TODO: if arc'd arrays will be \"too wasteful\" by some\n    // measure, eg if arcs have vastly different sized\n    // outputs, then we should selectively disable array for\n    // such cases\n\n    if (doFixedArray) {\n      //System.out.println(\"  doFixedArray\");\n      assert maxBytesPerArc > 0;\n      // 2nd pass just \"expands\" all arcs to take up a fixed\n      // byte size\n      final int sizeNeeded = fixedArrayStart + nodeIn.numArcs * maxBytesPerArc;\n      bytes = ArrayUtil.grow(bytes, sizeNeeded);\n      // TODO: we could make this a vInt instead\n      bytes[fixedArrayStart-4] = (byte) (maxBytesPerArc >> 24);\n      bytes[fixedArrayStart-3] = (byte) (maxBytesPerArc >> 16);\n      bytes[fixedArrayStart-2] = (byte) (maxBytesPerArc >> 8);\n      bytes[fixedArrayStart-1] = (byte) maxBytesPerArc;\n\n      // expand the arcs in place, backwards\n      int srcPos = writer.posWrite;\n      int destPos = fixedArrayStart + nodeIn.numArcs*maxBytesPerArc;\n      writer.posWrite = destPos;\n      for(int arcIdx=nodeIn.numArcs-1;arcIdx>=0;arcIdx--) {\n        //System.out.println(\"  repack arcIdx=\" + arcIdx + \" srcPos=\" + srcPos + \" destPos=\" + destPos);\n        destPos -= maxBytesPerArc;\n        srcPos -= bytesPerArc[arcIdx];\n        if (srcPos != destPos) {\n          assert destPos > srcPos;\n          System.arraycopy(bytes, srcPos, bytes, destPos, bytesPerArc[arcIdx]);\n        }\n      }\n    }\n\n    // reverse bytes in-place; we do this so that the\n    // \"BIT_TARGET_NEXT\" opto can work, ie, it reads the\n    // node just before the current one\n    final int endAddress = writer.posWrite - 1;\n\n    int left = startAddress;\n    int right = endAddress;\n    while (left < right) {\n      final byte b = bytes[left];\n      bytes[left++] = bytes[right];\n      bytes[right--] = b;\n    }\n    //System.out.println(\"  endAddress=\" + endAddress);\n\n    nodeCount++;\n    final int node;\n    if (nodeAddress != null) {\n      // Nodes are addressed by 1+ord:\n      if (nodeCount == nodeAddress.length) {\n        nodeAddress = ArrayUtil.grow(nodeAddress);\n        inCounts = ArrayUtil.grow(inCounts);\n      }\n      nodeAddress[nodeCount] = endAddress;\n      // System.out.println(\"  write nodeAddress[\" + nodeCount + \"] = \" + endAddress);\n      node = nodeCount;\n    } else {\n      node = endAddress;\n    }\n    lastFrozenNode = node;\n\n    return node;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"0c58aef9c3fa8ab2b0cd50c64ed37f85a00c6050":["8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["8be6e1e4fbbc94d90b78f175c03ff389b6949373","0c58aef9c3fa8ab2b0cd50c64ed37f85a00c6050"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","0c58aef9c3fa8ab2b0cd50c64ed37f85a00c6050"],"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b6fdfce35d0adb18836cf8711abe487a934df33":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["0c58aef9c3fa8ab2b0cd50c64ed37f85a00c6050"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8be6e1e4fbbc94d90b78f175c03ff389b6949373"]},"commit2Childs":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["0c58aef9c3fa8ab2b0cd50c64ed37f85a00c6050","d083e83f225b11e5fdd900e83d26ddb385b6955c","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0c58aef9c3fa8ab2b0cd50c64ed37f85a00c6050":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8be6e1e4fbbc94d90b78f175c03ff389b6949373","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["b3be20ca1091c0b7cdb2308b9023606a5e451cec","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}