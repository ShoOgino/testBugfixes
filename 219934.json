{"path":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#getParser(Map[String,Float],String,SolrParams,float).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#getParser(Map[String,Float],String,SolrParams,float).mjava","pathOld":"solr/src/java/org/apache/solr/search/DisMaxQParser#getParser(Map[String,Float],String,SolrParams,float).mjava","sourceNew":"  protected SolrPluginUtils.DisjunctionMaxQueryParser getParser(Map<String, Float> fields, String paramName,\n                                                                SolrParams solrParams, float tiebreaker) {\n    int slop = solrParams.getInt(paramName, 0);\n    SolrPluginUtils.DisjunctionMaxQueryParser parser = new SolrPluginUtils.DisjunctionMaxQueryParser(this,\n            IMPOSSIBLE_FIELD_NAME);\n    parser.addAlias(IMPOSSIBLE_FIELD_NAME, tiebreaker, fields);\n    parser.setPhraseSlop(slop);\n    return parser;\n  }\n\n","sourceOld":"  protected SolrPluginUtils.DisjunctionMaxQueryParser getParser(Map<String, Float> fields, String paramName,\n                                                                SolrParams solrParams, float tiebreaker) {\n    int slop = solrParams.getInt(paramName, 0);\n    SolrPluginUtils.DisjunctionMaxQueryParser parser = new SolrPluginUtils.DisjunctionMaxQueryParser(this,\n            IMPOSSIBLE_FIELD_NAME);\n    parser.addAlias(IMPOSSIBLE_FIELD_NAME, tiebreaker, fields);\n    parser.setPhraseSlop(slop);\n    return parser;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#getParser(Map[String,Float],String,SolrParams,float).mjava","pathOld":"solr/src/java/org/apache/solr/search/DisMaxQParser#getParser(Map[String,Float],String,SolrParams,float).mjava","sourceNew":"  protected SolrPluginUtils.DisjunctionMaxQueryParser getParser(Map<String, Float> fields, String paramName,\n                                                                SolrParams solrParams, float tiebreaker) {\n    int slop = solrParams.getInt(paramName, 0);\n    SolrPluginUtils.DisjunctionMaxQueryParser parser = new SolrPluginUtils.DisjunctionMaxQueryParser(this,\n            IMPOSSIBLE_FIELD_NAME);\n    parser.addAlias(IMPOSSIBLE_FIELD_NAME, tiebreaker, fields);\n    parser.setPhraseSlop(slop);\n    return parser;\n  }\n\n","sourceOld":"  protected SolrPluginUtils.DisjunctionMaxQueryParser getParser(Map<String, Float> fields, String paramName,\n                                                                SolrParams solrParams, float tiebreaker) {\n    int slop = solrParams.getInt(paramName, 0);\n    SolrPluginUtils.DisjunctionMaxQueryParser parser = new SolrPluginUtils.DisjunctionMaxQueryParser(this,\n            IMPOSSIBLE_FIELD_NAME);\n    parser.addAlias(IMPOSSIBLE_FIELD_NAME, tiebreaker, fields);\n    parser.setPhraseSlop(slop);\n    return parser;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#getParser(Map[String,Float],String,SolrParams,float).mjava","pathOld":"solr/src/java/org/apache/solr/search/DisMaxQParser#getParser(Map[String,Float],String,SolrParams,float).mjava","sourceNew":"  protected SolrPluginUtils.DisjunctionMaxQueryParser getParser(Map<String, Float> fields, String paramName,\n                                                                SolrParams solrParams, float tiebreaker) {\n    int slop = solrParams.getInt(paramName, 0);\n    SolrPluginUtils.DisjunctionMaxQueryParser parser = new SolrPluginUtils.DisjunctionMaxQueryParser(this,\n            IMPOSSIBLE_FIELD_NAME);\n    parser.addAlias(IMPOSSIBLE_FIELD_NAME, tiebreaker, fields);\n    parser.setPhraseSlop(slop);\n    return parser;\n  }\n\n","sourceOld":"  protected SolrPluginUtils.DisjunctionMaxQueryParser getParser(Map<String, Float> fields, String paramName,\n                                                                SolrParams solrParams, float tiebreaker) {\n    int slop = solrParams.getInt(paramName, 0);\n    SolrPluginUtils.DisjunctionMaxQueryParser parser = new SolrPluginUtils.DisjunctionMaxQueryParser(this,\n            IMPOSSIBLE_FIELD_NAME);\n    parser.addAlias(IMPOSSIBLE_FIELD_NAME, tiebreaker, fields);\n    parser.setPhraseSlop(slop);\n    return parser;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a4260b228cfff6ad78ac88d519f0f7746529c3c","date":1493136145,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#getParser(Map[String,Float],String,SolrParams,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#getParser(Map[String,Float],String,SolrParams,float).mjava","sourceNew":"  protected SolrPluginUtils.DisjunctionMaxQueryParser getParser(Map<String, Float> fields, String paramName,\n                                                                SolrParams solrParams, float tiebreaker) {\n    int slop = solrParams.getInt(paramName, 0);\n    SolrPluginUtils.DisjunctionMaxQueryParser parser = new SolrPluginUtils.DisjunctionMaxQueryParser(this,\n            IMPOSSIBLE_FIELD_NAME);\n    parser.addAlias(IMPOSSIBLE_FIELD_NAME, tiebreaker, fields);\n    parser.setPhraseSlop(slop);\n    parser.setSplitOnWhitespace(true);\n    return parser;\n  }\n\n","sourceOld":"  protected SolrPluginUtils.DisjunctionMaxQueryParser getParser(Map<String, Float> fields, String paramName,\n                                                                SolrParams solrParams, float tiebreaker) {\n    int slop = solrParams.getInt(paramName, 0);\n    SolrPluginUtils.DisjunctionMaxQueryParser parser = new SolrPluginUtils.DisjunctionMaxQueryParser(this,\n            IMPOSSIBLE_FIELD_NAME);\n    parser.addAlias(IMPOSSIBLE_FIELD_NAME, tiebreaker, fields);\n    parser.setPhraseSlop(slop);\n    return parser;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#getParser(Map[String,Float],String,SolrParams,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#getParser(Map[String,Float],String,SolrParams,float).mjava","sourceNew":"  protected SolrPluginUtils.DisjunctionMaxQueryParser getParser(Map<String, Float> fields, String paramName,\n                                                                SolrParams solrParams, float tiebreaker) {\n    int slop = solrParams.getInt(paramName, 0);\n    SolrPluginUtils.DisjunctionMaxQueryParser parser = new SolrPluginUtils.DisjunctionMaxQueryParser(this,\n            IMPOSSIBLE_FIELD_NAME);\n    parser.addAlias(IMPOSSIBLE_FIELD_NAME, tiebreaker, fields);\n    parser.setPhraseSlop(slop);\n    parser.setSplitOnWhitespace(true);\n    return parser;\n  }\n\n","sourceOld":"  protected SolrPluginUtils.DisjunctionMaxQueryParser getParser(Map<String, Float> fields, String paramName,\n                                                                SolrParams solrParams, float tiebreaker) {\n    int slop = solrParams.getInt(paramName, 0);\n    SolrPluginUtils.DisjunctionMaxQueryParser parser = new SolrPluginUtils.DisjunctionMaxQueryParser(this,\n            IMPOSSIBLE_FIELD_NAME);\n    parser.addAlias(IMPOSSIBLE_FIELD_NAME, tiebreaker, fields);\n    parser.setPhraseSlop(slop);\n    return parser;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["c26f00b574427b55127e869b935845554afde1fa","7a4260b228cfff6ad78ac88d519f0f7746529c3c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7a4260b228cfff6ad78ac88d519f0f7746529c3c"],"7a4260b228cfff6ad78ac88d519f0f7746529c3c":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["e9017cf144952056066919f1ebc7897ff9bd71b1","7a4260b228cfff6ad78ac88d519f0f7746529c3c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7a4260b228cfff6ad78ac88d519f0f7746529c3c":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}