{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","sourceNew":"  @Test\n  @LogLevel(\"org.apache.solr.cloud=DEBUG\")\n  public void addReplicaTest() throws Exception {\n    String collectionName = \"addReplicaColl\";\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n\n    ArrayList<String> nodeList\n        = new ArrayList<>(cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes());\n    Collections.shuffle(nodeList, random());\n\n    CollectionAdminResponse response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(nodeList.get(0))\n        .process(cluster.getSolrClient());\n    Replica newReplica = grabNewReplica(response, getCollectionState(collectionName));\n\n    assertEquals(\"Replica should be created on the right node\",\n        cluster.getSolrClient().getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)),\n        newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n    Path instancePath = createTempDir();\n    response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(CoreAdminParams.INSTANCE_DIR, instancePath.toString())\n        .process(cluster.getSolrClient());\n    newReplica = grabNewReplica(response, getCollectionState(collectionName));\n    assertNotNull(newReplica);\n\n    try (HttpSolrClient coreclient = getHttpSolrClient(newReplica.getStr(ZkStateReader.BASE_URL_PROP))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(newReplica.getStr(\"core\"), coreclient);\n      NamedList<Object> coreStatus = status.getCoreStatus(newReplica.getStr(\"core\"));\n      String instanceDirStr = (String) coreStatus.get(\"instanceDir\");\n      assertEquals(instanceDirStr, instancePath.toString());\n    }\n\n    //Test to make sure we can't create another replica with an existing core_name of that collection\n    String coreName = newReplica.getStr(CORE_NAME_PROP);\n    SolrException e = expectThrows(SolrException.class, () -> {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", \"addreplica\");\n      params.set(\"collection\", collectionName);\n      params.set(\"shard\", \"shard1\");\n      params.set(\"name\", coreName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      cluster.getSolrClient().request(request);\n    });\n\n    assertTrue(e.getMessage().contains(\"Another replica with the same core name already exists for this collection\"));\n\n    // Check that specifying property.name works. DO NOT remove this when the \"name\" property is deprecated\n    // for ADDREPLICA, this is \"property.name\". See SOLR-7132\n    response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(CoreAdminParams.NAME, \"propertyDotName\")\n        .process(cluster.getSolrClient());\n\n    newReplica = grabNewReplica(response, getCollectionState(collectionName));\n    assertEquals(\"'core' should be 'propertyDotName' \", \"propertyDotName\", newReplica.getStr(\"core\"));\n\n  }\n\n","sourceOld":"  @Test\n  @LogLevel(\"org.apache.solr.cloud=DEBUG\")\n  public void addReplicaTest() throws Exception {\n    String collectionName = \"addReplicaColl\";\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n\n    ArrayList<String> nodeList\n        = new ArrayList<>(cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes());\n    Collections.shuffle(nodeList, random());\n\n    CollectionAdminResponse response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(nodeList.get(0))\n        .process(cluster.getSolrClient());\n    Replica newReplica = grabNewReplica(response, getCollectionState(collectionName));\n\n    assertEquals(\"Replica should be created on the right node\",\n        cluster.getSolrClient().getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)),\n        newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n    Path instancePath = createTempDir();\n    response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(CoreAdminParams.INSTANCE_DIR, instancePath.toString())\n        .process(cluster.getSolrClient());\n    newReplica = grabNewReplica(response, getCollectionState(collectionName));\n    assertNotNull(newReplica);\n\n    try (HttpSolrClient coreclient = getHttpSolrClient(newReplica.getStr(ZkStateReader.BASE_URL_PROP))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(newReplica.getStr(\"core\"), coreclient);\n      NamedList<Object> coreStatus = status.getCoreStatus(newReplica.getStr(\"core\"));\n      String instanceDirStr = (String) coreStatus.get(\"instanceDir\");\n      assertEquals(instanceDirStr, instancePath.toString());\n    }\n\n    //Test to make sure we can't create another replica with an existing core_name of that collection\n    String coreName = newReplica.getStr(CORE_NAME_PROP);\n    SolrException e = expectThrows(SolrException.class, () -> {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", \"addreplica\");\n      params.set(\"collection\", collectionName);\n      params.set(\"shard\", \"shard1\");\n      params.set(\"name\", coreName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      cluster.getSolrClient().request(request);\n    });\n\n    assertTrue(e.getMessage().contains(\"Another replica with the same core name already exists for this collection\"));\n\n    // Check that specifying property.name works. DO NOT remove this when the \"name\" property is deprecated\n    // for ADDREPLICA, this is \"property.name\". See SOLR-7132\n    response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(CoreAdminParams.NAME, \"propertyDotName\")\n        .process(cluster.getSolrClient());\n\n    newReplica = grabNewReplica(response, getCollectionState(collectionName));\n    assertEquals(\"'core' should be 'propertyDotName' \", \"propertyDotName\", newReplica.getStr(\"core\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","sourceNew":"  @Test\n  @LogLevel(\"org.apache.solr.cloud=DEBUG\")\n  public void addReplicaTest() throws Exception {\n    String collectionName = \"addReplicaColl\";\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n\n    ArrayList<String> nodeList\n        = new ArrayList<>(cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes());\n    Collections.shuffle(nodeList, random());\n\n    CollectionAdminResponse response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(nodeList.get(0))\n        .process(cluster.getSolrClient());\n    Replica newReplica = grabNewReplica(response, getCollectionState(collectionName));\n\n    assertEquals(\"Replica should be created on the right node\",\n        cluster.getSolrClient().getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)),\n        newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n    Path instancePath = createTempDir();\n    response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(CoreAdminParams.INSTANCE_DIR, instancePath.toString())\n        .process(cluster.getSolrClient());\n    newReplica = grabNewReplica(response, getCollectionState(collectionName));\n    assertNotNull(newReplica);\n\n    try (HttpSolrClient coreclient = getHttpSolrClient(newReplica.getStr(ZkStateReader.BASE_URL_PROP))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(newReplica.getStr(\"core\"), coreclient);\n      NamedList<Object> coreStatus = status.getCoreStatus(newReplica.getStr(\"core\"));\n      String instanceDirStr = (String) coreStatus.get(\"instanceDir\");\n      assertEquals(instanceDirStr, instancePath.toString());\n    }\n\n    //Test to make sure we can't create another replica with an existing core_name of that collection\n    String coreName = newReplica.getStr(CORE_NAME_PROP);\n    SolrException e = expectThrows(SolrException.class, () -> {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", \"addreplica\");\n      params.set(\"collection\", collectionName);\n      params.set(\"shard\", \"shard1\");\n      params.set(\"name\", coreName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      cluster.getSolrClient().request(request);\n    });\n\n    assertTrue(e.getMessage().contains(\"Another replica with the same core name already exists for this collection\"));\n\n    // Check that specifying property.name works. DO NOT remove this when the \"name\" property is deprecated\n    // for ADDREPLICA, this is \"property.name\". See SOLR-7132\n    response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(CoreAdminParams.NAME, \"propertyDotName\")\n        .process(cluster.getSolrClient());\n\n    newReplica = grabNewReplica(response, getCollectionState(collectionName));\n    assertEquals(\"'core' should be 'propertyDotName' \", \"propertyDotName\", newReplica.getStr(\"core\"));\n\n  }\n\n","sourceOld":"  @Test\n  @LogLevel(\"org.apache.solr.cloud=DEBUG\")\n  public void addReplicaTest() throws Exception {\n    String collectionName = \"addReplicaColl\";\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n\n    ArrayList<String> nodeList\n        = new ArrayList<>(cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes());\n    Collections.shuffle(nodeList, random());\n\n    CollectionAdminResponse response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(nodeList.get(0))\n        .process(cluster.getSolrClient());\n    Replica newReplica = grabNewReplica(response, getCollectionState(collectionName));\n\n    assertEquals(\"Replica should be created on the right node\",\n        cluster.getSolrClient().getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)),\n        newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n    Path instancePath = createTempDir();\n    response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(CoreAdminParams.INSTANCE_DIR, instancePath.toString())\n        .process(cluster.getSolrClient());\n    newReplica = grabNewReplica(response, getCollectionState(collectionName));\n    assertNotNull(newReplica);\n\n    try (HttpSolrClient coreclient = getHttpSolrClient(newReplica.getStr(ZkStateReader.BASE_URL_PROP))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(newReplica.getStr(\"core\"), coreclient);\n      NamedList<Object> coreStatus = status.getCoreStatus(newReplica.getStr(\"core\"));\n      String instanceDirStr = (String) coreStatus.get(\"instanceDir\");\n      assertEquals(instanceDirStr, instancePath.toString());\n    }\n\n    //Test to make sure we can't create another replica with an existing core_name of that collection\n    String coreName = newReplica.getStr(CORE_NAME_PROP);\n    SolrException e = expectThrows(SolrException.class, () -> {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", \"addreplica\");\n      params.set(\"collection\", collectionName);\n      params.set(\"shard\", \"shard1\");\n      params.set(\"name\", coreName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      cluster.getSolrClient().request(request);\n    });\n\n    assertTrue(e.getMessage().contains(\"Another replica with the same core name already exists for this collection\"));\n\n    // Check that specifying property.name works. DO NOT remove this when the \"name\" property is deprecated\n    // for ADDREPLICA, this is \"property.name\". See SOLR-7132\n    response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(CoreAdminParams.NAME, \"propertyDotName\")\n        .process(cluster.getSolrClient());\n\n    newReplica = grabNewReplica(response, getCollectionState(collectionName));\n    assertEquals(\"'core' should be 'propertyDotName' \", \"propertyDotName\", newReplica.getStr(\"core\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","sourceNew":"  @Test\n  @LogLevel(\"org.apache.solr.cloud=DEBUG\")\n  public void addReplicaTest() throws Exception {\n    String collectionName = \"addReplicaColl\";\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(collectionName, 2, 4);\n\n    ArrayList<String> nodeList\n        = new ArrayList<>(cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes());\n    Collections.shuffle(nodeList, random());\n\n    CollectionAdminResponse response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(nodeList.get(0))\n        .process(cluster.getSolrClient());\n    Replica newReplica = grabNewReplica(response, getCollectionState(collectionName));\n\n    assertEquals(\"Replica should be created on the right node\",\n        cluster.getSolrClient().getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)),\n        newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n    Path instancePath = createTempDir();\n    response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(CoreAdminParams.INSTANCE_DIR, instancePath.toString())\n        .process(cluster.getSolrClient());\n    newReplica = grabNewReplica(response, getCollectionState(collectionName));\n    assertNotNull(newReplica);\n\n    try (HttpSolrClient coreclient = getHttpSolrClient(newReplica.getStr(ZkStateReader.BASE_URL_PROP))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(newReplica.getStr(\"core\"), coreclient);\n      NamedList<Object> coreStatus = status.getCoreStatus(newReplica.getStr(\"core\"));\n      String instanceDirStr = (String) coreStatus.get(\"instanceDir\");\n      assertEquals(instanceDirStr, instancePath.toString());\n    }\n\n    //Test to make sure we can't create another replica with an existing core_name of that collection\n    String coreName = newReplica.getStr(CORE_NAME_PROP);\n    SolrException e = expectThrows(SolrException.class, () -> {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", \"addreplica\");\n      params.set(\"collection\", collectionName);\n      params.set(\"shard\", \"shard1\");\n      params.set(\"name\", coreName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      cluster.getSolrClient().request(request);\n    });\n\n    assertTrue(e.getMessage().contains(\"Another replica with the same core name already exists for this collection\"));\n\n    // Check that specifying property.name works. DO NOT remove this when the \"name\" property is deprecated\n    // for ADDREPLICA, this is \"property.name\". See SOLR-7132\n    response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(CoreAdminParams.NAME, \"propertyDotName\")\n        .process(cluster.getSolrClient());\n\n    newReplica = grabNewReplica(response, getCollectionState(collectionName));\n    assertEquals(\"'core' should be 'propertyDotName' \", \"propertyDotName\", newReplica.getStr(\"core\"));\n\n  }\n\n","sourceOld":"  @Test\n  @LogLevel(\"org.apache.solr.cloud=DEBUG\")\n  public void addReplicaTest() throws Exception {\n    String collectionName = \"addReplicaColl\";\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n\n    ArrayList<String> nodeList\n        = new ArrayList<>(cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes());\n    Collections.shuffle(nodeList, random());\n\n    CollectionAdminResponse response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(nodeList.get(0))\n        .process(cluster.getSolrClient());\n    Replica newReplica = grabNewReplica(response, getCollectionState(collectionName));\n\n    assertEquals(\"Replica should be created on the right node\",\n        cluster.getSolrClient().getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)),\n        newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n    Path instancePath = createTempDir();\n    response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(CoreAdminParams.INSTANCE_DIR, instancePath.toString())\n        .process(cluster.getSolrClient());\n    newReplica = grabNewReplica(response, getCollectionState(collectionName));\n    assertNotNull(newReplica);\n\n    try (HttpSolrClient coreclient = getHttpSolrClient(newReplica.getStr(ZkStateReader.BASE_URL_PROP))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(newReplica.getStr(\"core\"), coreclient);\n      NamedList<Object> coreStatus = status.getCoreStatus(newReplica.getStr(\"core\"));\n      String instanceDirStr = (String) coreStatus.get(\"instanceDir\");\n      assertEquals(instanceDirStr, instancePath.toString());\n    }\n\n    //Test to make sure we can't create another replica with an existing core_name of that collection\n    String coreName = newReplica.getStr(CORE_NAME_PROP);\n    SolrException e = expectThrows(SolrException.class, () -> {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", \"addreplica\");\n      params.set(\"collection\", collectionName);\n      params.set(\"shard\", \"shard1\");\n      params.set(\"name\", coreName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      cluster.getSolrClient().request(request);\n    });\n\n    assertTrue(e.getMessage().contains(\"Another replica with the same core name already exists for this collection\"));\n\n    // Check that specifying property.name works. DO NOT remove this when the \"name\" property is deprecated\n    // for ADDREPLICA, this is \"property.name\". See SOLR-7132\n    response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(CoreAdminParams.NAME, \"propertyDotName\")\n        .process(cluster.getSolrClient());\n\n    newReplica = grabNewReplica(response, getCollectionState(collectionName));\n    assertEquals(\"'core' should be 'propertyDotName' \", \"propertyDotName\", newReplica.getStr(\"core\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"273ff2f5b0b365591fcbe91ea23b5e97027ca60d","date":1551111277,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","sourceNew":"  @Test\n  public void addReplicaTest() throws Exception {\n    String collectionName = \"addReplicaColl\";\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(collectionName, 2, 4);\n\n    ArrayList<String> nodeList\n        = new ArrayList<>(cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes());\n    Collections.shuffle(nodeList, random());\n\n    CollectionAdminResponse response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(nodeList.get(0))\n        .process(cluster.getSolrClient());\n    Replica newReplica = grabNewReplica(response, getCollectionState(collectionName));\n\n    assertEquals(\"Replica should be created on the right node\",\n        cluster.getSolrClient().getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)),\n        newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n    Path instancePath = createTempDir();\n    response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(CoreAdminParams.INSTANCE_DIR, instancePath.toString())\n        .process(cluster.getSolrClient());\n    newReplica = grabNewReplica(response, getCollectionState(collectionName));\n    assertNotNull(newReplica);\n\n    try (HttpSolrClient coreclient = getHttpSolrClient(newReplica.getStr(ZkStateReader.BASE_URL_PROP))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(newReplica.getStr(\"core\"), coreclient);\n      NamedList<Object> coreStatus = status.getCoreStatus(newReplica.getStr(\"core\"));\n      String instanceDirStr = (String) coreStatus.get(\"instanceDir\");\n      assertEquals(instanceDirStr, instancePath.toString());\n    }\n\n    //Test to make sure we can't create another replica with an existing core_name of that collection\n    String coreName = newReplica.getStr(CORE_NAME_PROP);\n    SolrException e = expectThrows(SolrException.class, () -> {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", \"addreplica\");\n      params.set(\"collection\", collectionName);\n      params.set(\"shard\", \"shard1\");\n      params.set(\"name\", coreName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      cluster.getSolrClient().request(request);\n    });\n\n    assertTrue(e.getMessage().contains(\"Another replica with the same core name already exists for this collection\"));\n\n    // Check that specifying property.name works. DO NOT remove this when the \"name\" property is deprecated\n    // for ADDREPLICA, this is \"property.name\". See SOLR-7132\n    response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(CoreAdminParams.NAME, \"propertyDotName\")\n        .process(cluster.getSolrClient());\n\n    newReplica = grabNewReplica(response, getCollectionState(collectionName));\n    assertEquals(\"'core' should be 'propertyDotName' \", \"propertyDotName\", newReplica.getStr(\"core\"));\n  }\n\n","sourceOld":"  @Test\n  @LogLevel(\"org.apache.solr.cloud=DEBUG\")\n  public void addReplicaTest() throws Exception {\n    String collectionName = \"addReplicaColl\";\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(collectionName, 2, 4);\n\n    ArrayList<String> nodeList\n        = new ArrayList<>(cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes());\n    Collections.shuffle(nodeList, random());\n\n    CollectionAdminResponse response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(nodeList.get(0))\n        .process(cluster.getSolrClient());\n    Replica newReplica = grabNewReplica(response, getCollectionState(collectionName));\n\n    assertEquals(\"Replica should be created on the right node\",\n        cluster.getSolrClient().getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)),\n        newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n    Path instancePath = createTempDir();\n    response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(CoreAdminParams.INSTANCE_DIR, instancePath.toString())\n        .process(cluster.getSolrClient());\n    newReplica = grabNewReplica(response, getCollectionState(collectionName));\n    assertNotNull(newReplica);\n\n    try (HttpSolrClient coreclient = getHttpSolrClient(newReplica.getStr(ZkStateReader.BASE_URL_PROP))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(newReplica.getStr(\"core\"), coreclient);\n      NamedList<Object> coreStatus = status.getCoreStatus(newReplica.getStr(\"core\"));\n      String instanceDirStr = (String) coreStatus.get(\"instanceDir\");\n      assertEquals(instanceDirStr, instancePath.toString());\n    }\n\n    //Test to make sure we can't create another replica with an existing core_name of that collection\n    String coreName = newReplica.getStr(CORE_NAME_PROP);\n    SolrException e = expectThrows(SolrException.class, () -> {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", \"addreplica\");\n      params.set(\"collection\", collectionName);\n      params.set(\"shard\", \"shard1\");\n      params.set(\"name\", coreName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      cluster.getSolrClient().request(request);\n    });\n\n    assertTrue(e.getMessage().contains(\"Another replica with the same core name already exists for this collection\"));\n\n    // Check that specifying property.name works. DO NOT remove this when the \"name\" property is deprecated\n    // for ADDREPLICA, this is \"property.name\". See SOLR-7132\n    response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(CoreAdminParams.NAME, \"propertyDotName\")\n        .process(cluster.getSolrClient());\n\n    newReplica = grabNewReplica(response, getCollectionState(collectionName));\n    assertEquals(\"'core' should be 'propertyDotName' \", \"propertyDotName\", newReplica.getStr(\"core\"));\n\n  }\n\n","bugFix":["a4efd3fffdd7acd625bb88e455c8097e17f75735","509252acd2d9d5b2bd56f1685afe5234c2308562"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91f7dccce9b0ec051304926da532b96944956895","date":1551188806,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","sourceNew":"  @Test\n  public void addReplicaTest() throws Exception {\n    String collectionName = \"addReplicaColl\";\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(collectionName, 2, 4);\n\n    ArrayList<String> nodeList\n        = new ArrayList<>(cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes());\n    Collections.shuffle(nodeList, random());\n\n    CollectionAdminResponse response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(nodeList.get(0))\n        .process(cluster.getSolrClient());\n    Replica newReplica = grabNewReplica(response, getCollectionState(collectionName));\n\n    assertEquals(\"Replica should be created on the right node\",\n        cluster.getSolrClient().getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)),\n        newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n    Path instancePath = createTempDir();\n    response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(CoreAdminParams.INSTANCE_DIR, instancePath.toString())\n        .process(cluster.getSolrClient());\n    newReplica = grabNewReplica(response, getCollectionState(collectionName));\n    assertNotNull(newReplica);\n\n    try (HttpSolrClient coreclient = getHttpSolrClient(newReplica.getStr(ZkStateReader.BASE_URL_PROP))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(newReplica.getStr(\"core\"), coreclient);\n      NamedList<Object> coreStatus = status.getCoreStatus(newReplica.getStr(\"core\"));\n      String instanceDirStr = (String) coreStatus.get(\"instanceDir\");\n      assertEquals(instanceDirStr, instancePath.toString());\n    }\n\n    //Test to make sure we can't create another replica with an existing core_name of that collection\n    String coreName = newReplica.getStr(CORE_NAME_PROP);\n    SolrException e = expectThrows(SolrException.class, () -> {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", \"addreplica\");\n      params.set(\"collection\", collectionName);\n      params.set(\"shard\", \"shard1\");\n      params.set(\"name\", coreName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      cluster.getSolrClient().request(request);\n    });\n\n    assertTrue(e.getMessage().contains(\"Another replica with the same core name already exists for this collection\"));\n\n    // Check that specifying property.name works. DO NOT remove this when the \"name\" property is deprecated\n    // for ADDREPLICA, this is \"property.name\". See SOLR-7132\n    response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(CoreAdminParams.NAME, \"propertyDotName\")\n        .process(cluster.getSolrClient());\n\n    newReplica = grabNewReplica(response, getCollectionState(collectionName));\n    assertEquals(\"'core' should be 'propertyDotName' \", \"propertyDotName\", newReplica.getStr(\"core\"));\n  }\n\n","sourceOld":"  @Test\n  @LogLevel(\"org.apache.solr.cloud=DEBUG\")\n  public void addReplicaTest() throws Exception {\n    String collectionName = \"addReplicaColl\";\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(collectionName, 2, 4);\n\n    ArrayList<String> nodeList\n        = new ArrayList<>(cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes());\n    Collections.shuffle(nodeList, random());\n\n    CollectionAdminResponse response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(nodeList.get(0))\n        .process(cluster.getSolrClient());\n    Replica newReplica = grabNewReplica(response, getCollectionState(collectionName));\n\n    assertEquals(\"Replica should be created on the right node\",\n        cluster.getSolrClient().getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)),\n        newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n    Path instancePath = createTempDir();\n    response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(CoreAdminParams.INSTANCE_DIR, instancePath.toString())\n        .process(cluster.getSolrClient());\n    newReplica = grabNewReplica(response, getCollectionState(collectionName));\n    assertNotNull(newReplica);\n\n    try (HttpSolrClient coreclient = getHttpSolrClient(newReplica.getStr(ZkStateReader.BASE_URL_PROP))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(newReplica.getStr(\"core\"), coreclient);\n      NamedList<Object> coreStatus = status.getCoreStatus(newReplica.getStr(\"core\"));\n      String instanceDirStr = (String) coreStatus.get(\"instanceDir\");\n      assertEquals(instanceDirStr, instancePath.toString());\n    }\n\n    //Test to make sure we can't create another replica with an existing core_name of that collection\n    String coreName = newReplica.getStr(CORE_NAME_PROP);\n    SolrException e = expectThrows(SolrException.class, () -> {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", \"addreplica\");\n      params.set(\"collection\", collectionName);\n      params.set(\"shard\", \"shard1\");\n      params.set(\"name\", coreName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      cluster.getSolrClient().request(request);\n    });\n\n    assertTrue(e.getMessage().contains(\"Another replica with the same core name already exists for this collection\"));\n\n    // Check that specifying property.name works. DO NOT remove this when the \"name\" property is deprecated\n    // for ADDREPLICA, this is \"property.name\". See SOLR-7132\n    response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(CoreAdminParams.NAME, \"propertyDotName\")\n        .process(cluster.getSolrClient());\n\n    newReplica = grabNewReplica(response, getCollectionState(collectionName));\n    assertEquals(\"'core' should be 'propertyDotName' \", \"propertyDotName\", newReplica.getStr(\"core\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#addReplicaTest().mjava","sourceNew":"  @Test\n  public void addReplicaTest() throws Exception {\n    String collectionName = \"addReplicaColl\";\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(collectionName, 2, 4);\n\n    ArrayList<String> nodeList\n        = new ArrayList<>(cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes());\n    Collections.shuffle(nodeList, random());\n\n    CollectionAdminResponse response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(nodeList.get(0))\n        .process(cluster.getSolrClient());\n    Replica newReplica = grabNewReplica(response, getCollectionState(collectionName));\n\n    assertEquals(\"Replica should be created on the right node\",\n        cluster.getSolrClient().getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)),\n        newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n    Path instancePath = createTempDir();\n    response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(CoreAdminParams.INSTANCE_DIR, instancePath.toString())\n        .process(cluster.getSolrClient());\n    newReplica = grabNewReplica(response, getCollectionState(collectionName));\n    assertNotNull(newReplica);\n\n    try (HttpSolrClient coreclient = getHttpSolrClient(newReplica.getStr(ZkStateReader.BASE_URL_PROP))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(newReplica.getStr(\"core\"), coreclient);\n      NamedList<Object> coreStatus = status.getCoreStatus(newReplica.getStr(\"core\"));\n      String instanceDirStr = (String) coreStatus.get(\"instanceDir\");\n      assertEquals(instanceDirStr, instancePath.toString());\n    }\n\n    //Test to make sure we can't create another replica with an existing core_name of that collection\n    String coreName = newReplica.getStr(CORE_NAME_PROP);\n    SolrException e = expectThrows(SolrException.class, () -> {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", \"addreplica\");\n      params.set(\"collection\", collectionName);\n      params.set(\"shard\", \"shard1\");\n      params.set(\"name\", coreName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      cluster.getSolrClient().request(request);\n    });\n\n    assertTrue(e.getMessage().contains(\"Another replica with the same core name already exists for this collection\"));\n\n    // Check that specifying property.name works. DO NOT remove this when the \"name\" property is deprecated\n    // for ADDREPLICA, this is \"property.name\". See SOLR-7132\n    response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(CoreAdminParams.NAME, \"propertyDotName\")\n        .process(cluster.getSolrClient());\n\n    newReplica = grabNewReplica(response, getCollectionState(collectionName));\n    assertEquals(\"'core' should be 'propertyDotName' \", \"propertyDotName\", newReplica.getStr(\"core\"));\n  }\n\n","sourceOld":"  @Test\n  public void addReplicaTest() throws Exception {\n    String collectionName = \"addReplicaColl\";\n\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(collectionName, 2, 4);\n\n    ArrayList<String> nodeList\n        = new ArrayList<>(cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes());\n    Collections.shuffle(nodeList, random());\n\n    CollectionAdminResponse response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(nodeList.get(0))\n        .process(cluster.getSolrClient());\n    Replica newReplica = grabNewReplica(response, getCollectionState(collectionName));\n\n    assertEquals(\"Replica should be created on the right node\",\n        cluster.getSolrClient().getZkStateReader().getBaseUrlForNodeName(nodeList.get(0)),\n        newReplica.getStr(ZkStateReader.BASE_URL_PROP));\n\n    Path instancePath = createTempDir();\n    response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(CoreAdminParams.INSTANCE_DIR, instancePath.toString())\n        .process(cluster.getSolrClient());\n    newReplica = grabNewReplica(response, getCollectionState(collectionName));\n    assertNotNull(newReplica);\n\n    try (HttpSolrClient coreclient = getHttpSolrClient(newReplica.getStr(ZkStateReader.BASE_URL_PROP))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(newReplica.getStr(\"core\"), coreclient);\n      NamedList<Object> coreStatus = status.getCoreStatus(newReplica.getStr(\"core\"));\n      String instanceDirStr = (String) coreStatus.get(\"instanceDir\");\n      assertEquals(instanceDirStr, instancePath.toString());\n    }\n\n    //Test to make sure we can't create another replica with an existing core_name of that collection\n    String coreName = newReplica.getStr(CORE_NAME_PROP);\n    SolrException e = expectThrows(SolrException.class, () -> {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", \"addreplica\");\n      params.set(\"collection\", collectionName);\n      params.set(\"shard\", \"shard1\");\n      params.set(\"name\", coreName);\n      QueryRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n      cluster.getSolrClient().request(request);\n    });\n\n    assertTrue(e.getMessage().contains(\"Another replica with the same core name already exists for this collection\"));\n\n    // Check that specifying property.name works. DO NOT remove this when the \"name\" property is deprecated\n    // for ADDREPLICA, this is \"property.name\". See SOLR-7132\n    response = CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .withProperty(CoreAdminParams.NAME, \"propertyDotName\")\n        .process(cluster.getSolrClient());\n\n    newReplica = grabNewReplica(response, getCollectionState(collectionName));\n    assertEquals(\"'core' should be 'propertyDotName' \", \"propertyDotName\", newReplica.getStr(\"core\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"91f7dccce9b0ec051304926da532b96944956895":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","273ff2f5b0b365591fcbe91ea23b5e97027ca60d"],"273ff2f5b0b365591fcbe91ea23b5e97027ca60d":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["91f7dccce9b0ec051304926da532b96944956895"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["91f7dccce9b0ec051304926da532b96944956895","273ff2f5b0b365591fcbe91ea23b5e97027ca60d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"91f7dccce9b0ec051304926da532b96944956895":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"273ff2f5b0b365591fcbe91ea23b5e97027ca60d":["91f7dccce9b0ec051304926da532b96944956895"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}