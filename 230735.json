{"path":"solr/core/src/test/org/apache/solr/search/TestFoldingMultitermQuery#testNonTextTypes().mjava","commits":[{"id":"f8d5405ac4f2510f9f83e07236792d1056c19640","date":1322235986,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFoldingMultitermQuery#testNonTextTypes().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNonTextTypes() {\n    String[] intTypes = {\"int_f\", \"float_f\", \"long_f\", \"double_f\", \"byte_f\", \"short_f\"};\n\n    for (String str : intTypes) {\n      assertQ(req(\"q\", str + \":\" + \"0\"),\n          \"//result[@numFound='1']\",\n          \"//*[@name='id'][.='0']\");\n\n      assertQ(req(\"q\", str + \":\" + \"[0 TO 2]\"),\n          \"//result[@numFound='3']\",\n          \"//*[@name='id'][.='0']\",\n          \"//*[@name='id'][.='1']\",\n          \"//*[@name='id'][.='2']\");\n    }\n    assertQ(req(\"q\", \"bool_f:true\"),\n        \"//result[@numFound='2']\",\n        \"//*[@name='id'][.='0']\",\n        \"//*[@name='id'][.='2']\");\n\n    assertQ(req(\"q\", \"bool_f:[false TO true]\"),\n        \"//result[@numFound='3']\",\n        \"//*[@name='id'][.='0']\",\n        \"//*[@name='id'][.='1']\",\n        \"//*[@name='id'][.='2']\");\n\n    assertQ(req(\"q\", \"date_f:2000-01-01T00\\\\:00\\\\:00Z\"),\n        \"//result[@numFound='1']\",\n        \"//*[@name='id'][.='0']\");\n\n    assertQ(req(\"q\", \"date_f:[2000-12-31T23:59:59.999Z TO 2002-01-02T00:00:01Z]\"),\n        \"//result[@numFound='2']\",\n        \"//*[@name='id'][.='1']\",\n        \"//*[@name='id'][.='2']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59a0020b413d44dd79d85d7a66ed5004265fb453","date":1371758877,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFoldingMultitermQuery#testNonTextTypes().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFoldingMultitermQuery#testNonTextTypes().mjava","sourceNew":"  @Test\n  public void testNonTextTypes() {\n    String[] intTypes = {\"int_f\", \"float_f\", \"long_f\", \"double_f\"};\n\n    for (String str : intTypes) {\n      assertQ(req(\"q\", str + \":\" + \"0\"),\n          \"//result[@numFound='1']\",\n          \"//*[@name='id'][.='0']\");\n\n      assertQ(req(\"q\", str + \":\" + \"[0 TO 2]\"),\n          \"//result[@numFound='3']\",\n          \"//*[@name='id'][.='0']\",\n          \"//*[@name='id'][.='1']\",\n          \"//*[@name='id'][.='2']\");\n    }\n    assertQ(req(\"q\", \"bool_f:true\"),\n        \"//result[@numFound='2']\",\n        \"//*[@name='id'][.='0']\",\n        \"//*[@name='id'][.='2']\");\n\n    assertQ(req(\"q\", \"bool_f:[false TO true]\"),\n        \"//result[@numFound='3']\",\n        \"//*[@name='id'][.='0']\",\n        \"//*[@name='id'][.='1']\",\n        \"//*[@name='id'][.='2']\");\n\n    assertQ(req(\"q\", \"date_f:2000-01-01T00\\\\:00\\\\:00Z\"),\n        \"//result[@numFound='1']\",\n        \"//*[@name='id'][.='0']\");\n\n    assertQ(req(\"q\", \"date_f:[2000-12-31T23:59:59.999Z TO 2002-01-02T00:00:01Z]\"),\n        \"//result[@numFound='2']\",\n        \"//*[@name='id'][.='1']\",\n        \"//*[@name='id'][.='2']\");\n  }\n\n","sourceOld":"  @Test\n  public void testNonTextTypes() {\n    String[] intTypes = {\"int_f\", \"float_f\", \"long_f\", \"double_f\", \"byte_f\", \"short_f\"};\n\n    for (String str : intTypes) {\n      assertQ(req(\"q\", str + \":\" + \"0\"),\n          \"//result[@numFound='1']\",\n          \"//*[@name='id'][.='0']\");\n\n      assertQ(req(\"q\", str + \":\" + \"[0 TO 2]\"),\n          \"//result[@numFound='3']\",\n          \"//*[@name='id'][.='0']\",\n          \"//*[@name='id'][.='1']\",\n          \"//*[@name='id'][.='2']\");\n    }\n    assertQ(req(\"q\", \"bool_f:true\"),\n        \"//result[@numFound='2']\",\n        \"//*[@name='id'][.='0']\",\n        \"//*[@name='id'][.='2']\");\n\n    assertQ(req(\"q\", \"bool_f:[false TO true]\"),\n        \"//result[@numFound='3']\",\n        \"//*[@name='id'][.='0']\",\n        \"//*[@name='id'][.='1']\",\n        \"//*[@name='id'][.='2']\");\n\n    assertQ(req(\"q\", \"date_f:2000-01-01T00\\\\:00\\\\:00Z\"),\n        \"//result[@numFound='1']\",\n        \"//*[@name='id'][.='0']\");\n\n    assertQ(req(\"q\", \"date_f:[2000-12-31T23:59:59.999Z TO 2002-01-02T00:00:01Z]\"),\n        \"//result[@numFound='2']\",\n        \"//*[@name='id'][.='1']\",\n        \"//*[@name='id'][.='2']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFoldingMultitermQuery#testNonTextTypes().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFoldingMultitermQuery#testNonTextTypes().mjava","sourceNew":"  @Test\n  public void testNonTextTypes() {\n    String[] intTypes = {\"int_f\", \"float_f\", \"long_f\", \"double_f\"};\n\n    for (String str : intTypes) {\n      assertQ(req(\"q\", str + \":\" + \"0\"),\n          \"//result[@numFound='1']\",\n          \"//*[@name='id'][.='0']\");\n\n      assertQ(req(\"q\", str + \":\" + \"[0 TO 2]\"),\n          \"//result[@numFound='3']\",\n          \"//*[@name='id'][.='0']\",\n          \"//*[@name='id'][.='1']\",\n          \"//*[@name='id'][.='2']\");\n    }\n    assertQ(req(\"q\", \"bool_f:true\"),\n        \"//result[@numFound='2']\",\n        \"//*[@name='id'][.='0']\",\n        \"//*[@name='id'][.='2']\");\n\n    assertQ(req(\"q\", \"bool_f:[false TO true]\"),\n        \"//result[@numFound='3']\",\n        \"//*[@name='id'][.='0']\",\n        \"//*[@name='id'][.='1']\",\n        \"//*[@name='id'][.='2']\");\n\n    assertQ(req(\"q\", \"date_f:2000-01-01T00\\\\:00\\\\:00Z\"),\n        \"//result[@numFound='1']\",\n        \"//*[@name='id'][.='0']\");\n\n    assertQ(req(\"q\", \"date_f:[2000-12-31T23:59:59.999Z TO 2002-01-02T00:00:01Z]\"),\n        \"//result[@numFound='2']\",\n        \"//*[@name='id'][.='1']\",\n        \"//*[@name='id'][.='2']\");\n  }\n\n","sourceOld":"  @Test\n  public void testNonTextTypes() {\n    String[] intTypes = {\"int_f\", \"float_f\", \"long_f\", \"double_f\", \"byte_f\", \"short_f\"};\n\n    for (String str : intTypes) {\n      assertQ(req(\"q\", str + \":\" + \"0\"),\n          \"//result[@numFound='1']\",\n          \"//*[@name='id'][.='0']\");\n\n      assertQ(req(\"q\", str + \":\" + \"[0 TO 2]\"),\n          \"//result[@numFound='3']\",\n          \"//*[@name='id'][.='0']\",\n          \"//*[@name='id'][.='1']\",\n          \"//*[@name='id'][.='2']\");\n    }\n    assertQ(req(\"q\", \"bool_f:true\"),\n        \"//result[@numFound='2']\",\n        \"//*[@name='id'][.='0']\",\n        \"//*[@name='id'][.='2']\");\n\n    assertQ(req(\"q\", \"bool_f:[false TO true]\"),\n        \"//result[@numFound='3']\",\n        \"//*[@name='id'][.='0']\",\n        \"//*[@name='id'][.='1']\",\n        \"//*[@name='id'][.='2']\");\n\n    assertQ(req(\"q\", \"date_f:2000-01-01T00\\\\:00\\\\:00Z\"),\n        \"//result[@numFound='1']\",\n        \"//*[@name='id'][.='0']\");\n\n    assertQ(req(\"q\", \"date_f:[2000-12-31T23:59:59.999Z TO 2002-01-02T00:00:01Z]\"),\n        \"//result[@numFound='2']\",\n        \"//*[@name='id'][.='1']\",\n        \"//*[@name='id'][.='2']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":["f8d5405ac4f2510f9f83e07236792d1056c19640","59a0020b413d44dd79d85d7a66ed5004265fb453"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"59a0020b413d44dd79d85d7a66ed5004265fb453":["f8d5405ac4f2510f9f83e07236792d1056c19640"],"f8d5405ac4f2510f9f83e07236792d1056c19640":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59a0020b413d44dd79d85d7a66ed5004265fb453"]},"commit2Childs":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f8d5405ac4f2510f9f83e07236792d1056c19640"],"f8d5405ac4f2510f9f83e07236792d1056c19640":["37a0f60745e53927c4c876cfe5b5a58170f0646c","59a0020b413d44dd79d85d7a66ed5004265fb453"],"59a0020b413d44dd79d85d7a66ed5004265fb453":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}