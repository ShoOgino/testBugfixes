{"path":"solr/core/src/java/org/apache/solr/schema/FieldTypePluginLoader#constructMultiTermAnalyzer(Analyzer,Boolean).mjava","commits":[{"id":"f8d5405ac4f2510f9f83e07236792d1056c19640","date":1322235986,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FieldTypePluginLoader#constructMultiTermAnalyzer(Analyzer,Boolean).mjava","pathOld":"/dev/null","sourceNew":"  private Analyzer constructMultiTermAnalyzer(Analyzer queryAnalyzer, Boolean legacyMultiTerm) {\n    if (queryAnalyzer == null) return null;\n\n    if (legacyMultiTerm || (!(queryAnalyzer instanceof TokenizerChain))) {\n      return new KeywordAnalyzer();\n    }\n\n    TokenizerChain tc = (TokenizerChain) queryAnalyzer;\n\n    // we know it'll never be longer than this unless the code below is explicitly changed\n    TokenFilterFactory[] filters = new TokenFilterFactory[2];\n    int idx = 0;\n    for (TokenFilterFactory factory : tc.getTokenFilterFactories()) {\n      if (factory instanceof LowerCaseFilterFactory) {\n        filters[idx] = new LowerCaseFilterFactory();\n        filters[idx++].init(factory.getArgs());\n      }\n      if (factory instanceof ASCIIFoldingFilterFactory) {\n        filters[idx] = new ASCIIFoldingFilterFactory();\n        filters[idx++].init(factory.getArgs());\n      }\n    }\n    WhitespaceTokenizerFactory white = new WhitespaceTokenizerFactory();\n    white.init(tc.getTokenizerFactory().getArgs());\n\n    return new TokenizerChain(tc.getCharFilterFactories(),\n        white,\n        Arrays.copyOfRange(filters, 0, idx));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f15795b2193a8dd132f374975d4243687bee9351","date":1322413478,"type":4,"author":"Erick Erickson","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/schema/FieldTypePluginLoader#constructMultiTermAnalyzer(Analyzer,Boolean).mjava","sourceNew":null,"sourceOld":"  private Analyzer constructMultiTermAnalyzer(Analyzer queryAnalyzer, Boolean legacyMultiTerm) {\n    if (queryAnalyzer == null) return null;\n\n    if (legacyMultiTerm || (!(queryAnalyzer instanceof TokenizerChain))) {\n      return new KeywordAnalyzer();\n    }\n\n    TokenizerChain tc = (TokenizerChain) queryAnalyzer;\n\n    // we know it'll never be longer than this unless the code below is explicitly changed\n    TokenFilterFactory[] filters = new TokenFilterFactory[2];\n    int idx = 0;\n    for (TokenFilterFactory factory : tc.getTokenFilterFactories()) {\n      if (factory instanceof LowerCaseFilterFactory) {\n        filters[idx] = new LowerCaseFilterFactory();\n        filters[idx++].init(factory.getArgs());\n      }\n      if (factory instanceof ASCIIFoldingFilterFactory) {\n        filters[idx] = new ASCIIFoldingFilterFactory();\n        filters[idx++].init(factory.getArgs());\n      }\n    }\n    WhitespaceTokenizerFactory white = new WhitespaceTokenizerFactory();\n    white.init(tc.getTokenizerFactory().getArgs());\n\n    return new TokenizerChain(tc.getCharFilterFactories(),\n        white,\n        Arrays.copyOfRange(filters, 0, idx));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8d5405ac4f2510f9f83e07236792d1056c19640":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f15795b2193a8dd132f374975d4243687bee9351":["f8d5405ac4f2510f9f83e07236792d1056c19640"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f15795b2193a8dd132f374975d4243687bee9351"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f8d5405ac4f2510f9f83e07236792d1056c19640"],"f8d5405ac4f2510f9f83e07236792d1056c19640":["f15795b2193a8dd132f374975d4243687bee9351"],"f15795b2193a8dd132f374975d4243687bee9351":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}