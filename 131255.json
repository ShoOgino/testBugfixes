{"path":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testCollator().mjava","commits":[{"id":"19902de501347481fdd1e781868986601e2a7c7b","date":1263326777,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testCollator().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test that we can create CollationAnalyzers.\n   */\n  public void testCollator() throws Exception {\n    // ROOT locale\n    Benchmark benchmark = execBenchmark(getCollatorConfig(\"ROOT\", \"impl:jdk\"));\n    CollationKeyAnalyzer expected = new CollationKeyAnalyzer(Collator\n        .getInstance(new Locale(\"\")));\n    assertEqualCollation(expected, benchmark.getRunData().getAnalyzer(), \"foobar\");\n    \n    // specify just a language\n    benchmark = execBenchmark(getCollatorConfig(\"de\", \"impl:jdk\"));\n    expected = new CollationKeyAnalyzer(Collator.getInstance(new Locale(\"de\")));\n    assertEqualCollation(expected, benchmark.getRunData().getAnalyzer(), \"foobar\");\n    \n    // specify language + country\n    benchmark = execBenchmark(getCollatorConfig(\"en,US\", \"impl:jdk\"));\n    expected = new CollationKeyAnalyzer(Collator.getInstance(new Locale(\"en\",\n        \"US\")));\n    assertEqualCollation(expected, benchmark.getRunData().getAnalyzer(), \"foobar\");\n    \n    // specify language + country + variant\n    benchmark = execBenchmark(getCollatorConfig(\"no,NO,NY\", \"impl:jdk\"));\n    expected = new CollationKeyAnalyzer(Collator.getInstance(new Locale(\"no\",\n        \"NO\", \"NY\")));\n    assertEqualCollation(expected, benchmark.getRunData().getAnalyzer(), \"foobar\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testCollator().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testCollator().mjava","sourceNew":"  /**\n   * Test that we can create CollationAnalyzers.\n   */\n  public void testCollator() throws Exception {\n    // ROOT locale\n    Benchmark benchmark = execBenchmark(getCollatorConfig(\"ROOT\", \"impl:jdk\"));\n    CollationKeyAnalyzer expected = new CollationKeyAnalyzer(Collator\n        .getInstance(new Locale(\"\")));\n    assertEqualCollation(expected, benchmark.getRunData().getAnalyzer(), \"foobar\");\n    \n    // specify just a language\n    benchmark = execBenchmark(getCollatorConfig(\"de\", \"impl:jdk\"));\n    expected = new CollationKeyAnalyzer(Collator.getInstance(new Locale(\"de\")));\n    assertEqualCollation(expected, benchmark.getRunData().getAnalyzer(), \"foobar\");\n    \n    // specify language + country\n    benchmark = execBenchmark(getCollatorConfig(\"en,US\", \"impl:jdk\"));\n    expected = new CollationKeyAnalyzer(Collator.getInstance(new Locale(\"en\",\n        \"US\")));\n    assertEqualCollation(expected, benchmark.getRunData().getAnalyzer(), \"foobar\");\n    \n    // specify language + country + variant\n    benchmark = execBenchmark(getCollatorConfig(\"no,NO,NY\", \"impl:jdk\"));\n    expected = new CollationKeyAnalyzer(Collator.getInstance(new Locale(\"no\",\n        \"NO\", \"NY\")));\n    assertEqualCollation(expected, benchmark.getRunData().getAnalyzer(), \"foobar\");\n  }\n\n","sourceOld":"  /**\n   * Test that we can create CollationAnalyzers.\n   */\n  public void testCollator() throws Exception {\n    // ROOT locale\n    Benchmark benchmark = execBenchmark(getCollatorConfig(\"ROOT\", \"impl:jdk\"));\n    CollationKeyAnalyzer expected = new CollationKeyAnalyzer(Collator\n        .getInstance(new Locale(\"\")));\n    assertEqualCollation(expected, benchmark.getRunData().getAnalyzer(), \"foobar\");\n    \n    // specify just a language\n    benchmark = execBenchmark(getCollatorConfig(\"de\", \"impl:jdk\"));\n    expected = new CollationKeyAnalyzer(Collator.getInstance(new Locale(\"de\")));\n    assertEqualCollation(expected, benchmark.getRunData().getAnalyzer(), \"foobar\");\n    \n    // specify language + country\n    benchmark = execBenchmark(getCollatorConfig(\"en,US\", \"impl:jdk\"));\n    expected = new CollationKeyAnalyzer(Collator.getInstance(new Locale(\"en\",\n        \"US\")));\n    assertEqualCollation(expected, benchmark.getRunData().getAnalyzer(), \"foobar\");\n    \n    // specify language + country + variant\n    benchmark = execBenchmark(getCollatorConfig(\"no,NO,NY\", \"impl:jdk\"));\n    expected = new CollationKeyAnalyzer(Collator.getInstance(new Locale(\"no\",\n        \"NO\", \"NY\")));\n    assertEqualCollation(expected, benchmark.getRunData().getAnalyzer(), \"foobar\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"19902de501347481fdd1e781868986601e2a7c7b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["19902de501347481fdd1e781868986601e2a7c7b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["19902de501347481fdd1e781868986601e2a7c7b"],"19902de501347481fdd1e781868986601e2a7c7b":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}