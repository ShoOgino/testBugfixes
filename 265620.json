{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimNodeAddedTrigger#testActionLifecycle().mjava","commits":[{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimNodeAddedTrigger#testActionLifecycle().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestNodeAddedTrigger#testActionLifecycle().mjava","sourceNew":"  public void testActionLifecycle() throws Exception {\n    Map<String, Object> props = createTriggerProps(0);\n    List<Map<String, String>> actions = (List<Map<String, String>>) props.get(\"actions\");\n    Map<String, String> action = new HashMap<>(2);\n    action.put(\"name\", \"testActionInit\");\n    action.put(\"class\", TestSimNodeAddedTrigger.AssertInitTriggerAction.class.getName());\n    actions.add(action);\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\")) {\n      trigger.configure(cluster.getLoader(), cluster, props);\n      assertEquals(true, actionConstructorCalled.get());\n      assertEquals(false, actionInitCalled.get());\n      assertEquals(false, actionCloseCalled.get());\n      trigger.init();\n      assertEquals(true, actionInitCalled.get());\n      assertEquals(false, actionCloseCalled.get());\n    }\n    assertEquals(true, actionCloseCalled.get());\n  }\n\n","sourceOld":"  public void testActionLifecycle() throws Exception {\n    Map<String, Object> props = createTriggerProps(0);\n    List<Map<String, String>> actions = (List<Map<String, String>>) props.get(\"actions\");\n    Map<String, String> action = new HashMap<>(2);\n    action.put(\"name\", \"testActionInit\");\n    action.put(\"class\", TestNodeAddedTrigger.AssertInitTriggerAction.class.getName());\n    actions.add(action);\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\")) {\n      trigger.configure(cluster.getLoader(), cluster, props);\n      assertEquals(true, actionConstructorCalled.get());\n      assertEquals(false, actionInitCalled.get());\n      assertEquals(false, actionCloseCalled.get());\n      trigger.init();\n      assertEquals(true, actionInitCalled.get());\n      assertEquals(false, actionCloseCalled.get());\n    }\n    assertEquals(true, actionCloseCalled.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimNodeAddedTrigger#testActionLifecycle().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimNodeAddedTrigger#testActionLifecycle().mjava","sourceNew":"  public void testActionLifecycle() throws Exception {\n    Map<String, Object> props = createTriggerProps(0);\n    @SuppressWarnings({\"unchecked\"})\n    List<Map<String, String>> actions = (List<Map<String, String>>) props.get(\"actions\");\n    Map<String, String> action = new HashMap<>(2);\n    action.put(\"name\", \"testActionInit\");\n    action.put(\"class\", TestSimNodeAddedTrigger.AssertInitTriggerAction.class.getName());\n    actions.add(action);\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\")) {\n      trigger.configure(cluster.getLoader(), cluster, props);\n      assertEquals(true, actionConstructorCalled.get());\n      assertEquals(false, actionInitCalled.get());\n      assertEquals(false, actionCloseCalled.get());\n      trigger.init();\n      assertEquals(true, actionInitCalled.get());\n      assertEquals(false, actionCloseCalled.get());\n    }\n    assertEquals(true, actionCloseCalled.get());\n  }\n\n","sourceOld":"  public void testActionLifecycle() throws Exception {\n    Map<String, Object> props = createTriggerProps(0);\n    List<Map<String, String>> actions = (List<Map<String, String>>) props.get(\"actions\");\n    Map<String, String> action = new HashMap<>(2);\n    action.put(\"name\", \"testActionInit\");\n    action.put(\"class\", TestSimNodeAddedTrigger.AssertInitTriggerAction.class.getName());\n    actions.add(action);\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\")) {\n      trigger.configure(cluster.getLoader(), cluster, props);\n      assertEquals(true, actionConstructorCalled.get());\n      assertEquals(false, actionInitCalled.get());\n      assertEquals(false, actionCloseCalled.get());\n      trigger.init();\n      assertEquals(true, actionInitCalled.get());\n      assertEquals(false, actionCloseCalled.get());\n    }\n    assertEquals(true, actionCloseCalled.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimNodeAddedTrigger#testActionLifecycle().mjava","sourceNew":null,"sourceOld":"  public void testActionLifecycle() throws Exception {\n    Map<String, Object> props = createTriggerProps(0);\n    @SuppressWarnings({\"unchecked\"})\n    List<Map<String, String>> actions = (List<Map<String, String>>) props.get(\"actions\");\n    Map<String, String> action = new HashMap<>(2);\n    action.put(\"name\", \"testActionInit\");\n    action.put(\"class\", TestSimNodeAddedTrigger.AssertInitTriggerAction.class.getName());\n    actions.add(action);\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\")) {\n      trigger.configure(cluster.getLoader(), cluster, props);\n      assertEquals(true, actionConstructorCalled.get());\n      assertEquals(false, actionInitCalled.get());\n      assertEquals(false, actionCloseCalled.get());\n      trigger.init();\n      assertEquals(true, actionInitCalled.get());\n      assertEquals(false, actionCloseCalled.get());\n    }\n    assertEquals(true, actionCloseCalled.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"3f504512a03d978990cbff30db0522b354e846db":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}