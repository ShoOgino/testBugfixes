{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestV2Request#doTest(SolrClient).mjava","commits":[{"id":"767d389403b701039ee599ec2ac8a838f45d8cb7","date":1494468363,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestV2Request#doTest(SolrClient).mjava","pathOld":"/dev/null","sourceNew":"  private void doTest(SolrClient client) throws IOException, SolrServerException {\n    assertSuccess(client, new V2Request.Builder(\"/collections\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{\" +\n            \"  'create' : {\" +\n            \"    'name' : 'test',\" +\n            \"    'numShards' : 2,\" +\n            \"    'replicationFactor' : 2,\" +\n            \"    'config' : 'config'\" +\n            \"  }\" +\n            \"}\").build());\n    assertSuccess(client, new V2Request.Builder(\"/c\").build());\n    assertSuccess(client, new V2Request.Builder(\"/c/_introspect\").build());\n    assertSuccess(client, new V2Request.Builder(\"/c/test\").withMethod(SolrRequest.METHOD.DELETE).build());\n    NamedList<Object> res = client.request(new V2Request.Builder(\"/c\").build());\n    List collections = (List) res.get(\"collections\");\n    assertEquals(0, collections.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b31ebc7a867ddea79d438a8fca876a94e644d11a","date":1494496172,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestV2Request#doTest(SolrClient).mjava","pathOld":"/dev/null","sourceNew":"  private void doTest(SolrClient client) throws IOException, SolrServerException {\n    assertSuccess(client, new V2Request.Builder(\"/collections\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{\" +\n            \"  'create' : {\" +\n            \"    'name' : 'test',\" +\n            \"    'numShards' : 2,\" +\n            \"    'replicationFactor' : 2,\" +\n            \"    'config' : 'config'\" +\n            \"  }\" +\n            \"}\").build());\n    assertSuccess(client, new V2Request.Builder(\"/c\").build());\n    assertSuccess(client, new V2Request.Builder(\"/c/_introspect\").build());\n    assertSuccess(client, new V2Request.Builder(\"/c/test\").withMethod(SolrRequest.METHOD.DELETE).build());\n    NamedList<Object> res = client.request(new V2Request.Builder(\"/c\").build());\n    List collections = (List) res.get(\"collections\");\n    assertEquals(0, collections.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestV2Request#doTest(SolrClient).mjava","pathOld":"/dev/null","sourceNew":"  private void doTest(SolrClient client) throws IOException, SolrServerException {\n    assertSuccess(client, new V2Request.Builder(\"/collections\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{\" +\n            \"  'create' : {\" +\n            \"    'name' : 'test',\" +\n            \"    'numShards' : 2,\" +\n            \"    'replicationFactor' : 2,\" +\n            \"    'config' : 'config'\" +\n            \"  }\" +\n            \"}\").build());\n    assertSuccess(client, new V2Request.Builder(\"/c\").build());\n    assertSuccess(client, new V2Request.Builder(\"/c/_introspect\").build());\n    assertSuccess(client, new V2Request.Builder(\"/c/test\").withMethod(SolrRequest.METHOD.DELETE).build());\n    NamedList<Object> res = client.request(new V2Request.Builder(\"/c\").build());\n    List collections = (List) res.get(\"collections\");\n    assertEquals(0, collections.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e89ada54965765dacf21b98e3a950f5308f050e","date":1501069221,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestV2Request#doTest(SolrClient).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestV2Request#doTest(SolrClient).mjava","sourceNew":"  private void doTest(SolrClient client) throws IOException, SolrServerException {\n    assertSuccess(client, new V2Request.Builder(\"/collections\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{\" +\n            \"  'create' : {\" +\n            \"    'name' : 'test',\" +\n            \"    'numShards' : 2,\" +\n            \"    'replicationFactor' : 2,\" +\n            \"    'config' : 'config'\" +\n            \"  }\" +\n            \"}\").build());\n    assertSuccess(client, new V2Request.Builder(\"/c\").build());\n    assertSuccess(client, new V2Request.Builder(\"/c/_introspect\").build());\n\n\n    assertSuccess(client, new V2Request.Builder(\"/c/test/config\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}}\")\n        .build());\n\n    assertSuccess(client, new V2Request.Builder(\"/c/test\").withMethod(SolrRequest.METHOD.DELETE).build());\n    NamedList<Object> res = client.request(new V2Request.Builder(\"/c\").build());\n    List collections = (List) res.get(\"collections\");\n    assertEquals(0, collections.size());\n\n  }\n\n","sourceOld":"  private void doTest(SolrClient client) throws IOException, SolrServerException {\n    assertSuccess(client, new V2Request.Builder(\"/collections\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{\" +\n            \"  'create' : {\" +\n            \"    'name' : 'test',\" +\n            \"    'numShards' : 2,\" +\n            \"    'replicationFactor' : 2,\" +\n            \"    'config' : 'config'\" +\n            \"  }\" +\n            \"}\").build());\n    assertSuccess(client, new V2Request.Builder(\"/c\").build());\n    assertSuccess(client, new V2Request.Builder(\"/c/_introspect\").build());\n    assertSuccess(client, new V2Request.Builder(\"/c/test\").withMethod(SolrRequest.METHOD.DELETE).build());\n    NamedList<Object> res = client.request(new V2Request.Builder(\"/c\").build());\n    List collections = (List) res.get(\"collections\");\n    assertEquals(0, collections.size());\n  }\n\n","bugFix":null,"bugIntro":["5842a4edb3c2199b36886989b39d0da46b6f2e7b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestV2Request#doTest(SolrClient).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestV2Request#doTest(SolrClient).mjava","sourceNew":"  private void doTest(SolrClient client) throws IOException, SolrServerException {\n    assertSuccess(client, new V2Request.Builder(\"/collections\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{\" +\n            \"  'create' : {\" +\n            \"    'name' : 'test',\" +\n            \"    'numShards' : 2,\" +\n            \"    'replicationFactor' : 2,\" +\n            \"    'config' : 'config'\" +\n            \"  }\" +\n            \"}\").build());\n    assertSuccess(client, new V2Request.Builder(\"/c\").build());\n    assertSuccess(client, new V2Request.Builder(\"/c/_introspect\").build());\n\n\n    assertSuccess(client, new V2Request.Builder(\"/c/test/config\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}}\")\n        .build());\n\n    assertSuccess(client, new V2Request.Builder(\"/c/test\").withMethod(SolrRequest.METHOD.DELETE).build());\n    NamedList<Object> res = client.request(new V2Request.Builder(\"/c\").build());\n    List collections = (List) res.get(\"collections\");\n    assertEquals(0, collections.size());\n\n  }\n\n","sourceOld":"  private void doTest(SolrClient client) throws IOException, SolrServerException {\n    assertSuccess(client, new V2Request.Builder(\"/collections\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{\" +\n            \"  'create' : {\" +\n            \"    'name' : 'test',\" +\n            \"    'numShards' : 2,\" +\n            \"    'replicationFactor' : 2,\" +\n            \"    'config' : 'config'\" +\n            \"  }\" +\n            \"}\").build());\n    assertSuccess(client, new V2Request.Builder(\"/c\").build());\n    assertSuccess(client, new V2Request.Builder(\"/c/_introspect\").build());\n    assertSuccess(client, new V2Request.Builder(\"/c/test\").withMethod(SolrRequest.METHOD.DELETE).build());\n    NamedList<Object> res = client.request(new V2Request.Builder(\"/c\").build());\n    List collections = (List) res.get(\"collections\");\n    assertEquals(0, collections.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestV2Request#doTest(SolrClient).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestV2Request#doTest(SolrClient).mjava","sourceNew":"  private void doTest(SolrClient client) throws IOException, SolrServerException {\n    assertSuccess(client, new V2Request.Builder(\"/collections\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{\" +\n            \"  'create' : {\" +\n            \"    'name' : 'test',\" +\n            \"    'numShards' : 2,\" +\n            \"    'replicationFactor' : 2,\" +\n            \"    'config' : 'config'\" +\n            \"  }\" +\n            \"}\").build());\n    assertSuccess(client, new V2Request.Builder(\"/c\").build());\n    assertSuccess(client, new V2Request.Builder(\"/c/_introspect\").build());\n\n\n    assertSuccess(client, new V2Request.Builder(\"/c/test/config\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}}\")\n        .build());\n\n    assertSuccess(client, new V2Request.Builder(\"/c/test\").withMethod(SolrRequest.METHOD.DELETE).build());\n    NamedList<Object> res = client.request(new V2Request.Builder(\"/c\").build());\n    List collections = (List) res.get(\"collections\");\n    assertEquals(0, collections.size());\n\n  }\n\n","sourceOld":"  private void doTest(SolrClient client) throws IOException, SolrServerException {\n    assertSuccess(client, new V2Request.Builder(\"/collections\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{\" +\n            \"  'create' : {\" +\n            \"    'name' : 'test',\" +\n            \"    'numShards' : 2,\" +\n            \"    'replicationFactor' : 2,\" +\n            \"    'config' : 'config'\" +\n            \"  }\" +\n            \"}\").build());\n    assertSuccess(client, new V2Request.Builder(\"/c\").build());\n    assertSuccess(client, new V2Request.Builder(\"/c/_introspect\").build());\n    assertSuccess(client, new V2Request.Builder(\"/c/test\").withMethod(SolrRequest.METHOD.DELETE).build());\n    NamedList<Object> res = client.request(new V2Request.Builder(\"/c\").build());\n    List collections = (List) res.get(\"collections\");\n    assertEquals(0, collections.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5842a4edb3c2199b36886989b39d0da46b6f2e7b","date":1529637673,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestV2Request#doTest(SolrClient).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestV2Request#doTest(SolrClient).mjava","sourceNew":"  private void doTest(SolrClient client) throws IOException, SolrServerException {\n    assertSuccess(client, new V2Request.Builder(\"/collections\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{\" +\n            \"  'create' : {\" +\n            \"    'name' : 'test',\" +\n            \"    'numShards' : 2,\" +\n            \"    'replicationFactor' : 2,\" +\n            \"    'config' : 'config'\" +\n            \"  }\" +\n            \"}\").build());\n    assertSuccess(client, new V2Request.Builder(\"/c\").build());\n    assertSuccess(client, new V2Request.Builder(\"/c/_introspect\").build());\n\n\n    String requestHandlerName = \"/x\" + random().nextInt();\n    assertSuccess(client, new V2Request.Builder(\"/c/test/config\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{'create-requesthandler' : { 'name' : '\" + requestHandlerName + \n            \"', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}}\")\n        .build());\n\n    assertSuccess(client, new V2Request.Builder(\"/c/test\").withMethod(SolrRequest.METHOD.DELETE).build());\n    NamedList<Object> res = client.request(new V2Request.Builder(\"/c\").build());\n    List collections = (List) res.get(\"collections\");\n    assertEquals(0, collections.size());\n\n  }\n\n","sourceOld":"  private void doTest(SolrClient client) throws IOException, SolrServerException {\n    assertSuccess(client, new V2Request.Builder(\"/collections\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{\" +\n            \"  'create' : {\" +\n            \"    'name' : 'test',\" +\n            \"    'numShards' : 2,\" +\n            \"    'replicationFactor' : 2,\" +\n            \"    'config' : 'config'\" +\n            \"  }\" +\n            \"}\").build());\n    assertSuccess(client, new V2Request.Builder(\"/c\").build());\n    assertSuccess(client, new V2Request.Builder(\"/c/_introspect\").build());\n\n\n    assertSuccess(client, new V2Request.Builder(\"/c/test/config\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}}\")\n        .build());\n\n    assertSuccess(client, new V2Request.Builder(\"/c/test\").withMethod(SolrRequest.METHOD.DELETE).build());\n    NamedList<Object> res = client.request(new V2Request.Builder(\"/c\").build());\n    List collections = (List) res.get(\"collections\");\n    assertEquals(0, collections.size());\n\n  }\n\n","bugFix":["6e89ada54965765dacf21b98e3a950f5308f050e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestV2Request#doTest(SolrClient).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestV2Request#doTest(SolrClient).mjava","sourceNew":"  private void doTest(SolrClient client) throws IOException, SolrServerException {\n    assertSuccess(client, new V2Request.Builder(\"/collections\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{\" +\n            \"  'create' : {\" +\n            \"    'name' : 'test',\" +\n            \"    'numShards' : 2,\" +\n            \"    'replicationFactor' : 2,\" +\n            \"    'config' : 'config'\" +\n            \"  }\" +\n            \"}\").build());\n    assertSuccess(client, new V2Request.Builder(\"/c\").build());\n    assertSuccess(client, new V2Request.Builder(\"/c/_introspect\").build());\n\n\n    String requestHandlerName = \"/x\" + random().nextInt();\n    assertSuccess(client, new V2Request.Builder(\"/c/test/config\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{'create-requesthandler' : { 'name' : '\" + requestHandlerName + \n            \"', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}}\")\n        .build());\n\n    assertSuccess(client, new V2Request.Builder(\"/c/test\").withMethod(SolrRequest.METHOD.DELETE).build());\n    NamedList<Object> res = client.request(new V2Request.Builder(\"/c\").build());\n    List collections = (List) res.get(\"collections\");\n    assertEquals(0, collections.size());\n\n  }\n\n","sourceOld":"  private void doTest(SolrClient client) throws IOException, SolrServerException {\n    assertSuccess(client, new V2Request.Builder(\"/collections\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{\" +\n            \"  'create' : {\" +\n            \"    'name' : 'test',\" +\n            \"    'numShards' : 2,\" +\n            \"    'replicationFactor' : 2,\" +\n            \"    'config' : 'config'\" +\n            \"  }\" +\n            \"}\").build());\n    assertSuccess(client, new V2Request.Builder(\"/c\").build());\n    assertSuccess(client, new V2Request.Builder(\"/c/_introspect\").build());\n\n\n    assertSuccess(client, new V2Request.Builder(\"/c/test/config\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}}\")\n        .build());\n\n    assertSuccess(client, new V2Request.Builder(\"/c/test\").withMethod(SolrRequest.METHOD.DELETE).build());\n    NamedList<Object> res = client.request(new V2Request.Builder(\"/c\").build());\n    List collections = (List) res.get(\"collections\");\n    assertEquals(0, collections.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestV2Request#doTest(SolrClient).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestV2Request#doTest(SolrClient).mjava","sourceNew":"  private void doTest(SolrClient client) throws IOException, SolrServerException {\n    assertSuccess(client, new V2Request.Builder(\"/collections\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{\" +\n            \"  'create' : {\" +\n            \"    'name' : 'test',\" +\n            \"    'numShards' : 2,\" +\n            \"    'replicationFactor' : 2,\" +\n            \"    'config' : 'config'\" +\n            \"  }\" +\n            \"}\").build());\n    assertSuccess(client, new V2Request.Builder(\"/c\").build());\n    assertSuccess(client, new V2Request.Builder(\"/c/_introspect\").build());\n\n\n    String requestHandlerName = \"/x\" + random().nextInt();\n    assertSuccess(client, new V2Request.Builder(\"/c/test/config\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{'create-requesthandler' : { 'name' : '\" + requestHandlerName + \n            \"', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}}\")\n        .build());\n\n    assertSuccess(client, new V2Request.Builder(\"/c/test\").withMethod(SolrRequest.METHOD.DELETE).build());\n    NamedList<Object> res = client.request(new V2Request.Builder(\"/c\").build());\n    List collections = (List) res.get(\"collections\");\n    assertEquals(0, collections.size());\n\n  }\n\n","sourceOld":"  private void doTest(SolrClient client) throws IOException, SolrServerException {\n    assertSuccess(client, new V2Request.Builder(\"/collections\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{\" +\n            \"  'create' : {\" +\n            \"    'name' : 'test',\" +\n            \"    'numShards' : 2,\" +\n            \"    'replicationFactor' : 2,\" +\n            \"    'config' : 'config'\" +\n            \"  }\" +\n            \"}\").build());\n    assertSuccess(client, new V2Request.Builder(\"/c\").build());\n    assertSuccess(client, new V2Request.Builder(\"/c/_introspect\").build());\n\n\n    assertSuccess(client, new V2Request.Builder(\"/c/test/config\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{'create-requesthandler' : { 'name' : '/x', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}}\")\n        .build());\n\n    assertSuccess(client, new V2Request.Builder(\"/c/test\").withMethod(SolrRequest.METHOD.DELETE).build());\n    NamedList<Object> res = client.request(new V2Request.Builder(\"/c\").build());\n    List collections = (List) res.get(\"collections\");\n    assertEquals(0, collections.size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3112b22952c4b027c28fc2fa15f72e64c3cba32","date":1540599114,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestV2Request#doTest(SolrClient).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestV2Request#doTest(SolrClient).mjava","sourceNew":"  private void doTest(SolrClient client) throws IOException, SolrServerException {\n    assertSuccess(client, new V2Request.Builder(\"/collections\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{\" +\n            \"  'create' : {\" +\n            \"    'name' : 'test',\" +\n            \"    'numShards' : 2,\" +\n            \"    'replicationFactor' : 2,\" +\n            \"    'config' : 'config'\" +\n            \"  }\" +\n            \"}\").build());\n    assertSuccess(client, new V2Request.Builder(\"/c\").build());\n    assertSuccess(client, new V2Request.Builder(\"/c/_introspect\").build());\n\n\n    String requestHandlerName = \"/x\" + random().nextInt();\n    assertSuccess(client, new V2Request.Builder(\"/c/test/config\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{'create-requesthandler' : { 'name' : '\" + requestHandlerName + \n            \"', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}}\")\n        .build());\n\n    assertSuccess(client, new V2Request.Builder(\"/c/test\").withMethod(SolrRequest.METHOD.DELETE).build());\n    NamedList<Object> res = client.request(new V2Request.Builder(\"/c\").build());\n    List collections = (List) res.get(\"collections\");\n    assertFalse( collections.contains(\"test\"));\n\n  }\n\n","sourceOld":"  private void doTest(SolrClient client) throws IOException, SolrServerException {\n    assertSuccess(client, new V2Request.Builder(\"/collections\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{\" +\n            \"  'create' : {\" +\n            \"    'name' : 'test',\" +\n            \"    'numShards' : 2,\" +\n            \"    'replicationFactor' : 2,\" +\n            \"    'config' : 'config'\" +\n            \"  }\" +\n            \"}\").build());\n    assertSuccess(client, new V2Request.Builder(\"/c\").build());\n    assertSuccess(client, new V2Request.Builder(\"/c/_introspect\").build());\n\n\n    String requestHandlerName = \"/x\" + random().nextInt();\n    assertSuccess(client, new V2Request.Builder(\"/c/test/config\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{'create-requesthandler' : { 'name' : '\" + requestHandlerName + \n            \"', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}}\")\n        .build());\n\n    assertSuccess(client, new V2Request.Builder(\"/c/test\").withMethod(SolrRequest.METHOD.DELETE).build());\n    NamedList<Object> res = client.request(new V2Request.Builder(\"/c\").build());\n    List collections = (List) res.get(\"collections\");\n    assertEquals(0, collections.size());\n\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestV2Request#doTest(SolrClient).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestV2Request#doTest(SolrClient).mjava","sourceNew":"  private void doTest(SolrClient client) throws IOException, SolrServerException {\n    assertSuccess(client, new V2Request.Builder(\"/collections\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{\" +\n            \"  'create' : {\" +\n            \"    'name' : 'test',\" +\n            \"    'numShards' : 2,\" +\n            \"    'replicationFactor' : 2,\" +\n            \"    'config' : 'config'\" +\n            \"  }\" +\n            \"}\").build());\n    assertSuccess(client, new V2Request.Builder(\"/c\").build());\n    assertSuccess(client, new V2Request.Builder(\"/c/_introspect\").build());\n\n\n    String requestHandlerName = \"/x\" + random().nextInt();\n    assertSuccess(client, new V2Request.Builder(\"/c/test/config\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{'create-requesthandler' : { 'name' : '\" + requestHandlerName + \n            \"', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}}\")\n        .build());\n\n    assertSuccess(client, new V2Request.Builder(\"/c/test\").withMethod(SolrRequest.METHOD.DELETE).build());\n    NamedList<Object> res = client.request(new V2Request.Builder(\"/c\").build());\n    List collections = (List) res.get(\"collections\");\n    \n    // TODO: this is not guaranteed now - beast test if you try to fix\n    // assertFalse( collections.contains(\"test\"));\n\n  }\n\n","sourceOld":"  private void doTest(SolrClient client) throws IOException, SolrServerException {\n    assertSuccess(client, new V2Request.Builder(\"/collections\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{\" +\n            \"  'create' : {\" +\n            \"    'name' : 'test',\" +\n            \"    'numShards' : 2,\" +\n            \"    'replicationFactor' : 2,\" +\n            \"    'config' : 'config'\" +\n            \"  }\" +\n            \"}\").build());\n    assertSuccess(client, new V2Request.Builder(\"/c\").build());\n    assertSuccess(client, new V2Request.Builder(\"/c/_introspect\").build());\n\n\n    String requestHandlerName = \"/x\" + random().nextInt();\n    assertSuccess(client, new V2Request.Builder(\"/c/test/config\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{'create-requesthandler' : { 'name' : '\" + requestHandlerName + \n            \"', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}}\")\n        .build());\n\n    assertSuccess(client, new V2Request.Builder(\"/c/test\").withMethod(SolrRequest.METHOD.DELETE).build());\n    NamedList<Object> res = client.request(new V2Request.Builder(\"/c\").build());\n    List collections = (List) res.get(\"collections\");\n    assertFalse( collections.contains(\"test\"));\n\n  }\n\n","bugFix":["b3112b22952c4b027c28fc2fa15f72e64c3cba32"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61f55b4999c3f858f4f4acc9c6dc57af2c1acf99","date":1571689506,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestV2Request#doTest(SolrClient).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestV2Request#doTest(SolrClient).mjava","sourceNew":"  private void doTest(SolrClient client) throws IOException, SolrServerException {\n    assertSuccess(client, new V2Request.Builder(\"/collections\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{\" +\n            \"  'create' : {\" +\n            \"    'name' : 'test',\" +\n            \"    'numShards' : 2,\" +\n            \"    'replicationFactor' : 2,\" +\n            \"    'config' : 'config'\" +\n            \"  }\" +\n            \"}\" + \"/* ignore comment*/\").build());\n    assertSuccess(client, new V2Request.Builder(\"/c\").build());\n    assertSuccess(client, new V2Request.Builder(\"/c/_introspect\").build());\n\n\n    String requestHandlerName = \"/x\" + random().nextInt();\n    assertSuccess(client, new V2Request.Builder(\"/c/test/config\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{'create-requesthandler' : { 'name' : '\" + requestHandlerName + \n            \"', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}}\")\n        .build());\n\n    assertSuccess(client, new V2Request.Builder(\"/c/test\").withMethod(SolrRequest.METHOD.DELETE).build());\n    NamedList<Object> res = client.request(new V2Request.Builder(\"/c\").build());\n    List collections = (List) res.get(\"collections\");\n    \n    // TODO: this is not guaranteed now - beast test if you try to fix\n    // assertFalse( collections.contains(\"test\"));\n    try{\n      NamedList<Object> res1 = client.request(new V2Request.Builder(\"/collections\")\n              .withMethod(SolrRequest.METHOD.POST)\n              .withPayload(\"{\" +\n                  \"  'create' : {\" +\n                  \"    'name' : 'jsontailtest',\" +\n                  \"    'numShards' : 2,\" +\n                  \"    'replicationFactor' : 2,\" +\n                  \"    'config' : 'config'\" +\n                  \"  }\" +\n                  \"}\" + \", 'something':'bogus'\").build());\n      assertFalse(\"The request failed\", res1.get(\"responseHeader\").toString().contains(\"status=0\"));\n    }catch(BaseHttpSolrClient.RemoteExecutionException itsOk) {\n    }\n  }\n\n","sourceOld":"  private void doTest(SolrClient client) throws IOException, SolrServerException {\n    assertSuccess(client, new V2Request.Builder(\"/collections\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{\" +\n            \"  'create' : {\" +\n            \"    'name' : 'test',\" +\n            \"    'numShards' : 2,\" +\n            \"    'replicationFactor' : 2,\" +\n            \"    'config' : 'config'\" +\n            \"  }\" +\n            \"}\").build());\n    assertSuccess(client, new V2Request.Builder(\"/c\").build());\n    assertSuccess(client, new V2Request.Builder(\"/c/_introspect\").build());\n\n\n    String requestHandlerName = \"/x\" + random().nextInt();\n    assertSuccess(client, new V2Request.Builder(\"/c/test/config\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{'create-requesthandler' : { 'name' : '\" + requestHandlerName + \n            \"', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}}\")\n        .build());\n\n    assertSuccess(client, new V2Request.Builder(\"/c/test\").withMethod(SolrRequest.METHOD.DELETE).build());\n    NamedList<Object> res = client.request(new V2Request.Builder(\"/c\").build());\n    List collections = (List) res.get(\"collections\");\n    \n    // TODO: this is not guaranteed now - beast test if you try to fix\n    // assertFalse( collections.contains(\"test\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db96734b79e26d948b59f68bd4564c4836a71acf","date":1585375566,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestV2Request#doTest(SolrClient).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestV2Request#doTest(SolrClient).mjava","sourceNew":"  private void doTest(SolrClient client) throws IOException, SolrServerException {\n    assertSuccess(client, new V2Request.Builder(\"/collections\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{\" +\n            \"  'create' : {\" +\n            \"    'name' : 'test',\" +\n            \"    'numShards' : 2,\" +\n            \"    'replicationFactor' : 2,\" +\n            \"    'config' : 'config'\" +\n            \"  }\" +\n            \"}\" + \"/* ignore comment*/\").build());\n    assertSuccess(client, new V2Request.Builder(\"/c\").build());\n    assertSuccess(client, new V2Request.Builder(\"/c/_introspect\").build());\n\n\n    String requestHandlerName = \"/x\" + random().nextInt();\n    assertSuccess(client, new V2Request.Builder(\"/c/test/config\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{'create-requesthandler' : { 'name' : '\" + requestHandlerName + \n            \"', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}}\")\n        .build());\n\n    assertSuccess(client, new V2Request.Builder(\"/c/test\").withMethod(SolrRequest.METHOD.DELETE).build());\n    NamedList<Object> res = client.request(new V2Request.Builder(\"/c\").build());\n    List collections = (List) res.get(\"collections\");\n    \n    // TODO: this is not guaranteed now - beast test if you try to fix\n    // assertFalse( collections.contains(\"test\"));\n    try{\n      NamedList<Object> res1 = client.request(new V2Request.Builder(\"/collections\")\n              .withMethod(SolrRequest.METHOD.POST)\n              .withPayload(\"{\" +\n                  \"  'create' : {\" +\n                  \"    'name' : 'jsontailtest',\" +\n                  \"    'numShards' : 2,\" +\n                  \"    'replicationFactor' : 2,\" +\n                  \"    'config' : 'config'\" +\n                  \"  }\" +\n                  \"}\" + \", 'something':'bogus'\").build());\n      assertFalse(\"The request failed\", res1.get(\"responseHeader\").toString().contains(\"status=0\"));\n    } catch(BaseHttpSolrClient.RemoteExecutionException itsOk) {\n    }\n  }\n\n","sourceOld":"  private void doTest(SolrClient client) throws IOException, SolrServerException {\n    assertSuccess(client, new V2Request.Builder(\"/collections\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{\" +\n            \"  'create' : {\" +\n            \"    'name' : 'test',\" +\n            \"    'numShards' : 2,\" +\n            \"    'replicationFactor' : 2,\" +\n            \"    'config' : 'config'\" +\n            \"  }\" +\n            \"}\" + \"/* ignore comment*/\").build());\n    assertSuccess(client, new V2Request.Builder(\"/c\").build());\n    assertSuccess(client, new V2Request.Builder(\"/c/_introspect\").build());\n\n\n    String requestHandlerName = \"/x\" + random().nextInt();\n    assertSuccess(client, new V2Request.Builder(\"/c/test/config\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{'create-requesthandler' : { 'name' : '\" + requestHandlerName + \n            \"', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}}\")\n        .build());\n\n    assertSuccess(client, new V2Request.Builder(\"/c/test\").withMethod(SolrRequest.METHOD.DELETE).build());\n    NamedList<Object> res = client.request(new V2Request.Builder(\"/c\").build());\n    List collections = (List) res.get(\"collections\");\n    \n    // TODO: this is not guaranteed now - beast test if you try to fix\n    // assertFalse( collections.contains(\"test\"));\n    try{\n      NamedList<Object> res1 = client.request(new V2Request.Builder(\"/collections\")\n              .withMethod(SolrRequest.METHOD.POST)\n              .withPayload(\"{\" +\n                  \"  'create' : {\" +\n                  \"    'name' : 'jsontailtest',\" +\n                  \"    'numShards' : 2,\" +\n                  \"    'replicationFactor' : 2,\" +\n                  \"    'config' : 'config'\" +\n                  \"  }\" +\n                  \"}\" + \", 'something':'bogus'\").build());\n      assertFalse(\"The request failed\", res1.get(\"responseHeader\").toString().contains(\"status=0\"));\n    }catch(BaseHttpSolrClient.RemoteExecutionException itsOk) {\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestV2Request#doTest(SolrClient).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestV2Request#doTest(SolrClient).mjava","sourceNew":"  private void doTest(SolrClient client) throws IOException, SolrServerException {\n    assertSuccess(client, new V2Request.Builder(\"/collections\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{\" +\n            \"  'create' : {\" +\n            \"    'name' : 'test',\" +\n            \"    'numShards' : 2,\" +\n            \"    'replicationFactor' : 2,\" +\n            \"    'config' : 'config'\" +\n            \"  }\" +\n            \"}\" + \"/* ignore comment*/\").build());\n    assertSuccess(client, new V2Request.Builder(\"/c\").build());\n    assertSuccess(client, new V2Request.Builder(\"/c/_introspect\").build());\n\n\n    String requestHandlerName = \"/x\" + random().nextInt();\n    assertSuccess(client, new V2Request.Builder(\"/c/test/config\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{'create-requesthandler' : { 'name' : '\" + requestHandlerName + \n            \"', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}}\")\n        .build());\n\n    assertSuccess(client, new V2Request.Builder(\"/c/test\").withMethod(SolrRequest.METHOD.DELETE).build());\n    NamedList<Object> res = client.request(new V2Request.Builder(\"/c\").build());\n\n    \n    // TODO: this is not guaranteed now - beast test if you try to fix\n    //List collections = (List) res.get(\"collections\");\n    // assertFalse( collections.contains(\"test\"));\n    try{\n      NamedList<Object> res1 = client.request(new V2Request.Builder(\"/collections\")\n              .withMethod(SolrRequest.METHOD.POST)\n              .withPayload(\"{\" +\n                  \"  'create' : {\" +\n                  \"    'name' : 'jsontailtest',\" +\n                  \"    'numShards' : 2,\" +\n                  \"    'replicationFactor' : 2,\" +\n                  \"    'config' : 'config'\" +\n                  \"  }\" +\n                  \"}\" + \", 'something':'bogus'\").build());\n      assertFalse(\"The request failed\", res1.get(\"responseHeader\").toString().contains(\"status=0\"));\n    } catch(BaseHttpSolrClient.RemoteExecutionException itsOk) {\n    }\n  }\n\n","sourceOld":"  private void doTest(SolrClient client) throws IOException, SolrServerException {\n    assertSuccess(client, new V2Request.Builder(\"/collections\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{\" +\n            \"  'create' : {\" +\n            \"    'name' : 'test',\" +\n            \"    'numShards' : 2,\" +\n            \"    'replicationFactor' : 2,\" +\n            \"    'config' : 'config'\" +\n            \"  }\" +\n            \"}\" + \"/* ignore comment*/\").build());\n    assertSuccess(client, new V2Request.Builder(\"/c\").build());\n    assertSuccess(client, new V2Request.Builder(\"/c/_introspect\").build());\n\n\n    String requestHandlerName = \"/x\" + random().nextInt();\n    assertSuccess(client, new V2Request.Builder(\"/c/test/config\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{'create-requesthandler' : { 'name' : '\" + requestHandlerName + \n            \"', 'class': 'org.apache.solr.handler.DumpRequestHandler' , 'startup' : 'lazy'}}\")\n        .build());\n\n    assertSuccess(client, new V2Request.Builder(\"/c/test\").withMethod(SolrRequest.METHOD.DELETE).build());\n    NamedList<Object> res = client.request(new V2Request.Builder(\"/c\").build());\n    List collections = (List) res.get(\"collections\");\n    \n    // TODO: this is not guaranteed now - beast test if you try to fix\n    // assertFalse( collections.contains(\"test\"));\n    try{\n      NamedList<Object> res1 = client.request(new V2Request.Builder(\"/collections\")\n              .withMethod(SolrRequest.METHOD.POST)\n              .withPayload(\"{\" +\n                  \"  'create' : {\" +\n                  \"    'name' : 'jsontailtest',\" +\n                  \"    'numShards' : 2,\" +\n                  \"    'replicationFactor' : 2,\" +\n                  \"    'config' : 'config'\" +\n                  \"  }\" +\n                  \"}\" + \", 'something':'bogus'\").build());\n      assertFalse(\"The request failed\", res1.get(\"responseHeader\").toString().contains(\"status=0\"));\n    } catch(BaseHttpSolrClient.RemoteExecutionException itsOk) {\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["db96734b79e26d948b59f68bd4564c4836a71acf"],"b31ebc7a867ddea79d438a8fca876a94e644d11a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","767d389403b701039ee599ec2ac8a838f45d8cb7"],"b3112b22952c4b027c28fc2fa15f72e64c3cba32":["5842a4edb3c2199b36886989b39d0da46b6f2e7b"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["b3112b22952c4b027c28fc2fa15f72e64c3cba32"],"61f55b4999c3f858f4f4acc9c6dc57af2c1acf99":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"6e89ada54965765dacf21b98e3a950f5308f050e":["767d389403b701039ee599ec2ac8a838f45d8cb7"],"767d389403b701039ee599ec2ac8a838f45d8cb7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","767d389403b701039ee599ec2ac8a838f45d8cb7"],"a52341299179de5479672f7cf518bf4b173f34b3":["767d389403b701039ee599ec2ac8a838f45d8cb7","6e89ada54965765dacf21b98e3a950f5308f050e"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a52341299179de5479672f7cf518bf4b173f34b3","5842a4edb3c2199b36886989b39d0da46b6f2e7b"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["e9017cf144952056066919f1ebc7897ff9bd71b1","a52341299179de5479672f7cf518bf4b173f34b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5842a4edb3c2199b36886989b39d0da46b6f2e7b":["a52341299179de5479672f7cf518bf4b173f34b3"],"db96734b79e26d948b59f68bd4564c4836a71acf":["61f55b4999c3f858f4f4acc9c6dc57af2c1acf99"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a52341299179de5479672f7cf518bf4b173f34b3","5842a4edb3c2199b36886989b39d0da46b6f2e7b"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b31ebc7a867ddea79d438a8fca876a94e644d11a":[],"b3112b22952c4b027c28fc2fa15f72e64c3cba32":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["61f55b4999c3f858f4f4acc9c6dc57af2c1acf99"],"61f55b4999c3f858f4f4acc9c6dc57af2c1acf99":["db96734b79e26d948b59f68bd4564c4836a71acf"],"6e89ada54965765dacf21b98e3a950f5308f050e":["a52341299179de5479672f7cf518bf4b173f34b3"],"767d389403b701039ee599ec2ac8a838f45d8cb7":["b31ebc7a867ddea79d438a8fca876a94e644d11a","6e89ada54965765dacf21b98e3a950f5308f050e","e9017cf144952056066919f1ebc7897ff9bd71b1","a52341299179de5479672f7cf518bf4b173f34b3"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"a52341299179de5479672f7cf518bf4b173f34b3":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","5842a4edb3c2199b36886989b39d0da46b6f2e7b","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b31ebc7a867ddea79d438a8fca876a94e644d11a","767d389403b701039ee599ec2ac8a838f45d8cb7","e9017cf144952056066919f1ebc7897ff9bd71b1"],"5842a4edb3c2199b36886989b39d0da46b6f2e7b":["b3112b22952c4b027c28fc2fa15f72e64c3cba32","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"db96734b79e26d948b59f68bd4564c4836a71acf":["9ba1b632c041956c93c41aa1143d16a567014891"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["b31ebc7a867ddea79d438a8fca876a94e644d11a","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}