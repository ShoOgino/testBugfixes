{"path":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets#testRangeFacetWithRanges().mjava","commits":[{"id":"a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45","date":1569046571,"type":0,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets#testRangeFacetWithRanges().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRangeFacetWithRanges() throws Exception {\n    Client client = Client.localClient();\n    client.deleteByQuery(\"*:*\", null);\n    indexSimple(client);\n\n    final SolrParams p = params(\"q\", \"*:*\", \"rows\", \"0\");\n    // with lower and upper include\n    client.testJQ(params(p, \"json.facet\"\n        , \"{price:{type : range,field : num_i, ranges:[{range:\\\"  [-5,7] \\\"}]}}\"),\n        \"facets=={count:6, price:{buckets:[{val:\\\"[-5,7]\\\",count:5}]}}\");\n\n    // with lower include and upper exclude\n    client.testJQ(params(p, \"json.facet\"\n        , \"{price:{type : range,field : num_i,ranges:[{range:\\\"[-5,7)\\\"}]}}\"),\n        \"facets=={count:6, price:{buckets:[{val:\\\"[-5,7)\\\",count:4}]}}\");\n\n    // with lower exclude and upper include\n    client.testJQ(params(p, \"json.facet\"\n        , \"{price:{type : range,field : num_i,ranges:[{range:\\\"(-5,7]\\\"}]}}\"),\n        \"facets=={count:6, price:{buckets:[{val:\\\"(-5,7]\\\",count:3}]}}\");\n\n    // with lower and upper exclude\n    client.testJQ(params(p, \"json.facet\"\n        , \"{price:{type : range,field : num_i,ranges:[{range:\\\"(-5,7)\\\"}]}}\"),\n        \"facets=={count:6, price:{buckets:[{val:\\\"(-5,7)\\\",count:2}]}}\");\n\n    // with other and include, they are not supported\n    // but wouldn't throw any error as they are not consumed\n    client.testJQ(params(p, \"json.facet\"\n        , \"{price:{type : range,field : num_i,ranges:[{range:\\\"(-5,7)\\\"}],include:\\\"lower\\\",other:[\\\"after\\\"]}}\"),\n        \"facets=={count:6, price:{buckets:[{val:\\\"(-5,7)\\\",count:2}]}}\");\n\n    // with mincount>0\n    client.testJQ(\n        params(p, \"json.facet\", \"{price:{type : range,field : num_i,mincount:3,\" +\n            \"ranges:[{range:\\\"(-5,7)\\\"},{range:\\\"(-5,7]\\\"}]}}\"\n        ),\n        \"facets=={count:6, price:{buckets:[{val:\\\"(-5,7]\\\",count:3}]}}\");\n\n    // with multiple ranges\n    client.testJQ(\n        params(p, \"json.facet\", \"{price:{type : range,field : num_i,\" +\n            \"ranges:[{range:\\\"(-5,7)\\\"},{range:\\\"(-5,7]\\\"}]}}\"\n        ),\n        \"facets=={count:6, price:{buckets:[{val:\\\"(-5,7)\\\",count:2},{val:\\\"(-5,7]\\\",count:3}]}}\");\n\n    // with * as one of the values\n    client.testJQ(params(p, \"json.facet\"\n        , \"{price:{type : range,field : num_i,ranges:[{range:\\\"(*,10]\\\"}]}}\"),\n        \"facets=={count:6, price:{buckets:[{val:\\\"(*,10]\\\",count:5}]}}\");\n    client.testJQ(params(p, \"json.facet\"\n        , \"{price:{type : range,field : num_i,ranges:[{range:\\\"[-5,*)\\\"}]}}\"),\n        \"facets=={count:6, price:{buckets:[{val:\\\"[-5,*)\\\",count:5}]}}\");\n    client.testJQ(params(p, \"json.facet\"\n        , \"{price:{type : range,field : num_i,ranges:[{range:\\\"[*,*]\\\"}]}}\"),\n        \"facets=={count:6, price:{buckets:[{val:\\\"[*,*]\\\",count:5}]}}\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a067727e528e9edadcd1704b7a3a10912e5d95c1","date":1584973258,"type":5,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonRangeFacets#doRangeFacetWithRanges(Client).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets#testRangeFacetWithRanges().mjava","sourceNew":"  private void doRangeFacetWithRanges(Client client) throws Exception {\n    client.deleteByQuery(\"*:*\", null);\n    indexSimple(client);\n\n    final SolrParams p = params(\"q\", \"*:*\", \"rows\", \"0\");\n    // with lower and upper include\n    client.testJQ(params(p, \"json.facet\"\n        , \"{price:{type : range,field : num_i, ranges:[{range:\\\"  [-5,7] \\\"}]}}\"),\n        \"facets=={count:6, price:{buckets:[{val:\\\"[-5,7]\\\",count:5}]}}\");\n\n    // with lower include and upper exclude\n    client.testJQ(params(p, \"json.facet\"\n        , \"{price:{type : range,field : num_i,ranges:[{range:\\\"[-5,7)\\\"}]}}\"),\n        \"facets=={count:6, price:{buckets:[{val:\\\"[-5,7)\\\",count:4}]}}\");\n\n    // with lower exclude and upper include\n    client.testJQ(params(p, \"json.facet\"\n        , \"{price:{type : range,field : num_i,ranges:[{range:\\\"(-5,7]\\\"}]}}\"),\n        \"facets=={count:6, price:{buckets:[{val:\\\"(-5,7]\\\",count:3}]}}\");\n\n    // with lower and upper exclude\n    client.testJQ(params(p, \"json.facet\"\n        , \"{price:{type : range,field : num_i,ranges:[{range:\\\"(-5,7)\\\"}]}}\"),\n        \"facets=={count:6, price:{buckets:[{val:\\\"(-5,7)\\\",count:2}]}}\");\n\n    // with other and include, they are not supported\n    // but wouldn't throw any error as they are not consumed\n    client.testJQ(params(p, \"json.facet\"\n        , \"{price:{type : range,field : num_i,ranges:[{range:\\\"(-5,7)\\\"}],include:\\\"lower\\\",other:[\\\"after\\\"]}}\"),\n        \"facets=={count:6, price:{buckets:[{val:\\\"(-5,7)\\\",count:2}]}}\");\n\n    // with mincount>0\n    client.testJQ(\n        params(p, \"json.facet\", \"{price:{type : range,field : num_i,mincount:3,\" +\n            \"ranges:[{range:\\\"(-5,7)\\\"},{range:\\\"(-5,7]\\\"}]}}\"\n        ),\n        \"facets=={count:6, price:{buckets:[{val:\\\"(-5,7]\\\",count:3}]}}\");\n\n    // with multiple ranges\n    client.testJQ(\n        params(p, \"json.facet\", \"{price:{type : range,field : num_i,\" +\n            \"ranges:[{range:\\\"(-5,7)\\\"},{range:\\\"(-5,7]\\\"}]}}\"\n        ),\n        \"facets=={count:6, price:{buckets:[{val:\\\"(-5,7)\\\",count:2},{val:\\\"(-5,7]\\\",count:3}]}}\");\n\n    // with * as one of the values\n    client.testJQ(params(p, \"json.facet\"\n        , \"{price:{type : range,field : num_i,ranges:[{range:\\\"(*,10]\\\"}]}}\"),\n        \"facets=={count:6, price:{buckets:[{val:\\\"(*,10]\\\",count:5}]}}\");\n    client.testJQ(params(p, \"json.facet\"\n        , \"{price:{type : range,field : num_i,ranges:[{range:\\\"[-5,*)\\\"}]}}\"),\n        \"facets=={count:6, price:{buckets:[{val:\\\"[-5,*)\\\",count:5}]}}\");\n    client.testJQ(params(p, \"json.facet\"\n        , \"{price:{type : range,field : num_i,ranges:[{range:\\\"[*,*]\\\"}]}}\"),\n        \"facets=={count:6, price:{buckets:[{val:\\\"[*,*]\\\",count:5}]}}\");\n  }\n\n","sourceOld":"  @Test\n  public void testRangeFacetWithRanges() throws Exception {\n    Client client = Client.localClient();\n    client.deleteByQuery(\"*:*\", null);\n    indexSimple(client);\n\n    final SolrParams p = params(\"q\", \"*:*\", \"rows\", \"0\");\n    // with lower and upper include\n    client.testJQ(params(p, \"json.facet\"\n        , \"{price:{type : range,field : num_i, ranges:[{range:\\\"  [-5,7] \\\"}]}}\"),\n        \"facets=={count:6, price:{buckets:[{val:\\\"[-5,7]\\\",count:5}]}}\");\n\n    // with lower include and upper exclude\n    client.testJQ(params(p, \"json.facet\"\n        , \"{price:{type : range,field : num_i,ranges:[{range:\\\"[-5,7)\\\"}]}}\"),\n        \"facets=={count:6, price:{buckets:[{val:\\\"[-5,7)\\\",count:4}]}}\");\n\n    // with lower exclude and upper include\n    client.testJQ(params(p, \"json.facet\"\n        , \"{price:{type : range,field : num_i,ranges:[{range:\\\"(-5,7]\\\"}]}}\"),\n        \"facets=={count:6, price:{buckets:[{val:\\\"(-5,7]\\\",count:3}]}}\");\n\n    // with lower and upper exclude\n    client.testJQ(params(p, \"json.facet\"\n        , \"{price:{type : range,field : num_i,ranges:[{range:\\\"(-5,7)\\\"}]}}\"),\n        \"facets=={count:6, price:{buckets:[{val:\\\"(-5,7)\\\",count:2}]}}\");\n\n    // with other and include, they are not supported\n    // but wouldn't throw any error as they are not consumed\n    client.testJQ(params(p, \"json.facet\"\n        , \"{price:{type : range,field : num_i,ranges:[{range:\\\"(-5,7)\\\"}],include:\\\"lower\\\",other:[\\\"after\\\"]}}\"),\n        \"facets=={count:6, price:{buckets:[{val:\\\"(-5,7)\\\",count:2}]}}\");\n\n    // with mincount>0\n    client.testJQ(\n        params(p, \"json.facet\", \"{price:{type : range,field : num_i,mincount:3,\" +\n            \"ranges:[{range:\\\"(-5,7)\\\"},{range:\\\"(-5,7]\\\"}]}}\"\n        ),\n        \"facets=={count:6, price:{buckets:[{val:\\\"(-5,7]\\\",count:3}]}}\");\n\n    // with multiple ranges\n    client.testJQ(\n        params(p, \"json.facet\", \"{price:{type : range,field : num_i,\" +\n            \"ranges:[{range:\\\"(-5,7)\\\"},{range:\\\"(-5,7]\\\"}]}}\"\n        ),\n        \"facets=={count:6, price:{buckets:[{val:\\\"(-5,7)\\\",count:2},{val:\\\"(-5,7]\\\",count:3}]}}\");\n\n    // with * as one of the values\n    client.testJQ(params(p, \"json.facet\"\n        , \"{price:{type : range,field : num_i,ranges:[{range:\\\"(*,10]\\\"}]}}\"),\n        \"facets=={count:6, price:{buckets:[{val:\\\"(*,10]\\\",count:5}]}}\");\n    client.testJQ(params(p, \"json.facet\"\n        , \"{price:{type : range,field : num_i,ranges:[{range:\\\"[-5,*)\\\"}]}}\"),\n        \"facets=={count:6, price:{buckets:[{val:\\\"[-5,*)\\\",count:5}]}}\");\n    client.testJQ(params(p, \"json.facet\"\n        , \"{price:{type : range,field : num_i,ranges:[{range:\\\"[*,*]\\\"}]}}\"),\n        \"facets=={count:6, price:{buckets:[{val:\\\"[*,*]\\\",count:5}]}}\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a067727e528e9edadcd1704b7a3a10912e5d95c1":["a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45"],"a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a067727e528e9edadcd1704b7a3a10912e5d95c1"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45"],"a067727e528e9edadcd1704b7a3a10912e5d95c1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45":["a067727e528e9edadcd1704b7a3a10912e5d95c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}