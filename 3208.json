{"path":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setTermIndexInterval(int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setTermIndexInterval(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriterConfig#setTermIndexInterval(int).mjava","sourceNew":"  /**\n   * Expert: set the interval between indexed terms. Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms. Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   * <p>\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term. In\n   * particular, it is the maximum number of other terms that must be scanned\n   * before a term is located and its frequency and position information may be\n   * processed. In a large index with user-entered query terms, query processing\n   * time is likely to be dominated not by term lookup but rather by the\n   * processing of frequency and positional data. In a small index or when many\n   * uncommon query terms are generated (e.g., by wildcard queries) term lookup\n   * may become a dominant cost.\n   * <p>\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   * \n   * @see #DEFAULT_TERM_INDEX_INTERVAL\n   */\n  public IndexWriterConfig setTermIndexInterval(int interval) {\n    this.termIndexInterval = interval;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Expert: set the interval between indexed terms. Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms. Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   * <p>\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term. In\n   * particular, it is the maximum number of other terms that must be scanned\n   * before a term is located and its frequency and position information may be\n   * processed. In a large index with user-entered query terms, query processing\n   * time is likely to be dominated not by term lookup but rather by the\n   * processing of frequency and positional data. In a small index or when many\n   * uncommon query terms are generated (e.g., by wildcard queries) term lookup\n   * may become a dominant cost.\n   * <p>\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   * \n   * @see #DEFAULT_TERM_INDEX_INTERVAL\n   */\n  public IndexWriterConfig setTermIndexInterval(int interval) {\n    this.termIndexInterval = interval;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56da903869515527852ee21ea7ef7bfe414cd40d","date":1294224724,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setTermIndexInterval(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setTermIndexInterval(int).mjava","sourceNew":"  /**\n   * Expert: set the interval between indexed terms. Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms. Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   * <p>\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term. In\n   * particular, it is the maximum number of other terms that must be scanned\n   * before a term is located and its frequency and position information may be\n   * processed. In a large index with user-entered query terms, query processing\n   * time is likely to be dominated not by term lookup but rather by the\n   * processing of frequency and positional data. In a small index or when many\n   * uncommon query terms are generated (e.g., by wildcard queries) term lookup\n   * may become a dominant cost.\n   * <p>\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   * \n   * @see #DEFAULT_TERM_INDEX_INTERVAL\n   */\n  public IndexWriterConfig setTermIndexInterval(int interval) { // TODO: this should be private to the codec, not settable here\n    this.termIndexInterval = interval;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Expert: set the interval between indexed terms. Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms. Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   * <p>\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term. In\n   * particular, it is the maximum number of other terms that must be scanned\n   * before a term is located and its frequency and position information may be\n   * processed. In a large index with user-entered query terms, query processing\n   * time is likely to be dominated not by term lookup but rather by the\n   * processing of frequency and positional data. In a small index or when many\n   * uncommon query terms are generated (e.g., by wildcard queries) term lookup\n   * may become a dominant cost.\n   * <p>\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   * \n   * @see #DEFAULT_TERM_INDEX_INTERVAL\n   */\n  public IndexWriterConfig setTermIndexInterval(int interval) {\n    this.termIndexInterval = interval;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setTermIndexInterval(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setTermIndexInterval(int).mjava","sourceNew":"  /**\n   * Expert: set the interval between indexed terms. Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms. Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   * <p>\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term. In\n   * particular, it is the maximum number of other terms that must be scanned\n   * before a term is located and its frequency and position information may be\n   * processed. In a large index with user-entered query terms, query processing\n   * time is likely to be dominated not by term lookup but rather by the\n   * processing of frequency and positional data. In a small index or when many\n   * uncommon query terms are generated (e.g., by wildcard queries) term lookup\n   * may become a dominant cost.\n   * <p>\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   * \n   * @see #DEFAULT_TERM_INDEX_INTERVAL\n   */\n  public IndexWriterConfig setTermIndexInterval(int interval) { // TODO: this should be private to the codec, not settable here\n    this.termIndexInterval = interval;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Expert: set the interval between indexed terms. Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms. Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   * <p>\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term. In\n   * particular, it is the maximum number of other terms that must be scanned\n   * before a term is located and its frequency and position information may be\n   * processed. In a large index with user-entered query terms, query processing\n   * time is likely to be dominated not by term lookup but rather by the\n   * processing of frequency and positional data. In a small index or when many\n   * uncommon query terms are generated (e.g., by wildcard queries) term lookup\n   * may become a dominant cost.\n   * <p>\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   * \n   * @see #DEFAULT_TERM_INDEX_INTERVAL\n   */\n  public IndexWriterConfig setTermIndexInterval(int interval) {\n    this.termIndexInterval = interval;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff78505662c0b741e2663a9f38a4889c12a32c9f","date":1294908561,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setTermIndexInterval(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setTermIndexInterval(int).mjava","sourceNew":"  /**\n   * Expert: set the interval between indexed terms. Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms. Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   * <p>\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term. In\n   * particular, it is the maximum number of other terms that must be scanned\n   * before a term is located and its frequency and position information may be\n   * processed. In a large index with user-entered query terms, query processing\n   * time is likely to be dominated not by term lookup but rather by the\n   * processing of frequency and positional data. In a small index or when many\n   * uncommon query terms are generated (e.g., by wildcard queries) term lookup\n   * may become a dominant cost.\n   * <p>\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   *\n   * @see #DEFAULT_TERM_INDEX_INTERVAL\n   */\n  public IndexWriterConfig setTermIndexInterval(int interval) {\n    this.termIndexInterval = interval;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Expert: set the interval between indexed terms. Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms. Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   * <p>\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term. In\n   * particular, it is the maximum number of other terms that must be scanned\n   * before a term is located and its frequency and position information may be\n   * processed. In a large index with user-entered query terms, query processing\n   * time is likely to be dominated not by term lookup but rather by the\n   * processing of frequency and positional data. In a small index or when many\n   * uncommon query terms are generated (e.g., by wildcard queries) term lookup\n   * may become a dominant cost.\n   * <p>\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   * \n   * @see #DEFAULT_TERM_INDEX_INTERVAL\n   */\n  public IndexWriterConfig setTermIndexInterval(int interval) {\n    this.termIndexInterval = interval;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setTermIndexInterval(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setTermIndexInterval(int).mjava","sourceNew":"  /**\n   * Expert: set the interval between indexed terms. Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms. Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   * <p>\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term. In\n   * particular, it is the maximum number of other terms that must be scanned\n   * before a term is located and its frequency and position information may be\n   * processed. In a large index with user-entered query terms, query processing\n   * time is likely to be dominated not by term lookup but rather by the\n   * processing of frequency and positional data. In a small index or when many\n   * uncommon query terms are generated (e.g., by wildcard queries) term lookup\n   * may become a dominant cost.\n   * <p>\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   *\n   * @see #DEFAULT_TERM_INDEX_INTERVAL\n   */\n  public IndexWriterConfig setTermIndexInterval(int interval) { // TODO: this should be private to the codec, not settable here\n    this.termIndexInterval = interval;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Expert: set the interval between indexed terms. Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms. Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   * <p>\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term. In\n   * particular, it is the maximum number of other terms that must be scanned\n   * before a term is located and its frequency and position information may be\n   * processed. In a large index with user-entered query terms, query processing\n   * time is likely to be dominated not by term lookup but rather by the\n   * processing of frequency and positional data. In a small index or when many\n   * uncommon query terms are generated (e.g., by wildcard queries) term lookup\n   * may become a dominant cost.\n   * <p>\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   *\n   * @see #DEFAULT_TERM_INDEX_INTERVAL\n   */\n  public IndexWriterConfig setTermIndexInterval(int interval) {\n    this.termIndexInterval = interval;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00b21520fafb9860ce0318d7be5ea84619c185ad","date":1300444600,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setTermIndexInterval(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setTermIndexInterval(int).mjava","sourceNew":"  /**\n   * Expert: set the interval between indexed terms. Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms. Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   * <p>\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term. In\n   * particular, it is the maximum number of other terms that must be scanned\n   * before a term is located and its frequency and position information may be\n   * processed. In a large index with user-entered query terms, query processing\n   * time is likely to be dominated not by term lookup but rather by the\n   * processing of frequency and positional data. In a small index or when many\n   * uncommon query terms are generated (e.g., by wildcard queries) term lookup\n   * may become a dominant cost.\n   * <p>\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   * \n   * @see #DEFAULT_TERM_INDEX_INTERVAL\n   *\n   * <p>Takes effect immediately, but only applies to newly\n   *  flushed/merged segments. */\n  public IndexWriterConfig setTermIndexInterval(int interval) { // TODO: this should be private to the codec, not settable here\n    this.termIndexInterval = interval;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Expert: set the interval between indexed terms. Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms. Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   * <p>\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term. In\n   * particular, it is the maximum number of other terms that must be scanned\n   * before a term is located and its frequency and position information may be\n   * processed. In a large index with user-entered query terms, query processing\n   * time is likely to be dominated not by term lookup but rather by the\n   * processing of frequency and positional data. In a small index or when many\n   * uncommon query terms are generated (e.g., by wildcard queries) term lookup\n   * may become a dominant cost.\n   * <p>\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   * \n   * @see #DEFAULT_TERM_INDEX_INTERVAL\n   */\n  public IndexWriterConfig setTermIndexInterval(int interval) { // TODO: this should be private to the codec, not settable here\n    this.termIndexInterval = interval;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setTermIndexInterval(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setTermIndexInterval(int).mjava","sourceNew":"  /**\n   * Expert: set the interval between indexed terms. Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms. Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   * <p>\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term. In\n   * particular, it is the maximum number of other terms that must be scanned\n   * before a term is located and its frequency and position information may be\n   * processed. In a large index with user-entered query terms, query processing\n   * time is likely to be dominated not by term lookup but rather by the\n   * processing of frequency and positional data. In a small index or when many\n   * uncommon query terms are generated (e.g., by wildcard queries) term lookup\n   * may become a dominant cost.\n   * <p>\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   * \n   * @see #DEFAULT_TERM_INDEX_INTERVAL\n   *\n   * <p>Takes effect immediately, but only applies to newly\n   *  flushed/merged segments. */\n  public IndexWriterConfig setTermIndexInterval(int interval) { // TODO: this should be private to the codec, not settable here\n    this.termIndexInterval = interval;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Expert: set the interval between indexed terms. Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms. Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   * <p>\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term. In\n   * particular, it is the maximum number of other terms that must be scanned\n   * before a term is located and its frequency and position information may be\n   * processed. In a large index with user-entered query terms, query processing\n   * time is likely to be dominated not by term lookup but rather by the\n   * processing of frequency and positional data. In a small index or when many\n   * uncommon query terms are generated (e.g., by wildcard queries) term lookup\n   * may become a dominant cost.\n   * <p>\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   * \n   * @see #DEFAULT_TERM_INDEX_INTERVAL\n   */\n  public IndexWriterConfig setTermIndexInterval(int interval) { // TODO: this should be private to the codec, not settable here\n    this.termIndexInterval = interval;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setTermIndexInterval(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setTermIndexInterval(int).mjava","sourceNew":"  /**\n   * Expert: set the interval between indexed terms. Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms. Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   * <p>\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term. In\n   * particular, it is the maximum number of other terms that must be scanned\n   * before a term is located and its frequency and position information may be\n   * processed. In a large index with user-entered query terms, query processing\n   * time is likely to be dominated not by term lookup but rather by the\n   * processing of frequency and positional data. In a small index or when many\n   * uncommon query terms are generated (e.g., by wildcard queries) term lookup\n   * may become a dominant cost.\n   * <p>\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   *\n   * @see #DEFAULT_TERM_INDEX_INTERVAL\n   *\n   * <p>Takes effect immediately, but only applies to newly\n   *  flushed/merged segments. */\n  public IndexWriterConfig setTermIndexInterval(int interval) { // TODO: this should be private to the codec, not settable here\n    this.termIndexInterval = interval;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Expert: set the interval between indexed terms. Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms. Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   * <p>\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term. In\n   * particular, it is the maximum number of other terms that must be scanned\n   * before a term is located and its frequency and position information may be\n   * processed. In a large index with user-entered query terms, query processing\n   * time is likely to be dominated not by term lookup but rather by the\n   * processing of frequency and positional data. In a small index or when many\n   * uncommon query terms are generated (e.g., by wildcard queries) term lookup\n   * may become a dominant cost.\n   * <p>\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   *\n   * @see #DEFAULT_TERM_INDEX_INTERVAL\n   */\n  public IndexWriterConfig setTermIndexInterval(int interval) { // TODO: this should be private to the codec, not settable here\n    this.termIndexInterval = interval;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setTermIndexInterval(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setTermIndexInterval(int).mjava","sourceNew":"  /**\n   * Expert: set the interval between indexed terms. Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms. Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   * <p>\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term. In\n   * particular, it is the maximum number of other terms that must be scanned\n   * before a term is located and its frequency and position information may be\n   * processed. In a large index with user-entered query terms, query processing\n   * time is likely to be dominated not by term lookup but rather by the\n   * processing of frequency and positional data. In a small index or when many\n   * uncommon query terms are generated (e.g., by wildcard queries) term lookup\n   * may become a dominant cost.\n   * <p>\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   *\n   * @see #DEFAULT_TERM_INDEX_INTERVAL\n   *\n   * <p>Takes effect immediately, but only applies to newly\n   *  flushed/merged segments. */\n  public IndexWriterConfig setTermIndexInterval(int interval) { // TODO: this should be private to the codec, not settable here\n    this.termIndexInterval = interval;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Expert: set the interval between indexed terms. Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms. Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   * <p>\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term. In\n   * particular, it is the maximum number of other terms that must be scanned\n   * before a term is located and its frequency and position information may be\n   * processed. In a large index with user-entered query terms, query processing\n   * time is likely to be dominated not by term lookup but rather by the\n   * processing of frequency and positional data. In a small index or when many\n   * uncommon query terms are generated (e.g., by wildcard queries) term lookup\n   * may become a dominant cost.\n   * <p>\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   * \n   * @see #DEFAULT_TERM_INDEX_INTERVAL\n   *\n   * <p>Takes effect immediately, but only applies to newly\n   *  flushed/merged segments. */\n  public IndexWriterConfig setTermIndexInterval(int interval) { // TODO: this should be private to the codec, not settable here\n    this.termIndexInterval = interval;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setTermIndexInterval(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setTermIndexInterval(int).mjava","sourceNew":"  /**\n   * Expert: set the interval between indexed terms. Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms. Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   * <p>\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term. In\n   * particular, it is the maximum number of other terms that must be scanned\n   * before a term is located and its frequency and position information may be\n   * processed. In a large index with user-entered query terms, query processing\n   * time is likely to be dominated not by term lookup but rather by the\n   * processing of frequency and positional data. In a small index or when many\n   * uncommon query terms are generated (e.g., by wildcard queries) term lookup\n   * may become a dominant cost.\n   * <p>\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   *\n   * @see #DEFAULT_TERM_INDEX_INTERVAL\n   *\n   * <p>Takes effect immediately, but only applies to newly\n   *  flushed/merged segments. */\n  public IndexWriterConfig setTermIndexInterval(int interval) { // TODO: this should be private to the codec, not settable here\n    this.termIndexInterval = interval;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Expert: set the interval between indexed terms. Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms. Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   * <p>\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term. In\n   * particular, it is the maximum number of other terms that must be scanned\n   * before a term is located and its frequency and position information may be\n   * processed. In a large index with user-entered query terms, query processing\n   * time is likely to be dominated not by term lookup but rather by the\n   * processing of frequency and positional data. In a small index or when many\n   * uncommon query terms are generated (e.g., by wildcard queries) term lookup\n   * may become a dominant cost.\n   * <p>\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   * \n   * @see #DEFAULT_TERM_INDEX_INTERVAL\n   *\n   * <p>Takes effect immediately, but only applies to newly\n   *  flushed/merged segments. */\n  public IndexWriterConfig setTermIndexInterval(int interval) { // TODO: this should be private to the codec, not settable here\n    this.termIndexInterval = interval;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setTermIndexInterval(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setTermIndexInterval(int).mjava","sourceNew":"  /**\n   * Expert: set the interval between indexed terms. Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms. Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   * <p>\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term. In\n   * particular, it is the maximum number of other terms that must be scanned\n   * before a term is located and its frequency and position information may be\n   * processed. In a large index with user-entered query terms, query processing\n   * time is likely to be dominated not by term lookup but rather by the\n   * processing of frequency and positional data. In a small index or when many\n   * uncommon query terms are generated (e.g., by wildcard queries) term lookup\n   * may become a dominant cost.\n   * <p>\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   *\n   * @see #DEFAULT_TERM_INDEX_INTERVAL\n   *\n   * <p>Takes effect immediately, but only applies to newly\n   *  flushed/merged segments. */\n  public IndexWriterConfig setTermIndexInterval(int interval) { // TODO: this should be private to the codec, not settable here\n    this.termIndexInterval = interval;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Expert: set the interval between indexed terms. Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms. Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   * <p>\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term. In\n   * particular, it is the maximum number of other terms that must be scanned\n   * before a term is located and its frequency and position information may be\n   * processed. In a large index with user-entered query terms, query processing\n   * time is likely to be dominated not by term lookup but rather by the\n   * processing of frequency and positional data. In a small index or when many\n   * uncommon query terms are generated (e.g., by wildcard queries) term lookup\n   * may become a dominant cost.\n   * <p>\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   * \n   * @see #DEFAULT_TERM_INDEX_INTERVAL\n   *\n   * <p>Takes effect immediately, but only applies to newly\n   *  flushed/merged segments. */\n  public IndexWriterConfig setTermIndexInterval(int interval) { // TODO: this should be private to the codec, not settable here\n    this.termIndexInterval = interval;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setTermIndexInterval(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setTermIndexInterval(int).mjava","sourceNew":"  /**\n   * Expert: set the interval between indexed terms. Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms. Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   * <p>\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term. In\n   * particular, it is the maximum number of other terms that must be scanned\n   * before a term is located and its frequency and position information may be\n   * processed. In a large index with user-entered query terms, query processing\n   * time is likely to be dominated not by term lookup but rather by the\n   * processing of frequency and positional data. In a small index or when many\n   * uncommon query terms are generated (e.g., by wildcard queries) term lookup\n   * may become a dominant cost.\n   * <p>\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   *\n   * @see #DEFAULT_TERM_INDEX_INTERVAL\n   *\n   * <p>Takes effect immediately, but only applies to newly\n   *  flushed/merged segments. */\n  public IndexWriterConfig setTermIndexInterval(int interval) { // TODO: this should be private to the codec, not settable here\n    this.termIndexInterval = interval;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Expert: set the interval between indexed terms. Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms. Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   * <p>\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term. In\n   * particular, it is the maximum number of other terms that must be scanned\n   * before a term is located and its frequency and position information may be\n   * processed. In a large index with user-entered query terms, query processing\n   * time is likely to be dominated not by term lookup but rather by the\n   * processing of frequency and positional data. In a small index or when many\n   * uncommon query terms are generated (e.g., by wildcard queries) term lookup\n   * may become a dominant cost.\n   * <p>\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   *\n   * @see #DEFAULT_TERM_INDEX_INTERVAL\n   *\n   * <p>Takes effect immediately, but only applies to newly\n   *  flushed/merged segments. */\n  public IndexWriterConfig setTermIndexInterval(int interval) { // TODO: this should be private to the codec, not settable here\n    this.termIndexInterval = interval;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff78505662c0b741e2663a9f38a4889c12a32c9f":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"70ad682703b8585f5d0a637efec044d57ec05efb":["9454a6510e2db155fb01faa5c049b06ece95fab9","56da903869515527852ee21ea7ef7bfe414cd40d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["d619839baa8ce5503e496b94a9e42ad6f079293f","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["00b21520fafb9860ce0318d7be5ea84619c185ad","c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"00b21520fafb9860ce0318d7be5ea84619c185ad":["56da903869515527852ee21ea7ef7bfe414cd40d"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["868da859b43505d9d2a023bfeae6dd0c795f5295","00b21520fafb9860ce0318d7be5ea84619c185ad"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["70ad682703b8585f5d0a637efec044d57ec05efb","00b21520fafb9860ce0318d7be5ea84619c185ad"],"56da903869515527852ee21ea7ef7bfe414cd40d":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a3776dccca01c11e7046323cfad46a3b4a471233":["00b21520fafb9860ce0318d7be5ea84619c185ad","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["ff78505662c0b741e2663a9f38a4889c12a32c9f","56da903869515527852ee21ea7ef7bfe414cd40d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ff78505662c0b741e2663a9f38a4889c12a32c9f":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"70ad682703b8585f5d0a637efec044d57ec05efb":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233"],"00b21520fafb9860ce0318d7be5ea84619c185ad":["b3e06be49006ecac364d39d12b9c9f74882f9b9f","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a3776dccca01c11e7046323cfad46a3b4a471233"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"56da903869515527852ee21ea7ef7bfe414cd40d":["70ad682703b8585f5d0a637efec044d57ec05efb","00b21520fafb9860ce0318d7be5ea84619c185ad","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ff78505662c0b741e2663a9f38a4889c12a32c9f","70ad682703b8585f5d0a637efec044d57ec05efb","56da903869515527852ee21ea7ef7bfe414cd40d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}