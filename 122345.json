{"path":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testDownconfig().mjava","commits":[{"id":"9272a617a9cbebf86be127014bbbacd7cf8f8e83","date":1467480344,"type":0,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testDownconfig().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDownconfig() throws Exception {\n    Path tmp = createTempDir(\"downConfigNewPlace\");\n\n    // First we need a configset on ZK to bring down. \n    Path src = TEST_PATH().resolve(\"configsets\").resolve(\"cloud-subdirs\").resolve(\"conf\");\n    Path configSet = TEST_PATH().resolve(\"configsets\").resolve(\"cloud-subdirs\");\n    copyConfigUp(src, configSet, \"downconfig1\");\n    // Now do we have that config up on ZK?\n    verifyZkLocalPathsMatch(src, \"/configs/downconfig1\");\n\n    String[] args = new String[]{\n        \"-confname\", \"downconfig1\",\n        \"-confdir\", tmp.toAbsolutePath().toString(),\n        \"-zkHost\", zkAddr,\n    };\n\n    SolrCLI.ConfigSetDownloadTool downTool = new SolrCLI.ConfigSetDownloadTool();\n    int res = downTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(downTool.getOptions()), args));\n    assertEquals(\"Download should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(Paths.get(tmp.toAbsolutePath().toString(), \"conf\"), \"/configs/downconfig1\");\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3100fa57deee363537557f82c2b38812a2576acc","date":1467500858,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testDownconfig().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testDownconfig().mjava","sourceNew":"  @Test\n  public void testDownconfig() throws Exception {\n    Path tmp = createTempDir(\"downConfigNewPlace\");\n\n    // First we need a configset on ZK to bring down. \n    \n    Path configSet = TEST_PATH().resolve(\"configsets\");\n    Path srcPathCheck = configSet.resolve(\"cloud-subdirs\").resolve(\"conf\");\n    copyConfigUp(configSet, \"cloud-subdirs\", \"downconfig1\");\n    // Now do we have that config up on ZK?\n    verifyZkLocalPathsMatch(srcPathCheck, \"/configs/downconfig1\");\n\n    String[] args = new String[]{\n        \"-confname\", \"downconfig1\",\n        \"-confdir\", tmp.toAbsolutePath().toString(),\n        \"-zkHost\", zkAddr,\n    };\n\n    SolrCLI.ConfigSetDownloadTool downTool = new SolrCLI.ConfigSetDownloadTool();\n    int res = downTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(downTool.getOptions()), args));\n    assertEquals(\"Download should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(Paths.get(tmp.toAbsolutePath().toString(), \"conf\"), \"/configs/downconfig1\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testDownconfig() throws Exception {\n    Path tmp = createTempDir(\"downConfigNewPlace\");\n\n    // First we need a configset on ZK to bring down. \n    Path src = TEST_PATH().resolve(\"configsets\").resolve(\"cloud-subdirs\").resolve(\"conf\");\n    Path configSet = TEST_PATH().resolve(\"configsets\").resolve(\"cloud-subdirs\");\n    copyConfigUp(src, configSet, \"downconfig1\");\n    // Now do we have that config up on ZK?\n    verifyZkLocalPathsMatch(src, \"/configs/downconfig1\");\n\n    String[] args = new String[]{\n        \"-confname\", \"downconfig1\",\n        \"-confdir\", tmp.toAbsolutePath().toString(),\n        \"-zkHost\", zkAddr,\n    };\n\n    SolrCLI.ConfigSetDownloadTool downTool = new SolrCLI.ConfigSetDownloadTool();\n    int res = downTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(downTool.getOptions()), args));\n    assertEquals(\"Download should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(Paths.get(tmp.toAbsolutePath().toString(), \"conf\"), \"/configs/downconfig1\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testDownconfig().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDownconfig() throws Exception {\n    Path tmp = createTempDir(\"downConfigNewPlace\");\n\n    // First we need a configset on ZK to bring down. \n    \n    Path configSet = TEST_PATH().resolve(\"configsets\");\n    Path srcPathCheck = configSet.resolve(\"cloud-subdirs\").resolve(\"conf\");\n    copyConfigUp(configSet, \"cloud-subdirs\", \"downconfig1\");\n    // Now do we have that config up on ZK?\n    verifyZkLocalPathsMatch(srcPathCheck, \"/configs/downconfig1\");\n\n    String[] args = new String[]{\n        \"-confname\", \"downconfig1\",\n        \"-confdir\", tmp.toAbsolutePath().toString(),\n        \"-zkHost\", zkAddr,\n    };\n\n    SolrCLI.ConfigSetDownloadTool downTool = new SolrCLI.ConfigSetDownloadTool();\n    int res = downTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(downTool.getOptions()), args));\n    assertEquals(\"Download should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(Paths.get(tmp.toAbsolutePath().toString(), \"conf\"), \"/configs/downconfig1\");\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33e11d49e1ce128772bc8ecfdcf22b4ed0be0b37","date":1502038096,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testDownconfig().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testDownconfig().mjava","sourceNew":"  @Test\n  public void testDownconfig() throws Exception {\n    Path tmp = Paths.get(createTempDir(\"downConfigNewPlace\").toAbsolutePath().toString(), \"myconfset\");\n\n    // First we need a configset on ZK to bring down. \n    \n    Path configSet = TEST_PATH().resolve(\"configsets\");\n    Path srcPathCheck = configSet.resolve(\"cloud-subdirs\").resolve(\"conf\");\n    copyConfigUp(configSet, \"cloud-subdirs\", \"downconfig1\");\n    // Now do we have that config up on ZK?\n    verifyZkLocalPathsMatch(srcPathCheck, \"/configs/downconfig1\");\n\n    String[] args = new String[]{\n        \"-confname\", \"downconfig1\",\n        \"-confdir\", tmp.toAbsolutePath().toString(),\n        \"-zkHost\", zkAddr,\n    };\n\n    SolrCLI.ConfigSetDownloadTool downTool = new SolrCLI.ConfigSetDownloadTool();\n    int res = downTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(downTool.getOptions()), args));\n    assertEquals(\"Download should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(Paths.get(tmp.toAbsolutePath().toString(), \"conf\"), \"/configs/downconfig1\");\n\n    // Insure that empty files don't become directories (SOLR-11198)\n\n    Path emptyFile = Paths.get(tmp.toAbsolutePath().toString(), \"conf\", \"stopwords\", \"emptyfile\");\n    Files.createFile(emptyFile);\n\n    // Now copy it up and back and insure it's still a file in the new place\n    copyConfigUp(tmp.getParent(), \"myconfset\", \"downconfig2\");\n    Path tmp2 = createTempDir(\"downConfigNewPlace2\");\n    downTool = new SolrCLI.ConfigSetDownloadTool();\n    args = new String[]{\n        \"-confname\", \"downconfig2\",\n        \"-confdir\", tmp2.toAbsolutePath().toString(),\n        \"-zkHost\", zkAddr,\n    };\n\n    res = downTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(downTool.getOptions()), args));\n    assertEquals(\"Download should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(Paths.get(tmp.toAbsolutePath().toString(), \"conf\"), \"/configs/downconfig2\");\n    // And insure the empty file is a text file\n    Path destEmpty = Paths.get(tmp2.toAbsolutePath().toString(), \"conf\", \"stopwords\", \"emptyfile\");\n    assertTrue(\"Empty files should NOT be copied down as directories\", destEmpty.toFile().isFile());\n\n  }\n\n","sourceOld":"  @Test\n  public void testDownconfig() throws Exception {\n    Path tmp = createTempDir(\"downConfigNewPlace\");\n\n    // First we need a configset on ZK to bring down. \n    \n    Path configSet = TEST_PATH().resolve(\"configsets\");\n    Path srcPathCheck = configSet.resolve(\"cloud-subdirs\").resolve(\"conf\");\n    copyConfigUp(configSet, \"cloud-subdirs\", \"downconfig1\");\n    // Now do we have that config up on ZK?\n    verifyZkLocalPathsMatch(srcPathCheck, \"/configs/downconfig1\");\n\n    String[] args = new String[]{\n        \"-confname\", \"downconfig1\",\n        \"-confdir\", tmp.toAbsolutePath().toString(),\n        \"-zkHost\", zkAddr,\n    };\n\n    SolrCLI.ConfigSetDownloadTool downTool = new SolrCLI.ConfigSetDownloadTool();\n    int res = downTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(downTool.getOptions()), args));\n    assertEquals(\"Download should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(Paths.get(tmp.toAbsolutePath().toString(), \"conf\"), \"/configs/downconfig1\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"566112f6115904d848cbf09462ebd8bf1304257b","date":1502103699,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testDownconfig().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testDownconfig().mjava","sourceNew":"  @Test\n  public void testDownconfig() throws Exception {\n    Path tmp = Paths.get(createTempDir(\"downConfigNewPlace\").toAbsolutePath().toString(), \"myconfset\");\n\n    // First we need a configset on ZK to bring down. \n    \n    Path configSet = TEST_PATH().resolve(\"configsets\");\n    Path srcPathCheck = configSet.resolve(\"cloud-subdirs\").resolve(\"conf\");\n    copyConfigUp(configSet, \"cloud-subdirs\", \"downconfig1\");\n    // Now do we have that config up on ZK?\n    verifyZkLocalPathsMatch(srcPathCheck, \"/configs/downconfig1\");\n\n    String[] args = new String[]{\n        \"-confname\", \"downconfig1\",\n        \"-confdir\", tmp.toAbsolutePath().toString(),\n        \"-zkHost\", zkAddr,\n    };\n\n    SolrCLI.ConfigSetDownloadTool downTool = new SolrCLI.ConfigSetDownloadTool();\n    int res = downTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(downTool.getOptions()), args));\n    assertEquals(\"Download should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(Paths.get(tmp.toAbsolutePath().toString(), \"conf\"), \"/configs/downconfig1\");\n\n    // Insure that empty files don't become directories (SOLR-11198)\n\n    Path emptyFile = Paths.get(tmp.toAbsolutePath().toString(), \"conf\", \"stopwords\", \"emptyfile\");\n    Files.createFile(emptyFile);\n\n    // Now copy it up and back and insure it's still a file in the new place\n    copyConfigUp(tmp.getParent(), \"myconfset\", \"downconfig2\");\n    Path tmp2 = createTempDir(\"downConfigNewPlace2\");\n    downTool = new SolrCLI.ConfigSetDownloadTool();\n    args = new String[]{\n        \"-confname\", \"downconfig2\",\n        \"-confdir\", tmp2.toAbsolutePath().toString(),\n        \"-zkHost\", zkAddr,\n    };\n\n    res = downTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(downTool.getOptions()), args));\n    assertEquals(\"Download should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(Paths.get(tmp.toAbsolutePath().toString(), \"conf\"), \"/configs/downconfig2\");\n    // And insure the empty file is a text file\n    Path destEmpty = Paths.get(tmp2.toAbsolutePath().toString(), \"conf\", \"stopwords\", \"emptyfile\");\n    assertTrue(\"Empty files should NOT be copied down as directories\", destEmpty.toFile().isFile());\n\n  }\n\n","sourceOld":"  @Test\n  public void testDownconfig() throws Exception {\n    Path tmp = createTempDir(\"downConfigNewPlace\");\n\n    // First we need a configset on ZK to bring down. \n    \n    Path configSet = TEST_PATH().resolve(\"configsets\");\n    Path srcPathCheck = configSet.resolve(\"cloud-subdirs\").resolve(\"conf\");\n    copyConfigUp(configSet, \"cloud-subdirs\", \"downconfig1\");\n    // Now do we have that config up on ZK?\n    verifyZkLocalPathsMatch(srcPathCheck, \"/configs/downconfig1\");\n\n    String[] args = new String[]{\n        \"-confname\", \"downconfig1\",\n        \"-confdir\", tmp.toAbsolutePath().toString(),\n        \"-zkHost\", zkAddr,\n    };\n\n    SolrCLI.ConfigSetDownloadTool downTool = new SolrCLI.ConfigSetDownloadTool();\n    int res = downTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(downTool.getOptions()), args));\n    assertEquals(\"Download should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(Paths.get(tmp.toAbsolutePath().toString(), \"conf\"), \"/configs/downconfig1\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testDownconfig().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testDownconfig().mjava","sourceNew":"  @Test\n  public void testDownconfig() throws Exception {\n    Path tmp = Paths.get(createTempDir(\"downConfigNewPlace\").toAbsolutePath().toString(), \"myconfset\");\n\n    // First we need a configset on ZK to bring down. \n    \n    Path configSet = TEST_PATH().resolve(\"configsets\");\n    Path srcPathCheck = configSet.resolve(\"cloud-subdirs\").resolve(\"conf\");\n    copyConfigUp(configSet, \"cloud-subdirs\", \"downconfig1\");\n    // Now do we have that config up on ZK?\n    verifyZkLocalPathsMatch(srcPathCheck, \"/configs/downconfig1\");\n\n    String[] args = new String[]{\n        \"-confname\", \"downconfig1\",\n        \"-confdir\", tmp.toAbsolutePath().toString(),\n        \"-zkHost\", zkAddr,\n    };\n\n    SolrCLI.ConfigSetDownloadTool downTool = new SolrCLI.ConfigSetDownloadTool();\n    int res = downTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(downTool.getOptions()), args));\n    assertEquals(\"Download should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(Paths.get(tmp.toAbsolutePath().toString(), \"conf\"), \"/configs/downconfig1\");\n\n    // Insure that empty files don't become directories (SOLR-11198)\n\n    Path emptyFile = Paths.get(tmp.toAbsolutePath().toString(), \"conf\", \"stopwords\", \"emptyfile\");\n    Files.createFile(emptyFile);\n\n    // Now copy it up and back and insure it's still a file in the new place\n    copyConfigUp(tmp.getParent(), \"myconfset\", \"downconfig2\");\n    Path tmp2 = createTempDir(\"downConfigNewPlace2\");\n    downTool = new SolrCLI.ConfigSetDownloadTool();\n    args = new String[]{\n        \"-confname\", \"downconfig2\",\n        \"-confdir\", tmp2.toAbsolutePath().toString(),\n        \"-zkHost\", zkAddr,\n    };\n\n    res = downTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(downTool.getOptions()), args));\n    assertEquals(\"Download should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(Paths.get(tmp.toAbsolutePath().toString(), \"conf\"), \"/configs/downconfig2\");\n    // And insure the empty file is a text file\n    Path destEmpty = Paths.get(tmp2.toAbsolutePath().toString(), \"conf\", \"stopwords\", \"emptyfile\");\n    assertTrue(\"Empty files should NOT be copied down as directories\", destEmpty.toFile().isFile());\n\n  }\n\n","sourceOld":"  @Test\n  public void testDownconfig() throws Exception {\n    Path tmp = createTempDir(\"downConfigNewPlace\");\n\n    // First we need a configset on ZK to bring down. \n    \n    Path configSet = TEST_PATH().resolve(\"configsets\");\n    Path srcPathCheck = configSet.resolve(\"cloud-subdirs\").resolve(\"conf\");\n    copyConfigUp(configSet, \"cloud-subdirs\", \"downconfig1\");\n    // Now do we have that config up on ZK?\n    verifyZkLocalPathsMatch(srcPathCheck, \"/configs/downconfig1\");\n\n    String[] args = new String[]{\n        \"-confname\", \"downconfig1\",\n        \"-confdir\", tmp.toAbsolutePath().toString(),\n        \"-zkHost\", zkAddr,\n    };\n\n    SolrCLI.ConfigSetDownloadTool downTool = new SolrCLI.ConfigSetDownloadTool();\n    int res = downTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(downTool.getOptions()), args));\n    assertEquals(\"Download should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(Paths.get(tmp.toAbsolutePath().toString(), \"conf\"), \"/configs/downconfig1\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4949836c6e83246ddba8997472e3333f40986c8c","date":1560293762,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testDownconfig().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testDownconfig().mjava","sourceNew":"  @Test\n  public void testDownconfig() throws Exception {\n    Path tmp = Paths.get(createTempDir(\"downConfigNewPlace\").toAbsolutePath().toString(), \"myconfset\");\n\n    // First we need a configset on ZK to bring down. \n    \n    Path configSet = TEST_PATH().resolve(\"configsets\");\n    Path srcPathCheck = configSet.resolve(\"cloud-subdirs\").resolve(\"conf\");\n    AbstractDistribZkTestBase.copyConfigUp(configSet, \"cloud-subdirs\", \"downconfig1\", zkAddr);\n    // Now do we have that config up on ZK?\n    verifyZkLocalPathsMatch(srcPathCheck, \"/configs/downconfig1\");\n\n    String[] args = new String[]{\n        \"-confname\", \"downconfig1\",\n        \"-confdir\", tmp.toAbsolutePath().toString(),\n        \"-zkHost\", zkAddr,\n    };\n\n    SolrCLI.ConfigSetDownloadTool downTool = new SolrCLI.ConfigSetDownloadTool();\n    int res = downTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(downTool.getOptions()), args));\n    assertEquals(\"Download should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(Paths.get(tmp.toAbsolutePath().toString(), \"conf\"), \"/configs/downconfig1\");\n\n    // Insure that empty files don't become directories (SOLR-11198)\n\n    Path emptyFile = Paths.get(tmp.toAbsolutePath().toString(), \"conf\", \"stopwords\", \"emptyfile\");\n    Files.createFile(emptyFile);\n\n    // Now copy it up and back and insure it's still a file in the new place\n    AbstractDistribZkTestBase.copyConfigUp(tmp.getParent(), \"myconfset\", \"downconfig2\", zkAddr);\n    Path tmp2 = createTempDir(\"downConfigNewPlace2\");\n    downTool = new SolrCLI.ConfigSetDownloadTool();\n    args = new String[]{\n        \"-confname\", \"downconfig2\",\n        \"-confdir\", tmp2.toAbsolutePath().toString(),\n        \"-zkHost\", zkAddr,\n    };\n\n    res = downTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(downTool.getOptions()), args));\n    assertEquals(\"Download should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(Paths.get(tmp.toAbsolutePath().toString(), \"conf\"), \"/configs/downconfig2\");\n    // And insure the empty file is a text file\n    Path destEmpty = Paths.get(tmp2.toAbsolutePath().toString(), \"conf\", \"stopwords\", \"emptyfile\");\n    assertTrue(\"Empty files should NOT be copied down as directories\", destEmpty.toFile().isFile());\n\n  }\n\n","sourceOld":"  @Test\n  public void testDownconfig() throws Exception {\n    Path tmp = Paths.get(createTempDir(\"downConfigNewPlace\").toAbsolutePath().toString(), \"myconfset\");\n\n    // First we need a configset on ZK to bring down. \n    \n    Path configSet = TEST_PATH().resolve(\"configsets\");\n    Path srcPathCheck = configSet.resolve(\"cloud-subdirs\").resolve(\"conf\");\n    copyConfigUp(configSet, \"cloud-subdirs\", \"downconfig1\");\n    // Now do we have that config up on ZK?\n    verifyZkLocalPathsMatch(srcPathCheck, \"/configs/downconfig1\");\n\n    String[] args = new String[]{\n        \"-confname\", \"downconfig1\",\n        \"-confdir\", tmp.toAbsolutePath().toString(),\n        \"-zkHost\", zkAddr,\n    };\n\n    SolrCLI.ConfigSetDownloadTool downTool = new SolrCLI.ConfigSetDownloadTool();\n    int res = downTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(downTool.getOptions()), args));\n    assertEquals(\"Download should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(Paths.get(tmp.toAbsolutePath().toString(), \"conf\"), \"/configs/downconfig1\");\n\n    // Insure that empty files don't become directories (SOLR-11198)\n\n    Path emptyFile = Paths.get(tmp.toAbsolutePath().toString(), \"conf\", \"stopwords\", \"emptyfile\");\n    Files.createFile(emptyFile);\n\n    // Now copy it up and back and insure it's still a file in the new place\n    copyConfigUp(tmp.getParent(), \"myconfset\", \"downconfig2\");\n    Path tmp2 = createTempDir(\"downConfigNewPlace2\");\n    downTool = new SolrCLI.ConfigSetDownloadTool();\n    args = new String[]{\n        \"-confname\", \"downconfig2\",\n        \"-confdir\", tmp2.toAbsolutePath().toString(),\n        \"-zkHost\", zkAddr,\n    };\n\n    res = downTool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(downTool.getOptions()), args));\n    assertEquals(\"Download should have succeeded.\", 0, res);\n    verifyZkLocalPathsMatch(Paths.get(tmp.toAbsolutePath().toString(), \"conf\"), \"/configs/downconfig2\");\n    // And insure the empty file is a text file\n    Path destEmpty = Paths.get(tmp2.toAbsolutePath().toString(), \"conf\", \"stopwords\", \"emptyfile\");\n    assertTrue(\"Empty files should NOT be copied down as directories\", destEmpty.toFile().isFile());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["3100fa57deee363537557f82c2b38812a2576acc","566112f6115904d848cbf09462ebd8bf1304257b"],"566112f6115904d848cbf09462ebd8bf1304257b":["3100fa57deee363537557f82c2b38812a2576acc","33e11d49e1ce128772bc8ecfdcf22b4ed0be0b37"],"3100fa57deee363537557f82c2b38812a2576acc":["9272a617a9cbebf86be127014bbbacd7cf8f8e83"],"9272a617a9cbebf86be127014bbbacd7cf8f8e83":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4949836c6e83246ddba8997472e3333f40986c8c":["566112f6115904d848cbf09462ebd8bf1304257b"],"33e11d49e1ce128772bc8ecfdcf22b4ed0be0b37":["3100fa57deee363537557f82c2b38812a2576acc"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3100fa57deee363537557f82c2b38812a2576acc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4949836c6e83246ddba8997472e3333f40986c8c"]},"commit2Childs":{"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"566112f6115904d848cbf09462ebd8bf1304257b":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","4949836c6e83246ddba8997472e3333f40986c8c"],"3100fa57deee363537557f82c2b38812a2576acc":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","566112f6115904d848cbf09462ebd8bf1304257b","33e11d49e1ce128772bc8ecfdcf22b4ed0be0b37","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9272a617a9cbebf86be127014bbbacd7cf8f8e83":["3100fa57deee363537557f82c2b38812a2576acc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9272a617a9cbebf86be127014bbbacd7cf8f8e83","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4949836c6e83246ddba8997472e3333f40986c8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"33e11d49e1ce128772bc8ecfdcf22b4ed0be0b37":["566112f6115904d848cbf09462ebd8bf1304257b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}