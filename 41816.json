{"path":"solr/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    \n    // Initialize the solr config\n    SolrResourceLoader solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n    SolrConfig config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n    IndexSchema schema = null;\n    if(indexSchemaCache != null){\n      //schema sharing is enabled. so check if it already is loaded\n      File schemaFile = new File(dcore.getSchemaName());\n      if (!schemaFile.isAbsolute()) {\n        schemaFile = new File(solrLoader.getInstanceDir() + \"conf\" + File.separator + dcore.getSchemaName());\n      }\n      if(schemaFile. exists()){\n        String key = schemaFile.getAbsolutePath()+\":\"+new SimpleDateFormat(\"yyyyMMddhhmmss\").format(new Date(schemaFile.lastModified()));\n        schema = indexSchemaCache.get(key);\n        if(schema == null){\n          log.info(\"creating new schema object for core: \" + dcore.name);\n          schema = new IndexSchema(config, dcore.getSchemaName(), null);\n          indexSchemaCache.put(key,schema);\n        } else {\n          log.info(\"re-using schema object for core: \" + dcore.name);\n        }\n      }\n    }\n    if(schema == null){\n      schema = new IndexSchema(config, dcore.getSchemaName(), null);\n    }\n    SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n    return core;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    \n    // Initialize the solr config\n    SolrResourceLoader solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n    SolrConfig config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n    IndexSchema schema = null;\n    if(indexSchemaCache != null){\n      //schema sharing is enabled. so check if it already is loaded\n      File schemaFile = new File(dcore.getSchemaName());\n      if (!schemaFile.isAbsolute()) {\n        schemaFile = new File(solrLoader.getInstanceDir() + \"conf\" + File.separator + dcore.getSchemaName());\n      }\n      if(schemaFile. exists()){\n        String key = schemaFile.getAbsolutePath()+\":\"+new SimpleDateFormat(\"yyyyMMddhhmmss\").format(new Date(schemaFile.lastModified()));\n        schema = indexSchemaCache.get(key);\n        if(schema == null){\n          log.info(\"creating new schema object for core: \" + dcore.name);\n          schema = new IndexSchema(config, dcore.getSchemaName(), null);\n          indexSchemaCache.put(key,schema);\n        } else {\n          log.info(\"re-using schema object for core: \" + dcore.name);\n        }\n      }\n    }\n    if(schema == null){\n      schema = new IndexSchema(config, dcore.getSchemaName(), null);\n    }\n    SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n    return core;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","sourceNew":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    \n    // Initialize the solr config\n    SolrResourceLoader solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n    SolrConfig config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n\n    if (config.getBool(\"abortOnConfigurationError\",defaultAbortOnConfigError)) {\n      numCoresAbortOnConfigError++;\n    }\n    \n    IndexSchema schema = null;\n    if(indexSchemaCache != null){\n      //schema sharing is enabled. so check if it already is loaded\n      File schemaFile = new File(dcore.getSchemaName());\n      if (!schemaFile.isAbsolute()) {\n        schemaFile = new File(solrLoader.getInstanceDir() + \"conf\" + File.separator + dcore.getSchemaName());\n      }\n      if(schemaFile. exists()){\n        String key = schemaFile.getAbsolutePath()+\":\"+new SimpleDateFormat(\"yyyyMMddhhmmss\").format(new Date(schemaFile.lastModified()));\n        schema = indexSchemaCache.get(key);\n        if(schema == null){\n          log.info(\"creating new schema object for core: \" + dcore.name);\n          schema = new IndexSchema(config, dcore.getSchemaName(), null);\n          indexSchemaCache.put(key,schema);\n        } else {\n          log.info(\"re-using schema object for core: \" + dcore.name);\n        }\n      }\n    }\n    if(schema == null){\n      schema = new IndexSchema(config, dcore.getSchemaName(), null);\n    }\n    SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n    return core;\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    \n    // Initialize the solr config\n    SolrResourceLoader solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n    SolrConfig config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n\n    if (config.getBool(\"abortOnConfigurationError\",defaultAbortOnConfigError)) {\n      numCoresAbortOnConfigError++;\n    }\n    \n    IndexSchema schema = null;\n    if(indexSchemaCache != null){\n      //schema sharing is enabled. so check if it already is loaded\n      File schemaFile = new File(dcore.getSchemaName());\n      if (!schemaFile.isAbsolute()) {\n        schemaFile = new File(solrLoader.getInstanceDir() + \"conf\" + File.separator + dcore.getSchemaName());\n      }\n      if(schemaFile. exists()){\n        String key = schemaFile.getAbsolutePath()+\":\"+new SimpleDateFormat(\"yyyyMMddhhmmss\").format(new Date(schemaFile.lastModified()));\n        schema = indexSchemaCache.get(key);\n        if(schema == null){\n          log.info(\"creating new schema object for core: \" + dcore.name);\n          schema = new IndexSchema(config, dcore.getSchemaName(), null);\n          indexSchemaCache.put(key,schema);\n        } else {\n          log.info(\"re-using schema object for core: \" + dcore.name);\n        }\n      }\n    }\n    if(schema == null){\n      schema = new IndexSchema(config, dcore.getSchemaName(), null);\n    }\n    SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n    return core;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    \n    // Initialize the solr config\n    SolrResourceLoader solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n    SolrConfig config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n\n    if (config.getBool(\"abortOnConfigurationError\",defaultAbortOnConfigError)) {\n      numCoresAbortOnConfigError++;\n    }\n    \n    IndexSchema schema = null;\n    if(indexSchemaCache != null){\n      //schema sharing is enabled. so check if it already is loaded\n      File schemaFile = new File(dcore.getSchemaName());\n      if (!schemaFile.isAbsolute()) {\n        schemaFile = new File(solrLoader.getInstanceDir() + \"conf\" + File.separator + dcore.getSchemaName());\n      }\n      if(schemaFile. exists()){\n        String key = schemaFile.getAbsolutePath()+\":\"+new SimpleDateFormat(\"yyyyMMddhhmmss\").format(new Date(schemaFile.lastModified()));\n        schema = indexSchemaCache.get(key);\n        if(schema == null){\n          log.info(\"creating new schema object for core: \" + dcore.name);\n          schema = new IndexSchema(config, dcore.getSchemaName(), null);\n          indexSchemaCache.put(key,schema);\n        } else {\n          log.info(\"re-using schema object for core: \" + dcore.name);\n        }\n      }\n    }\n    if(schema == null){\n      schema = new IndexSchema(config, dcore.getSchemaName(), null);\n    }\n    SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n    return core;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"08fd846faeaddb28f2b20f569afe4f79b394f62d","date":1274127743,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","sourceNew":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    \n    // Initialize the solr config\n    SolrResourceLoader solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n    SolrConfig config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n\n    if (config.getBool(\"abortOnConfigurationError\",defaultAbortOnConfigError)) {\n      numCoresAbortOnConfigError++;\n    }\n    \n    IndexSchema schema = null;\n    if(indexSchemaCache != null){\n      //schema sharing is enabled. so check if it already is loaded\n      File schemaFile = new File(dcore.getSchemaName());\n      if (!schemaFile.isAbsolute()) {\n        schemaFile = new File(solrLoader.getInstanceDir() + \"conf\" + File.separator + dcore.getSchemaName());\n      }\n      if(schemaFile. exists()){\n        String key = schemaFile.getAbsolutePath()+\":\"+new SimpleDateFormat(\"yyyyMMddhhmmss\", Locale.US).format(new Date(schemaFile.lastModified()));\n        schema = indexSchemaCache.get(key);\n        if(schema == null){\n          log.info(\"creating new schema object for core: \" + dcore.name);\n          schema = new IndexSchema(config, dcore.getSchemaName(), null);\n          indexSchemaCache.put(key,schema);\n        } else {\n          log.info(\"re-using schema object for core: \" + dcore.name);\n        }\n      }\n    }\n    if(schema == null){\n      schema = new IndexSchema(config, dcore.getSchemaName(), null);\n    }\n    SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n    return core;\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    \n    // Initialize the solr config\n    SolrResourceLoader solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n    SolrConfig config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n\n    if (config.getBool(\"abortOnConfigurationError\",defaultAbortOnConfigError)) {\n      numCoresAbortOnConfigError++;\n    }\n    \n    IndexSchema schema = null;\n    if(indexSchemaCache != null){\n      //schema sharing is enabled. so check if it already is loaded\n      File schemaFile = new File(dcore.getSchemaName());\n      if (!schemaFile.isAbsolute()) {\n        schemaFile = new File(solrLoader.getInstanceDir() + \"conf\" + File.separator + dcore.getSchemaName());\n      }\n      if(schemaFile. exists()){\n        String key = schemaFile.getAbsolutePath()+\":\"+new SimpleDateFormat(\"yyyyMMddhhmmss\").format(new Date(schemaFile.lastModified()));\n        schema = indexSchemaCache.get(key);\n        if(schema == null){\n          log.info(\"creating new schema object for core: \" + dcore.name);\n          schema = new IndexSchema(config, dcore.getSchemaName(), null);\n          indexSchemaCache.put(key,schema);\n        } else {\n          log.info(\"re-using schema object for core: \" + dcore.name);\n        }\n      }\n    }\n    if(schema == null){\n      schema = new IndexSchema(config, dcore.getSchemaName(), null);\n    }\n    SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n    return core;\n  }\n\n","bugFix":["cdc01831d23fd34cb2b98b30d3b4db6131757ef0"],"bugIntro":["ce4f4cd63a3b30258a41e4c2022211e72e697d20"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0aea57ab530d174e645bf6e14d04db1e243e13d7","date":1274216848,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","sourceNew":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    \n    // Initialize the solr config\n    SolrResourceLoader solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n    SolrConfig config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n\n    IndexSchema schema = null;\n    if(indexSchemaCache != null){\n      //schema sharing is enabled. so check if it already is loaded\n      File schemaFile = new File(dcore.getSchemaName());\n      if (!schemaFile.isAbsolute()) {\n        schemaFile = new File(solrLoader.getInstanceDir() + \"conf\" + File.separator + dcore.getSchemaName());\n      }\n      if(schemaFile. exists()){\n        String key = schemaFile.getAbsolutePath()+\":\"+new SimpleDateFormat(\"yyyyMMddhhmmss\", Locale.US).format(new Date(schemaFile.lastModified()));\n        schema = indexSchemaCache.get(key);\n        if(schema == null){\n          log.info(\"creating new schema object for core: \" + dcore.name);\n          schema = new IndexSchema(config, dcore.getSchemaName(), null);\n          indexSchemaCache.put(key,schema);\n        } else {\n          log.info(\"re-using schema object for core: \" + dcore.name);\n        }\n      }\n    }\n    if(schema == null){\n      schema = new IndexSchema(config, dcore.getSchemaName(), null);\n    }\n    SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n    return core;\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    \n    // Initialize the solr config\n    SolrResourceLoader solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n    SolrConfig config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n\n    if (config.getBool(\"abortOnConfigurationError\",defaultAbortOnConfigError)) {\n      numCoresAbortOnConfigError++;\n    }\n    \n    IndexSchema schema = null;\n    if(indexSchemaCache != null){\n      //schema sharing is enabled. so check if it already is loaded\n      File schemaFile = new File(dcore.getSchemaName());\n      if (!schemaFile.isAbsolute()) {\n        schemaFile = new File(solrLoader.getInstanceDir() + \"conf\" + File.separator + dcore.getSchemaName());\n      }\n      if(schemaFile. exists()){\n        String key = schemaFile.getAbsolutePath()+\":\"+new SimpleDateFormat(\"yyyyMMddhhmmss\", Locale.US).format(new Date(schemaFile.lastModified()));\n        schema = indexSchemaCache.get(key);\n        if(schema == null){\n          log.info(\"creating new schema object for core: \" + dcore.name);\n          schema = new IndexSchema(config, dcore.getSchemaName(), null);\n          indexSchemaCache.put(key,schema);\n        } else {\n          log.info(\"re-using schema object for core: \" + dcore.name);\n        }\n      }\n    }\n    if(schema == null){\n      schema = new IndexSchema(config, dcore.getSchemaName(), null);\n    }\n    SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n    return core;\n  }\n\n","bugFix":["e90d4b14ac52c437faaf05e0b0523f83bc4cf65f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ce4f4cd63a3b30258a41e4c2022211e72e697d20","date":1279175542,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","sourceNew":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    \n    // Initialize the solr config\n    SolrResourceLoader solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n    SolrConfig config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n\n    IndexSchema schema = null;\n    if(indexSchemaCache != null){\n      //schema sharing is enabled. so check if it already is loaded\n      File schemaFile = new File(dcore.getSchemaName());\n      if (!schemaFile.isAbsolute()) {\n        schemaFile = new File(solrLoader.getInstanceDir() + \"conf\" + File.separator + dcore.getSchemaName());\n      }\n      if(schemaFile. exists()){\n        String key = schemaFile.getAbsolutePath()+\":\"+new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.US).format(new Date(schemaFile.lastModified()));\n        schema = indexSchemaCache.get(key);\n        if(schema == null){\n          log.info(\"creating new schema object for core: \" + dcore.name);\n          schema = new IndexSchema(config, dcore.getSchemaName(), null);\n          indexSchemaCache.put(key,schema);\n        } else {\n          log.info(\"re-using schema object for core: \" + dcore.name);\n        }\n      }\n    }\n    if(schema == null){\n      schema = new IndexSchema(config, dcore.getSchemaName(), null);\n    }\n    SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n    return core;\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    \n    // Initialize the solr config\n    SolrResourceLoader solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n    SolrConfig config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n\n    IndexSchema schema = null;\n    if(indexSchemaCache != null){\n      //schema sharing is enabled. so check if it already is loaded\n      File schemaFile = new File(dcore.getSchemaName());\n      if (!schemaFile.isAbsolute()) {\n        schemaFile = new File(solrLoader.getInstanceDir() + \"conf\" + File.separator + dcore.getSchemaName());\n      }\n      if(schemaFile. exists()){\n        String key = schemaFile.getAbsolutePath()+\":\"+new SimpleDateFormat(\"yyyyMMddhhmmss\", Locale.US).format(new Date(schemaFile.lastModified()));\n        schema = indexSchemaCache.get(key);\n        if(schema == null){\n          log.info(\"creating new schema object for core: \" + dcore.name);\n          schema = new IndexSchema(config, dcore.getSchemaName(), null);\n          indexSchemaCache.put(key,schema);\n        } else {\n          log.info(\"re-using schema object for core: \" + dcore.name);\n        }\n      }\n    }\n    if(schema == null){\n      schema = new IndexSchema(config, dcore.getSchemaName(), null);\n    }\n    SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n    return core;\n  }\n\n","bugFix":["08fd846faeaddb28f2b20f569afe4f79b394f62d"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","sourceNew":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    \n    // Initialize the solr config\n    SolrResourceLoader solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n    SolrConfig config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n\n    IndexSchema schema = null;\n    if(indexSchemaCache != null){\n      //schema sharing is enabled. so check if it already is loaded\n      File schemaFile = new File(dcore.getSchemaName());\n      if (!schemaFile.isAbsolute()) {\n        schemaFile = new File(solrLoader.getInstanceDir() + \"conf\" + File.separator + dcore.getSchemaName());\n      }\n      if(schemaFile. exists()){\n        String key = schemaFile.getAbsolutePath()+\":\"+new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.US).format(new Date(schemaFile.lastModified()));\n        schema = indexSchemaCache.get(key);\n        if(schema == null){\n          log.info(\"creating new schema object for core: \" + dcore.name);\n          schema = new IndexSchema(config, dcore.getSchemaName(), null);\n          indexSchemaCache.put(key,schema);\n        } else {\n          log.info(\"re-using schema object for core: \" + dcore.name);\n        }\n      }\n    }\n    if(schema == null){\n      schema = new IndexSchema(config, dcore.getSchemaName(), null);\n    }\n    SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n    return core;\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    \n    // Initialize the solr config\n    SolrResourceLoader solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n    SolrConfig config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n\n    IndexSchema schema = null;\n    if(indexSchemaCache != null){\n      //schema sharing is enabled. so check if it already is loaded\n      File schemaFile = new File(dcore.getSchemaName());\n      if (!schemaFile.isAbsolute()) {\n        schemaFile = new File(solrLoader.getInstanceDir() + \"conf\" + File.separator + dcore.getSchemaName());\n      }\n      if(schemaFile. exists()){\n        String key = schemaFile.getAbsolutePath()+\":\"+new SimpleDateFormat(\"yyyyMMddhhmmss\", Locale.US).format(new Date(schemaFile.lastModified()));\n        schema = indexSchemaCache.get(key);\n        if(schema == null){\n          log.info(\"creating new schema object for core: \" + dcore.name);\n          schema = new IndexSchema(config, dcore.getSchemaName(), null);\n          indexSchemaCache.put(key,schema);\n        } else {\n          log.info(\"re-using schema object for core: \" + dcore.name);\n        }\n      }\n    }\n    if(schema == null){\n      schema = new IndexSchema(config, dcore.getSchemaName(), null);\n    }\n    SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n    return core;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43adc163640856c8b07e4cf1b2046c9af56d3ae7","date":1286989273,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","sourceNew":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    \n    // Initialize the solr config\n    SolrResourceLoader solrLoader = null;\n    \n    SolrConfig config = null;\n    String zkConfigName = null;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n      config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n    } else {\n      try {\n        String collection = dcore.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n        // zkController.createCollectionZkNode(collection);\n        zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()), zkController);\n        config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    IndexSchema schema = null;\n    if (indexSchemaCache != null) {\n      if (zkController != null) {\n        File schemaFile = new File(dcore.getSchemaName());\n        if (!schemaFile.isAbsolute()) {\n          schemaFile = new File(solrLoader.getInstanceDir() + \"conf\"\n              + File.separator + dcore.getSchemaName());\n        }\n        if (schemaFile.exists()) {\n          String key = schemaFile.getAbsolutePath()\n              + \":\"\n              + new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.US).format(new Date(\n                  schemaFile.lastModified()));\n          schema = indexSchemaCache.get(key);\n          if (schema == null) {\n            log.info(\"creating new schema object for core: \" + dcore.name);\n            schema = new IndexSchema(config, dcore.getSchemaName(), null);\n            indexSchemaCache.put(key, schema);\n          } else {\n            log.info(\"re-using schema object for core: \" + dcore.name);\n          }\n        }\n      } else {\n        // TODO: handle caching from ZooKeeper - perhaps using ZooKeepers versioning\n        // Don't like this cache though - how does it empty as last modified changes?\n      }\n    }\n    if(schema == null){\n      if(zkController != null) {\n        try {\n          schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n      } else {\n        schema = new IndexSchema(config, dcore.getSchemaName(), null);\n      }\n    }\n    String dataDir = null;\n\n    SolrCore core = new SolrCore(dcore.getName(), dataDir, config, schema, dcore);\n    return core;\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    \n    // Initialize the solr config\n    SolrResourceLoader solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n    SolrConfig config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n\n    IndexSchema schema = null;\n    if(indexSchemaCache != null){\n      //schema sharing is enabled. so check if it already is loaded\n      File schemaFile = new File(dcore.getSchemaName());\n      if (!schemaFile.isAbsolute()) {\n        schemaFile = new File(solrLoader.getInstanceDir() + \"conf\" + File.separator + dcore.getSchemaName());\n      }\n      if(schemaFile. exists()){\n        String key = schemaFile.getAbsolutePath()+\":\"+new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.US).format(new Date(schemaFile.lastModified()));\n        schema = indexSchemaCache.get(key);\n        if(schema == null){\n          log.info(\"creating new schema object for core: \" + dcore.name);\n          schema = new IndexSchema(config, dcore.getSchemaName(), null);\n          indexSchemaCache.put(key,schema);\n        } else {\n          log.info(\"re-using schema object for core: \" + dcore.name);\n        }\n      }\n    }\n    if(schema == null){\n      schema = new IndexSchema(config, dcore.getSchemaName(), null);\n    }\n    SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n    return core;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","sourceNew":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    \n    // Initialize the solr config\n    SolrResourceLoader solrLoader = null;\n    \n    SolrConfig config = null;\n    String zkConfigName = null;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n      config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n    } else {\n      try {\n        String collection = dcore.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n        // zkController.createCollectionZkNode(collection);\n        zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()), zkController);\n        config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    IndexSchema schema = null;\n    if (indexSchemaCache != null) {\n      if (zkController != null) {\n        File schemaFile = new File(dcore.getSchemaName());\n        if (!schemaFile.isAbsolute()) {\n          schemaFile = new File(solrLoader.getInstanceDir() + \"conf\"\n              + File.separator + dcore.getSchemaName());\n        }\n        if (schemaFile.exists()) {\n          String key = schemaFile.getAbsolutePath()\n              + \":\"\n              + new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.US).format(new Date(\n                  schemaFile.lastModified()));\n          schema = indexSchemaCache.get(key);\n          if (schema == null) {\n            log.info(\"creating new schema object for core: \" + dcore.name);\n            schema = new IndexSchema(config, dcore.getSchemaName(), null);\n            indexSchemaCache.put(key, schema);\n          } else {\n            log.info(\"re-using schema object for core: \" + dcore.name);\n          }\n        }\n      } else {\n        // TODO: handle caching from ZooKeeper - perhaps using ZooKeepers versioning\n        // Don't like this cache though - how does it empty as last modified changes?\n      }\n    }\n    if(schema == null){\n      if(zkController != null) {\n        try {\n          schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n      } else {\n        schema = new IndexSchema(config, dcore.getSchemaName(), null);\n      }\n    }\n    String dataDir = null;\n\n    SolrCore core = new SolrCore(dcore.getName(), dataDir, config, schema, dcore);\n    return core;\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    \n    // Initialize the solr config\n    SolrResourceLoader solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n    SolrConfig config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n\n    IndexSchema schema = null;\n    if(indexSchemaCache != null){\n      //schema sharing is enabled. so check if it already is loaded\n      File schemaFile = new File(dcore.getSchemaName());\n      if (!schemaFile.isAbsolute()) {\n        schemaFile = new File(solrLoader.getInstanceDir() + \"conf\" + File.separator + dcore.getSchemaName());\n      }\n      if(schemaFile. exists()){\n        String key = schemaFile.getAbsolutePath()+\":\"+new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.US).format(new Date(schemaFile.lastModified()));\n        schema = indexSchemaCache.get(key);\n        if(schema == null){\n          log.info(\"creating new schema object for core: \" + dcore.name);\n          schema = new IndexSchema(config, dcore.getSchemaName(), null);\n          indexSchemaCache.put(key,schema);\n        } else {\n          log.info(\"re-using schema object for core: \" + dcore.name);\n        }\n      }\n    }\n    if(schema == null){\n      schema = new IndexSchema(config, dcore.getSchemaName(), null);\n    }\n    SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n    return core;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","sourceNew":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    \n    // Initialize the solr config\n    SolrResourceLoader solrLoader = null;\n    \n    SolrConfig config = null;\n    String zkConfigName = null;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n      config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n    } else {\n      try {\n        String collection = dcore.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n        // zkController.createCollectionZkNode(collection);\n        zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()), zkController);\n        config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    IndexSchema schema = null;\n    if (indexSchemaCache != null) {\n      if (zkController != null) {\n        File schemaFile = new File(dcore.getSchemaName());\n        if (!schemaFile.isAbsolute()) {\n          schemaFile = new File(solrLoader.getInstanceDir() + \"conf\"\n              + File.separator + dcore.getSchemaName());\n        }\n        if (schemaFile.exists()) {\n          String key = schemaFile.getAbsolutePath()\n              + \":\"\n              + new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.US).format(new Date(\n                  schemaFile.lastModified()));\n          schema = indexSchemaCache.get(key);\n          if (schema == null) {\n            log.info(\"creating new schema object for core: \" + dcore.name);\n            schema = new IndexSchema(config, dcore.getSchemaName(), null);\n            indexSchemaCache.put(key, schema);\n          } else {\n            log.info(\"re-using schema object for core: \" + dcore.name);\n          }\n        }\n      } else {\n        // TODO: handle caching from ZooKeeper - perhaps using ZooKeepers versioning\n        // Don't like this cache though - how does it empty as last modified changes?\n      }\n    }\n    if(schema == null){\n      if(zkController != null) {\n        try {\n          schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n      } else {\n        schema = new IndexSchema(config, dcore.getSchemaName(), null);\n      }\n    }\n    String dataDir = null;\n\n    SolrCore core = new SolrCore(dcore.getName(), dataDir, config, schema, dcore);\n    return core;\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    \n    // Initialize the solr config\n    SolrResourceLoader solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n    SolrConfig config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n\n    IndexSchema schema = null;\n    if(indexSchemaCache != null){\n      //schema sharing is enabled. so check if it already is loaded\n      File schemaFile = new File(dcore.getSchemaName());\n      if (!schemaFile.isAbsolute()) {\n        schemaFile = new File(solrLoader.getInstanceDir() + \"conf\" + File.separator + dcore.getSchemaName());\n      }\n      if(schemaFile. exists()){\n        String key = schemaFile.getAbsolutePath()+\":\"+new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.US).format(new Date(schemaFile.lastModified()));\n        schema = indexSchemaCache.get(key);\n        if(schema == null){\n          log.info(\"creating new schema object for core: \" + dcore.name);\n          schema = new IndexSchema(config, dcore.getSchemaName(), null);\n          indexSchemaCache.put(key,schema);\n        } else {\n          log.info(\"re-using schema object for core: \" + dcore.name);\n        }\n      }\n    }\n    if(schema == null){\n      schema = new IndexSchema(config, dcore.getSchemaName(), null);\n    }\n    SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n    return core;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a71a0b2d4be2299a163f60626729852d81a8e02","date":1309442399,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","sourceNew":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    \n    // Initialize the solr config\n    SolrResourceLoader solrLoader = null;\n    \n    SolrConfig config = null;\n    String zkConfigName = null;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n      config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n    } else {\n      try {\n        String collection = dcore.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n        // zkController.createCollectionZkNode(collection);\n        zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()), zkController);\n        config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    IndexSchema schema = null;\n    if (indexSchemaCache != null) {\n      if (zkController != null) {\n        File schemaFile = new File(dcore.getSchemaName());\n        if (!schemaFile.isAbsolute()) {\n          schemaFile = new File(solrLoader.getInstanceDir() + \"conf\"\n              + File.separator + dcore.getSchemaName());\n        }\n        if (schemaFile.exists()) {\n          String key = schemaFile.getAbsolutePath()\n              + \":\"\n              + new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.US).format(new Date(\n                  schemaFile.lastModified()));\n          schema = indexSchemaCache.get(key);\n          if (schema == null) {\n            log.info(\"creating new schema object for core: \" + dcore.name);\n            schema = new IndexSchema(config, dcore.getSchemaName(), null);\n            indexSchemaCache.put(key, schema);\n          } else {\n            log.info(\"re-using schema object for core: \" + dcore.name);\n          }\n        }\n      } else {\n        // TODO: handle caching from ZooKeeper - perhaps using ZooKeepers versioning\n        // Don't like this cache though - how does it empty as last modified changes?\n      }\n    }\n    if(schema == null){\n      if(zkController != null) {\n        try {\n          schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n      } else {\n        schema = new IndexSchema(config, dcore.getSchemaName(), null);\n      }\n    }\n\n    SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n    return core;\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    \n    // Initialize the solr config\n    SolrResourceLoader solrLoader = null;\n    \n    SolrConfig config = null;\n    String zkConfigName = null;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n      config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n    } else {\n      try {\n        String collection = dcore.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n        // zkController.createCollectionZkNode(collection);\n        zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()), zkController);\n        config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    IndexSchema schema = null;\n    if (indexSchemaCache != null) {\n      if (zkController != null) {\n        File schemaFile = new File(dcore.getSchemaName());\n        if (!schemaFile.isAbsolute()) {\n          schemaFile = new File(solrLoader.getInstanceDir() + \"conf\"\n              + File.separator + dcore.getSchemaName());\n        }\n        if (schemaFile.exists()) {\n          String key = schemaFile.getAbsolutePath()\n              + \":\"\n              + new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.US).format(new Date(\n                  schemaFile.lastModified()));\n          schema = indexSchemaCache.get(key);\n          if (schema == null) {\n            log.info(\"creating new schema object for core: \" + dcore.name);\n            schema = new IndexSchema(config, dcore.getSchemaName(), null);\n            indexSchemaCache.put(key, schema);\n          } else {\n            log.info(\"re-using schema object for core: \" + dcore.name);\n          }\n        }\n      } else {\n        // TODO: handle caching from ZooKeeper - perhaps using ZooKeepers versioning\n        // Don't like this cache though - how does it empty as last modified changes?\n      }\n    }\n    if(schema == null){\n      if(zkController != null) {\n        try {\n          schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n      } else {\n        schema = new IndexSchema(config, dcore.getSchemaName(), null);\n      }\n    }\n    String dataDir = null;\n\n    SolrCore core = new SolrCore(dcore.getName(), dataDir, config, schema, dcore);\n    return core;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","sourceNew":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    \n    // Initialize the solr config\n    SolrResourceLoader solrLoader = null;\n    \n    SolrConfig config = null;\n    String zkConfigName = null;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n      config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n    } else {\n      try {\n        String collection = dcore.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n        // zkController.createCollectionZkNode(collection);\n        zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()), zkController);\n        config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    IndexSchema schema = null;\n    if (indexSchemaCache != null) {\n      if (zkController != null) {\n        File schemaFile = new File(dcore.getSchemaName());\n        if (!schemaFile.isAbsolute()) {\n          schemaFile = new File(solrLoader.getInstanceDir() + \"conf\"\n              + File.separator + dcore.getSchemaName());\n        }\n        if (schemaFile.exists()) {\n          String key = schemaFile.getAbsolutePath()\n              + \":\"\n              + new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.US).format(new Date(\n                  schemaFile.lastModified()));\n          schema = indexSchemaCache.get(key);\n          if (schema == null) {\n            log.info(\"creating new schema object for core: \" + dcore.name);\n            schema = new IndexSchema(config, dcore.getSchemaName(), null);\n            indexSchemaCache.put(key, schema);\n          } else {\n            log.info(\"re-using schema object for core: \" + dcore.name);\n          }\n        }\n      } else {\n        // TODO: handle caching from ZooKeeper - perhaps using ZooKeepers versioning\n        // Don't like this cache though - how does it empty as last modified changes?\n      }\n    }\n    if(schema == null){\n      if(zkController != null) {\n        try {\n          schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n      } else {\n        schema = new IndexSchema(config, dcore.getSchemaName(), null);\n      }\n    }\n\n    SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n    return core;\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    \n    // Initialize the solr config\n    SolrResourceLoader solrLoader = null;\n    \n    SolrConfig config = null;\n    String zkConfigName = null;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n      config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n    } else {\n      try {\n        String collection = dcore.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n        // zkController.createCollectionZkNode(collection);\n        zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()), zkController);\n        config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    IndexSchema schema = null;\n    if (indexSchemaCache != null) {\n      if (zkController != null) {\n        File schemaFile = new File(dcore.getSchemaName());\n        if (!schemaFile.isAbsolute()) {\n          schemaFile = new File(solrLoader.getInstanceDir() + \"conf\"\n              + File.separator + dcore.getSchemaName());\n        }\n        if (schemaFile.exists()) {\n          String key = schemaFile.getAbsolutePath()\n              + \":\"\n              + new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.US).format(new Date(\n                  schemaFile.lastModified()));\n          schema = indexSchemaCache.get(key);\n          if (schema == null) {\n            log.info(\"creating new schema object for core: \" + dcore.name);\n            schema = new IndexSchema(config, dcore.getSchemaName(), null);\n            indexSchemaCache.put(key, schema);\n          } else {\n            log.info(\"re-using schema object for core: \" + dcore.name);\n          }\n        }\n      } else {\n        // TODO: handle caching from ZooKeeper - perhaps using ZooKeepers versioning\n        // Don't like this cache though - how does it empty as last modified changes?\n      }\n    }\n    if(schema == null){\n      if(zkController != null) {\n        try {\n          schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n      } else {\n        schema = new IndexSchema(config, dcore.getSchemaName(), null);\n      }\n    }\n    String dataDir = null;\n\n    SolrCore core = new SolrCore(dcore.getName(), dataDir, config, schema, dcore);\n    return core;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","sourceNew":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    \n    // Initialize the solr config\n    SolrResourceLoader solrLoader = null;\n    \n    SolrConfig config = null;\n    String zkConfigName = null;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n      config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n    } else {\n      try {\n        String collection = dcore.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n        // zkController.createCollectionZkNode(collection);\n        zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()), zkController);\n        config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    IndexSchema schema = null;\n    if (indexSchemaCache != null) {\n      if (zkController != null) {\n        File schemaFile = new File(dcore.getSchemaName());\n        if (!schemaFile.isAbsolute()) {\n          schemaFile = new File(solrLoader.getInstanceDir() + \"conf\"\n              + File.separator + dcore.getSchemaName());\n        }\n        if (schemaFile.exists()) {\n          String key = schemaFile.getAbsolutePath()\n              + \":\"\n              + new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.US).format(new Date(\n                  schemaFile.lastModified()));\n          schema = indexSchemaCache.get(key);\n          if (schema == null) {\n            log.info(\"creating new schema object for core: \" + dcore.name);\n            schema = new IndexSchema(config, dcore.getSchemaName(), null);\n            indexSchemaCache.put(key, schema);\n          } else {\n            log.info(\"re-using schema object for core: \" + dcore.name);\n          }\n        }\n      } else {\n        // TODO: handle caching from ZooKeeper - perhaps using ZooKeepers versioning\n        // Don't like this cache though - how does it empty as last modified changes?\n      }\n    }\n    if(schema == null){\n      if(zkController != null) {\n        try {\n          schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n      } else {\n        schema = new IndexSchema(config, dcore.getSchemaName(), null);\n      }\n    }\n\n    SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n    return core;\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    \n    // Initialize the solr config\n    SolrResourceLoader solrLoader = null;\n    \n    SolrConfig config = null;\n    String zkConfigName = null;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n      config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n    } else {\n      try {\n        String collection = dcore.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n        // zkController.createCollectionZkNode(collection);\n        zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()), zkController);\n        config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    IndexSchema schema = null;\n    if (indexSchemaCache != null) {\n      if (zkController != null) {\n        File schemaFile = new File(dcore.getSchemaName());\n        if (!schemaFile.isAbsolute()) {\n          schemaFile = new File(solrLoader.getInstanceDir() + \"conf\"\n              + File.separator + dcore.getSchemaName());\n        }\n        if (schemaFile.exists()) {\n          String key = schemaFile.getAbsolutePath()\n              + \":\"\n              + new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.US).format(new Date(\n                  schemaFile.lastModified()));\n          schema = indexSchemaCache.get(key);\n          if (schema == null) {\n            log.info(\"creating new schema object for core: \" + dcore.name);\n            schema = new IndexSchema(config, dcore.getSchemaName(), null);\n            indexSchemaCache.put(key, schema);\n          } else {\n            log.info(\"re-using schema object for core: \" + dcore.name);\n          }\n        }\n      } else {\n        // TODO: handle caching from ZooKeeper - perhaps using ZooKeepers versioning\n        // Don't like this cache though - how does it empty as last modified changes?\n      }\n    }\n    if(schema == null){\n      if(zkController != null) {\n        try {\n          schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n      } else {\n        schema = new IndexSchema(config, dcore.getSchemaName(), null);\n      }\n    }\n    String dataDir = null;\n\n    SolrCore core = new SolrCore(dcore.getName(), dataDir, config, schema, dcore);\n    return core;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","sourceNew":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    \n    // Initialize the solr config\n    SolrResourceLoader solrLoader = null;\n    \n    SolrConfig config = null;\n    String zkConfigName = null;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n      config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n    } else {\n      try {\n        String collection = dcore.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n        // zkController.createCollectionZkNode(collection);\n        zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()), zkController);\n        config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    IndexSchema schema = null;\n    if (indexSchemaCache != null) {\n      if (zkController != null) {\n        File schemaFile = new File(dcore.getSchemaName());\n        if (!schemaFile.isAbsolute()) {\n          schemaFile = new File(solrLoader.getInstanceDir() + \"conf\"\n              + File.separator + dcore.getSchemaName());\n        }\n        if (schemaFile.exists()) {\n          String key = schemaFile.getAbsolutePath()\n              + \":\"\n              + new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.US).format(new Date(\n                  schemaFile.lastModified()));\n          schema = indexSchemaCache.get(key);\n          if (schema == null) {\n            log.info(\"creating new schema object for core: \" + dcore.name);\n            schema = new IndexSchema(config, dcore.getSchemaName(), null);\n            indexSchemaCache.put(key, schema);\n          } else {\n            log.info(\"re-using schema object for core: \" + dcore.name);\n          }\n        }\n      } else {\n        // TODO: handle caching from ZooKeeper - perhaps using ZooKeepers versioning\n        // Don't like this cache though - how does it empty as last modified changes?\n      }\n    }\n    if(schema == null){\n      if(zkController != null) {\n        try {\n          schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n      } else {\n        schema = new IndexSchema(config, dcore.getSchemaName(), null);\n      }\n    }\n\n    SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n    return core;\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    \n    // Initialize the solr config\n    SolrResourceLoader solrLoader = null;\n    \n    SolrConfig config = null;\n    String zkConfigName = null;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n      config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n    } else {\n      try {\n        String collection = dcore.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n        // zkController.createCollectionZkNode(collection);\n        zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()), zkController);\n        config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    IndexSchema schema = null;\n    if (indexSchemaCache != null) {\n      if (zkController != null) {\n        File schemaFile = new File(dcore.getSchemaName());\n        if (!schemaFile.isAbsolute()) {\n          schemaFile = new File(solrLoader.getInstanceDir() + \"conf\"\n              + File.separator + dcore.getSchemaName());\n        }\n        if (schemaFile.exists()) {\n          String key = schemaFile.getAbsolutePath()\n              + \":\"\n              + new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.US).format(new Date(\n                  schemaFile.lastModified()));\n          schema = indexSchemaCache.get(key);\n          if (schema == null) {\n            log.info(\"creating new schema object for core: \" + dcore.name);\n            schema = new IndexSchema(config, dcore.getSchemaName(), null);\n            indexSchemaCache.put(key, schema);\n          } else {\n            log.info(\"re-using schema object for core: \" + dcore.name);\n          }\n        }\n      } else {\n        // TODO: handle caching from ZooKeeper - perhaps using ZooKeepers versioning\n        // Don't like this cache though - how does it empty as last modified changes?\n      }\n    }\n    if(schema == null){\n      if(zkController != null) {\n        try {\n          schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n      } else {\n        schema = new IndexSchema(config, dcore.getSchemaName(), null);\n      }\n    }\n\n    SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n    return core;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","sourceNew":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    \n    // Initialize the solr config\n    SolrResourceLoader solrLoader = null;\n    \n    SolrConfig config = null;\n    String zkConfigName = null;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n      config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n    } else {\n      try {\n        String collection = dcore.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n        // zkController.createCollectionZkNode(collection);\n        zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()), zkController);\n        config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    IndexSchema schema = null;\n    if (indexSchemaCache != null) {\n      if (zkController != null) {\n        File schemaFile = new File(dcore.getSchemaName());\n        if (!schemaFile.isAbsolute()) {\n          schemaFile = new File(solrLoader.getInstanceDir() + \"conf\"\n              + File.separator + dcore.getSchemaName());\n        }\n        if (schemaFile.exists()) {\n          String key = schemaFile.getAbsolutePath()\n              + \":\"\n              + new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.US).format(new Date(\n                  schemaFile.lastModified()));\n          schema = indexSchemaCache.get(key);\n          if (schema == null) {\n            log.info(\"creating new schema object for core: \" + dcore.name);\n            schema = new IndexSchema(config, dcore.getSchemaName(), null);\n            indexSchemaCache.put(key, schema);\n          } else {\n            log.info(\"re-using schema object for core: \" + dcore.name);\n          }\n        }\n      } else {\n        // TODO: handle caching from ZooKeeper - perhaps using ZooKeepers versioning\n        // Don't like this cache though - how does it empty as last modified changes?\n      }\n    }\n    if(schema == null){\n      if(zkController != null) {\n        try {\n          schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n      } else {\n        schema = new IndexSchema(config, dcore.getSchemaName(), null);\n      }\n    }\n\n    SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n    return core;\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    \n    // Initialize the solr config\n    SolrResourceLoader solrLoader = null;\n    \n    SolrConfig config = null;\n    String zkConfigName = null;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n      config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n    } else {\n      try {\n        String collection = dcore.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n        // zkController.createCollectionZkNode(collection);\n        zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()), zkController);\n        config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    IndexSchema schema = null;\n    if (indexSchemaCache != null) {\n      if (zkController != null) {\n        File schemaFile = new File(dcore.getSchemaName());\n        if (!schemaFile.isAbsolute()) {\n          schemaFile = new File(solrLoader.getInstanceDir() + \"conf\"\n              + File.separator + dcore.getSchemaName());\n        }\n        if (schemaFile.exists()) {\n          String key = schemaFile.getAbsolutePath()\n              + \":\"\n              + new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.US).format(new Date(\n                  schemaFile.lastModified()));\n          schema = indexSchemaCache.get(key);\n          if (schema == null) {\n            log.info(\"creating new schema object for core: \" + dcore.name);\n            schema = new IndexSchema(config, dcore.getSchemaName(), null);\n            indexSchemaCache.put(key, schema);\n          } else {\n            log.info(\"re-using schema object for core: \" + dcore.name);\n          }\n        }\n      } else {\n        // TODO: handle caching from ZooKeeper - perhaps using ZooKeepers versioning\n        // Don't like this cache though - how does it empty as last modified changes?\n      }\n    }\n    if(schema == null){\n      if(zkController != null) {\n        try {\n          schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n      } else {\n        schema = new IndexSchema(config, dcore.getSchemaName(), null);\n      }\n    }\n\n    SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n    return core;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#create(CoreDescriptor).mjava","sourceNew":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    \n    // Initialize the solr config\n    SolrResourceLoader solrLoader = null;\n    \n    SolrConfig config = null;\n    String zkConfigName = null;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n      config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n    } else {\n      try {\n        String collection = dcore.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n        // zkController.createCollectionZkNode(collection);\n        zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()), zkController);\n        config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    IndexSchema schema = null;\n    if (indexSchemaCache != null) {\n      if (zkController != null) {\n        File schemaFile = new File(dcore.getSchemaName());\n        if (!schemaFile.isAbsolute()) {\n          schemaFile = new File(solrLoader.getInstanceDir() + \"conf\"\n              + File.separator + dcore.getSchemaName());\n        }\n        if (schemaFile.exists()) {\n          String key = schemaFile.getAbsolutePath()\n              + \":\"\n              + new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.US).format(new Date(\n                  schemaFile.lastModified()));\n          schema = indexSchemaCache.get(key);\n          if (schema == null) {\n            log.info(\"creating new schema object for core: \" + dcore.name);\n            schema = new IndexSchema(config, dcore.getSchemaName(), null);\n            indexSchemaCache.put(key, schema);\n          } else {\n            log.info(\"re-using schema object for core: \" + dcore.name);\n          }\n        }\n      } else {\n        // TODO: handle caching from ZooKeeper - perhaps using ZooKeepers versioning\n        // Don't like this cache though - how does it empty as last modified changes?\n      }\n    }\n    if(schema == null){\n      if(zkController != null) {\n        try {\n          schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n      } else {\n        schema = new IndexSchema(config, dcore.getSchemaName(), null);\n      }\n    }\n\n    SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n    return core;\n  }\n\n","sourceOld":"  /**\n   * Creates a new core based on a descriptor but does not register it.\n   *\n   * @param dcore a core descriptor\n   * @return the newly created core\n   * @throws javax.xml.parsers.ParserConfigurationException\n   * @throws java.io.IOException\n   * @throws org.xml.sax.SAXException\n   */\n  public SolrCore create(CoreDescriptor dcore)  throws ParserConfigurationException, IOException, SAXException {\n    // Make the instanceDir relative to the cores instanceDir if not absolute\n    File idir = new File(dcore.getInstanceDir());\n    if (!idir.isAbsolute()) {\n      idir = new File(solrHome, dcore.getInstanceDir());\n    }\n    String instanceDir = idir.getPath();\n    \n    // Initialize the solr config\n    SolrResourceLoader solrLoader = null;\n    \n    SolrConfig config = null;\n    String zkConfigName = null;\n    if(zkController == null) {\n      solrLoader = new SolrResourceLoader(instanceDir, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()));\n      config = new SolrConfig(solrLoader, dcore.getConfigName(), null);\n    } else {\n      try {\n        String collection = dcore.getCloudDescriptor().getCollectionName();\n        zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n        // zkController.createCollectionZkNode(collection);\n        zkConfigName = zkController.readConfigName(collection);\n        if (zkConfigName == null) {\n          log.error(\"Could not find config name for collection:\" + collection);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Could not find config name for collection:\" + collection);\n        }\n        solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir, dcore.getPropertiesName(),dcore.getCoreProperties()), zkController);\n        config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n    IndexSchema schema = null;\n    if (indexSchemaCache != null) {\n      if (zkController != null) {\n        File schemaFile = new File(dcore.getSchemaName());\n        if (!schemaFile.isAbsolute()) {\n          schemaFile = new File(solrLoader.getInstanceDir() + \"conf\"\n              + File.separator + dcore.getSchemaName());\n        }\n        if (schemaFile.exists()) {\n          String key = schemaFile.getAbsolutePath()\n              + \":\"\n              + new SimpleDateFormat(\"yyyyMMddHHmmss\", Locale.US).format(new Date(\n                  schemaFile.lastModified()));\n          schema = indexSchemaCache.get(key);\n          if (schema == null) {\n            log.info(\"creating new schema object for core: \" + dcore.name);\n            schema = new IndexSchema(config, dcore.getSchemaName(), null);\n            indexSchemaCache.put(key, schema);\n          } else {\n            log.info(\"re-using schema object for core: \" + dcore.name);\n          }\n        }\n      } else {\n        // TODO: handle caching from ZooKeeper - perhaps using ZooKeepers versioning\n        // Don't like this cache though - how does it empty as last modified changes?\n      }\n    }\n    if(schema == null){\n      if(zkController != null) {\n        try {\n          schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n        } catch (KeeperException e) {\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        } catch (InterruptedException e) {\n          // Restore the interrupted status\n          Thread.currentThread().interrupt();\n          log.error(\"\", e);\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"\", e);\n        }\n      } else {\n        schema = new IndexSchema(config, dcore.getSchemaName(), null);\n      }\n    }\n\n    SolrCore core = new SolrCore(dcore.getName(), null, config, schema, dcore);\n    return core;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ce4f4cd63a3b30258a41e4c2022211e72e697d20":["0aea57ab530d174e645bf6e14d04db1e243e13d7"],"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["ce4f4cd63a3b30258a41e4c2022211e72e697d20"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["7a71a0b2d4be2299a163f60626729852d81a8e02","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5f4e87790277826a2aea119328600dfb07761f32":["0aea57ab530d174e645bf6e14d04db1e243e13d7","ce4f4cd63a3b30258a41e4c2022211e72e697d20"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["43adc163640856c8b07e4cf1b2046c9af56d3ae7","7a71a0b2d4be2299a163f60626729852d81a8e02"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["43adc163640856c8b07e4cf1b2046c9af56d3ae7","7a71a0b2d4be2299a163f60626729852d81a8e02"],"7a71a0b2d4be2299a163f60626729852d81a8e02":["43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"0aea57ab530d174e645bf6e14d04db1e243e13d7":["08fd846faeaddb28f2b20f569afe4f79b394f62d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"08fd846faeaddb28f2b20f569afe4f79b394f62d":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["7a71a0b2d4be2299a163f60626729852d81a8e02"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["ce4f4cd63a3b30258a41e4c2022211e72e697d20","43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"ce4f4cd63a3b30258a41e4c2022211e72e697d20":["43adc163640856c8b07e4cf1b2046c9af56d3ae7","5f4e87790277826a2aea119328600dfb07761f32","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","7a71a0b2d4be2299a163f60626729852d81a8e02","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"7a71a0b2d4be2299a163f60626729852d81a8e02":["c26f00b574427b55127e869b935845554afde1fa","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","a258fbb26824fd104ed795e5d9033d2d040049ee"],"1da8d55113b689b06716246649de6f62430f15c0":["08fd846faeaddb28f2b20f569afe4f79b394f62d"],"0aea57ab530d174e645bf6e14d04db1e243e13d7":["ce4f4cd63a3b30258a41e4c2022211e72e697d20","5f4e87790277826a2aea119328600dfb07761f32"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"08fd846faeaddb28f2b20f569afe4f79b394f62d":["0aea57ab530d174e645bf6e14d04db1e243e13d7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","a258fbb26824fd104ed795e5d9033d2d040049ee","4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}