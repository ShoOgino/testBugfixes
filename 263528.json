{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#CompressingStoredFieldsWriter(Directory,SegmentInfo,IOContext,CompressionMode,int).mjava","commits":[{"id":"0a96cceee825e15cd8e042b683d404086e2a58d1","date":1351872237,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#CompressingStoredFieldsWriter(Directory,SegmentInfo,IOContext,CompressionMode,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#CompressingStoredFieldsWriter(Directory,SegmentInfo,IOContext,CompressionMode,int,CompressingStoredFieldsIndex).mjava","sourceNew":"  public CompressingStoredFieldsWriter(Directory directory, SegmentInfo si,\n      IOContext context, CompressionMode compressionMode, int chunkSize) throws IOException {\n    assert directory != null;\n    this.directory = directory;\n    this.segment = si.name;\n    this.compressionMode = compressionMode;\n    this.compressor = compressionMode.newCompressor();\n    this.chunkSize = chunkSize;\n    this.docBase = 0;\n    this.bufferedDocs = new GrowableByteArrayDataOutput(chunkSize);\n    this.endOffsets = new int[16];\n    this.numBufferedDocs = 0;\n\n    boolean success = false;\n    IndexOutput indexStream = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", FIELDS_INDEX_EXTENSION), context);\n    try {\n      fieldsStream = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", FIELDS_EXTENSION), context);\n\n      CodecUtil.writeHeader(indexStream, CODEC_NAME_IDX, VERSION_CURRENT);\n      CodecUtil.writeHeader(fieldsStream, CODEC_NAME_DAT, VERSION_CURRENT);\n      assert HEADER_LENGTH_IDX == indexStream.getFilePointer();\n      assert HEADER_LENGTH_DAT == fieldsStream.getFilePointer();\n\n      indexWriter = new CompressingStoredFieldsIndexWriter(indexStream);\n      indexStream = null;\n\n      fieldsStream.writeVInt(PackedInts.VERSION_CURRENT);\n      fieldsStream.writeVInt(compressionMode.getId());\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(indexStream);\n        abort();\n      }\n    }\n  }\n\n","sourceOld":"  public CompressingStoredFieldsWriter(Directory directory, SegmentInfo si,\n      IOContext context, CompressionMode compressionMode, int chunkSize, CompressingStoredFieldsIndex storedFieldsIndex) throws IOException {\n    assert directory != null;\n    this.directory = directory;\n    this.segment = si.name;\n    this.compressionMode = compressionMode;\n    this.compressor = compressionMode.newCompressor();\n    this.chunkSize = chunkSize;\n    this.docBase = 0;\n    this.bufferedDocs = new GrowableByteArrayDataOutput(chunkSize);\n    this.endOffsets = new int[16];\n    this.numBufferedDocs = 0;\n\n    boolean success = false;\n    IndexOutput indexStream = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", FIELDS_INDEX_EXTENSION), context);\n    try {\n      fieldsStream = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", FIELDS_EXTENSION), context);\n\n      CodecUtil.writeHeader(indexStream, CODEC_NAME_IDX, VERSION_CURRENT);\n      CodecUtil.writeHeader(fieldsStream, CODEC_NAME_DAT, VERSION_CURRENT);\n      assert HEADER_LENGTH_IDX == indexStream.getFilePointer();\n      assert HEADER_LENGTH_DAT == fieldsStream.getFilePointer();\n\n      indexStream.writeVInt(storedFieldsIndex.getId());\n      indexWriter = storedFieldsIndex.newWriter(indexStream);\n      indexStream = null;\n\n      fieldsStream.writeVInt(PackedInts.VERSION_CURRENT);\n      fieldsStream.writeVInt(compressionMode.getId());\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(indexStream);\n        abort();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eba3cb2a268b9fb6f5be011fbaaf698699dcf24c","date":1352305464,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#CompressingStoredFieldsWriter(Directory,SegmentInfo,IOContext,CompressionMode,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#CompressingStoredFieldsWriter(Directory,SegmentInfo,IOContext,CompressionMode,int).mjava","sourceNew":"  public CompressingStoredFieldsWriter(Directory directory, SegmentInfo si,\n      IOContext context, CompressionMode compressionMode, int chunkSize) throws IOException {\n    assert directory != null;\n    this.directory = directory;\n    this.segment = si.name;\n    this.compressionMode = compressionMode;\n    this.compressor = compressionMode.newCompressor();\n    this.chunkSize = chunkSize;\n    this.docBase = 0;\n    this.bufferedDocs = new GrowableByteArrayDataOutput(chunkSize);\n    this.numStoredFields = new int[16];\n    this.endOffsets = new int[16];\n    this.numBufferedDocs = 0;\n\n    boolean success = false;\n    IndexOutput indexStream = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", FIELDS_INDEX_EXTENSION), context);\n    try {\n      fieldsStream = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", FIELDS_EXTENSION), context);\n\n      CodecUtil.writeHeader(indexStream, CODEC_NAME_IDX, VERSION_CURRENT);\n      CodecUtil.writeHeader(fieldsStream, CODEC_NAME_DAT, VERSION_CURRENT);\n      assert HEADER_LENGTH_IDX == indexStream.getFilePointer();\n      assert HEADER_LENGTH_DAT == fieldsStream.getFilePointer();\n\n      indexWriter = new CompressingStoredFieldsIndexWriter(indexStream);\n      indexStream = null;\n\n      fieldsStream.writeVInt(PackedInts.VERSION_CURRENT);\n      fieldsStream.writeVInt(compressionMode.getId());\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(indexStream);\n        abort();\n      }\n    }\n  }\n\n","sourceOld":"  public CompressingStoredFieldsWriter(Directory directory, SegmentInfo si,\n      IOContext context, CompressionMode compressionMode, int chunkSize) throws IOException {\n    assert directory != null;\n    this.directory = directory;\n    this.segment = si.name;\n    this.compressionMode = compressionMode;\n    this.compressor = compressionMode.newCompressor();\n    this.chunkSize = chunkSize;\n    this.docBase = 0;\n    this.bufferedDocs = new GrowableByteArrayDataOutput(chunkSize);\n    this.endOffsets = new int[16];\n    this.numBufferedDocs = 0;\n\n    boolean success = false;\n    IndexOutput indexStream = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", FIELDS_INDEX_EXTENSION), context);\n    try {\n      fieldsStream = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", FIELDS_EXTENSION), context);\n\n      CodecUtil.writeHeader(indexStream, CODEC_NAME_IDX, VERSION_CURRENT);\n      CodecUtil.writeHeader(fieldsStream, CODEC_NAME_DAT, VERSION_CURRENT);\n      assert HEADER_LENGTH_IDX == indexStream.getFilePointer();\n      assert HEADER_LENGTH_DAT == fieldsStream.getFilePointer();\n\n      indexWriter = new CompressingStoredFieldsIndexWriter(indexStream);\n      indexStream = null;\n\n      fieldsStream.writeVInt(PackedInts.VERSION_CURRENT);\n      fieldsStream.writeVInt(compressionMode.getId());\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(indexStream);\n        abort();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69","date":1352818449,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#CompressingStoredFieldsWriter(Directory,SegmentInfo,IOContext,CompressionMode,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#CompressingStoredFieldsWriter(Directory,SegmentInfo,IOContext,CompressionMode,int).mjava","sourceNew":"  public CompressingStoredFieldsWriter(Directory directory, SegmentInfo si,\n      IOContext context, CompressionMode compressionMode, int chunkSize) throws IOException {\n    assert directory != null;\n    this.directory = directory;\n    this.segment = si.name;\n    this.compressionMode = compressionMode;\n    this.compressor = compressionMode.newCompressor();\n    this.chunkSize = chunkSize;\n    this.docBase = 0;\n    this.bufferedDocs = new GrowableByteArrayDataOutput(chunkSize);\n    this.numStoredFields = new int[16];\n    this.endOffsets = new int[16];\n    this.numBufferedDocs = 0;\n\n    boolean success = false;\n    IndexOutput indexStream = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", FIELDS_INDEX_EXTENSION), context);\n    try {\n      fieldsStream = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", FIELDS_EXTENSION), context);\n\n      CodecUtil.writeHeader(indexStream, CODEC_NAME_IDX, VERSION_CURRENT);\n      CodecUtil.writeHeader(fieldsStream, CODEC_NAME_DAT, VERSION_CURRENT);\n      assert HEADER_LENGTH_IDX == indexStream.getFilePointer();\n      assert HEADER_LENGTH_DAT == fieldsStream.getFilePointer();\n\n      indexWriter = new CompressingStoredFieldsIndexWriter(indexStream);\n      indexStream = null;\n\n      fieldsStream.writeVInt(PackedInts.VERSION_CURRENT);\n      fieldsStream.writeVInt(compressionMode.getId());\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(indexStream);\n        abort();\n      }\n    }\n  }\n\n","sourceOld":"  public CompressingStoredFieldsWriter(Directory directory, SegmentInfo si,\n      IOContext context, CompressionMode compressionMode, int chunkSize) throws IOException {\n    assert directory != null;\n    this.directory = directory;\n    this.segment = si.name;\n    this.compressionMode = compressionMode;\n    this.compressor = compressionMode.newCompressor();\n    this.chunkSize = chunkSize;\n    this.docBase = 0;\n    this.bufferedDocs = new GrowableByteArrayDataOutput(chunkSize);\n    this.numStoredFields = new int[16];\n    this.endOffsets = new int[16];\n    this.numBufferedDocs = 0;\n\n    boolean success = false;\n    IndexOutput indexStream = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", FIELDS_INDEX_EXTENSION), context);\n    try {\n      fieldsStream = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", FIELDS_EXTENSION), context);\n\n      CodecUtil.writeHeader(indexStream, CODEC_NAME_IDX, VERSION_CURRENT);\n      CodecUtil.writeHeader(fieldsStream, CODEC_NAME_DAT, VERSION_CURRENT);\n      assert HEADER_LENGTH_IDX == indexStream.getFilePointer();\n      assert HEADER_LENGTH_DAT == fieldsStream.getFilePointer();\n\n      indexWriter = new CompressingStoredFieldsIndexWriter(indexStream);\n      indexStream = null;\n\n      fieldsStream.writeVInt(PackedInts.VERSION_CURRENT);\n      fieldsStream.writeVInt(compressionMode.getId());\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(indexStream);\n        abort();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#CompressingStoredFieldsWriter(Directory,SegmentInfo,IOContext,CompressionMode,int).mjava","sourceNew":null,"sourceOld":"  public CompressingStoredFieldsWriter(Directory directory, SegmentInfo si,\n      IOContext context, CompressionMode compressionMode, int chunkSize) throws IOException {\n    assert directory != null;\n    this.directory = directory;\n    this.segment = si.name;\n    this.compressionMode = compressionMode;\n    this.compressor = compressionMode.newCompressor();\n    this.chunkSize = chunkSize;\n    this.docBase = 0;\n    this.bufferedDocs = new GrowableByteArrayDataOutput(chunkSize);\n    this.numStoredFields = new int[16];\n    this.endOffsets = new int[16];\n    this.numBufferedDocs = 0;\n\n    boolean success = false;\n    IndexOutput indexStream = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", FIELDS_INDEX_EXTENSION), context);\n    try {\n      fieldsStream = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", FIELDS_EXTENSION), context);\n\n      CodecUtil.writeHeader(indexStream, CODEC_NAME_IDX, VERSION_CURRENT);\n      CodecUtil.writeHeader(fieldsStream, CODEC_NAME_DAT, VERSION_CURRENT);\n      assert HEADER_LENGTH_IDX == indexStream.getFilePointer();\n      assert HEADER_LENGTH_DAT == fieldsStream.getFilePointer();\n\n      indexWriter = new CompressingStoredFieldsIndexWriter(indexStream);\n      indexStream = null;\n\n      fieldsStream.writeVInt(PackedInts.VERSION_CURRENT);\n      fieldsStream.writeVInt(compressionMode.getId());\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(indexStream);\n        abort();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69":["eba3cb2a268b9fb6f5be011fbaaf698699dcf24c"],"0a96cceee825e15cd8e042b683d404086e2a58d1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["eba3cb2a268b9fb6f5be011fbaaf698699dcf24c","5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69"],"eba3cb2a268b9fb6f5be011fbaaf698699dcf24c":["0a96cceee825e15cd8e042b683d404086e2a58d1"]},"commit2Childs":{"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0a96cceee825e15cd8e042b683d404086e2a58d1":["eba3cb2a268b9fb6f5be011fbaaf698699dcf24c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a96cceee825e15cd8e042b683d404086e2a58d1"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"eba3cb2a268b9fb6f5be011fbaaf698699dcf24c":["5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69","407687e67faf6e1f02a211ca078d8e3eed631027"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}