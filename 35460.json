{"path":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testScore().mjava","commits":[{"id":"484e80062d7ab2729bc82f0311d6a97dd913961a","date":1424450206,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testScore().mjava","pathOld":"/dev/null","sourceNew":"  public void testScore() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(100);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      final int numValues = random().nextInt(3);\n      for (int j = 0; j < numValues; ++j) {\n        final long value = TestUtil.nextLong(random(), -100, 10000);\n        doc.add(new SortedNumericDocValuesField(\"dv1\", value));\n        doc.add(new SortedSetDocValuesField(\"dv2\", toSortableBytes(value)));\n      }\n      iw.addDocument(doc);\n    }\n    if (random().nextBoolean()) {\n      iw.deleteDocuments(DocValuesRangeQuery.newLongRange(\"dv1\", 0L, 10L, true, true));\n    }\n    iw.commit();\n    final IndexReader reader = iw.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    iw.close();\n\n    for (int i = 0; i < 100; ++i) {\n      final Long min = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n      final Long max = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n      final boolean minInclusive = random().nextBoolean();\n      final boolean maxInclusive = random().nextBoolean();\n\n      final float boost = random().nextFloat() * 10;\n\n      final Query q1 = DocValuesRangeQuery.newLongRange(\"dv1\", min, max, minInclusive, maxInclusive);\n      q1.setBoost(boost);\n      final ConstantScoreQuery csq1 = new ConstantScoreQuery(DocValuesRangeQuery.newLongRange(\"dv1\", min, max, minInclusive, maxInclusive));\n      csq1.setBoost(boost);\n      assertSameMatches(searcher, q1, csq1, true);\n\n      final Query q2 = DocValuesRangeQuery.newBytesRefRange(\"dv2\", toSortableBytes(min), toSortableBytes(max), minInclusive, maxInclusive);\n      q2.setBoost(boost);\n      final ConstantScoreQuery csq2 = new ConstantScoreQuery(DocValuesRangeQuery.newBytesRefRange(\"dv2\", toSortableBytes(min), toSortableBytes(max), minInclusive, maxInclusive));\n      csq2.setBoost(boost);\n      assertSameMatches(searcher, q2, csq2, true);\n    }\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fb0efe75e5c6021561f115dfe334b74786364ba","date":1434366074,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testScore().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocValuesRangeQuery#testScore().mjava","sourceNew":"  public void testScore() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(100);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      final int numValues = random().nextInt(3);\n      for (int j = 0; j < numValues; ++j) {\n        final long value = TestUtil.nextLong(random(), -100, 10000);\n        doc.add(new SortedNumericDocValuesField(\"dv1\", value));\n        doc.add(new SortedSetDocValuesField(\"dv2\", toSortableBytes(value)));\n      }\n      iw.addDocument(doc);\n    }\n    if (random().nextBoolean()) {\n      iw.deleteDocuments(DocValuesRangeQuery.newLongRange(\"dv1\", 0L, 10L, true, true));\n    }\n    iw.commit();\n    final IndexReader reader = iw.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    iw.close();\n\n    for (int i = 0; i < 100; ++i) {\n      final Long min = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n      final Long max = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n      final boolean minInclusive = random().nextBoolean();\n      final boolean maxInclusive = random().nextBoolean();\n\n      final float boost = random().nextFloat() * 10;\n\n      final Query q1 = DocValuesRangeQuery.newLongRange(\"dv1\", min, max, minInclusive, maxInclusive);\n      q1.setBoost(boost);\n      final ConstantScoreQuery csq1 = new ConstantScoreQuery(DocValuesRangeQuery.newLongRange(\"dv1\", min, max, minInclusive, maxInclusive));\n      csq1.setBoost(boost);\n      assertSameMatches(searcher, q1, csq1, true);\n\n      final Query q2 = DocValuesRangeQuery.newBytesRefRange(\"dv2\", toSortableBytes(min), toSortableBytes(max), minInclusive, maxInclusive);\n      q2.setBoost(boost);\n      final ConstantScoreQuery csq2 = new ConstantScoreQuery(DocValuesRangeQuery.newBytesRefRange(\"dv2\", toSortableBytes(min), toSortableBytes(max), minInclusive, maxInclusive));\n      csq2.setBoost(boost);\n      assertSameMatches(searcher, q2, csq2, true);\n    }\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testScore() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(100);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      final int numValues = random().nextInt(3);\n      for (int j = 0; j < numValues; ++j) {\n        final long value = TestUtil.nextLong(random(), -100, 10000);\n        doc.add(new SortedNumericDocValuesField(\"dv1\", value));\n        doc.add(new SortedSetDocValuesField(\"dv2\", toSortableBytes(value)));\n      }\n      iw.addDocument(doc);\n    }\n    if (random().nextBoolean()) {\n      iw.deleteDocuments(DocValuesRangeQuery.newLongRange(\"dv1\", 0L, 10L, true, true));\n    }\n    iw.commit();\n    final IndexReader reader = iw.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    iw.close();\n\n    for (int i = 0; i < 100; ++i) {\n      final Long min = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n      final Long max = random().nextBoolean() ? null : TestUtil.nextLong(random(), -100, 1000);\n      final boolean minInclusive = random().nextBoolean();\n      final boolean maxInclusive = random().nextBoolean();\n\n      final float boost = random().nextFloat() * 10;\n\n      final Query q1 = DocValuesRangeQuery.newLongRange(\"dv1\", min, max, minInclusive, maxInclusive);\n      q1.setBoost(boost);\n      final ConstantScoreQuery csq1 = new ConstantScoreQuery(DocValuesRangeQuery.newLongRange(\"dv1\", min, max, minInclusive, maxInclusive));\n      csq1.setBoost(boost);\n      assertSameMatches(searcher, q1, csq1, true);\n\n      final Query q2 = DocValuesRangeQuery.newBytesRefRange(\"dv2\", toSortableBytes(min), toSortableBytes(max), minInclusive, maxInclusive);\n      q2.setBoost(boost);\n      final ConstantScoreQuery csq2 = new ConstantScoreQuery(DocValuesRangeQuery.newBytesRefRange(\"dv2\", toSortableBytes(min), toSortableBytes(max), minInclusive, maxInclusive));\n      csq2.setBoost(boost);\n      assertSameMatches(searcher, q2, csq2, true);\n    }\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"484e80062d7ab2729bc82f0311d6a97dd913961a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fb0efe75e5c6021561f115dfe334b74786364ba":["484e80062d7ab2729bc82f0311d6a97dd913961a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9fb0efe75e5c6021561f115dfe334b74786364ba"]},"commit2Childs":{"484e80062d7ab2729bc82f0311d6a97dd913961a":["9fb0efe75e5c6021561f115dfe334b74786364ba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["484e80062d7ab2729bc82f0311d6a97dd913961a"],"9fb0efe75e5c6021561f115dfe334b74786364ba":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}