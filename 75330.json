{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesConsumer#addReverseTermIndex(FieldInfo,Iterable[BytesRef],int).mjava","commits":[{"id":"084884d4602f4d1c7411eab29e897e349ce62675","date":1475571034,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesConsumer#addReverseTermIndex(FieldInfo,Iterable[BytesRef],int).mjava","pathOld":"/dev/null","sourceNew":"  // writes reverse term index: used for binary searching a term into a range of 64 blocks\n  // for every 64 blocks (1024 terms) we store a term, trimming any suffix unnecessary for comparison\n  // terms are written as a contiguous byte[], but never spanning 2^15 byte boundaries.\n  private void addReverseTermIndex(FieldInfo field, final Iterable<BytesRef> values, int maxLength) throws IOException {\n    long count = 0;\n    BytesRefBuilder priorTerm = new BytesRefBuilder();\n    priorTerm.grow(maxLength);\n    BytesRef indexTerm = new BytesRef();\n    long startFP = data.getFilePointer();\n    PagedBytes pagedBytes = new PagedBytes(15);\n    MonotonicBlockPackedWriter addresses = new MonotonicBlockPackedWriter(data, MONOTONIC_BLOCK_SIZE);\n    \n    for (BytesRef b : values) {\n      int termPosition = (int) (count & REVERSE_INTERVAL_MASK);\n      if (termPosition == 0) {\n        int len = StringHelper.sortKeyLength(priorTerm.get(), b);\n        indexTerm.bytes = b.bytes;\n        indexTerm.offset = b.offset;\n        indexTerm.length = len;\n        addresses.add(pagedBytes.copyUsingLengthPrefix(indexTerm));\n      } else if (termPosition == REVERSE_INTERVAL_MASK) {\n        priorTerm.copyBytes(b);\n      }\n      count++;\n    }\n    addresses.finish();\n    long numBytes = pagedBytes.getPointer();\n    pagedBytes.freeze(true);\n    PagedBytesDataInput in = pagedBytes.getDataInput();\n    meta.writeLong(startFP);\n    data.writeVLong(numBytes);\n    data.copyBytes(in, numBytes);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1967bed916cc89da82a1c2085f27976da6d08cbd","date":1475588750,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesConsumer#addReverseTermIndex(FieldInfo,Iterable[BytesRef],int).mjava","pathOld":"/dev/null","sourceNew":"  // writes reverse term index: used for binary searching a term into a range of 64 blocks\n  // for every 64 blocks (1024 terms) we store a term, trimming any suffix unnecessary for comparison\n  // terms are written as a contiguous byte[], but never spanning 2^15 byte boundaries.\n  private void addReverseTermIndex(FieldInfo field, final Iterable<BytesRef> values, int maxLength) throws IOException {\n    long count = 0;\n    BytesRefBuilder priorTerm = new BytesRefBuilder();\n    priorTerm.grow(maxLength);\n    BytesRef indexTerm = new BytesRef();\n    long startFP = data.getFilePointer();\n    PagedBytes pagedBytes = new PagedBytes(15);\n    MonotonicBlockPackedWriter addresses = new MonotonicBlockPackedWriter(data, MONOTONIC_BLOCK_SIZE);\n    \n    for (BytesRef b : values) {\n      int termPosition = (int) (count & REVERSE_INTERVAL_MASK);\n      if (termPosition == 0) {\n        int len = StringHelper.sortKeyLength(priorTerm.get(), b);\n        indexTerm.bytes = b.bytes;\n        indexTerm.offset = b.offset;\n        indexTerm.length = len;\n        addresses.add(pagedBytes.copyUsingLengthPrefix(indexTerm));\n      } else if (termPosition == REVERSE_INTERVAL_MASK) {\n        priorTerm.copyBytes(b);\n      }\n      count++;\n    }\n    addresses.finish();\n    long numBytes = pagedBytes.getPointer();\n    pagedBytes.freeze(true);\n    PagedBytesDataInput in = pagedBytes.getDataInput();\n    meta.writeLong(startFP);\n    data.writeVLong(numBytes);\n    data.copyBytes(in, numBytes);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23e44daeaa8b89694d10df5999956c8e14a7dd09","date":1476689300,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesConsumer#addReverseTermIndex(FieldInfo,Iterable[BytesRef],int).mjava","sourceNew":null,"sourceOld":"  // writes reverse term index: used for binary searching a term into a range of 64 blocks\n  // for every 64 blocks (1024 terms) we store a term, trimming any suffix unnecessary for comparison\n  // terms are written as a contiguous byte[], but never spanning 2^15 byte boundaries.\n  private void addReverseTermIndex(FieldInfo field, final Iterable<BytesRef> values, int maxLength) throws IOException {\n    long count = 0;\n    BytesRefBuilder priorTerm = new BytesRefBuilder();\n    priorTerm.grow(maxLength);\n    BytesRef indexTerm = new BytesRef();\n    long startFP = data.getFilePointer();\n    PagedBytes pagedBytes = new PagedBytes(15);\n    MonotonicBlockPackedWriter addresses = new MonotonicBlockPackedWriter(data, MONOTONIC_BLOCK_SIZE);\n    \n    for (BytesRef b : values) {\n      int termPosition = (int) (count & REVERSE_INTERVAL_MASK);\n      if (termPosition == 0) {\n        int len = StringHelper.sortKeyLength(priorTerm.get(), b);\n        indexTerm.bytes = b.bytes;\n        indexTerm.offset = b.offset;\n        indexTerm.length = len;\n        addresses.add(pagedBytes.copyUsingLengthPrefix(indexTerm));\n      } else if (termPosition == REVERSE_INTERVAL_MASK) {\n        priorTerm.copyBytes(b);\n      }\n      count++;\n    }\n    addresses.finish();\n    long numBytes = pagedBytes.getPointer();\n    pagedBytes.freeze(true);\n    PagedBytesDataInput in = pagedBytes.getDataInput();\n    meta.writeLong(startFP);\n    data.writeVLong(numBytes);\n    data.copyBytes(in, numBytes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"23e44daeaa8b89694d10df5999956c8e14a7dd09":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","084884d4602f4d1c7411eab29e897e349ce62675"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23e44daeaa8b89694d10df5999956c8e14a7dd09"],"084884d4602f4d1c7411eab29e897e349ce62675":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"23e44daeaa8b89694d10df5999956c8e14a7dd09":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["23e44daeaa8b89694d10df5999956c8e14a7dd09"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1967bed916cc89da82a1c2085f27976da6d08cbd","084884d4602f4d1c7411eab29e897e349ce62675"],"084884d4602f4d1c7411eab29e897e349ce62675":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}