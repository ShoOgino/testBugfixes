{"path":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.AnalysisThread#run().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.AnalysisThread#run().mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.AnalysisThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        // see the part in checkRandomData where it replays the same text again\n        // to verify reproducability/reuse: hopefully this would catch thread hazards.\n        checkRandomData(random, a, iterations, 20);\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      try {\n        // see the part in checkRandomData where it replays the same text again\n        // to verify reproducability/reuse: hopefully this would catch thread hazards.\n        checkRandomData(random, a, iterations, 20);\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"47777586dd4c026834be0b2cc454d527cf8884b3","date":1330348390,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.AnalysisThread#run().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.AnalysisThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        // see the part in checkRandomData where it replays the same text again\n        // to verify reproducability/reuse: hopefully this would catch thread hazards.\n        checkRandomData(random, a, iterations, 20, simple);\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      try {\n        // see the part in checkRandomData where it replays the same text again\n        // to verify reproducability/reuse: hopefully this would catch thread hazards.\n        checkRandomData(random, a, iterations, 20);\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.AnalysisThread#run().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.AnalysisThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        // see the part in checkRandomData where it replays the same text again\n        // to verify reproducability/reuse: hopefully this would catch thread hazards.\n        checkRandomData(random, a, iterations, 20, simple);\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      try {\n        // see the part in checkRandomData where it replays the same text again\n        // to verify reproducability/reuse: hopefully this would catch thread hazards.\n        checkRandomData(random, a, iterations, 20);\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"26bd77fc30a420a3e33c85e6fa6b0887eac4b029","date":1332293004,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.AnalysisThread#run().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.AnalysisThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        // see the part in checkRandomData where it replays the same text again\n        // to verify reproducability/reuse: hopefully this would catch thread hazards.\n        checkRandomData(random, a, iterations, maxWordLength, random.nextBoolean(), simple);\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      try {\n        // see the part in checkRandomData where it replays the same text again\n        // to verify reproducability/reuse: hopefully this would catch thread hazards.\n        checkRandomData(random, a, iterations, 20, simple);\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f76434de2201457cd82e97824eeaf8c8172fb6c7","date":1333047537,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.AnalysisThread#run().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.AnalysisThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        // see the part in checkRandomData where it replays the same text again\n        // to verify reproducability/reuse: hopefully this would catch thread hazards.\n        checkRandomData(random, a, iterations, maxWordLength, random.nextBoolean(), simple);\n      } catch (IOException e) {\n        Rethrow.rethrow(e);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      try {\n        // see the part in checkRandomData where it replays the same text again\n        // to verify reproducability/reuse: hopefully this would catch thread hazards.\n        checkRandomData(random, a, iterations, maxWordLength, random.nextBoolean(), simple);\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"888c2d6bca1edd8d9293631d6e1d188b036e0f05","date":1334076894,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.AnalysisThread#run().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.AnalysisThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        // see the part in checkRandomData where it replays the same text again\n        // to verify reproducability/reuse: hopefully this would catch thread hazards.\n        checkRandomData(random, a, iterations, maxWordLength, random.nextBoolean(), simple, offsetsAreCorrect);\n      } catch (IOException e) {\n        Rethrow.rethrow(e);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      try {\n        // see the part in checkRandomData where it replays the same text again\n        // to verify reproducability/reuse: hopefully this would catch thread hazards.\n        checkRandomData(random, a, iterations, maxWordLength, random.nextBoolean(), simple);\n      } catch (IOException e) {\n        Rethrow.rethrow(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"86aff04d7e822b5c613e383a069876a32efbfb61","date":1334085604,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.AnalysisThread#run().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.AnalysisThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      boolean success = false;\n      try {\n        // see the part in checkRandomData where it replays the same text again\n        // to verify reproducability/reuse: hopefully this would catch thread hazards.\n        checkRandomData(random, a, iterations, maxWordLength, random.nextBoolean(), simple, offsetsAreCorrect);\n        success = true;\n      } catch (IOException e) {\n        Rethrow.rethrow(e);\n      } finally {\n        failed = !success;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      try {\n        // see the part in checkRandomData where it replays the same text again\n        // to verify reproducability/reuse: hopefully this would catch thread hazards.\n        checkRandomData(random, a, iterations, maxWordLength, random.nextBoolean(), simple, offsetsAreCorrect);\n      } catch (IOException e) {\n        Rethrow.rethrow(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6ec240b76d7ff137d58bc77b869525ebba68917f","date":1334086261,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.AnalysisThread#run().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.AnalysisThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      boolean success = false;\n      try {\n        // see the part in checkRandomData where it replays the same text again\n        // to verify reproducability/reuse: hopefully this would catch thread hazards.\n        checkRandomData(new Random(seed), a, iterations, maxWordLength, useCharFilter, simple, offsetsAreCorrect);\n        success = true;\n      } catch (IOException e) {\n        Rethrow.rethrow(e);\n      } finally {\n        failed = !success;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      boolean success = false;\n      try {\n        // see the part in checkRandomData where it replays the same text again\n        // to verify reproducability/reuse: hopefully this would catch thread hazards.\n        checkRandomData(random, a, iterations, maxWordLength, random.nextBoolean(), simple, offsetsAreCorrect);\n        success = true;\n      } catch (IOException e) {\n        Rethrow.rethrow(e);\n      } finally {\n        failed = !success;\n      }\n    }\n\n","bugFix":null,"bugIntro":["d2d5b1f6ad16c5f1ce7e0a00225e2c9ffd0bc626"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e","date":1334174049,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.AnalysisThread#run().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.AnalysisThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      boolean success = false;\n      try {\n        // see the part in checkRandomData where it replays the same text again\n        // to verify reproducability/reuse: hopefully this would catch thread hazards.\n        checkRandomData(new Random(seed), a, iterations, maxWordLength, useCharFilter, simple, offsetsAreCorrect);\n        success = true;\n      } catch (IOException e) {\n        Rethrow.rethrow(e);\n      } finally {\n        failed = !success;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      try {\n        // see the part in checkRandomData where it replays the same text again\n        // to verify reproducability/reuse: hopefully this would catch thread hazards.\n        checkRandomData(random, a, iterations, maxWordLength, random.nextBoolean(), simple);\n      } catch (IOException e) {\n        Rethrow.rethrow(e);\n      }\n    }\n\n","bugFix":["26bd77fc30a420a3e33c85e6fa6b0887eac4b029"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d2d5b1f6ad16c5f1ce7e0a00225e2c9ffd0bc626","date":1339522233,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.AnalysisThread#run().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.AnalysisThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      boolean success = false;\n      try {\n        // see the part in checkRandomData where it replays the same text again\n        // to verify reproducability/reuse: hopefully this would catch thread hazards.\n        checkRandomData(new Random(seed), a, iterations, maxWordLength, useCharFilter, simple, offsetsAreCorrect, iw);\n        success = true;\n      } catch (IOException e) {\n        Rethrow.rethrow(e);\n      } finally {\n        failed = !success;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      boolean success = false;\n      try {\n        // see the part in checkRandomData where it replays the same text again\n        // to verify reproducability/reuse: hopefully this would catch thread hazards.\n        checkRandomData(new Random(seed), a, iterations, maxWordLength, useCharFilter, simple, offsetsAreCorrect);\n        success = true;\n      } catch (IOException e) {\n        Rethrow.rethrow(e);\n      } finally {\n        failed = !success;\n      }\n    }\n\n","bugFix":["6ec240b76d7ff137d58bc77b869525ebba68917f"],"bugIntro":["995993f24c9f6feb42b49b71e1982cda8fa0b37c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a1cce78185d8741d50890d1829d47f1a0dffb37e","date":1395427956,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.AnalysisThread#run().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.AnalysisThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      boolean success = false;\n      try {\n        latch.await();\n        // see the part in checkRandomData where it replays the same text again\n        // to verify reproducability/reuse: hopefully this would catch thread hazards.\n        checkRandomData(new Random(seed), a, iterations, maxWordLength, useCharFilter, simple, offsetsAreCorrect, iw);\n        success = true;\n      } catch (Exception e) {\n        Rethrow.rethrow(e);\n      } finally {\n        failed = !success;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      boolean success = false;\n      try {\n        // see the part in checkRandomData where it replays the same text again\n        // to verify reproducability/reuse: hopefully this would catch thread hazards.\n        checkRandomData(new Random(seed), a, iterations, maxWordLength, useCharFilter, simple, offsetsAreCorrect, iw);\n        success = true;\n      } catch (IOException e) {\n        Rethrow.rethrow(e);\n      } finally {\n        failed = !success;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"995993f24c9f6feb42b49b71e1982cda8fa0b37c","date":1522116154,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.AnalysisThread#run().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.AnalysisThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      boolean success = false;\n      try {\n        latch.await();\n        // see the part in checkRandomData where it replays the same text again\n        // to verify reproducability/reuse: hopefully this would catch thread hazards.\n        checkRandomData(new Random(seed), a, iterations, maxWordLength, useCharFilter, simple, graphOffsetsAreCorrect, iw);\n        success = true;\n      } catch (Exception e) {\n        Rethrow.rethrow(e);\n      } finally {\n        failed = !success;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      boolean success = false;\n      try {\n        latch.await();\n        // see the part in checkRandomData where it replays the same text again\n        // to verify reproducability/reuse: hopefully this would catch thread hazards.\n        checkRandomData(new Random(seed), a, iterations, maxWordLength, useCharFilter, simple, offsetsAreCorrect, iw);\n        success = true;\n      } catch (Exception e) {\n        Rethrow.rethrow(e);\n      } finally {\n        failed = !success;\n      }\n    }\n\n","bugFix":["d2d5b1f6ad16c5f1ce7e0a00225e2c9ffd0bc626"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7","date":1522191940,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.AnalysisThread#run().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.AnalysisThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      boolean success = false;\n      try {\n        latch.await();\n        // see the part in checkRandomData where it replays the same text again\n        // to verify reproducability/reuse: hopefully this would catch thread hazards.\n        checkRandomData(new Random(seed), a, iterations, maxWordLength, useCharFilter, simple, graphOffsetsAreCorrect, iw);\n        success = true;\n      } catch (Exception e) {\n        Rethrow.rethrow(e);\n      } finally {\n        failed = !success;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      boolean success = false;\n      try {\n        latch.await();\n        // see the part in checkRandomData where it replays the same text again\n        // to verify reproducability/reuse: hopefully this would catch thread hazards.\n        checkRandomData(new Random(seed), a, iterations, maxWordLength, useCharFilter, simple, offsetsAreCorrect, iw);\n        success = true;\n      } catch (Exception e) {\n        Rethrow.rethrow(e);\n      } finally {\n        failed = !success;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","47777586dd4c026834be0b2cc454d527cf8884b3"],"f76434de2201457cd82e97824eeaf8c8172fb6c7":["26bd77fc30a420a3e33c85e6fa6b0887eac4b029"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7":["a1cce78185d8741d50890d1829d47f1a0dffb37e","995993f24c9f6feb42b49b71e1982cda8fa0b37c"],"86aff04d7e822b5c613e383a069876a32efbfb61":["888c2d6bca1edd8d9293631d6e1d188b036e0f05"],"26bd77fc30a420a3e33c85e6fa6b0887eac4b029":["47777586dd4c026834be0b2cc454d527cf8884b3"],"6ec240b76d7ff137d58bc77b869525ebba68917f":["86aff04d7e822b5c613e383a069876a32efbfb61"],"888c2d6bca1edd8d9293631d6e1d188b036e0f05":["f76434de2201457cd82e97824eeaf8c8172fb6c7"],"a1cce78185d8741d50890d1829d47f1a0dffb37e":["d2d5b1f6ad16c5f1ce7e0a00225e2c9ffd0bc626"],"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e":["f76434de2201457cd82e97824eeaf8c8172fb6c7","6ec240b76d7ff137d58bc77b869525ebba68917f"],"995993f24c9f6feb42b49b71e1982cda8fa0b37c":["a1cce78185d8741d50890d1829d47f1a0dffb37e"],"47777586dd4c026834be0b2cc454d527cf8884b3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2d5b1f6ad16c5f1ce7e0a00225e2c9ffd0bc626":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"f76434de2201457cd82e97824eeaf8c8172fb6c7":["888c2d6bca1edd8d9293631d6e1d188b036e0f05","ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","47777586dd4c026834be0b2cc454d527cf8884b3"],"d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"86aff04d7e822b5c613e383a069876a32efbfb61":["6ec240b76d7ff137d58bc77b869525ebba68917f"],"26bd77fc30a420a3e33c85e6fa6b0887eac4b029":["f76434de2201457cd82e97824eeaf8c8172fb6c7"],"6ec240b76d7ff137d58bc77b869525ebba68917f":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"888c2d6bca1edd8d9293631d6e1d188b036e0f05":["86aff04d7e822b5c613e383a069876a32efbfb61"],"a1cce78185d8741d50890d1829d47f1a0dffb37e":["d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7","995993f24c9f6feb42b49b71e1982cda8fa0b37c"],"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e":["d2d5b1f6ad16c5f1ce7e0a00225e2c9ffd0bc626"],"995993f24c9f6feb42b49b71e1982cda8fa0b37c":["d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7"],"47777586dd4c026834be0b2cc454d527cf8884b3":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","26bd77fc30a420a3e33c85e6fa6b0887eac4b029"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d2d5b1f6ad16c5f1ce7e0a00225e2c9ffd0bc626":["a1cce78185d8741d50890d1829d47f1a0dffb37e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}