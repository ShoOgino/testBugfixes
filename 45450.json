{"path":"solr/core/src/java/org/apache/solr/logging/MDCLoggingContext#setCoreDescriptor(CoreDescriptor).mjava","commits":[{"id":"439c63ae5d22132fca810a0029a854e97d2c1a3e","date":1432733612,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/logging/MDCLoggingContext#setCoreDescriptor(CoreDescriptor).mjava","pathOld":"/dev/null","sourceNew":"  public static void setCoreDescriptor(CoreDescriptor cd) {\n    if (cd != null) {\n      int callDepth = CALL_DEPTH.get();\n      CALL_DEPTH.set(callDepth + 1);\n      if (callDepth > 0) {\n        return;\n      }\n      \n      setCoreName(cd.getName());\n      CoreContainer cc = cd.getCoreContainer();\n      if (cc != null) {\n        ZkController zkController = cc.getZkController();\n        if (zkController != null) {\n          setNodeName(zkController.getNodeName());\n        }\n      }\n      \n      CloudDescriptor ccd = cd.getCloudDescriptor();\n      if (ccd != null) {\n        setCollection(ccd.getCollectionName());\n        setShard(ccd.getShardId());\n        setReplica(ccd.getCoreNodeName());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/logging/MDCLoggingContext#setCoreDescriptor(CoreContainer,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/logging/MDCLoggingContext#setCoreDescriptor(CoreDescriptor).mjava","sourceNew":"  public static void setCoreDescriptor(CoreContainer coreContainer, CoreDescriptor cd) {\n    if (cd != null) {\n      int callDepth = CALL_DEPTH.get();\n      CALL_DEPTH.set(callDepth + 1);\n      if (callDepth > 0) {\n        return;\n      }\n      \n      setCoreName(cd.getName());\n      if (coreContainer != null) {\n        ZkController zkController = coreContainer.getZkController();\n        if (zkController != null) {\n          setNodeName(zkController.getNodeName());\n        }\n      }\n      \n      CloudDescriptor ccd = cd.getCloudDescriptor();\n      if (ccd != null) {\n        setCollection(ccd.getCollectionName());\n        setShard(ccd.getShardId());\n        setReplica(ccd.getCoreNodeName());\n      }\n    }\n  }\n\n","sourceOld":"  public static void setCoreDescriptor(CoreDescriptor cd) {\n    if (cd != null) {\n      int callDepth = CALL_DEPTH.get();\n      CALL_DEPTH.set(callDepth + 1);\n      if (callDepth > 0) {\n        return;\n      }\n      \n      setCoreName(cd.getName());\n      CoreContainer cc = cd.getCoreContainer();\n      if (cc != null) {\n        ZkController zkController = cc.getZkController();\n        if (zkController != null) {\n          setNodeName(zkController.getNodeName());\n        }\n      }\n      \n      CloudDescriptor ccd = cd.getCloudDescriptor();\n      if (ccd != null) {\n        setCollection(ccd.getCollectionName());\n        setShard(ccd.getShardId());\n        setReplica(ccd.getCoreNodeName());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/logging/MDCLoggingContext#setCoreDescriptor(CoreDescriptor).mjava","sourceNew":null,"sourceOld":"  public static void setCoreDescriptor(CoreDescriptor cd) {\n    if (cd != null) {\n      int callDepth = CALL_DEPTH.get();\n      CALL_DEPTH.set(callDepth + 1);\n      if (callDepth > 0) {\n        return;\n      }\n      \n      setCoreName(cd.getName());\n      CoreContainer cc = cd.getCoreContainer();\n      if (cc != null) {\n        ZkController zkController = cc.getZkController();\n        if (zkController != null) {\n          setNodeName(zkController.getNodeName());\n        }\n      }\n      \n      CloudDescriptor ccd = cd.getCloudDescriptor();\n      if (ccd != null) {\n        setCollection(ccd.getCollectionName());\n        setShard(ccd.getShardId());\n        setReplica(ccd.getCoreNodeName());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["439c63ae5d22132fca810a0029a854e97d2c1a3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["439c63ae5d22132fca810a0029a854e97d2c1a3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"439c63ae5d22132fca810a0029a854e97d2c1a3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["439c63ae5d22132fca810a0029a854e97d2c1a3e"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"439c63ae5d22132fca810a0029a854e97d2c1a3e":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}