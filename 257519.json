{"path":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter#VersionBlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","commits":[{"id":"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e","date":1400786907,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter#VersionBlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter#VersionBlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","sourceNew":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public VersionBlockTreeTermsWriter(\n                                     SegmentWriteState state,\n                                     PostingsWriterBase postingsWriter,\n                                     int minItemsInBlock,\n                                     int maxItemsInBlock)\n    throws IOException\n  {\n    if (minItemsInBlock <= 1) {\n      throw new IllegalArgumentException(\"minItemsInBlock must be >= 2; got \" + minItemsInBlock);\n    }\n    if (maxItemsInBlock <= 0) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= 1; got \" + maxItemsInBlock);\n    }\n    if (minItemsInBlock > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= minItemsInBlock; got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n    if (2*(minItemsInBlock-1) > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be at least 2*(minItemsInBlock-1); got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n\n    maxDoc = state.segmentInfo.getDocCount();\n\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.minItemsInBlock = minItemsInBlock;\n      this.maxItemsInBlock = maxItemsInBlock;\n      CodecUtil.writeHeader(out, TERMS_CODEC_NAME, VERSION_CURRENT);   \n\n      //DEBUG = state.segmentName.equals(\"_4a\");\n\n      final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(termsIndexFileName, state.context);\n      CodecUtil.writeHeader(indexOut, TERMS_INDEX_CODEC_NAME, VERSION_CURRENT); \n\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentInfo.name;\n\n      // System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n      postingsWriter.init(out);                          // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out, indexOut);\n      }\n    }\n    this.indexOut = indexOut;\n  }\n\n","sourceOld":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public VersionBlockTreeTermsWriter(\n                                     SegmentWriteState state,\n                                     PostingsWriterBase postingsWriter,\n                                     int minItemsInBlock,\n                                     int maxItemsInBlock)\n    throws IOException\n  {\n    if (minItemsInBlock <= 1) {\n      throw new IllegalArgumentException(\"minItemsInBlock must be >= 2; got \" + minItemsInBlock);\n    }\n    if (maxItemsInBlock <= 0) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= 1; got \" + maxItemsInBlock);\n    }\n    if (minItemsInBlock > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= minItemsInBlock; got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n    if (2*(minItemsInBlock-1) > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be at least 2*(minItemsInBlock-1); got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n\n    maxDoc = state.segmentInfo.getDocCount();\n\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.minItemsInBlock = minItemsInBlock;\n      this.maxItemsInBlock = maxItemsInBlock;\n      CodecUtil.writeHeader(out, TERMS_CODEC_NAME, VERSION_CURRENT);   \n\n      //DEBUG = state.segmentName.equals(\"_4a\");\n\n      final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(termsIndexFileName, state.context);\n      CodecUtil.writeHeader(indexOut, TERMS_INDEX_CODEC_NAME, VERSION_CURRENT); \n\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentInfo.name;\n\n      // System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n      postingsWriter.init(out);                          // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out, indexOut);\n      }\n    }\n    this.indexOut = indexOut;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d637064d608752565d4f9f41b2497dfdfdde50e","date":1400798123,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter#VersionBlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public VersionBlockTreeTermsWriter(\n                                     SegmentWriteState state,\n                                     PostingsWriterBase postingsWriter,\n                                     int minItemsInBlock,\n                                     int maxItemsInBlock)\n    throws IOException\n  {\n    if (minItemsInBlock <= 1) {\n      throw new IllegalArgumentException(\"minItemsInBlock must be >= 2; got \" + minItemsInBlock);\n    }\n    if (maxItemsInBlock <= 0) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= 1; got \" + maxItemsInBlock);\n    }\n    if (minItemsInBlock > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= minItemsInBlock; got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n    if (2*(minItemsInBlock-1) > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be at least 2*(minItemsInBlock-1); got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n\n    maxDoc = state.segmentInfo.getDocCount();\n\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.minItemsInBlock = minItemsInBlock;\n      this.maxItemsInBlock = maxItemsInBlock;\n      CodecUtil.writeHeader(out, TERMS_CODEC_NAME, VERSION_CURRENT);   \n\n      //DEBUG = state.segmentName.equals(\"_4a\");\n\n      final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(termsIndexFileName, state.context);\n      CodecUtil.writeHeader(indexOut, TERMS_INDEX_CODEC_NAME, VERSION_CURRENT); \n\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentInfo.name;\n\n      // System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n      postingsWriter.init(out);                          // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out, indexOut);\n      }\n    }\n    this.indexOut = indexOut;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d640273789c74bf4f1412b99c67294c14293d154","date":1412169281,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter#VersionBlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter#VersionBlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","sourceNew":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public VersionBlockTreeTermsWriter(\n                                     SegmentWriteState state,\n                                     PostingsWriterBase postingsWriter,\n                                     int minItemsInBlock,\n                                     int maxItemsInBlock)\n    throws IOException\n  {\n    if (minItemsInBlock <= 1) {\n      throw new IllegalArgumentException(\"minItemsInBlock must be >= 2; got \" + minItemsInBlock);\n    }\n    if (maxItemsInBlock <= 0) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= 1; got \" + maxItemsInBlock);\n    }\n    if (minItemsInBlock > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= minItemsInBlock; got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n    if (2*(minItemsInBlock-1) > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be at least 2*(minItemsInBlock-1); got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n\n    maxDoc = state.segmentInfo.getDocCount();\n\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.minItemsInBlock = minItemsInBlock;\n      this.maxItemsInBlock = maxItemsInBlock;\n      CodecUtil.writeSegmentHeader(out, TERMS_CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);   \n\n      //DEBUG = state.segmentName.equals(\"_4a\");\n\n      final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(termsIndexFileName, state.context);\n      CodecUtil.writeSegmentHeader(indexOut, TERMS_INDEX_CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix); \n\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentInfo.name;\n\n      // System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n      postingsWriter.init(out);                          // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out, indexOut);\n      }\n    }\n    this.indexOut = indexOut;\n  }\n\n","sourceOld":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public VersionBlockTreeTermsWriter(\n                                     SegmentWriteState state,\n                                     PostingsWriterBase postingsWriter,\n                                     int minItemsInBlock,\n                                     int maxItemsInBlock)\n    throws IOException\n  {\n    if (minItemsInBlock <= 1) {\n      throw new IllegalArgumentException(\"minItemsInBlock must be >= 2; got \" + minItemsInBlock);\n    }\n    if (maxItemsInBlock <= 0) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= 1; got \" + maxItemsInBlock);\n    }\n    if (minItemsInBlock > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= minItemsInBlock; got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n    if (2*(minItemsInBlock-1) > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be at least 2*(minItemsInBlock-1); got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n\n    maxDoc = state.segmentInfo.getDocCount();\n\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.minItemsInBlock = minItemsInBlock;\n      this.maxItemsInBlock = maxItemsInBlock;\n      CodecUtil.writeHeader(out, TERMS_CODEC_NAME, VERSION_CURRENT);   \n\n      //DEBUG = state.segmentName.equals(\"_4a\");\n\n      final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(termsIndexFileName, state.context);\n      CodecUtil.writeHeader(indexOut, TERMS_INDEX_CODEC_NAME, VERSION_CURRENT); \n\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentInfo.name;\n\n      // System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n      postingsWriter.init(out);                          // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out, indexOut);\n      }\n    }\n    this.indexOut = indexOut;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter#VersionBlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter#VersionBlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","sourceNew":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public VersionBlockTreeTermsWriter(\n                                     SegmentWriteState state,\n                                     PostingsWriterBase postingsWriter,\n                                     int minItemsInBlock,\n                                     int maxItemsInBlock)\n    throws IOException\n  {\n    if (minItemsInBlock <= 1) {\n      throw new IllegalArgumentException(\"minItemsInBlock must be >= 2; got \" + minItemsInBlock);\n    }\n    if (maxItemsInBlock <= 0) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= 1; got \" + maxItemsInBlock);\n    }\n    if (minItemsInBlock > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= minItemsInBlock; got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n    if (2*(minItemsInBlock-1) > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be at least 2*(minItemsInBlock-1); got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n\n    maxDoc = state.segmentInfo.getDocCount();\n\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.minItemsInBlock = minItemsInBlock;\n      this.maxItemsInBlock = maxItemsInBlock;\n      CodecUtil.writeSegmentHeader(out, TERMS_CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);   \n\n      //DEBUG = state.segmentName.equals(\"_4a\");\n\n      final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(termsIndexFileName, state.context);\n      CodecUtil.writeSegmentHeader(indexOut, TERMS_INDEX_CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix); \n\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentInfo.name;\n\n      // System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n      postingsWriter.init(out);                          // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out, indexOut);\n      }\n    }\n    this.indexOut = indexOut;\n  }\n\n","sourceOld":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public VersionBlockTreeTermsWriter(\n                                     SegmentWriteState state,\n                                     PostingsWriterBase postingsWriter,\n                                     int minItemsInBlock,\n                                     int maxItemsInBlock)\n    throws IOException\n  {\n    if (minItemsInBlock <= 1) {\n      throw new IllegalArgumentException(\"minItemsInBlock must be >= 2; got \" + minItemsInBlock);\n    }\n    if (maxItemsInBlock <= 0) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= 1; got \" + maxItemsInBlock);\n    }\n    if (minItemsInBlock > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= minItemsInBlock; got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n    if (2*(minItemsInBlock-1) > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be at least 2*(minItemsInBlock-1); got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n\n    maxDoc = state.segmentInfo.getDocCount();\n\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.minItemsInBlock = minItemsInBlock;\n      this.maxItemsInBlock = maxItemsInBlock;\n      CodecUtil.writeHeader(out, TERMS_CODEC_NAME, VERSION_CURRENT);   \n\n      //DEBUG = state.segmentName.equals(\"_4a\");\n\n      final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(termsIndexFileName, state.context);\n      CodecUtil.writeHeader(indexOut, TERMS_INDEX_CODEC_NAME, VERSION_CURRENT); \n\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentInfo.name;\n\n      // System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n      postingsWriter.init(out);                          // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out, indexOut);\n      }\n    }\n    this.indexOut = indexOut;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter#VersionBlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter#VersionBlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","sourceNew":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public VersionBlockTreeTermsWriter(\n                                     SegmentWriteState state,\n                                     PostingsWriterBase postingsWriter,\n                                     int minItemsInBlock,\n                                     int maxItemsInBlock)\n    throws IOException\n  {\n    if (minItemsInBlock <= 1) {\n      throw new IllegalArgumentException(\"minItemsInBlock must be >= 2; got \" + minItemsInBlock);\n    }\n    if (maxItemsInBlock <= 0) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= 1; got \" + maxItemsInBlock);\n    }\n    if (minItemsInBlock > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= minItemsInBlock; got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n    if (2*(minItemsInBlock-1) > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be at least 2*(minItemsInBlock-1); got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n\n    maxDoc = state.segmentInfo.getDocCount();\n\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.minItemsInBlock = minItemsInBlock;\n      this.maxItemsInBlock = maxItemsInBlock;\n      CodecUtil.writeSegmentHeader(out, TERMS_CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);   \n\n      //DEBUG = state.segmentName.equals(\"_4a\");\n\n      final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(termsIndexFileName, state.context);\n      CodecUtil.writeSegmentHeader(indexOut, TERMS_INDEX_CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix); \n\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentInfo.name;\n\n      // System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n      postingsWriter.init(out, state);                          // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out, indexOut);\n      }\n    }\n    this.indexOut = indexOut;\n  }\n\n","sourceOld":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public VersionBlockTreeTermsWriter(\n                                     SegmentWriteState state,\n                                     PostingsWriterBase postingsWriter,\n                                     int minItemsInBlock,\n                                     int maxItemsInBlock)\n    throws IOException\n  {\n    if (minItemsInBlock <= 1) {\n      throw new IllegalArgumentException(\"minItemsInBlock must be >= 2; got \" + minItemsInBlock);\n    }\n    if (maxItemsInBlock <= 0) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= 1; got \" + maxItemsInBlock);\n    }\n    if (minItemsInBlock > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= minItemsInBlock; got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n    if (2*(minItemsInBlock-1) > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be at least 2*(minItemsInBlock-1); got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n\n    maxDoc = state.segmentInfo.getDocCount();\n\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.minItemsInBlock = minItemsInBlock;\n      this.maxItemsInBlock = maxItemsInBlock;\n      CodecUtil.writeSegmentHeader(out, TERMS_CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);   \n\n      //DEBUG = state.segmentName.equals(\"_4a\");\n\n      final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(termsIndexFileName, state.context);\n      CodecUtil.writeSegmentHeader(indexOut, TERMS_INDEX_CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix); \n\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentInfo.name;\n\n      // System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n      postingsWriter.init(out);                          // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out, indexOut);\n      }\n    }\n    this.indexOut = indexOut;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3384e6013a93e4d11b7d75388693f8d0388602bf","date":1413951663,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter#VersionBlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter#VersionBlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","sourceNew":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public VersionBlockTreeTermsWriter(\n                                     SegmentWriteState state,\n                                     PostingsWriterBase postingsWriter,\n                                     int minItemsInBlock,\n                                     int maxItemsInBlock)\n    throws IOException\n  {\n    if (minItemsInBlock <= 1) {\n      throw new IllegalArgumentException(\"minItemsInBlock must be >= 2; got \" + minItemsInBlock);\n    }\n    if (maxItemsInBlock <= 0) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= 1; got \" + maxItemsInBlock);\n    }\n    if (minItemsInBlock > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= minItemsInBlock; got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n    if (2*(minItemsInBlock-1) > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be at least 2*(minItemsInBlock-1); got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n\n    maxDoc = state.segmentInfo.getDocCount();\n\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.minItemsInBlock = minItemsInBlock;\n      this.maxItemsInBlock = maxItemsInBlock;\n      CodecUtil.writeIndexHeader(out, TERMS_CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);   \n\n      //DEBUG = state.segmentName.equals(\"_4a\");\n\n      final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(termsIndexFileName, state.context);\n      CodecUtil.writeIndexHeader(indexOut, TERMS_INDEX_CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix); \n\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentInfo.name;\n\n      // System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n      postingsWriter.init(out, state);                          // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out, indexOut);\n      }\n    }\n    this.indexOut = indexOut;\n  }\n\n","sourceOld":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public VersionBlockTreeTermsWriter(\n                                     SegmentWriteState state,\n                                     PostingsWriterBase postingsWriter,\n                                     int minItemsInBlock,\n                                     int maxItemsInBlock)\n    throws IOException\n  {\n    if (minItemsInBlock <= 1) {\n      throw new IllegalArgumentException(\"minItemsInBlock must be >= 2; got \" + minItemsInBlock);\n    }\n    if (maxItemsInBlock <= 0) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= 1; got \" + maxItemsInBlock);\n    }\n    if (minItemsInBlock > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= minItemsInBlock; got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n    if (2*(minItemsInBlock-1) > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be at least 2*(minItemsInBlock-1); got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n\n    maxDoc = state.segmentInfo.getDocCount();\n\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.minItemsInBlock = minItemsInBlock;\n      this.maxItemsInBlock = maxItemsInBlock;\n      CodecUtil.writeSegmentHeader(out, TERMS_CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);   \n\n      //DEBUG = state.segmentName.equals(\"_4a\");\n\n      final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(termsIndexFileName, state.context);\n      CodecUtil.writeSegmentHeader(indexOut, TERMS_INDEX_CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix); \n\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentInfo.name;\n\n      // System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n      postingsWriter.init(out, state);                          // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out, indexOut);\n      }\n    }\n    this.indexOut = indexOut;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter#VersionBlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter#VersionBlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","sourceNew":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public VersionBlockTreeTermsWriter(\n                                     SegmentWriteState state,\n                                     PostingsWriterBase postingsWriter,\n                                     int minItemsInBlock,\n                                     int maxItemsInBlock)\n    throws IOException\n  {\n    if (minItemsInBlock <= 1) {\n      throw new IllegalArgumentException(\"minItemsInBlock must be >= 2; got \" + minItemsInBlock);\n    }\n    if (maxItemsInBlock <= 0) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= 1; got \" + maxItemsInBlock);\n    }\n    if (minItemsInBlock > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= minItemsInBlock; got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n    if (2*(minItemsInBlock-1) > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be at least 2*(minItemsInBlock-1); got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n\n    maxDoc = state.segmentInfo.getDocCount();\n\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.minItemsInBlock = minItemsInBlock;\n      this.maxItemsInBlock = maxItemsInBlock;\n      CodecUtil.writeIndexHeader(out, TERMS_CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);   \n\n      //DEBUG = state.segmentName.equals(\"_4a\");\n\n      final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(termsIndexFileName, state.context);\n      CodecUtil.writeIndexHeader(indexOut, TERMS_INDEX_CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix); \n\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentInfo.name;\n\n      // System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n      postingsWriter.init(out, state);                          // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out, indexOut);\n      }\n    }\n    this.indexOut = indexOut;\n  }\n\n","sourceOld":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public VersionBlockTreeTermsWriter(\n                                     SegmentWriteState state,\n                                     PostingsWriterBase postingsWriter,\n                                     int minItemsInBlock,\n                                     int maxItemsInBlock)\n    throws IOException\n  {\n    if (minItemsInBlock <= 1) {\n      throw new IllegalArgumentException(\"minItemsInBlock must be >= 2; got \" + minItemsInBlock);\n    }\n    if (maxItemsInBlock <= 0) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= 1; got \" + maxItemsInBlock);\n    }\n    if (minItemsInBlock > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= minItemsInBlock; got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n    if (2*(minItemsInBlock-1) > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be at least 2*(minItemsInBlock-1); got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n\n    maxDoc = state.segmentInfo.getDocCount();\n\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.minItemsInBlock = minItemsInBlock;\n      this.maxItemsInBlock = maxItemsInBlock;\n      CodecUtil.writeSegmentHeader(out, TERMS_CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);   \n\n      //DEBUG = state.segmentName.equals(\"_4a\");\n\n      final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(termsIndexFileName, state.context);\n      CodecUtil.writeSegmentHeader(indexOut, TERMS_INDEX_CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix); \n\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentInfo.name;\n\n      // System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n      postingsWriter.init(out);                          // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out, indexOut);\n      }\n    }\n    this.indexOut = indexOut;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7de3c1dd4c0ae19854783135d925c794bc213fbd","date":1421160242,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter#VersionBlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter#VersionBlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","sourceNew":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public VersionBlockTreeTermsWriter(\n                                     SegmentWriteState state,\n                                     PostingsWriterBase postingsWriter,\n                                     int minItemsInBlock,\n                                     int maxItemsInBlock)\n    throws IOException\n  {\n    BlockTreeTermsWriter.validateSettings(minItemsInBlock, maxItemsInBlock);\n\n    maxDoc = state.segmentInfo.getDocCount();\n\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.minItemsInBlock = minItemsInBlock;\n      this.maxItemsInBlock = maxItemsInBlock;\n      CodecUtil.writeIndexHeader(out, TERMS_CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);   \n\n      //DEBUG = state.segmentName.equals(\"_4a\");\n\n      final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(termsIndexFileName, state.context);\n      CodecUtil.writeIndexHeader(indexOut, TERMS_INDEX_CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix); \n\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentInfo.name;\n\n      // System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n      postingsWriter.init(out, state);                          // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out, indexOut);\n      }\n    }\n    this.indexOut = indexOut;\n  }\n\n","sourceOld":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public VersionBlockTreeTermsWriter(\n                                     SegmentWriteState state,\n                                     PostingsWriterBase postingsWriter,\n                                     int minItemsInBlock,\n                                     int maxItemsInBlock)\n    throws IOException\n  {\n    if (minItemsInBlock <= 1) {\n      throw new IllegalArgumentException(\"minItemsInBlock must be >= 2; got \" + minItemsInBlock);\n    }\n    if (maxItemsInBlock <= 0) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= 1; got \" + maxItemsInBlock);\n    }\n    if (minItemsInBlock > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= minItemsInBlock; got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n    if (2*(minItemsInBlock-1) > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be at least 2*(minItemsInBlock-1); got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n\n    maxDoc = state.segmentInfo.getDocCount();\n\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.minItemsInBlock = minItemsInBlock;\n      this.maxItemsInBlock = maxItemsInBlock;\n      CodecUtil.writeIndexHeader(out, TERMS_CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);   \n\n      //DEBUG = state.segmentName.equals(\"_4a\");\n\n      final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(termsIndexFileName, state.context);\n      CodecUtil.writeIndexHeader(indexOut, TERMS_INDEX_CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix); \n\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentInfo.name;\n\n      // System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n      postingsWriter.init(out, state);                          // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out, indexOut);\n      }\n    }\n    this.indexOut = indexOut;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0267c69e2456a3477a1ad785723f2135da3117e","date":1425317087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter#VersionBlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter#VersionBlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","sourceNew":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public VersionBlockTreeTermsWriter(\n                                     SegmentWriteState state,\n                                     PostingsWriterBase postingsWriter,\n                                     int minItemsInBlock,\n                                     int maxItemsInBlock)\n    throws IOException\n  {\n    BlockTreeTermsWriter.validateSettings(minItemsInBlock, maxItemsInBlock);\n\n    maxDoc = state.segmentInfo.maxDoc();\n\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.minItemsInBlock = minItemsInBlock;\n      this.maxItemsInBlock = maxItemsInBlock;\n      CodecUtil.writeIndexHeader(out, TERMS_CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);   \n\n      //DEBUG = state.segmentName.equals(\"_4a\");\n\n      final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(termsIndexFileName, state.context);\n      CodecUtil.writeIndexHeader(indexOut, TERMS_INDEX_CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix); \n\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentInfo.name;\n\n      // System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n      postingsWriter.init(out, state);                          // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out, indexOut);\n      }\n    }\n    this.indexOut = indexOut;\n  }\n\n","sourceOld":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public VersionBlockTreeTermsWriter(\n                                     SegmentWriteState state,\n                                     PostingsWriterBase postingsWriter,\n                                     int minItemsInBlock,\n                                     int maxItemsInBlock)\n    throws IOException\n  {\n    BlockTreeTermsWriter.validateSettings(minItemsInBlock, maxItemsInBlock);\n\n    maxDoc = state.segmentInfo.getDocCount();\n\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.minItemsInBlock = minItemsInBlock;\n      this.maxItemsInBlock = maxItemsInBlock;\n      CodecUtil.writeIndexHeader(out, TERMS_CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);   \n\n      //DEBUG = state.segmentName.equals(\"_4a\");\n\n      final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(termsIndexFileName, state.context);\n      CodecUtil.writeIndexHeader(indexOut, TERMS_INDEX_CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix); \n\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentInfo.name;\n\n      // System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n      postingsWriter.init(out, state);                          // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out, indexOut);\n      }\n    }\n    this.indexOut = indexOut;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b06445ae1731e049327712db0454e5643ca9b7fe","date":1425329139,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter#VersionBlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter#VersionBlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","sourceNew":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public VersionBlockTreeTermsWriter(\n                                     SegmentWriteState state,\n                                     PostingsWriterBase postingsWriter,\n                                     int minItemsInBlock,\n                                     int maxItemsInBlock)\n    throws IOException\n  {\n    BlockTreeTermsWriter.validateSettings(minItemsInBlock, maxItemsInBlock);\n\n    maxDoc = state.segmentInfo.maxDoc();\n\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.minItemsInBlock = minItemsInBlock;\n      this.maxItemsInBlock = maxItemsInBlock;\n      CodecUtil.writeIndexHeader(out, TERMS_CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);   \n\n      //DEBUG = state.segmentName.equals(\"_4a\");\n\n      final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(termsIndexFileName, state.context);\n      CodecUtil.writeIndexHeader(indexOut, TERMS_INDEX_CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix); \n\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentInfo.name;\n\n      // System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n      postingsWriter.init(out, state);                          // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out, indexOut);\n      }\n    }\n    this.indexOut = indexOut;\n  }\n\n","sourceOld":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public VersionBlockTreeTermsWriter(\n                                     SegmentWriteState state,\n                                     PostingsWriterBase postingsWriter,\n                                     int minItemsInBlock,\n                                     int maxItemsInBlock)\n    throws IOException\n  {\n    BlockTreeTermsWriter.validateSettings(minItemsInBlock, maxItemsInBlock);\n\n    maxDoc = state.segmentInfo.getDocCount();\n\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.minItemsInBlock = minItemsInBlock;\n      this.maxItemsInBlock = maxItemsInBlock;\n      CodecUtil.writeIndexHeader(out, TERMS_CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);   \n\n      //DEBUG = state.segmentName.equals(\"_4a\");\n\n      final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(termsIndexFileName, state.context);\n      CodecUtil.writeIndexHeader(indexOut, TERMS_INDEX_CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix); \n\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentInfo.name;\n\n      // System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n      postingsWriter.init(out, state);                          // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out, indexOut);\n      }\n    }\n    this.indexOut = indexOut;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter#VersionBlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter#VersionBlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","sourceNew":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public VersionBlockTreeTermsWriter(\n                                     SegmentWriteState state,\n                                     PostingsWriterBase postingsWriter,\n                                     int minItemsInBlock,\n                                     int maxItemsInBlock)\n    throws IOException\n  {\n    BlockTreeTermsWriter.validateSettings(minItemsInBlock, maxItemsInBlock);\n\n    maxDoc = state.segmentInfo.maxDoc();\n\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.minItemsInBlock = minItemsInBlock;\n      this.maxItemsInBlock = maxItemsInBlock;\n      CodecUtil.writeIndexHeader(out, TERMS_CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);   \n\n      //DEBUG = state.segmentName.equals(\"_4a\");\n\n      final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(termsIndexFileName, state.context);\n      CodecUtil.writeIndexHeader(indexOut, TERMS_INDEX_CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix); \n\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentInfo.name;\n\n      // System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n      postingsWriter.init(out, state);                          // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out, indexOut);\n      }\n    }\n    this.indexOut = indexOut;\n  }\n\n","sourceOld":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public VersionBlockTreeTermsWriter(\n                                     SegmentWriteState state,\n                                     PostingsWriterBase postingsWriter,\n                                     int minItemsInBlock,\n                                     int maxItemsInBlock)\n    throws IOException\n  {\n    BlockTreeTermsWriter.validateSettings(minItemsInBlock, maxItemsInBlock);\n\n    maxDoc = state.segmentInfo.getDocCount();\n\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.minItemsInBlock = minItemsInBlock;\n      this.maxItemsInBlock = maxItemsInBlock;\n      CodecUtil.writeIndexHeader(out, TERMS_CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);   \n\n      //DEBUG = state.segmentName.equals(\"_4a\");\n\n      final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(termsIndexFileName, state.context);\n      CodecUtil.writeIndexHeader(indexOut, TERMS_INDEX_CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix); \n\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentInfo.name;\n\n      // System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n      postingsWriter.init(out, state);                          // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out, indexOut);\n      }\n    }\n    this.indexOut = indexOut;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter#VersionBlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter#VersionBlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","sourceNew":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public VersionBlockTreeTermsWriter(\n                                     SegmentWriteState state,\n                                     PostingsWriterBase postingsWriter,\n                                     int minItemsInBlock,\n                                     int maxItemsInBlock)\n    throws IOException\n  {\n    BlockTreeTermsWriter.validateSettings(minItemsInBlock, maxItemsInBlock);\n    segment = state.segmentInfo.name;\n\n    maxDoc = state.segmentInfo.maxDoc();\n\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.minItemsInBlock = minItemsInBlock;\n      this.maxItemsInBlock = maxItemsInBlock;\n      CodecUtil.writeIndexHeader(out, TERMS_CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);   \n\n      //DEBUG = state.segmentName.equals(\"_4a\");\n\n      final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(termsIndexFileName, state.context);\n      CodecUtil.writeIndexHeader(indexOut, TERMS_INDEX_CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix); \n\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentInfo.name;\n\n      // System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n      postingsWriter.init(out, state);                          // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out, indexOut);\n      }\n    }\n    this.indexOut = indexOut;\n  }\n\n","sourceOld":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public VersionBlockTreeTermsWriter(\n                                     SegmentWriteState state,\n                                     PostingsWriterBase postingsWriter,\n                                     int minItemsInBlock,\n                                     int maxItemsInBlock)\n    throws IOException\n  {\n    BlockTreeTermsWriter.validateSettings(minItemsInBlock, maxItemsInBlock);\n\n    maxDoc = state.segmentInfo.maxDoc();\n\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.minItemsInBlock = minItemsInBlock;\n      this.maxItemsInBlock = maxItemsInBlock;\n      CodecUtil.writeIndexHeader(out, TERMS_CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);   \n\n      //DEBUG = state.segmentName.equals(\"_4a\");\n\n      final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(termsIndexFileName, state.context);\n      CodecUtil.writeIndexHeader(indexOut, TERMS_INDEX_CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix); \n\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentInfo.name;\n\n      // System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n      postingsWriter.init(out, state);                          // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out, indexOut);\n      }\n    }\n    this.indexOut = indexOut;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter#VersionBlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter#VersionBlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","sourceNew":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public VersionBlockTreeTermsWriter(\n                                     SegmentWriteState state,\n                                     PostingsWriterBase postingsWriter,\n                                     int minItemsInBlock,\n                                     int maxItemsInBlock)\n    throws IOException\n  {\n    BlockTreeTermsWriter.validateSettings(minItemsInBlock, maxItemsInBlock);\n    segment = state.segmentInfo.name;\n\n    maxDoc = state.segmentInfo.maxDoc();\n\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.minItemsInBlock = minItemsInBlock;\n      this.maxItemsInBlock = maxItemsInBlock;\n      CodecUtil.writeIndexHeader(out, TERMS_CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);   \n\n      //DEBUG = state.segmentName.equals(\"_4a\");\n\n      final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(termsIndexFileName, state.context);\n      CodecUtil.writeIndexHeader(indexOut, TERMS_INDEX_CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix); \n\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentInfo.name;\n\n      // System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n      postingsWriter.init(out, state);                          // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out, indexOut);\n      }\n    }\n    this.indexOut = indexOut;\n  }\n\n","sourceOld":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public VersionBlockTreeTermsWriter(\n                                     SegmentWriteState state,\n                                     PostingsWriterBase postingsWriter,\n                                     int minItemsInBlock,\n                                     int maxItemsInBlock)\n    throws IOException\n  {\n    BlockTreeTermsWriter.validateSettings(minItemsInBlock, maxItemsInBlock);\n\n    maxDoc = state.segmentInfo.maxDoc();\n\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.minItemsInBlock = minItemsInBlock;\n      this.maxItemsInBlock = maxItemsInBlock;\n      CodecUtil.writeIndexHeader(out, TERMS_CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);   \n\n      //DEBUG = state.segmentName.equals(\"_4a\");\n\n      final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(termsIndexFileName, state.context);\n      CodecUtil.writeIndexHeader(indexOut, TERMS_INDEX_CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix); \n\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentInfo.name;\n\n      // System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n      postingsWriter.init(out, state);                          // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out, indexOut);\n      }\n    }\n    this.indexOut = indexOut;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter#VersionBlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter#VersionBlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","sourceNew":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public VersionBlockTreeTermsWriter(\n                                     SegmentWriteState state,\n                                     PostingsWriterBase postingsWriter,\n                                     int minItemsInBlock,\n                                     int maxItemsInBlock)\n    throws IOException\n  {\n    BlockTreeTermsWriter.validateSettings(minItemsInBlock, maxItemsInBlock);\n    segment = state.segmentInfo.name;\n\n    maxDoc = state.segmentInfo.maxDoc();\n\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.minItemsInBlock = minItemsInBlock;\n      this.maxItemsInBlock = maxItemsInBlock;\n      CodecUtil.writeIndexHeader(out, TERMS_CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);   \n\n      //DEBUG = state.segmentName.equals(\"_4a\");\n\n      final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(termsIndexFileName, state.context);\n      CodecUtil.writeIndexHeader(indexOut, TERMS_INDEX_CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix); \n\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentInfo.name;\n\n      // System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n      postingsWriter.init(out, state);                          // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out, indexOut);\n      }\n    }\n    this.indexOut = indexOut;\n  }\n\n","sourceOld":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public VersionBlockTreeTermsWriter(\n                                     SegmentWriteState state,\n                                     PostingsWriterBase postingsWriter,\n                                     int minItemsInBlock,\n                                     int maxItemsInBlock)\n    throws IOException\n  {\n    BlockTreeTermsWriter.validateSettings(minItemsInBlock, maxItemsInBlock);\n\n    maxDoc = state.segmentInfo.maxDoc();\n\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.minItemsInBlock = minItemsInBlock;\n      this.maxItemsInBlock = maxItemsInBlock;\n      CodecUtil.writeIndexHeader(out, TERMS_CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);   \n\n      //DEBUG = state.segmentName.equals(\"_4a\");\n\n      final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(termsIndexFileName, state.context);\n      CodecUtil.writeIndexHeader(indexOut, TERMS_INDEX_CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix); \n\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentInfo.name;\n\n      // System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n      postingsWriter.init(out, state);                          // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out, indexOut);\n      }\n    }\n    this.indexOut = indexOut;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"409da428f28953cf35fddd5c9ff5c7e4f5439863","date":1547556145,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter#VersionBlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter#VersionBlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","sourceNew":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public VersionBlockTreeTermsWriter(\n                                     SegmentWriteState state,\n                                     PostingsWriterBase postingsWriter,\n                                     int minItemsInBlock,\n                                     int maxItemsInBlock)\n    throws IOException\n  {\n    BlockTreeTermsWriter.validateSettings(minItemsInBlock, maxItemsInBlock);\n    maxDoc = state.segmentInfo.maxDoc();\n\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.minItemsInBlock = minItemsInBlock;\n      this.maxItemsInBlock = maxItemsInBlock;\n      CodecUtil.writeIndexHeader(out, TERMS_CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);   \n\n      //DEBUG = state.segmentName.equals(\"_4a\");\n\n      final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(termsIndexFileName, state.context);\n      CodecUtil.writeIndexHeader(indexOut, TERMS_INDEX_CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix); \n\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentInfo.name;\n\n      // System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n      postingsWriter.init(out, state);                          // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out, indexOut);\n      }\n    }\n    this.indexOut = indexOut;\n  }\n\n","sourceOld":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public VersionBlockTreeTermsWriter(\n                                     SegmentWriteState state,\n                                     PostingsWriterBase postingsWriter,\n                                     int minItemsInBlock,\n                                     int maxItemsInBlock)\n    throws IOException\n  {\n    BlockTreeTermsWriter.validateSettings(minItemsInBlock, maxItemsInBlock);\n    segment = state.segmentInfo.name;\n\n    maxDoc = state.segmentInfo.maxDoc();\n\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.minItemsInBlock = minItemsInBlock;\n      this.maxItemsInBlock = maxItemsInBlock;\n      CodecUtil.writeIndexHeader(out, TERMS_CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix);   \n\n      //DEBUG = state.segmentName.equals(\"_4a\");\n\n      final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(termsIndexFileName, state.context);\n      CodecUtil.writeIndexHeader(indexOut, TERMS_INDEX_CODEC_NAME, VERSION_CURRENT, state.segmentInfo.getId(), state.segmentSuffix); \n\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentInfo.name;\n\n      // System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n      postingsWriter.init(out, state);                          // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out, indexOut);\n      }\n    }\n    this.indexOut = indexOut;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"99eb4a732d1a908f4636ace52928876136bf1896":["d640273789c74bf4f1412b99c67294c14293d154"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b0267c69e2456a3477a1ad785723f2135da3117e"],"b0267c69e2456a3477a1ad785723f2135da3117e":["7de3c1dd4c0ae19854783135d925c794bc213fbd"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["99eb4a732d1a908f4636ace52928876136bf1896"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["b0267c69e2456a3477a1ad785723f2135da3117e","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["b0267c69e2456a3477a1ad785723f2135da3117e","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"7de3c1dd4c0ae19854783135d925c794bc213fbd":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d637064d608752565d4f9f41b2497dfdfdde50e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["7de3c1dd4c0ae19854783135d925c794bc213fbd","b0267c69e2456a3477a1ad785723f2135da3117e"],"409da428f28953cf35fddd5c9ff5c7e4f5439863":["28288370235ed02234a64753cdbf0c6ec096304a"],"b06445ae1731e049327712db0454e5643ca9b7fe":["7de3c1dd4c0ae19854783135d925c794bc213fbd","b0267c69e2456a3477a1ad785723f2135da3117e"],"9bb9a29a5e71a90295f175df8919802993142c9a":["4d637064d608752565d4f9f41b2497dfdfdde50e","d640273789c74bf4f1412b99c67294c14293d154"],"d640273789c74bf4f1412b99c67294c14293d154":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["9bb9a29a5e71a90295f175df8919802993142c9a","3384e6013a93e4d11b7d75388693f8d0388602bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["409da428f28953cf35fddd5c9ff5c7e4f5439863"]},"commit2Childs":{"99eb4a732d1a908f4636ace52928876136bf1896":["3384e6013a93e4d11b7d75388693f8d0388602bf"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"b0267c69e2456a3477a1ad785723f2135da3117e":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["409da428f28953cf35fddd5c9ff5c7e4f5439863"],"7de3c1dd4c0ae19854783135d925c794bc213fbd":["b0267c69e2456a3477a1ad785723f2135da3117e","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe"],"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"4d637064d608752565d4f9f41b2497dfdfdde50e":["9bb9a29a5e71a90295f175df8919802993142c9a","d640273789c74bf4f1412b99c67294c14293d154"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"409da428f28953cf35fddd5c9ff5c7e4f5439863":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b06445ae1731e049327712db0454e5643ca9b7fe":[],"d640273789c74bf4f1412b99c67294c14293d154":["99eb4a732d1a908f4636ace52928876136bf1896","9bb9a29a5e71a90295f175df8919802993142c9a"],"9bb9a29a5e71a90295f175df8919802993142c9a":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e","4d637064d608752565d4f9f41b2497dfdfdde50e"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["7de3c1dd4c0ae19854783135d925c794bc213fbd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}