{"path":"solr/core/src/java/org/apache/solr/core/SolrXMLSerializer#persist(Writer,SolrCoreXMLDef).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXMLSerializer#persist(Writer,SolrCoreXMLDef).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrXMLSerializer#persist(Writer,SolrCoreXMLDef).mjava","sourceNew":"  /** Writes the cores configuration node for a given core. */\n  private void persist(Writer w, SolrCoreXMLDef coreDef) throws IOException {\n    w.write(INDENT + INDENT + \"<core\");\n    Set<String> keys = coreDef.coreAttribs.keySet();\n    for (String key : keys) {\n      writeAttribute(w, key, coreDef.coreAttribs.get(key));\n    }\n    Properties properties = coreDef.coreProperties;\n    if (properties == null || properties.isEmpty()) w.write(\"/>\\n\"); // core\n    else {\n      w.write(\">\\n\");\n      writeProperties(w, properties, \"      \");\n      w.write(INDENT + INDENT + \"</core>\\n\");\n    }\n  }\n\n","sourceOld":"  /** Writes the cores configuration node for a given core. */\n  private void persist(Writer w, SolrCoreXMLDef coreDef) throws IOException {\n    w.write(INDENT + INDENT + \"<core\");\n    Set<String> keys = coreDef.coreAttribs.keySet();\n    for (String key : keys) {\n      writeAttribute(w, key, coreDef.coreAttribs.get(key));\n    }\n    Properties properties = coreDef.coreProperties;\n    if (properties == null || properties.isEmpty()) w.write(\"/>\\n\"); // core\n    else {\n      w.write(\">\\n\");\n      writeProperties(w, properties, \"      \");\n      w.write(INDENT + INDENT + \"</core>\\n\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXMLSerializer#persist(Writer,SolrCoreXMLDef).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrXMLSerializer#persist(Writer,SolrCoreXMLDef).mjava","sourceNew":"  /** Writes the cores configuration node for a given core. */\n  private void persist(Writer w, SolrCoreXMLDef coreDef) throws IOException {\n    w.write(INDENT + INDENT + \"<core\");\n    Set<String> keys = coreDef.coreAttribs.keySet();\n    for (String key : keys) {\n      writeAttribute(w, key, coreDef.coreAttribs.get(key));\n    }\n    Properties properties = coreDef.coreProperties;\n    if (properties == null || properties.isEmpty()) w.write(\"/>\\n\"); // core\n    else {\n      w.write(\">\\n\");\n      writeProperties(w, properties, \"      \");\n      w.write(INDENT + INDENT + \"</core>\\n\");\n    }\n  }\n\n","sourceOld":"  /** Writes the cores configuration node for a given core. */\n  private void persist(Writer w, SolrCoreXMLDef coreDef) throws IOException {\n    w.write(INDENT + INDENT + \"<core\");\n    Set<String> keys = coreDef.coreAttribs.keySet();\n    for (String key : keys) {\n      writeAttribute(w, key, coreDef.coreAttribs.get(key));\n    }\n    Properties properties = coreDef.coreProperties;\n    if (properties == null || properties.isEmpty()) w.write(\"/>\\n\"); // core\n    else {\n      w.write(\">\\n\");\n      writeProperties(w, properties, \"      \");\n      w.write(INDENT + INDENT + \"</core>\\n\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXMLSerializer#persist(Writer,SolrCoreXMLDef).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrXMLSerializer#persist(Writer,SolrCoreXMLDef).mjava","sourceNew":"  /** Writes the cores configuration node for a given core. */\n  private void persist(Writer w, SolrCoreXMLDef coreDef) throws IOException {\n    w.write(INDENT + INDENT + \"<core\");\n    Set<String> keys = coreDef.coreAttribs.keySet();\n    for (String key : keys) {\n      writeAttribute(w, key, coreDef.coreAttribs.get(key));\n    }\n    Properties properties = coreDef.coreProperties;\n    if (properties == null || properties.isEmpty()) w.write(\"/>\\n\"); // core\n    else {\n      w.write(\">\\n\");\n      writeProperties(w, properties, \"      \");\n      w.write(INDENT + INDENT + \"</core>\\n\");\n    }\n  }\n\n","sourceOld":"  /** Writes the cores configuration node for a given core. */\n  private void persist(Writer w, SolrCoreXMLDef coreDef) throws IOException {\n    w.write(INDENT + INDENT + \"<core\");\n    Set<String> keys = coreDef.coreAttribs.keySet();\n    for (String key : keys) {\n      writeAttribute(w, key, coreDef.coreAttribs.get(key));\n    }\n    Properties properties = coreDef.coreProperties;\n    if (properties == null || properties.isEmpty()) w.write(\"/>\\n\"); // core\n    else {\n      w.write(\">\\n\");\n      writeProperties(w, properties, \"      \");\n      w.write(INDENT + INDENT + \"</core>\\n\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"862bf0de4075dc8febeba1ba433bcf74c78d356e","date":1407456501,"type":4,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/SolrXMLSerializer#persist(Writer,SolrCoreXMLDef).mjava","sourceNew":null,"sourceOld":"  /** Writes the cores configuration node for a given core. */\n  private void persist(Writer w, SolrCoreXMLDef coreDef) throws IOException {\n    w.write(INDENT + INDENT + \"<core\");\n    Set<String> keys = coreDef.coreAttribs.keySet();\n    for (String key : keys) {\n      writeAttribute(w, key, coreDef.coreAttribs.get(key));\n    }\n    Properties properties = coreDef.coreProperties;\n    if (properties == null || properties.isEmpty()) w.write(\"/>\\n\"); // core\n    else {\n      w.write(\">\\n\");\n      writeProperties(w, properties, \"      \");\n      w.write(INDENT + INDENT + \"</core>\\n\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"862bf0de4075dc8febeba1ba433bcf74c78d356e":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["862bf0de4075dc8febeba1ba433bcf74c78d356e"]},"commit2Childs":{"862bf0de4075dc8febeba1ba433bcf74c78d356e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["862bf0de4075dc8febeba1ba433bcf74c78d356e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}