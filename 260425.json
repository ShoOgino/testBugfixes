{"path":"lucene/src/test/org/apache/lucene/search/function/TestOrdValues#doTestExactScore(String,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/function/TestOrdValues#doTestExactScore(String,boolean).mjava","pathOld":"src/test/org/apache/lucene/search/function/TestOrdValues#doTestExactScore(String,boolean).mjava","sourceNew":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new ValueSourceQuery(vs);\n    TopDocs td = s.search(q, null, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i;\n      assertEquals(\"score of result \" + i + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" shuould be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n  }\n\n","sourceOld":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new ValueSourceQuery(vs);\n    TopDocs td = s.search(q, null, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i;\n      assertEquals(\"score of result \" + i + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" shuould be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/function/TestOrdValues#doTestExactScore(String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestOrdValues#doTestExactScore(String,boolean).mjava","sourceNew":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new ValueSourceQuery(vs);\n    TopDocs td = s.search(q, null, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i;\n      assertEquals(\"score of result \" + i + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" shuould be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n    s.close();\n  }\n\n","sourceOld":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new ValueSourceQuery(vs);\n    TopDocs td = s.search(q, null, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i;\n      assertEquals(\"score of result \" + i + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" shuould be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/function/TestOrdValues#doTestExactScore(String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestOrdValues#doTestExactScore(String,boolean).mjava","sourceNew":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new ValueSourceQuery(vs);\n    TopDocs td = s.search(q, null, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i;\n      assertEquals(\"score of result \" + i + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" shuould be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n    s.close();\n  }\n\n","sourceOld":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new ValueSourceQuery(vs);\n    TopDocs td = s.search(q, null, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i;\n      assertEquals(\"score of result \" + i + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" shuould be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"290622dd4fb1bcc2f06bcd5d4494522d1f24df5c","date":1309476031,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/function/TestOrdValues#doTestExactScore(String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestOrdValues#doTestExactScore(String,boolean).mjava","sourceNew":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new FunctionQuery(vs);\n    TopDocs td = s.search(q, null, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i;\n      assertEquals(\"score of result \" + i + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" shuould be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n    s.close();\n  }\n\n","sourceOld":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new ValueSourceQuery(vs);\n    TopDocs td = s.search(q, null, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i;\n      assertEquals(\"score of result \" + i + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" shuould be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n    s.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestOrdValues#doTestExactScore(String,boolean).mjava","sourceNew":null,"sourceOld":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new ValueSourceQuery(vs);\n    TopDocs td = s.search(q, null, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i;\n      assertEquals(\"score of result \" + i + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" shuould be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n    s.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestOrdValues#doTestExactScore(String,boolean).mjava","sourceNew":null,"sourceOld":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new ValueSourceQuery(vs);\n    TopDocs td = s.search(q, null, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i;\n      assertEquals(\"score of result \" + i + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" shuould be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n    s.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"290622dd4fb1bcc2f06bcd5d4494522d1f24df5c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","290622dd4fb1bcc2f06bcd5d4494522d1f24df5c"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","290622dd4fb1bcc2f06bcd5d4494522d1f24df5c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["290622dd4fb1bcc2f06bcd5d4494522d1f24df5c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"290622dd4fb1bcc2f06bcd5d4494522d1f24df5c":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["290622dd4fb1bcc2f06bcd5d4494522d1f24df5c","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}