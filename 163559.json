{"path":"src/test/org/apache/solr/BasicFunctionalityTest#doFacets(String,String...).mjava","commits":[{"id":"090a3d6e41dac3d2e4ba2efd822d75846a41eca8","date":1179509667,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/BasicFunctionalityTest#doFacets(String,String...).mjava","pathOld":"src/test/org/apache/solr/BasicFunctionalityTest#doFacets(String).mjava","sourceNew":"  public void doFacets(String f, String... params) {\n    String pre = \"//lst[@name='\"+f+\"']\";\n    String notc = \"id:[* TO *] -\"+f+\":C\";\n\n    assertU(adoc(\"id\", \"1\",  f, \"A\"));\n    assertU(adoc(\"id\", \"2\",  f, \"B\"));\n    assertU(adoc(\"id\", \"3\",  f, \"C\"));\n    assertU(adoc(\"id\", \"4\",  f, \"C\"));\n    assertU(adoc(\"id\", \"5\",  f, \"D\"));\n    assertU(adoc(\"id\", \"6\",  f, \"E\"));\n    assertU(adoc(\"id\", \"7\",  f, \"E\"));\n    assertU(adoc(\"id\", \"8\",  f, \"E\"));\n    assertU(adoc(\"id\", \"9\",  f, \"F\"));\n    assertU(adoc(\"id\", \"10\", f, \"G\"));\n    assertU(adoc(\"id\", \"11\", f, \"G\"));\n    assertU(adoc(\"id\", \"12\", f, \"G\"));\n    assertU(adoc(\"id\", \"13\", f, \"G\"));\n    assertU(adoc(\"id\", \"14\", f, \"G\"));\n    assertU(commit());\n\n    assertQ(\"check counts for unlimited facet\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=7]\"\n\n            ,pre+\"/int[@name='G'][.='5']\"\n            ,pre+\"/int[@name='E'][.='3']\"\n            ,pre+\"/int[@name='C'][.='2']\"\n\n            ,pre+\"/int[@name='A'][.='1']\"\n            ,pre+\"/int[@name='B'][.='1']\"\n            ,pre+\"/int[@name='D'][.='1']\"\n            ,pre+\"/int[@name='F'][.='1']\"\n            );\n\n    assertQ(\"check counts for facet with generous limit\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.limit\", \"100\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=7]\"\n\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            ,pre+\"/int[3][@name='C'][.='2']\"\n\n            ,pre+\"/int[@name='A'][.='1']\"\n            ,pre+\"/int[@name='B'][.='1']\"\n            ,pre+\"/int[@name='D'][.='1']\"\n            ,pre+\"/int[@name='F'][.='1']\"\n            );\n\n    assertQ(\"check counts for limited facet\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.limit\", \"2\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            );\n\n   assertQ(\"check offset\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.offset\", \"1\"\n                ,\"facet.limit\", \"1\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n\n            ,pre+\"/int[1][@name='E'][.='3']\"\n            );\n\n    assertQ(\"test sorted facet paging with zero (don't count in limit)\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"0\"\n                ,\"facet.limit\",\"6\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=6]\"\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            ,pre+\"/int[3][@name='A'][.='1']\"\n            ,pre+\"/int[4][@name='B'][.='1']\"\n            ,pre+\"/int[5][@name='D'][.='1']\"\n            ,pre+\"/int[6][@name='F'][.='1']\"\n            );\n\n    assertQ(\"test sorted facet paging with zero (test offset correctness)\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"3\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"true\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='D'][.='1']\"\n            );\n\n   assertQ(\"test facet unsorted paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"0\"\n                ,\"facet.limit\",\"6\"\n                ,\"facet.sort\",\"false\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=6]\"\n            ,pre+\"/int[1][@name='A'][.='1']\"\n            ,pre+\"/int[2][@name='B'][.='1']\"\n            ,pre+\"/int[3][@name='D'][.='1']\"\n            ,pre+\"/int[4][@name='E'][.='3']\"\n            ,pre+\"/int[5][@name='F'][.='1']\"\n            ,pre+\"/int[6][@name='G'][.='5']\"\n            );\n\n   assertQ(\"test facet unsorted paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"3\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"false\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='E'][.='3']\"\n            ,pre+\"/int[2][@name='F'][.='1']\"\n            );\n\n    assertQ(\"test facet unsorted paging, mincount=2\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"2\"\n                ,\"facet.offset\",\"1\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"false\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            );\n  }\n\n","sourceOld":"  public void doFacets(String f) {\n    String pre = \"//lst[@name='\"+f+\"']\";\n    String notc = \"id:[* TO *] -\"+f+\":C\";\n\n    assertU(adoc(\"id\", \"1\",  f, \"A\"));\n    assertU(adoc(\"id\", \"2\",  f, \"B\"));\n    assertU(adoc(\"id\", \"3\",  f, \"C\"));\n    assertU(adoc(\"id\", \"4\",  f, \"C\"));\n    assertU(adoc(\"id\", \"5\",  f, \"D\"));\n    assertU(adoc(\"id\", \"6\",  f, \"E\"));\n    assertU(adoc(\"id\", \"7\",  f, \"E\"));\n    assertU(adoc(\"id\", \"8\",  f, \"E\"));\n    assertU(adoc(\"id\", \"9\",  f, \"F\"));\n    assertU(adoc(\"id\", \"10\", f, \"G\"));\n    assertU(adoc(\"id\", \"11\", f, \"G\"));\n    assertU(adoc(\"id\", \"12\", f, \"G\"));\n    assertU(adoc(\"id\", \"13\", f, \"G\"));\n    assertU(adoc(\"id\", \"14\", f, \"G\"));\n    assertU(commit());\n\n    assertQ(\"check counts for unlimited facet\",\n            req(\"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=7]\"\n\n            ,pre+\"/int[@name='G'][.='5']\"\n            ,pre+\"/int[@name='E'][.='3']\"\n            ,pre+\"/int[@name='C'][.='2']\"\n\n            ,pre+\"/int[@name='A'][.='1']\"\n            ,pre+\"/int[@name='B'][.='1']\"\n            ,pre+\"/int[@name='D'][.='1']\"\n            ,pre+\"/int[@name='F'][.='1']\"\n            );\n\n    assertQ(\"check counts for facet with generous limit\",\n            req(\"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.limit\", \"100\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=7]\"\n\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            ,pre+\"/int[3][@name='C'][.='2']\"\n\n            ,pre+\"/int[@name='A'][.='1']\"\n            ,pre+\"/int[@name='B'][.='1']\"\n            ,pre+\"/int[@name='D'][.='1']\"\n            ,pre+\"/int[@name='F'][.='1']\"\n            );\n\n    assertQ(\"check counts for limited facet\",\n            req(\"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.limit\", \"2\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            );\n\n   assertQ(\"check offset\",\n            req(\"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.offset\", \"1\"\n                ,\"facet.limit\", \"1\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n\n            ,pre+\"/int[1][@name='E'][.='3']\"\n            );\n\n    assertQ(\"test sorted facet paging with zero (don't count in limit)\",\n            req(\"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"0\"\n                ,\"facet.limit\",\"6\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=6]\"\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            ,pre+\"/int[3][@name='A'][.='1']\"\n            ,pre+\"/int[4][@name='B'][.='1']\"\n            ,pre+\"/int[5][@name='D'][.='1']\"\n            ,pre+\"/int[6][@name='F'][.='1']\"\n            );\n\n    assertQ(\"test sorted facet paging with zero (test offset correctness)\",\n            req(\"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"3\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"true\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='D'][.='1']\"\n            );\n\n   assertQ(\"test facet unsorted paging\",\n            req(\"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"0\"\n                ,\"facet.limit\",\"6\"\n                ,\"facet.sort\",\"false\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=6]\"\n            ,pre+\"/int[1][@name='A'][.='1']\"\n            ,pre+\"/int[2][@name='B'][.='1']\"\n            ,pre+\"/int[3][@name='D'][.='1']\"\n            ,pre+\"/int[4][@name='E'][.='3']\"\n            ,pre+\"/int[5][@name='F'][.='1']\"\n            ,pre+\"/int[6][@name='G'][.='5']\"\n            );\n\n   assertQ(\"test facet unsorted paging\",\n            req(\"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"3\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"false\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='E'][.='3']\"\n            ,pre+\"/int[2][@name='F'][.='1']\"\n            );\n\n    assertQ(\"test facet unsorted paging, mincount=2\",\n            req(\"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"2\"\n                ,\"facet.offset\",\"1\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"false\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17f9c12074f42db9f3cff34b42f9c4a60368a97d","date":1216926137,"type":5,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/test/org/apache/solr/request/SimpleFacetsTest#doFacets(String,String...).mjava","pathOld":"src/test/org/apache/solr/BasicFunctionalityTest#doFacets(String,String...).mjava","sourceNew":"  public void doFacets(String f, String... params) {\n    String pre = \"//lst[@name='\"+f+\"']\";\n    String notc = \"id:[* TO *] -\"+f+\":C\";\n\n    assertU(adoc(\"id\", \"1\",  f, \"A\"));\n    assertU(adoc(\"id\", \"2\",  f, \"B\"));\n    assertU(adoc(\"id\", \"3\",  f, \"C\"));\n    assertU(adoc(\"id\", \"4\",  f, \"C\"));\n    assertU(adoc(\"id\", \"5\",  f, \"D\"));\n    assertU(adoc(\"id\", \"6\",  f, \"E\"));\n    assertU(adoc(\"id\", \"7\",  f, \"E\"));\n    assertU(adoc(\"id\", \"8\",  f, \"E\"));\n    assertU(adoc(\"id\", \"9\",  f, \"F\"));\n    assertU(adoc(\"id\", \"10\", f, \"G\"));\n    assertU(adoc(\"id\", \"11\", f, \"G\"));\n    assertU(adoc(\"id\", \"12\", f, \"G\"));\n    assertU(adoc(\"id\", \"13\", f, \"G\"));\n    assertU(adoc(\"id\", \"14\", f, \"G\"));\n    assertU(commit());\n\n    assertQ(\"check counts for unlimited facet\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=7]\"\n\n            ,pre+\"/int[@name='G'][.='5']\"\n            ,pre+\"/int[@name='E'][.='3']\"\n            ,pre+\"/int[@name='C'][.='2']\"\n\n            ,pre+\"/int[@name='A'][.='1']\"\n            ,pre+\"/int[@name='B'][.='1']\"\n            ,pre+\"/int[@name='D'][.='1']\"\n            ,pre+\"/int[@name='F'][.='1']\"\n            );\n\n    assertQ(\"check counts for facet with generous limit\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.limit\", \"100\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=7]\"\n\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            ,pre+\"/int[3][@name='C'][.='2']\"\n\n            ,pre+\"/int[@name='A'][.='1']\"\n            ,pre+\"/int[@name='B'][.='1']\"\n            ,pre+\"/int[@name='D'][.='1']\"\n            ,pre+\"/int[@name='F'][.='1']\"\n            );\n\n    assertQ(\"check counts for limited facet\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.limit\", \"2\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            );\n\n   assertQ(\"check offset\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.offset\", \"1\"\n                ,\"facet.limit\", \"1\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n\n            ,pre+\"/int[1][@name='E'][.='3']\"\n            );\n\n    assertQ(\"test sorted facet paging with zero (don't count in limit)\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"0\"\n                ,\"facet.limit\",\"6\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=6]\"\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            ,pre+\"/int[3][@name='A'][.='1']\"\n            ,pre+\"/int[4][@name='B'][.='1']\"\n            ,pre+\"/int[5][@name='D'][.='1']\"\n            ,pre+\"/int[6][@name='F'][.='1']\"\n            );\n\n    assertQ(\"test sorted facet paging with zero (test offset correctness)\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"3\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"true\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='D'][.='1']\"\n            );\n\n   assertQ(\"test facet unsorted paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"0\"\n                ,\"facet.limit\",\"6\"\n                ,\"facet.sort\",\"false\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=6]\"\n            ,pre+\"/int[1][@name='A'][.='1']\"\n            ,pre+\"/int[2][@name='B'][.='1']\"\n            ,pre+\"/int[3][@name='D'][.='1']\"\n            ,pre+\"/int[4][@name='E'][.='3']\"\n            ,pre+\"/int[5][@name='F'][.='1']\"\n            ,pre+\"/int[6][@name='G'][.='5']\"\n            );\n\n   assertQ(\"test facet unsorted paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"3\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"false\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='E'][.='3']\"\n            ,pre+\"/int[2][@name='F'][.='1']\"\n            );\n\n    assertQ(\"test facet unsorted paging, mincount=2\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"2\"\n                ,\"facet.offset\",\"1\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"false\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            );\n  }\n\n","sourceOld":"  public void doFacets(String f, String... params) {\n    String pre = \"//lst[@name='\"+f+\"']\";\n    String notc = \"id:[* TO *] -\"+f+\":C\";\n\n    assertU(adoc(\"id\", \"1\",  f, \"A\"));\n    assertU(adoc(\"id\", \"2\",  f, \"B\"));\n    assertU(adoc(\"id\", \"3\",  f, \"C\"));\n    assertU(adoc(\"id\", \"4\",  f, \"C\"));\n    assertU(adoc(\"id\", \"5\",  f, \"D\"));\n    assertU(adoc(\"id\", \"6\",  f, \"E\"));\n    assertU(adoc(\"id\", \"7\",  f, \"E\"));\n    assertU(adoc(\"id\", \"8\",  f, \"E\"));\n    assertU(adoc(\"id\", \"9\",  f, \"F\"));\n    assertU(adoc(\"id\", \"10\", f, \"G\"));\n    assertU(adoc(\"id\", \"11\", f, \"G\"));\n    assertU(adoc(\"id\", \"12\", f, \"G\"));\n    assertU(adoc(\"id\", \"13\", f, \"G\"));\n    assertU(adoc(\"id\", \"14\", f, \"G\"));\n    assertU(commit());\n\n    assertQ(\"check counts for unlimited facet\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=7]\"\n\n            ,pre+\"/int[@name='G'][.='5']\"\n            ,pre+\"/int[@name='E'][.='3']\"\n            ,pre+\"/int[@name='C'][.='2']\"\n\n            ,pre+\"/int[@name='A'][.='1']\"\n            ,pre+\"/int[@name='B'][.='1']\"\n            ,pre+\"/int[@name='D'][.='1']\"\n            ,pre+\"/int[@name='F'][.='1']\"\n            );\n\n    assertQ(\"check counts for facet with generous limit\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.limit\", \"100\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=7]\"\n\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            ,pre+\"/int[3][@name='C'][.='2']\"\n\n            ,pre+\"/int[@name='A'][.='1']\"\n            ,pre+\"/int[@name='B'][.='1']\"\n            ,pre+\"/int[@name='D'][.='1']\"\n            ,pre+\"/int[@name='F'][.='1']\"\n            );\n\n    assertQ(\"check counts for limited facet\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.limit\", \"2\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            );\n\n   assertQ(\"check offset\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.offset\", \"1\"\n                ,\"facet.limit\", \"1\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n\n            ,pre+\"/int[1][@name='E'][.='3']\"\n            );\n\n    assertQ(\"test sorted facet paging with zero (don't count in limit)\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"0\"\n                ,\"facet.limit\",\"6\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=6]\"\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            ,pre+\"/int[3][@name='A'][.='1']\"\n            ,pre+\"/int[4][@name='B'][.='1']\"\n            ,pre+\"/int[5][@name='D'][.='1']\"\n            ,pre+\"/int[6][@name='F'][.='1']\"\n            );\n\n    assertQ(\"test sorted facet paging with zero (test offset correctness)\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"3\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"true\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='D'][.='1']\"\n            );\n\n   assertQ(\"test facet unsorted paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"0\"\n                ,\"facet.limit\",\"6\"\n                ,\"facet.sort\",\"false\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=6]\"\n            ,pre+\"/int[1][@name='A'][.='1']\"\n            ,pre+\"/int[2][@name='B'][.='1']\"\n            ,pre+\"/int[3][@name='D'][.='1']\"\n            ,pre+\"/int[4][@name='E'][.='3']\"\n            ,pre+\"/int[5][@name='F'][.='1']\"\n            ,pre+\"/int[6][@name='G'][.='5']\"\n            );\n\n   assertQ(\"test facet unsorted paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"3\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"false\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='E'][.='3']\"\n            ,pre+\"/int[2][@name='F'][.='1']\"\n            );\n\n    assertQ(\"test facet unsorted paging, mincount=2\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"2\"\n                ,\"facet.offset\",\"1\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"false\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"17f9c12074f42db9f3cff34b42f9c4a60368a97d":["090a3d6e41dac3d2e4ba2efd822d75846a41eca8"],"090a3d6e41dac3d2e4ba2efd822d75846a41eca8":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["090a3d6e41dac3d2e4ba2efd822d75846a41eca8"],"17f9c12074f42db9f3cff34b42f9c4a60368a97d":[],"090a3d6e41dac3d2e4ba2efd822d75846a41eca8":["17f9c12074f42db9f3cff34b42f9c4a60368a97d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["17f9c12074f42db9f3cff34b42f9c4a60368a97d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}