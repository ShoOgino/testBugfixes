{"path":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#ZKPrinter(HttpServletResponse,Writer,ZkController,String).mjava","commits":[{"id":"c7d0565444d6381434fbff66cecf07da249f2bb4","date":1357484111,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#ZKPrinter(HttpServletResponse,Writer,ZkController,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#ZKPrinter(HttpServletResponse,PrintWriter,ZkController,String).mjava","sourceNew":"    public ZKPrinter(HttpServletResponse response, Writer out, ZkController controller, String addr) throws IOException {\n      this.response = response;\n      this.out = out;\n      this.addr = addr;\n\n      if (addr == null) {\n        if (controller != null) {\n          // this core is zk enabled\n          keeperAddr = controller.getZkServerAddress();\n          zkClient = controller.getZkClient();\n          if (zkClient != null && zkClient.isConnected()) {\n            return;\n          } else {\n            // try a different client with this address\n            addr = keeperAddr;\n          }\n        }\n      }\n\n      keeperAddr = addr;\n      if (addr == null) {\n        writeError(404, \"Zookeeper is not configured for this Solr Core. Please try connecting to an alternate zookeeper address.\");\n        return;\n      }\n\n      try {\n        zkClient = new SolrZkClient(addr, 10000);\n        doClose = true;\n      } catch (Exception e) {\n        writeError(503, \"Could not connect to zookeeper at '\" + addr + \"'\\\"\");\n        zkClient = null;\n        return;\n      }\n\n    }\n\n","sourceOld":"    public ZKPrinter(HttpServletResponse response, PrintWriter out, ZkController controller, String addr) throws IOException {\n      this.response = response;\n      this.out = out;\n      this.addr = addr;\n\n      if (addr == null) {\n        if (controller != null) {\n          // this core is zk enabled\n          keeperAddr = controller.getZkServerAddress();\n          zkClient = controller.getZkClient();\n          if (zkClient != null && zkClient.isConnected()) {\n            return;\n          } else {\n            // try a different client with this address\n            addr = keeperAddr;\n          }\n        }\n      }\n\n      keeperAddr = addr;\n      if (addr == null) {\n        writeError(404, \"Zookeeper is not configured for this Solr Core. Please try connecting to an alternate zookeeper address.\");\n        return;\n      }\n\n      try {\n        zkClient = new SolrZkClient(addr, 10000);\n        doClose = true;\n      } catch (Exception e) {\n        writeError(503, \"Could not connect to zookeeper at '\" + addr + \"'\\\"\");\n        zkClient = null;\n        return;\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#ZKPrinter(HttpServletResponse,Writer,ZkController,String).mjava","pathOld":"/dev/null","sourceNew":"    public ZKPrinter(HttpServletResponse response, Writer out, ZkController controller, String addr) throws IOException {\n      this.response = response;\n      this.out = out;\n      this.addr = addr;\n\n      if (addr == null) {\n        if (controller != null) {\n          // this core is zk enabled\n          keeperAddr = controller.getZkServerAddress();\n          zkClient = controller.getZkClient();\n          if (zkClient != null && zkClient.isConnected()) {\n            return;\n          } else {\n            // try a different client with this address\n            addr = keeperAddr;\n          }\n        }\n      }\n\n      keeperAddr = addr;\n      if (addr == null) {\n        writeError(404, \"Zookeeper is not configured for this Solr Core. Please try connecting to an alternate zookeeper address.\");\n        return;\n      }\n\n      try {\n        zkClient = new SolrZkClient(addr, 10000);\n        doClose = true;\n      } catch (Exception e) {\n        writeError(503, \"Could not connect to zookeeper at '\" + addr + \"'\\\"\");\n        zkClient = null;\n        return;\n      }\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d69bac0909e90a1213b0850137b00ac371f866e1","date":1419979130,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#ZKPrinter(HttpServletResponse,Writer,ZkController,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#ZKPrinter(HttpServletResponse,Writer,ZkController,String).mjava","sourceNew":"    public ZKPrinter(HttpServletResponse response, Writer out, ZkController controller, String addr) throws IOException {\n      this.zkController = controller;\n      this.response = response;\n      this.out = out;\n      this.addr = addr;\n\n      if (addr == null) {\n        if (controller != null) {\n          // this core is zk enabled\n          keeperAddr = controller.getZkServerAddress();\n          zkClient = controller.getZkClient();\n          if (zkClient != null && zkClient.isConnected()) {\n            return;\n          } else {\n            // try a different client with this address\n            addr = keeperAddr;\n          }\n        }\n      }\n\n      keeperAddr = addr;\n      if (addr == null) {\n        writeError(404, \"Zookeeper is not configured for this Solr Core. Please try connecting to an alternate zookeeper address.\");\n        return;\n      }\n\n      try {\n        zkClient = new SolrZkClient(addr, 10000);\n        doClose = true;\n      } catch (Exception e) {\n        writeError(503, \"Could not connect to zookeeper at '\" + addr + \"'\\\"\");\n        zkClient = null;\n        return;\n      }\n\n    }\n\n","sourceOld":"    public ZKPrinter(HttpServletResponse response, Writer out, ZkController controller, String addr) throws IOException {\n      this.response = response;\n      this.out = out;\n      this.addr = addr;\n\n      if (addr == null) {\n        if (controller != null) {\n          // this core is zk enabled\n          keeperAddr = controller.getZkServerAddress();\n          zkClient = controller.getZkClient();\n          if (zkClient != null && zkClient.isConnected()) {\n            return;\n          } else {\n            // try a different client with this address\n            addr = keeperAddr;\n          }\n        }\n      }\n\n      keeperAddr = addr;\n      if (addr == null) {\n        writeError(404, \"Zookeeper is not configured for this Solr Core. Please try connecting to an alternate zookeeper address.\");\n        return;\n      }\n\n      try {\n        zkClient = new SolrZkClient(addr, 10000);\n        doClose = true;\n      } catch (Exception e) {\n        writeError(503, \"Could not connect to zookeeper at '\" + addr + \"'\\\"\");\n        zkClient = null;\n        return;\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80ebe5b1d946f7c2ed9c46206b0c7254dc21206a","date":1443442239,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperInfoHandler.ZKPrinter#ZKPrinter(ZkController,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#ZKPrinter(HttpServletResponse,Writer,ZkController,String).mjava","sourceNew":"    public ZKPrinter(ZkController controller, String addr) throws IOException {\n      this.zkController = controller;\n      this.addr = addr;\n\n      if (addr == null) {\n        if (controller != null) {\n          // this core is zk enabled\n          keeperAddr = controller.getZkServerAddress();\n          zkClient = controller.getZkClient();\n          if (zkClient != null && zkClient.isConnected()) {\n            return;\n          } else {\n            // try a different client with this address\n            addr = keeperAddr;\n          }\n        }\n      }\n\n      keeperAddr = addr;\n      if (addr == null) {\n        writeError(404, \"Zookeeper is not configured for this Solr Core. Please try connecting to an alternate zookeeper address.\");\n        return;\n      }\n\n      try {\n        zkClient = new SolrZkClient(addr, 10000);\n        doClose = true;\n      } catch (Exception e) {\n        writeError(503, \"Could not connect to zookeeper at '\" + addr + \"'\\\"\");\n        zkClient = null;\n        return;\n      }\n\n    }\n\n","sourceOld":"    public ZKPrinter(HttpServletResponse response, Writer out, ZkController controller, String addr) throws IOException {\n      this.zkController = controller;\n      this.response = response;\n      this.out = out;\n      this.addr = addr;\n\n      if (addr == null) {\n        if (controller != null) {\n          // this core is zk enabled\n          keeperAddr = controller.getZkServerAddress();\n          zkClient = controller.getZkClient();\n          if (zkClient != null && zkClient.isConnected()) {\n            return;\n          } else {\n            // try a different client with this address\n            addr = keeperAddr;\n          }\n        }\n      }\n\n      keeperAddr = addr;\n      if (addr == null) {\n        writeError(404, \"Zookeeper is not configured for this Solr Core. Please try connecting to an alternate zookeeper address.\");\n        return;\n      }\n\n      try {\n        zkClient = new SolrZkClient(addr, 10000);\n        doClose = true;\n      } catch (Exception e) {\n        writeError(503, \"Could not connect to zookeeper at '\" + addr + \"'\\\"\");\n        zkClient = null;\n        return;\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c7d0565444d6381434fbff66cecf07da249f2bb4"],"c7d0565444d6381434fbff66cecf07da249f2bb4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"80ebe5b1d946f7c2ed9c46206b0c7254dc21206a":["d69bac0909e90a1213b0850137b00ac371f866e1"],"d69bac0909e90a1213b0850137b00ac371f866e1":["c7d0565444d6381434fbff66cecf07da249f2bb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["80ebe5b1d946f7c2ed9c46206b0c7254dc21206a"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"c7d0565444d6381434fbff66cecf07da249f2bb4":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d69bac0909e90a1213b0850137b00ac371f866e1"],"80ebe5b1d946f7c2ed9c46206b0c7254dc21206a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d69bac0909e90a1213b0850137b00ac371f866e1":["80ebe5b1d946f7c2ed9c46206b0c7254dc21206a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c7d0565444d6381434fbff66cecf07da249f2bb4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}