{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPointDistanceComparator#compareBottom(int).mjava","commits":[{"id":"f32db9456b1759bf570a512581f5cea321f69f73","date":1463520039,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPointDistanceComparator#compareBottom(int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public int compareBottom(int doc) throws IOException {\n    currentDocs.setDocument(doc);\n\n    int numValues = currentDocs.count();\n    if (numValues == 0) {\n      return Double.compare(bottomDistance, Double.POSITIVE_INFINITY);\n    }\n\n    int cmp = -1;\n    for (int i = 0; i < numValues; i++) {\n      long encoded = currentDocs.valueAt(i);\n\n      // Test against bounds.\n      // First we need to decode...\n      final double x = Geo3DDocValuesField.decodeXValue(encoded);\n      final double y = Geo3DDocValuesField.decodeYValue(encoded);\n      final double z = Geo3DDocValuesField.decodeZValue(encoded);\n      \n      if (x > priorityQueueBounds.getMaximumX() ||\n        x < priorityQueueBounds.getMinimumX() ||\n        y > priorityQueueBounds.getMaximumY() ||\n        y < priorityQueueBounds.getMinimumY() ||\n        z > priorityQueueBounds.getMaximumZ() ||\n        z < priorityQueueBounds.getMinimumZ()) {\n        continue;\n      }\n\n      cmp = Math.max(cmp, Double.compare(bottomDistance, distanceShape.computeDistance(DistanceStyle.ARC, x, y, z)));\n    }\n    return cmp;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c9819d04ff44d2877a5a19257cd662751284a5f","date":1463541580,"type":0,"author":"David Smiley","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPointDistanceComparator#compareBottom(int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public int compareBottom(int doc) throws IOException {\n    currentDocs.setDocument(doc);\n\n    int numValues = currentDocs.count();\n    if (numValues == 0) {\n      return Double.compare(bottomDistance, Double.POSITIVE_INFINITY);\n    }\n\n    int cmp = -1;\n    for (int i = 0; i < numValues; i++) {\n      long encoded = currentDocs.valueAt(i);\n\n      // Test against bounds.\n      // First we need to decode...\n      final double x = Geo3DDocValuesField.decodeXValue(encoded);\n      final double y = Geo3DDocValuesField.decodeYValue(encoded);\n      final double z = Geo3DDocValuesField.decodeZValue(encoded);\n      \n      if (x > priorityQueueBounds.getMaximumX() ||\n        x < priorityQueueBounds.getMinimumX() ||\n        y > priorityQueueBounds.getMaximumY() ||\n        y < priorityQueueBounds.getMinimumY() ||\n        z > priorityQueueBounds.getMaximumZ() ||\n        z < priorityQueueBounds.getMinimumZ()) {\n        continue;\n      }\n\n      cmp = Math.max(cmp, Double.compare(bottomDistance, distanceShape.computeDistance(DistanceStyle.ARC, x, y, z)));\n    }\n    return cmp;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPointDistanceComparator#compareBottom(int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public int compareBottom(int doc) throws IOException {\n    currentDocs.setDocument(doc);\n\n    int numValues = currentDocs.count();\n    if (numValues == 0) {\n      return Double.compare(bottomDistance, Double.POSITIVE_INFINITY);\n    }\n\n    int cmp = -1;\n    for (int i = 0; i < numValues; i++) {\n      long encoded = currentDocs.valueAt(i);\n\n      // Test against bounds.\n      // First we need to decode...\n      final double x = Geo3DDocValuesField.decodeXValue(encoded);\n      final double y = Geo3DDocValuesField.decodeYValue(encoded);\n      final double z = Geo3DDocValuesField.decodeZValue(encoded);\n      \n      if (x > priorityQueueBounds.getMaximumX() ||\n        x < priorityQueueBounds.getMinimumX() ||\n        y > priorityQueueBounds.getMaximumY() ||\n        y < priorityQueueBounds.getMinimumY() ||\n        z > priorityQueueBounds.getMaximumZ() ||\n        z < priorityQueueBounds.getMinimumZ()) {\n        continue;\n      }\n\n      cmp = Math.max(cmp, Double.compare(bottomDistance, distanceShape.computeDistance(DistanceStyle.ARC, x, y, z)));\n    }\n    return cmp;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPointDistanceComparator#compareBottom(int).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPointDistanceComparator#compareBottom(int).mjava","sourceNew":"  @Override\n  public int compareBottom(int doc) throws IOException {\n    if (doc > currentDocs.docID()) {\n      currentDocs.advance(doc);\n    }\n    if (doc < currentDocs.docID()) {\n      return Double.compare(bottomDistance, Double.POSITIVE_INFINITY);\n    }\n    \n    int numValues = currentDocs.docValueCount();\n    assert numValues > 0;\n\n    int cmp = -1;\n    for (int i = 0; i < numValues; i++) {\n      long encoded = currentDocs.nextValue();\n\n      // Test against bounds.\n      // First we need to decode...\n      final double x = Geo3DDocValuesField.decodeXValue(encoded);\n      final double y = Geo3DDocValuesField.decodeYValue(encoded);\n      final double z = Geo3DDocValuesField.decodeZValue(encoded);\n      \n      if (x > priorityQueueBounds.getMaximumX() ||\n        x < priorityQueueBounds.getMinimumX() ||\n        y > priorityQueueBounds.getMaximumY() ||\n        y < priorityQueueBounds.getMinimumY() ||\n        z > priorityQueueBounds.getMaximumZ() ||\n        z < priorityQueueBounds.getMinimumZ()) {\n        continue;\n      }\n\n      cmp = Math.max(cmp, Double.compare(bottomDistance, distanceShape.computeDistance(DistanceStyle.ARC, x, y, z)));\n    }\n    return cmp;\n  }\n\n","sourceOld":"  @Override\n  public int compareBottom(int doc) throws IOException {\n    currentDocs.setDocument(doc);\n\n    int numValues = currentDocs.count();\n    if (numValues == 0) {\n      return Double.compare(bottomDistance, Double.POSITIVE_INFINITY);\n    }\n\n    int cmp = -1;\n    for (int i = 0; i < numValues; i++) {\n      long encoded = currentDocs.valueAt(i);\n\n      // Test against bounds.\n      // First we need to decode...\n      final double x = Geo3DDocValuesField.decodeXValue(encoded);\n      final double y = Geo3DDocValuesField.decodeYValue(encoded);\n      final double z = Geo3DDocValuesField.decodeZValue(encoded);\n      \n      if (x > priorityQueueBounds.getMaximumX() ||\n        x < priorityQueueBounds.getMinimumX() ||\n        y > priorityQueueBounds.getMaximumY() ||\n        y < priorityQueueBounds.getMinimumY() ||\n        z > priorityQueueBounds.getMaximumZ() ||\n        z < priorityQueueBounds.getMinimumZ()) {\n        continue;\n      }\n\n      cmp = Math.max(cmp, Double.compare(bottomDistance, distanceShape.computeDistance(DistanceStyle.ARC, x, y, z)));\n    }\n    return cmp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPointDistanceComparator#compareBottom(int).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPointDistanceComparator#compareBottom(int).mjava","sourceNew":"  @Override\n  public int compareBottom(int doc) throws IOException {\n    if (doc > currentDocs.docID()) {\n      currentDocs.advance(doc);\n    }\n    if (doc < currentDocs.docID()) {\n      return Double.compare(bottomDistance, Double.POSITIVE_INFINITY);\n    }\n    \n    int numValues = currentDocs.docValueCount();\n    assert numValues > 0;\n\n    int cmp = -1;\n    for (int i = 0; i < numValues; i++) {\n      long encoded = currentDocs.nextValue();\n\n      // Test against bounds.\n      // First we need to decode...\n      final double x = Geo3DDocValuesField.decodeXValue(encoded);\n      final double y = Geo3DDocValuesField.decodeYValue(encoded);\n      final double z = Geo3DDocValuesField.decodeZValue(encoded);\n      \n      if (x > priorityQueueBounds.getMaximumX() ||\n        x < priorityQueueBounds.getMinimumX() ||\n        y > priorityQueueBounds.getMaximumY() ||\n        y < priorityQueueBounds.getMinimumY() ||\n        z > priorityQueueBounds.getMaximumZ() ||\n        z < priorityQueueBounds.getMinimumZ()) {\n        continue;\n      }\n\n      cmp = Math.max(cmp, Double.compare(bottomDistance, distanceShape.computeDistance(DistanceStyle.ARC, x, y, z)));\n    }\n    return cmp;\n  }\n\n","sourceOld":"  @Override\n  public int compareBottom(int doc) throws IOException {\n    currentDocs.setDocument(doc);\n\n    int numValues = currentDocs.count();\n    if (numValues == 0) {\n      return Double.compare(bottomDistance, Double.POSITIVE_INFINITY);\n    }\n\n    int cmp = -1;\n    for (int i = 0; i < numValues; i++) {\n      long encoded = currentDocs.valueAt(i);\n\n      // Test against bounds.\n      // First we need to decode...\n      final double x = Geo3DDocValuesField.decodeXValue(encoded);\n      final double y = Geo3DDocValuesField.decodeYValue(encoded);\n      final double z = Geo3DDocValuesField.decodeZValue(encoded);\n      \n      if (x > priorityQueueBounds.getMaximumX() ||\n        x < priorityQueueBounds.getMinimumX() ||\n        y > priorityQueueBounds.getMaximumY() ||\n        y < priorityQueueBounds.getMinimumY() ||\n        z > priorityQueueBounds.getMaximumZ() ||\n        z < priorityQueueBounds.getMinimumZ()) {\n        continue;\n      }\n\n      cmp = Math.max(cmp, Double.compare(bottomDistance, distanceShape.computeDistance(DistanceStyle.ARC, x, y, z)));\n    }\n    return cmp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPointDistanceComparator#compareBottom(int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public int compareBottom(int doc) throws IOException {\n    if (doc > currentDocs.docID()) {\n      currentDocs.advance(doc);\n    }\n    if (doc < currentDocs.docID()) {\n      return Double.compare(bottomDistance, Double.POSITIVE_INFINITY);\n    }\n    \n    int numValues = currentDocs.docValueCount();\n    assert numValues > 0;\n\n    int cmp = -1;\n    for (int i = 0; i < numValues; i++) {\n      long encoded = currentDocs.nextValue();\n\n      // Test against bounds.\n      // First we need to decode...\n      final double x = Geo3DDocValuesField.decodeXValue(encoded);\n      final double y = Geo3DDocValuesField.decodeYValue(encoded);\n      final double z = Geo3DDocValuesField.decodeZValue(encoded);\n      \n      if (x > priorityQueueBounds.getMaximumX() ||\n        x < priorityQueueBounds.getMinimumX() ||\n        y > priorityQueueBounds.getMaximumY() ||\n        y < priorityQueueBounds.getMinimumY() ||\n        z > priorityQueueBounds.getMaximumZ() ||\n        z < priorityQueueBounds.getMinimumZ()) {\n        continue;\n      }\n\n      cmp = Math.max(cmp, Double.compare(bottomDistance, distanceShape.computeDistance(DistanceStyle.ARC, x, y, z)));\n    }\n    return cmp;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a","date":1583186777,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPointDistanceComparator#compareBottom(int).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPointDistanceComparator#compareBottom(int).mjava","sourceNew":"  @Override\n  public int compareBottom(int doc) throws IOException {\n    if (doc > currentDocs.docID()) {\n      currentDocs.advance(doc);\n    }\n    if (doc < currentDocs.docID()) {\n      return Double.compare(bottomDistance, Double.POSITIVE_INFINITY);\n    }\n    \n    int numValues = currentDocs.docValueCount();\n    assert numValues > 0;\n\n    int cmp = -1;\n    for (int i = 0; i < numValues; i++) {\n      long encoded = currentDocs.nextValue();\n\n      // Test against bounds.\n      // First we need to decode...\n      final double x = planetModel.getDocValueEncoder().decodeXValue(encoded);\n      final double y = planetModel.getDocValueEncoder().decodeYValue(encoded);\n      final double z = planetModel.getDocValueEncoder().decodeZValue(encoded);\n      \n      if (x > priorityQueueBounds.getMaximumX() ||\n        x < priorityQueueBounds.getMinimumX() ||\n        y > priorityQueueBounds.getMaximumY() ||\n        y < priorityQueueBounds.getMinimumY() ||\n        z > priorityQueueBounds.getMaximumZ() ||\n        z < priorityQueueBounds.getMinimumZ()) {\n        continue;\n      }\n\n      cmp = Math.max(cmp, Double.compare(bottomDistance, distanceShape.computeDistance(DistanceStyle.ARC, x, y, z)));\n    }\n    return cmp;\n  }\n\n","sourceOld":"  @Override\n  public int compareBottom(int doc) throws IOException {\n    if (doc > currentDocs.docID()) {\n      currentDocs.advance(doc);\n    }\n    if (doc < currentDocs.docID()) {\n      return Double.compare(bottomDistance, Double.POSITIVE_INFINITY);\n    }\n    \n    int numValues = currentDocs.docValueCount();\n    assert numValues > 0;\n\n    int cmp = -1;\n    for (int i = 0; i < numValues; i++) {\n      long encoded = currentDocs.nextValue();\n\n      // Test against bounds.\n      // First we need to decode...\n      final double x = Geo3DDocValuesField.decodeXValue(encoded);\n      final double y = Geo3DDocValuesField.decodeYValue(encoded);\n      final double z = Geo3DDocValuesField.decodeZValue(encoded);\n      \n      if (x > priorityQueueBounds.getMaximumX() ||\n        x < priorityQueueBounds.getMinimumX() ||\n        y > priorityQueueBounds.getMaximumY() ||\n        y < priorityQueueBounds.getMinimumY() ||\n        z > priorityQueueBounds.getMaximumZ() ||\n        z < priorityQueueBounds.getMinimumZ()) {\n        continue;\n      }\n\n      cmp = Math.max(cmp, Double.compare(bottomDistance, distanceShape.computeDistance(DistanceStyle.ARC, x, y, z)));\n    }\n    return cmp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9c9819d04ff44d2877a5a19257cd662751284a5f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f32db9456b1759bf570a512581f5cea321f69f73"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["d470c8182e92b264680e34081b75e70a9f2b3c89","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"f32db9456b1759bf570a512581f5cea321f69f73":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c33ed6824db1d3c54aaf0208e68c3df3fd43d93a"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f32db9456b1759bf570a512581f5cea321f69f73"]},"commit2Childs":{"9c9819d04ff44d2877a5a19257cd662751284a5f":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9c9819d04ff44d2877a5a19257cd662751284a5f","f32db9456b1759bf570a512581f5cea321f69f73","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["c33ed6824db1d3c54aaf0208e68c3df3fd43d93a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"f32db9456b1759bf570a512581f5cea321f69f73":["9c9819d04ff44d2877a5a19257cd662751284a5f","d470c8182e92b264680e34081b75e70a9f2b3c89"],"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9c9819d04ff44d2877a5a19257cd662751284a5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}