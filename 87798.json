{"path":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      Overseer.createClientNodes(controllerClient, \"node1\");\n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      // live node\n      final String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + \"node1\";\n      controllerClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n      \n      HashMap<String,String> coreProps = new HashMap<String,String>();\n      coreProps.put(ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      coreProps.put(ZkStateReader.NODE_NAME_PROP, \"node1\");\n      CoreState state = new CoreState(\"core1\", \"collection1\", coreProps);\n      \n      final String statePath = Overseer.STATES_NODE + \"/node1\";\n      // publish node state (recovering)\n      controllerClient.setData(statePath, ZkStateReader.toJSON(new CoreState[] {state}), true);\n      \n      // wait overseer assignment\n      waitForSliceCount(reader, \"collection1\", 1);\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      // publish node state (active)\n      coreProps.put(ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n      coreProps.put(ZkStateReader.SHARD_ID_PROP, \"shard1\");\n      state = new CoreState(\"core1\", \"collection1\", coreProps);\n      controllerClient.setData(statePath,\n          ZkStateReader.toJSON(new CoreState[] {state}), true);\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      overseerClient.close();\n      \n      coreProps.put(ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      state = new CoreState(\"core1\", \"collection1\", coreProps);\n             \n      controllerClient.setData(statePath,\n          ZkStateReader.toJSON(new CoreState[] {state}), true);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader.getCloudState()\n          .getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getCloudState()\n          .getSlice(\"collection1\", \"shard1\").getShards().size());      \n    } finally {\n      \n      if (overseerClient != null) {\n       overseerClient.close();\n      }\n      if (controllerClient != null) {\n        controllerClient.close();\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","1e9ce820cd3ed9efb959c181daaafd22f0c70143","f5d497ef5f4afb803f608c705a49782def2f7082"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      Overseer.createClientNodes(controllerClient, \"node1\");\n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      // live node\n      final String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + \"node1\";\n      controllerClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n      \n      HashMap<String,String> coreProps = new HashMap<String,String>();\n      coreProps.put(ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      coreProps.put(ZkStateReader.NODE_NAME_PROP, \"node1\");\n      CoreState state = new CoreState(\"core1\", \"collection1\", coreProps);\n      \n      final String statePath = Overseer.STATES_NODE + \"/node1\";\n      // publish node state (recovering)\n      controllerClient.setData(statePath, ZkStateReader.toJSON(new CoreState[] {state}), true);\n      \n      // wait overseer assignment\n      waitForSliceCount(reader, \"collection1\", 1);\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      // publish node state (active)\n      coreProps.put(ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n      coreProps.put(ZkStateReader.SHARD_ID_PROP, \"shard1\");\n      state = new CoreState(\"core1\", \"collection1\", coreProps);\n      controllerClient.setData(statePath,\n          ZkStateReader.toJSON(new CoreState[] {state}), true);\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      overseerClient.close();\n      \n      coreProps.put(ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      state = new CoreState(\"core1\", \"collection1\", coreProps);\n             \n      controllerClient.setData(statePath,\n          ZkStateReader.toJSON(new CoreState[] {state}), true);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader.getCloudState()\n          .getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getCloudState()\n          .getSlice(\"collection1\", \"shard1\").getShards().size());      \n    } finally {\n      \n      if (overseerClient != null) {\n       overseerClient.close();\n      }\n      if (controllerClient != null) {\n        controllerClient.close();\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      Overseer.createClientNodes(controllerClient, \"node1\");\n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      // live node\n      final String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + \"node1\";\n      controllerClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n      \n      HashMap<String,String> coreProps = new HashMap<String,String>();\n      coreProps.put(ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      coreProps.put(ZkStateReader.NODE_NAME_PROP, \"node1\");\n      CoreState state = new CoreState(\"core1\", \"collection1\", coreProps);\n      \n      final String statePath = Overseer.STATES_NODE + \"/node1\";\n      // publish node state (recovering)\n      controllerClient.setData(statePath, ZkStateReader.toJSON(new CoreState[] {state}), true);\n      \n      // wait overseer assignment\n      waitForSliceCount(reader, \"collection1\", 1);\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      // publish node state (active)\n      coreProps.put(ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n      coreProps.put(ZkStateReader.SHARD_ID_PROP, \"shard1\");\n      state = new CoreState(\"core1\", \"collection1\", coreProps);\n      controllerClient.setData(statePath,\n          ZkStateReader.toJSON(new CoreState[] {state}), true);\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      overseerClient.close();\n      \n      coreProps.put(ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      state = new CoreState(\"core1\", \"collection1\", coreProps);\n             \n      controllerClient.setData(statePath,\n          ZkStateReader.toJSON(new CoreState[] {state}), true);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader.getCloudState()\n          .getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getCloudState()\n          .getSlice(\"collection1\", \"shard1\").getShards().size());      \n    } finally {\n      \n      if (overseerClient != null) {\n       overseerClient.close();\n      }\n      if (controllerClient != null) {\n        controllerClient.close();\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f5d497ef5f4afb803f608c705a49782def2f7082","date":1327943814,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","sourceNew":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING);\n      \n      // wait overseer assignment\n      waitForSliceCount(reader, \"collection1\", 1);\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      int version = getCloudStateVersion(controllerClient);\n      \n      mockController.publishState(\"core1\", ZkStateReader.ACTIVE);\n      \n      while(version == getCloudStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      version = getCloudStateVersion(controllerClient);\n      overseerClient.close();\n      Thread.sleep(1000); //wait for overseer to get killed\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING);\n      version = getCloudStateVersion(controllerClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      while(version == getCloudStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader.getCloudState()\n          .getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getCloudState()\n          .getSlice(\"collection1\", \"shard1\").getShards().size());      \n    } finally {\n      \n      if (mockController != null) {\n        mockController.close();\n      }\n      \n      if (overseerClient != null) {\n       overseerClient.close();\n      }\n      if (controllerClient != null) {\n        controllerClient.close();\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      Overseer.createClientNodes(controllerClient, \"node1\");\n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      // live node\n      final String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + \"node1\";\n      controllerClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n      \n      HashMap<String,String> coreProps = new HashMap<String,String>();\n      coreProps.put(ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      coreProps.put(ZkStateReader.NODE_NAME_PROP, \"node1\");\n      CoreState state = new CoreState(\"core1\", \"collection1\", coreProps);\n      \n      final String statePath = Overseer.STATES_NODE + \"/node1\";\n      // publish node state (recovering)\n      controllerClient.setData(statePath, ZkStateReader.toJSON(new CoreState[] {state}), true);\n      \n      // wait overseer assignment\n      waitForSliceCount(reader, \"collection1\", 1);\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      // publish node state (active)\n      coreProps.put(ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n      coreProps.put(ZkStateReader.SHARD_ID_PROP, \"shard1\");\n      state = new CoreState(\"core1\", \"collection1\", coreProps);\n      controllerClient.setData(statePath,\n          ZkStateReader.toJSON(new CoreState[] {state}), true);\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      overseerClient.close();\n      \n      coreProps.put(ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      state = new CoreState(\"core1\", \"collection1\", coreProps);\n             \n      controllerClient.setData(statePath,\n          ZkStateReader.toJSON(new CoreState[] {state}), true);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader.getCloudState()\n          .getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getCloudState()\n          .getSlice(\"collection1\", \"shard1\").getShards().size());      \n    } finally {\n      \n      if (overseerClient != null) {\n       overseerClient.close();\n      }\n      if (controllerClient != null) {\n        controllerClient.close();\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":["6101715a4732c1fe39eae50ce4a23fec6fc270d0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","sourceNew":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING);\n      \n      // wait overseer assignment\n      waitForSliceCount(reader, \"collection1\", 1);\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      int version = getCloudStateVersion(controllerClient);\n      \n      mockController.publishState(\"core1\", ZkStateReader.ACTIVE);\n      \n      while(version == getCloudStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      version = getCloudStateVersion(controllerClient);\n      overseerClient.close();\n      Thread.sleep(1000); //wait for overseer to get killed\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING);\n      version = getCloudStateVersion(controllerClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      while(version == getCloudStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader.getCloudState()\n          .getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getCloudState()\n          .getSlice(\"collection1\", \"shard1\").getShards().size());      \n    } finally {\n      \n      if (mockController != null) {\n        mockController.close();\n      }\n      \n      if (overseerClient != null) {\n       overseerClient.close();\n      }\n      if (controllerClient != null) {\n        controllerClient.close();\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      Overseer.createClientNodes(controllerClient, \"node1\");\n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      // live node\n      final String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + \"node1\";\n      controllerClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n      \n      HashMap<String,String> coreProps = new HashMap<String,String>();\n      coreProps.put(ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      coreProps.put(ZkStateReader.NODE_NAME_PROP, \"node1\");\n      CoreState state = new CoreState(\"core1\", \"collection1\", coreProps);\n      \n      final String statePath = Overseer.STATES_NODE + \"/node1\";\n      // publish node state (recovering)\n      controllerClient.setData(statePath, ZkStateReader.toJSON(new CoreState[] {state}), true);\n      \n      // wait overseer assignment\n      waitForSliceCount(reader, \"collection1\", 1);\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      // publish node state (active)\n      coreProps.put(ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n      coreProps.put(ZkStateReader.SHARD_ID_PROP, \"shard1\");\n      state = new CoreState(\"core1\", \"collection1\", coreProps);\n      controllerClient.setData(statePath,\n          ZkStateReader.toJSON(new CoreState[] {state}), true);\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      overseerClient.close();\n      \n      coreProps.put(ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      state = new CoreState(\"core1\", \"collection1\", coreProps);\n             \n      controllerClient.setData(statePath,\n          ZkStateReader.toJSON(new CoreState[] {state}), true);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader.getCloudState()\n          .getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getCloudState()\n          .getSlice(\"collection1\", \"shard1\").getShards().size());      \n    } finally {\n      \n      if (overseerClient != null) {\n       overseerClient.close();\n      }\n      if (controllerClient != null) {\n        controllerClient.close();\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"410e066f093e407222d9681429d209084e783149","date":1327958394,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","sourceNew":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING);\n      \n      // wait overseer assignment\n      waitForSliceCount(reader, \"collection1\", 1);\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      int version = getCloudStateVersion(controllerClient);\n      \n      mockController.publishState(\"core1\", ZkStateReader.ACTIVE);\n      \n      while(version == getCloudStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      version = getCloudStateVersion(controllerClient);\n      overseerClient.close();\n      Thread.sleep(1000); //wait for overseer to get killed\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING);\n      version = getCloudStateVersion(controllerClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      while(version == getCloudStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader.getCloudState()\n          .getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getCloudState()\n          .getSlice(\"collection1\", \"shard1\").getShards().size());      \n    } finally {\n      \n      if (mockController != null) {\n        mockController.close();\n      }\n      \n      if (overseerClient != null) {\n       overseerClient.close();\n      }\n      if (controllerClient != null) {\n        controllerClient.close();\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      Overseer.createClientNodes(controllerClient, \"node1\");\n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      // live node\n      final String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + \"node1\";\n      controllerClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n      \n      HashMap<String,String> coreProps = new HashMap<String,String>();\n      coreProps.put(ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      coreProps.put(ZkStateReader.NODE_NAME_PROP, \"node1\");\n      CoreState state = new CoreState(\"core1\", \"collection1\", coreProps);\n      \n      final String statePath = Overseer.STATES_NODE + \"/node1\";\n      // publish node state (recovering)\n      controllerClient.setData(statePath, ZkStateReader.toJSON(new CoreState[] {state}), true);\n      \n      // wait overseer assignment\n      waitForSliceCount(reader, \"collection1\", 1);\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      // publish node state (active)\n      coreProps.put(ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n      coreProps.put(ZkStateReader.SHARD_ID_PROP, \"shard1\");\n      state = new CoreState(\"core1\", \"collection1\", coreProps);\n      controllerClient.setData(statePath,\n          ZkStateReader.toJSON(new CoreState[] {state}), true);\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      overseerClient.close();\n      \n      coreProps.put(ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      state = new CoreState(\"core1\", \"collection1\", coreProps);\n             \n      controllerClient.setData(statePath,\n          ZkStateReader.toJSON(new CoreState[] {state}), true);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader.getCloudState()\n          .getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getCloudState()\n          .getSlice(\"collection1\", \"shard1\").getShards().size());      \n    } finally {\n      \n      if (overseerClient != null) {\n       overseerClient.close();\n      }\n      if (controllerClient != null) {\n        controllerClient.close();\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6101715a4732c1fe39eae50ce4a23fec6fc270d0","date":1328795951,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","sourceNew":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n      \n      // wait overseer assignment\n      waitForSliceCount(reader, \"collection1\", 1);\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      int version = getCloudStateVersion(controllerClient);\n      \n      mockController.publishState(\"core1\", ZkStateReader.ACTIVE, 1);\n      \n      while(version == getCloudStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      version = getCloudStateVersion(controllerClient);\n      overseerClient.close();\n      Thread.sleep(1000); //wait for overseer to get killed\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n      version = getCloudStateVersion(controllerClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      while(version == getCloudStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader.getCloudState()\n          .getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getCloudState()\n          .getSlice(\"collection1\", \"shard1\").getShards().size());      \n    } finally {\n      \n      if (mockController != null) {\n        mockController.close();\n      }\n      \n      if (overseerClient != null) {\n       overseerClient.close();\n      }\n      if (controllerClient != null) {\n        controllerClient.close();\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING);\n      \n      // wait overseer assignment\n      waitForSliceCount(reader, \"collection1\", 1);\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      int version = getCloudStateVersion(controllerClient);\n      \n      mockController.publishState(\"core1\", ZkStateReader.ACTIVE);\n      \n      while(version == getCloudStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      version = getCloudStateVersion(controllerClient);\n      overseerClient.close();\n      Thread.sleep(1000); //wait for overseer to get killed\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING);\n      version = getCloudStateVersion(controllerClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      while(version == getCloudStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader.getCloudState()\n          .getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getCloudState()\n          .getSlice(\"collection1\", \"shard1\").getShards().size());      \n    } finally {\n      \n      if (mockController != null) {\n        mockController.close();\n      }\n      \n      if (overseerClient != null) {\n       overseerClient.close();\n      }\n      if (controllerClient != null) {\n        controllerClient.close();\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","bugFix":["f5d497ef5f4afb803f608c705a49782def2f7082"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84250b785753dee996ec3f88a1ea2e941ebe7cfb","date":1328840665,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","sourceNew":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      Thread.sleep(1000);\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      int version = getCloudStateVersion(controllerClient);\n      \n      mockController.publishState(\"core1\", ZkStateReader.ACTIVE, 1);\n      \n      while(version == getCloudStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      version = getCloudStateVersion(controllerClient);\n      overseerClient.close();\n      Thread.sleep(1000); //wait for overseer to get killed\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n      version = getCloudStateVersion(controllerClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      while(version == getCloudStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader.getCloudState()\n          .getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getCloudState()\n          .getSlice(\"collection1\", \"shard1\").getShards().size());      \n    } finally {\n      \n      if (mockController != null) {\n        mockController.close();\n      }\n      \n      if (overseerClient != null) {\n       overseerClient.close();\n      }\n      if (controllerClient != null) {\n        controllerClient.close();\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n      \n      // wait overseer assignment\n      waitForSliceCount(reader, \"collection1\", 1);\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      int version = getCloudStateVersion(controllerClient);\n      \n      mockController.publishState(\"core1\", ZkStateReader.ACTIVE, 1);\n      \n      while(version == getCloudStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      version = getCloudStateVersion(controllerClient);\n      overseerClient.close();\n      Thread.sleep(1000); //wait for overseer to get killed\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n      version = getCloudStateVersion(controllerClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      while(version == getCloudStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader.getCloudState()\n          .getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getCloudState()\n          .getSlice(\"collection1\", \"shard1\").getShards().size());      \n    } finally {\n      \n      if (mockController != null) {\n        mockController.close();\n      }\n      \n      if (overseerClient != null) {\n       overseerClient.close();\n      }\n      if (controllerClient != null) {\n        controllerClient.close();\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c51a2dcb8b4e1820a44f35f11961110201e06cdb","date":1329994529,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","sourceNew":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      Thread.sleep(1000);\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      int version = getCloudStateVersion(controllerClient);\n      \n      mockController.publishState(\"core1\", ZkStateReader.ACTIVE, 1);\n      \n      while(version == getCloudStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      version = getCloudStateVersion(controllerClient);\n      overseerClient.close();\n      Thread.sleep(1000); //wait for overseer to get killed\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n      version = getCloudStateVersion(controllerClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      while(version == getCloudStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader.getCloudState()\n          .getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getCloudState()\n          .getSlice(\"collection1\", \"shard1\").getShards().size());      \n      version = getCloudStateVersion(controllerClient);\n      mockController.publishState(\"core1\", null,1);\n      while(version == getCloudStateVersion(controllerClient));\n      Thread.sleep(100);\n      assertEquals(\"Shard count does not match\", 0, reader.getCloudState()\n          .getSlice(\"collection1\", \"shard1\").getShards().size());\n    } finally {\n      \n      if (mockController != null) {\n        mockController.close();\n      }\n      \n      if (overseerClient != null) {\n       overseerClient.close();\n      }\n      if (controllerClient != null) {\n        controllerClient.close();\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      Thread.sleep(1000);\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      int version = getCloudStateVersion(controllerClient);\n      \n      mockController.publishState(\"core1\", ZkStateReader.ACTIVE, 1);\n      \n      while(version == getCloudStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      version = getCloudStateVersion(controllerClient);\n      overseerClient.close();\n      Thread.sleep(1000); //wait for overseer to get killed\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n      version = getCloudStateVersion(controllerClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      while(version == getCloudStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader.getCloudState()\n          .getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getCloudState()\n          .getSlice(\"collection1\", \"shard1\").getShards().size());      \n    } finally {\n      \n      if (mockController != null) {\n        mockController.close();\n      }\n      \n      if (overseerClient != null) {\n       overseerClient.close();\n      }\n      if (controllerClient != null) {\n        controllerClient.close();\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","sourceNew":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      Thread.sleep(1000);\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      int version = getCloudStateVersion(controllerClient);\n      \n      mockController.publishState(\"core1\", ZkStateReader.ACTIVE, 1);\n      \n      while(version == getCloudStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      version = getCloudStateVersion(controllerClient);\n      overseerClient.close();\n      Thread.sleep(1000); //wait for overseer to get killed\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n      version = getCloudStateVersion(controllerClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      while(version == getCloudStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader.getCloudState()\n          .getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getCloudState()\n          .getSlice(\"collection1\", \"shard1\").getShards().size());      \n      version = getCloudStateVersion(controllerClient);\n      mockController.publishState(\"core1\", null,1);\n      while(version == getCloudStateVersion(controllerClient));\n      Thread.sleep(100);\n      assertEquals(\"Shard count does not match\", 0, reader.getCloudState()\n          .getSlice(\"collection1\", \"shard1\").getShards().size());\n    } finally {\n      \n      if (mockController != null) {\n        mockController.close();\n      }\n      \n      if (overseerClient != null) {\n       overseerClient.close();\n      }\n      if (controllerClient != null) {\n        controllerClient.close();\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      Thread.sleep(1000);\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      int version = getCloudStateVersion(controllerClient);\n      \n      mockController.publishState(\"core1\", ZkStateReader.ACTIVE, 1);\n      \n      while(version == getCloudStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      version = getCloudStateVersion(controllerClient);\n      overseerClient.close();\n      Thread.sleep(1000); //wait for overseer to get killed\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n      version = getCloudStateVersion(controllerClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      while(version == getCloudStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader.getCloudState()\n          .getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getCloudState()\n          .getSlice(\"collection1\", \"shard1\").getShards().size());      \n    } finally {\n      \n      if (mockController != null) {\n        mockController.close();\n      }\n      \n      if (overseerClient != null) {\n       overseerClient.close();\n      }\n      if (controllerClient != null) {\n        controllerClient.close();\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5093a9e893633cc091cf2f729d7863671c2b715","date":1339132888,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","sourceNew":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      Thread.sleep(1000);\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      int version = getCloudStateVersion(controllerClient);\n      \n      mockController.publishState(\"core1\", ZkStateReader.ACTIVE, 1);\n      \n      while(version == getCloudStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      version = getCloudStateVersion(controllerClient);\n      overseerClient.close();\n      Thread.sleep(1000); //wait for overseer to get killed\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n      version = getCloudStateVersion(controllerClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      while(version == getCloudStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader.getCloudState()\n          .getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getCloudState()\n          .getSlice(\"collection1\", \"shard1\").getShards().size());      \n      version = getCloudStateVersion(controllerClient);\n      mockController.publishState(\"core1\", null,1);\n      while(version == getCloudStateVersion(controllerClient));\n      Thread.sleep(500);\n      assertEquals(\"Shard count does not match\", 0, reader.getCloudState()\n          .getSlice(\"collection1\", \"shard1\").getShards().size());\n    } finally {\n      \n      close(mockController);\n      \n      close(overseerClient);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      Thread.sleep(1000);\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      int version = getCloudStateVersion(controllerClient);\n      \n      mockController.publishState(\"core1\", ZkStateReader.ACTIVE, 1);\n      \n      while(version == getCloudStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      version = getCloudStateVersion(controllerClient);\n      overseerClient.close();\n      Thread.sleep(1000); //wait for overseer to get killed\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n      version = getCloudStateVersion(controllerClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      while(version == getCloudStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader.getCloudState()\n          .getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getCloudState()\n          .getSlice(\"collection1\", \"shard1\").getShards().size());      \n      version = getCloudStateVersion(controllerClient);\n      mockController.publishState(\"core1\", null,1);\n      while(version == getCloudStateVersion(controllerClient));\n      Thread.sleep(100);\n      assertEquals(\"Shard count does not match\", 0, reader.getCloudState()\n          .getSlice(\"collection1\", \"shard1\").getShards().size());\n    } finally {\n      \n      if (mockController != null) {\n        mockController.close();\n      }\n      \n      if (overseerClient != null) {\n       overseerClient.close();\n      }\n      if (controllerClient != null) {\n        controllerClient.close();\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"33d0ed80b7b47e34ad3ff033a77544563aba3085","date":1341244632,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","sourceNew":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      Thread.sleep(1000);\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      int version = getCloudStateVersion(controllerClient);\n      \n      mockController.publishState(\"core1\", ZkStateReader.ACTIVE, 1);\n      \n      while(version == getCloudStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      version = getCloudStateVersion(controllerClient);\n      overseerClient.close();\n      Thread.sleep(1000); //wait for overseer to get killed\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n      version = getCloudStateVersion(controllerClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      while(version == getCloudStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader.getCloudState()\n          .getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getCloudState()\n          .getSlice(\"collection1\", \"shard1\").getShards().size());      \n      version = getCloudStateVersion(controllerClient);\n      mockController.publishState(\"core1\", null,1);\n      while(version == getCloudStateVersion(controllerClient));\n      Thread.sleep(500);\n      assertFalse(\"collection1 should be gone after publishing the null state\", reader.getCloudState().getCollections().contains(\"collection1\"));\n    } finally {\n      \n      close(mockController);\n      \n      close(overseerClient);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      Thread.sleep(1000);\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      int version = getCloudStateVersion(controllerClient);\n      \n      mockController.publishState(\"core1\", ZkStateReader.ACTIVE, 1);\n      \n      while(version == getCloudStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      version = getCloudStateVersion(controllerClient);\n      overseerClient.close();\n      Thread.sleep(1000); //wait for overseer to get killed\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n      version = getCloudStateVersion(controllerClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      while(version == getCloudStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader.getCloudState()\n          .getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getCloudState()\n          .getSlice(\"collection1\", \"shard1\").getShards().size());      \n      version = getCloudStateVersion(controllerClient);\n      mockController.publishState(\"core1\", null,1);\n      while(version == getCloudStateVersion(controllerClient));\n      Thread.sleep(500);\n      assertEquals(\"Shard count does not match\", 0, reader.getCloudState()\n          .getSlice(\"collection1\", \"shard1\").getShards().size());\n    } finally {\n      \n      close(mockController);\n      \n      close(overseerClient);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","sourceNew":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      Thread.sleep(1000);\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      int version = getCloudStateVersion(controllerClient);\n      \n      mockController.publishState(\"core1\", ZkStateReader.ACTIVE, 1);\n      \n      while(version == getCloudStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      version = getCloudStateVersion(controllerClient);\n      overseerClient.close();\n      Thread.sleep(1000); //wait for overseer to get killed\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n      version = getCloudStateVersion(controllerClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      while(version == getCloudStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader.getCloudState()\n          .getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getCloudState()\n          .getSlice(\"collection1\", \"shard1\").getShards().size());      \n      version = getCloudStateVersion(controllerClient);\n      mockController.publishState(\"core1\", null,1);\n      while(version == getCloudStateVersion(controllerClient));\n      Thread.sleep(500);\n      assertFalse(\"collection1 should be gone after publishing the null state\", reader.getCloudState().getCollections().contains(\"collection1\"));\n    } finally {\n      \n      close(mockController);\n      \n      close(overseerClient);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      Thread.sleep(1000);\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      int version = getCloudStateVersion(controllerClient);\n      \n      mockController.publishState(\"core1\", ZkStateReader.ACTIVE, 1);\n      \n      while(version == getCloudStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      version = getCloudStateVersion(controllerClient);\n      overseerClient.close();\n      Thread.sleep(1000); //wait for overseer to get killed\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n      version = getCloudStateVersion(controllerClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      while(version == getCloudStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader.getCloudState()\n          .getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getCloudState()\n          .getSlice(\"collection1\", \"shard1\").getShards().size());      \n      version = getCloudStateVersion(controllerClient);\n      mockController.publishState(\"core1\", null,1);\n      while(version == getCloudStateVersion(controllerClient));\n      Thread.sleep(500);\n      assertEquals(\"Shard count does not match\", 0, reader.getCloudState()\n          .getSlice(\"collection1\", \"shard1\").getShards().size());\n    } finally {\n      \n      close(mockController);\n      \n      close(overseerClient);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","sourceNew":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      Thread.sleep(1000);\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController.publishState(\"core1\", ZkStateReader.ACTIVE, 1);\n      \n      while(version == getClusterStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      version = getClusterStateVersion(controllerClient);\n      overseerClient.close();\n      Thread.sleep(1000); //wait for overseer to get killed\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n      version = getClusterStateVersion(controllerClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      while(version == getClusterStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader.getClusterState()\n          .getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getClusterState()\n          .getSlice(\"collection1\", \"shard1\").getShards().size());      \n      version = getClusterStateVersion(controllerClient);\n      mockController.publishState(\"core1\", null,1);\n      while(version == getClusterStateVersion(controllerClient));\n      Thread.sleep(500);\n      assertFalse(\"collection1 should be gone after publishing the null state\", reader.getClusterState().getCollections().contains(\"collection1\"));\n    } finally {\n      \n      close(mockController);\n      \n      close(overseerClient);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      Thread.sleep(1000);\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      int version = getCloudStateVersion(controllerClient);\n      \n      mockController.publishState(\"core1\", ZkStateReader.ACTIVE, 1);\n      \n      while(version == getCloudStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      version = getCloudStateVersion(controllerClient);\n      overseerClient.close();\n      Thread.sleep(1000); //wait for overseer to get killed\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n      version = getCloudStateVersion(controllerClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      while(version == getCloudStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader.getCloudState()\n          .getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getCloudState()\n          .getSlice(\"collection1\", \"shard1\").getShards().size());      \n      version = getCloudStateVersion(controllerClient);\n      mockController.publishState(\"core1\", null,1);\n      while(version == getCloudStateVersion(controllerClient));\n      Thread.sleep(500);\n      assertFalse(\"collection1 should be gone after publishing the null state\", reader.getCloudState().getCollections().contains(\"collection1\"));\n    } finally {\n      \n      close(mockController);\n      \n      close(overseerClient);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","sourceNew":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      Thread.sleep(1000);\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController.publishState(\"core1\", ZkStateReader.ACTIVE, 1);\n      \n      while(version == getClusterStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      version = getClusterStateVersion(controllerClient);\n      overseerClient.close();\n      Thread.sleep(1000); //wait for overseer to get killed\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n      version = getClusterStateVersion(controllerClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      while(version == getClusterStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader.getClusterState()\n          .getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getClusterState()\n          .getSlice(\"collection1\", \"shard1\").getShards().size());      \n      version = getClusterStateVersion(controllerClient);\n      mockController.publishState(\"core1\", null,1);\n      while(version == getClusterStateVersion(controllerClient));\n      Thread.sleep(500);\n      assertFalse(\"collection1 should be gone after publishing the null state\", reader.getClusterState().getCollections().contains(\"collection1\"));\n    } finally {\n      \n      close(mockController);\n      \n      close(overseerClient);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      Thread.sleep(1000);\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      int version = getCloudStateVersion(controllerClient);\n      \n      mockController.publishState(\"core1\", ZkStateReader.ACTIVE, 1);\n      \n      while(version == getCloudStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      version = getCloudStateVersion(controllerClient);\n      overseerClient.close();\n      Thread.sleep(1000); //wait for overseer to get killed\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n      version = getCloudStateVersion(controllerClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      while(version == getCloudStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader.getCloudState()\n          .getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getCloudState()\n          .getSlice(\"collection1\", \"shard1\").getShards().size());      \n      version = getCloudStateVersion(controllerClient);\n      mockController.publishState(\"core1\", null,1);\n      while(version == getCloudStateVersion(controllerClient));\n      Thread.sleep(500);\n      assertFalse(\"collection1 should be gone after publishing the null state\", reader.getCloudState().getCollections().contains(\"collection1\"));\n    } finally {\n      \n      close(mockController);\n      \n      close(overseerClient);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","sourceNew":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      Thread.sleep(1000);\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController.publishState(\"core1\", ZkStateReader.ACTIVE, 1);\n      \n      while(version == getClusterStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      version = getClusterStateVersion(controllerClient);\n      overseerClient.close();\n      Thread.sleep(1000); //wait for overseer to get killed\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n      version = getClusterStateVersion(controllerClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      while(version == getClusterStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader.getClusterState()\n          .getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getClusterState()\n          .getSlice(\"collection1\", \"shard1\").getShards().size());      \n      version = getClusterStateVersion(controllerClient);\n      mockController.publishState(\"core1\", null,1);\n      while(version == getClusterStateVersion(controllerClient));\n      Thread.sleep(500);\n      assertFalse(\"collection1 should be gone after publishing the null state\", reader.getClusterState().getCollections().contains(\"collection1\"));\n    } finally {\n      \n      close(mockController);\n      \n      close(overseerClient);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      Thread.sleep(1000);\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      int version = getCloudStateVersion(controllerClient);\n      \n      mockController.publishState(\"core1\", ZkStateReader.ACTIVE, 1);\n      \n      while(version == getCloudStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      version = getCloudStateVersion(controllerClient);\n      overseerClient.close();\n      Thread.sleep(1000); //wait for overseer to get killed\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n      version = getCloudStateVersion(controllerClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      while(version == getCloudStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader.getCloudState()\n          .getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getCloudState()\n          .getSlice(\"collection1\", \"shard1\").getShards().size());      \n      version = getCloudStateVersion(controllerClient);\n      mockController.publishState(\"core1\", null,1);\n      while(version == getCloudStateVersion(controllerClient));\n      Thread.sleep(500);\n      assertFalse(\"collection1 should be gone after publishing the null state\", reader.getCloudState().getCollections().contains(\"collection1\"));\n    } finally {\n      \n      close(mockController);\n      \n      close(overseerClient);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa64435b5902ce266c23755a4a00691a3285dab8","date":1347243290,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","sourceNew":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      Thread.sleep(1000);\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController.publishState(\"core1\", ZkStateReader.ACTIVE, 1);\n      \n      while(version == getClusterStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      version = getClusterStateVersion(controllerClient);\n      overseerClient.close();\n      Thread.sleep(1000); //wait for overseer to get killed\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n      version = getClusterStateVersion(controllerClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      while(version == getClusterStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader.getClusterState()\n          .getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getClusterState()\n          .getSlice(\"collection1\", \"shard1\").getReplicasMap().size());\n      version = getClusterStateVersion(controllerClient);\n      mockController.publishState(\"core1\", null,1);\n      while(version == getClusterStateVersion(controllerClient));\n      Thread.sleep(500);\n      assertFalse(\"collection1 should be gone after publishing the null state\", reader.getClusterState().getCollections().contains(\"collection1\"));\n    } finally {\n      \n      close(mockController);\n      \n      close(overseerClient);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      Thread.sleep(1000);\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController.publishState(\"core1\", ZkStateReader.ACTIVE, 1);\n      \n      while(version == getClusterStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      version = getClusterStateVersion(controllerClient);\n      overseerClient.close();\n      Thread.sleep(1000); //wait for overseer to get killed\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n      version = getClusterStateVersion(controllerClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      while(version == getClusterStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader.getClusterState()\n          .getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getClusterState()\n          .getSlice(\"collection1\", \"shard1\").getShards().size());      \n      version = getClusterStateVersion(controllerClient);\n      mockController.publishState(\"core1\", null,1);\n      while(version == getClusterStateVersion(controllerClient));\n      Thread.sleep(500);\n      assertFalse(\"collection1 should be gone after publishing the null state\", reader.getClusterState().getCollections().contains(\"collection1\"));\n    } finally {\n      \n      close(mockController);\n      \n      close(overseerClient);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","sourceNew":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      Thread.sleep(1000);\n      mockController.publishState(\"core1\", \"core_node1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController.publishState(\"core1\", \"core_node1\", ZkStateReader.ACTIVE, 1);\n      \n      while(version == getClusterStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      version = getClusterStateVersion(controllerClient);\n      overseerClient.close();\n      Thread.sleep(1000); //wait for overseer to get killed\n\n      mockController.publishState(\"core1\",  \"core_node1\", ZkStateReader.RECOVERING, 1);\n      version = getClusterStateVersion(controllerClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      while(version == getClusterStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader.getClusterState()\n          .getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getClusterState()\n          .getSlice(\"collection1\", \"shard1\").getReplicasMap().size());\n      version = getClusterStateVersion(controllerClient);\n      mockController.publishState(\"core1\", \"core_node1\", null,1);\n      while(version == getClusterStateVersion(controllerClient));\n      Thread.sleep(500);\n      assertFalse(\"collection1 should be gone after publishing the null state\", reader.getClusterState().getCollections().contains(\"collection1\"));\n    } finally {\n      \n      close(mockController);\n      \n      close(overseerClient);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      Thread.sleep(1000);\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController.publishState(\"core1\", ZkStateReader.ACTIVE, 1);\n      \n      while(version == getClusterStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      version = getClusterStateVersion(controllerClient);\n      overseerClient.close();\n      Thread.sleep(1000); //wait for overseer to get killed\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n      version = getClusterStateVersion(controllerClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      while(version == getClusterStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader.getClusterState()\n          .getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getClusterState()\n          .getSlice(\"collection1\", \"shard1\").getReplicasMap().size());\n      version = getClusterStateVersion(controllerClient);\n      mockController.publishState(\"core1\", null,1);\n      while(version == getClusterStateVersion(controllerClient));\n      Thread.sleep(500);\n      assertFalse(\"collection1 should be gone after publishing the null state\", reader.getClusterState().getCollections().contains(\"collection1\"));\n    } finally {\n      \n      close(mockController);\n      \n      close(overseerClient);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","sourceNew":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      Thread.sleep(1000);\n      mockController.publishState(\"core1\", \"core_node1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController.publishState(\"core1\", \"core_node1\", ZkStateReader.ACTIVE, 1);\n      \n      while(version == getClusterStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      version = getClusterStateVersion(controllerClient);\n      overseerClient.close();\n      Thread.sleep(1000); //wait for overseer to get killed\n\n      mockController.publishState(\"core1\",  \"core_node1\", ZkStateReader.RECOVERING, 1);\n      version = getClusterStateVersion(controllerClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      while(version == getClusterStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader.getClusterState()\n          .getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getClusterState()\n          .getSlice(\"collection1\", \"shard1\").getReplicasMap().size());\n      version = getClusterStateVersion(controllerClient);\n      mockController.publishState(\"core1\", \"core_node1\", null,1);\n      while(version == getClusterStateVersion(controllerClient));\n      Thread.sleep(500);\n      assertFalse(\"collection1 should be gone after publishing the null state\", reader.getClusterState().getCollections().contains(\"collection1\"));\n    } finally {\n      \n      close(mockController);\n      \n      close(overseerClient);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      Thread.sleep(1000);\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController.publishState(\"core1\", ZkStateReader.ACTIVE, 1);\n      \n      while(version == getClusterStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      version = getClusterStateVersion(controllerClient);\n      overseerClient.close();\n      Thread.sleep(1000); //wait for overseer to get killed\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 1);\n      version = getClusterStateVersion(controllerClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      while(version == getClusterStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader.getClusterState()\n          .getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getClusterState()\n          .getSlice(\"collection1\", \"shard1\").getReplicasMap().size());\n      version = getClusterStateVersion(controllerClient);\n      mockController.publishState(\"core1\", null,1);\n      while(version == getClusterStateVersion(controllerClient));\n      Thread.sleep(500);\n      assertFalse(\"collection1 should be gone after publishing the null state\", reader.getClusterState().getCollections().contains(\"collection1\"));\n    } finally {\n      \n      close(mockController);\n      \n      close(overseerClient);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d7e4f853b998a03d72d5b82562f9aa71ce33c44","date":1393462308,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","sourceNew":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\",\n          \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      Thread.sleep(1000);\n      mockController.publishState(\"core1\", \"core_node1\",\n          ZkStateReader.RECOVERING, 1);\n      \n      waitForCollections(reader, \"collection1\");\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController.publishState(\"core1\", \"core_node1\", ZkStateReader.ACTIVE,\n          1);\n      \n      while (version == getClusterStateVersion(controllerClient))\n        ;\n      \n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      version = getClusterStateVersion(controllerClient);\n      overseerClient.close();\n      Thread.sleep(1000); // wait for overseer to get killed\n      \n      mockController.publishState(\"core1\", \"core_node1\",\n          ZkStateReader.RECOVERING, 1);\n      version = getClusterStateVersion(controllerClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      while (version == getClusterStateVersion(controllerClient));\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getClusterState()\n          .getSlice(\"collection1\", \"shard1\").getReplicasMap().size());\n      version = getClusterStateVersion(controllerClient);\n      mockController.publishState(\"core1\", \"core_node1\", null, 1);\n      while (version == getClusterStateVersion(controllerClient));\n      Thread.sleep(500);\n      assertFalse(\"collection1 should be gone after publishing the null state\",\n          reader.getClusterState().getCollections().contains(\"collection1\"));\n    } finally {\n      \n      close(mockController);\n      \n      close(overseerClient);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      Thread.sleep(1000);\n      mockController.publishState(\"core1\", \"core_node1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController.publishState(\"core1\", \"core_node1\", ZkStateReader.ACTIVE, 1);\n      \n      while(version == getClusterStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      version = getClusterStateVersion(controllerClient);\n      overseerClient.close();\n      Thread.sleep(1000); //wait for overseer to get killed\n\n      mockController.publishState(\"core1\",  \"core_node1\", ZkStateReader.RECOVERING, 1);\n      version = getClusterStateVersion(controllerClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      while(version == getClusterStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader.getClusterState()\n          .getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getClusterState()\n          .getSlice(\"collection1\", \"shard1\").getReplicasMap().size());\n      version = getClusterStateVersion(controllerClient);\n      mockController.publishState(\"core1\", \"core_node1\", null,1);\n      while(version == getClusterStateVersion(controllerClient));\n      Thread.sleep(500);\n      assertFalse(\"collection1 should be gone after publishing the null state\", reader.getClusterState().getCollections().contains(\"collection1\"));\n    } finally {\n      \n      close(mockController);\n      \n      close(overseerClient);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","791c4fb1ff970967cf1802cf4d4875ba12c2eb01"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","date":1393532551,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","sourceNew":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\",\n          \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      Thread.sleep(1000);\n      mockController.publishState(\"core1\", \"core_node1\",\n          ZkStateReader.RECOVERING, 1);\n      \n      waitForCollections(reader, \"collection1\");\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController.publishState(\"core1\", \"core_node1\", ZkStateReader.ACTIVE,\n          1);\n      \n      while (version == getClusterStateVersion(controllerClient))\n        ;\n      \n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      version = getClusterStateVersion(controllerClient);\n      overseerClient.close();\n      Thread.sleep(1000); // wait for overseer to get killed\n      \n      mockController.publishState(\"core1\", \"core_node1\",\n          ZkStateReader.RECOVERING, 1);\n      version = getClusterStateVersion(controllerClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      while (version == getClusterStateVersion(controllerClient));\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getClusterState()\n          .getSlice(\"collection1\", \"shard1\").getReplicasMap().size());\n      version = getClusterStateVersion(controllerClient);\n      mockController.publishState(\"core1\", \"core_node1\", null, 1);\n      while (version == getClusterStateVersion(controllerClient));\n      Thread.sleep(500);\n      assertFalse(\"collection1 should be gone after publishing the null state\",\n          reader.getClusterState().getCollections().contains(\"collection1\"));\n    } finally {\n      \n      close(mockController);\n      \n      close(overseerClient);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      Thread.sleep(1000);\n      mockController.publishState(\"core1\", \"core_node1\", ZkStateReader.RECOVERING, 1);\n\n      waitForCollections(reader, \"collection1\");\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n\n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController.publishState(\"core1\", \"core_node1\", ZkStateReader.ACTIVE, 1);\n      \n      while(version == getClusterStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      version = getClusterStateVersion(controllerClient);\n      overseerClient.close();\n      Thread.sleep(1000); //wait for overseer to get killed\n\n      mockController.publishState(\"core1\",  \"core_node1\", ZkStateReader.RECOVERING, 1);\n      version = getClusterStateVersion(controllerClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      while(version == getClusterStateVersion(controllerClient));\n\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader.getClusterState()\n          .getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getClusterState()\n          .getSlice(\"collection1\", \"shard1\").getReplicasMap().size());\n      version = getClusterStateVersion(controllerClient);\n      mockController.publishState(\"core1\", \"core_node1\", null,1);\n      while(version == getClusterStateVersion(controllerClient));\n      Thread.sleep(500);\n      assertFalse(\"collection1 should be gone after publishing the null state\", reader.getClusterState().getCollections().contains(\"collection1\"));\n    } finally {\n      \n      close(mockController);\n      \n      close(overseerClient);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b954d1444134ef40d3fcea752c6aaaff4e7da056","date":1393720045,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","sourceNew":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\",\n          \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      Thread.sleep(1000);\n      mockController.publishState(\"core1\", \"core_node1\",\n          ZkStateReader.RECOVERING, 1);\n      \n      waitForCollections(reader, \"collection1\");\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController.publishState(\"core1\", \"core_node1\", ZkStateReader.ACTIVE,\n          1);\n      \n      while (version == getClusterStateVersion(controllerClient));\n      \n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      version = getClusterStateVersion(controllerClient);\n      overseerClient.close();\n      Thread.sleep(1000); // wait for overseer to get killed\n      \n      mockController.publishState(\"core1\", \"core_node1\",\n          ZkStateReader.RECOVERING, 1);\n      version = getClusterStateVersion(controllerClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      while (version == getClusterStateVersion(controllerClient));\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getClusterState()\n          .getSlice(\"collection1\", \"shard1\").getReplicasMap().size());\n      version = getClusterStateVersion(controllerClient);\n      mockController.publishState(\"core1\", \"core_node1\", null, 1);\n      while (version == getClusterStateVersion(controllerClient));\n      Thread.sleep(500);\n      assertFalse(\"collection1 should be gone after publishing the null state\",\n          reader.getClusterState().getCollections().contains(\"collection1\"));\n    } finally {\n      close(mockController);\n      close(overseerClient);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\",\n          \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      Thread.sleep(1000);\n      mockController.publishState(\"core1\", \"core_node1\",\n          ZkStateReader.RECOVERING, 1);\n      \n      waitForCollections(reader, \"collection1\");\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController.publishState(\"core1\", \"core_node1\", ZkStateReader.ACTIVE,\n          1);\n      \n      while (version == getClusterStateVersion(controllerClient))\n        ;\n      \n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      version = getClusterStateVersion(controllerClient);\n      overseerClient.close();\n      Thread.sleep(1000); // wait for overseer to get killed\n      \n      mockController.publishState(\"core1\", \"core_node1\",\n          ZkStateReader.RECOVERING, 1);\n      version = getClusterStateVersion(controllerClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      while (version == getClusterStateVersion(controllerClient));\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getClusterState()\n          .getSlice(\"collection1\", \"shard1\").getReplicasMap().size());\n      version = getClusterStateVersion(controllerClient);\n      mockController.publishState(\"core1\", \"core_node1\", null, 1);\n      while (version == getClusterStateVersion(controllerClient));\n      Thread.sleep(500);\n      assertFalse(\"collection1 should be gone after publishing the null state\",\n          reader.getClusterState().getCollections().contains(\"collection1\"));\n    } finally {\n      \n      close(mockController);\n      \n      close(overseerClient);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"512e034509e1a4227616f910489a995d4ad813af","date":1393801753,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","sourceNew":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\",\n          \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      Thread.sleep(1000);\n      mockController.publishState(\"core1\", \"core_node1\",\n          ZkStateReader.RECOVERING, 1);\n      \n      waitForCollections(reader, \"collection1\");\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      int version = getClusterStateVersion(zkClient);\n      \n      mockController.publishState(\"core1\", \"core_node1\", ZkStateReader.ACTIVE,\n          1);\n      \n      while (version == getClusterStateVersion(zkClient));\n      \n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      version = getClusterStateVersion(zkClient);\n      overseerClient.close();\n      Thread.sleep(1000); // wait for overseer to get killed\n      \n      mockController.publishState(\"core1\", \"core_node1\",\n          ZkStateReader.RECOVERING, 1);\n      version = getClusterStateVersion(zkClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      while (version == getClusterStateVersion(zkClient));\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getClusterState()\n          .getSlice(\"collection1\", \"shard1\").getReplicasMap().size());\n      version = getClusterStateVersion(zkClient);\n      mockController.publishState(\"core1\", \"core_node1\", null, 1);\n      while (version == getClusterStateVersion(zkClient));\n      Thread.sleep(500);\n      assertFalse(\"collection1 should be gone after publishing the null state\",\n          reader.getClusterState().getCollections().contains(\"collection1\"));\n    } finally {\n      close(mockController);\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\",\n          \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      Thread.sleep(1000);\n      mockController.publishState(\"core1\", \"core_node1\",\n          ZkStateReader.RECOVERING, 1);\n      \n      waitForCollections(reader, \"collection1\");\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      int version = getClusterStateVersion(controllerClient);\n      \n      mockController.publishState(\"core1\", \"core_node1\", ZkStateReader.ACTIVE,\n          1);\n      \n      while (version == getClusterStateVersion(controllerClient));\n      \n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      version = getClusterStateVersion(controllerClient);\n      overseerClient.close();\n      Thread.sleep(1000); // wait for overseer to get killed\n      \n      mockController.publishState(\"core1\", \"core_node1\",\n          ZkStateReader.RECOVERING, 1);\n      version = getClusterStateVersion(controllerClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      while (version == getClusterStateVersion(controllerClient));\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getClusterState()\n          .getSlice(\"collection1\", \"shard1\").getReplicasMap().size());\n      version = getClusterStateVersion(controllerClient);\n      mockController.publishState(\"core1\", \"core_node1\", null, 1);\n      while (version == getClusterStateVersion(controllerClient));\n      Thread.sleep(500);\n      assertFalse(\"collection1 should be gone after publishing the null state\",\n          reader.getClusterState().getCollections().contains(\"collection1\"));\n    } finally {\n      close(mockController);\n      close(overseerClient);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","7875fce026a0a335830cfc75abc3eb009eff9a73"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29f5eaf296600e1665151e7929d42a3cbe22e481","date":1393983215,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","sourceNew":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      Thread.sleep(1000);\n      mockController.publishState(collection, \"core1\", \"core_node1\",\n          ZkStateReader.RECOVERING, 1);\n      \n      waitForCollections(reader, collection);\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      int version = getClusterStateVersion(zkClient);\n      \n      mockController.publishState(collection, \"core1\", \"core_node1\", ZkStateReader.ACTIVE,\n          1);\n      \n      while (version == getClusterStateVersion(zkClient));\n      \n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      version = getClusterStateVersion(zkClient);\n      overseerClient.close();\n      Thread.sleep(1000); // wait for overseer to get killed\n      \n      mockController.publishState(collection, \"core1\", \"core_node1\",\n          ZkStateReader.RECOVERING, 1);\n      version = getClusterStateVersion(zkClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      while (version == getClusterStateVersion(zkClient));\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getClusterState()\n          .getSlice(collection, \"shard1\").getReplicasMap().size());\n      version = getClusterStateVersion(zkClient);\n      mockController.publishState(collection, \"core1\", \"core_node1\", null, 1);\n      while (version == getClusterStateVersion(zkClient));\n      Thread.sleep(500);\n      assertFalse(\"collection1 should be gone after publishing the null state\",\n          reader.getClusterState().getCollections().contains(collection));\n    } finally {\n      close(mockController);\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\",\n          \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      Thread.sleep(1000);\n      mockController.publishState(\"core1\", \"core_node1\",\n          ZkStateReader.RECOVERING, 1);\n      \n      waitForCollections(reader, \"collection1\");\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      int version = getClusterStateVersion(zkClient);\n      \n      mockController.publishState(\"core1\", \"core_node1\", ZkStateReader.ACTIVE,\n          1);\n      \n      while (version == getClusterStateVersion(zkClient));\n      \n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      version = getClusterStateVersion(zkClient);\n      overseerClient.close();\n      Thread.sleep(1000); // wait for overseer to get killed\n      \n      mockController.publishState(\"core1\", \"core_node1\",\n          ZkStateReader.RECOVERING, 1);\n      version = getClusterStateVersion(zkClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      while (version == getClusterStateVersion(zkClient));\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getClusterState()\n          .getSlice(\"collection1\", \"shard1\").getReplicasMap().size());\n      version = getClusterStateVersion(zkClient);\n      mockController.publishState(\"core1\", \"core_node1\", null, 1);\n      while (version == getClusterStateVersion(zkClient));\n      Thread.sleep(500);\n      assertFalse(\"collection1 should be gone after publishing the null state\",\n          reader.getClusterState().getCollections().contains(\"collection1\"));\n    } finally {\n      close(mockController);\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"96ea64d994d340044e0d57aeb6a5871539d10ca5","date":1394225445,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","sourceNew":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      Thread.sleep(1000);\n      mockController.publishState(collection, \"core1\", \"core_node1\",\n          ZkStateReader.RECOVERING, 1);\n      \n      waitForCollections(reader, collection);\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      int version = getClusterStateVersion(zkClient);\n      \n      mockController.publishState(collection, \"core1\", \"core_node1\", ZkStateReader.ACTIVE,\n          1);\n      \n      while (version == getClusterStateVersion(zkClient));\n      \n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      version = getClusterStateVersion(zkClient);\n      overseerClient.close();\n      Thread.sleep(1000); // wait for overseer to get killed\n      \n      mockController.publishState(collection, \"core1\", \"core_node1\",\n          ZkStateReader.RECOVERING, 1);\n      version = getClusterStateVersion(zkClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      while (version == getClusterStateVersion(zkClient));\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getClusterState()\n          .getSlice(collection, \"shard1\").getReplicasMap().size());\n      version = getClusterStateVersion(zkClient);\n      mockController.publishState(collection, \"core1\", \"core_node1\", null, 1);\n      while (version == getClusterStateVersion(zkClient));\n      Thread.sleep(500);\n      assertFalse(\"collection1 should be gone after publishing the null state\",\n          reader.getClusterState().getCollections().contains(collection));\n    } finally {\n      close(mockController);\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\",\n          \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      Thread.sleep(1000);\n      mockController.publishState(\"core1\", \"core_node1\",\n          ZkStateReader.RECOVERING, 1);\n      \n      waitForCollections(reader, \"collection1\");\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      int version = getClusterStateVersion(zkClient);\n      \n      mockController.publishState(\"core1\", \"core_node1\", ZkStateReader.ACTIVE,\n          1);\n      \n      while (version == getClusterStateVersion(zkClient));\n      \n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      version = getClusterStateVersion(zkClient);\n      overseerClient.close();\n      Thread.sleep(1000); // wait for overseer to get killed\n      \n      mockController.publishState(\"core1\", \"core_node1\",\n          ZkStateReader.RECOVERING, 1);\n      version = getClusterStateVersion(zkClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      while (version == getClusterStateVersion(zkClient));\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getClusterState()\n          .getSlice(\"collection1\", \"shard1\").getReplicasMap().size());\n      version = getClusterStateVersion(zkClient);\n      mockController.publishState(\"core1\", \"core_node1\", null, 1);\n      while (version == getClusterStateVersion(zkClient));\n      Thread.sleep(500);\n      assertFalse(\"collection1 should be gone after publishing the null state\",\n          reader.getClusterState().getCollections().contains(\"collection1\"));\n    } finally {\n      close(mockController);\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb1f22cfa77230b5f05b7784feae5367f6bbb488","date":1395968145,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","sourceNew":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = createTempDir().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      Thread.sleep(1000);\n      mockController.publishState(collection, \"core1\", \"core_node1\",\n          ZkStateReader.RECOVERING, 1);\n      \n      waitForCollections(reader, collection);\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      int version = getClusterStateVersion(zkClient);\n      \n      mockController.publishState(collection, \"core1\", \"core_node1\", ZkStateReader.ACTIVE,\n          1);\n      \n      while (version == getClusterStateVersion(zkClient));\n      \n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      version = getClusterStateVersion(zkClient);\n      overseerClient.close();\n      Thread.sleep(1000); // wait for overseer to get killed\n      \n      mockController.publishState(collection, \"core1\", \"core_node1\",\n          ZkStateReader.RECOVERING, 1);\n      version = getClusterStateVersion(zkClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      while (version == getClusterStateVersion(zkClient));\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getClusterState()\n          .getSlice(collection, \"shard1\").getReplicasMap().size());\n      version = getClusterStateVersion(zkClient);\n      mockController.publishState(collection, \"core1\", \"core_node1\", null, 1);\n      while (version == getClusterStateVersion(zkClient));\n      Thread.sleep(500);\n      assertFalse(\"collection1 should be gone after publishing the null state\",\n          reader.getClusterState().getCollections().contains(collection));\n    } finally {\n      close(mockController);\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      Thread.sleep(1000);\n      mockController.publishState(collection, \"core1\", \"core_node1\",\n          ZkStateReader.RECOVERING, 1);\n      \n      waitForCollections(reader, collection);\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      int version = getClusterStateVersion(zkClient);\n      \n      mockController.publishState(collection, \"core1\", \"core_node1\", ZkStateReader.ACTIVE,\n          1);\n      \n      while (version == getClusterStateVersion(zkClient));\n      \n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      version = getClusterStateVersion(zkClient);\n      overseerClient.close();\n      Thread.sleep(1000); // wait for overseer to get killed\n      \n      mockController.publishState(collection, \"core1\", \"core_node1\",\n          ZkStateReader.RECOVERING, 1);\n      version = getClusterStateVersion(zkClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      while (version == getClusterStateVersion(zkClient));\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getClusterState()\n          .getSlice(collection, \"shard1\").getReplicasMap().size());\n      version = getClusterStateVersion(zkClient);\n      mockController.publishState(collection, \"core1\", \"core_node1\", null, 1);\n      while (version == getClusterStateVersion(zkClient));\n      Thread.sleep(500);\n      assertFalse(\"collection1 should be gone after publishing the null state\",\n          reader.getClusterState().getCollections().contains(collection));\n    } finally {\n      close(mockController);\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e9ce820cd3ed9efb959c181daaafd22f0c70143","date":1396201051,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","sourceNew":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = createTempDir(\"zkData\").getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      Thread.sleep(1000);\n      mockController.publishState(collection, \"core1\", \"core_node1\",\n          ZkStateReader.RECOVERING, 1);\n      \n      waitForCollections(reader, collection);\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      int version = getClusterStateVersion(zkClient);\n      \n      mockController.publishState(collection, \"core1\", \"core_node1\", ZkStateReader.ACTIVE,\n          1);\n      \n      while (version == getClusterStateVersion(zkClient));\n      \n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      version = getClusterStateVersion(zkClient);\n      overseerClient.close();\n      Thread.sleep(1000); // wait for overseer to get killed\n      \n      mockController.publishState(collection, \"core1\", \"core_node1\",\n          ZkStateReader.RECOVERING, 1);\n      version = getClusterStateVersion(zkClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      while (version == getClusterStateVersion(zkClient));\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getClusterState()\n          .getSlice(collection, \"shard1\").getReplicasMap().size());\n      version = getClusterStateVersion(zkClient);\n      mockController.publishState(collection, \"core1\", \"core_node1\", null, 1);\n      while (version == getClusterStateVersion(zkClient));\n      Thread.sleep(500);\n      assertFalse(\"collection1 should be gone after publishing the null state\",\n          reader.getClusterState().getCollections().contains(collection));\n    } finally {\n      close(mockController);\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = createTempDir().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      Thread.sleep(1000);\n      mockController.publishState(collection, \"core1\", \"core_node1\",\n          ZkStateReader.RECOVERING, 1);\n      \n      waitForCollections(reader, collection);\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      int version = getClusterStateVersion(zkClient);\n      \n      mockController.publishState(collection, \"core1\", \"core_node1\", ZkStateReader.ACTIVE,\n          1);\n      \n      while (version == getClusterStateVersion(zkClient));\n      \n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      version = getClusterStateVersion(zkClient);\n      overseerClient.close();\n      Thread.sleep(1000); // wait for overseer to get killed\n      \n      mockController.publishState(collection, \"core1\", \"core_node1\",\n          ZkStateReader.RECOVERING, 1);\n      version = getClusterStateVersion(zkClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      while (version == getClusterStateVersion(zkClient));\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getClusterState()\n          .getSlice(collection, \"shard1\").getReplicasMap().size());\n      version = getClusterStateVersion(zkClient);\n      mockController.publishState(collection, \"core1\", \"core_node1\", null, 1);\n      while (version == getClusterStateVersion(zkClient));\n      Thread.sleep(500);\n      assertFalse(\"collection1 should be gone after publishing the null state\",\n          reader.getClusterState().getCollections().contains(collection));\n    } finally {\n      close(mockController);\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","sourceNew":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = createTempDir(\"zkData\").getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      Thread.sleep(1000);\n      mockController.publishState(collection, \"core1\", \"core_node1\",\n          ZkStateReader.RECOVERING, 1);\n      \n      waitForCollections(reader, collection);\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      int version = getClusterStateVersion(zkClient);\n      \n      mockController.publishState(collection, \"core1\", \"core_node1\", ZkStateReader.ACTIVE,\n          1);\n      \n      while (version == getClusterStateVersion(zkClient));\n      \n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      version = getClusterStateVersion(zkClient);\n      overseerClient.close();\n      Thread.sleep(1000); // wait for overseer to get killed\n      \n      mockController.publishState(collection, \"core1\", \"core_node1\",\n          ZkStateReader.RECOVERING, 1);\n      version = getClusterStateVersion(zkClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      while (version == getClusterStateVersion(zkClient));\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getClusterState()\n          .getSlice(collection, \"shard1\").getReplicasMap().size());\n      version = getClusterStateVersion(zkClient);\n      mockController.publishState(collection, \"core1\", \"core_node1\", null, 1);\n      while (version == getClusterStateVersion(zkClient));\n      Thread.sleep(500);\n      assertFalse(\"collection1 should be gone after publishing the null state\",\n          reader.getClusterState().getCollections().contains(collection));\n    } finally {\n      close(mockController);\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      Thread.sleep(1000);\n      mockController.publishState(collection, \"core1\", \"core_node1\",\n          ZkStateReader.RECOVERING, 1);\n      \n      waitForCollections(reader, collection);\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      int version = getClusterStateVersion(zkClient);\n      \n      mockController.publishState(collection, \"core1\", \"core_node1\", ZkStateReader.ACTIVE,\n          1);\n      \n      while (version == getClusterStateVersion(zkClient));\n      \n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      version = getClusterStateVersion(zkClient);\n      overseerClient.close();\n      Thread.sleep(1000); // wait for overseer to get killed\n      \n      mockController.publishState(collection, \"core1\", \"core_node1\",\n          ZkStateReader.RECOVERING, 1);\n      version = getClusterStateVersion(zkClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      while (version == getClusterStateVersion(zkClient));\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getClusterState()\n          .getSlice(collection, \"shard1\").getReplicasMap().size());\n      version = getClusterStateVersion(zkClient);\n      mockController.publishState(collection, \"core1\", \"core_node1\", null, 1);\n      while (version == getClusterStateVersion(zkClient));\n      Thread.sleep(500);\n      assertFalse(\"collection1 should be gone after publishing the null state\",\n          reader.getClusterState().getCollections().contains(collection));\n    } finally {\n      close(mockController);\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","sourceNew":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      Thread.sleep(1000);\n      mockController.publishState(collection, \"core1\", \"core_node1\",\n          ZkStateReader.RECOVERING, 1);\n      \n      waitForCollections(reader, collection);\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      int version = getClusterStateVersion(zkClient);\n      \n      mockController.publishState(collection, \"core1\", \"core_node1\", ZkStateReader.ACTIVE,\n          1);\n      \n      while (version == getClusterStateVersion(zkClient));\n      \n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      version = getClusterStateVersion(zkClient);\n      overseerClient.close();\n      Thread.sleep(1000); // wait for overseer to get killed\n      \n      mockController.publishState(collection, \"core1\", \"core_node1\",\n          ZkStateReader.RECOVERING, 1);\n      version = getClusterStateVersion(zkClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      while (version == getClusterStateVersion(zkClient));\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getClusterState()\n          .getSlice(collection, \"shard1\").getReplicasMap().size());\n      version = getClusterStateVersion(zkClient);\n      mockController.publishState(collection, \"core1\", \"core_node1\", null, 1);\n      while (version == getClusterStateVersion(zkClient));\n      Thread.sleep(500);\n      assertFalse(\"collection1 should be gone after publishing the null state\",\n          reader.getClusterState().getCollections().contains(collection));\n    } finally {\n      close(mockController);\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = createTempDir(\"zkData\").getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      Thread.sleep(1000);\n      mockController.publishState(collection, \"core1\", \"core_node1\",\n          ZkStateReader.RECOVERING, 1);\n      \n      waitForCollections(reader, collection);\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      int version = getClusterStateVersion(zkClient);\n      \n      mockController.publishState(collection, \"core1\", \"core_node1\", ZkStateReader.ACTIVE,\n          1);\n      \n      while (version == getClusterStateVersion(zkClient));\n      \n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      version = getClusterStateVersion(zkClient);\n      overseerClient.close();\n      Thread.sleep(1000); // wait for overseer to get killed\n      \n      mockController.publishState(collection, \"core1\", \"core_node1\",\n          ZkStateReader.RECOVERING, 1);\n      version = getClusterStateVersion(zkClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      while (version == getClusterStateVersion(zkClient));\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getClusterState()\n          .getSlice(collection, \"shard1\").getReplicasMap().size());\n      version = getClusterStateVersion(zkClient);\n      mockController.publishState(collection, \"core1\", \"core_node1\", null, 1);\n      while (version == getClusterStateVersion(zkClient));\n      Thread.sleep(500);\n      assertFalse(\"collection1 should be gone after publishing the null state\",\n          reader.getClusterState().getCollections().contains(collection));\n    } finally {\n      close(mockController);\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7875fce026a0a335830cfc75abc3eb009eff9a73","date":1425897108,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","sourceNew":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n      \n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      Thread.sleep(1000);\n      mockController.publishState(collection, \"core1\", \"core_node1\",\n          ZkStateReader.RECOVERING, 1);\n      \n      waitForCollections(reader, collection);\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      int version = getClusterStateVersion(zkClient);\n      \n      mockController.publishState(collection, \"core1\", \"core_node1\", ZkStateReader.ACTIVE,\n          1);\n      \n      while (version == getClusterStateVersion(zkClient));\n      \n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      version = getClusterStateVersion(zkClient);\n      overseerClient.close();\n      Thread.sleep(1000); // wait for overseer to get killed\n      \n      mockController.publishState(collection, \"core1\", \"core_node1\",\n          ZkStateReader.RECOVERING, 1);\n      version = getClusterStateVersion(zkClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      while (version == getClusterStateVersion(zkClient));\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getClusterState()\n          .getSlice(collection, \"shard1\").getReplicasMap().size());\n      version = getClusterStateVersion(zkClient);\n      mockController.publishState(collection, \"core1\", \"core_node1\", null, 1);\n      while (version == getClusterStateVersion(zkClient));\n      Thread.sleep(500);\n      assertFalse(\"collection1 should be gone after publishing the null state\",\n          reader.getClusterState().getCollections().contains(collection));\n    } finally {\n      close(mockController);\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      Thread.sleep(1000);\n      mockController.publishState(collection, \"core1\", \"core_node1\",\n          ZkStateReader.RECOVERING, 1);\n      \n      waitForCollections(reader, collection);\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      int version = getClusterStateVersion(zkClient);\n      \n      mockController.publishState(collection, \"core1\", \"core_node1\", ZkStateReader.ACTIVE,\n          1);\n      \n      while (version == getClusterStateVersion(zkClient));\n      \n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      version = getClusterStateVersion(zkClient);\n      overseerClient.close();\n      Thread.sleep(1000); // wait for overseer to get killed\n      \n      mockController.publishState(collection, \"core1\", \"core_node1\",\n          ZkStateReader.RECOVERING, 1);\n      version = getClusterStateVersion(zkClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      while (version == getClusterStateVersion(zkClient));\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getClusterState()\n          .getSlice(collection, \"shard1\").getReplicasMap().size());\n      version = getClusterStateVersion(zkClient);\n      mockController.publishState(collection, \"core1\", \"core_node1\", null, 1);\n      while (version == getClusterStateVersion(zkClient));\n      Thread.sleep(500);\n      assertFalse(\"collection1 should be gone after publishing the null state\",\n          reader.getClusterState().getCollections().contains(collection));\n    } finally {\n      close(mockController);\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":["512e034509e1a4227616f910489a995d4ad813af"],"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","sourceNew":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n      \n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      Thread.sleep(1000);\n      mockController.publishState(collection, \"core1\", \"core_node1\",\n          ZkStateReader.RECOVERING, 1);\n      \n      waitForCollections(reader, collection);\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      int version = getClusterStateVersion(zkClient);\n      \n      mockController.publishState(collection, \"core1\", \"core_node1\", ZkStateReader.ACTIVE,\n          1);\n      \n      while (version == getClusterStateVersion(zkClient));\n      \n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      version = getClusterStateVersion(zkClient);\n      overseerClient.close();\n      Thread.sleep(1000); // wait for overseer to get killed\n      \n      mockController.publishState(collection, \"core1\", \"core_node1\",\n          ZkStateReader.RECOVERING, 1);\n      version = getClusterStateVersion(zkClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      while (version == getClusterStateVersion(zkClient));\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getClusterState()\n          .getSlice(collection, \"shard1\").getReplicasMap().size());\n      version = getClusterStateVersion(zkClient);\n      mockController.publishState(collection, \"core1\", \"core_node1\", null, 1);\n      while (version == getClusterStateVersion(zkClient));\n      Thread.sleep(500);\n      assertFalse(\"collection1 should be gone after publishing the null state\",\n          reader.getClusterState().getCollections().contains(collection));\n    } finally {\n      close(mockController);\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      Thread.sleep(1000);\n      mockController.publishState(collection, \"core1\", \"core_node1\",\n          ZkStateReader.RECOVERING, 1);\n      \n      waitForCollections(reader, collection);\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      int version = getClusterStateVersion(zkClient);\n      \n      mockController.publishState(collection, \"core1\", \"core_node1\", ZkStateReader.ACTIVE,\n          1);\n      \n      while (version == getClusterStateVersion(zkClient));\n      \n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      version = getClusterStateVersion(zkClient);\n      overseerClient.close();\n      Thread.sleep(1000); // wait for overseer to get killed\n      \n      mockController.publishState(collection, \"core1\", \"core_node1\",\n          ZkStateReader.RECOVERING, 1);\n      version = getClusterStateVersion(zkClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      while (version == getClusterStateVersion(zkClient));\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getClusterState()\n          .getSlice(collection, \"shard1\").getReplicasMap().size());\n      version = getClusterStateVersion(zkClient);\n      mockController.publishState(collection, \"core1\", \"core_node1\", null, 1);\n      while (version == getClusterStateVersion(zkClient));\n      Thread.sleep(500);\n      assertFalse(\"collection1 should be gone after publishing the null state\",\n          reader.getClusterState().getCollections().contains(collection));\n    } finally {\n      close(mockController);\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a219f1dcad1700e84807666bdbd2b573e8de7021","date":1428130940,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","sourceNew":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n      \n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      Thread.sleep(1000);\n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n      \n      waitForCollections(reader, collection);\n      verifyStatus(reader, Replica.State.RECOVERING);\n      \n      int version = getClusterStateVersion(zkClient);\n      \n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.ACTIVE, 1);\n      \n      while (version == getClusterStateVersion(zkClient));\n      \n      verifyStatus(reader, Replica.State.ACTIVE);\n      version = getClusterStateVersion(zkClient);\n      overseerClient.close();\n      Thread.sleep(1000); // wait for overseer to get killed\n      \n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n      version = getClusterStateVersion(zkClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      while (version == getClusterStateVersion(zkClient));\n      \n      verifyStatus(reader, Replica.State.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getClusterState()\n          .getSlice(collection, \"shard1\").getReplicasMap().size());\n      version = getClusterStateVersion(zkClient);\n      mockController.publishState(collection, \"core1\", \"core_node1\", null, 1);\n      while (version == getClusterStateVersion(zkClient));\n      Thread.sleep(500);\n      assertFalse(\"collection1 should be gone after publishing the null state\",\n          reader.getClusterState().getCollections().contains(collection));\n    } finally {\n      close(mockController);\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n      \n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      Thread.sleep(1000);\n      mockController.publishState(collection, \"core1\", \"core_node1\",\n          ZkStateReader.RECOVERING, 1);\n      \n      waitForCollections(reader, collection);\n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      int version = getClusterStateVersion(zkClient);\n      \n      mockController.publishState(collection, \"core1\", \"core_node1\", ZkStateReader.ACTIVE,\n          1);\n      \n      while (version == getClusterStateVersion(zkClient));\n      \n      verifyStatus(reader, ZkStateReader.ACTIVE);\n      version = getClusterStateVersion(zkClient);\n      overseerClient.close();\n      Thread.sleep(1000); // wait for overseer to get killed\n      \n      mockController.publishState(collection, \"core1\", \"core_node1\",\n          ZkStateReader.RECOVERING, 1);\n      version = getClusterStateVersion(zkClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      while (version == getClusterStateVersion(zkClient));\n      \n      verifyStatus(reader, ZkStateReader.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getClusterState()\n          .getSlice(collection, \"shard1\").getReplicasMap().size());\n      version = getClusterStateVersion(zkClient);\n      mockController.publishState(collection, \"core1\", \"core_node1\", null, 1);\n      while (version == getClusterStateVersion(zkClient));\n      Thread.sleep(500);\n      assertFalse(\"collection1 should be gone after publishing the null state\",\n          reader.getClusterState().getCollections().contains(collection));\n    } finally {\n      close(mockController);\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["1e5f642aea415d0cbee35d1b3208b193a62d7f15"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e5f642aea415d0cbee35d1b3208b193a62d7f15","date":1439490669,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","sourceNew":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n      \n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      Thread.sleep(1000);\n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n      \n      waitForCollections(reader, collection);\n      verifyStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      int version = getClusterStateVersion(zkClient);\n      \n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.ACTIVE, 1);\n      \n      while (version == getClusterStateVersion(zkClient));\n      \n      verifyStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n      version = getClusterStateVersion(zkClient);\n      overseerClient.close();\n      Thread.sleep(1000); // wait for overseer to get killed\n      \n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n      version = getClusterStateVersion(zkClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      while (version == getClusterStateVersion(zkClient));\n      \n      verifyStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getClusterState()\n          .getSlice(collection, \"shard1\").getReplicasMap().size());\n      version = getClusterStateVersion(zkClient);\n      mockController.publishState(collection, \"core1\", \"core_node1\", null, 1);\n      while (version == getClusterStateVersion(zkClient));\n      Thread.sleep(500);\n      assertFalse(\"collection1 should be gone after publishing the null state\",\n          reader.getClusterState().getCollections().contains(collection));\n    } finally {\n      close(mockController);\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n      \n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      Thread.sleep(1000);\n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n      \n      waitForCollections(reader, collection);\n      verifyStatus(reader, Replica.State.RECOVERING);\n      \n      int version = getClusterStateVersion(zkClient);\n      \n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.ACTIVE, 1);\n      \n      while (version == getClusterStateVersion(zkClient));\n      \n      verifyStatus(reader, Replica.State.ACTIVE);\n      version = getClusterStateVersion(zkClient);\n      overseerClient.close();\n      Thread.sleep(1000); // wait for overseer to get killed\n      \n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n      version = getClusterStateVersion(zkClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      while (version == getClusterStateVersion(zkClient));\n      \n      verifyStatus(reader, Replica.State.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getClusterState()\n          .getSlice(collection, \"shard1\").getReplicasMap().size());\n      version = getClusterStateVersion(zkClient);\n      mockController.publishState(collection, \"core1\", \"core_node1\", null, 1);\n      while (version == getClusterStateVersion(zkClient));\n      Thread.sleep(500);\n      assertFalse(\"collection1 should be gone after publishing the null state\",\n          reader.getClusterState().getCollections().contains(collection));\n    } finally {\n      close(mockController);\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"bugIntro":["791c4fb1ff970967cf1802cf4d4875ba12c2eb01"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8bf04c3f77a2936f29948b9c0dd215d82d43f5cf","date":1440482195,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","sourceNew":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n      \n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      Thread.sleep(1000);\n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n      \n      waitForCollections(reader, collection);\n      verifyStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      int version = getClusterStateVersion(zkClient);\n      \n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.ACTIVE, 1);\n      \n      while (version == getClusterStateVersion(zkClient));\n      \n      verifyStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n      version = getClusterStateVersion(zkClient);\n      overseerClient.close();\n      Thread.sleep(1000); // wait for overseer to get killed\n      \n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n      version = getClusterStateVersion(zkClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      while (version == getClusterStateVersion(zkClient));\n      \n      verifyStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getClusterState()\n          .getSlice(collection, \"shard1\").getReplicasMap().size());\n      version = getClusterStateVersion(zkClient);\n      mockController.publishState(collection, \"core1\", \"core_node1\", null, 1);\n      while (version == getClusterStateVersion(zkClient));\n      Thread.sleep(500);\n      assertFalse(\"collection1 should be gone after publishing the null state\",\n          reader.getClusterState().hasCollection(collection));\n    } finally {\n      close(mockController);\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n      \n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      Thread.sleep(1000);\n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n      \n      waitForCollections(reader, collection);\n      verifyStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      int version = getClusterStateVersion(zkClient);\n      \n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.ACTIVE, 1);\n      \n      while (version == getClusterStateVersion(zkClient));\n      \n      verifyStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n      version = getClusterStateVersion(zkClient);\n      overseerClient.close();\n      Thread.sleep(1000); // wait for overseer to get killed\n      \n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n      version = getClusterStateVersion(zkClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      while (version == getClusterStateVersion(zkClient));\n      \n      verifyStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getClusterState()\n          .getSlice(collection, \"shard1\").getReplicasMap().size());\n      version = getClusterStateVersion(zkClient);\n      mockController.publishState(collection, \"core1\", \"core_node1\", null, 1);\n      while (version == getClusterStateVersion(zkClient));\n      Thread.sleep(500);\n      assertFalse(\"collection1 should be gone after publishing the null state\",\n          reader.getClusterState().getCollections().contains(collection));\n    } finally {\n      close(mockController);\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["175a04d27a2b736171e7e51ca46a03b2aec094d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"791c4fb1ff970967cf1802cf4d4875ba12c2eb01","date":1446659977,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","sourceNew":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n      \n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      Thread.sleep(1000);\n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n      \n      waitForCollections(reader, collection);\n      verifyReplicaStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      int version = getClusterStateVersion(zkClient);\n      \n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.ACTIVE, 1);\n      \n      while (version == getClusterStateVersion(zkClient));\n\n      verifyReplicaStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n      version = getClusterStateVersion(zkClient);\n      overseerClient.close();\n      Thread.sleep(1000); // wait for overseer to get killed\n      \n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n      version = getClusterStateVersion(zkClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      while (version == getClusterStateVersion(zkClient));\n\n      verifyReplicaStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getClusterState()\n          .getSlice(collection, \"shard1\").getReplicasMap().size());\n      version = getClusterStateVersion(zkClient);\n      mockController.publishState(collection, \"core1\", \"core_node1\", null, 1);\n      while (version == getClusterStateVersion(zkClient));\n      Thread.sleep(500);\n      assertFalse(\"collection1 should be gone after publishing the null state\",\n          reader.getClusterState().hasCollection(collection));\n    } finally {\n      close(mockController);\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n      \n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      Thread.sleep(1000);\n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n      \n      waitForCollections(reader, collection);\n      verifyStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      int version = getClusterStateVersion(zkClient);\n      \n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.ACTIVE, 1);\n      \n      while (version == getClusterStateVersion(zkClient));\n      \n      verifyStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n      version = getClusterStateVersion(zkClient);\n      overseerClient.close();\n      Thread.sleep(1000); // wait for overseer to get killed\n      \n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n      version = getClusterStateVersion(zkClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      while (version == getClusterStateVersion(zkClient));\n      \n      verifyStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getClusterState()\n          .getSlice(collection, \"shard1\").getReplicasMap().size());\n      version = getClusterStateVersion(zkClient);\n      mockController.publishState(collection, \"core1\", \"core_node1\", null, 1);\n      while (version == getClusterStateVersion(zkClient));\n      Thread.sleep(500);\n      assertFalse(\"collection1 should be gone after publishing the null state\",\n          reader.getClusterState().hasCollection(collection));\n    } finally {\n      close(mockController);\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":["2d7e4f853b998a03d72d5b82562f9aa71ce33c44","1e5f642aea415d0cbee35d1b3208b193a62d7f15"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d48cfd089cba66f9745d8043e8e971b60514418d","date":1449003177,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","sourceNew":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    SolrZkClient zkClient = null;\n    try {\n\n      final String core = \"core1\";\n      final String core_node = \"core_node1\";\n      final String shard = \"shard1\";\n      final int numShards = 1;\n\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n      \n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      Thread.sleep(1000);\n      mockController.publishState(collection, core, core_node,\n          Replica.State.RECOVERING, numShards);\n      \n      waitForCollections(reader, collection);\n      verifyReplicaStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      int version = getClusterStateVersion(zkClient);\n      \n      mockController.publishState(collection, core, core_node, Replica.State.ACTIVE,\n          numShards);\n      \n      while (version == getClusterStateVersion(zkClient));\n\n      verifyReplicaStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n      version = getClusterStateVersion(zkClient);\n      overseerClient.close();\n      Thread.sleep(1000); // wait for overseer to get killed\n      \n      mockController.publishState(collection, core, core_node,\n          Replica.State.RECOVERING, numShards);\n      version = getClusterStateVersion(zkClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      while (version == getClusterStateVersion(zkClient));\n\n      verifyReplicaStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(shard+\" replica count does not match\", 1, reader.getClusterState()\n          .getSlice(collection, shard).getReplicasMap().size());\n      version = getClusterStateVersion(zkClient);\n      mockController.publishState(collection, core, core_node, null, numShards);\n      while (version == getClusterStateVersion(zkClient));\n      Thread.sleep(500);\n      assertFalse(collection+\" should be gone after publishing the null state\",\n          reader.getClusterState().hasCollection(collection));\n    } finally {\n      close(mockController);\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n      \n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      Thread.sleep(1000);\n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n      \n      waitForCollections(reader, collection);\n      verifyReplicaStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      int version = getClusterStateVersion(zkClient);\n      \n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.ACTIVE, 1);\n      \n      while (version == getClusterStateVersion(zkClient));\n\n      verifyReplicaStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n      version = getClusterStateVersion(zkClient);\n      overseerClient.close();\n      Thread.sleep(1000); // wait for overseer to get killed\n      \n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n      version = getClusterStateVersion(zkClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      while (version == getClusterStateVersion(zkClient));\n\n      verifyReplicaStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(\"Shard count does not match\", 1, reader.getClusterState()\n          .getSlice(collection, \"shard1\").getReplicasMap().size());\n      version = getClusterStateVersion(zkClient);\n      mockController.publishState(collection, \"core1\", \"core_node1\", null, 1);\n      while (version == getClusterStateVersion(zkClient));\n      Thread.sleep(500);\n      assertFalse(\"collection1 should be gone after publishing the null state\",\n          reader.getClusterState().hasCollection(collection));\n    } finally {\n      close(mockController);\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","175a04d27a2b736171e7e51ca46a03b2aec094d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"175a04d27a2b736171e7e51ca46a03b2aec094d4","date":1452534768,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","sourceNew":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    SolrZkClient zkClient = null;\n    try {\n\n      final String core = \"core1\";\n      final String core_node = \"core_node1\";\n      final String shard = \"shard1\";\n      final int numShards = 1;\n\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n      \n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      Thread.sleep(1000);\n      mockController.publishState(collection, core, core_node,\n          Replica.State.RECOVERING, numShards);\n      \n      waitForCollections(reader, collection);\n      verifyReplicaStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      int version = getClusterStateVersion(zkClient);\n      \n      mockController.publishState(collection, core, core_node, Replica.State.ACTIVE,\n          numShards);\n      \n      while (version == getClusterStateVersion(zkClient));\n\n      verifyReplicaStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n      version = getClusterStateVersion(zkClient);\n      overseerClient.close();\n      Thread.sleep(1000); // wait for overseer to get killed\n      \n      mockController.publishState(collection, core, core_node,\n          Replica.State.RECOVERING, numShards);\n      version = getClusterStateVersion(zkClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      while (version == getClusterStateVersion(zkClient));\n\n      verifyReplicaStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(shard+\" replica count does not match\", 1, reader.getClusterState()\n          .getSlice(collection, shard).getReplicasMap().size());\n      version = getClusterStateVersion(zkClient);\n      mockController.publishState(collection, core, core_node, null, numShards);\n      while (version == getClusterStateVersion(zkClient));\n      Thread.sleep(500);\n      assertTrue(collection+\" should remain after removal of the last core\", // as of SOLR-5209 core removal does not cascade to remove the slice and collection\n          reader.getClusterState().getCollections().contains(collection));\n      assertTrue(core_node+\" should be gone after publishing the null state\",\n          null == reader.getClusterState().getCollection(collection).getReplica(core_node));\n    } finally {\n      close(mockController);\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    SolrZkClient zkClient = null;\n    try {\n\n      final String core = \"core1\";\n      final String core_node = \"core_node1\";\n      final String shard = \"shard1\";\n      final int numShards = 1;\n\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n      \n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      Thread.sleep(1000);\n      mockController.publishState(collection, core, core_node,\n          Replica.State.RECOVERING, numShards);\n      \n      waitForCollections(reader, collection);\n      verifyReplicaStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      int version = getClusterStateVersion(zkClient);\n      \n      mockController.publishState(collection, core, core_node, Replica.State.ACTIVE,\n          numShards);\n      \n      while (version == getClusterStateVersion(zkClient));\n\n      verifyReplicaStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n      version = getClusterStateVersion(zkClient);\n      overseerClient.close();\n      Thread.sleep(1000); // wait for overseer to get killed\n      \n      mockController.publishState(collection, core, core_node,\n          Replica.State.RECOVERING, numShards);\n      version = getClusterStateVersion(zkClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      while (version == getClusterStateVersion(zkClient));\n\n      verifyReplicaStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(shard+\" replica count does not match\", 1, reader.getClusterState()\n          .getSlice(collection, shard).getReplicasMap().size());\n      version = getClusterStateVersion(zkClient);\n      mockController.publishState(collection, core, core_node, null, numShards);\n      while (version == getClusterStateVersion(zkClient));\n      Thread.sleep(500);\n      assertFalse(collection+\" should be gone after publishing the null state\",\n          reader.getClusterState().hasCollection(collection));\n    } finally {\n      close(mockController);\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":["d48cfd089cba66f9745d8043e8e971b60514418d","8bf04c3f77a2936f29948b9c0dd215d82d43f5cf"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04c8df3f10a676c3de5dbf390f17a2de2d45cacd","date":1461615626,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","sourceNew":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    SolrZkClient zkClient = null;\n    try {\n\n      final String core = \"core1\";\n      final String core_node = \"core_node1\";\n      final String shard = \"shard1\";\n      final int numShards = 1;\n\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n      \n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      Thread.sleep(1000);\n      mockController.publishState(collection, core, core_node,\n          Replica.State.RECOVERING, numShards);\n      \n      waitForCollections(reader, collection);\n      verifyReplicaStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      int version = getClusterStateVersion(zkClient);\n      \n      mockController.publishState(collection, core, core_node, Replica.State.ACTIVE,\n          numShards);\n      \n      while (version == getClusterStateVersion(zkClient));\n\n      verifyReplicaStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n      version = getClusterStateVersion(zkClient);\n      overseerClient.close();\n      Thread.sleep(1000); // wait for overseer to get killed\n      \n      mockController.publishState(collection, core, core_node,\n          Replica.State.RECOVERING, numShards);\n      version = getClusterStateVersion(zkClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      while (version == getClusterStateVersion(zkClient));\n\n      verifyReplicaStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(shard+\" replica count does not match\", 1, reader.getClusterState()\n          .getSlice(collection, shard).getReplicasMap().size());\n      version = getClusterStateVersion(zkClient);\n      mockController.publishState(collection, core, core_node, null, numShards);\n      while (version == getClusterStateVersion(zkClient));\n      Thread.sleep(500);\n      assertTrue(collection+\" should remain after removal of the last core\", // as of SOLR-5209 core removal does not cascade to remove the slice and collection\n          reader.getClusterState().hasCollection(collection));\n      assertTrue(core_node+\" should be gone after publishing the null state\",\n          null == reader.getClusterState().getCollection(collection).getReplica(core_node));\n    } finally {\n      close(mockController);\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    SolrZkClient zkClient = null;\n    try {\n\n      final String core = \"core1\";\n      final String core_node = \"core_node1\";\n      final String shard = \"shard1\";\n      final int numShards = 1;\n\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n      \n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      Thread.sleep(1000);\n      mockController.publishState(collection, core, core_node,\n          Replica.State.RECOVERING, numShards);\n      \n      waitForCollections(reader, collection);\n      verifyReplicaStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      int version = getClusterStateVersion(zkClient);\n      \n      mockController.publishState(collection, core, core_node, Replica.State.ACTIVE,\n          numShards);\n      \n      while (version == getClusterStateVersion(zkClient));\n\n      verifyReplicaStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n      version = getClusterStateVersion(zkClient);\n      overseerClient.close();\n      Thread.sleep(1000); // wait for overseer to get killed\n      \n      mockController.publishState(collection, core, core_node,\n          Replica.State.RECOVERING, numShards);\n      version = getClusterStateVersion(zkClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      while (version == getClusterStateVersion(zkClient));\n\n      verifyReplicaStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(shard+\" replica count does not match\", 1, reader.getClusterState()\n          .getSlice(collection, shard).getReplicasMap().size());\n      version = getClusterStateVersion(zkClient);\n      mockController.publishState(collection, core, core_node, null, numShards);\n      while (version == getClusterStateVersion(zkClient));\n      Thread.sleep(500);\n      assertTrue(collection+\" should remain after removal of the last core\", // as of SOLR-5209 core removal does not cascade to remove the slice and collection\n          reader.getClusterState().getCollections().contains(collection));\n      assertTrue(core_node+\" should be gone after publishing the null state\",\n          null == reader.getClusterState().getCollection(collection).getReplica(core_node));\n    } finally {\n      close(mockController);\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","sourceNew":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    SolrZkClient zkClient = null;\n    try {\n\n      final String core = \"core1\";\n      final String core_node = \"core_node1\";\n      final String shard = \"shard1\";\n      final int numShards = 1;\n\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n      \n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      Thread.sleep(1000);\n      mockController.publishState(collection, core, core_node,\n          Replica.State.RECOVERING, numShards);\n      \n      waitForCollections(reader, collection);\n      verifyReplicaStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      int version = getClusterStateVersion(zkClient);\n      \n      mockController.publishState(collection, core, core_node, Replica.State.ACTIVE,\n          numShards);\n      \n      while (version == getClusterStateVersion(zkClient));\n\n      verifyReplicaStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n      version = getClusterStateVersion(zkClient);\n      overseerClient.close();\n      Thread.sleep(1000); // wait for overseer to get killed\n      \n      mockController.publishState(collection, core, core_node,\n          Replica.State.RECOVERING, numShards);\n      version = getClusterStateVersion(zkClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      while (version == getClusterStateVersion(zkClient));\n\n      verifyReplicaStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(shard+\" replica count does not match\", 1, reader.getClusterState()\n          .getSlice(collection, shard).getReplicasMap().size());\n      version = getClusterStateVersion(zkClient);\n      mockController.publishState(collection, core, core_node, null, numShards);\n      while (version == getClusterStateVersion(zkClient));\n      Thread.sleep(500);\n      assertTrue(collection+\" should remain after removal of the last core\", // as of SOLR-5209 core removal does not cascade to remove the slice and collection\n          reader.getClusterState().hasCollection(collection));\n      assertTrue(core_node+\" should be gone after publishing the null state\",\n          null == reader.getClusterState().getCollection(collection).getReplica(core_node));\n    } finally {\n      close(mockController);\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    SolrZkClient zkClient = null;\n    try {\n\n      final String core = \"core1\";\n      final String core_node = \"core_node1\";\n      final String shard = \"shard1\";\n      final int numShards = 1;\n\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n      \n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      Thread.sleep(1000);\n      mockController.publishState(collection, core, core_node,\n          Replica.State.RECOVERING, numShards);\n      \n      waitForCollections(reader, collection);\n      verifyReplicaStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      int version = getClusterStateVersion(zkClient);\n      \n      mockController.publishState(collection, core, core_node, Replica.State.ACTIVE,\n          numShards);\n      \n      while (version == getClusterStateVersion(zkClient));\n\n      verifyReplicaStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n      version = getClusterStateVersion(zkClient);\n      overseerClient.close();\n      Thread.sleep(1000); // wait for overseer to get killed\n      \n      mockController.publishState(collection, core, core_node,\n          Replica.State.RECOVERING, numShards);\n      version = getClusterStateVersion(zkClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      while (version == getClusterStateVersion(zkClient));\n\n      verifyReplicaStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(shard+\" replica count does not match\", 1, reader.getClusterState()\n          .getSlice(collection, shard).getReplicasMap().size());\n      version = getClusterStateVersion(zkClient);\n      mockController.publishState(collection, core, core_node, null, numShards);\n      while (version == getClusterStateVersion(zkClient));\n      Thread.sleep(500);\n      assertTrue(collection+\" should remain after removal of the last core\", // as of SOLR-5209 core removal does not cascade to remove the slice and collection\n          reader.getClusterState().getCollections().contains(collection));\n      assertTrue(core_node+\" should be gone after publishing the null state\",\n          null == reader.getClusterState().getCollection(collection).getReplica(core_node));\n    } finally {\n      close(mockController);\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5de502b5478255493125e7e801411ba17a6682ec","date":1490974101,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","sourceNew":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    SolrZkClient zkClient = null;\n    try {\n\n      final String core = \"core1\";\n      final String core_node = \"core_node1\";\n      final String shard = \"shard1\";\n      final int numShards = 1;\n\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n      \n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      Thread.sleep(1000);\n      mockController.publishState(COLLECTION, core, core_node,\n          Replica.State.RECOVERING, numShards);\n      \n      waitForCollections(reader, COLLECTION);\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      int version = getClusterStateVersion(zkClient);\n      \n      mockController.publishState(COLLECTION, core, core_node, Replica.State.ACTIVE,\n          numShards);\n      \n      while (version == getClusterStateVersion(zkClient));\n\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n      version = getClusterStateVersion(zkClient);\n      overseerClient.close();\n      Thread.sleep(1000); // wait for overseer to get killed\n      \n      mockController.publishState(COLLECTION, core, core_node,\n          Replica.State.RECOVERING, numShards);\n      version = getClusterStateVersion(zkClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      while (version == getClusterStateVersion(zkClient));\n\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(shard+\" replica count does not match\", 1, reader.getClusterState()\n          .getSlice(COLLECTION, shard).getReplicasMap().size());\n      version = getClusterStateVersion(zkClient);\n      mockController.publishState(COLLECTION, core, core_node, null, numShards);\n      while (version == getClusterStateVersion(zkClient));\n      Thread.sleep(500);\n      assertTrue(COLLECTION +\" should remain after removal of the last core\", // as of SOLR-5209 core removal does not cascade to remove the slice and collection\n          reader.getClusterState().hasCollection(COLLECTION));\n      assertTrue(core_node+\" should be gone after publishing the null state\",\n          null == reader.getClusterState().getCollection(COLLECTION).getReplica(core_node));\n    } finally {\n      close(mockController);\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    SolrZkClient zkClient = null;\n    try {\n\n      final String core = \"core1\";\n      final String core_node = \"core_node1\";\n      final String shard = \"shard1\";\n      final int numShards = 1;\n\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n      \n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      Thread.sleep(1000);\n      mockController.publishState(collection, core, core_node,\n          Replica.State.RECOVERING, numShards);\n      \n      waitForCollections(reader, collection);\n      verifyReplicaStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      int version = getClusterStateVersion(zkClient);\n      \n      mockController.publishState(collection, core, core_node, Replica.State.ACTIVE,\n          numShards);\n      \n      while (version == getClusterStateVersion(zkClient));\n\n      verifyReplicaStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n      version = getClusterStateVersion(zkClient);\n      overseerClient.close();\n      Thread.sleep(1000); // wait for overseer to get killed\n      \n      mockController.publishState(collection, core, core_node,\n          Replica.State.RECOVERING, numShards);\n      version = getClusterStateVersion(zkClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      while (version == getClusterStateVersion(zkClient));\n\n      verifyReplicaStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(shard+\" replica count does not match\", 1, reader.getClusterState()\n          .getSlice(collection, shard).getReplicasMap().size());\n      version = getClusterStateVersion(zkClient);\n      mockController.publishState(collection, core, core_node, null, numShards);\n      while (version == getClusterStateVersion(zkClient));\n      Thread.sleep(500);\n      assertTrue(collection+\" should remain after removal of the last core\", // as of SOLR-5209 core removal does not cascade to remove the slice and collection\n          reader.getClusterState().hasCollection(collection));\n      assertTrue(core_node+\" should be gone after publishing the null state\",\n          null == reader.getClusterState().getCollection(collection).getReplica(core_node));\n    } finally {\n      close(mockController);\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["344b0840364d990b29b97467bfcc766ff8325d11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6f20fd35e3055a0c5b387df0b986a68d65d86441","date":1491045405,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","sourceNew":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    SolrZkClient zkClient = null;\n    try {\n\n      final String core = \"core1\";\n      final String core_node = \"core_node1\";\n      final String shard = \"shard1\";\n      final int numShards = 1;\n\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n      \n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      Thread.sleep(1000);\n      mockController.publishState(COLLECTION, core, core_node,\n          Replica.State.RECOVERING, numShards);\n      \n      waitForCollections(reader, COLLECTION);\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      int version = getClusterStateVersion(zkClient);\n      \n      mockController.publishState(COLLECTION, core, core_node, Replica.State.ACTIVE,\n          numShards);\n      \n      while (version == getClusterStateVersion(zkClient));\n\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n      version = getClusterStateVersion(zkClient);\n      overseerClient.close();\n      Thread.sleep(1000); // wait for overseer to get killed\n      \n      mockController.publishState(COLLECTION, core, core_node,\n          Replica.State.RECOVERING, numShards);\n      version = getClusterStateVersion(zkClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      while (version == getClusterStateVersion(zkClient));\n\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(shard+\" replica count does not match\", 1, reader.getClusterState()\n          .getSlice(COLLECTION, shard).getReplicasMap().size());\n      version = getClusterStateVersion(zkClient);\n      mockController.publishState(COLLECTION, core, core_node, null, numShards);\n      while (version == getClusterStateVersion(zkClient));\n      Thread.sleep(500);\n      assertTrue(COLLECTION +\" should remain after removal of the last core\", // as of SOLR-5209 core removal does not cascade to remove the slice and collection\n          reader.getClusterState().hasCollection(COLLECTION));\n      assertTrue(core_node+\" should be gone after publishing the null state\",\n          null == reader.getClusterState().getCollection(COLLECTION).getReplica(core_node));\n    } finally {\n      close(mockController);\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    SolrZkClient zkClient = null;\n    try {\n\n      final String core = \"core1\";\n      final String core_node = \"core_node1\";\n      final String shard = \"shard1\";\n      final int numShards = 1;\n\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n      \n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      Thread.sleep(1000);\n      mockController.publishState(collection, core, core_node,\n          Replica.State.RECOVERING, numShards);\n      \n      waitForCollections(reader, collection);\n      verifyReplicaStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      int version = getClusterStateVersion(zkClient);\n      \n      mockController.publishState(collection, core, core_node, Replica.State.ACTIVE,\n          numShards);\n      \n      while (version == getClusterStateVersion(zkClient));\n\n      verifyReplicaStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n      version = getClusterStateVersion(zkClient);\n      overseerClient.close();\n      Thread.sleep(1000); // wait for overseer to get killed\n      \n      mockController.publishState(collection, core, core_node,\n          Replica.State.RECOVERING, numShards);\n      version = getClusterStateVersion(zkClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      while (version == getClusterStateVersion(zkClient));\n\n      verifyReplicaStatus(reader, collection, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(shard+\" replica count does not match\", 1, reader.getClusterState()\n          .getSlice(collection, shard).getReplicasMap().size());\n      version = getClusterStateVersion(zkClient);\n      mockController.publishState(collection, core, core_node, null, numShards);\n      while (version == getClusterStateVersion(zkClient));\n      Thread.sleep(500);\n      assertTrue(collection+\" should remain after removal of the last core\", // as of SOLR-5209 core removal does not cascade to remove the slice and collection\n          reader.getClusterState().hasCollection(collection));\n      assertTrue(core_node+\" should be gone after publishing the null state\",\n          null == reader.getClusterState().getCollection(collection).getReplica(core_node));\n    } finally {\n      close(mockController);\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9b4296bd51ca61b482138791478afdd0f7d3a3d","date":1498058739,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","sourceNew":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    SolrZkClient zkClient = null;\n    try {\n\n      final String core = \"core1\";\n      final String core_node = \"core_node1\";\n      final String shard = \"shard1\";\n      final int numShards = 1;\n\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n      \n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      Thread.sleep(1000);\n      mockController.createCollection(COLLECTION, 1);\n      mockController.publishState(COLLECTION, core, core_node, \"shard1\",\n          Replica.State.RECOVERING, numShards);\n      \n      waitForCollections(reader, COLLECTION);\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      int version = getClusterStateVersion(zkClient);\n      \n      mockController.publishState(COLLECTION, core, core_node, \"shard1\", Replica.State.ACTIVE,\n          numShards);\n      \n      while (version == getClusterStateVersion(zkClient));\n\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n      version = getClusterStateVersion(zkClient);\n      overseerClient.close();\n      Thread.sleep(1000); // wait for overseer to get killed\n      \n      mockController.publishState(COLLECTION, core, core_node, \"shard1\",\n          Replica.State.RECOVERING, numShards);\n      version = getClusterStateVersion(zkClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      while (version == getClusterStateVersion(zkClient));\n\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(shard+\" replica count does not match\", 1, reader.getClusterState()\n          .getSlice(COLLECTION, shard).getReplicasMap().size());\n      version = getClusterStateVersion(zkClient);\n      mockController.publishState(COLLECTION, core, core_node, \"shard1\", null, numShards);\n      while (version == getClusterStateVersion(zkClient));\n      Thread.sleep(500);\n      assertTrue(COLLECTION +\" should remain after removal of the last core\", // as of SOLR-5209 core removal does not cascade to remove the slice and collection\n          reader.getClusterState().hasCollection(COLLECTION));\n      assertTrue(core_node+\" should be gone after publishing the null state\",\n          null == reader.getClusterState().getCollection(COLLECTION).getReplica(core_node));\n    } finally {\n      close(mockController);\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    SolrZkClient zkClient = null;\n    try {\n\n      final String core = \"core1\";\n      final String core_node = \"core_node1\";\n      final String shard = \"shard1\";\n      final int numShards = 1;\n\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n      \n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      Thread.sleep(1000);\n      mockController.publishState(COLLECTION, core, core_node,\n          Replica.State.RECOVERING, numShards);\n      \n      waitForCollections(reader, COLLECTION);\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      int version = getClusterStateVersion(zkClient);\n      \n      mockController.publishState(COLLECTION, core, core_node, Replica.State.ACTIVE,\n          numShards);\n      \n      while (version == getClusterStateVersion(zkClient));\n\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n      version = getClusterStateVersion(zkClient);\n      overseerClient.close();\n      Thread.sleep(1000); // wait for overseer to get killed\n      \n      mockController.publishState(COLLECTION, core, core_node,\n          Replica.State.RECOVERING, numShards);\n      version = getClusterStateVersion(zkClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      while (version == getClusterStateVersion(zkClient));\n\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(shard+\" replica count does not match\", 1, reader.getClusterState()\n          .getSlice(COLLECTION, shard).getReplicasMap().size());\n      version = getClusterStateVersion(zkClient);\n      mockController.publishState(COLLECTION, core, core_node, null, numShards);\n      while (version == getClusterStateVersion(zkClient));\n      Thread.sleep(500);\n      assertTrue(COLLECTION +\" should remain after removal of the last core\", // as of SOLR-5209 core removal does not cascade to remove the slice and collection\n          reader.getClusterState().hasCollection(COLLECTION));\n      assertTrue(core_node+\" should be gone after publishing the null state\",\n          null == reader.getClusterState().getCollection(COLLECTION).getReplica(core_node));\n    } finally {\n      close(mockController);\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","sourceNew":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    SolrZkClient zkClient = null;\n    try {\n\n      final String core = \"core1\";\n      final String core_node = \"core_node1\";\n      final String shard = \"shard1\";\n      final int numShards = 1;\n\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n      \n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      Thread.sleep(1000);\n      mockController.createCollection(COLLECTION, 1);\n      mockController.publishState(COLLECTION, core, core_node, \"shard1\",\n          Replica.State.RECOVERING, numShards);\n      \n      waitForCollections(reader, COLLECTION);\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      int version = getClusterStateVersion(zkClient);\n      \n      mockController.publishState(COLLECTION, core, core_node, \"shard1\", Replica.State.ACTIVE,\n          numShards);\n      \n      while (version == getClusterStateVersion(zkClient));\n\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n      version = getClusterStateVersion(zkClient);\n      overseerClient.close();\n      Thread.sleep(1000); // wait for overseer to get killed\n      \n      mockController.publishState(COLLECTION, core, core_node, \"shard1\",\n          Replica.State.RECOVERING, numShards);\n      version = getClusterStateVersion(zkClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      while (version == getClusterStateVersion(zkClient));\n\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(shard+\" replica count does not match\", 1, reader.getClusterState()\n          .getSlice(COLLECTION, shard).getReplicasMap().size());\n      version = getClusterStateVersion(zkClient);\n      mockController.publishState(COLLECTION, core, core_node, \"shard1\", null, numShards);\n      while (version == getClusterStateVersion(zkClient));\n      Thread.sleep(500);\n      assertTrue(COLLECTION +\" should remain after removal of the last core\", // as of SOLR-5209 core removal does not cascade to remove the slice and collection\n          reader.getClusterState().hasCollection(COLLECTION));\n      assertTrue(core_node+\" should be gone after publishing the null state\",\n          null == reader.getClusterState().getCollection(COLLECTION).getReplica(core_node));\n    } finally {\n      close(mockController);\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    SolrZkClient zkClient = null;\n    try {\n\n      final String core = \"core1\";\n      final String core_node = \"core_node1\";\n      final String shard = \"shard1\";\n      final int numShards = 1;\n\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n      \n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      Thread.sleep(1000);\n      mockController.publishState(COLLECTION, core, core_node,\n          Replica.State.RECOVERING, numShards);\n      \n      waitForCollections(reader, COLLECTION);\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      int version = getClusterStateVersion(zkClient);\n      \n      mockController.publishState(COLLECTION, core, core_node, Replica.State.ACTIVE,\n          numShards);\n      \n      while (version == getClusterStateVersion(zkClient));\n\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n      version = getClusterStateVersion(zkClient);\n      overseerClient.close();\n      Thread.sleep(1000); // wait for overseer to get killed\n      \n      mockController.publishState(COLLECTION, core, core_node,\n          Replica.State.RECOVERING, numShards);\n      version = getClusterStateVersion(zkClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      while (version == getClusterStateVersion(zkClient));\n\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(shard+\" replica count does not match\", 1, reader.getClusterState()\n          .getSlice(COLLECTION, shard).getReplicasMap().size());\n      version = getClusterStateVersion(zkClient);\n      mockController.publishState(COLLECTION, core, core_node, null, numShards);\n      while (version == getClusterStateVersion(zkClient));\n      Thread.sleep(500);\n      assertTrue(COLLECTION +\" should remain after removal of the last core\", // as of SOLR-5209 core removal does not cascade to remove the slice and collection\n          reader.getClusterState().hasCollection(COLLECTION));\n      assertTrue(core_node+\" should be gone after publishing the null state\",\n          null == reader.getClusterState().getCollection(COLLECTION).getReplica(core_node));\n    } finally {\n      close(mockController);\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","sourceNew":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    SolrZkClient zkClient = null;\n    try {\n\n      final String core = \"core1\";\n      final String core_node = \"core_node1\";\n      final String shard = \"shard1\";\n      final int numShards = 1;\n\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n      \n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      Thread.sleep(1000);\n      mockController.createCollection(COLLECTION, 1);\n      mockController.publishState(COLLECTION, core, core_node, \"shard1\",\n          Replica.State.RECOVERING, numShards);\n      \n      waitForCollections(reader, COLLECTION);\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      int version = getClusterStateVersion(zkClient);\n      \n      mockController.publishState(COLLECTION, core, core_node, \"shard1\", Replica.State.ACTIVE,\n          numShards);\n      \n      while (version == getClusterStateVersion(zkClient));\n\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n      version = getClusterStateVersion(zkClient);\n      overseerClient.close();\n      Thread.sleep(1000); // wait for overseer to get killed\n      \n      mockController.publishState(COLLECTION, core, core_node, \"shard1\",\n          Replica.State.RECOVERING, numShards);\n      version = getClusterStateVersion(zkClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      while (version == getClusterStateVersion(zkClient));\n\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(shard+\" replica count does not match\", 1, reader.getClusterState()\n          .getSlice(COLLECTION, shard).getReplicasMap().size());\n      version = getClusterStateVersion(zkClient);\n      mockController.publishState(COLLECTION, core, core_node, \"shard1\", null, numShards);\n      while (version == getClusterStateVersion(zkClient));\n      Thread.sleep(500);\n      assertTrue(COLLECTION +\" should remain after removal of the last core\", // as of SOLR-5209 core removal does not cascade to remove the slice and collection\n          reader.getClusterState().hasCollection(COLLECTION));\n      assertTrue(core_node+\" should be gone after publishing the null state\",\n          null == reader.getClusterState().getCollection(COLLECTION).getReplica(core_node));\n    } finally {\n      close(mockController);\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    SolrZkClient zkClient = null;\n    try {\n\n      final String core = \"core1\";\n      final String core_node = \"core_node1\";\n      final String shard = \"shard1\";\n      final int numShards = 1;\n\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n      \n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      Thread.sleep(1000);\n      mockController.publishState(COLLECTION, core, core_node,\n          Replica.State.RECOVERING, numShards);\n      \n      waitForCollections(reader, COLLECTION);\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      int version = getClusterStateVersion(zkClient);\n      \n      mockController.publishState(COLLECTION, core, core_node, Replica.State.ACTIVE,\n          numShards);\n      \n      while (version == getClusterStateVersion(zkClient));\n\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n      version = getClusterStateVersion(zkClient);\n      overseerClient.close();\n      Thread.sleep(1000); // wait for overseer to get killed\n      \n      mockController.publishState(COLLECTION, core, core_node,\n          Replica.State.RECOVERING, numShards);\n      version = getClusterStateVersion(zkClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      while (version == getClusterStateVersion(zkClient));\n\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(shard+\" replica count does not match\", 1, reader.getClusterState()\n          .getSlice(COLLECTION, shard).getReplicasMap().size());\n      version = getClusterStateVersion(zkClient);\n      mockController.publishState(COLLECTION, core, core_node, null, numShards);\n      while (version == getClusterStateVersion(zkClient));\n      Thread.sleep(500);\n      assertTrue(COLLECTION +\" should remain after removal of the last core\", // as of SOLR-5209 core removal does not cascade to remove the slice and collection\n          reader.getClusterState().hasCollection(COLLECTION));\n      assertTrue(core_node+\" should be gone after publishing the null state\",\n          null == reader.getClusterState().getCollection(COLLECTION).getReplica(core_node));\n    } finally {\n      close(mockController);\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"344b0840364d990b29b97467bfcc766ff8325d11","date":1501574100,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","sourceNew":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    SolrZkClient zkClient = null;\n    try {\n\n      final String core = \"core1\";\n      final String core_node = \"core_node1\";\n      final String shard = \"shard1\";\n      final int numShards = 1;\n\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n      \n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      Thread.sleep(1000);\n      mockController.createCollection(COLLECTION, 1);\n      mockController.publishState(COLLECTION, core, core_node, \"shard1\",\n          Replica.State.RECOVERING, numShards);\n      \n      waitForCollections(reader, COLLECTION);\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      int version = getClusterStateVersion(zkClient);\n      \n      mockController.publishState(COLLECTION, core, core_node, \"shard1\", Replica.State.ACTIVE,\n          numShards);\n      \n      while (version == getClusterStateVersion(zkClient));\n\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n      version = getClusterStateVersion(zkClient);\n      overseerClient.close();\n      Thread.sleep(1000); // wait for overseer to get killed\n      \n      mockController.publishState(COLLECTION, core, core_node, \"shard1\",\n          Replica.State.RECOVERING, numShards);\n      version = getClusterStateVersion(zkClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      while (version == getClusterStateVersion(zkClient));\n\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(shard+\" replica count does not match\", 1, reader.getClusterState()\n          .getCollection(COLLECTION).getSlice(shard).getReplicasMap().size());\n      version = getClusterStateVersion(zkClient);\n      mockController.publishState(COLLECTION, core, core_node, \"shard1\", null, numShards);\n      while (version == getClusterStateVersion(zkClient));\n      Thread.sleep(500);\n      assertTrue(COLLECTION +\" should remain after removal of the last core\", // as of SOLR-5209 core removal does not cascade to remove the slice and collection\n          reader.getClusterState().hasCollection(COLLECTION));\n      assertTrue(core_node+\" should be gone after publishing the null state\",\n          null == reader.getClusterState().getCollection(COLLECTION).getReplica(core_node));\n    } finally {\n      close(mockController);\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    SolrZkClient zkClient = null;\n    try {\n\n      final String core = \"core1\";\n      final String core_node = \"core_node1\";\n      final String shard = \"shard1\";\n      final int numShards = 1;\n\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n      \n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      Thread.sleep(1000);\n      mockController.createCollection(COLLECTION, 1);\n      mockController.publishState(COLLECTION, core, core_node, \"shard1\",\n          Replica.State.RECOVERING, numShards);\n      \n      waitForCollections(reader, COLLECTION);\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      int version = getClusterStateVersion(zkClient);\n      \n      mockController.publishState(COLLECTION, core, core_node, \"shard1\", Replica.State.ACTIVE,\n          numShards);\n      \n      while (version == getClusterStateVersion(zkClient));\n\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n      version = getClusterStateVersion(zkClient);\n      overseerClient.close();\n      Thread.sleep(1000); // wait for overseer to get killed\n      \n      mockController.publishState(COLLECTION, core, core_node, \"shard1\",\n          Replica.State.RECOVERING, numShards);\n      version = getClusterStateVersion(zkClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      while (version == getClusterStateVersion(zkClient));\n\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(shard+\" replica count does not match\", 1, reader.getClusterState()\n          .getSlice(COLLECTION, shard).getReplicasMap().size());\n      version = getClusterStateVersion(zkClient);\n      mockController.publishState(COLLECTION, core, core_node, \"shard1\", null, numShards);\n      while (version == getClusterStateVersion(zkClient));\n      Thread.sleep(500);\n      assertTrue(COLLECTION +\" should remain after removal of the last core\", // as of SOLR-5209 core removal does not cascade to remove the slice and collection\n          reader.getClusterState().hasCollection(COLLECTION));\n      assertTrue(core_node+\" should be gone after publishing the null state\",\n          null == reader.getClusterState().getCollection(COLLECTION).getReplica(core_node));\n    } finally {\n      close(mockController);\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":["5de502b5478255493125e7e801411ba17a6682ec"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","sourceNew":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    SolrZkClient zkClient = null;\n    try {\n\n      final String core = \"core1\";\n      final String core_node = \"core_node1\";\n      final String shard = \"shard1\";\n      final int numShards = 1;\n\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n      \n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      Thread.sleep(1000);\n      mockController.createCollection(COLLECTION, 1);\n      mockController.publishState(COLLECTION, core, core_node, \"shard1\",\n          Replica.State.RECOVERING, numShards);\n      \n      waitForCollections(reader, COLLECTION);\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      int version = getClusterStateVersion(zkClient);\n      \n      mockController.publishState(COLLECTION, core, core_node, \"shard1\", Replica.State.ACTIVE,\n          numShards);\n      \n      while (version == getClusterStateVersion(zkClient));\n\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n      version = getClusterStateVersion(zkClient);\n      overseerClient.close();\n      Thread.sleep(1000); // wait for overseer to get killed\n      \n      mockController.publishState(COLLECTION, core, core_node, \"shard1\",\n          Replica.State.RECOVERING, numShards);\n      version = getClusterStateVersion(zkClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      while (version == getClusterStateVersion(zkClient));\n\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(shard+\" replica count does not match\", 1, reader.getClusterState()\n          .getCollection(COLLECTION).getSlice(shard).getReplicasMap().size());\n      version = getClusterStateVersion(zkClient);\n      mockController.publishState(COLLECTION, core, core_node, \"shard1\", null, numShards);\n      while (version == getClusterStateVersion(zkClient));\n      Thread.sleep(500);\n      assertTrue(COLLECTION +\" should remain after removal of the last core\", // as of SOLR-5209 core removal does not cascade to remove the slice and collection\n          reader.getClusterState().hasCollection(COLLECTION));\n      assertTrue(core_node+\" should be gone after publishing the null state\",\n          null == reader.getClusterState().getCollection(COLLECTION).getReplica(core_node));\n    } finally {\n      close(mockController);\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    SolrZkClient zkClient = null;\n    try {\n\n      final String core = \"core1\";\n      final String core_node = \"core_node1\";\n      final String shard = \"shard1\";\n      final int numShards = 1;\n\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n      \n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      Thread.sleep(1000);\n      mockController.createCollection(COLLECTION, 1);\n      mockController.publishState(COLLECTION, core, core_node, \"shard1\",\n          Replica.State.RECOVERING, numShards);\n      \n      waitForCollections(reader, COLLECTION);\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      int version = getClusterStateVersion(zkClient);\n      \n      mockController.publishState(COLLECTION, core, core_node, \"shard1\", Replica.State.ACTIVE,\n          numShards);\n      \n      while (version == getClusterStateVersion(zkClient));\n\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n      version = getClusterStateVersion(zkClient);\n      overseerClient.close();\n      Thread.sleep(1000); // wait for overseer to get killed\n      \n      mockController.publishState(COLLECTION, core, core_node, \"shard1\",\n          Replica.State.RECOVERING, numShards);\n      version = getClusterStateVersion(zkClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      while (version == getClusterStateVersion(zkClient));\n\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(shard+\" replica count does not match\", 1, reader.getClusterState()\n          .getSlice(COLLECTION, shard).getReplicasMap().size());\n      version = getClusterStateVersion(zkClient);\n      mockController.publishState(COLLECTION, core, core_node, \"shard1\", null, numShards);\n      while (version == getClusterStateVersion(zkClient));\n      Thread.sleep(500);\n      assertTrue(COLLECTION +\" should remain after removal of the last core\", // as of SOLR-5209 core removal does not cascade to remove the slice and collection\n          reader.getClusterState().hasCollection(COLLECTION));\n      assertTrue(core_node+\" should be gone after publishing the null state\",\n          null == reader.getClusterState().getCollection(COLLECTION).getReplica(core_node));\n    } finally {\n      close(mockController);\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","sourceNew":"  @Test\n  public void testOverseerFailure() throws Exception {\n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n\n      final String core = \"core1\";\n      final String core_node = \"core_node1\";\n      final String shard = \"shard1\";\n      final int numShards = 1;\n\n      ZkController.createClusterZkNodes(zkClient);\n      \n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\", overseers);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      mockController.createCollection(COLLECTION, 1);\n      \n      ZkController zkController = createMockZkController(server.getZkAddress(), zkClient, reader);\n      \n      mockController.publishState(COLLECTION, core, core_node, \"shard1\",\n          Replica.State.RECOVERING, numShards, true, overseers.get(0));\n      \n      waitForCollections(reader, COLLECTION);\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      int version = getClusterStateVersion(zkClient);\n      \n      mockController.publishState(COLLECTION, core, core_node, \"shard1\", Replica.State.ACTIVE,\n          numShards, true, overseers.get(0));\n      \n      while (version == getClusterStateVersion(zkClient));\n\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n      version = getClusterStateVersion(zkClient);\n      \n      mockController.publishState(COLLECTION, core, core_node, \"shard1\",\n          Replica.State.RECOVERING, numShards, true, overseers.get(0));\n      \n      overseerClient.close();\n      \n      version = getClusterStateVersion(zkClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      while (version == getClusterStateVersion(zkClient));\n\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(shard+\" replica count does not match\", 1, reader.getClusterState()\n          .getCollection(COLLECTION).getSlice(shard).getReplicasMap().size());\n      version = getClusterStateVersion(zkClient);\n      mockController.publishState(COLLECTION, core, core_node, \"shard1\", null, numShards, true, overseers.get(1));\n      while (version == getClusterStateVersion(zkClient));\n\n      assertTrue(COLLECTION +\" should remain after removal of the last core\", // as of SOLR-5209 core removal does not cascade to remove the slice and collection\n          reader.getClusterState().hasCollection(COLLECTION));\n      \n      reader.waitForState(COLLECTION, 5000,\n            TimeUnit.MILLISECONDS, (liveNodes, collectionState) -> collectionState != null && collectionState.getReplica(core_node) == null);\n      assertTrue(core_node+\" should be gone after publishing the null state\",\n          null == reader.getClusterState().getCollection(COLLECTION).getReplica(core_node));\n    } finally {\n      close(mockController);\n      close(overseerClient);\n      close(reader);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerFailure() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    SolrZkClient zkClient = null;\n    try {\n\n      final String core = \"core1\";\n      final String core_node = \"core_node1\";\n      final String shard = \"shard1\";\n      final int numShards = 1;\n\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      \n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n      \n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      Thread.sleep(1000);\n      mockController.createCollection(COLLECTION, 1);\n      mockController.publishState(COLLECTION, core, core_node, \"shard1\",\n          Replica.State.RECOVERING, numShards);\n      \n      waitForCollections(reader, COLLECTION);\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      int version = getClusterStateVersion(zkClient);\n      \n      mockController.publishState(COLLECTION, core, core_node, \"shard1\", Replica.State.ACTIVE,\n          numShards);\n      \n      while (version == getClusterStateVersion(zkClient));\n\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n      version = getClusterStateVersion(zkClient);\n      overseerClient.close();\n      Thread.sleep(1000); // wait for overseer to get killed\n      \n      mockController.publishState(COLLECTION, core, core_node, \"shard1\",\n          Replica.State.RECOVERING, numShards);\n      version = getClusterStateVersion(zkClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      while (version == getClusterStateVersion(zkClient));\n\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(shard+\" replica count does not match\", 1, reader.getClusterState()\n          .getCollection(COLLECTION).getSlice(shard).getReplicasMap().size());\n      version = getClusterStateVersion(zkClient);\n      mockController.publishState(COLLECTION, core, core_node, \"shard1\", null, numShards);\n      while (version == getClusterStateVersion(zkClient));\n      Thread.sleep(500);\n      assertTrue(COLLECTION +\" should remain after removal of the last core\", // as of SOLR-5209 core removal does not cascade to remove the slice and collection\n          reader.getClusterState().hasCollection(COLLECTION));\n      assertTrue(core_node+\" should be gone after publishing the null state\",\n          null == reader.getClusterState().getCollection(COLLECTION).getReplica(core_node));\n    } finally {\n      close(mockController);\n      close(overseerClient);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","512e034509e1a4227616f910489a995d4ad813af","d48cfd089cba66f9745d8043e8e971b60514418d","7875fce026a0a335830cfc75abc3eb009eff9a73","29f5eaf296600e1665151e7929d42a3cbe22e481","a9b4296bd51ca61b482138791478afdd0f7d3a3d","84250b785753dee996ec3f88a1ea2e941ebe7cfb","2d7e4f853b998a03d72d5b82562f9aa71ce33c44","a5093a9e893633cc091cf2f729d7863671c2b715","f4abec28b874149a7223e32cc7a01704c27790de"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","sourceNew":"  @Test\n  public void testOverseerFailure() throws Exception {\n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n\n    try {\n\n      final String core = \"core1\";\n      final String core_node = \"core_node1\";\n      final String shard = \"shard1\";\n      final int numShards = 1;\n\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", overseers);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.createCollection(COLLECTION, 1);\n\n      ZkController zkController = createMockZkController(server.getZkAddress(), zkClient, reader);\n\n      mockController.publishState(COLLECTION, core, core_node, \"shard1\",\n          Replica.State.RECOVERING, numShards, true, overseers.get(0));\n\n      waitForCollections(reader, COLLECTION);\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n\n      int version = getClusterStateVersion(zkClient);\n\n      mockController.publishState(COLLECTION, core, core_node, \"shard1\", Replica.State.ACTIVE,\n          numShards, true, overseers.get(0));\n\n      while (version == getClusterStateVersion(zkClient));\n\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n      version = getClusterStateVersion(zkClient);\n\n      mockController.publishState(COLLECTION, core, core_node, \"shard1\",\n          Replica.State.RECOVERING, numShards, true, overseers.get(0));\n\n      overseerClient.close();\n\n      version = getClusterStateVersion(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      while (version == getClusterStateVersion(zkClient));\n\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n\n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(shard+\" replica count does not match\", 1, reader.getClusterState()\n          .getCollection(COLLECTION).getSlice(shard).getReplicasMap().size());\n      version = getClusterStateVersion(zkClient);\n      mockController.publishState(COLLECTION, core, core_node, \"shard1\", null, numShards, true, overseers.get(1));\n      while (version == getClusterStateVersion(zkClient));\n\n      assertTrue(COLLECTION +\" should remain after removal of the last core\", // as of SOLR-5209 core removal does not cascade to remove the slice and collection\n          reader.getClusterState().hasCollection(COLLECTION));\n\n      reader.waitForState(COLLECTION, 5000,\n            TimeUnit.MILLISECONDS, (liveNodes, collectionState) -> collectionState != null && collectionState.getReplica(core_node) == null);\n      assertTrue(core_node+\" should be gone after publishing the null state\",\n          null == reader.getClusterState().getCollection(COLLECTION).getReplica(core_node));\n    } finally {\n      close(mockController);\n      close(overseerClient);\n      close(reader);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerFailure() throws Exception {\n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n\n      final String core = \"core1\";\n      final String core_node = \"core_node1\";\n      final String shard = \"shard1\";\n      final int numShards = 1;\n\n      ZkController.createClusterZkNodes(zkClient);\n      \n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n      \n      mockController = new MockZKController(server.getZkAddress(), \"node1\", overseers);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      mockController.createCollection(COLLECTION, 1);\n      \n      ZkController zkController = createMockZkController(server.getZkAddress(), zkClient, reader);\n      \n      mockController.publishState(COLLECTION, core, core_node, \"shard1\",\n          Replica.State.RECOVERING, numShards, true, overseers.get(0));\n      \n      waitForCollections(reader, COLLECTION);\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      int version = getClusterStateVersion(zkClient);\n      \n      mockController.publishState(COLLECTION, core, core_node, \"shard1\", Replica.State.ACTIVE,\n          numShards, true, overseers.get(0));\n      \n      while (version == getClusterStateVersion(zkClient));\n\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n      version = getClusterStateVersion(zkClient);\n      \n      mockController.publishState(COLLECTION, core, core_node, \"shard1\",\n          Replica.State.RECOVERING, numShards, true, overseers.get(0));\n      \n      overseerClient.close();\n      \n      version = getClusterStateVersion(zkClient);\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n      \n      while (version == getClusterStateVersion(zkClient));\n\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n      \n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(shard+\" replica count does not match\", 1, reader.getClusterState()\n          .getCollection(COLLECTION).getSlice(shard).getReplicasMap().size());\n      version = getClusterStateVersion(zkClient);\n      mockController.publishState(COLLECTION, core, core_node, \"shard1\", null, numShards, true, overseers.get(1));\n      while (version == getClusterStateVersion(zkClient));\n\n      assertTrue(COLLECTION +\" should remain after removal of the last core\", // as of SOLR-5209 core removal does not cascade to remove the slice and collection\n          reader.getClusterState().hasCollection(COLLECTION));\n      \n      reader.waitForState(COLLECTION, 5000,\n            TimeUnit.MILLISECONDS, (liveNodes, collectionState) -> collectionState != null && collectionState.getReplica(core_node) == null);\n      assertTrue(core_node+\" should be gone after publishing the null state\",\n          null == reader.getClusterState().getCollection(COLLECTION).getReplica(core_node));\n    } finally {\n      close(mockController);\n      close(overseerClient);\n      close(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7053dde4b7eb778402a75790c6b67907508e51fc","date":1560811334,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerFailure().mjava","sourceNew":"  @Test\n  public void testOverseerFailure() throws Exception {\n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n\n    try {\n\n      final String core = \"core1\";\n      final String core_node = \"core_node1\";\n      final String shard = \"shard1\";\n      final int numShards = 1;\n\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", overseers);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.createCollection(COLLECTION, 1);\n\n      ZkController zkController = createMockZkController(server.getZkAddress(), zkClient, reader);\n\n      mockController.publishState(COLLECTION, core, core_node, \"shard1\",\n          Replica.State.RECOVERING, numShards, true, overseers.get(0));\n\n      waitForCollections(reader, COLLECTION);\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n\n      mockController.publishState(COLLECTION, core, core_node, \"shard1\", Replica.State.ACTIVE,\n          numShards, true, overseers.get(0));\n\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n      mockController.publishState(COLLECTION, core, core_node, \"shard1\",\n          Replica.State.RECOVERING, numShards, true, overseers.get(0));\n\n      overseerClient.close();\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n\n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(shard+\" replica count does not match\", 1, reader.getClusterState()\n          .getCollection(COLLECTION).getSlice(shard).getReplicasMap().size());\n      mockController.publishState(COLLECTION, core, core_node, \"shard1\", null, numShards, true, overseers.get(1));\n\n      reader.waitForState(COLLECTION, 5000,\n            TimeUnit.MILLISECONDS, (liveNodes, collectionState) -> collectionState != null && collectionState.getReplica(core_node) == null);\n\n      reader.forceUpdateCollection(COLLECTION);\n      // as of SOLR-5209 core removal does not cascade to remove the slice and collection\n      assertTrue(COLLECTION +\" should remain after removal of the last core\", \n          reader.getClusterState().hasCollection(COLLECTION));\n      assertTrue(core_node+\" should be gone after publishing the null state\",\n          null == reader.getClusterState().getCollection(COLLECTION).getReplica(core_node));\n    } finally {\n      close(mockController);\n      close(overseerClient);\n      close(reader);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerFailure() throws Exception {\n\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n\n    try {\n\n      final String core = \"core1\";\n      final String core_node = \"core_node1\";\n      final String shard = \"shard1\";\n      final int numShards = 1;\n\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", overseers);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.createCollection(COLLECTION, 1);\n\n      ZkController zkController = createMockZkController(server.getZkAddress(), zkClient, reader);\n\n      mockController.publishState(COLLECTION, core, core_node, \"shard1\",\n          Replica.State.RECOVERING, numShards, true, overseers.get(0));\n\n      waitForCollections(reader, COLLECTION);\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n\n      int version = getClusterStateVersion(zkClient);\n\n      mockController.publishState(COLLECTION, core, core_node, \"shard1\", Replica.State.ACTIVE,\n          numShards, true, overseers.get(0));\n\n      while (version == getClusterStateVersion(zkClient));\n\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n      version = getClusterStateVersion(zkClient);\n\n      mockController.publishState(COLLECTION, core, core_node, \"shard1\",\n          Replica.State.RECOVERING, numShards, true, overseers.get(0));\n\n      overseerClient.close();\n\n      version = getClusterStateVersion(zkClient);\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      while (version == getClusterStateVersion(zkClient));\n\n      verifyReplicaStatus(reader, COLLECTION, \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n\n      assertEquals(\"Live nodes count does not match\", 1, reader\n          .getClusterState().getLiveNodes().size());\n      assertEquals(shard+\" replica count does not match\", 1, reader.getClusterState()\n          .getCollection(COLLECTION).getSlice(shard).getReplicasMap().size());\n      version = getClusterStateVersion(zkClient);\n      mockController.publishState(COLLECTION, core, core_node, \"shard1\", null, numShards, true, overseers.get(1));\n      while (version == getClusterStateVersion(zkClient));\n\n      assertTrue(COLLECTION +\" should remain after removal of the last core\", // as of SOLR-5209 core removal does not cascade to remove the slice and collection\n          reader.getClusterState().hasCollection(COLLECTION));\n\n      reader.waitForState(COLLECTION, 5000,\n            TimeUnit.MILLISECONDS, (liveNodes, collectionState) -> collectionState != null && collectionState.getReplica(core_node) == null);\n      assertTrue(core_node+\" should be gone after publishing the null state\",\n          null == reader.getClusterState().getCollection(COLLECTION).getReplica(core_node));\n    } finally {\n      close(mockController);\n      close(overseerClient);\n      close(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96ea64d994d340044e0d57aeb6a5871539d10ca5":["512e034509e1a4227616f910489a995d4ad813af","29f5eaf296600e1665151e7929d42a3cbe22e481"],"5de502b5478255493125e7e801411ba17a6682ec":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["29f5eaf296600e1665151e7929d42a3cbe22e481","1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["fa64435b5902ce266c23755a4a00691a3285dab8","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["84250b785753dee996ec3f88a1ea2e941ebe7cfb","c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"344b0840364d990b29b97467bfcc766ff8325d11":["28288370235ed02234a64753cdbf0c6ec096304a"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"d48cfd089cba66f9745d8043e8e971b60514418d":["791c4fb1ff970967cf1802cf4d4875ba12c2eb01"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["175a04d27a2b736171e7e51ca46a03b2aec094d4","04c8df3f10a676c3de5dbf390f17a2de2d45cacd"],"7053dde4b7eb778402a75790c6b67907508e51fc":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"791c4fb1ff970967cf1802cf4d4875ba12c2eb01":["8bf04c3f77a2936f29948b9c0dd215d82d43f5cf"],"a219f1dcad1700e84807666bdbd2b573e8de7021":["7875fce026a0a335830cfc75abc3eb009eff9a73"],"29f5eaf296600e1665151e7929d42a3cbe22e481":["512e034509e1a4227616f910489a995d4ad813af"],"8bf04c3f77a2936f29948b9c0dd215d82d43f5cf":["1e5f642aea415d0cbee35d1b3208b193a62d7f15"],"512e034509e1a4227616f910489a995d4ad813af":["b954d1444134ef40d3fcea752c6aaaff4e7da056"],"2d7e4f853b998a03d72d5b82562f9aa71ce33c44":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"33d0ed80b7b47e34ad3ff033a77544563aba3085":["a5093a9e893633cc091cf2f729d7863671c2b715"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["29f5eaf296600e1665151e7929d42a3cbe22e481"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"1e5f642aea415d0cbee35d1b3208b193a62d7f15":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"f4abec28b874149a7223e32cc7a01704c27790de":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"6101715a4732c1fe39eae50ce4a23fec6fc270d0":["f5d497ef5f4afb803f608c705a49782def2f7082"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["6f20fd35e3055a0c5b387df0b986a68d65d86441","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"04c8df3f10a676c3de5dbf390f17a2de2d45cacd":["175a04d27a2b736171e7e51ca46a03b2aec094d4"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["fa64435b5902ce266c23755a4a00691a3285dab8"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","344b0840364d990b29b97467bfcc766ff8325d11"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a5093a9e893633cc091cf2f729d7863671c2b715","33d0ed80b7b47e34ad3ff033a77544563aba3085"],"a5093a9e893633cc091cf2f729d7863671c2b715":["c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["33d0ed80b7b47e34ad3ff033a77544563aba3085","3f767f8c99eaedb984df754fe61f21c5de260f94"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["344b0840364d990b29b97467bfcc766ff8325d11"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":["849494cf2f3a96af5c8c84995108ddd8456fcd04","2d7e4f853b998a03d72d5b82562f9aa71ce33c44"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["f4abec28b874149a7223e32cc7a01704c27790de","7875fce026a0a335830cfc75abc3eb009eff9a73"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"84250b785753dee996ec3f88a1ea2e941ebe7cfb":["6101715a4732c1fe39eae50ce4a23fec6fc270d0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b6fdfce35d0adb18836cf8711abe487a934df33":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","f5d497ef5f4afb803f608c705a49782def2f7082"],"1e9ce820cd3ed9efb959c181daaafd22f0c70143":["bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["5de502b5478255493125e7e801411ba17a6682ec"],"410e066f093e407222d9681429d209084e783149":["0d22ac6a4146774c1bc8400160fc0b6150294e92","f5d497ef5f4afb803f608c705a49782def2f7082"],"fa64435b5902ce266c23755a4a00691a3285dab8":["3f767f8c99eaedb984df754fe61f21c5de260f94"],"175a04d27a2b736171e7e51ca46a03b2aec094d4":["d48cfd089cba66f9745d8043e8e971b60514418d"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["fe33227f6805edab2036cbb80645cc4e2d1fa424","3f767f8c99eaedb984df754fe61f21c5de260f94"],"f5d497ef5f4afb803f608c705a49782def2f7082":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"28288370235ed02234a64753cdbf0c6ec096304a":["5de502b5478255493125e7e801411ba17a6682ec","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"c51a2dcb8b4e1820a44f35f11961110201e06cdb":["84250b785753dee996ec3f88a1ea2e941ebe7cfb"],"b954d1444134ef40d3fcea752c6aaaff4e7da056":["2d7e4f853b998a03d72d5b82562f9aa71ce33c44"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["33d0ed80b7b47e34ad3ff033a77544563aba3085"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7875fce026a0a335830cfc75abc3eb009eff9a73":["f4abec28b874149a7223e32cc7a01704c27790de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7053dde4b7eb778402a75790c6b67907508e51fc"]},"commit2Childs":{"96ea64d994d340044e0d57aeb6a5871539d10ca5":[],"5de502b5478255493125e7e801411ba17a6682ec":["a9b4296bd51ca61b482138791478afdd0f7d3a3d","28288370235ed02234a64753cdbf0c6ec096304a"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["f4abec28b874149a7223e32cc7a01704c27790de"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"344b0840364d990b29b97467bfcc766ff8325d11":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["5de502b5478255493125e7e801411ba17a6682ec","6f20fd35e3055a0c5b387df0b986a68d65d86441"],"d48cfd089cba66f9745d8043e8e971b60514418d":["175a04d27a2b736171e7e51ca46a03b2aec094d4"],"7053dde4b7eb778402a75790c6b67907508e51fc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"791c4fb1ff970967cf1802cf4d4875ba12c2eb01":["d48cfd089cba66f9745d8043e8e971b60514418d"],"29f5eaf296600e1665151e7929d42a3cbe22e481":["96ea64d994d340044e0d57aeb6a5871539d10ca5","2a0f5bb79c600763ffe7b8141df59a3169d31e48","bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"a219f1dcad1700e84807666bdbd2b573e8de7021":["1e5f642aea415d0cbee35d1b3208b193a62d7f15"],"8bf04c3f77a2936f29948b9c0dd215d82d43f5cf":["791c4fb1ff970967cf1802cf4d4875ba12c2eb01"],"512e034509e1a4227616f910489a995d4ad813af":["96ea64d994d340044e0d57aeb6a5871539d10ca5","29f5eaf296600e1665151e7929d42a3cbe22e481"],"2d7e4f853b998a03d72d5b82562f9aa71ce33c44":["13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","b954d1444134ef40d3fcea752c6aaaff4e7da056"],"33d0ed80b7b47e34ad3ff033a77544563aba3085":["fe33227f6805edab2036cbb80645cc4e2d1fa424","d6f074e73200c07d54f242d3880a8da5a35ff97b","3f767f8c99eaedb984df754fe61f21c5de260f94"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["5b6fdfce35d0adb18836cf8711abe487a934df33"],"1e5f642aea415d0cbee35d1b3208b193a62d7f15":["8bf04c3f77a2936f29948b9c0dd215d82d43f5cf"],"f4abec28b874149a7223e32cc7a01704c27790de":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7875fce026a0a335830cfc75abc3eb009eff9a73"],"6101715a4732c1fe39eae50ce4a23fec6fc270d0":["84250b785753dee996ec3f88a1ea2e941ebe7cfb"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"04c8df3f10a676c3de5dbf390f17a2de2d45cacd":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["37a0f60745e53927c4c876cfe5b5a58170f0646c","2d7e4f853b998a03d72d5b82562f9aa71ce33c44","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["8fd5be977c105554c6a7b68afcdbc511439723ab"],"a5093a9e893633cc091cf2f729d7863671c2b715":["33d0ed80b7b47e34ad3ff033a77544563aba3085","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["7053dde4b7eb778402a75790c6b67907508e51fc"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":[],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["410e066f093e407222d9681429d209084e783149"],"84250b785753dee996ec3f88a1ea2e941ebe7cfb":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"1e9ce820cd3ed9efb959c181daaafd22f0c70143":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"410e066f093e407222d9681429d209084e783149":[],"fa64435b5902ce266c23755a4a00691a3285dab8":["37a0f60745e53927c4c876cfe5b5a58170f0646c","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"175a04d27a2b736171e7e51ca46a03b2aec094d4":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","04c8df3f10a676c3de5dbf390f17a2de2d45cacd"],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"f5d497ef5f4afb803f608c705a49782def2f7082":["6101715a4732c1fe39eae50ce4a23fec6fc270d0","5b6fdfce35d0adb18836cf8711abe487a934df33","410e066f093e407222d9681429d209084e783149"],"28288370235ed02234a64753cdbf0c6ec096304a":["344b0840364d990b29b97467bfcc766ff8325d11"],"c51a2dcb8b4e1820a44f35f11961110201e06cdb":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a5093a9e893633cc091cf2f729d7863671c2b715"],"b954d1444134ef40d3fcea752c6aaaff4e7da056":["512e034509e1a4227616f910489a995d4ad813af"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["d6f074e73200c07d54f242d3880a8da5a35ff97b","fa64435b5902ce266c23755a4a00691a3285dab8","8fd5be977c105554c6a7b68afcdbc511439723ab"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","f5d497ef5f4afb803f608c705a49782def2f7082"],"7875fce026a0a335830cfc75abc3eb009eff9a73":["a219f1dcad1700e84807666bdbd2b573e8de7021","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96ea64d994d340044e0d57aeb6a5871539d10ca5","37a0f60745e53927c4c876cfe5b5a58170f0646c","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","d6f074e73200c07d54f242d3880a8da5a35ff97b","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","5b6fdfce35d0adb18836cf8711abe487a934df33","410e066f093e407222d9681429d209084e783149","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}