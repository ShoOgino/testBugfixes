{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testFlushPushedDeletesByCount().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testFlushPushedDeletesByCount().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testFlushPushedDeletesByCount().mjava","sourceNew":"  // LUCENE-3340: make sure deletes that we don't apply\n  // during flush (ie are just pushed into the stream) are\n  // in fact later flushed due to their RAM usage:\n  public void testFlushPushedDeletesByCount() throws Exception {\n    Directory dir = newDirectory();\n    // Cannot use RandomIndexWriter because we don't want to\n    // ever call commit() for this test:\n    final int flushAtDelCount = atLeast(1020);\n    IndexWriter w = new IndexWriter(dir,\n                                    newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n                                    setMaxBufferedDeleteTerms(flushAtDelCount).setMaxBufferedDocs(1000).setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES).setReaderPooling(false));\n    int count = 0;\n    while(true) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", count+\"\"));\n      final Term delTerm;\n      if (count == 1010) {\n        // This is the only delete that applies\n        delTerm = new Term(\"id\", \"\"+0);\n      } else {\n        // These get buffered, taking up RAM, but delete\n        // nothing when applied:\n        delTerm = new Term(\"id\", \"x\" + count);\n      }\n      w.updateDocument(delTerm, doc);\n      // Eventually segment 0 should get a del docs:\n      // TODO: fix this test\n      if (dir.fileExists(\"_0_1.del\") || dir.fileExists(\"_0_1.liv\")) {\n        break;\n      }\n      count++;\n      if (count > flushAtDelCount) {\n        fail(\"delete's were not applied at count=\" + flushAtDelCount);\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-3340: make sure deletes that we don't apply\n  // during flush (ie are just pushed into the stream) are\n  // in fact later flushed due to their RAM usage:\n  public void testFlushPushedDeletesByCount() throws Exception {\n    Directory dir = newDirectory();\n    // Cannot use RandomIndexWriter because we don't want to\n    // ever call commit() for this test:\n    final int flushAtDelCount = atLeast(1020);\n    IndexWriter w = new IndexWriter(dir,\n                                    newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n                                    setMaxBufferedDeleteTerms(flushAtDelCount).setMaxBufferedDocs(1000).setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES).setReaderPooling(false));\n    int count = 0;\n    while(true) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", count+\"\"));\n      final Term delTerm;\n      if (count == 1010) {\n        // This is the only delete that applies\n        delTerm = new Term(\"id\", \"\"+0);\n      } else {\n        // These get buffered, taking up RAM, but delete\n        // nothing when applied:\n        delTerm = new Term(\"id\", \"x\" + count);\n      }\n      w.updateDocument(delTerm, doc);\n      // Eventually segment 0 should get a del docs:\n      // TODO: fix this test\n      if (dir.fileExists(\"_0_1.del\") || dir.fileExists(\"_0_1.liv\")) {\n        break;\n      }\n      count++;\n      if (count > flushAtDelCount) {\n        fail(\"delete's were not applied at count=\" + flushAtDelCount);\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testFlushPushedDeletesByCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testFlushPushedDeletesByCount().mjava","sourceNew":"  // LUCENE-3340: make sure deletes that we don't apply\n  // during flush (ie are just pushed into the stream) are\n  // in fact later flushed due to their RAM usage:\n  public void testFlushPushedDeletesByCount() throws Exception {\n    Directory dir = newDirectory();\n    // Cannot use RandomIndexWriter because we don't want to\n    // ever call commit() for this test:\n    final int flushAtDelCount = atLeast(1020);\n    IndexWriter w = new IndexWriter(dir,\n                                    newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n                                    setMaxBufferedDeleteTerms(flushAtDelCount).setMaxBufferedDocs(1000).setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES).setReaderPooling(false));\n    int count = 0;\n    while(true) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", count+\"\"));\n      final Term delTerm;\n      if (count == 1010) {\n        // This is the only delete that applies\n        delTerm = new Term(\"id\", \"\"+0);\n      } else {\n        // These get buffered, taking up RAM, but delete\n        // nothing when applied:\n        delTerm = new Term(\"id\", \"x\" + count);\n      }\n      w.updateDocument(delTerm, doc);\n      // Eventually segment 0 should get a del docs:\n      // TODO: fix this test\n      if (dir.fileExists(\"_0_1.del\") || dir.fileExists(\"_0_1.liv\")) {\n        break;\n      }\n      count++;\n      if (count > flushAtDelCount) {\n        fail(\"delete's were not applied at count=\" + flushAtDelCount);\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-3340: make sure deletes that we don't apply\n  // during flush (ie are just pushed into the stream) are\n  // in fact later flushed due to their RAM usage:\n  public void testFlushPushedDeletesByCount() throws Exception {\n    Directory dir = newDirectory();\n    // Cannot use RandomIndexWriter because we don't want to\n    // ever call commit() for this test:\n    final int flushAtDelCount = atLeast(1020);\n    IndexWriter w = new IndexWriter(dir,\n                                    newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n                                    setMaxBufferedDeleteTerms(flushAtDelCount).setMaxBufferedDocs(1000).setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES).setReaderPooling(false));\n    int count = 0;\n    while(true) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", count+\"\"));\n      final Term delTerm;\n      if (count == 1010) {\n        // This is the only delete that applies\n        delTerm = new Term(\"id\", \"\"+0);\n      } else {\n        // These get buffered, taking up RAM, but delete\n        // nothing when applied:\n        delTerm = new Term(\"id\", \"x\" + count);\n      }\n      w.updateDocument(delTerm, doc);\n      // Eventually segment 0 should get a del docs:\n      // TODO: fix this test\n      if (dir.fileExists(\"_0_1.del\") || dir.fileExists(\"_0_1.liv\")) {\n        break;\n      }\n      count++;\n      if (count > flushAtDelCount) {\n        fail(\"delete's were not applied at count=\" + flushAtDelCount);\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testFlushPushedDeletesByCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testFlushPushedDeletesByCount().mjava","sourceNew":"  // LUCENE-3340: make sure deletes that we don't apply\n  // during flush (ie are just pushed into the stream) are\n  // in fact later flushed due to their RAM usage:\n  public void testFlushPushedDeletesByCount() throws Exception {\n    Directory dir = newDirectory();\n    // Cannot use RandomIndexWriter because we don't want to\n    // ever call commit() for this test:\n    final int flushAtDelCount = atLeast(1020);\n    IndexWriter w = new IndexWriter(dir,\n                                    newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n                                    setMaxBufferedDeleteTerms(flushAtDelCount).setMaxBufferedDocs(1000).setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES).setReaderPooling(false));\n    int count = 0;\n    while(true) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", count+\"\", Field.Store.NO));\n      final Term delTerm;\n      if (count == 1010) {\n        // This is the only delete that applies\n        delTerm = new Term(\"id\", \"\"+0);\n      } else {\n        // These get buffered, taking up RAM, but delete\n        // nothing when applied:\n        delTerm = new Term(\"id\", \"x\" + count);\n      }\n      w.updateDocument(delTerm, doc);\n      // Eventually segment 0 should get a del docs:\n      // TODO: fix this test\n      if (dir.fileExists(\"_0_1.del\") || dir.fileExists(\"_0_1.liv\")) {\n        break;\n      }\n      count++;\n      if (count > flushAtDelCount) {\n        fail(\"delete's were not applied at count=\" + flushAtDelCount);\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-3340: make sure deletes that we don't apply\n  // during flush (ie are just pushed into the stream) are\n  // in fact later flushed due to their RAM usage:\n  public void testFlushPushedDeletesByCount() throws Exception {\n    Directory dir = newDirectory();\n    // Cannot use RandomIndexWriter because we don't want to\n    // ever call commit() for this test:\n    final int flushAtDelCount = atLeast(1020);\n    IndexWriter w = new IndexWriter(dir,\n                                    newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n                                    setMaxBufferedDeleteTerms(flushAtDelCount).setMaxBufferedDocs(1000).setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES).setReaderPooling(false));\n    int count = 0;\n    while(true) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", count+\"\"));\n      final Term delTerm;\n      if (count == 1010) {\n        // This is the only delete that applies\n        delTerm = new Term(\"id\", \"\"+0);\n      } else {\n        // These get buffered, taking up RAM, but delete\n        // nothing when applied:\n        delTerm = new Term(\"id\", \"x\" + count);\n      }\n      w.updateDocument(delTerm, doc);\n      // Eventually segment 0 should get a del docs:\n      // TODO: fix this test\n      if (dir.fileExists(\"_0_1.del\") || dir.fileExists(\"_0_1.liv\")) {\n        break;\n      }\n      count++;\n      if (count > flushAtDelCount) {\n        fail(\"delete's were not applied at count=\" + flushAtDelCount);\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd4e13d997cf4fb810398a20a299c2c5a9f6b796","date":1395594336,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testFlushPushedDeletesByCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testFlushPushedDeletesByCount().mjava","sourceNew":"  // LUCENE-3340: make sure deletes that we don't apply\n  // during flush (ie are just pushed into the stream) are\n  // in fact later flushed due to their RAM usage:\n  public void testFlushPushedDeletesByCount() throws Exception {\n    Directory dir = newDirectory();\n    // Cannot use RandomIndexWriter because we don't want to\n    // ever call commit() for this test:\n    final int flushAtDelCount = atLeast(1020);\n    IndexWriter w = new IndexWriter(dir,\n                                    newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n                                    setMaxBufferedDeleteTerms(flushAtDelCount).setMaxBufferedDocs(1000).setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES).setReaderPooling(false));\n    int count = 0;\n    while(true) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", count+\"\", Field.Store.NO));\n      final Term delTerm;\n      if (count == 1010) {\n        // This is the only delete that applies\n        delTerm = new Term(\"id\", \"\"+0);\n      } else {\n        // These get buffered, taking up RAM, but delete\n        // nothing when applied:\n        delTerm = new Term(\"id\", \"x\" + count);\n      }\n      w.updateDocument(delTerm, doc);\n      // Eventually segment 0 should get a del docs:\n      // TODO: fix this test\n      if (slowFileExists(dir, \"_0_1.del\") || slowFileExists(dir, \"_0_1.liv\")) {\n        break;\n      }\n      count++;\n      if (count > flushAtDelCount) {\n        fail(\"delete's were not applied at count=\" + flushAtDelCount);\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-3340: make sure deletes that we don't apply\n  // during flush (ie are just pushed into the stream) are\n  // in fact later flushed due to their RAM usage:\n  public void testFlushPushedDeletesByCount() throws Exception {\n    Directory dir = newDirectory();\n    // Cannot use RandomIndexWriter because we don't want to\n    // ever call commit() for this test:\n    final int flushAtDelCount = atLeast(1020);\n    IndexWriter w = new IndexWriter(dir,\n                                    newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n                                    setMaxBufferedDeleteTerms(flushAtDelCount).setMaxBufferedDocs(1000).setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES).setReaderPooling(false));\n    int count = 0;\n    while(true) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", count+\"\", Field.Store.NO));\n      final Term delTerm;\n      if (count == 1010) {\n        // This is the only delete that applies\n        delTerm = new Term(\"id\", \"\"+0);\n      } else {\n        // These get buffered, taking up RAM, but delete\n        // nothing when applied:\n        delTerm = new Term(\"id\", \"x\" + count);\n      }\n      w.updateDocument(delTerm, doc);\n      // Eventually segment 0 should get a del docs:\n      // TODO: fix this test\n      if (dir.fileExists(\"_0_1.del\") || dir.fileExists(\"_0_1.liv\")) {\n        break;\n      }\n      count++;\n      if (count > flushAtDelCount) {\n        fail(\"delete's were not applied at count=\" + flushAtDelCount);\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testFlushPushedDeletesByCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testFlushPushedDeletesByCount().mjava","sourceNew":"  // LUCENE-3340: make sure deletes that we don't apply\n  // during flush (ie are just pushed into the stream) are\n  // in fact later flushed due to their RAM usage:\n  public void testFlushPushedDeletesByCount() throws Exception {\n    Directory dir = newDirectory();\n    // Cannot use RandomIndexWriter because we don't want to\n    // ever call commit() for this test:\n    final int flushAtDelCount = atLeast(1020);\n    IndexWriter w = new IndexWriter(dir,\n                                    newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n                                    setMaxBufferedDeleteTerms(flushAtDelCount).setMaxBufferedDocs(1000).setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES).setReaderPooling(false));\n    int count = 0;\n    while(true) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", count+\"\", Field.Store.NO));\n      final Term delTerm;\n      if (count == 1010) {\n        // This is the only delete that applies\n        delTerm = new Term(\"id\", \"\"+0);\n      } else {\n        // These get buffered, taking up RAM, but delete\n        // nothing when applied:\n        delTerm = new Term(\"id\", \"x\" + count);\n      }\n      w.updateDocument(delTerm, doc);\n      // Eventually segment 0 should get a del docs:\n      // TODO: fix this test\n      if (slowFileExists(dir, \"_0_1.del\") || slowFileExists(dir, \"_0_1.liv\")) {\n        break;\n      }\n      count++;\n      if (count > flushAtDelCount) {\n        fail(\"delete's were not applied at count=\" + flushAtDelCount);\n      }\n    }\n    w.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-3340: make sure deletes that we don't apply\n  // during flush (ie are just pushed into the stream) are\n  // in fact later flushed due to their RAM usage:\n  public void testFlushPushedDeletesByCount() throws Exception {\n    Directory dir = newDirectory();\n    // Cannot use RandomIndexWriter because we don't want to\n    // ever call commit() for this test:\n    final int flushAtDelCount = atLeast(1020);\n    IndexWriter w = new IndexWriter(dir,\n                                    newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n                                    setMaxBufferedDeleteTerms(flushAtDelCount).setMaxBufferedDocs(1000).setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES).setReaderPooling(false));\n    int count = 0;\n    while(true) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", count+\"\", Field.Store.NO));\n      final Term delTerm;\n      if (count == 1010) {\n        // This is the only delete that applies\n        delTerm = new Term(\"id\", \"\"+0);\n      } else {\n        // These get buffered, taking up RAM, but delete\n        // nothing when applied:\n        delTerm = new Term(\"id\", \"x\" + count);\n      }\n      w.updateDocument(delTerm, doc);\n      // Eventually segment 0 should get a del docs:\n      // TODO: fix this test\n      if (slowFileExists(dir, \"_0_1.del\") || slowFileExists(dir, \"_0_1.liv\")) {\n        break;\n      }\n      count++;\n      if (count > flushAtDelCount) {\n        fail(\"delete's were not applied at count=\" + flushAtDelCount);\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2fb55c0777755badd3b46d8140f3d4301febed","date":1398881584,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testFlushPushedDeletesByCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testFlushPushedDeletesByCount().mjava","sourceNew":"  // LUCENE-3340: make sure deletes that we don't apply\n  // during flush (ie are just pushed into the stream) are\n  // in fact later flushed due to their RAM usage:\n  public void testFlushPushedDeletesByCount() throws Exception {\n    Directory dir = newDirectory();\n    // Cannot use RandomIndexWriter because we don't want to\n    // ever call commit() for this test:\n    final int flushAtDelCount = atLeast(1020);\n    IndexWriter w = new IndexWriter(dir,\n                                    newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n                                    setMaxBufferedDeleteTerms(flushAtDelCount).setMaxBufferedDocs(1000).setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergePolicy(NoMergePolicy.INSTANCE).setReaderPooling(false));\n    int count = 0;\n    while(true) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", count+\"\", Field.Store.NO));\n      final Term delTerm;\n      if (count == 1010) {\n        // This is the only delete that applies\n        delTerm = new Term(\"id\", \"\"+0);\n      } else {\n        // These get buffered, taking up RAM, but delete\n        // nothing when applied:\n        delTerm = new Term(\"id\", \"x\" + count);\n      }\n      w.updateDocument(delTerm, doc);\n      // Eventually segment 0 should get a del docs:\n      // TODO: fix this test\n      if (slowFileExists(dir, \"_0_1.del\") || slowFileExists(dir, \"_0_1.liv\")) {\n        break;\n      }\n      count++;\n      if (count > flushAtDelCount) {\n        fail(\"delete's were not applied at count=\" + flushAtDelCount);\n      }\n    }\n    w.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-3340: make sure deletes that we don't apply\n  // during flush (ie are just pushed into the stream) are\n  // in fact later flushed due to their RAM usage:\n  public void testFlushPushedDeletesByCount() throws Exception {\n    Directory dir = newDirectory();\n    // Cannot use RandomIndexWriter because we don't want to\n    // ever call commit() for this test:\n    final int flushAtDelCount = atLeast(1020);\n    IndexWriter w = new IndexWriter(dir,\n                                    newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n                                    setMaxBufferedDeleteTerms(flushAtDelCount).setMaxBufferedDocs(1000).setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES).setReaderPooling(false));\n    int count = 0;\n    while(true) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", count+\"\", Field.Store.NO));\n      final Term delTerm;\n      if (count == 1010) {\n        // This is the only delete that applies\n        delTerm = new Term(\"id\", \"\"+0);\n      } else {\n        // These get buffered, taking up RAM, but delete\n        // nothing when applied:\n        delTerm = new Term(\"id\", \"x\" + count);\n      }\n      w.updateDocument(delTerm, doc);\n      // Eventually segment 0 should get a del docs:\n      // TODO: fix this test\n      if (slowFileExists(dir, \"_0_1.del\") || slowFileExists(dir, \"_0_1.liv\")) {\n        break;\n      }\n      count++;\n      if (count > flushAtDelCount) {\n        fail(\"delete's were not applied at count=\" + flushAtDelCount);\n      }\n    }\n    w.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testFlushPushedDeletesByCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testFlushPushedDeletesByCount().mjava","sourceNew":"  // LUCENE-3340: make sure deletes that we don't apply\n  // during flush (ie are just pushed into the stream) are\n  // in fact later flushed due to their RAM usage:\n  public void testFlushPushedDeletesByCount() throws Exception {\n    Directory dir = newDirectory();\n    // Cannot use RandomIndexWriter because we don't want to\n    // ever call commit() for this test:\n    final int flushAtDelCount = atLeast(1020);\n    IndexWriter w = new IndexWriter(dir,\n                                    newIndexWriterConfig(new MockAnalyzer(random()))\n                                      .setMaxBufferedDeleteTerms(flushAtDelCount)\n                                      .setMaxBufferedDocs(1000)\n                                      .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n                                      .setMergePolicy(NoMergePolicy.INSTANCE)\n                                      .setReaderPooling(false));\n    int count = 0;\n    while(true) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", count+\"\", Field.Store.NO));\n      final Term delTerm;\n      if (count == 1010) {\n        // This is the only delete that applies\n        delTerm = new Term(\"id\", \"\"+0);\n      } else {\n        // These get buffered, taking up RAM, but delete\n        // nothing when applied:\n        delTerm = new Term(\"id\", \"x\" + count);\n      }\n      w.updateDocument(delTerm, doc);\n      // Eventually segment 0 should get a del docs:\n      // TODO: fix this test\n      if (slowFileExists(dir, \"_0_1.del\") || slowFileExists(dir, \"_0_1.liv\")) {\n        break;\n      }\n      count++;\n      if (count > flushAtDelCount) {\n        fail(\"delete's were not applied at count=\" + flushAtDelCount);\n      }\n    }\n    w.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-3340: make sure deletes that we don't apply\n  // during flush (ie are just pushed into the stream) are\n  // in fact later flushed due to their RAM usage:\n  public void testFlushPushedDeletesByCount() throws Exception {\n    Directory dir = newDirectory();\n    // Cannot use RandomIndexWriter because we don't want to\n    // ever call commit() for this test:\n    final int flushAtDelCount = atLeast(1020);\n    IndexWriter w = new IndexWriter(dir,\n                                    newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n                                    setMaxBufferedDeleteTerms(flushAtDelCount).setMaxBufferedDocs(1000).setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH).setMergePolicy(NoMergePolicy.INSTANCE).setReaderPooling(false));\n    int count = 0;\n    while(true) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", count+\"\", Field.Store.NO));\n      final Term delTerm;\n      if (count == 1010) {\n        // This is the only delete that applies\n        delTerm = new Term(\"id\", \"\"+0);\n      } else {\n        // These get buffered, taking up RAM, but delete\n        // nothing when applied:\n        delTerm = new Term(\"id\", \"x\" + count);\n      }\n      w.updateDocument(delTerm, doc);\n      // Eventually segment 0 should get a del docs:\n      // TODO: fix this test\n      if (slowFileExists(dir, \"_0_1.del\") || slowFileExists(dir, \"_0_1.liv\")) {\n        break;\n      }\n      count++;\n      if (count > flushAtDelCount) {\n        fail(\"delete's were not applied at count=\" + flushAtDelCount);\n      }\n    }\n    w.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testFlushPushedDeletesByCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testFlushPushedDeletesByCount().mjava","sourceNew":"  // LUCENE-3340: make sure deletes that we don't apply\n  // during flush (ie are just pushed into the stream) are\n  // in fact later flushed due to their RAM usage:\n  public void testFlushPushedDeletesByCount() throws Exception {\n    Directory dir = newDirectory();\n    // Cannot use RandomIndexWriter because we don't want to\n    // ever call commit() for this test:\n    final int flushAtDelCount = atLeast(1020);\n    IndexWriter w = new IndexWriter(dir,\n                                    newIndexWriterConfig(new MockAnalyzer(random()))\n                                      .setMaxBufferedDeleteTerms(flushAtDelCount)\n                                      .setMaxBufferedDocs(1000)\n                                      .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n                                      .setMergePolicy(NoMergePolicy.INSTANCE)\n                                      .setReaderPooling(false));\n    int count = 0;\n    while(true) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", count+\"\", Field.Store.NO));\n      final Term delTerm;\n      if (count == 1010) {\n        // This is the only delete that applies\n        delTerm = new Term(\"id\", \"\"+0);\n      } else {\n        // These get buffered, taking up RAM, but delete\n        // nothing when applied:\n        delTerm = new Term(\"id\", \"x\" + count);\n      }\n      w.updateDocument(delTerm, doc);\n      // Eventually segment 0 should get a del docs:\n      // TODO: fix this test\n      if (slowFileExists(dir, \"_0_1.del\") || slowFileExists(dir, \"_0_1.liv\")) {\n        break;\n      }\n      count++;\n      if (count > flushAtDelCount) {\n        fail(\"delete's were not applied at count=\" + flushAtDelCount);\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-3340: make sure deletes that we don't apply\n  // during flush (ie are just pushed into the stream) are\n  // in fact later flushed due to their RAM usage:\n  public void testFlushPushedDeletesByCount() throws Exception {\n    Directory dir = newDirectory();\n    // Cannot use RandomIndexWriter because we don't want to\n    // ever call commit() for this test:\n    final int flushAtDelCount = atLeast(1020);\n    IndexWriter w = new IndexWriter(dir,\n                                    newIndexWriterConfig(new MockAnalyzer(random()))\n                                      .setMaxBufferedDeleteTerms(flushAtDelCount)\n                                      .setMaxBufferedDocs(1000)\n                                      .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n                                      .setMergePolicy(NoMergePolicy.INSTANCE)\n                                      .setReaderPooling(false));\n    int count = 0;\n    while(true) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", count+\"\", Field.Store.NO));\n      final Term delTerm;\n      if (count == 1010) {\n        // This is the only delete that applies\n        delTerm = new Term(\"id\", \"\"+0);\n      } else {\n        // These get buffered, taking up RAM, but delete\n        // nothing when applied:\n        delTerm = new Term(\"id\", \"x\" + count);\n      }\n      w.updateDocument(delTerm, doc);\n      // Eventually segment 0 should get a del docs:\n      // TODO: fix this test\n      if (slowFileExists(dir, \"_0_1.del\") || slowFileExists(dir, \"_0_1.liv\")) {\n        break;\n      }\n      count++;\n      if (count > flushAtDelCount) {\n        fail(\"delete's were not applied at count=\" + flushAtDelCount);\n      }\n    }\n    w.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testFlushPushedDeletesByCount().mjava","sourceNew":null,"sourceOld":"  // LUCENE-3340: make sure deletes that we don't apply\n  // during flush (ie are just pushed into the stream) are\n  // in fact later flushed due to their RAM usage:\n  public void testFlushPushedDeletesByCount() throws Exception {\n    Directory dir = newDirectory();\n    // Cannot use RandomIndexWriter because we don't want to\n    // ever call commit() for this test:\n    final int flushAtDelCount = atLeast(1020);\n    IndexWriter w = new IndexWriter(dir,\n                                    newIndexWriterConfig(new MockAnalyzer(random()))\n                                      .setMaxBufferedDeleteTerms(flushAtDelCount)\n                                      .setMaxBufferedDocs(1000)\n                                      .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n                                      .setMergePolicy(NoMergePolicy.INSTANCE)\n                                      .setReaderPooling(false));\n    int count = 0;\n    while(true) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", count+\"\", Field.Store.NO));\n      final Term delTerm;\n      if (count == 1010) {\n        // This is the only delete that applies\n        delTerm = new Term(\"id\", \"\"+0);\n      } else {\n        // These get buffered, taking up RAM, but delete\n        // nothing when applied:\n        delTerm = new Term(\"id\", \"x\" + count);\n      }\n      w.updateDocument(delTerm, doc);\n      // Eventually segment 0 should get a del docs:\n      // TODO: fix this test\n      if (slowFileExists(dir, \"_0_1.del\") || slowFileExists(dir, \"_0_1.liv\")) {\n        break;\n      }\n      count++;\n      if (count > flushAtDelCount) {\n        fail(\"delete's were not applied at count=\" + flushAtDelCount);\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testFlushPushedDeletesByCount().mjava","sourceNew":null,"sourceOld":"  // LUCENE-3340: make sure deletes that we don't apply\n  // during flush (ie are just pushed into the stream) are\n  // in fact later flushed due to their RAM usage:\n  public void testFlushPushedDeletesByCount() throws Exception {\n    Directory dir = newDirectory();\n    // Cannot use RandomIndexWriter because we don't want to\n    // ever call commit() for this test:\n    final int flushAtDelCount = atLeast(1020);\n    IndexWriter w = new IndexWriter(dir,\n                                    newIndexWriterConfig(new MockAnalyzer(random()))\n                                      .setMaxBufferedDeleteTerms(flushAtDelCount)\n                                      .setMaxBufferedDocs(1000)\n                                      .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n                                      .setMergePolicy(NoMergePolicy.INSTANCE)\n                                      .setReaderPooling(false));\n    int count = 0;\n    while(true) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", count+\"\", Field.Store.NO));\n      final Term delTerm;\n      if (count == 1010) {\n        // This is the only delete that applies\n        delTerm = new Term(\"id\", \"\"+0);\n      } else {\n        // These get buffered, taking up RAM, but delete\n        // nothing when applied:\n        delTerm = new Term(\"id\", \"x\" + count);\n      }\n      w.updateDocument(delTerm, doc);\n      // Eventually segment 0 should get a del docs:\n      // TODO: fix this test\n      if (slowFileExists(dir, \"_0_1.del\") || slowFileExists(dir, \"_0_1.liv\")) {\n        break;\n      }\n      count++;\n      if (count > flushAtDelCount) {\n        fail(\"delete's were not applied at count=\" + flushAtDelCount);\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testFlushPushedDeletesByCount().mjava","sourceNew":null,"sourceOld":"  // LUCENE-3340: make sure deletes that we don't apply\n  // during flush (ie are just pushed into the stream) are\n  // in fact later flushed due to their RAM usage:\n  public void testFlushPushedDeletesByCount() throws Exception {\n    Directory dir = newDirectory();\n    // Cannot use RandomIndexWriter because we don't want to\n    // ever call commit() for this test:\n    final int flushAtDelCount = atLeast(1020);\n    IndexWriter w = new IndexWriter(dir,\n                                    newIndexWriterConfig(new MockAnalyzer(random()))\n                                      .setMaxBufferedDeleteTerms(flushAtDelCount)\n                                      .setMaxBufferedDocs(1000)\n                                      .setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n                                      .setMergePolicy(NoMergePolicy.INSTANCE)\n                                      .setReaderPooling(false));\n    int count = 0;\n    while(true) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", count+\"\", Field.Store.NO));\n      final Term delTerm;\n      if (count == 1010) {\n        // This is the only delete that applies\n        delTerm = new Term(\"id\", \"\"+0);\n      } else {\n        // These get buffered, taking up RAM, but delete\n        // nothing when applied:\n        delTerm = new Term(\"id\", \"x\" + count);\n      }\n      w.updateDocument(delTerm, doc);\n      // Eventually segment 0 should get a del docs:\n      // TODO: fix this test\n      if (slowFileExists(dir, \"_0_1.del\") || slowFileExists(dir, \"_0_1.liv\")) {\n        break;\n      }\n      count++;\n      if (count > flushAtDelCount) {\n        fail(\"delete's were not applied at count=\" + flushAtDelCount);\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2fb55c0777755badd3b46d8140f3d4301febed":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["7e2fb55c0777755badd3b46d8140f3d4301febed"],"cd4e13d997cf4fb810398a20a299c2c5a9f6b796":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["d0ef034a4f10871667ae75181537775ddcf8ade4","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["d0ef034a4f10871667ae75181537775ddcf8ade4","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["cd4e13d997cf4fb810398a20a299c2c5a9f6b796"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"7e2fb55c0777755badd3b46d8140f3d4301febed":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd4e13d997cf4fb810398a20a299c2c5a9f6b796":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["cd4e13d997cf4fb810398a20a299c2c5a9f6b796"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["7e2fb55c0777755badd3b46d8140f3d4301febed"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}