{"path":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest#testElection().mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest#testElection().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testElection() throws Exception {\n    \n    List<ClientThread> threads = new ArrayList<ClientThread>();\n    \n    for (int i = 0; i < 15; i++) {\n      ClientThread thread = new ClientThread(i);\n      \n      threads.add(thread);\n    }\n    \n    for (Thread thread : threads) {\n      thread.start();\n    }\n    \n    \n    while(true) { //wait for election to complete\n      int doneCount = 0;\n      for (ClientThread thread : threads) {\n        if(thread.electionDone) {\n          doneCount++;\n        }\n      }\n      if(doneCount==15) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n    \n    int leaderThread = getLeaderThread();\n    \n    // whoever the leader is, should be the n_0 seq\n    assertEquals(0, threads.get(leaderThread).seq);\n    \n    // kill n_0, 1, 3 and 4\n    ((ClientThread) seqToThread.get(0)).close();\n    \n    waitForLeader(threads, 1);\n    \n    leaderThread = getLeaderThread();\n    \n    // whoever the leader is, should be the n_1 seq\n    \n    assertEquals(1, threads.get(leaderThread).seq);\n    \n    ((ClientThread) seqToThread.get(4)).close();\n    ((ClientThread) seqToThread.get(1)).close();\n    ((ClientThread) seqToThread.get(3)).close();\n    \n    // whoever the leader is, should be the n_2 seq\n    \n    waitForLeader(threads, 2);\n    \n    leaderThread = getLeaderThread();\n    assertEquals(2, threads.get(leaderThread).seq);\n    \n    // kill n_5, 2, 6, 7, and 8\n    ((ClientThread) seqToThread.get(5)).close();\n    ((ClientThread) seqToThread.get(2)).close();\n    ((ClientThread) seqToThread.get(6)).close();\n    ((ClientThread) seqToThread.get(7)).close();\n    ((ClientThread) seqToThread.get(8)).close();\n    \n    waitForLeader(threads, 9);\n    leaderThread = getLeaderThread();\n    \n    // whoever the leader is, should be the n_9 seq\n    assertEquals(9, threads.get(leaderThread).seq);\n    \n    // cleanup any threads still running\n    for (ClientThread thread : threads) {\n      thread.close();\n      thread.interrupt();\n    }\n    \n    for (Thread thread : threads) {\n      thread.join();\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest#testElection().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testElection() throws Exception {\n    \n    List<ClientThread> threads = new ArrayList<ClientThread>();\n    \n    for (int i = 0; i < 15; i++) {\n      ClientThread thread = new ClientThread(i);\n      \n      threads.add(thread);\n    }\n    \n    for (Thread thread : threads) {\n      thread.start();\n    }\n    \n    \n    while(true) { //wait for election to complete\n      int doneCount = 0;\n      for (ClientThread thread : threads) {\n        if(thread.electionDone) {\n          doneCount++;\n        }\n      }\n      if(doneCount==15) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n    \n    int leaderThread = getLeaderThread();\n    \n    // whoever the leader is, should be the n_0 seq\n    assertEquals(0, threads.get(leaderThread).seq);\n    \n    // kill n_0, 1, 3 and 4\n    ((ClientThread) seqToThread.get(0)).close();\n    \n    waitForLeader(threads, 1);\n    \n    leaderThread = getLeaderThread();\n    \n    // whoever the leader is, should be the n_1 seq\n    \n    assertEquals(1, threads.get(leaderThread).seq);\n    \n    ((ClientThread) seqToThread.get(4)).close();\n    ((ClientThread) seqToThread.get(1)).close();\n    ((ClientThread) seqToThread.get(3)).close();\n    \n    // whoever the leader is, should be the n_2 seq\n    \n    waitForLeader(threads, 2);\n    \n    leaderThread = getLeaderThread();\n    assertEquals(2, threads.get(leaderThread).seq);\n    \n    // kill n_5, 2, 6, 7, and 8\n    ((ClientThread) seqToThread.get(5)).close();\n    ((ClientThread) seqToThread.get(2)).close();\n    ((ClientThread) seqToThread.get(6)).close();\n    ((ClientThread) seqToThread.get(7)).close();\n    ((ClientThread) seqToThread.get(8)).close();\n    \n    waitForLeader(threads, 9);\n    leaderThread = getLeaderThread();\n    \n    // whoever the leader is, should be the n_9 seq\n    assertEquals(9, threads.get(leaderThread).seq);\n    \n    // cleanup any threads still running\n    for (ClientThread thread : threads) {\n      thread.close();\n      thread.interrupt();\n    }\n    \n    for (Thread thread : threads) {\n      thread.join();\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest#testElection().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testElection() throws Exception {\n    \n    List<ClientThread> threads = new ArrayList<ClientThread>();\n    \n    for (int i = 0; i < 15; i++) {\n      ClientThread thread = new ClientThread(i);\n      \n      threads.add(thread);\n    }\n    \n    for (Thread thread : threads) {\n      thread.start();\n    }\n    \n    \n    while(true) { //wait for election to complete\n      int doneCount = 0;\n      for (ClientThread thread : threads) {\n        if(thread.electionDone) {\n          doneCount++;\n        }\n      }\n      if(doneCount==15) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n    \n    int leaderThread = getLeaderThread();\n    \n    // whoever the leader is, should be the n_0 seq\n    assertEquals(0, threads.get(leaderThread).seq);\n    \n    // kill n_0, 1, 3 and 4\n    ((ClientThread) seqToThread.get(0)).close();\n    \n    waitForLeader(threads, 1);\n    \n    leaderThread = getLeaderThread();\n    \n    // whoever the leader is, should be the n_1 seq\n    \n    assertEquals(1, threads.get(leaderThread).seq);\n    \n    ((ClientThread) seqToThread.get(4)).close();\n    ((ClientThread) seqToThread.get(1)).close();\n    ((ClientThread) seqToThread.get(3)).close();\n    \n    // whoever the leader is, should be the n_2 seq\n    \n    waitForLeader(threads, 2);\n    \n    leaderThread = getLeaderThread();\n    assertEquals(2, threads.get(leaderThread).seq);\n    \n    // kill n_5, 2, 6, 7, and 8\n    ((ClientThread) seqToThread.get(5)).close();\n    ((ClientThread) seqToThread.get(2)).close();\n    ((ClientThread) seqToThread.get(6)).close();\n    ((ClientThread) seqToThread.get(7)).close();\n    ((ClientThread) seqToThread.get(8)).close();\n    \n    waitForLeader(threads, 9);\n    leaderThread = getLeaderThread();\n    \n    // whoever the leader is, should be the n_9 seq\n    assertEquals(9, threads.get(leaderThread).seq);\n    \n    // cleanup any threads still running\n    for (ClientThread thread : threads) {\n      thread.close();\n      thread.interrupt();\n    }\n    \n    for (Thread thread : threads) {\n      thread.join();\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1764a3d38fa1de1ac5474f293b8d32da723a409e","date":1344907887,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest#testElection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest#testElection().mjava","sourceNew":"  @Test\n  public void testElection() throws Exception {\n    \n    List<ClientThread> threads = new ArrayList<ClientThread>();\n    \n    for (int i = 0; i < 15; i++) {\n      ClientThread thread = new ClientThread(i);\n      threads.add(thread);\n    }\n    try {\n      for (Thread thread : threads) {\n        thread.start();\n      }\n      \n      while (true) { // wait for election to complete\n        int doneCount = 0;\n        for (ClientThread thread : threads) {\n          if (thread.electionDone) {\n            doneCount++;\n          }\n        }\n        if (doneCount == 15) {\n          break;\n        }\n        Thread.sleep(100);\n      }\n      \n      int leaderThread = getLeaderThread();\n      \n      // whoever the leader is, should be the n_0 seq\n      assertEquals(0, threads.get(leaderThread).seq);\n      \n      // kill n_0, 1, 3 and 4\n      ((ClientThread) seqToThread.get(0)).close();\n      \n      waitForLeader(threads, 1);\n      \n      leaderThread = getLeaderThread();\n      \n      // whoever the leader is, should be the n_1 seq\n      \n      assertEquals(1, threads.get(leaderThread).seq);\n      \n      ((ClientThread) seqToThread.get(4)).close();\n      ((ClientThread) seqToThread.get(1)).close();\n      ((ClientThread) seqToThread.get(3)).close();\n      \n      // whoever the leader is, should be the n_2 seq\n      \n      waitForLeader(threads, 2);\n      \n      leaderThread = getLeaderThread();\n      assertEquals(2, threads.get(leaderThread).seq);\n      \n      // kill n_5, 2, 6, 7, and 8\n      ((ClientThread) seqToThread.get(5)).close();\n      ((ClientThread) seqToThread.get(2)).close();\n      ((ClientThread) seqToThread.get(6)).close();\n      ((ClientThread) seqToThread.get(7)).close();\n      ((ClientThread) seqToThread.get(8)).close();\n      \n      waitForLeader(threads, 9);\n      leaderThread = getLeaderThread();\n      \n      // whoever the leader is, should be the n_9 seq\n      assertEquals(9, threads.get(leaderThread).seq);\n      \n    } finally {\n      // cleanup any threads still running\n      for (ClientThread thread : threads) {\n        thread.close();\n        thread.interrupt();\n        \n      }\n      \n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n    \n  }\n\n","sourceOld":"  @Test\n  public void testElection() throws Exception {\n    \n    List<ClientThread> threads = new ArrayList<ClientThread>();\n    \n    for (int i = 0; i < 15; i++) {\n      ClientThread thread = new ClientThread(i);\n      \n      threads.add(thread);\n    }\n    \n    for (Thread thread : threads) {\n      thread.start();\n    }\n    \n    \n    while(true) { //wait for election to complete\n      int doneCount = 0;\n      for (ClientThread thread : threads) {\n        if(thread.electionDone) {\n          doneCount++;\n        }\n      }\n      if(doneCount==15) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n    \n    int leaderThread = getLeaderThread();\n    \n    // whoever the leader is, should be the n_0 seq\n    assertEquals(0, threads.get(leaderThread).seq);\n    \n    // kill n_0, 1, 3 and 4\n    ((ClientThread) seqToThread.get(0)).close();\n    \n    waitForLeader(threads, 1);\n    \n    leaderThread = getLeaderThread();\n    \n    // whoever the leader is, should be the n_1 seq\n    \n    assertEquals(1, threads.get(leaderThread).seq);\n    \n    ((ClientThread) seqToThread.get(4)).close();\n    ((ClientThread) seqToThread.get(1)).close();\n    ((ClientThread) seqToThread.get(3)).close();\n    \n    // whoever the leader is, should be the n_2 seq\n    \n    waitForLeader(threads, 2);\n    \n    leaderThread = getLeaderThread();\n    assertEquals(2, threads.get(leaderThread).seq);\n    \n    // kill n_5, 2, 6, 7, and 8\n    ((ClientThread) seqToThread.get(5)).close();\n    ((ClientThread) seqToThread.get(2)).close();\n    ((ClientThread) seqToThread.get(6)).close();\n    ((ClientThread) seqToThread.get(7)).close();\n    ((ClientThread) seqToThread.get(8)).close();\n    \n    waitForLeader(threads, 9);\n    leaderThread = getLeaderThread();\n    \n    // whoever the leader is, should be the n_9 seq\n    assertEquals(9, threads.get(leaderThread).seq);\n    \n    // cleanup any threads still running\n    for (ClientThread thread : threads) {\n      thread.close();\n      thread.interrupt();\n    }\n    \n    for (Thread thread : threads) {\n      thread.join();\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest#testElection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest#testElection().mjava","sourceNew":"  @Test\n  public void testElection() throws Exception {\n    \n    List<ClientThread> threads = new ArrayList<ClientThread>();\n    \n    for (int i = 0; i < 15; i++) {\n      ClientThread thread = new ClientThread(i);\n      threads.add(thread);\n    }\n    try {\n      for (Thread thread : threads) {\n        thread.start();\n      }\n      \n      while (true) { // wait for election to complete\n        int doneCount = 0;\n        for (ClientThread thread : threads) {\n          if (thread.electionDone) {\n            doneCount++;\n          }\n        }\n        if (doneCount == 15) {\n          break;\n        }\n        Thread.sleep(100);\n      }\n      \n      int leaderThread = getLeaderThread();\n      \n      // whoever the leader is, should be the n_0 seq\n      assertEquals(0, threads.get(leaderThread).seq);\n      \n      // kill n_0, 1, 3 and 4\n      ((ClientThread) seqToThread.get(0)).close();\n      \n      waitForLeader(threads, 1);\n      \n      leaderThread = getLeaderThread();\n      \n      // whoever the leader is, should be the n_1 seq\n      \n      assertEquals(1, threads.get(leaderThread).seq);\n      \n      ((ClientThread) seqToThread.get(4)).close();\n      ((ClientThread) seqToThread.get(1)).close();\n      ((ClientThread) seqToThread.get(3)).close();\n      \n      // whoever the leader is, should be the n_2 seq\n      \n      waitForLeader(threads, 2);\n      \n      leaderThread = getLeaderThread();\n      assertEquals(2, threads.get(leaderThread).seq);\n      \n      // kill n_5, 2, 6, 7, and 8\n      ((ClientThread) seqToThread.get(5)).close();\n      ((ClientThread) seqToThread.get(2)).close();\n      ((ClientThread) seqToThread.get(6)).close();\n      ((ClientThread) seqToThread.get(7)).close();\n      ((ClientThread) seqToThread.get(8)).close();\n      \n      waitForLeader(threads, 9);\n      leaderThread = getLeaderThread();\n      \n      // whoever the leader is, should be the n_9 seq\n      assertEquals(9, threads.get(leaderThread).seq);\n      \n    } finally {\n      // cleanup any threads still running\n      for (ClientThread thread : threads) {\n        thread.close();\n        thread.interrupt();\n        \n      }\n      \n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n    \n  }\n\n","sourceOld":"  @Test\n  public void testElection() throws Exception {\n    \n    List<ClientThread> threads = new ArrayList<ClientThread>();\n    \n    for (int i = 0; i < 15; i++) {\n      ClientThread thread = new ClientThread(i);\n      \n      threads.add(thread);\n    }\n    \n    for (Thread thread : threads) {\n      thread.start();\n    }\n    \n    \n    while(true) { //wait for election to complete\n      int doneCount = 0;\n      for (ClientThread thread : threads) {\n        if(thread.electionDone) {\n          doneCount++;\n        }\n      }\n      if(doneCount==15) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n    \n    int leaderThread = getLeaderThread();\n    \n    // whoever the leader is, should be the n_0 seq\n    assertEquals(0, threads.get(leaderThread).seq);\n    \n    // kill n_0, 1, 3 and 4\n    ((ClientThread) seqToThread.get(0)).close();\n    \n    waitForLeader(threads, 1);\n    \n    leaderThread = getLeaderThread();\n    \n    // whoever the leader is, should be the n_1 seq\n    \n    assertEquals(1, threads.get(leaderThread).seq);\n    \n    ((ClientThread) seqToThread.get(4)).close();\n    ((ClientThread) seqToThread.get(1)).close();\n    ((ClientThread) seqToThread.get(3)).close();\n    \n    // whoever the leader is, should be the n_2 seq\n    \n    waitForLeader(threads, 2);\n    \n    leaderThread = getLeaderThread();\n    assertEquals(2, threads.get(leaderThread).seq);\n    \n    // kill n_5, 2, 6, 7, and 8\n    ((ClientThread) seqToThread.get(5)).close();\n    ((ClientThread) seqToThread.get(2)).close();\n    ((ClientThread) seqToThread.get(6)).close();\n    ((ClientThread) seqToThread.get(7)).close();\n    ((ClientThread) seqToThread.get(8)).close();\n    \n    waitForLeader(threads, 9);\n    leaderThread = getLeaderThread();\n    \n    // whoever the leader is, should be the n_9 seq\n    assertEquals(9, threads.get(leaderThread).seq);\n    \n    // cleanup any threads still running\n    for (ClientThread thread : threads) {\n      thread.close();\n      thread.interrupt();\n    }\n    \n    for (Thread thread : threads) {\n      thread.join();\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest#testElection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest#testElection().mjava","sourceNew":"  @Test\n  public void testElection() throws Exception {\n    \n    List<ClientThread> threads = new ArrayList<ClientThread>();\n    \n    for (int i = 0; i < 15; i++) {\n      ClientThread thread = new ClientThread(i);\n      threads.add(thread);\n    }\n    try {\n      for (Thread thread : threads) {\n        thread.start();\n      }\n      \n      while (true) { // wait for election to complete\n        int doneCount = 0;\n        for (ClientThread thread : threads) {\n          if (thread.electionDone) {\n            doneCount++;\n          }\n        }\n        if (doneCount == 15) {\n          break;\n        }\n        Thread.sleep(100);\n      }\n      \n      int leaderThread = getLeaderThread();\n      \n      // whoever the leader is, should be the n_0 seq\n      assertEquals(0, threads.get(leaderThread).seq);\n      \n      // kill n_0, 1, 3 and 4\n      ((ClientThread) seqToThread.get(0)).close();\n      \n      waitForLeader(threads, 1);\n      \n      leaderThread = getLeaderThread();\n      \n      // whoever the leader is, should be the n_1 seq\n      \n      assertEquals(1, threads.get(leaderThread).seq);\n      \n      ((ClientThread) seqToThread.get(4)).close();\n      ((ClientThread) seqToThread.get(1)).close();\n      ((ClientThread) seqToThread.get(3)).close();\n      \n      // whoever the leader is, should be the n_2 seq\n      \n      waitForLeader(threads, 2);\n      \n      leaderThread = getLeaderThread();\n      assertEquals(2, threads.get(leaderThread).seq);\n      \n      // kill n_5, 2, 6, 7, and 8\n      ((ClientThread) seqToThread.get(5)).close();\n      ((ClientThread) seqToThread.get(2)).close();\n      ((ClientThread) seqToThread.get(6)).close();\n      ((ClientThread) seqToThread.get(7)).close();\n      ((ClientThread) seqToThread.get(8)).close();\n      \n      waitForLeader(threads, 9);\n      leaderThread = getLeaderThread();\n      \n      // whoever the leader is, should be the n_9 seq\n      assertEquals(9, threads.get(leaderThread).seq);\n      \n    } finally {\n      // cleanup any threads still running\n      for (ClientThread thread : threads) {\n        thread.close();\n        thread.interrupt();\n        \n      }\n      \n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n    \n  }\n\n","sourceOld":"  @Test\n  public void testElection() throws Exception {\n    \n    List<ClientThread> threads = new ArrayList<ClientThread>();\n    \n    for (int i = 0; i < 15; i++) {\n      ClientThread thread = new ClientThread(i);\n      \n      threads.add(thread);\n    }\n    \n    for (Thread thread : threads) {\n      thread.start();\n    }\n    \n    \n    while(true) { //wait for election to complete\n      int doneCount = 0;\n      for (ClientThread thread : threads) {\n        if(thread.electionDone) {\n          doneCount++;\n        }\n      }\n      if(doneCount==15) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n    \n    int leaderThread = getLeaderThread();\n    \n    // whoever the leader is, should be the n_0 seq\n    assertEquals(0, threads.get(leaderThread).seq);\n    \n    // kill n_0, 1, 3 and 4\n    ((ClientThread) seqToThread.get(0)).close();\n    \n    waitForLeader(threads, 1);\n    \n    leaderThread = getLeaderThread();\n    \n    // whoever the leader is, should be the n_1 seq\n    \n    assertEquals(1, threads.get(leaderThread).seq);\n    \n    ((ClientThread) seqToThread.get(4)).close();\n    ((ClientThread) seqToThread.get(1)).close();\n    ((ClientThread) seqToThread.get(3)).close();\n    \n    // whoever the leader is, should be the n_2 seq\n    \n    waitForLeader(threads, 2);\n    \n    leaderThread = getLeaderThread();\n    assertEquals(2, threads.get(leaderThread).seq);\n    \n    // kill n_5, 2, 6, 7, and 8\n    ((ClientThread) seqToThread.get(5)).close();\n    ((ClientThread) seqToThread.get(2)).close();\n    ((ClientThread) seqToThread.get(6)).close();\n    ((ClientThread) seqToThread.get(7)).close();\n    ((ClientThread) seqToThread.get(8)).close();\n    \n    waitForLeader(threads, 9);\n    leaderThread = getLeaderThread();\n    \n    // whoever the leader is, should be the n_9 seq\n    assertEquals(9, threads.get(leaderThread).seq);\n    \n    // cleanup any threads still running\n    for (ClientThread thread : threads) {\n      thread.close();\n      thread.interrupt();\n    }\n    \n    for (Thread thread : threads) {\n      thread.join();\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest#testElection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest#testElection().mjava","sourceNew":"  @Test\n  public void testElection() throws Exception {\n    \n    List<ClientThread> threads = new ArrayList<>();\n    \n    for (int i = 0; i < 15; i++) {\n      ClientThread thread = new ClientThread(i);\n      threads.add(thread);\n    }\n    try {\n      for (Thread thread : threads) {\n        thread.start();\n      }\n      \n      while (true) { // wait for election to complete\n        int doneCount = 0;\n        for (ClientThread thread : threads) {\n          if (thread.electionDone) {\n            doneCount++;\n          }\n        }\n        if (doneCount == 15) {\n          break;\n        }\n        Thread.sleep(100);\n      }\n      \n      int leaderThread = getLeaderThread();\n      \n      // whoever the leader is, should be the n_0 seq\n      assertEquals(0, threads.get(leaderThread).seq);\n      \n      // kill n_0, 1, 3 and 4\n      ((ClientThread) seqToThread.get(0)).close();\n      \n      waitForLeader(threads, 1);\n      \n      leaderThread = getLeaderThread();\n      \n      // whoever the leader is, should be the n_1 seq\n      \n      assertEquals(1, threads.get(leaderThread).seq);\n      \n      ((ClientThread) seqToThread.get(4)).close();\n      ((ClientThread) seqToThread.get(1)).close();\n      ((ClientThread) seqToThread.get(3)).close();\n      \n      // whoever the leader is, should be the n_2 seq\n      \n      waitForLeader(threads, 2);\n      \n      leaderThread = getLeaderThread();\n      assertEquals(2, threads.get(leaderThread).seq);\n      \n      // kill n_5, 2, 6, 7, and 8\n      ((ClientThread) seqToThread.get(5)).close();\n      ((ClientThread) seqToThread.get(2)).close();\n      ((ClientThread) seqToThread.get(6)).close();\n      ((ClientThread) seqToThread.get(7)).close();\n      ((ClientThread) seqToThread.get(8)).close();\n      \n      waitForLeader(threads, 9);\n      leaderThread = getLeaderThread();\n      \n      // whoever the leader is, should be the n_9 seq\n      assertEquals(9, threads.get(leaderThread).seq);\n      \n    } finally {\n      // cleanup any threads still running\n      for (ClientThread thread : threads) {\n        thread.close();\n        thread.interrupt();\n        \n      }\n      \n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n    \n  }\n\n","sourceOld":"  @Test\n  public void testElection() throws Exception {\n    \n    List<ClientThread> threads = new ArrayList<ClientThread>();\n    \n    for (int i = 0; i < 15; i++) {\n      ClientThread thread = new ClientThread(i);\n      threads.add(thread);\n    }\n    try {\n      for (Thread thread : threads) {\n        thread.start();\n      }\n      \n      while (true) { // wait for election to complete\n        int doneCount = 0;\n        for (ClientThread thread : threads) {\n          if (thread.electionDone) {\n            doneCount++;\n          }\n        }\n        if (doneCount == 15) {\n          break;\n        }\n        Thread.sleep(100);\n      }\n      \n      int leaderThread = getLeaderThread();\n      \n      // whoever the leader is, should be the n_0 seq\n      assertEquals(0, threads.get(leaderThread).seq);\n      \n      // kill n_0, 1, 3 and 4\n      ((ClientThread) seqToThread.get(0)).close();\n      \n      waitForLeader(threads, 1);\n      \n      leaderThread = getLeaderThread();\n      \n      // whoever the leader is, should be the n_1 seq\n      \n      assertEquals(1, threads.get(leaderThread).seq);\n      \n      ((ClientThread) seqToThread.get(4)).close();\n      ((ClientThread) seqToThread.get(1)).close();\n      ((ClientThread) seqToThread.get(3)).close();\n      \n      // whoever the leader is, should be the n_2 seq\n      \n      waitForLeader(threads, 2);\n      \n      leaderThread = getLeaderThread();\n      assertEquals(2, threads.get(leaderThread).seq);\n      \n      // kill n_5, 2, 6, 7, and 8\n      ((ClientThread) seqToThread.get(5)).close();\n      ((ClientThread) seqToThread.get(2)).close();\n      ((ClientThread) seqToThread.get(6)).close();\n      ((ClientThread) seqToThread.get(7)).close();\n      ((ClientThread) seqToThread.get(8)).close();\n      \n      waitForLeader(threads, 9);\n      leaderThread = getLeaderThread();\n      \n      // whoever the leader is, should be the n_9 seq\n      assertEquals(9, threads.get(leaderThread).seq);\n      \n    } finally {\n      // cleanup any threads still running\n      for (ClientThread thread : threads) {\n        thread.close();\n        thread.interrupt();\n        \n      }\n      \n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8650ae4e5d74a324411f8b7dd6201774f2b6fb2e","date":1406603075,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest#testElection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest#testElection().mjava","sourceNew":"  @Test\n  public void testElection() throws Exception {\n    \n    List<ClientThread> threads = new ArrayList<>();\n    \n    for (int i = 0; i < 15; i++) {\n      ClientThread thread = new ClientThread(\"shard1\", i);\n      threads.add(thread);\n    }\n    try {\n      startAndJoinElection(threads);\n      \n      int leaderThread = getLeaderThread();\n      \n      // whoever the leader is, should be the n_0 seq\n      assertEquals(0, threads.get(leaderThread).seq);\n      \n      // kill n_0, 1, 3 and 4\n      ((ClientThread) seqToThread.get(0)).close();\n      \n      waitForLeader(threads, 1);\n      \n      leaderThread = getLeaderThread();\n      \n      // whoever the leader is, should be the n_1 seq\n      \n      assertEquals(1, threads.get(leaderThread).seq);\n      \n      ((ClientThread) seqToThread.get(4)).close();\n      ((ClientThread) seqToThread.get(1)).close();\n      ((ClientThread) seqToThread.get(3)).close();\n      \n      // whoever the leader is, should be the n_2 seq\n      \n      waitForLeader(threads, 2);\n      \n      leaderThread = getLeaderThread();\n      assertEquals(2, threads.get(leaderThread).seq);\n      \n      // kill n_5, 2, 6, 7, and 8\n      ((ClientThread) seqToThread.get(5)).close();\n      ((ClientThread) seqToThread.get(2)).close();\n      ((ClientThread) seqToThread.get(6)).close();\n      ((ClientThread) seqToThread.get(7)).close();\n      ((ClientThread) seqToThread.get(8)).close();\n      \n      waitForLeader(threads, 9);\n      leaderThread = getLeaderThread();\n      \n      // whoever the leader is, should be the n_9 seq\n      assertEquals(9, threads.get(leaderThread).seq);\n      \n    } finally {\n      // cleanup any threads still running\n      for (ClientThread thread : threads) {\n        thread.close();\n        thread.interrupt();\n        \n      }\n      \n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n    \n  }\n\n","sourceOld":"  @Test\n  public void testElection() throws Exception {\n    \n    List<ClientThread> threads = new ArrayList<>();\n    \n    for (int i = 0; i < 15; i++) {\n      ClientThread thread = new ClientThread(i);\n      threads.add(thread);\n    }\n    try {\n      for (Thread thread : threads) {\n        thread.start();\n      }\n      \n      while (true) { // wait for election to complete\n        int doneCount = 0;\n        for (ClientThread thread : threads) {\n          if (thread.electionDone) {\n            doneCount++;\n          }\n        }\n        if (doneCount == 15) {\n          break;\n        }\n        Thread.sleep(100);\n      }\n      \n      int leaderThread = getLeaderThread();\n      \n      // whoever the leader is, should be the n_0 seq\n      assertEquals(0, threads.get(leaderThread).seq);\n      \n      // kill n_0, 1, 3 and 4\n      ((ClientThread) seqToThread.get(0)).close();\n      \n      waitForLeader(threads, 1);\n      \n      leaderThread = getLeaderThread();\n      \n      // whoever the leader is, should be the n_1 seq\n      \n      assertEquals(1, threads.get(leaderThread).seq);\n      \n      ((ClientThread) seqToThread.get(4)).close();\n      ((ClientThread) seqToThread.get(1)).close();\n      ((ClientThread) seqToThread.get(3)).close();\n      \n      // whoever the leader is, should be the n_2 seq\n      \n      waitForLeader(threads, 2);\n      \n      leaderThread = getLeaderThread();\n      assertEquals(2, threads.get(leaderThread).seq);\n      \n      // kill n_5, 2, 6, 7, and 8\n      ((ClientThread) seqToThread.get(5)).close();\n      ((ClientThread) seqToThread.get(2)).close();\n      ((ClientThread) seqToThread.get(6)).close();\n      ((ClientThread) seqToThread.get(7)).close();\n      ((ClientThread) seqToThread.get(8)).close();\n      \n      waitForLeader(threads, 9);\n      leaderThread = getLeaderThread();\n      \n      // whoever the leader is, should be the n_9 seq\n      assertEquals(9, threads.get(leaderThread).seq);\n      \n    } finally {\n      // cleanup any threads still running\n      for (ClientThread thread : threads) {\n        thread.close();\n        thread.interrupt();\n        \n      }\n      \n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest#testElection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest#testElection().mjava","sourceNew":"  @Test\n  public void testElection() throws Exception {\n    \n    List<ClientThread> threads = new ArrayList<>();\n    \n    for (int i = 0; i < 15; i++) {\n      ClientThread thread = new ClientThread(\"shard1\", i);\n      threads.add(thread);\n    }\n    try {\n      startAndJoinElection(threads);\n      \n      int leaderThread = getLeaderThread();\n      \n      // whoever the leader is, should be the n_0 seq\n      assertEquals(0, threads.get(leaderThread).seq);\n\n      // kill n_0, 1, 3 and 4\n      ((ClientThread) seqToThread.get(0)).close();\n      \n      waitForLeader(threads, 1);\n      \n      leaderThread = getLeaderThread();\n      \n      // whoever the leader is, should be the n_1 seq\n      \n      assertEquals(1, threads.get(leaderThread).seq);\n      \n      ((ClientThread) seqToThread.get(4)).close();\n      ((ClientThread) seqToThread.get(1)).close();\n      ((ClientThread) seqToThread.get(3)).close();\n      \n      // whoever the leader is, should be the n_2 seq\n      \n      waitForLeader(threads, 2);\n      \n      leaderThread = getLeaderThread();\n      assertEquals(2, threads.get(leaderThread).seq);\n      \n      // kill n_5, 2, 6, 7, and 8\n      ((ClientThread) seqToThread.get(5)).close();\n      ((ClientThread) seqToThread.get(2)).close();\n      ((ClientThread) seqToThread.get(6)).close();\n      ((ClientThread) seqToThread.get(7)).close();\n      ((ClientThread) seqToThread.get(8)).close();\n      \n      waitForLeader(threads, 9);\n      leaderThread = getLeaderThread();\n      \n      // whoever the leader is, should be the n_9 seq\n      assertEquals(9, threads.get(leaderThread).seq);\n      \n    } finally {\n      // cleanup any threads still running\n      for (ClientThread thread : threads) {\n        thread.close();\n        thread.interrupt();\n        \n      }\n      \n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n    \n  }\n\n","sourceOld":"  @Test\n  public void testElection() throws Exception {\n    \n    List<ClientThread> threads = new ArrayList<>();\n    \n    for (int i = 0; i < 15; i++) {\n      ClientThread thread = new ClientThread(\"shard1\", i);\n      threads.add(thread);\n    }\n    try {\n      startAndJoinElection(threads);\n      \n      int leaderThread = getLeaderThread();\n      \n      // whoever the leader is, should be the n_0 seq\n      assertEquals(0, threads.get(leaderThread).seq);\n      \n      // kill n_0, 1, 3 and 4\n      ((ClientThread) seqToThread.get(0)).close();\n      \n      waitForLeader(threads, 1);\n      \n      leaderThread = getLeaderThread();\n      \n      // whoever the leader is, should be the n_1 seq\n      \n      assertEquals(1, threads.get(leaderThread).seq);\n      \n      ((ClientThread) seqToThread.get(4)).close();\n      ((ClientThread) seqToThread.get(1)).close();\n      ((ClientThread) seqToThread.get(3)).close();\n      \n      // whoever the leader is, should be the n_2 seq\n      \n      waitForLeader(threads, 2);\n      \n      leaderThread = getLeaderThread();\n      assertEquals(2, threads.get(leaderThread).seq);\n      \n      // kill n_5, 2, 6, 7, and 8\n      ((ClientThread) seqToThread.get(5)).close();\n      ((ClientThread) seqToThread.get(2)).close();\n      ((ClientThread) seqToThread.get(6)).close();\n      ((ClientThread) seqToThread.get(7)).close();\n      ((ClientThread) seqToThread.get(8)).close();\n      \n      waitForLeader(threads, 9);\n      leaderThread = getLeaderThread();\n      \n      // whoever the leader is, should be the n_9 seq\n      assertEquals(9, threads.get(leaderThread).seq);\n      \n    } finally {\n      // cleanup any threads still running\n      for (ClientThread thread : threads) {\n        thread.close();\n        thread.interrupt();\n        \n      }\n      \n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n    \n  }\n\n","bugFix":["1764a3d38fa1de1ac5474f293b8d32da723a409e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest#testElection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionTest#testElection().mjava","sourceNew":"  @Test\n  public void testElection() throws Exception {\n\n    List<ClientThread> threads = new ArrayList<>();\n\n    for (int i = 0; i < 15; i++) {\n      ClientThread thread = new ClientThread(\"shard1\", i);\n      threads.add(thread);\n    }\n    try {\n      startAndJoinElection(threads);\n\n      int leaderThread = getLeaderThread();\n\n      // whoever the leader is, should be the n_0 seq\n      assertEquals(0, threads.get(leaderThread).seq);\n\n      // kill n_0, 1, 3 and 4\n      ((ClientThread) seqToThread.get(0)).close();\n\n      waitForLeader(threads, 1);\n\n      leaderThread = getLeaderThread();\n\n      // whoever the leader is, should be the n_1 seq\n\n      assertEquals(1, threads.get(leaderThread).seq);\n\n      ((ClientThread) seqToThread.get(4)).close();\n      ((ClientThread) seqToThread.get(1)).close();\n      ((ClientThread) seqToThread.get(3)).close();\n\n      // whoever the leader is, should be the n_2 seq\n\n      waitForLeader(threads, 2);\n\n      leaderThread = getLeaderThread();\n      assertEquals(2, threads.get(leaderThread).seq);\n\n      // kill n_5, 2, 6, 7, and 8\n      ((ClientThread) seqToThread.get(5)).close();\n      ((ClientThread) seqToThread.get(2)).close();\n      ((ClientThread) seqToThread.get(6)).close();\n      ((ClientThread) seqToThread.get(7)).close();\n      ((ClientThread) seqToThread.get(8)).close();\n\n      waitForLeader(threads, 9);\n      leaderThread = getLeaderThread();\n\n      // whoever the leader is, should be the n_9 seq\n      assertEquals(9, threads.get(leaderThread).seq);\n\n    } finally {\n      // cleanup any threads still running\n      for (ClientThread thread : threads) {\n        thread.close();\n        thread.interrupt();\n\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testElection() throws Exception {\n    \n    List<ClientThread> threads = new ArrayList<>();\n    \n    for (int i = 0; i < 15; i++) {\n      ClientThread thread = new ClientThread(\"shard1\", i);\n      threads.add(thread);\n    }\n    try {\n      startAndJoinElection(threads);\n      \n      int leaderThread = getLeaderThread();\n      \n      // whoever the leader is, should be the n_0 seq\n      assertEquals(0, threads.get(leaderThread).seq);\n\n      // kill n_0, 1, 3 and 4\n      ((ClientThread) seqToThread.get(0)).close();\n      \n      waitForLeader(threads, 1);\n      \n      leaderThread = getLeaderThread();\n      \n      // whoever the leader is, should be the n_1 seq\n      \n      assertEquals(1, threads.get(leaderThread).seq);\n      \n      ((ClientThread) seqToThread.get(4)).close();\n      ((ClientThread) seqToThread.get(1)).close();\n      ((ClientThread) seqToThread.get(3)).close();\n      \n      // whoever the leader is, should be the n_2 seq\n      \n      waitForLeader(threads, 2);\n      \n      leaderThread = getLeaderThread();\n      assertEquals(2, threads.get(leaderThread).seq);\n      \n      // kill n_5, 2, 6, 7, and 8\n      ((ClientThread) seqToThread.get(5)).close();\n      ((ClientThread) seqToThread.get(2)).close();\n      ((ClientThread) seqToThread.get(6)).close();\n      ((ClientThread) seqToThread.get(7)).close();\n      ((ClientThread) seqToThread.get(8)).close();\n      \n      waitForLeader(threads, 9);\n      leaderThread = getLeaderThread();\n      \n      // whoever the leader is, should be the n_9 seq\n      assertEquals(9, threads.get(leaderThread).seq);\n      \n    } finally {\n      // cleanup any threads still running\n      for (ClientThread thread : threads) {\n        thread.close();\n        thread.interrupt();\n        \n      }\n      \n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["1764a3d38fa1de1ac5474f293b8d32da723a409e"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["8650ae4e5d74a324411f8b7dd6201774f2b6fb2e"],"8650ae4e5d74a324411f8b7dd6201774f2b6fb2e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","1764a3d38fa1de1ac5474f293b8d32da723a409e"],"1764a3d38fa1de1ac5474f293b8d32da723a409e":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","1764a3d38fa1de1ac5474f293b8d32da723a409e"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["8650ae4e5d74a324411f8b7dd6201774f2b6fb2e"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"8650ae4e5d74a324411f8b7dd6201774f2b6fb2e":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"1764a3d38fa1de1ac5474f293b8d32da723a409e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","b05c56a41b733e02a189c48895922b5bd8c7f3d1","1764a3d38fa1de1ac5474f293b8d32da723a409e","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","b05c56a41b733e02a189c48895922b5bd8c7f3d1","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}