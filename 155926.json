{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testUTF16Surrogates().mjava","commits":[{"id":"b55235ffc28246ab5c4e1d88861a41654043261f","date":1327304198,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testUTF16Surrogates().mjava","pathOld":"/dev/null","sourceNew":"  public void testUTF16Surrogates() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new HTMLStripCharFilter(CharReader.get(new BufferedReader(reader)));\n      }\n    };\n    // Paired surrogates\n    assertAnalyzesTo(analyzer, \" one two &#xD86C;&#XdC01;three\",\n        new String[] { \"one\", \"two\", \"\\uD86C\\uDC01three\" } );\n    assertAnalyzesTo(analyzer, \" &#55404;&#XdC01;\", new String[] { \"\\uD86C\\uDC01\" } );\n    assertAnalyzesTo(analyzer, \" &#xD86C;&#56321;\", new String[] { \"\\uD86C\\uDC01\" } );\n    assertAnalyzesTo(analyzer, \" &#55404;&#56321;\", new String[] { \"\\uD86C\\uDC01\" } );\n\n    // Improperly paired surrogates\n    assertAnalyzesTo(analyzer, \" &#55404;&#57999;\", new String[] { \"\\uFFFD\\uE28F\" } );\n    assertAnalyzesTo(analyzer, \" &#xD86C;&#57999;\", new String[] { \"\\uFFFD\\uE28F\" } );\n    assertAnalyzesTo(analyzer, \" &#55002;&#XdC01;\", new String[] { \"\\uD6DA\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#55002;&#56321;\", new String[] { \"\\uD6DA\\uFFFD\" } );\n\n    // Unpaired high surrogates\n    assertAnalyzesTo(analyzer, \" &#Xd921;\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#Xd921\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#Xd921<br>\", new String[] { \"&#Xd921\" } );\n    assertAnalyzesTo(analyzer, \" &#55528;\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#55528\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#55528<br>\", new String[] { \"&#55528\" } );\n\n    // Unpaired low surrogates\n    assertAnalyzesTo(analyzer, \" &#xdfdb;\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#xdfdb\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#xdfdb<br>\", new String[] { \"&#xdfdb\" } );\n    assertAnalyzesTo(analyzer, \" &#57209;\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#57209\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#57209<br>\", new String[] { \"&#57209\" } );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a89676536a5d3e2e875a9eed6b3f22a63cca643","date":1327356915,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testUTF16Surrogates().mjava","pathOld":"/dev/null","sourceNew":"  public void testUTF16Surrogates() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new HTMLStripCharFilter(CharReader.get(new BufferedReader(reader)));\n      }\n    };\n    // Paired surrogates\n    assertAnalyzesTo(analyzer, \" one two &#xD86C;&#XdC01;three\",\n        new String[] { \"one\", \"two\", \"\\uD86C\\uDC01three\" } );\n    assertAnalyzesTo(analyzer, \" &#55404;&#XdC01;\", new String[] { \"\\uD86C\\uDC01\" } );\n    assertAnalyzesTo(analyzer, \" &#xD86C;&#56321;\", new String[] { \"\\uD86C\\uDC01\" } );\n    assertAnalyzesTo(analyzer, \" &#55404;&#56321;\", new String[] { \"\\uD86C\\uDC01\" } );\n\n    // Improperly paired surrogates\n    assertAnalyzesTo(analyzer, \" &#55404;&#57999;\", new String[] { \"\\uFFFD\\uE28F\" } );\n    assertAnalyzesTo(analyzer, \" &#xD86C;&#57999;\", new String[] { \"\\uFFFD\\uE28F\" } );\n    assertAnalyzesTo(analyzer, \" &#55002;&#XdC01;\", new String[] { \"\\uD6DA\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#55002;&#56321;\", new String[] { \"\\uD6DA\\uFFFD\" } );\n\n    // Unpaired high surrogates\n    assertAnalyzesTo(analyzer, \" &#Xd921;\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#Xd921\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#Xd921<br>\", new String[] { \"&#Xd921\" } );\n    assertAnalyzesTo(analyzer, \" &#55528;\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#55528\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#55528<br>\", new String[] { \"&#55528\" } );\n\n    // Unpaired low surrogates\n    assertAnalyzesTo(analyzer, \" &#xdfdb;\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#xdfdb\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#xdfdb<br>\", new String[] { \"&#xdfdb\" } );\n    assertAnalyzesTo(analyzer, \" &#57209;\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#57209\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#57209<br>\", new String[] { \"&#57209\" } );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testUTF16Surrogates().mjava","pathOld":"/dev/null","sourceNew":"  public void testUTF16Surrogates() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new HTMLStripCharFilter(CharReader.get(new BufferedReader(reader)));\n      }\n    };\n    // Paired surrogates\n    assertAnalyzesTo(analyzer, \" one two &#xD86C;&#XdC01;three\",\n        new String[] { \"one\", \"two\", \"\\uD86C\\uDC01three\" } );\n    assertAnalyzesTo(analyzer, \" &#55404;&#XdC01;\", new String[] { \"\\uD86C\\uDC01\" } );\n    assertAnalyzesTo(analyzer, \" &#xD86C;&#56321;\", new String[] { \"\\uD86C\\uDC01\" } );\n    assertAnalyzesTo(analyzer, \" &#55404;&#56321;\", new String[] { \"\\uD86C\\uDC01\" } );\n\n    // Improperly paired surrogates\n    assertAnalyzesTo(analyzer, \" &#55404;&#57999;\", new String[] { \"\\uFFFD\\uE28F\" } );\n    assertAnalyzesTo(analyzer, \" &#xD86C;&#57999;\", new String[] { \"\\uFFFD\\uE28F\" } );\n    assertAnalyzesTo(analyzer, \" &#55002;&#XdC01;\", new String[] { \"\\uD6DA\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#55002;&#56321;\", new String[] { \"\\uD6DA\\uFFFD\" } );\n\n    // Unpaired high surrogates\n    assertAnalyzesTo(analyzer, \" &#Xd921;\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#Xd921\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#Xd921<br>\", new String[] { \"&#Xd921\" } );\n    assertAnalyzesTo(analyzer, \" &#55528;\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#55528\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#55528<br>\", new String[] { \"&#55528\" } );\n\n    // Unpaired low surrogates\n    assertAnalyzesTo(analyzer, \" &#xdfdb;\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#xdfdb\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#xdfdb<br>\", new String[] { \"&#xdfdb\" } );\n    assertAnalyzesTo(analyzer, \" &#57209;\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#57209\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#57209<br>\", new String[] { \"&#57209\" } );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d6adf8ea59977891966389011f3905e09932183","date":1332622471,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testUTF16Surrogates().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testUTF16Surrogates().mjava","sourceNew":"  public void testUTF16Surrogates() throws Exception {\n    Analyzer analyzer = newTestAnalyzer();\n    // Paired surrogates\n    assertAnalyzesTo(analyzer, \" one two &#xD86C;&#XdC01;three\",\n        new String[] { \"one\", \"two\", \"\\uD86C\\uDC01three\" } );\n    assertAnalyzesTo(analyzer, \" &#55404;&#XdC01;\", new String[] { \"\\uD86C\\uDC01\" } );\n    assertAnalyzesTo(analyzer, \" &#xD86C;&#56321;\", new String[] { \"\\uD86C\\uDC01\" } );\n    assertAnalyzesTo(analyzer, \" &#55404;&#56321;\", new String[] { \"\\uD86C\\uDC01\" } );\n\n    // Improperly paired surrogates\n    assertAnalyzesTo(analyzer, \" &#55404;&#57999;\", new String[] { \"\\uFFFD\\uE28F\" } );\n    assertAnalyzesTo(analyzer, \" &#xD86C;&#57999;\", new String[] { \"\\uFFFD\\uE28F\" } );\n    assertAnalyzesTo(analyzer, \" &#55002;&#XdC01;\", new String[] { \"\\uD6DA\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#55002;&#56321;\", new String[] { \"\\uD6DA\\uFFFD\" } );\n\n    // Unpaired high surrogates\n    assertAnalyzesTo(analyzer, \" &#Xd921;\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#Xd921\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#Xd921<br>\", new String[] { \"&#Xd921\" } );\n    assertAnalyzesTo(analyzer, \" &#55528;\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#55528\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#55528<br>\", new String[] { \"&#55528\" } );\n\n    // Unpaired low surrogates\n    assertAnalyzesTo(analyzer, \" &#xdfdb;\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#xdfdb\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#xdfdb<br>\", new String[] { \"&#xdfdb\" } );\n    assertAnalyzesTo(analyzer, \" &#57209;\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#57209\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#57209<br>\", new String[] { \"&#57209\" } );\n  }\n\n","sourceOld":"  public void testUTF16Surrogates() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new HTMLStripCharFilter(CharReader.get(new BufferedReader(reader)));\n      }\n    };\n    // Paired surrogates\n    assertAnalyzesTo(analyzer, \" one two &#xD86C;&#XdC01;three\",\n        new String[] { \"one\", \"two\", \"\\uD86C\\uDC01three\" } );\n    assertAnalyzesTo(analyzer, \" &#55404;&#XdC01;\", new String[] { \"\\uD86C\\uDC01\" } );\n    assertAnalyzesTo(analyzer, \" &#xD86C;&#56321;\", new String[] { \"\\uD86C\\uDC01\" } );\n    assertAnalyzesTo(analyzer, \" &#55404;&#56321;\", new String[] { \"\\uD86C\\uDC01\" } );\n\n    // Improperly paired surrogates\n    assertAnalyzesTo(analyzer, \" &#55404;&#57999;\", new String[] { \"\\uFFFD\\uE28F\" } );\n    assertAnalyzesTo(analyzer, \" &#xD86C;&#57999;\", new String[] { \"\\uFFFD\\uE28F\" } );\n    assertAnalyzesTo(analyzer, \" &#55002;&#XdC01;\", new String[] { \"\\uD6DA\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#55002;&#56321;\", new String[] { \"\\uD6DA\\uFFFD\" } );\n\n    // Unpaired high surrogates\n    assertAnalyzesTo(analyzer, \" &#Xd921;\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#Xd921\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#Xd921<br>\", new String[] { \"&#Xd921\" } );\n    assertAnalyzesTo(analyzer, \" &#55528;\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#55528\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#55528<br>\", new String[] { \"&#55528\" } );\n\n    // Unpaired low surrogates\n    assertAnalyzesTo(analyzer, \" &#xdfdb;\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#xdfdb\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#xdfdb<br>\", new String[] { \"&#xdfdb\" } );\n    assertAnalyzesTo(analyzer, \" &#57209;\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#57209\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#57209<br>\", new String[] { \"&#57209\" } );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testUTF16Surrogates().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testUTF16Surrogates().mjava","sourceNew":"  public void testUTF16Surrogates() throws Exception {\n    Analyzer analyzer = newTestAnalyzer();\n    // Paired surrogates\n    assertAnalyzesTo(analyzer, \" one two &#xD86C;&#XdC01;three\",\n        new String[] { \"one\", \"two\", \"\\uD86C\\uDC01three\" } );\n    assertAnalyzesTo(analyzer, \" &#55404;&#XdC01;\", new String[] { \"\\uD86C\\uDC01\" } );\n    assertAnalyzesTo(analyzer, \" &#xD86C;&#56321;\", new String[] { \"\\uD86C\\uDC01\" } );\n    assertAnalyzesTo(analyzer, \" &#55404;&#56321;\", new String[] { \"\\uD86C\\uDC01\" } );\n\n    // Improperly paired surrogates\n    assertAnalyzesTo(analyzer, \" &#55404;&#57999;\", new String[] { \"\\uFFFD\\uE28F\" } );\n    assertAnalyzesTo(analyzer, \" &#xD86C;&#57999;\", new String[] { \"\\uFFFD\\uE28F\" } );\n    assertAnalyzesTo(analyzer, \" &#55002;&#XdC01;\", new String[] { \"\\uD6DA\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#55002;&#56321;\", new String[] { \"\\uD6DA\\uFFFD\" } );\n\n    // Unpaired high surrogates\n    assertAnalyzesTo(analyzer, \" &#Xd921;\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#Xd921\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#Xd921<br>\", new String[] { \"&#Xd921\" } );\n    assertAnalyzesTo(analyzer, \" &#55528;\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#55528\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#55528<br>\", new String[] { \"&#55528\" } );\n\n    // Unpaired low surrogates\n    assertAnalyzesTo(analyzer, \" &#xdfdb;\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#xdfdb\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#xdfdb<br>\", new String[] { \"&#xdfdb\" } );\n    assertAnalyzesTo(analyzer, \" &#57209;\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#57209\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#57209<br>\", new String[] { \"&#57209\" } );\n  }\n\n","sourceOld":"  public void testUTF16Surrogates() throws Exception {\n    Analyzer analyzer = newTestAnalyzer();\n    // Paired surrogates\n    assertAnalyzesTo(analyzer, \" one two &#xD86C;&#XdC01;three\",\n        new String[] { \"one\", \"two\", \"\\uD86C\\uDC01three\" } );\n    assertAnalyzesTo(analyzer, \" &#55404;&#XdC01;\", new String[] { \"\\uD86C\\uDC01\" } );\n    assertAnalyzesTo(analyzer, \" &#xD86C;&#56321;\", new String[] { \"\\uD86C\\uDC01\" } );\n    assertAnalyzesTo(analyzer, \" &#55404;&#56321;\", new String[] { \"\\uD86C\\uDC01\" } );\n\n    // Improperly paired surrogates\n    assertAnalyzesTo(analyzer, \" &#55404;&#57999;\", new String[] { \"\\uFFFD\\uE28F\" } );\n    assertAnalyzesTo(analyzer, \" &#xD86C;&#57999;\", new String[] { \"\\uFFFD\\uE28F\" } );\n    assertAnalyzesTo(analyzer, \" &#55002;&#XdC01;\", new String[] { \"\\uD6DA\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#55002;&#56321;\", new String[] { \"\\uD6DA\\uFFFD\" } );\n\n    // Unpaired high surrogates\n    assertAnalyzesTo(analyzer, \" &#Xd921;\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#Xd921\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#Xd921<br>\", new String[] { \"&#Xd921\" } );\n    assertAnalyzesTo(analyzer, \" &#55528;\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#55528\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#55528<br>\", new String[] { \"&#55528\" } );\n\n    // Unpaired low surrogates\n    assertAnalyzesTo(analyzer, \" &#xdfdb;\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#xdfdb\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#xdfdb<br>\", new String[] { \"&#xdfdb\" } );\n    assertAnalyzesTo(analyzer, \" &#57209;\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#57209\", new String[] { \"\\uFFFD\" } );\n    assertAnalyzesTo(analyzer, \" &#57209<br>\", new String[] { \"&#57209\" } );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5a89676536a5d3e2e875a9eed6b3f22a63cca643":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b55235ffc28246ab5c4e1d88861a41654043261f"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["7d6adf8ea59977891966389011f3905e09932183"],"b55235ffc28246ab5c4e1d88861a41654043261f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b55235ffc28246ab5c4e1d88861a41654043261f"],"7d6adf8ea59977891966389011f3905e09932183":["b55235ffc28246ab5c4e1d88861a41654043261f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"5a89676536a5d3e2e875a9eed6b3f22a63cca643":[],"b55235ffc28246ab5c4e1d88861a41654043261f":["5a89676536a5d3e2e875a9eed6b3f22a63cca643","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","7d6adf8ea59977891966389011f3905e09932183"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5a89676536a5d3e2e875a9eed6b3f22a63cca643","b55235ffc28246ab5c4e1d88861a41654043261f","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"7d6adf8ea59977891966389011f3905e09932183":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5a89676536a5d3e2e875a9eed6b3f22a63cca643","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}