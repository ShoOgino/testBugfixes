{"path":"src/java/org/apache/solr/search/FastLRUCache#warm(SolrIndexSearcher,SolrCache).mjava","commits":[{"id":"65a70ca4e6df183f7a8f69687b55379fea0ddac2","date":1225224829,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/search/FastLRUCache#warm(SolrIndexSearcher,SolrCache).mjava","pathOld":"/dev/null","sourceNew":"  public void warm(SolrIndexSearcher searcher, SolrCache old) throws IOException {\n    if (regenerator == null) return;\n    long warmingStartTime = System.currentTimeMillis();\n    FastLRUCache other = (FastLRUCache) old;\n    // warm entries\n    if (autowarmCount != 0) {\n      int sz = other.size();\n      if (autowarmCount != -1) sz = Math.min(sz, autowarmCount);\n      Map items = other.cache.getLatestAccessedItems(sz);\n      Map.Entry[] itemsArr = new Map.Entry[items.size()];\n      int counter = 0;\n      for (Object mapEntry : items.entrySet()) {\n        itemsArr[counter++] = (Map.Entry) mapEntry;\n      }\n      for (int i = itemsArr.length - 1; i >= 0; i--) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher,\n                  this, old, itemsArr[i].getKey(), itemsArr[i].getValue());\n          if (!continueRegen) break;\n        }\n        catch (Throwable e) {\n          SolrException.log(log, \"Error during auto-warming of key:\" + itemsArr[i].getKey(), e);\n        }\n      }\n    }\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","f56da6f4f15d95f318d2d6ac2a39a9183dfecff2","f56da6f4f15d95f318d2d6ac2a39a9183dfecff2","f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/FastLRUCache#warm(SolrIndexSearcher,SolrCache).mjava","pathOld":"src/java/org/apache/solr/search/FastLRUCache#warm(SolrIndexSearcher,SolrCache).mjava","sourceNew":"  public void warm(SolrIndexSearcher searcher, SolrCache old) throws IOException {\n    if (regenerator == null) return;\n    long warmingStartTime = System.currentTimeMillis();\n    FastLRUCache other = (FastLRUCache) old;\n    // warm entries\n    if (autowarmCount != 0) {\n      int sz = other.size();\n      if (autowarmCount != -1) sz = Math.min(sz, autowarmCount);\n      Map items = other.cache.getLatestAccessedItems(sz);\n      Map.Entry[] itemsArr = new Map.Entry[items.size()];\n      int counter = 0;\n      for (Object mapEntry : items.entrySet()) {\n        itemsArr[counter++] = (Map.Entry) mapEntry;\n      }\n      for (int i = itemsArr.length - 1; i >= 0; i--) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher,\n                  this, old, itemsArr[i].getKey(), itemsArr[i].getValue());\n          if (!continueRegen) break;\n        }\n        catch (Throwable e) {\n          SolrException.log(log, \"Error during auto-warming of key:\" + itemsArr[i].getKey(), e);\n        }\n      }\n    }\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","sourceOld":"  public void warm(SolrIndexSearcher searcher, SolrCache old) throws IOException {\n    if (regenerator == null) return;\n    long warmingStartTime = System.currentTimeMillis();\n    FastLRUCache other = (FastLRUCache) old;\n    // warm entries\n    if (autowarmCount != 0) {\n      int sz = other.size();\n      if (autowarmCount != -1) sz = Math.min(sz, autowarmCount);\n      Map items = other.cache.getLatestAccessedItems(sz);\n      Map.Entry[] itemsArr = new Map.Entry[items.size()];\n      int counter = 0;\n      for (Object mapEntry : items.entrySet()) {\n        itemsArr[counter++] = (Map.Entry) mapEntry;\n      }\n      for (int i = itemsArr.length - 1; i >= 0; i--) {\n        try {\n          boolean continueRegen = regenerator.regenerateItem(searcher,\n                  this, old, itemsArr[i].getKey(), itemsArr[i].getValue());\n          if (!continueRegen) break;\n        }\n        catch (Throwable e) {\n          SolrException.log(log, \"Error during auto-warming of key:\" + itemsArr[i].getKey(), e);\n        }\n      }\n    }\n    warmupTime = System.currentTimeMillis() - warmingStartTime;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["65a70ca4e6df183f7a8f69687b55379fea0ddac2"],"65a70ca4e6df183f7a8f69687b55379fea0ddac2":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["65a70ca4e6df183f7a8f69687b55379fea0ddac2"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"65a70ca4e6df183f7a8f69687b55379fea0ddac2":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}