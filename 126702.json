{"path":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageQuery#singleEntryQuery(String,String,ExtensionProfile).mjava","commits":[{"id":"5d43e216d757e2276d180eba8a192e300c4bfadb","date":1149717385,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageQuery#singleEntryQuery(String,String,ExtensionProfile).mjava","pathOld":"/dev/null","sourceNew":"    /** \n     * This method retrieves a single entry from the storage. If the \n     * {@link StorageBuffer} does not contain the requested entry the \n     * underlaying storage index will be searched. \n     * <p> \n     * The Entry will be searched in a feed context specified by the given feed \n     * ID \n     * </p> \n     *  \n     * @param entryId - \n     *            the entry to fetch \n     * @param feedId - \n     *            the feedid eg. feed context \n     * @param profil - \n     *            the extension profile used to create the entriy instances \n     * @return - the requested {@link BaseEntry} or <code>null</code> if the \n     *         entry can not be found \n     * @throws IOException - \n     *             if the index could not be queries or the entries could not be \n     *             build \n     * @throws FeedNotFoundException - \n     *             if the requested feed is not registered \n     * @throws ParseException - \n     *             if an entry could not be parsed while building it from the \n     *             Lucene Document. \n     */ \n    public BaseEntry singleEntryQuery(final String entryId, \n            final String feedId, final ExtensionProfile profil) \n            throws IOException, FeedNotFoundException, ParseException { \n        StorageEntryWrapper wrapper = this.buffer.getEntry(entryId, feedId); \n \n        if (wrapper == null) { \n            Hits hits = storageQuery(entryId); \n            if (hits.length() <= 0) \n                return null; \n            Document doc = hits.doc(0); \n \n            return buildEntryFromLuceneDocument(doc, profil); \n        } \n        return wrapper.getEntry(); \n \n    } \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52754a40a1550056d5637c8992b4076b5ed77328","date":1151345693,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageQuery#singleEntryQuery(String,String,ExtensionProfile).mjava","sourceNew":null,"sourceOld":"    /** \n     * This method retrieves a single entry from the storage. If the \n     * {@link StorageBuffer} does not contain the requested entry the \n     * underlaying storage index will be searched. \n     * <p> \n     * The Entry will be searched in a feed context specified by the given feed \n     * ID \n     * </p> \n     *  \n     * @param entryId - \n     *            the entry to fetch \n     * @param feedId - \n     *            the feedid eg. feed context \n     * @param profil - \n     *            the extension profile used to create the entriy instances \n     * @return - the requested {@link BaseEntry} or <code>null</code> if the \n     *         entry can not be found \n     * @throws IOException - \n     *             if the index could not be queries or the entries could not be \n     *             build \n     * @throws FeedNotFoundException - \n     *             if the requested feed is not registered \n     * @throws ParseException - \n     *             if an entry could not be parsed while building it from the \n     *             Lucene Document. \n     */ \n    public BaseEntry singleEntryQuery(final String entryId, \n            final String feedId, final ExtensionProfile profil) \n            throws IOException, FeedNotFoundException, ParseException { \n        StorageEntryWrapper wrapper = this.buffer.getEntry(entryId, feedId); \n \n        if (wrapper == null) { \n            Hits hits = storageQuery(entryId); \n            if (hits.length() <= 0) \n                return null; \n            Document doc = hits.doc(0); \n \n            return buildEntryFromLuceneDocument(doc, profil); \n        } \n        return wrapper.getEntry(); \n \n    } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5d43e216d757e2276d180eba8a192e300c4bfadb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["52754a40a1550056d5637c8992b4076b5ed77328"],"52754a40a1550056d5637c8992b4076b5ed77328":["5d43e216d757e2276d180eba8a192e300c4bfadb"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5d43e216d757e2276d180eba8a192e300c4bfadb"],"5d43e216d757e2276d180eba8a192e300c4bfadb":["52754a40a1550056d5637c8992b4076b5ed77328"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"52754a40a1550056d5637c8992b4076b5ed77328":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}