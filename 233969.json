{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#getNodesViaRules(ClusterState,String,int,SolrCloudManager,DocCollection,List[String],List).mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#getNodesViaRules(ClusterState,String,int,SolrCloudManager,DocCollection,List[String],List).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#getNodesViaRules(ClusterState,String,int,SolrCloudManager,DocCollection,List[String],List).mjava","sourceNew":"  private static List<ReplicaPosition> getNodesViaRules(ClusterState clusterState, String shard, int numberOfNodes,\n                                                        SolrCloudManager cloudManager, DocCollection coll, List<String> createNodeList, List l) {\n    ArrayList<Rule> rules = new ArrayList<>();\n    for (Object o : l) rules.add(new Rule((Map) o));\n    Map<String, Map<String, Integer>> shardVsNodes = new LinkedHashMap<>();\n    for (Slice slice : coll.getSlices()) {\n      LinkedHashMap<String, Integer> n = new LinkedHashMap<>();\n      shardVsNodes.put(slice.getName(), n);\n      for (Replica replica : slice.getReplicas()) {\n        Integer count = n.get(replica.getNodeName());\n        if (count == null) count = 0;\n        n.put(replica.getNodeName(), ++count);\n      }\n    }\n    List snitches = (List) coll.get(SNITCH);\n    List<String> nodesList = createNodeList == null ?\n        new ArrayList<>(clusterState.getLiveNodes()) :\n        createNodeList;\n    Map<ReplicaPosition, String> positions = new ReplicaAssigner(\n        rules,\n        Collections.singletonMap(shard, numberOfNodes),\n        snitches,\n        shardVsNodes,\n        nodesList, cloudManager, clusterState).getNodeMappings();\n\n    return positions.entrySet().stream().map(e -> e.getKey().setNode(e.getValue())).collect(Collectors.toList());// getReplicaCounts(positions);\n  }\n\n","sourceOld":"  private static List<ReplicaPosition> getNodesViaRules(ClusterState clusterState, String shard, int numberOfNodes,\n                                                        SolrCloudManager cloudManager, DocCollection coll, List<String> createNodeList, List l) {\n    ArrayList<Rule> rules = new ArrayList<>();\n    for (Object o : l) rules.add(new Rule((Map) o));\n    Map<String, Map<String, Integer>> shardVsNodes = new LinkedHashMap<>();\n    for (Slice slice : coll.getSlices()) {\n      LinkedHashMap<String, Integer> n = new LinkedHashMap<>();\n      shardVsNodes.put(slice.getName(), n);\n      for (Replica replica : slice.getReplicas()) {\n        Integer count = n.get(replica.getNodeName());\n        if (count == null) count = 0;\n        n.put(replica.getNodeName(), ++count);\n      }\n    }\n    List snitches = (List) coll.get(SNITCH);\n    List<String> nodesList = createNodeList == null ?\n        new ArrayList<>(clusterState.getLiveNodes()) :\n        createNodeList;\n    Map<ReplicaPosition, String> positions = new ReplicaAssigner(\n        rules,\n        Collections.singletonMap(shard, numberOfNodes),\n        snitches,\n        shardVsNodes,\n        nodesList, cloudManager, clusterState).getNodeMappings();\n\n    return positions.entrySet().stream().map(e -> e.getKey().setNode(e.getValue())).collect(Collectors.toList());// getReplicaCounts(positions);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#getNodesViaRules(ClusterState,String,int,SolrCloudManager,DocCollection,List[String],List).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#getNodesViaRules(ClusterState,String,int,SolrCloudManager,DocCollection,List[String],List).mjava","sourceNew":"  private static List<ReplicaPosition> getNodesViaRules(ClusterState clusterState, String shard, int numberOfNodes,\n                                                        SolrCloudManager cloudManager, DocCollection coll, List<String> createNodeList, List l) {\n    ArrayList<Rule> rules = new ArrayList<>();\n    for (Object o : l) rules.add(new Rule((Map) o));\n    Map<String, Map<String, Integer>> shardVsNodes = new LinkedHashMap<>();\n    for (Slice slice : coll.getSlices()) {\n      LinkedHashMap<String, Integer> n = new LinkedHashMap<>();\n      shardVsNodes.put(slice.getName(), n);\n      for (Replica replica : slice.getReplicas()) {\n        Integer count = n.get(replica.getNodeName());\n        if (count == null) count = 0;\n        n.put(replica.getNodeName(), ++count);\n      }\n    }\n    List snitches = (List) coll.get(SNITCH);\n    List<String> nodesList = createNodeList == null ?\n        new ArrayList<>(clusterState.getLiveNodes()) :\n        createNodeList;\n    Map<ReplicaPosition, String> positions = new ReplicaAssigner(\n        rules,\n        Collections.singletonMap(shard, numberOfNodes),\n        snitches,\n        shardVsNodes,\n        nodesList, cloudManager, clusterState).getNodeMappings();\n\n    return positions.entrySet().stream().map(e -> e.getKey().setNode(e.getValue())).collect(Collectors.toList());// getReplicaCounts(positions);\n  }\n\n","sourceOld":"  private static List<ReplicaPosition> getNodesViaRules(ClusterState clusterState, String shard, int numberOfNodes,\n                                                        SolrCloudManager cloudManager, DocCollection coll, List<String> createNodeList, List l) {\n    ArrayList<Rule> rules = new ArrayList<>();\n    for (Object o : l) rules.add(new Rule((Map) o));\n    Map<String, Map<String, Integer>> shardVsNodes = new LinkedHashMap<>();\n    for (Slice slice : coll.getSlices()) {\n      LinkedHashMap<String, Integer> n = new LinkedHashMap<>();\n      shardVsNodes.put(slice.getName(), n);\n      for (Replica replica : slice.getReplicas()) {\n        Integer count = n.get(replica.getNodeName());\n        if (count == null) count = 0;\n        n.put(replica.getNodeName(), ++count);\n      }\n    }\n    List snitches = (List) coll.get(SNITCH);\n    List<String> nodesList = createNodeList == null ?\n        new ArrayList<>(clusterState.getLiveNodes()) :\n        createNodeList;\n    Map<ReplicaPosition, String> positions = new ReplicaAssigner(\n        rules,\n        Collections.singletonMap(shard, numberOfNodes),\n        snitches,\n        shardVsNodes,\n        nodesList, cloudManager, clusterState).getNodeMappings();\n\n    return positions.entrySet().stream().map(e -> e.getKey().setNode(e.getValue())).collect(Collectors.toList());// getReplicaCounts(positions);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9f71a1c6c905e9489b4d25c83c8d628d978a8ea","date":1538045138,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign#getNodesViaRules(ClusterState,String,int,SolrCloudManager,DocCollection,List[String],List).mjava","sourceNew":null,"sourceOld":"  private static List<ReplicaPosition> getNodesViaRules(ClusterState clusterState, String shard, int numberOfNodes,\n                                                        SolrCloudManager cloudManager, DocCollection coll, List<String> createNodeList, List l) {\n    ArrayList<Rule> rules = new ArrayList<>();\n    for (Object o : l) rules.add(new Rule((Map) o));\n    Map<String, Map<String, Integer>> shardVsNodes = new LinkedHashMap<>();\n    for (Slice slice : coll.getSlices()) {\n      LinkedHashMap<String, Integer> n = new LinkedHashMap<>();\n      shardVsNodes.put(slice.getName(), n);\n      for (Replica replica : slice.getReplicas()) {\n        Integer count = n.get(replica.getNodeName());\n        if (count == null) count = 0;\n        n.put(replica.getNodeName(), ++count);\n      }\n    }\n    List snitches = (List) coll.get(SNITCH);\n    List<String> nodesList = createNodeList == null ?\n        new ArrayList<>(clusterState.getLiveNodes()) :\n        createNodeList;\n    Map<ReplicaPosition, String> positions = new ReplicaAssigner(\n        rules,\n        Collections.singletonMap(shard, numberOfNodes),\n        snitches,\n        shardVsNodes,\n        nodesList, cloudManager, clusterState).getNodeMappings();\n\n    return positions.entrySet().stream().map(e -> e.getKey().setNode(e.getValue())).collect(Collectors.toList());// getReplicaCounts(positions);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"e9f71a1c6c905e9489b4d25c83c8d628d978a8ea":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e9f71a1c6c905e9489b4d25c83c8d628d978a8ea"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["e9f71a1c6c905e9489b4d25c83c8d628d978a8ea"],"e9f71a1c6c905e9489b4d25c83c8d628d978a8ea":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}