{"path":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#CoreDescriptor(String,Path,Map[String,String],Properties,boolean).mjava","commits":[{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#CoreDescriptor(String,Path,Map[String,String],Properties,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#CoreDescriptor(CoreContainer,String,Path,Map[String,String]).mjava","sourceNew":"  /**\n   * Create a new CoreDescriptor.\n   * @param name            the CoreDescriptor's name\n   * @param instanceDir     a Path resolving to the instanceDir\n   * @param coreProps       a Map of the properties for this core\n   * @param containerProperties the properties from the enclosing container.\n   * @param isZooKeeperAware if true, we ar in SolrCloud mode.\n   */\n\n\n  public CoreDescriptor(String name, Path instanceDir, Map<String, String> coreProps,\n                        Properties containerProperties, boolean isZooKeeperAware) {\n    this.instanceDir = instanceDir;\n\n    originalCoreProperties.setProperty(CORE_NAME, name);\n\n    name = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(name, CORE_NAME),\n                                             containerProperties);\n\n    coreProperties.putAll(defaultProperties);\n    coreProperties.put(CORE_NAME, name);\n\n    for (String propname : coreProps.keySet()) {\n\n      String propvalue = coreProps.get(propname);\n\n      if (isUserDefinedProperty(propname))\n        originalExtraProperties.put(propname, propvalue);\n      else\n        originalCoreProperties.put(propname, propvalue);\n\n      if (!requiredProperties.contains(propname))   // Required props are already dealt with\n        coreProperties.setProperty(propname,\n            PropertiesUtil.substituteProperty(propvalue, containerProperties));\n    }\n\n    loadExtraProperties();\n    buildSubstitutableProperties();\n\n    // TODO maybe make this a CloudCoreDescriptor subclass?\n    if (isZooKeeperAware) {\n      cloudDesc = new CloudDescriptor(name, coreProperties, this);\n    }\n    else {\n      cloudDesc = null;\n    }\n\n    log.debug(\"Created CoreDescriptor: \" + coreProperties);\n  }\n\n","sourceOld":"  /**\n   * Create a new CoreDescriptor.\n   * @param container       the CoreDescriptor's container\n   * @param name            the CoreDescriptor's name\n   * @param instanceDir     a Path resolving to the instanceDir\n   * @param coreProps       a Map of the properties for this core\n   */\n  public CoreDescriptor(CoreContainer container, String name, Path instanceDir,\n                        Map<String, String> coreProps) {\n\n    this.coreContainer = container;\n    this.instanceDir = instanceDir;\n\n    originalCoreProperties.setProperty(CORE_NAME, name);\n\n    Properties containerProperties = container.getContainerProperties();\n    name = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(name, CORE_NAME),\n                                             containerProperties);\n\n    coreProperties.putAll(defaultProperties);\n    coreProperties.put(CORE_NAME, name);\n\n    for (String propname : coreProps.keySet()) {\n\n      String propvalue = coreProps.get(propname);\n\n      if (isUserDefinedProperty(propname))\n        originalExtraProperties.put(propname, propvalue);\n      else\n        originalCoreProperties.put(propname, propvalue);\n\n      if (!requiredProperties.contains(propname))   // Required props are already dealt with\n        coreProperties.setProperty(propname,\n            PropertiesUtil.substituteProperty(propvalue, containerProperties));\n    }\n\n    loadExtraProperties();\n    buildSubstitutableProperties();\n\n    // TODO maybe make this a CloudCoreDescriptor subclass?\n    if (container.isZooKeeperAware()) {\n      cloudDesc = new CloudDescriptor(name, coreProperties, this);\n    }\n    else {\n      cloudDesc = null;\n    }\n\n    log.debug(\"Created CoreDescriptor: \" + coreProperties);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#CoreDescriptor(String,Path,Map[String,String],Properties,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a new CoreDescriptor.\n   * @param name            the CoreDescriptor's name\n   * @param instanceDir     a Path resolving to the instanceDir\n   * @param coreProps       a Map of the properties for this core\n   * @param containerProperties the properties from the enclosing container.\n   * @param isZooKeeperAware if true, we ar in SolrCloud mode.\n   */\n\n\n  public CoreDescriptor(String name, Path instanceDir, Map<String, String> coreProps,\n                        Properties containerProperties, boolean isZooKeeperAware) {\n    this.instanceDir = instanceDir;\n\n    originalCoreProperties.setProperty(CORE_NAME, name);\n\n    name = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(name, CORE_NAME),\n                                             containerProperties);\n\n    coreProperties.putAll(defaultProperties);\n    coreProperties.put(CORE_NAME, name);\n\n    for (String propname : coreProps.keySet()) {\n\n      String propvalue = coreProps.get(propname);\n\n      if (isUserDefinedProperty(propname))\n        originalExtraProperties.put(propname, propvalue);\n      else\n        originalCoreProperties.put(propname, propvalue);\n\n      if (!requiredProperties.contains(propname))   // Required props are already dealt with\n        coreProperties.setProperty(propname,\n            PropertiesUtil.substituteProperty(propvalue, containerProperties));\n    }\n\n    loadExtraProperties();\n    buildSubstitutableProperties();\n\n    // TODO maybe make this a CloudCoreDescriptor subclass?\n    if (isZooKeeperAware) {\n      cloudDesc = new CloudDescriptor(name, coreProperties, this);\n    }\n    else {\n      cloudDesc = null;\n    }\n\n    log.debug(\"Created CoreDescriptor: \" + coreProperties);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f97fc3d287be2a8d7f513f0de3249b50dda47299","date":1568378558,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#CoreDescriptor(String,Path,Map[String,String],Properties,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#CoreDescriptor(String,Path,Map[String,String],Properties,boolean).mjava","sourceNew":"  /**\n   * Create a new CoreDescriptor.\n   * @param name            the CoreDescriptor's name\n   * @param instanceDir     a Path resolving to the instanceDir\n   * @param coreProps       a Map of the properties for this core\n   * @param containerProperties the properties from the enclosing container.\n   * @param isZooKeeperAware if true, we ar in SolrCloud mode.\n   */\n\n\n  public CoreDescriptor(String name, Path instanceDir, Map<String, String> coreProps,\n                        Properties containerProperties, boolean isZooKeeperAware) {\n    this.instanceDir = instanceDir;\n\n    originalCoreProperties.setProperty(CORE_NAME, name);\n\n    name = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(name, CORE_NAME),\n                                             containerProperties);\n\n    coreProperties.putAll(defaultProperties);\n    coreProperties.put(CORE_NAME, name);\n\n    for (Map.Entry<String, String> entry : coreProps.entrySet()) {\n      String propname = entry.getKey();\n      String propvalue = entry.getValue();\n\n      if (isUserDefinedProperty(propname))\n        originalExtraProperties.put(propname, propvalue);\n      else\n        originalCoreProperties.put(propname, propvalue);\n\n      if (!requiredProperties.contains(propname))   // Required props are already dealt with\n        coreProperties.setProperty(propname,\n            PropertiesUtil.substituteProperty(propvalue, containerProperties));\n    }\n\n    loadExtraProperties();\n    buildSubstitutableProperties();\n\n    // TODO maybe make this a CloudCoreDescriptor subclass?\n    if (isZooKeeperAware) {\n      cloudDesc = new CloudDescriptor(name, coreProperties, this);\n    }\n    else {\n      cloudDesc = null;\n    }\n\n    log.debug(\"Created CoreDescriptor: \" + coreProperties);\n  }\n\n","sourceOld":"  /**\n   * Create a new CoreDescriptor.\n   * @param name            the CoreDescriptor's name\n   * @param instanceDir     a Path resolving to the instanceDir\n   * @param coreProps       a Map of the properties for this core\n   * @param containerProperties the properties from the enclosing container.\n   * @param isZooKeeperAware if true, we ar in SolrCloud mode.\n   */\n\n\n  public CoreDescriptor(String name, Path instanceDir, Map<String, String> coreProps,\n                        Properties containerProperties, boolean isZooKeeperAware) {\n    this.instanceDir = instanceDir;\n\n    originalCoreProperties.setProperty(CORE_NAME, name);\n\n    name = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(name, CORE_NAME),\n                                             containerProperties);\n\n    coreProperties.putAll(defaultProperties);\n    coreProperties.put(CORE_NAME, name);\n\n    for (String propname : coreProps.keySet()) {\n\n      String propvalue = coreProps.get(propname);\n\n      if (isUserDefinedProperty(propname))\n        originalExtraProperties.put(propname, propvalue);\n      else\n        originalCoreProperties.put(propname, propvalue);\n\n      if (!requiredProperties.contains(propname))   // Required props are already dealt with\n        coreProperties.setProperty(propname,\n            PropertiesUtil.substituteProperty(propvalue, containerProperties));\n    }\n\n    loadExtraProperties();\n    buildSubstitutableProperties();\n\n    // TODO maybe make this a CloudCoreDescriptor subclass?\n    if (isZooKeeperAware) {\n      cloudDesc = new CloudDescriptor(name, coreProperties, this);\n    }\n    else {\n      cloudDesc = null;\n    }\n\n    log.debug(\"Created CoreDescriptor: \" + coreProperties);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e4fb176991e13ab85dfe62dceeb287dde115745","date":1579630717,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#CoreDescriptor(String,Path,Map[String,String],Properties,ZkController).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#CoreDescriptor(String,Path,Map[String,String],Properties,boolean).mjava","sourceNew":"  /**\n   * Create a new CoreDescriptor.\n   * @param name            the CoreDescriptor's name\n   * @param instanceDir     a Path resolving to the instanceDir\n   * @param coreProps       a Map of the properties for this core\n   * @param containerProperties the properties from the enclosing container.\n   * @param zkController    the ZkController in SolrCloud mode, otherwise null.\n   */\n  public CoreDescriptor(String name, Path instanceDir, Map<String, String> coreProps,\n                        Properties containerProperties, ZkController zkController) {\n    this.instanceDir = instanceDir;\n\n    originalCoreProperties.setProperty(CORE_NAME, name);\n\n    name = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(name, CORE_NAME),\n                                             containerProperties);\n\n    coreProperties.putAll(defaultProperties);\n    coreProperties.put(CORE_NAME, name);\n\n    for (Map.Entry<String, String> entry : coreProps.entrySet()) {\n      String propname = entry.getKey();\n      String propvalue = entry.getValue();\n\n      if (isUserDefinedProperty(propname))\n        originalExtraProperties.put(propname, propvalue);\n      else\n        originalCoreProperties.put(propname, propvalue);\n\n      if (!requiredProperties.contains(propname))   // Required props are already dealt with\n        coreProperties.setProperty(propname,\n            PropertiesUtil.substituteProperty(propvalue, containerProperties));\n    }\n\n    loadExtraProperties();\n    buildSubstitutableProperties();\n\n    // TODO maybe make this a CloudCoreDescriptor subclass?\n    if (zkController != null) {\n      cloudDesc = new CloudDescriptor(this, name, coreProperties, zkController);\n    } else {\n      cloudDesc = null;\n    }\n    log.debug(\"Created CoreDescriptor: {}\", coreProperties);\n  }\n\n","sourceOld":"  /**\n   * Create a new CoreDescriptor.\n   * @param name            the CoreDescriptor's name\n   * @param instanceDir     a Path resolving to the instanceDir\n   * @param coreProps       a Map of the properties for this core\n   * @param containerProperties the properties from the enclosing container.\n   * @param isZooKeeperAware if true, we ar in SolrCloud mode.\n   */\n\n\n  public CoreDescriptor(String name, Path instanceDir, Map<String, String> coreProps,\n                        Properties containerProperties, boolean isZooKeeperAware) {\n    this.instanceDir = instanceDir;\n\n    originalCoreProperties.setProperty(CORE_NAME, name);\n\n    name = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(name, CORE_NAME),\n                                             containerProperties);\n\n    coreProperties.putAll(defaultProperties);\n    coreProperties.put(CORE_NAME, name);\n\n    for (Map.Entry<String, String> entry : coreProps.entrySet()) {\n      String propname = entry.getKey();\n      String propvalue = entry.getValue();\n\n      if (isUserDefinedProperty(propname))\n        originalExtraProperties.put(propname, propvalue);\n      else\n        originalCoreProperties.put(propname, propvalue);\n\n      if (!requiredProperties.contains(propname))   // Required props are already dealt with\n        coreProperties.setProperty(propname,\n            PropertiesUtil.substituteProperty(propvalue, containerProperties));\n    }\n\n    loadExtraProperties();\n    buildSubstitutableProperties();\n\n    // TODO maybe make this a CloudCoreDescriptor subclass?\n    if (isZooKeeperAware) {\n      cloudDesc = new CloudDescriptor(name, coreProperties, this);\n    }\n    else {\n      cloudDesc = null;\n    }\n\n    log.debug(\"Created CoreDescriptor: \" + coreProperties);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3e4fb176991e13ab85dfe62dceeb287dde115745":["f97fc3d287be2a8d7f513f0de3249b50dda47299"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f97fc3d287be2a8d7f513f0de3249b50dda47299":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e4fb176991e13ab85dfe62dceeb287dde115745"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"3e4fb176991e13ab85dfe62dceeb287dde115745":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"f97fc3d287be2a8d7f513f0de3249b50dda47299":["3e4fb176991e13ab85dfe62dceeb287dde115745"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["f97fc3d287be2a8d7f513f0de3249b50dda47299"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}