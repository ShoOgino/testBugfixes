{"path":"contrib/memory/src/test/org/apache/lucene/index/memory/PatternAnalyzerTest#assertEquals(List,List).mjava","commits":[{"id":"50e7972fe4865715af8951d4ba15555e3426fc5d","date":1115024647,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/memory/src/test/org/apache/lucene/index/memory/PatternAnalyzerTest#assertEquals(List,List).mjava","pathOld":"/dev/null","sourceNew":"\tprivate void assertEquals(List tokens1, List tokens2) {\n\t\tint size = Math.min(tokens1.size(), tokens2.size());\n\t\tint i=0;\n\t\ttry {\n\t\t\tfor (; i < size; i++) {\n\t\t\t\tToken t1 = (Token) tokens1.get(i);\n\t\t\t\tToken t2 = (Token) tokens2.get(i);\n\t\t\t\tif (!(t1.termText().equals(t2.termText()))) throw new IllegalStateException(\"termText\");\n\t\t\t\tif (t1.startOffset() != t2.startOffset()) throw new IllegalStateException(\"startOffset\");\n\t\t\t\tif (t1.endOffset() != t2.endOffset()) throw new IllegalStateException(\"endOffset\");\n\t\t\t\tif (!(t1.type().equals(t2.type()))) throw new IllegalStateException(\"type\");\n\t\t\t}\n\t\t\tif (tokens1.size() != tokens2.size()) \tthrow new IllegalStateException(\"size1=\" + tokens1.size() + \", size2=\" + tokens2.size());\n\t\t}\n\n\t\tcatch (IllegalStateException e) {\n\t\t\tif (size > 0) {\n\t\t\t\tSystem.out.println(\"i=\" + i + \", size=\" + size);\n\t\t\t\tSystem.out.println(\"t1[size]='\" + ((Token) tokens1.get(size-1)).termText() + \"'\");\n\t\t\t\tSystem.out.println(\"t2[size]='\" + ((Token) tokens2.get(size-1)).termText() + \"'\");\n\t\t\t}\n\t\t\tthrow e;\n\t\t}\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f68e24227d5556d33ee6d586fd9010cd9ff8bec","date":1150091176,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/memory/src/test/org/apache/lucene/index/memory/PatternAnalyzerTest#assertEquals(List,List).mjava","pathOld":"contrib/memory/src/test/org/apache/lucene/index/memory/PatternAnalyzerTest#assertEquals(List,List).mjava","sourceNew":"  private void assertEquals(List tokens1, List tokens2) {\n    int size = Math.min(tokens1.size(), tokens2.size());\n    int i=0;\n    try {\n      for (; i < size; i++) {\n        Token t1 = (Token) tokens1.get(i);\n        Token t2 = (Token) tokens2.get(i);\n        if (!(t1.termText().equals(t2.termText()))) throw new IllegalStateException(\"termText\");\n        if (t1.startOffset() != t2.startOffset()) throw new IllegalStateException(\"startOffset\");\n        if (t1.endOffset() != t2.endOffset()) throw new IllegalStateException(\"endOffset\");\n        if (!(t1.type().equals(t2.type()))) throw new IllegalStateException(\"type\");\n      }\n      if (tokens1.size() != tokens2.size())   throw new IllegalStateException(\"size1=\" + tokens1.size() + \", size2=\" + tokens2.size());\n    }\n\n    catch (IllegalStateException e) {\n      if (size > 0) {\n        System.out.println(\"i=\" + i + \", size=\" + size);\n        System.out.println(\"t1[size]='\" + ((Token) tokens1.get(size-1)).termText() + \"'\");\n        System.out.println(\"t2[size]='\" + ((Token) tokens2.get(size-1)).termText() + \"'\");\n      }\n      throw e;\n    }\n  }\n\n","sourceOld":"\tprivate void assertEquals(List tokens1, List tokens2) {\n\t\tint size = Math.min(tokens1.size(), tokens2.size());\n\t\tint i=0;\n\t\ttry {\n\t\t\tfor (; i < size; i++) {\n\t\t\t\tToken t1 = (Token) tokens1.get(i);\n\t\t\t\tToken t2 = (Token) tokens2.get(i);\n\t\t\t\tif (!(t1.termText().equals(t2.termText()))) throw new IllegalStateException(\"termText\");\n\t\t\t\tif (t1.startOffset() != t2.startOffset()) throw new IllegalStateException(\"startOffset\");\n\t\t\t\tif (t1.endOffset() != t2.endOffset()) throw new IllegalStateException(\"endOffset\");\n\t\t\t\tif (!(t1.type().equals(t2.type()))) throw new IllegalStateException(\"type\");\n\t\t\t}\n\t\t\tif (tokens1.size() != tokens2.size()) \tthrow new IllegalStateException(\"size1=\" + tokens1.size() + \", size2=\" + tokens2.size());\n\t\t}\n\n\t\tcatch (IllegalStateException e) {\n\t\t\tif (size > 0) {\n\t\t\t\tSystem.out.println(\"i=\" + i + \", size=\" + size);\n\t\t\t\tSystem.out.println(\"t1[size]='\" + ((Token) tokens1.get(size-1)).termText() + \"'\");\n\t\t\t\tSystem.out.println(\"t2[size]='\" + ((Token) tokens2.get(size-1)).termText() + \"'\");\n\t\t\t}\n\t\t\tthrow e;\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/memory/src/test/org/apache/lucene/index/memory/PatternAnalyzerTest#assertEquals(List,List).mjava","pathOld":"contrib/memory/src/test/org/apache/lucene/index/memory/PatternAnalyzerTest#assertEquals(List,List).mjava","sourceNew":"  private void assertEquals(List tokens1, List tokens2) {\n    int size = Math.min(tokens1.size(), tokens2.size());\n    int i=0;\n    try {\n      for (; i < size; i++) {\n        Token t1 = (Token) tokens1.get(i);\n        Token t2 = (Token) tokens2.get(i);\n        if (!(t1.term().equals(t2.term()))) throw new IllegalStateException(\"termText\");\n        if (t1.startOffset() != t2.startOffset()) throw new IllegalStateException(\"startOffset\");\n        if (t1.endOffset() != t2.endOffset()) throw new IllegalStateException(\"endOffset\");\n        if (!(t1.type().equals(t2.type()))) throw new IllegalStateException(\"type\");\n      }\n      if (tokens1.size() != tokens2.size())   throw new IllegalStateException(\"size1=\" + tokens1.size() + \", size2=\" + tokens2.size());\n    }\n\n    catch (IllegalStateException e) {\n      if (size > 0) {\n        System.out.println(\"i=\" + i + \", size=\" + size);\n        System.out.println(\"t1[size]='\" + ((Token) tokens1.get(size-1)).term() + \"'\");\n        System.out.println(\"t2[size]='\" + ((Token) tokens2.get(size-1)).term() + \"'\");\n      }\n      throw e;\n    }\n  }\n\n","sourceOld":"  private void assertEquals(List tokens1, List tokens2) {\n    int size = Math.min(tokens1.size(), tokens2.size());\n    int i=0;\n    try {\n      for (; i < size; i++) {\n        Token t1 = (Token) tokens1.get(i);\n        Token t2 = (Token) tokens2.get(i);\n        if (!(t1.termText().equals(t2.termText()))) throw new IllegalStateException(\"termText\");\n        if (t1.startOffset() != t2.startOffset()) throw new IllegalStateException(\"startOffset\");\n        if (t1.endOffset() != t2.endOffset()) throw new IllegalStateException(\"endOffset\");\n        if (!(t1.type().equals(t2.type()))) throw new IllegalStateException(\"type\");\n      }\n      if (tokens1.size() != tokens2.size())   throw new IllegalStateException(\"size1=\" + tokens1.size() + \", size2=\" + tokens2.size());\n    }\n\n    catch (IllegalStateException e) {\n      if (size > 0) {\n        System.out.println(\"i=\" + i + \", size=\" + size);\n        System.out.println(\"t1[size]='\" + ((Token) tokens1.get(size-1)).termText() + \"'\");\n        System.out.println(\"t2[size]='\" + ((Token) tokens2.get(size-1)).termText() + \"'\");\n      }\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"439b0fe2f799d1c722151e88e32bdefad8d34ebe","date":1255282509,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/memory/src/test/org/apache/lucene/index/memory/PatternAnalyzerTest#assertEquals(List,List).mjava","sourceNew":null,"sourceOld":"  private void assertEquals(List tokens1, List tokens2) {\n    int size = Math.min(tokens1.size(), tokens2.size());\n    int i=0;\n    try {\n      for (; i < size; i++) {\n        Token t1 = (Token) tokens1.get(i);\n        Token t2 = (Token) tokens2.get(i);\n        if (!(t1.term().equals(t2.term()))) throw new IllegalStateException(\"termText\");\n        if (t1.startOffset() != t2.startOffset()) throw new IllegalStateException(\"startOffset\");\n        if (t1.endOffset() != t2.endOffset()) throw new IllegalStateException(\"endOffset\");\n        if (!(t1.type().equals(t2.type()))) throw new IllegalStateException(\"type\");\n      }\n      if (tokens1.size() != tokens2.size())   throw new IllegalStateException(\"size1=\" + tokens1.size() + \", size2=\" + tokens2.size());\n    }\n\n    catch (IllegalStateException e) {\n      if (size > 0) {\n        System.out.println(\"i=\" + i + \", size=\" + size);\n        System.out.println(\"t1[size]='\" + ((Token) tokens1.get(size-1)).term() + \"'\");\n        System.out.println(\"t2[size]='\" + ((Token) tokens2.get(size-1)).term() + \"'\");\n      }\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["7f68e24227d5556d33ee6d586fd9010cd9ff8bec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f68e24227d5556d33ee6d586fd9010cd9ff8bec":["50e7972fe4865715af8951d4ba15555e3426fc5d"],"439b0fe2f799d1c722151e88e32bdefad8d34ebe":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"50e7972fe4865715af8951d4ba15555e3426fc5d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["439b0fe2f799d1c722151e88e32bdefad8d34ebe"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["439b0fe2f799d1c722151e88e32bdefad8d34ebe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["50e7972fe4865715af8951d4ba15555e3426fc5d"],"7f68e24227d5556d33ee6d586fd9010cd9ff8bec":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"50e7972fe4865715af8951d4ba15555e3426fc5d":["7f68e24227d5556d33ee6d586fd9010cd9ff8bec"],"439b0fe2f799d1c722151e88e32bdefad8d34ebe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}