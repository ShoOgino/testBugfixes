{"path":"lucene/misc/src/test/org/apache/lucene/uninverting/TestLegacyFieldCache#testIntFieldCache().mjava","commits":[{"id":"8c146731a64debc22c115bbf11ee1a060aa7ea02","date":1457616596,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestLegacyFieldCache#testIntFieldCache().mjava","pathOld":"/dev/null","sourceNew":"  // Make sure that the use of GrowableWriter doesn't prevent from using the full int range\n  public void testIntFieldCache() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig cfg = newIndexWriterConfig(new MockAnalyzer(random()));\n    cfg.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, cfg);\n    Document doc = new Document();\n    LegacyIntField field = new LegacyIntField(\"f\", 0, Store.YES);\n    doc.add(field);\n    final int[] values = new int[TestUtil.nextInt(random(), 1, 10)];\n    for (int i = 0; i < values.length; ++i) {\n      final int v;\n      switch (random().nextInt(10)) {\n        case 0:\n          v = Integer.MIN_VALUE;\n          break;\n        case 1:\n          v = 0;\n          break;\n        case 2:\n          v = Integer.MAX_VALUE;\n          break;\n        default:\n          v = TestUtil.nextInt(random(), -10, 10);\n          break;\n      }\n      values[i] = v;\n      if (v == 0 && random().nextBoolean()) {\n        // missing\n        iw.addDocument(new Document());\n      } else {\n        field.setIntValue(v);\n        iw.addDocument(doc);\n      }\n    }\n    iw.forceMerge(1);\n    final DirectoryReader reader = iw.getReader();\n    final NumericDocValues ints = FieldCache.DEFAULT.getNumerics(getOnlySegmentReader(reader), \"f\", FieldCache.LEGACY_INT_PARSER, false);\n    for (int i = 0; i < values.length; ++i) {\n      assertEquals(values[i], ints.get(i));\n    }\n    reader.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestLegacyFieldCache#testIntFieldCache().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestLegacyFieldCache#testIntFieldCache().mjava","sourceNew":"  // Make sure that the use of GrowableWriter doesn't prevent from using the full int range\n  public void testIntFieldCache() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig cfg = newIndexWriterConfig(new MockAnalyzer(random()));\n    cfg.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, cfg);\n    Document doc = new Document();\n    LegacyIntField field = new LegacyIntField(\"f\", 0, Store.YES);\n    doc.add(field);\n    final int[] values = new int[TestUtil.nextInt(random(), 1, 10)];\n    for (int i = 0; i < values.length; ++i) {\n      final int v;\n      switch (random().nextInt(10)) {\n        case 0:\n          v = Integer.MIN_VALUE;\n          break;\n        case 1:\n          v = 0;\n          break;\n        case 2:\n          v = Integer.MAX_VALUE;\n          break;\n        default:\n          v = TestUtil.nextInt(random(), -10, 10);\n          break;\n      }\n      values[i] = v;\n      if (v == 0 && random().nextBoolean()) {\n        // missing\n        iw.addDocument(new Document());\n      } else {\n        field.setIntValue(v);\n        iw.addDocument(doc);\n      }\n    }\n    iw.forceMerge(1);\n    final DirectoryReader reader = iw.getReader();\n    final NumericDocValues ints = FieldCache.DEFAULT.getNumerics(getOnlyLeafReader(reader), \"f\", FieldCache.LEGACY_INT_PARSER, false);\n    for (int i = 0; i < values.length; ++i) {\n      assertEquals(values[i], ints.get(i));\n    }\n    reader.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure that the use of GrowableWriter doesn't prevent from using the full int range\n  public void testIntFieldCache() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig cfg = newIndexWriterConfig(new MockAnalyzer(random()));\n    cfg.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, cfg);\n    Document doc = new Document();\n    LegacyIntField field = new LegacyIntField(\"f\", 0, Store.YES);\n    doc.add(field);\n    final int[] values = new int[TestUtil.nextInt(random(), 1, 10)];\n    for (int i = 0; i < values.length; ++i) {\n      final int v;\n      switch (random().nextInt(10)) {\n        case 0:\n          v = Integer.MIN_VALUE;\n          break;\n        case 1:\n          v = 0;\n          break;\n        case 2:\n          v = Integer.MAX_VALUE;\n          break;\n        default:\n          v = TestUtil.nextInt(random(), -10, 10);\n          break;\n      }\n      values[i] = v;\n      if (v == 0 && random().nextBoolean()) {\n        // missing\n        iw.addDocument(new Document());\n      } else {\n        field.setIntValue(v);\n        iw.addDocument(doc);\n      }\n    }\n    iw.forceMerge(1);\n    final DirectoryReader reader = iw.getReader();\n    final NumericDocValues ints = FieldCache.DEFAULT.getNumerics(getOnlySegmentReader(reader), \"f\", FieldCache.LEGACY_INT_PARSER, false);\n    for (int i = 0; i < values.length; ++i) {\n      assertEquals(values[i], ints.get(i));\n    }\n    reader.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":["8c146731a64debc22c115bbf11ee1a060aa7ea02"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestLegacyFieldCache#testIntFieldCache().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestLegacyFieldCache#testIntFieldCache().mjava","sourceNew":"  // Make sure that the use of GrowableWriter doesn't prevent from using the full int range\n  public void testIntFieldCache() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig cfg = newIndexWriterConfig(new MockAnalyzer(random()));\n    cfg.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, cfg);\n    Document doc = new Document();\n    LegacyIntField field = new LegacyIntField(\"f\", 0, Store.YES);\n    doc.add(field);\n    final int[] values = new int[TestUtil.nextInt(random(), 1, 10)];\n    for (int i = 0; i < values.length; ++i) {\n      final int v;\n      switch (random().nextInt(10)) {\n        case 0:\n          v = Integer.MIN_VALUE;\n          break;\n        case 1:\n          v = 0;\n          break;\n        case 2:\n          v = Integer.MAX_VALUE;\n          break;\n        default:\n          v = TestUtil.nextInt(random(), -10, 10);\n          break;\n      }\n      values[i] = v;\n      if (v == 0 && random().nextBoolean()) {\n        // missing\n        iw.addDocument(new Document());\n      } else {\n        field.setIntValue(v);\n        iw.addDocument(doc);\n      }\n    }\n    iw.forceMerge(1);\n    final DirectoryReader reader = iw.getReader();\n    final NumericDocValues ints = FieldCache.DEFAULT.getNumerics(getOnlyLeafReader(reader), \"f\", FieldCache.LEGACY_INT_PARSER, false);\n    for (int i = 0; i < values.length; ++i) {\n      assertEquals(values[i], ints.get(i));\n    }\n    reader.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure that the use of GrowableWriter doesn't prevent from using the full int range\n  public void testIntFieldCache() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig cfg = newIndexWriterConfig(new MockAnalyzer(random()));\n    cfg.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, cfg);\n    Document doc = new Document();\n    LegacyIntField field = new LegacyIntField(\"f\", 0, Store.YES);\n    doc.add(field);\n    final int[] values = new int[TestUtil.nextInt(random(), 1, 10)];\n    for (int i = 0; i < values.length; ++i) {\n      final int v;\n      switch (random().nextInt(10)) {\n        case 0:\n          v = Integer.MIN_VALUE;\n          break;\n        case 1:\n          v = 0;\n          break;\n        case 2:\n          v = Integer.MAX_VALUE;\n          break;\n        default:\n          v = TestUtil.nextInt(random(), -10, 10);\n          break;\n      }\n      values[i] = v;\n      if (v == 0 && random().nextBoolean()) {\n        // missing\n        iw.addDocument(new Document());\n      } else {\n        field.setIntValue(v);\n        iw.addDocument(doc);\n      }\n    }\n    iw.forceMerge(1);\n    final DirectoryReader reader = iw.getReader();\n    final NumericDocValues ints = FieldCache.DEFAULT.getNumerics(getOnlyLeafReader(reader), \"f\", FieldCache.LEGACY_INT_PARSER, false);\n    for (int i = 0; i < values.length; ++i) {\n      assertEquals(values[i], ints.get(i));\n    }\n    reader.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestLegacyFieldCache#testIntFieldCache().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestLegacyFieldCache#testIntFieldCache().mjava","sourceNew":"  // Make sure that the use of GrowableWriter doesn't prevent from using the full int range\n  public void testIntFieldCache() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig cfg = newIndexWriterConfig(new MockAnalyzer(random()));\n    cfg.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, cfg);\n    Document doc = new Document();\n    LegacyIntField field = new LegacyIntField(\"f\", 0, Store.YES);\n    doc.add(field);\n    final int[] values = new int[TestUtil.nextInt(random(), 1, 10)];\n    for (int i = 0; i < values.length; ++i) {\n      final int v;\n      switch (random().nextInt(10)) {\n        case 0:\n          v = Integer.MIN_VALUE;\n          break;\n        case 1:\n          v = 0;\n          break;\n        case 2:\n          v = Integer.MAX_VALUE;\n          break;\n        default:\n          v = TestUtil.nextInt(random(), -10, 10);\n          break;\n      }\n      values[i] = v;\n      if (v == 0 && random().nextBoolean()) {\n        // missing\n        iw.addDocument(new Document());\n      } else {\n        field.setIntValue(v);\n        iw.addDocument(doc);\n      }\n    }\n    iw.forceMerge(1);\n    final DirectoryReader reader = iw.getReader();\n    final NumericDocValues ints = FieldCache.DEFAULT.getNumerics(getOnlyLeafReader(reader), \"f\", FieldCache.LEGACY_INT_PARSER, false);\n    for (int i = 0; i < values.length; ++i) {\n      assertEquals(values[i], ints.get(i));\n    }\n    reader.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure that the use of GrowableWriter doesn't prevent from using the full int range\n  public void testIntFieldCache() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig cfg = newIndexWriterConfig(new MockAnalyzer(random()));\n    cfg.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, cfg);\n    Document doc = new Document();\n    LegacyIntField field = new LegacyIntField(\"f\", 0, Store.YES);\n    doc.add(field);\n    final int[] values = new int[TestUtil.nextInt(random(), 1, 10)];\n    for (int i = 0; i < values.length; ++i) {\n      final int v;\n      switch (random().nextInt(10)) {\n        case 0:\n          v = Integer.MIN_VALUE;\n          break;\n        case 1:\n          v = 0;\n          break;\n        case 2:\n          v = Integer.MAX_VALUE;\n          break;\n        default:\n          v = TestUtil.nextInt(random(), -10, 10);\n          break;\n      }\n      values[i] = v;\n      if (v == 0 && random().nextBoolean()) {\n        // missing\n        iw.addDocument(new Document());\n      } else {\n        field.setIntValue(v);\n        iw.addDocument(doc);\n      }\n    }\n    iw.forceMerge(1);\n    final DirectoryReader reader = iw.getReader();\n    final NumericDocValues ints = FieldCache.DEFAULT.getNumerics(getOnlyLeafReader(reader), \"f\", FieldCache.LEGACY_INT_PARSER, false);\n    for (int i = 0; i < values.length; ++i) {\n      assertEquals(values[i], ints.get(i));\n    }\n    reader.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestLegacyFieldCache#testIntFieldCache().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestLegacyFieldCache#testIntFieldCache().mjava","sourceNew":"  // Make sure that the use of GrowableWriter doesn't prevent from using the full int range\n  public void testIntFieldCache() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig cfg = newIndexWriterConfig(new MockAnalyzer(random()));\n    cfg.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, cfg);\n    Document doc = new Document();\n    LegacyIntField field = new LegacyIntField(\"f\", 0, Store.YES);\n    doc.add(field);\n    final int[] values = new int[TestUtil.nextInt(random(), 1, 10)];\n    for (int i = 0; i < values.length; ++i) {\n      final int v;\n      switch (random().nextInt(10)) {\n        case 0:\n          v = Integer.MIN_VALUE;\n          break;\n        case 1:\n          v = 0;\n          break;\n        case 2:\n          v = Integer.MAX_VALUE;\n          break;\n        default:\n          v = TestUtil.nextInt(random(), -10, 10);\n          break;\n      }\n      values[i] = v;\n      if (v == 0 && random().nextBoolean()) {\n        // missing\n        iw.addDocument(new Document());\n      } else {\n        field.setIntValue(v);\n        iw.addDocument(doc);\n      }\n    }\n    iw.forceMerge(1);\n    final DirectoryReader reader = iw.getReader();\n    final NumericDocValues ints = FieldCache.DEFAULT.getNumerics(getOnlyLeafReader(reader), \"f\", FieldCache.LEGACY_INT_PARSER, false);\n    for (int i = 0; i < values.length; ++i) {\n      assertEquals(values[i], ints.get(i));\n    }\n    reader.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure that the use of GrowableWriter doesn't prevent from using the full int range\n  public void testIntFieldCache() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig cfg = newIndexWriterConfig(new MockAnalyzer(random()));\n    cfg.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, cfg);\n    Document doc = new Document();\n    LegacyIntField field = new LegacyIntField(\"f\", 0, Store.YES);\n    doc.add(field);\n    final int[] values = new int[TestUtil.nextInt(random(), 1, 10)];\n    for (int i = 0; i < values.length; ++i) {\n      final int v;\n      switch (random().nextInt(10)) {\n        case 0:\n          v = Integer.MIN_VALUE;\n          break;\n        case 1:\n          v = 0;\n          break;\n        case 2:\n          v = Integer.MAX_VALUE;\n          break;\n        default:\n          v = TestUtil.nextInt(random(), -10, 10);\n          break;\n      }\n      values[i] = v;\n      if (v == 0 && random().nextBoolean()) {\n        // missing\n        iw.addDocument(new Document());\n      } else {\n        field.setIntValue(v);\n        iw.addDocument(doc);\n      }\n    }\n    iw.forceMerge(1);\n    final DirectoryReader reader = iw.getReader();\n    final NumericDocValues ints = FieldCache.DEFAULT.getNumerics(getOnlyLeafReader(reader), \"f\", FieldCache.LEGACY_INT_PARSER, false);\n    for (int i = 0; i < values.length; ++i) {\n      assertEquals(values[i], ints.get(i));\n    }\n    reader.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestLegacyFieldCache#testIntFieldCache().mjava","sourceNew":null,"sourceOld":"  // Make sure that the use of GrowableWriter doesn't prevent from using the full int range\n  public void testIntFieldCache() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig cfg = newIndexWriterConfig(new MockAnalyzer(random()));\n    cfg.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, cfg);\n    Document doc = new Document();\n    LegacyIntField field = new LegacyIntField(\"f\", 0, Store.YES);\n    doc.add(field);\n    final int[] values = new int[TestUtil.nextInt(random(), 1, 10)];\n    for (int i = 0; i < values.length; ++i) {\n      final int v;\n      switch (random().nextInt(10)) {\n        case 0:\n          v = Integer.MIN_VALUE;\n          break;\n        case 1:\n          v = 0;\n          break;\n        case 2:\n          v = Integer.MAX_VALUE;\n          break;\n        default:\n          v = TestUtil.nextInt(random(), -10, 10);\n          break;\n      }\n      values[i] = v;\n      if (v == 0 && random().nextBoolean()) {\n        // missing\n        iw.addDocument(new Document());\n      } else {\n        field.setIntValue(v);\n        iw.addDocument(doc);\n      }\n    }\n    iw.forceMerge(1);\n    final DirectoryReader reader = iw.getReader();\n    final NumericDocValues ints = FieldCache.DEFAULT.getNumerics(getOnlyLeafReader(reader), \"f\", FieldCache.LEGACY_INT_PARSER, false);\n    for (int i = 0; i < values.length; ++i) {\n      assertEquals(values[i], ints.get(i));\n    }\n    reader.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["8c146731a64debc22c115bbf11ee1a060aa7ea02"],"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83870855d82aba6819217abeff5a40779dbb28b4":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","0e121d43b5a10f2df530f406f935102656e9c4e8"],"8c146731a64debc22c115bbf11ee1a060aa7ea02":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","0e121d43b5a10f2df530f406f935102656e9c4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e121d43b5a10f2df530f406f935102656e9c4e8"]},"commit2Childs":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c146731a64debc22c115bbf11ee1a060aa7ea02"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"8c146731a64debc22c115bbf11ee1a060aa7ea02":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}