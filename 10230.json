{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getSortedNumeric(FieldInfo).mjava","commits":[{"id":"a870f9917149dc600c4ad4417d615c1795de5864","date":1445975387,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getSortedNumeric(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedSetEntry ss = sortedNumerics.get(field.name);\n    if (ss.format == SORTED_SINGLE_VALUED) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      final Bits docsWithField = getLiveBits(numericEntry.missingOffset, maxDoc);\n      return DocValues.singleton(values, docsWithField);\n    } else if (ss.format == SORTED_WITH_ADDRESSES) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      final LongValues ordIndex = getOrdIndexInstance(field, ordIndexes.get(field.name));\n\n      return new SortedNumericDocValues() {\n        long startOffset;\n        long endOffset;\n\n        @Override\n        public void setDocument(int doc) {\n          startOffset = ordIndex.get(doc);\n          endOffset = ordIndex.get(doc+1L);\n        }\n\n        @Override\n        public long valueAt(int index) {\n          return values.get(startOffset + index);\n        }\n\n        @Override\n        public int count() {\n          return (int) (endOffset - startOffset);\n        }\n      };\n    } else if (ss.format == SORTED_SET_TABLE) {\n      NumericEntry entry = ords.get(field.name);\n      final LongValues ordinals = getNumeric(entry);\n\n      final long[] table = ss.table;\n      final int[] offsets = ss.tableOffsets;\n      return new SortedNumericDocValues() {\n        int startOffset;\n        int endOffset;\n\n        @Override\n        public void setDocument(int doc) {\n          final int ord = (int) ordinals.get(doc);\n          startOffset = offsets[ord];\n          endOffset = offsets[ord + 1];\n        }\n\n        @Override\n        public long valueAt(int index) {\n          return table[startOffset + index];\n        }\n\n        @Override\n        public int count() {\n          return endOffset - startOffset;\n        }\n      };\n    } else {\n      throw new AssertionError();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da47a1f45f2abb37566ea2df3253436a04f5e6fe","date":1446815076,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getSortedNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getSortedNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedSetEntry ss = sortedNumerics.get(field.name);\n    if (ss.format == SORTED_SINGLE_VALUED) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      final Bits docsWithField;\n      if (numericEntry.format == SPARSE_COMPRESSED) {\n        docsWithField = ((SparseLongValues) values).docsWithField;\n      } else {\n        docsWithField = getLiveBits(numericEntry.missingOffset, maxDoc);\n      }\n      return DocValues.singleton(values, docsWithField);\n    } else if (ss.format == SORTED_WITH_ADDRESSES) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      final LongValues ordIndex = getOrdIndexInstance(field, ordIndexes.get(field.name));\n\n      return new SortedNumericDocValues() {\n        long startOffset;\n        long endOffset;\n\n        @Override\n        public void setDocument(int doc) {\n          startOffset = ordIndex.get(doc);\n          endOffset = ordIndex.get(doc+1L);\n        }\n\n        @Override\n        public long valueAt(int index) {\n          return values.get(startOffset + index);\n        }\n\n        @Override\n        public int count() {\n          return (int) (endOffset - startOffset);\n        }\n      };\n    } else if (ss.format == SORTED_SET_TABLE) {\n      NumericEntry entry = ords.get(field.name);\n      final LongValues ordinals = getNumeric(entry);\n\n      final long[] table = ss.table;\n      final int[] offsets = ss.tableOffsets;\n      return new SortedNumericDocValues() {\n        int startOffset;\n        int endOffset;\n\n        @Override\n        public void setDocument(int doc) {\n          final int ord = (int) ordinals.get(doc);\n          startOffset = offsets[ord];\n          endOffset = offsets[ord + 1];\n        }\n\n        @Override\n        public long valueAt(int index) {\n          return table[startOffset + index];\n        }\n\n        @Override\n        public int count() {\n          return endOffset - startOffset;\n        }\n      };\n    } else {\n      throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedSetEntry ss = sortedNumerics.get(field.name);\n    if (ss.format == SORTED_SINGLE_VALUED) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      final Bits docsWithField = getLiveBits(numericEntry.missingOffset, maxDoc);\n      return DocValues.singleton(values, docsWithField);\n    } else if (ss.format == SORTED_WITH_ADDRESSES) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      final LongValues ordIndex = getOrdIndexInstance(field, ordIndexes.get(field.name));\n\n      return new SortedNumericDocValues() {\n        long startOffset;\n        long endOffset;\n\n        @Override\n        public void setDocument(int doc) {\n          startOffset = ordIndex.get(doc);\n          endOffset = ordIndex.get(doc+1L);\n        }\n\n        @Override\n        public long valueAt(int index) {\n          return values.get(startOffset + index);\n        }\n\n        @Override\n        public int count() {\n          return (int) (endOffset - startOffset);\n        }\n      };\n    } else if (ss.format == SORTED_SET_TABLE) {\n      NumericEntry entry = ords.get(field.name);\n      final LongValues ordinals = getNumeric(entry);\n\n      final long[] table = ss.table;\n      final int[] offsets = ss.tableOffsets;\n      return new SortedNumericDocValues() {\n        int startOffset;\n        int endOffset;\n\n        @Override\n        public void setDocument(int doc) {\n          final int ord = (int) ordinals.get(doc);\n          startOffset = offsets[ord];\n          endOffset = offsets[ord + 1];\n        }\n\n        @Override\n        public long valueAt(int index) {\n          return table[startOffset + index];\n        }\n\n        @Override\n        public int count() {\n          return endOffset - startOffset;\n        }\n      };\n    } else {\n      throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getSortedNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getSortedNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedSetEntry ss = sortedNumerics.get(field.name);\n    if (ss.format == SORTED_SINGLE_VALUED) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      final Bits docsWithField;\n      if (numericEntry.format == SPARSE_COMPRESSED) {\n        docsWithField = ((SparseLongValues) values).docsWithField;\n      } else {\n        docsWithField = getLiveBits(numericEntry.missingOffset, maxDoc);\n      }\n      return new SortedNumericDocValues() {\n        int docID = -1;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              break;\n            }\n            \n            if (docsWithField.get(docID)) {\n              // TODO: use .nextSetBit here, at least!!\n              break;\n            }\n          }\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n\n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n\n        @Override\n        public int docValueCount() {\n          return 1;\n        }\n\n        @Override\n        public long nextValue() {\n          return values.get(docID);\n        }\n      };\n    } else if (ss.format == SORTED_WITH_ADDRESSES) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      final LongValues ordIndex = getOrdIndexInstance(field, ordIndexes.get(field.name));\n\n      return new SortedNumericDocValues() {\n        long startOffset;\n        long endOffset;\n        int docID = -1;\n        long upto;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            startOffset = ordIndex.get(docID);\n            endOffset = ordIndex.get(docID+1L);\n            if (endOffset > startOffset) {\n              break;\n            }\n          }\n          upto = startOffset;\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n        \n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n        \n        @Override\n        public int docValueCount() {\n          return (int) (endOffset - startOffset);\n        }\n        \n        @Override\n        public long nextValue() {\n          return values.get(upto++);\n        }\n      };\n    } else if (ss.format == SORTED_SET_TABLE) {\n      NumericEntry entry = ords.get(field.name);\n      final LongValues ordinals = getNumeric(entry);\n\n      final long[] table = ss.table;\n      final int[] offsets = ss.tableOffsets;\n      return new SortedNumericDocValues() {\n        int startOffset;\n        int endOffset;\n        int docID = -1;\n        int upto;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            int ord = (int) ordinals.get(docID);\n            startOffset = offsets[ord];\n            endOffset = offsets[ord+1];\n            if (endOffset > startOffset) {\n              break;\n            }\n          }\n          upto = startOffset;\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n        \n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n\n        @Override\n        public int docValueCount() {\n          return endOffset - startOffset;\n        }\n        \n        @Override\n        public long nextValue() {\n          return table[upto++];\n        }\n      };\n    } else {\n      throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedSetEntry ss = sortedNumerics.get(field.name);\n    if (ss.format == SORTED_SINGLE_VALUED) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      final Bits docsWithField;\n      if (numericEntry.format == SPARSE_COMPRESSED) {\n        docsWithField = ((SparseLongValues) values).docsWithField;\n      } else {\n        docsWithField = getLiveBits(numericEntry.missingOffset, maxDoc);\n      }\n      return DocValues.singleton(values, docsWithField);\n    } else if (ss.format == SORTED_WITH_ADDRESSES) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      final LongValues ordIndex = getOrdIndexInstance(field, ordIndexes.get(field.name));\n\n      return new SortedNumericDocValues() {\n        long startOffset;\n        long endOffset;\n\n        @Override\n        public void setDocument(int doc) {\n          startOffset = ordIndex.get(doc);\n          endOffset = ordIndex.get(doc+1L);\n        }\n\n        @Override\n        public long valueAt(int index) {\n          return values.get(startOffset + index);\n        }\n\n        @Override\n        public int count() {\n          return (int) (endOffset - startOffset);\n        }\n      };\n    } else if (ss.format == SORTED_SET_TABLE) {\n      NumericEntry entry = ords.get(field.name);\n      final LongValues ordinals = getNumeric(entry);\n\n      final long[] table = ss.table;\n      final int[] offsets = ss.tableOffsets;\n      return new SortedNumericDocValues() {\n        int startOffset;\n        int endOffset;\n\n        @Override\n        public void setDocument(int doc) {\n          final int ord = (int) ordinals.get(doc);\n          startOffset = offsets[ord];\n          endOffset = offsets[ord + 1];\n        }\n\n        @Override\n        public long valueAt(int index) {\n          return table[startOffset + index];\n        }\n\n        @Override\n        public int count() {\n          return endOffset - startOffset;\n        }\n      };\n    } else {\n      throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getSortedNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getSortedNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedSetEntry ss = sortedNumerics.get(field.name);\n    if (ss.format == SORTED_SINGLE_VALUED) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      final Bits docsWithField;\n      if (numericEntry.format == SPARSE_COMPRESSED) {\n        docsWithField = ((SparseLongValues) values).docsWithField;\n      } else {\n        docsWithField = getLiveBits(numericEntry.missingOffset, maxDoc);\n      }\n      return new SortedNumericDocValues() {\n        int docID = -1;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              break;\n            }\n            \n            if (docsWithField.get(docID)) {\n              // TODO: use .nextSetBit here, at least!!\n              break;\n            }\n          }\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n\n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n\n        @Override\n        public int docValueCount() {\n          return 1;\n        }\n\n        @Override\n        public long nextValue() {\n          return values.get(docID);\n        }\n      };\n    } else if (ss.format == SORTED_WITH_ADDRESSES) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      final LongValues ordIndex = getOrdIndexInstance(field, ordIndexes.get(field.name));\n\n      return new SortedNumericDocValues() {\n        long startOffset;\n        long endOffset;\n        int docID = -1;\n        long upto;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            startOffset = ordIndex.get(docID);\n            endOffset = ordIndex.get(docID+1L);\n            if (endOffset > startOffset) {\n              break;\n            }\n          }\n          upto = startOffset;\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n        \n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n        \n        @Override\n        public int docValueCount() {\n          return (int) (endOffset - startOffset);\n        }\n        \n        @Override\n        public long nextValue() {\n          return values.get(upto++);\n        }\n      };\n    } else if (ss.format == SORTED_SET_TABLE) {\n      NumericEntry entry = ords.get(field.name);\n      final LongValues ordinals = getNumeric(entry);\n\n      final long[] table = ss.table;\n      final int[] offsets = ss.tableOffsets;\n      return new SortedNumericDocValues() {\n        int startOffset;\n        int endOffset;\n        int docID = -1;\n        int upto;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            int ord = (int) ordinals.get(docID);\n            startOffset = offsets[ord];\n            endOffset = offsets[ord+1];\n            if (endOffset > startOffset) {\n              break;\n            }\n          }\n          upto = startOffset;\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n        \n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n\n        @Override\n        public int docValueCount() {\n          return endOffset - startOffset;\n        }\n        \n        @Override\n        public long nextValue() {\n          return table[upto++];\n        }\n      };\n    } else {\n      throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedSetEntry ss = sortedNumerics.get(field.name);\n    if (ss.format == SORTED_SINGLE_VALUED) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      final Bits docsWithField;\n      if (numericEntry.format == SPARSE_COMPRESSED) {\n        docsWithField = ((SparseLongValues) values).docsWithField;\n      } else {\n        docsWithField = getLiveBits(numericEntry.missingOffset, maxDoc);\n      }\n      return DocValues.singleton(values, docsWithField);\n    } else if (ss.format == SORTED_WITH_ADDRESSES) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      final LongValues ordIndex = getOrdIndexInstance(field, ordIndexes.get(field.name));\n\n      return new SortedNumericDocValues() {\n        long startOffset;\n        long endOffset;\n\n        @Override\n        public void setDocument(int doc) {\n          startOffset = ordIndex.get(doc);\n          endOffset = ordIndex.get(doc+1L);\n        }\n\n        @Override\n        public long valueAt(int index) {\n          return values.get(startOffset + index);\n        }\n\n        @Override\n        public int count() {\n          return (int) (endOffset - startOffset);\n        }\n      };\n    } else if (ss.format == SORTED_SET_TABLE) {\n      NumericEntry entry = ords.get(field.name);\n      final LongValues ordinals = getNumeric(entry);\n\n      final long[] table = ss.table;\n      final int[] offsets = ss.tableOffsets;\n      return new SortedNumericDocValues() {\n        int startOffset;\n        int endOffset;\n\n        @Override\n        public void setDocument(int doc) {\n          final int ord = (int) ordinals.get(doc);\n          startOffset = offsets[ord];\n          endOffset = offsets[ord + 1];\n        }\n\n        @Override\n        public long valueAt(int index) {\n          return table[startOffset + index];\n        }\n\n        @Override\n        public int count() {\n          return endOffset - startOffset;\n        }\n      };\n    } else {\n      throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9abf8f0376991d8b97ef287f53f330a54bdbdb66","date":1475480039,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getSortedNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getSortedNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedSetEntry ss = sortedNumerics.get(field.name);\n    if (ss.format == SORTED_SINGLE_VALUED) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      if (numericEntry.format == SPARSE_COMPRESSED) {\n        SparseNumericDocValues sparseValues = ((SparseNumericDocValuesRandomAccessWrapper) values).values;\n        return new SortedNumericDocValues() {\n\n          @Override\n          public long nextValue() throws IOException {\n            return sparseValues.longValue();\n          }\n\n          @Override\n          public int docValueCount() {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return sparseValues.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return sparseValues.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return sparseValues.advance(target);\n          }\n\n          @Override\n          public long cost() {\n            return sparseValues.cost();\n          }\n\n        };\n      }\n      final Bits docsWithField = getLiveBits(numericEntry.missingOffset, maxDoc);\n      return new SortedNumericDocValues() {\n        int docID = -1;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              break;\n            }\n\n            if (docsWithField.get(docID)) {\n              // TODO: use .nextSetBit here, at least!!\n              break;\n            }\n          }\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n\n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n\n        @Override\n        public int docValueCount() {\n          return 1;\n        }\n\n        @Override\n        public long nextValue() {\n          return values.get(docID);\n        }\n      };\n    } else if (ss.format == SORTED_WITH_ADDRESSES) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      final LongValues ordIndex = getOrdIndexInstance(field, ordIndexes.get(field.name));\n\n      return new SortedNumericDocValues() {\n        long startOffset;\n        long endOffset;\n        int docID = -1;\n        long upto;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            startOffset = ordIndex.get(docID);\n            endOffset = ordIndex.get(docID+1L);\n            if (endOffset > startOffset) {\n              break;\n            }\n          }\n          upto = startOffset;\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n        \n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n        \n        @Override\n        public int docValueCount() {\n          return (int) (endOffset - startOffset);\n        }\n        \n        @Override\n        public long nextValue() {\n          return values.get(upto++);\n        }\n      };\n    } else if (ss.format == SORTED_SET_TABLE) {\n      NumericEntry entry = ords.get(field.name);\n      final LongValues ordinals = getNumeric(entry);\n\n      final long[] table = ss.table;\n      final int[] offsets = ss.tableOffsets;\n      return new SortedNumericDocValues() {\n        int startOffset;\n        int endOffset;\n        int docID = -1;\n        int upto;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            int ord = (int) ordinals.get(docID);\n            startOffset = offsets[ord];\n            endOffset = offsets[ord+1];\n            if (endOffset > startOffset) {\n              break;\n            }\n          }\n          upto = startOffset;\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n        \n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n\n        @Override\n        public int docValueCount() {\n          return endOffset - startOffset;\n        }\n        \n        @Override\n        public long nextValue() {\n          return table[upto++];\n        }\n      };\n    } else {\n      throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedSetEntry ss = sortedNumerics.get(field.name);\n    if (ss.format == SORTED_SINGLE_VALUED) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      final Bits docsWithField;\n      if (numericEntry.format == SPARSE_COMPRESSED) {\n        docsWithField = ((SparseLongValues) values).docsWithField;\n      } else {\n        docsWithField = getLiveBits(numericEntry.missingOffset, maxDoc);\n      }\n      return new SortedNumericDocValues() {\n        int docID = -1;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              break;\n            }\n            \n            if (docsWithField.get(docID)) {\n              // TODO: use .nextSetBit here, at least!!\n              break;\n            }\n          }\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n\n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n\n        @Override\n        public int docValueCount() {\n          return 1;\n        }\n\n        @Override\n        public long nextValue() {\n          return values.get(docID);\n        }\n      };\n    } else if (ss.format == SORTED_WITH_ADDRESSES) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      final LongValues ordIndex = getOrdIndexInstance(field, ordIndexes.get(field.name));\n\n      return new SortedNumericDocValues() {\n        long startOffset;\n        long endOffset;\n        int docID = -1;\n        long upto;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            startOffset = ordIndex.get(docID);\n            endOffset = ordIndex.get(docID+1L);\n            if (endOffset > startOffset) {\n              break;\n            }\n          }\n          upto = startOffset;\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n        \n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n        \n        @Override\n        public int docValueCount() {\n          return (int) (endOffset - startOffset);\n        }\n        \n        @Override\n        public long nextValue() {\n          return values.get(upto++);\n        }\n      };\n    } else if (ss.format == SORTED_SET_TABLE) {\n      NumericEntry entry = ords.get(field.name);\n      final LongValues ordinals = getNumeric(entry);\n\n      final long[] table = ss.table;\n      final int[] offsets = ss.tableOffsets;\n      return new SortedNumericDocValues() {\n        int startOffset;\n        int endOffset;\n        int docID = -1;\n        int upto;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            int ord = (int) ordinals.get(docID);\n            startOffset = offsets[ord];\n            endOffset = offsets[ord+1];\n            if (endOffset > startOffset) {\n              break;\n            }\n          }\n          upto = startOffset;\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n        \n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n\n        @Override\n        public int docValueCount() {\n          return endOffset - startOffset;\n        }\n        \n        @Override\n        public long nextValue() {\n          return table[upto++];\n        }\n      };\n    } else {\n      throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3607fe579ac3eb5d35b8dc39dffa376491f417f0","date":1475480207,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getSortedNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getSortedNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedSetEntry ss = sortedNumerics.get(field.name);\n    if (ss.format == SORTED_SINGLE_VALUED) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      if (numericEntry.format == SPARSE_COMPRESSED) {\n        SparseNumericDocValues sparseValues = ((SparseNumericDocValuesRandomAccessWrapper) values).values;\n        return new SortedNumericDocValues() {\n\n          @Override\n          public long nextValue() throws IOException {\n            return sparseValues.longValue();\n          }\n\n          @Override\n          public int docValueCount() {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return sparseValues.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return sparseValues.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return sparseValues.advance(target);\n          }\n\n          @Override\n          public long cost() {\n            return sparseValues.cost();\n          }\n\n        };\n      }\n      final Bits docsWithField = getLiveBits(numericEntry.missingOffset, maxDoc);\n      return new SortedNumericDocValues() {\n        int docID = -1;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              break;\n            }\n\n            if (docsWithField.get(docID)) {\n              // TODO: use .nextSetBit here, at least!!\n              break;\n            }\n          }\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n\n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n\n        @Override\n        public int docValueCount() {\n          return 1;\n        }\n\n        @Override\n        public long nextValue() {\n          return values.get(docID);\n        }\n      };\n    } else if (ss.format == SORTED_WITH_ADDRESSES) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      final LongValues ordIndex = getOrdIndexInstance(field, ordIndexes.get(field.name));\n\n      return new SortedNumericDocValues() {\n        long startOffset;\n        long endOffset;\n        int docID = -1;\n        long upto;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            startOffset = ordIndex.get(docID);\n            endOffset = ordIndex.get(docID+1L);\n            if (endOffset > startOffset) {\n              break;\n            }\n          }\n          upto = startOffset;\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n        \n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n        \n        @Override\n        public int docValueCount() {\n          return (int) (endOffset - startOffset);\n        }\n        \n        @Override\n        public long nextValue() {\n          return values.get(upto++);\n        }\n      };\n    } else if (ss.format == SORTED_SET_TABLE) {\n      NumericEntry entry = ords.get(field.name);\n      final LongValues ordinals = getNumeric(entry);\n\n      final long[] table = ss.table;\n      final int[] offsets = ss.tableOffsets;\n      return new SortedNumericDocValues() {\n        int startOffset;\n        int endOffset;\n        int docID = -1;\n        int upto;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            int ord = (int) ordinals.get(docID);\n            startOffset = offsets[ord];\n            endOffset = offsets[ord+1];\n            if (endOffset > startOffset) {\n              break;\n            }\n          }\n          upto = startOffset;\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n        \n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n\n        @Override\n        public int docValueCount() {\n          return endOffset - startOffset;\n        }\n        \n        @Override\n        public long nextValue() {\n          return table[upto++];\n        }\n      };\n    } else {\n      throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedSetEntry ss = sortedNumerics.get(field.name);\n    if (ss.format == SORTED_SINGLE_VALUED) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      final Bits docsWithField;\n      if (numericEntry.format == SPARSE_COMPRESSED) {\n        docsWithField = ((SparseLongValues) values).docsWithField;\n      } else {\n        docsWithField = getLiveBits(numericEntry.missingOffset, maxDoc);\n      }\n      return new SortedNumericDocValues() {\n        int docID = -1;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              break;\n            }\n            \n            if (docsWithField.get(docID)) {\n              // TODO: use .nextSetBit here, at least!!\n              break;\n            }\n          }\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n\n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n\n        @Override\n        public int docValueCount() {\n          return 1;\n        }\n\n        @Override\n        public long nextValue() {\n          return values.get(docID);\n        }\n      };\n    } else if (ss.format == SORTED_WITH_ADDRESSES) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      final LongValues ordIndex = getOrdIndexInstance(field, ordIndexes.get(field.name));\n\n      return new SortedNumericDocValues() {\n        long startOffset;\n        long endOffset;\n        int docID = -1;\n        long upto;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            startOffset = ordIndex.get(docID);\n            endOffset = ordIndex.get(docID+1L);\n            if (endOffset > startOffset) {\n              break;\n            }\n          }\n          upto = startOffset;\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n        \n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n        \n        @Override\n        public int docValueCount() {\n          return (int) (endOffset - startOffset);\n        }\n        \n        @Override\n        public long nextValue() {\n          return values.get(upto++);\n        }\n      };\n    } else if (ss.format == SORTED_SET_TABLE) {\n      NumericEntry entry = ords.get(field.name);\n      final LongValues ordinals = getNumeric(entry);\n\n      final long[] table = ss.table;\n      final int[] offsets = ss.tableOffsets;\n      return new SortedNumericDocValues() {\n        int startOffset;\n        int endOffset;\n        int docID = -1;\n        int upto;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            int ord = (int) ordinals.get(docID);\n            startOffset = offsets[ord];\n            endOffset = offsets[ord+1];\n            if (endOffset > startOffset) {\n              break;\n            }\n          }\n          upto = startOffset;\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n        \n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n\n        @Override\n        public int docValueCount() {\n          return endOffset - startOffset;\n        }\n        \n        @Override\n        public long nextValue() {\n          return table[upto++];\n        }\n      };\n    } else {\n      throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","date":1475755647,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getSortedNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getSortedNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedSetEntry ss = sortedNumerics.get(field.name);\n    if (ss.format == SORTED_SINGLE_VALUED) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      if (numericEntry.format == SPARSE_COMPRESSED) {\n        SparseNumericDocValues sparseValues = ((SparseNumericDocValuesRandomAccessWrapper) values).values;\n        return new SortedNumericDocValues() {\n\n          @Override\n          public long nextValue() throws IOException {\n            return sparseValues.longValue();\n          }\n\n          @Override\n          public int docValueCount() {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return sparseValues.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return sparseValues.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return sparseValues.advance(target);\n          }\n\n          @Override\n          public long cost() {\n            return sparseValues.cost();\n          }\n\n        };\n      }\n      final Bits docsWithField = getLiveBits(numericEntry.missingOffset, maxDoc);\n      return new SortedNumericDocValues() {\n        int docID = -1;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              break;\n            }\n\n            if (docsWithField.get(docID)) {\n              // TODO: use .nextSetBit here, at least!!\n              break;\n            }\n          }\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n\n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n\n        @Override\n        public int docValueCount() {\n          return 1;\n        }\n\n        @Override\n        public long nextValue() {\n          return values.get(docID);\n        }\n      };\n    } else if (ss.format == SORTED_WITH_ADDRESSES) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      final LongValues ordIndex = getOrdIndexInstance(field, ordIndexes.get(field.name));\n\n      return new SortedNumericDocValues() {\n        long startOffset;\n        long endOffset;\n        int docID = -1;\n        long upto;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            startOffset = ordIndex.get(docID);\n            endOffset = ordIndex.get(docID+1L);\n            if (endOffset > startOffset) {\n              break;\n            }\n          }\n          upto = startOffset;\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n        \n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n        \n        @Override\n        public int docValueCount() {\n          return (int) (endOffset - startOffset);\n        }\n        \n        @Override\n        public long nextValue() {\n          return values.get(upto++);\n        }\n      };\n    } else if (ss.format == SORTED_SET_TABLE) {\n      NumericEntry entry = ords.get(field.name);\n      final LongValues ordinals = getNumeric(entry);\n\n      final long[] table = ss.table;\n      final int[] offsets = ss.tableOffsets;\n      return new SortedNumericDocValues() {\n        int startOffset;\n        int endOffset;\n        int docID = -1;\n        int upto;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            int ord = (int) ordinals.get(docID);\n            startOffset = offsets[ord];\n            endOffset = offsets[ord+1];\n            if (endOffset > startOffset) {\n              break;\n            }\n          }\n          upto = startOffset;\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n        \n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n\n        @Override\n        public int docValueCount() {\n          return endOffset - startOffset;\n        }\n        \n        @Override\n        public long nextValue() {\n          return table[upto++];\n        }\n      };\n    } else {\n      throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedSetEntry ss = sortedNumerics.get(field.name);\n    if (ss.format == SORTED_SINGLE_VALUED) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      if (numericEntry.format == SPARSE_COMPRESSED) {\n        SparseNumericDocValues sparseValues = ((SparseNumericDocValuesRandomAccessWrapper) values).values;\n        return new SortedNumericDocValues() {\n\n          @Override\n          public long nextValue() throws IOException {\n            return sparseValues.longValue();\n          }\n\n          @Override\n          public int docValueCount() {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return sparseValues.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return sparseValues.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return sparseValues.advance(target);\n          }\n\n          @Override\n          public long cost() {\n            return sparseValues.cost();\n          }\n\n        };\n      }\n      final Bits docsWithField = getLiveBits(numericEntry.missingOffset, maxDoc);\n      return new SortedNumericDocValues() {\n        int docID = -1;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              break;\n            }\n\n            if (docsWithField.get(docID)) {\n              // TODO: use .nextSetBit here, at least!!\n              break;\n            }\n          }\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n\n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n\n        @Override\n        public int docValueCount() {\n          return 1;\n        }\n\n        @Override\n        public long nextValue() {\n          return values.get(docID);\n        }\n      };\n    } else if (ss.format == SORTED_WITH_ADDRESSES) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      final LongValues ordIndex = getOrdIndexInstance(field, ordIndexes.get(field.name));\n\n      return new SortedNumericDocValues() {\n        long startOffset;\n        long endOffset;\n        int docID = -1;\n        long upto;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            startOffset = ordIndex.get(docID);\n            endOffset = ordIndex.get(docID+1L);\n            if (endOffset > startOffset) {\n              break;\n            }\n          }\n          upto = startOffset;\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n        \n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n        \n        @Override\n        public int docValueCount() {\n          return (int) (endOffset - startOffset);\n        }\n        \n        @Override\n        public long nextValue() {\n          return values.get(upto++);\n        }\n      };\n    } else if (ss.format == SORTED_SET_TABLE) {\n      NumericEntry entry = ords.get(field.name);\n      final LongValues ordinals = getNumeric(entry);\n\n      final long[] table = ss.table;\n      final int[] offsets = ss.tableOffsets;\n      return new SortedNumericDocValues() {\n        int startOffset;\n        int endOffset;\n        int docID = -1;\n        int upto;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            int ord = (int) ordinals.get(docID);\n            startOffset = offsets[ord];\n            endOffset = offsets[ord+1];\n            if (endOffset > startOffset) {\n              break;\n            }\n          }\n          upto = startOffset;\n          return docID;\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target >= maxDoc) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          } else {\n            docID = target-1;\n            return nextDoc();\n          }\n        }\n        \n        @Override\n        public long cost() {\n          // TODO\n          return 0;\n        }\n\n        @Override\n        public int docValueCount() {\n          return endOffset - startOffset;\n        }\n        \n        @Override\n        public long nextValue() {\n          return table[upto++];\n        }\n      };\n    } else {\n      throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getSortedNumeric(FieldInfo).mjava","sourceNew":null,"sourceOld":"  @Override\n  public SortedNumericDocValues getSortedNumeric(FieldInfo field) throws IOException {\n    SortedSetEntry ss = sortedNumerics.get(field.name);\n    if (ss.format == SORTED_SINGLE_VALUED) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      final Bits docsWithField;\n      if (numericEntry.format == SPARSE_COMPRESSED) {\n        docsWithField = ((SparseLongValues) values).docsWithField;\n      } else {\n        docsWithField = getLiveBits(numericEntry.missingOffset, maxDoc);\n      }\n      return DocValues.singleton(values, docsWithField);\n    } else if (ss.format == SORTED_WITH_ADDRESSES) {\n      NumericEntry numericEntry = numerics.get(field.name);\n      final LongValues values = getNumeric(numericEntry);\n      final LongValues ordIndex = getOrdIndexInstance(field, ordIndexes.get(field.name));\n\n      return new SortedNumericDocValues() {\n        long startOffset;\n        long endOffset;\n\n        @Override\n        public void setDocument(int doc) {\n          startOffset = ordIndex.get(doc);\n          endOffset = ordIndex.get(doc+1L);\n        }\n\n        @Override\n        public long valueAt(int index) {\n          return values.get(startOffset + index);\n        }\n\n        @Override\n        public int count() {\n          return (int) (endOffset - startOffset);\n        }\n      };\n    } else if (ss.format == SORTED_SET_TABLE) {\n      NumericEntry entry = ords.get(field.name);\n      final LongValues ordinals = getNumeric(entry);\n\n      final long[] table = ss.table;\n      final int[] offsets = ss.tableOffsets;\n      return new SortedNumericDocValues() {\n        int startOffset;\n        int endOffset;\n\n        @Override\n        public void setDocument(int doc) {\n          final int ord = (int) ordinals.get(doc);\n          startOffset = offsets[ord];\n          endOffset = offsets[ord + 1];\n        }\n\n        @Override\n        public long valueAt(int index) {\n          return table[startOffset + index];\n        }\n\n        @Override\n        public int count() {\n          return endOffset - startOffset;\n        }\n      };\n    } else {\n      throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["3607fe579ac3eb5d35b8dc39dffa376491f417f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["da47a1f45f2abb37566ea2df3253436a04f5e6fe","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["da47a1f45f2abb37566ea2df3253436a04f5e6fe"],"da47a1f45f2abb37566ea2df3253436a04f5e6fe":["a870f9917149dc600c4ad4417d615c1795de5864"],"9abf8f0376991d8b97ef287f53f330a54bdbdb66":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"3607fe579ac3eb5d35b8dc39dffa376491f417f0":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","9abf8f0376991d8b97ef287f53f330a54bdbdb66"],"a870f9917149dc600c4ad4417d615c1795de5864":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["da47a1f45f2abb37566ea2df3253436a04f5e6fe","7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"]},"commit2Childs":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a870f9917149dc600c4ad4417d615c1795de5864"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["9abf8f0376991d8b97ef287f53f330a54bdbdb66","3607fe579ac3eb5d35b8dc39dffa376491f417f0"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"da47a1f45f2abb37566ea2df3253436a04f5e6fe":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9abf8f0376991d8b97ef287f53f330a54bdbdb66":["3607fe579ac3eb5d35b8dc39dffa376491f417f0"],"3607fe579ac3eb5d35b8dc39dffa376491f417f0":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"a870f9917149dc600c4ad4417d615c1795de5864":["da47a1f45f2abb37566ea2df3253436a04f5e6fe"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}