{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#stressUpdateSameDocumentWithMergeOnX(boolean).mjava","commits":[{"id":"3f354ba79a5a3e8491ec2953f14f365a02c058ac","date":1598293148,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#stressUpdateSameDocumentWithMergeOnX(boolean).mjava","pathOld":"/dev/null","sourceNew":"  void stressUpdateSameDocumentWithMergeOnX(boolean useGetReader) throws IOException, InterruptedException {\n    try (Directory directory = newDirectory()) {\n      try (RandomIndexWriter writer = new RandomIndexWriter(random(), directory, newIndexWriterConfig()\n          .setMergePolicy(new MergeOnXMergePolicy(newMergePolicy(), useGetReader ? MergeTrigger.GET_READER : MergeTrigger.COMMIT))\n          .setMaxFullFlushMergeWaitMillis(10 + random().nextInt(2000))\n          .setSoftDeletesField(\"soft_delete\")\n          .setMergeScheduler(new ConcurrentMergeScheduler()))) {\n        Document d1 = new Document();\n        d1.add(new StringField(\"id\", \"1\", Field.Store.NO));\n        writer.updateDocument(new Term(\"id\", \"1\"), d1);\n        writer.commit();\n\n        AtomicInteger iters = new AtomicInteger(100 + random().nextInt(TEST_NIGHTLY ? 5000 : 1000));\n        AtomicInteger numFullFlushes = new AtomicInteger(10 + random().nextInt(TEST_NIGHTLY ? 500 : 100));\n        AtomicBoolean done = new AtomicBoolean(false);\n        Thread[] threads = new Thread[1 + random().nextInt(4)];\n        for (int i = 0; i < threads.length; i++) {\n          Thread t = new Thread(() -> {\n            try {\n              while (iters.decrementAndGet() > 0 || numFullFlushes.get() > 0) {\n                writer.updateDocument(new Term(\"id\", \"1\"), d1);\n                if (random().nextBoolean()) {\n                  writer.addDocument(new Document());\n                }\n              }\n            } catch (Exception e) {\n              throw new AssertionError(e);\n            } finally {\n              done.set(true);\n            }\n\n          });\n          t.start();\n          threads[i] = t;\n        }\n        try {\n          while (done.get() == false) {\n            if (useGetReader) {\n              try (DirectoryReader reader = writer.getReader()) {\n                assertEquals(1, new IndexSearcher(reader).search(new TermQuery(new Term(\"id\", \"1\")), 10).totalHits.value);\n              }\n            } else {\n              if (random().nextBoolean()) {\n                writer.commit();\n              }\n              try (DirectoryReader open = new SoftDeletesDirectoryReaderWrapper(DirectoryReader.open(directory), \"___soft_deletes\")) {\n                assertEquals(1, new IndexSearcher(open).search(new TermQuery(new Term(\"id\", \"1\")), 10).totalHits.value);\n              }\n            }\n            numFullFlushes.decrementAndGet();\n          }\n        } finally {\n          numFullFlushes.set(0);\n          for (Thread t : threads) {\n            t.join();\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3f354ba79a5a3e8491ec2953f14f365a02c058ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f354ba79a5a3e8491ec2953f14f365a02c058ac"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3f354ba79a5a3e8491ec2953f14f365a02c058ac"],"3f354ba79a5a3e8491ec2953f14f365a02c058ac":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}