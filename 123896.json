{"path":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTaskTest#testMultiThreaded().mjava","commits":[{"id":"1b0dae17ca94b6f60e3ba756a14fe94b3d9a20f9","date":1272391185,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTaskTest#testMultiThreaded().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultiThreaded() throws Exception {\n    File file = new File(getWorkDir(), \"one-line\");\n    PerfRunData runData = createPerfRunData(file, false, null, ThreadingDocMaker.class.getName());\n    final WriteLineDocTask wldt = new WriteLineDocTask(runData);\n    Thread[] threads = new Thread[10];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"t\" + i) {\n        @Override\n        public void run() {\n          try {\n            wldt.doLogic();\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    for (Thread t : threads) t.join();\n    \n    wldt.close();\n    \n    Set<String> ids = new HashSet<String>();\n    BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(file), \"utf-8\"));\n    try {\n      for (int i = 0; i < threads.length; i++) {\n        String line = br.readLine();\n        String[] parts = line.split(Character.toString(WriteLineDocTask.SEP));\n        assertEquals(3, parts.length);\n        // check that all thread names written are the same in the same line\n        String tname = parts[0].substring(parts[0].indexOf('_'));\n        ids.add(tname);\n        assertEquals(tname, parts[1].substring(parts[1].indexOf('_')));\n        assertEquals(tname, parts[2].substring(parts[2].indexOf('_')));\n      }\n      // only threads.length lines should exist\n      assertNull(br.readLine());\n      assertEquals(threads.length, ids.size());\n    } finally {\n      br.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTaskTest#testMultiThreaded().mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTaskTest#testMultiThreaded().mjava","sourceNew":"  public void testMultiThreaded() throws Exception {\n    File file = new File(getWorkDir(), \"one-line\");\n    PerfRunData runData = createPerfRunData(file, false, null, ThreadingDocMaker.class.getName());\n    final WriteLineDocTask wldt = new WriteLineDocTask(runData);\n    Thread[] threads = new Thread[10];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"t\" + i) {\n        @Override\n        public void run() {\n          try {\n            wldt.doLogic();\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    for (Thread t : threads) t.join();\n    \n    wldt.close();\n    \n    Set<String> ids = new HashSet<String>();\n    BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(file), \"utf-8\"));\n    try {\n      for (int i = 0; i < threads.length; i++) {\n        String line = br.readLine();\n        String[] parts = line.split(Character.toString(WriteLineDocTask.SEP));\n        assertEquals(3, parts.length);\n        // check that all thread names written are the same in the same line\n        String tname = parts[0].substring(parts[0].indexOf('_'));\n        ids.add(tname);\n        assertEquals(tname, parts[1].substring(parts[1].indexOf('_')));\n        assertEquals(tname, parts[2].substring(parts[2].indexOf('_')));\n      }\n      // only threads.length lines should exist\n      assertNull(br.readLine());\n      assertEquals(threads.length, ids.size());\n    } finally {\n      br.close();\n    }\n  }\n\n","sourceOld":"  public void testMultiThreaded() throws Exception {\n    File file = new File(getWorkDir(), \"one-line\");\n    PerfRunData runData = createPerfRunData(file, false, null, ThreadingDocMaker.class.getName());\n    final WriteLineDocTask wldt = new WriteLineDocTask(runData);\n    Thread[] threads = new Thread[10];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"t\" + i) {\n        @Override\n        public void run() {\n          try {\n            wldt.doLogic();\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    for (Thread t : threads) t.join();\n    \n    wldt.close();\n    \n    Set<String> ids = new HashSet<String>();\n    BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(file), \"utf-8\"));\n    try {\n      for (int i = 0; i < threads.length; i++) {\n        String line = br.readLine();\n        String[] parts = line.split(Character.toString(WriteLineDocTask.SEP));\n        assertEquals(3, parts.length);\n        // check that all thread names written are the same in the same line\n        String tname = parts[0].substring(parts[0].indexOf('_'));\n        ids.add(tname);\n        assertEquals(tname, parts[1].substring(parts[1].indexOf('_')));\n        assertEquals(tname, parts[2].substring(parts[2].indexOf('_')));\n      }\n      // only threads.length lines should exist\n      assertNull(br.readLine());\n      assertEquals(threads.length, ids.size());\n    } finally {\n      br.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTaskTest#testMultiThreaded().mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTaskTest#testMultiThreaded().mjava","sourceNew":"  public void testMultiThreaded() throws Exception {\n    File file = new File(getWorkDir(), \"one-line\");\n    PerfRunData runData = createPerfRunData(file, false, null, ThreadingDocMaker.class.getName());\n    final WriteLineDocTask wldt = new WriteLineDocTask(runData);\n    Thread[] threads = new Thread[10];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"t\" + i) {\n        @Override\n        public void run() {\n          try {\n            wldt.doLogic();\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    for (Thread t : threads) t.join();\n    \n    wldt.close();\n    \n    Set<String> ids = new HashSet<String>();\n    BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(file), \"utf-8\"));\n    try {\n      for (int i = 0; i < threads.length; i++) {\n        String line = br.readLine();\n        String[] parts = line.split(Character.toString(WriteLineDocTask.SEP));\n        assertEquals(3, parts.length);\n        // check that all thread names written are the same in the same line\n        String tname = parts[0].substring(parts[0].indexOf('_'));\n        ids.add(tname);\n        assertEquals(tname, parts[1].substring(parts[1].indexOf('_')));\n        assertEquals(tname, parts[2].substring(parts[2].indexOf('_')));\n      }\n      // only threads.length lines should exist\n      assertNull(br.readLine());\n      assertEquals(threads.length, ids.size());\n    } finally {\n      br.close();\n    }\n  }\n\n","sourceOld":"  public void testMultiThreaded() throws Exception {\n    File file = new File(getWorkDir(), \"one-line\");\n    PerfRunData runData = createPerfRunData(file, false, null, ThreadingDocMaker.class.getName());\n    final WriteLineDocTask wldt = new WriteLineDocTask(runData);\n    Thread[] threads = new Thread[10];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"t\" + i) {\n        @Override\n        public void run() {\n          try {\n            wldt.doLogic();\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    for (Thread t : threads) t.join();\n    \n    wldt.close();\n    \n    Set<String> ids = new HashSet<String>();\n    BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(file), \"utf-8\"));\n    try {\n      for (int i = 0; i < threads.length; i++) {\n        String line = br.readLine();\n        String[] parts = line.split(Character.toString(WriteLineDocTask.SEP));\n        assertEquals(3, parts.length);\n        // check that all thread names written are the same in the same line\n        String tname = parts[0].substring(parts[0].indexOf('_'));\n        ids.add(tname);\n        assertEquals(tname, parts[1].substring(parts[1].indexOf('_')));\n        assertEquals(tname, parts[2].substring(parts[2].indexOf('_')));\n      }\n      // only threads.length lines should exist\n      assertNull(br.readLine());\n      assertEquals(threads.length, ids.size());\n    } finally {\n      br.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTaskTest#testMultiThreaded().mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTaskTest#testMultiThreaded().mjava","sourceNew":"  public void testMultiThreaded() throws Exception {\n    File file = new File(getWorkDir(), \"one-line\");\n    PerfRunData runData = createPerfRunData(file, false, null, ThreadingDocMaker.class.getName());\n    final WriteLineDocTask wldt = new WriteLineDocTask(runData);\n    Thread[] threads = new Thread[10];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"t\" + i) {\n        @Override\n        public void run() {\n          try {\n            wldt.doLogic();\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    for (Thread t : threads) t.join();\n    \n    wldt.close();\n    \n    Set<String> ids = new HashSet<String>();\n    BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(file), \"utf-8\"));\n    try {\n      for (int i = 0; i < threads.length; i++) {\n        String line = br.readLine();\n        String[] parts = line.split(Character.toString(WriteLineDocTask.SEP));\n        assertEquals(3, parts.length);\n        // check that all thread names written are the same in the same line\n        String tname = parts[0].substring(parts[0].indexOf('_'));\n        ids.add(tname);\n        assertEquals(tname, parts[1].substring(parts[1].indexOf('_')));\n        assertEquals(tname, parts[2].substring(parts[2].indexOf('_')));\n      }\n      // only threads.length lines should exist\n      assertNull(br.readLine());\n      assertEquals(threads.length, ids.size());\n    } finally {\n      br.close();\n    }\n  }\n\n","sourceOld":"  public void testMultiThreaded() throws Exception {\n    File file = new File(getWorkDir(), \"one-line\");\n    PerfRunData runData = createPerfRunData(file, false, null, ThreadingDocMaker.class.getName());\n    final WriteLineDocTask wldt = new WriteLineDocTask(runData);\n    Thread[] threads = new Thread[10];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new Thread(\"t\" + i) {\n        @Override\n        public void run() {\n          try {\n            wldt.doLogic();\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n    }\n    \n    for (Thread t : threads) t.start();\n    for (Thread t : threads) t.join();\n    \n    wldt.close();\n    \n    Set<String> ids = new HashSet<String>();\n    BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(file), \"utf-8\"));\n    try {\n      for (int i = 0; i < threads.length; i++) {\n        String line = br.readLine();\n        String[] parts = line.split(Character.toString(WriteLineDocTask.SEP));\n        assertEquals(3, parts.length);\n        // check that all thread names written are the same in the same line\n        String tname = parts[0].substring(parts[0].indexOf('_'));\n        ids.add(tname);\n        assertEquals(tname, parts[1].substring(parts[1].indexOf('_')));\n        assertEquals(tname, parts[2].substring(parts[2].indexOf('_')));\n      }\n      // only threads.length lines should exist\n      assertNull(br.readLine());\n      assertEquals(threads.length, ids.size());\n    } finally {\n      br.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["1b0dae17ca94b6f60e3ba756a14fe94b3d9a20f9","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["1b0dae17ca94b6f60e3ba756a14fe94b3d9a20f9"],"1b0dae17ca94b6f60e3ba756a14fe94b3d9a20f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["1b0dae17ca94b6f60e3ba756a14fe94b3d9a20f9","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1b0dae17ca94b6f60e3ba756a14fe94b3d9a20f9":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1b0dae17ca94b6f60e3ba756a14fe94b3d9a20f9"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}