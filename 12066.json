{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#fromPolygon(Polygon,boolean).mjava","commits":[{"id":"7593e6c5cc33e73fa12f7d1b0035d218d3a36309","date":1459810619,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#fromPolygon(Polygon,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n    * Convert a Polygon object into a GeoPolygon.\n    * This method uses\n    * @param polygon is the Polygon object.\n    * @param reverseMe is true if the order of the points should be reversed.\n    * @return the GeoPolygon.\n    */\n  protected static GeoPolygon fromPolygon(final Polygon polygon, final boolean reverseMe) {\n    // First, assemble the \"holes\".  The geo3d convention is to use the same polygon sense on the inner ring as the\n    // outer ring, so we process these recursively with reverseMe flipped.\n    final Polygon[] theHoles = polygon.getHoles();\n    final List<GeoPolygon> holeList = new ArrayList<>(theHoles.length);\n    for (final Polygon hole : theHoles) {\n      holeList.add(fromPolygon(hole, !reverseMe));\n    }\n    // Now do the polygon itself\n    final double[] polyLats = polygon.getPolyLats();\n    final double[] polyLons = polygon.getPolyLons();\n    \n    // I presume the arguments have already been checked\n    final List<GeoPoint> points = new ArrayList<>(polyLats.length-1);\n    // We skip the last point anyway because the API requires it to be repeated, and geo3d doesn't repeat it.\n    for (int i = 0; i < polyLats.length - 1; i++) {\n      if (reverseMe) {\n        points.add(new GeoPoint(PlanetModel.WGS84, fromDegrees(polyLats[i]), fromDegrees(polyLons[i])));\n      } else {\n        final int index = polyLats.length - 2 - i;\n        points.add(new GeoPoint(PlanetModel.WGS84, fromDegrees(polyLats[index]), fromDegrees(polyLons[index])));\n      }\n    }\n    return GeoPolygonFactory.makeGeoPolygon(PlanetModel.WGS84, points, holeList);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09af2c9610ce53a4b25fd99344299b40318a4a1a","date":1459876565,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#fromPolygon(Polygon,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n    * Convert a Polygon object into a GeoPolygon.\n    * This method uses\n    * @param polygon is the Polygon object.\n    * @param reverseMe is true if the order of the points should be reversed.\n    * @return the GeoPolygon.\n    */\n  protected static GeoPolygon fromPolygon(final Polygon polygon, final boolean reverseMe) {\n    // First, assemble the \"holes\".  The geo3d convention is to use the same polygon sense on the inner ring as the\n    // outer ring, so we process these recursively with reverseMe flipped.\n    final Polygon[] theHoles = polygon.getHoles();\n    final List<GeoPolygon> holeList = new ArrayList<>(theHoles.length);\n    for (final Polygon hole : theHoles) {\n      holeList.add(fromPolygon(hole, !reverseMe));\n    }\n    // Now do the polygon itself\n    final double[] polyLats = polygon.getPolyLats();\n    final double[] polyLons = polygon.getPolyLons();\n    \n    // I presume the arguments have already been checked\n    final List<GeoPoint> points = new ArrayList<>(polyLats.length-1);\n    // We skip the last point anyway because the API requires it to be repeated, and geo3d doesn't repeat it.\n    for (int i = 0; i < polyLats.length - 1; i++) {\n      if (reverseMe) {\n        points.add(new GeoPoint(PlanetModel.WGS84, fromDegrees(polyLats[i]), fromDegrees(polyLons[i])));\n      } else {\n        final int index = polyLats.length - 2 - i;\n        points.add(new GeoPoint(PlanetModel.WGS84, fromDegrees(polyLats[index]), fromDegrees(polyLons[index])));\n      }\n    }\n    return GeoPolygonFactory.makeGeoPolygon(PlanetModel.WGS84, points, holeList);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa76b98015a97f0eca94f0f11fd1b6975838c3ee","date":1461000501,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#fromPolygon(Polygon,boolean).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#fromPolygon(Polygon,boolean).mjava","sourceNew":"  /**\n    * Convert a Polygon object into a GeoPolygon.\n    * This method uses\n    * @param polygon is the Polygon object.\n    * @param reverseMe is true if the order of the points should be reversed.\n    * @return the GeoPolygon.\n    */\n  protected static GeoPolygon fromPolygon(final Polygon polygon, final boolean reverseMe) {\n    // First, assemble the \"holes\".  The geo3d convention is to use the same polygon sense on the inner ring as the\n    // outer ring, so we process these recursively with reverseMe flipped.\n    final Polygon[] theHoles = polygon.getHoles();\n    final List<GeoPolygon> holeList = new ArrayList<>(theHoles.length);\n    for (final Polygon hole : theHoles) {\n      holeList.add(fromPolygon(hole, !reverseMe));\n    }\n    \n    // Now do the polygon itself\n    final double[] polyLats = polygon.getPolyLats();\n    final double[] polyLons = polygon.getPolyLons();\n    \n    // I presume the arguments have already been checked\n    final List<GeoPoint> points = new ArrayList<>(polyLats.length-1);\n    // We skip the last point anyway because the API requires it to be repeated, and geo3d doesn't repeat it.\n    for (int i = 0; i < polyLats.length - 1; i++) {\n      if (reverseMe) {\n        points.add(new GeoPoint(PlanetModel.WGS84, fromDegrees(polyLats[i]), fromDegrees(polyLons[i])));\n      } else {\n        final int index = polyLats.length - 2 - i;\n        points.add(new GeoPoint(PlanetModel.WGS84, fromDegrees(polyLats[index]), fromDegrees(polyLons[index])));\n      }\n    }\n    return GeoPolygonFactory.makeGeoPolygon(PlanetModel.WGS84, points, holeList);\n  }\n\n","sourceOld":"  /**\n    * Convert a Polygon object into a GeoPolygon.\n    * This method uses\n    * @param polygon is the Polygon object.\n    * @param reverseMe is true if the order of the points should be reversed.\n    * @return the GeoPolygon.\n    */\n  protected static GeoPolygon fromPolygon(final Polygon polygon, final boolean reverseMe) {\n    // First, assemble the \"holes\".  The geo3d convention is to use the same polygon sense on the inner ring as the\n    // outer ring, so we process these recursively with reverseMe flipped.\n    final Polygon[] theHoles = polygon.getHoles();\n    final List<GeoPolygon> holeList = new ArrayList<>(theHoles.length);\n    for (final Polygon hole : theHoles) {\n      holeList.add(fromPolygon(hole, !reverseMe));\n    }\n    // Now do the polygon itself\n    final double[] polyLats = polygon.getPolyLats();\n    final double[] polyLons = polygon.getPolyLons();\n    \n    // I presume the arguments have already been checked\n    final List<GeoPoint> points = new ArrayList<>(polyLats.length-1);\n    // We skip the last point anyway because the API requires it to be repeated, and geo3d doesn't repeat it.\n    for (int i = 0; i < polyLats.length - 1; i++) {\n      if (reverseMe) {\n        points.add(new GeoPoint(PlanetModel.WGS84, fromDegrees(polyLats[i]), fromDegrees(polyLons[i])));\n      } else {\n        final int index = polyLats.length - 2 - i;\n        points.add(new GeoPoint(PlanetModel.WGS84, fromDegrees(polyLats[index]), fromDegrees(polyLons[index])));\n      }\n    }\n    return GeoPolygonFactory.makeGeoPolygon(PlanetModel.WGS84, points, holeList);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"536a864ce38bf14fb3f072a3129a389e95200e20","date":1461068886,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#fromPolygon(Polygon,boolean).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#fromPolygon(Polygon,boolean).mjava","sourceNew":"  /**\n    * Convert a Polygon object into a GeoPolygon.\n    * This method uses\n    * @param polygon is the Polygon object.\n    * @param reverseMe is true if the order of the points should be reversed.\n    * @return the GeoPolygon.\n    */\n  private static GeoPolygon fromPolygon(final Polygon polygon, final boolean reverseMe) {\n    // First, assemble the \"holes\".  The geo3d convention is to use the same polygon sense on the inner ring as the\n    // outer ring, so we process these recursively with reverseMe flipped.\n    final Polygon[] theHoles = polygon.getHoles();\n    final List<GeoPolygon> holeList = new ArrayList<>(theHoles.length);\n    for (final Polygon hole : theHoles) {\n      //System.out.println(\"Hole: \"+hole);\n      final GeoPolygon component = fromPolygon(hole, !reverseMe);\n      if (component != null) {\n        holeList.add(component);\n      }\n    }\n    \n    // Now do the polygon itself\n    final double[] polyLats = polygon.getPolyLats();\n    final double[] polyLons = polygon.getPolyLons();\n    \n    // I presume the arguments have already been checked\n    final List<GeoPoint> points = new ArrayList<>(polyLats.length-1);\n    // We skip the last point anyway because the API requires it to be repeated, and geo3d doesn't repeat it.\n    for (int i = 0; i < polyLats.length - 1; i++) {\n      if (reverseMe) {\n        points.add(new GeoPoint(PlanetModel.WGS84, fromDegrees(polyLats[i]), fromDegrees(polyLons[i])));\n      } else {\n        final int index = polyLats.length - 2 - i;\n        points.add(new GeoPoint(PlanetModel.WGS84, fromDegrees(polyLats[index]), fromDegrees(polyLons[index])));\n      }\n    }\n    return GeoPolygonFactory.makeGeoPolygon(PlanetModel.WGS84, points, holeList);\n  }\n\n","sourceOld":"  /**\n    * Convert a Polygon object into a GeoPolygon.\n    * This method uses\n    * @param polygon is the Polygon object.\n    * @param reverseMe is true if the order of the points should be reversed.\n    * @return the GeoPolygon.\n    */\n  protected static GeoPolygon fromPolygon(final Polygon polygon, final boolean reverseMe) {\n    // First, assemble the \"holes\".  The geo3d convention is to use the same polygon sense on the inner ring as the\n    // outer ring, so we process these recursively with reverseMe flipped.\n    final Polygon[] theHoles = polygon.getHoles();\n    final List<GeoPolygon> holeList = new ArrayList<>(theHoles.length);\n    for (final Polygon hole : theHoles) {\n      holeList.add(fromPolygon(hole, !reverseMe));\n    }\n    \n    // Now do the polygon itself\n    final double[] polyLats = polygon.getPolyLats();\n    final double[] polyLons = polygon.getPolyLons();\n    \n    // I presume the arguments have already been checked\n    final List<GeoPoint> points = new ArrayList<>(polyLats.length-1);\n    // We skip the last point anyway because the API requires it to be repeated, and geo3d doesn't repeat it.\n    for (int i = 0; i < polyLats.length - 1; i++) {\n      if (reverseMe) {\n        points.add(new GeoPoint(PlanetModel.WGS84, fromDegrees(polyLats[i]), fromDegrees(polyLons[i])));\n      } else {\n        final int index = polyLats.length - 2 - i;\n        points.add(new GeoPoint(PlanetModel.WGS84, fromDegrees(polyLats[index]), fromDegrees(polyLons[index])));\n      }\n    }\n    return GeoPolygonFactory.makeGeoPolygon(PlanetModel.WGS84, points, holeList);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c4ea54ac6c0e876359818ff9634e6c179769c1e","date":1461111125,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#fromPolygon(Polygon,boolean).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#fromPolygon(Polygon,boolean).mjava","sourceNew":"  /**\n    * Convert a Polygon object into a GeoPolygon.\n    * This method uses\n    * @param polygon is the Polygon object.\n    * @param reverseMe is true if the order of the points should be reversed.\n    * @return the GeoPolygon.\n    */\n  private static GeoPolygon fromPolygon(final Polygon polygon, final boolean reverseMe) {\n    // First, assemble the \"holes\".  The geo3d convention is to use the same polygon sense on the inner ring as the\n    // outer ring, so we process these recursively with reverseMe flipped.\n    final Polygon[] theHoles = polygon.getHoles();\n    final List<GeoPolygon> holeList = new ArrayList<>(theHoles.length);\n    for (final Polygon hole : theHoles) {\n      //System.out.println(\"Hole: \"+hole);\n      final GeoPolygon component = fromPolygon(hole, !reverseMe);\n      if (component != null) {\n        holeList.add(component);\n      }\n    }\n    \n    // Now do the polygon itself\n    final double[] polyLats = polygon.getPolyLats();\n    final double[] polyLons = polygon.getPolyLons();\n    \n    // I presume the arguments have already been checked\n    final List<GeoPoint> points = new ArrayList<>(polyLats.length-1);\n    // We skip the last point anyway because the API requires it to be repeated, and geo3d doesn't repeat it.\n    for (int i = 0; i < polyLats.length - 1; i++) {\n      if (reverseMe) {\n        points.add(new GeoPoint(PlanetModel.WGS84, fromDegrees(polyLats[i]), fromDegrees(polyLons[i])));\n      } else {\n        final int index = polyLats.length - 2 - i;\n        points.add(new GeoPoint(PlanetModel.WGS84, fromDegrees(polyLats[index]), fromDegrees(polyLons[index])));\n      }\n    }\n    //System.err.println(\" building polygon with \"+points.size()+\" points...\");\n    final GeoPolygon rval = GeoPolygonFactory.makeGeoPolygon(PlanetModel.WGS84, points, holeList);\n    //System.err.println(\" ...done\");\n    return rval;\n  }\n\n","sourceOld":"  /**\n    * Convert a Polygon object into a GeoPolygon.\n    * This method uses\n    * @param polygon is the Polygon object.\n    * @param reverseMe is true if the order of the points should be reversed.\n    * @return the GeoPolygon.\n    */\n  private static GeoPolygon fromPolygon(final Polygon polygon, final boolean reverseMe) {\n    // First, assemble the \"holes\".  The geo3d convention is to use the same polygon sense on the inner ring as the\n    // outer ring, so we process these recursively with reverseMe flipped.\n    final Polygon[] theHoles = polygon.getHoles();\n    final List<GeoPolygon> holeList = new ArrayList<>(theHoles.length);\n    for (final Polygon hole : theHoles) {\n      //System.out.println(\"Hole: \"+hole);\n      final GeoPolygon component = fromPolygon(hole, !reverseMe);\n      if (component != null) {\n        holeList.add(component);\n      }\n    }\n    \n    // Now do the polygon itself\n    final double[] polyLats = polygon.getPolyLats();\n    final double[] polyLons = polygon.getPolyLons();\n    \n    // I presume the arguments have already been checked\n    final List<GeoPoint> points = new ArrayList<>(polyLats.length-1);\n    // We skip the last point anyway because the API requires it to be repeated, and geo3d doesn't repeat it.\n    for (int i = 0; i < polyLats.length - 1; i++) {\n      if (reverseMe) {\n        points.add(new GeoPoint(PlanetModel.WGS84, fromDegrees(polyLats[i]), fromDegrees(polyLons[i])));\n      } else {\n        final int index = polyLats.length - 2 - i;\n        points.add(new GeoPoint(PlanetModel.WGS84, fromDegrees(polyLats[index]), fromDegrees(polyLons[index])));\n      }\n    }\n    return GeoPolygonFactory.makeGeoPolygon(PlanetModel.WGS84, points, holeList);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba81c43c13d92ea74a6388471cf358eb7068744d","date":1461408282,"type":5,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#fromPolygon(Polygon).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#fromPolygon(Polygon,boolean).mjava","sourceNew":"  /**\n    * Convert a Polygon object into a GeoPolygon.\n    * This method uses\n    * @param polygon is the Polygon object.\n    * @return the GeoPolygon.\n    */\n  private static GeoPolygon fromPolygon(final Polygon polygon) {\n    // First, assemble the \"holes\".  The geo3d convention is to use the same polygon sense on the inner ring as the\n    // outer ring, so we process these recursively with reverseMe flipped.\n    final Polygon[] theHoles = polygon.getHoles();\n    final List<GeoPolygon> holeList = new ArrayList<>(theHoles.length);\n    for (final Polygon hole : theHoles) {\n      //System.out.println(\"Hole: \"+hole);\n      final GeoPolygon component = fromPolygon(hole);\n      if (component != null) {\n        holeList.add(component);\n      }\n    }\n    \n    // Now do the polygon itself\n    final double[] polyLats = polygon.getPolyLats();\n    final double[] polyLons = polygon.getPolyLons();\n    \n    // I presume the arguments have already been checked\n    final List<GeoPoint> points = new ArrayList<>(polyLats.length-1);\n    // We skip the last point anyway because the API requires it to be repeated, and geo3d doesn't repeat it.\n    for (int i = 0; i < polyLats.length - 1; i++) {\n      final int index = polyLats.length - 2 - i;\n      points.add(new GeoPoint(PlanetModel.WGS84, fromDegrees(polyLats[index]), fromDegrees(polyLons[index])));\n    }\n    //System.err.println(\" building polygon with \"+points.size()+\" points...\");\n    final GeoPolygon rval = GeoPolygonFactory.makeGeoPolygon(PlanetModel.WGS84, points, holeList);\n    //System.err.println(\" ...done\");\n    return rval;\n  }\n\n","sourceOld":"  /**\n    * Convert a Polygon object into a GeoPolygon.\n    * This method uses\n    * @param polygon is the Polygon object.\n    * @param reverseMe is true if the order of the points should be reversed.\n    * @return the GeoPolygon.\n    */\n  private static GeoPolygon fromPolygon(final Polygon polygon, final boolean reverseMe) {\n    // First, assemble the \"holes\".  The geo3d convention is to use the same polygon sense on the inner ring as the\n    // outer ring, so we process these recursively with reverseMe flipped.\n    final Polygon[] theHoles = polygon.getHoles();\n    final List<GeoPolygon> holeList = new ArrayList<>(theHoles.length);\n    for (final Polygon hole : theHoles) {\n      //System.out.println(\"Hole: \"+hole);\n      final GeoPolygon component = fromPolygon(hole, !reverseMe);\n      if (component != null) {\n        holeList.add(component);\n      }\n    }\n    \n    // Now do the polygon itself\n    final double[] polyLats = polygon.getPolyLats();\n    final double[] polyLons = polygon.getPolyLons();\n    \n    // I presume the arguments have already been checked\n    final List<GeoPoint> points = new ArrayList<>(polyLats.length-1);\n    // We skip the last point anyway because the API requires it to be repeated, and geo3d doesn't repeat it.\n    for (int i = 0; i < polyLats.length - 1; i++) {\n      if (reverseMe) {\n        points.add(new GeoPoint(PlanetModel.WGS84, fromDegrees(polyLats[i]), fromDegrees(polyLons[i])));\n      } else {\n        final int index = polyLats.length - 2 - i;\n        points.add(new GeoPoint(PlanetModel.WGS84, fromDegrees(polyLats[index]), fromDegrees(polyLons[index])));\n      }\n    }\n    //System.err.println(\" building polygon with \"+points.size()+\" points...\");\n    final GeoPolygon rval = GeoPolygonFactory.makeGeoPolygon(PlanetModel.WGS84, points, holeList);\n    //System.err.println(\" ...done\");\n    return rval;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#fromPolygon(Polygon).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#fromPolygon(Polygon,boolean).mjava","sourceNew":"  /**\n    * Convert a Polygon object into a GeoPolygon.\n    * This method uses\n    * @param polygon is the Polygon object.\n    * @return the GeoPolygon.\n    */\n  private static GeoPolygon fromPolygon(final Polygon polygon) {\n    // First, assemble the \"holes\".  The geo3d convention is to use the same polygon sense on the inner ring as the\n    // outer ring, so we process these recursively with reverseMe flipped.\n    final Polygon[] theHoles = polygon.getHoles();\n    final List<GeoPolygon> holeList = new ArrayList<>(theHoles.length);\n    for (final Polygon hole : theHoles) {\n      //System.out.println(\"Hole: \"+hole);\n      final GeoPolygon component = fromPolygon(hole);\n      if (component != null) {\n        holeList.add(component);\n      }\n    }\n    \n    // Now do the polygon itself\n    final double[] polyLats = polygon.getPolyLats();\n    final double[] polyLons = polygon.getPolyLons();\n    \n    // I presume the arguments have already been checked\n    final List<GeoPoint> points = new ArrayList<>(polyLats.length-1);\n    // We skip the last point anyway because the API requires it to be repeated, and geo3d doesn't repeat it.\n    for (int i = 0; i < polyLats.length - 1; i++) {\n      final int index = polyLats.length - 2 - i;\n      points.add(new GeoPoint(PlanetModel.WGS84, fromDegrees(polyLats[index]), fromDegrees(polyLons[index])));\n    }\n    //System.err.println(\" building polygon with \"+points.size()+\" points...\");\n    final GeoPolygon rval = GeoPolygonFactory.makeGeoPolygon(PlanetModel.WGS84, points, holeList);\n    //System.err.println(\" ...done\");\n    return rval;\n  }\n\n","sourceOld":"  /**\n    * Convert a Polygon object into a GeoPolygon.\n    * This method uses\n    * @param polygon is the Polygon object.\n    * @param reverseMe is true if the order of the points should be reversed.\n    * @return the GeoPolygon.\n    */\n  private static GeoPolygon fromPolygon(final Polygon polygon, final boolean reverseMe) {\n    // First, assemble the \"holes\".  The geo3d convention is to use the same polygon sense on the inner ring as the\n    // outer ring, so we process these recursively with reverseMe flipped.\n    final Polygon[] theHoles = polygon.getHoles();\n    final List<GeoPolygon> holeList = new ArrayList<>(theHoles.length);\n    for (final Polygon hole : theHoles) {\n      //System.out.println(\"Hole: \"+hole);\n      final GeoPolygon component = fromPolygon(hole, !reverseMe);\n      if (component != null) {\n        holeList.add(component);\n      }\n    }\n    \n    // Now do the polygon itself\n    final double[] polyLats = polygon.getPolyLats();\n    final double[] polyLons = polygon.getPolyLons();\n    \n    // I presume the arguments have already been checked\n    final List<GeoPoint> points = new ArrayList<>(polyLats.length-1);\n    // We skip the last point anyway because the API requires it to be repeated, and geo3d doesn't repeat it.\n    for (int i = 0; i < polyLats.length - 1; i++) {\n      if (reverseMe) {\n        points.add(new GeoPoint(PlanetModel.WGS84, fromDegrees(polyLats[i]), fromDegrees(polyLons[i])));\n      } else {\n        final int index = polyLats.length - 2 - i;\n        points.add(new GeoPoint(PlanetModel.WGS84, fromDegrees(polyLats[index]), fromDegrees(polyLons[index])));\n      }\n    }\n    //System.err.println(\" building polygon with \"+points.size()+\" points...\");\n    final GeoPolygon rval = GeoPolygonFactory.makeGeoPolygon(PlanetModel.WGS84, points, holeList);\n    //System.err.println(\" ...done\");\n    return rval;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"09af2c9610ce53a4b25fd99344299b40318a4a1a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7593e6c5cc33e73fa12f7d1b0035d218d3a36309"],"2c4ea54ac6c0e876359818ff9634e6c179769c1e":["536a864ce38bf14fb3f072a3129a389e95200e20"],"fa76b98015a97f0eca94f0f11fd1b6975838c3ee":["7593e6c5cc33e73fa12f7d1b0035d218d3a36309"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["2c4ea54ac6c0e876359818ff9634e6c179769c1e","ba81c43c13d92ea74a6388471cf358eb7068744d"],"536a864ce38bf14fb3f072a3129a389e95200e20":["fa76b98015a97f0eca94f0f11fd1b6975838c3ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"7593e6c5cc33e73fa12f7d1b0035d218d3a36309":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ba81c43c13d92ea74a6388471cf358eb7068744d":["2c4ea54ac6c0e876359818ff9634e6c179769c1e"]},"commit2Childs":{"09af2c9610ce53a4b25fd99344299b40318a4a1a":[],"2c4ea54ac6c0e876359818ff9634e6c179769c1e":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","ba81c43c13d92ea74a6388471cf358eb7068744d"],"fa76b98015a97f0eca94f0f11fd1b6975838c3ee":["536a864ce38bf14fb3f072a3129a389e95200e20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09af2c9610ce53a4b25fd99344299b40318a4a1a","7593e6c5cc33e73fa12f7d1b0035d218d3a36309"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"536a864ce38bf14fb3f072a3129a389e95200e20":["2c4ea54ac6c0e876359818ff9634e6c179769c1e"],"7593e6c5cc33e73fa12f7d1b0035d218d3a36309":["09af2c9610ce53a4b25fd99344299b40318a4a1a","fa76b98015a97f0eca94f0f11fd1b6975838c3ee"],"ba81c43c13d92ea74a6388471cf358eb7068744d":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09af2c9610ce53a4b25fd99344299b40318a4a1a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}