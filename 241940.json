{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#process(TriggerEvent,ActionContext).mjava","commits":[{"id":"1f6b20dc453cee198956989b90aa24bef0232bcf","date":1498221066,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#process(TriggerEvent,ActionContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void process(TriggerEvent event, ActionContext context) {\n    log.debug(\"-- processing event: {} with context properties: {}\", event, context.getProperties());\n    CoreContainer container = context.getCoreContainer();\n    try {\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder()\n          .withZkHost(container.getZkController().getZkServerAddress())\n          .withHttpClient(container.getUpdateShardHandler().getHttpClient())\n          .build()) {\n        ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n        Map<String, Object> autoScalingConf = Utils.getJson(zkStateReader.getZkClient(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, true);\n        if (autoScalingConf.isEmpty()) {\n          log.error(\"Action: \" + getName() + \" executed but no policy is configured\");\n          return;\n        }\n        AutoScalingConfig config = new AutoScalingConfig(autoScalingConf);\n        Policy policy = config.getPolicy();\n        Policy.Session session = policy.createSession(new SolrClientDataProvider(cloudSolrClient));\n        Policy.Suggester suggester = getSuggester(session, event);\n        while (true) {\n          SolrRequest operation = suggester.getOperation();\n          if (operation == null) break;\n          log.info(\"Computed Plan: {}\", operation);\n          Map<String, Object> props = context.getProperties();\n          props.compute(\"operations\", (k, v) -> {\n            List<SolrRequest> operations = (List<SolrRequest>) v;\n            if (operations == null) operations = new ArrayList<>();\n            operations.add(operation);\n            return operations;\n          });\n          session = suggester.getSession();\n          suggester = getSuggester(session, event);\n        }\n      }\n    } catch (KeeperException e) {\n      log.error(\"ZooKeeperException while processing event: \" + event, e);\n    } catch (InterruptedException e) {\n      log.error(\"Interrupted while processing event: \" + event, e);\n    } catch (IOException e) {\n      log.error(\"IOException while processing event: \" + event, e);\n    } catch (Exception e) {\n      log.error(\"Unexpected exception while processing event: \" + event, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e56e561d118e91f61219d156e3343e58ae4dae","date":1498549733,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#process(TriggerEvent,ActionContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#process(TriggerEvent,ActionContext).mjava","sourceNew":"  @Override\n  public void process(TriggerEvent event, ActionContext context) {\n    log.debug(\"-- processing event: {} with context properties: {}\", event, context.getProperties());\n    CoreContainer container = context.getCoreContainer();\n    try {\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder()\n          .withZkHost(container.getZkController().getZkServerAddress())\n          .withHttpClient(container.getUpdateShardHandler().getHttpClient())\n          .build()) {\n        ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n        Map<String, Object> autoScalingConf = Utils.getJson(zkStateReader.getZkClient(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, true);\n        if (autoScalingConf.isEmpty()) {\n          log.error(\"Action: \" + getName() + \" executed but no policy is configured\");\n          return;\n        }\n        AutoScalingConfig config = new AutoScalingConfig(autoScalingConf);\n        Policy policy = config.getPolicy();\n        Policy.Session session = policy.createSession(new SolrClientDataProvider(cloudSolrClient));\n        Policy.Suggester suggester = getSuggester(session, event);\n        while (true) {\n          SolrRequest operation = suggester.getOperation();\n          if (operation == null) break;\n          log.info(\"Computed Plan: {}\", operation.getParams());\n          Map<String, Object> props = context.getProperties();\n          props.compute(\"operations\", (k, v) -> {\n            List<SolrRequest> operations = (List<SolrRequest>) v;\n            if (operations == null) operations = new ArrayList<>();\n            operations.add(operation);\n            return operations;\n          });\n          session = suggester.getSession();\n          suggester = getSuggester(session, event);\n        }\n      }\n    } catch (KeeperException e) {\n      log.error(\"ZooKeeperException while processing event: \" + event, e);\n    } catch (InterruptedException e) {\n      log.error(\"Interrupted while processing event: \" + event, e);\n    } catch (IOException e) {\n      log.error(\"IOException while processing event: \" + event, e);\n    } catch (Exception e) {\n      log.error(\"Unexpected exception while processing event: \" + event, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(TriggerEvent event, ActionContext context) {\n    log.debug(\"-- processing event: {} with context properties: {}\", event, context.getProperties());\n    CoreContainer container = context.getCoreContainer();\n    try {\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder()\n          .withZkHost(container.getZkController().getZkServerAddress())\n          .withHttpClient(container.getUpdateShardHandler().getHttpClient())\n          .build()) {\n        ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n        Map<String, Object> autoScalingConf = Utils.getJson(zkStateReader.getZkClient(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, true);\n        if (autoScalingConf.isEmpty()) {\n          log.error(\"Action: \" + getName() + \" executed but no policy is configured\");\n          return;\n        }\n        AutoScalingConfig config = new AutoScalingConfig(autoScalingConf);\n        Policy policy = config.getPolicy();\n        Policy.Session session = policy.createSession(new SolrClientDataProvider(cloudSolrClient));\n        Policy.Suggester suggester = getSuggester(session, event);\n        while (true) {\n          SolrRequest operation = suggester.getOperation();\n          if (operation == null) break;\n          log.info(\"Computed Plan: {}\", operation);\n          Map<String, Object> props = context.getProperties();\n          props.compute(\"operations\", (k, v) -> {\n            List<SolrRequest> operations = (List<SolrRequest>) v;\n            if (operations == null) operations = new ArrayList<>();\n            operations.add(operation);\n            return operations;\n          });\n          session = suggester.getSession();\n          suggester = getSuggester(session, event);\n        }\n      }\n    } catch (KeeperException e) {\n      log.error(\"ZooKeeperException while processing event: \" + event, e);\n    } catch (InterruptedException e) {\n      log.error(\"Interrupted while processing event: \" + event, e);\n    } catch (IOException e) {\n      log.error(\"IOException while processing event: \" + event, e);\n    } catch (Exception e) {\n      log.error(\"Unexpected exception while processing event: \" + event, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"47a99fe8ee3f74e8da2ece1bddbc059d1e1beffa","date":1498706808,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#process(TriggerEvent,ActionContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#process(TriggerEvent,ActionContext).mjava","sourceNew":"  @Override\n  public void process(TriggerEvent event, ActionContext context) {\n    log.debug(\"-- processing event: {} with context properties: {}\", event, context.getProperties());\n    CoreContainer container = context.getCoreContainer();\n    try {\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder()\n          .withZkHost(container.getZkController().getZkServerAddress())\n          .withHttpClient(container.getUpdateShardHandler().getHttpClient())\n          .build()) {\n        ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n        Map<String, Object> autoScalingConf = Utils.getJson(zkStateReader.getZkClient(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, true);\n        if (autoScalingConf.isEmpty()) {\n          log.error(\"Action: \" + getName() + \" executed but no policy is configured\");\n          return;\n        }\n        AutoScalingConfig config = new AutoScalingConfig(autoScalingConf);\n        Policy policy = config.getPolicy();\n        Policy.Session session = policy.createSession(new SolrClientDataProvider(cloudSolrClient));\n        Policy.Suggester suggester = getSuggester(session, event, zkStateReader);\n        while (true) {\n          SolrRequest operation = suggester.getOperation();\n          if (operation == null) break;\n          log.info(\"Computed Plan: {}\", operation.getParams());\n          Map<String, Object> props = context.getProperties();\n          props.compute(\"operations\", (k, v) -> {\n            List<SolrRequest> operations = (List<SolrRequest>) v;\n            if (operations == null) operations = new ArrayList<>();\n            operations.add(operation);\n            return operations;\n          });\n          session = suggester.getSession();\n          suggester = getSuggester(session, event, zkStateReader);\n        }\n      }\n    } catch (KeeperException e) {\n      log.error(\"ZooKeeperException while processing event: \" + event, e);\n    } catch (InterruptedException e) {\n      log.error(\"Interrupted while processing event: \" + event, e);\n    } catch (IOException e) {\n      log.error(\"IOException while processing event: \" + event, e);\n    } catch (Exception e) {\n      log.error(\"Unexpected exception while processing event: \" + event, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(TriggerEvent event, ActionContext context) {\n    log.debug(\"-- processing event: {} with context properties: {}\", event, context.getProperties());\n    CoreContainer container = context.getCoreContainer();\n    try {\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder()\n          .withZkHost(container.getZkController().getZkServerAddress())\n          .withHttpClient(container.getUpdateShardHandler().getHttpClient())\n          .build()) {\n        ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n        Map<String, Object> autoScalingConf = Utils.getJson(zkStateReader.getZkClient(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, true);\n        if (autoScalingConf.isEmpty()) {\n          log.error(\"Action: \" + getName() + \" executed but no policy is configured\");\n          return;\n        }\n        AutoScalingConfig config = new AutoScalingConfig(autoScalingConf);\n        Policy policy = config.getPolicy();\n        Policy.Session session = policy.createSession(new SolrClientDataProvider(cloudSolrClient));\n        Policy.Suggester suggester = getSuggester(session, event);\n        while (true) {\n          SolrRequest operation = suggester.getOperation();\n          if (operation == null) break;\n          log.info(\"Computed Plan: {}\", operation.getParams());\n          Map<String, Object> props = context.getProperties();\n          props.compute(\"operations\", (k, v) -> {\n            List<SolrRequest> operations = (List<SolrRequest>) v;\n            if (operations == null) operations = new ArrayList<>();\n            operations.add(operation);\n            return operations;\n          });\n          session = suggester.getSession();\n          suggester = getSuggester(session, event);\n        }\n      }\n    } catch (KeeperException e) {\n      log.error(\"ZooKeeperException while processing event: \" + event, e);\n    } catch (InterruptedException e) {\n      log.error(\"Interrupted while processing event: \" + event, e);\n    } catch (IOException e) {\n      log.error(\"IOException while processing event: \" + event, e);\n    } catch (Exception e) {\n      log.error(\"Unexpected exception while processing event: \" + event, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","date":1499961129,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#process(TriggerEvent,ActionContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#process(TriggerEvent,ActionContext).mjava","sourceNew":"  @Override\n  public void process(TriggerEvent event, ActionContext context) {\n    log.debug(\"-- processing event: {} with context properties: {}\", event, context.getProperties());\n    CoreContainer container = context.getCoreContainer();\n    try {\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder()\n          .withZkHost(container.getZkController().getZkServerAddress())\n          .withHttpClient(container.getUpdateShardHandler().getHttpClient())\n          .build()) {\n        ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n        AutoScalingConfig autoScalingConf = zkStateReader.getAutoScalingConfig();\n        if (autoScalingConf.isEmpty()) {\n          log.error(\"Action: \" + getName() + \" executed but no policy is configured\");\n          return;\n        }\n        Policy policy = autoScalingConf.getPolicy();\n        Policy.Session session = policy.createSession(new SolrClientDataProvider(cloudSolrClient));\n        Policy.Suggester suggester = getSuggester(session, event, zkStateReader);\n        while (true) {\n          SolrRequest operation = suggester.getOperation();\n          if (operation == null) break;\n          log.info(\"Computed Plan: {}\", operation.getParams());\n          Map<String, Object> props = context.getProperties();\n          props.compute(\"operations\", (k, v) -> {\n            List<SolrRequest> operations = (List<SolrRequest>) v;\n            if (operations == null) operations = new ArrayList<>();\n            operations.add(operation);\n            return operations;\n          });\n          session = suggester.getSession();\n          suggester = getSuggester(session, event, zkStateReader);\n        }\n      }\n    } catch (KeeperException e) {\n      log.error(\"ZooKeeperException while processing event: \" + event, e);\n    } catch (InterruptedException e) {\n      log.error(\"Interrupted while processing event: \" + event, e);\n    } catch (IOException e) {\n      log.error(\"IOException while processing event: \" + event, e);\n    } catch (Exception e) {\n      log.error(\"Unexpected exception while processing event: \" + event, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(TriggerEvent event, ActionContext context) {\n    log.debug(\"-- processing event: {} with context properties: {}\", event, context.getProperties());\n    CoreContainer container = context.getCoreContainer();\n    try {\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder()\n          .withZkHost(container.getZkController().getZkServerAddress())\n          .withHttpClient(container.getUpdateShardHandler().getHttpClient())\n          .build()) {\n        ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n        Map<String, Object> autoScalingConf = Utils.getJson(zkStateReader.getZkClient(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, true);\n        if (autoScalingConf.isEmpty()) {\n          log.error(\"Action: \" + getName() + \" executed but no policy is configured\");\n          return;\n        }\n        AutoScalingConfig config = new AutoScalingConfig(autoScalingConf);\n        Policy policy = config.getPolicy();\n        Policy.Session session = policy.createSession(new SolrClientDataProvider(cloudSolrClient));\n        Policy.Suggester suggester = getSuggester(session, event, zkStateReader);\n        while (true) {\n          SolrRequest operation = suggester.getOperation();\n          if (operation == null) break;\n          log.info(\"Computed Plan: {}\", operation.getParams());\n          Map<String, Object> props = context.getProperties();\n          props.compute(\"operations\", (k, v) -> {\n            List<SolrRequest> operations = (List<SolrRequest>) v;\n            if (operations == null) operations = new ArrayList<>();\n            operations.add(operation);\n            return operations;\n          });\n          session = suggester.getSession();\n          suggester = getSuggester(session, event, zkStateReader);\n        }\n      }\n    } catch (KeeperException e) {\n      log.error(\"ZooKeeperException while processing event: \" + event, e);\n    } catch (InterruptedException e) {\n      log.error(\"Interrupted while processing event: \" + event, e);\n    } catch (IOException e) {\n      log.error(\"IOException while processing event: \" + event, e);\n    } catch (Exception e) {\n      log.error(\"Unexpected exception while processing event: \" + event, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#process(TriggerEvent,ActionContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#process(TriggerEvent,ActionContext).mjava","sourceNew":"  @Override\n  public void process(TriggerEvent event, ActionContext context) {\n    log.debug(\"-- processing event: {} with context properties: {}\", event, context.getProperties());\n    ClusterDataProvider cdp = context.getClusterDataProvider();\n    try {\n      AutoScalingConfig autoScalingConf = cdp.getAutoScalingConfig();\n      if (autoScalingConf.isEmpty()) {\n        log.error(\"Action: \" + getName() + \" executed but no policy is configured\");\n        return;\n      }\n      Policy policy = autoScalingConf.getPolicy();\n      Policy.Session session = policy.createSession(cdp);\n      Policy.Suggester suggester = getSuggester(session, event, cdp);\n      while (true) {\n        SolrRequest operation = suggester.getOperation();\n        if (operation == null) break;\n        log.info(\"Computed Plan: {}\", operation.getParams());\n        Map<String, Object> props = context.getProperties();\n        props.compute(\"operations\", (k, v) -> {\n          List<SolrRequest> operations = (List<SolrRequest>) v;\n          if (operations == null) operations = new ArrayList<>();\n          operations.add(operation);\n          return operations;\n        });\n        session = suggester.getSession();\n        suggester = getSuggester(session, event, cdp);\n      }\n    } catch (IOException e) {\n      log.error(\"IOException while processing event: \" + event, e);\n    } catch (Exception e) {\n      log.error(\"Unexpected exception while processing event: \" + event, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(TriggerEvent event, ActionContext context) {\n    log.debug(\"-- processing event: {} with context properties: {}\", event, context.getProperties());\n    CoreContainer container = context.getCoreContainer();\n    try {\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder()\n          .withZkHost(container.getZkController().getZkServerAddress())\n          .withHttpClient(container.getUpdateShardHandler().getHttpClient())\n          .build()) {\n        ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n        AutoScalingConfig autoScalingConf = zkStateReader.getAutoScalingConfig();\n        if (autoScalingConf.isEmpty()) {\n          log.error(\"Action: \" + getName() + \" executed but no policy is configured\");\n          return;\n        }\n        Policy policy = autoScalingConf.getPolicy();\n        Policy.Session session = policy.createSession(new SolrClientDataProvider(cloudSolrClient));\n        Policy.Suggester suggester = getSuggester(session, event, zkStateReader);\n        while (true) {\n          SolrRequest operation = suggester.getOperation();\n          if (operation == null) break;\n          log.info(\"Computed Plan: {}\", operation.getParams());\n          Map<String, Object> props = context.getProperties();\n          props.compute(\"operations\", (k, v) -> {\n            List<SolrRequest> operations = (List<SolrRequest>) v;\n            if (operations == null) operations = new ArrayList<>();\n            operations.add(operation);\n            return operations;\n          });\n          session = suggester.getSession();\n          suggester = getSuggester(session, event, zkStateReader);\n        }\n      }\n    } catch (KeeperException e) {\n      log.error(\"ZooKeeperException while processing event: \" + event, e);\n    } catch (InterruptedException e) {\n      log.error(\"Interrupted while processing event: \" + event, e);\n    } catch (IOException e) {\n      log.error(\"IOException while processing event: \" + event, e);\n    } catch (Exception e) {\n      log.error(\"Unexpected exception while processing event: \" + event, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#process(TriggerEvent,ActionContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#process(TriggerEvent,ActionContext).mjava","sourceNew":"  @Override\n  public void process(TriggerEvent event, ActionContext context) {\n    log.debug(\"-- processing event: {} with context properties: {}\", event, context.getProperties());\n    CoreContainer container = context.getCoreContainer();\n    try {\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder()\n          .withZkHost(container.getZkController().getZkServerAddress())\n          .withHttpClient(container.getUpdateShardHandler().getHttpClient())\n          .build()) {\n        ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n        AutoScalingConfig autoScalingConf = zkStateReader.getAutoScalingConfig();\n        if (autoScalingConf.isEmpty()) {\n          log.error(\"Action: \" + getName() + \" executed but no policy is configured\");\n          return;\n        }\n        Policy policy = autoScalingConf.getPolicy();\n        Policy.Session session = policy.createSession(new SolrClientDataProvider(cloudSolrClient));\n        Policy.Suggester suggester = getSuggester(session, event, zkStateReader);\n        while (true) {\n          SolrRequest operation = suggester.getOperation();\n          if (operation == null) break;\n          log.info(\"Computed Plan: {}\", operation.getParams());\n          Map<String, Object> props = context.getProperties();\n          props.compute(\"operations\", (k, v) -> {\n            List<SolrRequest> operations = (List<SolrRequest>) v;\n            if (operations == null) operations = new ArrayList<>();\n            operations.add(operation);\n            return operations;\n          });\n          session = suggester.getSession();\n          suggester = getSuggester(session, event, zkStateReader);\n        }\n      }\n    } catch (KeeperException e) {\n      log.error(\"ZooKeeperException while processing event: \" + event, e);\n    } catch (InterruptedException e) {\n      log.error(\"Interrupted while processing event: \" + event, e);\n    } catch (IOException e) {\n      log.error(\"IOException while processing event: \" + event, e);\n    } catch (Exception e) {\n      log.error(\"Unexpected exception while processing event: \" + event, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(TriggerEvent event, ActionContext context) {\n    log.debug(\"-- processing event: {} with context properties: {}\", event, context.getProperties());\n    ClusterDataProvider cdp = context.getClusterDataProvider();\n    try {\n      AutoScalingConfig autoScalingConf = cdp.getAutoScalingConfig();\n      if (autoScalingConf.isEmpty()) {\n        log.error(\"Action: \" + getName() + \" executed but no policy is configured\");\n        return;\n      }\n      Policy policy = autoScalingConf.getPolicy();\n      Policy.Session session = policy.createSession(cdp);\n      Policy.Suggester suggester = getSuggester(session, event, cdp);\n      while (true) {\n        SolrRequest operation = suggester.getOperation();\n        if (operation == null) break;\n        log.info(\"Computed Plan: {}\", operation.getParams());\n        Map<String, Object> props = context.getProperties();\n        props.compute(\"operations\", (k, v) -> {\n          List<SolrRequest> operations = (List<SolrRequest>) v;\n          if (operations == null) operations = new ArrayList<>();\n          operations.add(operation);\n          return operations;\n        });\n        session = suggester.getSession();\n        suggester = getSuggester(session, event, cdp);\n      }\n    } catch (IOException e) {\n      log.error(\"IOException while processing event: \" + event, e);\n    } catch (Exception e) {\n      log.error(\"Unexpected exception while processing event: \" + event, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b601288e006e49c9026865fcd27630ea3a9e532","date":1506112044,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#process(TriggerEvent,ActionContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#process(TriggerEvent,ActionContext).mjava","sourceNew":"  @Override\n  public void process(TriggerEvent event, ActionContext context) {\n    log.debug(\"-- processing event: {} with context properties: {}\", event, context.getProperties());\n    CoreContainer container = context.getCoreContainer();\n    try {\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder()\n          .withZkHost(container.getZkController().getZkServerAddress())\n          .withHttpClient(container.getUpdateShardHandler().getHttpClient())\n          .build()) {\n        ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n        AutoScalingConfig autoScalingConf = zkStateReader.getAutoScalingConfig();\n        if (autoScalingConf.isEmpty()) {\n          log.error(\"Action: \" + getName() + \" executed but no policy is configured\");\n          return;\n        }\n        Policy policy = autoScalingConf.getPolicy();\n        SolrClientDataProvider dataProvider = new SolrClientDataProvider(cloudSolrClient);\n        if (log.isDebugEnabled()) {\n          log.debug(\"Cluster data provider: {}\", dataProvider.toMap(new HashMap<>()));\n        }\n        Policy.Session session = policy.createSession(dataProvider);\n        Policy.Suggester suggester = getSuggester(session, event, zkStateReader);\n        while (true) {\n          SolrRequest operation = suggester.getOperation();\n          if (operation == null) break;\n          log.info(\"Computed Plan: {}\", operation.getParams());\n          Map<String, Object> props = context.getProperties();\n          props.compute(\"operations\", (k, v) -> {\n            List<SolrRequest> operations = (List<SolrRequest>) v;\n            if (operations == null) operations = new ArrayList<>();\n            operations.add(operation);\n            return operations;\n          });\n          session = suggester.getSession();\n          suggester = getSuggester(session, event, zkStateReader);\n        }\n      }\n    } catch (KeeperException e) {\n      log.error(\"ZooKeeperException while processing event: \" + event, e);\n    } catch (InterruptedException e) {\n      log.error(\"Interrupted while processing event: \" + event, e);\n    } catch (IOException e) {\n      log.error(\"IOException while processing event: \" + event, e);\n    } catch (Exception e) {\n      log.error(\"Unexpected exception while processing event: \" + event, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(TriggerEvent event, ActionContext context) {\n    log.debug(\"-- processing event: {} with context properties: {}\", event, context.getProperties());\n    CoreContainer container = context.getCoreContainer();\n    try {\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder()\n          .withZkHost(container.getZkController().getZkServerAddress())\n          .withHttpClient(container.getUpdateShardHandler().getHttpClient())\n          .build()) {\n        ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n        AutoScalingConfig autoScalingConf = zkStateReader.getAutoScalingConfig();\n        if (autoScalingConf.isEmpty()) {\n          log.error(\"Action: \" + getName() + \" executed but no policy is configured\");\n          return;\n        }\n        Policy policy = autoScalingConf.getPolicy();\n        Policy.Session session = policy.createSession(new SolrClientDataProvider(cloudSolrClient));\n        Policy.Suggester suggester = getSuggester(session, event, zkStateReader);\n        while (true) {\n          SolrRequest operation = suggester.getOperation();\n          if (operation == null) break;\n          log.info(\"Computed Plan: {}\", operation.getParams());\n          Map<String, Object> props = context.getProperties();\n          props.compute(\"operations\", (k, v) -> {\n            List<SolrRequest> operations = (List<SolrRequest>) v;\n            if (operations == null) operations = new ArrayList<>();\n            operations.add(operation);\n            return operations;\n          });\n          session = suggester.getSession();\n          suggester = getSuggester(session, event, zkStateReader);\n        }\n      }\n    } catch (KeeperException e) {\n      log.error(\"ZooKeeperException while processing event: \" + event, e);\n    } catch (InterruptedException e) {\n      log.error(\"Interrupted while processing event: \" + event, e);\n    } catch (IOException e) {\n      log.error(\"IOException while processing event: \" + event, e);\n    } catch (Exception e) {\n      log.error(\"Unexpected exception while processing event: \" + event, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#process(TriggerEvent,ActionContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void process(TriggerEvent event, ActionContext context) {\n    log.debug(\"-- processing event: {} with context properties: {}\", event, context.getProperties());\n    CoreContainer container = context.getCoreContainer();\n    try {\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder()\n          .withZkHost(container.getZkController().getZkServerAddress())\n          .withHttpClient(container.getUpdateShardHandler().getHttpClient())\n          .build()) {\n        ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n        AutoScalingConfig autoScalingConf = zkStateReader.getAutoScalingConfig();\n        if (autoScalingConf.isEmpty()) {\n          log.error(\"Action: \" + getName() + \" executed but no policy is configured\");\n          return;\n        }\n        Policy policy = autoScalingConf.getPolicy();\n        SolrClientDataProvider dataProvider = new SolrClientDataProvider(cloudSolrClient);\n        if (log.isDebugEnabled()) {\n          log.debug(\"Cluster data provider: {}\", dataProvider.toMap(new HashMap<>()));\n        }\n        Policy.Session session = policy.createSession(dataProvider);\n        Policy.Suggester suggester = getSuggester(session, event, zkStateReader);\n        while (true) {\n          SolrRequest operation = suggester.getOperation();\n          if (operation == null) break;\n          log.info(\"Computed Plan: {}\", operation.getParams());\n          Map<String, Object> props = context.getProperties();\n          props.compute(\"operations\", (k, v) -> {\n            List<SolrRequest> operations = (List<SolrRequest>) v;\n            if (operations == null) operations = new ArrayList<>();\n            operations.add(operation);\n            return operations;\n          });\n          session = suggester.getSession();\n          suggester = getSuggester(session, event, zkStateReader);\n        }\n      }\n    } catch (KeeperException e) {\n      log.error(\"ZooKeeperException while processing event: \" + event, e);\n    } catch (InterruptedException e) {\n      log.error(\"Interrupted while processing event: \" + event, e);\n    } catch (IOException e) {\n      log.error(\"IOException while processing event: \" + event, e);\n    } catch (Exception e) {\n      log.error(\"Unexpected exception while processing event: \" + event, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#process(TriggerEvent,ActionContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void process(TriggerEvent event, ActionContext context) {\n    log.debug(\"-- processing event: {} with context properties: {}\", event, context.getProperties());\n    CoreContainer container = context.getCoreContainer();\n    try {\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder()\n          .withZkHost(container.getZkController().getZkServerAddress())\n          .withHttpClient(container.getUpdateShardHandler().getHttpClient())\n          .build()) {\n        ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n        AutoScalingConfig autoScalingConf = zkStateReader.getAutoScalingConfig();\n        if (autoScalingConf.isEmpty()) {\n          log.error(\"Action: \" + getName() + \" executed but no policy is configured\");\n          return;\n        }\n        Policy policy = autoScalingConf.getPolicy();\n        SolrClientDataProvider dataProvider = new SolrClientDataProvider(cloudSolrClient);\n        if (log.isDebugEnabled()) {\n          log.debug(\"Cluster data provider: {}\", dataProvider.toMap(new HashMap<>()));\n        }\n        Policy.Session session = policy.createSession(dataProvider);\n        Policy.Suggester suggester = getSuggester(session, event, zkStateReader);\n        while (true) {\n          SolrRequest operation = suggester.getOperation();\n          if (operation == null) break;\n          log.info(\"Computed Plan: {}\", operation.getParams());\n          Map<String, Object> props = context.getProperties();\n          props.compute(\"operations\", (k, v) -> {\n            List<SolrRequest> operations = (List<SolrRequest>) v;\n            if (operations == null) operations = new ArrayList<>();\n            operations.add(operation);\n            return operations;\n          });\n          session = suggester.getSession();\n          suggester = getSuggester(session, event, zkStateReader);\n        }\n      }\n    } catch (KeeperException e) {\n      log.error(\"ZooKeeperException while processing event: \" + event, e);\n    } catch (InterruptedException e) {\n      log.error(\"Interrupted while processing event: \" + event, e);\n    } catch (IOException e) {\n      log.error(\"IOException while processing event: \" + event, e);\n    } catch (Exception e) {\n      log.error(\"Unexpected exception while processing event: \" + event, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d8e6696ad139aa0f0bfe30fb4e933b38530f214","date":1507644775,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#process(TriggerEvent,ActionContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#process(TriggerEvent,ActionContext).mjava","sourceNew":"  @Override\n  public void process(TriggerEvent event, ActionContext context) {\n    log.debug(\"-- processing event: {} with context properties: {}\", event, context.getProperties());\n    CoreContainer container = context.getCoreContainer();\n    try {\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder()\n          .withZkHost(container.getZkController().getZkServerAddress())\n          .withHttpClient(container.getUpdateShardHandler().getHttpClient())\n          .build()) {\n        ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n        AutoScalingConfig autoScalingConf = zkStateReader.getAutoScalingConfig();\n        if (autoScalingConf.isEmpty()) {\n          log.error(\"Action: \" + getName() + \" executed but no policy is configured\");\n          return;\n        }\n        Policy policy = autoScalingConf.getPolicy();\n        SolrClientDataProvider dataProvider = new SolrClientDataProvider(cloudSolrClient);\n        dataProvider.config = autoScalingConf;\n        if (log.isDebugEnabled()) {\n          log.debug(\"Cluster data provider: {}\", dataProvider.toMap(new HashMap<>()));\n        }\n        Policy.Session session = policy.createSession(dataProvider);\n        Policy.Suggester suggester = getSuggester(session, event, zkStateReader);\n        while (true) {\n          SolrRequest operation = suggester.getOperation();\n          if (operation == null) break;\n          log.info(\"Computed Plan: {}\", operation.getParams());\n          Map<String, Object> props = context.getProperties();\n          props.compute(\"operations\", (k, v) -> {\n            List<SolrRequest> operations = (List<SolrRequest>) v;\n            if (operations == null) operations = new ArrayList<>();\n            operations.add(operation);\n            return operations;\n          });\n          session = suggester.getSession();\n          suggester = getSuggester(session, event, zkStateReader);\n        }\n      }\n    } catch (KeeperException e) {\n      log.error(\"ZooKeeperException while processing event: \" + event, e);\n    } catch (InterruptedException e) {\n      log.error(\"Interrupted while processing event: \" + event, e);\n    } catch (IOException e) {\n      log.error(\"IOException while processing event: \" + event, e);\n    } catch (Exception e) {\n      log.error(\"Unexpected exception while processing event: \" + event, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(TriggerEvent event, ActionContext context) {\n    log.debug(\"-- processing event: {} with context properties: {}\", event, context.getProperties());\n    CoreContainer container = context.getCoreContainer();\n    try {\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder()\n          .withZkHost(container.getZkController().getZkServerAddress())\n          .withHttpClient(container.getUpdateShardHandler().getHttpClient())\n          .build()) {\n        ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n        AutoScalingConfig autoScalingConf = zkStateReader.getAutoScalingConfig();\n        if (autoScalingConf.isEmpty()) {\n          log.error(\"Action: \" + getName() + \" executed but no policy is configured\");\n          return;\n        }\n        Policy policy = autoScalingConf.getPolicy();\n        SolrClientDataProvider dataProvider = new SolrClientDataProvider(cloudSolrClient);\n        if (log.isDebugEnabled()) {\n          log.debug(\"Cluster data provider: {}\", dataProvider.toMap(new HashMap<>()));\n        }\n        Policy.Session session = policy.createSession(dataProvider);\n        Policy.Suggester suggester = getSuggester(session, event, zkStateReader);\n        while (true) {\n          SolrRequest operation = suggester.getOperation();\n          if (operation == null) break;\n          log.info(\"Computed Plan: {}\", operation.getParams());\n          Map<String, Object> props = context.getProperties();\n          props.compute(\"operations\", (k, v) -> {\n            List<SolrRequest> operations = (List<SolrRequest>) v;\n            if (operations == null) operations = new ArrayList<>();\n            operations.add(operation);\n            return operations;\n          });\n          session = suggester.getSession();\n          suggester = getSuggester(session, event, zkStateReader);\n        }\n      }\n    } catch (KeeperException e) {\n      log.error(\"ZooKeeperException while processing event: \" + event, e);\n    } catch (InterruptedException e) {\n      log.error(\"Interrupted while processing event: \" + event, e);\n    } catch (IOException e) {\n      log.error(\"IOException while processing event: \" + event, e);\n    } catch (Exception e) {\n      log.error(\"Unexpected exception while processing event: \" + event, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#process(TriggerEvent,ActionContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#process(TriggerEvent,ActionContext).mjava","sourceNew":"  @Override\n  public void process(TriggerEvent event, ActionContext context) {\n    log.debug(\"-- processing event: {} with context properties: {}\", event, context.getProperties());\n    SolrCloudManager cloudManager = context.getCloudManager();\n    try {\n      AutoScalingConfig autoScalingConf = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      if (autoScalingConf.isEmpty()) {\n        log.error(\"Action: \" + getName() + \" executed but no policy is configured\");\n        return;\n      }\n      Policy policy = autoScalingConf.getPolicy();\n      Policy.Session session = policy.createSession(cloudManager);\n      Policy.Suggester suggester = getSuggester(session, event, cloudManager);\n      while (true) {\n        SolrRequest operation = suggester.getOperation();\n        if (operation == null) break;\n        log.info(\"Computed Plan: {}\", operation.getParams());\n        Map<String, Object> props = context.getProperties();\n        props.compute(\"operations\", (k, v) -> {\n          List<SolrRequest> operations = (List<SolrRequest>) v;\n          if (operations == null) operations = new ArrayList<>();\n          operations.add(operation);\n          return operations;\n        });\n        session = suggester.getSession();\n        suggester = getSuggester(session, event, cloudManager);\n      }\n    } catch (IOException e) {\n      log.error(\"IOException while processing event: \" + event, e);\n    } catch (Exception e) {\n      log.error(\"Unexpected exception while processing event: \" + event, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(TriggerEvent event, ActionContext context) {\n    log.debug(\"-- processing event: {} with context properties: {}\", event, context.getProperties());\n    CoreContainer container = context.getCoreContainer();\n    try {\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder()\n          .withZkHost(container.getZkController().getZkServerAddress())\n          .withHttpClient(container.getUpdateShardHandler().getHttpClient())\n          .build()) {\n        ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n        AutoScalingConfig autoScalingConf = zkStateReader.getAutoScalingConfig();\n        if (autoScalingConf.isEmpty()) {\n          log.error(\"Action: \" + getName() + \" executed but no policy is configured\");\n          return;\n        }\n        Policy policy = autoScalingConf.getPolicy();\n        SolrClientDataProvider dataProvider = new SolrClientDataProvider(cloudSolrClient);\n        dataProvider.config = autoScalingConf;\n        if (log.isDebugEnabled()) {\n          log.debug(\"Cluster data provider: {}\", dataProvider.toMap(new HashMap<>()));\n        }\n        Policy.Session session = policy.createSession(dataProvider);\n        Policy.Suggester suggester = getSuggester(session, event, zkStateReader);\n        while (true) {\n          SolrRequest operation = suggester.getOperation();\n          if (operation == null) break;\n          log.info(\"Computed Plan: {}\", operation.getParams());\n          Map<String, Object> props = context.getProperties();\n          props.compute(\"operations\", (k, v) -> {\n            List<SolrRequest> operations = (List<SolrRequest>) v;\n            if (operations == null) operations = new ArrayList<>();\n            operations.add(operation);\n            return operations;\n          });\n          session = suggester.getSession();\n          suggester = getSuggester(session, event, zkStateReader);\n        }\n      }\n    } catch (KeeperException e) {\n      log.error(\"ZooKeeperException while processing event: \" + event, e);\n    } catch (InterruptedException e) {\n      log.error(\"Interrupted while processing event: \" + event, e);\n    } catch (IOException e) {\n      log.error(\"IOException while processing event: \" + event, e);\n    } catch (Exception e) {\n      log.error(\"Unexpected exception while processing event: \" + event, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eaca6a0674512222004d9a2b0ca95d86bda20f1c","date":1508160449,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#process(TriggerEvent,ActionContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#process(TriggerEvent,ActionContext).mjava","sourceNew":"  @Override\n  public void process(TriggerEvent event, ActionContext context) {\n    log.debug(\"-- processing event: {} with context properties: {}\", event, context.getProperties());\n    SolrCloudManager cloudManager = context.getCloudManager();\n    try {\n      AutoScalingConfig autoScalingConf = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      if (autoScalingConf.isEmpty()) {\n        log.error(\"Action: \" + getName() + \" executed but no policy is configured\");\n        return;\n      }\n      Policy policy = autoScalingConf.getPolicy();\n      Policy.Session session = policy.createSession(cloudManager);\n      Suggester suggester = getSuggester(session, event, cloudManager);\n      while (true) {\n        SolrRequest operation = suggester.getOperation();\n        if (operation == null) break;\n        log.info(\"Computed Plan: {}\", operation.getParams());\n        Map<String, Object> props = context.getProperties();\n        props.compute(\"operations\", (k, v) -> {\n          List<SolrRequest> operations = (List<SolrRequest>) v;\n          if (operations == null) operations = new ArrayList<>();\n          operations.add(operation);\n          return operations;\n        });\n        session = suggester.getSession();\n        suggester = getSuggester(session, event, cloudManager);\n      }\n    } catch (IOException e) {\n      log.error(\"IOException while processing event: \" + event, e);\n    } catch (Exception e) {\n      log.error(\"Unexpected exception while processing event: \" + event, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(TriggerEvent event, ActionContext context) {\n    log.debug(\"-- processing event: {} with context properties: {}\", event, context.getProperties());\n    SolrCloudManager cloudManager = context.getCloudManager();\n    try {\n      AutoScalingConfig autoScalingConf = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      if (autoScalingConf.isEmpty()) {\n        log.error(\"Action: \" + getName() + \" executed but no policy is configured\");\n        return;\n      }\n      Policy policy = autoScalingConf.getPolicy();\n      Policy.Session session = policy.createSession(cloudManager);\n      Policy.Suggester suggester = getSuggester(session, event, cloudManager);\n      while (true) {\n        SolrRequest operation = suggester.getOperation();\n        if (operation == null) break;\n        log.info(\"Computed Plan: {}\", operation.getParams());\n        Map<String, Object> props = context.getProperties();\n        props.compute(\"operations\", (k, v) -> {\n          List<SolrRequest> operations = (List<SolrRequest>) v;\n          if (operations == null) operations = new ArrayList<>();\n          operations.add(operation);\n          return operations;\n        });\n        session = suggester.getSession();\n        suggester = getSuggester(session, event, cloudManager);\n      }\n    } catch (IOException e) {\n      log.error(\"IOException while processing event: \" + event, e);\n    } catch (Exception e) {\n      log.error(\"Unexpected exception while processing event: \" + event, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bbcda32e5cd37ef61ea1190bacd080308e22070","date":1508850553,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#process(TriggerEvent,ActionContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#process(TriggerEvent,ActionContext).mjava","sourceNew":"  @Override\n  public void process(TriggerEvent event, ActionContext context) {\n    log.debug(\"-- processing event: {} with context properties: {}\", event, context.getProperties());\n    SolrCloudManager cloudManager = context.getCloudManager();\n    try {\n      AutoScalingConfig autoScalingConf = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      if (autoScalingConf.isEmpty()) {\n        log.error(\"Action: \" + getName() + \" executed but no policy is configured\");\n        return;\n      }\n      Policy policy = autoScalingConf.getPolicy();\n      Policy.Session session = policy.createSession(cloudManager);\n      Suggester suggester = getSuggester(session, event, cloudManager);\n      while (true) {\n        SolrRequest operation = suggester.getSuggestion();\n        if (operation == null) break;\n        log.info(\"Computed Plan: {}\", operation.getParams());\n        Map<String, Object> props = context.getProperties();\n        props.compute(\"operations\", (k, v) -> {\n          List<SolrRequest> operations = (List<SolrRequest>) v;\n          if (operations == null) operations = new ArrayList<>();\n          operations.add(operation);\n          return operations;\n        });\n        session = suggester.getSession();\n        suggester = getSuggester(session, event, cloudManager);\n      }\n    } catch (IOException e) {\n      log.error(\"IOException while processing event: \" + event, e);\n    } catch (Exception e) {\n      log.error(\"Unexpected exception while processing event: \" + event, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(TriggerEvent event, ActionContext context) {\n    log.debug(\"-- processing event: {} with context properties: {}\", event, context.getProperties());\n    SolrCloudManager cloudManager = context.getCloudManager();\n    try {\n      AutoScalingConfig autoScalingConf = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      if (autoScalingConf.isEmpty()) {\n        log.error(\"Action: \" + getName() + \" executed but no policy is configured\");\n        return;\n      }\n      Policy policy = autoScalingConf.getPolicy();\n      Policy.Session session = policy.createSession(cloudManager);\n      Suggester suggester = getSuggester(session, event, cloudManager);\n      while (true) {\n        SolrRequest operation = suggester.getOperation();\n        if (operation == null) break;\n        log.info(\"Computed Plan: {}\", operation.getParams());\n        Map<String, Object> props = context.getProperties();\n        props.compute(\"operations\", (k, v) -> {\n          List<SolrRequest> operations = (List<SolrRequest>) v;\n          if (operations == null) operations = new ArrayList<>();\n          operations.add(operation);\n          return operations;\n        });\n        session = suggester.getSession();\n        suggester = getSuggester(session, event, cloudManager);\n      }\n    } catch (IOException e) {\n      log.error(\"IOException while processing event: \" + event, e);\n    } catch (Exception e) {\n      log.error(\"Unexpected exception while processing event: \" + event, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67e503ef0f418bc92404ff5d55694087c23d48eb","date":1509025368,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#process(TriggerEvent,ActionContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#process(TriggerEvent,ActionContext).mjava","sourceNew":"  @Override\n  public void process(TriggerEvent event, ActionContext context) throws Exception {\n    log.debug(\"-- processing event: {} with context properties: {}\", event, context.getProperties());\n    SolrCloudManager cloudManager = context.getCloudManager();\n    try {\n      AutoScalingConfig autoScalingConf = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      if (autoScalingConf.isEmpty()) {\n        throw new Exception(\"Action: \" + getName() + \" executed but no policy is configured\");\n      }\n      Policy policy = autoScalingConf.getPolicy();\n      Policy.Session session = policy.createSession(cloudManager);\n      Suggester suggester = getSuggester(session, event, cloudManager);\n      while (true) {\n        SolrRequest operation = suggester.getSuggestion();\n        if (operation == null) break;\n        log.info(\"Computed Plan: {}\", operation.getParams());\n        Map<String, Object> props = context.getProperties();\n        props.compute(\"operations\", (k, v) -> {\n          List<SolrRequest> operations = (List<SolrRequest>) v;\n          if (operations == null) operations = new ArrayList<>();\n          operations.add(operation);\n          return operations;\n        });\n        session = suggester.getSession();\n        suggester = getSuggester(session, event, cloudManager);\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unexpected exception while processing event: \" + event, e);    }\n  }\n\n","sourceOld":"  @Override\n  public void process(TriggerEvent event, ActionContext context) {\n    log.debug(\"-- processing event: {} with context properties: {}\", event, context.getProperties());\n    SolrCloudManager cloudManager = context.getCloudManager();\n    try {\n      AutoScalingConfig autoScalingConf = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      if (autoScalingConf.isEmpty()) {\n        log.error(\"Action: \" + getName() + \" executed but no policy is configured\");\n        return;\n      }\n      Policy policy = autoScalingConf.getPolicy();\n      Policy.Session session = policy.createSession(cloudManager);\n      Suggester suggester = getSuggester(session, event, cloudManager);\n      while (true) {\n        SolrRequest operation = suggester.getSuggestion();\n        if (operation == null) break;\n        log.info(\"Computed Plan: {}\", operation.getParams());\n        Map<String, Object> props = context.getProperties();\n        props.compute(\"operations\", (k, v) -> {\n          List<SolrRequest> operations = (List<SolrRequest>) v;\n          if (operations == null) operations = new ArrayList<>();\n          operations.add(operation);\n          return operations;\n        });\n        session = suggester.getSession();\n        suggester = getSuggester(session, event, cloudManager);\n      }\n    } catch (IOException e) {\n      log.error(\"IOException while processing event: \" + event, e);\n    } catch (Exception e) {\n      log.error(\"Unexpected exception while processing event: \" + event, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d907c28c7fe6305eaec1756d51365f5149e1e41d","date":1512533044,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#process(TriggerEvent,ActionContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#process(TriggerEvent,ActionContext).mjava","sourceNew":"  @Override\n  public void process(TriggerEvent event, ActionContext context) throws Exception {\n    log.debug(\"-- processing event: {} with context properties: {}\", event, context.getProperties());\n    SolrCloudManager cloudManager = context.getCloudManager();\n    try {\n      AutoScalingConfig autoScalingConf = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      if (autoScalingConf.isEmpty()) {\n        throw new Exception(\"Action: \" + getName() + \" executed but no policy is configured\");\n      }\n\n      //    Policy.Session session = cloudManager.getDistribStateManager().getAutoScalingConfig().getPolicy().createSession(cloudManager);\n//    return new PolicyHelper.SessionWrapper(session, null);\n      PolicyHelper.SessionWrapper sessionWrapper = PolicyHelper.getSession(cloudManager);\n      Policy.Session session = sessionWrapper.get();\n//      Policy policy = autoScalingConf.getPolicy();\n      try {\n        Suggester suggester = getSuggester(session, event, cloudManager);\n        while (true) {\n          SolrRequest operation = suggester.getSuggestion();\n          if (operation == null) break;\n          log.info(\"Computed Plan: {}\", operation.getParams());\n          Map<String, Object> props = context.getProperties();\n          props.compute(\"operations\", (k, v) -> {\n            List<SolrRequest> operations = (List<SolrRequest>) v;\n            if (operations == null) operations = new ArrayList<>();\n            operations.add(operation);\n            return operations;\n          });\n          session = suggester.getSession();\n          suggester = getSuggester(session, event, cloudManager);\n        }\n      } finally {\n        releasePolicySession(sessionWrapper, session);\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unexpected exception while processing event: \" + event, e);    }\n  }\n\n","sourceOld":"  @Override\n  public void process(TriggerEvent event, ActionContext context) throws Exception {\n    log.debug(\"-- processing event: {} with context properties: {}\", event, context.getProperties());\n    SolrCloudManager cloudManager = context.getCloudManager();\n    try {\n      AutoScalingConfig autoScalingConf = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      if (autoScalingConf.isEmpty()) {\n        throw new Exception(\"Action: \" + getName() + \" executed but no policy is configured\");\n      }\n      Policy policy = autoScalingConf.getPolicy();\n      Policy.Session session = policy.createSession(cloudManager);\n      Suggester suggester = getSuggester(session, event, cloudManager);\n      while (true) {\n        SolrRequest operation = suggester.getSuggestion();\n        if (operation == null) break;\n        log.info(\"Computed Plan: {}\", operation.getParams());\n        Map<String, Object> props = context.getProperties();\n        props.compute(\"operations\", (k, v) -> {\n          List<SolrRequest> operations = (List<SolrRequest>) v;\n          if (operations == null) operations = new ArrayList<>();\n          operations.add(operation);\n          return operations;\n        });\n        session = suggester.getSession();\n        suggester = getSuggester(session, event, cloudManager);\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unexpected exception while processing event: \" + event, e);    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#process(TriggerEvent,ActionContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#process(TriggerEvent,ActionContext).mjava","sourceNew":"  @Override\n  public void process(TriggerEvent event, ActionContext context) throws Exception {\n    log.debug(\"-- processing event: {} with context properties: {}\", event, context.getProperties());\n    SolrCloudManager cloudManager = context.getCloudManager();\n    try {\n      AutoScalingConfig autoScalingConf = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      if (autoScalingConf.isEmpty()) {\n        throw new Exception(\"Action: \" + getName() + \" executed but no policy is configured\");\n      }\n      PolicyHelper.SessionWrapper sessionWrapper = PolicyHelper.getSession(cloudManager);\n      Policy.Session session = sessionWrapper.get();\n      if (log.isTraceEnabled()) {\n        ClusterState state = cloudManager.getClusterStateProvider().getClusterState();\n        log.trace(\"-- session: {}\", session);\n        log.trace(\"-- state: {}\", state);\n      }\n      try {\n        Suggester suggester = getSuggester(session, event, cloudManager);\n        while (true) {\n          SolrRequest operation = suggester.getSuggestion();\n          if (operation == null) break;\n          log.info(\"Computed Plan: {}\", operation.getParams());\n          Map<String, Object> props = context.getProperties();\n          props.compute(\"operations\", (k, v) -> {\n            List<SolrRequest> operations = (List<SolrRequest>) v;\n            if (operations == null) operations = new ArrayList<>();\n            operations.add(operation);\n            return operations;\n          });\n          session = suggester.getSession();\n          suggester = getSuggester(session, event, cloudManager);\n        }\n      } finally {\n        releasePolicySession(sessionWrapper, session);\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unexpected exception while processing event: \" + event, e);    }\n  }\n\n","sourceOld":"  @Override\n  public void process(TriggerEvent event, ActionContext context) throws Exception {\n    log.debug(\"-- processing event: {} with context properties: {}\", event, context.getProperties());\n    SolrCloudManager cloudManager = context.getCloudManager();\n    try {\n      AutoScalingConfig autoScalingConf = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      if (autoScalingConf.isEmpty()) {\n        throw new Exception(\"Action: \" + getName() + \" executed but no policy is configured\");\n      }\n\n      //    Policy.Session session = cloudManager.getDistribStateManager().getAutoScalingConfig().getPolicy().createSession(cloudManager);\n//    return new PolicyHelper.SessionWrapper(session, null);\n      PolicyHelper.SessionWrapper sessionWrapper = PolicyHelper.getSession(cloudManager);\n      Policy.Session session = sessionWrapper.get();\n//      Policy policy = autoScalingConf.getPolicy();\n      try {\n        Suggester suggester = getSuggester(session, event, cloudManager);\n        while (true) {\n          SolrRequest operation = suggester.getSuggestion();\n          if (operation == null) break;\n          log.info(\"Computed Plan: {}\", operation.getParams());\n          Map<String, Object> props = context.getProperties();\n          props.compute(\"operations\", (k, v) -> {\n            List<SolrRequest> operations = (List<SolrRequest>) v;\n            if (operations == null) operations = new ArrayList<>();\n            operations.add(operation);\n            return operations;\n          });\n          session = suggester.getSession();\n          suggester = getSuggester(session, event, cloudManager);\n        }\n      } finally {\n        releasePolicySession(sessionWrapper, session);\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unexpected exception while processing event: \" + event, e);    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9ccfe45460d496c5e5e1b70396521dac842d966","date":1516798975,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#process(TriggerEvent,ActionContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#process(TriggerEvent,ActionContext).mjava","sourceNew":"  @Override\n  public void process(TriggerEvent event, ActionContext context) throws Exception {\n    log.debug(\"-- processing event: {} with context properties: {}\", event, context.getProperties());\n    SolrCloudManager cloudManager = context.getCloudManager();\n    try {\n      AutoScalingConfig autoScalingConf = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      if (autoScalingConf.isEmpty()) {\n        throw new Exception(\"Action: \" + getName() + \" executed but no policy is configured\");\n      }\n      PolicyHelper.SessionWrapper sessionWrapper = PolicyHelper.getSession(cloudManager);\n      Policy.Session session = sessionWrapper.get();\n      ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n      if (log.isTraceEnabled()) {\n        log.trace(\"-- session: {}\", session);\n        log.trace(\"-- state: {}\", clusterState);\n      }\n      try {\n        Suggester suggester = getSuggester(session, event, cloudManager);\n        int maxOperations = getMaxNumOps(event, autoScalingConf, clusterState);\n        int requestedOperations = getRequestedNumOps(event);\n        if (requestedOperations > maxOperations) {\n          log.warn(\"Requested number of operations {} higher than maximum {}, adjusting...\",\n              requestedOperations, maxOperations);\n        }\n        int opCount = 0;\n        int opLimit = maxOperations;\n        if (requestedOperations > 0) {\n          opLimit = requestedOperations;\n        }\n        do {\n          SolrRequest operation = suggester.getSuggestion();\n          opCount++;\n          // prepare suggester for the next iteration\n          if (suggester.getSession() != null) {\n            session = suggester.getSession();\n          }\n          suggester = getSuggester(session, event, cloudManager);\n\n          // break on first null op\n          // unless a specific number of ops was requested\n          if (operation == null) {\n            if (requestedOperations < 0) {\n              break;\n            } else {\n              log.info(\"Computed plan empty, remained \" + (opCount - opLimit) + \" requested ops to try.\");\n              continue;\n            }\n          }\n          log.info(\"Computed Plan: {}\", operation.getParams());\n          Map<String, Object> props = context.getProperties();\n          props.compute(\"operations\", (k, v) -> {\n            List<SolrRequest> operations = (List<SolrRequest>) v;\n            if (operations == null) operations = new ArrayList<>();\n            operations.add(operation);\n            return operations;\n          });\n        } while (opCount < opLimit);\n      } finally {\n        releasePolicySession(sessionWrapper, session);\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unexpected exception while processing event: \" + event, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(TriggerEvent event, ActionContext context) throws Exception {\n    log.debug(\"-- processing event: {} with context properties: {}\", event, context.getProperties());\n    SolrCloudManager cloudManager = context.getCloudManager();\n    try {\n      AutoScalingConfig autoScalingConf = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      if (autoScalingConf.isEmpty()) {\n        throw new Exception(\"Action: \" + getName() + \" executed but no policy is configured\");\n      }\n      PolicyHelper.SessionWrapper sessionWrapper = PolicyHelper.getSession(cloudManager);\n      Policy.Session session = sessionWrapper.get();\n      if (log.isTraceEnabled()) {\n        ClusterState state = cloudManager.getClusterStateProvider().getClusterState();\n        log.trace(\"-- session: {}\", session);\n        log.trace(\"-- state: {}\", state);\n      }\n      try {\n        Suggester suggester = getSuggester(session, event, cloudManager);\n        while (true) {\n          SolrRequest operation = suggester.getSuggestion();\n          if (operation == null) break;\n          log.info(\"Computed Plan: {}\", operation.getParams());\n          Map<String, Object> props = context.getProperties();\n          props.compute(\"operations\", (k, v) -> {\n            List<SolrRequest> operations = (List<SolrRequest>) v;\n            if (operations == null) operations = new ArrayList<>();\n            operations.add(operation);\n            return operations;\n          });\n          session = suggester.getSession();\n          suggester = getSuggester(session, event, cloudManager);\n        }\n      } finally {\n        releasePolicySession(sessionWrapper, session);\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unexpected exception while processing event: \" + event, e);    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441","date":1516881857,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#process(TriggerEvent,ActionContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#process(TriggerEvent,ActionContext).mjava","sourceNew":"  @Override\n  public void process(TriggerEvent event, ActionContext context) throws Exception {\n    log.debug(\"-- processing event: {} with context properties: {}\", event, context.getProperties());\n    SolrCloudManager cloudManager = context.getCloudManager();\n    try {\n      AutoScalingConfig autoScalingConf = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      if (autoScalingConf.isEmpty()) {\n        throw new Exception(\"Action: \" + getName() + \" executed but no policy is configured\");\n      }\n      PolicyHelper.SessionWrapper sessionWrapper = PolicyHelper.getSession(cloudManager);\n      Policy.Session session = sessionWrapper.get();\n      ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n      if (log.isTraceEnabled()) {\n        log.trace(\"-- session: {}\", session);\n        log.trace(\"-- state: {}\", clusterState);\n      }\n      try {\n        Suggester suggester = getSuggester(session, event, cloudManager);\n        int maxOperations = getMaxNumOps(event, autoScalingConf, clusterState);\n        int requestedOperations = getRequestedNumOps(event);\n        if (requestedOperations > maxOperations) {\n          log.warn(\"Requested number of operations {} higher than maximum {}, adjusting...\",\n              requestedOperations, maxOperations);\n        }\n        int opCount = 0;\n        int opLimit = maxOperations;\n        if (requestedOperations > 0) {\n          opLimit = requestedOperations;\n        }\n        do {\n          SolrRequest operation = suggester.getSuggestion();\n          opCount++;\n          // prepare suggester for the next iteration\n          if (suggester.getSession() != null) {\n            session = suggester.getSession();\n          }\n          suggester = getSuggester(session, event, cloudManager);\n\n          // break on first null op\n          // unless a specific number of ops was requested\n          if (operation == null) {\n            if (requestedOperations < 0) {\n              break;\n            } else {\n              log.info(\"Computed plan empty, remained \" + (opCount - opLimit) + \" requested ops to try.\");\n              continue;\n            }\n          }\n          log.info(\"Computed Plan: {}\", operation.getParams());\n          Map<String, Object> props = context.getProperties();\n          props.compute(\"operations\", (k, v) -> {\n            List<SolrRequest> operations = (List<SolrRequest>) v;\n            if (operations == null) operations = new ArrayList<>();\n            operations.add(operation);\n            return operations;\n          });\n        } while (opCount < opLimit);\n      } finally {\n        releasePolicySession(sessionWrapper, session);\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unexpected exception while processing event: \" + event, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(TriggerEvent event, ActionContext context) throws Exception {\n    log.debug(\"-- processing event: {} with context properties: {}\", event, context.getProperties());\n    SolrCloudManager cloudManager = context.getCloudManager();\n    try {\n      AutoScalingConfig autoScalingConf = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      if (autoScalingConf.isEmpty()) {\n        throw new Exception(\"Action: \" + getName() + \" executed but no policy is configured\");\n      }\n      PolicyHelper.SessionWrapper sessionWrapper = PolicyHelper.getSession(cloudManager);\n      Policy.Session session = sessionWrapper.get();\n      if (log.isTraceEnabled()) {\n        ClusterState state = cloudManager.getClusterStateProvider().getClusterState();\n        log.trace(\"-- session: {}\", session);\n        log.trace(\"-- state: {}\", state);\n      }\n      try {\n        Suggester suggester = getSuggester(session, event, cloudManager);\n        while (true) {\n          SolrRequest operation = suggester.getSuggestion();\n          if (operation == null) break;\n          log.info(\"Computed Plan: {}\", operation.getParams());\n          Map<String, Object> props = context.getProperties();\n          props.compute(\"operations\", (k, v) -> {\n            List<SolrRequest> operations = (List<SolrRequest>) v;\n            if (operations == null) operations = new ArrayList<>();\n            operations.add(operation);\n            return operations;\n          });\n          session = suggester.getSession();\n          suggester = getSuggester(session, event, cloudManager);\n        }\n      } finally {\n        releasePolicySession(sessionWrapper, session);\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unexpected exception while processing event: \" + event, e);    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46ef1a2b9cf8410947a87a43aba2b400394e773","date":1517224576,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#process(TriggerEvent,ActionContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#process(TriggerEvent,ActionContext).mjava","sourceNew":"  @Override\n  public void process(TriggerEvent event, ActionContext context) throws Exception {\n    log.debug(\"-- processing event: {} with context properties: {}\", event, context.getProperties());\n    SolrCloudManager cloudManager = context.getCloudManager();\n    try {\n      AutoScalingConfig autoScalingConf = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      if (autoScalingConf.isEmpty()) {\n        throw new Exception(\"Action: \" + getName() + \" executed but no policy is configured\");\n      }\n      PolicyHelper.SessionWrapper sessionWrapper = PolicyHelper.getSession(cloudManager);\n      Policy.Session session = sessionWrapper.get();\n      ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n      if (log.isTraceEnabled()) {\n        log.trace(\"-- session: {}\", session);\n        log.trace(\"-- state: {}\", clusterState);\n      }\n      try {\n        Suggester suggester = getSuggester(session, event, cloudManager);\n        int maxOperations = getMaxNumOps(event, autoScalingConf, clusterState);\n        int requestedOperations = getRequestedNumOps(event);\n        if (requestedOperations > maxOperations) {\n          log.warn(\"Requested number of operations {} higher than maximum {}, adjusting...\",\n              requestedOperations, maxOperations);\n        }\n        int opCount = 0;\n        int opLimit = maxOperations;\n        if (requestedOperations > 0) {\n          opLimit = requestedOperations;\n        }\n        do {\n          SolrRequest operation = suggester.getSuggestion();\n          opCount++;\n          // prepare suggester for the next iteration\n          if (suggester.getSession() != null) {\n            session = suggester.getSession();\n          }\n          suggester = getSuggester(session, event, cloudManager);\n\n          // break on first null op\n          // unless a specific number of ops was requested\n          if (operation == null) {\n            if (requestedOperations < 0) {\n              break;\n            } else {\n              log.info(\"Computed plan empty, remained \" + (opCount - opLimit) + \" requested ops to try.\");\n              continue;\n            }\n          }\n          log.info(\"Computed Plan: {}\", operation.getParams());\n          if (!collections.isEmpty()) {\n            String coll = operation.getParams().get(CoreAdminParams.COLLECTION);\n            if (coll != null && !collections.contains(coll)) {\n              // discard an op that doesn't affect our collections\n              log.debug(\"-- discarding due to collection={} not in {}\", coll, collections);\n              continue;\n            }\n          }\n          Map<String, Object> props = context.getProperties();\n          props.compute(\"operations\", (k, v) -> {\n            List<SolrRequest> operations = (List<SolrRequest>) v;\n            if (operations == null) operations = new ArrayList<>();\n            operations.add(operation);\n            return operations;\n          });\n        } while (opCount < opLimit);\n      } finally {\n        releasePolicySession(sessionWrapper, session);\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unexpected exception while processing event: \" + event, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(TriggerEvent event, ActionContext context) throws Exception {\n    log.debug(\"-- processing event: {} with context properties: {}\", event, context.getProperties());\n    SolrCloudManager cloudManager = context.getCloudManager();\n    try {\n      AutoScalingConfig autoScalingConf = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      if (autoScalingConf.isEmpty()) {\n        throw new Exception(\"Action: \" + getName() + \" executed but no policy is configured\");\n      }\n      PolicyHelper.SessionWrapper sessionWrapper = PolicyHelper.getSession(cloudManager);\n      Policy.Session session = sessionWrapper.get();\n      ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n      if (log.isTraceEnabled()) {\n        log.trace(\"-- session: {}\", session);\n        log.trace(\"-- state: {}\", clusterState);\n      }\n      try {\n        Suggester suggester = getSuggester(session, event, cloudManager);\n        int maxOperations = getMaxNumOps(event, autoScalingConf, clusterState);\n        int requestedOperations = getRequestedNumOps(event);\n        if (requestedOperations > maxOperations) {\n          log.warn(\"Requested number of operations {} higher than maximum {}, adjusting...\",\n              requestedOperations, maxOperations);\n        }\n        int opCount = 0;\n        int opLimit = maxOperations;\n        if (requestedOperations > 0) {\n          opLimit = requestedOperations;\n        }\n        do {\n          SolrRequest operation = suggester.getSuggestion();\n          opCount++;\n          // prepare suggester for the next iteration\n          if (suggester.getSession() != null) {\n            session = suggester.getSession();\n          }\n          suggester = getSuggester(session, event, cloudManager);\n\n          // break on first null op\n          // unless a specific number of ops was requested\n          if (operation == null) {\n            if (requestedOperations < 0) {\n              break;\n            } else {\n              log.info(\"Computed plan empty, remained \" + (opCount - opLimit) + \" requested ops to try.\");\n              continue;\n            }\n          }\n          log.info(\"Computed Plan: {}\", operation.getParams());\n          Map<String, Object> props = context.getProperties();\n          props.compute(\"operations\", (k, v) -> {\n            List<SolrRequest> operations = (List<SolrRequest>) v;\n            if (operations == null) operations = new ArrayList<>();\n            operations.add(operation);\n            return operations;\n          });\n        } while (opCount < opLimit);\n      } finally {\n        releasePolicySession(sessionWrapper, session);\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unexpected exception while processing event: \" + event, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f0e33082a86447f4f2b59a1a5f69a310500276a","date":1519970482,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#process(TriggerEvent,ActionContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#process(TriggerEvent,ActionContext).mjava","sourceNew":"  @Override\n  public void process(TriggerEvent event, ActionContext context) throws Exception {\n    log.debug(\"-- processing event: {} with context properties: {}\", event, context.getProperties());\n    SolrCloudManager cloudManager = context.getCloudManager();\n    try {\n      AutoScalingConfig autoScalingConf = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      if (autoScalingConf.isEmpty()) {\n        throw new Exception(\"Action: \" + getName() + \" executed but no policy is configured\");\n      }\n      PolicyHelper.SessionWrapper sessionWrapper = PolicyHelper.getSession(cloudManager);\n      Policy.Session session = sessionWrapper.get();\n      ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n      if (log.isTraceEnabled()) {\n        log.trace(\"-- session: {}\", session);\n        log.trace(\"-- state: {}\", clusterState);\n      }\n      try {\n        Suggester intialSuggester = getSuggester(session, event, cloudManager);\n        Suggester suggester = intialSuggester;\n        int maxOperations = getMaxNumOps(event, autoScalingConf, clusterState);\n        int requestedOperations = getRequestedNumOps(event);\n        if (requestedOperations > maxOperations) {\n          log.warn(\"Requested number of operations {} higher than maximum {}, adjusting...\",\n              requestedOperations, maxOperations);\n        }\n        int opCount = 0;\n        int opLimit = maxOperations;\n        if (requestedOperations > 0) {\n          opLimit = requestedOperations;\n        }\n        do {\n          SolrRequest operation = suggester.getSuggestion();\n          opCount++;\n          // prepare suggester for the next iteration\n          if (suggester.getSession() != null) {\n            session = suggester.getSession();\n          }\n          suggester = getSuggester(session, event, cloudManager);\n\n          // break on first null op\n          // unless a specific number of ops was requested\n          // uncomment the following to log too many operations\n          /*if (opCount > 10) {\n            PolicyHelper.logState(cloudManager, intialSuggester);\n          }*/\n\n          if (operation == null) {\n            if (requestedOperations < 0) {\n              //uncomment the following to log zero operations\n//              PolicyHelper.logState(cloudManager, intialSuggester);\n              break;\n            } else {\n              log.info(\"Computed plan empty, remained \" + (opCount - opLimit) + \" requested ops to try.\");\n              continue;\n            }\n          }\n          log.info(\"Computed Plan: {}\", operation.getParams());\n          if (!collections.isEmpty()) {\n            String coll = operation.getParams().get(CoreAdminParams.COLLECTION);\n            if (coll != null && !collections.contains(coll)) {\n              // discard an op that doesn't affect our collections\n              log.debug(\"-- discarding due to collection={} not in {}\", coll, collections);\n              continue;\n            }\n          }\n          Map<String, Object> props = context.getProperties();\n          props.compute(\"operations\", (k, v) -> {\n            List<SolrRequest> operations = (List<SolrRequest>) v;\n            if (operations == null) operations = new ArrayList<>();\n            operations.add(operation);\n            return operations;\n          });\n        } while (opCount < opLimit);\n      } finally {\n        releasePolicySession(sessionWrapper, session);\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unexpected exception while processing event: \" + event, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(TriggerEvent event, ActionContext context) throws Exception {\n    log.debug(\"-- processing event: {} with context properties: {}\", event, context.getProperties());\n    SolrCloudManager cloudManager = context.getCloudManager();\n    try {\n      AutoScalingConfig autoScalingConf = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      if (autoScalingConf.isEmpty()) {\n        throw new Exception(\"Action: \" + getName() + \" executed but no policy is configured\");\n      }\n      PolicyHelper.SessionWrapper sessionWrapper = PolicyHelper.getSession(cloudManager);\n      Policy.Session session = sessionWrapper.get();\n      ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n      if (log.isTraceEnabled()) {\n        log.trace(\"-- session: {}\", session);\n        log.trace(\"-- state: {}\", clusterState);\n      }\n      try {\n        Suggester suggester = getSuggester(session, event, cloudManager);\n        int maxOperations = getMaxNumOps(event, autoScalingConf, clusterState);\n        int requestedOperations = getRequestedNumOps(event);\n        if (requestedOperations > maxOperations) {\n          log.warn(\"Requested number of operations {} higher than maximum {}, adjusting...\",\n              requestedOperations, maxOperations);\n        }\n        int opCount = 0;\n        int opLimit = maxOperations;\n        if (requestedOperations > 0) {\n          opLimit = requestedOperations;\n        }\n        do {\n          SolrRequest operation = suggester.getSuggestion();\n          opCount++;\n          // prepare suggester for the next iteration\n          if (suggester.getSession() != null) {\n            session = suggester.getSession();\n          }\n          suggester = getSuggester(session, event, cloudManager);\n\n          // break on first null op\n          // unless a specific number of ops was requested\n          if (operation == null) {\n            if (requestedOperations < 0) {\n              break;\n            } else {\n              log.info(\"Computed plan empty, remained \" + (opCount - opLimit) + \" requested ops to try.\");\n              continue;\n            }\n          }\n          log.info(\"Computed Plan: {}\", operation.getParams());\n          if (!collections.isEmpty()) {\n            String coll = operation.getParams().get(CoreAdminParams.COLLECTION);\n            if (coll != null && !collections.contains(coll)) {\n              // discard an op that doesn't affect our collections\n              log.debug(\"-- discarding due to collection={} not in {}\", coll, collections);\n              continue;\n            }\n          }\n          Map<String, Object> props = context.getProperties();\n          props.compute(\"operations\", (k, v) -> {\n            List<SolrRequest> operations = (List<SolrRequest>) v;\n            if (operations == null) operations = new ArrayList<>();\n            operations.add(operation);\n            return operations;\n          });\n        } while (opCount < opLimit);\n      } finally {\n        releasePolicySession(sessionWrapper, session);\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unexpected exception while processing event: \" + event, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dbcef71d964522324fa7548d3283f3f28df7e17","date":1521467538,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#process(TriggerEvent,ActionContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#process(TriggerEvent,ActionContext).mjava","sourceNew":"  @Override\n  public void process(TriggerEvent event, ActionContext context) throws Exception {\n    log.debug(\"-- processing event: {} with context properties: {}\", event, context.getProperties());\n    SolrCloudManager cloudManager = context.getCloudManager();\n    try {\n      AutoScalingConfig autoScalingConf = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      if (autoScalingConf.isEmpty()) {\n        throw new Exception(\"Action: \" + getName() + \" executed but no policy is configured\");\n      }\n      PolicyHelper.SessionWrapper sessionWrapper = PolicyHelper.getSession(cloudManager);\n      Policy.Session session = sessionWrapper.get();\n      ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n      if (log.isTraceEnabled()) {\n        log.trace(\"-- session: {}\", session);\n        log.trace(\"-- state: {}\", clusterState);\n      }\n      try {\n        Suggester intialSuggester = getSuggester(session, event, cloudManager);\n        Suggester suggester = intialSuggester;\n        int maxOperations = getMaxNumOps(event, autoScalingConf, clusterState);\n        int requestedOperations = getRequestedNumOps(event);\n        if (requestedOperations > maxOperations) {\n          log.warn(\"Requested number of operations {} higher than maximum {}, adjusting...\",\n              requestedOperations, maxOperations);\n        }\n        int opCount = 0;\n        int opLimit = maxOperations;\n        if (requestedOperations > 0) {\n          opLimit = requestedOperations;\n        }\n        do {\n          // computing changes in large clusters may take a long time\n          if (Thread.currentThread().isInterrupted()) {\n            throw new InterruptedException(\"stopping - thread was interrupted\");\n          }\n          SolrRequest operation = suggester.getSuggestion();\n          opCount++;\n          // prepare suggester for the next iteration\n          if (suggester.getSession() != null) {\n            session = suggester.getSession();\n          }\n          suggester = getSuggester(session, event, cloudManager);\n\n          // break on first null op\n          // unless a specific number of ops was requested\n          // uncomment the following to log too many operations\n          /*if (opCount > 10) {\n            PolicyHelper.logState(cloudManager, intialSuggester);\n          }*/\n\n          if (operation == null) {\n            if (requestedOperations < 0) {\n              //uncomment the following to log zero operations\n//              PolicyHelper.logState(cloudManager, intialSuggester);\n              break;\n            } else {\n              log.info(\"Computed plan empty, remained \" + (opCount - opLimit) + \" requested ops to try.\");\n              continue;\n            }\n          }\n          log.info(\"Computed Plan: {}\", operation.getParams());\n          if (!collections.isEmpty()) {\n            String coll = operation.getParams().get(CoreAdminParams.COLLECTION);\n            if (coll != null && !collections.contains(coll)) {\n              // discard an op that doesn't affect our collections\n              log.debug(\"-- discarding due to collection={} not in {}\", coll, collections);\n              continue;\n            }\n          }\n          Map<String, Object> props = context.getProperties();\n          props.compute(\"operations\", (k, v) -> {\n            List<SolrRequest> operations = (List<SolrRequest>) v;\n            if (operations == null) operations = new ArrayList<>();\n            operations.add(operation);\n            return operations;\n          });\n        } while (opCount < opLimit);\n      } finally {\n        releasePolicySession(sessionWrapper, session);\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unexpected exception while processing event: \" + event, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(TriggerEvent event, ActionContext context) throws Exception {\n    log.debug(\"-- processing event: {} with context properties: {}\", event, context.getProperties());\n    SolrCloudManager cloudManager = context.getCloudManager();\n    try {\n      AutoScalingConfig autoScalingConf = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      if (autoScalingConf.isEmpty()) {\n        throw new Exception(\"Action: \" + getName() + \" executed but no policy is configured\");\n      }\n      PolicyHelper.SessionWrapper sessionWrapper = PolicyHelper.getSession(cloudManager);\n      Policy.Session session = sessionWrapper.get();\n      ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n      if (log.isTraceEnabled()) {\n        log.trace(\"-- session: {}\", session);\n        log.trace(\"-- state: {}\", clusterState);\n      }\n      try {\n        Suggester intialSuggester = getSuggester(session, event, cloudManager);\n        Suggester suggester = intialSuggester;\n        int maxOperations = getMaxNumOps(event, autoScalingConf, clusterState);\n        int requestedOperations = getRequestedNumOps(event);\n        if (requestedOperations > maxOperations) {\n          log.warn(\"Requested number of operations {} higher than maximum {}, adjusting...\",\n              requestedOperations, maxOperations);\n        }\n        int opCount = 0;\n        int opLimit = maxOperations;\n        if (requestedOperations > 0) {\n          opLimit = requestedOperations;\n        }\n        do {\n          SolrRequest operation = suggester.getSuggestion();\n          opCount++;\n          // prepare suggester for the next iteration\n          if (suggester.getSession() != null) {\n            session = suggester.getSession();\n          }\n          suggester = getSuggester(session, event, cloudManager);\n\n          // break on first null op\n          // unless a specific number of ops was requested\n          // uncomment the following to log too many operations\n          /*if (opCount > 10) {\n            PolicyHelper.logState(cloudManager, intialSuggester);\n          }*/\n\n          if (operation == null) {\n            if (requestedOperations < 0) {\n              //uncomment the following to log zero operations\n//              PolicyHelper.logState(cloudManager, intialSuggester);\n              break;\n            } else {\n              log.info(\"Computed plan empty, remained \" + (opCount - opLimit) + \" requested ops to try.\");\n              continue;\n            }\n          }\n          log.info(\"Computed Plan: {}\", operation.getParams());\n          if (!collections.isEmpty()) {\n            String coll = operation.getParams().get(CoreAdminParams.COLLECTION);\n            if (coll != null && !collections.contains(coll)) {\n              // discard an op that doesn't affect our collections\n              log.debug(\"-- discarding due to collection={} not in {}\", coll, collections);\n              continue;\n            }\n          }\n          Map<String, Object> props = context.getProperties();\n          props.compute(\"operations\", (k, v) -> {\n            List<SolrRequest> operations = (List<SolrRequest>) v;\n            if (operations == null) operations = new ArrayList<>();\n            operations.add(operation);\n            return operations;\n          });\n        } while (opCount < opLimit);\n      } finally {\n        releasePolicySession(sessionWrapper, session);\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unexpected exception while processing event: \" + event, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1","date":1523453934,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#process(TriggerEvent,ActionContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#process(TriggerEvent,ActionContext).mjava","sourceNew":"  @Override\n  public void process(TriggerEvent event, ActionContext context) throws Exception {\n    log.debug(\"-- processing event: {} with context properties: {}\", event, context.getProperties());\n    SolrCloudManager cloudManager = context.getCloudManager();\n    try {\n      AutoScalingConfig autoScalingConf = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      if (autoScalingConf.isEmpty()) {\n        throw new Exception(\"Action: \" + getName() + \" executed but no policy is configured\");\n      }\n      PolicyHelper.SessionWrapper sessionWrapper = PolicyHelper.getSession(cloudManager);\n      Policy.Session session = sessionWrapper.get();\n      ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n      if (log.isTraceEnabled()) {\n        log.trace(\"-- session: {}\", session);\n        log.trace(\"-- state: {}\", clusterState);\n      }\n      try {\n        Suggester intialSuggester = getSuggester(session, event, context, cloudManager);\n        Suggester suggester = intialSuggester;\n        int maxOperations = getMaxNumOps(event, autoScalingConf, clusterState);\n        int requestedOperations = getRequestedNumOps(event);\n        if (requestedOperations > maxOperations) {\n          log.warn(\"Requested number of operations {} higher than maximum {}, adjusting...\",\n              requestedOperations, maxOperations);\n        }\n        int opCount = 0;\n        int opLimit = maxOperations;\n        if (requestedOperations > 0) {\n          opLimit = requestedOperations;\n        }\n        do {\n          // computing changes in large clusters may take a long time\n          if (Thread.currentThread().isInterrupted()) {\n            throw new InterruptedException(\"stopping - thread was interrupted\");\n          }\n          SolrRequest operation = suggester.getSuggestion();\n          opCount++;\n          // prepare suggester for the next iteration\n          if (suggester.getSession() != null) {\n            session = suggester.getSession();\n          }\n          suggester = getSuggester(session, event, context, cloudManager);\n\n          // break on first null op\n          // unless a specific number of ops was requested\n          // uncomment the following to log too many operations\n          /*if (opCount > 10) {\n            PolicyHelper.logState(cloudManager, intialSuggester);\n          }*/\n\n          if (operation == null) {\n            if (requestedOperations < 0) {\n              //uncomment the following to log zero operations\n//              PolicyHelper.logState(cloudManager, intialSuggester);\n              break;\n            } else {\n              log.info(\"Computed plan empty, remained \" + (opCount - opLimit) + \" requested ops to try.\");\n              continue;\n            }\n          }\n          log.info(\"Computed Plan: {}\", operation.getParams());\n          if (!collections.isEmpty()) {\n            String coll = operation.getParams().get(CoreAdminParams.COLLECTION);\n            if (coll != null && !collections.contains(coll)) {\n              // discard an op that doesn't affect our collections\n              log.debug(\"-- discarding due to collection={} not in {}\", coll, collections);\n              continue;\n            }\n          }\n          Map<String, Object> props = context.getProperties();\n          props.compute(\"operations\", (k, v) -> {\n            List<SolrRequest> operations = (List<SolrRequest>) v;\n            if (operations == null) operations = new ArrayList<>();\n            operations.add(operation);\n            return operations;\n          });\n        } while (opCount < opLimit);\n      } finally {\n        releasePolicySession(sessionWrapper, session);\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unexpected exception while processing event: \" + event, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(TriggerEvent event, ActionContext context) throws Exception {\n    log.debug(\"-- processing event: {} with context properties: {}\", event, context.getProperties());\n    SolrCloudManager cloudManager = context.getCloudManager();\n    try {\n      AutoScalingConfig autoScalingConf = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      if (autoScalingConf.isEmpty()) {\n        throw new Exception(\"Action: \" + getName() + \" executed but no policy is configured\");\n      }\n      PolicyHelper.SessionWrapper sessionWrapper = PolicyHelper.getSession(cloudManager);\n      Policy.Session session = sessionWrapper.get();\n      ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n      if (log.isTraceEnabled()) {\n        log.trace(\"-- session: {}\", session);\n        log.trace(\"-- state: {}\", clusterState);\n      }\n      try {\n        Suggester intialSuggester = getSuggester(session, event, cloudManager);\n        Suggester suggester = intialSuggester;\n        int maxOperations = getMaxNumOps(event, autoScalingConf, clusterState);\n        int requestedOperations = getRequestedNumOps(event);\n        if (requestedOperations > maxOperations) {\n          log.warn(\"Requested number of operations {} higher than maximum {}, adjusting...\",\n              requestedOperations, maxOperations);\n        }\n        int opCount = 0;\n        int opLimit = maxOperations;\n        if (requestedOperations > 0) {\n          opLimit = requestedOperations;\n        }\n        do {\n          // computing changes in large clusters may take a long time\n          if (Thread.currentThread().isInterrupted()) {\n            throw new InterruptedException(\"stopping - thread was interrupted\");\n          }\n          SolrRequest operation = suggester.getSuggestion();\n          opCount++;\n          // prepare suggester for the next iteration\n          if (suggester.getSession() != null) {\n            session = suggester.getSession();\n          }\n          suggester = getSuggester(session, event, cloudManager);\n\n          // break on first null op\n          // unless a specific number of ops was requested\n          // uncomment the following to log too many operations\n          /*if (opCount > 10) {\n            PolicyHelper.logState(cloudManager, intialSuggester);\n          }*/\n\n          if (operation == null) {\n            if (requestedOperations < 0) {\n              //uncomment the following to log zero operations\n//              PolicyHelper.logState(cloudManager, intialSuggester);\n              break;\n            } else {\n              log.info(\"Computed plan empty, remained \" + (opCount - opLimit) + \" requested ops to try.\");\n              continue;\n            }\n          }\n          log.info(\"Computed Plan: {}\", operation.getParams());\n          if (!collections.isEmpty()) {\n            String coll = operation.getParams().get(CoreAdminParams.COLLECTION);\n            if (coll != null && !collections.contains(coll)) {\n              // discard an op that doesn't affect our collections\n              log.debug(\"-- discarding due to collection={} not in {}\", coll, collections);\n              continue;\n            }\n          }\n          Map<String, Object> props = context.getProperties();\n          props.compute(\"operations\", (k, v) -> {\n            List<SolrRequest> operations = (List<SolrRequest>) v;\n            if (operations == null) operations = new ArrayList<>();\n            operations.add(operation);\n            return operations;\n          });\n        } while (opCount < opLimit);\n      } finally {\n        releasePolicySession(sessionWrapper, session);\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unexpected exception while processing event: \" + event, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43345f1452f9510f8aaadae6156fe0c834e7d957","date":1523483670,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#process(TriggerEvent,ActionContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#process(TriggerEvent,ActionContext).mjava","sourceNew":"  @Override\n  public void process(TriggerEvent event, ActionContext context) throws Exception {\n    log.debug(\"-- processing event: {} with context properties: {}\", event, context.getProperties());\n    SolrCloudManager cloudManager = context.getCloudManager();\n    try {\n      AutoScalingConfig autoScalingConf = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      if (autoScalingConf.isEmpty()) {\n        throw new Exception(\"Action: \" + getName() + \" executed but no policy is configured\");\n      }\n      PolicyHelper.SessionWrapper sessionWrapper = PolicyHelper.getSession(cloudManager);\n      Policy.Session session = sessionWrapper.get();\n      ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n      if (log.isTraceEnabled()) {\n        log.trace(\"-- session: {}\", session);\n        log.trace(\"-- state: {}\", clusterState);\n      }\n      try {\n        Suggester intialSuggester = getSuggester(session, event, context, cloudManager);\n        Suggester suggester = intialSuggester;\n        int maxOperations = getMaxNumOps(event, autoScalingConf, clusterState);\n        int requestedOperations = getRequestedNumOps(event);\n        if (requestedOperations > maxOperations) {\n          log.warn(\"Requested number of operations {} higher than maximum {}, adjusting...\",\n              requestedOperations, maxOperations);\n        }\n        int opCount = 0;\n        int opLimit = maxOperations;\n        if (requestedOperations > 0) {\n          opLimit = requestedOperations;\n        }\n        do {\n          // computing changes in large clusters may take a long time\n          if (Thread.currentThread().isInterrupted()) {\n            throw new InterruptedException(\"stopping - thread was interrupted\");\n          }\n          SolrRequest operation = suggester.getSuggestion();\n          opCount++;\n          // prepare suggester for the next iteration\n          if (suggester.getSession() != null) {\n            session = suggester.getSession();\n          }\n          suggester = getSuggester(session, event, context, cloudManager);\n\n          // break on first null op\n          // unless a specific number of ops was requested\n          // uncomment the following to log too many operations\n          /*if (opCount > 10) {\n            PolicyHelper.logState(cloudManager, intialSuggester);\n          }*/\n\n          if (operation == null) {\n            if (requestedOperations < 0) {\n              //uncomment the following to log zero operations\n//              PolicyHelper.logState(cloudManager, intialSuggester);\n              break;\n            } else {\n              log.info(\"Computed plan empty, remained \" + (opCount - opLimit) + \" requested ops to try.\");\n              continue;\n            }\n          }\n          log.info(\"Computed Plan: {}\", operation.getParams());\n          if (!collections.isEmpty()) {\n            String coll = operation.getParams().get(CoreAdminParams.COLLECTION);\n            if (coll != null && !collections.contains(coll)) {\n              // discard an op that doesn't affect our collections\n              log.debug(\"-- discarding due to collection={} not in {}\", coll, collections);\n              continue;\n            }\n          }\n          Map<String, Object> props = context.getProperties();\n          props.compute(\"operations\", (k, v) -> {\n            List<SolrRequest> operations = (List<SolrRequest>) v;\n            if (operations == null) operations = new ArrayList<>();\n            operations.add(operation);\n            return operations;\n          });\n        } while (opCount < opLimit);\n      } finally {\n        releasePolicySession(sessionWrapper, session);\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unexpected exception while processing event: \" + event, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(TriggerEvent event, ActionContext context) throws Exception {\n    log.debug(\"-- processing event: {} with context properties: {}\", event, context.getProperties());\n    SolrCloudManager cloudManager = context.getCloudManager();\n    try {\n      AutoScalingConfig autoScalingConf = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      if (autoScalingConf.isEmpty()) {\n        throw new Exception(\"Action: \" + getName() + \" executed but no policy is configured\");\n      }\n      PolicyHelper.SessionWrapper sessionWrapper = PolicyHelper.getSession(cloudManager);\n      Policy.Session session = sessionWrapper.get();\n      ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n      if (log.isTraceEnabled()) {\n        log.trace(\"-- session: {}\", session);\n        log.trace(\"-- state: {}\", clusterState);\n      }\n      try {\n        Suggester intialSuggester = getSuggester(session, event, cloudManager);\n        Suggester suggester = intialSuggester;\n        int maxOperations = getMaxNumOps(event, autoScalingConf, clusterState);\n        int requestedOperations = getRequestedNumOps(event);\n        if (requestedOperations > maxOperations) {\n          log.warn(\"Requested number of operations {} higher than maximum {}, adjusting...\",\n              requestedOperations, maxOperations);\n        }\n        int opCount = 0;\n        int opLimit = maxOperations;\n        if (requestedOperations > 0) {\n          opLimit = requestedOperations;\n        }\n        do {\n          // computing changes in large clusters may take a long time\n          if (Thread.currentThread().isInterrupted()) {\n            throw new InterruptedException(\"stopping - thread was interrupted\");\n          }\n          SolrRequest operation = suggester.getSuggestion();\n          opCount++;\n          // prepare suggester for the next iteration\n          if (suggester.getSession() != null) {\n            session = suggester.getSession();\n          }\n          suggester = getSuggester(session, event, cloudManager);\n\n          // break on first null op\n          // unless a specific number of ops was requested\n          // uncomment the following to log too many operations\n          /*if (opCount > 10) {\n            PolicyHelper.logState(cloudManager, intialSuggester);\n          }*/\n\n          if (operation == null) {\n            if (requestedOperations < 0) {\n              //uncomment the following to log zero operations\n//              PolicyHelper.logState(cloudManager, intialSuggester);\n              break;\n            } else {\n              log.info(\"Computed plan empty, remained \" + (opCount - opLimit) + \" requested ops to try.\");\n              continue;\n            }\n          }\n          log.info(\"Computed Plan: {}\", operation.getParams());\n          if (!collections.isEmpty()) {\n            String coll = operation.getParams().get(CoreAdminParams.COLLECTION);\n            if (coll != null && !collections.contains(coll)) {\n              // discard an op that doesn't affect our collections\n              log.debug(\"-- discarding due to collection={} not in {}\", coll, collections);\n              continue;\n            }\n          }\n          Map<String, Object> props = context.getProperties();\n          props.compute(\"operations\", (k, v) -> {\n            List<SolrRequest> operations = (List<SolrRequest>) v;\n            if (operations == null) operations = new ArrayList<>();\n            operations.add(operation);\n            return operations;\n          });\n        } while (opCount < opLimit);\n      } finally {\n        releasePolicySession(sessionWrapper, session);\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unexpected exception while processing event: \" + event, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27639bb5e041490ce599065875dd2f6d8beef62a","date":1532829373,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#process(TriggerEvent,ActionContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#process(TriggerEvent,ActionContext).mjava","sourceNew":"  @Override\n  public void process(TriggerEvent event, ActionContext context) throws Exception {\n    log.debug(\"-- processing event: {} with context properties: {}\", event, context.getProperties());\n    SolrCloudManager cloudManager = context.getCloudManager();\n    try {\n      AutoScalingConfig autoScalingConf = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      if (autoScalingConf.isEmpty()) {\n        throw new Exception(\"Action: \" + getName() + \" executed but no policy is configured\");\n      }\n      PolicyHelper.SessionWrapper sessionWrapper = PolicyHelper.getSession(cloudManager);\n      Policy.Session session = sessionWrapper.get();\n      ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n      if (log.isTraceEnabled()) {\n        log.trace(\"-- session: {}\", session);\n        log.trace(\"-- state: {}\", clusterState);\n      }\n      try {\n        Suggester initialSuggester = getSuggester(session, event, context, cloudManager);\n        Suggester suggester = initialSuggester;\n        int maxOperations = getMaxNumOps(event, autoScalingConf, clusterState);\n        int requestedOperations = getRequestedNumOps(event);\n        if (requestedOperations > maxOperations) {\n          log.warn(\"Requested number of operations {} higher than maximum {}, adjusting...\",\n              requestedOperations, maxOperations);\n        }\n        int opCount = 0;\n        int opLimit = maxOperations;\n        if (requestedOperations > 0) {\n          opLimit = requestedOperations;\n        }\n        do {\n          // computing changes in large clusters may take a long time\n          if (Thread.currentThread().isInterrupted()) {\n            throw new InterruptedException(\"stopping - thread was interrupted\");\n          }\n          SolrRequest operation = suggester.getSuggestion();\n          opCount++;\n          // prepare suggester for the next iteration\n          if (suggester.getSession() != null) {\n            session = suggester.getSession();\n          }\n          suggester = getSuggester(session, event, context, cloudManager);\n\n          // break on first null op\n          // unless a specific number of ops was requested\n          // uncomment the following to log too many operations\n          /*if (opCount > 10) {\n            PolicyHelper.logState(cloudManager, initialSuggester);\n          }*/\n\n          if (operation == null) {\n            if (requestedOperations < 0) {\n              //uncomment the following to log zero operations\n//              PolicyHelper.logState(cloudManager, initialSuggester);\n              break;\n            } else {\n              log.info(\"Computed plan empty, remained \" + (opCount - opLimit) + \" requested ops to try.\");\n              continue;\n            }\n          }\n          log.info(\"Computed Plan: {}\", operation.getParams());\n          if (!collections.isEmpty()) {\n            String coll = operation.getParams().get(CoreAdminParams.COLLECTION);\n            if (coll != null && !collections.contains(coll)) {\n              // discard an op that doesn't affect our collections\n              log.debug(\"-- discarding due to collection={} not in {}\", coll, collections);\n              continue;\n            }\n          }\n          Map<String, Object> props = context.getProperties();\n          props.compute(\"operations\", (k, v) -> {\n            List<SolrRequest> operations = (List<SolrRequest>) v;\n            if (operations == null) operations = new ArrayList<>();\n            operations.add(operation);\n            return operations;\n          });\n        } while (opCount < opLimit);\n      } finally {\n        releasePolicySession(sessionWrapper, session);\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unexpected exception while processing event: \" + event, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(TriggerEvent event, ActionContext context) throws Exception {\n    log.debug(\"-- processing event: {} with context properties: {}\", event, context.getProperties());\n    SolrCloudManager cloudManager = context.getCloudManager();\n    try {\n      AutoScalingConfig autoScalingConf = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      if (autoScalingConf.isEmpty()) {\n        throw new Exception(\"Action: \" + getName() + \" executed but no policy is configured\");\n      }\n      PolicyHelper.SessionWrapper sessionWrapper = PolicyHelper.getSession(cloudManager);\n      Policy.Session session = sessionWrapper.get();\n      ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n      if (log.isTraceEnabled()) {\n        log.trace(\"-- session: {}\", session);\n        log.trace(\"-- state: {}\", clusterState);\n      }\n      try {\n        Suggester intialSuggester = getSuggester(session, event, context, cloudManager);\n        Suggester suggester = intialSuggester;\n        int maxOperations = getMaxNumOps(event, autoScalingConf, clusterState);\n        int requestedOperations = getRequestedNumOps(event);\n        if (requestedOperations > maxOperations) {\n          log.warn(\"Requested number of operations {} higher than maximum {}, adjusting...\",\n              requestedOperations, maxOperations);\n        }\n        int opCount = 0;\n        int opLimit = maxOperations;\n        if (requestedOperations > 0) {\n          opLimit = requestedOperations;\n        }\n        do {\n          // computing changes in large clusters may take a long time\n          if (Thread.currentThread().isInterrupted()) {\n            throw new InterruptedException(\"stopping - thread was interrupted\");\n          }\n          SolrRequest operation = suggester.getSuggestion();\n          opCount++;\n          // prepare suggester for the next iteration\n          if (suggester.getSession() != null) {\n            session = suggester.getSession();\n          }\n          suggester = getSuggester(session, event, context, cloudManager);\n\n          // break on first null op\n          // unless a specific number of ops was requested\n          // uncomment the following to log too many operations\n          /*if (opCount > 10) {\n            PolicyHelper.logState(cloudManager, intialSuggester);\n          }*/\n\n          if (operation == null) {\n            if (requestedOperations < 0) {\n              //uncomment the following to log zero operations\n//              PolicyHelper.logState(cloudManager, intialSuggester);\n              break;\n            } else {\n              log.info(\"Computed plan empty, remained \" + (opCount - opLimit) + \" requested ops to try.\");\n              continue;\n            }\n          }\n          log.info(\"Computed Plan: {}\", operation.getParams());\n          if (!collections.isEmpty()) {\n            String coll = operation.getParams().get(CoreAdminParams.COLLECTION);\n            if (coll != null && !collections.contains(coll)) {\n              // discard an op that doesn't affect our collections\n              log.debug(\"-- discarding due to collection={} not in {}\", coll, collections);\n              continue;\n            }\n          }\n          Map<String, Object> props = context.getProperties();\n          props.compute(\"operations\", (k, v) -> {\n            List<SolrRequest> operations = (List<SolrRequest>) v;\n            if (operations == null) operations = new ArrayList<>();\n            operations.add(operation);\n            return operations;\n          });\n        } while (opCount < opLimit);\n      } finally {\n        releasePolicySession(sessionWrapper, session);\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unexpected exception while processing event: \" + event, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f315cd0d0955ce9ca691cc8e2796af69c4b9b6","date":1536060944,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#process(TriggerEvent,ActionContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#process(TriggerEvent,ActionContext).mjava","sourceNew":"  @Override\n  public void process(TriggerEvent event, ActionContext context) throws Exception {\n    log.debug(\"-- processing event: {} with context properties: {}\", event, context.getProperties());\n    SolrCloudManager cloudManager = context.getCloudManager();\n    try {\n      AutoScalingConfig autoScalingConf = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      if (autoScalingConf.isEmpty()) {\n        throw new Exception(\"Action: \" + getName() + \" executed but no policy is configured\");\n      }\n      PolicyHelper.SessionWrapper sessionWrapper = PolicyHelper.getSession(cloudManager);\n      Policy.Session session = sessionWrapper.get();\n      ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n      if (log.isTraceEnabled()) {\n        log.trace(\"-- session: {}\", session);\n        log.trace(\"-- state: {}\", clusterState);\n      }\n      try {\n        Suggester suggester = getSuggester(session, event, context, cloudManager);\n        int maxOperations = getMaxNumOps(event, autoScalingConf, clusterState);\n        int requestedOperations = getRequestedNumOps(event);\n        if (requestedOperations > maxOperations) {\n          log.warn(\"Requested number of operations {} higher than maximum {}, adjusting...\",\n              requestedOperations, maxOperations);\n        }\n        int opCount = 0;\n        int opLimit = maxOperations;\n        if (requestedOperations > 0) {\n          opLimit = requestedOperations;\n        }\n        do {\n          // computing changes in large clusters may take a long time\n          if (Thread.currentThread().isInterrupted()) {\n            throw new InterruptedException(\"stopping - thread was interrupted\");\n          }\n          SolrRequest operation = suggester.getSuggestion();\n          opCount++;\n          // prepare suggester for the next iteration\n          if (suggester.getSession() != null) {\n            session = suggester.getSession();\n          }\n          suggester = getSuggester(session, event, context, cloudManager);\n\n          // break on first null op\n          // unless a specific number of ops was requested\n          // uncomment the following to log too many operations\n          /*if (opCount > 10) {\n            PolicyHelper.logState(cloudManager, initialSuggester);\n          }*/\n\n          if (operation == null) {\n            if (requestedOperations < 0) {\n              //uncomment the following to log zero operations\n//              PolicyHelper.logState(cloudManager, initialSuggester);\n              break;\n            } else {\n              log.info(\"Computed plan empty, remained \" + (opCount - opLimit) + \" requested ops to try.\");\n              continue;\n            }\n          }\n          log.info(\"Computed Plan: {}\", operation.getParams());\n          if (!collections.isEmpty()) {\n            String coll = operation.getParams().get(CoreAdminParams.COLLECTION);\n            if (coll != null && !collections.contains(coll)) {\n              // discard an op that doesn't affect our collections\n              log.debug(\"-- discarding due to collection={} not in {}\", coll, collections);\n              continue;\n            }\n          }\n          Map<String, Object> props = context.getProperties();\n          props.compute(\"operations\", (k, v) -> {\n            List<SolrRequest> operations = (List<SolrRequest>) v;\n            if (operations == null) operations = new ArrayList<>();\n            operations.add(operation);\n            return operations;\n          });\n        } while (opCount < opLimit);\n      } finally {\n        releasePolicySession(sessionWrapper, session);\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unexpected exception while processing event: \" + event, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(TriggerEvent event, ActionContext context) throws Exception {\n    log.debug(\"-- processing event: {} with context properties: {}\", event, context.getProperties());\n    SolrCloudManager cloudManager = context.getCloudManager();\n    try {\n      AutoScalingConfig autoScalingConf = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      if (autoScalingConf.isEmpty()) {\n        throw new Exception(\"Action: \" + getName() + \" executed but no policy is configured\");\n      }\n      PolicyHelper.SessionWrapper sessionWrapper = PolicyHelper.getSession(cloudManager);\n      Policy.Session session = sessionWrapper.get();\n      ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n      if (log.isTraceEnabled()) {\n        log.trace(\"-- session: {}\", session);\n        log.trace(\"-- state: {}\", clusterState);\n      }\n      try {\n        Suggester initialSuggester = getSuggester(session, event, context, cloudManager);\n        Suggester suggester = initialSuggester;\n        int maxOperations = getMaxNumOps(event, autoScalingConf, clusterState);\n        int requestedOperations = getRequestedNumOps(event);\n        if (requestedOperations > maxOperations) {\n          log.warn(\"Requested number of operations {} higher than maximum {}, adjusting...\",\n              requestedOperations, maxOperations);\n        }\n        int opCount = 0;\n        int opLimit = maxOperations;\n        if (requestedOperations > 0) {\n          opLimit = requestedOperations;\n        }\n        do {\n          // computing changes in large clusters may take a long time\n          if (Thread.currentThread().isInterrupted()) {\n            throw new InterruptedException(\"stopping - thread was interrupted\");\n          }\n          SolrRequest operation = suggester.getSuggestion();\n          opCount++;\n          // prepare suggester for the next iteration\n          if (suggester.getSession() != null) {\n            session = suggester.getSession();\n          }\n          suggester = getSuggester(session, event, context, cloudManager);\n\n          // break on first null op\n          // unless a specific number of ops was requested\n          // uncomment the following to log too many operations\n          /*if (opCount > 10) {\n            PolicyHelper.logState(cloudManager, initialSuggester);\n          }*/\n\n          if (operation == null) {\n            if (requestedOperations < 0) {\n              //uncomment the following to log zero operations\n//              PolicyHelper.logState(cloudManager, initialSuggester);\n              break;\n            } else {\n              log.info(\"Computed plan empty, remained \" + (opCount - opLimit) + \" requested ops to try.\");\n              continue;\n            }\n          }\n          log.info(\"Computed Plan: {}\", operation.getParams());\n          if (!collections.isEmpty()) {\n            String coll = operation.getParams().get(CoreAdminParams.COLLECTION);\n            if (coll != null && !collections.contains(coll)) {\n              // discard an op that doesn't affect our collections\n              log.debug(\"-- discarding due to collection={} not in {}\", coll, collections);\n              continue;\n            }\n          }\n          Map<String, Object> props = context.getProperties();\n          props.compute(\"operations\", (k, v) -> {\n            List<SolrRequest> operations = (List<SolrRequest>) v;\n            if (operations == null) operations = new ArrayList<>();\n            operations.add(operation);\n            return operations;\n          });\n        } while (opCount < opLimit);\n      } finally {\n        releasePolicySession(sessionWrapper, session);\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unexpected exception while processing event: \" + event, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc18bc8ea2e2c1e308757ff50671c774438e9f3e","date":1538052583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#process(TriggerEvent,ActionContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#process(TriggerEvent,ActionContext).mjava","sourceNew":"  @Override\n  public void process(TriggerEvent event, ActionContext context) throws Exception {\n    log.debug(\"-- processing event: {} with context properties: {}\", event, context.getProperties());\n    SolrCloudManager cloudManager = context.getCloudManager();\n    try {\n      AutoScalingConfig autoScalingConf = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      if (autoScalingConf.isEmpty()) {\n        throw new Exception(\"Action: \" + getName() + \" executed but no policy is configured\");\n      }\n      PolicyHelper.SessionWrapper sessionWrapper = PolicyHelper.getSession(cloudManager);\n      Policy.Session session = sessionWrapper.get();\n      ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n      if (log.isTraceEnabled()) {\n        log.trace(\"-- session: {}\", session);\n        log.trace(\"-- state: {}\", clusterState);\n      }\n      try {\n        Suggester suggester = getSuggester(session, event, context, cloudManager);\n        int maxOperations = getMaxNumOps(event, autoScalingConf, clusterState);\n        int requestedOperations = getRequestedNumOps(event);\n        if (requestedOperations > maxOperations) {\n          log.warn(\"Requested number of operations {} higher than maximum {}, adjusting...\",\n              requestedOperations, maxOperations);\n        }\n        int opCount = 0;\n        int opLimit = maxOperations;\n        if (requestedOperations > 0) {\n          opLimit = requestedOperations;\n        }\n        do {\n          // computing changes in large clusters may take a long time\n          if (Thread.currentThread().isInterrupted()) {\n            throw new InterruptedException(\"stopping - thread was interrupted\");\n          }\n          SolrRequest operation = suggester.getSuggestion();\n          opCount++;\n          // prepare suggester for the next iteration\n          if (suggester.getSession() != null) {\n            session = suggester.getSession();\n          }\n          suggester = getSuggester(session, event, context, cloudManager);\n\n          // break on first null op\n          // unless a specific number of ops was requested\n          // uncomment the following to log too many operations\n          /*if (opCount > 10) {\n            PolicyHelper.logState(cloudManager, initialSuggester);\n          }*/\n\n          if (operation == null) {\n            if (requestedOperations < 0) {\n              //uncomment the following to log zero operations\n//              PolicyHelper.logState(cloudManager, initialSuggester);\n              break;\n            } else {\n              log.info(\"Computed plan empty, remained \" + (opCount - opLimit) + \" requested ops to try.\");\n              continue;\n            }\n          }\n          log.debug(\"Computed Plan: {}\", operation.getParams());\n          if (!collections.isEmpty()) {\n            String coll = operation.getParams().get(CoreAdminParams.COLLECTION);\n            if (coll != null && !collections.contains(coll)) {\n              // discard an op that doesn't affect our collections\n              log.debug(\"-- discarding due to collection={} not in {}\", coll, collections);\n              continue;\n            }\n          }\n          Map<String, Object> props = context.getProperties();\n          props.compute(\"operations\", (k, v) -> {\n            List<SolrRequest> operations = (List<SolrRequest>) v;\n            if (operations == null) operations = new ArrayList<>();\n            operations.add(operation);\n            return operations;\n          });\n        } while (opCount < opLimit);\n      } finally {\n        releasePolicySession(sessionWrapper, session);\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unexpected exception while processing event: \" + event, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(TriggerEvent event, ActionContext context) throws Exception {\n    log.debug(\"-- processing event: {} with context properties: {}\", event, context.getProperties());\n    SolrCloudManager cloudManager = context.getCloudManager();\n    try {\n      AutoScalingConfig autoScalingConf = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      if (autoScalingConf.isEmpty()) {\n        throw new Exception(\"Action: \" + getName() + \" executed but no policy is configured\");\n      }\n      PolicyHelper.SessionWrapper sessionWrapper = PolicyHelper.getSession(cloudManager);\n      Policy.Session session = sessionWrapper.get();\n      ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n      if (log.isTraceEnabled()) {\n        log.trace(\"-- session: {}\", session);\n        log.trace(\"-- state: {}\", clusterState);\n      }\n      try {\n        Suggester suggester = getSuggester(session, event, context, cloudManager);\n        int maxOperations = getMaxNumOps(event, autoScalingConf, clusterState);\n        int requestedOperations = getRequestedNumOps(event);\n        if (requestedOperations > maxOperations) {\n          log.warn(\"Requested number of operations {} higher than maximum {}, adjusting...\",\n              requestedOperations, maxOperations);\n        }\n        int opCount = 0;\n        int opLimit = maxOperations;\n        if (requestedOperations > 0) {\n          opLimit = requestedOperations;\n        }\n        do {\n          // computing changes in large clusters may take a long time\n          if (Thread.currentThread().isInterrupted()) {\n            throw new InterruptedException(\"stopping - thread was interrupted\");\n          }\n          SolrRequest operation = suggester.getSuggestion();\n          opCount++;\n          // prepare suggester for the next iteration\n          if (suggester.getSession() != null) {\n            session = suggester.getSession();\n          }\n          suggester = getSuggester(session, event, context, cloudManager);\n\n          // break on first null op\n          // unless a specific number of ops was requested\n          // uncomment the following to log too many operations\n          /*if (opCount > 10) {\n            PolicyHelper.logState(cloudManager, initialSuggester);\n          }*/\n\n          if (operation == null) {\n            if (requestedOperations < 0) {\n              //uncomment the following to log zero operations\n//              PolicyHelper.logState(cloudManager, initialSuggester);\n              break;\n            } else {\n              log.info(\"Computed plan empty, remained \" + (opCount - opLimit) + \" requested ops to try.\");\n              continue;\n            }\n          }\n          log.info(\"Computed Plan: {}\", operation.getParams());\n          if (!collections.isEmpty()) {\n            String coll = operation.getParams().get(CoreAdminParams.COLLECTION);\n            if (coll != null && !collections.contains(coll)) {\n              // discard an op that doesn't affect our collections\n              log.debug(\"-- discarding due to collection={} not in {}\", coll, collections);\n              continue;\n            }\n          }\n          Map<String, Object> props = context.getProperties();\n          props.compute(\"operations\", (k, v) -> {\n            List<SolrRequest> operations = (List<SolrRequest>) v;\n            if (operations == null) operations = new ArrayList<>();\n            operations.add(operation);\n            return operations;\n          });\n        } while (opCount < opLimit);\n      } finally {\n        releasePolicySession(sessionWrapper, session);\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unexpected exception while processing event: \" + event, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e35f2dde06b35aa9904949a3a93fabd090371077","date":1587906921,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#process(TriggerEvent,ActionContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#process(TriggerEvent,ActionContext).mjava","sourceNew":"  @Override\n  public void process(TriggerEvent event, ActionContext context) throws Exception {\n    if (log.isDebugEnabled()) {\n      log.debug(\"-- processing event: {} with context properties: {}\", event, context.getProperties());\n    }\n    SolrCloudManager cloudManager = context.getCloudManager();\n    try {\n      AutoScalingConfig autoScalingConf = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      if (autoScalingConf.isEmpty()) {\n        throw new Exception(\"Action: \" + getName() + \" executed but no policy is configured\");\n      }\n      PolicyHelper.SessionWrapper sessionWrapper = PolicyHelper.getSession(cloudManager);\n      Policy.Session session = sessionWrapper.get();\n      ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n      if (log.isTraceEnabled()) {\n        log.trace(\"-- session: {}\", session);\n        log.trace(\"-- state: {}\", clusterState);\n      }\n      try {\n        Suggester suggester = getSuggester(session, event, context, cloudManager);\n        int maxOperations = getMaxNumOps(event, autoScalingConf, clusterState);\n        int requestedOperations = getRequestedNumOps(event);\n        if (requestedOperations > maxOperations) {\n          log.warn(\"Requested number of operations {} higher than maximum {}, adjusting...\",\n              requestedOperations, maxOperations);\n        }\n        int opCount = 0;\n        int opLimit = maxOperations;\n        if (requestedOperations > 0) {\n          opLimit = requestedOperations;\n        }\n        do {\n          // computing changes in large clusters may take a long time\n          if (Thread.currentThread().isInterrupted()) {\n            throw new InterruptedException(\"stopping - thread was interrupted\");\n          }\n          SolrRequest operation = suggester.getSuggestion();\n          opCount++;\n          // prepare suggester for the next iteration\n          if (suggester.getSession() != null) {\n            session = suggester.getSession();\n          }\n          suggester = getSuggester(session, event, context, cloudManager);\n\n          // break on first null op\n          // unless a specific number of ops was requested\n          // uncomment the following to log too many operations\n          /*if (opCount > 10) {\n            PolicyHelper.logState(cloudManager, initialSuggester);\n          }*/\n\n          if (operation == null) {\n            if (requestedOperations < 0) {\n              //uncomment the following to log zero operations\n//              PolicyHelper.logState(cloudManager, initialSuggester);\n              break;\n            } else {\n              log.info(\"Computed plan empty, remained {} requested ops to try.\", opCount - opLimit);\n              continue;\n            }\n          }\n          if (log.isDebugEnabled()) {\n            log.debug(\"Computed Plan: {}\", operation.getParams());\n          }\n          if (!collections.isEmpty()) {\n            String coll = operation.getParams().get(CoreAdminParams.COLLECTION);\n            if (coll != null && !collections.contains(coll)) {\n              // discard an op that doesn't affect our collections\n              log.debug(\"-- discarding due to collection={} not in {}\", coll, collections);\n              continue;\n            }\n          }\n          Map<String, Object> props = context.getProperties();\n          props.compute(\"operations\", (k, v) -> {\n            List<SolrRequest> operations = (List<SolrRequest>) v;\n            if (operations == null) operations = new ArrayList<>();\n            operations.add(operation);\n            return operations;\n          });\n        } while (opCount < opLimit);\n      } finally {\n        releasePolicySession(sessionWrapper, session);\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unexpected exception while processing event: \" + event, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(TriggerEvent event, ActionContext context) throws Exception {\n    log.debug(\"-- processing event: {} with context properties: {}\", event, context.getProperties());\n    SolrCloudManager cloudManager = context.getCloudManager();\n    try {\n      AutoScalingConfig autoScalingConf = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      if (autoScalingConf.isEmpty()) {\n        throw new Exception(\"Action: \" + getName() + \" executed but no policy is configured\");\n      }\n      PolicyHelper.SessionWrapper sessionWrapper = PolicyHelper.getSession(cloudManager);\n      Policy.Session session = sessionWrapper.get();\n      ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n      if (log.isTraceEnabled()) {\n        log.trace(\"-- session: {}\", session);\n        log.trace(\"-- state: {}\", clusterState);\n      }\n      try {\n        Suggester suggester = getSuggester(session, event, context, cloudManager);\n        int maxOperations = getMaxNumOps(event, autoScalingConf, clusterState);\n        int requestedOperations = getRequestedNumOps(event);\n        if (requestedOperations > maxOperations) {\n          log.warn(\"Requested number of operations {} higher than maximum {}, adjusting...\",\n              requestedOperations, maxOperations);\n        }\n        int opCount = 0;\n        int opLimit = maxOperations;\n        if (requestedOperations > 0) {\n          opLimit = requestedOperations;\n        }\n        do {\n          // computing changes in large clusters may take a long time\n          if (Thread.currentThread().isInterrupted()) {\n            throw new InterruptedException(\"stopping - thread was interrupted\");\n          }\n          SolrRequest operation = suggester.getSuggestion();\n          opCount++;\n          // prepare suggester for the next iteration\n          if (suggester.getSession() != null) {\n            session = suggester.getSession();\n          }\n          suggester = getSuggester(session, event, context, cloudManager);\n\n          // break on first null op\n          // unless a specific number of ops was requested\n          // uncomment the following to log too many operations\n          /*if (opCount > 10) {\n            PolicyHelper.logState(cloudManager, initialSuggester);\n          }*/\n\n          if (operation == null) {\n            if (requestedOperations < 0) {\n              //uncomment the following to log zero operations\n//              PolicyHelper.logState(cloudManager, initialSuggester);\n              break;\n            } else {\n              log.info(\"Computed plan empty, remained \" + (opCount - opLimit) + \" requested ops to try.\");\n              continue;\n            }\n          }\n          log.debug(\"Computed Plan: {}\", operation.getParams());\n          if (!collections.isEmpty()) {\n            String coll = operation.getParams().get(CoreAdminParams.COLLECTION);\n            if (coll != null && !collections.contains(coll)) {\n              // discard an op that doesn't affect our collections\n              log.debug(\"-- discarding due to collection={} not in {}\", coll, collections);\n              continue;\n            }\n          }\n          Map<String, Object> props = context.getProperties();\n          props.compute(\"operations\", (k, v) -> {\n            List<SolrRequest> operations = (List<SolrRequest>) v;\n            if (operations == null) operations = new ArrayList<>();\n            operations.add(operation);\n            return operations;\n          });\n        } while (opCount < opLimit);\n      } finally {\n        releasePolicySession(sessionWrapper, session);\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unexpected exception while processing event: \" + event, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"034aa493deab2c07f8061b37af0a53470dd1e6f6","date":1590123987,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#process(TriggerEvent,ActionContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#process(TriggerEvent,ActionContext).mjava","sourceNew":"  @Override\n  public void process(TriggerEvent event, ActionContext context) throws Exception {\n    if (log.isDebugEnabled()) {\n      log.debug(\"-- processing event: {} with context properties: {}\", event, context.getProperties());\n    }\n    SolrCloudManager cloudManager = context.getCloudManager();\n    try {\n      AutoScalingConfig autoScalingConf = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      if (autoScalingConf.isEmpty()) {\n        throw new Exception(\"Action: \" + getName() + \" executed but no policy is configured\");\n      }\n      PolicyHelper.SessionWrapper sessionWrapper = PolicyHelper.getSession(cloudManager);\n      Policy.Session session = sessionWrapper.get();\n      ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n      if (log.isTraceEnabled()) {\n        log.trace(\"-- session: {}\", session);\n        log.trace(\"-- state: {}\", clusterState);\n      }\n      try {\n        Suggester suggester = getSuggester(session, event, context, cloudManager);\n        int maxOperations = getMaxNumOps(event, autoScalingConf, clusterState);\n        int requestedOperations = getRequestedNumOps(event);\n        if (requestedOperations > maxOperations) {\n          log.warn(\"Requested number of operations {} higher than maximum {}, adjusting...\",\n              requestedOperations, maxOperations);\n        }\n        int opCount = 0;\n        int opLimit = maxOperations;\n        if (requestedOperations > 0) {\n          opLimit = requestedOperations;\n        }\n        do {\n          // computing changes in large clusters may take a long time\n          if (Thread.currentThread().isInterrupted()) {\n            throw new InterruptedException(\"stopping - thread was interrupted\");\n          }\n          SolrRequest operation = suggester.getSuggestion();\n          opCount++;\n          // prepare suggester for the next iteration\n          if (suggester.getSession() != null) {\n            session = suggester.getSession();\n          }\n          suggester = getSuggester(session, event, context, cloudManager);\n\n          // break on first null op\n          // unless a specific number of ops was requested\n          // uncomment the following to log too many operations\n          /*if (opCount > 10) {\n            PolicyHelper.logState(cloudManager, initialSuggester);\n          }*/\n\n          if (operation == null) {\n            if (requestedOperations < 0) {\n              //uncomment the following to log zero operations\n//              PolicyHelper.logState(cloudManager, initialSuggester);\n              break;\n            } else {\n              log.info(\"Computed plan empty, remained {} requested ops to try.\", opCount - opLimit);\n              continue;\n            }\n          }\n          if (log.isDebugEnabled()) {\n            log.debug(\"Computed Plan: {}\", operation.getParams());\n          }\n          Map<String, Object> props = context.getProperties();\n          props.compute(\"operations\", (k, v) -> {\n            List<SolrRequest> operations = (List<SolrRequest>) v;\n            if (operations == null) operations = new ArrayList<>();\n            operations.add(operation);\n            return operations;\n          });\n        } while (opCount < opLimit);\n      } finally {\n        releasePolicySession(sessionWrapper, session);\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unexpected exception while processing event: \" + event, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(TriggerEvent event, ActionContext context) throws Exception {\n    if (log.isDebugEnabled()) {\n      log.debug(\"-- processing event: {} with context properties: {}\", event, context.getProperties());\n    }\n    SolrCloudManager cloudManager = context.getCloudManager();\n    try {\n      AutoScalingConfig autoScalingConf = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      if (autoScalingConf.isEmpty()) {\n        throw new Exception(\"Action: \" + getName() + \" executed but no policy is configured\");\n      }\n      PolicyHelper.SessionWrapper sessionWrapper = PolicyHelper.getSession(cloudManager);\n      Policy.Session session = sessionWrapper.get();\n      ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n      if (log.isTraceEnabled()) {\n        log.trace(\"-- session: {}\", session);\n        log.trace(\"-- state: {}\", clusterState);\n      }\n      try {\n        Suggester suggester = getSuggester(session, event, context, cloudManager);\n        int maxOperations = getMaxNumOps(event, autoScalingConf, clusterState);\n        int requestedOperations = getRequestedNumOps(event);\n        if (requestedOperations > maxOperations) {\n          log.warn(\"Requested number of operations {} higher than maximum {}, adjusting...\",\n              requestedOperations, maxOperations);\n        }\n        int opCount = 0;\n        int opLimit = maxOperations;\n        if (requestedOperations > 0) {\n          opLimit = requestedOperations;\n        }\n        do {\n          // computing changes in large clusters may take a long time\n          if (Thread.currentThread().isInterrupted()) {\n            throw new InterruptedException(\"stopping - thread was interrupted\");\n          }\n          SolrRequest operation = suggester.getSuggestion();\n          opCount++;\n          // prepare suggester for the next iteration\n          if (suggester.getSession() != null) {\n            session = suggester.getSession();\n          }\n          suggester = getSuggester(session, event, context, cloudManager);\n\n          // break on first null op\n          // unless a specific number of ops was requested\n          // uncomment the following to log too many operations\n          /*if (opCount > 10) {\n            PolicyHelper.logState(cloudManager, initialSuggester);\n          }*/\n\n          if (operation == null) {\n            if (requestedOperations < 0) {\n              //uncomment the following to log zero operations\n//              PolicyHelper.logState(cloudManager, initialSuggester);\n              break;\n            } else {\n              log.info(\"Computed plan empty, remained {} requested ops to try.\", opCount - opLimit);\n              continue;\n            }\n          }\n          if (log.isDebugEnabled()) {\n            log.debug(\"Computed Plan: {}\", operation.getParams());\n          }\n          if (!collections.isEmpty()) {\n            String coll = operation.getParams().get(CoreAdminParams.COLLECTION);\n            if (coll != null && !collections.contains(coll)) {\n              // discard an op that doesn't affect our collections\n              log.debug(\"-- discarding due to collection={} not in {}\", coll, collections);\n              continue;\n            }\n          }\n          Map<String, Object> props = context.getProperties();\n          props.compute(\"operations\", (k, v) -> {\n            List<SolrRequest> operations = (List<SolrRequest>) v;\n            if (operations == null) operations = new ArrayList<>();\n            operations.add(operation);\n            return operations;\n          });\n        } while (opCount < opLimit);\n      } finally {\n        releasePolicySession(sessionWrapper, session);\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unexpected exception while processing event: \" + event, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daa0f21a44e235a2299ea1fa913898b182dd7cce","date":1590952026,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#process(TriggerEvent,ActionContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#process(TriggerEvent,ActionContext).mjava","sourceNew":"  @Override\n  public void process(TriggerEvent event, ActionContext context) throws Exception {\n    if (log.isDebugEnabled()) {\n      log.debug(\"-- processing event: {} with context properties: {}\", event, context.getProperties());\n    }\n    SolrCloudManager cloudManager = context.getCloudManager();\n    try {\n      AutoScalingConfig autoScalingConf = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      if (autoScalingConf.isEmpty()) {\n        throw new Exception(\"Action: \" + getName() + \" executed but no policy is configured\");\n      }\n      PolicyHelper.SessionWrapper sessionWrapper = PolicyHelper.getSession(cloudManager);\n      Policy.Session session = sessionWrapper.get();\n      ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n      if (log.isTraceEnabled()) {\n        log.trace(\"-- session: {}\", session);\n        log.trace(\"-- state: {}\", clusterState);\n      }\n      try {\n        Suggester suggester = getSuggester(session, event, context, cloudManager);\n        int maxOperations = getMaxNumOps(event, autoScalingConf, clusterState);\n        int requestedOperations = getRequestedNumOps(event);\n        if (requestedOperations > maxOperations) {\n          log.warn(\"Requested number of operations {} higher than maximum {}, adjusting...\",\n              requestedOperations, maxOperations);\n        }\n        int opCount = 0;\n        int opLimit = maxOperations;\n        if (requestedOperations > 0) {\n          opLimit = requestedOperations;\n        }\n        do {\n          // computing changes in large clusters may take a long time\n          if (Thread.currentThread().isInterrupted()) {\n            throw new InterruptedException(\"stopping - thread was interrupted\");\n          }\n          @SuppressWarnings({\"rawtypes\"})\n          SolrRequest operation = suggester.getSuggestion();\n          opCount++;\n          // prepare suggester for the next iteration\n          if (suggester.getSession() != null) {\n            session = suggester.getSession();\n          }\n          suggester = getSuggester(session, event, context, cloudManager);\n\n          // break on first null op\n          // unless a specific number of ops was requested\n          // uncomment the following to log too many operations\n          /*if (opCount > 10) {\n            PolicyHelper.logState(cloudManager, initialSuggester);\n          }*/\n\n          if (operation == null) {\n            if (requestedOperations < 0) {\n              //uncomment the following to log zero operations\n//              PolicyHelper.logState(cloudManager, initialSuggester);\n              break;\n            } else {\n              log.info(\"Computed plan empty, remained {} requested ops to try.\", opCount - opLimit);\n              continue;\n            }\n          }\n          if (log.isDebugEnabled()) {\n            log.debug(\"Computed Plan: {}\", operation.getParams());\n          }\n          Map<String, Object> props = context.getProperties();\n          props.compute(\"operations\", (k, v) -> {\n            @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n            List<SolrRequest> operations = (List<SolrRequest>) v;\n            if (operations == null) operations = new ArrayList<>();\n            operations.add(operation);\n            return operations;\n          });\n        } while (opCount < opLimit);\n      } finally {\n        releasePolicySession(sessionWrapper, session);\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unexpected exception while processing event: \" + event, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(TriggerEvent event, ActionContext context) throws Exception {\n    if (log.isDebugEnabled()) {\n      log.debug(\"-- processing event: {} with context properties: {}\", event, context.getProperties());\n    }\n    SolrCloudManager cloudManager = context.getCloudManager();\n    try {\n      AutoScalingConfig autoScalingConf = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      if (autoScalingConf.isEmpty()) {\n        throw new Exception(\"Action: \" + getName() + \" executed but no policy is configured\");\n      }\n      PolicyHelper.SessionWrapper sessionWrapper = PolicyHelper.getSession(cloudManager);\n      Policy.Session session = sessionWrapper.get();\n      ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n      if (log.isTraceEnabled()) {\n        log.trace(\"-- session: {}\", session);\n        log.trace(\"-- state: {}\", clusterState);\n      }\n      try {\n        Suggester suggester = getSuggester(session, event, context, cloudManager);\n        int maxOperations = getMaxNumOps(event, autoScalingConf, clusterState);\n        int requestedOperations = getRequestedNumOps(event);\n        if (requestedOperations > maxOperations) {\n          log.warn(\"Requested number of operations {} higher than maximum {}, adjusting...\",\n              requestedOperations, maxOperations);\n        }\n        int opCount = 0;\n        int opLimit = maxOperations;\n        if (requestedOperations > 0) {\n          opLimit = requestedOperations;\n        }\n        do {\n          // computing changes in large clusters may take a long time\n          if (Thread.currentThread().isInterrupted()) {\n            throw new InterruptedException(\"stopping - thread was interrupted\");\n          }\n          SolrRequest operation = suggester.getSuggestion();\n          opCount++;\n          // prepare suggester for the next iteration\n          if (suggester.getSession() != null) {\n            session = suggester.getSession();\n          }\n          suggester = getSuggester(session, event, context, cloudManager);\n\n          // break on first null op\n          // unless a specific number of ops was requested\n          // uncomment the following to log too many operations\n          /*if (opCount > 10) {\n            PolicyHelper.logState(cloudManager, initialSuggester);\n          }*/\n\n          if (operation == null) {\n            if (requestedOperations < 0) {\n              //uncomment the following to log zero operations\n//              PolicyHelper.logState(cloudManager, initialSuggester);\n              break;\n            } else {\n              log.info(\"Computed plan empty, remained {} requested ops to try.\", opCount - opLimit);\n              continue;\n            }\n          }\n          if (log.isDebugEnabled()) {\n            log.debug(\"Computed Plan: {}\", operation.getParams());\n          }\n          Map<String, Object> props = context.getProperties();\n          props.compute(\"operations\", (k, v) -> {\n            List<SolrRequest> operations = (List<SolrRequest>) v;\n            if (operations == null) operations = new ArrayList<>();\n            operations.add(operation);\n            return operations;\n          });\n        } while (opCount < opLimit);\n      } finally {\n        releasePolicySession(sessionWrapper, session);\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unexpected exception while processing event: \" + event, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ComputePlanAction#process(TriggerEvent,ActionContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void process(TriggerEvent event, ActionContext context) throws Exception {\n    if (log.isDebugEnabled()) {\n      log.debug(\"-- processing event: {} with context properties: {}\", event, context.getProperties());\n    }\n    SolrCloudManager cloudManager = context.getCloudManager();\n    try {\n      AutoScalingConfig autoScalingConf = cloudManager.getDistribStateManager().getAutoScalingConfig();\n      if (autoScalingConf.isEmpty()) {\n        throw new Exception(\"Action: \" + getName() + \" executed but no policy is configured\");\n      }\n      PolicyHelper.SessionWrapper sessionWrapper = PolicyHelper.getSession(cloudManager);\n      Policy.Session session = sessionWrapper.get();\n      ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n      if (log.isTraceEnabled()) {\n        log.trace(\"-- session: {}\", session);\n        log.trace(\"-- state: {}\", clusterState);\n      }\n      try {\n        Suggester suggester = getSuggester(session, event, context, cloudManager);\n        int maxOperations = getMaxNumOps(event, autoScalingConf, clusterState);\n        int requestedOperations = getRequestedNumOps(event);\n        if (requestedOperations > maxOperations) {\n          log.warn(\"Requested number of operations {} higher than maximum {}, adjusting...\",\n              requestedOperations, maxOperations);\n        }\n        int opCount = 0;\n        int opLimit = maxOperations;\n        if (requestedOperations > 0) {\n          opLimit = requestedOperations;\n        }\n        do {\n          // computing changes in large clusters may take a long time\n          if (Thread.currentThread().isInterrupted()) {\n            throw new InterruptedException(\"stopping - thread was interrupted\");\n          }\n          @SuppressWarnings({\"rawtypes\"})\n          SolrRequest operation = suggester.getSuggestion();\n          opCount++;\n          // prepare suggester for the next iteration\n          if (suggester.getSession() != null) {\n            session = suggester.getSession();\n          }\n          suggester = getSuggester(session, event, context, cloudManager);\n\n          // break on first null op\n          // unless a specific number of ops was requested\n          // uncomment the following to log too many operations\n          /*if (opCount > 10) {\n            PolicyHelper.logState(cloudManager, initialSuggester);\n          }*/\n\n          if (operation == null) {\n            if (requestedOperations < 0) {\n              //uncomment the following to log zero operations\n//              PolicyHelper.logState(cloudManager, initialSuggester);\n              break;\n            } else {\n              log.info(\"Computed plan empty, remained {} requested ops to try.\", opCount - opLimit);\n              continue;\n            }\n          }\n          if (log.isDebugEnabled()) {\n            log.debug(\"Computed Plan: {}\", operation.getParams());\n          }\n          Map<String, Object> props = context.getProperties();\n          props.compute(\"operations\", (k, v) -> {\n            @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n            List<SolrRequest> operations = (List<SolrRequest>) v;\n            if (operations == null) operations = new ArrayList<>();\n            operations.add(operation);\n            return operations;\n          });\n        } while (opCount < opLimit);\n      } finally {\n        releasePolicySession(sessionWrapper, session);\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unexpected exception while processing event: \" + event, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fc18bc8ea2e2c1e308757ff50671c774438e9f3e":["f7f315cd0d0955ce9ca691cc8e2796af69c4b9b6"],"4d8e6696ad139aa0f0bfe30fb4e933b38530f214":["560c18d71dad43d675158783c3840f8c80d6d39c"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1b601288e006e49c9026865fcd27630ea3a9e532"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["e46ef1a2b9cf8410947a87a43aba2b400394e773"],"034aa493deab2c07f8061b37af0a53470dd1e6f6":["e35f2dde06b35aa9904949a3a93fabd090371077"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["47a99fe8ee3f74e8da2ece1bddbc059d1e1beffa"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["3dbcef71d964522324fa7548d3283f3f28df7e17","ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1"],"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","d9ccfe45460d496c5e5e1b70396521dac842d966"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"47a99fe8ee3f74e8da2ece1bddbc059d1e1beffa":["17e56e561d118e91f61219d156e3343e58ae4dae"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["eaca6a0674512222004d9a2b0ca95d86bda20f1c"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["d907c28c7fe6305eaec1756d51365f5149e1e41d"],"3dbcef71d964522324fa7548d3283f3f28df7e17":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"17e56e561d118e91f61219d156e3343e58ae4dae":["1f6b20dc453cee198956989b90aa24bef0232bcf"],"e46ef1a2b9cf8410947a87a43aba2b400394e773":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"3f504512a03d978990cbff30db0522b354e846db":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["4d8e6696ad139aa0f0bfe30fb4e933b38530f214"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1":["3dbcef71d964522324fa7548d3283f3f28df7e17"],"f7f315cd0d0955ce9ca691cc8e2796af69c4b9b6":["27639bb5e041490ce599065875dd2f6d8beef62a"],"67e503ef0f418bc92404ff5d55694087c23d48eb":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["034aa493deab2c07f8061b37af0a53470dd1e6f6"],"1b601288e006e49c9026865fcd27630ea3a9e532":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"e35f2dde06b35aa9904949a3a93fabd090371077":["fc18bc8ea2e2c1e308757ff50671c774438e9f3e"],"eaca6a0674512222004d9a2b0ca95d86bda20f1c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"1f6b20dc453cee198956989b90aa24bef0232bcf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"27639bb5e041490ce599065875dd2f6d8beef62a":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"d907c28c7fe6305eaec1756d51365f5149e1e41d":["67e503ef0f418bc92404ff5d55694087c23d48eb"],"d9ccfe45460d496c5e5e1b70396521dac842d966":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"]},"commit2Childs":{"fc18bc8ea2e2c1e308757ff50671c774438e9f3e":["e35f2dde06b35aa9904949a3a93fabd090371077"],"4d8e6696ad139aa0f0bfe30fb4e933b38530f214":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"9f0e33082a86447f4f2b59a1a5f69a310500276a":["3dbcef71d964522324fa7548d3283f3f28df7e17"],"034aa493deab2c07f8061b37af0a53470dd1e6f6":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["27639bb5e041490ce599065875dd2f6d8beef62a"],"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441":["e46ef1a2b9cf8410947a87a43aba2b400394e773"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c","1f6b20dc453cee198956989b90aa24bef0232bcf"],"47a99fe8ee3f74e8da2ece1bddbc059d1e1beffa":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["67e503ef0f418bc92404ff5d55694087c23d48eb"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441","d9ccfe45460d496c5e5e1b70396521dac842d966"],"560c18d71dad43d675158783c3840f8c80d6d39c":["4d8e6696ad139aa0f0bfe30fb4e933b38530f214"],"3dbcef71d964522324fa7548d3283f3f28df7e17":["43345f1452f9510f8aaadae6156fe0c834e7d957","ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1"],"17e56e561d118e91f61219d156e3343e58ae4dae":["47a99fe8ee3f74e8da2ece1bddbc059d1e1beffa"],"e46ef1a2b9cf8410947a87a43aba2b400394e773":["9f0e33082a86447f4f2b59a1a5f69a310500276a"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["eaca6a0674512222004d9a2b0ca95d86bda20f1c"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["1b601288e006e49c9026865fcd27630ea3a9e532"],"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"f7f315cd0d0955ce9ca691cc8e2796af69c4b9b6":["fc18bc8ea2e2c1e308757ff50671c774438e9f3e"],"67e503ef0f418bc92404ff5d55694087c23d48eb":["d907c28c7fe6305eaec1756d51365f5149e1e41d"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["3f504512a03d978990cbff30db0522b354e846db"],"1b601288e006e49c9026865fcd27630ea3a9e532":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"e35f2dde06b35aa9904949a3a93fabd090371077":["034aa493deab2c07f8061b37af0a53470dd1e6f6"],"eaca6a0674512222004d9a2b0ca95d86bda20f1c":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"1f6b20dc453cee198956989b90aa24bef0232bcf":["17e56e561d118e91f61219d156e3343e58ae4dae"],"27639bb5e041490ce599065875dd2f6d8beef62a":["f7f315cd0d0955ce9ca691cc8e2796af69c4b9b6"],"d9ccfe45460d496c5e5e1b70396521dac842d966":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441"],"d907c28c7fe6305eaec1756d51365f5149e1e41d":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}