{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver#main(String[]).mjava","commits":[{"id":"d24fe9e99bbe800921add0352276329eb48aab20","date":1192653380,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  public static void main(String[] args) throws Exception {\n\n    \n    File topicsFile = new File(args[0]);\n    File qrelsFile = new File(args[1]);\n    Searcher searcher = new IndexSearcher(args[3]);\n\n    int maxResults = 1000;\n    String docNameField = \"docname\";\n\n    PrintWriter logger = new PrintWriter(System.out, true);\n\n    // use trec utilities to read trec topics into quality queries\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(new FileReader(topicsFile)));\n\n    // prepare judge, with trec utilities that read from a QRels file\n    Judge judge = new TrecJudge(new BufferedReader(new FileReader(qrelsFile)));\n\n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n\n    // set the parsing of quality queries into Lucene queries.\n    QualityQueryParser qqParser = new SimpleQQParser(\"title\", \"body\");\n\n    // run the benchmark\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    SubmissionReport submitLog = null;\n    QualityStats stats[] = qrun.execute(maxResults, judge, submitLog, logger);\n\n    // print an avarage sum of the results\n    QualityStats avg = QualityStats.average(stats);\n    avg.log(\"SUMMARY\", 2, logger, \"  \");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05d64184e4c44205b1dfa1cdf3869230c4025dc9","date":1199346280,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver#main(String[]).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n\n    \n    File topicsFile = new File(args[0]);\n    File qrelsFile = new File(args[1]);\n    Searcher searcher = new IndexSearcher(args[3]);\n\n    int maxResults = 1000;\n    String docNameField = \"docname\";\n\n    PrintWriter logger = new PrintWriter(System.out, true);\n\n    // use trec utilities to read trec topics into quality queries\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(new FileReader(topicsFile)));\n\n    // prepare judge, with trec utilities that read from a QRels file\n    Judge judge = new TrecJudge(new BufferedReader(new FileReader(qrelsFile)));\n\n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n\n    // set the parsing of quality queries into Lucene queries.\n    QualityQueryParser qqParser = new SimpleQQParser(\"title\", \"body\");\n\n    // run the benchmark\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    qrun.setMaxResults(maxResults);\n    SubmissionReport submitLog = null;\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n\n    // print an avarage sum of the results\n    QualityStats avg = QualityStats.average(stats);\n    avg.log(\"SUMMARY\", 2, logger, \"  \");\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n\n    \n    File topicsFile = new File(args[0]);\n    File qrelsFile = new File(args[1]);\n    Searcher searcher = new IndexSearcher(args[3]);\n\n    int maxResults = 1000;\n    String docNameField = \"docname\";\n\n    PrintWriter logger = new PrintWriter(System.out, true);\n\n    // use trec utilities to read trec topics into quality queries\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(new FileReader(topicsFile)));\n\n    // prepare judge, with trec utilities that read from a QRels file\n    Judge judge = new TrecJudge(new BufferedReader(new FileReader(qrelsFile)));\n\n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n\n    // set the parsing of quality queries into Lucene queries.\n    QualityQueryParser qqParser = new SimpleQQParser(\"title\", \"body\");\n\n    // run the benchmark\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    SubmissionReport submitLog = null;\n    QualityStats stats[] = qrun.execute(maxResults, judge, submitLog, logger);\n\n    // print an avarage sum of the results\n    QualityStats avg = QualityStats.average(stats);\n    avg.log(\"SUMMARY\", 2, logger, \"  \");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4256bc1b3c94786287ccdfc751230374521843cf","date":1254612273,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver#main(String[]).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n\n    \n    File topicsFile = new File(args[0]);\n    File qrelsFile = new File(args[1]);\n    FSDirectory dir = FSDirectory.open(new File(args[3]));\n    Searcher searcher = new IndexSearcher(dir, true);\n\n    int maxResults = 1000;\n    String docNameField = \"docname\";\n\n    PrintWriter logger = new PrintWriter(System.out, true);\n\n    // use trec utilities to read trec topics into quality queries\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(new FileReader(topicsFile)));\n\n    // prepare judge, with trec utilities that read from a QRels file\n    Judge judge = new TrecJudge(new BufferedReader(new FileReader(qrelsFile)));\n\n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n\n    // set the parsing of quality queries into Lucene queries.\n    QualityQueryParser qqParser = new SimpleQQParser(\"title\", \"body\");\n\n    // run the benchmark\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    qrun.setMaxResults(maxResults);\n    SubmissionReport submitLog = null;\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n\n    // print an avarage sum of the results\n    QualityStats avg = QualityStats.average(stats);\n    avg.log(\"SUMMARY\", 2, logger, \"  \");\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n\n    \n    File topicsFile = new File(args[0]);\n    File qrelsFile = new File(args[1]);\n    Searcher searcher = new IndexSearcher(args[3]);\n\n    int maxResults = 1000;\n    String docNameField = \"docname\";\n\n    PrintWriter logger = new PrintWriter(System.out, true);\n\n    // use trec utilities to read trec topics into quality queries\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(new FileReader(topicsFile)));\n\n    // prepare judge, with trec utilities that read from a QRels file\n    Judge judge = new TrecJudge(new BufferedReader(new FileReader(qrelsFile)));\n\n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n\n    // set the parsing of quality queries into Lucene queries.\n    QualityQueryParser qqParser = new SimpleQQParser(\"title\", \"body\");\n\n    // run the benchmark\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    qrun.setMaxResults(maxResults);\n    SubmissionReport submitLog = null;\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n\n    // print an avarage sum of the results\n    QualityStats avg = QualityStats.average(stats);\n    avg.log(\"SUMMARY\", 2, logger, \"  \");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d927ba6937e0eb9d5aa0f1e1b3bf8ddbac316235","date":1258072913,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver#main(String[]).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    if (args.length != 4) {\n      System.err.println(\"Usage: QueryDriver <topicsFile> <qrelsFile> <submissionFile> <indexDir>\");\n      System.err.println(\"topicsFile: input file containing queries\");\n      System.err.println(\"qrelsFile: input file containing relevance judgements\");\n      System.err.println(\"submissionFile: output submission file for trec_eval\");\n      System.err.println(\"indexDir: index directory\");\n      System.exit(1);\n    }\n    \n    File topicsFile = new File(args[0]);\n    File qrelsFile = new File(args[1]);\n    SubmissionReport submitLog = new SubmissionReport(new PrintWriter(args[2]), \"lucene\");\n    FSDirectory dir = FSDirectory.open(new File(args[3]));\n    Searcher searcher = new IndexSearcher(dir, true);\n\n    int maxResults = 1000;\n    String docNameField = \"docname\";\n\n    PrintWriter logger = new PrintWriter(System.out, true);\n\n    // use trec utilities to read trec topics into quality queries\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(new FileReader(topicsFile)));\n\n    // prepare judge, with trec utilities that read from a QRels file\n    Judge judge = new TrecJudge(new BufferedReader(new FileReader(qrelsFile)));\n\n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n\n    // set the parsing of quality queries into Lucene queries.\n    QualityQueryParser qqParser = new SimpleQQParser(\"title\", \"body\");\n\n    // run the benchmark\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    qrun.setMaxResults(maxResults);\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n\n    // print an avarage sum of the results\n    QualityStats avg = QualityStats.average(stats);\n    avg.log(\"SUMMARY\", 2, logger, \"  \");\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n\n    \n    File topicsFile = new File(args[0]);\n    File qrelsFile = new File(args[1]);\n    FSDirectory dir = FSDirectory.open(new File(args[3]));\n    Searcher searcher = new IndexSearcher(dir, true);\n\n    int maxResults = 1000;\n    String docNameField = \"docname\";\n\n    PrintWriter logger = new PrintWriter(System.out, true);\n\n    // use trec utilities to read trec topics into quality queries\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(new FileReader(topicsFile)));\n\n    // prepare judge, with trec utilities that read from a QRels file\n    Judge judge = new TrecJudge(new BufferedReader(new FileReader(qrelsFile)));\n\n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n\n    // set the parsing of quality queries into Lucene queries.\n    QualityQueryParser qqParser = new SimpleQQParser(\"title\", \"body\");\n\n    // run the benchmark\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    qrun.setMaxResults(maxResults);\n    SubmissionReport submitLog = null;\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n\n    // print an avarage sum of the results\n    QualityStats avg = QualityStats.average(stats);\n    avg.log(\"SUMMARY\", 2, logger, \"  \");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25defbed77c88962444668923fd39efedf03579a","date":1266735608,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver#main(String[]).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    if (args.length < 4 || args.length > 5) {\n      System.err.println(\"Usage: QueryDriver <topicsFile> <qrelsFile> <submissionFile> <indexDir> [querySpec]\");\n      System.err.println(\"topicsFile: input file containing queries\");\n      System.err.println(\"qrelsFile: input file containing relevance judgements\");\n      System.err.println(\"submissionFile: output submission file for trec_eval\");\n      System.err.println(\"indexDir: index directory\");\n      System.err.println(\"querySpec: string composed of fields to use in query consisting of T=title,D=description,N=narrative:\");\n      System.err.println(\"\\texample: TD (query on Title + Description). The default is T (title only)\");\n      System.exit(1);\n    }\n    \n    File topicsFile = new File(args[0]);\n    File qrelsFile = new File(args[1]);\n    SubmissionReport submitLog = new SubmissionReport(new PrintWriter(args[2]), \"lucene\");\n    FSDirectory dir = FSDirectory.open(new File(args[3]));\n    String fieldSpec = args.length == 5 ? args[4] : \"T\"; // default to Title-only if not specified.\n    Searcher searcher = new IndexSearcher(dir, true);\n\n    int maxResults = 1000;\n    String docNameField = \"docname\";\n\n    PrintWriter logger = new PrintWriter(System.out, true);\n\n    // use trec utilities to read trec topics into quality queries\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(new FileReader(topicsFile)));\n\n    // prepare judge, with trec utilities that read from a QRels file\n    Judge judge = new TrecJudge(new BufferedReader(new FileReader(qrelsFile)));\n\n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n\n    Set<String> fieldSet = new HashSet<String>();\n    if (fieldSpec.indexOf('T') >= 0) fieldSet.add(\"title\");\n    if (fieldSpec.indexOf('D') >= 0) fieldSet.add(\"description\");\n    if (fieldSpec.indexOf('N') >= 0) fieldSet.add(\"narrative\");\n    \n    // set the parsing of quality queries into Lucene queries.\n    QualityQueryParser qqParser = new SimpleQQParser(fieldSet.toArray(new String[0]), \"body\");\n\n    // run the benchmark\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    qrun.setMaxResults(maxResults);\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n\n    // print an avarage sum of the results\n    QualityStats avg = QualityStats.average(stats);\n    avg.log(\"SUMMARY\", 2, logger, \"  \");\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    if (args.length != 4) {\n      System.err.println(\"Usage: QueryDriver <topicsFile> <qrelsFile> <submissionFile> <indexDir>\");\n      System.err.println(\"topicsFile: input file containing queries\");\n      System.err.println(\"qrelsFile: input file containing relevance judgements\");\n      System.err.println(\"submissionFile: output submission file for trec_eval\");\n      System.err.println(\"indexDir: index directory\");\n      System.exit(1);\n    }\n    \n    File topicsFile = new File(args[0]);\n    File qrelsFile = new File(args[1]);\n    SubmissionReport submitLog = new SubmissionReport(new PrintWriter(args[2]), \"lucene\");\n    FSDirectory dir = FSDirectory.open(new File(args[3]));\n    Searcher searcher = new IndexSearcher(dir, true);\n\n    int maxResults = 1000;\n    String docNameField = \"docname\";\n\n    PrintWriter logger = new PrintWriter(System.out, true);\n\n    // use trec utilities to read trec topics into quality queries\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(new FileReader(topicsFile)));\n\n    // prepare judge, with trec utilities that read from a QRels file\n    Judge judge = new TrecJudge(new BufferedReader(new FileReader(qrelsFile)));\n\n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n\n    // set the parsing of quality queries into Lucene queries.\n    QualityQueryParser qqParser = new SimpleQQParser(\"title\", \"body\");\n\n    // run the benchmark\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    qrun.setMaxResults(maxResults);\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n\n    // print an avarage sum of the results\n    QualityStats avg = QualityStats.average(stats);\n    avg.log(\"SUMMARY\", 2, logger, \"  \");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver#main(String[]).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/QueryDriver#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    if (args.length < 4 || args.length > 5) {\n      System.err.println(\"Usage: QueryDriver <topicsFile> <qrelsFile> <submissionFile> <indexDir> [querySpec]\");\n      System.err.println(\"topicsFile: input file containing queries\");\n      System.err.println(\"qrelsFile: input file containing relevance judgements\");\n      System.err.println(\"submissionFile: output submission file for trec_eval\");\n      System.err.println(\"indexDir: index directory\");\n      System.err.println(\"querySpec: string composed of fields to use in query consisting of T=title,D=description,N=narrative:\");\n      System.err.println(\"\\texample: TD (query on Title + Description). The default is T (title only)\");\n      System.exit(1);\n    }\n    \n    File topicsFile = new File(args[0]);\n    File qrelsFile = new File(args[1]);\n    SubmissionReport submitLog = new SubmissionReport(new PrintWriter(args[2]), \"lucene\");\n    FSDirectory dir = FSDirectory.open(new File(args[3]));\n    String fieldSpec = args.length == 5 ? args[4] : \"T\"; // default to Title-only if not specified.\n    Searcher searcher = new IndexSearcher(dir, true);\n\n    int maxResults = 1000;\n    String docNameField = \"docname\";\n\n    PrintWriter logger = new PrintWriter(System.out, true);\n\n    // use trec utilities to read trec topics into quality queries\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(new FileReader(topicsFile)));\n\n    // prepare judge, with trec utilities that read from a QRels file\n    Judge judge = new TrecJudge(new BufferedReader(new FileReader(qrelsFile)));\n\n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n\n    Set<String> fieldSet = new HashSet<String>();\n    if (fieldSpec.indexOf('T') >= 0) fieldSet.add(\"title\");\n    if (fieldSpec.indexOf('D') >= 0) fieldSet.add(\"description\");\n    if (fieldSpec.indexOf('N') >= 0) fieldSet.add(\"narrative\");\n    \n    // set the parsing of quality queries into Lucene queries.\n    QualityQueryParser qqParser = new SimpleQQParser(fieldSet.toArray(new String[0]), \"body\");\n\n    // run the benchmark\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    qrun.setMaxResults(maxResults);\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n\n    // print an avarage sum of the results\n    QualityStats avg = QualityStats.average(stats);\n    avg.log(\"SUMMARY\", 2, logger, \"  \");\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    if (args.length < 4 || args.length > 5) {\n      System.err.println(\"Usage: QueryDriver <topicsFile> <qrelsFile> <submissionFile> <indexDir> [querySpec]\");\n      System.err.println(\"topicsFile: input file containing queries\");\n      System.err.println(\"qrelsFile: input file containing relevance judgements\");\n      System.err.println(\"submissionFile: output submission file for trec_eval\");\n      System.err.println(\"indexDir: index directory\");\n      System.err.println(\"querySpec: string composed of fields to use in query consisting of T=title,D=description,N=narrative:\");\n      System.err.println(\"\\texample: TD (query on Title + Description). The default is T (title only)\");\n      System.exit(1);\n    }\n    \n    File topicsFile = new File(args[0]);\n    File qrelsFile = new File(args[1]);\n    SubmissionReport submitLog = new SubmissionReport(new PrintWriter(args[2]), \"lucene\");\n    FSDirectory dir = FSDirectory.open(new File(args[3]));\n    String fieldSpec = args.length == 5 ? args[4] : \"T\"; // default to Title-only if not specified.\n    Searcher searcher = new IndexSearcher(dir, true);\n\n    int maxResults = 1000;\n    String docNameField = \"docname\";\n\n    PrintWriter logger = new PrintWriter(System.out, true);\n\n    // use trec utilities to read trec topics into quality queries\n    TrecTopicsReader qReader = new TrecTopicsReader();\n    QualityQuery qqs[] = qReader.readQueries(new BufferedReader(new FileReader(topicsFile)));\n\n    // prepare judge, with trec utilities that read from a QRels file\n    Judge judge = new TrecJudge(new BufferedReader(new FileReader(qrelsFile)));\n\n    // validate topics & judgments match each other\n    judge.validateData(qqs, logger);\n\n    Set<String> fieldSet = new HashSet<String>();\n    if (fieldSpec.indexOf('T') >= 0) fieldSet.add(\"title\");\n    if (fieldSpec.indexOf('D') >= 0) fieldSet.add(\"description\");\n    if (fieldSpec.indexOf('N') >= 0) fieldSet.add(\"narrative\");\n    \n    // set the parsing of quality queries into Lucene queries.\n    QualityQueryParser qqParser = new SimpleQQParser(fieldSet.toArray(new String[0]), \"body\");\n\n    // run the benchmark\n    QualityBenchmark qrun = new QualityBenchmark(qqs, qqParser, searcher, docNameField);\n    qrun.setMaxResults(maxResults);\n    QualityStats stats[] = qrun.execute(judge, submitLog, logger);\n\n    // print an avarage sum of the results\n    QualityStats avg = QualityStats.average(stats);\n    avg.log(\"SUMMARY\", 2, logger, \"  \");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d927ba6937e0eb9d5aa0f1e1b3bf8ddbac316235":["4256bc1b3c94786287ccdfc751230374521843cf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05d64184e4c44205b1dfa1cdf3869230c4025dc9":["d24fe9e99bbe800921add0352276329eb48aab20"],"4256bc1b3c94786287ccdfc751230374521843cf":["05d64184e4c44205b1dfa1cdf3869230c4025dc9"],"d24fe9e99bbe800921add0352276329eb48aab20":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["25defbed77c88962444668923fd39efedf03579a"],"25defbed77c88962444668923fd39efedf03579a":["d927ba6937e0eb9d5aa0f1e1b3bf8ddbac316235"]},"commit2Childs":{"d927ba6937e0eb9d5aa0f1e1b3bf8ddbac316235":["25defbed77c88962444668923fd39efedf03579a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d24fe9e99bbe800921add0352276329eb48aab20"],"05d64184e4c44205b1dfa1cdf3869230c4025dc9":["4256bc1b3c94786287ccdfc751230374521843cf"],"4256bc1b3c94786287ccdfc751230374521843cf":["d927ba6937e0eb9d5aa0f1e1b3bf8ddbac316235"],"d24fe9e99bbe800921add0352276329eb48aab20":["05d64184e4c44205b1dfa1cdf3869230c4025dc9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"25defbed77c88962444668923fd39efedf03579a":["9454a6510e2db155fb01faa5c049b06ece95fab9"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}