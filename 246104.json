{"path":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#init(IndexSchema,Map[String,String]).mjava","commits":[{"id":"c11e1d33f2ba742976268153f6edd2d29710cf69","date":1347851822,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#init(IndexSchema,Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n\n    //Solr expects us to remove the parameters we've used.\n    MapListener<String, String> argsWrap = new MapListener<String, String>(args);\n    ctx = SpatialContextFactory.makeSpatialContext(argsWrap, schema.getResourceLoader().getClassLoader());\n    args.keySet().removeAll(argsWrap.getSeenKeys());\n\n    argsParser = new SpatialArgsParser();//might make pluggable some day?\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4690b3e9adf3856cb5ddbee969dfa6d59a1642fb","date":1348338464,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n\n    String units = args.remove(\"units\");\n    if (!\"degrees\".equals(units))\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Must specify units=\\\"degrees\\\" on field types with class \"+getClass().getSimpleName());\n\n    //Solr expects us to remove the parameters we've used.\n    MapListener<String, String> argsWrap = new MapListener<String, String>(args);\n    ctx = SpatialContextFactory.makeSpatialContext(argsWrap, schema.getResourceLoader().getClassLoader());\n    args.keySet().removeAll(argsWrap.getSeenKeys());\n\n    argsParser = new SpatialArgsParser();//might make pluggable some day?\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n\n    //Solr expects us to remove the parameters we've used.\n    MapListener<String, String> argsWrap = new MapListener<String, String>(args);\n    ctx = SpatialContextFactory.makeSpatialContext(argsWrap, schema.getResourceLoader().getClassLoader());\n    args.keySet().removeAll(argsWrap.getSeenKeys());\n\n    argsParser = new SpatialArgsParser();//might make pluggable some day?\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003","date":1390592414,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n\n    String units = args.remove(\"units\");\n    if (!\"degrees\".equals(units))\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Must specify units=\\\"degrees\\\" on field types with class \"+getClass().getSimpleName());\n\n    //replace legacy rect format with ENVELOPE\n    String wbStr = args.get(\"worldBounds\");\n    if (wbStr != null && !wbStr.toUpperCase().startsWith(\"ENVELOPE\")) {\n      log.warn(\"Using old worldBounds format? Should use ENVELOPE(xMin, xMax, yMax, yMin).\");\n      String[] parts = wbStr.split(\" \");//\"xMin yMin xMax yMax\"\n      if (parts.length == 4) {\n        args.put(\"worldBounds\",\n            \"ENVELOPE(\" + parts[0] + \", \" + parts[2] + \", \" + parts[3] + \", \" + parts[1] + \")\");\n      } //else likely eventual exception\n    }\n\n    //Solr expects us to remove the parameters we've used.\n    MapListener<String, String> argsWrap = new MapListener<String, String>(args);\n    ctx = SpatialContextFactory.makeSpatialContext(argsWrap, schema.getResourceLoader().getClassLoader());\n    args.keySet().removeAll(argsWrap.getSeenKeys());\n\n    argsParser = newSpatialArgsParser();\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n\n    String units = args.remove(\"units\");\n    if (!\"degrees\".equals(units))\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Must specify units=\\\"degrees\\\" on field types with class \"+getClass().getSimpleName());\n\n    //Solr expects us to remove the parameters we've used.\n    MapListener<String, String> argsWrap = new MapListener<String, String>(args);\n    ctx = SpatialContextFactory.makeSpatialContext(argsWrap, schema.getResourceLoader().getClassLoader());\n    args.keySet().removeAll(argsWrap.getSeenKeys());\n\n    argsParser = new SpatialArgsParser();//might make pluggable some day?\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8815d348f75265cc9aab8ba0aa17459498051a17","date":1390621693,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n\n    String units = args.remove(\"units\");\n    if (!\"degrees\".equals(units))\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Must specify units=\\\"degrees\\\" on field types with class \"+getClass().getSimpleName());\n\n    //replace legacy rect format with ENVELOPE\n    String wbStr = args.get(\"worldBounds\");\n    if (wbStr != null && !wbStr.toUpperCase(Locale.ROOT).startsWith(\"ENVELOPE\")) {\n      log.warn(\"Using old worldBounds format? Should use ENVELOPE(xMin, xMax, yMax, yMin).\");\n      String[] parts = wbStr.split(\" \");//\"xMin yMin xMax yMax\"\n      if (parts.length == 4) {\n        args.put(\"worldBounds\",\n            \"ENVELOPE(\" + parts[0] + \", \" + parts[2] + \", \" + parts[3] + \", \" + parts[1] + \")\");\n      } //else likely eventual exception\n    }\n\n    //Solr expects us to remove the parameters we've used.\n    MapListener<String, String> argsWrap = new MapListener<String, String>(args);\n    ctx = SpatialContextFactory.makeSpatialContext(argsWrap, schema.getResourceLoader().getClassLoader());\n    args.keySet().removeAll(argsWrap.getSeenKeys());\n\n    argsParser = newSpatialArgsParser();\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n\n    String units = args.remove(\"units\");\n    if (!\"degrees\".equals(units))\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Must specify units=\\\"degrees\\\" on field types with class \"+getClass().getSimpleName());\n\n    //replace legacy rect format with ENVELOPE\n    String wbStr = args.get(\"worldBounds\");\n    if (wbStr != null && !wbStr.toUpperCase().startsWith(\"ENVELOPE\")) {\n      log.warn(\"Using old worldBounds format? Should use ENVELOPE(xMin, xMax, yMax, yMin).\");\n      String[] parts = wbStr.split(\" \");//\"xMin yMin xMax yMax\"\n      if (parts.length == 4) {\n        args.put(\"worldBounds\",\n            \"ENVELOPE(\" + parts[0] + \", \" + parts[2] + \", \" + parts[3] + \", \" + parts[1] + \")\");\n      } //else likely eventual exception\n    }\n\n    //Solr expects us to remove the parameters we've used.\n    MapListener<String, String> argsWrap = new MapListener<String, String>(args);\n    ctx = SpatialContextFactory.makeSpatialContext(argsWrap, schema.getResourceLoader().getClassLoader());\n    args.keySet().removeAll(argsWrap.getSeenKeys());\n\n    argsParser = newSpatialArgsParser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n\n    String units = args.remove(\"units\");\n    if (!\"degrees\".equals(units))\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Must specify units=\\\"degrees\\\" on field types with class \"+getClass().getSimpleName());\n\n    //replace legacy rect format with ENVELOPE\n    String wbStr = args.get(\"worldBounds\");\n    if (wbStr != null && !wbStr.toUpperCase(Locale.ROOT).startsWith(\"ENVELOPE\")) {\n      log.warn(\"Using old worldBounds format? Should use ENVELOPE(xMin, xMax, yMax, yMin).\");\n      String[] parts = wbStr.split(\" \");//\"xMin yMin xMax yMax\"\n      if (parts.length == 4) {\n        args.put(\"worldBounds\",\n            \"ENVELOPE(\" + parts[0] + \", \" + parts[2] + \", \" + parts[3] + \", \" + parts[1] + \")\");\n      } //else likely eventual exception\n    }\n\n    //Solr expects us to remove the parameters we've used.\n    MapListener<String, String> argsWrap = new MapListener<>(args);\n    ctx = SpatialContextFactory.makeSpatialContext(argsWrap, schema.getResourceLoader().getClassLoader());\n    args.keySet().removeAll(argsWrap.getSeenKeys());\n\n    argsParser = newSpatialArgsParser();\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n\n    String units = args.remove(\"units\");\n    if (!\"degrees\".equals(units))\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Must specify units=\\\"degrees\\\" on field types with class \"+getClass().getSimpleName());\n\n    //replace legacy rect format with ENVELOPE\n    String wbStr = args.get(\"worldBounds\");\n    if (wbStr != null && !wbStr.toUpperCase(Locale.ROOT).startsWith(\"ENVELOPE\")) {\n      log.warn(\"Using old worldBounds format? Should use ENVELOPE(xMin, xMax, yMax, yMin).\");\n      String[] parts = wbStr.split(\" \");//\"xMin yMin xMax yMax\"\n      if (parts.length == 4) {\n        args.put(\"worldBounds\",\n            \"ENVELOPE(\" + parts[0] + \", \" + parts[2] + \", \" + parts[3] + \", \" + parts[1] + \")\");\n      } //else likely eventual exception\n    }\n\n    //Solr expects us to remove the parameters we've used.\n    MapListener<String, String> argsWrap = new MapListener<String, String>(args);\n    ctx = SpatialContextFactory.makeSpatialContext(argsWrap, schema.getResourceLoader().getClassLoader());\n    args.keySet().removeAll(argsWrap.getSeenKeys());\n\n    argsParser = newSpatialArgsParser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"167133992e7b384ce97f83ddb1dd2ddd09daf7aa","date":1420315776,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n\n    //replace legacy rect format with ENVELOPE\n    String wbStr = args.get(\"worldBounds\");\n    if (wbStr != null && !wbStr.toUpperCase(Locale.ROOT).startsWith(\"ENVELOPE\")) {\n      log.warn(\"Using old worldBounds format? Should use ENVELOPE(xMin, xMax, yMax, yMin).\");\n      String[] parts = wbStr.split(\" \");//\"xMin yMin xMax yMax\"\n      if (parts.length == 4) {\n        args.put(\"worldBounds\",\n            \"ENVELOPE(\" + parts[0] + \", \" + parts[2] + \", \" + parts[3] + \", \" + parts[1] + \")\");\n      } //else likely eventual exception\n    }\n\n    //Solr expects us to remove the parameters we've used.\n    MapListener<String, String> argsWrap = new MapListener<>(args);\n    ctx = SpatialContextFactory.makeSpatialContext(argsWrap, schema.getResourceLoader().getClassLoader());\n    args.keySet().removeAll(argsWrap.getSeenKeys());\n\n    final String unitsErrMsg = \"units parameter is deprecated, please use distanceUnits instead for field types with class \" +\n        getClass().getSimpleName();\n    this.units = args.remove(\"units\");//deprecated\n    if (units != null) {\n      if (\"degrees\".equals(units)) {\n        log.warn(unitsErrMsg);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, unitsErrMsg);\n      }\n    }\n\n    final String distanceUnitsStr = args.remove(\"distanceUnits\");\n    if (distanceUnitsStr == null) {\n      if (units != null) {\n        this.distanceUnits = DistanceUnits.BACKCOMPAT;\n      } else {\n        this.distanceUnits = ctx.isGeo() ? DistanceUnits.KILOMETERS : DistanceUnits.DEGREES;\n      }\n    } else {\n      // If both units and distanceUnits was specified\n      if (units != null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, unitsErrMsg);\n      }\n      this.distanceUnits = parseDistanceUnits(distanceUnitsStr);\n      if (this.distanceUnits == null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Must specify distanceUnits as one of \"+ DistanceUnits.getSupportedUnits() +\n                \" on field types with class \"+getClass().getSimpleName());\n    }\n\n    argsParser = newSpatialArgsParser();\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n\n    String units = args.remove(\"units\");\n    if (!\"degrees\".equals(units))\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Must specify units=\\\"degrees\\\" on field types with class \"+getClass().getSimpleName());\n\n    //replace legacy rect format with ENVELOPE\n    String wbStr = args.get(\"worldBounds\");\n    if (wbStr != null && !wbStr.toUpperCase(Locale.ROOT).startsWith(\"ENVELOPE\")) {\n      log.warn(\"Using old worldBounds format? Should use ENVELOPE(xMin, xMax, yMax, yMin).\");\n      String[] parts = wbStr.split(\" \");//\"xMin yMin xMax yMax\"\n      if (parts.length == 4) {\n        args.put(\"worldBounds\",\n            \"ENVELOPE(\" + parts[0] + \", \" + parts[2] + \", \" + parts[3] + \", \" + parts[1] + \")\");\n      } //else likely eventual exception\n    }\n\n    //Solr expects us to remove the parameters we've used.\n    MapListener<String, String> argsWrap = new MapListener<>(args);\n    ctx = SpatialContextFactory.makeSpatialContext(argsWrap, schema.getResourceLoader().getClassLoader());\n    args.keySet().removeAll(argsWrap.getSeenKeys());\n\n    argsParser = newSpatialArgsParser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"862fe0ddb727c373fe11596c809321056ffbc018","date":1421158638,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n\n    //Solr expects us to remove the parameters we've used.\n    MapListener<String, String> argsWrap = new MapListener<>(args);\n    ctx = SpatialContextFactory.makeSpatialContext(argsWrap, schema.getResourceLoader().getClassLoader());\n    args.keySet().removeAll(argsWrap.getSeenKeys());\n\n    final String unitsErrMsg = \"units parameter is deprecated, please use distanceUnits instead for field types with class \" +\n        getClass().getSimpleName();\n    this.units = args.remove(\"units\");//deprecated\n    if (units != null) {\n      if (\"degrees\".equals(units)) {\n        log.warn(unitsErrMsg);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, unitsErrMsg);\n      }\n    }\n\n    final String distanceUnitsStr = args.remove(\"distanceUnits\");\n    if (distanceUnitsStr == null) {\n      if (units != null) {\n        this.distanceUnits = DistanceUnits.BACKCOMPAT;\n      } else {\n        this.distanceUnits = ctx.isGeo() ? DistanceUnits.KILOMETERS : DistanceUnits.DEGREES;\n      }\n    } else {\n      // If both units and distanceUnits was specified\n      if (units != null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, unitsErrMsg);\n      }\n      this.distanceUnits = parseDistanceUnits(distanceUnitsStr);\n      if (this.distanceUnits == null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Must specify distanceUnits as one of \"+ DistanceUnits.getSupportedUnits() +\n                \" on field types with class \"+getClass().getSimpleName());\n    }\n\n    argsParser = newSpatialArgsParser();\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n\n    //replace legacy rect format with ENVELOPE\n    String wbStr = args.get(\"worldBounds\");\n    if (wbStr != null && !wbStr.toUpperCase(Locale.ROOT).startsWith(\"ENVELOPE\")) {\n      log.warn(\"Using old worldBounds format? Should use ENVELOPE(xMin, xMax, yMax, yMin).\");\n      String[] parts = wbStr.split(\" \");//\"xMin yMin xMax yMax\"\n      if (parts.length == 4) {\n        args.put(\"worldBounds\",\n            \"ENVELOPE(\" + parts[0] + \", \" + parts[2] + \", \" + parts[3] + \", \" + parts[1] + \")\");\n      } //else likely eventual exception\n    }\n\n    //Solr expects us to remove the parameters we've used.\n    MapListener<String, String> argsWrap = new MapListener<>(args);\n    ctx = SpatialContextFactory.makeSpatialContext(argsWrap, schema.getResourceLoader().getClassLoader());\n    args.keySet().removeAll(argsWrap.getSeenKeys());\n\n    final String unitsErrMsg = \"units parameter is deprecated, please use distanceUnits instead for field types with class \" +\n        getClass().getSimpleName();\n    this.units = args.remove(\"units\");//deprecated\n    if (units != null) {\n      if (\"degrees\".equals(units)) {\n        log.warn(unitsErrMsg);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, unitsErrMsg);\n      }\n    }\n\n    final String distanceUnitsStr = args.remove(\"distanceUnits\");\n    if (distanceUnitsStr == null) {\n      if (units != null) {\n        this.distanceUnits = DistanceUnits.BACKCOMPAT;\n      } else {\n        this.distanceUnits = ctx.isGeo() ? DistanceUnits.KILOMETERS : DistanceUnits.DEGREES;\n      }\n    } else {\n      // If both units and distanceUnits was specified\n      if (units != null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, unitsErrMsg);\n      }\n      this.distanceUnits = parseDistanceUnits(distanceUnitsStr);\n      if (this.distanceUnits == null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Must specify distanceUnits as one of \"+ DistanceUnits.getSupportedUnits() +\n                \" on field types with class \"+getClass().getSimpleName());\n    }\n\n    argsParser = newSpatialArgsParser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f260d23bcb7f3e927d0421bfdbd13479472668f","date":1428637102,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n\n    if(ctx==null) { // subclass can set this directly\n      //Solr expects us to remove the parameters we've used.\n      MapListener<String, String> argsWrap = new MapListener<>(args);\n      ctx = SpatialContextFactory.makeSpatialContext(argsWrap, schema.getResourceLoader().getClassLoader());\n      args.keySet().removeAll(argsWrap.getSeenKeys());\n    }\n    \n    final String unitsErrMsg = \"units parameter is deprecated, please use distanceUnits instead for field types with class \" +\n        getClass().getSimpleName();\n    this.units = args.remove(\"units\");//deprecated\n    if (units != null) {\n      if (\"degrees\".equals(units)) {\n        log.warn(unitsErrMsg);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, unitsErrMsg);\n      }\n    }\n\n    final String distanceUnitsStr = args.remove(\"distanceUnits\");\n    if (distanceUnitsStr == null) {\n      if (units != null) {\n        this.distanceUnits = DistanceUnits.BACKCOMPAT;\n      } else {\n        this.distanceUnits = ctx.isGeo() ? DistanceUnits.KILOMETERS : DistanceUnits.DEGREES;\n      }\n    } else {\n      // If both units and distanceUnits was specified\n      if (units != null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, unitsErrMsg);\n      }\n      this.distanceUnits = parseDistanceUnits(distanceUnitsStr);\n      if (this.distanceUnits == null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Must specify distanceUnits as one of \"+ DistanceUnits.getSupportedUnits() +\n                \" on field types with class \"+getClass().getSimpleName());\n    }\n\n    argsParser = newSpatialArgsParser();\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n\n    //Solr expects us to remove the parameters we've used.\n    MapListener<String, String> argsWrap = new MapListener<>(args);\n    ctx = SpatialContextFactory.makeSpatialContext(argsWrap, schema.getResourceLoader().getClassLoader());\n    args.keySet().removeAll(argsWrap.getSeenKeys());\n\n    final String unitsErrMsg = \"units parameter is deprecated, please use distanceUnits instead for field types with class \" +\n        getClass().getSimpleName();\n    this.units = args.remove(\"units\");//deprecated\n    if (units != null) {\n      if (\"degrees\".equals(units)) {\n        log.warn(unitsErrMsg);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, unitsErrMsg);\n      }\n    }\n\n    final String distanceUnitsStr = args.remove(\"distanceUnits\");\n    if (distanceUnitsStr == null) {\n      if (units != null) {\n        this.distanceUnits = DistanceUnits.BACKCOMPAT;\n      } else {\n        this.distanceUnits = ctx.isGeo() ? DistanceUnits.KILOMETERS : DistanceUnits.DEGREES;\n      }\n    } else {\n      // If both units and distanceUnits was specified\n      if (units != null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, unitsErrMsg);\n      }\n      this.distanceUnits = parseDistanceUnits(distanceUnitsStr);\n      if (this.distanceUnits == null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Must specify distanceUnits as one of \"+ DistanceUnits.getSupportedUnits() +\n                \" on field types with class \"+getClass().getSimpleName());\n    }\n\n    argsParser = newSpatialArgsParser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"733eaf468f18297b1bcc51031353bdfdd1913bdf","date":1456928540,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n\n    if(ctx==null) { // subclass can set this directly\n      //Solr expects us to remove the parameters we've used.\n      MapListener<String, String> argsWrap = new MapListener<>(args);\n      ctx = SpatialContextFactory.makeSpatialContext(argsWrap, schema.getResourceLoader().getClassLoader());\n      args.keySet().removeAll(argsWrap.getSeenKeys());\n    }\n\n    final String distanceUnitsStr = args.remove(\"distanceUnits\");\n    if (distanceUnitsStr == null) {\n      this.distanceUnits = ctx.isGeo() ? DistanceUnits.KILOMETERS : DistanceUnits.DEGREES;\n    } else {\n      this.distanceUnits = parseDistanceUnits(distanceUnitsStr);\n      if (this.distanceUnits == null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Must specify distanceUnits as one of \"+ DistanceUnits.getSupportedUnits() +\n                \" on field types with class \"+getClass().getSimpleName());\n    }\n\n    argsParser = newSpatialArgsParser();\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n\n    if(ctx==null) { // subclass can set this directly\n      //Solr expects us to remove the parameters we've used.\n      MapListener<String, String> argsWrap = new MapListener<>(args);\n      ctx = SpatialContextFactory.makeSpatialContext(argsWrap, schema.getResourceLoader().getClassLoader());\n      args.keySet().removeAll(argsWrap.getSeenKeys());\n    }\n    \n    final String unitsErrMsg = \"units parameter is deprecated, please use distanceUnits instead for field types with class \" +\n        getClass().getSimpleName();\n    this.units = args.remove(\"units\");//deprecated\n    if (units != null) {\n      if (\"degrees\".equals(units)) {\n        log.warn(unitsErrMsg);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, unitsErrMsg);\n      }\n    }\n\n    final String distanceUnitsStr = args.remove(\"distanceUnits\");\n    if (distanceUnitsStr == null) {\n      if (units != null) {\n        this.distanceUnits = DistanceUnits.BACKCOMPAT;\n      } else {\n        this.distanceUnits = ctx.isGeo() ? DistanceUnits.KILOMETERS : DistanceUnits.DEGREES;\n      }\n    } else {\n      // If both units and distanceUnits was specified\n      if (units != null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, unitsErrMsg);\n      }\n      this.distanceUnits = parseDistanceUnits(distanceUnitsStr);\n      if (this.distanceUnits == null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Must specify distanceUnits as one of \"+ DistanceUnits.getSupportedUnits() +\n                \" on field types with class \"+getClass().getSimpleName());\n    }\n\n    argsParser = newSpatialArgsParser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n\n    if(ctx==null) { // subclass can set this directly\n      //Solr expects us to remove the parameters we've used.\n      MapListener<String, String> argsWrap = new MapListener<>(args);\n      ctx = SpatialContextFactory.makeSpatialContext(argsWrap, schema.getResourceLoader().getClassLoader());\n      args.keySet().removeAll(argsWrap.getSeenKeys());\n    }\n\n    final String distanceUnitsStr = args.remove(\"distanceUnits\");\n    if (distanceUnitsStr == null) {\n      this.distanceUnits = ctx.isGeo() ? DistanceUnits.KILOMETERS : DistanceUnits.DEGREES;\n    } else {\n      this.distanceUnits = parseDistanceUnits(distanceUnitsStr);\n      if (this.distanceUnits == null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Must specify distanceUnits as one of \"+ DistanceUnits.getSupportedUnits() +\n                \" on field types with class \"+getClass().getSimpleName());\n    }\n\n    argsParser = newSpatialArgsParser();\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n\n    if(ctx==null) { // subclass can set this directly\n      //Solr expects us to remove the parameters we've used.\n      MapListener<String, String> argsWrap = new MapListener<>(args);\n      ctx = SpatialContextFactory.makeSpatialContext(argsWrap, schema.getResourceLoader().getClassLoader());\n      args.keySet().removeAll(argsWrap.getSeenKeys());\n    }\n    \n    final String unitsErrMsg = \"units parameter is deprecated, please use distanceUnits instead for field types with class \" +\n        getClass().getSimpleName();\n    this.units = args.remove(\"units\");//deprecated\n    if (units != null) {\n      if (\"degrees\".equals(units)) {\n        log.warn(unitsErrMsg);\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, unitsErrMsg);\n      }\n    }\n\n    final String distanceUnitsStr = args.remove(\"distanceUnits\");\n    if (distanceUnitsStr == null) {\n      if (units != null) {\n        this.distanceUnits = DistanceUnits.BACKCOMPAT;\n      } else {\n        this.distanceUnits = ctx.isGeo() ? DistanceUnits.KILOMETERS : DistanceUnits.DEGREES;\n      }\n    } else {\n      // If both units and distanceUnits was specified\n      if (units != null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, unitsErrMsg);\n      }\n      this.distanceUnits = parseDistanceUnits(distanceUnitsStr);\n      if (this.distanceUnits == null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Must specify distanceUnits as one of \"+ DistanceUnits.getSupportedUnits() +\n                \" on field types with class \"+getClass().getSimpleName());\n    }\n\n    argsParser = newSpatialArgsParser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03d8df7e95735d8cda6a255c42e0997c699bb176","date":1458157920,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n\n    if(ctx==null) { // subclass can set this directly\n      //Solr expects us to remove the parameters we've used.\n      MapListener<String, String> argsWrap = new MapListener<>(args);\n      ctx = SpatialContextFactory.makeSpatialContext(argsWrap, schema.getResourceLoader().getClassLoader());\n      args.keySet().removeAll(argsWrap.getSeenKeys());\n    }\n\n    final String distanceUnitsStr = args.remove(\"distanceUnits\");\n    if (distanceUnitsStr == null) {\n      this.distanceUnits = ctx.isGeo() ? DistanceUnits.KILOMETERS : DistanceUnits.DEGREES;\n    } else {\n      this.distanceUnits = parseDistanceUnits(distanceUnitsStr);\n      if (this.distanceUnits == null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Must specify distanceUnits as one of \"+ DistanceUnits.getSupportedUnits() +\n                \" on field types with class \"+getClass().getSimpleName());\n    }\n\n    final SupportedFormats fmts = ctx.getFormats();\n    final String format = args.remove(FORMAT);\n    if (format != null) {\n      shapeWriter = fmts.getWriter(format);\n      shapeReader = fmts.getReader(format);\n      if(shapeWriter==null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown Shape Format: \"+ format);\n      }\n      if(shapeReader==null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown Shape Format: \"+ format);\n      }\n    }\n    else {\n      // Otherwise, pick the first supported reader/writer\n      shapeWriter = fmts.getWriters().get(0);\n      shapeReader = fmts.getReaders().get(0);\n    }\n    argsParser = newSpatialArgsParser();\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n\n    if(ctx==null) { // subclass can set this directly\n      //Solr expects us to remove the parameters we've used.\n      MapListener<String, String> argsWrap = new MapListener<>(args);\n      ctx = SpatialContextFactory.makeSpatialContext(argsWrap, schema.getResourceLoader().getClassLoader());\n      args.keySet().removeAll(argsWrap.getSeenKeys());\n    }\n\n    final String distanceUnitsStr = args.remove(\"distanceUnits\");\n    if (distanceUnitsStr == null) {\n      this.distanceUnits = ctx.isGeo() ? DistanceUnits.KILOMETERS : DistanceUnits.DEGREES;\n    } else {\n      this.distanceUnits = parseDistanceUnits(distanceUnitsStr);\n      if (this.distanceUnits == null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Must specify distanceUnits as one of \"+ DistanceUnits.getSupportedUnits() +\n                \" on field types with class \"+getClass().getSimpleName());\n    }\n\n    argsParser = newSpatialArgsParser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23aec8f6a0b5a11d050d784a13871261bef7c925","date":1465332514,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n\n    if(ctx==null) { // subclass can set this directly\n      //Solr expects us to remove the parameters we've used.\n      MapListener<String, String> argsWrap = new MapListener<>(args);\n      ctx = SpatialContextFactory.makeSpatialContext(argsWrap, schema.getResourceLoader().getClassLoader());\n      args.keySet().removeAll(argsWrap.getSeenKeys());\n    }\n\n    final String distanceUnitsStr = args.remove(\"distanceUnits\");\n    if (distanceUnitsStr == null) {\n      this.distanceUnits = ctx.isGeo() ? DistanceUnits.KILOMETERS : DistanceUnits.DEGREES;\n    } else {\n      this.distanceUnits = parseDistanceUnits(distanceUnitsStr);\n      if (this.distanceUnits == null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Must specify distanceUnits as one of \"+ DistanceUnits.getSupportedUnits() +\n                \" on field types with class \"+getClass().getSimpleName());\n    }\n\n    final SupportedFormats fmts = ctx.getFormats();\n    String format = args.remove(FORMAT);\n    if (format == null) {\n      format = \"WKT\";\n    }\n    shapeWriter = fmts.getWriter(format);\n    shapeReader = fmts.getReader(format);\n    if(shapeWriter==null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unknown Shape Format: \"+ format);\n    }\n    if(shapeReader==null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unknown Shape Format: \"+ format);\n    }\n\n    argsParser = newSpatialArgsParser();\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n\n    if(ctx==null) { // subclass can set this directly\n      //Solr expects us to remove the parameters we've used.\n      MapListener<String, String> argsWrap = new MapListener<>(args);\n      ctx = SpatialContextFactory.makeSpatialContext(argsWrap, schema.getResourceLoader().getClassLoader());\n      args.keySet().removeAll(argsWrap.getSeenKeys());\n    }\n\n    final String distanceUnitsStr = args.remove(\"distanceUnits\");\n    if (distanceUnitsStr == null) {\n      this.distanceUnits = ctx.isGeo() ? DistanceUnits.KILOMETERS : DistanceUnits.DEGREES;\n    } else {\n      this.distanceUnits = parseDistanceUnits(distanceUnitsStr);\n      if (this.distanceUnits == null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Must specify distanceUnits as one of \"+ DistanceUnits.getSupportedUnits() +\n                \" on field types with class \"+getClass().getSimpleName());\n    }\n\n    final SupportedFormats fmts = ctx.getFormats();\n    final String format = args.remove(FORMAT);\n    if (format != null) {\n      shapeWriter = fmts.getWriter(format);\n      shapeReader = fmts.getReader(format);\n      if(shapeWriter==null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown Shape Format: \"+ format);\n      }\n      if(shapeReader==null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown Shape Format: \"+ format);\n      }\n    }\n    else {\n      // Otherwise, pick the first supported reader/writer\n      shapeWriter = fmts.getWriters().get(0);\n      shapeReader = fmts.getReaders().get(0);\n    }\n    argsParser = newSpatialArgsParser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"702a5f2b4d6daa1c6d7eaff268eba61ce7a8713f","date":1468075752,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n\n    if (ctx==null) { // subclass can set this directly\n      final String CTX_PARAM = \"spatialContextFactory\";\n      final String OLD_SPATIAL4J_PREFIX = \"com.spatial4j.core\";\n      final String NEW_SPATIAL4J_PREFIX = \"org.locationtech.spatial4j\";\n      for (Map.Entry<String, String> argEntry : args.entrySet()) {\n        // \"JTS\" is a convenience alias\n        if (argEntry.getKey().equals(CTX_PARAM) && argEntry.getValue().equals(\"JTS\")) {\n          argEntry.setValue(\"org.locationtech.spatial4j.context.jts.JtsSpatialContextFactory\");\n          continue;\n        }\n        // Warn about using old Spatial4j class names\n        if (argEntry.getValue().contains(OLD_SPATIAL4J_PREFIX)) {\n          log.warn(\"Replace '\" + OLD_SPATIAL4J_PREFIX + \"' with '\" + NEW_SPATIAL4J_PREFIX + \"' in your schema.\");\n          argEntry.setValue(argEntry.getValue().replace(OLD_SPATIAL4J_PREFIX, NEW_SPATIAL4J_PREFIX));\n        }\n      }\n\n      //Solr expects us to remove the parameters we've used.\n      MapListener<String, String> argsWrap = new MapListener<>(args);\n      ctx = SpatialContextFactory.makeSpatialContext(argsWrap, schema.getResourceLoader().getClassLoader());\n      args.keySet().removeAll(argsWrap.getSeenKeys());\n    }\n\n    final String distanceUnitsStr = args.remove(\"distanceUnits\");\n    if (distanceUnitsStr == null) {\n      this.distanceUnits = ctx.isGeo() ? DistanceUnits.KILOMETERS : DistanceUnits.DEGREES;\n    } else {\n      this.distanceUnits = parseDistanceUnits(distanceUnitsStr);\n      if (this.distanceUnits == null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Must specify distanceUnits as one of \"+ DistanceUnits.getSupportedUnits() +\n                \" on field types with class \"+getClass().getSimpleName());\n    }\n\n    final SupportedFormats fmts = ctx.getFormats();\n    String format = args.remove(FORMAT);\n    if (format == null) {\n      format = \"WKT\";\n    }\n    shapeWriter = fmts.getWriter(format);\n    shapeReader = fmts.getReader(format);\n    if(shapeWriter==null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unknown Shape Format: \"+ format);\n    }\n    if(shapeReader==null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unknown Shape Format: \"+ format);\n    }\n\n    argsParser = newSpatialArgsParser();\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n\n    if(ctx==null) { // subclass can set this directly\n      //Solr expects us to remove the parameters we've used.\n      MapListener<String, String> argsWrap = new MapListener<>(args);\n      ctx = SpatialContextFactory.makeSpatialContext(argsWrap, schema.getResourceLoader().getClassLoader());\n      args.keySet().removeAll(argsWrap.getSeenKeys());\n    }\n\n    final String distanceUnitsStr = args.remove(\"distanceUnits\");\n    if (distanceUnitsStr == null) {\n      this.distanceUnits = ctx.isGeo() ? DistanceUnits.KILOMETERS : DistanceUnits.DEGREES;\n    } else {\n      this.distanceUnits = parseDistanceUnits(distanceUnitsStr);\n      if (this.distanceUnits == null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Must specify distanceUnits as one of \"+ DistanceUnits.getSupportedUnits() +\n                \" on field types with class \"+getClass().getSimpleName());\n    }\n\n    final SupportedFormats fmts = ctx.getFormats();\n    String format = args.remove(FORMAT);\n    if (format == null) {\n      format = \"WKT\";\n    }\n    shapeWriter = fmts.getWriter(format);\n    shapeReader = fmts.getReader(format);\n    if(shapeWriter==null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unknown Shape Format: \"+ format);\n    }\n    if(shapeReader==null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unknown Shape Format: \"+ format);\n    }\n\n    argsParser = newSpatialArgsParser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n\n    if (ctx==null) { // subclass can set this directly\n      final String CTX_PARAM = \"spatialContextFactory\";\n      final String OLD_SPATIAL4J_PREFIX = \"com.spatial4j.core\";\n      final String NEW_SPATIAL4J_PREFIX = \"org.locationtech.spatial4j\";\n      for (Map.Entry<String, String> argEntry : args.entrySet()) {\n        // \"JTS\" is a convenience alias\n        if (argEntry.getKey().equals(CTX_PARAM) && argEntry.getValue().equals(\"JTS\")) {\n          argEntry.setValue(\"org.locationtech.spatial4j.context.jts.JtsSpatialContextFactory\");\n          continue;\n        }\n        // Warn about using old Spatial4j class names\n        if (argEntry.getValue().contains(OLD_SPATIAL4J_PREFIX)) {\n          log.warn(\"Replace '\" + OLD_SPATIAL4J_PREFIX + \"' with '\" + NEW_SPATIAL4J_PREFIX + \"' in your schema.\");\n          argEntry.setValue(argEntry.getValue().replace(OLD_SPATIAL4J_PREFIX, NEW_SPATIAL4J_PREFIX));\n        }\n      }\n\n      //Solr expects us to remove the parameters we've used.\n      MapListener<String, String> argsWrap = new MapListener<>(args);\n      ctx = SpatialContextFactory.makeSpatialContext(argsWrap, schema.getResourceLoader().getClassLoader());\n      args.keySet().removeAll(argsWrap.getSeenKeys());\n    }\n\n    final String distanceUnitsStr = args.remove(\"distanceUnits\");\n    if (distanceUnitsStr == null) {\n      this.distanceUnits = ctx.isGeo() ? DistanceUnits.KILOMETERS : DistanceUnits.DEGREES;\n    } else {\n      this.distanceUnits = parseDistanceUnits(distanceUnitsStr);\n      if (this.distanceUnits == null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Must specify distanceUnits as one of \"+ DistanceUnits.getSupportedUnits() +\n                \" on field types with class \"+getClass().getSimpleName());\n    }\n\n    final SupportedFormats fmts = ctx.getFormats();\n    String format = args.remove(FORMAT);\n    if (format == null) {\n      format = \"WKT\";\n    }\n    shapeWriter = fmts.getWriter(format);\n    shapeReader = fmts.getReader(format);\n    if(shapeWriter==null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unknown Shape Format: \"+ format);\n    }\n    if(shapeReader==null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unknown Shape Format: \"+ format);\n    }\n\n    argsParser = newSpatialArgsParser();\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n\n    if(ctx==null) { // subclass can set this directly\n      //Solr expects us to remove the parameters we've used.\n      MapListener<String, String> argsWrap = new MapListener<>(args);\n      ctx = SpatialContextFactory.makeSpatialContext(argsWrap, schema.getResourceLoader().getClassLoader());\n      args.keySet().removeAll(argsWrap.getSeenKeys());\n    }\n\n    final String distanceUnitsStr = args.remove(\"distanceUnits\");\n    if (distanceUnitsStr == null) {\n      this.distanceUnits = ctx.isGeo() ? DistanceUnits.KILOMETERS : DistanceUnits.DEGREES;\n    } else {\n      this.distanceUnits = parseDistanceUnits(distanceUnitsStr);\n      if (this.distanceUnits == null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Must specify distanceUnits as one of \"+ DistanceUnits.getSupportedUnits() +\n                \" on field types with class \"+getClass().getSimpleName());\n    }\n\n    final SupportedFormats fmts = ctx.getFormats();\n    final String format = args.remove(FORMAT);\n    if (format != null) {\n      shapeWriter = fmts.getWriter(format);\n      shapeReader = fmts.getReader(format);\n      if(shapeWriter==null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown Shape Format: \"+ format);\n      }\n      if(shapeReader==null) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Unknown Shape Format: \"+ format);\n      }\n    }\n    else {\n      // Otherwise, pick the first supported reader/writer\n      shapeWriter = fmts.getWriters().get(0);\n      shapeReader = fmts.getReaders().get(0);\n    }\n    argsParser = newSpatialArgsParser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"255b1d03d3daae9aaaade60819388695622237d8","date":1506179019,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n\n    if (ctx==null) { // subclass can set this directly\n      final String CTX_PARAM = \"spatialContextFactory\";\n      final String OLD_SPATIAL4J_PREFIX = \"com.spatial4j.core\";\n      final String NEW_SPATIAL4J_PREFIX = \"org.locationtech.spatial4j\";\n      for (Map.Entry<String, String> argEntry : args.entrySet()) {\n        // \"JTS\" is a convenience alias\n        if (argEntry.getKey().equals(CTX_PARAM) && argEntry.getValue().equals(\"JTS\")) {\n          argEntry.setValue(\"org.locationtech.spatial4j.context.jts.JtsSpatialContextFactory\");\n          continue;\n        }\n        if (argEntry.getKey().equals(CTX_PARAM) && argEntry.getValue().equals(\"Geo3D\")) {\n          argEntry.setValue(Geo3dSpatialContextFactory.class.getName());\n          continue;\n        }\n        // Warn about using old Spatial4j class names\n        if (argEntry.getValue().contains(OLD_SPATIAL4J_PREFIX)) {\n          log.warn(\"Replace '\" + OLD_SPATIAL4J_PREFIX + \"' with '\" + NEW_SPATIAL4J_PREFIX + \"' in your schema.\");\n          argEntry.setValue(argEntry.getValue().replace(OLD_SPATIAL4J_PREFIX, NEW_SPATIAL4J_PREFIX));\n        }\n      }\n\n      //Solr expects us to remove the parameters we've used.\n      MapListener<String, String> argsWrap = new MapListener<>(args);\n      ctx = SpatialContextFactory.makeSpatialContext(argsWrap, schema.getResourceLoader().getClassLoader());\n      args.keySet().removeAll(argsWrap.getSeenKeys());\n    }\n\n    final String distanceUnitsStr = args.remove(\"distanceUnits\");\n    if (distanceUnitsStr == null) {\n      this.distanceUnits = ctx.isGeo() ? DistanceUnits.KILOMETERS : DistanceUnits.DEGREES;\n    } else {\n      this.distanceUnits = parseDistanceUnits(distanceUnitsStr);\n      if (this.distanceUnits == null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Must specify distanceUnits as one of \"+ DistanceUnits.getSupportedUnits() +\n                \" on field types with class \"+getClass().getSimpleName());\n    }\n\n    final SupportedFormats fmts = ctx.getFormats();\n    String format = args.remove(FORMAT);\n    if (format == null) {\n      format = \"WKT\";\n    }\n    shapeWriter = fmts.getWriter(format);\n    shapeReader = fmts.getReader(format);\n    if(shapeWriter==null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unknown Shape Format: \"+ format);\n    }\n    if(shapeReader==null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unknown Shape Format: \"+ format);\n    }\n\n    argsParser = newSpatialArgsParser();\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n\n    if (ctx==null) { // subclass can set this directly\n      final String CTX_PARAM = \"spatialContextFactory\";\n      final String OLD_SPATIAL4J_PREFIX = \"com.spatial4j.core\";\n      final String NEW_SPATIAL4J_PREFIX = \"org.locationtech.spatial4j\";\n      for (Map.Entry<String, String> argEntry : args.entrySet()) {\n        // \"JTS\" is a convenience alias\n        if (argEntry.getKey().equals(CTX_PARAM) && argEntry.getValue().equals(\"JTS\")) {\n          argEntry.setValue(\"org.locationtech.spatial4j.context.jts.JtsSpatialContextFactory\");\n          continue;\n        }\n        // Warn about using old Spatial4j class names\n        if (argEntry.getValue().contains(OLD_SPATIAL4J_PREFIX)) {\n          log.warn(\"Replace '\" + OLD_SPATIAL4J_PREFIX + \"' with '\" + NEW_SPATIAL4J_PREFIX + \"' in your schema.\");\n          argEntry.setValue(argEntry.getValue().replace(OLD_SPATIAL4J_PREFIX, NEW_SPATIAL4J_PREFIX));\n        }\n      }\n\n      //Solr expects us to remove the parameters we've used.\n      MapListener<String, String> argsWrap = new MapListener<>(args);\n      ctx = SpatialContextFactory.makeSpatialContext(argsWrap, schema.getResourceLoader().getClassLoader());\n      args.keySet().removeAll(argsWrap.getSeenKeys());\n    }\n\n    final String distanceUnitsStr = args.remove(\"distanceUnits\");\n    if (distanceUnitsStr == null) {\n      this.distanceUnits = ctx.isGeo() ? DistanceUnits.KILOMETERS : DistanceUnits.DEGREES;\n    } else {\n      this.distanceUnits = parseDistanceUnits(distanceUnitsStr);\n      if (this.distanceUnits == null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Must specify distanceUnits as one of \"+ DistanceUnits.getSupportedUnits() +\n                \" on field types with class \"+getClass().getSimpleName());\n    }\n\n    final SupportedFormats fmts = ctx.getFormats();\n    String format = args.remove(FORMAT);\n    if (format == null) {\n      format = \"WKT\";\n    }\n    shapeWriter = fmts.getWriter(format);\n    shapeReader = fmts.getReader(format);\n    if(shapeWriter==null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unknown Shape Format: \"+ format);\n    }\n    if(shapeReader==null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unknown Shape Format: \"+ format);\n    }\n\n    argsParser = newSpatialArgsParser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8557552f7ab8e381c4d1a941a269e14f11e779d","date":1506320429,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n\n    if (ctx==null) { // subclass can set this directly\n      final String CTX_PARAM = \"spatialContextFactory\";\n      final String OLD_SPATIAL4J_PREFIX = \"com.spatial4j.core\";\n      final String NEW_SPATIAL4J_PREFIX = \"org.locationtech.spatial4j\";\n      for (Map.Entry<String, String> argEntry : args.entrySet()) {\n        // \"JTS\" is a convenience alias\n        if (argEntry.getKey().equals(CTX_PARAM) && argEntry.getValue().equals(\"JTS\")) {\n          argEntry.setValue(\"org.locationtech.spatial4j.context.jts.JtsSpatialContextFactory\");\n          continue;\n        }\n        if (argEntry.getKey().equals(CTX_PARAM) && argEntry.getValue().equals(\"Geo3D\")) {\n          argEntry.setValue(Geo3dSpatialContextFactory.class.getName());\n          continue;\n        }\n        // Warn about using old Spatial4j class names\n        if (argEntry.getValue().contains(OLD_SPATIAL4J_PREFIX)) {\n          log.warn(\"Replace '\" + OLD_SPATIAL4J_PREFIX + \"' with '\" + NEW_SPATIAL4J_PREFIX + \"' in your schema.\");\n          argEntry.setValue(argEntry.getValue().replace(OLD_SPATIAL4J_PREFIX, NEW_SPATIAL4J_PREFIX));\n        }\n      }\n\n      //Solr expects us to remove the parameters we've used.\n      MapListener<String, String> argsWrap = new MapListener<>(args);\n      ctx = SpatialContextFactory.makeSpatialContext(argsWrap, schema.getResourceLoader().getClassLoader());\n      args.keySet().removeAll(argsWrap.getSeenKeys());\n    }\n\n    final String distanceUnitsStr = args.remove(\"distanceUnits\");\n    if (distanceUnitsStr == null) {\n      this.distanceUnits = ctx.isGeo() ? DistanceUnits.KILOMETERS : DistanceUnits.DEGREES;\n    } else {\n      this.distanceUnits = parseDistanceUnits(distanceUnitsStr);\n      if (this.distanceUnits == null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Must specify distanceUnits as one of \"+ DistanceUnits.getSupportedUnits() +\n                \" on field types with class \"+getClass().getSimpleName());\n    }\n\n    final SupportedFormats fmts = ctx.getFormats();\n    String format = args.remove(FORMAT);\n    if (format == null) {\n      format = \"WKT\";\n    }\n    shapeWriter = fmts.getWriter(format);\n    shapeReader = fmts.getReader(format);\n    if(shapeWriter==null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unknown Shape Format: \"+ format);\n    }\n    if(shapeReader==null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unknown Shape Format: \"+ format);\n    }\n\n    argsParser = newSpatialArgsParser();\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n\n    if (ctx==null) { // subclass can set this directly\n      final String CTX_PARAM = \"spatialContextFactory\";\n      final String OLD_SPATIAL4J_PREFIX = \"com.spatial4j.core\";\n      final String NEW_SPATIAL4J_PREFIX = \"org.locationtech.spatial4j\";\n      for (Map.Entry<String, String> argEntry : args.entrySet()) {\n        // \"JTS\" is a convenience alias\n        if (argEntry.getKey().equals(CTX_PARAM) && argEntry.getValue().equals(\"JTS\")) {\n          argEntry.setValue(\"org.locationtech.spatial4j.context.jts.JtsSpatialContextFactory\");\n          continue;\n        }\n        // Warn about using old Spatial4j class names\n        if (argEntry.getValue().contains(OLD_SPATIAL4J_PREFIX)) {\n          log.warn(\"Replace '\" + OLD_SPATIAL4J_PREFIX + \"' with '\" + NEW_SPATIAL4J_PREFIX + \"' in your schema.\");\n          argEntry.setValue(argEntry.getValue().replace(OLD_SPATIAL4J_PREFIX, NEW_SPATIAL4J_PREFIX));\n        }\n      }\n\n      //Solr expects us to remove the parameters we've used.\n      MapListener<String, String> argsWrap = new MapListener<>(args);\n      ctx = SpatialContextFactory.makeSpatialContext(argsWrap, schema.getResourceLoader().getClassLoader());\n      args.keySet().removeAll(argsWrap.getSeenKeys());\n    }\n\n    final String distanceUnitsStr = args.remove(\"distanceUnits\");\n    if (distanceUnitsStr == null) {\n      this.distanceUnits = ctx.isGeo() ? DistanceUnits.KILOMETERS : DistanceUnits.DEGREES;\n    } else {\n      this.distanceUnits = parseDistanceUnits(distanceUnitsStr);\n      if (this.distanceUnits == null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Must specify distanceUnits as one of \"+ DistanceUnits.getSupportedUnits() +\n                \" on field types with class \"+getClass().getSimpleName());\n    }\n\n    final SupportedFormats fmts = ctx.getFormats();\n    String format = args.remove(FORMAT);\n    if (format == null) {\n      format = \"WKT\";\n    }\n    shapeWriter = fmts.getWriter(format);\n    shapeReader = fmts.getReader(format);\n    if(shapeWriter==null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unknown Shape Format: \"+ format);\n    }\n    if(shapeReader==null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unknown Shape Format: \"+ format);\n    }\n\n    argsParser = newSpatialArgsParser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n\n    if (ctx==null) { // subclass can set this directly\n      final String CTX_PARAM = \"spatialContextFactory\";\n      final String OLD_SPATIAL4J_PREFIX = \"com.spatial4j.core\";\n      final String NEW_SPATIAL4J_PREFIX = \"org.locationtech.spatial4j\";\n      for (Map.Entry<String, String> argEntry : args.entrySet()) {\n        // \"JTS\" is a convenience alias\n        if (argEntry.getKey().equals(CTX_PARAM) && argEntry.getValue().equals(\"JTS\")) {\n          argEntry.setValue(\"org.locationtech.spatial4j.context.jts.JtsSpatialContextFactory\");\n          continue;\n        }\n        if (argEntry.getKey().equals(CTX_PARAM) && argEntry.getValue().equals(\"Geo3D\")) {\n          argEntry.setValue(Geo3dSpatialContextFactory.class.getName());\n          continue;\n        }\n        // Warn about using old Spatial4j class names\n        if (argEntry.getValue().contains(OLD_SPATIAL4J_PREFIX)) {\n          log.warn(\"Replace '\" + OLD_SPATIAL4J_PREFIX + \"' with '\" + NEW_SPATIAL4J_PREFIX + \"' in your schema.\");\n          argEntry.setValue(argEntry.getValue().replace(OLD_SPATIAL4J_PREFIX, NEW_SPATIAL4J_PREFIX));\n        }\n      }\n\n      //Solr expects us to remove the parameters we've used.\n      MapListener<String, String> argsWrap = new MapListener<>(args);\n      ctx = SpatialContextFactory.makeSpatialContext(argsWrap, schema.getResourceLoader().getClassLoader());\n      args.keySet().removeAll(argsWrap.getSeenKeys());\n    }\n\n    final String distanceUnitsStr = args.remove(\"distanceUnits\");\n    if (distanceUnitsStr == null) {\n      this.distanceUnits = ctx.isGeo() ? DistanceUnits.KILOMETERS : DistanceUnits.DEGREES;\n    } else {\n      this.distanceUnits = parseDistanceUnits(distanceUnitsStr);\n      if (this.distanceUnits == null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Must specify distanceUnits as one of \"+ DistanceUnits.getSupportedUnits() +\n                \" on field types with class \"+getClass().getSimpleName());\n    }\n\n    final SupportedFormats fmts = ctx.getFormats();\n    String format = args.remove(FORMAT);\n    if (format == null) {\n      format = \"WKT\";\n    }\n    shapeWriter = fmts.getWriter(format);\n    shapeReader = fmts.getReader(format);\n    if(shapeWriter==null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unknown Shape Format: \"+ format);\n    }\n    if(shapeReader==null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unknown Shape Format: \"+ format);\n    }\n\n    argsParser = newSpatialArgsParser();\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n\n    if (ctx==null) { // subclass can set this directly\n      final String CTX_PARAM = \"spatialContextFactory\";\n      final String OLD_SPATIAL4J_PREFIX = \"com.spatial4j.core\";\n      final String NEW_SPATIAL4J_PREFIX = \"org.locationtech.spatial4j\";\n      for (Map.Entry<String, String> argEntry : args.entrySet()) {\n        // \"JTS\" is a convenience alias\n        if (argEntry.getKey().equals(CTX_PARAM) && argEntry.getValue().equals(\"JTS\")) {\n          argEntry.setValue(\"org.locationtech.spatial4j.context.jts.JtsSpatialContextFactory\");\n          continue;\n        }\n        // Warn about using old Spatial4j class names\n        if (argEntry.getValue().contains(OLD_SPATIAL4J_PREFIX)) {\n          log.warn(\"Replace '\" + OLD_SPATIAL4J_PREFIX + \"' with '\" + NEW_SPATIAL4J_PREFIX + \"' in your schema.\");\n          argEntry.setValue(argEntry.getValue().replace(OLD_SPATIAL4J_PREFIX, NEW_SPATIAL4J_PREFIX));\n        }\n      }\n\n      //Solr expects us to remove the parameters we've used.\n      MapListener<String, String> argsWrap = new MapListener<>(args);\n      ctx = SpatialContextFactory.makeSpatialContext(argsWrap, schema.getResourceLoader().getClassLoader());\n      args.keySet().removeAll(argsWrap.getSeenKeys());\n    }\n\n    final String distanceUnitsStr = args.remove(\"distanceUnits\");\n    if (distanceUnitsStr == null) {\n      this.distanceUnits = ctx.isGeo() ? DistanceUnits.KILOMETERS : DistanceUnits.DEGREES;\n    } else {\n      this.distanceUnits = parseDistanceUnits(distanceUnitsStr);\n      if (this.distanceUnits == null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Must specify distanceUnits as one of \"+ DistanceUnits.getSupportedUnits() +\n                \" on field types with class \"+getClass().getSimpleName());\n    }\n\n    final SupportedFormats fmts = ctx.getFormats();\n    String format = args.remove(FORMAT);\n    if (format == null) {\n      format = \"WKT\";\n    }\n    shapeWriter = fmts.getWriter(format);\n    shapeReader = fmts.getReader(format);\n    if(shapeWriter==null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unknown Shape Format: \"+ format);\n    }\n    if(shapeReader==null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unknown Shape Format: \"+ format);\n    }\n\n    argsParser = newSpatialArgsParser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9df8125ba9193a2e2e285ed92157810b1952a244","date":1587326330,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialFieldType#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n\n    if (ctx==null) { // subclass can set this directly\n      final String CTX_PARAM = \"spatialContextFactory\";\n      final String OLD_SPATIAL4J_PREFIX = \"com.spatial4j.core\";\n      final String NEW_SPATIAL4J_PREFIX = \"org.locationtech.spatial4j\";\n      for (Map.Entry<String, String> argEntry : args.entrySet()) {\n        // \"JTS\" is a convenience alias\n        if (argEntry.getKey().equals(CTX_PARAM) && argEntry.getValue().equals(\"JTS\")) {\n          argEntry.setValue(\"org.locationtech.spatial4j.context.jts.JtsSpatialContextFactory\");\n          continue;\n        }\n        if (argEntry.getKey().equals(CTX_PARAM) && argEntry.getValue().equals(\"Geo3D\")) {\n          argEntry.setValue(Geo3dSpatialContextFactory.class.getName());\n          continue;\n        }\n        // Warn about using old Spatial4j class names\n        if (argEntry.getValue().contains(OLD_SPATIAL4J_PREFIX)) {\n          log.warn(\"Replace '{}' with '{}' in your schema\", OLD_SPATIAL4J_PREFIX, NEW_SPATIAL4J_PREFIX);\n          argEntry.setValue(argEntry.getValue().replace(OLD_SPATIAL4J_PREFIX, NEW_SPATIAL4J_PREFIX));\n        }\n      }\n\n      //Solr expects us to remove the parameters we've used.\n      MapListener<String, String> argsWrap = new MapListener<>(args);\n      ctx = SpatialContextFactory.makeSpatialContext(argsWrap, schema.getResourceLoader().getClassLoader());\n      args.keySet().removeAll(argsWrap.getSeenKeys());\n    }\n\n    final String distanceUnitsStr = args.remove(\"distanceUnits\");\n    if (distanceUnitsStr == null) {\n      this.distanceUnits = ctx.isGeo() ? DistanceUnits.KILOMETERS : DistanceUnits.DEGREES;\n    } else {\n      this.distanceUnits = parseDistanceUnits(distanceUnitsStr);\n      if (this.distanceUnits == null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Must specify distanceUnits as one of \"+ DistanceUnits.getSupportedUnits() +\n                \" on field types with class \"+getClass().getSimpleName());\n    }\n\n    final SupportedFormats fmts = ctx.getFormats();\n    String format = args.remove(FORMAT);\n    if (format == null) {\n      format = \"WKT\";\n    }\n    shapeWriter = fmts.getWriter(format);\n    shapeReader = fmts.getReader(format);\n    if(shapeWriter==null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unknown Shape Format: \"+ format);\n    }\n    if(shapeReader==null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unknown Shape Format: \"+ format);\n    }\n\n    argsParser = newSpatialArgsParser();\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n\n    if (ctx==null) { // subclass can set this directly\n      final String CTX_PARAM = \"spatialContextFactory\";\n      final String OLD_SPATIAL4J_PREFIX = \"com.spatial4j.core\";\n      final String NEW_SPATIAL4J_PREFIX = \"org.locationtech.spatial4j\";\n      for (Map.Entry<String, String> argEntry : args.entrySet()) {\n        // \"JTS\" is a convenience alias\n        if (argEntry.getKey().equals(CTX_PARAM) && argEntry.getValue().equals(\"JTS\")) {\n          argEntry.setValue(\"org.locationtech.spatial4j.context.jts.JtsSpatialContextFactory\");\n          continue;\n        }\n        if (argEntry.getKey().equals(CTX_PARAM) && argEntry.getValue().equals(\"Geo3D\")) {\n          argEntry.setValue(Geo3dSpatialContextFactory.class.getName());\n          continue;\n        }\n        // Warn about using old Spatial4j class names\n        if (argEntry.getValue().contains(OLD_SPATIAL4J_PREFIX)) {\n          log.warn(\"Replace '\" + OLD_SPATIAL4J_PREFIX + \"' with '\" + NEW_SPATIAL4J_PREFIX + \"' in your schema.\");\n          argEntry.setValue(argEntry.getValue().replace(OLD_SPATIAL4J_PREFIX, NEW_SPATIAL4J_PREFIX));\n        }\n      }\n\n      //Solr expects us to remove the parameters we've used.\n      MapListener<String, String> argsWrap = new MapListener<>(args);\n      ctx = SpatialContextFactory.makeSpatialContext(argsWrap, schema.getResourceLoader().getClassLoader());\n      args.keySet().removeAll(argsWrap.getSeenKeys());\n    }\n\n    final String distanceUnitsStr = args.remove(\"distanceUnits\");\n    if (distanceUnitsStr == null) {\n      this.distanceUnits = ctx.isGeo() ? DistanceUnits.KILOMETERS : DistanceUnits.DEGREES;\n    } else {\n      this.distanceUnits = parseDistanceUnits(distanceUnitsStr);\n      if (this.distanceUnits == null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Must specify distanceUnits as one of \"+ DistanceUnits.getSupportedUnits() +\n                \" on field types with class \"+getClass().getSimpleName());\n    }\n\n    final SupportedFormats fmts = ctx.getFormats();\n    String format = args.remove(FORMAT);\n    if (format == null) {\n      format = \"WKT\";\n    }\n    shapeWriter = fmts.getWriter(format);\n    shapeReader = fmts.getReader(format);\n    if(shapeWriter==null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unknown Shape Format: \"+ format);\n    }\n    if(shapeReader==null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unknown Shape Format: \"+ format);\n    }\n\n    argsParser = newSpatialArgsParser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["8815d348f75265cc9aab8ba0aa17459498051a17"],"8815d348f75265cc9aab8ba0aa17459498051a17":["6bc65e9e84ac8f81b0861d2c7d8f56715adbf003"],"702a5f2b4d6daa1c6d7eaff268eba61ce7a8713f":["23aec8f6a0b5a11d050d784a13871261bef7c925"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["03d8df7e95735d8cda6a255c42e0997c699bb176","702a5f2b4d6daa1c6d7eaff268eba61ce7a8713f"],"255b1d03d3daae9aaaade60819388695622237d8":["702a5f2b4d6daa1c6d7eaff268eba61ce7a8713f"],"b8557552f7ab8e381c4d1a941a269e14f11e779d":["702a5f2b4d6daa1c6d7eaff268eba61ce7a8713f","255b1d03d3daae9aaaade60819388695622237d8"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["702a5f2b4d6daa1c6d7eaff268eba61ce7a8713f","b8557552f7ab8e381c4d1a941a269e14f11e779d"],"4690b3e9adf3856cb5ddbee969dfa6d59a1642fb":["c11e1d33f2ba742976268153f6edd2d29710cf69"],"c11e1d33f2ba742976268153f6edd2d29710cf69":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003":["4690b3e9adf3856cb5ddbee969dfa6d59a1642fb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3f260d23bcb7f3e927d0421bfdbd13479472668f":["862fe0ddb727c373fe11596c809321056ffbc018"],"03d8df7e95735d8cda6a255c42e0997c699bb176":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"23aec8f6a0b5a11d050d784a13871261bef7c925":["03d8df7e95735d8cda6a255c42e0997c699bb176"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["3f260d23bcb7f3e927d0421bfdbd13479472668f","733eaf468f18297b1bcc51031353bdfdd1913bdf"],"862fe0ddb727c373fe11596c809321056ffbc018":["167133992e7b384ce97f83ddb1dd2ddd09daf7aa"],"167133992e7b384ce97f83ddb1dd2ddd09daf7aa":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"733eaf468f18297b1bcc51031353bdfdd1913bdf":["3f260d23bcb7f3e927d0421bfdbd13479472668f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9df8125ba9193a2e2e285ed92157810b1952a244"],"9df8125ba9193a2e2e285ed92157810b1952a244":["b8557552f7ab8e381c4d1a941a269e14f11e779d"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["167133992e7b384ce97f83ddb1dd2ddd09daf7aa"],"8815d348f75265cc9aab8ba0aa17459498051a17":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"702a5f2b4d6daa1c6d7eaff268eba61ce7a8713f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","255b1d03d3daae9aaaade60819388695622237d8","b8557552f7ab8e381c4d1a941a269e14f11e779d","6240b74b884c5587f2a4062dd27d6c32bf228889"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"255b1d03d3daae9aaaade60819388695622237d8":["b8557552f7ab8e381c4d1a941a269e14f11e779d"],"b8557552f7ab8e381c4d1a941a269e14f11e779d":["6240b74b884c5587f2a4062dd27d6c32bf228889","9df8125ba9193a2e2e285ed92157810b1952a244"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"4690b3e9adf3856cb5ddbee969dfa6d59a1642fb":["6bc65e9e84ac8f81b0861d2c7d8f56715adbf003"],"c11e1d33f2ba742976268153f6edd2d29710cf69":["4690b3e9adf3856cb5ddbee969dfa6d59a1642fb"],"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003":["8815d348f75265cc9aab8ba0aa17459498051a17"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c11e1d33f2ba742976268153f6edd2d29710cf69"],"3f260d23bcb7f3e927d0421bfdbd13479472668f":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","733eaf468f18297b1bcc51031353bdfdd1913bdf"],"03d8df7e95735d8cda6a255c42e0997c699bb176":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","23aec8f6a0b5a11d050d784a13871261bef7c925"],"23aec8f6a0b5a11d050d784a13871261bef7c925":["702a5f2b4d6daa1c6d7eaff268eba61ce7a8713f"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["03d8df7e95735d8cda6a255c42e0997c699bb176"],"862fe0ddb727c373fe11596c809321056ffbc018":["3f260d23bcb7f3e927d0421bfdbd13479472668f"],"733eaf468f18297b1bcc51031353bdfdd1913bdf":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"167133992e7b384ce97f83ddb1dd2ddd09daf7aa":["862fe0ddb727c373fe11596c809321056ffbc018"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9df8125ba9193a2e2e285ed92157810b1952a244":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}