{"path":"lucene/core/src/java/org/apache/lucene/analysis/Analyzer#getPositionIncrementGap(String).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/Analyzer#getPositionIncrementGap(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/analysis/Analyzer#getPositionIncrementGap(String).mjava","sourceNew":"  /**\n   * Invoked before indexing a IndexableField instance if\n   * terms have already been added to that field.  This allows custom\n   * analyzers to place an automatic position increment gap between\n   * IndexbleField instances using the same field name.  The default value\n   * position increment gap is 0.  With a 0 position increment gap and\n   * the typical default token position increment of 1, all terms in a field,\n   * including across IndexableField instances, are in successive positions, allowing\n   * exact PhraseQuery matches, for instance, across IndexableField instance boundaries.\n   *\n   * @param fieldName IndexableField name being indexed.\n   * @return position increment gap, added to the next token emitted from {@link #tokenStream(String,Reader)}\n   */\n  public int getPositionIncrementGap(String fieldName) {\n    return 0;\n  }\n\n","sourceOld":"  /**\n   * Invoked before indexing a IndexableField instance if\n   * terms have already been added to that field.  This allows custom\n   * analyzers to place an automatic position increment gap between\n   * IndexbleField instances using the same field name.  The default value\n   * position increment gap is 0.  With a 0 position increment gap and\n   * the typical default token position increment of 1, all terms in a field,\n   * including across IndexableField instances, are in successive positions, allowing\n   * exact PhraseQuery matches, for instance, across IndexableField instance boundaries.\n   *\n   * @param fieldName IndexableField name being indexed.\n   * @return position increment gap, added to the next token emitted from {@link #tokenStream(String,Reader)}\n   */\n  public int getPositionIncrementGap(String fieldName) {\n    return 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27f7a67b528a360bdc01ea05af57e6459fe42ac0","date":1346299172,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/Analyzer#getPositionIncrementGap(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/Analyzer#getPositionIncrementGap(String).mjava","sourceNew":"  /**\n   * Invoked before indexing a IndexableField instance if\n   * terms have already been added to that field.  This allows custom\n   * analyzers to place an automatic position increment gap between\n   * IndexbleField instances using the same field name.  The default value\n   * position increment gap is 0.  With a 0 position increment gap and\n   * the typical default token position increment of 1, all terms in a field,\n   * including across IndexableField instances, are in successive positions, allowing\n   * exact PhraseQuery matches, for instance, across IndexableField instance boundaries.\n   *\n   * @param fieldName IndexableField name being indexed.\n   * @return position increment gap, added to the next token emitted from {@link #tokenStream(String,Reader)}.\n   *         This value must be {@code >= 0}.\n   */\n  public int getPositionIncrementGap(String fieldName) {\n    return 0;\n  }\n\n","sourceOld":"  /**\n   * Invoked before indexing a IndexableField instance if\n   * terms have already been added to that field.  This allows custom\n   * analyzers to place an automatic position increment gap between\n   * IndexbleField instances using the same field name.  The default value\n   * position increment gap is 0.  With a 0 position increment gap and\n   * the typical default token position increment of 1, all terms in a field,\n   * including across IndexableField instances, are in successive positions, allowing\n   * exact PhraseQuery matches, for instance, across IndexableField instance boundaries.\n   *\n   * @param fieldName IndexableField name being indexed.\n   * @return position increment gap, added to the next token emitted from {@link #tokenStream(String,Reader)}\n   */\n  public int getPositionIncrementGap(String fieldName) {\n    return 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/Analyzer#getPositionIncrementGap(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/analysis/Analyzer#getPositionIncrementGap(String).mjava","sourceNew":"  /**\n   * Invoked before indexing a IndexableField instance if\n   * terms have already been added to that field.  This allows custom\n   * analyzers to place an automatic position increment gap between\n   * IndexbleField instances using the same field name.  The default value\n   * position increment gap is 0.  With a 0 position increment gap and\n   * the typical default token position increment of 1, all terms in a field,\n   * including across IndexableField instances, are in successive positions, allowing\n   * exact PhraseQuery matches, for instance, across IndexableField instance boundaries.\n   *\n   * @param fieldName IndexableField name being indexed.\n   * @return position increment gap, added to the next token emitted from {@link #tokenStream(String,Reader)}.\n   *         This value must be {@code >= 0}.\n   */\n  public int getPositionIncrementGap(String fieldName) {\n    return 0;\n  }\n\n","sourceOld":"  /**\n   * Invoked before indexing a IndexableField instance if\n   * terms have already been added to that field.  This allows custom\n   * analyzers to place an automatic position increment gap between\n   * IndexbleField instances using the same field name.  The default value\n   * position increment gap is 0.  With a 0 position increment gap and\n   * the typical default token position increment of 1, all terms in a field,\n   * including across IndexableField instances, are in successive positions, allowing\n   * exact PhraseQuery matches, for instance, across IndexableField instance boundaries.\n   *\n   * @param fieldName IndexableField name being indexed.\n   * @return position increment gap, added to the next token emitted from {@link #tokenStream(String,Reader)}\n   */\n  public int getPositionIncrementGap(String fieldName) {\n    return 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"27f7a67b528a360bdc01ea05af57e6459fe42ac0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05a14b2611ead08655a2b2bdc61632eb31316e57":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","27f7a67b528a360bdc01ea05af57e6459fe42ac0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["27f7a67b528a360bdc01ea05af57e6459fe42ac0"]},"commit2Childs":{"27f7a67b528a360bdc01ea05af57e6459fe42ac0":["05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["27f7a67b528a360bdc01ea05af57e6459fe42ac0","05a14b2611ead08655a2b2bdc61632eb31316e57"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}