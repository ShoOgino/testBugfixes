{"path":"solr/test-framework/src/java/org/apache/solr/CollectionTester[JSONTestUtil]#match().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/CollectionTester[JSONTestUtil]#match().mjava","pathOld":"solr/src/test-framework/org/apache/solr/CollectionTester[JSONTestUtil]#match().mjava","sourceNew":"  boolean match() {\n    if (expected == val) {\n      return true;\n    }\n    if (expected == null || val == null) {\n      setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n      return false;\n    }\n    if (expected instanceof List) {\n      return matchList();\n    }\n    if (expected instanceof Map) {\n      return matchMap();\n    }\n\n    // generic fallback\n    if (!expected.equals(val)) {\n\n      // make an exception for some numerics\n      if ((expected instanceof Integer && val instanceof Long || expected instanceof Long && val instanceof Integer)\n          && ((Number)expected).longValue() == ((Number)val).longValue())\n      {\n        return true;\n      } else if ((expected instanceof Float && val instanceof Double || expected instanceof Double && val instanceof Float)) {\n        double a = ((Number)expected).doubleValue();\n        double b = ((Number)val).doubleValue();\n        if (Double.compare(a,b) == 0) return true;\n        if (Math.abs(a-b) < delta) return true;\n        return false;\n      } else {\n        setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n        return false;\n      }\n    }\n\n    // setErr(\"unknown expected type \" + expected.getClass().getName());\n    return true;\n  }\n\n","sourceOld":"  boolean match() {\n    if (expected == val) {\n      return true;\n    }\n    if (expected == null || val == null) {\n      setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n      return false;\n    }\n    if (expected instanceof List) {\n      return matchList();\n    }\n    if (expected instanceof Map) {\n      return matchMap();\n    }\n\n    // generic fallback\n    if (!expected.equals(val)) {\n\n      // make an exception for some numerics\n      if ((expected instanceof Integer && val instanceof Long || expected instanceof Long && val instanceof Integer)\n          && ((Number)expected).longValue() == ((Number)val).longValue())\n      {\n        return true;\n      } else if ((expected instanceof Float && val instanceof Double || expected instanceof Double && val instanceof Float)) {\n        double a = ((Number)expected).doubleValue();\n        double b = ((Number)val).doubleValue();\n        if (Double.compare(a,b) == 0) return true;\n        if (Math.abs(a-b) < delta) return true;\n        return false;\n      } else {\n        setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n        return false;\n      }\n    }\n\n    // setErr(\"unknown expected type \" + expected.getClass().getName());\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/CollectionTester[JSONTestUtil]#match().mjava","pathOld":"solr/src/test-framework/org/apache/solr/CollectionTester[JSONTestUtil]#match().mjava","sourceNew":"  boolean match() {\n    if (expected == val) {\n      return true;\n    }\n    if (expected == null || val == null) {\n      setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n      return false;\n    }\n    if (expected instanceof List) {\n      return matchList();\n    }\n    if (expected instanceof Map) {\n      return matchMap();\n    }\n\n    // generic fallback\n    if (!expected.equals(val)) {\n\n      // make an exception for some numerics\n      if ((expected instanceof Integer && val instanceof Long || expected instanceof Long && val instanceof Integer)\n          && ((Number)expected).longValue() == ((Number)val).longValue())\n      {\n        return true;\n      } else if ((expected instanceof Float && val instanceof Double || expected instanceof Double && val instanceof Float)) {\n        double a = ((Number)expected).doubleValue();\n        double b = ((Number)val).doubleValue();\n        if (Double.compare(a,b) == 0) return true;\n        if (Math.abs(a-b) < delta) return true;\n        return false;\n      } else {\n        setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n        return false;\n      }\n    }\n\n    // setErr(\"unknown expected type \" + expected.getClass().getName());\n    return true;\n  }\n\n","sourceOld":"  boolean match() {\n    if (expected == val) {\n      return true;\n    }\n    if (expected == null || val == null) {\n      setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n      return false;\n    }\n    if (expected instanceof List) {\n      return matchList();\n    }\n    if (expected instanceof Map) {\n      return matchMap();\n    }\n\n    // generic fallback\n    if (!expected.equals(val)) {\n\n      // make an exception for some numerics\n      if ((expected instanceof Integer && val instanceof Long || expected instanceof Long && val instanceof Integer)\n          && ((Number)expected).longValue() == ((Number)val).longValue())\n      {\n        return true;\n      } else if ((expected instanceof Float && val instanceof Double || expected instanceof Double && val instanceof Float)) {\n        double a = ((Number)expected).doubleValue();\n        double b = ((Number)val).doubleValue();\n        if (Double.compare(a,b) == 0) return true;\n        if (Math.abs(a-b) < delta) return true;\n        return false;\n      } else {\n        setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n        return false;\n      }\n    }\n\n    // setErr(\"unknown expected type \" + expected.getClass().getName());\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/CollectionTester[JSONTestUtil]#match().mjava","pathOld":"solr/src/test-framework/org/apache/solr/CollectionTester[JSONTestUtil]#match().mjava","sourceNew":"  boolean match() {\n    if (expected == val) {\n      return true;\n    }\n    if (expected == null || val == null) {\n      setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n      return false;\n    }\n    if (expected instanceof List) {\n      return matchList();\n    }\n    if (expected instanceof Map) {\n      return matchMap();\n    }\n\n    // generic fallback\n    if (!expected.equals(val)) {\n\n      // make an exception for some numerics\n      if ((expected instanceof Integer && val instanceof Long || expected instanceof Long && val instanceof Integer)\n          && ((Number)expected).longValue() == ((Number)val).longValue())\n      {\n        return true;\n      } else if ((expected instanceof Float && val instanceof Double || expected instanceof Double && val instanceof Float)) {\n        double a = ((Number)expected).doubleValue();\n        double b = ((Number)val).doubleValue();\n        if (Double.compare(a,b) == 0) return true;\n        if (Math.abs(a-b) < delta) return true;\n        return false;\n      } else {\n        setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n        return false;\n      }\n    }\n\n    // setErr(\"unknown expected type \" + expected.getClass().getName());\n    return true;\n  }\n\n","sourceOld":"  boolean match() {\n    if (expected == val) {\n      return true;\n    }\n    if (expected == null || val == null) {\n      setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n      return false;\n    }\n    if (expected instanceof List) {\n      return matchList();\n    }\n    if (expected instanceof Map) {\n      return matchMap();\n    }\n\n    // generic fallback\n    if (!expected.equals(val)) {\n\n      // make an exception for some numerics\n      if ((expected instanceof Integer && val instanceof Long || expected instanceof Long && val instanceof Integer)\n          && ((Number)expected).longValue() == ((Number)val).longValue())\n      {\n        return true;\n      } else if ((expected instanceof Float && val instanceof Double || expected instanceof Double && val instanceof Float)) {\n        double a = ((Number)expected).doubleValue();\n        double b = ((Number)val).doubleValue();\n        if (Double.compare(a,b) == 0) return true;\n        if (Math.abs(a-b) < delta) return true;\n        return false;\n      } else {\n        setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n        return false;\n      }\n    }\n\n    // setErr(\"unknown expected type \" + expected.getClass().getName());\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b572b024e0b33a1176216afd84f90a925baf838","date":1326227649,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/CollectionTester[JSONTestUtil]#match().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/CollectionTester[JSONTestUtil]#match().mjava","sourceNew":"  boolean match() {\n    if (expected == val) {\n      return true;\n    }\n    if (expected == null || val == null) {\n      setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n      return false;\n    }\n    if (expected instanceof List) {\n      return matchList();\n    }\n    if (expected instanceof Map) {\n      return matchMap();\n    }\n\n    // generic fallback\n    if (!expected.equals(val)) {\n\n      // make an exception for some numerics\n      if ((expected instanceof Integer && val instanceof Long || expected instanceof Long && val instanceof Integer)\n          && ((Number)expected).longValue() == ((Number)val).longValue()) {\n        return true;\n      } else if ((expected instanceof Double || expected instanceof Float) && (val instanceof Double || val instanceof Float)) {\n        double a = ((Number)expected).doubleValue();\n        double b = ((Number)val).doubleValue();\n        if (Double.compare(a,b) == 0) return true;\n        if (Math.abs(a-b) < delta) return true;\n      }\n      setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n      return false;\n    }\n\n    // setErr(\"unknown expected type \" + expected.getClass().getName());\n    return true;\n  }\n\n","sourceOld":"  boolean match() {\n    if (expected == val) {\n      return true;\n    }\n    if (expected == null || val == null) {\n      setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n      return false;\n    }\n    if (expected instanceof List) {\n      return matchList();\n    }\n    if (expected instanceof Map) {\n      return matchMap();\n    }\n\n    // generic fallback\n    if (!expected.equals(val)) {\n\n      // make an exception for some numerics\n      if ((expected instanceof Integer && val instanceof Long || expected instanceof Long && val instanceof Integer)\n          && ((Number)expected).longValue() == ((Number)val).longValue())\n      {\n        return true;\n      } else if ((expected instanceof Float && val instanceof Double || expected instanceof Double && val instanceof Float)) {\n        double a = ((Number)expected).doubleValue();\n        double b = ((Number)val).doubleValue();\n        if (Double.compare(a,b) == 0) return true;\n        if (Math.abs(a-b) < delta) return true;\n        return false;\n      } else {\n        setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n        return false;\n      }\n    }\n\n    // setErr(\"unknown expected type \" + expected.getClass().getName());\n    return true;\n  }\n\n","bugFix":["5d72b2a4aa20f4009c42af30cf7ccfbe89835209","0bdcfb7ac18ce2bf2cfad84f4509ef2950e695a2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"211fc793412184c2b355c9a14646261ac33ec7cc","date":1373484896,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/CollectionTester[JSONTestUtil]#match().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/CollectionTester[JSONTestUtil]#match().mjava","sourceNew":"  boolean match() {\n    if (expected == val) {\n      return true;\n    }\n    if (expected == null || val == null) {\n      setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n      return false;\n    }\n    if (expected instanceof List) {\n      return matchList();\n    }\n    if (expected instanceof Map) {\n      return matchMap();\n    }\n\n    // generic fallback\n    if (!expected.equals(val)) {\n\n      if (expected instanceof String) {\n        String str = (String)expected;\n        if (str.length() > 6 && str.startsWith(\"///\") && str.endsWith(\"///\")) {\n          return handleSpecialString(str);\n        }\n      }\n\n      // make an exception for some numerics\n      if ((expected instanceof Integer && val instanceof Long || expected instanceof Long && val instanceof Integer)\n          && ((Number)expected).longValue() == ((Number)val).longValue()) {\n        return true;\n      } else if ((expected instanceof Double || expected instanceof Float) && (val instanceof Double || val instanceof Float)) {\n        double a = ((Number)expected).doubleValue();\n        double b = ((Number)val).doubleValue();\n        if (Double.compare(a,b) == 0) return true;\n        if (Math.abs(a-b) < delta) return true;\n      }\n      setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n      return false;\n    }\n\n    // setErr(\"unknown expected type \" + expected.getClass().getName());\n    return true;\n  }\n\n","sourceOld":"  boolean match() {\n    if (expected == val) {\n      return true;\n    }\n    if (expected == null || val == null) {\n      setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n      return false;\n    }\n    if (expected instanceof List) {\n      return matchList();\n    }\n    if (expected instanceof Map) {\n      return matchMap();\n    }\n\n    // generic fallback\n    if (!expected.equals(val)) {\n\n      // make an exception for some numerics\n      if ((expected instanceof Integer && val instanceof Long || expected instanceof Long && val instanceof Integer)\n          && ((Number)expected).longValue() == ((Number)val).longValue()) {\n        return true;\n      } else if ((expected instanceof Double || expected instanceof Float) && (val instanceof Double || val instanceof Float)) {\n        double a = ((Number)expected).doubleValue();\n        double b = ((Number)val).doubleValue();\n        if (Double.compare(a,b) == 0) return true;\n        if (Math.abs(a-b) < delta) return true;\n      }\n      setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n      return false;\n    }\n\n    // setErr(\"unknown expected type \" + expected.getClass().getName());\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/CollectionTester[JSONTestUtil]#match().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/CollectionTester[JSONTestUtil]#match().mjava","sourceNew":"  boolean match() {\n    if (expected == val) {\n      return true;\n    }\n    if (expected == null || val == null) {\n      setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n      return false;\n    }\n    if (expected instanceof List) {\n      return matchList();\n    }\n    if (expected instanceof Map) {\n      return matchMap();\n    }\n\n    // generic fallback\n    if (!expected.equals(val)) {\n\n      if (expected instanceof String) {\n        String str = (String)expected;\n        if (str.length() > 6 && str.startsWith(\"///\") && str.endsWith(\"///\")) {\n          return handleSpecialString(str);\n        }\n      }\n\n      // make an exception for some numerics\n      if ((expected instanceof Integer && val instanceof Long || expected instanceof Long && val instanceof Integer)\n          && ((Number)expected).longValue() == ((Number)val).longValue()) {\n        return true;\n      } else if ((expected instanceof Double || expected instanceof Float) && (val instanceof Double || val instanceof Float)) {\n        double a = ((Number)expected).doubleValue();\n        double b = ((Number)val).doubleValue();\n        if (Double.compare(a,b) == 0) return true;\n        if (Math.abs(a-b) < delta) return true;\n      }\n      setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n      return false;\n    }\n\n    // setErr(\"unknown expected type \" + expected.getClass().getName());\n    return true;\n  }\n\n","sourceOld":"  boolean match() {\n    if (expected == val) {\n      return true;\n    }\n    if (expected == null || val == null) {\n      setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n      return false;\n    }\n    if (expected instanceof List) {\n      return matchList();\n    }\n    if (expected instanceof Map) {\n      return matchMap();\n    }\n\n    // generic fallback\n    if (!expected.equals(val)) {\n\n      // make an exception for some numerics\n      if ((expected instanceof Integer && val instanceof Long || expected instanceof Long && val instanceof Integer)\n          && ((Number)expected).longValue() == ((Number)val).longValue()) {\n        return true;\n      } else if ((expected instanceof Double || expected instanceof Float) && (val instanceof Double || val instanceof Float)) {\n        double a = ((Number)expected).doubleValue();\n        double b = ((Number)val).doubleValue();\n        if (Double.compare(a,b) == 0) return true;\n        if (Math.abs(a-b) < delta) return true;\n      }\n      setErr(\"mismatch: '\" + expected + \"'!='\" + val + \"'\");\n      return false;\n    }\n\n    // setErr(\"unknown expected type \" + expected.getClass().getName());\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":["8b572b024e0b33a1176216afd84f90a925baf838","211fc793412184c2b355c9a14646261ac33ec7cc"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"211fc793412184c2b355c9a14646261ac33ec7cc":["8b572b024e0b33a1176216afd84f90a925baf838"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["211fc793412184c2b355c9a14646261ac33ec7cc"],"8b572b024e0b33a1176216afd84f90a925baf838":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["8b572b024e0b33a1176216afd84f90a925baf838"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"211fc793412184c2b355c9a14646261ac33ec7cc":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8b572b024e0b33a1176216afd84f90a925baf838":["37a0f60745e53927c4c876cfe5b5a58170f0646c","211fc793412184c2b355c9a14646261ac33ec7cc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}