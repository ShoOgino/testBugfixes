{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#evalJSONFilterQueryStruct(FacetContext,List[Object]).mjava","commits":[{"id":"2c705a0d590cf911e7c942df49563ca2ea176e22","date":1526916174,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#evalJSONFilterQueryStruct(FacetContext,List[Object]).mjava","pathOld":"/dev/null","sourceNew":"  private static List<Query> evalJSONFilterQueryStruct(FacetContext fcontext, List<Object> filters) throws IOException {\n    List<Query> qlist = new ArrayList<>(filters.size());\n    // TODO: prevent parsing filters each time!\n    for (Object rawFilter : filters) {\n      if (rawFilter instanceof String) {\n        QParser parser = null;\n        try {\n          parser = QParser.getParser((String)rawFilter, fcontext.req);\n          parser.setIsFilter(true);\n          Query symbolicFilter = parser.getQuery();\n          qlist.add(symbolicFilter);\n        } catch (SyntaxError syntaxError) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, syntaxError);\n        }\n      } else if (rawFilter instanceof Map) {\n\n        Map<String,Object> m = (Map<String, Object>) rawFilter;\n        String type;\n        Object args;\n\n        if (m.size() == 1) {\n          Map.Entry<String, Object> entry = m.entrySet().iterator().next();\n          type = entry.getKey();\n          args = entry.getValue();\n        } else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can't convert map to query:\" + rawFilter);\n        }\n\n        if (!\"param\".equals(type)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown type. Can't convert map to query:\" + rawFilter);\n        }\n\n        String tag;\n        if (!(args instanceof String)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can't retrieve non-string param:\" + args);\n        }\n        tag = (String)args;\n\n        String[] qstrings = fcontext.req.getParams().getParams(tag);\n\n        if (qstrings != null) {\n          for (String qstring : qstrings) {\n            QParser parser = null;\n            try {\n              parser = QParser.getParser((String) qstring, fcontext.req);\n              parser.setIsFilter(true);\n              Query symbolicFilter = parser.getQuery();\n              qlist.add(symbolicFilter);\n            } catch (SyntaxError syntaxError) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, syntaxError);\n            }\n          }\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Bad query (expected a string):\" + rawFilter);\n      }\n\n    }\n    return qlist;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1918d03541b875664e27eae44b6b157da044f0b8","date":1549745850,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#evalJSONFilterQueryStruct(FacetContext,List[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#evalJSONFilterQueryStruct(FacetContext,List[Object]).mjava","sourceNew":"  private static List<Query> evalJSONFilterQueryStruct(FacetContext fcontext, List<Object> filters) throws IOException {\n    List<Query> qlist = new ArrayList<>(filters.size());\n    // TODO: prevent parsing filters each time!\n    for (Object rawFilter : filters) {\n      if (rawFilter instanceof String) {\n        qlist.add(parserFilter((String) rawFilter, fcontext.req));\n      } else if (rawFilter instanceof Map) {\n\n        Map<String,Object> m = (Map<String, Object>) rawFilter;\n        String type;\n        Object args;\n\n        if (m.size() == 1) {\n          Map.Entry<String, Object> entry = m.entrySet().iterator().next();\n          type = entry.getKey();\n          args = entry.getValue();\n        } else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can't convert map to query:\" + rawFilter);\n        }\n\n        if (!\"param\".equals(type)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown type. Can't convert map to query:\" + rawFilter);\n        }\n\n        String tag;\n        if (!(args instanceof String)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can't retrieve non-string param:\" + args);\n        }\n        tag = (String)args;\n\n        String[] qstrings = fcontext.req.getParams().getParams(tag);\n\n        // idea is to support multivalued parameter ie, 0 or more values\n        // so, when value not specified, it is ignored rather than throwing exception\n        if (qstrings != null) {\n          for (String qstring : qstrings) {\n            qlist.add(parserFilter(qstring, fcontext.req));\n          }\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Bad query (expected a string):\" + rawFilter);\n      }\n\n    }\n    return qlist;\n  }\n\n","sourceOld":"  private static List<Query> evalJSONFilterQueryStruct(FacetContext fcontext, List<Object> filters) throws IOException {\n    List<Query> qlist = new ArrayList<>(filters.size());\n    // TODO: prevent parsing filters each time!\n    for (Object rawFilter : filters) {\n      if (rawFilter instanceof String) {\n        QParser parser = null;\n        try {\n          parser = QParser.getParser((String)rawFilter, fcontext.req);\n          parser.setIsFilter(true);\n          Query symbolicFilter = parser.getQuery();\n          qlist.add(symbolicFilter);\n        } catch (SyntaxError syntaxError) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, syntaxError);\n        }\n      } else if (rawFilter instanceof Map) {\n\n        Map<String,Object> m = (Map<String, Object>) rawFilter;\n        String type;\n        Object args;\n\n        if (m.size() == 1) {\n          Map.Entry<String, Object> entry = m.entrySet().iterator().next();\n          type = entry.getKey();\n          args = entry.getValue();\n        } else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can't convert map to query:\" + rawFilter);\n        }\n\n        if (!\"param\".equals(type)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown type. Can't convert map to query:\" + rawFilter);\n        }\n\n        String tag;\n        if (!(args instanceof String)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can't retrieve non-string param:\" + args);\n        }\n        tag = (String)args;\n\n        String[] qstrings = fcontext.req.getParams().getParams(tag);\n\n        if (qstrings != null) {\n          for (String qstring : qstrings) {\n            QParser parser = null;\n            try {\n              parser = QParser.getParser((String) qstring, fcontext.req);\n              parser.setIsFilter(true);\n              Query symbolicFilter = parser.getQuery();\n              qlist.add(symbolicFilter);\n            } catch (SyntaxError syntaxError) {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, syntaxError);\n            }\n          }\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Bad query (expected a string):\" + rawFilter);\n      }\n\n    }\n    return qlist;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"248f6ecc900c3a5633fd5ca6f564ea8b717720da","date":1588863846,"type":4,"author":"Mike Drob","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#evalJSONFilterQueryStruct(FacetContext,List[Object]).mjava","sourceNew":null,"sourceOld":"  private static List<Query> evalJSONFilterQueryStruct(FacetContext fcontext, List<Object> filters) throws IOException {\n    List<Query> qlist = new ArrayList<>(filters.size());\n    // TODO: prevent parsing filters each time!\n    for (Object rawFilter : filters) {\n      if (rawFilter instanceof String) {\n        qlist.add(parserFilter((String) rawFilter, fcontext.req));\n      } else if (rawFilter instanceof Map) {\n\n        Map<String,Object> m = (Map<String, Object>) rawFilter;\n        String type;\n        Object args;\n\n        if (m.size() == 1) {\n          Map.Entry<String, Object> entry = m.entrySet().iterator().next();\n          type = entry.getKey();\n          args = entry.getValue();\n        } else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can't convert map to query:\" + rawFilter);\n        }\n\n        if (!\"param\".equals(type)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown type. Can't convert map to query:\" + rawFilter);\n        }\n\n        String tag;\n        if (!(args instanceof String)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can't retrieve non-string param:\" + args);\n        }\n        tag = (String)args;\n\n        String[] qstrings = fcontext.req.getParams().getParams(tag);\n\n        // idea is to support multivalued parameter ie, 0 or more values\n        // so, when value not specified, it is ignored rather than throwing exception\n        if (qstrings != null) {\n          for (String qstring : qstrings) {\n            qlist.add(parserFilter(qstring, fcontext.req));\n          }\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Bad query (expected a string):\" + rawFilter);\n      }\n\n    }\n    return qlist;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56a9893014b284af4d1af451e6c02e7ffdf5b6e","date":1590065972,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#evalJSONFilterQueryStruct(FacetContext,List[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#evalJSONFilterQueryStruct(FacetRequest.FacetContext,List[Object]).mjava","sourceNew":"  private static List<Query> evalJSONFilterQueryStruct(FacetContext fcontext, List<Object> filters) throws IOException {\n    List<Query> qlist = new ArrayList<>(filters.size());\n    // TODO: prevent parsing filters each time!\n    for (Object rawFilter : filters) {\n      if (rawFilter instanceof String) {\n        qlist.add(parserFilter((String) rawFilter, fcontext.req));\n      } else if (rawFilter instanceof Map) {\n\n        @SuppressWarnings({\"unchecked\"})\n        Map<String,Object> m = (Map<String, Object>) rawFilter;\n        String type;\n        Object args;\n\n        if (m.size() == 1) {\n          Map.Entry<String, Object> entry = m.entrySet().iterator().next();\n          type = entry.getKey();\n          args = entry.getValue();\n        } else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can't convert map to query:\" + rawFilter);\n        }\n\n        if (!\"param\".equals(type)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown type. Can't convert map to query:\" + rawFilter);\n        }\n\n        String tag;\n        if (!(args instanceof String)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can't retrieve non-string param:\" + args);\n        }\n        tag = (String)args;\n\n        String[] qstrings = fcontext.req.getParams().getParams(tag);\n\n        // idea is to support multivalued parameter ie, 0 or more values\n        // so, when value not specified, it is ignored rather than throwing exception\n        if (qstrings != null) {\n          for (String qstring : qstrings) {\n            qlist.add(parserFilter(qstring, fcontext.req));\n          }\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Bad query (expected a string):\" + rawFilter);\n      }\n\n    }\n    return qlist;\n  }\n\n","sourceOld":"  private static List<Query> evalJSONFilterQueryStruct(FacetRequest.FacetContext fcontext, List<Object> filters) throws IOException {\n    List<Query> qlist = new ArrayList<>(filters.size());\n    // TODO: prevent parsing filters each time!\n    for (Object rawFilter : filters) {\n      if (rawFilter instanceof String) {\n        qlist.add(parserFilter((String) rawFilter, fcontext.req));\n      } else if (rawFilter instanceof Map) {\n\n        Map<String,Object> m = (Map<String, Object>) rawFilter;\n        String type;\n        Object args;\n\n        if (m.size() == 1) {\n          Map.Entry<String, Object> entry = m.entrySet().iterator().next();\n          type = entry.getKey();\n          args = entry.getValue();\n        } else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can't convert map to query:\" + rawFilter);\n        }\n\n        if (!\"param\".equals(type)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown type. Can't convert map to query:\" + rawFilter);\n        }\n\n        String tag;\n        if (!(args instanceof String)) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Can't retrieve non-string param:\" + args);\n        }\n        tag = (String)args;\n\n        String[] qstrings = fcontext.req.getParams().getParams(tag);\n\n        // idea is to support multivalued parameter ie, 0 or more values\n        // so, when value not specified, it is ignored rather than throwing exception\n        if (qstrings != null) {\n          for (String qstring : qstrings) {\n            qlist.add(parserFilter(qstring, fcontext.req));\n          }\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Bad query (expected a string):\" + rawFilter);\n      }\n\n    }\n    return qlist;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2c705a0d590cf911e7c942df49563ca2ea176e22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["248f6ecc900c3a5633fd5ca6f564ea8b717720da"],"1918d03541b875664e27eae44b6b157da044f0b8":["2c705a0d590cf911e7c942df49563ca2ea176e22"],"248f6ecc900c3a5633fd5ca6f564ea8b717720da":["1918d03541b875664e27eae44b6b157da044f0b8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"]},"commit2Childs":{"2c705a0d590cf911e7c942df49563ca2ea176e22":["1918d03541b875664e27eae44b6b157da044f0b8"],"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1918d03541b875664e27eae44b6b157da044f0b8":["248f6ecc900c3a5633fd5ca6f564ea8b717720da"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2c705a0d590cf911e7c942df49563ca2ea176e22"],"248f6ecc900c3a5633fd5ca6f564ea8b717720da":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}