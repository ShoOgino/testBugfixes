{"path":"solr/core/src/test/org/apache/solr/cloud/overseer/TestClusterStateMutator#testCreateCollection().mjava","commits":[{"id":"24a5da2a0d397ff29f3de8f6cf451d3412c2509a","date":1417276391,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/TestClusterStateMutator#testCreateCollection().mjava","pathOld":"/dev/null","sourceNew":"  public void testCreateCollection() throws Exception {\n    ClusterState state = new ClusterState(-1, Collections.<String>emptySet(), Collections.<String, DocCollection>emptyMap());\n    MockZkStateReader zkStateReader = new MockZkStateReader(state, Collections.<String>emptySet());\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    ClusterStateMutator mutator = new ClusterStateMutator(zkStateReader);\n    ZkNodeProps message = new ZkNodeProps(ZkNodeProps.makeMap(\n        \"name\", \"xyz\",\n        \"numShards\", \"1\"\n    ));\n    ZkWriteCommand cmd = mutator.createCollection(clusterState, message);\n    DocCollection collection = cmd.collection;\n    assertEquals(\"xyz\", collection.getName());\n    assertEquals(1, collection.getSlicesMap().size());\n    assertEquals(1, collection.getMaxShardsPerNode());\n\n    state = new ClusterState(-1, Collections.<String>emptySet(), Collections.singletonMap(\"xyz\", collection));\n    message = new ZkNodeProps(ZkNodeProps.makeMap(\n        \"name\", \"abc\",\n        \"numShards\", \"2\",\n        \"router.name\", \"implicit\",\n        \"shards\", \"x,y\",\n        \"replicationFactor\", \"3\",\n        \"maxShardsPerNode\", \"4\"\n    ));\n    cmd = mutator.createCollection(state, message);\n    collection = cmd.collection;\n    assertEquals(\"abc\", collection.getName());\n    assertEquals(2, collection.getSlicesMap().size());\n    assertNotNull(collection.getSlicesMap().get(\"x\"));\n    assertNotNull(collection.getSlicesMap().get(\"y\"));\n    assertNull(collection.getSlicesMap().get(\"x\").getRange());\n    assertNull(collection.getSlicesMap().get(\"y\").getRange());\n    assertEquals(\"active\", collection.getSlicesMap().get(\"x\").getState());\n    assertEquals(\"active\", collection.getSlicesMap().get(\"y\").getState());\n    assertEquals(4, collection.getMaxShardsPerNode());\n    assertEquals(ImplicitDocRouter.class, collection.getRouter().getClass());\n    assertNotNull(state.getCollectionOrNull(\"xyz\")); // we still have the old collection\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296","date":1427866967,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/TestClusterStateMutator#testCreateCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/TestClusterStateMutator#testCreateCollection().mjava","sourceNew":"  public void testCreateCollection() throws Exception {\n    ClusterState state = new ClusterState(-1, Collections.<String>emptySet(), Collections.<String, DocCollection>emptyMap());\n    MockZkStateReader zkStateReader = new MockZkStateReader(state, Collections.<String>emptySet());\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    ClusterStateMutator mutator = new ClusterStateMutator(zkStateReader);\n    ZkNodeProps message = new ZkNodeProps(ZkNodeProps.makeMap(\n        \"name\", \"xyz\",\n        \"numShards\", \"1\"\n    ));\n    ZkWriteCommand cmd = mutator.createCollection(clusterState, message);\n    DocCollection collection = cmd.collection;\n    assertEquals(\"xyz\", collection.getName());\n    assertEquals(1, collection.getSlicesMap().size());\n    assertEquals(1, collection.getMaxShardsPerNode());\n\n    state = new ClusterState(-1, Collections.<String>emptySet(), Collections.singletonMap(\"xyz\", collection));\n    message = new ZkNodeProps(ZkNodeProps.makeMap(\n        \"name\", \"abc\",\n        \"numShards\", \"2\",\n        \"router.name\", \"implicit\",\n        \"shards\", \"x,y\",\n        \"replicationFactor\", \"3\",\n        \"maxShardsPerNode\", \"4\"\n    ));\n    cmd = mutator.createCollection(state, message);\n    collection = cmd.collection;\n    assertEquals(\"abc\", collection.getName());\n    assertEquals(2, collection.getSlicesMap().size());\n    assertNotNull(collection.getSlicesMap().get(\"x\"));\n    assertNotNull(collection.getSlicesMap().get(\"y\"));\n    assertNull(collection.getSlicesMap().get(\"x\").getRange());\n    assertNull(collection.getSlicesMap().get(\"y\").getRange());\n    assertSame(Slice.State.ACTIVE, collection.getSlicesMap().get(\"x\").getState());\n    assertSame(Slice.State.ACTIVE, collection.getSlicesMap().get(\"y\").getState());\n    assertEquals(4, collection.getMaxShardsPerNode());\n    assertEquals(ImplicitDocRouter.class, collection.getRouter().getClass());\n    assertNotNull(state.getCollectionOrNull(\"xyz\")); // we still have the old collection\n  }\n\n","sourceOld":"  public void testCreateCollection() throws Exception {\n    ClusterState state = new ClusterState(-1, Collections.<String>emptySet(), Collections.<String, DocCollection>emptyMap());\n    MockZkStateReader zkStateReader = new MockZkStateReader(state, Collections.<String>emptySet());\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    ClusterStateMutator mutator = new ClusterStateMutator(zkStateReader);\n    ZkNodeProps message = new ZkNodeProps(ZkNodeProps.makeMap(\n        \"name\", \"xyz\",\n        \"numShards\", \"1\"\n    ));\n    ZkWriteCommand cmd = mutator.createCollection(clusterState, message);\n    DocCollection collection = cmd.collection;\n    assertEquals(\"xyz\", collection.getName());\n    assertEquals(1, collection.getSlicesMap().size());\n    assertEquals(1, collection.getMaxShardsPerNode());\n\n    state = new ClusterState(-1, Collections.<String>emptySet(), Collections.singletonMap(\"xyz\", collection));\n    message = new ZkNodeProps(ZkNodeProps.makeMap(\n        \"name\", \"abc\",\n        \"numShards\", \"2\",\n        \"router.name\", \"implicit\",\n        \"shards\", \"x,y\",\n        \"replicationFactor\", \"3\",\n        \"maxShardsPerNode\", \"4\"\n    ));\n    cmd = mutator.createCollection(state, message);\n    collection = cmd.collection;\n    assertEquals(\"abc\", collection.getName());\n    assertEquals(2, collection.getSlicesMap().size());\n    assertNotNull(collection.getSlicesMap().get(\"x\"));\n    assertNotNull(collection.getSlicesMap().get(\"y\"));\n    assertNull(collection.getSlicesMap().get(\"x\").getRange());\n    assertNull(collection.getSlicesMap().get(\"y\").getRange());\n    assertEquals(\"active\", collection.getSlicesMap().get(\"x\").getState());\n    assertEquals(\"active\", collection.getSlicesMap().get(\"y\").getState());\n    assertEquals(4, collection.getMaxShardsPerNode());\n    assertEquals(ImplicitDocRouter.class, collection.getRouter().getClass());\n    assertNotNull(state.getCollectionOrNull(\"xyz\")); // we still have the old collection\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c924d4069ef5a5bc479a493befe0121aada6896","date":1427901860,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/TestClusterStateMutator#testCreateCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/TestClusterStateMutator#testCreateCollection().mjava","sourceNew":"  public void testCreateCollection() throws Exception {\n    ClusterState state = new ClusterState(-1, Collections.<String>emptySet(), Collections.<String, DocCollection>emptyMap());\n    MockZkStateReader zkStateReader = new MockZkStateReader(state, Collections.<String>emptySet());\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    ClusterStateMutator mutator = new ClusterStateMutator(zkStateReader);\n    ZkNodeProps message = new ZkNodeProps(ZkNodeProps.makeMap(\n        \"name\", \"xyz\",\n        \"numShards\", \"1\"\n    ));\n    ZkWriteCommand cmd = mutator.createCollection(clusterState, message);\n    DocCollection collection = cmd.collection;\n    assertEquals(\"xyz\", collection.getName());\n    assertEquals(1, collection.getSlicesMap().size());\n    assertEquals(1, collection.getMaxShardsPerNode());\n\n    state = new ClusterState(-1, Collections.<String>emptySet(), Collections.singletonMap(\"xyz\", collection));\n    message = new ZkNodeProps(ZkNodeProps.makeMap(\n        \"name\", \"abc\",\n        \"numShards\", \"2\",\n        \"router.name\", \"implicit\",\n        \"shards\", \"x,y\",\n        \"replicationFactor\", \"3\",\n        \"maxShardsPerNode\", \"4\"\n    ));\n    cmd = mutator.createCollection(state, message);\n    collection = cmd.collection;\n    assertEquals(\"abc\", collection.getName());\n    assertEquals(2, collection.getSlicesMap().size());\n    assertNotNull(collection.getSlicesMap().get(\"x\"));\n    assertNotNull(collection.getSlicesMap().get(\"y\"));\n    assertNull(collection.getSlicesMap().get(\"x\").getRange());\n    assertNull(collection.getSlicesMap().get(\"y\").getRange());\n    assertSame(Slice.State.ACTIVE, collection.getSlicesMap().get(\"x\").getState());\n    assertSame(Slice.State.ACTIVE, collection.getSlicesMap().get(\"y\").getState());\n    assertEquals(4, collection.getMaxShardsPerNode());\n    assertEquals(ImplicitDocRouter.class, collection.getRouter().getClass());\n    assertNotNull(state.getCollectionOrNull(\"xyz\")); // we still have the old collection\n  }\n\n","sourceOld":"  public void testCreateCollection() throws Exception {\n    ClusterState state = new ClusterState(-1, Collections.<String>emptySet(), Collections.<String, DocCollection>emptyMap());\n    MockZkStateReader zkStateReader = new MockZkStateReader(state, Collections.<String>emptySet());\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    ClusterStateMutator mutator = new ClusterStateMutator(zkStateReader);\n    ZkNodeProps message = new ZkNodeProps(ZkNodeProps.makeMap(\n        \"name\", \"xyz\",\n        \"numShards\", \"1\"\n    ));\n    ZkWriteCommand cmd = mutator.createCollection(clusterState, message);\n    DocCollection collection = cmd.collection;\n    assertEquals(\"xyz\", collection.getName());\n    assertEquals(1, collection.getSlicesMap().size());\n    assertEquals(1, collection.getMaxShardsPerNode());\n\n    state = new ClusterState(-1, Collections.<String>emptySet(), Collections.singletonMap(\"xyz\", collection));\n    message = new ZkNodeProps(ZkNodeProps.makeMap(\n        \"name\", \"abc\",\n        \"numShards\", \"2\",\n        \"router.name\", \"implicit\",\n        \"shards\", \"x,y\",\n        \"replicationFactor\", \"3\",\n        \"maxShardsPerNode\", \"4\"\n    ));\n    cmd = mutator.createCollection(state, message);\n    collection = cmd.collection;\n    assertEquals(\"abc\", collection.getName());\n    assertEquals(2, collection.getSlicesMap().size());\n    assertNotNull(collection.getSlicesMap().get(\"x\"));\n    assertNotNull(collection.getSlicesMap().get(\"y\"));\n    assertNull(collection.getSlicesMap().get(\"x\").getRange());\n    assertNull(collection.getSlicesMap().get(\"y\").getRange());\n    assertEquals(\"active\", collection.getSlicesMap().get(\"x\").getState());\n    assertEquals(\"active\", collection.getSlicesMap().get(\"y\").getState());\n    assertEquals(4, collection.getMaxShardsPerNode());\n    assertEquals(ImplicitDocRouter.class, collection.getRouter().getClass());\n    assertNotNull(state.getCollectionOrNull(\"xyz\")); // we still have the old collection\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/TestClusterStateMutator#testCreateCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/TestClusterStateMutator#testCreateCollection().mjava","sourceNew":"  public void testCreateCollection() throws Exception {\n    ClusterState state = new ClusterState(-1, Collections.<String>emptySet(), Collections.<String, DocCollection>emptyMap());\n    MockZkStateReader zkStateReader = new MockZkStateReader(state, Collections.<String>emptySet());\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    ClusterStateMutator mutator = new ClusterStateMutator(zkStateReader);\n    ZkNodeProps message = new ZkNodeProps(Utils.makeMap(\n        \"name\", \"xyz\",\n        \"numShards\", \"1\"\n    ));\n    ZkWriteCommand cmd = mutator.createCollection(clusterState, message);\n    DocCollection collection = cmd.collection;\n    assertEquals(\"xyz\", collection.getName());\n    assertEquals(1, collection.getSlicesMap().size());\n    assertEquals(1, collection.getMaxShardsPerNode());\n\n    state = new ClusterState(-1, Collections.<String>emptySet(), Collections.singletonMap(\"xyz\", collection));\n    message = new ZkNodeProps(Utils.makeMap(\n        \"name\", \"abc\",\n        \"numShards\", \"2\",\n        \"router.name\", \"implicit\",\n        \"shards\", \"x,y\",\n        \"replicationFactor\", \"3\",\n        \"maxShardsPerNode\", \"4\"\n    ));\n    cmd = mutator.createCollection(state, message);\n    collection = cmd.collection;\n    assertEquals(\"abc\", collection.getName());\n    assertEquals(2, collection.getSlicesMap().size());\n    assertNotNull(collection.getSlicesMap().get(\"x\"));\n    assertNotNull(collection.getSlicesMap().get(\"y\"));\n    assertNull(collection.getSlicesMap().get(\"x\").getRange());\n    assertNull(collection.getSlicesMap().get(\"y\").getRange());\n    assertSame(Slice.State.ACTIVE, collection.getSlicesMap().get(\"x\").getState());\n    assertSame(Slice.State.ACTIVE, collection.getSlicesMap().get(\"y\").getState());\n    assertEquals(4, collection.getMaxShardsPerNode());\n    assertEquals(ImplicitDocRouter.class, collection.getRouter().getClass());\n    assertNotNull(state.getCollectionOrNull(\"xyz\")); // we still have the old collection\n  }\n\n","sourceOld":"  public void testCreateCollection() throws Exception {\n    ClusterState state = new ClusterState(-1, Collections.<String>emptySet(), Collections.<String, DocCollection>emptyMap());\n    MockZkStateReader zkStateReader = new MockZkStateReader(state, Collections.<String>emptySet());\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    ClusterStateMutator mutator = new ClusterStateMutator(zkStateReader);\n    ZkNodeProps message = new ZkNodeProps(ZkNodeProps.makeMap(\n        \"name\", \"xyz\",\n        \"numShards\", \"1\"\n    ));\n    ZkWriteCommand cmd = mutator.createCollection(clusterState, message);\n    DocCollection collection = cmd.collection;\n    assertEquals(\"xyz\", collection.getName());\n    assertEquals(1, collection.getSlicesMap().size());\n    assertEquals(1, collection.getMaxShardsPerNode());\n\n    state = new ClusterState(-1, Collections.<String>emptySet(), Collections.singletonMap(\"xyz\", collection));\n    message = new ZkNodeProps(ZkNodeProps.makeMap(\n        \"name\", \"abc\",\n        \"numShards\", \"2\",\n        \"router.name\", \"implicit\",\n        \"shards\", \"x,y\",\n        \"replicationFactor\", \"3\",\n        \"maxShardsPerNode\", \"4\"\n    ));\n    cmd = mutator.createCollection(state, message);\n    collection = cmd.collection;\n    assertEquals(\"abc\", collection.getName());\n    assertEquals(2, collection.getSlicesMap().size());\n    assertNotNull(collection.getSlicesMap().get(\"x\"));\n    assertNotNull(collection.getSlicesMap().get(\"y\"));\n    assertNull(collection.getSlicesMap().get(\"x\").getRange());\n    assertNull(collection.getSlicesMap().get(\"y\").getRange());\n    assertSame(Slice.State.ACTIVE, collection.getSlicesMap().get(\"x\").getState());\n    assertSame(Slice.State.ACTIVE, collection.getSlicesMap().get(\"y\").getState());\n    assertEquals(4, collection.getMaxShardsPerNode());\n    assertEquals(ImplicitDocRouter.class, collection.getRouter().getClass());\n    assertNotNull(state.getCollectionOrNull(\"xyz\")); // we still have the old collection\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/TestClusterStateMutator#testCreateCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/TestClusterStateMutator#testCreateCollection().mjava","sourceNew":"  public void testCreateCollection() throws Exception {\n    ClusterState clusterState = new ClusterState(-1, Collections.<String>emptySet(), Collections.<String, DocCollection>emptyMap());\n    DistribStateManager mockStateManager = mock(DistribStateManager.class);\n    SolrCloudManager dataProvider = mock(SolrCloudManager.class);\n    when(dataProvider.getDistribStateManager()).thenReturn(mockStateManager);\n\n    ClusterStateMutator mutator = new ClusterStateMutator(dataProvider);\n    ZkNodeProps message = new ZkNodeProps(Utils.makeMap(\n        \"name\", \"xyz\",\n        \"numShards\", \"1\"\n    ));\n    ZkWriteCommand cmd = mutator.createCollection(clusterState, message);\n    DocCollection collection = cmd.collection;\n    assertEquals(\"xyz\", collection.getName());\n    assertEquals(1, collection.getSlicesMap().size());\n    assertEquals(1, collection.getMaxShardsPerNode());\n\n    ClusterState state = new ClusterState(-1, Collections.<String>emptySet(), Collections.singletonMap(\"xyz\", collection));\n    message = new ZkNodeProps(Utils.makeMap(\n        \"name\", \"abc\",\n        \"numShards\", \"2\",\n        \"router.name\", \"implicit\",\n        \"shards\", \"x,y\",\n        \"replicationFactor\", \"3\",\n        \"maxShardsPerNode\", \"4\"\n    ));\n    cmd = mutator.createCollection(state, message);\n    collection = cmd.collection;\n    assertEquals(\"abc\", collection.getName());\n    assertEquals(2, collection.getSlicesMap().size());\n    assertNotNull(collection.getSlicesMap().get(\"x\"));\n    assertNotNull(collection.getSlicesMap().get(\"y\"));\n    assertNull(collection.getSlicesMap().get(\"x\").getRange());\n    assertNull(collection.getSlicesMap().get(\"y\").getRange());\n    assertSame(Slice.State.ACTIVE, collection.getSlicesMap().get(\"x\").getState());\n    assertSame(Slice.State.ACTIVE, collection.getSlicesMap().get(\"y\").getState());\n    assertEquals(4, collection.getMaxShardsPerNode());\n    assertEquals(ImplicitDocRouter.class, collection.getRouter().getClass());\n    assertNotNull(state.getCollectionOrNull(\"xyz\")); // we still have the old collection\n  }\n\n","sourceOld":"  public void testCreateCollection() throws Exception {\n    ClusterState state = new ClusterState(-1, Collections.<String>emptySet(), Collections.<String, DocCollection>emptyMap());\n    MockZkStateReader zkStateReader = new MockZkStateReader(state, Collections.<String>emptySet());\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    ClusterStateMutator mutator = new ClusterStateMutator(zkStateReader);\n    ZkNodeProps message = new ZkNodeProps(Utils.makeMap(\n        \"name\", \"xyz\",\n        \"numShards\", \"1\"\n    ));\n    ZkWriteCommand cmd = mutator.createCollection(clusterState, message);\n    DocCollection collection = cmd.collection;\n    assertEquals(\"xyz\", collection.getName());\n    assertEquals(1, collection.getSlicesMap().size());\n    assertEquals(1, collection.getMaxShardsPerNode());\n\n    state = new ClusterState(-1, Collections.<String>emptySet(), Collections.singletonMap(\"xyz\", collection));\n    message = new ZkNodeProps(Utils.makeMap(\n        \"name\", \"abc\",\n        \"numShards\", \"2\",\n        \"router.name\", \"implicit\",\n        \"shards\", \"x,y\",\n        \"replicationFactor\", \"3\",\n        \"maxShardsPerNode\", \"4\"\n    ));\n    cmd = mutator.createCollection(state, message);\n    collection = cmd.collection;\n    assertEquals(\"abc\", collection.getName());\n    assertEquals(2, collection.getSlicesMap().size());\n    assertNotNull(collection.getSlicesMap().get(\"x\"));\n    assertNotNull(collection.getSlicesMap().get(\"y\"));\n    assertNull(collection.getSlicesMap().get(\"x\").getRange());\n    assertNull(collection.getSlicesMap().get(\"y\").getRange());\n    assertSame(Slice.State.ACTIVE, collection.getSlicesMap().get(\"x\").getState());\n    assertSame(Slice.State.ACTIVE, collection.getSlicesMap().get(\"y\").getState());\n    assertEquals(4, collection.getMaxShardsPerNode());\n    assertEquals(ImplicitDocRouter.class, collection.getRouter().getClass());\n    assertNotNull(state.getCollectionOrNull(\"xyz\")); // we still have the old collection\n  }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/TestClusterStateMutator#testCreateCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/TestClusterStateMutator#testCreateCollection().mjava","sourceNew":"  public void testCreateCollection() throws Exception {\n    ClusterState clusterState = new ClusterState(Collections.<String>emptySet(), Collections.<String, DocCollection>emptyMap());\n    DistribStateManager mockStateManager = mock(DistribStateManager.class);\n    SolrCloudManager dataProvider = mock(SolrCloudManager.class);\n    when(dataProvider.getDistribStateManager()).thenReturn(mockStateManager);\n\n    ClusterStateMutator mutator = new ClusterStateMutator(dataProvider);\n    ZkNodeProps message = new ZkNodeProps(Utils.makeMap(\n        \"name\", \"xyz\",\n        \"numShards\", \"1\"\n    ));\n    ZkWriteCommand cmd = mutator.createCollection(clusterState, message);\n    DocCollection collection = cmd.collection;\n    assertEquals(\"xyz\", collection.getName());\n    assertEquals(1, collection.getSlicesMap().size());\n    assertEquals(1, collection.getMaxShardsPerNode());\n\n    ClusterState state = new ClusterState(Collections.<String>emptySet(), Collections.singletonMap(\"xyz\", collection));\n    message = new ZkNodeProps(Utils.makeMap(\n        \"name\", \"abc\",\n        \"numShards\", \"2\",\n        \"router.name\", \"implicit\",\n        \"shards\", \"x,y\",\n        \"replicationFactor\", \"3\",\n        \"maxShardsPerNode\", \"4\"\n    ));\n    cmd = mutator.createCollection(state, message);\n    collection = cmd.collection;\n    assertEquals(\"abc\", collection.getName());\n    assertEquals(2, collection.getSlicesMap().size());\n    assertNotNull(collection.getSlicesMap().get(\"x\"));\n    assertNotNull(collection.getSlicesMap().get(\"y\"));\n    assertNull(collection.getSlicesMap().get(\"x\").getRange());\n    assertNull(collection.getSlicesMap().get(\"y\").getRange());\n    assertSame(Slice.State.ACTIVE, collection.getSlicesMap().get(\"x\").getState());\n    assertSame(Slice.State.ACTIVE, collection.getSlicesMap().get(\"y\").getState());\n    assertEquals(4, collection.getMaxShardsPerNode());\n    assertEquals(ImplicitDocRouter.class, collection.getRouter().getClass());\n    assertNotNull(state.getCollectionOrNull(\"xyz\")); // we still have the old collection\n  }\n\n","sourceOld":"  public void testCreateCollection() throws Exception {\n    ClusterState clusterState = new ClusterState(-1, Collections.<String>emptySet(), Collections.<String, DocCollection>emptyMap());\n    DistribStateManager mockStateManager = mock(DistribStateManager.class);\n    SolrCloudManager dataProvider = mock(SolrCloudManager.class);\n    when(dataProvider.getDistribStateManager()).thenReturn(mockStateManager);\n\n    ClusterStateMutator mutator = new ClusterStateMutator(dataProvider);\n    ZkNodeProps message = new ZkNodeProps(Utils.makeMap(\n        \"name\", \"xyz\",\n        \"numShards\", \"1\"\n    ));\n    ZkWriteCommand cmd = mutator.createCollection(clusterState, message);\n    DocCollection collection = cmd.collection;\n    assertEquals(\"xyz\", collection.getName());\n    assertEquals(1, collection.getSlicesMap().size());\n    assertEquals(1, collection.getMaxShardsPerNode());\n\n    ClusterState state = new ClusterState(-1, Collections.<String>emptySet(), Collections.singletonMap(\"xyz\", collection));\n    message = new ZkNodeProps(Utils.makeMap(\n        \"name\", \"abc\",\n        \"numShards\", \"2\",\n        \"router.name\", \"implicit\",\n        \"shards\", \"x,y\",\n        \"replicationFactor\", \"3\",\n        \"maxShardsPerNode\", \"4\"\n    ));\n    cmd = mutator.createCollection(state, message);\n    collection = cmd.collection;\n    assertEquals(\"abc\", collection.getName());\n    assertEquals(2, collection.getSlicesMap().size());\n    assertNotNull(collection.getSlicesMap().get(\"x\"));\n    assertNotNull(collection.getSlicesMap().get(\"y\"));\n    assertNull(collection.getSlicesMap().get(\"x\").getRange());\n    assertNull(collection.getSlicesMap().get(\"y\").getRange());\n    assertSame(Slice.State.ACTIVE, collection.getSlicesMap().get(\"x\").getState());\n    assertSame(Slice.State.ACTIVE, collection.getSlicesMap().get(\"y\").getState());\n    assertEquals(4, collection.getMaxShardsPerNode());\n    assertEquals(ImplicitDocRouter.class, collection.getRouter().getClass());\n    assertNotNull(state.getCollectionOrNull(\"xyz\")); // we still have the old collection\n  }\n\n","bugFix":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/TestClusterStateMutator#testCreateCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/TestClusterStateMutator#testCreateCollection().mjava","sourceNew":"  public void testCreateCollection() throws Exception {\n    ClusterState clusterState = new ClusterState(Collections.<String>emptySet(), Collections.<String, DocCollection>emptyMap());\n    DistribStateManager mockStateManager = mock(DistribStateManager.class);\n    SolrCloudManager dataProvider = mock(SolrCloudManager.class);\n    when(dataProvider.getDistribStateManager()).thenReturn(mockStateManager);\n\n    ClusterStateMutator mutator = new ClusterStateMutator(dataProvider);\n    ZkNodeProps message = new ZkNodeProps(Utils.makeMap(\n        \"name\", \"xyz\",\n        \"numShards\", \"1\"\n    ));\n    ZkWriteCommand cmd = mutator.createCollection(clusterState, message);\n    DocCollection collection = cmd.collection;\n    assertEquals(\"xyz\", collection.getName());\n    assertEquals(1, collection.getSlicesMap().size());\n\n    ClusterState state = new ClusterState(Collections.<String>emptySet(), Collections.singletonMap(\"xyz\", collection));\n    message = new ZkNodeProps(Utils.makeMap(\n        \"name\", \"abc\",\n        \"numShards\", \"2\",\n        \"router.name\", \"implicit\",\n        \"shards\", \"x,y\",\n        \"replicationFactor\", \"3\"\n    ));\n    cmd = mutator.createCollection(state, message);\n    collection = cmd.collection;\n    assertEquals(\"abc\", collection.getName());\n    assertEquals(2, collection.getSlicesMap().size());\n    assertNotNull(collection.getSlicesMap().get(\"x\"));\n    assertNotNull(collection.getSlicesMap().get(\"y\"));\n    assertNull(collection.getSlicesMap().get(\"x\").getRange());\n    assertNull(collection.getSlicesMap().get(\"y\").getRange());\n    assertSame(Slice.State.ACTIVE, collection.getSlicesMap().get(\"x\").getState());\n    assertSame(Slice.State.ACTIVE, collection.getSlicesMap().get(\"y\").getState());\n    assertEquals(ImplicitDocRouter.class, collection.getRouter().getClass());\n    assertNotNull(state.getCollectionOrNull(\"xyz\")); // we still have the old collection\n  }\n\n","sourceOld":"  public void testCreateCollection() throws Exception {\n    ClusterState clusterState = new ClusterState(Collections.<String>emptySet(), Collections.<String, DocCollection>emptyMap());\n    DistribStateManager mockStateManager = mock(DistribStateManager.class);\n    SolrCloudManager dataProvider = mock(SolrCloudManager.class);\n    when(dataProvider.getDistribStateManager()).thenReturn(mockStateManager);\n\n    ClusterStateMutator mutator = new ClusterStateMutator(dataProvider);\n    ZkNodeProps message = new ZkNodeProps(Utils.makeMap(\n        \"name\", \"xyz\",\n        \"numShards\", \"1\"\n    ));\n    ZkWriteCommand cmd = mutator.createCollection(clusterState, message);\n    DocCollection collection = cmd.collection;\n    assertEquals(\"xyz\", collection.getName());\n    assertEquals(1, collection.getSlicesMap().size());\n    assertEquals(1, collection.getMaxShardsPerNode());\n\n    ClusterState state = new ClusterState(Collections.<String>emptySet(), Collections.singletonMap(\"xyz\", collection));\n    message = new ZkNodeProps(Utils.makeMap(\n        \"name\", \"abc\",\n        \"numShards\", \"2\",\n        \"router.name\", \"implicit\",\n        \"shards\", \"x,y\",\n        \"replicationFactor\", \"3\",\n        \"maxShardsPerNode\", \"4\"\n    ));\n    cmd = mutator.createCollection(state, message);\n    collection = cmd.collection;\n    assertEquals(\"abc\", collection.getName());\n    assertEquals(2, collection.getSlicesMap().size());\n    assertNotNull(collection.getSlicesMap().get(\"x\"));\n    assertNotNull(collection.getSlicesMap().get(\"y\"));\n    assertNull(collection.getSlicesMap().get(\"x\").getRange());\n    assertNull(collection.getSlicesMap().get(\"y\").getRange());\n    assertSame(Slice.State.ACTIVE, collection.getSlicesMap().get(\"x\").getState());\n    assertSame(Slice.State.ACTIVE, collection.getSlicesMap().get(\"y\").getState());\n    assertEquals(4, collection.getMaxShardsPerNode());\n    assertEquals(ImplicitDocRouter.class, collection.getRouter().getClass());\n    assertNotNull(state.getCollectionOrNull(\"xyz\")); // we still have the old collection\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"0c924d4069ef5a5bc479a493befe0121aada6896":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a","d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296"]},"commit2Childs":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296","0c924d4069ef5a5bc479a493befe0121aada6896"],"d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296":["b693a83132c9e45afcd564fd65a25b60ed80388b","0c924d4069ef5a5bc479a493befe0121aada6896"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0c924d4069ef5a5bc479a493befe0121aada6896":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","0c924d4069ef5a5bc479a493befe0121aada6896"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}