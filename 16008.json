{"path":"solr/core/src/java/org/apache/solr/handler/admin/LoggingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"829761a123d59d7a3c39e5f13fbc03de63f55ce5","date":1334686329,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LoggingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Don't do anything if the framework is unknown\n    if(watcher==null) {\n      rsp.add(\"error\", \"Logging Not Initalized\");\n      return;\n    }\n    rsp.add(\"watcher\", watcher.getName());\n    \n    SolrParams params = req.getParams();\n    if(params.get(\"threshold\")!=null) {\n      watcher.setThreshold(params.get(\"threshold\"));\n    }\n    \n    // Write something at each level\n    if(params.get(\"test\")!=null) {\n      log.trace(\"trace message\");\n      log.debug( \"debug message\");\n      log.info(\"info (with exception)\", new RuntimeException(\"test\") );\n      log.warn(\"warn (with exception)\", new RuntimeException(\"test\") );\n      log.error(\"error (with exception)\", new RuntimeException(\"test\") );\n    }\n    \n    String[] set = params.getParams(\"set\");\n    if (set != null) {\n      for (String pair : set) {\n        String[] split = pair.split(\":\");\n        if (split.length != 2) {\n          throw new SolrException(\n              SolrException.ErrorCode.SERVER_ERROR,\n              \"Invalid format, expected level:value, got \" + pair);\n        }\n        String category = split[0];\n        String level = split[1];\n\n        watcher.setLogLevel(category, level);\n      }\n    }\n    \n    String since = req.getParams().get(\"since\");\n    if(since != null) {\n      long time = -1;\n      try {\n        time = Long.parseLong(since);\n      }\n      catch(Exception ex) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"invalid timestamp: \"+since);\n      }\n      AtomicBoolean found = new AtomicBoolean(false);\n      SolrDocumentList docs = watcher.getHistory(time, found);\n      if(docs==null) {\n        rsp.add(\"error\", \"History not enabled\");\n        return;\n      }\n      else {\n        SimpleOrderedMap<Object> info = new SimpleOrderedMap<Object>();\n        if(time>0) {\n          info.add(\"since\", time);\n          info.add(\"found\", found);\n        }\n        else {\n          info.add(\"levels\", watcher.getAllLevels()); // show for the first request\n        }\n        info.add(\"last\", watcher.getLastEvent());\n        info.add(\"buffer\", watcher.getHistorySize());\n        info.add(\"threshold\", watcher.getThreshold());\n        \n        rsp.add(\"info\", info);\n        rsp.add(\"history\", docs);\n      }\n    }\n    else {\n      rsp.add(\"levels\", watcher.getAllLevels());\n  \n      List<LoggerInfo> loggers = new ArrayList<LoggerInfo>(watcher.getAllLoggers());\n      Collections.sort(loggers);\n  \n      List<SimpleOrderedMap<?>> info = new ArrayList<SimpleOrderedMap<?>>();\n      for(LoggerInfo wrap:loggers) {\n        info.add(wrap.getInfo());\n      }\n      rsp.add(\"loggers\", info);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LoggingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LoggingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Don't do anything if the framework is unknown\n    if(watcher==null) {\n      rsp.add(\"error\", \"Logging Not Initalized\");\n      return;\n    }\n    rsp.add(\"watcher\", watcher.getName());\n    \n    SolrParams params = req.getParams();\n    if(params.get(\"threshold\")!=null) {\n      watcher.setThreshold(params.get(\"threshold\"));\n    }\n    \n    // Write something at each level\n    if(params.get(\"test\")!=null) {\n      log.trace(\"trace message\");\n      log.debug( \"debug message\");\n      log.info(\"info (with exception)\", new RuntimeException(\"test\") );\n      log.warn(\"warn (with exception)\", new RuntimeException(\"test\") );\n      log.error(\"error (with exception)\", new RuntimeException(\"test\") );\n    }\n    \n    String[] set = params.getParams(\"set\");\n    if (set != null) {\n      for (String pair : set) {\n        String[] split = pair.split(\":\");\n        if (split.length != 2) {\n          throw new SolrException(\n              SolrException.ErrorCode.SERVER_ERROR,\n              \"Invalid format, expected level:value, got \" + pair);\n        }\n        String category = split[0];\n        String level = split[1];\n\n        watcher.setLogLevel(category, level);\n      }\n    }\n    \n    String since = req.getParams().get(\"since\");\n    if(since != null) {\n      long time = -1;\n      try {\n        time = Long.parseLong(since);\n      }\n      catch(Exception ex) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"invalid timestamp: \"+since);\n      }\n      AtomicBoolean found = new AtomicBoolean(false);\n      SolrDocumentList docs = watcher.getHistory(time, found);\n      if(docs==null) {\n        rsp.add(\"error\", \"History not enabled\");\n        return;\n      }\n      else {\n        SimpleOrderedMap<Object> info = new SimpleOrderedMap<>();\n        if(time>0) {\n          info.add(\"since\", time);\n          info.add(\"found\", found);\n        }\n        else {\n          info.add(\"levels\", watcher.getAllLevels()); // show for the first request\n        }\n        info.add(\"last\", watcher.getLastEvent());\n        info.add(\"buffer\", watcher.getHistorySize());\n        info.add(\"threshold\", watcher.getThreshold());\n        \n        rsp.add(\"info\", info);\n        rsp.add(\"history\", docs);\n      }\n    }\n    else {\n      rsp.add(\"levels\", watcher.getAllLevels());\n  \n      List<LoggerInfo> loggers = new ArrayList<>(watcher.getAllLoggers());\n      Collections.sort(loggers);\n  \n      List<SimpleOrderedMap<?>> info = new ArrayList<>();\n      for(LoggerInfo wrap:loggers) {\n        info.add(wrap.getInfo());\n      }\n      rsp.add(\"loggers\", info);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Don't do anything if the framework is unknown\n    if(watcher==null) {\n      rsp.add(\"error\", \"Logging Not Initalized\");\n      return;\n    }\n    rsp.add(\"watcher\", watcher.getName());\n    \n    SolrParams params = req.getParams();\n    if(params.get(\"threshold\")!=null) {\n      watcher.setThreshold(params.get(\"threshold\"));\n    }\n    \n    // Write something at each level\n    if(params.get(\"test\")!=null) {\n      log.trace(\"trace message\");\n      log.debug( \"debug message\");\n      log.info(\"info (with exception)\", new RuntimeException(\"test\") );\n      log.warn(\"warn (with exception)\", new RuntimeException(\"test\") );\n      log.error(\"error (with exception)\", new RuntimeException(\"test\") );\n    }\n    \n    String[] set = params.getParams(\"set\");\n    if (set != null) {\n      for (String pair : set) {\n        String[] split = pair.split(\":\");\n        if (split.length != 2) {\n          throw new SolrException(\n              SolrException.ErrorCode.SERVER_ERROR,\n              \"Invalid format, expected level:value, got \" + pair);\n        }\n        String category = split[0];\n        String level = split[1];\n\n        watcher.setLogLevel(category, level);\n      }\n    }\n    \n    String since = req.getParams().get(\"since\");\n    if(since != null) {\n      long time = -1;\n      try {\n        time = Long.parseLong(since);\n      }\n      catch(Exception ex) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"invalid timestamp: \"+since);\n      }\n      AtomicBoolean found = new AtomicBoolean(false);\n      SolrDocumentList docs = watcher.getHistory(time, found);\n      if(docs==null) {\n        rsp.add(\"error\", \"History not enabled\");\n        return;\n      }\n      else {\n        SimpleOrderedMap<Object> info = new SimpleOrderedMap<Object>();\n        if(time>0) {\n          info.add(\"since\", time);\n          info.add(\"found\", found);\n        }\n        else {\n          info.add(\"levels\", watcher.getAllLevels()); // show for the first request\n        }\n        info.add(\"last\", watcher.getLastEvent());\n        info.add(\"buffer\", watcher.getHistorySize());\n        info.add(\"threshold\", watcher.getThreshold());\n        \n        rsp.add(\"info\", info);\n        rsp.add(\"history\", docs);\n      }\n    }\n    else {\n      rsp.add(\"levels\", watcher.getAllLevels());\n  \n      List<LoggerInfo> loggers = new ArrayList<LoggerInfo>(watcher.getAllLoggers());\n      Collections.sort(loggers);\n  \n      List<SimpleOrderedMap<?>> info = new ArrayList<SimpleOrderedMap<?>>();\n      for(LoggerInfo wrap:loggers) {\n        info.add(wrap.getInfo());\n      }\n      rsp.add(\"loggers\", info);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9","date":1419431639,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LoggingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LoggingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Don't do anything if the framework is unknown\n    if(watcher==null) {\n      rsp.add(\"error\", \"Logging Not Initialized\");\n      return;\n    }\n    rsp.add(\"watcher\", watcher.getName());\n    \n    SolrParams params = req.getParams();\n    if(params.get(\"threshold\")!=null) {\n      watcher.setThreshold(params.get(\"threshold\"));\n    }\n    \n    // Write something at each level\n    if(params.get(\"test\")!=null) {\n      log.trace(\"trace message\");\n      log.debug( \"debug message\");\n      log.info(\"info (with exception)\", new RuntimeException(\"test\") );\n      log.warn(\"warn (with exception)\", new RuntimeException(\"test\") );\n      log.error(\"error (with exception)\", new RuntimeException(\"test\") );\n    }\n    \n    String[] set = params.getParams(\"set\");\n    if (set != null) {\n      for (String pair : set) {\n        String[] split = pair.split(\":\");\n        if (split.length != 2) {\n          throw new SolrException(\n              SolrException.ErrorCode.SERVER_ERROR,\n              \"Invalid format, expected level:value, got \" + pair);\n        }\n        String category = split[0];\n        String level = split[1];\n\n        watcher.setLogLevel(category, level);\n      }\n    }\n    \n    String since = req.getParams().get(\"since\");\n    if(since != null) {\n      long time = -1;\n      try {\n        time = Long.parseLong(since);\n      }\n      catch(Exception ex) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"invalid timestamp: \"+since);\n      }\n      AtomicBoolean found = new AtomicBoolean(false);\n      SolrDocumentList docs = watcher.getHistory(time, found);\n      if(docs==null) {\n        rsp.add(\"error\", \"History not enabled\");\n        return;\n      }\n      else {\n        SimpleOrderedMap<Object> info = new SimpleOrderedMap<>();\n        if(time>0) {\n          info.add(\"since\", time);\n          info.add(\"found\", found);\n        }\n        else {\n          info.add(\"levels\", watcher.getAllLevels()); // show for the first request\n        }\n        info.add(\"last\", watcher.getLastEvent());\n        info.add(\"buffer\", watcher.getHistorySize());\n        info.add(\"threshold\", watcher.getThreshold());\n        \n        rsp.add(\"info\", info);\n        rsp.add(\"history\", docs);\n      }\n    }\n    else {\n      rsp.add(\"levels\", watcher.getAllLevels());\n  \n      List<LoggerInfo> loggers = new ArrayList<>(watcher.getAllLoggers());\n      Collections.sort(loggers);\n  \n      List<SimpleOrderedMap<?>> info = new ArrayList<>();\n      for(LoggerInfo wrap:loggers) {\n        info.add(wrap.getInfo());\n      }\n      rsp.add(\"loggers\", info);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Don't do anything if the framework is unknown\n    if(watcher==null) {\n      rsp.add(\"error\", \"Logging Not Initalized\");\n      return;\n    }\n    rsp.add(\"watcher\", watcher.getName());\n    \n    SolrParams params = req.getParams();\n    if(params.get(\"threshold\")!=null) {\n      watcher.setThreshold(params.get(\"threshold\"));\n    }\n    \n    // Write something at each level\n    if(params.get(\"test\")!=null) {\n      log.trace(\"trace message\");\n      log.debug( \"debug message\");\n      log.info(\"info (with exception)\", new RuntimeException(\"test\") );\n      log.warn(\"warn (with exception)\", new RuntimeException(\"test\") );\n      log.error(\"error (with exception)\", new RuntimeException(\"test\") );\n    }\n    \n    String[] set = params.getParams(\"set\");\n    if (set != null) {\n      for (String pair : set) {\n        String[] split = pair.split(\":\");\n        if (split.length != 2) {\n          throw new SolrException(\n              SolrException.ErrorCode.SERVER_ERROR,\n              \"Invalid format, expected level:value, got \" + pair);\n        }\n        String category = split[0];\n        String level = split[1];\n\n        watcher.setLogLevel(category, level);\n      }\n    }\n    \n    String since = req.getParams().get(\"since\");\n    if(since != null) {\n      long time = -1;\n      try {\n        time = Long.parseLong(since);\n      }\n      catch(Exception ex) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"invalid timestamp: \"+since);\n      }\n      AtomicBoolean found = new AtomicBoolean(false);\n      SolrDocumentList docs = watcher.getHistory(time, found);\n      if(docs==null) {\n        rsp.add(\"error\", \"History not enabled\");\n        return;\n      }\n      else {\n        SimpleOrderedMap<Object> info = new SimpleOrderedMap<>();\n        if(time>0) {\n          info.add(\"since\", time);\n          info.add(\"found\", found);\n        }\n        else {\n          info.add(\"levels\", watcher.getAllLevels()); // show for the first request\n        }\n        info.add(\"last\", watcher.getLastEvent());\n        info.add(\"buffer\", watcher.getHistorySize());\n        info.add(\"threshold\", watcher.getThreshold());\n        \n        rsp.add(\"info\", info);\n        rsp.add(\"history\", docs);\n      }\n    }\n    else {\n      rsp.add(\"levels\", watcher.getAllLevels());\n  \n      List<LoggerInfo> loggers = new ArrayList<>(watcher.getAllLoggers());\n      Collections.sort(loggers);\n  \n      List<SimpleOrderedMap<?>> info = new ArrayList<>();\n      for(LoggerInfo wrap:loggers) {\n        info.add(wrap.getInfo());\n      }\n      rsp.add(\"loggers\", info);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65780dd0a70597aa46f16a2a42093215ca237272","date":1427847875,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LoggingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LoggingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Don't do anything if the framework is unknown\n    if(watcher==null) {\n      rsp.add(\"error\", \"Logging Not Initialized\");\n      return;\n    }\n    rsp.add(\"watcher\", watcher.getName());\n    \n    SolrParams params = req.getParams();\n    if(params.get(\"threshold\")!=null) {\n      watcher.setThreshold(params.get(\"threshold\"));\n    }\n    \n    // Write something at each level\n    if(params.get(\"test\")!=null) {\n      log.trace(\"trace message\");\n      log.debug( \"debug message\");\n      log.info(\"info (with exception)\", new RuntimeException(\"test\") );\n      log.warn(\"warn (with exception)\", new RuntimeException(\"test\") );\n      log.error(\"error (with exception)\", new RuntimeException(\"test\") );\n    }\n    \n    String[] set = params.getParams(\"set\");\n    if (set != null) {\n      for (String pair : set) {\n        String[] split = pair.split(\":\");\n        if (split.length != 2) {\n          throw new SolrException(\n              SolrException.ErrorCode.SERVER_ERROR,\n              \"Invalid format, expected level:value, got \" + pair);\n        }\n        String category = split[0];\n        String level = split[1];\n\n        watcher.setLogLevel(category, level);\n      }\n    }\n    \n    String since = req.getParams().get(\"since\");\n    if(since != null) {\n      long time = -1;\n      try {\n        time = Long.parseLong(since);\n      }\n      catch(Exception ex) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"invalid timestamp: \"+since);\n      }\n      AtomicBoolean found = new AtomicBoolean(false);\n      SolrDocumentList docs = watcher.getHistory(time, found);\n      if(docs==null) {\n        rsp.add(\"error\", \"History not enabled\");\n        return;\n      }\n      else {\n        SimpleOrderedMap<Object> info = new SimpleOrderedMap<>();\n        if(time>0) {\n          info.add(\"since\", time);\n          info.add(\"found\", found.get());\n        }\n        else {\n          info.add(\"levels\", watcher.getAllLevels()); // show for the first request\n        }\n        info.add(\"last\", watcher.getLastEvent());\n        info.add(\"buffer\", watcher.getHistorySize());\n        info.add(\"threshold\", watcher.getThreshold());\n        \n        rsp.add(\"info\", info);\n        rsp.add(\"history\", docs);\n      }\n    }\n    else {\n      rsp.add(\"levels\", watcher.getAllLevels());\n  \n      List<LoggerInfo> loggers = new ArrayList<>(watcher.getAllLoggers());\n      Collections.sort(loggers);\n  \n      List<SimpleOrderedMap<?>> info = new ArrayList<>();\n      for(LoggerInfo wrap:loggers) {\n        info.add(wrap.getInfo());\n      }\n      rsp.add(\"loggers\", info);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Don't do anything if the framework is unknown\n    if(watcher==null) {\n      rsp.add(\"error\", \"Logging Not Initialized\");\n      return;\n    }\n    rsp.add(\"watcher\", watcher.getName());\n    \n    SolrParams params = req.getParams();\n    if(params.get(\"threshold\")!=null) {\n      watcher.setThreshold(params.get(\"threshold\"));\n    }\n    \n    // Write something at each level\n    if(params.get(\"test\")!=null) {\n      log.trace(\"trace message\");\n      log.debug( \"debug message\");\n      log.info(\"info (with exception)\", new RuntimeException(\"test\") );\n      log.warn(\"warn (with exception)\", new RuntimeException(\"test\") );\n      log.error(\"error (with exception)\", new RuntimeException(\"test\") );\n    }\n    \n    String[] set = params.getParams(\"set\");\n    if (set != null) {\n      for (String pair : set) {\n        String[] split = pair.split(\":\");\n        if (split.length != 2) {\n          throw new SolrException(\n              SolrException.ErrorCode.SERVER_ERROR,\n              \"Invalid format, expected level:value, got \" + pair);\n        }\n        String category = split[0];\n        String level = split[1];\n\n        watcher.setLogLevel(category, level);\n      }\n    }\n    \n    String since = req.getParams().get(\"since\");\n    if(since != null) {\n      long time = -1;\n      try {\n        time = Long.parseLong(since);\n      }\n      catch(Exception ex) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"invalid timestamp: \"+since);\n      }\n      AtomicBoolean found = new AtomicBoolean(false);\n      SolrDocumentList docs = watcher.getHistory(time, found);\n      if(docs==null) {\n        rsp.add(\"error\", \"History not enabled\");\n        return;\n      }\n      else {\n        SimpleOrderedMap<Object> info = new SimpleOrderedMap<>();\n        if(time>0) {\n          info.add(\"since\", time);\n          info.add(\"found\", found);\n        }\n        else {\n          info.add(\"levels\", watcher.getAllLevels()); // show for the first request\n        }\n        info.add(\"last\", watcher.getLastEvent());\n        info.add(\"buffer\", watcher.getHistorySize());\n        info.add(\"threshold\", watcher.getThreshold());\n        \n        rsp.add(\"info\", info);\n        rsp.add(\"history\", docs);\n      }\n    }\n    else {\n      rsp.add(\"levels\", watcher.getAllLevels());\n  \n      List<LoggerInfo> loggers = new ArrayList<>(watcher.getAllLoggers());\n      Collections.sort(loggers);\n  \n      List<SimpleOrderedMap<?>> info = new ArrayList<>();\n      for(LoggerInfo wrap:loggers) {\n        info.add(wrap.getInfo());\n      }\n      rsp.add(\"loggers\", info);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LoggingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LoggingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Don't do anything if the framework is unknown\n    if(watcher==null) {\n      rsp.add(\"error\", \"Logging Not Initialized\");\n      return;\n    }\n    rsp.add(\"watcher\", watcher.getName());\n    \n    SolrParams params = req.getParams();\n    if(params.get(\"threshold\")!=null) {\n      watcher.setThreshold(params.get(\"threshold\"));\n    }\n    \n    // Write something at each level\n    if(params.get(\"test\")!=null) {\n      log.trace(\"trace message\");\n      log.debug( \"debug message\");\n      log.info(\"info (with exception)\", new RuntimeException(\"test\") );\n      log.warn(\"warn (with exception)\", new RuntimeException(\"test\") );\n      log.error(\"error (with exception)\", new RuntimeException(\"test\") );\n    }\n    \n    String[] set = params.getParams(\"set\");\n    if (set != null) {\n      for (String pair : set) {\n        String[] split = pair.split(\":\");\n        if (split.length != 2) {\n          throw new SolrException(\n              SolrException.ErrorCode.SERVER_ERROR,\n              \"Invalid format, expected level:value, got \" + pair);\n        }\n        String category = split[0];\n        String level = split[1];\n\n        watcher.setLogLevel(category, level);\n      }\n    }\n    \n    String since = req.getParams().get(\"since\");\n    if(since != null) {\n      long time = -1;\n      try {\n        time = Long.parseLong(since);\n      }\n      catch(Exception ex) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"invalid timestamp: \"+since);\n      }\n      AtomicBoolean found = new AtomicBoolean(false);\n      SolrDocumentList docs = watcher.getHistory(time, found);\n      if(docs==null) {\n        rsp.add(\"error\", \"History not enabled\");\n        return;\n      }\n      else {\n        SimpleOrderedMap<Object> info = new SimpleOrderedMap<>();\n        if(time>0) {\n          info.add(\"since\", time);\n          info.add(\"found\", found.get());\n        }\n        else {\n          info.add(\"levels\", watcher.getAllLevels()); // show for the first request\n        }\n        info.add(\"last\", watcher.getLastEvent());\n        info.add(\"buffer\", watcher.getHistorySize());\n        info.add(\"threshold\", watcher.getThreshold());\n        \n        rsp.add(\"info\", info);\n        rsp.add(\"history\", docs);\n      }\n    }\n    else {\n      rsp.add(\"levels\", watcher.getAllLevels());\n  \n      List<LoggerInfo> loggers = new ArrayList<>(watcher.getAllLoggers());\n      Collections.sort(loggers);\n  \n      List<SimpleOrderedMap<?>> info = new ArrayList<>();\n      for(LoggerInfo wrap:loggers) {\n        info.add(wrap.getInfo());\n      }\n      rsp.add(\"loggers\", info);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Don't do anything if the framework is unknown\n    if(watcher==null) {\n      rsp.add(\"error\", \"Logging Not Initialized\");\n      return;\n    }\n    rsp.add(\"watcher\", watcher.getName());\n    \n    SolrParams params = req.getParams();\n    if(params.get(\"threshold\")!=null) {\n      watcher.setThreshold(params.get(\"threshold\"));\n    }\n    \n    // Write something at each level\n    if(params.get(\"test\")!=null) {\n      log.trace(\"trace message\");\n      log.debug( \"debug message\");\n      log.info(\"info (with exception)\", new RuntimeException(\"test\") );\n      log.warn(\"warn (with exception)\", new RuntimeException(\"test\") );\n      log.error(\"error (with exception)\", new RuntimeException(\"test\") );\n    }\n    \n    String[] set = params.getParams(\"set\");\n    if (set != null) {\n      for (String pair : set) {\n        String[] split = pair.split(\":\");\n        if (split.length != 2) {\n          throw new SolrException(\n              SolrException.ErrorCode.SERVER_ERROR,\n              \"Invalid format, expected level:value, got \" + pair);\n        }\n        String category = split[0];\n        String level = split[1];\n\n        watcher.setLogLevel(category, level);\n      }\n    }\n    \n    String since = req.getParams().get(\"since\");\n    if(since != null) {\n      long time = -1;\n      try {\n        time = Long.parseLong(since);\n      }\n      catch(Exception ex) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"invalid timestamp: \"+since);\n      }\n      AtomicBoolean found = new AtomicBoolean(false);\n      SolrDocumentList docs = watcher.getHistory(time, found);\n      if(docs==null) {\n        rsp.add(\"error\", \"History not enabled\");\n        return;\n      }\n      else {\n        SimpleOrderedMap<Object> info = new SimpleOrderedMap<>();\n        if(time>0) {\n          info.add(\"since\", time);\n          info.add(\"found\", found);\n        }\n        else {\n          info.add(\"levels\", watcher.getAllLevels()); // show for the first request\n        }\n        info.add(\"last\", watcher.getLastEvent());\n        info.add(\"buffer\", watcher.getHistorySize());\n        info.add(\"threshold\", watcher.getThreshold());\n        \n        rsp.add(\"info\", info);\n        rsp.add(\"history\", docs);\n      }\n    }\n    else {\n      rsp.add(\"levels\", watcher.getAllLevels());\n  \n      List<LoggerInfo> loggers = new ArrayList<>(watcher.getAllLoggers());\n      Collections.sort(loggers);\n  \n      List<SimpleOrderedMap<?>> info = new ArrayList<>();\n      for(LoggerInfo wrap:loggers) {\n        info.add(wrap.getInfo());\n      }\n      rsp.add(\"loggers\", info);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93baf46bd12096e0de407258b3b32cfaaf58e448","date":1522030569,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LoggingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LoggingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Don't do anything if the framework is unknown\n    if (watcher==null) {\n      rsp.add(\"error\", \"Logging Not Initialized\");\n      return;\n    }\n    rsp.add(\"watcher\", watcher.getName());\n    \n    SolrParams params = req.getParams();\n    if(params.get(\"threshold\")!=null) {\n      watcher.setThreshold(params.get(\"threshold\"));\n    }\n    \n    // Write something at each level\n    if(params.get(\"test\")!=null) {\n      log.trace(\"trace message\");\n      log.debug( \"debug message\");\n      log.info(\"info (with exception)\", new RuntimeException(\"test\") );\n      log.warn(\"warn (with exception)\", new RuntimeException(\"test\") );\n      log.error(\"error (with exception)\", new RuntimeException(\"test\") );\n    }\n    \n    String[] set = params.getParams(\"set\");\n    if (set != null) {\n      for (String pair : set) {\n        String[] split = pair.split(\":\");\n        if (split.length != 2) {\n          throw new SolrException(\n              SolrException.ErrorCode.SERVER_ERROR,\n              \"Invalid format, expected level:value, got \" + pair);\n        }\n        String category = split[0];\n        String level = split[1];\n\n        watcher.setLogLevel(category, level);\n      }\n    }\n    \n    String since = req.getParams().get(\"since\");\n    if(since != null) {\n      long time = -1;\n      try {\n        time = Long.parseLong(since);\n      }\n      catch(Exception ex) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"invalid timestamp: \"+since);\n      }\n      AtomicBoolean found = new AtomicBoolean(false);\n      SolrDocumentList docs = watcher.getHistory(time, found);\n      if(docs==null) {\n        rsp.add(\"error\", \"History not enabled\");\n        return;\n      }\n      else {\n        SimpleOrderedMap<Object> info = new SimpleOrderedMap<>();\n        if(time>0) {\n          info.add(\"since\", time);\n          info.add(\"found\", found.get());\n        }\n        else {\n          info.add(\"levels\", watcher.getAllLevels()); // show for the first request\n        }\n        info.add(\"last\", watcher.getLastEvent());\n        info.add(\"buffer\", watcher.getHistorySize());\n        info.add(\"threshold\", watcher.getThreshold());\n        \n        rsp.add(\"info\", info);\n        rsp.add(\"history\", docs);\n      }\n    }\n    else {\n      rsp.add(\"levels\", watcher.getAllLevels());\n  \n      List<LoggerInfo> loggers = new ArrayList<>(watcher.getAllLoggers());\n      Collections.sort(loggers);\n  \n      List<SimpleOrderedMap<?>> info = new ArrayList<>();\n      for (LoggerInfo wrap : loggers) {\n        info.add(wrap.getInfo());\n      }\n      rsp.add(\"loggers\", info);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Don't do anything if the framework is unknown\n    if(watcher==null) {\n      rsp.add(\"error\", \"Logging Not Initialized\");\n      return;\n    }\n    rsp.add(\"watcher\", watcher.getName());\n    \n    SolrParams params = req.getParams();\n    if(params.get(\"threshold\")!=null) {\n      watcher.setThreshold(params.get(\"threshold\"));\n    }\n    \n    // Write something at each level\n    if(params.get(\"test\")!=null) {\n      log.trace(\"trace message\");\n      log.debug( \"debug message\");\n      log.info(\"info (with exception)\", new RuntimeException(\"test\") );\n      log.warn(\"warn (with exception)\", new RuntimeException(\"test\") );\n      log.error(\"error (with exception)\", new RuntimeException(\"test\") );\n    }\n    \n    String[] set = params.getParams(\"set\");\n    if (set != null) {\n      for (String pair : set) {\n        String[] split = pair.split(\":\");\n        if (split.length != 2) {\n          throw new SolrException(\n              SolrException.ErrorCode.SERVER_ERROR,\n              \"Invalid format, expected level:value, got \" + pair);\n        }\n        String category = split[0];\n        String level = split[1];\n\n        watcher.setLogLevel(category, level);\n      }\n    }\n    \n    String since = req.getParams().get(\"since\");\n    if(since != null) {\n      long time = -1;\n      try {\n        time = Long.parseLong(since);\n      }\n      catch(Exception ex) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"invalid timestamp: \"+since);\n      }\n      AtomicBoolean found = new AtomicBoolean(false);\n      SolrDocumentList docs = watcher.getHistory(time, found);\n      if(docs==null) {\n        rsp.add(\"error\", \"History not enabled\");\n        return;\n      }\n      else {\n        SimpleOrderedMap<Object> info = new SimpleOrderedMap<>();\n        if(time>0) {\n          info.add(\"since\", time);\n          info.add(\"found\", found.get());\n        }\n        else {\n          info.add(\"levels\", watcher.getAllLevels()); // show for the first request\n        }\n        info.add(\"last\", watcher.getLastEvent());\n        info.add(\"buffer\", watcher.getHistorySize());\n        info.add(\"threshold\", watcher.getThreshold());\n        \n        rsp.add(\"info\", info);\n        rsp.add(\"history\", docs);\n      }\n    }\n    else {\n      rsp.add(\"levels\", watcher.getAllLevels());\n  \n      List<LoggerInfo> loggers = new ArrayList<>(watcher.getAllLoggers());\n      Collections.sort(loggers);\n  \n      List<SimpleOrderedMap<?>> info = new ArrayList<>();\n      for(LoggerInfo wrap:loggers) {\n        info.add(wrap.getInfo());\n      }\n      rsp.add(\"loggers\", info);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f67a921f6ec5ab488ce397cf05f95fcd8ce631b6","date":1522059649,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LoggingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LoggingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Don't do anything if the framework is unknown\n    if (watcher==null) {\n      rsp.add(\"error\", \"Logging Not Initialized\");\n      return;\n    }\n    rsp.add(\"watcher\", watcher.getName());\n    \n    SolrParams params = req.getParams();\n    if(params.get(\"threshold\")!=null) {\n      watcher.setThreshold(params.get(\"threshold\"));\n    }\n    \n    // Write something at each level\n    if(params.get(\"test\")!=null) {\n      log.trace(\"trace message\");\n      log.debug( \"debug message\");\n      log.info(\"info (with exception)\", new RuntimeException(\"test\") );\n      log.warn(\"warn (with exception)\", new RuntimeException(\"test\") );\n      log.error(\"error (with exception)\", new RuntimeException(\"test\") );\n    }\n    \n    String[] set = params.getParams(\"set\");\n    if (set != null) {\n      for (String pair : set) {\n        String[] split = pair.split(\":\");\n        if (split.length != 2) {\n          throw new SolrException(\n              SolrException.ErrorCode.SERVER_ERROR,\n              \"Invalid format, expected level:value, got \" + pair);\n        }\n        String category = split[0];\n        String level = split[1];\n\n        watcher.setLogLevel(category, level);\n      }\n    }\n    \n    String since = req.getParams().get(\"since\");\n    if(since != null) {\n      long time = -1;\n      try {\n        time = Long.parseLong(since);\n      }\n      catch(Exception ex) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"invalid timestamp: \"+since);\n      }\n      AtomicBoolean found = new AtomicBoolean(false);\n      SolrDocumentList docs = watcher.getHistory(time, found);\n      if(docs==null) {\n        rsp.add(\"error\", \"History not enabled\");\n        return;\n      }\n      else {\n        SimpleOrderedMap<Object> info = new SimpleOrderedMap<>();\n        if(time>0) {\n          info.add(\"since\", time);\n          info.add(\"found\", found.get());\n        }\n        else {\n          info.add(\"levels\", watcher.getAllLevels()); // show for the first request\n        }\n        info.add(\"last\", watcher.getLastEvent());\n        info.add(\"buffer\", watcher.getHistorySize());\n        info.add(\"threshold\", watcher.getThreshold());\n        \n        rsp.add(\"info\", info);\n        rsp.add(\"history\", docs);\n      }\n    }\n    else {\n      rsp.add(\"levels\", watcher.getAllLevels());\n  \n      List<LoggerInfo> loggers = new ArrayList<>(watcher.getAllLoggers());\n      Collections.sort(loggers);\n  \n      List<SimpleOrderedMap<?>> info = new ArrayList<>();\n      for (LoggerInfo wrap : loggers) {\n        info.add(wrap.getInfo());\n      }\n      rsp.add(\"loggers\", info);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Don't do anything if the framework is unknown\n    if(watcher==null) {\n      rsp.add(\"error\", \"Logging Not Initialized\");\n      return;\n    }\n    rsp.add(\"watcher\", watcher.getName());\n    \n    SolrParams params = req.getParams();\n    if(params.get(\"threshold\")!=null) {\n      watcher.setThreshold(params.get(\"threshold\"));\n    }\n    \n    // Write something at each level\n    if(params.get(\"test\")!=null) {\n      log.trace(\"trace message\");\n      log.debug( \"debug message\");\n      log.info(\"info (with exception)\", new RuntimeException(\"test\") );\n      log.warn(\"warn (with exception)\", new RuntimeException(\"test\") );\n      log.error(\"error (with exception)\", new RuntimeException(\"test\") );\n    }\n    \n    String[] set = params.getParams(\"set\");\n    if (set != null) {\n      for (String pair : set) {\n        String[] split = pair.split(\":\");\n        if (split.length != 2) {\n          throw new SolrException(\n              SolrException.ErrorCode.SERVER_ERROR,\n              \"Invalid format, expected level:value, got \" + pair);\n        }\n        String category = split[0];\n        String level = split[1];\n\n        watcher.setLogLevel(category, level);\n      }\n    }\n    \n    String since = req.getParams().get(\"since\");\n    if(since != null) {\n      long time = -1;\n      try {\n        time = Long.parseLong(since);\n      }\n      catch(Exception ex) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"invalid timestamp: \"+since);\n      }\n      AtomicBoolean found = new AtomicBoolean(false);\n      SolrDocumentList docs = watcher.getHistory(time, found);\n      if(docs==null) {\n        rsp.add(\"error\", \"History not enabled\");\n        return;\n      }\n      else {\n        SimpleOrderedMap<Object> info = new SimpleOrderedMap<>();\n        if(time>0) {\n          info.add(\"since\", time);\n          info.add(\"found\", found.get());\n        }\n        else {\n          info.add(\"levels\", watcher.getAllLevels()); // show for the first request\n        }\n        info.add(\"last\", watcher.getLastEvent());\n        info.add(\"buffer\", watcher.getHistorySize());\n        info.add(\"threshold\", watcher.getThreshold());\n        \n        rsp.add(\"info\", info);\n        rsp.add(\"history\", docs);\n      }\n    }\n    else {\n      rsp.add(\"levels\", watcher.getAllLevels());\n  \n      List<LoggerInfo> loggers = new ArrayList<>(watcher.getAllLoggers());\n      Collections.sort(loggers);\n  \n      List<SimpleOrderedMap<?>> info = new ArrayList<>();\n      for(LoggerInfo wrap:loggers) {\n        info.add(wrap.getInfo());\n      }\n      rsp.add(\"loggers\", info);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LoggingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LoggingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Don't do anything if the framework is unknown\n    if (watcher==null) {\n      rsp.add(\"error\", \"Logging Not Initialized\");\n      return;\n    }\n    rsp.add(\"watcher\", watcher.getName());\n    \n    SolrParams params = req.getParams();\n    if(params.get(\"threshold\")!=null) {\n      watcher.setThreshold(params.get(\"threshold\"));\n    }\n    \n    // Write something at each level\n    if(params.get(\"test\")!=null) {\n      log.trace(\"trace message\");\n      log.debug( \"debug message\");\n      RuntimeException exc = new RuntimeException(\"test\");\n      log.info(\"info (with exception) INFO\", exc );\n      log.warn(\"warn (with exception) WARN\", exc );\n      log.error(\"error (with exception) ERROR\", exc );\n    }\n    \n    String[] set = params.getParams(\"set\");\n    if (set != null) {\n      for (String pair : set) {\n        String[] split = pair.split(\":\");\n        if (split.length != 2) {\n          throw new SolrException(\n              SolrException.ErrorCode.SERVER_ERROR,\n              \"Invalid format, expected level:value, got \" + pair);\n        }\n        String category = split[0];\n        String level = split[1];\n\n        watcher.setLogLevel(category, level);\n      }\n    }\n    \n    String since = req.getParams().get(\"since\");\n    if(since != null) {\n      long time = -1;\n      try {\n        time = Long.parseLong(since);\n      }\n      catch(Exception ex) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"invalid timestamp: \"+since);\n      }\n      AtomicBoolean found = new AtomicBoolean(false);\n      SolrDocumentList docs = watcher.getHistory(time, found);\n      if(docs==null) {\n        rsp.add(\"error\", \"History not enabled\");\n        return;\n      }\n      else {\n        SimpleOrderedMap<Object> info = new SimpleOrderedMap<>();\n        if(time>0) {\n          info.add(\"since\", time);\n          info.add(\"found\", found.get());\n        }\n        else {\n          info.add(\"levels\", watcher.getAllLevels()); // show for the first request\n        }\n        info.add(\"last\", watcher.getLastEvent());\n        info.add(\"buffer\", watcher.getHistorySize());\n        info.add(\"threshold\", watcher.getThreshold());\n        \n        rsp.add(\"info\", info);\n        rsp.add(\"history\", docs);\n      }\n    }\n    else {\n      rsp.add(\"levels\", watcher.getAllLevels());\n  \n      List<LoggerInfo> loggers = new ArrayList<>(watcher.getAllLoggers());\n      Collections.sort(loggers);\n  \n      List<SimpleOrderedMap<?>> info = new ArrayList<>();\n      for (LoggerInfo wrap : loggers) {\n        info.add(wrap.getInfo());\n      }\n      rsp.add(\"loggers\", info);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Don't do anything if the framework is unknown\n    if (watcher==null) {\n      rsp.add(\"error\", \"Logging Not Initialized\");\n      return;\n    }\n    rsp.add(\"watcher\", watcher.getName());\n    \n    SolrParams params = req.getParams();\n    if(params.get(\"threshold\")!=null) {\n      watcher.setThreshold(params.get(\"threshold\"));\n    }\n    \n    // Write something at each level\n    if(params.get(\"test\")!=null) {\n      log.trace(\"trace message\");\n      log.debug( \"debug message\");\n      log.info(\"info (with exception)\", new RuntimeException(\"test\") );\n      log.warn(\"warn (with exception)\", new RuntimeException(\"test\") );\n      log.error(\"error (with exception)\", new RuntimeException(\"test\") );\n    }\n    \n    String[] set = params.getParams(\"set\");\n    if (set != null) {\n      for (String pair : set) {\n        String[] split = pair.split(\":\");\n        if (split.length != 2) {\n          throw new SolrException(\n              SolrException.ErrorCode.SERVER_ERROR,\n              \"Invalid format, expected level:value, got \" + pair);\n        }\n        String category = split[0];\n        String level = split[1];\n\n        watcher.setLogLevel(category, level);\n      }\n    }\n    \n    String since = req.getParams().get(\"since\");\n    if(since != null) {\n      long time = -1;\n      try {\n        time = Long.parseLong(since);\n      }\n      catch(Exception ex) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"invalid timestamp: \"+since);\n      }\n      AtomicBoolean found = new AtomicBoolean(false);\n      SolrDocumentList docs = watcher.getHistory(time, found);\n      if(docs==null) {\n        rsp.add(\"error\", \"History not enabled\");\n        return;\n      }\n      else {\n        SimpleOrderedMap<Object> info = new SimpleOrderedMap<>();\n        if(time>0) {\n          info.add(\"since\", time);\n          info.add(\"found\", found.get());\n        }\n        else {\n          info.add(\"levels\", watcher.getAllLevels()); // show for the first request\n        }\n        info.add(\"last\", watcher.getLastEvent());\n        info.add(\"buffer\", watcher.getHistorySize());\n        info.add(\"threshold\", watcher.getThreshold());\n        \n        rsp.add(\"info\", info);\n        rsp.add(\"history\", docs);\n      }\n    }\n    else {\n      rsp.add(\"levels\", watcher.getAllLevels());\n  \n      List<LoggerInfo> loggers = new ArrayList<>(watcher.getAllLoggers());\n      Collections.sort(loggers);\n  \n      List<SimpleOrderedMap<?>> info = new ArrayList<>();\n      for (LoggerInfo wrap : loggers) {\n        info.add(wrap.getInfo());\n      }\n      rsp.add(\"loggers\", info);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba055e19afc289adcb5bedaf68513793a7254012","date":1591268575,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LoggingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LoggingHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Don't do anything if the framework is unknown\n    if (watcher==null) {\n      rsp.add(\"error\", \"Logging Not Initialized\");\n      return;\n    }\n    rsp.add(\"watcher\", watcher.getName());\n    \n    SolrParams params = req.getParams();\n    if(params.get(\"threshold\")!=null) {\n      watcher.setThreshold(params.get(\"threshold\"));\n    }\n    \n    // Write something at each level\n    if(params.get(\"test\")!=null) {\n      log.trace(\"trace message\");\n      log.debug( \"debug message\");\n      RuntimeException exc = new RuntimeException(\"test\");\n      log.info(\"info (with exception) INFO\", exc );\n      log.warn(\"warn (with exception) WARN\", exc );\n      log.error(\"error (with exception) ERROR\", exc );\n    }\n    \n    String[] set = params.getParams(\"set\");\n    if (set != null) {\n      for (String pair : set) {\n        String[] split = pair.split(\":\");\n        if (split.length != 2) {\n          throw new SolrException(\n              SolrException.ErrorCode.SERVER_ERROR,\n              \"Invalid format, expected level:value, got \" + pair);\n        }\n        String category = split[0];\n        String level = split[1];\n\n        watcher.setLogLevel(category, level);\n      }\n    }\n    \n    String since = req.getParams().get(\"since\");\n    if(since != null) {\n      long time = -1;\n      try {\n        time = Long.parseLong(since);\n      }\n      catch(Exception ex) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"invalid timestamp: \"+since);\n      }\n      AtomicBoolean found = new AtomicBoolean(false);\n      SolrDocumentList docs = watcher.getHistory(time, found);\n      if(docs==null) {\n        rsp.add(\"error\", \"History not enabled\");\n        return;\n      }\n      else {\n        SimpleOrderedMap<Object> info = new SimpleOrderedMap<>();\n        if(time>0) {\n          info.add(\"since\", time);\n          info.add(\"found\", found.get());\n        }\n        else {\n          info.add(\"levels\", watcher.getAllLevels()); // show for the first request\n        }\n        info.add(\"last\", watcher.getLastEvent());\n        info.add(\"buffer\", watcher.getHistorySize());\n        info.add(\"threshold\", watcher.getThreshold());\n        \n        rsp.add(\"info\", info);\n        rsp.add(\"history\", docs);\n      }\n    }\n    else {\n      rsp.add(\"levels\", watcher.getAllLevels());\n  \n      @SuppressWarnings({\"unchecked\"})\n      List<LoggerInfo> loggers = new ArrayList<>(watcher.getAllLoggers());\n      Collections.sort(loggers);\n  \n      List<SimpleOrderedMap<?>> info = new ArrayList<>();\n      for (LoggerInfo wrap : loggers) {\n        info.add(wrap.getInfo());\n      }\n      rsp.add(\"loggers\", info);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    // Don't do anything if the framework is unknown\n    if (watcher==null) {\n      rsp.add(\"error\", \"Logging Not Initialized\");\n      return;\n    }\n    rsp.add(\"watcher\", watcher.getName());\n    \n    SolrParams params = req.getParams();\n    if(params.get(\"threshold\")!=null) {\n      watcher.setThreshold(params.get(\"threshold\"));\n    }\n    \n    // Write something at each level\n    if(params.get(\"test\")!=null) {\n      log.trace(\"trace message\");\n      log.debug( \"debug message\");\n      RuntimeException exc = new RuntimeException(\"test\");\n      log.info(\"info (with exception) INFO\", exc );\n      log.warn(\"warn (with exception) WARN\", exc );\n      log.error(\"error (with exception) ERROR\", exc );\n    }\n    \n    String[] set = params.getParams(\"set\");\n    if (set != null) {\n      for (String pair : set) {\n        String[] split = pair.split(\":\");\n        if (split.length != 2) {\n          throw new SolrException(\n              SolrException.ErrorCode.SERVER_ERROR,\n              \"Invalid format, expected level:value, got \" + pair);\n        }\n        String category = split[0];\n        String level = split[1];\n\n        watcher.setLogLevel(category, level);\n      }\n    }\n    \n    String since = req.getParams().get(\"since\");\n    if(since != null) {\n      long time = -1;\n      try {\n        time = Long.parseLong(since);\n      }\n      catch(Exception ex) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"invalid timestamp: \"+since);\n      }\n      AtomicBoolean found = new AtomicBoolean(false);\n      SolrDocumentList docs = watcher.getHistory(time, found);\n      if(docs==null) {\n        rsp.add(\"error\", \"History not enabled\");\n        return;\n      }\n      else {\n        SimpleOrderedMap<Object> info = new SimpleOrderedMap<>();\n        if(time>0) {\n          info.add(\"since\", time);\n          info.add(\"found\", found.get());\n        }\n        else {\n          info.add(\"levels\", watcher.getAllLevels()); // show for the first request\n        }\n        info.add(\"last\", watcher.getLastEvent());\n        info.add(\"buffer\", watcher.getHistorySize());\n        info.add(\"threshold\", watcher.getThreshold());\n        \n        rsp.add(\"info\", info);\n        rsp.add(\"history\", docs);\n      }\n    }\n    else {\n      rsp.add(\"levels\", watcher.getAllLevels());\n  \n      List<LoggerInfo> loggers = new ArrayList<>(watcher.getAllLoggers());\n      Collections.sort(loggers);\n  \n      List<SimpleOrderedMap<?>> info = new ArrayList<>();\n      for (LoggerInfo wrap : loggers) {\n        info.add(wrap.getInfo());\n      }\n      rsp.add(\"loggers\", info);\n    }\n    rsp.setHttpCaching(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["829761a123d59d7a3c39e5f13fbc03de63f55ce5"],"ba055e19afc289adcb5bedaf68513793a7254012":["575e66bd4b2349209027f6801184da7fc3cba13f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"93baf46bd12096e0de407258b3b32cfaaf58e448":["65780dd0a70597aa46f16a2a42093215ca237272"],"829761a123d59d7a3c39e5f13fbc03de63f55ce5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"575e66bd4b2349209027f6801184da7fc3cba13f":["f67a921f6ec5ab488ce397cf05f95fcd8ce631b6"],"65780dd0a70597aa46f16a2a42093215ca237272":["60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9"],"fab172655716b96f7e42376116235017a922de3a":["60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9","65780dd0a70597aa46f16a2a42093215ca237272"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba055e19afc289adcb5bedaf68513793a7254012"],"60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"f67a921f6ec5ab488ce397cf05f95fcd8ce631b6":["65780dd0a70597aa46f16a2a42093215ca237272","93baf46bd12096e0de407258b3b32cfaaf58e448"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9"],"ba055e19afc289adcb5bedaf68513793a7254012":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["829761a123d59d7a3c39e5f13fbc03de63f55ce5"],"93baf46bd12096e0de407258b3b32cfaaf58e448":["f67a921f6ec5ab488ce397cf05f95fcd8ce631b6"],"829761a123d59d7a3c39e5f13fbc03de63f55ce5":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"575e66bd4b2349209027f6801184da7fc3cba13f":["ba055e19afc289adcb5bedaf68513793a7254012"],"65780dd0a70597aa46f16a2a42093215ca237272":["93baf46bd12096e0de407258b3b32cfaaf58e448","fab172655716b96f7e42376116235017a922de3a","f67a921f6ec5ab488ce397cf05f95fcd8ce631b6"],"fab172655716b96f7e42376116235017a922de3a":[],"f67a921f6ec5ab488ce397cf05f95fcd8ce631b6":["575e66bd4b2349209027f6801184da7fc3cba13f"],"60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9":["65780dd0a70597aa46f16a2a42093215ca237272","fab172655716b96f7e42376116235017a922de3a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fab172655716b96f7e42376116235017a922de3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}