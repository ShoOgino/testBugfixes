{"path":"contrib/gdata-server/src/gom/java/org/apache/lucene/gdata/gom/core/utils/AtomParserUtils#compareAlternateLinks(GOMLink,GOMLink).mjava","commits":[{"id":"ebe0cf7fd7142a4f158b89ac046e386f7cf8a212","date":1166013594,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/gom/java/org/apache/lucene/gdata/gom/core/utils/AtomParserUtils#compareAlternateLinks(GOMLink,GOMLink).mjava","pathOld":"/dev/null","sourceNew":"\t/**\n\t * Compares two links with rel attribute \"alternate\" Checks if href and type\n\t * are equal\n\t * \n\t * @param left -\n\t *            left link to compare\n\t * @param right -\n\t *            right link to compare\n\t * @return <code>true</code> if and only if href and type are equal,\n\t *         otherwise <code>false</code>\n\t */\n\tpublic static boolean compareAlternateLinks(GOMLink left, GOMLink right) {\n\t\tif ((left.getType() == null) ^ right.getType() == null\n\t\t\t\t|| (left.getType() == null && right.getType() == null)) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\tif (!left.getType().equalsIgnoreCase(right.getType()))\n\t\t\t\treturn false;\n\t\t}\n\n\t\tif (((left.getHrefLang() == null) ^ right.getHrefLang() == null)\n\t\t\t\t|| (left.getHrefLang() == null && right.getHrefLang() == null)) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\tif (!left.getHrefLang().equalsIgnoreCase(right.getHrefLang()))\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe","date":1166036663,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/gom/src/java/org/apache/lucene/gdata/gom/core/utils/AtomParserUtils#compareAlternateLinks(GOMLink,GOMLink).mjava","pathOld":"contrib/gdata-server/src/gom/java/org/apache/lucene/gdata/gom/core/utils/AtomParserUtils#compareAlternateLinks(GOMLink,GOMLink).mjava","sourceNew":"\t/**\n\t * Compares two links with rel attribute \"alternate\" Checks if href and type\n\t * are equal\n\t * \n\t * @param left -\n\t *            left link to compare\n\t * @param right -\n\t *            right link to compare\n\t * @return <code>true</code> if and only if href and type are equal,\n\t *         otherwise <code>false</code>\n\t */\n\tpublic static boolean compareAlternateLinks(GOMLink left, GOMLink right) {\n\t\tif ((left.getType() == null) ^ right.getType() == null\n\t\t\t\t|| (left.getType() == null && right.getType() == null)) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\tif (!left.getType().equalsIgnoreCase(right.getType()))\n\t\t\t\treturn false;\n\t\t}\n\n\t\tif (((left.getHrefLang() == null) ^ right.getHrefLang() == null)\n\t\t\t\t|| (left.getHrefLang() == null && right.getHrefLang() == null)) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\tif (!left.getHrefLang().equalsIgnoreCase(right.getHrefLang()))\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\n\t}\n\n","sourceOld":"\t/**\n\t * Compares two links with rel attribute \"alternate\" Checks if href and type\n\t * are equal\n\t * \n\t * @param left -\n\t *            left link to compare\n\t * @param right -\n\t *            right link to compare\n\t * @return <code>true</code> if and only if href and type are equal,\n\t *         otherwise <code>false</code>\n\t */\n\tpublic static boolean compareAlternateLinks(GOMLink left, GOMLink right) {\n\t\tif ((left.getType() == null) ^ right.getType() == null\n\t\t\t\t|| (left.getType() == null && right.getType() == null)) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\tif (!left.getType().equalsIgnoreCase(right.getType()))\n\t\t\t\treturn false;\n\t\t}\n\n\t\tif (((left.getHrefLang() == null) ^ right.getHrefLang() == null)\n\t\t\t\t|| (left.getHrefLang() == null && right.getHrefLang() == null)) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\tif (!left.getHrefLang().equalsIgnoreCase(right.getHrefLang()))\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["ebe0cf7fd7142a4f158b89ac046e386f7cf8a212"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ebe0cf7fd7142a4f158b89ac046e386f7cf8a212":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"]},"commit2Childs":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ebe0cf7fd7142a4f158b89ac046e386f7cf8a212"],"ebe0cf7fd7142a4f158b89ac046e386f7cf8a212":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}