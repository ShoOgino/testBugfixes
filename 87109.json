{"path":"lucene/core/src/java/org/apache/lucene/util/WAH8DocIdSet.WordBuilder#writeSequence().mjava","commits":[{"id":"21fd82f9528d0f0c70205bd925dd0b0dce14fdab","date":1376071243,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/WAH8DocIdSet.WordBuilder#writeSequence().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/WAH8DocIdSet.WordBuilder#writeSequence(int).mjava","sourceNew":"    void writeSequence() {\n      assert sequenceIsConsistent();\n      try {\n        writeHeader(reverse, clean, dirtyWords.length);\n      } catch (IOException cannotHappen) {\n        throw new AssertionError(cannotHappen);\n      }\n      out.writeBytes(dirtyWords.bytes, 0, dirtyWords.length);\n      dirtyWords.length = 0;\n      ++numSequences;\n    }\n\n","sourceOld":"    void writeSequence(int cleanLength) {\n      try {\n        writeHeader(cleanLength);\n        out.writeBytes(dirtyWords.bytes, dirtyWords.length);\n      } catch (IOException cannotHappen) {\n        throw new AssertionError(cannotHappen);\n      }\n      dirtyWords.length = 0;\n      ++numSequences;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/WAH8DocIdSet.WordBuilder#writeSequence().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/WAH8DocIdSet.WordBuilder#writeSequence(int).mjava","sourceNew":"    void writeSequence() {\n      assert sequenceIsConsistent();\n      try {\n        writeHeader(reverse, clean, dirtyWords.length);\n      } catch (IOException cannotHappen) {\n        throw new AssertionError(cannotHappen);\n      }\n      out.writeBytes(dirtyWords.bytes, 0, dirtyWords.length);\n      dirtyWords.length = 0;\n      ++numSequences;\n    }\n\n","sourceOld":"    void writeSequence(int cleanLength) {\n      try {\n        writeHeader(cleanLength);\n        out.writeBytes(dirtyWords.bytes, dirtyWords.length);\n      } catch (IOException cannotHappen) {\n        throw new AssertionError(cannotHappen);\n      }\n      dirtyWords.length = 0;\n      ++numSequences;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0557ea16725aaafcd3dd3d3ec90445ff1ce22eb8","date":1412674810,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/WAH8DocIdSet.WordBuilder#writeSequence().mjava","sourceNew":null,"sourceOld":"    void writeSequence() {\n      assert sequenceIsConsistent();\n      try {\n        writeHeader(reverse, clean, dirtyWords.length);\n      } catch (IOException cannotHappen) {\n        throw new AssertionError(cannotHappen);\n      }\n      out.writeBytes(dirtyWords.bytes, 0, dirtyWords.length);\n      dirtyWords.length = 0;\n      ++numSequences;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/WAH8DocIdSet.WordBuilder#writeSequence().mjava","sourceNew":null,"sourceOld":"    void writeSequence() {\n      assert sequenceIsConsistent();\n      try {\n        writeHeader(reverse, clean, dirtyWords.length);\n      } catch (IOException cannotHappen) {\n        throw new AssertionError(cannotHappen);\n      }\n      out.writeBytes(dirtyWords.bytes, 0, dirtyWords.length);\n      dirtyWords.length = 0;\n      ++numSequences;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55980207f1977bd1463465de1659b821347e2fa8":["21fd82f9528d0f0c70205bd925dd0b0dce14fdab","0557ea16725aaafcd3dd3d3ec90445ff1ce22eb8"],"0557ea16725aaafcd3dd3d3ec90445ff1ce22eb8":["21fd82f9528d0f0c70205bd925dd0b0dce14fdab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"21fd82f9528d0f0c70205bd925dd0b0dce14fdab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0557ea16725aaafcd3dd3d3ec90445ff1ce22eb8"]},"commit2Childs":{"55980207f1977bd1463465de1659b821347e2fa8":[],"0557ea16725aaafcd3dd3d3ec90445ff1ce22eb8":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["21fd82f9528d0f0c70205bd925dd0b0dce14fdab","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"21fd82f9528d0f0c70205bd925dd0b0dce14fdab":["55980207f1977bd1463465de1659b821347e2fa8","0557ea16725aaafcd3dd3d3ec90445ff1ce22eb8"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}