{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/IndexDictionary.Builder#add(BytesRef,long).mjava","commits":[{"id":"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89","date":1567784912,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/IndexDictionary.Builder#add(BytesRef,long).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Adds a [block key - block file pointer] entry to the dictionary.\n     * <p>\n     * The Uniform Split technique adds block keys in the dictionary. See\n     * {@link BlockReader} and {@link TermBytes} for more info about block\n     * key and minimal distinguishing prefix (MDP).\n     * <p>\n     * All block keys are added in strictly increasing order of the block file pointers,\n     * this allows long encoding optimizations such as with {@link org.apache.lucene.util.fst.PositiveIntOutputs}\n     * for {@link org.apache.lucene.util.fst.FST}.\n     *\n     * @param blockKey         The block key which is the minimal distinguishing\n     *                         prefix (MDP) of the first term of a block.\n     * @param blockFilePointer Non-negative file pointer to the start of the\n     *                         block in the block file.\n     */\n    void add(BytesRef blockKey, long blockFilePointer);\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42f6185d883389450f593fb00103d2e89a0b8336","date":1577705030,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/IndexDictionary.Builder#add(BytesRef,long).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/IndexDictionary.Builder#add(BytesRef,long).mjava","sourceNew":"    /**\n     * Adds a [block key - block file pointer] entry to the dictionary.\n     * <p>\n     * The Uniform Split technique adds block keys in the dictionary. See\n     * {@link BlockReader} and {@link TermBytes} for more info about block\n     * key and minimal distinguishing prefix (MDP).\n     * <p>\n     * All block keys are added in strictly increasing order of the block file pointers,\n     * this allows long encoding optimizations such as with {@link org.apache.lucene.util.fst.PositiveIntOutputs}\n     * for {@link org.apache.lucene.util.fst.FST}.\n     *\n     * @param blockKey         The block key which is the minimal distinguishing\n     *                         prefix (MDP) of the first term of a block.\n     * @param blockFilePointer Non-negative file pointer to the start of the\n     *                         block in the block file.\n     */\n    void add(BytesRef blockKey, long blockFilePointer) throws IOException;\n\n","sourceOld":"    /**\n     * Adds a [block key - block file pointer] entry to the dictionary.\n     * <p>\n     * The Uniform Split technique adds block keys in the dictionary. See\n     * {@link BlockReader} and {@link TermBytes} for more info about block\n     * key and minimal distinguishing prefix (MDP).\n     * <p>\n     * All block keys are added in strictly increasing order of the block file pointers,\n     * this allows long encoding optimizations such as with {@link org.apache.lucene.util.fst.PositiveIntOutputs}\n     * for {@link org.apache.lucene.util.fst.FST}.\n     *\n     * @param blockKey         The block key which is the minimal distinguishing\n     *                         prefix (MDP) of the first term of a block.\n     * @param blockFilePointer Non-negative file pointer to the start of the\n     *                         block in the block file.\n     */\n    void add(BytesRef blockKey, long blockFilePointer);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62e478fa10594a2ef9d1ddf7d195020300453c4e","date":1577783287,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/IndexDictionary.Builder#add(BytesRef,long).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/IndexDictionary.Builder#add(BytesRef,long).mjava","sourceNew":"    /**\n     * Adds a [block key - block file pointer] entry to the dictionary.\n     * <p>\n     * The Uniform Split technique adds block keys in the dictionary. See\n     * {@link BlockReader} and {@link TermBytes} for more info about block\n     * key and minimal distinguishing prefix (MDP).\n     * <p>\n     * All block keys are added in strictly increasing order of the block file pointers,\n     * this allows long encoding optimizations such as with {@link org.apache.lucene.util.fst.PositiveIntOutputs}\n     * for {@link org.apache.lucene.util.fst.FST}.\n     *\n     * @param blockKey         The block key which is the minimal distinguishing\n     *                         prefix (MDP) of the first term of a block.\n     * @param blockFilePointer Non-negative file pointer to the start of the\n     *                         block in the block file.\n     */\n    void add(BytesRef blockKey, long blockFilePointer) throws IOException;\n\n","sourceOld":"    /**\n     * Adds a [block key - block file pointer] entry to the dictionary.\n     * <p>\n     * The Uniform Split technique adds block keys in the dictionary. See\n     * {@link BlockReader} and {@link TermBytes} for more info about block\n     * key and minimal distinguishing prefix (MDP).\n     * <p>\n     * All block keys are added in strictly increasing order of the block file pointers,\n     * this allows long encoding optimizations such as with {@link org.apache.lucene.util.fst.PositiveIntOutputs}\n     * for {@link org.apache.lucene.util.fst.FST}.\n     *\n     * @param blockKey         The block key which is the minimal distinguishing\n     *                         prefix (MDP) of the first term of a block.\n     * @param blockFilePointer Non-negative file pointer to the start of the\n     *                         block in the block file.\n     */\n    void add(BytesRef blockKey, long blockFilePointer);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"42f6185d883389450f593fb00103d2e89a0b8336":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"62e478fa10594a2ef9d1ddf7d195020300453c4e":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89","42f6185d883389450f593fb00103d2e89a0b8336"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["42f6185d883389450f593fb00103d2e89a0b8336"]},"commit2Childs":{"42f6185d883389450f593fb00103d2e89a0b8336":["62e478fa10594a2ef9d1ddf7d195020300453c4e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89"],"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89":["42f6185d883389450f593fb00103d2e89a0b8336","62e478fa10594a2ef9d1ddf7d195020300453c4e"],"62e478fa10594a2ef9d1ddf7d195020300453c4e":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["62e478fa10594a2ef9d1ddf7d195020300453c4e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}