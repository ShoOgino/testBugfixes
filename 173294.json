{"path":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestExceptionFromTokenStream().mjava","commits":[{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestExceptionFromTokenStream().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","sourceNew":"  // LUCENE-1072\n  public void xxxtestExceptionFromTokenStream() throws IOException {\n    RAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new Analyzer() {\n\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new StandardTokenizer(reader)) {\n          private int count = 0;\n\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    }, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    TermDocs tdocs = reader.termDocs(t);\n    int count = 0;\n    while(tdocs.next()) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    RAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new Analyzer() {\n\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new StandardTokenizer(reader)) {\n          private int count = 0;\n\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    }, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    TermDocs tdocs = reader.termDocs(t);\n    int count = 0;\n    while(tdocs.next()) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionFromTokenStream().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestExceptionFromTokenStream().mjava","sourceNew":"  // LUCENE-1072\n  public void testExceptionFromTokenStream() throws IOException {\n    RAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new Analyzer() {\n\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new StandardTokenizer(reader)) {\n          private int count = 0;\n\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    }, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    TermDocs tdocs = reader.termDocs(t);\n    int count = 0;\n    while(tdocs.next()) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072\n  public void xxxtestExceptionFromTokenStream() throws IOException {\n    RAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new Analyzer() {\n\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenFilter(new StandardTokenizer(reader)) {\n          private int count = 0;\n\n          public boolean incrementToken() throws IOException {\n            if (count++ == 5) {\n              throw new IOException();\n            }\n            return input.incrementToken();\n          }\n        };\n      }\n\n    }, true, IndexWriter.MaxFieldLength.LIMITED);\n\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit expected exception\");\n    } catch (Exception e) {\n    }\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    // Make sure we can add another normal document\n    doc = new Document();\n    doc.add(new Field(\"content\", \"aa bb cc dd\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    final Term t = new Term(\"content\", \"aa\");\n    assertEquals(reader.docFreq(t), 3);\n\n    // Make sure the doc that hit the exception was marked\n    // as deleted:\n    TermDocs tdocs = reader.termDocs(t);\n    int count = 0;\n    while(tdocs.next()) {\n      count++;\n    }\n    assertEquals(2, count);\n\n    assertEquals(reader.docFreq(new Term(\"content\", \"gg\")), 0);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3215ae1377fc1ca1790921d75dd39cb764743b85":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c482d1e63332617181729a225b215c452d8a79"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"09c482d1e63332617181729a225b215c452d8a79":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}