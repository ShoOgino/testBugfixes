{"path":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotSmallTest.PivotFieldComparator#compare(PivotField,PivotField).mjava","commits":[{"id":"92751ba9273251eab6a2e379ec42a1697a32ff96","date":1407954233,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotSmallTest.PivotFieldComparator#compare(PivotField,PivotField).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int compare(PivotField o1, PivotField o2) {\n      Integer compare = (Integer.valueOf(o2.getCount())).compareTo(Integer\n          .valueOf(o1.getCount()));\n      if (compare == 0) {\n        compare = ((String) o2.getValue()).compareTo((String) o1.getValue());\n      }\n      return compare;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22d0a81a05eba47d5e18976f17d88306b218cc22","date":1436341569,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotSmallTest.PivotFieldComparator#compare(PivotField,PivotField).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotSmallTest.PivotFieldComparator#compare(PivotField,PivotField).mjava","sourceNew":"    @Override\n    public int compare(PivotField o1, PivotField o2) {\n      Integer compare = (Integer.valueOf(o2.getCount())).compareTo(Integer\n          .valueOf(o1.getCount()));\n      if (compare == 0) {\n        compare = ((String) o2.getValue()).compareTo((String) o1.getValue());\n      }\n      if (compare == 0) {\n        for (Map.Entry<String,Integer> entry : o1.getFacetQuery().entrySet()) {\n          compare = entry.getValue().compareTo(\n              o2.getFacetQuery().get(entry.getKey()));\n          if (compare != 0) {\n            break;\n          }\n        }\n        if (compare == 0) {\n          compare = Integer.valueOf(o1.getFacetQuery().size()).compareTo(\n              o2.getFacetQuery().size());\n        }\n      }\n      if (compare == 0) {\n        for (RangeFacet entry : o1.getFacetRanges()) {\n          boolean found = false;\n          for (RangeFacet otherRangeFacet : o2.getFacetRanges()) {\n            if (otherRangeFacet.getName().equals(entry.getName()))  {\n              found = true;\n            }\n          }\n          if (!found) {\n            compare = 1;\n            break;\n          }\n        }\n      }\n      return compare;\n    }\n\n","sourceOld":"    @Override\n    public int compare(PivotField o1, PivotField o2) {\n      Integer compare = (Integer.valueOf(o2.getCount())).compareTo(Integer\n          .valueOf(o1.getCount()));\n      if (compare == 0) {\n        compare = ((String) o2.getValue()).compareTo((String) o1.getValue());\n      }\n      return compare;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02a44d5e01a267563c3713e7a918b6ad08cc8052","date":1490708104,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotSmallTest.PivotFieldComparator#compare(PivotField,PivotField).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotSmallTest.PivotFieldComparator#compare(PivotField,PivotField).mjava","sourceNew":"    @Override\n    public int compare(PivotField o1, PivotField o2) {\n      int compare = Integer.compare(o2.getCount(), o1.getCount());\n      if (compare == 0) {\n        compare = ((String) o2.getValue()).compareTo((String) o1.getValue());\n      }\n      if (compare == 0) {\n        for (Map.Entry<String,Integer> entry : o1.getFacetQuery().entrySet()) {\n          compare = entry.getValue().compareTo(\n              o2.getFacetQuery().get(entry.getKey()));\n          if (compare != 0) {\n            break;\n          }\n        }\n        if (compare == 0) {\n          compare = Integer.compare(o1.getFacetQuery().size(),\n              o2.getFacetQuery().size());\n        }\n      }\n      if (compare == 0) {\n        for (RangeFacet entry : o1.getFacetRanges()) {\n          boolean found = false;\n          for (RangeFacet otherRangeFacet : o2.getFacetRanges()) {\n            if (otherRangeFacet.getName().equals(entry.getName()))  {\n              found = true;\n            }\n          }\n          if (!found) {\n            compare = 1;\n            break;\n          }\n        }\n      }\n      return compare;\n    }\n\n","sourceOld":"    @Override\n    public int compare(PivotField o1, PivotField o2) {\n      Integer compare = (Integer.valueOf(o2.getCount())).compareTo(Integer\n          .valueOf(o1.getCount()));\n      if (compare == 0) {\n        compare = ((String) o2.getValue()).compareTo((String) o1.getValue());\n      }\n      if (compare == 0) {\n        for (Map.Entry<String,Integer> entry : o1.getFacetQuery().entrySet()) {\n          compare = entry.getValue().compareTo(\n              o2.getFacetQuery().get(entry.getKey()));\n          if (compare != 0) {\n            break;\n          }\n        }\n        if (compare == 0) {\n          compare = Integer.valueOf(o1.getFacetQuery().size()).compareTo(\n              o2.getFacetQuery().size());\n        }\n      }\n      if (compare == 0) {\n        for (RangeFacet entry : o1.getFacetRanges()) {\n          boolean found = false;\n          for (RangeFacet otherRangeFacet : o2.getFacetRanges()) {\n            if (otherRangeFacet.getName().equals(entry.getName()))  {\n              found = true;\n            }\n          }\n          if (!found) {\n            compare = 1;\n            break;\n          }\n        }\n      }\n      return compare;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e10a66eeb8616a226c44e77c45ed0afc96ef423","date":1490873945,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotSmallTest.PivotFieldComparator#compare(PivotField,PivotField).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotSmallTest.PivotFieldComparator#compare(PivotField,PivotField).mjava","sourceNew":"    @Override\n    public int compare(PivotField o1, PivotField o2) {\n      int compare = Integer.compare(o2.getCount(), o1.getCount());\n      if (compare == 0) {\n        compare = ((String) o2.getValue()).compareTo((String) o1.getValue());\n      }\n      if (compare == 0) {\n        for (Map.Entry<String,Integer> entry : o1.getFacetQuery().entrySet()) {\n          compare = entry.getValue().compareTo(\n              o2.getFacetQuery().get(entry.getKey()));\n          if (compare != 0) {\n            break;\n          }\n        }\n        if (compare == 0) {\n          compare = Integer.compare(o1.getFacetQuery().size(),\n              o2.getFacetQuery().size());\n        }\n      }\n      if (compare == 0) {\n        for (RangeFacet entry : o1.getFacetRanges()) {\n          boolean found = false;\n          for (RangeFacet otherRangeFacet : o2.getFacetRanges()) {\n            if (otherRangeFacet.getName().equals(entry.getName()))  {\n              found = true;\n            }\n          }\n          if (!found) {\n            compare = 1;\n            break;\n          }\n        }\n      }\n      return compare;\n    }\n\n","sourceOld":"    @Override\n    public int compare(PivotField o1, PivotField o2) {\n      Integer compare = (Integer.valueOf(o2.getCount())).compareTo(Integer\n          .valueOf(o1.getCount()));\n      if (compare == 0) {\n        compare = ((String) o2.getValue()).compareTo((String) o1.getValue());\n      }\n      if (compare == 0) {\n        for (Map.Entry<String,Integer> entry : o1.getFacetQuery().entrySet()) {\n          compare = entry.getValue().compareTo(\n              o2.getFacetQuery().get(entry.getKey()));\n          if (compare != 0) {\n            break;\n          }\n        }\n        if (compare == 0) {\n          compare = Integer.valueOf(o1.getFacetQuery().size()).compareTo(\n              o2.getFacetQuery().size());\n        }\n      }\n      if (compare == 0) {\n        for (RangeFacet entry : o1.getFacetRanges()) {\n          boolean found = false;\n          for (RangeFacet otherRangeFacet : o2.getFacetRanges()) {\n            if (otherRangeFacet.getName().equals(entry.getName()))  {\n              found = true;\n            }\n          }\n          if (!found) {\n            compare = 1;\n            break;\n          }\n        }\n      }\n      return compare;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotSmallTest.PivotFieldComparator#compare(PivotField,PivotField).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotSmallTest.PivotFieldComparator#compare(PivotField,PivotField).mjava","sourceNew":"    @Override\n    public int compare(PivotField o1, PivotField o2) {\n      int compare = Integer.compare(o2.getCount(), o1.getCount());\n      if (compare == 0) {\n        compare = ((String) o2.getValue()).compareTo((String) o1.getValue());\n      }\n      if (compare == 0) {\n        for (Map.Entry<String,Integer> entry : o1.getFacetQuery().entrySet()) {\n          compare = entry.getValue().compareTo(\n              o2.getFacetQuery().get(entry.getKey()));\n          if (compare != 0) {\n            break;\n          }\n        }\n        if (compare == 0) {\n          compare = Integer.compare(o1.getFacetQuery().size(),\n              o2.getFacetQuery().size());\n        }\n      }\n      if (compare == 0) {\n        for (@SuppressWarnings({\"rawtypes\"})RangeFacet entry : o1.getFacetRanges()) {\n          boolean found = false;\n          for (@SuppressWarnings({\"rawtypes\"})RangeFacet otherRangeFacet : o2.getFacetRanges()) {\n            if (otherRangeFacet.getName().equals(entry.getName()))  {\n              found = true;\n            }\n          }\n          if (!found) {\n            compare = 1;\n            break;\n          }\n        }\n      }\n      return compare;\n    }\n\n","sourceOld":"    @Override\n    public int compare(PivotField o1, PivotField o2) {\n      int compare = Integer.compare(o2.getCount(), o1.getCount());\n      if (compare == 0) {\n        compare = ((String) o2.getValue()).compareTo((String) o1.getValue());\n      }\n      if (compare == 0) {\n        for (Map.Entry<String,Integer> entry : o1.getFacetQuery().entrySet()) {\n          compare = entry.getValue().compareTo(\n              o2.getFacetQuery().get(entry.getKey()));\n          if (compare != 0) {\n            break;\n          }\n        }\n        if (compare == 0) {\n          compare = Integer.compare(o1.getFacetQuery().size(),\n              o2.getFacetQuery().size());\n        }\n      }\n      if (compare == 0) {\n        for (RangeFacet entry : o1.getFacetRanges()) {\n          boolean found = false;\n          for (RangeFacet otherRangeFacet : o2.getFacetRanges()) {\n            if (otherRangeFacet.getName().equals(entry.getName()))  {\n              found = true;\n            }\n          }\n          if (!found) {\n            compare = 1;\n            break;\n          }\n        }\n      }\n      return compare;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"92751ba9273251eab6a2e379ec42a1697a32ff96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"22d0a81a05eba47d5e18976f17d88306b218cc22":["92751ba9273251eab6a2e379ec42a1697a32ff96"],"5e10a66eeb8616a226c44e77c45ed0afc96ef423":["22d0a81a05eba47d5e18976f17d88306b218cc22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["02a44d5e01a267563c3713e7a918b6ad08cc8052"],"02a44d5e01a267563c3713e7a918b6ad08cc8052":["22d0a81a05eba47d5e18976f17d88306b218cc22"]},"commit2Childs":{"92751ba9273251eab6a2e379ec42a1697a32ff96":["22d0a81a05eba47d5e18976f17d88306b218cc22"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["92751ba9273251eab6a2e379ec42a1697a32ff96"],"22d0a81a05eba47d5e18976f17d88306b218cc22":["5e10a66eeb8616a226c44e77c45ed0afc96ef423","02a44d5e01a267563c3713e7a918b6ad08cc8052"],"5e10a66eeb8616a226c44e77c45ed0afc96ef423":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"02a44d5e01a267563c3713e7a918b6ad08cc8052":["e98520789adb1d5ad05afb4956eca0944a929688"]},"heads":["5e10a66eeb8616a226c44e77c45ed0afc96ef423","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}