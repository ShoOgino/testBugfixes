{"path":"backwards/src/test/org/apache/lucene/search/QueryUtils#checkSerialization(Query,Searcher).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/QueryUtils#checkSerialization(Query,Searcher).mjava","pathOld":"/dev/null","sourceNew":"  /** check that the query weight is serializable. \n   * @throws IOException if serialization check fail. \n   */\n  private static void checkSerialization(Query q, Searcher s) throws IOException {\n    Weight w = q.weight(s);\n    try {\n      ByteArrayOutputStream bos = new ByteArrayOutputStream();\n      ObjectOutputStream oos = new ObjectOutputStream(bos);\n      oos.writeObject(w);\n      oos.close();\n      ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(bos.toByteArray()));\n      ois.readObject();\n      ois.close();\n      \n      //skip equals() test for now - most weights don't override equals() and we won't add this just for the tests.\n      //TestCase.assertEquals(\"writeObject(w) != w.  (\"+w+\")\",w2,w);   \n      \n    } catch (Exception e) {\n      IOException e2 = new IOException(\"Serialization failed for \"+w);\n      e2.initCause(e);\n      throw e2;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/QueryUtils#checkSerialization(Query,Searcher).mjava","pathOld":"backwards/src/test/org/apache/lucene/search/QueryUtils#checkSerialization(Query,Searcher).mjava","sourceNew":"  /** check that the query weight is serializable. \n   * @throws IOException if serialization check fail. \n   */\n  private static void checkSerialization(Query q, Searcher s) throws IOException {\n    Weight w = q.weight(s);\n    try {\n      ByteArrayOutputStream bos = new ByteArrayOutputStream();\n      ObjectOutputStream oos = new ObjectOutputStream(bos);\n      oos.writeObject(w);\n      oos.close();\n      ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(bos.toByteArray()));\n      ois.readObject();\n      ois.close();\n      \n      //skip equals() test for now - most weights don't override equals() and we won't add this just for the tests.\n      //TestCase.assertEquals(\"writeObject(w) != w.  (\"+w+\")\",w2,w);   \n      \n    } catch (Exception e) {\n      IOException e2 = new IOException(\"Serialization failed for \"+w);\n      e2.initCause(e);\n      throw e2;\n    }\n  }\n\n","sourceOld":"  /** check that the query weight is serializable. \n   * @throws IOException if serialization check fail. \n   */\n  private static void checkSerialization(Query q, Searcher s) throws IOException {\n    Weight w = q.weight(s);\n    try {\n      ByteArrayOutputStream bos = new ByteArrayOutputStream();\n      ObjectOutputStream oos = new ObjectOutputStream(bos);\n      oos.writeObject(w);\n      oos.close();\n      ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(bos.toByteArray()));\n      ois.readObject();\n      ois.close();\n      \n      //skip equals() test for now - most weights don't override equals() and we won't add this just for the tests.\n      //TestCase.assertEquals(\"writeObject(w) != w.  (\"+w+\")\",w2,w);   \n      \n    } catch (Exception e) {\n      IOException e2 = new IOException(\"Serialization failed for \"+w);\n      e2.initCause(e);\n      throw e2;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}