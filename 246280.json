{"path":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnum.Frame#scanToSubBlock(long).mjava","commits":[{"id":"e50f0da93c6dcee20d8792637b1786e2c34975e9","date":1400182475,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnum.Frame#scanToSubBlock(long).mjava","pathOld":"/dev/null","sourceNew":"    // Scans to sub-block that has this target fp; only\n    // called by next(); NOTE: does not set\n    // startBytePos/suffix as a side effect\n    public void scanToSubBlock(long subFP) {\n      assert !isLeafBlock;\n      //if (DEBUG) System.out.println(\"  scanToSubBlock fp=\" + fp + \" subFP=\" + subFP + \" entCount=\" + entCount + \" lastSubFP=\" + lastSubFP);\n      //assert nextEnt == 0;\n      if (lastSubFP == subFP) {\n        //if (DEBUG) System.out.println(\"    already positioned\");\n        return;\n      }\n      assert subFP < fp : \"fp=\" + fp + \" subFP=\" + subFP;\n      final long targetSubCode = fp - subFP;\n      //if (DEBUG) System.out.println(\"    targetSubCode=\" + targetSubCode);\n      while(true) {\n        assert nextEnt < entCount;\n        nextEnt++;\n        final int code = suffixesReader.readVInt();\n        suffixesReader.skipBytes(isLeafBlock ? code : code >>> 1);\n        //if (DEBUG) System.out.println(\"    \" + nextEnt + \" (of \" + entCount + \") ent isSubBlock=\" + ((code&1)==1));\n        if ((code & 1) != 0) {\n          final long subCode = suffixesReader.readVLong();\n          //if (DEBUG) System.out.println(\"      subCode=\" + subCode);\n          if (targetSubCode == subCode) {\n            //if (DEBUG) System.out.println(\"        match!\");\n            lastSubFP = subFP;\n            return;\n          }\n        } else {\n          state.termBlockOrd++;\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f4ef2de7b0fd59ef22e20888773ad260c90bfb4","date":1400183621,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/SegmentTermsEnum.Frame#scanToSubBlock(long).mjava","sourceNew":null,"sourceOld":"    // Scans to sub-block that has this target fp; only\n    // called by next(); NOTE: does not set\n    // startBytePos/suffix as a side effect\n    public void scanToSubBlock(long subFP) {\n      assert !isLeafBlock;\n      //if (DEBUG) System.out.println(\"  scanToSubBlock fp=\" + fp + \" subFP=\" + subFP + \" entCount=\" + entCount + \" lastSubFP=\" + lastSubFP);\n      //assert nextEnt == 0;\n      if (lastSubFP == subFP) {\n        //if (DEBUG) System.out.println(\"    already positioned\");\n        return;\n      }\n      assert subFP < fp : \"fp=\" + fp + \" subFP=\" + subFP;\n      final long targetSubCode = fp - subFP;\n      //if (DEBUG) System.out.println(\"    targetSubCode=\" + targetSubCode);\n      while(true) {\n        assert nextEnt < entCount;\n        nextEnt++;\n        final int code = suffixesReader.readVInt();\n        suffixesReader.skipBytes(isLeafBlock ? code : code >>> 1);\n        //if (DEBUG) System.out.println(\"    \" + nextEnt + \" (of \" + entCount + \") ent isSubBlock=\" + ((code&1)==1));\n        if ((code & 1) != 0) {\n          final long subCode = suffixesReader.readVLong();\n          //if (DEBUG) System.out.println(\"      subCode=\" + subCode);\n          if (targetSubCode == subCode) {\n            //if (DEBUG) System.out.println(\"        match!\");\n            lastSubFP = subFP;\n            return;\n          }\n        } else {\n          state.termBlockOrd++;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f4ef2de7b0fd59ef22e20888773ad260c90bfb4":["e50f0da93c6dcee20d8792637b1786e2c34975e9"],"e50f0da93c6dcee20d8792637b1786e2c34975e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3f4ef2de7b0fd59ef22e20888773ad260c90bfb4":[],"e50f0da93c6dcee20d8792637b1786e2c34975e9":["3f4ef2de7b0fd59ef22e20888773ad260c90bfb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e50f0da93c6dcee20d8792637b1786e2c34975e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3f4ef2de7b0fd59ef22e20888773ad260c90bfb4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}