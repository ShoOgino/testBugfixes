{"path":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#files(Directory,SegmentInfo,String,Set[String]).mjava","commits":[{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#files(Directory,SegmentInfo,String,Set[String]).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#files(Directory,SegmentInfo,String,Set[String]).mjava","sourceNew":"  @Override\n  public void files(Directory dir, SegmentInfo segmentInfo, String codecId, Set<String> files) throws IOException {\n    final String seedFileName = IndexFileNames.segmentFileName(segmentInfo.name, codecId, SEED_EXT);    \n    files.add(seedFileName);\n    SepPostingsReaderImpl.files(segmentInfo, codecId, files);\n    StandardPostingsReader.files(dir, segmentInfo, codecId, files);\n    BlockTermsReader.files(dir, segmentInfo, codecId, files);\n    FixedGapTermsIndexReader.files(dir, segmentInfo, codecId, files);\n    VariableGapTermsIndexReader.files(dir, segmentInfo, codecId, files);\n    \n    // hackish!\n    Iterator<String> it = files.iterator();\n    while(it.hasNext()) {\n      final String file = it.next();\n      if (!dir.fileExists(file)) {\n        it.remove();\n      }\n    }\n    //System.out.println(\"MockRandom.files return \" + files);\n  }\n\n","sourceOld":"  @Override\n  public void files(Directory dir, SegmentInfo segmentInfo, String codecId, Set<String> files) throws IOException {\n    final String seedFileName = IndexFileNames.segmentFileName(segmentInfo.name, codecId, SEED_EXT);    \n    files.add(seedFileName);\n    SepPostingsReaderImpl.files(segmentInfo, codecId, files);\n    StandardPostingsReader.files(dir, segmentInfo, codecId, files);\n    BlockTermsReader.files(dir, segmentInfo, codecId, files);\n    FixedGapTermsIndexReader.files(dir, segmentInfo, codecId, files);\n    VariableGapTermsIndexReader.files(dir, segmentInfo, codecId, files);\n    \n    // hackish!\n    Iterator<String> it = files.iterator();\n    while(it.hasNext()) {\n      final String file = it.next();\n      if (!dir.fileExists(file)) {\n        it.remove();\n      }\n    }\n    //System.out.println(\"MockRandom.files return \" + files);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#files(Directory,SegmentInfo,String,Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void files(Directory dir, SegmentInfo segmentInfo, String codecId, Set<String> files) throws IOException {\n    final String seedFileName = IndexFileNames.segmentFileName(segmentInfo.name, codecId, SEED_EXT);    \n    files.add(seedFileName);\n    SepPostingsReaderImpl.files(segmentInfo, codecId, files);\n    StandardPostingsReader.files(dir, segmentInfo, codecId, files);\n    BlockTermsReader.files(dir, segmentInfo, codecId, files);\n    FixedGapTermsIndexReader.files(dir, segmentInfo, codecId, files);\n    VariableGapTermsIndexReader.files(dir, segmentInfo, codecId, files);\n    \n    // hackish!\n    Iterator<String> it = files.iterator();\n    while(it.hasNext()) {\n      final String file = it.next();\n      if (!dir.fileExists(file)) {\n        it.remove();\n      }\n    }\n    //System.out.println(\"MockRandom.files return \" + files);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#files(Directory,SegmentInfo,String,Set[String]).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#files(Directory,SegmentInfo,String,Set[String]).mjava","sourceNew":"  @Override\n  public void files(Directory dir, SegmentInfo segmentInfo, String codecId, Set<String> files) throws IOException {\n    final String seedFileName = IndexFileNames.segmentFileName(segmentInfo.name, codecId, SEED_EXT);\n    files.add(seedFileName);\n    SepPostingsReaderImpl.files(segmentInfo, codecId, files);\n    StandardPostingsReader.files(dir, segmentInfo, codecId, files);\n    BlockTermsReader.files(dir, segmentInfo, codecId, files);\n    FixedGapTermsIndexReader.files(dir, segmentInfo, codecId, files);\n    VariableGapTermsIndexReader.files(dir, segmentInfo, codecId, files);\n\n    // hackish!\n    Iterator<String> it = files.iterator();\n    while(it.hasNext()) {\n      final String file = it.next();\n      if (!dir.fileExists(file)) {\n        it.remove();\n      }\n    }\n    //System.out.println(\"MockRandom.files return \" + files);\n  }\n\n","sourceOld":"  @Override\n  public void files(Directory dir, SegmentInfo segmentInfo, String codecId, Set<String> files) throws IOException {\n    final String seedFileName = IndexFileNames.segmentFileName(segmentInfo.name, codecId, SEED_EXT);    \n    files.add(seedFileName);\n    SepPostingsReaderImpl.files(segmentInfo, codecId, files);\n    StandardPostingsReader.files(dir, segmentInfo, codecId, files);\n    BlockTermsReader.files(dir, segmentInfo, codecId, files);\n    FixedGapTermsIndexReader.files(dir, segmentInfo, codecId, files);\n    VariableGapTermsIndexReader.files(dir, segmentInfo, codecId, files);\n    \n    // hackish!\n    Iterator<String> it = files.iterator();\n    while(it.hasNext()) {\n      final String file = it.next();\n      if (!dir.fileExists(file)) {\n        it.remove();\n      }\n    }\n    //System.out.println(\"MockRandom.files return \" + files);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#files(Directory,SegmentInfo,String,Set[String]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void files(Directory dir, SegmentInfo segmentInfo, String codecId, Set<String> files) throws IOException {\n    final String seedFileName = IndexFileNames.segmentFileName(segmentInfo.name, codecId, SEED_EXT);    \n    files.add(seedFileName);\n    SepPostingsReaderImpl.files(segmentInfo, codecId, files);\n    StandardPostingsReader.files(dir, segmentInfo, codecId, files);\n    BlockTermsReader.files(dir, segmentInfo, codecId, files);\n    FixedGapTermsIndexReader.files(dir, segmentInfo, codecId, files);\n    VariableGapTermsIndexReader.files(dir, segmentInfo, codecId, files);\n    \n    // hackish!\n    Iterator<String> it = files.iterator();\n    while(it.hasNext()) {\n      final String file = it.next();\n      if (!dir.fileExists(file)) {\n        it.remove();\n      }\n    }\n    //System.out.println(\"MockRandom.files return \" + files);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#files(Directory,SegmentInfo,String,Set[String]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void files(Directory dir, SegmentInfo segmentInfo, String codecId, Set<String> files) throws IOException {\n    final String seedFileName = IndexFileNames.segmentFileName(segmentInfo.name, codecId, SEED_EXT);    \n    files.add(seedFileName);\n    SepPostingsReaderImpl.files(segmentInfo, codecId, files);\n    StandardPostingsReader.files(dir, segmentInfo, codecId, files);\n    BlockTermsReader.files(dir, segmentInfo, codecId, files);\n    FixedGapTermsIndexReader.files(dir, segmentInfo, codecId, files);\n    VariableGapTermsIndexReader.files(dir, segmentInfo, codecId, files);\n    \n    // hackish!\n    Iterator<String> it = files.iterator();\n    while(it.hasNext()) {\n      final String file = it.next();\n      if (!dir.fileExists(file)) {\n        it.remove();\n      }\n    }\n    //System.out.println(\"MockRandom.files return \" + files);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockrandom/MockRandomCodec#files(Directory,SegmentInfo,String,Set[String]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void files(Directory dir, SegmentInfo segmentInfo, String codecId, Set<String> files) throws IOException {\n    final String seedFileName = IndexFileNames.segmentFileName(segmentInfo.name, codecId, SEED_EXT);    \n    files.add(seedFileName);\n    SepPostingsReaderImpl.files(segmentInfo, codecId, files);\n    StandardPostingsReader.files(dir, segmentInfo, codecId, files);\n    BlockTermsReader.files(dir, segmentInfo, codecId, files);\n    FixedGapTermsIndexReader.files(dir, segmentInfo, codecId, files);\n    VariableGapTermsIndexReader.files(dir, segmentInfo, codecId, files);\n    \n    // hackish!\n    Iterator<String> it = files.iterator();\n    while(it.hasNext()) {\n      final String file = it.next();\n      if (!dir.fileExists(file)) {\n        it.remove();\n      }\n    }\n    //System.out.println(\"MockRandom.files return \" + files);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","2e8d7ba2175f47e280231533f7d3016249cea88b"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","d619839baa8ce5503e496b94a9e42ad6f079293f"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","2e8d7ba2175f47e280231533f7d3016249cea88b","d619839baa8ce5503e496b94a9e42ad6f079293f","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}