{"path":"src/java/org/apache/solr/analysis/SynonymMap#mergeTokens(List[Token],List[Token]).mjava","commits":[{"id":"92335bcfcb7158f0d7417ef5b9ac3a156f5a72ac","date":1201149698,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/SynonymMap#mergeTokens(List[Token],List[Token]).mjava","pathOld":"src/java/org/apache/solr/analysis/SynonymMap#mergeTokens(List,List).mjava","sourceNew":"  /**\n   * Merge two lists of tokens, producing a single list with manipulated positionIncrements so that\n   * the tokens end up at the same position.\n   *\n   * Example:  [a b] merged with [c d] produces [a/b c/d]  ('/' denotes tokens in the same position)\n   * Example:  [a,5 b,2] merged with [c d,4 e,4] produces [c a,5/d b,2 e,2]  (a,n means a has posInc=n)\n   *\n   */\n  public static List<Token> mergeTokens(List<Token> lst1, List<Token> lst2) {\n    ArrayList<Token> result = new ArrayList<Token>();\n    if (lst1 ==null || lst2 ==null) {\n      if (lst2 != null) result.addAll(lst2);\n      if (lst1 != null) result.addAll(lst1);\n      return result;\n    }\n\n    int pos=0;\n    Iterator<Token> iter1=lst1.iterator();\n    Iterator<Token> iter2=lst2.iterator();\n    Token tok1 = iter1.hasNext() ? iter1.next() : null;\n    Token tok2 = iter2.hasNext() ? iter2.next() : null;\n    int pos1 = tok1!=null ? tok1.getPositionIncrement() : 0;\n    int pos2 = tok2!=null ? tok2.getPositionIncrement() : 0;\n    while(tok1!=null || tok2!=null) {\n      while (tok1 != null && (pos1 <= pos2 || tok2==null)) {\n        Token tok = new Token(tok1.startOffset(), tok1.endOffset(), tok1.type());\n        tok.setTermBuffer(tok1.termBuffer(), 0, tok1.termLength());\n        tok.setPositionIncrement(pos1-pos);\n        result.add(tok);\n        pos=pos1;\n        tok1 = iter1.hasNext() ? iter1.next() : null;\n        pos1 += tok1!=null ? tok1.getPositionIncrement() : 0;\n      }\n      while (tok2 != null && (pos2 <= pos1 || tok1==null)) {\n        Token tok = new Token(tok2.startOffset(), tok2.endOffset(), tok2.type());\n        tok.setTermBuffer(tok2.termBuffer(), 0, tok2.termLength());\n        tok.setPositionIncrement(pos2-pos);\n        result.add(tok);\n        pos=pos2;\n        tok2 = iter2.hasNext() ? iter2.next() : null;\n        pos2 += tok2!=null ? tok2.getPositionIncrement() : 0;\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Merge two lists of tokens, producing a single list with manipulated positionIncrements so that\n   * the tokens end up at the same position.\n   *\n   * Example:  [a b] merged with [c d] produces [a/b c/d]  ('/' denotes tokens in the same position)\n   * Example:  [a,5 b,2] merged with [c d,4 e,4] produces [c a,5/d b,2 e,2]  (a,n means a has posInc=n)\n   *\n   */\n  public static List mergeTokens(List lst1, List lst2) {\n    ArrayList result = new ArrayList();\n    if (lst1 ==null || lst2 ==null) {\n      if (lst2 != null) result.addAll(lst2);\n      if (lst1 != null) result.addAll(lst1);\n      return result;\n    }\n\n    int pos=0;\n    Iterator iter1=lst1.iterator();\n    Iterator iter2=lst2.iterator();\n    Token tok1 = iter1.hasNext() ? (Token)iter1.next() : null;\n    Token tok2 = iter2.hasNext() ? (Token)iter2.next() : null;\n    int pos1 = tok1!=null ? tok1.getPositionIncrement() : 0;\n    int pos2 = tok2!=null ? tok2.getPositionIncrement() : 0;\n    while(tok1!=null || tok2!=null) {\n      while (tok1 != null && (pos1 <= pos2 || tok2==null)) {\n        Token tok = new Token(tok1.termText(), tok1.startOffset(), tok1.endOffset(), tok1.type());\n        tok.setPositionIncrement(pos1-pos);\n        result.add(tok);\n        pos=pos1;\n        tok1 = iter1.hasNext() ? (Token)iter1.next() : null;\n        pos1 += tok1!=null ? tok1.getPositionIncrement() : 0;\n      }\n      while (tok2 != null && (pos2 <= pos1 || tok1==null)) {\n        Token tok = new Token(tok2.termText(), tok2.startOffset(), tok2.endOffset(), tok2.type());\n        tok.setPositionIncrement(pos2-pos);\n        result.add(tok);\n        pos=pos2;\n        tok2 = iter2.hasNext() ? (Token)iter2.next() : null;\n        pos2 += tok2!=null ? tok2.getPositionIncrement() : 0;\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/SynonymMap#mergeTokens(List[Token],List[Token]).mjava","pathOld":"src/java/org/apache/solr/analysis/SynonymMap#mergeTokens(List[Token],List[Token]).mjava","sourceNew":"  /**\n   * Merge two lists of tokens, producing a single list with manipulated positionIncrements so that\n   * the tokens end up at the same position.\n   *\n   * Example:  [a b] merged with [c d] produces [a/b c/d]  ('/' denotes tokens in the same position)\n   * Example:  [a,5 b,2] merged with [c d,4 e,4] produces [c a,5/d b,2 e,2]  (a,n means a has posInc=n)\n   *\n   */\n  public static List<Token> mergeTokens(List<Token> lst1, List<Token> lst2) {\n    ArrayList<Token> result = new ArrayList<Token>();\n    if (lst1 ==null || lst2 ==null) {\n      if (lst2 != null) result.addAll(lst2);\n      if (lst1 != null) result.addAll(lst1);\n      return result;\n    }\n\n    int pos=0;\n    Iterator<Token> iter1=lst1.iterator();\n    Iterator<Token> iter2=lst2.iterator();\n    Token tok1 = iter1.hasNext() ? iter1.next() : null;\n    Token tok2 = iter2.hasNext() ? iter2.next() : null;\n    int pos1 = tok1!=null ? tok1.getPositionIncrement() : 0;\n    int pos2 = tok2!=null ? tok2.getPositionIncrement() : 0;\n    while(tok1!=null || tok2!=null) {\n      while (tok1 != null && (pos1 <= pos2 || tok2==null)) {\n        Token tok = new Token(tok1.startOffset(), tok1.endOffset(), tok1.type());\n        tok.setTermBuffer(tok1.termBuffer(), 0, tok1.termLength());\n        tok.setPositionIncrement(pos1-pos);\n        result.add(tok);\n        pos=pos1;\n        tok1 = iter1.hasNext() ? iter1.next() : null;\n        pos1 += tok1!=null ? tok1.getPositionIncrement() : 0;\n      }\n      while (tok2 != null && (pos2 <= pos1 || tok1==null)) {\n        Token tok = new Token(tok2.startOffset(), tok2.endOffset(), tok2.type());\n        tok.setTermBuffer(tok2.termBuffer(), 0, tok2.termLength());\n        tok.setPositionIncrement(pos2-pos);\n        result.add(tok);\n        pos=pos2;\n        tok2 = iter2.hasNext() ? iter2.next() : null;\n        pos2 += tok2!=null ? tok2.getPositionIncrement() : 0;\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Merge two lists of tokens, producing a single list with manipulated positionIncrements so that\n   * the tokens end up at the same position.\n   *\n   * Example:  [a b] merged with [c d] produces [a/b c/d]  ('/' denotes tokens in the same position)\n   * Example:  [a,5 b,2] merged with [c d,4 e,4] produces [c a,5/d b,2 e,2]  (a,n means a has posInc=n)\n   *\n   */\n  public static List<Token> mergeTokens(List<Token> lst1, List<Token> lst2) {\n    ArrayList<Token> result = new ArrayList<Token>();\n    if (lst1 ==null || lst2 ==null) {\n      if (lst2 != null) result.addAll(lst2);\n      if (lst1 != null) result.addAll(lst1);\n      return result;\n    }\n\n    int pos=0;\n    Iterator<Token> iter1=lst1.iterator();\n    Iterator<Token> iter2=lst2.iterator();\n    Token tok1 = iter1.hasNext() ? iter1.next() : null;\n    Token tok2 = iter2.hasNext() ? iter2.next() : null;\n    int pos1 = tok1!=null ? tok1.getPositionIncrement() : 0;\n    int pos2 = tok2!=null ? tok2.getPositionIncrement() : 0;\n    while(tok1!=null || tok2!=null) {\n      while (tok1 != null && (pos1 <= pos2 || tok2==null)) {\n        Token tok = new Token(tok1.startOffset(), tok1.endOffset(), tok1.type());\n        tok.setTermBuffer(tok1.termBuffer(), 0, tok1.termLength());\n        tok.setPositionIncrement(pos1-pos);\n        result.add(tok);\n        pos=pos1;\n        tok1 = iter1.hasNext() ? iter1.next() : null;\n        pos1 += tok1!=null ? tok1.getPositionIncrement() : 0;\n      }\n      while (tok2 != null && (pos2 <= pos1 || tok1==null)) {\n        Token tok = new Token(tok2.startOffset(), tok2.endOffset(), tok2.type());\n        tok.setTermBuffer(tok2.termBuffer(), 0, tok2.termLength());\n        tok.setPositionIncrement(pos2-pos);\n        result.add(tok);\n        pos=pos2;\n        tok2 = iter2.hasNext() ? iter2.next() : null;\n        pos2 += tok2!=null ? tok2.getPositionIncrement() : 0;\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"92335bcfcb7158f0d7417ef5b9ac3a156f5a72ac":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["92335bcfcb7158f0d7417ef5b9ac3a156f5a72ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"92335bcfcb7158f0d7417ef5b9ac3a156f5a72ac":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["92335bcfcb7158f0d7417ef5b9ac3a156f5a72ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}