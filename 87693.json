{"path":"lucene/core/src/java/org/apache/lucene/util/TermContext#build(IndexReaderContext,Term,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/TermContext#build(IndexReaderContext,Term,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/TermContext#build(IndexReaderContext,Term,boolean).mjava","sourceNew":"  /**\n   * Creates a {@link TermContext} from a top-level {@link IndexReaderContext} and the\n   * given {@link Term}. This method will lookup the given term in all context's leaf readers \n   * and register each of the readers containing the term in the returned {@link TermContext}\n   * using the leaf reader's ordinal.\n   * <p>\n   * Note: the given context must be a top-level context.\n   */\n  public static TermContext build(IndexReaderContext context, Term term, boolean cache)\n      throws IOException {\n    assert context != null && context.isTopLevel;\n    final String field = term.field();\n    final BytesRef bytes = term.bytes();\n    final TermContext perReaderTermState = new TermContext(context);\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(context);\n    //if (DEBUG) System.out.println(\"prts.build term=\" + term);\n    for (int i = 0; i < leaves.length; i++) {\n      //if (DEBUG) System.out.println(\"  r=\" + leaves[i].reader);\n      final Fields fields = leaves[i].reader().fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(field);\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(bytes, cache)) { \n            final TermState termState = termsEnum.termState();\n            //if (DEBUG) System.out.println(\"    found\");\n            perReaderTermState.register(termState, leaves[i].ord, termsEnum.docFreq(), termsEnum.totalTermFreq());\n          }\n        }\n      }\n    }\n    return perReaderTermState;\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link TermContext} from a top-level {@link IndexReaderContext} and the\n   * given {@link Term}. This method will lookup the given term in all context's leaf readers \n   * and register each of the readers containing the term in the returned {@link TermContext}\n   * using the leaf reader's ordinal.\n   * <p>\n   * Note: the given context must be a top-level context.\n   */\n  public static TermContext build(IndexReaderContext context, Term term, boolean cache)\n      throws IOException {\n    assert context != null && context.isTopLevel;\n    final String field = term.field();\n    final BytesRef bytes = term.bytes();\n    final TermContext perReaderTermState = new TermContext(context);\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(context);\n    //if (DEBUG) System.out.println(\"prts.build term=\" + term);\n    for (int i = 0; i < leaves.length; i++) {\n      //if (DEBUG) System.out.println(\"  r=\" + leaves[i].reader);\n      final Fields fields = leaves[i].reader().fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(field);\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(bytes, cache)) { \n            final TermState termState = termsEnum.termState();\n            //if (DEBUG) System.out.println(\"    found\");\n            perReaderTermState.register(termState, leaves[i].ord, termsEnum.docFreq(), termsEnum.totalTermFreq());\n          }\n        }\n      }\n    }\n    return perReaderTermState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d4602ca2700dfd2f6159ad1499e5b6d1f3b92a8","date":1328775259,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/TermContext#build(IndexReaderContext,Term,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/TermContext#build(IndexReaderContext,Term,boolean).mjava","sourceNew":"  /**\n   * Creates a {@link TermContext} from a top-level {@link IndexReaderContext} and the\n   * given {@link Term}. This method will lookup the given term in all context's leaf readers \n   * and register each of the readers containing the term in the returned {@link TermContext}\n   * using the leaf reader's ordinal.\n   * <p>\n   * Note: the given context must be a top-level context.\n   */\n  public static TermContext build(IndexReaderContext context, Term term, boolean cache)\n      throws IOException {\n    assert context != null && context.isTopLevel;\n    final String field = term.field();\n    final BytesRef bytes = term.bytes();\n    final TermContext perReaderTermState = new TermContext(context);\n    final AtomicReaderContext[] leaves = context.leaves();\n    //if (DEBUG) System.out.println(\"prts.build term=\" + term);\n    for (int i = 0; i < leaves.length; i++) {\n      //if (DEBUG) System.out.println(\"  r=\" + leaves[i].reader);\n      final Fields fields = leaves[i].reader().fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(field);\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(bytes, cache)) { \n            final TermState termState = termsEnum.termState();\n            //if (DEBUG) System.out.println(\"    found\");\n            perReaderTermState.register(termState, leaves[i].ord, termsEnum.docFreq(), termsEnum.totalTermFreq());\n          }\n        }\n      }\n    }\n    return perReaderTermState;\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link TermContext} from a top-level {@link IndexReaderContext} and the\n   * given {@link Term}. This method will lookup the given term in all context's leaf readers \n   * and register each of the readers containing the term in the returned {@link TermContext}\n   * using the leaf reader's ordinal.\n   * <p>\n   * Note: the given context must be a top-level context.\n   */\n  public static TermContext build(IndexReaderContext context, Term term, boolean cache)\n      throws IOException {\n    assert context != null && context.isTopLevel;\n    final String field = term.field();\n    final BytesRef bytes = term.bytes();\n    final TermContext perReaderTermState = new TermContext(context);\n    final AtomicReaderContext[] leaves = ReaderUtil.leaves(context);\n    //if (DEBUG) System.out.println(\"prts.build term=\" + term);\n    for (int i = 0; i < leaves.length; i++) {\n      //if (DEBUG) System.out.println(\"  r=\" + leaves[i].reader);\n      final Fields fields = leaves[i].reader().fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(field);\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(bytes, cache)) { \n            final TermState termState = termsEnum.termState();\n            //if (DEBUG) System.out.println(\"    found\");\n            perReaderTermState.register(termState, leaves[i].ord, termsEnum.docFreq(), termsEnum.totalTermFreq());\n          }\n        }\n      }\n    }\n    return perReaderTermState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d08eba3d52b63561ebf936481ce73e6b6a14aa03","date":1333879759,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/TermContext#build(IndexReaderContext,Term,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/TermContext#build(IndexReaderContext,Term,boolean).mjava","sourceNew":"  /**\n   * Creates a {@link TermContext} from a top-level {@link IndexReaderContext} and the\n   * given {@link Term}. This method will lookup the given term in all context's leaf readers \n   * and register each of the readers containing the term in the returned {@link TermContext}\n   * using the leaf reader's ordinal.\n   * <p>\n   * Note: the given context must be a top-level context.\n   */\n  public static TermContext build(IndexReaderContext context, Term term, boolean cache)\n      throws IOException {\n    assert context != null && context.isTopLevel;\n    final String field = term.field();\n    final BytesRef bytes = term.bytes();\n    final TermContext perReaderTermState = new TermContext(context);\n    final AtomicReaderContext[] leaves = context.leaves();\n    //if (DEBUG) System.out.println(\"prts.build term=\" + term);\n    for (int i = 0; i < leaves.length; i++) {\n      //if (DEBUG) System.out.println(\"  r=\" + leaves[i].reader);\n      final InvertedFields fields = leaves[i].reader().fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(field);\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(bytes, cache)) { \n            final TermState termState = termsEnum.termState();\n            //if (DEBUG) System.out.println(\"    found\");\n            perReaderTermState.register(termState, leaves[i].ord, termsEnum.docFreq(), termsEnum.totalTermFreq());\n          }\n        }\n      }\n    }\n    return perReaderTermState;\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link TermContext} from a top-level {@link IndexReaderContext} and the\n   * given {@link Term}. This method will lookup the given term in all context's leaf readers \n   * and register each of the readers containing the term in the returned {@link TermContext}\n   * using the leaf reader's ordinal.\n   * <p>\n   * Note: the given context must be a top-level context.\n   */\n  public static TermContext build(IndexReaderContext context, Term term, boolean cache)\n      throws IOException {\n    assert context != null && context.isTopLevel;\n    final String field = term.field();\n    final BytesRef bytes = term.bytes();\n    final TermContext perReaderTermState = new TermContext(context);\n    final AtomicReaderContext[] leaves = context.leaves();\n    //if (DEBUG) System.out.println(\"prts.build term=\" + term);\n    for (int i = 0; i < leaves.length; i++) {\n      //if (DEBUG) System.out.println(\"  r=\" + leaves[i].reader);\n      final Fields fields = leaves[i].reader().fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(field);\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(bytes, cache)) { \n            final TermState termState = termsEnum.termState();\n            //if (DEBUG) System.out.println(\"    found\");\n            perReaderTermState.register(termState, leaves[i].ord, termsEnum.docFreq(), termsEnum.totalTermFreq());\n          }\n        }\n      }\n    }\n    return perReaderTermState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","date":1333892281,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/TermContext#build(IndexReaderContext,Term,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/TermContext#build(IndexReaderContext,Term,boolean).mjava","sourceNew":"  /**\n   * Creates a {@link TermContext} from a top-level {@link IndexReaderContext} and the\n   * given {@link Term}. This method will lookup the given term in all context's leaf readers \n   * and register each of the readers containing the term in the returned {@link TermContext}\n   * using the leaf reader's ordinal.\n   * <p>\n   * Note: the given context must be a top-level context.\n   */\n  public static TermContext build(IndexReaderContext context, Term term, boolean cache)\n      throws IOException {\n    assert context != null && context.isTopLevel;\n    final String field = term.field();\n    final BytesRef bytes = term.bytes();\n    final TermContext perReaderTermState = new TermContext(context);\n    final AtomicReaderContext[] leaves = context.leaves();\n    //if (DEBUG) System.out.println(\"prts.build term=\" + term);\n    for (int i = 0; i < leaves.length; i++) {\n      //if (DEBUG) System.out.println(\"  r=\" + leaves[i].reader);\n      final Fields fields = leaves[i].reader().fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(field);\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(bytes, cache)) { \n            final TermState termState = termsEnum.termState();\n            //if (DEBUG) System.out.println(\"    found\");\n            perReaderTermState.register(termState, leaves[i].ord, termsEnum.docFreq(), termsEnum.totalTermFreq());\n          }\n        }\n      }\n    }\n    return perReaderTermState;\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link TermContext} from a top-level {@link IndexReaderContext} and the\n   * given {@link Term}. This method will lookup the given term in all context's leaf readers \n   * and register each of the readers containing the term in the returned {@link TermContext}\n   * using the leaf reader's ordinal.\n   * <p>\n   * Note: the given context must be a top-level context.\n   */\n  public static TermContext build(IndexReaderContext context, Term term, boolean cache)\n      throws IOException {\n    assert context != null && context.isTopLevel;\n    final String field = term.field();\n    final BytesRef bytes = term.bytes();\n    final TermContext perReaderTermState = new TermContext(context);\n    final AtomicReaderContext[] leaves = context.leaves();\n    //if (DEBUG) System.out.println(\"prts.build term=\" + term);\n    for (int i = 0; i < leaves.length; i++) {\n      //if (DEBUG) System.out.println(\"  r=\" + leaves[i].reader);\n      final InvertedFields fields = leaves[i].reader().fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(field);\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(bytes, cache)) { \n            final TermState termState = termsEnum.termState();\n            //if (DEBUG) System.out.println(\"    found\");\n            perReaderTermState.register(termState, leaves[i].ord, termsEnum.docFreq(), termsEnum.totalTermFreq());\n          }\n        }\n      }\n    }\n    return perReaderTermState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","date":1340090669,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/TermContext#build(IndexReaderContext,Term,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/TermContext#build(IndexReaderContext,Term,boolean).mjava","sourceNew":"  /**\n   * Creates a {@link TermContext} from a top-level {@link IndexReaderContext} and the\n   * given {@link Term}. This method will lookup the given term in all context's leaf readers \n   * and register each of the readers containing the term in the returned {@link TermContext}\n   * using the leaf reader's ordinal.\n   * <p>\n   * Note: the given context must be a top-level context.\n   */\n  public static TermContext build(IndexReaderContext context, Term term, boolean cache)\n      throws IOException {\n    assert context != null && context.isTopLevel;\n    final String field = term.field();\n    final BytesRef bytes = term.bytes();\n    final TermContext perReaderTermState = new TermContext(context);\n    //if (DEBUG) System.out.println(\"prts.build term=\" + term);\n    for (final AtomicReaderContext ctx : context.leaves()) {\n      //if (DEBUG) System.out.println(\"  r=\" + leaves[i].reader);\n      final Fields fields = ctx.reader().fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(field);\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(bytes, cache)) { \n            final TermState termState = termsEnum.termState();\n            //if (DEBUG) System.out.println(\"    found\");\n            perReaderTermState.register(termState, ctx.ord, termsEnum.docFreq(), termsEnum.totalTermFreq());\n          }\n        }\n      }\n    }\n    return perReaderTermState;\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link TermContext} from a top-level {@link IndexReaderContext} and the\n   * given {@link Term}. This method will lookup the given term in all context's leaf readers \n   * and register each of the readers containing the term in the returned {@link TermContext}\n   * using the leaf reader's ordinal.\n   * <p>\n   * Note: the given context must be a top-level context.\n   */\n  public static TermContext build(IndexReaderContext context, Term term, boolean cache)\n      throws IOException {\n    assert context != null && context.isTopLevel;\n    final String field = term.field();\n    final BytesRef bytes = term.bytes();\n    final TermContext perReaderTermState = new TermContext(context);\n    final AtomicReaderContext[] leaves = context.leaves();\n    //if (DEBUG) System.out.println(\"prts.build term=\" + term);\n    for (int i = 0; i < leaves.length; i++) {\n      //if (DEBUG) System.out.println(\"  r=\" + leaves[i].reader);\n      final Fields fields = leaves[i].reader().fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(field);\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(bytes, cache)) { \n            final TermState termState = termsEnum.termState();\n            //if (DEBUG) System.out.println(\"    found\");\n            perReaderTermState.register(termState, leaves[i].ord, termsEnum.docFreq(), termsEnum.totalTermFreq());\n          }\n        }\n      }\n    }\n    return perReaderTermState;\n  }\n\n","bugFix":null,"bugIntro":["8028ab7a24273833d53d35eb160dba5b57283cf5","8028ab7a24273833d53d35eb160dba5b57283cf5","8028ab7a24273833d53d35eb160dba5b57283cf5","8028ab7a24273833d53d35eb160dba5b57283cf5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bcce0e518c0546269a896ca6124ba4313059185f","date":1340381078,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermContext#build(IndexReaderContext,Term,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/TermContext#build(IndexReaderContext,Term,boolean).mjava","sourceNew":"  /**\n   * Creates a {@link TermContext} from a top-level {@link IndexReaderContext} and the\n   * given {@link Term}. This method will lookup the given term in all context's leaf readers \n   * and register each of the readers containing the term in the returned {@link TermContext}\n   * using the leaf reader's ordinal.\n   * <p>\n   * Note: the given context must be a top-level context.\n   */\n  public static TermContext build(IndexReaderContext context, Term term, boolean cache)\n      throws IOException {\n    assert context != null && context.isTopLevel;\n    final String field = term.field();\n    final BytesRef bytes = term.bytes();\n    final TermContext perReaderTermState = new TermContext(context);\n    //if (DEBUG) System.out.println(\"prts.build term=\" + term);\n    for (final AtomicReaderContext ctx : context.leaves()) {\n      //if (DEBUG) System.out.println(\"  r=\" + leaves[i].reader);\n      final Fields fields = ctx.reader().fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(field);\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(bytes, cache)) { \n            final TermState termState = termsEnum.termState();\n            //if (DEBUG) System.out.println(\"    found\");\n            perReaderTermState.register(termState, ctx.ord, termsEnum.docFreq(), termsEnum.totalTermFreq());\n          }\n        }\n      }\n    }\n    return perReaderTermState;\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link TermContext} from a top-level {@link IndexReaderContext} and the\n   * given {@link Term}. This method will lookup the given term in all context's leaf readers \n   * and register each of the readers containing the term in the returned {@link TermContext}\n   * using the leaf reader's ordinal.\n   * <p>\n   * Note: the given context must be a top-level context.\n   */\n  public static TermContext build(IndexReaderContext context, Term term, boolean cache)\n      throws IOException {\n    assert context != null && context.isTopLevel;\n    final String field = term.field();\n    final BytesRef bytes = term.bytes();\n    final TermContext perReaderTermState = new TermContext(context);\n    //if (DEBUG) System.out.println(\"prts.build term=\" + term);\n    for (final AtomicReaderContext ctx : context.leaves()) {\n      //if (DEBUG) System.out.println(\"  r=\" + leaves[i].reader);\n      final Fields fields = ctx.reader().fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(field);\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(bytes, cache)) { \n            final TermState termState = termsEnum.termState();\n            //if (DEBUG) System.out.println(\"    found\");\n            perReaderTermState.register(termState, ctx.ord, termsEnum.docFreq(), termsEnum.totalTermFreq());\n          }\n        }\n      }\n    }\n    return perReaderTermState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermContext#build(IndexReaderContext,Term,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/TermContext#build(IndexReaderContext,Term,boolean).mjava","sourceNew":"  /**\n   * Creates a {@link TermContext} from a top-level {@link IndexReaderContext} and the\n   * given {@link Term}. This method will lookup the given term in all context's leaf readers \n   * and register each of the readers containing the term in the returned {@link TermContext}\n   * using the leaf reader's ordinal.\n   * <p>\n   * Note: the given context must be a top-level context.\n   */\n  public static TermContext build(IndexReaderContext context, Term term, boolean cache)\n      throws IOException {\n    assert context != null && context.isTopLevel;\n    final String field = term.field();\n    final BytesRef bytes = term.bytes();\n    final TermContext perReaderTermState = new TermContext(context);\n    //if (DEBUG) System.out.println(\"prts.build term=\" + term);\n    for (final AtomicReaderContext ctx : context.leaves()) {\n      //if (DEBUG) System.out.println(\"  r=\" + leaves[i].reader);\n      final Fields fields = ctx.reader().fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(field);\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(bytes, cache)) { \n            final TermState termState = termsEnum.termState();\n            //if (DEBUG) System.out.println(\"    found\");\n            perReaderTermState.register(termState, ctx.ord, termsEnum.docFreq(), termsEnum.totalTermFreq());\n          }\n        }\n      }\n    }\n    return perReaderTermState;\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link TermContext} from a top-level {@link IndexReaderContext} and the\n   * given {@link Term}. This method will lookup the given term in all context's leaf readers \n   * and register each of the readers containing the term in the returned {@link TermContext}\n   * using the leaf reader's ordinal.\n   * <p>\n   * Note: the given context must be a top-level context.\n   */\n  public static TermContext build(IndexReaderContext context, Term term, boolean cache)\n      throws IOException {\n    assert context != null && context.isTopLevel;\n    final String field = term.field();\n    final BytesRef bytes = term.bytes();\n    final TermContext perReaderTermState = new TermContext(context);\n    //if (DEBUG) System.out.println(\"prts.build term=\" + term);\n    for (final AtomicReaderContext ctx : context.leaves()) {\n      //if (DEBUG) System.out.println(\"  r=\" + leaves[i].reader);\n      final Fields fields = ctx.reader().fields();\n      if (fields != null) {\n        final Terms terms = fields.terms(field);\n        if (terms != null) {\n          final TermsEnum termsEnum = terms.iterator(null);\n          if (termsEnum.seekExact(bytes, cache)) { \n            final TermState termState = termsEnum.termState();\n            //if (DEBUG) System.out.println(\"    found\");\n            perReaderTermState.register(termState, ctx.ord, termsEnum.docFreq(), termsEnum.totalTermFreq());\n          }\n        }\n      }\n    }\n    return perReaderTermState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bcce0e518c0546269a896ca6124ba4313059185f":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","bcce0e518c0546269a896ca6124ba4313059185f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"0d4602ca2700dfd2f6159ad1499e5b6d1f3b92a8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["0d4602ca2700dfd2f6159ad1499e5b6d1f3b92a8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bcce0e518c0546269a896ca6124ba4313059185f"]},"commit2Childs":{"bcce0e518c0546269a896ca6124ba4313059185f":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["bcce0e518c0546269a896ca6124ba4313059185f","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0d4602ca2700dfd2f6159ad1499e5b6d1f3b92a8"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"0d4602ca2700dfd2f6159ad1499e5b6d1f3b92a8":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}