{"path":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#addEnvelopeToDocument(Part,Map[String,Object]).mjava","commits":[{"id":"36113efe922ae370819b20fba837a1a37d3dd2d8","date":1404234826,"type":1,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#addEnvelopeToDocument(Part,Map[String,Object]).mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#addEnvelopToDocument(Part,Map[String,Object]).mjava","sourceNew":"  private void addEnvelopeToDocument(Part part, Map<String,Object> row)\n      throws MessagingException {\n    MimeMessage mail = (MimeMessage) part;\n    Address[] adresses;\n    if ((adresses = mail.getFrom()) != null && adresses.length > 0) row.put(\n        FROM, adresses[0].toString());\n    \n    List<String> to = new ArrayList<>();\n    if ((adresses = mail.getRecipients(Message.RecipientType.TO)) != null) addAddressToList(\n        adresses, to);\n    if ((adresses = mail.getRecipients(Message.RecipientType.CC)) != null) addAddressToList(\n        adresses, to);\n    if ((adresses = mail.getRecipients(Message.RecipientType.BCC)) != null) addAddressToList(\n        adresses, to);\n    if (to.size() > 0) row.put(TO_CC_BCC, to);\n    \n    row.put(MESSAGE_ID, mail.getMessageID());\n    row.put(SUBJECT, mail.getSubject());\n    \n    Date d = mail.getSentDate();\n    if (d != null) {\n      row.put(SENT_DATE, d);\n    }\n    \n    List<String> flags = new ArrayList<>();\n    for (Flags.Flag flag : mail.getFlags().getSystemFlags()) {\n      if (flag == Flags.Flag.ANSWERED) flags.add(FLAG_ANSWERED);\n      else if (flag == Flags.Flag.DELETED) flags.add(FLAG_DELETED);\n      else if (flag == Flags.Flag.DRAFT) flags.add(FLAG_DRAFT);\n      else if (flag == Flags.Flag.FLAGGED) flags.add(FLAG_FLAGGED);\n      else if (flag == Flags.Flag.RECENT) flags.add(FLAG_RECENT);\n      else if (flag == Flags.Flag.SEEN) flags.add(FLAG_SEEN);\n    }\n    flags.addAll(Arrays.asList(mail.getFlags().getUserFlags()));\n    if (flags.size() == 0) flags.add(FLAG_NONE);\n    row.put(FLAGS, flags);\n    \n    String[] hdrs = mail.getHeader(\"X-Mailer\");\n    if (hdrs != null) row.put(XMAILER, hdrs[0]);\n  }\n\n","sourceOld":"  private void addEnvelopToDocument(Part part, Map<String, Object> row) throws MessagingException {\n    MimeMessage mail = (MimeMessage) part;\n    Address[] adresses;\n    if ((adresses = mail.getFrom()) != null && adresses.length > 0)\n      row.put(FROM, adresses[0].toString());\n\n    List<String> to = new ArrayList<>();\n    if ((adresses = mail.getRecipients(Message.RecipientType.TO)) != null)\n      addAddressToList(adresses, to);\n    if ((adresses = mail.getRecipients(Message.RecipientType.CC)) != null)\n      addAddressToList(adresses, to);\n    if ((adresses = mail.getRecipients(Message.RecipientType.BCC)) != null)\n      addAddressToList(adresses, to);\n    if (to.size() > 0)\n      row.put(TO_CC_BCC, to);\n\n    row.put(MESSAGE_ID, mail.getMessageID());\n    row.put(SUBJECT, mail.getSubject());\n\n    Date d = mail.getSentDate();\n    if (d != null) {\n      row.put(SENT_DATE, d);\n    }\n\n    List<String> flags = new ArrayList<>();\n    for (Flags.Flag flag : mail.getFlags().getSystemFlags()) {\n      if (flag == Flags.Flag.ANSWERED)\n        flags.add(FLAG_ANSWERED);\n      else if (flag == Flags.Flag.DELETED)\n        flags.add(FLAG_DELETED);\n      else if (flag == Flags.Flag.DRAFT)\n        flags.add(FLAG_DRAFT);\n      else if (flag == Flags.Flag.FLAGGED)\n        flags.add(FLAG_FLAGGED);\n      else if (flag == Flags.Flag.RECENT)\n        flags.add(FLAG_RECENT);\n      else if (flag == Flags.Flag.SEEN)\n        flags.add(FLAG_SEEN);\n    }\n    flags.addAll(Arrays.asList(mail.getFlags().getUserFlags()));\n    row.put(FLAGS, flags);\n\n    String[] hdrs = mail.getHeader(\"X-Mailer\");\n    if (hdrs != null)\n      row.put(XMAILER, hdrs[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0bac5e4f5082317c9a942b1deeeb22d6700ecff7","date":1404338458,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#addEnvelopToDocument(Part,Map[String,Object]).mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#addEnvelopeToDocument(Part,Map[String,Object]).mjava","sourceNew":"  private void addEnvelopToDocument(Part part, Map<String, Object> row) throws MessagingException {\n    MimeMessage mail = (MimeMessage) part;\n    Address[] adresses;\n    if ((adresses = mail.getFrom()) != null && adresses.length > 0)\n      row.put(FROM, adresses[0].toString());\n\n    List<String> to = new ArrayList<>();\n    if ((adresses = mail.getRecipients(Message.RecipientType.TO)) != null)\n      addAddressToList(adresses, to);\n    if ((adresses = mail.getRecipients(Message.RecipientType.CC)) != null)\n      addAddressToList(adresses, to);\n    if ((adresses = mail.getRecipients(Message.RecipientType.BCC)) != null)\n      addAddressToList(adresses, to);\n    if (to.size() > 0)\n      row.put(TO_CC_BCC, to);\n\n    row.put(MESSAGE_ID, mail.getMessageID());\n    row.put(SUBJECT, mail.getSubject());\n\n    Date d = mail.getSentDate();\n    if (d != null) {\n      row.put(SENT_DATE, d);\n    }\n\n    List<String> flags = new ArrayList<>();\n    for (Flags.Flag flag : mail.getFlags().getSystemFlags()) {\n      if (flag == Flags.Flag.ANSWERED)\n        flags.add(FLAG_ANSWERED);\n      else if (flag == Flags.Flag.DELETED)\n        flags.add(FLAG_DELETED);\n      else if (flag == Flags.Flag.DRAFT)\n        flags.add(FLAG_DRAFT);\n      else if (flag == Flags.Flag.FLAGGED)\n        flags.add(FLAG_FLAGGED);\n      else if (flag == Flags.Flag.RECENT)\n        flags.add(FLAG_RECENT);\n      else if (flag == Flags.Flag.SEEN)\n        flags.add(FLAG_SEEN);\n    }\n    flags.addAll(Arrays.asList(mail.getFlags().getUserFlags()));\n    row.put(FLAGS, flags);\n\n    String[] hdrs = mail.getHeader(\"X-Mailer\");\n    if (hdrs != null)\n      row.put(XMAILER, hdrs[0]);\n  }\n\n","sourceOld":"  private void addEnvelopeToDocument(Part part, Map<String,Object> row)\n      throws MessagingException {\n    MimeMessage mail = (MimeMessage) part;\n    Address[] adresses;\n    if ((adresses = mail.getFrom()) != null && adresses.length > 0) row.put(\n        FROM, adresses[0].toString());\n    \n    List<String> to = new ArrayList<>();\n    if ((adresses = mail.getRecipients(Message.RecipientType.TO)) != null) addAddressToList(\n        adresses, to);\n    if ((adresses = mail.getRecipients(Message.RecipientType.CC)) != null) addAddressToList(\n        adresses, to);\n    if ((adresses = mail.getRecipients(Message.RecipientType.BCC)) != null) addAddressToList(\n        adresses, to);\n    if (to.size() > 0) row.put(TO_CC_BCC, to);\n    \n    row.put(MESSAGE_ID, mail.getMessageID());\n    row.put(SUBJECT, mail.getSubject());\n    \n    Date d = mail.getSentDate();\n    if (d != null) {\n      row.put(SENT_DATE, d);\n    }\n    \n    List<String> flags = new ArrayList<>();\n    for (Flags.Flag flag : mail.getFlags().getSystemFlags()) {\n      if (flag == Flags.Flag.ANSWERED) flags.add(FLAG_ANSWERED);\n      else if (flag == Flags.Flag.DELETED) flags.add(FLAG_DELETED);\n      else if (flag == Flags.Flag.DRAFT) flags.add(FLAG_DRAFT);\n      else if (flag == Flags.Flag.FLAGGED) flags.add(FLAG_FLAGGED);\n      else if (flag == Flags.Flag.RECENT) flags.add(FLAG_RECENT);\n      else if (flag == Flags.Flag.SEEN) flags.add(FLAG_SEEN);\n    }\n    flags.addAll(Arrays.asList(mail.getFlags().getUserFlags()));\n    if (flags.size() == 0) flags.add(FLAG_NONE);\n    row.put(FLAGS, flags);\n    \n    String[] hdrs = mail.getHeader(\"X-Mailer\");\n    if (hdrs != null) row.put(XMAILER, hdrs[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0cd303657ee7726e12c45f9fd39b0285acf10c07","date":1405460668,"type":1,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#addEnvelopeToDocument(Part,Map[String,Object]).mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#addEnvelopToDocument(Part,Map[String,Object]).mjava","sourceNew":"  private void addEnvelopeToDocument(Part part, Map<String,Object> row)\n      throws MessagingException {\n    MimeMessage mail = (MimeMessage) part;\n    Address[] adresses;\n    if ((adresses = mail.getFrom()) != null && adresses.length > 0) row.put(\n        FROM, adresses[0].toString());\n    \n    List<String> to = new ArrayList<>();\n    if ((adresses = mail.getRecipients(Message.RecipientType.TO)) != null) addAddressToList(\n        adresses, to);\n    if ((adresses = mail.getRecipients(Message.RecipientType.CC)) != null) addAddressToList(\n        adresses, to);\n    if ((adresses = mail.getRecipients(Message.RecipientType.BCC)) != null) addAddressToList(\n        adresses, to);\n    if (to.size() > 0) row.put(TO_CC_BCC, to);\n    \n    row.put(MESSAGE_ID, mail.getMessageID());\n    row.put(SUBJECT, mail.getSubject());\n    \n    Date d = mail.getSentDate();\n    if (d != null) {\n      row.put(SENT_DATE, d);\n    }\n    \n    List<String> flags = new ArrayList<>();\n    for (Flags.Flag flag : mail.getFlags().getSystemFlags()) {\n      if (flag == Flags.Flag.ANSWERED) flags.add(FLAG_ANSWERED);\n      else if (flag == Flags.Flag.DELETED) flags.add(FLAG_DELETED);\n      else if (flag == Flags.Flag.DRAFT) flags.add(FLAG_DRAFT);\n      else if (flag == Flags.Flag.FLAGGED) flags.add(FLAG_FLAGGED);\n      else if (flag == Flags.Flag.RECENT) flags.add(FLAG_RECENT);\n      else if (flag == Flags.Flag.SEEN) flags.add(FLAG_SEEN);\n    }\n    flags.addAll(Arrays.asList(mail.getFlags().getUserFlags()));\n    if (flags.size() == 0) flags.add(FLAG_NONE);\n    row.put(FLAGS, flags);\n    \n    String[] hdrs = mail.getHeader(\"X-Mailer\");\n    if (hdrs != null) row.put(XMAILER, hdrs[0]);\n  }\n\n","sourceOld":"  private void addEnvelopToDocument(Part part, Map<String, Object> row) throws MessagingException {\n    MimeMessage mail = (MimeMessage) part;\n    Address[] adresses;\n    if ((adresses = mail.getFrom()) != null && adresses.length > 0)\n      row.put(FROM, adresses[0].toString());\n\n    List<String> to = new ArrayList<>();\n    if ((adresses = mail.getRecipients(Message.RecipientType.TO)) != null)\n      addAddressToList(adresses, to);\n    if ((adresses = mail.getRecipients(Message.RecipientType.CC)) != null)\n      addAddressToList(adresses, to);\n    if ((adresses = mail.getRecipients(Message.RecipientType.BCC)) != null)\n      addAddressToList(adresses, to);\n    if (to.size() > 0)\n      row.put(TO_CC_BCC, to);\n\n    row.put(MESSAGE_ID, mail.getMessageID());\n    row.put(SUBJECT, mail.getSubject());\n\n    Date d = mail.getSentDate();\n    if (d != null) {\n      row.put(SENT_DATE, d);\n    }\n\n    List<String> flags = new ArrayList<>();\n    for (Flags.Flag flag : mail.getFlags().getSystemFlags()) {\n      if (flag == Flags.Flag.ANSWERED)\n        flags.add(FLAG_ANSWERED);\n      else if (flag == Flags.Flag.DELETED)\n        flags.add(FLAG_DELETED);\n      else if (flag == Flags.Flag.DRAFT)\n        flags.add(FLAG_DRAFT);\n      else if (flag == Flags.Flag.FLAGGED)\n        flags.add(FLAG_FLAGGED);\n      else if (flag == Flags.Flag.RECENT)\n        flags.add(FLAG_RECENT);\n      else if (flag == Flags.Flag.SEEN)\n        flags.add(FLAG_SEEN);\n    }\n    flags.addAll(Arrays.asList(mail.getFlags().getUserFlags()));\n    row.put(FLAGS, flags);\n\n    String[] hdrs = mail.getHeader(\"X-Mailer\");\n    if (hdrs != null)\n      row.put(XMAILER, hdrs[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#addEnvelopeToDocument(Part,Map[String,Object]).mjava","sourceNew":null,"sourceOld":"  private void addEnvelopeToDocument(Part part, Map<String,Object> row)\n      throws MessagingException {\n    MimeMessage mail = (MimeMessage) part;\n    Address[] adresses;\n    if ((adresses = mail.getFrom()) != null && adresses.length > 0) row.put(\n        FROM, adresses[0].toString());\n    \n    List<String> to = new ArrayList<>();\n    if ((adresses = mail.getRecipients(Message.RecipientType.TO)) != null) addAddressToList(\n        adresses, to);\n    if ((adresses = mail.getRecipients(Message.RecipientType.CC)) != null) addAddressToList(\n        adresses, to);\n    if ((adresses = mail.getRecipients(Message.RecipientType.BCC)) != null) addAddressToList(\n        adresses, to);\n    if (to.size() > 0) row.put(TO_CC_BCC, to);\n    \n    row.put(MESSAGE_ID, mail.getMessageID());\n    row.put(SUBJECT, mail.getSubject());\n    \n    Date d = mail.getSentDate();\n    if (d != null) {\n      row.put(SENT_DATE, d);\n    }\n    \n    List<String> flags = new ArrayList<>();\n    for (Flags.Flag flag : mail.getFlags().getSystemFlags()) {\n      if (flag == Flags.Flag.ANSWERED) flags.add(FLAG_ANSWERED);\n      else if (flag == Flags.Flag.DELETED) flags.add(FLAG_DELETED);\n      else if (flag == Flags.Flag.DRAFT) flags.add(FLAG_DRAFT);\n      else if (flag == Flags.Flag.FLAGGED) flags.add(FLAG_FLAGGED);\n      else if (flag == Flags.Flag.RECENT) flags.add(FLAG_RECENT);\n      else if (flag == Flags.Flag.SEEN) flags.add(FLAG_SEEN);\n    }\n    flags.addAll(Arrays.asList(mail.getFlags().getUserFlags()));\n    if (flags.size() == 0) flags.add(FLAG_NONE);\n    row.put(FLAGS, flags);\n    \n    String[] hdrs = mail.getHeader(\"X-Mailer\");\n    if (hdrs != null) row.put(XMAILER, hdrs[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["0cd303657ee7726e12c45f9fd39b0285acf10c07"],"36113efe922ae370819b20fba837a1a37d3dd2d8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0bac5e4f5082317c9a942b1deeeb22d6700ecff7":["36113efe922ae370819b20fba837a1a37d3dd2d8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0cd303657ee7726e12c45f9fd39b0285acf10c07":["0bac5e4f5082317c9a942b1deeeb22d6700ecff7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"36113efe922ae370819b20fba837a1a37d3dd2d8":["0bac5e4f5082317c9a942b1deeeb22d6700ecff7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["36113efe922ae370819b20fba837a1a37d3dd2d8"],"0bac5e4f5082317c9a942b1deeeb22d6700ecff7":["0cd303657ee7726e12c45f9fd39b0285acf10c07"],"0cd303657ee7726e12c45f9fd39b0285acf10c07":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}