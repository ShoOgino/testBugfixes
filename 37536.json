{"path":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity#encodeNormValue(float,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity#encodeNormValue(float,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/similarities/BM25Similarity#encodeNormValue(float,int).mjava","sourceNew":"  /** The default implementation encodes <code>boost / sqrt(length)</code>\n   * with {@link SmallFloat#floatToByte315(float)}.  This is compatible with \n   * Lucene's default implementation.  If you change this, then you should \n   * change {@link #decodeNormValue(byte)} to match. */\n  protected byte encodeNormValue(float boost, int fieldLength) {\n    return SmallFloat.floatToByte315(boost / (float) Math.sqrt(fieldLength));\n  }\n\n","sourceOld":"  /** The default implementation encodes <code>boost / sqrt(length)</code>\n   * with {@link SmallFloat#floatToByte315(float)}.  This is compatible with \n   * Lucene's default implementation.  If you change this, then you should \n   * change {@link #decodeNormValue(byte)} to match. */\n  protected byte encodeNormValue(float boost, int fieldLength) {\n    return SmallFloat.floatToByte315(boost / (float) Math.sqrt(fieldLength));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity#encodeNormValue(float,int).mjava","sourceNew":null,"sourceOld":"  /** The default implementation encodes <code>boost / sqrt(length)</code>\n   * with {@link SmallFloat#floatToByte315(float)}.  This is compatible with \n   * Lucene's default implementation.  If you change this, then you should \n   * change {@link #decodeNormValue(byte)} to match. */\n  protected byte encodeNormValue(float boost, int fieldLength) {\n    return SmallFloat.floatToByte315(boost / (float) Math.sqrt(fieldLength));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"acd9883560fd89e6448b2b447302fe543040cd4f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["acd9883560fd89e6448b2b447302fe543040cd4f"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["acd9883560fd89e6448b2b447302fe543040cd4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"acd9883560fd89e6448b2b447302fe543040cd4f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}