{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/PredictEvaluator#evaluate(Tuple).mjava","commits":[{"id":"12cb83a3f761dc612e1ece020f46e1886fc2550e","date":1495722768,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/PredictEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/PredictEvaluator#evaluate(Tuple).mjava","sourceNew":"  public Number evaluate(Tuple tuple) throws IOException {\n\n    if(subEvaluators.size() != 2) {\n      throw new IOException(\"Predict expects 2 parameters: a regression result and a number\");\n    }\n\n    StreamEvaluator r = subEvaluators.get(0);\n    StreamEvaluator d = subEvaluators.get(1);\n\n    RegressionEvaluator.RegressionTuple rt= (RegressionEvaluator.RegressionTuple)r.evaluate(tuple);\n    Number n = (Number)d.evaluate(tuple);\n    return rt.predict(n.doubleValue());\n  }\n\n","sourceOld":"  public Number evaluate(Tuple tuple) throws IOException {\n\n    if(subEvaluators.size() != 2) {\n      throw new IOException(\"Predict expects 2 parameters: a regression result and a number\");\n    }\n\n    StreamEvaluator r = subEvaluators.get(0);\n    StreamEvaluator d = subEvaluators.get(1);\n\n    RegressionEvaluator.RegressionTuple rt= (RegressionEvaluator.RegressionTuple)r.evaluate(tuple);\n    Number n = (Number)d.evaluate(tuple);\n    return rt.predict(n.doubleValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/PredictEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/PredictEvaluator#evaluate(Tuple).mjava","sourceNew":"  public Number evaluate(Tuple tuple) throws IOException {\n\n    if(subEvaluators.size() != 2) {\n      throw new IOException(\"Predict expects 2 parameters: a regression result and a number\");\n    }\n\n    StreamEvaluator r = subEvaluators.get(0);\n    StreamEvaluator d = subEvaluators.get(1);\n\n    RegressionEvaluator.RegressionTuple rt= (RegressionEvaluator.RegressionTuple)r.evaluate(tuple);\n    Number n = (Number)d.evaluate(tuple);\n    return rt.predict(n.doubleValue());\n  }\n\n","sourceOld":"  public Number evaluate(Tuple tuple) throws IOException {\n\n    if(subEvaluators.size() != 2) {\n      throw new IOException(\"Predict expects 2 parameters: a regression result and a number\");\n    }\n\n    StreamEvaluator r = subEvaluators.get(0);\n    StreamEvaluator d = subEvaluators.get(1);\n\n    RegressionEvaluator.RegressionTuple rt= (RegressionEvaluator.RegressionTuple)r.evaluate(tuple);\n    Number n = (Number)d.evaluate(tuple);\n    return rt.predict(n.doubleValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/PredictEvaluator#evaluate(Tuple).mjava","pathOld":"/dev/null","sourceNew":"  public Number evaluate(Tuple tuple) throws IOException {\n\n    if(subEvaluators.size() != 2) {\n      throw new IOException(\"Predict expects 2 parameters: a regression result and a number\");\n    }\n\n    StreamEvaluator r = subEvaluators.get(0);\n    StreamEvaluator d = subEvaluators.get(1);\n\n    RegressionEvaluator.RegressionTuple rt= (RegressionEvaluator.RegressionTuple)r.evaluate(tuple);\n    Number n = (Number)d.evaluate(tuple);\n    return rt.predict(n.doubleValue());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"72dc84475e6ad3fd8951c733b6e17916c03cd574","date":1497801058,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/PredictEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/PredictEvaluator#evaluate(Tuple).mjava","sourceNew":"  public Number evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator r = subEvaluators.get(0);\n    StreamEvaluator d = subEvaluators.get(1);\n\n    RegressionEvaluator.RegressionTuple rt= (RegressionEvaluator.RegressionTuple)r.evaluate(tuple);\n    Number n = (Number)d.evaluate(tuple);\n    return rt.predict(n.doubleValue());\n  }\n\n","sourceOld":"  public Number evaluate(Tuple tuple) throws IOException {\n\n    if(subEvaluators.size() != 2) {\n      throw new IOException(\"Predict expects 2 parameters: a regression result and a number\");\n    }\n\n    StreamEvaluator r = subEvaluators.get(0);\n    StreamEvaluator d = subEvaluators.get(1);\n\n    RegressionEvaluator.RegressionTuple rt= (RegressionEvaluator.RegressionTuple)r.evaluate(tuple);\n    Number n = (Number)d.evaluate(tuple);\n    return rt.predict(n.doubleValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/PredictEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/PredictEvaluator#evaluate(Tuple).mjava","sourceNew":"  public Number evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator r = subEvaluators.get(0);\n    StreamEvaluator d = subEvaluators.get(1);\n\n    RegressionEvaluator.RegressionTuple rt= (RegressionEvaluator.RegressionTuple)r.evaluate(tuple);\n    Number n = (Number)d.evaluate(tuple);\n    return rt.predict(n.doubleValue());\n  }\n\n","sourceOld":"  public Number evaluate(Tuple tuple) throws IOException {\n\n    if(subEvaluators.size() != 2) {\n      throw new IOException(\"Predict expects 2 parameters: a regression result and a number\");\n    }\n\n    StreamEvaluator r = subEvaluators.get(0);\n    StreamEvaluator d = subEvaluators.get(1);\n\n    RegressionEvaluator.RegressionTuple rt= (RegressionEvaluator.RegressionTuple)r.evaluate(tuple);\n    Number n = (Number)d.evaluate(tuple);\n    return rt.predict(n.doubleValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/PredictEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/PredictEvaluator#evaluate(Tuple).mjava","sourceNew":"  public Number evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator r = subEvaluators.get(0);\n    StreamEvaluator d = subEvaluators.get(1);\n\n    RegressionEvaluator.RegressionTuple rt= (RegressionEvaluator.RegressionTuple)r.evaluate(tuple);\n    Number n = (Number)d.evaluate(tuple);\n    return rt.predict(n.doubleValue());\n  }\n\n","sourceOld":"  public Number evaluate(Tuple tuple) throws IOException {\n\n    if(subEvaluators.size() != 2) {\n      throw new IOException(\"Predict expects 2 parameters: a regression result and a number\");\n    }\n\n    StreamEvaluator r = subEvaluators.get(0);\n    StreamEvaluator d = subEvaluators.get(1);\n\n    RegressionEvaluator.RegressionTuple rt= (RegressionEvaluator.RegressionTuple)r.evaluate(tuple);\n    Number n = (Number)d.evaluate(tuple);\n    return rt.predict(n.doubleValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f987d5e3cfea4c0bc9f333d3cbe04ef4f4f8c863","date":1502218425,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/PredictEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/PredictEvaluator#evaluate(Tuple).mjava","sourceNew":"  public Object evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator r = subEvaluators.get(0);\n    StreamEvaluator d = subEvaluators.get(1);\n\n    RegressionEvaluator.RegressionTuple rt= (RegressionEvaluator.RegressionTuple)r.evaluate(tuple);\n\n    Object o = d.evaluate(tuple);\n    if(o instanceof Number) {\n      Number n = (Number)o;\n      return rt.predict(n.doubleValue());\n    } else {\n      List<Number> list = (List<Number>)o;\n      List<Number> predications = new ArrayList();\n      for(Number n : list) {\n        predications.add(rt.predict(n.doubleValue()));\n      }\n      return predications;\n    }\n  }\n\n","sourceOld":"  public Number evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator r = subEvaluators.get(0);\n    StreamEvaluator d = subEvaluators.get(1);\n\n    RegressionEvaluator.RegressionTuple rt= (RegressionEvaluator.RegressionTuple)r.evaluate(tuple);\n    Number n = (Number)d.evaluate(tuple);\n    return rt.predict(n.doubleValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58884af1f68e9d61c217c753fbd6266d86a63b14","date":1502363401,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/PredictEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/PredictEvaluator#evaluate(Tuple).mjava","sourceNew":"  public Object evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator r = subEvaluators.get(0);\n    StreamEvaluator d = subEvaluators.get(1);\n\n    RegressionEvaluator.RegressionTuple rt= (RegressionEvaluator.RegressionTuple)r.evaluate(tuple);\n\n    Object o = d.evaluate(tuple);\n    if(o instanceof Number) {\n      Number n = (Number)o;\n      return rt.predict(n.doubleValue());\n    } else {\n      List<Number> list = (List<Number>)o;\n      List<Number> predications = new ArrayList();\n      for(Number n : list) {\n        predications.add(rt.predict(n.doubleValue()));\n      }\n      return predications;\n    }\n  }\n\n","sourceOld":"  public Number evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator r = subEvaluators.get(0);\n    StreamEvaluator d = subEvaluators.get(1);\n\n    RegressionEvaluator.RegressionTuple rt= (RegressionEvaluator.RegressionTuple)r.evaluate(tuple);\n    Number n = (Number)d.evaluate(tuple);\n    return rt.predict(n.doubleValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","date":1502692251,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/PredictEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/PredictEvaluator#evaluate(Tuple).mjava","sourceNew":"  public Object evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator r = subEvaluators.get(0);\n    StreamEvaluator d = subEvaluators.get(1);\n\n    RegressionEvaluator.RegressionTuple rt= (RegressionEvaluator.RegressionTuple)r.evaluate(tuple);\n\n    Object o = d.evaluate(tuple);\n    if(o instanceof Number) {\n      Number n = (Number)o;\n      return rt.predict(n.doubleValue());\n    } else {\n      List<Number> list = (List<Number>)o;\n      List<Number> predications = new ArrayList();\n      for(Number n : list) {\n        predications.add(rt.predict(n.doubleValue()));\n      }\n      return predications;\n    }\n  }\n\n","sourceOld":"  public Number evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator r = subEvaluators.get(0);\n    StreamEvaluator d = subEvaluators.get(1);\n\n    RegressionEvaluator.RegressionTuple rt= (RegressionEvaluator.RegressionTuple)r.evaluate(tuple);\n    Number n = (Number)d.evaluate(tuple);\n    return rt.predict(n.doubleValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1e7de64990e3928b90142a52fb92eeff556475","date":1503713257,"type":4,"author":"Dennis Gove","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/PredictEvaluator#evaluate(Tuple).mjava","sourceNew":null,"sourceOld":"  public Object evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator r = subEvaluators.get(0);\n    StreamEvaluator d = subEvaluators.get(1);\n\n    RegressionEvaluator.RegressionTuple rt= (RegressionEvaluator.RegressionTuple)r.evaluate(tuple);\n\n    Object o = d.evaluate(tuple);\n    if(o instanceof Number) {\n      Number n = (Number)o;\n      return rt.predict(n.doubleValue());\n    } else {\n      List<Number> list = (List<Number>)o;\n      List<Number> predications = new ArrayList();\n      for(Number n : list) {\n        predications.add(rt.predict(n.doubleValue()));\n      }\n      return predications;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45c28dbb559366e1f4ef8077346552bfb3f7ecf6","date":1503738439,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/PredictEvaluator#evaluate(Tuple).mjava","sourceNew":null,"sourceOld":"  public Object evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator r = subEvaluators.get(0);\n    StreamEvaluator d = subEvaluators.get(1);\n\n    RegressionEvaluator.RegressionTuple rt= (RegressionEvaluator.RegressionTuple)r.evaluate(tuple);\n\n    Object o = d.evaluate(tuple);\n    if(o instanceof Number) {\n      Number n = (Number)o;\n      return rt.predict(n.doubleValue());\n    } else {\n      List<Number> list = (List<Number>)o;\n      List<Number> predications = new ArrayList();\n      for(Number n : list) {\n        predications.add(rt.predict(n.doubleValue()));\n      }\n      return predications;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/PredictEvaluator#evaluate(Tuple).mjava","sourceNew":null,"sourceOld":"  public Object evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator r = subEvaluators.get(0);\n    StreamEvaluator d = subEvaluators.get(1);\n\n    RegressionEvaluator.RegressionTuple rt= (RegressionEvaluator.RegressionTuple)r.evaluate(tuple);\n\n    Object o = d.evaluate(tuple);\n    if(o instanceof Number) {\n      Number n = (Number)o;\n      return rt.predict(n.doubleValue());\n    } else {\n      List<Number> list = (List<Number>)o;\n      List<Number> predications = new ArrayList();\n      for(Number n : list) {\n        predications.add(rt.predict(n.doubleValue()));\n      }\n      return predications;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"12cb83a3f761dc612e1ece020f46e1886fc2550e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f987d5e3cfea4c0bc9f333d3cbe04ef4f4f8c863":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["d1f5728f32a4a256b36cfabd7a2636452f599bb9","72dc84475e6ad3fd8951c733b6e17916c03cd574"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","12cb83a3f761dc612e1ece020f46e1886fc2550e"],"58884af1f68e9d61c217c753fbd6266d86a63b14":["28288370235ed02234a64753cdbf0c6ec096304a","f987d5e3cfea4c0bc9f333d3cbe04ef4f4f8c863"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["f987d5e3cfea4c0bc9f333d3cbe04ef4f4f8c863","ba1e7de64990e3928b90142a52fb92eeff556475"],"72dc84475e6ad3fd8951c733b6e17916c03cd574":["12cb83a3f761dc612e1ece020f46e1886fc2550e"],"ba1e7de64990e3928b90142a52fb92eeff556475":["f987d5e3cfea4c0bc9f333d3cbe04ef4f4f8c863"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","f987d5e3cfea4c0bc9f333d3cbe04ef4f4f8c863"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","12cb83a3f761dc612e1ece020f46e1886fc2550e"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["e9017cf144952056066919f1ebc7897ff9bd71b1","72dc84475e6ad3fd8951c733b6e17916c03cd574"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"]},"commit2Childs":{"12cb83a3f761dc612e1ece020f46e1886fc2550e":["e9017cf144952056066919f1ebc7897ff9bd71b1","72dc84475e6ad3fd8951c733b6e17916c03cd574","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"f987d5e3cfea4c0bc9f333d3cbe04ef4f4f8c863":["58884af1f68e9d61c217c753fbd6266d86a63b14","45c28dbb559366e1f4ef8077346552bfb3f7ecf6","ba1e7de64990e3928b90142a52fb92eeff556475","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"28288370235ed02234a64753cdbf0c6ec096304a":["f987d5e3cfea4c0bc9f333d3cbe04ef4f4f8c863","58884af1f68e9d61c217c753fbd6266d86a63b14"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"58884af1f68e9d61c217c753fbd6266d86a63b14":[],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["12cb83a3f761dc612e1ece020f46e1886fc2550e","e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"72dc84475e6ad3fd8951c733b6e17916c03cd574":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"ba1e7de64990e3928b90142a52fb92eeff556475":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["28288370235ed02234a64753cdbf0c6ec096304a"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["58884af1f68e9d61c217c753fbd6266d86a63b14","3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}