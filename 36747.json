{"path":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#assertEqualArrays(String,byte[],byte[],int,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#assertEqualArrays(String,byte[],byte[],int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#assertEqualArrays(String,byte[],byte[],int,int).mjava","sourceNew":"    private void assertEqualArrays(String msg,\n                                   byte[] expected,\n                                   byte[] test,\n                                   int start,\n                                   int len)\n    {\n        assertNotNull(msg + \" null expected\", expected);\n        assertNotNull(msg + \" null test\", test);\n\n        for (int i=start; i<len; i++) {\n            assertEquals(msg + \" \" + i, expected[i], test[i]);\n        }\n    }\n\n","sourceOld":"    private void assertEqualArrays(String msg,\n                                   byte[] expected,\n                                   byte[] test,\n                                   int start,\n                                   int len)\n    {\n        assertNotNull(msg + \" null expected\", expected);\n        assertNotNull(msg + \" null test\", test);\n\n        for (int i=start; i<len; i++) {\n            assertEquals(msg + \" \" + i, expected[i], test[i]);\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f382b2e9f4ca7dbe98e2f15da70983ecfc02b171","date":1412231650,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#assertEqualArrays(String,byte[],byte[],int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#assertEqualArrays(String,byte[],byte[],int,int).mjava","sourceNew":"  static void assertEqualArrays(String msg, byte[] expected, byte[] test, int start, int len) {\n    assertNotNull(msg + \" null expected\", expected);\n    assertNotNull(msg + \" null test\", test);\n    \n    for (int i=start; i<len; i++) {\n      assertEquals(msg + \" \" + i, expected[i], test[i]);\n    }\n  }\n\n","sourceOld":"    private void assertEqualArrays(String msg,\n                                   byte[] expected,\n                                   byte[] test,\n                                   int start,\n                                   int len)\n    {\n        assertNotNull(msg + \" null expected\", expected);\n        assertNotNull(msg + \" null test\", test);\n\n        for (int i=start; i<len; i++) {\n            assertEquals(msg + \" \" + i, expected[i], test[i]);\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"989d940c4bf402188f4f0ae13736836885227383","date":1412263633,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#assertEqualArrays(String,byte[],byte[],int,int).mjava","sourceNew":null,"sourceOld":"  static void assertEqualArrays(String msg, byte[] expected, byte[] test, int start, int len) {\n    assertNotNull(msg + \" null expected\", expected);\n    assertNotNull(msg + \" null test\", test);\n    \n    for (int i=start; i<len; i++) {\n      assertEquals(msg + \" \" + i, expected[i], test[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#assertEqualArrays(String,byte[],byte[],int,int).mjava","sourceNew":null,"sourceOld":"    private void assertEqualArrays(String msg,\n                                   byte[] expected,\n                                   byte[] test,\n                                   int start,\n                                   int len)\n    {\n        assertNotNull(msg + \" null expected\", expected);\n        assertNotNull(msg + \" null test\", test);\n\n        for (int i=start; i<len; i++) {\n            assertEquals(msg + \" \" + i, expected[i], test[i]);\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"989d940c4bf402188f4f0ae13736836885227383":["f382b2e9f4ca7dbe98e2f15da70983ecfc02b171"],"f382b2e9f4ca7dbe98e2f15da70983ecfc02b171":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9bb9a29a5e71a90295f175df8919802993142c9a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","989d940c4bf402188f4f0ae13736836885227383"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9bb9a29a5e71a90295f175df8919802993142c9a"]},"commit2Childs":{"989d940c4bf402188f4f0ae13736836885227383":["9bb9a29a5e71a90295f175df8919802993142c9a"],"f382b2e9f4ca7dbe98e2f15da70983ecfc02b171":["989d940c4bf402188f4f0ae13736836885227383"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f382b2e9f4ca7dbe98e2f15da70983ecfc02b171","9bb9a29a5e71a90295f175df8919802993142c9a"],"9bb9a29a5e71a90295f175df8919802993142c9a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}