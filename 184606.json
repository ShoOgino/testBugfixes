{"path":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testFloatPointFieldRangeFacet().mjava","commits":[{"id":"46dc9ac8b3e748407baaef82453138ff3974480c","date":1484789241,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testFloatPointFieldRangeFacet().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testFloatPointFieldRangeFacet() throws Exception {\n    doTestFloatPointFieldRangeFacet(\"number_p_f_dv\", \"number_p_f\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testFloatPointFieldRangeFacet().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testFloatPointFieldRangeFacet() throws Exception {\n    doTestFloatPointFieldRangeFacet(\"number_p_f_dv\", \"number_p_f\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac5a6354a5800dd1ade225010d614eeb8acf9152","date":1499731103,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testFloatPointFieldRangeFacet().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testFloatPointFieldRangeFacet().mjava","sourceNew":"  @Test\n  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11043\")\n  public void testFloatPointFieldRangeFacet() throws Exception {\n    String docValuesField = \"number_p_f_dv\";\n    String nonDocValuesField = \"number_p_f\";\n    int numValues = 10 * RANDOM_MULTIPLIER;\n    int numBuckets = numValues / 2;\n    List<Float> values, sortedValues;\n    float min, max, gap, buffer;\n    do {\n      values = getRandomFloats(numValues, false);\n      sortedValues = values.stream().sorted().collect(Collectors.toList());\n      min = sortedValues.get(0);\n      max = sortedValues.get(sortedValues.size() - 1);\n      buffer = (float)(((double)max - (double)min) / (double)numValues / 2.0D);\n      gap = (float)(((double)max + (double)buffer - (double)min + (double)buffer) / (double)numBuckets);\n    } while (max >= Float.MAX_VALUE - buffer || min <= -Float.MAX_VALUE + buffer); \n    // System.err.println(\"min: \" + min + \"   max: \" + max + \"   gap: \" + gap + \"   buffer: \" + buffer);\n    int[] bucketCount = new int[numBuckets];\n    int bucketNum = 0;\n    float minBucketVal = min - buffer;\n    // System.err.println(\"bucketNum: \" + bucketNum + \"   minBucketVal: \" + minBucketVal);\n    for (float value : sortedValues) {\n      // System.err.println(\"value: \" + value);\n      while (value - minBucketVal >= gap) {\n        ++bucketNum;\n        minBucketVal += gap;\n        // System.err.println(\"bucketNum: \" + bucketNum + \"   minBucketVal: \" + minBucketVal);\n      }\n      ++bucketCount[bucketNum];\n    }\n\n    for (int i = 0 ; i < numValues ; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), \n          docValuesField, String.valueOf(values.get(i)), nonDocValuesField, String.valueOf(values.get(i))));\n    }\n    assertU(commit());\n\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    String[] testStrings = new String[numBuckets + 1];\n    testStrings[numBuckets] = \"//*[@numFound='\" + numValues + \"']\";\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + bucketCount[i] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap)),\n        testStrings);\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\"),\n        testStrings);\n\n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + bucketCount[i] + \"']\";\n    }\n    // Range Faceting with method = filter should work\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"filter\"),\n        testStrings);\n    // this should actually use filter method instead of dv\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\"),\n        testStrings);\n  }\n\n","sourceOld":"  @Test\n  public void testFloatPointFieldRangeFacet() throws Exception {\n    doTestFloatPointFieldRangeFacet(\"number_p_f_dv\", \"number_p_f\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9a989a32a073c55e3aef6f807a3474184bbcf49","date":1499930209,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testFloatPointFieldRangeFacet().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testFloatPointFieldRangeFacet().mjava","sourceNew":"  @Test\n  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11043\")\n  public void testFloatPointFieldRangeFacet() throws Exception {\n    String docValuesField = \"number_p_f_dv\";\n    String nonDocValuesField = \"number_p_f\";\n    int numValues = 10 * RANDOM_MULTIPLIER;\n    int numBuckets = numValues / 2;\n    List<Float> values, sortedValues;\n    float min, max, gap, buffer;\n    do {\n      values = getRandomFloats(numValues, false);\n      sortedValues = values.stream().sorted().collect(Collectors.toList());\n      min = sortedValues.get(0);\n      max = sortedValues.get(sortedValues.size() - 1);\n      buffer = (float)(((double)max - (double)min) / (double)numValues / 2.0D);\n      gap = (float)(((double)max + (double)buffer - (double)min + (double)buffer) / (double)numBuckets);\n    } while (max >= Float.MAX_VALUE - buffer || min <= -Float.MAX_VALUE + buffer); \n    // System.err.println(\"min: \" + min + \"   max: \" + max + \"   gap: \" + gap + \"   buffer: \" + buffer);\n    int[] bucketCount = new int[numBuckets];\n    int bucketNum = 0;\n    float minBucketVal = min - buffer;\n    // System.err.println(\"bucketNum: \" + bucketNum + \"   minBucketVal: \" + minBucketVal);\n    for (float value : sortedValues) {\n      // System.err.println(\"value: \" + value);\n      while (value - minBucketVal >= gap) {\n        ++bucketNum;\n        minBucketVal += gap;\n        // System.err.println(\"bucketNum: \" + bucketNum + \"   minBucketVal: \" + minBucketVal);\n      }\n      ++bucketCount[bucketNum];\n    }\n\n    for (int i = 0 ; i < numValues ; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), \n          docValuesField, String.valueOf(values.get(i)), nonDocValuesField, String.valueOf(values.get(i))));\n    }\n    assertU(commit());\n\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    String[] testStrings = new String[numBuckets + 1];\n    testStrings[numBuckets] = \"//*[@numFound='\" + numValues + \"']\";\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + bucketCount[i] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap)),\n        testStrings);\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\"),\n        testStrings);\n\n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + bucketCount[i] + \"']\";\n    }\n    // Range Faceting with method = filter should work\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"filter\"),\n        testStrings);\n    // this should actually use filter method instead of dv\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\"),\n        testStrings);\n  }\n\n","sourceOld":"  @Test\n  public void testFloatPointFieldRangeFacet() throws Exception {\n    doTestFloatPointFieldRangeFacet(\"number_p_f_dv\", \"number_p_f\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb569fd721c41eafc2a2d788499a7df490c7f1a5","date":1499930871,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testFloatPointFieldRangeFacet().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testFloatPointFieldRangeFacet().mjava","sourceNew":"  @Test\n  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11043\")\n  public void testFloatPointFieldRangeFacet() throws Exception {\n    String docValuesField = \"number_p_f_dv\";\n    String nonDocValuesField = \"number_p_f\";\n    int numValues = 10 * RANDOM_MULTIPLIER;\n    int numBuckets = numValues / 2;\n    List<Float> values, sortedValues;\n    float min, max, gap, buffer;\n    do {\n      values = getRandomFloats(numValues, false);\n      sortedValues = values.stream().sorted().collect(Collectors.toList());\n      min = sortedValues.get(0);\n      max = sortedValues.get(sortedValues.size() - 1);\n      buffer = (float)(((double)max - (double)min) / (double)numValues / 2.0D);\n      gap = (float)(((double)max + (double)buffer - (double)min + (double)buffer) / (double)numBuckets);\n    } while (max >= Float.MAX_VALUE - buffer || min <= -Float.MAX_VALUE + buffer); \n    // System.err.println(\"min: \" + min + \"   max: \" + max + \"   gap: \" + gap + \"   buffer: \" + buffer);\n    int[] bucketCount = new int[numBuckets];\n    int bucketNum = 0;\n    float minBucketVal = min - buffer;\n    // System.err.println(\"bucketNum: \" + bucketNum + \"   minBucketVal: \" + minBucketVal);\n    for (float value : sortedValues) {\n      // System.err.println(\"value: \" + value);\n      while (value - minBucketVal >= gap) {\n        ++bucketNum;\n        minBucketVal += gap;\n        // System.err.println(\"bucketNum: \" + bucketNum + \"   minBucketVal: \" + minBucketVal);\n      }\n      ++bucketCount[bucketNum];\n    }\n\n    for (int i = 0 ; i < numValues ; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), \n          docValuesField, String.valueOf(values.get(i)), nonDocValuesField, String.valueOf(values.get(i))));\n    }\n    assertU(commit());\n\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    String[] testStrings = new String[numBuckets + 1];\n    testStrings[numBuckets] = \"//*[@numFound='\" + numValues + \"']\";\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + bucketCount[i] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap)),\n        testStrings);\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\"),\n        testStrings);\n\n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + bucketCount[i] + \"']\";\n    }\n    // Range Faceting with method = filter should work\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"filter\"),\n        testStrings);\n    // this should actually use filter method instead of dv\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\"),\n        testStrings);\n  }\n\n","sourceOld":"  @Test\n  public void testFloatPointFieldRangeFacet() throws Exception {\n    doTestFloatPointFieldRangeFacet(\"number_p_f_dv\", \"number_p_f\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0a64ffcef6ae839baf314a48817008c796b053d","date":1499974056,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testFloatPointFieldRangeFacet().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testFloatPointFieldRangeFacet().mjava","sourceNew":"  @Test\n  public void testFloatPointFieldRangeFacet() throws Exception {\n    String docValuesField = \"number_p_f_dv\";\n    String nonDocValuesField = \"number_p_f\";\n    int numValues = 10 * RANDOM_MULTIPLIER;\n    int numBuckets = numValues / 2;\n    List<Float> values, sortedValues;\n    float min, max, gap, buffer;\n    do {\n      values = getRandomFloats(numValues, false);\n      sortedValues = values.stream().sorted().collect(Collectors.toList());\n      min = sortedValues.get(0);\n      max = sortedValues.get(sortedValues.size() - 1);\n      buffer = (float)(((double)max - (double)min) / (double)numValues / 2.0D);\n      gap = (float)(((double)max + (double)buffer - (double)min + (double)buffer) / (double)numBuckets);\n    } while (max >= Float.MAX_VALUE - buffer || min <= -Float.MAX_VALUE + buffer); \n    // System.err.println(\"min: \" + min + \"   max: \" + max + \"   gap: \" + gap + \"   buffer: \" + buffer);\n    int[] bucketCount = new int[numBuckets];\n    int bucketNum = 0;\n    float minBucketVal = min - buffer;\n    // System.err.println(\"bucketNum: \" + bucketNum + \"   minBucketVal: \" + minBucketVal);\n    for (float value : sortedValues) {\n      // System.err.println(\"value: \" + value);\n      while (value - minBucketVal >= gap) {\n        ++bucketNum;\n        minBucketVal += gap;\n        // System.err.println(\"bucketNum: \" + bucketNum + \"   minBucketVal: \" + minBucketVal);\n      }\n      ++bucketCount[bucketNum];\n    }\n\n    for (int i = 0 ; i < numValues ; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), \n          docValuesField, String.valueOf(values.get(i)), nonDocValuesField, String.valueOf(values.get(i))));\n    }\n    assertU(commit());\n\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    String[] testStrings = new String[numBuckets + 1];\n    testStrings[numBuckets] = \"//*[@numFound='\" + numValues + \"']\";\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + bucketCount[i] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap)),\n        testStrings);\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\"),\n        testStrings);\n\n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + bucketCount[i] + \"']\";\n    }\n    // Range Faceting with method = filter should work\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"filter\"),\n        testStrings);\n    // this should actually use filter method instead of dv\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\"),\n        testStrings);\n  }\n\n","sourceOld":"  @Test\n  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11043\")\n  public void testFloatPointFieldRangeFacet() throws Exception {\n    String docValuesField = \"number_p_f_dv\";\n    String nonDocValuesField = \"number_p_f\";\n    int numValues = 10 * RANDOM_MULTIPLIER;\n    int numBuckets = numValues / 2;\n    List<Float> values, sortedValues;\n    float min, max, gap, buffer;\n    do {\n      values = getRandomFloats(numValues, false);\n      sortedValues = values.stream().sorted().collect(Collectors.toList());\n      min = sortedValues.get(0);\n      max = sortedValues.get(sortedValues.size() - 1);\n      buffer = (float)(((double)max - (double)min) / (double)numValues / 2.0D);\n      gap = (float)(((double)max + (double)buffer - (double)min + (double)buffer) / (double)numBuckets);\n    } while (max >= Float.MAX_VALUE - buffer || min <= -Float.MAX_VALUE + buffer); \n    // System.err.println(\"min: \" + min + \"   max: \" + max + \"   gap: \" + gap + \"   buffer: \" + buffer);\n    int[] bucketCount = new int[numBuckets];\n    int bucketNum = 0;\n    float minBucketVal = min - buffer;\n    // System.err.println(\"bucketNum: \" + bucketNum + \"   minBucketVal: \" + minBucketVal);\n    for (float value : sortedValues) {\n      // System.err.println(\"value: \" + value);\n      while (value - minBucketVal >= gap) {\n        ++bucketNum;\n        minBucketVal += gap;\n        // System.err.println(\"bucketNum: \" + bucketNum + \"   minBucketVal: \" + minBucketVal);\n      }\n      ++bucketCount[bucketNum];\n    }\n\n    for (int i = 0 ; i < numValues ; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), \n          docValuesField, String.valueOf(values.get(i)), nonDocValuesField, String.valueOf(values.get(i))));\n    }\n    assertU(commit());\n\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    String[] testStrings = new String[numBuckets + 1];\n    testStrings[numBuckets] = \"//*[@numFound='\" + numValues + \"']\";\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + bucketCount[i] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap)),\n        testStrings);\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\"),\n        testStrings);\n\n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + bucketCount[i] + \"']\";\n    }\n    // Range Faceting with method = filter should work\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"filter\"),\n        testStrings);\n    // this should actually use filter method instead of dv\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\"),\n        testStrings);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aaf90fc29510e72665ac7934f34c3d1c25efad64","date":1500354819,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testFloatPointFieldRangeFacet().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testFloatPointFieldRangeFacet().mjava","sourceNew":"  @Test\n  public void testFloatPointFieldRangeFacet() throws Exception {\n    String docValuesField = \"number_p_f_dv\";\n    String nonDocValuesField = \"number_p_f\";\n    int numValues = 10 * RANDOM_MULTIPLIER;\n    int numBuckets = numValues / 2;\n    List<Float> values, sortedValues;\n    float min, max, gap, buffer;\n    do {\n      values = getRandomFloats(numValues, false);\n      sortedValues = values.stream().sorted().collect(Collectors.toList());\n      min = sortedValues.get(0);\n      max = sortedValues.get(sortedValues.size() - 1);\n      buffer = (float)(((double)max - (double)min) / (double)numValues / 2.0D);\n      gap = (float)(((double)max + (double)buffer - (double)min + (double)buffer) / (double)numBuckets);\n    } while (max >= Float.MAX_VALUE - buffer || min <= -Float.MAX_VALUE + buffer); \n    // System.err.println(\"min: \" + min + \"   max: \" + max + \"   gap: \" + gap + \"   buffer: \" + buffer);\n    int[] bucketCount = new int[numBuckets];\n    int bucketNum = 0;\n    float minBucketVal = min - buffer;\n    // System.err.println(\"bucketNum: \" + bucketNum + \"   minBucketVal: \" + minBucketVal);\n    for (float value : sortedValues) {\n      // System.err.println(\"value: \" + value);\n      while (value - minBucketVal >= gap) {\n        ++bucketNum;\n        minBucketVal += gap;\n        // System.err.println(\"bucketNum: \" + bucketNum + \"   minBucketVal: \" + minBucketVal);\n      }\n      ++bucketCount[bucketNum];\n    }\n\n    for (int i = 0 ; i < numValues ; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), \n          docValuesField, String.valueOf(values.get(i)), nonDocValuesField, String.valueOf(values.get(i))));\n    }\n    assertU(commit());\n\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    String[] testStrings = new String[numBuckets + 1];\n    testStrings[numBuckets] = \"//*[@numFound='\" + numValues + \"']\";\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + bucketCount[i] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap)),\n        testStrings);\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\"),\n        testStrings);\n\n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + bucketCount[i] + \"']\";\n    }\n    // Range Faceting with method = filter should work\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"filter\"),\n        testStrings);\n    // this should actually use filter method instead of dv\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\"),\n        testStrings);\n  }\n\n","sourceOld":"  @Test\n  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-11043\")\n  public void testFloatPointFieldRangeFacet() throws Exception {\n    String docValuesField = \"number_p_f_dv\";\n    String nonDocValuesField = \"number_p_f\";\n    int numValues = 10 * RANDOM_MULTIPLIER;\n    int numBuckets = numValues / 2;\n    List<Float> values, sortedValues;\n    float min, max, gap, buffer;\n    do {\n      values = getRandomFloats(numValues, false);\n      sortedValues = values.stream().sorted().collect(Collectors.toList());\n      min = sortedValues.get(0);\n      max = sortedValues.get(sortedValues.size() - 1);\n      buffer = (float)(((double)max - (double)min) / (double)numValues / 2.0D);\n      gap = (float)(((double)max + (double)buffer - (double)min + (double)buffer) / (double)numBuckets);\n    } while (max >= Float.MAX_VALUE - buffer || min <= -Float.MAX_VALUE + buffer); \n    // System.err.println(\"min: \" + min + \"   max: \" + max + \"   gap: \" + gap + \"   buffer: \" + buffer);\n    int[] bucketCount = new int[numBuckets];\n    int bucketNum = 0;\n    float minBucketVal = min - buffer;\n    // System.err.println(\"bucketNum: \" + bucketNum + \"   minBucketVal: \" + minBucketVal);\n    for (float value : sortedValues) {\n      // System.err.println(\"value: \" + value);\n      while (value - minBucketVal >= gap) {\n        ++bucketNum;\n        minBucketVal += gap;\n        // System.err.println(\"bucketNum: \" + bucketNum + \"   minBucketVal: \" + minBucketVal);\n      }\n      ++bucketCount[bucketNum];\n    }\n\n    for (int i = 0 ; i < numValues ; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), \n          docValuesField, String.valueOf(values.get(i)), nonDocValuesField, String.valueOf(values.get(i))));\n    }\n    assertU(commit());\n\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);\n    String[] testStrings = new String[numBuckets + 1];\n    testStrings[numBuckets] = \"//*[@numFound='\" + numValues + \"']\";\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + docValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + bucketCount[i] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap)),\n        testStrings);\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", docValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\"),\n        testStrings);\n\n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    minBucketVal = min - buffer;\n    for (int i = 0 ; i < numBuckets ; minBucketVal += gap, ++i) {\n      testStrings[i] = \"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='\" + nonDocValuesField\n          + \"']/lst[@name='counts']/int[@name='\" + minBucketVal + \"'][.='\" + bucketCount[i] + \"']\";\n    }\n    // Range Faceting with method = filter should work\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"filter\"),\n        testStrings);\n    // this should actually use filter method instead of dv\n    assertQ(req(\"q\", \"*:*\", \"facet\", \"true\", \"facet.range\", nonDocValuesField, \"facet.range.start\", String.valueOf(min - buffer),\n        \"facet.range.end\", String.valueOf(max + buffer), \"facet.range.gap\", String.valueOf(gap), \"facet.range.method\", \"dv\"),\n        testStrings);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aaf90fc29510e72665ac7934f34c3d1c25efad64":["fb569fd721c41eafc2a2d788499a7df490c7f1a5","d0a64ffcef6ae839baf314a48817008c796b053d"],"d0a64ffcef6ae839baf314a48817008c796b053d":["ac5a6354a5800dd1ade225010d614eeb8acf9152"],"46dc9ac8b3e748407baaef82453138ff3974480c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fb569fd721c41eafc2a2d788499a7df490c7f1a5":["46dc9ac8b3e748407baaef82453138ff3974480c","f9a989a32a073c55e3aef6f807a3474184bbcf49"],"ac5a6354a5800dd1ade225010d614eeb8acf9152":["46dc9ac8b3e748407baaef82453138ff3974480c"],"f9a989a32a073c55e3aef6f807a3474184bbcf49":["46dc9ac8b3e748407baaef82453138ff3974480c","ac5a6354a5800dd1ade225010d614eeb8acf9152"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","46dc9ac8b3e748407baaef82453138ff3974480c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d0a64ffcef6ae839baf314a48817008c796b053d"]},"commit2Childs":{"aaf90fc29510e72665ac7934f34c3d1c25efad64":[],"d0a64ffcef6ae839baf314a48817008c796b053d":["aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"46dc9ac8b3e748407baaef82453138ff3974480c":["fb569fd721c41eafc2a2d788499a7df490c7f1a5","ac5a6354a5800dd1ade225010d614eeb8acf9152","f9a989a32a073c55e3aef6f807a3474184bbcf49","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"fb569fd721c41eafc2a2d788499a7df490c7f1a5":["aaf90fc29510e72665ac7934f34c3d1c25efad64"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["46dc9ac8b3e748407baaef82453138ff3974480c","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"ac5a6354a5800dd1ade225010d614eeb8acf9152":["d0a64ffcef6ae839baf314a48817008c796b053d","f9a989a32a073c55e3aef6f807a3474184bbcf49"],"f9a989a32a073c55e3aef6f807a3474184bbcf49":["fb569fd721c41eafc2a2d788499a7df490c7f1a5"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aaf90fc29510e72665ac7934f34c3d1c25efad64","90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}