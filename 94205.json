{"path":"solr/core/src/test/org/apache/solr/util/TestUtils#testNanoTimeSpeed().mjava","commits":[{"id":"da41004e1997059b4d0549fbeb56bf0858d14689","date":1425425090,"type":0,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestUtils#testNanoTimeSpeed().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNanoTimeSpeed()\n  {\n    final int maxNumThreads = 100;\n    final int numIters = 1000;\n    if (VERBOSE) log.info(\"testNanoTime: maxNumThreads = {}, numIters = {}\", maxNumThreads, numIters);\n\n    final ExecutorService workers = Executors.newCachedThreadPool(new DefaultSolrThreadFactory(\"nanoTimeTestThread\"));\n\n    for (int numThreads = 1; numThreads <= maxNumThreads; numThreads++) {\n      List<Callable<Long>> tasks = new ArrayList<> ();\n      for (int i = 0; i < numThreads; i ++) {\n        tasks.add(new Callable<Long>() {\n          @Override\n          public Long call() {\n            final long startTime = System.nanoTime();\n            for (int i = 0; i < numIters; i++) {\n              System.nanoTime();\n            }\n            return System.nanoTime() - startTime;\n          }\n        });\n      }\n\n      try {\n        List<Future<Long>> results = workers.invokeAll(tasks);\n        long totalTime = 0;\n        for (Future<Long> res : results) {\n          totalTime += res.get();\n        }\n        long timePerIter = totalTime / (numIters * numThreads);\n        assertTrue(\"Time taken for System.nanoTime is too high\", timePerIter < 10000);\n        if (VERBOSE) log.info(\"numThreads = {}, time_per_call = {}ns\", numThreads, timePerIter);\n      } catch (InterruptedException | ExecutionException ignored) {}\n    }\n\n    ExecutorUtil.shutdownAndAwaitTermination(workers);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8619fc120882408a06725399f8e3a9cb8e8afff","date":1426370306,"type":4,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/util/TestUtils#testNanoTimeSpeed().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testNanoTimeSpeed()\n  {\n    final int maxNumThreads = 100;\n    final int numIters = 1000;\n    if (VERBOSE) log.info(\"testNanoTime: maxNumThreads = {}, numIters = {}\", maxNumThreads, numIters);\n\n    final ExecutorService workers = Executors.newCachedThreadPool(new DefaultSolrThreadFactory(\"nanoTimeTestThread\"));\n\n    for (int numThreads = 1; numThreads <= maxNumThreads; numThreads++) {\n      List<Callable<Long>> tasks = new ArrayList<> ();\n      for (int i = 0; i < numThreads; i ++) {\n        tasks.add(new Callable<Long>() {\n          @Override\n          public Long call() {\n            final long startTime = System.nanoTime();\n            for (int i = 0; i < numIters; i++) {\n              System.nanoTime();\n            }\n            return System.nanoTime() - startTime;\n          }\n        });\n      }\n\n      try {\n        List<Future<Long>> results = workers.invokeAll(tasks);\n        long totalTime = 0;\n        for (Future<Long> res : results) {\n          totalTime += res.get();\n        }\n        long timePerIter = totalTime / (numIters * numThreads);\n        assertTrue(\"Time taken for System.nanoTime is too high\", timePerIter < 10000);\n        if (VERBOSE) log.info(\"numThreads = {}, time_per_call = {}ns\", numThreads, timePerIter);\n      } catch (InterruptedException | ExecutionException ignored) {}\n    }\n\n    ExecutorUtil.shutdownAndAwaitTermination(workers);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da41004e1997059b4d0549fbeb56bf0858d14689":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e8619fc120882408a06725399f8e3a9cb8e8afff":["da41004e1997059b4d0549fbeb56bf0858d14689"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e8619fc120882408a06725399f8e3a9cb8e8afff"]},"commit2Childs":{"da41004e1997059b4d0549fbeb56bf0858d14689":["e8619fc120882408a06725399f8e3a9cb8e8afff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["da41004e1997059b4d0549fbeb56bf0858d14689"],"e8619fc120882408a06725399f8e3a9cb8e8afff":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}