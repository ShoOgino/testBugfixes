{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterGraphFilterFactory#parseString(String).mjava","commits":[{"id":"098528909bb70948871fd7ed865fafb87ed73964","date":1484667487,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterGraphFilterFactory#parseString(String).mjava","pathOld":"/dev/null","sourceNew":"  private String parseString(String s){\n    int readPos = 0;\n    int len = s.length();\n    int writePos = 0;\n    while( readPos < len ){\n      char c = s.charAt( readPos++ );\n      if( c == '\\\\' ){\n        if( readPos >= len )\n          throw new IllegalArgumentException(\"Invalid escaped char in [\" + s + \"]\");\n        c = s.charAt( readPos++ );\n        switch( c ) {\n          case '\\\\' : c = '\\\\'; break;\n          case 'n' : c = '\\n'; break;\n          case 't' : c = '\\t'; break;\n          case 'r' : c = '\\r'; break;\n          case 'b' : c = '\\b'; break;\n          case 'f' : c = '\\f'; break;\n          case 'u' :\n            if( readPos + 3 >= len )\n              throw new IllegalArgumentException(\"Invalid escaped char in [\" + s + \"]\");\n            c = (char)Integer.parseInt( s.substring( readPos, readPos + 4 ), 16 );\n            readPos += 4;\n            break;\n        }\n      }\n      out[writePos++] = c;\n    }\n    return new String( out, 0, writePos );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"302d34f2c66e8d489ee13078305c330cbf67b226","date":1484754357,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterGraphFilterFactory#parseString(String).mjava","pathOld":"/dev/null","sourceNew":"  private String parseString(String s){\n    int readPos = 0;\n    int len = s.length();\n    int writePos = 0;\n    while( readPos < len ){\n      char c = s.charAt( readPos++ );\n      if( c == '\\\\' ){\n        if( readPos >= len )\n          throw new IllegalArgumentException(\"Invalid escaped char in [\" + s + \"]\");\n        c = s.charAt( readPos++ );\n        switch( c ) {\n          case '\\\\' : c = '\\\\'; break;\n          case 'n' : c = '\\n'; break;\n          case 't' : c = '\\t'; break;\n          case 'r' : c = '\\r'; break;\n          case 'b' : c = '\\b'; break;\n          case 'f' : c = '\\f'; break;\n          case 'u' :\n            if( readPos + 3 >= len )\n              throw new IllegalArgumentException(\"Invalid escaped char in [\" + s + \"]\");\n            c = (char)Integer.parseInt( s.substring( readPos, readPos + 4 ), 16 );\n            readPos += 4;\n            break;\n        }\n      }\n      out[writePos++] = c;\n    }\n    return new String( out, 0, writePos );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"098528909bb70948871fd7ed865fafb87ed73964":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["098528909bb70948871fd7ed865fafb87ed73964"],"302d34f2c66e8d489ee13078305c330cbf67b226":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","098528909bb70948871fd7ed865fafb87ed73964"]},"commit2Childs":{"098528909bb70948871fd7ed865fafb87ed73964":["cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["098528909bb70948871fd7ed865fafb87ed73964","302d34f2c66e8d489ee13078305c330cbf67b226"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"302d34f2c66e8d489ee13078305c330cbf67b226":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}