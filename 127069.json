{"path":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#testSplitIntRange().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#testSplitIntRange().mjava","pathOld":"src/test/org/apache/lucene/util/TestNumericUtils#testSplitIntRange().mjava","sourceNew":"  public void testSplitIntRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertIntRangeSplit(-5000, 9500, 4, true, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x7fffec78),Integer.valueOf(0x7fffec7f),\n      Integer.valueOf(0x80002510),Integer.valueOf(0x8000251c),\n      Integer.valueOf(0x7fffec8), Integer.valueOf(0x7fffecf),\n      Integer.valueOf(0x8000250), Integer.valueOf(0x8000250),\n      Integer.valueOf(0x7fffed),  Integer.valueOf(0x7fffef),\n      Integer.valueOf(0x800020),  Integer.valueOf(0x800024),\n      Integer.valueOf(0x7ffff),   Integer.valueOf(0x80001)\n    }).iterator());\n    \n    // the same with no range splitting\n    assertIntRangeSplit(-5000, 9500, 32, true, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x7fffec78),Integer.valueOf(0x8000251c)\n    }).iterator());\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertIntRangeSplit(0, 1024+63, 4, true, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x8000040), Integer.valueOf(0x8000043),\n      Integer.valueOf(0x800000),  Integer.valueOf(0x800003)\n    }).iterator());\n    \n    // the full int range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 8, false, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x00),Integer.valueOf(0xff)\n    }).iterator());\n\n    // the same with precisionStep=4\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 4, false, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x0),Integer.valueOf(0xf)\n    }).iterator());\n\n    // the same with precisionStep=2\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 2, false, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x0),Integer.valueOf(0x3)\n    }).iterator());\n\n    // the same with precisionStep=1\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 1, false, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x0),Integer.valueOf(0x1)\n    }).iterator());\n\n    // a inverse range should produce no sub-ranges\n    assertIntRangeSplit(9500, -5000, 4, false, Collections. <Integer> emptyList().iterator());    \n\n    // a 0-length range should reproduce the range itsself\n    assertIntRangeSplit(9500, 9500, 4, false, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x8000251c),Integer.valueOf(0x8000251c)\n    }).iterator());\n  }\n\n","sourceOld":"  public void testSplitIntRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertIntRangeSplit(-5000, 9500, 4, true, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x7fffec78),Integer.valueOf(0x7fffec7f),\n      Integer.valueOf(0x80002510),Integer.valueOf(0x8000251c),\n      Integer.valueOf(0x7fffec8), Integer.valueOf(0x7fffecf),\n      Integer.valueOf(0x8000250), Integer.valueOf(0x8000250),\n      Integer.valueOf(0x7fffed),  Integer.valueOf(0x7fffef),\n      Integer.valueOf(0x800020),  Integer.valueOf(0x800024),\n      Integer.valueOf(0x7ffff),   Integer.valueOf(0x80001)\n    }).iterator());\n    \n    // the same with no range splitting\n    assertIntRangeSplit(-5000, 9500, 32, true, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x7fffec78),Integer.valueOf(0x8000251c)\n    }).iterator());\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertIntRangeSplit(0, 1024+63, 4, true, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x8000040), Integer.valueOf(0x8000043),\n      Integer.valueOf(0x800000),  Integer.valueOf(0x800003)\n    }).iterator());\n    \n    // the full int range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 8, false, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x00),Integer.valueOf(0xff)\n    }).iterator());\n\n    // the same with precisionStep=4\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 4, false, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x0),Integer.valueOf(0xf)\n    }).iterator());\n\n    // the same with precisionStep=2\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 2, false, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x0),Integer.valueOf(0x3)\n    }).iterator());\n\n    // the same with precisionStep=1\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 1, false, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x0),Integer.valueOf(0x1)\n    }).iterator());\n\n    // a inverse range should produce no sub-ranges\n    assertIntRangeSplit(9500, -5000, 4, false, Collections. <Integer> emptyList().iterator());    \n\n    // a 0-length range should reproduce the range itsself\n    assertIntRangeSplit(9500, 9500, 4, false, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x8000251c),Integer.valueOf(0x8000251c)\n    }).iterator());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c13ac3312389224caec142b1fa4e837caa80ee0","date":1279383717,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#testSplitIntRange().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#testSplitIntRange().mjava","sourceNew":"  public void testSplitIntRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertIntRangeSplit(-5000, 9500, 4, true, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x7fffec78),Integer.valueOf(0x7fffec7f),\n      Integer.valueOf(0x80002510),Integer.valueOf(0x8000251c),\n      Integer.valueOf(0x7fffec8), Integer.valueOf(0x7fffecf),\n      Integer.valueOf(0x8000250), Integer.valueOf(0x8000250),\n      Integer.valueOf(0x7fffed),  Integer.valueOf(0x7fffef),\n      Integer.valueOf(0x800020),  Integer.valueOf(0x800024),\n      Integer.valueOf(0x7ffff),   Integer.valueOf(0x80001)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(0), Integer.valueOf(0),\n      Integer.valueOf(4), Integer.valueOf(4),\n      Integer.valueOf(8), Integer.valueOf(8),\n      Integer.valueOf(12)\n    }).iterator());\n    \n    // the same with no range splitting\n    assertIntRangeSplit(-5000, 9500, 32, true, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x7fffec78),Integer.valueOf(0x8000251c)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(0)\n    }).iterator());\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertIntRangeSplit(0, 1024+63, 4, true, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x8000040), Integer.valueOf(0x8000043),\n      Integer.valueOf(0x800000),  Integer.valueOf(0x800003)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(4), Integer.valueOf(8)\n    }).iterator());\n    \n    // the full int range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 8, false, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x00),Integer.valueOf(0xff)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(24)\n    }).iterator());\n\n    // the same with precisionStep=4\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 4, false, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x0),Integer.valueOf(0xf)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(28)\n    }).iterator());\n\n    // the same with precisionStep=2\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 2, false, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x0),Integer.valueOf(0x3)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(30)\n    }).iterator());\n\n    // the same with precisionStep=1\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 1, false, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x0),Integer.valueOf(0x1)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(31)\n    }).iterator());\n\n    // a inverse range should produce no sub-ranges\n    assertIntRangeSplit(9500, -5000, 4, false, Collections.<Integer>emptyList().iterator(), Collections.<Integer>emptyList().iterator());    \n\n    // a 0-length range should reproduce the range itsself\n    assertIntRangeSplit(9500, 9500, 4, false, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x8000251c),Integer.valueOf(0x8000251c)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(0)\n    }).iterator());\n  }\n\n","sourceOld":"  public void testSplitIntRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertIntRangeSplit(-5000, 9500, 4, true, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x7fffec78),Integer.valueOf(0x7fffec7f),\n      Integer.valueOf(0x80002510),Integer.valueOf(0x8000251c),\n      Integer.valueOf(0x7fffec8), Integer.valueOf(0x7fffecf),\n      Integer.valueOf(0x8000250), Integer.valueOf(0x8000250),\n      Integer.valueOf(0x7fffed),  Integer.valueOf(0x7fffef),\n      Integer.valueOf(0x800020),  Integer.valueOf(0x800024),\n      Integer.valueOf(0x7ffff),   Integer.valueOf(0x80001)\n    }).iterator());\n    \n    // the same with no range splitting\n    assertIntRangeSplit(-5000, 9500, 32, true, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x7fffec78),Integer.valueOf(0x8000251c)\n    }).iterator());\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertIntRangeSplit(0, 1024+63, 4, true, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x8000040), Integer.valueOf(0x8000043),\n      Integer.valueOf(0x800000),  Integer.valueOf(0x800003)\n    }).iterator());\n    \n    // the full int range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 8, false, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x00),Integer.valueOf(0xff)\n    }).iterator());\n\n    // the same with precisionStep=4\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 4, false, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x0),Integer.valueOf(0xf)\n    }).iterator());\n\n    // the same with precisionStep=2\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 2, false, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x0),Integer.valueOf(0x3)\n    }).iterator());\n\n    // the same with precisionStep=1\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 1, false, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x0),Integer.valueOf(0x1)\n    }).iterator());\n\n    // a inverse range should produce no sub-ranges\n    assertIntRangeSplit(9500, -5000, 4, false, Collections. <Integer> emptyList().iterator());    \n\n    // a 0-length range should reproduce the range itsself\n    assertIntRangeSplit(9500, 9500, 4, false, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x8000251c),Integer.valueOf(0x8000251c)\n    }).iterator());\n  }\n\n","bugFix":null,"bugIntro":["778eb8d25c0eed19bb220d78402ae26e3f67c2d9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"778eb8d25c0eed19bb220d78402ae26e3f67c2d9","date":1279386974,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#testSplitIntRange().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#testSplitIntRange().mjava","sourceNew":"  public void testSplitIntRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertIntRangeSplit(-5000, 9500, 4, true, Arrays.asList(\n      0x7fffec78,0x7fffec7f,\n      0x80002510,0x8000251c,\n      0x7fffec8, 0x7fffecf,\n      0x8000250, 0x8000250,\n      0x7fffed,  0x7fffef,\n      0x800020,  0x800024,\n      0x7ffff,   0x80001\n    ), Arrays.asList(\n      0, 0,\n      4, 4,\n      8, 8,\n      12\n    ));\n    \n    // the same with no range splitting\n    assertIntRangeSplit(-5000, 9500, 32, true, Arrays.asList(\n      0x7fffec78,0x8000251c\n    ), Arrays.asList(\n      0\n    ));\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertIntRangeSplit(0, 1024+63, 4, true, Arrays.asList(\n      0x8000040, 0x8000043,\n      0x800000,  0x800003\n    ), Arrays.asList(\n      4, 8\n    ));\n    \n    // the full int range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 8, false, Arrays.asList(\n      0x00,0xff\n    ), Arrays.asList(\n      24\n    ));\n\n    // the same with precisionStep=4\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 4, false, Arrays.asList(\n      0x0,0xf\n    ), Arrays.asList(\n      28\n    ));\n\n    // the same with precisionStep=2\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 2, false, Arrays.asList(\n      0x0,0x3\n    ), Arrays.asList(\n      30\n    ));\n\n    // the same with precisionStep=1\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 1, false, Arrays.asList(\n      0x0,0x1\n    ), Arrays.asList(\n      31\n    ));\n\n    // a inverse range should produce no sub-ranges\n    assertIntRangeSplit(9500, -5000, 4, false, Collections.<Integer>emptyList(), Collections.<Integer>emptyList());    \n\n    // a 0-length range should reproduce the range itsself\n    assertIntRangeSplit(9500, 9500, 4, false, Arrays.asList(\n      0x8000251c,0x8000251c\n    ), Arrays.asList(\n      0\n    ));\n  }\n\n","sourceOld":"  public void testSplitIntRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertIntRangeSplit(-5000, 9500, 4, true, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x7fffec78),Integer.valueOf(0x7fffec7f),\n      Integer.valueOf(0x80002510),Integer.valueOf(0x8000251c),\n      Integer.valueOf(0x7fffec8), Integer.valueOf(0x7fffecf),\n      Integer.valueOf(0x8000250), Integer.valueOf(0x8000250),\n      Integer.valueOf(0x7fffed),  Integer.valueOf(0x7fffef),\n      Integer.valueOf(0x800020),  Integer.valueOf(0x800024),\n      Integer.valueOf(0x7ffff),   Integer.valueOf(0x80001)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(0), Integer.valueOf(0),\n      Integer.valueOf(4), Integer.valueOf(4),\n      Integer.valueOf(8), Integer.valueOf(8),\n      Integer.valueOf(12)\n    }).iterator());\n    \n    // the same with no range splitting\n    assertIntRangeSplit(-5000, 9500, 32, true, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x7fffec78),Integer.valueOf(0x8000251c)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(0)\n    }).iterator());\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertIntRangeSplit(0, 1024+63, 4, true, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x8000040), Integer.valueOf(0x8000043),\n      Integer.valueOf(0x800000),  Integer.valueOf(0x800003)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(4), Integer.valueOf(8)\n    }).iterator());\n    \n    // the full int range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 8, false, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x00),Integer.valueOf(0xff)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(24)\n    }).iterator());\n\n    // the same with precisionStep=4\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 4, false, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x0),Integer.valueOf(0xf)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(28)\n    }).iterator());\n\n    // the same with precisionStep=2\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 2, false, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x0),Integer.valueOf(0x3)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(30)\n    }).iterator());\n\n    // the same with precisionStep=1\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 1, false, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x0),Integer.valueOf(0x1)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(31)\n    }).iterator());\n\n    // a inverse range should produce no sub-ranges\n    assertIntRangeSplit(9500, -5000, 4, false, Collections.<Integer>emptyList().iterator(), Collections.<Integer>emptyList().iterator());    \n\n    // a 0-length range should reproduce the range itsself\n    assertIntRangeSplit(9500, 9500, 4, false, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x8000251c),Integer.valueOf(0x8000251c)\n    }).iterator(), Arrays.asList(new Integer[]{\n      Integer.valueOf(0)\n    }).iterator());\n  }\n\n","bugFix":["6bcde5e3f23911110baa101ed062b544162825b5","53b6c192847de8643a5da505cc433cbf8476a175","0c13ac3312389224caec142b1fa4e837caa80ee0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#testSplitIntRange().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#testSplitIntRange().mjava","sourceNew":"  public void testSplitIntRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertIntRangeSplit(-5000, 9500, 4, true, Arrays.asList(\n      0x7fffec78,0x7fffec7f,\n      0x80002510,0x8000251c,\n      0x7fffec8, 0x7fffecf,\n      0x8000250, 0x8000250,\n      0x7fffed,  0x7fffef,\n      0x800020,  0x800024,\n      0x7ffff,   0x80001\n    ), Arrays.asList(\n      0, 0,\n      4, 4,\n      8, 8,\n      12\n    ));\n    \n    // the same with no range splitting\n    assertIntRangeSplit(-5000, 9500, 32, true, Arrays.asList(\n      0x7fffec78,0x8000251c\n    ), Arrays.asList(\n      0\n    ));\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertIntRangeSplit(0, 1024+63, 4, true, Arrays.asList(\n      0x8000040, 0x8000043,\n      0x800000,  0x800003\n    ), Arrays.asList(\n      4, 8\n    ));\n    \n    // the full int range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 8, false, Arrays.asList(\n      0x00,0xff\n    ), Arrays.asList(\n      24\n    ));\n\n    // the same with precisionStep=4\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 4, false, Arrays.asList(\n      0x0,0xf\n    ), Arrays.asList(\n      28\n    ));\n\n    // the same with precisionStep=2\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 2, false, Arrays.asList(\n      0x0,0x3\n    ), Arrays.asList(\n      30\n    ));\n\n    // the same with precisionStep=1\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 1, false, Arrays.asList(\n      0x0,0x1\n    ), Arrays.asList(\n      31\n    ));\n\n    // a inverse range should produce no sub-ranges\n    assertIntRangeSplit(9500, -5000, 4, false, Collections.<Integer>emptyList(), Collections.<Integer>emptyList());    \n\n    // a 0-length range should reproduce the range itsself\n    assertIntRangeSplit(9500, 9500, 4, false, Arrays.asList(\n      0x8000251c,0x8000251c\n    ), Arrays.asList(\n      0\n    ));\n  }\n\n","sourceOld":"  public void testSplitIntRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertIntRangeSplit(-5000, 9500, 4, true, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x7fffec78),Integer.valueOf(0x7fffec7f),\n      Integer.valueOf(0x80002510),Integer.valueOf(0x8000251c),\n      Integer.valueOf(0x7fffec8), Integer.valueOf(0x7fffecf),\n      Integer.valueOf(0x8000250), Integer.valueOf(0x8000250),\n      Integer.valueOf(0x7fffed),  Integer.valueOf(0x7fffef),\n      Integer.valueOf(0x800020),  Integer.valueOf(0x800024),\n      Integer.valueOf(0x7ffff),   Integer.valueOf(0x80001)\n    }).iterator());\n    \n    // the same with no range splitting\n    assertIntRangeSplit(-5000, 9500, 32, true, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x7fffec78),Integer.valueOf(0x8000251c)\n    }).iterator());\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertIntRangeSplit(0, 1024+63, 4, true, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x8000040), Integer.valueOf(0x8000043),\n      Integer.valueOf(0x800000),  Integer.valueOf(0x800003)\n    }).iterator());\n    \n    // the full int range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 8, false, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x00),Integer.valueOf(0xff)\n    }).iterator());\n\n    // the same with precisionStep=4\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 4, false, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x0),Integer.valueOf(0xf)\n    }).iterator());\n\n    // the same with precisionStep=2\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 2, false, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x0),Integer.valueOf(0x3)\n    }).iterator());\n\n    // the same with precisionStep=1\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 1, false, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x0),Integer.valueOf(0x1)\n    }).iterator());\n\n    // a inverse range should produce no sub-ranges\n    assertIntRangeSplit(9500, -5000, 4, false, Collections. <Integer> emptyList().iterator());    \n\n    // a 0-length range should reproduce the range itsself\n    assertIntRangeSplit(9500, 9500, 4, false, Arrays.asList(new Integer[]{\n      Integer.valueOf(0x8000251c),Integer.valueOf(0x8000251c)\n    }).iterator());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testSplitIntRange().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#testSplitIntRange().mjava","sourceNew":"  public void testSplitIntRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertIntRangeSplit(-5000, 9500, 4, true, Arrays.asList(\n      0x7fffec78,0x7fffec7f,\n      0x80002510,0x8000251c,\n      0x7fffec8, 0x7fffecf,\n      0x8000250, 0x8000250,\n      0x7fffed,  0x7fffef,\n      0x800020,  0x800024,\n      0x7ffff,   0x80001\n    ), Arrays.asList(\n      0, 0,\n      4, 4,\n      8, 8,\n      12\n    ));\n    \n    // the same with no range splitting\n    assertIntRangeSplit(-5000, 9500, 32, true, Arrays.asList(\n      0x7fffec78,0x8000251c\n    ), Arrays.asList(\n      0\n    ));\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertIntRangeSplit(0, 1024+63, 4, true, Arrays.asList(\n      0x8000040, 0x8000043,\n      0x800000,  0x800003\n    ), Arrays.asList(\n      4, 8\n    ));\n    \n    // the full int range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 8, false, Arrays.asList(\n      0x00,0xff\n    ), Arrays.asList(\n      24\n    ));\n\n    // the same with precisionStep=4\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 4, false, Arrays.asList(\n      0x0,0xf\n    ), Arrays.asList(\n      28\n    ));\n\n    // the same with precisionStep=2\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 2, false, Arrays.asList(\n      0x0,0x3\n    ), Arrays.asList(\n      30\n    ));\n\n    // the same with precisionStep=1\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 1, false, Arrays.asList(\n      0x0,0x1\n    ), Arrays.asList(\n      31\n    ));\n\n    // a inverse range should produce no sub-ranges\n    assertIntRangeSplit(9500, -5000, 4, false, Collections.<Integer>emptyList(), Collections.<Integer>emptyList());    \n\n    // a 0-length range should reproduce the range itsself\n    assertIntRangeSplit(9500, 9500, 4, false, Arrays.asList(\n      0x8000251c,0x8000251c\n    ), Arrays.asList(\n      0\n    ));\n  }\n\n","sourceOld":"  public void testSplitIntRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertIntRangeSplit(-5000, 9500, 4, true, Arrays.asList(\n      0x7fffec78,0x7fffec7f,\n      0x80002510,0x8000251c,\n      0x7fffec8, 0x7fffecf,\n      0x8000250, 0x8000250,\n      0x7fffed,  0x7fffef,\n      0x800020,  0x800024,\n      0x7ffff,   0x80001\n    ), Arrays.asList(\n      0, 0,\n      4, 4,\n      8, 8,\n      12\n    ));\n    \n    // the same with no range splitting\n    assertIntRangeSplit(-5000, 9500, 32, true, Arrays.asList(\n      0x7fffec78,0x8000251c\n    ), Arrays.asList(\n      0\n    ));\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertIntRangeSplit(0, 1024+63, 4, true, Arrays.asList(\n      0x8000040, 0x8000043,\n      0x800000,  0x800003\n    ), Arrays.asList(\n      4, 8\n    ));\n    \n    // the full int range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 8, false, Arrays.asList(\n      0x00,0xff\n    ), Arrays.asList(\n      24\n    ));\n\n    // the same with precisionStep=4\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 4, false, Arrays.asList(\n      0x0,0xf\n    ), Arrays.asList(\n      28\n    ));\n\n    // the same with precisionStep=2\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 2, false, Arrays.asList(\n      0x0,0x3\n    ), Arrays.asList(\n      30\n    ));\n\n    // the same with precisionStep=1\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 1, false, Arrays.asList(\n      0x0,0x1\n    ), Arrays.asList(\n      31\n    ));\n\n    // a inverse range should produce no sub-ranges\n    assertIntRangeSplit(9500, -5000, 4, false, Collections.<Integer>emptyList(), Collections.<Integer>emptyList());    \n\n    // a 0-length range should reproduce the range itsself\n    assertIntRangeSplit(9500, 9500, 4, false, Arrays.asList(\n      0x8000251c,0x8000251c\n    ), Arrays.asList(\n      0\n    ));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["778eb8d25c0eed19bb220d78402ae26e3f67c2d9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f4e87790277826a2aea119328600dfb07761f32":["9454a6510e2db155fb01faa5c049b06ece95fab9","778eb8d25c0eed19bb220d78402ae26e3f67c2d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"778eb8d25c0eed19bb220d78402ae26e3f67c2d9":["0c13ac3312389224caec142b1fa4e837caa80ee0"],"0c13ac3312389224caec142b1fa4e837caa80ee0":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":[],"778eb8d25c0eed19bb220d78402ae26e3f67c2d9":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","5f4e87790277826a2aea119328600dfb07761f32"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["5f4e87790277826a2aea119328600dfb07761f32","0c13ac3312389224caec142b1fa4e837caa80ee0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0c13ac3312389224caec142b1fa4e837caa80ee0":["778eb8d25c0eed19bb220d78402ae26e3f67c2d9"]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}