{"path":"lucene/facet/src/java/org/apache/lucene/facet/index/FacetsPayloadMigrationReader#buildFieldTermsMap(Directory,FacetIndexingParams).mjava","commits":[{"id":"6c2cd18c7da6f499a33f06fc89c07a463ec074c0","date":1358329431,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/FacetsPayloadMigrationReader#buildFieldTermsMap(Directory,FacetIndexingParams).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * A utility method for building the field-to-Term map, given the\n   * {@link FacetIndexingParams} and the directory of the index to migrate. The\n   * map that will be built will correspond to partitions as well as multiple\n   * {@link CategoryListParams}.\n   * <p>\n   * <b>NOTE:</b> since {@link CategoryListParams} no longer define a\n   * {@link Term}, this method assumes that the term used by the different\n   * {@link CategoryListParams} is {@link #PAYLOAD_TERM_TEXT}. If this is not\n   * the case, then you should build the map yourself, using the terms in your\n   * index.\n   */\n  public static Map<String,Term> buildFieldTermsMap(Directory dir, FacetIndexingParams fip) throws IOException {\n    // only add field-Term mapping that will actually have DocValues in the end.\n    // therefore traverse the index terms and add what exists. this pertains to\n    // multiple CLPs, as well as partitions\n    DirectoryReader reader = DirectoryReader.open(dir);\n    final Map<String,Term> fieldTerms = new HashMap<String,Term>();\n    for (AtomicReaderContext context : reader.leaves()) {\n      for (CategoryListParams clp : fip.getAllCategoryListParams()) {\n        Terms terms = context.reader().terms(clp.field);\n        if (terms != null) {\n          TermsEnum te = terms.iterator(null);\n          BytesRef termBytes = null;\n          while ((termBytes = te.next()) != null) {\n            String term = termBytes.utf8ToString();\n            if (term.startsWith(PAYLOAD_TERM_TEXT )) {\n              if (term.equals(PAYLOAD_TERM_TEXT)) {\n                fieldTerms.put(clp.field, new Term(clp.field, term));\n              } else {\n                fieldTerms.put(clp.field + term.substring(PAYLOAD_TERM_TEXT.length()), new Term(clp.field, term));\n              }\n            }\n          }\n        }        \n      }\n    }\n    reader.close();\n    return fieldTerms;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/FacetsPayloadMigrationReader#buildFieldTermsMap(Directory,FacetIndexingParams).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * A utility method for building the field-to-Term map, given the\n   * {@link FacetIndexingParams} and the directory of the index to migrate. The\n   * map that will be built will correspond to partitions as well as multiple\n   * {@link CategoryListParams}.\n   * <p>\n   * <b>NOTE:</b> since {@link CategoryListParams} no longer define a\n   * {@link Term}, this method assumes that the term used by the different\n   * {@link CategoryListParams} is {@link #PAYLOAD_TERM_TEXT}. If this is not\n   * the case, then you should build the map yourself, using the terms in your\n   * index.\n   */\n  public static Map<String,Term> buildFieldTermsMap(Directory dir, FacetIndexingParams fip) throws IOException {\n    // only add field-Term mapping that will actually have DocValues in the end.\n    // therefore traverse the index terms and add what exists. this pertains to\n    // multiple CLPs, as well as partitions\n    DirectoryReader reader = DirectoryReader.open(dir);\n    final Map<String,Term> fieldTerms = new HashMap<String,Term>();\n    for (AtomicReaderContext context : reader.leaves()) {\n      for (CategoryListParams clp : fip.getAllCategoryListParams()) {\n        Terms terms = context.reader().terms(clp.field);\n        if (terms != null) {\n          TermsEnum te = terms.iterator(null);\n          BytesRef termBytes = null;\n          while ((termBytes = te.next()) != null) {\n            String term = termBytes.utf8ToString();\n            if (term.startsWith(PAYLOAD_TERM_TEXT )) {\n              if (term.equals(PAYLOAD_TERM_TEXT)) {\n                fieldTerms.put(clp.field, new Term(clp.field, term));\n              } else {\n                fieldTerms.put(clp.field + term.substring(PAYLOAD_TERM_TEXT.length()), new Term(clp.field, term));\n              }\n            }\n          }\n        }        \n      }\n    }\n    reader.close();\n    return fieldTerms;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/util/FacetsPayloadMigrationReader#buildFieldTermsMap(Directory,FacetIndexingParams).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/FacetsPayloadMigrationReader#buildFieldTermsMap(Directory,FacetIndexingParams).mjava","sourceNew":"  /**\n   * A utility method for building the field-to-Term map, given the\n   * {@link FacetIndexingParams} and the directory of the index to migrate. The\n   * map that will be built will correspond to partitions as well as multiple\n   * {@link CategoryListParams}.\n   * <p>\n   * <b>NOTE:</b> since {@link CategoryListParams} no longer define a\n   * {@link Term}, this method assumes that the term used by the different\n   * {@link CategoryListParams} is {@link #PAYLOAD_TERM_TEXT}. If this is not\n   * the case, then you should build the map yourself, using the terms in your\n   * index.\n   */\n  public static Map<String,Term> buildFieldTermsMap(Directory dir, FacetIndexingParams fip) throws IOException {\n    // only add field-Term mapping that will actually have DocValues in the end.\n    // therefore traverse the index terms and add what exists. this pertains to\n    // multiple CLPs, as well as partitions\n    DirectoryReader reader = DirectoryReader.open(dir);\n    final Map<String,Term> fieldTerms = new HashMap<String,Term>();\n    for (AtomicReaderContext context : reader.leaves()) {\n      for (CategoryListParams clp : fip.getAllCategoryListParams()) {\n        Terms terms = context.reader().terms(clp.field);\n        if (terms != null) {\n          TermsEnum te = terms.iterator(null);\n          BytesRef termBytes = null;\n          while ((termBytes = te.next()) != null) {\n            String term = termBytes.utf8ToString();\n            if (term.startsWith(PAYLOAD_TERM_TEXT )) {\n              if (term.equals(PAYLOAD_TERM_TEXT)) {\n                fieldTerms.put(clp.field, new Term(clp.field, term));\n              } else {\n                fieldTerms.put(clp.field + term.substring(PAYLOAD_TERM_TEXT.length()), new Term(clp.field, term));\n              }\n            }\n          }\n        }        \n      }\n    }\n    reader.close();\n    return fieldTerms;\n  }\n\n","sourceOld":"  /**\n   * A utility method for building the field-to-Term map, given the\n   * {@link FacetIndexingParams} and the directory of the index to migrate. The\n   * map that will be built will correspond to partitions as well as multiple\n   * {@link CategoryListParams}.\n   * <p>\n   * <b>NOTE:</b> since {@link CategoryListParams} no longer define a\n   * {@link Term}, this method assumes that the term used by the different\n   * {@link CategoryListParams} is {@link #PAYLOAD_TERM_TEXT}. If this is not\n   * the case, then you should build the map yourself, using the terms in your\n   * index.\n   */\n  public static Map<String,Term> buildFieldTermsMap(Directory dir, FacetIndexingParams fip) throws IOException {\n    // only add field-Term mapping that will actually have DocValues in the end.\n    // therefore traverse the index terms and add what exists. this pertains to\n    // multiple CLPs, as well as partitions\n    DirectoryReader reader = DirectoryReader.open(dir);\n    final Map<String,Term> fieldTerms = new HashMap<String,Term>();\n    for (AtomicReaderContext context : reader.leaves()) {\n      for (CategoryListParams clp : fip.getAllCategoryListParams()) {\n        Terms terms = context.reader().terms(clp.field);\n        if (terms != null) {\n          TermsEnum te = terms.iterator(null);\n          BytesRef termBytes = null;\n          while ((termBytes = te.next()) != null) {\n            String term = termBytes.utf8ToString();\n            if (term.startsWith(PAYLOAD_TERM_TEXT )) {\n              if (term.equals(PAYLOAD_TERM_TEXT)) {\n                fieldTerms.put(clp.field, new Term(clp.field, term));\n              } else {\n                fieldTerms.put(clp.field + term.substring(PAYLOAD_TERM_TEXT.length()), new Term(clp.field, term));\n              }\n            }\n          }\n        }        \n      }\n    }\n    reader.close();\n    return fieldTerms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c4015cd39dff8d4dec562d909f9766debac53aa6","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["607428da722dcb3e86bbd11c63de8986e6275c36","c4015cd39dff8d4dec562d909f9766debac53aa6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c4015cd39dff8d4dec562d909f9766debac53aa6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}