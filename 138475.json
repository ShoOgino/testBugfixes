{"path":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/WordDictionary#setTableIndex(char,int).mjava","commits":[{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/WordDictionary#setTableIndex(char,int).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/smart/hhmm/WordDictionary#setTableIndex(char,int).mjava","sourceNew":"  /*\n   * 计算字符c在哈希表中应该在的位置，然后将地址列表中该位置的值初始化\n   * \n   */\n  private boolean setTableIndex(char c, int j) {\n    int index = getAvaliableTableIndex(c);\n    if (index != -1) {\n      charIndexTable[index] = c;\n      wordIndexTable[index] = (short) j;\n      return true;\n    } else\n      return false;\n  }\n\n","sourceOld":"  /*\n   * 计算字符c在哈希表中应该在的位置，然后将地址列表中该位置的值初始化\n   * \n   */\n  private boolean setTableIndex(char c, int j) {\n    int index = getAvaliableTableIndex(c);\n    if (index != -1) {\n      charIndexTable[index] = c;\n      wordIndexTable[index] = (short) j;\n      return true;\n    } else\n      return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55fa7b85159e79f79dfdca119db7f0f4cb6a2a74","date":1254579885,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/WordDictionary#setTableIndex(char,int).mjava","pathOld":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/WordDictionary#setTableIndex(char,int).mjava","sourceNew":"  /*\n   * Calculate character c's position in hash table, \n   * then initialize the value of that position in the address table.\n   */\n  private boolean setTableIndex(char c, int j) {\n    int index = getAvaliableTableIndex(c);\n    if (index != -1) {\n      charIndexTable[index] = c;\n      wordIndexTable[index] = (short) j;\n      return true;\n    } else\n      return false;\n  }\n\n","sourceOld":"  /*\n   * 计算字符c在哈希表中应该在的位置，然后将地址列表中该位置的值初始化\n   * \n   */\n  private boolean setTableIndex(char c, int j) {\n    int index = getAvaliableTableIndex(c);\n    if (index != -1) {\n      charIndexTable[index] = c;\n      wordIndexTable[index] = (short) j;\n      return true;\n    } else\n      return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/WordDictionary#setTableIndex(char,int).mjava","pathOld":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/WordDictionary#setTableIndex(char,int).mjava","sourceNew":"  /*\n   * Calculate character c's position in hash table, \n   * then initialize the value of that position in the address table.\n   */\n  private boolean setTableIndex(char c, int j) {\n    int index = getAvaliableTableIndex(c);\n    if (index != -1) {\n      charIndexTable[index] = c;\n      wordIndexTable[index] = (short) j;\n      return true;\n    } else\n      return false;\n  }\n\n","sourceOld":"  /*\n   * Calculate character c's position in hash table, \n   * then initialize the value of that position in the address table.\n   */\n  private boolean setTableIndex(char c, int j) {\n    int index = getAvaliableTableIndex(c);\n    if (index != -1) {\n      charIndexTable[index] = c;\n      wordIndexTable[index] = (short) j;\n      return true;\n    } else\n      return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"55fa7b85159e79f79dfdca119db7f0f4cb6a2a74":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["55fa7b85159e79f79dfdca119db7f0f4cb6a2a74"]},"commit2Childs":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["55fa7b85159e79f79dfdca119db7f0f4cb6a2a74"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"55fa7b85159e79f79dfdca119db7f0f4cb6a2a74":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}