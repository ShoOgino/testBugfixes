{"path":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestFeatureExtractionFromMultipleSegments#testFeatureExtractionFromMultipleSegments().mjava","commits":[{"id":"58c36d634c9789cb739fbd175c1a8d50b3303f6b","date":1478022614,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestFeatureExtractionFromMultipleSegments#testFeatureExtractionFromMultipleSegments().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testFeatureExtractionFromMultipleSegments() throws Exception {\n\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"{!edismax qf='description^1' boost='sum(product(pow(normHits, 0.7), 1600), .1)' v='apple'}\");\n    // request 100 rows, if any rows are fetched from the second or subsequent segments the tests should succeed if LTRRescorer::extractFeaturesInfo() advances the doc iterator properly\n    int numRows = 100;\n    query.add(\"rows\", (new Integer(numRows)).toString());\n    query.add(\"wt\", \"json\");\n    query.add(\"fq\", \"popularity:201\");\n    query.add(\"fl\", \"*, score,id,normHits,description,fv:[features store='feature-store-6' format='dense' efi.user_text='apple']\");\n    String res = restTestHarness.query(\"/query\" + query.toQueryString());\n\n    Map<String,Object> resultJson = (Map<String,Object>) ObjectBuilder.fromJSON(res);\n\n    List<Map<String,Object>> docs = (List<Map<String,Object>>)((Map<String,Object>)resultJson.get(\"response\")).get(\"docs\");\n    int passCount = 0;\n    for (final Map<String,Object> doc : docs) {\n       String features = (String)doc.get(\"fv\");\n       assert(features.length() > 0);\n       ++passCount;\n    }\n    assert(passCount == numRows);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9720b151fde2073f4e401450f4574e5f31c2d0ff","date":1478184029,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestFeatureExtractionFromMultipleSegments#testFeatureExtractionFromMultipleSegments().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testFeatureExtractionFromMultipleSegments() throws Exception {\n\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"{!edismax qf='description^1' boost='sum(product(pow(normHits, 0.7), 1600), .1)' v='apple'}\");\n    // request 100 rows, if any rows are fetched from the second or subsequent segments the tests should succeed if LTRRescorer::extractFeaturesInfo() advances the doc iterator properly\n    int numRows = 100;\n    query.add(\"rows\", (new Integer(numRows)).toString());\n    query.add(\"wt\", \"json\");\n    query.add(\"fq\", \"popularity:201\");\n    query.add(\"fl\", \"*, score,id,normHits,description,fv:[features store='feature-store-6' format='dense' efi.user_text='apple']\");\n    String res = restTestHarness.query(\"/query\" + query.toQueryString());\n\n    Map<String,Object> resultJson = (Map<String,Object>) ObjectBuilder.fromJSON(res);\n\n    List<Map<String,Object>> docs = (List<Map<String,Object>>)((Map<String,Object>)resultJson.get(\"response\")).get(\"docs\");\n    int passCount = 0;\n    for (final Map<String,Object> doc : docs) {\n       String features = (String)doc.get(\"fv\");\n       assert(features.length() > 0);\n       ++passCount;\n    }\n    assert(passCount == numRows);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","date":1528054850,"type":3,"author":"Michael Braun","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestFeatureExtractionFromMultipleSegments#testFeatureExtractionFromMultipleSegments().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestFeatureExtractionFromMultipleSegments#testFeatureExtractionFromMultipleSegments().mjava","sourceNew":"  @Test\n  public void testFeatureExtractionFromMultipleSegments() throws Exception {\n\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"{!edismax qf='description^1' boost='sum(product(pow(normHits, 0.7), 1600), .1)' v='apple'}\");\n    // request 100 rows, if any rows are fetched from the second or subsequent segments the tests should succeed if LTRRescorer::extractFeaturesInfo() advances the doc iterator properly\n    int numRows = 100;\n    query.add(\"rows\", Integer.toString(numRows));\n    query.add(\"wt\", \"json\");\n    query.add(\"fq\", \"popularity:201\");\n    query.add(\"fl\", \"*, score,id,normHits,description,fv:[features store='feature-store-6' format='dense' efi.user_text='apple']\");\n    String res = restTestHarness.query(\"/query\" + query.toQueryString());\n\n    Map<String,Object> resultJson = (Map<String,Object>) ObjectBuilder.fromJSON(res);\n\n    List<Map<String,Object>> docs = (List<Map<String,Object>>)((Map<String,Object>)resultJson.get(\"response\")).get(\"docs\");\n    int passCount = 0;\n    for (final Map<String,Object> doc : docs) {\n       String features = (String)doc.get(\"fv\");\n       assert(features.length() > 0);\n       ++passCount;\n    }\n    assert(passCount == numRows);\n  }\n\n","sourceOld":"  @Test\n  public void testFeatureExtractionFromMultipleSegments() throws Exception {\n\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"{!edismax qf='description^1' boost='sum(product(pow(normHits, 0.7), 1600), .1)' v='apple'}\");\n    // request 100 rows, if any rows are fetched from the second or subsequent segments the tests should succeed if LTRRescorer::extractFeaturesInfo() advances the doc iterator properly\n    int numRows = 100;\n    query.add(\"rows\", (new Integer(numRows)).toString());\n    query.add(\"wt\", \"json\");\n    query.add(\"fq\", \"popularity:201\");\n    query.add(\"fl\", \"*, score,id,normHits,description,fv:[features store='feature-store-6' format='dense' efi.user_text='apple']\");\n    String res = restTestHarness.query(\"/query\" + query.toQueryString());\n\n    Map<String,Object> resultJson = (Map<String,Object>) ObjectBuilder.fromJSON(res);\n\n    List<Map<String,Object>> docs = (List<Map<String,Object>>)((Map<String,Object>)resultJson.get(\"response\")).get(\"docs\");\n    int passCount = 0;\n    for (final Map<String,Object> doc : docs) {\n       String features = (String)doc.get(\"fv\");\n       assert(features.length() > 0);\n       ++passCount;\n    }\n    assert(passCount == numRows);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"628903f37b6c442da0d390db1c6af9a0e74d41a7","date":1531736685,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestFeatureExtractionFromMultipleSegments#testFeatureExtractionFromMultipleSegments().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestFeatureExtractionFromMultipleSegments#testFeatureExtractionFromMultipleSegments().mjava","sourceNew":"  @Test\n  public void testFeatureExtractionFromMultipleSegments() throws Exception {\n\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"{!edismax qf='description^1' boost='sum(product(pow(normHits, 0.7), 1600), .1)' v='apple'}\");\n    // request 100 rows, if any rows are fetched from the second or subsequent segments the tests should succeed if LTRRescorer::extractFeaturesInfo() advances the doc iterator properly\n    int numRows = 100;\n    query.add(\"rows\", Integer.toString(numRows));\n    query.add(\"wt\", \"json\");\n    query.add(\"fq\", \"popularity:201\");\n    query.add(\"fl\", \"*, score,id,normHits,description,fv:[features store='feature-store-6' format='dense' efi.user_text='apple']\");\n    String res = restTestHarness.query(\"/query\" + query.toQueryString());\n\n    Map<String,Object> resultJson = (Map<String,Object>) ObjectBuilder.fromJSON(res);\n\n    List<Map<String,Object>> docs = (List<Map<String,Object>>)((Map<String,Object>)resultJson.get(\"response\")).get(\"docs\");\n    int passCount = 0;\n    for (final Map<String,Object> doc : docs) {\n       String features = (String)doc.get(\"fv\");\n       assert(features.length() > 0);\n       ++passCount;\n    }\n    assert(passCount == numRows);\n  }\n\n","sourceOld":"  @Test\n  public void testFeatureExtractionFromMultipleSegments() throws Exception {\n\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"{!edismax qf='description^1' boost='sum(product(pow(normHits, 0.7), 1600), .1)' v='apple'}\");\n    // request 100 rows, if any rows are fetched from the second or subsequent segments the tests should succeed if LTRRescorer::extractFeaturesInfo() advances the doc iterator properly\n    int numRows = 100;\n    query.add(\"rows\", (new Integer(numRows)).toString());\n    query.add(\"wt\", \"json\");\n    query.add(\"fq\", \"popularity:201\");\n    query.add(\"fl\", \"*, score,id,normHits,description,fv:[features store='feature-store-6' format='dense' efi.user_text='apple']\");\n    String res = restTestHarness.query(\"/query\" + query.toQueryString());\n\n    Map<String,Object> resultJson = (Map<String,Object>) ObjectBuilder.fromJSON(res);\n\n    List<Map<String,Object>> docs = (List<Map<String,Object>>)((Map<String,Object>)resultJson.get(\"response\")).get(\"docs\");\n    int passCount = 0;\n    for (final Map<String,Object> doc : docs) {\n       String features = (String)doc.get(\"fv\");\n       assert(features.length() > 0);\n       ++passCount;\n    }\n    assert(passCount == numRows);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestFeatureExtractionFromMultipleSegments#testFeatureExtractionFromMultipleSegments().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestFeatureExtractionFromMultipleSegments#testFeatureExtractionFromMultipleSegments().mjava","sourceNew":"  @Test\n  public void testFeatureExtractionFromMultipleSegments() throws Exception {\n\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"{!edismax qf='description^1' boost='sum(product(pow(normHits, 0.7), 1600), .1)' v='apple'}\");\n    // request 100 rows, if any rows are fetched from the second or subsequent segments the tests should succeed if LTRRescorer::extractFeaturesInfo() advances the doc iterator properly\n    int numRows = 100;\n    query.add(\"rows\", Integer.toString(numRows));\n    query.add(\"wt\", \"json\");\n    query.add(\"fq\", \"popularity:201\");\n    query.add(\"fl\", \"*, score,id,normHits,description,fv:[features store='feature-store-6' format='dense' efi.user_text='apple']\");\n    String res = restTestHarness.query(\"/query\" + query.toQueryString());\n\n    Map<String,Object> resultJson = (Map<String,Object>) ObjectBuilder.fromJSON(res);\n\n    List<Map<String,Object>> docs = (List<Map<String,Object>>)((Map<String,Object>)resultJson.get(\"response\")).get(\"docs\");\n    int passCount = 0;\n    for (final Map<String,Object> doc : docs) {\n       String features = (String)doc.get(\"fv\");\n       assert(features.length() > 0);\n       ++passCount;\n    }\n    assert(passCount == numRows);\n  }\n\n","sourceOld":"  @Test\n  public void testFeatureExtractionFromMultipleSegments() throws Exception {\n\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"{!edismax qf='description^1' boost='sum(product(pow(normHits, 0.7), 1600), .1)' v='apple'}\");\n    // request 100 rows, if any rows are fetched from the second or subsequent segments the tests should succeed if LTRRescorer::extractFeaturesInfo() advances the doc iterator properly\n    int numRows = 100;\n    query.add(\"rows\", (new Integer(numRows)).toString());\n    query.add(\"wt\", \"json\");\n    query.add(\"fq\", \"popularity:201\");\n    query.add(\"fl\", \"*, score,id,normHits,description,fv:[features store='feature-store-6' format='dense' efi.user_text='apple']\");\n    String res = restTestHarness.query(\"/query\" + query.toQueryString());\n\n    Map<String,Object> resultJson = (Map<String,Object>) ObjectBuilder.fromJSON(res);\n\n    List<Map<String,Object>> docs = (List<Map<String,Object>>)((Map<String,Object>)resultJson.get(\"response\")).get(\"docs\");\n    int passCount = 0;\n    for (final Map<String,Object> doc : docs) {\n       String features = (String)doc.get(\"fv\");\n       assert(features.length() > 0);\n       ++passCount;\n    }\n    assert(passCount == numRows);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3714bcf66a68a1600e9dd11442fc1b33b62ef088","date":1556832005,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestFeatureExtractionFromMultipleSegments#testFeatureExtractionFromMultipleSegments().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestFeatureExtractionFromMultipleSegments#testFeatureExtractionFromMultipleSegments().mjava","sourceNew":"  @Test\n  public void testFeatureExtractionFromMultipleSegments() throws Exception {\n\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"{!edismax qf='description^1' boost='sum(product(pow(normHits, 0.7), 1600), .1)' v='apple'}\");\n    // request 100 rows, if any rows are fetched from the second or subsequent segments the tests should succeed if LTRRescorer::extractFeaturesInfo() advances the doc iterator properly\n    int numRows = 100;\n    query.add(\"rows\", Integer.toString(numRows));\n    query.add(\"wt\", \"json\");\n    query.add(\"fq\", \"popularity:201\");\n    query.add(\"fl\", \"*, score,id,normHits,description,fv:[features store='feature-store-6' format='dense' efi.user_text='apple']\");\n    String res = restTestHarness.query(\"/query\" + query.toQueryString());\n\n    Map<String,Object> resultJson = (Map<String,Object>) Utils.fromJSONString(res);\n\n    List<Map<String,Object>> docs = (List<Map<String,Object>>)((Map<String,Object>)resultJson.get(\"response\")).get(\"docs\");\n    int passCount = 0;\n    for (final Map<String,Object> doc : docs) {\n       String features = (String)doc.get(\"fv\");\n       assert(features.length() > 0);\n       ++passCount;\n    }\n    assert(passCount == numRows);\n  }\n\n","sourceOld":"  @Test\n  public void testFeatureExtractionFromMultipleSegments() throws Exception {\n\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"{!edismax qf='description^1' boost='sum(product(pow(normHits, 0.7), 1600), .1)' v='apple'}\");\n    // request 100 rows, if any rows are fetched from the second or subsequent segments the tests should succeed if LTRRescorer::extractFeaturesInfo() advances the doc iterator properly\n    int numRows = 100;\n    query.add(\"rows\", Integer.toString(numRows));\n    query.add(\"wt\", \"json\");\n    query.add(\"fq\", \"popularity:201\");\n    query.add(\"fl\", \"*, score,id,normHits,description,fv:[features store='feature-store-6' format='dense' efi.user_text='apple']\");\n    String res = restTestHarness.query(\"/query\" + query.toQueryString());\n\n    Map<String,Object> resultJson = (Map<String,Object>) ObjectBuilder.fromJSON(res);\n\n    List<Map<String,Object>> docs = (List<Map<String,Object>>)((Map<String,Object>)resultJson.get(\"response\")).get(\"docs\");\n    int passCount = 0;\n    for (final Map<String,Object> doc : docs) {\n       String features = (String)doc.get(\"fv\");\n       assert(features.length() > 0);\n       ++passCount;\n    }\n    assert(passCount == numRows);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestFeatureExtractionFromMultipleSegments#testFeatureExtractionFromMultipleSegments().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestFeatureExtractionFromMultipleSegments#testFeatureExtractionFromMultipleSegments().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testFeatureExtractionFromMultipleSegments() throws Exception {\n\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"{!edismax qf='description^1' boost='sum(product(pow(normHits, 0.7), 1600), .1)' v='apple'}\");\n    // request 100 rows, if any rows are fetched from the second or subsequent segments the tests should succeed if LTRRescorer::extractFeaturesInfo() advances the doc iterator properly\n    int numRows = 100;\n    query.add(\"rows\", Integer.toString(numRows));\n    query.add(\"wt\", \"json\");\n    query.add(\"fq\", \"popularity:201\");\n    query.add(\"fl\", \"*, score,id,normHits,description,fv:[features store='feature-store-6' format='dense' efi.user_text='apple']\");\n    String res = restTestHarness.query(\"/query\" + query.toQueryString());\n\n    Map<String,Object> resultJson = (Map<String,Object>) Utils.fromJSONString(res);\n\n    List<Map<String,Object>> docs = (List<Map<String,Object>>)((Map<String,Object>)resultJson.get(\"response\")).get(\"docs\");\n    int passCount = 0;\n    for (final Map<String,Object> doc : docs) {\n       String features = (String)doc.get(\"fv\");\n       assert(features.length() > 0);\n       ++passCount;\n    }\n    assert(passCount == numRows);\n  }\n\n","sourceOld":"  @Test\n  public void testFeatureExtractionFromMultipleSegments() throws Exception {\n\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"{!edismax qf='description^1' boost='sum(product(pow(normHits, 0.7), 1600), .1)' v='apple'}\");\n    // request 100 rows, if any rows are fetched from the second or subsequent segments the tests should succeed if LTRRescorer::extractFeaturesInfo() advances the doc iterator properly\n    int numRows = 100;\n    query.add(\"rows\", Integer.toString(numRows));\n    query.add(\"wt\", \"json\");\n    query.add(\"fq\", \"popularity:201\");\n    query.add(\"fl\", \"*, score,id,normHits,description,fv:[features store='feature-store-6' format='dense' efi.user_text='apple']\");\n    String res = restTestHarness.query(\"/query\" + query.toQueryString());\n\n    Map<String,Object> resultJson = (Map<String,Object>) Utils.fromJSONString(res);\n\n    List<Map<String,Object>> docs = (List<Map<String,Object>>)((Map<String,Object>)resultJson.get(\"response\")).get(\"docs\");\n    int passCount = 0;\n    for (final Map<String,Object> doc : docs) {\n       String features = (String)doc.get(\"fv\");\n       assert(features.length() > 0);\n       ++passCount;\n    }\n    assert(passCount == numRows);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestFeatureExtractionFromMultipleSegments#testFeatureExtractionFromMultipleSegments().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestFeatureExtractionFromMultipleSegments#testFeatureExtractionFromMultipleSegments().mjava","sourceNew":"  @Test\n  public void testFeatureExtractionFromMultipleSegments() throws Exception {\n\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"{!edismax qf='description^1' boost='sum(product(pow(normHits, 0.7), 1600), .1)' v='apple'}\");\n    // request 100 rows, if any rows are fetched from the second or subsequent segments the tests should succeed if LTRRescorer::extractFeaturesInfo() advances the doc iterator properly\n    int numRows = 100;\n    query.add(\"rows\", Integer.toString(numRows));\n    query.add(\"wt\", \"json\");\n    query.add(\"fq\", \"popularity:201\");\n    query.add(\"fl\", \"*, score,id,normHits,description,fv:[features store='feature-store-6' format='dense' efi.user_text='apple']\");\n    String res = restTestHarness.query(\"/query\" + query.toQueryString());\n\n    Map<String,Object> resultJson = (Map<String,Object>) Utils.fromJSONString(res);\n\n    List<Map<String,Object>> docs = (List<Map<String,Object>>)((Map<String,Object>)resultJson.get(\"response\")).get(\"docs\");\n    int passCount = 0;\n    for (final Map<String,Object> doc : docs) {\n       String features = (String)doc.get(\"fv\");\n       assert(features.length() > 0);\n       ++passCount;\n    }\n    assert(passCount == numRows);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testFeatureExtractionFromMultipleSegments() throws Exception {\n\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"{!edismax qf='description^1' boost='sum(product(pow(normHits, 0.7), 1600), .1)' v='apple'}\");\n    // request 100 rows, if any rows are fetched from the second or subsequent segments the tests should succeed if LTRRescorer::extractFeaturesInfo() advances the doc iterator properly\n    int numRows = 100;\n    query.add(\"rows\", Integer.toString(numRows));\n    query.add(\"wt\", \"json\");\n    query.add(\"fq\", \"popularity:201\");\n    query.add(\"fl\", \"*, score,id,normHits,description,fv:[features store='feature-store-6' format='dense' efi.user_text='apple']\");\n    String res = restTestHarness.query(\"/query\" + query.toQueryString());\n\n    Map<String,Object> resultJson = (Map<String,Object>) Utils.fromJSONString(res);\n\n    List<Map<String,Object>> docs = (List<Map<String,Object>>)((Map<String,Object>)resultJson.get(\"response\")).get(\"docs\");\n    int passCount = 0;\n    for (final Map<String,Object> doc : docs) {\n       String features = (String)doc.get(\"fv\");\n       assert(features.length() > 0);\n       ++passCount;\n    }\n    assert(passCount == numRows);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestFeatureExtractionFromMultipleSegments#testFeatureExtractionFromMultipleSegments().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestFeatureExtractionFromMultipleSegments#testFeatureExtractionFromMultipleSegments().mjava","sourceNew":"  @Test\n  public void testFeatureExtractionFromMultipleSegments() throws Exception {\n\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"{!edismax qf='description^1' boost='sum(product(pow(normHits, 0.7), 1600), .1)' v='apple'}\");\n    // request 100 rows, if any rows are fetched from the second or subsequent segments the tests should succeed if LTRRescorer::extractFeaturesInfo() advances the doc iterator properly\n    int numRows = 100;\n    query.add(\"rows\", Integer.toString(numRows));\n    query.add(\"wt\", \"json\");\n    query.add(\"fq\", \"popularity:201\");\n    query.add(\"fl\", \"*, score,id,normHits,description,fv:[features store='feature-store-6' format='dense' efi.user_text='apple']\");\n    String res = restTestHarness.query(\"/query\" + query.toQueryString());\n\n    @SuppressWarnings({\"unchecked\"})\n    Map<String,Object> resultJson = (Map<String,Object>) Utils.fromJSONString(res);\n\n    @SuppressWarnings({\"unchecked\"})\n    List<Map<String,Object>> docs = (List<Map<String,Object>>)((Map<String,Object>)resultJson.get(\"response\")).get(\"docs\");\n    int passCount = 0;\n    for (final Map<String,Object> doc : docs) {\n       String features = (String)doc.get(\"fv\");\n       assert(features.length() > 0);\n       ++passCount;\n    }\n    assert(passCount == numRows);\n  }\n\n","sourceOld":"  @Test\n  public void testFeatureExtractionFromMultipleSegments() throws Exception {\n\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"{!edismax qf='description^1' boost='sum(product(pow(normHits, 0.7), 1600), .1)' v='apple'}\");\n    // request 100 rows, if any rows are fetched from the second or subsequent segments the tests should succeed if LTRRescorer::extractFeaturesInfo() advances the doc iterator properly\n    int numRows = 100;\n    query.add(\"rows\", Integer.toString(numRows));\n    query.add(\"wt\", \"json\");\n    query.add(\"fq\", \"popularity:201\");\n    query.add(\"fl\", \"*, score,id,normHits,description,fv:[features store='feature-store-6' format='dense' efi.user_text='apple']\");\n    String res = restTestHarness.query(\"/query\" + query.toQueryString());\n\n    Map<String,Object> resultJson = (Map<String,Object>) Utils.fromJSONString(res);\n\n    List<Map<String,Object>> docs = (List<Map<String,Object>>)((Map<String,Object>)resultJson.get(\"response\")).get(\"docs\");\n    int passCount = 0;\n    for (final Map<String,Object> doc : docs) {\n       String features = (String)doc.get(\"fv\");\n       assert(features.length() > 0);\n       ++passCount;\n    }\n    assert(passCount == numRows);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["58c36d634c9789cb739fbd175c1a8d50b3303f6b","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["58c36d634c9789cb739fbd175c1a8d50b3303f6b","b6a269c1ddba3f8c9fa9a40572ecc538eddda41a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"]},"commit2Childs":{"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","9720b151fde2073f4e401450f4574e5f31c2d0ff","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58c36d634c9789cb739fbd175c1a8d50b3303f6b","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","9720b151fde2073f4e401450f4574e5f31c2d0ff","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}