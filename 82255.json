{"path":"lucene/contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#baselineTf(float).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#baselineTf(float).mjava","pathOld":"contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#baselineTf(float).mjava","sourceNew":"  /**\n   * Implemented as:\n   * <code>\n   *  (x &lt;= min) &#63; base : sqrt(x+(base**2)-min)\n   * </code>\n   * ...but with a special case check for 0.\n   * <p>\n   * This degrates to <code>sqrt(x)</code> when min and base are both 0\n   * </p>\n   *\n   * @see #setBaselineTfFactors\n   */\n  public float baselineTf(float freq) {\n\n    if (0.0f == freq) return 0.0f;\n  \n    return (freq <= tf_min)\n      ? tf_base\n      : (float)Math.sqrt(freq + (tf_base * tf_base) - tf_min);\n  }\n\n","sourceOld":"  /**\n   * Implemented as:\n   * <code>\n   *  (x &lt;= min) &#63; base : sqrt(x+(base**2)-min)\n   * </code>\n   * ...but with a special case check for 0.\n   * <p>\n   * This degrates to <code>sqrt(x)</code> when min and base are both 0\n   * </p>\n   *\n   * @see #setBaselineTfFactors\n   */\n  public float baselineTf(float freq) {\n\n    if (0.0f == freq) return 0.0f;\n  \n    return (freq <= tf_min)\n      ? tf_base\n      : (float)Math.sqrt(freq + (tf_base * tf_base) - tf_min);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec52f0f15897e94cfd0673ad3bf6431c4e3a2","date":1330477259,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#baselineTf(float).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#baselineTf(float).mjava","sourceNew":"  /**\n   * Implemented as:\n   * <code>\n   *  (x &lt;= min) &#63; base : sqrt(x+(base**2)-min)\n   * </code>\n   * ...but with a special case check for 0.\n   * <p>\n   * This degrates to <code>sqrt(x)</code> when min and base are both 0\n   * </p>\n   *\n   * @see #setBaselineTfFactors\n   * @see <a href=\"doc-files/ss.baselineTf.svg\">An SVG visualization of this function</a> \n   */\n  public float baselineTf(float freq) {\n\n    if (0.0f == freq) return 0.0f;\n  \n    return (freq <= tf_min)\n      ? tf_base\n      : (float)Math.sqrt(freq + (tf_base * tf_base) - tf_min);\n  }\n\n","sourceOld":"  /**\n   * Implemented as:\n   * <code>\n   *  (x &lt;= min) &#63; base : sqrt(x+(base**2)-min)\n   * </code>\n   * ...but with a special case check for 0.\n   * <p>\n   * This degrates to <code>sqrt(x)</code> when min and base are both 0\n   * </p>\n   *\n   * @see #setBaselineTfFactors\n   */\n  public float baselineTf(float freq) {\n\n    if (0.0f == freq) return 0.0f;\n  \n    return (freq <= tf_min)\n      ? tf_base\n      : (float)Math.sqrt(freq + (tf_base * tf_base) - tf_min);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#baselineTf(float).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#baselineTf(float).mjava","sourceNew":"  /**\n   * Implemented as:\n   * <code>\n   *  (x &lt;= min) &#63; base : sqrt(x+(base**2)-min)\n   * </code>\n   * ...but with a special case check for 0.\n   * <p>\n   * This degrates to <code>sqrt(x)</code> when min and base are both 0\n   * </p>\n   *\n   * @see #setBaselineTfFactors\n   * @see <a href=\"doc-files/ss.baselineTf.svg\">An SVG visualization of this function</a> \n   */\n  public float baselineTf(float freq) {\n\n    if (0.0f == freq) return 0.0f;\n  \n    return (freq <= tf_min)\n      ? tf_base\n      : (float)Math.sqrt(freq + (tf_base * tf_base) - tf_min);\n  }\n\n","sourceOld":"  /**\n   * Implemented as:\n   * <code>\n   *  (x &lt;= min) &#63; base : sqrt(x+(base**2)-min)\n   * </code>\n   * ...but with a special case check for 0.\n   * <p>\n   * This degrates to <code>sqrt(x)</code> when min and base are both 0\n   * </p>\n   *\n   * @see #setBaselineTfFactors\n   */\n  public float baselineTf(float freq) {\n\n    if (0.0f == freq) return 0.0f;\n  \n    return (freq <= tf_min)\n      ? tf_base\n      : (float)Math.sqrt(freq + (tf_base * tf_base) - tf_min);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#baselineTf(float).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#baselineTf(float).mjava","sourceNew":"  /**\n   * Implemented as:\n   * <code>\n   *  (x &lt;= min) &#63; base : sqrt(x+(base**2)-min)\n   * </code>\n   * ...but with a special case check for 0.\n   * <p>\n   * This degrates to <code>sqrt(x)</code> when min and base are both 0\n   * </p>\n   *\n   * @see #setBaselineTfFactors\n   * @see <a href=\"doc-files/ss.baselineTf.svg\">An SVG visualization of this function</a> \n   */\n  public float baselineTf(float freq) {\n\n    if (0.0f == freq) return 0.0f;\n  \n    return (freq <= tf_min)\n      ? tf_base\n      : (float)Math.sqrt(freq + (tf_base * tf_base) - tf_min);\n  }\n\n","sourceOld":"  /**\n   * Implemented as:\n   * <code>\n   *  (x &lt;= min) &#63; base : sqrt(x+(base**2)-min)\n   * </code>\n   * ...but with a special case check for 0.\n   * <p>\n   * This degrates to <code>sqrt(x)</code> when min and base are both 0\n   * </p>\n   *\n   * @see #setBaselineTfFactors\n   * @see <a href=\"doc-files/ss.baselineTf.svg\">An SVG visualization of this function</a> \n   */\n  public float baselineTf(float freq) {\n\n    if (0.0f == freq) return 0.0f;\n  \n    return (freq <= tf_min)\n      ? tf_base\n      : (float)Math.sqrt(freq + (tf_base * tf_base) - tf_min);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e70ec52f0f15897e94cfd0673ad3bf6431c4e3a2"],"e70ec52f0f15897e94cfd0673ad3bf6431c4e3a2":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["9454a6510e2db155fb01faa5c049b06ece95fab9","e70ec52f0f15897e94cfd0673ad3bf6431c4e3a2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e70ec52f0f15897e94cfd0673ad3bf6431c4e3a2":["b89678825b68eccaf09e6ab71675fc0b0af1e099","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e70ec52f0f15897e94cfd0673ad3bf6431c4e3a2","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}