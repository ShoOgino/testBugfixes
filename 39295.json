{"path":"solr/core/src/java/org/apache/solr/response/transform/ChildDocTransformer[ChildDocTransformerFactory]#transform(SolrDocument,int,float).mjava","commits":[{"id":"7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc","date":1440797084,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/ChildDocTransformer[ChildDocTransformerFactory]#transform(SolrDocument,int,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/ChildDocTransformer[ChildDocTransformerFactory]#transform(SolrDocument,int).mjava","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid, float score) {\n\n    FieldType idFt = idField.getType();\n    Object parentIdField = doc.getFirstValue(idField.getName());\n    \n    String parentIdExt = parentIdField instanceof StorableField\n      ? idFt.toExternal((StorableField)parentIdField)\n      : parentIdField.toString();\n\n    try {\n      Query parentQuery = idFt.getFieldQuery(null, idField, parentIdExt);\n      Query query = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n      DocList children = context.getSearcher().getDocList(query, childFilterQuery, new Sort(), 0, limit);\n      if(children.matches() > 0) {\n        DocIterator i = children.iterator();\n        while(i.hasNext()) {\n          Integer childDocNum = i.next();\n          StoredDocument childDoc = context.getSearcher().doc(childDocNum);\n          SolrDocument solrChildDoc = DocsStreamer.getDoc(childDoc, schema);\n\n          // TODO: future enhancement...\n          // support an fl local param in the transformer, which is used to build\n          // a private ReturnFields instance that we use to prune unwanted field \n          // names from solrChildDoc\n          doc.addChildDocument(solrChildDoc);\n        }\n      }\n      \n    } catch (IOException e) {\n      doc.put(name, \"Could not fetch child Documents\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n\n    FieldType idFt = idField.getType();\n    Object parentIdField = doc.getFirstValue(idField.getName());\n    \n    String parentIdExt = parentIdField instanceof StorableField\n      ? idFt.toExternal((StorableField)parentIdField)\n      : parentIdField.toString();\n\n    try {\n      Query parentQuery = idFt.getFieldQuery(null, idField, parentIdExt);\n      Query query = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n      DocList children = context.searcher.getDocList(query, childFilterQuery, new Sort(), 0, limit);\n      if(children.matches() > 0) {\n        DocIterator i = children.iterator();\n        while(i.hasNext()) {\n          Integer childDocNum = i.next();\n          StoredDocument childDoc = context.searcher.doc(childDocNum);\n          SolrDocument solrChildDoc = DocsStreamer.getDoc(childDoc, schema);\n\n          // TODO: future enhancement...\n          // support an fl local param in the transformer, which is used to build\n          // a private ReturnFields instance that we use to prune unwanted field \n          // names from solrChildDoc\n          doc.addChildDocument(solrChildDoc);\n        }\n      }\n      \n    } catch (IOException e) {\n      doc.put(name, \"Could not fetch child Documents\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/ChildDocTransformer[ChildDocTransformerFactory]#transform(SolrDocument,int,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/ChildDocTransformer[ChildDocTransformerFactory]#transform(SolrDocument,int,float).mjava","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid, float score) {\n\n    FieldType idFt = idField.getType();\n    Object parentIdField = doc.getFirstValue(idField.getName());\n    \n    String parentIdExt = parentIdField instanceof IndexableField\n      ? idFt.toExternal((IndexableField)parentIdField)\n      : parentIdField.toString();\n\n    try {\n      Query parentQuery = idFt.getFieldQuery(null, idField, parentIdExt);\n      Query query = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n      DocList children = context.getSearcher().getDocList(query, childFilterQuery, new Sort(), 0, limit);\n      if(children.matches() > 0) {\n        DocIterator i = children.iterator();\n        while(i.hasNext()) {\n          Integer childDocNum = i.next();\n          Document childDoc = context.getSearcher().doc(childDocNum);\n          SolrDocument solrChildDoc = DocsStreamer.getDoc(childDoc, schema);\n\n          // TODO: future enhancement...\n          // support an fl local param in the transformer, which is used to build\n          // a private ReturnFields instance that we use to prune unwanted field \n          // names from solrChildDoc\n          doc.addChildDocument(solrChildDoc);\n        }\n      }\n      \n    } catch (IOException e) {\n      doc.put(name, \"Could not fetch child Documents\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void transform(SolrDocument doc, int docid, float score) {\n\n    FieldType idFt = idField.getType();\n    Object parentIdField = doc.getFirstValue(idField.getName());\n    \n    String parentIdExt = parentIdField instanceof StorableField\n      ? idFt.toExternal((StorableField)parentIdField)\n      : parentIdField.toString();\n\n    try {\n      Query parentQuery = idFt.getFieldQuery(null, idField, parentIdExt);\n      Query query = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n      DocList children = context.getSearcher().getDocList(query, childFilterQuery, new Sort(), 0, limit);\n      if(children.matches() > 0) {\n        DocIterator i = children.iterator();\n        while(i.hasNext()) {\n          Integer childDocNum = i.next();\n          StoredDocument childDoc = context.getSearcher().doc(childDocNum);\n          SolrDocument solrChildDoc = DocsStreamer.getDoc(childDoc, schema);\n\n          // TODO: future enhancement...\n          // support an fl local param in the transformer, which is used to build\n          // a private ReturnFields instance that we use to prune unwanted field \n          // names from solrChildDoc\n          doc.addChildDocument(solrChildDoc);\n        }\n      }\n      \n    } catch (IOException e) {\n      doc.put(name, \"Could not fetch child Documents\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"63a9344cff6a72bc4c1ef080c69e10ad0635b811","date":1490410892,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/ChildDocTransformer[ChildDocTransformerFactory]#transform(SolrDocument,int,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/ChildDocTransformer[ChildDocTransformerFactory]#transform(SolrDocument,int,float).mjava","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid, float score) {\n\n    FieldType idFt = idField.getType();\n    Object parentIdField = doc.getFirstValue(idField.getName());\n    \n    String parentIdExt = parentIdField instanceof IndexableField\n      ? idFt.toExternal((IndexableField)parentIdField)\n      : parentIdField.toString();\n\n    try {\n      Query parentQuery = idFt.getFieldQuery(null, idField, parentIdExt);\n      Query query = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n      DocList children = context.getSearcher().getDocList(query, childFilterQuery, new Sort(), 0, limit);\n      if(children.matches() > 0) {\n        DocIterator i = children.iterator();\n        while(i.hasNext()) {\n          Integer childDocNum = i.next();\n          Document childDoc = context.getSearcher().doc(childDocNum);\n          SolrDocument solrChildDoc = DocsStreamer.convertLuceneDocToSolrDoc(childDoc, schema);\n\n          // TODO: future enhancement...\n          // support an fl local param in the transformer, which is used to build\n          // a private ReturnFields instance that we use to prune unwanted field \n          // names from solrChildDoc\n          doc.addChildDocument(solrChildDoc);\n        }\n      }\n      \n    } catch (IOException e) {\n      doc.put(name, \"Could not fetch child Documents\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void transform(SolrDocument doc, int docid, float score) {\n\n    FieldType idFt = idField.getType();\n    Object parentIdField = doc.getFirstValue(idField.getName());\n    \n    String parentIdExt = parentIdField instanceof IndexableField\n      ? idFt.toExternal((IndexableField)parentIdField)\n      : parentIdField.toString();\n\n    try {\n      Query parentQuery = idFt.getFieldQuery(null, idField, parentIdExt);\n      Query query = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n      DocList children = context.getSearcher().getDocList(query, childFilterQuery, new Sort(), 0, limit);\n      if(children.matches() > 0) {\n        DocIterator i = children.iterator();\n        while(i.hasNext()) {\n          Integer childDocNum = i.next();\n          Document childDoc = context.getSearcher().doc(childDocNum);\n          SolrDocument solrChildDoc = DocsStreamer.getDoc(childDoc, schema);\n\n          // TODO: future enhancement...\n          // support an fl local param in the transformer, which is used to build\n          // a private ReturnFields instance that we use to prune unwanted field \n          // names from solrChildDoc\n          doc.addChildDocument(solrChildDoc);\n        }\n      }\n      \n    } catch (IOException e) {\n      doc.put(name, \"Could not fetch child Documents\");\n    }\n  }\n\n","bugFix":null,"bugIntro":["b5d3613911d665344055ef7970e1783b3348b5c0","b5d3613911d665344055ef7970e1783b3348b5c0","b5d3613911d665344055ef7970e1783b3348b5c0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"de548de3ce5405595899f548152d4b93ac9eb9cc","date":1490594650,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/ChildDocTransformer[ChildDocTransformerFactory]#transform(SolrDocument,int,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/ChildDocTransformer[ChildDocTransformerFactory]#transform(SolrDocument,int,float).mjava","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid, float score) {\n\n    FieldType idFt = idField.getType();\n    Object parentIdField = doc.getFirstValue(idField.getName());\n    \n    String parentIdExt = parentIdField instanceof IndexableField\n      ? idFt.toExternal((IndexableField)parentIdField)\n      : parentIdField.toString();\n\n    try {\n      Query parentQuery = idFt.getFieldQuery(null, idField, parentIdExt);\n      Query query = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n      DocList children = context.getSearcher().getDocList(query, childFilterQuery, new Sort(), 0, limit);\n      if(children.matches() > 0) {\n        DocIterator i = children.iterator();\n        while(i.hasNext()) {\n          Integer childDocNum = i.next();\n          Document childDoc = context.getSearcher().doc(childDocNum);\n          SolrDocument solrChildDoc = DocsStreamer.convertLuceneDocToSolrDoc(childDoc, schema);\n\n          // TODO: future enhancement...\n          // support an fl local param in the transformer, which is used to build\n          // a private ReturnFields instance that we use to prune unwanted field \n          // names from solrChildDoc\n          doc.addChildDocument(solrChildDoc);\n        }\n      }\n      \n    } catch (IOException e) {\n      doc.put(name, \"Could not fetch child Documents\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void transform(SolrDocument doc, int docid, float score) {\n\n    FieldType idFt = idField.getType();\n    Object parentIdField = doc.getFirstValue(idField.getName());\n    \n    String parentIdExt = parentIdField instanceof IndexableField\n      ? idFt.toExternal((IndexableField)parentIdField)\n      : parentIdField.toString();\n\n    try {\n      Query parentQuery = idFt.getFieldQuery(null, idField, parentIdExt);\n      Query query = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n      DocList children = context.getSearcher().getDocList(query, childFilterQuery, new Sort(), 0, limit);\n      if(children.matches() > 0) {\n        DocIterator i = children.iterator();\n        while(i.hasNext()) {\n          Integer childDocNum = i.next();\n          Document childDoc = context.getSearcher().doc(childDocNum);\n          SolrDocument solrChildDoc = DocsStreamer.getDoc(childDoc, schema);\n\n          // TODO: future enhancement...\n          // support an fl local param in the transformer, which is used to build\n          // a private ReturnFields instance that we use to prune unwanted field \n          // names from solrChildDoc\n          doc.addChildDocument(solrChildDoc);\n        }\n      }\n      \n    } catch (IOException e) {\n      doc.put(name, \"Could not fetch child Documents\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"320eec6599df6f97f2461a5d1ad49cd93b324a14","date":1503502574,"type":5,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/ChildDocTransformer[ChildDocTransformerFactory]#transform(SolrDocument,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/ChildDocTransformer[ChildDocTransformerFactory]#transform(SolrDocument,int,float).mjava","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n\n    FieldType idFt = idField.getType();\n    Object parentIdField = doc.getFirstValue(idField.getName());\n    \n    String parentIdExt = parentIdField instanceof IndexableField\n      ? idFt.toExternal((IndexableField)parentIdField)\n      : parentIdField.toString();\n\n    try {\n      Query parentQuery = idFt.getFieldQuery(null, idField, parentIdExt);\n      Query query = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n      DocList children = context.getSearcher().getDocList(query, childFilterQuery, new Sort(), 0, limit);\n      if(children.matches() > 0) {\n        SolrDocumentFetcher docFetcher = context.getSearcher().getDocFetcher();\n\n        Set<String> dvFieldsToReturn = docFetcher.getNonStoredDVs(true);\n        boolean shouldDecorateWithDVs = dvFieldsToReturn.size() > 0;\n        DocIterator i = children.iterator();\n\n        while(i.hasNext()) {\n          Integer childDocNum = i.next();\n          Document childDoc = context.getSearcher().doc(childDocNum);\n          SolrDocument solrChildDoc = DocsStreamer.convertLuceneDocToSolrDoc(childDoc, schema);\n\n          if (shouldDecorateWithDVs) {\n            docFetcher.decorateDocValueFields(solrChildDoc, childDocNum, dvFieldsToReturn);\n          }\n\n          // TODO: future enhancement...\n          // support an fl local param in the transformer, which is used to build\n          // a private ReturnFields instance that we use to prune unwanted field \n          // names from solrChildDoc\n          doc.addChildDocument(solrChildDoc);\n        }\n      }\n      \n    } catch (IOException e) {\n      doc.put(name, \"Could not fetch child Documents\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void transform(SolrDocument doc, int docid, float score) {\n\n    FieldType idFt = idField.getType();\n    Object parentIdField = doc.getFirstValue(idField.getName());\n    \n    String parentIdExt = parentIdField instanceof IndexableField\n      ? idFt.toExternal((IndexableField)parentIdField)\n      : parentIdField.toString();\n\n    try {\n      Query parentQuery = idFt.getFieldQuery(null, idField, parentIdExt);\n      Query query = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n      DocList children = context.getSearcher().getDocList(query, childFilterQuery, new Sort(), 0, limit);\n      if(children.matches() > 0) {\n        SolrDocumentFetcher docFetcher = context.getSearcher().getDocFetcher();\n\n        Set<String> dvFieldsToReturn = docFetcher.getNonStoredDVs(true);\n        boolean shouldDecorateWithDVs = dvFieldsToReturn.size() > 0;\n        DocIterator i = children.iterator();\n\n        while(i.hasNext()) {\n          Integer childDocNum = i.next();\n          Document childDoc = context.getSearcher().doc(childDocNum);\n          SolrDocument solrChildDoc = DocsStreamer.convertLuceneDocToSolrDoc(childDoc, schema);\n\n          if (shouldDecorateWithDVs) {\n            docFetcher.decorateDocValueFields(solrChildDoc, childDocNum, dvFieldsToReturn);\n          }\n\n          // TODO: future enhancement...\n          // support an fl local param in the transformer, which is used to build\n          // a private ReturnFields instance that we use to prune unwanted field \n          // names from solrChildDoc\n          doc.addChildDocument(solrChildDoc);\n        }\n      }\n      \n    } catch (IOException e) {\n      doc.put(name, \"Could not fetch child Documents\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29397a0f9fc4ed10ca165fd668636b82d2041b5f","date":1501362816,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/ChildDocTransformer[ChildDocTransformerFactory]#transform(SolrDocument,int,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/ChildDocTransformer[ChildDocTransformerFactory]#transform(SolrDocument,int,float).mjava","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid, float score) {\n\n    FieldType idFt = idField.getType();\n    Object parentIdField = doc.getFirstValue(idField.getName());\n    \n    String parentIdExt = parentIdField instanceof IndexableField\n      ? idFt.toExternal((IndexableField)parentIdField)\n      : parentIdField.toString();\n\n    try {\n      Query parentQuery = idFt.getFieldQuery(null, idField, parentIdExt);\n      Query query = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n      DocList children = context.getSearcher().getDocList(query, childFilterQuery, new Sort(), 0, limit);\n      if(children.matches() > 0) {\n        SolrDocumentFetcher docFetcher = context.getSearcher().getDocFetcher();\n\n        Set<String> dvFieldsToReturn = docFetcher.getNonStoredDVs(true);\n        boolean shouldDecorateWithDVs = dvFieldsToReturn.size() > 0;\n        DocIterator i = children.iterator();\n\n        while(i.hasNext()) {\n          Integer childDocNum = i.next();\n          Document childDoc = context.getSearcher().doc(childDocNum);\n          SolrDocument solrChildDoc = DocsStreamer.convertLuceneDocToSolrDoc(childDoc, schema);\n\n          if (shouldDecorateWithDVs) {\n            docFetcher.decorateDocValueFields(solrChildDoc, childDocNum, dvFieldsToReturn);\n          }\n\n          // TODO: future enhancement...\n          // support an fl local param in the transformer, which is used to build\n          // a private ReturnFields instance that we use to prune unwanted field \n          // names from solrChildDoc\n          doc.addChildDocument(solrChildDoc);\n        }\n      }\n      \n    } catch (IOException e) {\n      doc.put(name, \"Could not fetch child Documents\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void transform(SolrDocument doc, int docid, float score) {\n\n    FieldType idFt = idField.getType();\n    Object parentIdField = doc.getFirstValue(idField.getName());\n    \n    String parentIdExt = parentIdField instanceof IndexableField\n      ? idFt.toExternal((IndexableField)parentIdField)\n      : parentIdField.toString();\n\n    try {\n      Query parentQuery = idFt.getFieldQuery(null, idField, parentIdExt);\n      Query query = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n      DocList children = context.getSearcher().getDocList(query, childFilterQuery, new Sort(), 0, limit);\n      if(children.matches() > 0) {\n        DocIterator i = children.iterator();\n        while(i.hasNext()) {\n          Integer childDocNum = i.next();\n          Document childDoc = context.getSearcher().doc(childDocNum);\n          SolrDocument solrChildDoc = DocsStreamer.convertLuceneDocToSolrDoc(childDoc, schema);\n\n          // TODO: future enhancement...\n          // support an fl local param in the transformer, which is used to build\n          // a private ReturnFields instance that we use to prune unwanted field \n          // names from solrChildDoc\n          doc.addChildDocument(solrChildDoc);\n        }\n      }\n      \n    } catch (IOException e) {\n      doc.put(name, \"Could not fetch child Documents\");\n    }\n  }\n\n","bugFix":null,"bugIntro":["b5d3613911d665344055ef7970e1783b3348b5c0","b5d3613911d665344055ef7970e1783b3348b5c0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/ChildDocTransformer[ChildDocTransformerFactory]#transform(SolrDocument,int,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/ChildDocTransformer[ChildDocTransformerFactory]#transform(SolrDocument,int,float).mjava","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid, float score) {\n\n    FieldType idFt = idField.getType();\n    Object parentIdField = doc.getFirstValue(idField.getName());\n    \n    String parentIdExt = parentIdField instanceof IndexableField\n      ? idFt.toExternal((IndexableField)parentIdField)\n      : parentIdField.toString();\n\n    try {\n      Query parentQuery = idFt.getFieldQuery(null, idField, parentIdExt);\n      Query query = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n      DocList children = context.getSearcher().getDocList(query, childFilterQuery, new Sort(), 0, limit);\n      if(children.matches() > 0) {\n        SolrDocumentFetcher docFetcher = context.getSearcher().getDocFetcher();\n\n        Set<String> dvFieldsToReturn = docFetcher.getNonStoredDVs(true);\n        boolean shouldDecorateWithDVs = dvFieldsToReturn.size() > 0;\n        DocIterator i = children.iterator();\n\n        while(i.hasNext()) {\n          Integer childDocNum = i.next();\n          Document childDoc = context.getSearcher().doc(childDocNum);\n          SolrDocument solrChildDoc = DocsStreamer.convertLuceneDocToSolrDoc(childDoc, schema);\n\n          if (shouldDecorateWithDVs) {\n            docFetcher.decorateDocValueFields(solrChildDoc, childDocNum, dvFieldsToReturn);\n          }\n\n          // TODO: future enhancement...\n          // support an fl local param in the transformer, which is used to build\n          // a private ReturnFields instance that we use to prune unwanted field \n          // names from solrChildDoc\n          doc.addChildDocument(solrChildDoc);\n        }\n      }\n      \n    } catch (IOException e) {\n      doc.put(name, \"Could not fetch child Documents\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void transform(SolrDocument doc, int docid, float score) {\n\n    FieldType idFt = idField.getType();\n    Object parentIdField = doc.getFirstValue(idField.getName());\n    \n    String parentIdExt = parentIdField instanceof IndexableField\n      ? idFt.toExternal((IndexableField)parentIdField)\n      : parentIdField.toString();\n\n    try {\n      Query parentQuery = idFt.getFieldQuery(null, idField, parentIdExt);\n      Query query = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n      DocList children = context.getSearcher().getDocList(query, childFilterQuery, new Sort(), 0, limit);\n      if(children.matches() > 0) {\n        DocIterator i = children.iterator();\n        while(i.hasNext()) {\n          Integer childDocNum = i.next();\n          Document childDoc = context.getSearcher().doc(childDocNum);\n          SolrDocument solrChildDoc = DocsStreamer.convertLuceneDocToSolrDoc(childDoc, schema);\n\n          // TODO: future enhancement...\n          // support an fl local param in the transformer, which is used to build\n          // a private ReturnFields instance that we use to prune unwanted field \n          // names from solrChildDoc\n          doc.addChildDocument(solrChildDoc);\n        }\n      }\n      \n    } catch (IOException e) {\n      doc.put(name, \"Could not fetch child Documents\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"182384b20c064aa16998ddebe9f36e649279c5a6","date":1503596494,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/ChildDocTransformer[ChildDocTransformerFactory]#transform(SolrDocument,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/ChildDocTransformer[ChildDocTransformerFactory]#transform(SolrDocument,int,float).mjava","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n\n    FieldType idFt = idField.getType();\n    Object parentIdField = doc.getFirstValue(idField.getName());\n    \n    String parentIdExt = parentIdField instanceof IndexableField\n      ? idFt.toExternal((IndexableField)parentIdField)\n      : parentIdField.toString();\n\n    try {\n      Query parentQuery = idFt.getFieldQuery(null, idField, parentIdExt);\n      Query query = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n      DocList children = context.getSearcher().getDocList(query, childFilterQuery, new Sort(), 0, limit);\n      if(children.matches() > 0) {\n        SolrDocumentFetcher docFetcher = context.getSearcher().getDocFetcher();\n\n        Set<String> dvFieldsToReturn = docFetcher.getNonStoredDVs(true);\n        boolean shouldDecorateWithDVs = dvFieldsToReturn.size() > 0;\n        DocIterator i = children.iterator();\n\n        while(i.hasNext()) {\n          Integer childDocNum = i.next();\n          Document childDoc = context.getSearcher().doc(childDocNum);\n          SolrDocument solrChildDoc = DocsStreamer.convertLuceneDocToSolrDoc(childDoc, schema);\n\n          if (shouldDecorateWithDVs) {\n            docFetcher.decorateDocValueFields(solrChildDoc, childDocNum, dvFieldsToReturn);\n          }\n\n          // TODO: future enhancement...\n          // support an fl local param in the transformer, which is used to build\n          // a private ReturnFields instance that we use to prune unwanted field \n          // names from solrChildDoc\n          doc.addChildDocument(solrChildDoc);\n        }\n      }\n      \n    } catch (IOException e) {\n      doc.put(name, \"Could not fetch child Documents\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void transform(SolrDocument doc, int docid, float score) {\n\n    FieldType idFt = idField.getType();\n    Object parentIdField = doc.getFirstValue(idField.getName());\n    \n    String parentIdExt = parentIdField instanceof IndexableField\n      ? idFt.toExternal((IndexableField)parentIdField)\n      : parentIdField.toString();\n\n    try {\n      Query parentQuery = idFt.getFieldQuery(null, idField, parentIdExt);\n      Query query = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n      DocList children = context.getSearcher().getDocList(query, childFilterQuery, new Sort(), 0, limit);\n      if(children.matches() > 0) {\n        SolrDocumentFetcher docFetcher = context.getSearcher().getDocFetcher();\n\n        Set<String> dvFieldsToReturn = docFetcher.getNonStoredDVs(true);\n        boolean shouldDecorateWithDVs = dvFieldsToReturn.size() > 0;\n        DocIterator i = children.iterator();\n\n        while(i.hasNext()) {\n          Integer childDocNum = i.next();\n          Document childDoc = context.getSearcher().doc(childDocNum);\n          SolrDocument solrChildDoc = DocsStreamer.convertLuceneDocToSolrDoc(childDoc, schema);\n\n          if (shouldDecorateWithDVs) {\n            docFetcher.decorateDocValueFields(solrChildDoc, childDocNum, dvFieldsToReturn);\n          }\n\n          // TODO: future enhancement...\n          // support an fl local param in the transformer, which is used to build\n          // a private ReturnFields instance that we use to prune unwanted field \n          // names from solrChildDoc\n          doc.addChildDocument(solrChildDoc);\n        }\n      }\n      \n    } catch (IOException e) {\n      doc.put(name, \"Could not fetch child Documents\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/ChildDocTransformer[ChildDocTransformerFactory]#transform(SolrDocument,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/ChildDocTransformer[ChildDocTransformerFactory]#transform(SolrDocument,int,float).mjava","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n\n    FieldType idFt = idField.getType();\n    Object parentIdField = doc.getFirstValue(idField.getName());\n    \n    String parentIdExt = parentIdField instanceof IndexableField\n      ? idFt.toExternal((IndexableField)parentIdField)\n      : parentIdField.toString();\n\n    try {\n      Query parentQuery = idFt.getFieldQuery(null, idField, parentIdExt);\n      Query query = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n      DocList children = context.getSearcher().getDocList(query, childFilterQuery, new Sort(), 0, limit);\n      if(children.matches() > 0) {\n        SolrDocumentFetcher docFetcher = context.getSearcher().getDocFetcher();\n\n        Set<String> dvFieldsToReturn = docFetcher.getNonStoredDVs(true);\n        boolean shouldDecorateWithDVs = dvFieldsToReturn.size() > 0;\n        DocIterator i = children.iterator();\n\n        while(i.hasNext()) {\n          Integer childDocNum = i.next();\n          Document childDoc = context.getSearcher().doc(childDocNum);\n          SolrDocument solrChildDoc = DocsStreamer.convertLuceneDocToSolrDoc(childDoc, schema);\n\n          if (shouldDecorateWithDVs) {\n            docFetcher.decorateDocValueFields(solrChildDoc, childDocNum, dvFieldsToReturn);\n          }\n\n          // TODO: future enhancement...\n          // support an fl local param in the transformer, which is used to build\n          // a private ReturnFields instance that we use to prune unwanted field \n          // names from solrChildDoc\n          doc.addChildDocument(solrChildDoc);\n        }\n      }\n      \n    } catch (IOException e) {\n      doc.put(name, \"Could not fetch child Documents\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void transform(SolrDocument doc, int docid, float score) {\n\n    FieldType idFt = idField.getType();\n    Object parentIdField = doc.getFirstValue(idField.getName());\n    \n    String parentIdExt = parentIdField instanceof IndexableField\n      ? idFt.toExternal((IndexableField)parentIdField)\n      : parentIdField.toString();\n\n    try {\n      Query parentQuery = idFt.getFieldQuery(null, idField, parentIdExt);\n      Query query = new ToChildBlockJoinQuery(parentQuery, parentsFilter);\n      DocList children = context.getSearcher().getDocList(query, childFilterQuery, new Sort(), 0, limit);\n      if(children.matches() > 0) {\n        SolrDocumentFetcher docFetcher = context.getSearcher().getDocFetcher();\n\n        Set<String> dvFieldsToReturn = docFetcher.getNonStoredDVs(true);\n        boolean shouldDecorateWithDVs = dvFieldsToReturn.size() > 0;\n        DocIterator i = children.iterator();\n\n        while(i.hasNext()) {\n          Integer childDocNum = i.next();\n          Document childDoc = context.getSearcher().doc(childDocNum);\n          SolrDocument solrChildDoc = DocsStreamer.convertLuceneDocToSolrDoc(childDoc, schema);\n\n          if (shouldDecorateWithDVs) {\n            docFetcher.decorateDocValueFields(solrChildDoc, childDocNum, dvFieldsToReturn);\n          }\n\n          // TODO: future enhancement...\n          // support an fl local param in the transformer, which is used to build\n          // a private ReturnFields instance that we use to prune unwanted field \n          // names from solrChildDoc\n          doc.addChildDocument(solrChildDoc);\n        }\n      }\n      \n    } catch (IOException e) {\n      doc.put(name, \"Could not fetch child Documents\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["de548de3ce5405595899f548152d4b93ac9eb9cc","29397a0f9fc4ed10ca165fd668636b82d2041b5f"],"de548de3ce5405595899f548152d4b93ac9eb9cc":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","182384b20c064aa16998ddebe9f36e649279c5a6"],"63a9344cff6a72bc4c1ef080c69e10ad0635b811":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"320eec6599df6f97f2461a5d1ad49cd93b324a14":["29397a0f9fc4ed10ca165fd668636b82d2041b5f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"182384b20c064aa16998ddebe9f36e649279c5a6":["29397a0f9fc4ed10ca165fd668636b82d2041b5f","320eec6599df6f97f2461a5d1ad49cd93b324a14"],"7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["182384b20c064aa16998ddebe9f36e649279c5a6"],"29397a0f9fc4ed10ca165fd668636b82d2041b5f":["63a9344cff6a72bc4c1ef080c69e10ad0635b811"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc"]},"commit2Childs":{"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"de548de3ce5405595899f548152d4b93ac9eb9cc":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"63a9344cff6a72bc4c1ef080c69e10ad0635b811":["29397a0f9fc4ed10ca165fd668636b82d2041b5f"],"320eec6599df6f97f2461a5d1ad49cd93b324a14":["182384b20c064aa16998ddebe9f36e649279c5a6"],"182384b20c064aa16998ddebe9f36e649279c5a6":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc"],"7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"29397a0f9fc4ed10ca165fd668636b82d2041b5f":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","320eec6599df6f97f2461a5d1ad49cd93b324a14","182384b20c064aa16998ddebe9f36e649279c5a6"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["de548de3ce5405595899f548152d4b93ac9eb9cc","63a9344cff6a72bc4c1ef080c69e10ad0635b811"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}