{"path":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#isMortonEdgeFromPolygon(Node,Node).mjava","commits":[{"id":"5ed90f8ba7e7be13d155f954862178b23a324125","date":1568020603,"type":0,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#isMortonEdgeFromPolygon(Node,Node).mjava","pathOld":"/dev/null","sourceNew":"  /** Uses morton code for speed to determine whether or not and edge defined by a and b overlaps with a polygon edge */\n  private static final boolean isMortonEdgeFromPolygon(final Node a, final Node b) {\n    // edge bbox (flip the bits so negative encoded values are < positive encoded values)\n    final int minTX = StrictMath.min(a.x, b.x) ^ 0x80000000;\n    final int minTY = StrictMath.min(a.y, b.y) ^ 0x80000000;\n    final int maxTX = StrictMath.max(a.x, b.x) ^ 0x80000000;\n    final int maxTY = StrictMath.max(a.y, b.y) ^ 0x80000000;\n\n    // z-order range for the current edge;\n    final long minZ = BitUtil.interleave(minTX, minTY);\n    final long maxZ = BitUtil.interleave(maxTX, maxTY);\n\n    // now make sure we don't have other points inside the potential ear;\n\n    // look for points inside edge in both directions\n    Node p = a.previousZ;\n    Node n = a.nextZ;\n    while (p != null && Long.compareUnsigned(p.morton, minZ) >= 0\n        && n != null && Long.compareUnsigned(n.morton, maxZ) <= 0) {\n      if (isPointInLine(p, p.next, a) && isPointInLine(p, p.next, b)) {\n        return p.isNextEdgeFromPolygon;\n      }\n      if (isPointInLine(p, p.previous, a) && isPointInLine(p, p.previous, b)) {\n        return p.previous.isNextEdgeFromPolygon;\n      }\n\n      p = p.previousZ;\n\n      if (isPointInLine(n, n.next, a) && isPointInLine(n, n.next, b)) {\n        return n.isNextEdgeFromPolygon;\n      }\n      if (isPointInLine(n, n.previous, a) && isPointInLine(n, n.previous, b)) {\n        return n.previous.isNextEdgeFromPolygon;\n      }\n\n      n = n.nextZ;\n    }\n\n    // first look for points inside the edge in decreasing z-order\n    while (p != null && Long.compareUnsigned(p.morton, minZ) >= 0) {\n      if (isPointInLine(p, p.next, a) && isPointInLine(p, p.next, b)) {\n        return p.isNextEdgeFromPolygon;\n      }\n      if (isPointInLine(p, p.previous, a) && isPointInLine(p, p.previous, b)) {\n        return p.previous.isNextEdgeFromPolygon;\n      }\n      p = p.previousZ;\n    }\n    // then look for points in increasing z-order\n    while (n != null &&\n        Long.compareUnsigned(n.morton, maxZ) <= 0) {\n      if (isPointInLine(n, n.next, a) && isPointInLine(n, n.next, b)) {\n        return n.isNextEdgeFromPolygon;\n      }\n      if (isPointInLine(n, n.previous, a) && isPointInLine(n, n.previous, b)) {\n        return n.previous.isNextEdgeFromPolygon;\n      }\n      n = n.nextZ;\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Tessellator#isMortonEdgeFromPolygon(Node,Node).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#isMortonEdgeFromPolygon(Node,Node).mjava","sourceNew":"  /** Uses morton code for speed to determine whether or not and edge defined by a and b overlaps with a polygon edge */\n  private static final boolean isMortonEdgeFromPolygon(final Node a, final Node b) {\n    // edge bbox (flip the bits so negative encoded values are < positive encoded values)\n    final int minTX = StrictMath.min(a.x, b.x) ^ 0x80000000;\n    final int minTY = StrictMath.min(a.y, b.y) ^ 0x80000000;\n    final int maxTX = StrictMath.max(a.x, b.x) ^ 0x80000000;\n    final int maxTY = StrictMath.max(a.y, b.y) ^ 0x80000000;\n\n    // z-order range for the current edge;\n    final long minZ = BitUtil.interleave(minTX, minTY);\n    final long maxZ = BitUtil.interleave(maxTX, maxTY);\n\n    // now make sure we don't have other points inside the potential ear;\n\n    // look for points inside edge in both directions\n    Node p = a.previousZ;\n    Node n = a.nextZ;\n    while (p != null && Long.compareUnsigned(p.morton, minZ) >= 0\n        && n != null && Long.compareUnsigned(n.morton, maxZ) <= 0) {\n      if (isPointInLine(p, p.next, a) && isPointInLine(p, p.next, b)) {\n        return p.isNextEdgeFromPolygon;\n      }\n      if (isPointInLine(p, p.previous, a) && isPointInLine(p, p.previous, b)) {\n        return p.previous.isNextEdgeFromPolygon;\n      }\n\n      p = p.previousZ;\n\n      if (isPointInLine(n, n.next, a) && isPointInLine(n, n.next, b)) {\n        return n.isNextEdgeFromPolygon;\n      }\n      if (isPointInLine(n, n.previous, a) && isPointInLine(n, n.previous, b)) {\n        return n.previous.isNextEdgeFromPolygon;\n      }\n\n      n = n.nextZ;\n    }\n\n    // first look for points inside the edge in decreasing z-order\n    while (p != null && Long.compareUnsigned(p.morton, minZ) >= 0) {\n      if (isPointInLine(p, p.next, a) && isPointInLine(p, p.next, b)) {\n        return p.isNextEdgeFromPolygon;\n      }\n      if (isPointInLine(p, p.previous, a) && isPointInLine(p, p.previous, b)) {\n        return p.previous.isNextEdgeFromPolygon;\n      }\n      p = p.previousZ;\n    }\n    // then look for points in increasing z-order\n    while (n != null &&\n        Long.compareUnsigned(n.morton, maxZ) <= 0) {\n      if (isPointInLine(n, n.next, a) && isPointInLine(n, n.next, b)) {\n        return n.isNextEdgeFromPolygon;\n      }\n      if (isPointInLine(n, n.previous, a) && isPointInLine(n, n.previous, b)) {\n        return n.previous.isNextEdgeFromPolygon;\n      }\n      n = n.nextZ;\n    }\n    return false;\n  }\n\n","sourceOld":"  /** Uses morton code for speed to determine whether or not and edge defined by a and b overlaps with a polygon edge */\n  private static final boolean isMortonEdgeFromPolygon(final Node a, final Node b) {\n    // edge bbox (flip the bits so negative encoded values are < positive encoded values)\n    final int minTX = StrictMath.min(a.x, b.x) ^ 0x80000000;\n    final int minTY = StrictMath.min(a.y, b.y) ^ 0x80000000;\n    final int maxTX = StrictMath.max(a.x, b.x) ^ 0x80000000;\n    final int maxTY = StrictMath.max(a.y, b.y) ^ 0x80000000;\n\n    // z-order range for the current edge;\n    final long minZ = BitUtil.interleave(minTX, minTY);\n    final long maxZ = BitUtil.interleave(maxTX, maxTY);\n\n    // now make sure we don't have other points inside the potential ear;\n\n    // look for points inside edge in both directions\n    Node p = a.previousZ;\n    Node n = a.nextZ;\n    while (p != null && Long.compareUnsigned(p.morton, minZ) >= 0\n        && n != null && Long.compareUnsigned(n.morton, maxZ) <= 0) {\n      if (isPointInLine(p, p.next, a) && isPointInLine(p, p.next, b)) {\n        return p.isNextEdgeFromPolygon;\n      }\n      if (isPointInLine(p, p.previous, a) && isPointInLine(p, p.previous, b)) {\n        return p.previous.isNextEdgeFromPolygon;\n      }\n\n      p = p.previousZ;\n\n      if (isPointInLine(n, n.next, a) && isPointInLine(n, n.next, b)) {\n        return n.isNextEdgeFromPolygon;\n      }\n      if (isPointInLine(n, n.previous, a) && isPointInLine(n, n.previous, b)) {\n        return n.previous.isNextEdgeFromPolygon;\n      }\n\n      n = n.nextZ;\n    }\n\n    // first look for points inside the edge in decreasing z-order\n    while (p != null && Long.compareUnsigned(p.morton, minZ) >= 0) {\n      if (isPointInLine(p, p.next, a) && isPointInLine(p, p.next, b)) {\n        return p.isNextEdgeFromPolygon;\n      }\n      if (isPointInLine(p, p.previous, a) && isPointInLine(p, p.previous, b)) {\n        return p.previous.isNextEdgeFromPolygon;\n      }\n      p = p.previousZ;\n    }\n    // then look for points in increasing z-order\n    while (n != null &&\n        Long.compareUnsigned(n.morton, maxZ) <= 0) {\n      if (isPointInLine(n, n.next, a) && isPointInLine(n, n.next, b)) {\n        return n.isNextEdgeFromPolygon;\n      }\n      if (isPointInLine(n, n.previous, a) && isPointInLine(n, n.previous, b)) {\n        return n.previous.isNextEdgeFromPolygon;\n      }\n      n = n.nextZ;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["5ed90f8ba7e7be13d155f954862178b23a324125"],"5ed90f8ba7e7be13d155f954862178b23a324125":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5ed90f8ba7e7be13d155f954862178b23a324125"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5ed90f8ba7e7be13d155f954862178b23a324125":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}