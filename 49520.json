{"path":"solr/core/src/java/org/apache/solr/analysis/MappingCharFilterFactory#parseRules(List[String],NormalizeCharMap).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/MappingCharFilterFactory#parseRules(List[String],NormalizeCharMap).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/MappingCharFilterFactory#parseRules(List[String],NormalizeCharMap).mjava","sourceNew":"  protected void parseRules( List<String> rules, NormalizeCharMap normMap ){\n    for( String rule : rules ){\n      Matcher m = p.matcher( rule );\n      if( !m.find() )\n        throw new RuntimeException( \"Invalid Mapping Rule : [\" + rule + \"], file = \" + mapping );\n      normMap.add( parseString( m.group( 1 ) ), parseString( m.group( 2 ) ) );\n    }\n  }\n\n","sourceOld":"  protected void parseRules( List<String> rules, NormalizeCharMap normMap ){\n    for( String rule : rules ){\n      Matcher m = p.matcher( rule );\n      if( !m.find() )\n        throw new RuntimeException( \"Invalid Mapping Rule : [\" + rule + \"], file = \" + mapping );\n      normMap.add( parseString( m.group( 1 ) ), parseString( m.group( 2 ) ) );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/MappingCharFilterFactory#parseRules(List[String],NormalizeCharMap).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/MappingCharFilterFactory#parseRules(List[String],NormalizeCharMap).mjava","sourceNew":"  protected void parseRules( List<String> rules, NormalizeCharMap normMap ){\n    for( String rule : rules ){\n      Matcher m = p.matcher( rule );\n      if( !m.find() )\n        throw new RuntimeException( \"Invalid Mapping Rule : [\" + rule + \"], file = \" + mapping );\n      normMap.add( parseString( m.group( 1 ) ), parseString( m.group( 2 ) ) );\n    }\n  }\n\n","sourceOld":"  protected void parseRules( List<String> rules, NormalizeCharMap normMap ){\n    for( String rule : rules ){\n      Matcher m = p.matcher( rule );\n      if( !m.find() )\n        throw new RuntimeException( \"Invalid Mapping Rule : [\" + rule + \"], file = \" + mapping );\n      normMap.add( parseString( m.group( 1 ) ), parseString( m.group( 2 ) ) );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analysis/MappingCharFilterFactory#parseRules(List[String],NormalizeCharMap).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/MappingCharFilterFactory#parseRules(List[String],NormalizeCharMap).mjava","sourceNew":"  protected void parseRules( List<String> rules, NormalizeCharMap normMap ){\n    for( String rule : rules ){\n      Matcher m = p.matcher( rule );\n      if( !m.find() )\n        throw new RuntimeException( \"Invalid Mapping Rule : [\" + rule + \"], file = \" + mapping );\n      normMap.add( parseString( m.group( 1 ) ), parseString( m.group( 2 ) ) );\n    }\n  }\n\n","sourceOld":"  protected void parseRules( List<String> rules, NormalizeCharMap normMap ){\n    for( String rule : rules ){\n      Matcher m = p.matcher( rule );\n      if( !m.find() )\n        throw new RuntimeException( \"Invalid Mapping Rule : [\" + rule + \"], file = \" + mapping );\n      normMap.add( parseString( m.group( 1 ) ), parseString( m.group( 2 ) ) );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39d25aba1848c644c6d22b943d3d66f661445ac7","date":1335238294,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/MappingCharFilterFactory#parseRules(List[String],NormalizeCharMap).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/MappingCharFilterFactory#parseRules(List[String],NormalizeCharMap).mjava","sourceNew":"  protected void parseRules( List<String> rules, NormalizeCharMap normMap ){\n    for( String rule : rules ){\n      Matcher m = p.matcher( rule );\n      if( !m.find() )\n        throw new InitializationException(\"Invalid Mapping Rule : [\" + rule + \"], file = \" + mapping);\n      normMap.add( parseString( m.group( 1 ) ), parseString( m.group( 2 ) ) );\n    }\n  }\n\n","sourceOld":"  protected void parseRules( List<String> rules, NormalizeCharMap normMap ){\n    for( String rule : rules ){\n      Matcher m = p.matcher( rule );\n      if( !m.find() )\n        throw new RuntimeException( \"Invalid Mapping Rule : [\" + rule + \"], file = \" + mapping );\n      normMap.add( parseString( m.group( 1 ) ), parseString( m.group( 2 ) ) );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e5bbc7f726dbcc466cb9b3c029d539a06f6545","date":1336310014,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/MappingCharFilterFactory#parseRules(List[String],NormalizeCharMap.Builder).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/MappingCharFilterFactory#parseRules(List[String],NormalizeCharMap).mjava","sourceNew":"  protected void parseRules( List<String> rules, NormalizeCharMap.Builder builder ){\n    for( String rule : rules ){\n      Matcher m = p.matcher( rule );\n      if( !m.find() )\n        throw new InitializationException(\"Invalid Mapping Rule : [\" + rule + \"], file = \" + mapping);\n      builder.add( parseString( m.group( 1 ) ), parseString( m.group( 2 ) ) );\n    }\n  }\n\n","sourceOld":"  protected void parseRules( List<String> rules, NormalizeCharMap normMap ){\n    for( String rule : rules ){\n      Matcher m = p.matcher( rule );\n      if( !m.find() )\n        throw new InitializationException(\"Invalid Mapping Rule : [\" + rule + \"], file = \" + mapping);\n      normMap.add( parseString( m.group( 1 ) ), parseString( m.group( 2 ) ) );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"b4e5bbc7f726dbcc466cb9b3c029d539a06f6545":["39d25aba1848c644c6d22b943d3d66f661445ac7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"39d25aba1848c644c6d22b943d3d66f661445ac7":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4e5bbc7f726dbcc466cb9b3c029d539a06f6545"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["39d25aba1848c644c6d22b943d3d66f661445ac7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"b4e5bbc7f726dbcc466cb9b3c029d539a06f6545":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"39d25aba1848c644c6d22b943d3d66f661445ac7":["b4e5bbc7f726dbcc466cb9b3c029d539a06f6545"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}