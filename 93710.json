{"path":"lucene/src/java/org/apache/lucene/index/FlushPolicy#getMaxNetBytes().mjava","commits":[{"id":"d2ed1b9b7b46829fe3199afe9a8bc203f201b175","date":1301491807,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FlushPolicy#getMaxNetBytes().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the max net memory which marks the upper watermark for the\n   * DocumentsWriter to be healthy. If all flushing and active\n   * {@link DocumentsWriterPerThread} consume more memory than the upper\n   * watermark all incoming threads should be stalled and blocked until the\n   * memory drops below this.\n   * <p>\n   * Note: the upper watermark is only taken into account if this\n   * {@link FlushPolicy} flushes by ram usage.\n   * \n   * <p>\n   * The default for the max net memory is set to 2 x\n   * {@link IndexWriterConfig#getRAMBufferSizeMB()}\n   * \n   */\n  public long getMaxNetBytes() {\n    if (!flushOnRAM()) {\n      return -1;\n    }\n    final double ramBufferSizeMB = indexWriterConfig.getRAMBufferSizeMB();\n    return (long) (ramBufferSizeMB * 1024.d * 1024.d * 2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6f4cae61e16730201371ab7e9912721c19324e7","date":1303199575,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FlushPolicy#getMaxNetBytes().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FlushPolicy#getMaxNetBytes().mjava","sourceNew":"  // nocommit -- I thought we pause based on \"too many flush\n  // states pending\"?\n  /**\n   * Returns the max net memory which marks the upper watermark for the\n   * DocumentsWriter to be healthy. If all flushing and active\n   * {@link DocumentsWriterPerThread} consume more memory than the upper\n   * watermark all incoming threads should be stalled and blocked until the\n   * memory drops below this.\n   * <p>\n   * Note: the upper watermark is only taken into account if this\n   * {@link FlushPolicy} flushes by ram usage.\n   * \n   * <p>\n   * The default for the max net memory is set to 2 x\n   * {@link IndexWriterConfig#getRAMBufferSizeMB()}\n   * \n   */\n  public long getMaxNetBytes() {\n    if (!flushOnRAM()) {\n      // nocommit explain that returning -1 is allowed?\n      return -1;\n    }\n    final double ramBufferSizeMB = indexWriterConfig.getRAMBufferSizeMB();\n    return (long) (ramBufferSizeMB * 1024.d * 1024.d * 2);\n  }\n\n","sourceOld":"  /**\n   * Returns the max net memory which marks the upper watermark for the\n   * DocumentsWriter to be healthy. If all flushing and active\n   * {@link DocumentsWriterPerThread} consume more memory than the upper\n   * watermark all incoming threads should be stalled and blocked until the\n   * memory drops below this.\n   * <p>\n   * Note: the upper watermark is only taken into account if this\n   * {@link FlushPolicy} flushes by ram usage.\n   * \n   * <p>\n   * The default for the max net memory is set to 2 x\n   * {@link IndexWriterConfig#getRAMBufferSizeMB()}\n   * \n   */\n  public long getMaxNetBytes() {\n    if (!flushOnRAM()) {\n      return -1;\n    }\n    final double ramBufferSizeMB = indexWriterConfig.getRAMBufferSizeMB();\n    return (long) (ramBufferSizeMB * 1024.d * 1024.d * 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"761f91143f5b5b8e3016b2b178ee0f2f61a9b4e4","date":1303818069,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/FlushPolicy#getMaxNetBytes().mjava","sourceNew":null,"sourceOld":"  // nocommit -- I thought we pause based on \"too many flush\n  // states pending\"?\n  /**\n   * Returns the max net memory which marks the upper watermark for the\n   * DocumentsWriter to be healthy. If all flushing and active\n   * {@link DocumentsWriterPerThread} consume more memory than the upper\n   * watermark all incoming threads should be stalled and blocked until the\n   * memory drops below this.\n   * <p>\n   * Note: the upper watermark is only taken into account if this\n   * {@link FlushPolicy} flushes by ram usage.\n   * \n   * <p>\n   * The default for the max net memory is set to 2 x\n   * {@link IndexWriterConfig#getRAMBufferSizeMB()}\n   * \n   */\n  public long getMaxNetBytes() {\n    if (!flushOnRAM()) {\n      // nocommit explain that returning -1 is allowed?\n      return -1;\n    }\n    final double ramBufferSizeMB = indexWriterConfig.getRAMBufferSizeMB();\n    return (long) (ramBufferSizeMB * 1024.d * 1024.d * 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"761f91143f5b5b8e3016b2b178ee0f2f61a9b4e4":["f6f4cae61e16730201371ab7e9912721c19324e7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f6f4cae61e16730201371ab7e9912721c19324e7":["d2ed1b9b7b46829fe3199afe9a8bc203f201b175"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["f6f4cae61e16730201371ab7e9912721c19324e7"],"761f91143f5b5b8e3016b2b178ee0f2f61a9b4e4":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d2ed1b9b7b46829fe3199afe9a8bc203f201b175","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f6f4cae61e16730201371ab7e9912721c19324e7":["761f91143f5b5b8e3016b2b178ee0f2f61a9b4e4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["761f91143f5b5b8e3016b2b178ee0f2f61a9b4e4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}