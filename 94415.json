{"path":"src/demo/org/apache/lucene/demo/IndexHTML#indexDocs(File).mjava","commits":[{"id":"6585acee8c9458b9745b49462abd05c2aa4f23d5","date":1012057292,"type":1,"author":"Andrew C. Oliver","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/IndexHTML#indexDocs(File).mjava","pathOld":"src/demo/org/apache/lucene/IndexHTML#indexDocs(File).mjava","sourceNew":"  private static void indexDocs(File file) throws Exception {\n    if (file.isDirectory()) {\t\t\t  // if a directory\n      String[] files = file.list();\t\t  // list its files\n      Arrays.sort(files);\t\t\t  // sort the files\n      for (int i = 0; i < files.length; i++)\t  // recursively index them\n\tindexDocs(new File(file, files[i]));\n\n    } else if (file.getPath().endsWith(\".html\") || // index .html files\n\t       file.getPath().endsWith(\".htm\") || // index .htm files\n\t       file.getPath().endsWith(\".txt\")) { // index .txt files\n      \n      if (uidIter != null) {\n\tString uid = HTMLDocument.uid(file);\t  // construct uid for doc\n\n\twhile (uidIter.term() != null && uidIter.term().field() == \"uid\" &&\n\t       uidIter.term().text().compareTo(uid) < 0) {\n\t  if (deleting) {\t\t\t  // delete stale docs\n\t    System.out.println(\"deleting \" +\n\t\t\t       HTMLDocument.uid2url(uidIter.term().text()));\n\t    reader.delete(uidIter.term());\n\t  }\n\t  uidIter.next();\n\t}\n\tif (uidIter.term() != null && uidIter.term().field() == \"uid\" &&\n\t    uidIter.term().text().compareTo(uid) == 0) {\n\t  uidIter.next();\t\t\t  // keep matching docs\n\t} else if (!deleting) {\t\t\t  // add new docs\n\t  Document doc = HTMLDocument.Document(file);\n\t  System.out.println(\"adding \" + doc.get(\"url\"));\n\twriter.addDocument(doc);\n\t}\n      } else {\t\t\t\t\t  // creating a new index\n\tDocument doc = HTMLDocument.Document(file);\n\tSystem.out.println(\"adding \" + doc.get(\"url\"));\n\twriter.addDocument(doc);\t\t  // add docs unconditionally\n      }\n    }\n  }\n\n","sourceOld":"  private static void indexDocs(File file) throws Exception {\n    if (file.isDirectory()) {\t\t\t  // if a directory\n      String[] files = file.list();\t\t  // list its files\n      Arrays.sort(files);\t\t\t  // sort the files\n      for (int i = 0; i < files.length; i++)\t  // recursively index them\n\tindexDocs(new File(file, files[i]));\n\n    } else if (file.getPath().endsWith(\".html\") || // index .html files\n\t       file.getPath().endsWith(\".htm\") || // index .htm files\n\t       file.getPath().endsWith(\".txt\")) { // index .txt files\n      \n      if (uidIter != null) {\n\tString uid = HTMLDocument.uid(file);\t  // construct uid for doc\n\n\twhile (uidIter.term() != null && uidIter.term().field() == \"uid\" &&\n\t       uidIter.term().text().compareTo(uid) < 0) {\n\t  if (deleting) {\t\t\t  // delete stale docs\n\t    System.out.println(\"deleting \" +\n\t\t\t       HTMLDocument.uid2url(uidIter.term().text()));\n\t    reader.delete(uidIter.term());\n\t  }\n\t  uidIter.next();\n\t}\n\tif (uidIter.term() != null && uidIter.term().field() == \"uid\" &&\n\t    uidIter.term().text().compareTo(uid) == 0) {\n\t  uidIter.next();\t\t\t  // keep matching docs\n\t} else if (!deleting) {\t\t\t  // add new docs\n\t  Document doc = HTMLDocument.Document(file);\n\t  System.out.println(\"adding \" + doc.get(\"url\"));\n\twriter.addDocument(doc);\n\t}\n      } else {\t\t\t\t\t  // creating a new index\n\tDocument doc = HTMLDocument.Document(file);\n\tSystem.out.println(\"adding \" + doc.get(\"url\"));\n\twriter.addDocument(doc);\t\t  // add docs unconditionally\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51507f02c43eb5af1a493ce4c8e071bb20350b9a","date":1072630976,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/IndexHTML#indexDocs(File).mjava","pathOld":"src/demo/org/apache/lucene/demo/IndexHTML#indexDocs(File).mjava","sourceNew":"  private static void indexDocs(File file) throws Exception {\n    if (file.isDirectory()) {\t\t\t  // if a directory\n      String[] files = file.list();\t\t  // list its files\n      Arrays.sort(files);\t\t\t  // sort the files\n      for (int i = 0; i < files.length; i++)\t  // recursively index them\n\tindexDocs(new File(file, files[i]));\n\n    } else if (file.getPath().endsWith(\".html\") || // index .html files\n\t       file.getPath().endsWith(\".htm\") || // index .htm files\n\t       file.getPath().endsWith(\".txt\")) { // index .txt files\n\n      if (uidIter != null) {\n\tString uid = HTMLDocument.uid(file);\t  // construct uid for doc\n\n\twhile (uidIter.term() != null && uidIter.term().field() == \"uid\" &&\n\t       uidIter.term().text().compareTo(uid) < 0) {\n\t  if (deleting) {\t\t\t  // delete stale docs\n\t    System.out.println(\"deleting \" +\n\t\t\t       HTMLDocument.uid2url(uidIter.term().text()));\n\t    reader.delete(uidIter.term());\n\t  }\n\t  uidIter.next();\n\t}\n\tif (uidIter.term() != null && uidIter.term().field() == \"uid\" &&\n\t    uidIter.term().text().compareTo(uid) == 0) {\n\t  uidIter.next();\t\t\t  // keep matching docs\n\t} else if (!deleting) {\t\t\t  // add new docs\n\t  Document doc = HTMLDocument.Document(file);\n\t  System.out.println(\"adding \" + doc.get(\"url\"));\n\twriter.addDocument(doc);\n\t}\n      } else {\t\t\t\t\t  // creating a new index\n\tDocument doc = HTMLDocument.Document(file);\n\tSystem.out.println(\"adding \" + doc.get(\"url\"));\n\twriter.addDocument(doc);\t\t  // add docs unconditionally\n      }\n    }\n  }\n\n","sourceOld":"  private static void indexDocs(File file) throws Exception {\n    if (file.isDirectory()) {\t\t\t  // if a directory\n      String[] files = file.list();\t\t  // list its files\n      Arrays.sort(files);\t\t\t  // sort the files\n      for (int i = 0; i < files.length; i++)\t  // recursively index them\n\tindexDocs(new File(file, files[i]));\n\n    } else if (file.getPath().endsWith(\".html\") || // index .html files\n\t       file.getPath().endsWith(\".htm\") || // index .htm files\n\t       file.getPath().endsWith(\".txt\")) { // index .txt files\n      \n      if (uidIter != null) {\n\tString uid = HTMLDocument.uid(file);\t  // construct uid for doc\n\n\twhile (uidIter.term() != null && uidIter.term().field() == \"uid\" &&\n\t       uidIter.term().text().compareTo(uid) < 0) {\n\t  if (deleting) {\t\t\t  // delete stale docs\n\t    System.out.println(\"deleting \" +\n\t\t\t       HTMLDocument.uid2url(uidIter.term().text()));\n\t    reader.delete(uidIter.term());\n\t  }\n\t  uidIter.next();\n\t}\n\tif (uidIter.term() != null && uidIter.term().field() == \"uid\" &&\n\t    uidIter.term().text().compareTo(uid) == 0) {\n\t  uidIter.next();\t\t\t  // keep matching docs\n\t} else if (!deleting) {\t\t\t  // add new docs\n\t  Document doc = HTMLDocument.Document(file);\n\t  System.out.println(\"adding \" + doc.get(\"url\"));\n\twriter.addDocument(doc);\n\t}\n      } else {\t\t\t\t\t  // creating a new index\n\tDocument doc = HTMLDocument.Document(file);\n\tSystem.out.println(\"adding \" + doc.get(\"url\"));\n\twriter.addDocument(doc);\t\t  // add docs unconditionally\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bbdcd094e2f9e4815621e4b813461caabc9546a","date":1091569764,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/IndexHTML#indexDocs(File).mjava","pathOld":"src/demo/org/apache/lucene/demo/IndexHTML#indexDocs(File).mjava","sourceNew":"  private static void indexDocs(File file) throws Exception {\n    if (file.isDirectory()) {\t\t\t  // if a directory\n      String[] files = file.list();\t\t  // list its files\n      Arrays.sort(files);\t\t\t  // sort the files\n      for (int i = 0; i < files.length; i++)\t  // recursively index them\n\tindexDocs(new File(file, files[i]));\n\n    } else if (file.getPath().endsWith(\".html\") || // index .html files\n\t       file.getPath().endsWith(\".htm\") || // index .htm files\n\t       file.getPath().endsWith(\".txt\")) { // index .txt files\n\n      if (uidIter != null) {\n\tString uid = HTMLDocument.uid(file);\t  // construct uid for doc\n\n\twhile (uidIter.term() != null && uidIter.term().field() == \"uid\" &&\n\t       uidIter.term().text().compareTo(uid) < 0) {\n\t  if (deleting) {\t\t\t  // delete stale docs\n\t    System.out.println(\"deleting \" +\n\t\t\t       HTMLDocument.uid2url(uidIter.term().text()));\n\t    reader.delete(uidIter.term());\n\t  }\n\t  uidIter.next();\n\t}\n\tif (uidIter.term() != null && uidIter.term().field() == \"uid\" &&\n\t    uidIter.term().text().compareTo(uid) == 0) {\n\t  uidIter.next();\t\t\t  // keep matching docs\n\t} else if (!deleting) {\t\t\t  // add new docs\n\t  Document doc = HTMLDocument.Document(file);\n\t  System.out.println(\"adding \" + doc.get(\"path\"));\n\twriter.addDocument(doc);\n\t}\n      } else {\t\t\t\t\t  // creating a new index\n\tDocument doc = HTMLDocument.Document(file);\n\tSystem.out.println(\"adding \" + doc.get(\"path\"));\n\twriter.addDocument(doc);\t\t  // add docs unconditionally\n      }\n    }\n  }\n\n","sourceOld":"  private static void indexDocs(File file) throws Exception {\n    if (file.isDirectory()) {\t\t\t  // if a directory\n      String[] files = file.list();\t\t  // list its files\n      Arrays.sort(files);\t\t\t  // sort the files\n      for (int i = 0; i < files.length; i++)\t  // recursively index them\n\tindexDocs(new File(file, files[i]));\n\n    } else if (file.getPath().endsWith(\".html\") || // index .html files\n\t       file.getPath().endsWith(\".htm\") || // index .htm files\n\t       file.getPath().endsWith(\".txt\")) { // index .txt files\n\n      if (uidIter != null) {\n\tString uid = HTMLDocument.uid(file);\t  // construct uid for doc\n\n\twhile (uidIter.term() != null && uidIter.term().field() == \"uid\" &&\n\t       uidIter.term().text().compareTo(uid) < 0) {\n\t  if (deleting) {\t\t\t  // delete stale docs\n\t    System.out.println(\"deleting \" +\n\t\t\t       HTMLDocument.uid2url(uidIter.term().text()));\n\t    reader.delete(uidIter.term());\n\t  }\n\t  uidIter.next();\n\t}\n\tif (uidIter.term() != null && uidIter.term().field() == \"uid\" &&\n\t    uidIter.term().text().compareTo(uid) == 0) {\n\t  uidIter.next();\t\t\t  // keep matching docs\n\t} else if (!deleting) {\t\t\t  // add new docs\n\t  Document doc = HTMLDocument.Document(file);\n\t  System.out.println(\"adding \" + doc.get(\"url\"));\n\twriter.addDocument(doc);\n\t}\n      } else {\t\t\t\t\t  // creating a new index\n\tDocument doc = HTMLDocument.Document(file);\n\tSystem.out.println(\"adding \" + doc.get(\"url\"));\n\twriter.addDocument(doc);\t\t  // add docs unconditionally\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e708045cfc1d52936bd128b0062cadc083066235","date":1114985064,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/IndexHTML#indexDocs(File).mjava","pathOld":"src/demo/org/apache/lucene/demo/IndexHTML#indexDocs(File).mjava","sourceNew":"  private static void indexDocs(File file) throws Exception {\n    if (file.isDirectory()) {\t\t\t  // if a directory\n      String[] files = file.list();\t\t  // list its files\n      Arrays.sort(files);\t\t\t  // sort the files\n      for (int i = 0; i < files.length; i++)\t  // recursively index them\n        indexDocs(new File(file, files[i]));\n\n    } else if (file.getPath().endsWith(\".html\") || // index .html files\n      file.getPath().endsWith(\".htm\") || // index .htm files\n      file.getPath().endsWith(\".txt\")) { // index .txt files\n\n      if (uidIter != null) {\n        String uid = HTMLDocument.uid(file);\t  // construct uid for doc\n\n        while (uidIter.term() != null && uidIter.term().field() == \"uid\" &&\n            uidIter.term().text().compareTo(uid) < 0) {\n          if (deleting) {\t\t\t  // delete stale docs\n            System.out.println(\"deleting \" +\n                HTMLDocument.uid2url(uidIter.term().text()));\n            reader.delete(uidIter.term());\n          }\n          uidIter.next();\n        }\n        if (uidIter.term() != null && uidIter.term().field() == \"uid\" &&\n            uidIter.term().text().compareTo(uid) == 0) {\n          uidIter.next();\t\t\t  // keep matching docs\n        } else if (!deleting) {\t\t\t  // add new docs\n          Document doc = HTMLDocument.Document(file);\n          System.out.println(\"adding \" + doc.get(\"path\"));\n          writer.addDocument(doc);\n        }\n      } else {\t\t\t\t\t  // creating a new index\n        Document doc = HTMLDocument.Document(file);\n        System.out.println(\"adding \" + doc.get(\"path\"));\n        writer.addDocument(doc);\t\t  // add docs unconditionally\n      }\n    }\n  }\n\n","sourceOld":"  private static void indexDocs(File file) throws Exception {\n    if (file.isDirectory()) {\t\t\t  // if a directory\n      String[] files = file.list();\t\t  // list its files\n      Arrays.sort(files);\t\t\t  // sort the files\n      for (int i = 0; i < files.length; i++)\t  // recursively index them\n\tindexDocs(new File(file, files[i]));\n\n    } else if (file.getPath().endsWith(\".html\") || // index .html files\n\t       file.getPath().endsWith(\".htm\") || // index .htm files\n\t       file.getPath().endsWith(\".txt\")) { // index .txt files\n\n      if (uidIter != null) {\n\tString uid = HTMLDocument.uid(file);\t  // construct uid for doc\n\n\twhile (uidIter.term() != null && uidIter.term().field() == \"uid\" &&\n\t       uidIter.term().text().compareTo(uid) < 0) {\n\t  if (deleting) {\t\t\t  // delete stale docs\n\t    System.out.println(\"deleting \" +\n\t\t\t       HTMLDocument.uid2url(uidIter.term().text()));\n\t    reader.delete(uidIter.term());\n\t  }\n\t  uidIter.next();\n\t}\n\tif (uidIter.term() != null && uidIter.term().field() == \"uid\" &&\n\t    uidIter.term().text().compareTo(uid) == 0) {\n\t  uidIter.next();\t\t\t  // keep matching docs\n\t} else if (!deleting) {\t\t\t  // add new docs\n\t  Document doc = HTMLDocument.Document(file);\n\t  System.out.println(\"adding \" + doc.get(\"path\"));\n\twriter.addDocument(doc);\n\t}\n      } else {\t\t\t\t\t  // creating a new index\n\tDocument doc = HTMLDocument.Document(file);\n\tSystem.out.println(\"adding \" + doc.get(\"path\"));\n\twriter.addDocument(doc);\t\t  // add docs unconditionally\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/IndexHTML#indexDocs(File).mjava","pathOld":"src/demo/org/apache/lucene/demo/IndexHTML#indexDocs(File).mjava","sourceNew":"  private static void indexDocs(File file) throws Exception {\n    if (file.isDirectory()) {\t\t\t  // if a directory\n      String[] files = file.list();\t\t  // list its files\n      Arrays.sort(files);\t\t\t  // sort the files\n      for (int i = 0; i < files.length; i++)\t  // recursively index them\n        indexDocs(new File(file, files[i]));\n\n    } else if (file.getPath().endsWith(\".html\") || // index .html files\n      file.getPath().endsWith(\".htm\") || // index .htm files\n      file.getPath().endsWith(\".txt\")) { // index .txt files\n\n      if (uidIter != null) {\n        String uid = HTMLDocument.uid(file);\t  // construct uid for doc\n\n        while (uidIter.term() != null && uidIter.term().field() == \"uid\" &&\n            uidIter.term().text().compareTo(uid) < 0) {\n          if (deleting) {\t\t\t  // delete stale docs\n            System.out.println(\"deleting \" +\n                HTMLDocument.uid2url(uidIter.term().text()));\n            reader.deleteDocuments(uidIter.term());\n          }\n          uidIter.next();\n        }\n        if (uidIter.term() != null && uidIter.term().field() == \"uid\" &&\n            uidIter.term().text().compareTo(uid) == 0) {\n          uidIter.next();\t\t\t  // keep matching docs\n        } else if (!deleting) {\t\t\t  // add new docs\n          Document doc = HTMLDocument.Document(file);\n          System.out.println(\"adding \" + doc.get(\"path\"));\n          writer.addDocument(doc);\n        }\n      } else {\t\t\t\t\t  // creating a new index\n        Document doc = HTMLDocument.Document(file);\n        System.out.println(\"adding \" + doc.get(\"path\"));\n        writer.addDocument(doc);\t\t  // add docs unconditionally\n      }\n    }\n  }\n\n","sourceOld":"  private static void indexDocs(File file) throws Exception {\n    if (file.isDirectory()) {\t\t\t  // if a directory\n      String[] files = file.list();\t\t  // list its files\n      Arrays.sort(files);\t\t\t  // sort the files\n      for (int i = 0; i < files.length; i++)\t  // recursively index them\n        indexDocs(new File(file, files[i]));\n\n    } else if (file.getPath().endsWith(\".html\") || // index .html files\n      file.getPath().endsWith(\".htm\") || // index .htm files\n      file.getPath().endsWith(\".txt\")) { // index .txt files\n\n      if (uidIter != null) {\n        String uid = HTMLDocument.uid(file);\t  // construct uid for doc\n\n        while (uidIter.term() != null && uidIter.term().field() == \"uid\" &&\n            uidIter.term().text().compareTo(uid) < 0) {\n          if (deleting) {\t\t\t  // delete stale docs\n            System.out.println(\"deleting \" +\n                HTMLDocument.uid2url(uidIter.term().text()));\n            reader.delete(uidIter.term());\n          }\n          uidIter.next();\n        }\n        if (uidIter.term() != null && uidIter.term().field() == \"uid\" &&\n            uidIter.term().text().compareTo(uid) == 0) {\n          uidIter.next();\t\t\t  // keep matching docs\n        } else if (!deleting) {\t\t\t  // add new docs\n          Document doc = HTMLDocument.Document(file);\n          System.out.println(\"adding \" + doc.get(\"path\"));\n          writer.addDocument(doc);\n        }\n      } else {\t\t\t\t\t  // creating a new index\n        Document doc = HTMLDocument.Document(file);\n        System.out.println(\"adding \" + doc.get(\"path\"));\n        writer.addDocument(doc);\t\t  // add docs unconditionally\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/demo/org/apache/lucene/demo/IndexHTML#indexDocs(File).mjava","pathOld":"src/demo/org/apache/lucene/demo/IndexHTML#indexDocs(File).mjava","sourceNew":"  private static void indexDocs(File file) throws Exception {\n    if (file.isDirectory()) {\t\t\t  // if a directory\n      String[] files = file.list();\t\t  // list its files\n      Arrays.sort(files);\t\t\t  // sort the files\n      for (int i = 0; i < files.length; i++)\t  // recursively index them\n        indexDocs(new File(file, files[i]));\n\n    } else if (file.getPath().endsWith(\".html\") || // index .html files\n      file.getPath().endsWith(\".htm\") || // index .htm files\n      file.getPath().endsWith(\".txt\")) { // index .txt files\n\n      if (uidIter != null) {\n        String uid = HTMLDocument.uid(file);\t  // construct uid for doc\n\n        while (uidIter.term() != null && uidIter.term().field() == \"uid\" &&\n            uidIter.term().text().compareTo(uid) < 0) {\n          if (deleting) {\t\t\t  // delete stale docs\n            System.out.println(\"deleting \" +\n                HTMLDocument.uid2url(uidIter.term().text()));\n            reader.deleteDocuments(uidIter.term());\n          }\n          uidIter.next();\n        }\n        if (uidIter.term() != null && uidIter.term().field() == \"uid\" &&\n            uidIter.term().text().compareTo(uid) == 0) {\n          uidIter.next();\t\t\t  // keep matching docs\n        } else if (!deleting) {\t\t\t  // add new docs\n          Document doc = HTMLDocument.Document(file);\n          System.out.println(\"adding \" + doc.get(\"path\"));\n          writer.addDocument(doc);\n        }\n      } else {\t\t\t\t\t  // creating a new index\n        Document doc = HTMLDocument.Document(file);\n        System.out.println(\"adding \" + doc.get(\"path\"));\n        writer.addDocument(doc);\t\t  // add docs unconditionally\n      }\n    }\n  }\n\n","sourceOld":"  private static void indexDocs(File file) throws Exception {\n    if (file.isDirectory()) {\t\t\t  // if a directory\n      String[] files = file.list();\t\t  // list its files\n      Arrays.sort(files);\t\t\t  // sort the files\n      for (int i = 0; i < files.length; i++)\t  // recursively index them\n        indexDocs(new File(file, files[i]));\n\n    } else if (file.getPath().endsWith(\".html\") || // index .html files\n      file.getPath().endsWith(\".htm\") || // index .htm files\n      file.getPath().endsWith(\".txt\")) { // index .txt files\n\n      if (uidIter != null) {\n        String uid = HTMLDocument.uid(file);\t  // construct uid for doc\n\n        while (uidIter.term() != null && uidIter.term().field() == \"uid\" &&\n            uidIter.term().text().compareTo(uid) < 0) {\n          if (deleting) {\t\t\t  // delete stale docs\n            System.out.println(\"deleting \" +\n                HTMLDocument.uid2url(uidIter.term().text()));\n            reader.deleteDocuments(uidIter.term());\n          }\n          uidIter.next();\n        }\n        if (uidIter.term() != null && uidIter.term().field() == \"uid\" &&\n            uidIter.term().text().compareTo(uid) == 0) {\n          uidIter.next();\t\t\t  // keep matching docs\n        } else if (!deleting) {\t\t\t  // add new docs\n          Document doc = HTMLDocument.Document(file);\n          System.out.println(\"adding \" + doc.get(\"path\"));\n          writer.addDocument(doc);\n        }\n      } else {\t\t\t\t\t  // creating a new index\n        Document doc = HTMLDocument.Document(file);\n        System.out.println(\"adding \" + doc.get(\"path\"));\n        writer.addDocument(doc);\t\t  // add docs unconditionally\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"51507f02c43eb5af1a493ce4c8e071bb20350b9a":["6585acee8c9458b9745b49462abd05c2aa4f23d5"],"1bbdcd094e2f9e4815621e4b813461caabc9546a":["51507f02c43eb5af1a493ce4c8e071bb20350b9a"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["e708045cfc1d52936bd128b0062cadc083066235"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e708045cfc1d52936bd128b0062cadc083066235":["1bbdcd094e2f9e4815621e4b813461caabc9546a"],"6585acee8c9458b9745b49462abd05c2aa4f23d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"]},"commit2Childs":{"51507f02c43eb5af1a493ce4c8e071bb20350b9a":["1bbdcd094e2f9e4815621e4b813461caabc9546a"],"1bbdcd094e2f9e4815621e4b813461caabc9546a":["e708045cfc1d52936bd128b0062cadc083066235"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6585acee8c9458b9745b49462abd05c2aa4f23d5"],"e708045cfc1d52936bd128b0062cadc083066235":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"6585acee8c9458b9745b49462abd05c2aa4f23d5":["51507f02c43eb5af1a493ce4c8e071bb20350b9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}