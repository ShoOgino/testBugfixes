{"path":"src/test/org/apache/lucene/search/TestRemoteCachingWrapperFilter#testTermRemoteFilter().mjava","commits":[{"id":"203bc84a5a9461a17a2a8e136f872bf4657aaee4","date":1176138824,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestRemoteCachingWrapperFilter#testTermRemoteFilter().mjava","pathOld":"/dev/null","sourceNew":"  public void testTermRemoteFilter() throws Exception {\n    CachingWrapperFilterHelper cwfh = new CachingWrapperFilterHelper(new QueryFilter(new TermQuery(new Term(\"type\", \"a\"))));\n    \n    // This is what we are fixing - if one uses a CachingWrapperFilter(Helper) it will never \n    // cache the filter on the remote site\n    cwfh.setShouldHaveCache(false);\n    search(new TermQuery(new Term(\"test\", \"test\")), cwfh, 0, \"A\");\n    cwfh.setShouldHaveCache(false);\n    search(new TermQuery(new Term(\"test\", \"test\")), cwfh, 0, \"A\");\n    \n    // This is how we fix caching - we wrap a Filter in the RemoteCachingWrapperFilter(Handler - for testing)\n    // to cache the Filter on the searcher (remote) side\n    RemoteCachingWrapperFilterHelper rcwfh = new RemoteCachingWrapperFilterHelper(cwfh, false);\n    search(new TermQuery(new Term(\"test\", \"test\")), rcwfh, 0, \"A\");\n\n    // 2nd time we do the search, we should be using the cached Filter\n    rcwfh.shouldHaveCache(true);\n    search(new TermQuery(new Term(\"test\", \"test\")), rcwfh, 0, \"A\");\n\n    // assert that we get the same cached Filter, even if we create a new instance of RemoteCachingWrapperFilter(Helper)\n    // this should pass because the Filter parameters are the same, and the cache uses Filter's hashCode() as cache keys,\n    // and Filters' hashCode() builds on Filter parameters, not the Filter instance itself\n    rcwfh = new RemoteCachingWrapperFilterHelper(new QueryFilter(new TermQuery(new Term(\"type\", \"a\"))), false);\n    rcwfh.shouldHaveCache(false);\n    search(new TermQuery(new Term(\"test\", \"test\")), rcwfh, 0, \"A\");\n\n    rcwfh = new RemoteCachingWrapperFilterHelper(new QueryFilter(new TermQuery(new Term(\"type\", \"a\"))), false);\n    rcwfh.shouldHaveCache(true);\n    search(new TermQuery(new Term(\"test\", \"test\")), rcwfh, 0, \"A\");\n\n    // assert that we get a non-cached version of the Filter because this is a new Query (type:b)\n    rcwfh = new RemoteCachingWrapperFilterHelper(new QueryFilter(new TermQuery(new Term(\"type\", \"b\"))), false);\n    rcwfh.shouldHaveCache(false);\n    search(new TermQuery(new Term(\"type\", \"b\")), rcwfh, 0, \"B\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52ce7e961a8217faac8128e3c8fe67819eefdde9","date":1201979043,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestRemoteCachingWrapperFilter#testTermRemoteFilter().mjava","pathOld":"src/test/org/apache/lucene/search/TestRemoteCachingWrapperFilter#testTermRemoteFilter().mjava","sourceNew":"  public void testTermRemoteFilter() throws Exception {\n    CachingWrapperFilterHelper cwfh = new CachingWrapperFilterHelper(new QueryWrapperFilter(new TermQuery(new Term(\"type\", \"a\"))));\n    \n    // This is what we are fixing - if one uses a CachingWrapperFilter(Helper) it will never \n    // cache the filter on the remote site\n    cwfh.setShouldHaveCache(false);\n    search(new TermQuery(new Term(\"test\", \"test\")), cwfh, 0, \"A\");\n    cwfh.setShouldHaveCache(false);\n    search(new TermQuery(new Term(\"test\", \"test\")), cwfh, 0, \"A\");\n    \n    // This is how we fix caching - we wrap a Filter in the RemoteCachingWrapperFilter(Handler - for testing)\n    // to cache the Filter on the searcher (remote) side\n    RemoteCachingWrapperFilterHelper rcwfh = new RemoteCachingWrapperFilterHelper(cwfh, false);\n    search(new TermQuery(new Term(\"test\", \"test\")), rcwfh, 0, \"A\");\n\n    // 2nd time we do the search, we should be using the cached Filter\n    rcwfh.shouldHaveCache(true);\n    search(new TermQuery(new Term(\"test\", \"test\")), rcwfh, 0, \"A\");\n\n    // assert that we get the same cached Filter, even if we create a new instance of RemoteCachingWrapperFilter(Helper)\n    // this should pass because the Filter parameters are the same, and the cache uses Filter's hashCode() as cache keys,\n    // and Filters' hashCode() builds on Filter parameters, not the Filter instance itself\n    rcwfh = new RemoteCachingWrapperFilterHelper(new QueryWrapperFilter(new TermQuery(new Term(\"type\", \"a\"))), false);\n    rcwfh.shouldHaveCache(false);\n    search(new TermQuery(new Term(\"test\", \"test\")), rcwfh, 0, \"A\");\n\n    rcwfh = new RemoteCachingWrapperFilterHelper(new QueryWrapperFilter(new TermQuery(new Term(\"type\", \"a\"))), false);\n    rcwfh.shouldHaveCache(true);\n    search(new TermQuery(new Term(\"test\", \"test\")), rcwfh, 0, \"A\");\n\n    // assert that we get a non-cached version of the Filter because this is a new Query (type:b)\n    rcwfh = new RemoteCachingWrapperFilterHelper(new QueryWrapperFilter(new TermQuery(new Term(\"type\", \"b\"))), false);\n    rcwfh.shouldHaveCache(false);\n    search(new TermQuery(new Term(\"type\", \"b\")), rcwfh, 0, \"B\");\n  }\n\n","sourceOld":"  public void testTermRemoteFilter() throws Exception {\n    CachingWrapperFilterHelper cwfh = new CachingWrapperFilterHelper(new QueryFilter(new TermQuery(new Term(\"type\", \"a\"))));\n    \n    // This is what we are fixing - if one uses a CachingWrapperFilter(Helper) it will never \n    // cache the filter on the remote site\n    cwfh.setShouldHaveCache(false);\n    search(new TermQuery(new Term(\"test\", \"test\")), cwfh, 0, \"A\");\n    cwfh.setShouldHaveCache(false);\n    search(new TermQuery(new Term(\"test\", \"test\")), cwfh, 0, \"A\");\n    \n    // This is how we fix caching - we wrap a Filter in the RemoteCachingWrapperFilter(Handler - for testing)\n    // to cache the Filter on the searcher (remote) side\n    RemoteCachingWrapperFilterHelper rcwfh = new RemoteCachingWrapperFilterHelper(cwfh, false);\n    search(new TermQuery(new Term(\"test\", \"test\")), rcwfh, 0, \"A\");\n\n    // 2nd time we do the search, we should be using the cached Filter\n    rcwfh.shouldHaveCache(true);\n    search(new TermQuery(new Term(\"test\", \"test\")), rcwfh, 0, \"A\");\n\n    // assert that we get the same cached Filter, even if we create a new instance of RemoteCachingWrapperFilter(Helper)\n    // this should pass because the Filter parameters are the same, and the cache uses Filter's hashCode() as cache keys,\n    // and Filters' hashCode() builds on Filter parameters, not the Filter instance itself\n    rcwfh = new RemoteCachingWrapperFilterHelper(new QueryFilter(new TermQuery(new Term(\"type\", \"a\"))), false);\n    rcwfh.shouldHaveCache(false);\n    search(new TermQuery(new Term(\"test\", \"test\")), rcwfh, 0, \"A\");\n\n    rcwfh = new RemoteCachingWrapperFilterHelper(new QueryFilter(new TermQuery(new Term(\"type\", \"a\"))), false);\n    rcwfh.shouldHaveCache(true);\n    search(new TermQuery(new Term(\"test\", \"test\")), rcwfh, 0, \"A\");\n\n    // assert that we get a non-cached version of the Filter because this is a new Query (type:b)\n    rcwfh = new RemoteCachingWrapperFilterHelper(new QueryFilter(new TermQuery(new Term(\"type\", \"b\"))), false);\n    rcwfh.shouldHaveCache(false);\n    search(new TermQuery(new Term(\"type\", \"b\")), rcwfh, 0, \"B\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1474a58d42cdf3b9e16ffe07bce31e4abffe5e02","date":1244977984,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/remote/src/test/org/apache/lucene/search/TestRemoteCachingWrapperFilter#testTermRemoteFilter().mjava","pathOld":"src/test/org/apache/lucene/search/TestRemoteCachingWrapperFilter#testTermRemoteFilter().mjava","sourceNew":"  public void testTermRemoteFilter() throws Exception {\n    CachingWrapperFilterHelper cwfh = new CachingWrapperFilterHelper(new QueryWrapperFilter(new TermQuery(new Term(\"type\", \"a\"))));\n    \n    // This is what we are fixing - if one uses a CachingWrapperFilter(Helper) it will never \n    // cache the filter on the remote site\n    cwfh.setShouldHaveCache(false);\n    search(new TermQuery(new Term(\"test\", \"test\")), cwfh, 0, \"A\");\n    cwfh.setShouldHaveCache(false);\n    search(new TermQuery(new Term(\"test\", \"test\")), cwfh, 0, \"A\");\n    \n    // This is how we fix caching - we wrap a Filter in the RemoteCachingWrapperFilter(Handler - for testing)\n    // to cache the Filter on the searcher (remote) side\n    RemoteCachingWrapperFilterHelper rcwfh = new RemoteCachingWrapperFilterHelper(cwfh, false);\n    search(new TermQuery(new Term(\"test\", \"test\")), rcwfh, 0, \"A\");\n\n    // 2nd time we do the search, we should be using the cached Filter\n    rcwfh.shouldHaveCache(true);\n    search(new TermQuery(new Term(\"test\", \"test\")), rcwfh, 0, \"A\");\n\n    // assert that we get the same cached Filter, even if we create a new instance of RemoteCachingWrapperFilter(Helper)\n    // this should pass because the Filter parameters are the same, and the cache uses Filter's hashCode() as cache keys,\n    // and Filters' hashCode() builds on Filter parameters, not the Filter instance itself\n    rcwfh = new RemoteCachingWrapperFilterHelper(new QueryWrapperFilter(new TermQuery(new Term(\"type\", \"a\"))), false);\n    rcwfh.shouldHaveCache(false);\n    search(new TermQuery(new Term(\"test\", \"test\")), rcwfh, 0, \"A\");\n\n    rcwfh = new RemoteCachingWrapperFilterHelper(new QueryWrapperFilter(new TermQuery(new Term(\"type\", \"a\"))), false);\n    rcwfh.shouldHaveCache(true);\n    search(new TermQuery(new Term(\"test\", \"test\")), rcwfh, 0, \"A\");\n\n    // assert that we get a non-cached version of the Filter because this is a new Query (type:b)\n    rcwfh = new RemoteCachingWrapperFilterHelper(new QueryWrapperFilter(new TermQuery(new Term(\"type\", \"b\"))), false);\n    rcwfh.shouldHaveCache(false);\n    search(new TermQuery(new Term(\"type\", \"b\")), rcwfh, 0, \"B\");\n  }\n\n","sourceOld":"  public void testTermRemoteFilter() throws Exception {\n    CachingWrapperFilterHelper cwfh = new CachingWrapperFilterHelper(new QueryWrapperFilter(new TermQuery(new Term(\"type\", \"a\"))));\n    \n    // This is what we are fixing - if one uses a CachingWrapperFilter(Helper) it will never \n    // cache the filter on the remote site\n    cwfh.setShouldHaveCache(false);\n    search(new TermQuery(new Term(\"test\", \"test\")), cwfh, 0, \"A\");\n    cwfh.setShouldHaveCache(false);\n    search(new TermQuery(new Term(\"test\", \"test\")), cwfh, 0, \"A\");\n    \n    // This is how we fix caching - we wrap a Filter in the RemoteCachingWrapperFilter(Handler - for testing)\n    // to cache the Filter on the searcher (remote) side\n    RemoteCachingWrapperFilterHelper rcwfh = new RemoteCachingWrapperFilterHelper(cwfh, false);\n    search(new TermQuery(new Term(\"test\", \"test\")), rcwfh, 0, \"A\");\n\n    // 2nd time we do the search, we should be using the cached Filter\n    rcwfh.shouldHaveCache(true);\n    search(new TermQuery(new Term(\"test\", \"test\")), rcwfh, 0, \"A\");\n\n    // assert that we get the same cached Filter, even if we create a new instance of RemoteCachingWrapperFilter(Helper)\n    // this should pass because the Filter parameters are the same, and the cache uses Filter's hashCode() as cache keys,\n    // and Filters' hashCode() builds on Filter parameters, not the Filter instance itself\n    rcwfh = new RemoteCachingWrapperFilterHelper(new QueryWrapperFilter(new TermQuery(new Term(\"type\", \"a\"))), false);\n    rcwfh.shouldHaveCache(false);\n    search(new TermQuery(new Term(\"test\", \"test\")), rcwfh, 0, \"A\");\n\n    rcwfh = new RemoteCachingWrapperFilterHelper(new QueryWrapperFilter(new TermQuery(new Term(\"type\", \"a\"))), false);\n    rcwfh.shouldHaveCache(true);\n    search(new TermQuery(new Term(\"test\", \"test\")), rcwfh, 0, \"A\");\n\n    // assert that we get a non-cached version of the Filter because this is a new Query (type:b)\n    rcwfh = new RemoteCachingWrapperFilterHelper(new QueryWrapperFilter(new TermQuery(new Term(\"type\", \"b\"))), false);\n    rcwfh.shouldHaveCache(false);\n    search(new TermQuery(new Term(\"type\", \"b\")), rcwfh, 0, \"B\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1474a58d42cdf3b9e16ffe07bce31e4abffe5e02":["52ce7e961a8217faac8128e3c8fe67819eefdde9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"52ce7e961a8217faac8128e3c8fe67819eefdde9":["203bc84a5a9461a17a2a8e136f872bf4657aaee4"],"203bc84a5a9461a17a2a8e136f872bf4657aaee4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1474a58d42cdf3b9e16ffe07bce31e4abffe5e02"]},"commit2Childs":{"1474a58d42cdf3b9e16ffe07bce31e4abffe5e02":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["203bc84a5a9461a17a2a8e136f872bf4657aaee4"],"52ce7e961a8217faac8128e3c8fe67819eefdde9":["1474a58d42cdf3b9e16ffe07bce31e4abffe5e02"],"203bc84a5a9461a17a2a8e136f872bf4657aaee4":["52ce7e961a8217faac8128e3c8fe67819eefdde9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}