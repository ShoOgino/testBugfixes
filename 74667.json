{"path":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#MemoryIndex(boolean,long).mjava","commits":[{"id":"30fd30bfbfa6b9e036bcd99c8339712e965d4a63","date":1351859294,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#MemoryIndex(boolean,long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert: This constructor accepts a byte and int block allocator that is used internally to allocate \n   * int & byte blocks for term and posting storage.  \n   * @param storeOffsets <code>true</code> if offsets should be stored\n   * @param maxReusedBytes the number of bytes that should remain in the internal memory pools after {@link #reset()} is called\n   */\n  MemoryIndex(boolean storeOffsets, long maxReusedBytes) {\n    this.storeOffsets = storeOffsets;\n    this.bytesUsed = Counter.newCounter();\n    final int maxBufferedByteBlocks = (int)((maxReusedBytes/2) / ByteBlockPool.BYTE_BLOCK_SIZE );\n    final int maxBufferedIntBlocks = (int) ((maxReusedBytes - (maxBufferedByteBlocks*ByteBlockPool.BYTE_BLOCK_SIZE))/(IntBlockPool.INT_BLOCK_SIZE * RamUsageEstimator.NUM_BYTES_INT));\n    assert (maxBufferedByteBlocks * ByteBlockPool.BYTE_BLOCK_SIZE) + (maxBufferedIntBlocks * IntBlockPool.INT_BLOCK_SIZE * RamUsageEstimator.NUM_BYTES_INT) <= maxReusedBytes;\n    byteBlockPool = new ByteBlockPool(new RecyclingByteBlockAllocator(ByteBlockPool.BYTE_BLOCK_SIZE, maxBufferedByteBlocks, bytesUsed));\n    intBlockPool = new IntBlockPool(new RecyclingIntBlockAllocator(IntBlockPool.INT_BLOCK_SIZE, maxBufferedIntBlocks, bytesUsed));\n    postingsWriter = new SliceWriter(intBlockPool);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b7137d57090658b47af03aebde46d98a8cb93e4","date":1358949486,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#MemoryIndex(boolean,long).mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#MemoryIndex(boolean,long).mjava","sourceNew":"  /**\n   * Expert: This constructor accepts an upper limit for the number of bytes that should be reused if this instance is {@link #reset()}.\n   * @param storeOffsets <code>true</code> if offsets should be stored\n   * @param maxReusedBytes the number of bytes that should remain in the internal memory pools after {@link #reset()} is called\n   */\n  MemoryIndex(boolean storeOffsets, long maxReusedBytes) {\n    this.storeOffsets = storeOffsets;\n    this.bytesUsed = Counter.newCounter();\n    final int maxBufferedByteBlocks = (int)((maxReusedBytes/2) / ByteBlockPool.BYTE_BLOCK_SIZE );\n    final int maxBufferedIntBlocks = (int) ((maxReusedBytes - (maxBufferedByteBlocks*ByteBlockPool.BYTE_BLOCK_SIZE))/(IntBlockPool.INT_BLOCK_SIZE * RamUsageEstimator.NUM_BYTES_INT));\n    assert (maxBufferedByteBlocks * ByteBlockPool.BYTE_BLOCK_SIZE) + (maxBufferedIntBlocks * IntBlockPool.INT_BLOCK_SIZE * RamUsageEstimator.NUM_BYTES_INT) <= maxReusedBytes;\n    byteBlockPool = new ByteBlockPool(new RecyclingByteBlockAllocator(ByteBlockPool.BYTE_BLOCK_SIZE, maxBufferedByteBlocks, bytesUsed));\n    intBlockPool = new IntBlockPool(new RecyclingIntBlockAllocator(IntBlockPool.INT_BLOCK_SIZE, maxBufferedIntBlocks, bytesUsed));\n    postingsWriter = new SliceWriter(intBlockPool);\n  }\n\n","sourceOld":"  /**\n   * Expert: This constructor accepts a byte and int block allocator that is used internally to allocate \n   * int & byte blocks for term and posting storage.  \n   * @param storeOffsets <code>true</code> if offsets should be stored\n   * @param maxReusedBytes the number of bytes that should remain in the internal memory pools after {@link #reset()} is called\n   */\n  MemoryIndex(boolean storeOffsets, long maxReusedBytes) {\n    this.storeOffsets = storeOffsets;\n    this.bytesUsed = Counter.newCounter();\n    final int maxBufferedByteBlocks = (int)((maxReusedBytes/2) / ByteBlockPool.BYTE_BLOCK_SIZE );\n    final int maxBufferedIntBlocks = (int) ((maxReusedBytes - (maxBufferedByteBlocks*ByteBlockPool.BYTE_BLOCK_SIZE))/(IntBlockPool.INT_BLOCK_SIZE * RamUsageEstimator.NUM_BYTES_INT));\n    assert (maxBufferedByteBlocks * ByteBlockPool.BYTE_BLOCK_SIZE) + (maxBufferedIntBlocks * IntBlockPool.INT_BLOCK_SIZE * RamUsageEstimator.NUM_BYTES_INT) <= maxReusedBytes;\n    byteBlockPool = new ByteBlockPool(new RecyclingByteBlockAllocator(ByteBlockPool.BYTE_BLOCK_SIZE, maxBufferedByteBlocks, bytesUsed));\n    intBlockPool = new IntBlockPool(new RecyclingIntBlockAllocator(IntBlockPool.INT_BLOCK_SIZE, maxBufferedIntBlocks, bytesUsed));\n    postingsWriter = new SliceWriter(intBlockPool);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2d5244a676b83c2d551c3746e8181588ba619e1","date":1359031414,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#MemoryIndex(boolean,long).mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#MemoryIndex(boolean,long).mjava","sourceNew":"  /**\n   * Expert: This constructor accepts an upper limit for the number of bytes that should be reused if this instance is {@link #reset()}.\n   * @param storeOffsets <code>true</code> if offsets should be stored\n   * @param maxReusedBytes the number of bytes that should remain in the internal memory pools after {@link #reset()} is called\n   */\n  MemoryIndex(boolean storeOffsets, long maxReusedBytes) {\n    this.storeOffsets = storeOffsets;\n    this.bytesUsed = Counter.newCounter();\n    final int maxBufferedByteBlocks = (int)((maxReusedBytes/2) / ByteBlockPool.BYTE_BLOCK_SIZE );\n    final int maxBufferedIntBlocks = (int) ((maxReusedBytes - (maxBufferedByteBlocks*ByteBlockPool.BYTE_BLOCK_SIZE))/(IntBlockPool.INT_BLOCK_SIZE * RamUsageEstimator.NUM_BYTES_INT));\n    assert (maxBufferedByteBlocks * ByteBlockPool.BYTE_BLOCK_SIZE) + (maxBufferedIntBlocks * IntBlockPool.INT_BLOCK_SIZE * RamUsageEstimator.NUM_BYTES_INT) <= maxReusedBytes;\n    byteBlockPool = new ByteBlockPool(new RecyclingByteBlockAllocator(ByteBlockPool.BYTE_BLOCK_SIZE, maxBufferedByteBlocks, bytesUsed));\n    intBlockPool = new IntBlockPool(new RecyclingIntBlockAllocator(IntBlockPool.INT_BLOCK_SIZE, maxBufferedIntBlocks, bytesUsed));\n    postingsWriter = new SliceWriter(intBlockPool);\n  }\n\n","sourceOld":"  /**\n   * Expert: This constructor accepts a byte and int block allocator that is used internally to allocate \n   * int & byte blocks for term and posting storage.  \n   * @param storeOffsets <code>true</code> if offsets should be stored\n   * @param maxReusedBytes the number of bytes that should remain in the internal memory pools after {@link #reset()} is called\n   */\n  MemoryIndex(boolean storeOffsets, long maxReusedBytes) {\n    this.storeOffsets = storeOffsets;\n    this.bytesUsed = Counter.newCounter();\n    final int maxBufferedByteBlocks = (int)((maxReusedBytes/2) / ByteBlockPool.BYTE_BLOCK_SIZE );\n    final int maxBufferedIntBlocks = (int) ((maxReusedBytes - (maxBufferedByteBlocks*ByteBlockPool.BYTE_BLOCK_SIZE))/(IntBlockPool.INT_BLOCK_SIZE * RamUsageEstimator.NUM_BYTES_INT));\n    assert (maxBufferedByteBlocks * ByteBlockPool.BYTE_BLOCK_SIZE) + (maxBufferedIntBlocks * IntBlockPool.INT_BLOCK_SIZE * RamUsageEstimator.NUM_BYTES_INT) <= maxReusedBytes;\n    byteBlockPool = new ByteBlockPool(new RecyclingByteBlockAllocator(ByteBlockPool.BYTE_BLOCK_SIZE, maxBufferedByteBlocks, bytesUsed));\n    intBlockPool = new IntBlockPool(new RecyclingIntBlockAllocator(IntBlockPool.INT_BLOCK_SIZE, maxBufferedIntBlocks, bytesUsed));\n    postingsWriter = new SliceWriter(intBlockPool);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e88ae259732b6a9caf4c8f3a2e5a19c7b54ddbcb","date":1420550360,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#MemoryIndex(boolean,boolean,long).mjava","pathOld":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#MemoryIndex(boolean,long).mjava","sourceNew":"  /**\n   * Expert: This constructor accepts an upper limit for the number of bytes that should be reused if this instance is {@link #reset()}.\n   * The payload storage, if used, is unaffected by maxReusuedBytes, however.\n   * @param storeOffsets <code>true</code> if offsets should be stored\n   * @param storePayloads <code>true</code> if payloads should be stored\n   * @param maxReusedBytes the number of bytes that should remain in the internal memory pools after {@link #reset()} is called\n   */\n  MemoryIndex(boolean storeOffsets, boolean storePayloads, long maxReusedBytes) {\n    this.storeOffsets = storeOffsets;\n    this.storePayloads = storePayloads;\n    this.bytesUsed = Counter.newCounter();\n    final int maxBufferedByteBlocks = (int)((maxReusedBytes/2) / ByteBlockPool.BYTE_BLOCK_SIZE );\n    final int maxBufferedIntBlocks = (int) ((maxReusedBytes - (maxBufferedByteBlocks*ByteBlockPool.BYTE_BLOCK_SIZE))/(IntBlockPool.INT_BLOCK_SIZE * RamUsageEstimator.NUM_BYTES_INT));\n    assert (maxBufferedByteBlocks * ByteBlockPool.BYTE_BLOCK_SIZE) + (maxBufferedIntBlocks * IntBlockPool.INT_BLOCK_SIZE * RamUsageEstimator.NUM_BYTES_INT) <= maxReusedBytes;\n    byteBlockPool = new ByteBlockPool(new RecyclingByteBlockAllocator(ByteBlockPool.BYTE_BLOCK_SIZE, maxBufferedByteBlocks, bytesUsed));\n    intBlockPool = new IntBlockPool(new RecyclingIntBlockAllocator(IntBlockPool.INT_BLOCK_SIZE, maxBufferedIntBlocks, bytesUsed));\n    postingsWriter = new SliceWriter(intBlockPool);\n    //TODO refactor BytesRefArray to allow us to apply maxReusedBytes option\n    payloadsBytesRefs = storePayloads ? new BytesRefArray(bytesUsed) : null;\n  }\n\n","sourceOld":"  /**\n   * Expert: This constructor accepts an upper limit for the number of bytes that should be reused if this instance is {@link #reset()}.\n   * @param storeOffsets <code>true</code> if offsets should be stored\n   * @param maxReusedBytes the number of bytes that should remain in the internal memory pools after {@link #reset()} is called\n   */\n  MemoryIndex(boolean storeOffsets, long maxReusedBytes) {\n    this.storeOffsets = storeOffsets;\n    this.bytesUsed = Counter.newCounter();\n    final int maxBufferedByteBlocks = (int)((maxReusedBytes/2) / ByteBlockPool.BYTE_BLOCK_SIZE );\n    final int maxBufferedIntBlocks = (int) ((maxReusedBytes - (maxBufferedByteBlocks*ByteBlockPool.BYTE_BLOCK_SIZE))/(IntBlockPool.INT_BLOCK_SIZE * RamUsageEstimator.NUM_BYTES_INT));\n    assert (maxBufferedByteBlocks * ByteBlockPool.BYTE_BLOCK_SIZE) + (maxBufferedIntBlocks * IntBlockPool.INT_BLOCK_SIZE * RamUsageEstimator.NUM_BYTES_INT) <= maxReusedBytes;\n    byteBlockPool = new ByteBlockPool(new RecyclingByteBlockAllocator(ByteBlockPool.BYTE_BLOCK_SIZE, maxBufferedByteBlocks, bytesUsed));\n    intBlockPool = new IntBlockPool(new RecyclingIntBlockAllocator(IntBlockPool.INT_BLOCK_SIZE, maxBufferedIntBlocks, bytesUsed));\n    postingsWriter = new SliceWriter(intBlockPool);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e88ae259732b6a9caf4c8f3a2e5a19c7b54ddbcb":["3b7137d57090658b47af03aebde46d98a8cb93e4"],"3b7137d57090658b47af03aebde46d98a8cb93e4":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e88ae259732b6a9caf4c8f3a2e5a19c7b54ddbcb"],"b2d5244a676b83c2d551c3746e8181588ba619e1":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63","3b7137d57090658b47af03aebde46d98a8cb93e4"]},"commit2Childs":{"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["3b7137d57090658b47af03aebde46d98a8cb93e4","b2d5244a676b83c2d551c3746e8181588ba619e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"],"e88ae259732b6a9caf4c8f3a2e5a19c7b54ddbcb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3b7137d57090658b47af03aebde46d98a8cb93e4":["e88ae259732b6a9caf4c8f3a2e5a19c7b54ddbcb","b2d5244a676b83c2d551c3746e8181588ba619e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b2d5244a676b83c2d551c3746e8181588ba619e1":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b2d5244a676b83c2d551c3746e8181588ba619e1"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}