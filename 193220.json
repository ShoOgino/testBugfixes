{"path":"sandbox/contributions/analyzers/src/java/org/apache/lucene/analysis/de/GermanStemmer#resubstitute(StringBuffer).mjava","commits":[{"id":"4215168c7c026cd898f2d98bb6aa5b0df9856696","date":1092688246,"type":0,"author":"Daniel Naber","isMerge":false,"pathNew":"sandbox/contributions/analyzers/src/java/org/apache/lucene/analysis/de/GermanStemmer#resubstitute(StringBuffer).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Undoes the changes made by substitute(). That are character pairs and\n     * character combinations. Umlauts will remain as their corresponding vowel,\n     * as \"ß\" remains as \"ss\".\n     */\n    private void resubstitute( StringBuffer buffer )\n    {\n      for ( int c = 0; c < buffer.length(); c++ ) {\n        if ( buffer.charAt( c ) == '*' ) {\n          char x = buffer.charAt( c - 1 );\n          buffer.setCharAt( c, x );\n        }\n        else if ( buffer.charAt( c ) == '$' ) {\n          buffer.setCharAt( c, 's' );\n          buffer.insert( c + 1, new char[]{'c', 'h'}, 0, 2 );\n        }\n        else if ( buffer.charAt( c ) == '§' ) {\n          buffer.setCharAt( c, 'c' );\n          buffer.insert( c + 1, 'h' );\n        }\n        else if ( buffer.charAt( c ) == '%' ) {\n          buffer.setCharAt( c, 'e' );\n          buffer.insert( c + 1, 'i' );\n        }\n        else if ( buffer.charAt( c ) == '&' ) {\n          buffer.setCharAt( c, 'i' );\n          buffer.insert( c + 1, 'e' );\n        }\n        else if ( buffer.charAt( c ) == '#' ) {\n          buffer.setCharAt( c, 'i' );\n          buffer.insert( c + 1, 'g' );\n        }\n        else if ( buffer.charAt( c ) == '!' ) {\n          buffer.setCharAt( c, 's' );\n          buffer.insert( c + 1, 't' );\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"043c298cb215f13ba7b9b81d20760704e8f93d66","date":1107566743,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/de/GermanStemmer#resubstitute(StringBuffer).mjava","pathOld":"sandbox/contributions/analyzers/src/java/org/apache/lucene/analysis/de/GermanStemmer#resubstitute(StringBuffer).mjava","sourceNew":"    /**\n     * Undoes the changes made by substitute(). That are character pairs and\n     * character combinations. Umlauts will remain as their corresponding vowel,\n     * as \"ß\" remains as \"ss\".\n     */\n    private void resubstitute( StringBuffer buffer )\n    {\n      for ( int c = 0; c < buffer.length(); c++ ) {\n        if ( buffer.charAt( c ) == '*' ) {\n          char x = buffer.charAt( c - 1 );\n          buffer.setCharAt( c, x );\n        }\n        else if ( buffer.charAt( c ) == '$' ) {\n          buffer.setCharAt( c, 's' );\n          buffer.insert( c + 1, new char[]{'c', 'h'}, 0, 2 );\n        }\n        else if ( buffer.charAt( c ) == '§' ) {\n          buffer.setCharAt( c, 'c' );\n          buffer.insert( c + 1, 'h' );\n        }\n        else if ( buffer.charAt( c ) == '%' ) {\n          buffer.setCharAt( c, 'e' );\n          buffer.insert( c + 1, 'i' );\n        }\n        else if ( buffer.charAt( c ) == '&' ) {\n          buffer.setCharAt( c, 'i' );\n          buffer.insert( c + 1, 'e' );\n        }\n        else if ( buffer.charAt( c ) == '#' ) {\n          buffer.setCharAt( c, 'i' );\n          buffer.insert( c + 1, 'g' );\n        }\n        else if ( buffer.charAt( c ) == '!' ) {\n          buffer.setCharAt( c, 's' );\n          buffer.insert( c + 1, 't' );\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Undoes the changes made by substitute(). That are character pairs and\n     * character combinations. Umlauts will remain as their corresponding vowel,\n     * as \"ß\" remains as \"ss\".\n     */\n    private void resubstitute( StringBuffer buffer )\n    {\n      for ( int c = 0; c < buffer.length(); c++ ) {\n        if ( buffer.charAt( c ) == '*' ) {\n          char x = buffer.charAt( c - 1 );\n          buffer.setCharAt( c, x );\n        }\n        else if ( buffer.charAt( c ) == '$' ) {\n          buffer.setCharAt( c, 's' );\n          buffer.insert( c + 1, new char[]{'c', 'h'}, 0, 2 );\n        }\n        else if ( buffer.charAt( c ) == '§' ) {\n          buffer.setCharAt( c, 'c' );\n          buffer.insert( c + 1, 'h' );\n        }\n        else if ( buffer.charAt( c ) == '%' ) {\n          buffer.setCharAt( c, 'e' );\n          buffer.insert( c + 1, 'i' );\n        }\n        else if ( buffer.charAt( c ) == '&' ) {\n          buffer.setCharAt( c, 'i' );\n          buffer.insert( c + 1, 'e' );\n        }\n        else if ( buffer.charAt( c ) == '#' ) {\n          buffer.setCharAt( c, 'i' );\n          buffer.insert( c + 1, 'g' );\n        }\n        else if ( buffer.charAt( c ) == '!' ) {\n          buffer.setCharAt( c, 's' );\n          buffer.insert( c + 1, 't' );\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["4215168c7c026cd898f2d98bb6aa5b0df9856696"],"4215168c7c026cd898f2d98bb6aa5b0df9856696":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["043c298cb215f13ba7b9b81d20760704e8f93d66"]},"commit2Childs":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4215168c7c026cd898f2d98bb6aa5b0df9856696":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4215168c7c026cd898f2d98bb6aa5b0df9856696"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}