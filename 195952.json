{"path":"src/test/org/apache/lucene/index/TestIndexReader#testChangesAfterClose().mjava","commits":[{"id":"1b54a9bc667895a2095a886184bf69a3179e63df","date":1172088096,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testChangesAfterClose().mjava","pathOld":"/dev/null","sourceNew":"    // Make sure attempts to make changes after reader is\n    // closed throws IOException:\n    public void testChangesAfterClose() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 11 documents with term : aaa\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        for (int i = 0; i < 11; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        reader = IndexReader.open(dir);\n\n        // Close reader:\n        reader.close();\n\n        // Then, try to make changes:\n        try {\n          reader.deleteDocument(4);\n          fail(\"deleteDocument after close failed to throw IOException\");\n        } catch (IOException e) {\n          // expected\n        }\n\n        try {\n          reader.setNorm(5, \"aaa\", 2.0f);\n          fail(\"setNorm after close failed to throw IOException\");\n        } catch (IOException e) {\n          // expected\n        }\n\n        try {\n          reader.undeleteAll();\n          fail(\"undeleteAll after close failed to throw IOException\");\n        } catch (IOException e) {\n          // expected\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"328c1568e471f0c6eaa49ec00334ca59e573710f","date":1173897963,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testChangesAfterClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testChangesAfterClose().mjava","sourceNew":"    // Make sure attempts to make changes after reader is\n    // closed throws IOException:\n    public void testChangesAfterClose() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 11 documents with term : aaa\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        for (int i = 0; i < 11; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        reader = IndexReader.open(dir);\n\n        // Close reader:\n        reader.close();\n\n        // Then, try to make changes:\n        try {\n          reader.deleteDocument(4);\n          fail(\"deleteDocument after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n\n        try {\n          reader.setNorm(5, \"aaa\", 2.0f);\n          fail(\"setNorm after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n\n        try {\n          reader.undeleteAll();\n          fail(\"undeleteAll after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n    }\n\n","sourceOld":"    // Make sure attempts to make changes after reader is\n    // closed throws IOException:\n    public void testChangesAfterClose() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 11 documents with term : aaa\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        for (int i = 0; i < 11; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        reader = IndexReader.open(dir);\n\n        // Close reader:\n        reader.close();\n\n        // Then, try to make changes:\n        try {\n          reader.deleteDocument(4);\n          fail(\"deleteDocument after close failed to throw IOException\");\n        } catch (IOException e) {\n          // expected\n        }\n\n        try {\n          reader.setNorm(5, \"aaa\", 2.0f);\n          fail(\"setNorm after close failed to throw IOException\");\n        } catch (IOException e) {\n          // expected\n        }\n\n        try {\n          reader.undeleteAll();\n          fail(\"undeleteAll after close failed to throw IOException\");\n        } catch (IOException e) {\n          // expected\n        }\n    }\n\n","bugFix":["1b54a9bc667895a2095a886184bf69a3179e63df"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testChangesAfterClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testChangesAfterClose().mjava","sourceNew":"    // Make sure attempts to make changes after reader is\n    // closed throws IOException:\n    public void testChangesAfterClose() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 11 documents with term : aaa\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 11; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        reader = IndexReader.open(dir);\n\n        // Close reader:\n        reader.close();\n\n        // Then, try to make changes:\n        try {\n          reader.deleteDocument(4);\n          fail(\"deleteDocument after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n\n        try {\n          reader.setNorm(5, \"aaa\", 2.0f);\n          fail(\"setNorm after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n\n        try {\n          reader.undeleteAll();\n          fail(\"undeleteAll after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n    }\n\n","sourceOld":"    // Make sure attempts to make changes after reader is\n    // closed throws IOException:\n    public void testChangesAfterClose() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 11 documents with term : aaa\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        for (int i = 0; i < 11; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        reader = IndexReader.open(dir);\n\n        // Close reader:\n        reader.close();\n\n        // Then, try to make changes:\n        try {\n          reader.deleteDocument(4);\n          fail(\"deleteDocument after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n\n        try {\n          reader.setNorm(5, \"aaa\", 2.0f);\n          fail(\"setNorm after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n\n        try {\n          reader.undeleteAll();\n          fail(\"undeleteAll after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testChangesAfterClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testChangesAfterClose().mjava","sourceNew":"    // Make sure attempts to make changes after reader is\n    // closed throws IOException:\n    public void testChangesAfterClose() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 11 documents with term : aaa\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 11; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        reader = IndexReader.open(dir, false);\n\n        // Close reader:\n        reader.close();\n\n        // Then, try to make changes:\n        try {\n          reader.deleteDocument(4);\n          fail(\"deleteDocument after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n\n        try {\n          reader.setNorm(5, \"aaa\", 2.0f);\n          fail(\"setNorm after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n\n        try {\n          reader.undeleteAll();\n          fail(\"undeleteAll after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n    }\n\n","sourceOld":"    // Make sure attempts to make changes after reader is\n    // closed throws IOException:\n    public void testChangesAfterClose() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 11 documents with term : aaa\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 11; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        reader = IndexReader.open(dir);\n\n        // Close reader:\n        reader.close();\n\n        // Then, try to make changes:\n        try {\n          reader.deleteDocument(4);\n          fail(\"deleteDocument after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n\n        try {\n          reader.setNorm(5, \"aaa\", 2.0f);\n          fail(\"setNorm after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n\n        try {\n          reader.undeleteAll();\n          fail(\"undeleteAll after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testChangesAfterClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testChangesAfterClose().mjava","sourceNew":"    // Make sure attempts to make changes after reader is\n    // closed throws IOException:\n    public void testChangesAfterClose() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 11 documents with term : aaa\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 11; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        reader = IndexReader.open(dir, false);\n\n        // Close reader:\n        reader.close();\n\n        // Then, try to make changes:\n        try {\n          reader.deleteDocument(4);\n          fail(\"deleteDocument after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n\n        try {\n          reader.setNorm(5, \"aaa\", 2.0f);\n          fail(\"setNorm after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n\n        try {\n          reader.undeleteAll();\n          fail(\"undeleteAll after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n    }\n\n","sourceOld":"    // Make sure attempts to make changes after reader is\n    // closed throws IOException:\n    public void testChangesAfterClose() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 11 documents with term : aaa\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 11; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        reader = IndexReader.open(dir);\n\n        // Close reader:\n        reader.close();\n\n        // Then, try to make changes:\n        try {\n          reader.deleteDocument(4);\n          fail(\"deleteDocument after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n\n        try {\n          reader.setNorm(5, \"aaa\", 2.0f);\n          fail(\"setNorm after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n\n        try {\n          reader.undeleteAll();\n          fail(\"undeleteAll after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testChangesAfterClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testChangesAfterClose().mjava","sourceNew":"    // Make sure attempts to make changes after reader is\n    // closed throws IOException:\n    public void testChangesAfterClose() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 11 documents with term : aaa\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 11; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        reader = IndexReader.open(dir, false);\n\n        // Close reader:\n        reader.close();\n\n        // Then, try to make changes:\n        try {\n          reader.deleteDocument(4);\n          fail(\"deleteDocument after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n\n        try {\n          reader.setNorm(5, \"aaa\", 2.0f);\n          fail(\"setNorm after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n\n        try {\n          reader.undeleteAll();\n          fail(\"undeleteAll after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n    }\n\n","sourceOld":"    // Make sure attempts to make changes after reader is\n    // closed throws IOException:\n    public void testChangesAfterClose() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 11 documents with term : aaa\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 11; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        reader = IndexReader.open(dir, false);\n\n        // Close reader:\n        reader.close();\n\n        // Then, try to make changes:\n        try {\n          reader.deleteDocument(4);\n          fail(\"deleteDocument after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n\n        try {\n          reader.setNorm(5, \"aaa\", 2.0f);\n          fail(\"setNorm after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n\n        try {\n          reader.undeleteAll();\n          fail(\"undeleteAll after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testChangesAfterClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testChangesAfterClose().mjava","sourceNew":"    // Make sure attempts to make changes after reader is\n    // closed throws IOException:\n    public void testChangesAfterClose() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 11 documents with term : aaa\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 11; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        reader = IndexReader.open(dir, false);\n\n        // Close reader:\n        reader.close();\n\n        // Then, try to make changes:\n        try {\n          reader.deleteDocument(4);\n          fail(\"deleteDocument after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n\n        try {\n          reader.setNorm(5, \"aaa\", 2.0f);\n          fail(\"setNorm after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n\n        try {\n          reader.undeleteAll();\n          fail(\"undeleteAll after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n    }\n\n","sourceOld":"    // Make sure attempts to make changes after reader is\n    // closed throws IOException:\n    public void testChangesAfterClose() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 11 documents with term : aaa\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 11; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        reader = IndexReader.open(dir, false);\n\n        // Close reader:\n        reader.close();\n\n        // Then, try to make changes:\n        try {\n          reader.deleteDocument(4);\n          fail(\"deleteDocument after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n\n        try {\n          reader.setNorm(5, \"aaa\", 2.0f);\n          fail(\"setNorm after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n\n        try {\n          reader.undeleteAll();\n          fail(\"undeleteAll after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testChangesAfterClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testChangesAfterClose().mjava","sourceNew":"    // Make sure attempts to make changes after reader is\n    // closed throws IOException:\n    public void testChangesAfterClose() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 11 documents with term : aaa\n        writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n        for (int i = 0; i < 11; i++) {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        reader = IndexReader.open(dir, false);\n\n        // Close reader:\n        reader.close();\n\n        // Then, try to make changes:\n        try {\n          reader.deleteDocument(4);\n          fail(\"deleteDocument after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n\n        try {\n          reader.setNorm(5, \"aaa\", 2.0f);\n          fail(\"setNorm after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n\n        try {\n          reader.undeleteAll();\n          fail(\"undeleteAll after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n    }\n\n","sourceOld":"    // Make sure attempts to make changes after reader is\n    // closed throws IOException:\n    public void testChangesAfterClose() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 11 documents with term : aaa\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 11; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        reader = IndexReader.open(dir, false);\n\n        // Close reader:\n        reader.close();\n\n        // Then, try to make changes:\n        try {\n          reader.deleteDocument(4);\n          fail(\"deleteDocument after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n\n        try {\n          reader.setNorm(5, \"aaa\", 2.0f);\n          fail(\"setNorm after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n\n        try {\n          reader.undeleteAll();\n          fail(\"undeleteAll after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testChangesAfterClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testChangesAfterClose().mjava","sourceNew":"    // Make sure attempts to make changes after reader is\n    // closed throws IOException:\n    public void testChangesAfterClose() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 11 documents with term : aaa\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 11; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        reader = IndexReader.open(dir, false);\n\n        // Close reader:\n        reader.close();\n\n        // Then, try to make changes:\n        try {\n          reader.deleteDocument(4);\n          fail(\"deleteDocument after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n\n        try {\n          reader.setNorm(5, \"aaa\", 2.0f);\n          fail(\"setNorm after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n\n        try {\n          reader.undeleteAll();\n          fail(\"undeleteAll after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n    }\n\n","sourceOld":"    // Make sure attempts to make changes after reader is\n    // closed throws IOException:\n    public void testChangesAfterClose() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 11 documents with term : aaa\n        writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n        for (int i = 0; i < 11; i++) {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        reader = IndexReader.open(dir, false);\n\n        // Close reader:\n        reader.close();\n\n        // Then, try to make changes:\n        try {\n          reader.deleteDocument(4);\n          fail(\"deleteDocument after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n\n        try {\n          reader.setNorm(5, \"aaa\", 2.0f);\n          fail(\"setNorm after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n\n        try {\n          reader.undeleteAll();\n          fail(\"undeleteAll after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testChangesAfterClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testChangesAfterClose().mjava","sourceNew":"    // Make sure attempts to make changes after reader is\n    // closed throws IOException:\n    public void testChangesAfterClose() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 11 documents with term : aaa\n        writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        for (int i = 0; i < 11; i++) {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        reader = IndexReader.open(dir, false);\n\n        // Close reader:\n        reader.close();\n\n        // Then, try to make changes:\n        try {\n          reader.deleteDocument(4);\n          fail(\"deleteDocument after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n\n        try {\n          reader.setNorm(5, \"aaa\", 2.0f);\n          fail(\"setNorm after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n\n        try {\n          reader.undeleteAll();\n          fail(\"undeleteAll after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n    }\n\n","sourceOld":"    // Make sure attempts to make changes after reader is\n    // closed throws IOException:\n    public void testChangesAfterClose() throws IOException\n    {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 11 documents with term : aaa\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 11; i++)\n        {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        reader = IndexReader.open(dir, false);\n\n        // Close reader:\n        reader.close();\n\n        // Then, try to make changes:\n        try {\n          reader.deleteDocument(4);\n          fail(\"deleteDocument after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n\n        try {\n          reader.setNorm(5, \"aaa\", 2.0f);\n          fail(\"setNorm after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n\n        try {\n          reader.undeleteAll();\n          fail(\"undeleteAll after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testChangesAfterClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testChangesAfterClose().mjava","sourceNew":"    // Make sure attempts to make changes after reader is\n    // closed throws IOException:\n    public void testChangesAfterClose() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 11 documents with term : aaa\n        writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        for (int i = 0; i < 11; i++) {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        reader = IndexReader.open(dir, false);\n\n        // Close reader:\n        reader.close();\n\n        // Then, try to make changes:\n        try {\n          reader.deleteDocument(4);\n          fail(\"deleteDocument after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n\n        try {\n          reader.setNorm(5, \"aaa\", 2.0f);\n          fail(\"setNorm after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n\n        try {\n          reader.undeleteAll();\n          fail(\"undeleteAll after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n    }\n\n","sourceOld":"    // Make sure attempts to make changes after reader is\n    // closed throws IOException:\n    public void testChangesAfterClose() throws IOException {\n        Directory dir = new RAMDirectory();\n\n        IndexWriter writer = null;\n        IndexReader reader = null;\n        Term searchTerm = new Term(\"content\", \"aaa\");\n\n        //  add 11 documents with term : aaa\n        writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        for (int i = 0; i < 11; i++) {\n            addDoc(writer, searchTerm.text());\n        }\n        writer.close();\n\n        reader = IndexReader.open(dir, false);\n\n        // Close reader:\n        reader.close();\n\n        // Then, try to make changes:\n        try {\n          reader.deleteDocument(4);\n          fail(\"deleteDocument after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n\n        try {\n          reader.setNorm(5, \"aaa\", 2.0f);\n          fail(\"setNorm after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n\n        try {\n          reader.undeleteAll();\n          fail(\"undeleteAll after close failed to throw IOException\");\n        } catch (AlreadyClosedException e) {\n          // expected\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"328c1568e471f0c6eaa49ec00334ca59e573710f":["1b54a9bc667895a2095a886184bf69a3179e63df"],"1b54a9bc667895a2095a886184bf69a3179e63df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["0018e7a0579df5d3de71d0bd878322a7abef04d9","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"328c1568e471f0c6eaa49ec00334ca59e573710f":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"1b54a9bc667895a2095a886184bf69a3179e63df":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1b54a9bc667895a2095a886184bf69a3179e63df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}