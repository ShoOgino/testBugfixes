{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testLatlonFunctions().mjava","commits":[{"id":"e18a15df61e77dcf4309901ebbe40a57eda9fb55","date":1536349354,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testLatlonFunctions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testLocationFunctions().mjava","sourceNew":"  @Test\n  public void testLatlonFunctions() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<5) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"),\n          \"price_i\",  Integer.toString(i), \"loc_p\", (42.906797030808235+i)+\",\"+(76.69455762489834+i));\n    }\n\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"let(echo=true,\" +\n        \"              a=search(\"+COLLECTIONORALIAS+\", q=*:*, fl=\\\"id, loc_p, price_i\\\",rows=100, sort=\\\"price_i asc\\\"),\"+\n        \"              b=latlonVectors(a, field=loc_p),\" +\n        \"              c=distance(array(40.7128, 74.0060), array(45.7128, 74.0060), haversineMeters()))\";\n\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>>locVectors = (List<List<Number>>)tuples.get(0).get(\"b\");\n    System.out.println(locVectors);\n    int v=1;\n    for(List<Number> row : locVectors) {\n     double lat = row.get(0).doubleValue();\n     double lon = row.get(1).doubleValue();\n     assertEquals(lat, 42.906797030808235+v, 0);\n     assertEquals(lon, 76.69455762489834+v, 0);\n     ++v;\n    }\n\n    double distance = tuples.get(0).getDouble(\"c\");\n    assertEquals(distance, 555975.3986718428, 1.0);\n\n  }\n\n","sourceOld":"  @Test\n  public void testLocationFunctions() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<5) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"),\n          \"price_i\",  Integer.toString(i), \"loc_p\", (42.906797030808235+i)+\",\"+(76.69455762489834+i));\n    }\n\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"let(echo=true,\" +\n        \"              a=search(\"+COLLECTIONORALIAS+\", q=*:*, fl=\\\"id, loc_p, price_i\\\",rows=100, sort=\\\"price_i asc\\\"),\"+\n        \"              b=locationVectors(a, field=loc_p),\" +\n        \"              c=distance(array(40.7128, 74.0060), array(45.7128, 74.0060), haversineMeters()))\";\n\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>>locVectors = (List<List<Number>>)tuples.get(0).get(\"b\");\n    System.out.println(locVectors);\n    int v=1;\n    for(List<Number> row : locVectors) {\n     double lat = row.get(0).doubleValue();\n     double lon = row.get(1).doubleValue();\n     assertEquals(lat, 42.906797030808235+v, 0);\n     assertEquals(lon, 76.69455762489834+v, 0);\n     ++v;\n    }\n\n    double distance = tuples.get(0).getDouble(\"c\");\n    assertEquals(distance, 555975.3986718428, 1.0);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96eb896f0c32b05e3f5a80e6f9a0ceede9269e7b","date":1538583935,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testLatlonFunctions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testLatlonFunctions().mjava","sourceNew":"  @Test\n  public void testLatlonFunctions() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<5) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"),\n          \"price_i\",  Integer.toString(i), \"loc_p\", (42.906797030808235+i)+\",\"+(76.69455762489834+i));\n    }\n\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"let(echo=true,\" +\n        \"              a=search(\"+COLLECTIONORALIAS+\", q=*:*, fl=\\\"id, loc_p, price_i\\\",rows=100, sort=\\\"price_i asc\\\"),\"+\n        \"              b=latlonVectors(a, field=loc_p),\" +\n        \"              c=distance(array(40.7128, 74.0060), array(45.7128, 74.0060), haversineMeters()))\";\n\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>>locVectors = (List<List<Number>>)tuples.get(0).get(\"b\");\n    int v=1;\n    for(List<Number> row : locVectors) {\n     double lat = row.get(0).doubleValue();\n     double lon = row.get(1).doubleValue();\n     assertEquals(lat, 42.906797030808235+v, 0);\n     assertEquals(lon, 76.69455762489834+v, 0);\n     ++v;\n    }\n\n    double distance = tuples.get(0).getDouble(\"c\");\n    assertEquals(distance, 555975.3986718428, 1.0);\n\n  }\n\n","sourceOld":"  @Test\n  public void testLatlonFunctions() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<5) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"),\n          \"price_i\",  Integer.toString(i), \"loc_p\", (42.906797030808235+i)+\",\"+(76.69455762489834+i));\n    }\n\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"let(echo=true,\" +\n        \"              a=search(\"+COLLECTIONORALIAS+\", q=*:*, fl=\\\"id, loc_p, price_i\\\",rows=100, sort=\\\"price_i asc\\\"),\"+\n        \"              b=latlonVectors(a, field=loc_p),\" +\n        \"              c=distance(array(40.7128, 74.0060), array(45.7128, 74.0060), haversineMeters()))\";\n\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>>locVectors = (List<List<Number>>)tuples.get(0).get(\"b\");\n    System.out.println(locVectors);\n    int v=1;\n    for(List<Number> row : locVectors) {\n     double lat = row.get(0).doubleValue();\n     double lon = row.get(1).doubleValue();\n     assertEquals(lat, 42.906797030808235+v, 0);\n     assertEquals(lon, 76.69455762489834+v, 0);\n     ++v;\n    }\n\n    double distance = tuples.get(0).getDouble(\"c\");\n    assertEquals(distance, 555975.3986718428, 1.0);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testLatlonFunctions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testLatlonFunctions().mjava","sourceNew":"  @Test\n  public void testLatlonFunctions() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<5) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"),\n          \"price_i\",  Integer.toString(i), \"loc_p\", (42.906797030808235+i)+\",\"+(76.69455762489834+i));\n    }\n\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"let(echo=true,\" +\n        \"              a=search(\"+COLLECTIONORALIAS+\", q=*:*, fl=\\\"id, loc_p, price_i\\\",rows=100, sort=\\\"price_i asc\\\"),\"+\n        \"              b=latlonVectors(a, field=loc_p),\" +\n        \"              c=distance(array(40.7128, 74.0060), array(45.7128, 74.0060), haversineMeters()))\";\n\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    @SuppressWarnings({\"unchecked\"})\n    List<List<Number>>locVectors = (List<List<Number>>)tuples.get(0).get(\"b\");\n    int v=1;\n    for(List<Number> row : locVectors) {\n     double lat = row.get(0).doubleValue();\n     double lon = row.get(1).doubleValue();\n     assertEquals(lat, 42.906797030808235+v, 0);\n     assertEquals(lon, 76.69455762489834+v, 0);\n     ++v;\n    }\n\n    double distance = tuples.get(0).getDouble(\"c\");\n    assertEquals(distance, 555975.3986718428, 1.0);\n\n  }\n\n","sourceOld":"  @Test\n  public void testLatlonFunctions() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<5) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"),\n          \"price_i\",  Integer.toString(i), \"loc_p\", (42.906797030808235+i)+\",\"+(76.69455762489834+i));\n    }\n\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"let(echo=true,\" +\n        \"              a=search(\"+COLLECTIONORALIAS+\", q=*:*, fl=\\\"id, loc_p, price_i\\\",rows=100, sort=\\\"price_i asc\\\"),\"+\n        \"              b=latlonVectors(a, field=loc_p),\" +\n        \"              c=distance(array(40.7128, 74.0060), array(45.7128, 74.0060), haversineMeters()))\";\n\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>>locVectors = (List<List<Number>>)tuples.get(0).get(\"b\");\n    int v=1;\n    for(List<Number> row : locVectors) {\n     double lat = row.get(0).doubleValue();\n     double lon = row.get(1).doubleValue();\n     assertEquals(lat, 42.906797030808235+v, 0);\n     assertEquals(lon, 76.69455762489834+v, 0);\n     ++v;\n    }\n\n    double distance = tuples.get(0).getDouble(\"c\");\n    assertEquals(distance, 555975.3986718428, 1.0);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["96eb896f0c32b05e3f5a80e6f9a0ceede9269e7b"],"96eb896f0c32b05e3f5a80e6f9a0ceede9269e7b":["e18a15df61e77dcf4309901ebbe40a57eda9fb55"],"e18a15df61e77dcf4309901ebbe40a57eda9fb55":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"96eb896f0c32b05e3f5a80e6f9a0ceede9269e7b":["9ba1b632c041956c93c41aa1143d16a567014891"],"e18a15df61e77dcf4309901ebbe40a57eda9fb55":["96eb896f0c32b05e3f5a80e6f9a0ceede9269e7b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e18a15df61e77dcf4309901ebbe40a57eda9fb55"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}