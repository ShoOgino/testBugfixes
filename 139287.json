{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#markAllAsNotLeader(CurrentCoreDescriptorProvider).mjava","commits":[{"id":"a6378064655e76cd7b908b1cab4ce425b384b508","date":1347656715,"type":2,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#markAllAsNotLeader(CurrentCoreDescriptorProvider).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#registerAllCoresAsDown(CurrentCoreDescriptorProvider).mjava","sourceNew":"  private void markAllAsNotLeader(\n      final CurrentCoreDescriptorProvider registerOnReconnect) {\n    List<CoreDescriptor> descriptors = registerOnReconnect\n        .getCurrentDescriptors();\n    if (descriptors != null) {\n      for (CoreDescriptor descriptor : descriptors) {\n        descriptor.getCloudDescriptor().isLeader = false;\n      }\n    }\n  }\n\n","sourceOld":"  private void registerAllCoresAsDown(\n      final CurrentCoreDescriptorProvider registerOnReconnect) {\n    List<CoreDescriptor> descriptors = registerOnReconnect\n        .getCurrentDescriptors();\n    if (descriptors != null) {\n      // before registering as live, make sure everyone is in a\n      // down state\n      for (CoreDescriptor descriptor : descriptors) {\n        final String coreZkNodeName = getNodeName() + \"_\"\n            + descriptor.getName();\n        try {\n          descriptor.getCloudDescriptor().isLeader = false;\n          publish(descriptor, ZkStateReader.DOWN);\n          waitForLeaderToSeeDownState(descriptor, coreZkNodeName);\n        } catch (Exception e) {\n          SolrException.log(log, \"\", e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#markAllAsNotLeader(CurrentCoreDescriptorProvider).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#markAllAsNotLeader(CurrentCoreDescriptorProvider).mjava","sourceNew":"  private void markAllAsNotLeader(\n      final CurrentCoreDescriptorProvider registerOnReconnect) {\n    List<CoreDescriptor> descriptors = registerOnReconnect\n        .getCurrentDescriptors();\n    if (descriptors != null) {\n      for (CoreDescriptor descriptor : descriptors) {\n        descriptor.getCloudDescriptor().setLeader(false);\n      }\n    }\n  }\n\n","sourceOld":"  private void markAllAsNotLeader(\n      final CurrentCoreDescriptorProvider registerOnReconnect) {\n    List<CoreDescriptor> descriptors = registerOnReconnect\n        .getCurrentDescriptors();\n    if (descriptors != null) {\n      for (CoreDescriptor descriptor : descriptors) {\n        descriptor.getCloudDescriptor().isLeader = false;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#markAllAsNotLeader(CurrentCoreDescriptorProvider).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#markAllAsNotLeader(CurrentCoreDescriptorProvider).mjava","sourceNew":"  private void markAllAsNotLeader(\n      final CurrentCoreDescriptorProvider registerOnReconnect) {\n    List<CoreDescriptor> descriptors = registerOnReconnect\n        .getCurrentDescriptors();\n    if (descriptors != null) {\n      for (CoreDescriptor descriptor : descriptors) {\n        descriptor.getCloudDescriptor().setLeader(false);\n      }\n    }\n  }\n\n","sourceOld":"  private void markAllAsNotLeader(\n      final CurrentCoreDescriptorProvider registerOnReconnect) {\n    List<CoreDescriptor> descriptors = registerOnReconnect\n        .getCurrentDescriptors();\n    if (descriptors != null) {\n      for (CoreDescriptor descriptor : descriptors) {\n        descriptor.getCloudDescriptor().isLeader = false;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"605f94f466b936ef47220109e97eea240dff2442","date":1447425207,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#markAllAsNotLeader(CurrentCoreDescriptorProvider).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#markAllAsNotLeader(CurrentCoreDescriptorProvider).mjava","sourceNew":"  private void markAllAsNotLeader(\n      final CurrentCoreDescriptorProvider registerOnReconnect) {\n    List<CoreDescriptor> descriptors = registerOnReconnect\n        .getCurrentDescriptors();\n    if (descriptors != null) {\n      for (CoreDescriptor descriptor : descriptors) {\n        descriptor.getCloudDescriptor().setLeader(false);\n        descriptor.getCloudDescriptor().setHasRegistered(false);\n      }\n    }\n  }\n\n","sourceOld":"  private void markAllAsNotLeader(\n      final CurrentCoreDescriptorProvider registerOnReconnect) {\n    List<CoreDescriptor> descriptors = registerOnReconnect\n        .getCurrentDescriptors();\n    if (descriptors != null) {\n      for (CoreDescriptor descriptor : descriptors) {\n        descriptor.getCloudDescriptor().setLeader(false);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c560208bc8842ee884b76b08784ccb132f05b48","date":1585344697,"type":5,"author":"Mike","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#markAllAsNotLeader(Supplier[List[CoreDescriptor]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#markAllAsNotLeader(CurrentCoreDescriptorProvider).mjava","sourceNew":"  private void markAllAsNotLeader(final Supplier<List<CoreDescriptor>> registerOnReconnect) {\n    List<CoreDescriptor> descriptors = registerOnReconnect.get();\n    if (descriptors != null) {\n      for (CoreDescriptor descriptor : descriptors) {\n        descriptor.getCloudDescriptor().setLeader(false);\n        descriptor.getCloudDescriptor().setHasRegistered(false);\n      }\n    }\n  }\n\n","sourceOld":"  private void markAllAsNotLeader(\n      final CurrentCoreDescriptorProvider registerOnReconnect) {\n    List<CoreDescriptor> descriptors = registerOnReconnect\n        .getCurrentDescriptors();\n    if (descriptors != null) {\n      for (CoreDescriptor descriptor : descriptors) {\n        descriptor.getCloudDescriptor().setLeader(false);\n        descriptor.getCloudDescriptor().setHasRegistered(false);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["a6378064655e76cd7b908b1cab4ce425b384b508"],"605f94f466b936ef47220109e97eea240dff2442":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"a6378064655e76cd7b908b1cab4ce425b384b508":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a6378064655e76cd7b908b1cab4ce425b384b508","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"1c560208bc8842ee884b76b08784ccb132f05b48":["605f94f466b936ef47220109e97eea240dff2442"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1c560208bc8842ee884b76b08784ccb132f05b48"]},"commit2Childs":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["605f94f466b936ef47220109e97eea240dff2442","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"605f94f466b936ef47220109e97eea240dff2442":["1c560208bc8842ee884b76b08784ccb132f05b48"],"a6378064655e76cd7b908b1cab4ce425b384b508":["849494cf2f3a96af5c8c84995108ddd8456fcd04","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"1c560208bc8842ee884b76b08784ccb132f05b48":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a6378064655e76cd7b908b1cab4ce425b384b508"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}