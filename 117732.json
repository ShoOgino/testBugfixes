{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#getSolrWriter(UpdateRequestProcessor,SolrResourceLoader,RequestInfo,SolrQueryRequest).mjava","commits":[{"id":"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c","date":1335805170,"type":1,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#getSolrWriter(UpdateRequestProcessor,SolrResourceLoader,RequestInfo,SolrQueryRequest).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#getSolrWriter(UpdateRequestProcessor,SolrResourceLoader,DataImporter.RequestParams,SolrQueryRequest).mjava","sourceNew":"  private SolrWriter getSolrWriter(final UpdateRequestProcessor processor,\n                                   final SolrResourceLoader loader, final RequestInfo requestParams, SolrQueryRequest req) {\n\n    return new SolrWriter(processor, req) {\n\n      @Override\n      public boolean upload(SolrInputDocument document) {\n        try {\n          return super.upload(document);\n        } catch (RuntimeException e) {\n          LOG.error( \"Exception while adding: \" + document, e);\n          return false;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private SolrWriter getSolrWriter(final UpdateRequestProcessor processor,\n                                   final SolrResourceLoader loader, final DataImporter.RequestParams requestParams, SolrQueryRequest req) {\n\n    return new SolrWriter(processor, req) {\n\n      @Override\n      public boolean upload(SolrInputDocument document) {\n        try {\n          return super.upload(document);\n        } catch (RuntimeException e) {\n          LOG.error( \"Exception while adding: \" + document, e);\n          return false;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68a568183b091ca52e6a2c0f9b615be5f3a0974a","date":1399311632,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#getSolrWriter(UpdateRequestProcessor,SolrResourceLoader,RequestInfo,SolrQueryRequest).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#getSolrWriter(UpdateRequestProcessor,SolrResourceLoader,RequestInfo,SolrQueryRequest).mjava","sourceNew":"  private DIHWriter getSolrWriter(final UpdateRequestProcessor processor,\n      final SolrResourceLoader loader, final RequestInfo requestParams,\n      SolrQueryRequest req) {\n    SolrParams reqParams = req.getParams();\n    String writerClassStr = null;\n    if (reqParams != null && reqParams.get(PARAM_WRITER_IMPL) != null) {\n      writerClassStr = (String) reqParams.get(PARAM_WRITER_IMPL);\n    }\n    DIHWriter writer;\n    if (writerClassStr != null\n        && !writerClassStr.equals(DEFAULT_WRITER_NAME)\n        && !writerClassStr.equals(DocBuilder.class.getPackage().getName() + \".\"\n            + DEFAULT_WRITER_NAME)) {\n      try {\n        @SuppressWarnings(\"unchecked\")\n        Class<DIHWriter> writerClass = DocBuilder.loadClass(writerClassStr, req.getCore());\n        Constructor<DIHWriter> cnstr = writerClass.getConstructor(new Class[] {\n            UpdateRequestProcessor.class, SolrQueryRequest.class});\n        return cnstr.newInstance((Object) processor, (Object) req);\n      } catch (Exception e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"Unable to load Writer implementation:\" + writerClassStr, e);\n      }\n    } else {\n      return new SolrWriter(processor, req) {\n        @Override\n        public boolean upload(SolrInputDocument document) {\n          try {\n            return super.upload(document);\n          } catch (RuntimeException e) {\n            LOG.error(\"Exception while adding: \" + document, e);\n            return false;\n          }\n        }\n      };\n    }\n  }\n\n","sourceOld":"  private SolrWriter getSolrWriter(final UpdateRequestProcessor processor,\n                                   final SolrResourceLoader loader, final RequestInfo requestParams, SolrQueryRequest req) {\n\n    return new SolrWriter(processor, req) {\n\n      @Override\n      public boolean upload(SolrInputDocument document) {\n        try {\n          return super.upload(document);\n        } catch (RuntimeException e) {\n          LOG.error( \"Exception while adding: \" + document, e);\n          return false;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#getSolrWriter(UpdateRequestProcessor,SolrResourceLoader,RequestInfo,SolrQueryRequest).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#getSolrWriter(UpdateRequestProcessor,SolrResourceLoader,RequestInfo,SolrQueryRequest).mjava","sourceNew":"  private DIHWriter getSolrWriter(final UpdateRequestProcessor processor,\n      final SolrResourceLoader loader, final RequestInfo requestParams,\n      SolrQueryRequest req) {\n    SolrParams reqParams = req.getParams();\n    String writerClassStr = null;\n    if (reqParams != null && reqParams.get(PARAM_WRITER_IMPL) != null) {\n      writerClassStr = (String) reqParams.get(PARAM_WRITER_IMPL);\n    }\n    DIHWriter writer;\n    if (writerClassStr != null\n        && !writerClassStr.equals(DEFAULT_WRITER_NAME)\n        && !writerClassStr.equals(DocBuilder.class.getPackage().getName() + \".\"\n            + DEFAULT_WRITER_NAME)) {\n      try {\n        @SuppressWarnings(\"unchecked\")\n        Class<DIHWriter> writerClass = DocBuilder.loadClass(writerClassStr, req.getCore());\n        Constructor<DIHWriter> cnstr = writerClass.getConstructor(new Class[] {\n            UpdateRequestProcessor.class, SolrQueryRequest.class});\n        return cnstr.newInstance((Object) processor, (Object) req);\n      } catch (Exception e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"Unable to load Writer implementation:\" + writerClassStr, e);\n      }\n    } else {\n      return new SolrWriter(processor, req) {\n        @Override\n        public boolean upload(SolrInputDocument document) {\n          try {\n            return super.upload(document);\n          } catch (RuntimeException e) {\n            log.error(\"Exception while adding: \" + document, e);\n            return false;\n          }\n        }\n      };\n    }\n  }\n\n","sourceOld":"  private DIHWriter getSolrWriter(final UpdateRequestProcessor processor,\n      final SolrResourceLoader loader, final RequestInfo requestParams,\n      SolrQueryRequest req) {\n    SolrParams reqParams = req.getParams();\n    String writerClassStr = null;\n    if (reqParams != null && reqParams.get(PARAM_WRITER_IMPL) != null) {\n      writerClassStr = (String) reqParams.get(PARAM_WRITER_IMPL);\n    }\n    DIHWriter writer;\n    if (writerClassStr != null\n        && !writerClassStr.equals(DEFAULT_WRITER_NAME)\n        && !writerClassStr.equals(DocBuilder.class.getPackage().getName() + \".\"\n            + DEFAULT_WRITER_NAME)) {\n      try {\n        @SuppressWarnings(\"unchecked\")\n        Class<DIHWriter> writerClass = DocBuilder.loadClass(writerClassStr, req.getCore());\n        Constructor<DIHWriter> cnstr = writerClass.getConstructor(new Class[] {\n            UpdateRequestProcessor.class, SolrQueryRequest.class});\n        return cnstr.newInstance((Object) processor, (Object) req);\n      } catch (Exception e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"Unable to load Writer implementation:\" + writerClassStr, e);\n      }\n    } else {\n      return new SolrWriter(processor, req) {\n        @Override\n        public boolean upload(SolrInputDocument document) {\n          try {\n            return super.upload(document);\n          } catch (RuntimeException e) {\n            LOG.error(\"Exception while adding: \" + document, e);\n            return false;\n          }\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#getSolrWriter(UpdateRequestProcessor,SolrResourceLoader,RequestInfo,SolrQueryRequest).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#getSolrWriter(UpdateRequestProcessor,SolrResourceLoader,RequestInfo,SolrQueryRequest).mjava","sourceNew":"  private DIHWriter getSolrWriter(final UpdateRequestProcessor processor,\n      final SolrResourceLoader loader, final RequestInfo requestParams,\n      SolrQueryRequest req) {\n    SolrParams reqParams = req.getParams();\n    String writerClassStr = null;\n    if (reqParams != null && reqParams.get(PARAM_WRITER_IMPL) != null) {\n      writerClassStr = (String) reqParams.get(PARAM_WRITER_IMPL);\n    }\n    DIHWriter writer;\n    if (writerClassStr != null\n        && !writerClassStr.equals(DEFAULT_WRITER_NAME)\n        && !writerClassStr.equals(DocBuilder.class.getPackage().getName() + \".\"\n            + DEFAULT_WRITER_NAME)) {\n      try {\n        Class<DIHWriter> writerClass = DocBuilder.loadClass(writerClassStr, req.getCore());\n        Constructor<DIHWriter> cnstr = writerClass.getConstructor(new Class[] {\n            UpdateRequestProcessor.class, SolrQueryRequest.class});\n        return cnstr.newInstance((Object) processor, (Object) req);\n      } catch (Exception e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"Unable to load Writer implementation:\" + writerClassStr, e);\n      }\n    } else {\n      return new SolrWriter(processor, req) {\n        @Override\n        public boolean upload(SolrInputDocument document) {\n          try {\n            return super.upload(document);\n          } catch (RuntimeException e) {\n            log.error(\"Exception while adding: \" + document, e);\n            return false;\n          }\n        }\n      };\n    }\n  }\n\n","sourceOld":"  private DIHWriter getSolrWriter(final UpdateRequestProcessor processor,\n      final SolrResourceLoader loader, final RequestInfo requestParams,\n      SolrQueryRequest req) {\n    SolrParams reqParams = req.getParams();\n    String writerClassStr = null;\n    if (reqParams != null && reqParams.get(PARAM_WRITER_IMPL) != null) {\n      writerClassStr = (String) reqParams.get(PARAM_WRITER_IMPL);\n    }\n    DIHWriter writer;\n    if (writerClassStr != null\n        && !writerClassStr.equals(DEFAULT_WRITER_NAME)\n        && !writerClassStr.equals(DocBuilder.class.getPackage().getName() + \".\"\n            + DEFAULT_WRITER_NAME)) {\n      try {\n        @SuppressWarnings(\"unchecked\")\n        Class<DIHWriter> writerClass = DocBuilder.loadClass(writerClassStr, req.getCore());\n        Constructor<DIHWriter> cnstr = writerClass.getConstructor(new Class[] {\n            UpdateRequestProcessor.class, SolrQueryRequest.class});\n        return cnstr.newInstance((Object) processor, (Object) req);\n      } catch (Exception e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"Unable to load Writer implementation:\" + writerClassStr, e);\n      }\n    } else {\n      return new SolrWriter(processor, req) {\n        @Override\n        public boolean upload(SolrInputDocument document) {\n          try {\n            return super.upload(document);\n          } catch (RuntimeException e) {\n            log.error(\"Exception while adding: \" + document, e);\n            return false;\n          }\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#getSolrWriter(UpdateRequestProcessor,SolrResourceLoader,RequestInfo,SolrQueryRequest).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#getSolrWriter(UpdateRequestProcessor,SolrResourceLoader,RequestInfo,SolrQueryRequest).mjava","sourceNew":"  private DIHWriter getSolrWriter(final UpdateRequestProcessor processor,\n      final SolrResourceLoader loader, final RequestInfo requestParams,\n      SolrQueryRequest req) {\n    SolrParams reqParams = req.getParams();\n    String writerClassStr = null;\n    if (reqParams != null && reqParams.get(PARAM_WRITER_IMPL) != null) {\n      writerClassStr = (String) reqParams.get(PARAM_WRITER_IMPL);\n    }\n    DIHWriter writer;\n    if (writerClassStr != null\n        && !writerClassStr.equals(DEFAULT_WRITER_NAME)\n        && !writerClassStr.equals(DocBuilder.class.getPackage().getName() + \".\"\n            + DEFAULT_WRITER_NAME)) {\n      try {\n        @SuppressWarnings(\"unchecked\")\n        Class<DIHWriter> writerClass = DocBuilder.loadClass(writerClassStr, req.getCore());\n        Constructor<DIHWriter> cnstr = writerClass.getConstructor(new Class[] {\n            UpdateRequestProcessor.class, SolrQueryRequest.class});\n        return cnstr.newInstance((Object) processor, (Object) req);\n      } catch (Exception e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"Unable to load Writer implementation:\" + writerClassStr, e);\n      }\n    } else {\n      return new SolrWriter(processor, req) {\n        @Override\n        public boolean upload(SolrInputDocument document) {\n          try {\n            return super.upload(document);\n          } catch (RuntimeException e) {\n            log.error(\"Exception while adding: \" + document, e);\n            return false;\n          }\n        }\n      };\n    }\n  }\n\n","sourceOld":"  private DIHWriter getSolrWriter(final UpdateRequestProcessor processor,\n      final SolrResourceLoader loader, final RequestInfo requestParams,\n      SolrQueryRequest req) {\n    SolrParams reqParams = req.getParams();\n    String writerClassStr = null;\n    if (reqParams != null && reqParams.get(PARAM_WRITER_IMPL) != null) {\n      writerClassStr = (String) reqParams.get(PARAM_WRITER_IMPL);\n    }\n    DIHWriter writer;\n    if (writerClassStr != null\n        && !writerClassStr.equals(DEFAULT_WRITER_NAME)\n        && !writerClassStr.equals(DocBuilder.class.getPackage().getName() + \".\"\n            + DEFAULT_WRITER_NAME)) {\n      try {\n        Class<DIHWriter> writerClass = DocBuilder.loadClass(writerClassStr, req.getCore());\n        Constructor<DIHWriter> cnstr = writerClass.getConstructor(new Class[] {\n            UpdateRequestProcessor.class, SolrQueryRequest.class});\n        return cnstr.newInstance((Object) processor, (Object) req);\n      } catch (Exception e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"Unable to load Writer implementation:\" + writerClassStr, e);\n      }\n    } else {\n      return new SolrWriter(processor, req) {\n        @Override\n        public boolean upload(SolrInputDocument document) {\n          try {\n            return super.upload(document);\n          } catch (RuntimeException e) {\n            log.error(\"Exception while adding: \" + document, e);\n            return false;\n          }\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#getSolrWriter(UpdateRequestProcessor,SolrResourceLoader,RequestInfo,SolrQueryRequest).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#getSolrWriter(UpdateRequestProcessor,SolrResourceLoader,RequestInfo,SolrQueryRequest).mjava","sourceNew":"  private DIHWriter getSolrWriter(final UpdateRequestProcessor processor,\n      final SolrResourceLoader loader, final RequestInfo requestParams,\n      SolrQueryRequest req) {\n    SolrParams reqParams = req.getParams();\n    String writerClassStr = null;\n    if (reqParams != null && reqParams.get(PARAM_WRITER_IMPL) != null) {\n      writerClassStr = (String) reqParams.get(PARAM_WRITER_IMPL);\n    }\n    DIHWriter writer;\n    if (writerClassStr != null\n        && !writerClassStr.equals(DEFAULT_WRITER_NAME)\n        && !writerClassStr.equals(DocBuilder.class.getPackage().getName() + \".\"\n            + DEFAULT_WRITER_NAME)) {\n      try {\n        @SuppressWarnings(\"unchecked\")\n        Class<DIHWriter> writerClass = DocBuilder.loadClass(writerClassStr, req.getCore());\n        Constructor<DIHWriter> cnstr = writerClass.getConstructor(new Class[] {\n            UpdateRequestProcessor.class, SolrQueryRequest.class});\n        return cnstr.newInstance((Object) processor, (Object) req);\n      } catch (Exception e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"Unable to load Writer implementation:\" + writerClassStr, e);\n      }\n    } else {\n      return new SolrWriter(processor, req) {\n        @Override\n        public boolean upload(SolrInputDocument document) {\n          try {\n            return super.upload(document);\n          } catch (RuntimeException e) {\n            log.error(\"Exception while adding: {}\", document, e);\n            return false;\n          }\n        }\n      };\n    }\n  }\n\n","sourceOld":"  private DIHWriter getSolrWriter(final UpdateRequestProcessor processor,\n      final SolrResourceLoader loader, final RequestInfo requestParams,\n      SolrQueryRequest req) {\n    SolrParams reqParams = req.getParams();\n    String writerClassStr = null;\n    if (reqParams != null && reqParams.get(PARAM_WRITER_IMPL) != null) {\n      writerClassStr = (String) reqParams.get(PARAM_WRITER_IMPL);\n    }\n    DIHWriter writer;\n    if (writerClassStr != null\n        && !writerClassStr.equals(DEFAULT_WRITER_NAME)\n        && !writerClassStr.equals(DocBuilder.class.getPackage().getName() + \".\"\n            + DEFAULT_WRITER_NAME)) {\n      try {\n        @SuppressWarnings(\"unchecked\")\n        Class<DIHWriter> writerClass = DocBuilder.loadClass(writerClassStr, req.getCore());\n        Constructor<DIHWriter> cnstr = writerClass.getConstructor(new Class[] {\n            UpdateRequestProcessor.class, SolrQueryRequest.class});\n        return cnstr.newInstance((Object) processor, (Object) req);\n      } catch (Exception e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"Unable to load Writer implementation:\" + writerClassStr, e);\n      }\n    } else {\n      return new SolrWriter(processor, req) {\n        @Override\n        public boolean upload(SolrInputDocument document) {\n          try {\n            return super.upload(document);\n          } catch (RuntimeException e) {\n            log.error(\"Exception while adding: \" + document, e);\n            return false;\n          }\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"024e13388acbf5562fcbb77a129620982a5e2d79","date":1591531835,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#getSolrWriter(UpdateRequestProcessor,SolrResourceLoader,RequestInfo,SolrQueryRequest).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#getSolrWriter(UpdateRequestProcessor,SolrResourceLoader,RequestInfo,SolrQueryRequest).mjava","sourceNew":"  private DIHWriter getSolrWriter(final UpdateRequestProcessor processor,\n      final SolrResourceLoader loader, final RequestInfo requestParams,\n      SolrQueryRequest req) {\n    SolrParams reqParams = req.getParams();\n    String writerClassStr = null;\n    if (reqParams != null && reqParams.get(PARAM_WRITER_IMPL) != null) {\n      writerClassStr = reqParams.get(PARAM_WRITER_IMPL);\n    }\n    DIHWriter writer;\n    if (writerClassStr != null\n        && !writerClassStr.equals(DEFAULT_WRITER_NAME)\n        && !writerClassStr.equals(DocBuilder.class.getPackage().getName() + \".\"\n            + DEFAULT_WRITER_NAME)) {\n      try {\n        @SuppressWarnings(\"unchecked\")\n        Class<DIHWriter> writerClass = DocBuilder.loadClass(writerClassStr, req.getCore());\n        @SuppressWarnings({\"rawtypes\"})\n        Constructor<DIHWriter> cnstr = writerClass.getConstructor(new Class[] {\n            UpdateRequestProcessor.class, SolrQueryRequest.class});\n        return cnstr.newInstance((Object) processor, (Object) req);\n      } catch (Exception e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"Unable to load Writer implementation:\" + writerClassStr, e);\n      }\n    } else {\n      return new SolrWriter(processor, req) {\n        @Override\n        public boolean upload(SolrInputDocument document) {\n          try {\n            return super.upload(document);\n          } catch (RuntimeException e) {\n            log.error(\"Exception while adding: {}\", document, e);\n            return false;\n          }\n        }\n      };\n    }\n  }\n\n","sourceOld":"  private DIHWriter getSolrWriter(final UpdateRequestProcessor processor,\n      final SolrResourceLoader loader, final RequestInfo requestParams,\n      SolrQueryRequest req) {\n    SolrParams reqParams = req.getParams();\n    String writerClassStr = null;\n    if (reqParams != null && reqParams.get(PARAM_WRITER_IMPL) != null) {\n      writerClassStr = (String) reqParams.get(PARAM_WRITER_IMPL);\n    }\n    DIHWriter writer;\n    if (writerClassStr != null\n        && !writerClassStr.equals(DEFAULT_WRITER_NAME)\n        && !writerClassStr.equals(DocBuilder.class.getPackage().getName() + \".\"\n            + DEFAULT_WRITER_NAME)) {\n      try {\n        @SuppressWarnings(\"unchecked\")\n        Class<DIHWriter> writerClass = DocBuilder.loadClass(writerClassStr, req.getCore());\n        Constructor<DIHWriter> cnstr = writerClass.getConstructor(new Class[] {\n            UpdateRequestProcessor.class, SolrQueryRequest.class});\n        return cnstr.newInstance((Object) processor, (Object) req);\n      } catch (Exception e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"Unable to load Writer implementation:\" + writerClassStr, e);\n      }\n    } else {\n      return new SolrWriter(processor, req) {\n        @Override\n        public boolean upload(SolrInputDocument document) {\n          try {\n            return super.upload(document);\n          } catch (RuntimeException e) {\n            log.error(\"Exception while adding: {}\", document, e);\n            return false;\n          }\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#getSolrWriter(UpdateRequestProcessor,SolrResourceLoader,RequestInfo,SolrQueryRequest).mjava","sourceNew":null,"sourceOld":"  private DIHWriter getSolrWriter(final UpdateRequestProcessor processor,\n      final SolrResourceLoader loader, final RequestInfo requestParams,\n      SolrQueryRequest req) {\n    SolrParams reqParams = req.getParams();\n    String writerClassStr = null;\n    if (reqParams != null && reqParams.get(PARAM_WRITER_IMPL) != null) {\n      writerClassStr = reqParams.get(PARAM_WRITER_IMPL);\n    }\n    DIHWriter writer;\n    if (writerClassStr != null\n        && !writerClassStr.equals(DEFAULT_WRITER_NAME)\n        && !writerClassStr.equals(DocBuilder.class.getPackage().getName() + \".\"\n            + DEFAULT_WRITER_NAME)) {\n      try {\n        @SuppressWarnings(\"unchecked\")\n        Class<DIHWriter> writerClass = DocBuilder.loadClass(writerClassStr, req.getCore());\n        @SuppressWarnings({\"rawtypes\"})\n        Constructor<DIHWriter> cnstr = writerClass.getConstructor(new Class[] {\n            UpdateRequestProcessor.class, SolrQueryRequest.class});\n        return cnstr.newInstance((Object) processor, (Object) req);\n      } catch (Exception e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n            \"Unable to load Writer implementation:\" + writerClassStr, e);\n      }\n    } else {\n      return new SolrWriter(processor, req) {\n        @Override\n        public boolean upload(SolrInputDocument document) {\n          try {\n            return super.upload(document);\n          } catch (RuntimeException e) {\n            log.error(\"Exception while adding: {}\", document, e);\n            return false;\n          }\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"68a568183b091ca52e6a2c0f9b615be5f3a0974a":["4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["024e13388acbf5562fcbb77a129620982a5e2d79"],"024e13388acbf5562fcbb77a129620982a5e2d79":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["68a568183b091ca52e6a2c0f9b615be5f3a0974a"]},"commit2Childs":{"68a568183b091ca52e6a2c0f9b615be5f3a0974a":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c":["68a568183b091ca52e6a2c0f9b615be5f3a0974a"],"024e13388acbf5562fcbb77a129620982a5e2d79":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["024e13388acbf5562fcbb77a129620982a5e2d79"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}