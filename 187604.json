{"path":"solr/contrib/dataimporthandler-extras/src/main/java/org/apache/solr/handler/dataimport/MailEntityProcessor#connectToMailBox().mjava","commits":[{"id":"d20d5e40789b1c42f4f926e3174b271256c43657","date":1301641092,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/main/java/org/apache/solr/handler/dataimport/MailEntityProcessor#connectToMailBox().mjava","pathOld":"solr/contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/MailEntityProcessor#connectToMailBox().mjava","sourceNew":"  private boolean connectToMailBox() {\n    try {\n      Properties props = new Properties();\n      props.setProperty(\"mail.store.protocol\", protocol);\n      props.setProperty(\"mail.imap.fetchsize\", \"\" + fetchSize);\n      props.setProperty(\"mail.imap.timeout\", \"\" + rTimeout);\n      props.setProperty(\"mail.imap.connectiontimeout\", \"\" + cTimeout);\n      Session session = Session.getDefaultInstance(props, null);\n      mailbox = session.getStore(protocol);\n      mailbox.connect(host, user, password);\n      LOG.info(\"Connected to mailbox\");\n      return true;\n    } catch (MessagingException e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"Connection failed\", e);\n    }\n  }\n\n","sourceOld":"  private boolean connectToMailBox() {\n    try {\n      Properties props = new Properties();\n      props.setProperty(\"mail.store.protocol\", protocol);\n      props.setProperty(\"mail.imap.fetchsize\", \"\" + fetchSize);\n      props.setProperty(\"mail.imap.timeout\", \"\" + rTimeout);\n      props.setProperty(\"mail.imap.connectiontimeout\", \"\" + cTimeout);\n      Session session = Session.getDefaultInstance(props, null);\n      mailbox = session.getStore(protocol);\n      mailbox.connect(host, user, password);\n      LOG.info(\"Connected to mailbox\");\n      return true;\n    } catch (MessagingException e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"Connection failed\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#connectToMailBox().mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/main/java/org/apache/solr/handler/dataimport/MailEntityProcessor#connectToMailBox().mjava","sourceNew":"  private boolean connectToMailBox() {\n    try {\n      Properties props = new Properties();\n      props.setProperty(\"mail.store.protocol\", protocol);\n      props.setProperty(\"mail.imap.fetchsize\", \"\" + fetchSize);\n      props.setProperty(\"mail.imap.timeout\", \"\" + rTimeout);\n      props.setProperty(\"mail.imap.connectiontimeout\", \"\" + cTimeout);\n      Session session = Session.getDefaultInstance(props, null);\n      mailbox = session.getStore(protocol);\n      mailbox.connect(host, user, password);\n      LOG.info(\"Connected to mailbox\");\n      return true;\n    } catch (MessagingException e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"Connection failed\", e);\n    }\n  }\n\n","sourceOld":"  private boolean connectToMailBox() {\n    try {\n      Properties props = new Properties();\n      props.setProperty(\"mail.store.protocol\", protocol);\n      props.setProperty(\"mail.imap.fetchsize\", \"\" + fetchSize);\n      props.setProperty(\"mail.imap.timeout\", \"\" + rTimeout);\n      props.setProperty(\"mail.imap.connectiontimeout\", \"\" + cTimeout);\n      Session session = Session.getDefaultInstance(props, null);\n      mailbox = session.getStore(protocol);\n      mailbox.connect(host, user, password);\n      LOG.info(\"Connected to mailbox\");\n      return true;\n    } catch (MessagingException e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"Connection failed\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["d20d5e40789b1c42f4f926e3174b271256c43657","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d20d5e40789b1c42f4f926e3174b271256c43657":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","d20d5e40789b1c42f4f926e3174b271256c43657","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d20d5e40789b1c42f4f926e3174b271256c43657":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}