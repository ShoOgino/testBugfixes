{"path":"lucene/core/src/java/org/apache/lucene/search/ReqExclScorer#twoPhaseIterator().mjava","commits":[{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ReqExclScorer#twoPhaseIterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ReqExclScorer#asTwoPhaseIterator().mjava","sourceNew":"  @Override\n  public TwoPhaseIterator twoPhaseIterator() {\n    if (reqTwoPhaseIterator == null) {\n      return null;\n    }\n    return new TwoPhaseIterator(reqApproximation) {\n\n      @Override\n      public boolean matches() throws IOException {\n        final int doc = reqApproximation.docID();\n        // check if the doc is not excluded\n        int exclDoc = exclApproximation.docID();\n        if (exclDoc < doc) {\n          exclDoc = exclApproximation.advance(doc);\n        }\n        return ReqExclScorer.matches(doc, exclDoc, reqTwoPhaseIterator, exclTwoPhaseIterator);\n      }\n\n      @Override\n      public float matchCost() {\n        return reqTwoPhaseIterator.matchCost(); // TODO: also use cost of exclApproximation.advance()\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public TwoPhaseIterator asTwoPhaseIterator() {\n    if (reqTwoPhaseIterator == null) {\n      return null;\n    }\n    return new TwoPhaseIterator(reqApproximation) {\n\n      @Override\n      public boolean matches() throws IOException {\n        final int doc = reqApproximation.docID();\n        // check if the doc is not excluded\n        int exclDoc = exclApproximation.docID();\n        if (exclDoc < doc) {\n          exclDoc = exclApproximation.advance(doc);\n        }\n        return ReqExclScorer.matches(doc, exclDoc, reqTwoPhaseIterator, exclTwoPhaseIterator);\n      }\n\n      @Override\n      public float matchCost() {\n        return reqTwoPhaseIterator.matchCost(); // TODO: also use cost of exclApproximation.advance()\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"507fb221fedb6f40fd72e9764803053dd3a2ba15","date":1450357860,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ReqExclScorer#twoPhaseIterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ReqExclScorer#twoPhaseIterator().mjava","sourceNew":"  @Override\n  public TwoPhaseIterator twoPhaseIterator() {\n    final float matchCost = matchCost(reqApproximation, reqTwoPhaseIterator, exclApproximation, exclTwoPhaseIterator);\n\n    if (reqTwoPhaseIterator == null\n        || (exclTwoPhaseIterator != null && reqTwoPhaseIterator.matchCost() <= exclTwoPhaseIterator.matchCost())) {\n      // reqTwoPhaseIterator is LESS costly than exclTwoPhaseIterator, check it first\n      return new TwoPhaseIterator(reqApproximation) {\n\n        @Override\n        public boolean matches() throws IOException {\n          final int doc = reqApproximation.docID();\n          // check if the doc is not excluded\n          int exclDoc = exclApproximation.docID();\n          if (exclDoc < doc) {\n            exclDoc = exclApproximation.advance(doc);\n          }\n          if (exclDoc != doc) {\n            return matchesOrNull(reqTwoPhaseIterator);\n          }\n          return matchesOrNull(reqTwoPhaseIterator) && !matchesOrNull(exclTwoPhaseIterator);\n        }\n\n        @Override\n        public float matchCost() {\n          return matchCost;\n        }\n      };\n    } else {\n      // reqTwoPhaseIterator is MORE costly than exclTwoPhaseIterator, check it first\n      return new TwoPhaseIterator(reqApproximation) {\n\n        @Override\n        public boolean matches() throws IOException {\n          final int doc = reqApproximation.docID();\n          // check if the doc is not excluded\n          int exclDoc = exclApproximation.docID();\n          if (exclDoc < doc) {\n            exclDoc = exclApproximation.advance(doc);\n          }\n          if (exclDoc != doc) {\n            return matchesOrNull(reqTwoPhaseIterator);\n          }\n          return !matchesOrNull(exclTwoPhaseIterator) && matchesOrNull(reqTwoPhaseIterator);\n        }\n\n        @Override\n        public float matchCost() {\n          return matchCost;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  @Override\n  public TwoPhaseIterator twoPhaseIterator() {\n    if (reqTwoPhaseIterator == null) {\n      return null;\n    }\n    return new TwoPhaseIterator(reqApproximation) {\n\n      @Override\n      public boolean matches() throws IOException {\n        final int doc = reqApproximation.docID();\n        // check if the doc is not excluded\n        int exclDoc = exclApproximation.docID();\n        if (exclDoc < doc) {\n          exclDoc = exclApproximation.advance(doc);\n        }\n        return ReqExclScorer.matches(doc, exclDoc, reqTwoPhaseIterator, exclTwoPhaseIterator);\n      }\n\n      @Override\n      public float matchCost() {\n        return reqTwoPhaseIterator.matchCost(); // TODO: also use cost of exclApproximation.advance()\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["9ba7cb8e9c5afcfafbfbf4c86275ef954611c5e5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6ebca95664f67aa366de36a7e90a109f630fac4e","date":1490974101,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ReqExclScorer#twoPhaseIterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ReqExclScorer#twoPhaseIterator().mjava","sourceNew":"  @Override\n  public TwoPhaseIterator twoPhaseIterator() {\n    final float matchCost = matchCost(reqApproximation, reqTwoPhaseIterator, exclApproximation, exclTwoPhaseIterator);\n\n    if (reqTwoPhaseIterator == null\n        || (exclTwoPhaseIterator != null && reqTwoPhaseIterator.matchCost() <= exclTwoPhaseIterator.matchCost())) {\n      // reqTwoPhaseIterator is LESS costly than exclTwoPhaseIterator, check it first\n      return new TwoPhaseIterator(reqApproximation) {\n\n        @Override\n        public boolean matches() throws IOException {\n          final int doc = reqApproximation.docID();\n          // check if the doc is not excluded\n          int exclDoc = exclApproximation.docID();\n          if (exclDoc < doc) {\n            exclDoc = exclApproximation.advance(doc);\n          }\n          if (exclDoc != doc) {\n            return matchesOrNull(reqTwoPhaseIterator);\n          }\n          return matchesOrNull(reqTwoPhaseIterator) && !matchesOrNull(exclTwoPhaseIterator);\n        }\n\n        @Override\n        public float matchCost() {\n          return matchCost;\n        }\n      };\n    } else {\n      // reqTwoPhaseIterator is MORE costly than exclTwoPhaseIterator, check it last\n      return new TwoPhaseIterator(reqApproximation) {\n\n        @Override\n        public boolean matches() throws IOException {\n          final int doc = reqApproximation.docID();\n          // check if the doc is not excluded\n          int exclDoc = exclApproximation.docID();\n          if (exclDoc < doc) {\n            exclDoc = exclApproximation.advance(doc);\n          }\n          if (exclDoc != doc) {\n            return matchesOrNull(reqTwoPhaseIterator);\n          }\n          return !matchesOrNull(exclTwoPhaseIterator) && matchesOrNull(reqTwoPhaseIterator);\n        }\n\n        @Override\n        public float matchCost() {\n          return matchCost;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  @Override\n  public TwoPhaseIterator twoPhaseIterator() {\n    final float matchCost = matchCost(reqApproximation, reqTwoPhaseIterator, exclApproximation, exclTwoPhaseIterator);\n\n    if (reqTwoPhaseIterator == null\n        || (exclTwoPhaseIterator != null && reqTwoPhaseIterator.matchCost() <= exclTwoPhaseIterator.matchCost())) {\n      // reqTwoPhaseIterator is LESS costly than exclTwoPhaseIterator, check it first\n      return new TwoPhaseIterator(reqApproximation) {\n\n        @Override\n        public boolean matches() throws IOException {\n          final int doc = reqApproximation.docID();\n          // check if the doc is not excluded\n          int exclDoc = exclApproximation.docID();\n          if (exclDoc < doc) {\n            exclDoc = exclApproximation.advance(doc);\n          }\n          if (exclDoc != doc) {\n            return matchesOrNull(reqTwoPhaseIterator);\n          }\n          return matchesOrNull(reqTwoPhaseIterator) && !matchesOrNull(exclTwoPhaseIterator);\n        }\n\n        @Override\n        public float matchCost() {\n          return matchCost;\n        }\n      };\n    } else {\n      // reqTwoPhaseIterator is MORE costly than exclTwoPhaseIterator, check it first\n      return new TwoPhaseIterator(reqApproximation) {\n\n        @Override\n        public boolean matches() throws IOException {\n          final int doc = reqApproximation.docID();\n          // check if the doc is not excluded\n          int exclDoc = exclApproximation.docID();\n          if (exclDoc < doc) {\n            exclDoc = exclApproximation.advance(doc);\n          }\n          if (exclDoc != doc) {\n            return matchesOrNull(reqTwoPhaseIterator);\n          }\n          return !matchesOrNull(exclTwoPhaseIterator) && matchesOrNull(reqTwoPhaseIterator);\n        }\n\n        @Override\n        public float matchCost() {\n          return matchCost;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba7cb8e9c5afcfafbfbf4c86275ef954611c5e5","date":1491045405,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ReqExclScorer#twoPhaseIterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ReqExclScorer#twoPhaseIterator().mjava","sourceNew":"  @Override\n  public TwoPhaseIterator twoPhaseIterator() {\n    final float matchCost = matchCost(reqApproximation, reqTwoPhaseIterator, exclApproximation, exclTwoPhaseIterator);\n\n    if (reqTwoPhaseIterator == null\n        || (exclTwoPhaseIterator != null && reqTwoPhaseIterator.matchCost() <= exclTwoPhaseIterator.matchCost())) {\n      // reqTwoPhaseIterator is LESS costly than exclTwoPhaseIterator, check it first\n      return new TwoPhaseIterator(reqApproximation) {\n\n        @Override\n        public boolean matches() throws IOException {\n          final int doc = reqApproximation.docID();\n          // check if the doc is not excluded\n          int exclDoc = exclApproximation.docID();\n          if (exclDoc < doc) {\n            exclDoc = exclApproximation.advance(doc);\n          }\n          if (exclDoc != doc) {\n            return matchesOrNull(reqTwoPhaseIterator);\n          }\n          return matchesOrNull(reqTwoPhaseIterator) && !matchesOrNull(exclTwoPhaseIterator);\n        }\n\n        @Override\n        public float matchCost() {\n          return matchCost;\n        }\n      };\n    } else {\n      // reqTwoPhaseIterator is MORE costly than exclTwoPhaseIterator, check it last\n      return new TwoPhaseIterator(reqApproximation) {\n\n        @Override\n        public boolean matches() throws IOException {\n          final int doc = reqApproximation.docID();\n          // check if the doc is not excluded\n          int exclDoc = exclApproximation.docID();\n          if (exclDoc < doc) {\n            exclDoc = exclApproximation.advance(doc);\n          }\n          if (exclDoc != doc) {\n            return matchesOrNull(reqTwoPhaseIterator);\n          }\n          return !matchesOrNull(exclTwoPhaseIterator) && matchesOrNull(reqTwoPhaseIterator);\n        }\n\n        @Override\n        public float matchCost() {\n          return matchCost;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  @Override\n  public TwoPhaseIterator twoPhaseIterator() {\n    final float matchCost = matchCost(reqApproximation, reqTwoPhaseIterator, exclApproximation, exclTwoPhaseIterator);\n\n    if (reqTwoPhaseIterator == null\n        || (exclTwoPhaseIterator != null && reqTwoPhaseIterator.matchCost() <= exclTwoPhaseIterator.matchCost())) {\n      // reqTwoPhaseIterator is LESS costly than exclTwoPhaseIterator, check it first\n      return new TwoPhaseIterator(reqApproximation) {\n\n        @Override\n        public boolean matches() throws IOException {\n          final int doc = reqApproximation.docID();\n          // check if the doc is not excluded\n          int exclDoc = exclApproximation.docID();\n          if (exclDoc < doc) {\n            exclDoc = exclApproximation.advance(doc);\n          }\n          if (exclDoc != doc) {\n            return matchesOrNull(reqTwoPhaseIterator);\n          }\n          return matchesOrNull(reqTwoPhaseIterator) && !matchesOrNull(exclTwoPhaseIterator);\n        }\n\n        @Override\n        public float matchCost() {\n          return matchCost;\n        }\n      };\n    } else {\n      // reqTwoPhaseIterator is MORE costly than exclTwoPhaseIterator, check it first\n      return new TwoPhaseIterator(reqApproximation) {\n\n        @Override\n        public boolean matches() throws IOException {\n          final int doc = reqApproximation.docID();\n          // check if the doc is not excluded\n          int exclDoc = exclApproximation.docID();\n          if (exclDoc < doc) {\n            exclDoc = exclApproximation.advance(doc);\n          }\n          if (exclDoc != doc) {\n            return matchesOrNull(reqTwoPhaseIterator);\n          }\n          return !matchesOrNull(exclTwoPhaseIterator) && matchesOrNull(reqTwoPhaseIterator);\n        }\n\n        @Override\n        public float matchCost() {\n          return matchCost;\n        }\n      };\n    }\n  }\n\n","bugFix":["507fb221fedb6f40fd72e9764803053dd3a2ba15"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6ebca95664f67aa366de36a7e90a109f630fac4e":["507fb221fedb6f40fd72e9764803053dd3a2ba15"],"9ba7cb8e9c5afcfafbfbf4c86275ef954611c5e5":["507fb221fedb6f40fd72e9764803053dd3a2ba15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"507fb221fedb6f40fd72e9764803053dd3a2ba15":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6ebca95664f67aa366de36a7e90a109f630fac4e"]},"commit2Childs":{"6ebca95664f67aa366de36a7e90a109f630fac4e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9ba7cb8e9c5afcfafbfbf4c86275ef954611c5e5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"507fb221fedb6f40fd72e9764803053dd3a2ba15":["6ebca95664f67aa366de36a7e90a109f630fac4e","9ba7cb8e9c5afcfafbfbf4c86275ef954611c5e5"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["507fb221fedb6f40fd72e9764803053dd3a2ba15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9ba7cb8e9c5afcfafbfbf4c86275ef954611c5e5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}