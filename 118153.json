{"path":"lucene/spatial3d/src/test/org/apache/lucene/bkdtree3d/TestGeo3DPointField#verify(double[],double[]).mjava","commits":[{"id":"f64b7098768253180859cd8faeae6b1a185b06ed","date":1441223971,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/bkdtree3d/TestGeo3DPointField#verify(double[],double[]).mjava","pathOld":"/dev/null","sourceNew":"  private static void verify(double[] lats, double[] lons) throws Exception {\n    int maxPointsInLeaf = TestUtil.nextInt(random(), 16, 2048);\n    int maxPointsSortInHeap = TestUtil.nextInt(random(), maxPointsInLeaf, 1024*1024);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n\n    PlanetModel planetModel;\n    if (random().nextBoolean()) {\n      planetModel = PlanetModel.WGS84;\n    } else {\n      planetModel = PlanetModel.SPHERE;\n    }\n\n    // Else we can get O(N^2) merging:\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < lats.length/100) {\n      iwc.setMaxBufferedDocs(lats.length/100);\n    }\n    final DocValuesFormat dvFormat = new Geo3DDocValuesFormat(planetModel, maxPointsInLeaf, maxPointsSortInHeap);\n    Codec codec = new Lucene53Codec() {\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          if (field.equals(\"point\")) {\n            return dvFormat;\n          } else {\n            return super.getDocValuesFormatForField(field);\n          }\n        }\n      };\n    iwc.setCodec(codec);\n    Directory dir;\n    if (lats.length > 100000) {\n      dir = newFSDirectory(createTempDir(\"TestBKDTree\"));\n    } else {\n      dir = newDirectory();\n    }\n    Set<Integer> deleted = new HashSet<>();\n    // RandomIndexWriter is too slow here:\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int id=0;id<lats.length;id++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      if (Double.isNaN(lats[id]) == false) {\n        doc.add(new Geo3DPointField(\"point\", planetModel, lats[id], lons[id]));\n      }\n      w.addDocument(doc);\n      if (id > 0 && random().nextInt(100) == 42) {\n        int idToDelete = random().nextInt(id);\n        w.deleteDocuments(new Term(\"id\", \"\"+idToDelete));\n        deleted.add(idToDelete);\n        if (VERBOSE) {\n          System.err.println(\"  delete id=\" + idToDelete);\n        }\n      }\n    }\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    final IndexReader r = DirectoryReader.open(w, true);\n    w.close();\n\n    // We can't wrap with \"exotic\" readers because the geo3d query must see the Geo3DDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n\n    int numThreads = TestUtil.nextInt(random(), 2, 5);\n\n    List<Thread> threads = new ArrayList<>();\n    final int iters = atLeast(100);\n\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    final AtomicBoolean failed = new AtomicBoolean();\n\n    for(int i=0;i<numThreads;i++) {\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              _run();\n            } catch (Exception e) {\n              failed.set(true);\n              throw new RuntimeException(e);\n            }\n          }\n\n          private void _run() throws Exception {\n            startingGun.await();\n\n            NumericDocValues docIDToID = MultiDocValues.getNumericValues(r, \"id\");\n\n            for (int iter=0;iter<iters && failed.get() == false;iter++) {\n\n              GeoShape shape = randomShape(planetModel);\n\n              if (VERBOSE) {\n                System.err.println(\"\\n\" + Thread.currentThread() + \": TEST: iter=\" + iter + \" shape=\"+shape);\n              }\n              \n              Query query = new PointInGeo3DShapeQuery(planetModel, \"point\", shape);\n\n              if (VERBOSE) {\n                System.err.println(\"  using query: \" + query);\n              }\n\n              final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n\n              s.search(query, new SimpleCollector() {\n\n                  private int docBase;\n\n                  @Override\n                  public boolean needsScores() {\n                    return false;\n                  }\n\n                  @Override\n                  protected void doSetNextReader(LeafReaderContext context) throws IOException {\n                    docBase = context.docBase;\n                  }\n\n                  @Override\n                  public void collect(int doc) {\n                    hits.set(docBase+doc);\n                  }\n                });\n\n              if (VERBOSE) {\n                System.err.println(\"  hitCount: \" + hits.cardinality());\n              }\n      \n              for(int docID=0;docID<r.maxDoc();docID++) {\n                int id = (int) docIDToID.get(docID);\n                if (Double.isNaN(lats[id]) == false) {\n\n                  // Accurate point:\n                  GeoPoint point1 = new GeoPoint(planetModel, lats[id], lons[id]);\n\n                  // Quantized point (32 bits per dim):\n                  GeoPoint point2 = quantize(planetModel.getMaximumMagnitude(), point1);\n\n                  if (shape.isWithin(point1) != shape.isWithin(point2)) {\n                    if (VERBOSE) {\n                      System.out.println(\"  skip checking docID=\" + docID + \" quantization changed the expected result from \" + shape.isWithin(point1) + \" to \" + shape.isWithin(point2));\n                    }\n                    continue;\n                  }\n\n                  boolean expected = ((deleted.contains(id) == false) && shape.isWithin(point2));\n                  if (hits.get(docID) != expected) {\n                    fail(Thread.currentThread().getName() + \": iter=\" + iter + \" id=\" + id + \" docID=\" + docID + \" lat=\" + lats[id] + \" lon=\" + lons[id] + \" expected \" + expected + \" but got: \" + hits.get(docID) + \" deleted?=\" + deleted.contains(id) + \"\\n  point1=\" + point1 + \", iswithin=\"+shape.isWithin(point1)+\"\\n  point2=\" + point2 + \", iswithin=\"+shape.isWithin(point2) + \"\\n  query=\" + query);\n                  }\n                } else {\n                  assertFalse(hits.get(docID));\n                }\n\n              }\n            }\n          }\n        };\n      thread.setName(\"T\" + i);\n      thread.start();\n      threads.add(thread);\n    }\n    startingGun.countDown();\n    for(Thread thread : threads) {\n      thread.join();\n    }\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d8f71af177fad4bbfdf462d318247e573faac27f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d8f71af177fad4bbfdf462d318247e573faac27f","date":1441729530,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/bkdtree3d/TestGeo3DPointField#verify(double[],double[]).mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/bkdtree3d/TestGeo3DPointField#verify(double[],double[]).mjava","sourceNew":"  private static void verify(double[] lats, double[] lons) throws Exception {\n    int maxPointsInLeaf = TestUtil.nextInt(random(), 16, 2048);\n    int maxPointsSortInHeap = TestUtil.nextInt(random(), maxPointsInLeaf, 1024*1024);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n\n    PlanetModel planetModel = getPlanetModel();\n\n    // Else we can get O(N^2) merging:\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < lats.length/100) {\n      iwc.setMaxBufferedDocs(lats.length/100);\n    }\n    final DocValuesFormat dvFormat = new Geo3DDocValuesFormat(planetModel, maxPointsInLeaf, maxPointsSortInHeap);\n    Codec codec = new Lucene53Codec() {\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          if (field.equals(\"point\")) {\n            return dvFormat;\n          } else {\n            return super.getDocValuesFormatForField(field);\n          }\n        }\n      };\n    iwc.setCodec(codec);\n    Directory dir;\n    if (lats.length > 100000) {\n      dir = newFSDirectory(createTempDir(\"TestBKDTree\"));\n    } else {\n      dir = newDirectory();\n    }\n    Set<Integer> deleted = new HashSet<>();\n    // RandomIndexWriter is too slow here:\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int id=0;id<lats.length;id++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      if (Double.isNaN(lats[id]) == false) {\n        doc.add(new Geo3DPointField(\"point\", planetModel, lats[id], lons[id]));\n      }\n      w.addDocument(doc);\n      if (id > 0 && random().nextInt(100) == 42) {\n        int idToDelete = random().nextInt(id);\n        w.deleteDocuments(new Term(\"id\", \"\"+idToDelete));\n        deleted.add(idToDelete);\n        if (VERBOSE) {\n          System.err.println(\"  delete id=\" + idToDelete);\n        }\n      }\n    }\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    final IndexReader r = DirectoryReader.open(w, true);\n    w.close();\n\n    // We can't wrap with \"exotic\" readers because the geo3d query must see the Geo3DDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n\n    int numThreads = TestUtil.nextInt(random(), 2, 5);\n\n    List<Thread> threads = new ArrayList<>();\n    final int iters = atLeast(100);\n\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    final AtomicBoolean failed = new AtomicBoolean();\n\n    for(int i=0;i<numThreads;i++) {\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              _run();\n            } catch (Exception e) {\n              failed.set(true);\n              throw new RuntimeException(e);\n            }\n          }\n\n          private void _run() throws Exception {\n            startingGun.await();\n\n            NumericDocValues docIDToID = MultiDocValues.getNumericValues(r, \"id\");\n\n            for (int iter=0;iter<iters && failed.get() == false;iter++) {\n\n              GeoShape shape = randomShape(planetModel);\n\n              if (VERBOSE) {\n                System.err.println(\"\\n\" + Thread.currentThread() + \": TEST: iter=\" + iter + \" shape=\"+shape);\n              }\n              \n              Query query = new PointInGeo3DShapeQuery(planetModel, \"point\", shape);\n\n              if (VERBOSE) {\n                System.err.println(\"  using query: \" + query);\n              }\n\n              final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n\n              s.search(query, new SimpleCollector() {\n\n                  private int docBase;\n\n                  @Override\n                  public boolean needsScores() {\n                    return false;\n                  }\n\n                  @Override\n                  protected void doSetNextReader(LeafReaderContext context) throws IOException {\n                    docBase = context.docBase;\n                  }\n\n                  @Override\n                  public void collect(int doc) {\n                    hits.set(docBase+doc);\n                  }\n                });\n\n              if (VERBOSE) {\n                System.err.println(\"  hitCount: \" + hits.cardinality());\n              }\n      \n              for(int docID=0;docID<r.maxDoc();docID++) {\n                int id = (int) docIDToID.get(docID);\n                if (Double.isNaN(lats[id]) == false) {\n\n                  // Accurate point:\n                  GeoPoint point1 = new GeoPoint(planetModel, lats[id], lons[id]);\n\n                  // Quantized point (32 bits per dim):\n                  GeoPoint point2 = quantize(planetModel.getMaximumMagnitude(), point1);\n\n                  if (shape.isWithin(point1) != shape.isWithin(point2)) {\n                    if (VERBOSE) {\n                      System.out.println(\"  skip checking docID=\" + docID + \" quantization changed the expected result from \" + shape.isWithin(point1) + \" to \" + shape.isWithin(point2));\n                    }\n                    continue;\n                  }\n\n                  boolean expected = ((deleted.contains(id) == false) && shape.isWithin(point2));\n                  if (hits.get(docID) != expected) {\n                    fail(Thread.currentThread().getName() + \": iter=\" + iter + \" id=\" + id + \" docID=\" + docID + \" lat=\" + lats[id] + \" lon=\" + lons[id] + \" expected \" + expected + \" but got: \" + hits.get(docID) + \" deleted?=\" + deleted.contains(id) + \"\\n  point1=\" + point1 + \", iswithin=\"+shape.isWithin(point1)+\"\\n  point2=\" + point2 + \", iswithin=\"+shape.isWithin(point2) + \"\\n  query=\" + query);\n                  }\n                } else {\n                  assertFalse(hits.get(docID));\n                }\n\n              }\n            }\n          }\n        };\n      thread.setName(\"T\" + i);\n      thread.start();\n      threads.add(thread);\n    }\n    startingGun.countDown();\n    for(Thread thread : threads) {\n      thread.join();\n    }\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  private static void verify(double[] lats, double[] lons) throws Exception {\n    int maxPointsInLeaf = TestUtil.nextInt(random(), 16, 2048);\n    int maxPointsSortInHeap = TestUtil.nextInt(random(), maxPointsInLeaf, 1024*1024);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n\n    PlanetModel planetModel;\n    if (random().nextBoolean()) {\n      planetModel = PlanetModel.WGS84;\n    } else {\n      planetModel = PlanetModel.SPHERE;\n    }\n\n    // Else we can get O(N^2) merging:\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < lats.length/100) {\n      iwc.setMaxBufferedDocs(lats.length/100);\n    }\n    final DocValuesFormat dvFormat = new Geo3DDocValuesFormat(planetModel, maxPointsInLeaf, maxPointsSortInHeap);\n    Codec codec = new Lucene53Codec() {\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          if (field.equals(\"point\")) {\n            return dvFormat;\n          } else {\n            return super.getDocValuesFormatForField(field);\n          }\n        }\n      };\n    iwc.setCodec(codec);\n    Directory dir;\n    if (lats.length > 100000) {\n      dir = newFSDirectory(createTempDir(\"TestBKDTree\"));\n    } else {\n      dir = newDirectory();\n    }\n    Set<Integer> deleted = new HashSet<>();\n    // RandomIndexWriter is too slow here:\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int id=0;id<lats.length;id++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      if (Double.isNaN(lats[id]) == false) {\n        doc.add(new Geo3DPointField(\"point\", planetModel, lats[id], lons[id]));\n      }\n      w.addDocument(doc);\n      if (id > 0 && random().nextInt(100) == 42) {\n        int idToDelete = random().nextInt(id);\n        w.deleteDocuments(new Term(\"id\", \"\"+idToDelete));\n        deleted.add(idToDelete);\n        if (VERBOSE) {\n          System.err.println(\"  delete id=\" + idToDelete);\n        }\n      }\n    }\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    final IndexReader r = DirectoryReader.open(w, true);\n    w.close();\n\n    // We can't wrap with \"exotic\" readers because the geo3d query must see the Geo3DDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n\n    int numThreads = TestUtil.nextInt(random(), 2, 5);\n\n    List<Thread> threads = new ArrayList<>();\n    final int iters = atLeast(100);\n\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    final AtomicBoolean failed = new AtomicBoolean();\n\n    for(int i=0;i<numThreads;i++) {\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              _run();\n            } catch (Exception e) {\n              failed.set(true);\n              throw new RuntimeException(e);\n            }\n          }\n\n          private void _run() throws Exception {\n            startingGun.await();\n\n            NumericDocValues docIDToID = MultiDocValues.getNumericValues(r, \"id\");\n\n            for (int iter=0;iter<iters && failed.get() == false;iter++) {\n\n              GeoShape shape = randomShape(planetModel);\n\n              if (VERBOSE) {\n                System.err.println(\"\\n\" + Thread.currentThread() + \": TEST: iter=\" + iter + \" shape=\"+shape);\n              }\n              \n              Query query = new PointInGeo3DShapeQuery(planetModel, \"point\", shape);\n\n              if (VERBOSE) {\n                System.err.println(\"  using query: \" + query);\n              }\n\n              final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n\n              s.search(query, new SimpleCollector() {\n\n                  private int docBase;\n\n                  @Override\n                  public boolean needsScores() {\n                    return false;\n                  }\n\n                  @Override\n                  protected void doSetNextReader(LeafReaderContext context) throws IOException {\n                    docBase = context.docBase;\n                  }\n\n                  @Override\n                  public void collect(int doc) {\n                    hits.set(docBase+doc);\n                  }\n                });\n\n              if (VERBOSE) {\n                System.err.println(\"  hitCount: \" + hits.cardinality());\n              }\n      \n              for(int docID=0;docID<r.maxDoc();docID++) {\n                int id = (int) docIDToID.get(docID);\n                if (Double.isNaN(lats[id]) == false) {\n\n                  // Accurate point:\n                  GeoPoint point1 = new GeoPoint(planetModel, lats[id], lons[id]);\n\n                  // Quantized point (32 bits per dim):\n                  GeoPoint point2 = quantize(planetModel.getMaximumMagnitude(), point1);\n\n                  if (shape.isWithin(point1) != shape.isWithin(point2)) {\n                    if (VERBOSE) {\n                      System.out.println(\"  skip checking docID=\" + docID + \" quantization changed the expected result from \" + shape.isWithin(point1) + \" to \" + shape.isWithin(point2));\n                    }\n                    continue;\n                  }\n\n                  boolean expected = ((deleted.contains(id) == false) && shape.isWithin(point2));\n                  if (hits.get(docID) != expected) {\n                    fail(Thread.currentThread().getName() + \": iter=\" + iter + \" id=\" + id + \" docID=\" + docID + \" lat=\" + lats[id] + \" lon=\" + lons[id] + \" expected \" + expected + \" but got: \" + hits.get(docID) + \" deleted?=\" + deleted.contains(id) + \"\\n  point1=\" + point1 + \", iswithin=\"+shape.isWithin(point1)+\"\\n  point2=\" + point2 + \", iswithin=\"+shape.isWithin(point2) + \"\\n  query=\" + query);\n                  }\n                } else {\n                  assertFalse(hits.get(docID));\n                }\n\n              }\n            }\n          }\n        };\n      thread.setName(\"T\" + i);\n      thread.start();\n      threads.add(thread);\n    }\n    startingGun.countDown();\n    for(Thread thread : threads) {\n      thread.join();\n    }\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":["f64b7098768253180859cd8faeae6b1a185b06ed"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/bkdtree3d/TestGeo3DPointField#verify(double[],double[]).mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/bkdtree3d/TestGeo3DPointField#verify(double[],double[]).mjava","sourceNew":"  private static void verify(double[] lats, double[] lons) throws Exception {\n    int maxPointsInLeaf = TestUtil.nextInt(random(), 16, 2048);\n    int maxPointsSortInHeap = TestUtil.nextInt(random(), maxPointsInLeaf, 1024*1024);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n\n    PlanetModel planetModel = getPlanetModel();\n\n    // Else we can get O(N^2) merging:\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < lats.length/100) {\n      iwc.setMaxBufferedDocs(lats.length/100);\n    }\n    final DocValuesFormat dvFormat = new Geo3DDocValuesFormat(planetModel, maxPointsInLeaf, maxPointsSortInHeap);\n    Codec codec = new Lucene53Codec() {\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          if (field.equals(\"point\")) {\n            return dvFormat;\n          } else {\n            return super.getDocValuesFormatForField(field);\n          }\n        }\n      };\n    iwc.setCodec(codec);\n    Directory dir;\n    if (lats.length > 100000) {\n      dir = newFSDirectory(createTempDir(\"TestBKDTree\"));\n    } else {\n      dir = getDirectory();\n    }\n    Set<Integer> deleted = new HashSet<>();\n    // RandomIndexWriter is too slow here:\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int id=0;id<lats.length;id++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      if (Double.isNaN(lats[id]) == false) {\n        doc.add(new Geo3DPointField(\"point\", planetModel, lats[id], lons[id]));\n      }\n      w.addDocument(doc);\n      if (id > 0 && random().nextInt(100) == 42) {\n        int idToDelete = random().nextInt(id);\n        w.deleteDocuments(new Term(\"id\", \"\"+idToDelete));\n        deleted.add(idToDelete);\n        if (VERBOSE) {\n          System.err.println(\"  delete id=\" + idToDelete);\n        }\n      }\n    }\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    final IndexReader r = DirectoryReader.open(w, true);\n    w.close();\n\n    // We can't wrap with \"exotic\" readers because the geo3d query must see the Geo3DDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n\n    int numThreads = TestUtil.nextInt(random(), 2, 5);\n\n    List<Thread> threads = new ArrayList<>();\n    final int iters = atLeast(100);\n\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    final AtomicBoolean failed = new AtomicBoolean();\n\n    for(int i=0;i<numThreads;i++) {\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              _run();\n            } catch (Exception e) {\n              failed.set(true);\n              throw new RuntimeException(e);\n            }\n          }\n\n          private void _run() throws Exception {\n            startingGun.await();\n\n            NumericDocValues docIDToID = MultiDocValues.getNumericValues(r, \"id\");\n\n            for (int iter=0;iter<iters && failed.get() == false;iter++) {\n\n              GeoShape shape = randomShape(planetModel);\n\n              if (VERBOSE) {\n                System.err.println(\"\\n\" + Thread.currentThread() + \": TEST: iter=\" + iter + \" shape=\"+shape);\n              }\n              \n              Query query = new PointInGeo3DShapeQuery(planetModel, \"point\", shape);\n\n              if (VERBOSE) {\n                System.err.println(\"  using query: \" + query);\n              }\n\n              final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n\n              s.search(query, new SimpleCollector() {\n\n                  private int docBase;\n\n                  @Override\n                  public boolean needsScores() {\n                    return false;\n                  }\n\n                  @Override\n                  protected void doSetNextReader(LeafReaderContext context) throws IOException {\n                    docBase = context.docBase;\n                  }\n\n                  @Override\n                  public void collect(int doc) {\n                    hits.set(docBase+doc);\n                  }\n                });\n\n              if (VERBOSE) {\n                System.err.println(\"  hitCount: \" + hits.cardinality());\n              }\n      \n              for(int docID=0;docID<r.maxDoc();docID++) {\n                int id = (int) docIDToID.get(docID);\n                if (Double.isNaN(lats[id]) == false) {\n\n                  // Accurate point:\n                  GeoPoint point1 = new GeoPoint(planetModel, lats[id], lons[id]);\n\n                  // Quantized point (32 bits per dim):\n                  GeoPoint point2 = quantize(planetModel.getMaximumMagnitude(), point1);\n\n                  if (shape.isWithin(point1) != shape.isWithin(point2)) {\n                    if (VERBOSE) {\n                      System.out.println(\"  skip checking docID=\" + docID + \" quantization changed the expected result from \" + shape.isWithin(point1) + \" to \" + shape.isWithin(point2));\n                    }\n                    continue;\n                  }\n\n                  boolean expected = ((deleted.contains(id) == false) && shape.isWithin(point2));\n                  if (hits.get(docID) != expected) {\n                    fail(Thread.currentThread().getName() + \": iter=\" + iter + \" id=\" + id + \" docID=\" + docID + \" lat=\" + lats[id] + \" lon=\" + lons[id] + \" expected \" + expected + \" but got: \" + hits.get(docID) + \" deleted?=\" + deleted.contains(id) + \"\\n  point1=\" + point1 + \", iswithin=\"+shape.isWithin(point1)+\"\\n  point2=\" + point2 + \", iswithin=\"+shape.isWithin(point2) + \"\\n  query=\" + query);\n                  }\n                } else {\n                  assertFalse(hits.get(docID));\n                }\n\n              }\n            }\n          }\n        };\n      thread.setName(\"T\" + i);\n      thread.start();\n      threads.add(thread);\n    }\n    startingGun.countDown();\n    for(Thread thread : threads) {\n      thread.join();\n    }\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  private static void verify(double[] lats, double[] lons) throws Exception {\n    int maxPointsInLeaf = TestUtil.nextInt(random(), 16, 2048);\n    int maxPointsSortInHeap = TestUtil.nextInt(random(), maxPointsInLeaf, 1024*1024);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n\n    PlanetModel planetModel = getPlanetModel();\n\n    // Else we can get O(N^2) merging:\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < lats.length/100) {\n      iwc.setMaxBufferedDocs(lats.length/100);\n    }\n    final DocValuesFormat dvFormat = new Geo3DDocValuesFormat(planetModel, maxPointsInLeaf, maxPointsSortInHeap);\n    Codec codec = new Lucene53Codec() {\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          if (field.equals(\"point\")) {\n            return dvFormat;\n          } else {\n            return super.getDocValuesFormatForField(field);\n          }\n        }\n      };\n    iwc.setCodec(codec);\n    Directory dir;\n    if (lats.length > 100000) {\n      dir = newFSDirectory(createTempDir(\"TestBKDTree\"));\n    } else {\n      dir = newDirectory();\n    }\n    Set<Integer> deleted = new HashSet<>();\n    // RandomIndexWriter is too slow here:\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int id=0;id<lats.length;id++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      if (Double.isNaN(lats[id]) == false) {\n        doc.add(new Geo3DPointField(\"point\", planetModel, lats[id], lons[id]));\n      }\n      w.addDocument(doc);\n      if (id > 0 && random().nextInt(100) == 42) {\n        int idToDelete = random().nextInt(id);\n        w.deleteDocuments(new Term(\"id\", \"\"+idToDelete));\n        deleted.add(idToDelete);\n        if (VERBOSE) {\n          System.err.println(\"  delete id=\" + idToDelete);\n        }\n      }\n    }\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    final IndexReader r = DirectoryReader.open(w, true);\n    w.close();\n\n    // We can't wrap with \"exotic\" readers because the geo3d query must see the Geo3DDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n\n    int numThreads = TestUtil.nextInt(random(), 2, 5);\n\n    List<Thread> threads = new ArrayList<>();\n    final int iters = atLeast(100);\n\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    final AtomicBoolean failed = new AtomicBoolean();\n\n    for(int i=0;i<numThreads;i++) {\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              _run();\n            } catch (Exception e) {\n              failed.set(true);\n              throw new RuntimeException(e);\n            }\n          }\n\n          private void _run() throws Exception {\n            startingGun.await();\n\n            NumericDocValues docIDToID = MultiDocValues.getNumericValues(r, \"id\");\n\n            for (int iter=0;iter<iters && failed.get() == false;iter++) {\n\n              GeoShape shape = randomShape(planetModel);\n\n              if (VERBOSE) {\n                System.err.println(\"\\n\" + Thread.currentThread() + \": TEST: iter=\" + iter + \" shape=\"+shape);\n              }\n              \n              Query query = new PointInGeo3DShapeQuery(planetModel, \"point\", shape);\n\n              if (VERBOSE) {\n                System.err.println(\"  using query: \" + query);\n              }\n\n              final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n\n              s.search(query, new SimpleCollector() {\n\n                  private int docBase;\n\n                  @Override\n                  public boolean needsScores() {\n                    return false;\n                  }\n\n                  @Override\n                  protected void doSetNextReader(LeafReaderContext context) throws IOException {\n                    docBase = context.docBase;\n                  }\n\n                  @Override\n                  public void collect(int doc) {\n                    hits.set(docBase+doc);\n                  }\n                });\n\n              if (VERBOSE) {\n                System.err.println(\"  hitCount: \" + hits.cardinality());\n              }\n      \n              for(int docID=0;docID<r.maxDoc();docID++) {\n                int id = (int) docIDToID.get(docID);\n                if (Double.isNaN(lats[id]) == false) {\n\n                  // Accurate point:\n                  GeoPoint point1 = new GeoPoint(planetModel, lats[id], lons[id]);\n\n                  // Quantized point (32 bits per dim):\n                  GeoPoint point2 = quantize(planetModel.getMaximumMagnitude(), point1);\n\n                  if (shape.isWithin(point1) != shape.isWithin(point2)) {\n                    if (VERBOSE) {\n                      System.out.println(\"  skip checking docID=\" + docID + \" quantization changed the expected result from \" + shape.isWithin(point1) + \" to \" + shape.isWithin(point2));\n                    }\n                    continue;\n                  }\n\n                  boolean expected = ((deleted.contains(id) == false) && shape.isWithin(point2));\n                  if (hits.get(docID) != expected) {\n                    fail(Thread.currentThread().getName() + \": iter=\" + iter + \" id=\" + id + \" docID=\" + docID + \" lat=\" + lats[id] + \" lon=\" + lons[id] + \" expected \" + expected + \" but got: \" + hits.get(docID) + \" deleted?=\" + deleted.contains(id) + \"\\n  point1=\" + point1 + \", iswithin=\"+shape.isWithin(point1)+\"\\n  point2=\" + point2 + \", iswithin=\"+shape.isWithin(point2) + \"\\n  query=\" + query);\n                  }\n                } else {\n                  assertFalse(hits.get(docID));\n                }\n\n              }\n            }\n          }\n        };\n      thread.setName(\"T\" + i);\n      thread.start();\n      threads.add(thread);\n    }\n    startingGun.countDown();\n    for(Thread thread : threads) {\n      thread.join();\n    }\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a6fe0cad9503f2c3eaca4de8c4f80a9eb14f0","date":1445351343,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/bkdtree3d/TestGeo3DPointField#verify(double[],double[]).mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/bkdtree3d/TestGeo3DPointField#verify(double[],double[]).mjava","sourceNew":"  private static void verify(double[] lats, double[] lons) throws Exception {\n    int maxPointsInLeaf = TestUtil.nextInt(random(), 16, 2048);\n    int maxPointsSortInHeap = TestUtil.nextInt(random(), maxPointsInLeaf, 1024*1024);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n\n    PlanetModel planetModel = getPlanetModel();\n\n    // Else we can get O(N^2) merging:\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < lats.length/100) {\n      iwc.setMaxBufferedDocs(lats.length/100);\n    }\n    final DocValuesFormat dvFormat = new Geo3DDocValuesFormat(planetModel, maxPointsInLeaf, maxPointsSortInHeap);\n    Codec codec = new Lucene53Codec() {\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          if (field.equals(\"point\")) {\n            return dvFormat;\n          } else {\n            return super.getDocValuesFormatForField(field);\n          }\n        }\n      };\n    iwc.setCodec(codec);\n    Directory dir;\n    if (lats.length > 100000) {\n      dir = noVirusChecker(newFSDirectory(createTempDir(\"TestBKDTree\")));\n    } else {\n      dir = getDirectory();\n    }\n    Set<Integer> deleted = new HashSet<>();\n    // RandomIndexWriter is too slow here:\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int id=0;id<lats.length;id++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      if (Double.isNaN(lats[id]) == false) {\n        doc.add(new Geo3DPointField(\"point\", planetModel, lats[id], lons[id]));\n      }\n      w.addDocument(doc);\n      if (id > 0 && random().nextInt(100) == 42) {\n        int idToDelete = random().nextInt(id);\n        w.deleteDocuments(new Term(\"id\", \"\"+idToDelete));\n        deleted.add(idToDelete);\n        if (VERBOSE) {\n          System.err.println(\"  delete id=\" + idToDelete);\n        }\n      }\n    }\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    final IndexReader r = DirectoryReader.open(w, true);\n    w.close();\n\n    // We can't wrap with \"exotic\" readers because the geo3d query must see the Geo3DDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n\n    int numThreads = TestUtil.nextInt(random(), 2, 5);\n\n    List<Thread> threads = new ArrayList<>();\n    final int iters = atLeast(100);\n\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    final AtomicBoolean failed = new AtomicBoolean();\n\n    for(int i=0;i<numThreads;i++) {\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              _run();\n            } catch (Exception e) {\n              failed.set(true);\n              throw new RuntimeException(e);\n            }\n          }\n\n          private void _run() throws Exception {\n            startingGun.await();\n\n            NumericDocValues docIDToID = MultiDocValues.getNumericValues(r, \"id\");\n\n            for (int iter=0;iter<iters && failed.get() == false;iter++) {\n\n              GeoShape shape = randomShape(planetModel);\n\n              if (VERBOSE) {\n                System.err.println(\"\\n\" + Thread.currentThread() + \": TEST: iter=\" + iter + \" shape=\"+shape);\n              }\n              \n              Query query = new PointInGeo3DShapeQuery(planetModel, \"point\", shape);\n\n              if (VERBOSE) {\n                System.err.println(\"  using query: \" + query);\n              }\n\n              final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n\n              s.search(query, new SimpleCollector() {\n\n                  private int docBase;\n\n                  @Override\n                  public boolean needsScores() {\n                    return false;\n                  }\n\n                  @Override\n                  protected void doSetNextReader(LeafReaderContext context) throws IOException {\n                    docBase = context.docBase;\n                  }\n\n                  @Override\n                  public void collect(int doc) {\n                    hits.set(docBase+doc);\n                  }\n                });\n\n              if (VERBOSE) {\n                System.err.println(\"  hitCount: \" + hits.cardinality());\n              }\n      \n              for(int docID=0;docID<r.maxDoc();docID++) {\n                int id = (int) docIDToID.get(docID);\n                if (Double.isNaN(lats[id]) == false) {\n\n                  // Accurate point:\n                  GeoPoint point1 = new GeoPoint(planetModel, lats[id], lons[id]);\n\n                  // Quantized point (32 bits per dim):\n                  GeoPoint point2 = quantize(planetModel.getMaximumMagnitude(), point1);\n\n                  if (shape.isWithin(point1) != shape.isWithin(point2)) {\n                    if (VERBOSE) {\n                      System.out.println(\"  skip checking docID=\" + docID + \" quantization changed the expected result from \" + shape.isWithin(point1) + \" to \" + shape.isWithin(point2));\n                    }\n                    continue;\n                  }\n\n                  boolean expected = ((deleted.contains(id) == false) && shape.isWithin(point2));\n                  if (hits.get(docID) != expected) {\n                    fail(Thread.currentThread().getName() + \": iter=\" + iter + \" id=\" + id + \" docID=\" + docID + \" lat=\" + lats[id] + \" lon=\" + lons[id] + \" expected \" + expected + \" but got: \" + hits.get(docID) + \" deleted?=\" + deleted.contains(id) + \"\\n  point1=\" + point1 + \", iswithin=\"+shape.isWithin(point1)+\"\\n  point2=\" + point2 + \", iswithin=\"+shape.isWithin(point2) + \"\\n  query=\" + query);\n                  }\n                } else {\n                  assertFalse(hits.get(docID));\n                }\n\n              }\n            }\n          }\n        };\n      thread.setName(\"T\" + i);\n      thread.start();\n      threads.add(thread);\n    }\n    startingGun.countDown();\n    for(Thread thread : threads) {\n      thread.join();\n    }\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  private static void verify(double[] lats, double[] lons) throws Exception {\n    int maxPointsInLeaf = TestUtil.nextInt(random(), 16, 2048);\n    int maxPointsSortInHeap = TestUtil.nextInt(random(), maxPointsInLeaf, 1024*1024);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n\n    PlanetModel planetModel = getPlanetModel();\n\n    // Else we can get O(N^2) merging:\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < lats.length/100) {\n      iwc.setMaxBufferedDocs(lats.length/100);\n    }\n    final DocValuesFormat dvFormat = new Geo3DDocValuesFormat(planetModel, maxPointsInLeaf, maxPointsSortInHeap);\n    Codec codec = new Lucene53Codec() {\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          if (field.equals(\"point\")) {\n            return dvFormat;\n          } else {\n            return super.getDocValuesFormatForField(field);\n          }\n        }\n      };\n    iwc.setCodec(codec);\n    Directory dir;\n    if (lats.length > 100000) {\n      dir = newFSDirectory(createTempDir(\"TestBKDTree\"));\n    } else {\n      dir = getDirectory();\n    }\n    Set<Integer> deleted = new HashSet<>();\n    // RandomIndexWriter is too slow here:\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int id=0;id<lats.length;id++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      if (Double.isNaN(lats[id]) == false) {\n        doc.add(new Geo3DPointField(\"point\", planetModel, lats[id], lons[id]));\n      }\n      w.addDocument(doc);\n      if (id > 0 && random().nextInt(100) == 42) {\n        int idToDelete = random().nextInt(id);\n        w.deleteDocuments(new Term(\"id\", \"\"+idToDelete));\n        deleted.add(idToDelete);\n        if (VERBOSE) {\n          System.err.println(\"  delete id=\" + idToDelete);\n        }\n      }\n    }\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    final IndexReader r = DirectoryReader.open(w, true);\n    w.close();\n\n    // We can't wrap with \"exotic\" readers because the geo3d query must see the Geo3DDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n\n    int numThreads = TestUtil.nextInt(random(), 2, 5);\n\n    List<Thread> threads = new ArrayList<>();\n    final int iters = atLeast(100);\n\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    final AtomicBoolean failed = new AtomicBoolean();\n\n    for(int i=0;i<numThreads;i++) {\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              _run();\n            } catch (Exception e) {\n              failed.set(true);\n              throw new RuntimeException(e);\n            }\n          }\n\n          private void _run() throws Exception {\n            startingGun.await();\n\n            NumericDocValues docIDToID = MultiDocValues.getNumericValues(r, \"id\");\n\n            for (int iter=0;iter<iters && failed.get() == false;iter++) {\n\n              GeoShape shape = randomShape(planetModel);\n\n              if (VERBOSE) {\n                System.err.println(\"\\n\" + Thread.currentThread() + \": TEST: iter=\" + iter + \" shape=\"+shape);\n              }\n              \n              Query query = new PointInGeo3DShapeQuery(planetModel, \"point\", shape);\n\n              if (VERBOSE) {\n                System.err.println(\"  using query: \" + query);\n              }\n\n              final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n\n              s.search(query, new SimpleCollector() {\n\n                  private int docBase;\n\n                  @Override\n                  public boolean needsScores() {\n                    return false;\n                  }\n\n                  @Override\n                  protected void doSetNextReader(LeafReaderContext context) throws IOException {\n                    docBase = context.docBase;\n                  }\n\n                  @Override\n                  public void collect(int doc) {\n                    hits.set(docBase+doc);\n                  }\n                });\n\n              if (VERBOSE) {\n                System.err.println(\"  hitCount: \" + hits.cardinality());\n              }\n      \n              for(int docID=0;docID<r.maxDoc();docID++) {\n                int id = (int) docIDToID.get(docID);\n                if (Double.isNaN(lats[id]) == false) {\n\n                  // Accurate point:\n                  GeoPoint point1 = new GeoPoint(planetModel, lats[id], lons[id]);\n\n                  // Quantized point (32 bits per dim):\n                  GeoPoint point2 = quantize(planetModel.getMaximumMagnitude(), point1);\n\n                  if (shape.isWithin(point1) != shape.isWithin(point2)) {\n                    if (VERBOSE) {\n                      System.out.println(\"  skip checking docID=\" + docID + \" quantization changed the expected result from \" + shape.isWithin(point1) + \" to \" + shape.isWithin(point2));\n                    }\n                    continue;\n                  }\n\n                  boolean expected = ((deleted.contains(id) == false) && shape.isWithin(point2));\n                  if (hits.get(docID) != expected) {\n                    fail(Thread.currentThread().getName() + \": iter=\" + iter + \" id=\" + id + \" docID=\" + docID + \" lat=\" + lats[id] + \" lon=\" + lons[id] + \" expected \" + expected + \" but got: \" + hits.get(docID) + \" deleted?=\" + deleted.contains(id) + \"\\n  point1=\" + point1 + \", iswithin=\"+shape.isWithin(point1)+\"\\n  point2=\" + point2 + \", iswithin=\"+shape.isWithin(point2) + \"\\n  query=\" + query);\n                  }\n                } else {\n                  assertFalse(hits.get(docID));\n                }\n\n              }\n            }\n          }\n        };\n      thread.setName(\"T\" + i);\n      thread.start();\n      threads.add(thread);\n    }\n    startingGun.countDown();\n    for(Thread thread : threads) {\n      thread.join();\n    }\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a870f9917149dc600c4ad4417d615c1795de5864","date":1445975387,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/bkdtree3d/TestGeo3DPointField#verify(double[],double[]).mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/bkdtree3d/TestGeo3DPointField#verify(double[],double[]).mjava","sourceNew":"  private static void verify(double[] lats, double[] lons) throws Exception {\n    int maxPointsInLeaf = TestUtil.nextInt(random(), 16, 2048);\n    int maxPointsSortInHeap = TestUtil.nextInt(random(), maxPointsInLeaf, 1024*1024);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n\n    PlanetModel planetModel = getPlanetModel();\n\n    // Else we can get O(N^2) merging:\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < lats.length/100) {\n      iwc.setMaxBufferedDocs(lats.length/100);\n    }\n    final DocValuesFormat dvFormat = new Geo3DDocValuesFormat(planetModel, maxPointsInLeaf, maxPointsSortInHeap);\n    Codec codec = new Lucene54Codec() {\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          if (field.equals(\"point\")) {\n            return dvFormat;\n          } else {\n            return super.getDocValuesFormatForField(field);\n          }\n        }\n      };\n    iwc.setCodec(codec);\n    Directory dir;\n    if (lats.length > 100000) {\n      dir = noVirusChecker(newFSDirectory(createTempDir(\"TestBKDTree\")));\n    } else {\n      dir = getDirectory();\n    }\n    Set<Integer> deleted = new HashSet<>();\n    // RandomIndexWriter is too slow here:\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int id=0;id<lats.length;id++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      if (Double.isNaN(lats[id]) == false) {\n        doc.add(new Geo3DPointField(\"point\", planetModel, lats[id], lons[id]));\n      }\n      w.addDocument(doc);\n      if (id > 0 && random().nextInt(100) == 42) {\n        int idToDelete = random().nextInt(id);\n        w.deleteDocuments(new Term(\"id\", \"\"+idToDelete));\n        deleted.add(idToDelete);\n        if (VERBOSE) {\n          System.err.println(\"  delete id=\" + idToDelete);\n        }\n      }\n    }\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    final IndexReader r = DirectoryReader.open(w, true);\n    w.close();\n\n    // We can't wrap with \"exotic\" readers because the geo3d query must see the Geo3DDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n\n    int numThreads = TestUtil.nextInt(random(), 2, 5);\n\n    List<Thread> threads = new ArrayList<>();\n    final int iters = atLeast(100);\n\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    final AtomicBoolean failed = new AtomicBoolean();\n\n    for(int i=0;i<numThreads;i++) {\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              _run();\n            } catch (Exception e) {\n              failed.set(true);\n              throw new RuntimeException(e);\n            }\n          }\n\n          private void _run() throws Exception {\n            startingGun.await();\n\n            NumericDocValues docIDToID = MultiDocValues.getNumericValues(r, \"id\");\n\n            for (int iter=0;iter<iters && failed.get() == false;iter++) {\n\n              GeoShape shape = randomShape(planetModel);\n\n              if (VERBOSE) {\n                System.err.println(\"\\n\" + Thread.currentThread() + \": TEST: iter=\" + iter + \" shape=\"+shape);\n              }\n              \n              Query query = new PointInGeo3DShapeQuery(planetModel, \"point\", shape);\n\n              if (VERBOSE) {\n                System.err.println(\"  using query: \" + query);\n              }\n\n              final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n\n              s.search(query, new SimpleCollector() {\n\n                  private int docBase;\n\n                  @Override\n                  public boolean needsScores() {\n                    return false;\n                  }\n\n                  @Override\n                  protected void doSetNextReader(LeafReaderContext context) throws IOException {\n                    docBase = context.docBase;\n                  }\n\n                  @Override\n                  public void collect(int doc) {\n                    hits.set(docBase+doc);\n                  }\n                });\n\n              if (VERBOSE) {\n                System.err.println(\"  hitCount: \" + hits.cardinality());\n              }\n      \n              for(int docID=0;docID<r.maxDoc();docID++) {\n                int id = (int) docIDToID.get(docID);\n                if (Double.isNaN(lats[id]) == false) {\n\n                  // Accurate point:\n                  GeoPoint point1 = new GeoPoint(planetModel, lats[id], lons[id]);\n\n                  // Quantized point (32 bits per dim):\n                  GeoPoint point2 = quantize(planetModel.getMaximumMagnitude(), point1);\n\n                  if (shape.isWithin(point1) != shape.isWithin(point2)) {\n                    if (VERBOSE) {\n                      System.out.println(\"  skip checking docID=\" + docID + \" quantization changed the expected result from \" + shape.isWithin(point1) + \" to \" + shape.isWithin(point2));\n                    }\n                    continue;\n                  }\n\n                  boolean expected = ((deleted.contains(id) == false) && shape.isWithin(point2));\n                  if (hits.get(docID) != expected) {\n                    fail(Thread.currentThread().getName() + \": iter=\" + iter + \" id=\" + id + \" docID=\" + docID + \" lat=\" + lats[id] + \" lon=\" + lons[id] + \" expected \" + expected + \" but got: \" + hits.get(docID) + \" deleted?=\" + deleted.contains(id) + \"\\n  point1=\" + point1 + \", iswithin=\"+shape.isWithin(point1)+\"\\n  point2=\" + point2 + \", iswithin=\"+shape.isWithin(point2) + \"\\n  query=\" + query);\n                  }\n                } else {\n                  assertFalse(hits.get(docID));\n                }\n\n              }\n            }\n          }\n        };\n      thread.setName(\"T\" + i);\n      thread.start();\n      threads.add(thread);\n    }\n    startingGun.countDown();\n    for(Thread thread : threads) {\n      thread.join();\n    }\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  private static void verify(double[] lats, double[] lons) throws Exception {\n    int maxPointsInLeaf = TestUtil.nextInt(random(), 16, 2048);\n    int maxPointsSortInHeap = TestUtil.nextInt(random(), maxPointsInLeaf, 1024*1024);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n\n    PlanetModel planetModel = getPlanetModel();\n\n    // Else we can get O(N^2) merging:\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < lats.length/100) {\n      iwc.setMaxBufferedDocs(lats.length/100);\n    }\n    final DocValuesFormat dvFormat = new Geo3DDocValuesFormat(planetModel, maxPointsInLeaf, maxPointsSortInHeap);\n    Codec codec = new Lucene53Codec() {\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          if (field.equals(\"point\")) {\n            return dvFormat;\n          } else {\n            return super.getDocValuesFormatForField(field);\n          }\n        }\n      };\n    iwc.setCodec(codec);\n    Directory dir;\n    if (lats.length > 100000) {\n      dir = noVirusChecker(newFSDirectory(createTempDir(\"TestBKDTree\")));\n    } else {\n      dir = getDirectory();\n    }\n    Set<Integer> deleted = new HashSet<>();\n    // RandomIndexWriter is too slow here:\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int id=0;id<lats.length;id++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      if (Double.isNaN(lats[id]) == false) {\n        doc.add(new Geo3DPointField(\"point\", planetModel, lats[id], lons[id]));\n      }\n      w.addDocument(doc);\n      if (id > 0 && random().nextInt(100) == 42) {\n        int idToDelete = random().nextInt(id);\n        w.deleteDocuments(new Term(\"id\", \"\"+idToDelete));\n        deleted.add(idToDelete);\n        if (VERBOSE) {\n          System.err.println(\"  delete id=\" + idToDelete);\n        }\n      }\n    }\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    final IndexReader r = DirectoryReader.open(w, true);\n    w.close();\n\n    // We can't wrap with \"exotic\" readers because the geo3d query must see the Geo3DDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n\n    int numThreads = TestUtil.nextInt(random(), 2, 5);\n\n    List<Thread> threads = new ArrayList<>();\n    final int iters = atLeast(100);\n\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    final AtomicBoolean failed = new AtomicBoolean();\n\n    for(int i=0;i<numThreads;i++) {\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              _run();\n            } catch (Exception e) {\n              failed.set(true);\n              throw new RuntimeException(e);\n            }\n          }\n\n          private void _run() throws Exception {\n            startingGun.await();\n\n            NumericDocValues docIDToID = MultiDocValues.getNumericValues(r, \"id\");\n\n            for (int iter=0;iter<iters && failed.get() == false;iter++) {\n\n              GeoShape shape = randomShape(planetModel);\n\n              if (VERBOSE) {\n                System.err.println(\"\\n\" + Thread.currentThread() + \": TEST: iter=\" + iter + \" shape=\"+shape);\n              }\n              \n              Query query = new PointInGeo3DShapeQuery(planetModel, \"point\", shape);\n\n              if (VERBOSE) {\n                System.err.println(\"  using query: \" + query);\n              }\n\n              final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n\n              s.search(query, new SimpleCollector() {\n\n                  private int docBase;\n\n                  @Override\n                  public boolean needsScores() {\n                    return false;\n                  }\n\n                  @Override\n                  protected void doSetNextReader(LeafReaderContext context) throws IOException {\n                    docBase = context.docBase;\n                  }\n\n                  @Override\n                  public void collect(int doc) {\n                    hits.set(docBase+doc);\n                  }\n                });\n\n              if (VERBOSE) {\n                System.err.println(\"  hitCount: \" + hits.cardinality());\n              }\n      \n              for(int docID=0;docID<r.maxDoc();docID++) {\n                int id = (int) docIDToID.get(docID);\n                if (Double.isNaN(lats[id]) == false) {\n\n                  // Accurate point:\n                  GeoPoint point1 = new GeoPoint(planetModel, lats[id], lons[id]);\n\n                  // Quantized point (32 bits per dim):\n                  GeoPoint point2 = quantize(planetModel.getMaximumMagnitude(), point1);\n\n                  if (shape.isWithin(point1) != shape.isWithin(point2)) {\n                    if (VERBOSE) {\n                      System.out.println(\"  skip checking docID=\" + docID + \" quantization changed the expected result from \" + shape.isWithin(point1) + \" to \" + shape.isWithin(point2));\n                    }\n                    continue;\n                  }\n\n                  boolean expected = ((deleted.contains(id) == false) && shape.isWithin(point2));\n                  if (hits.get(docID) != expected) {\n                    fail(Thread.currentThread().getName() + \": iter=\" + iter + \" id=\" + id + \" docID=\" + docID + \" lat=\" + lats[id] + \" lon=\" + lons[id] + \" expected \" + expected + \" but got: \" + hits.get(docID) + \" deleted?=\" + deleted.contains(id) + \"\\n  point1=\" + point1 + \", iswithin=\"+shape.isWithin(point1)+\"\\n  point2=\" + point2 + \", iswithin=\"+shape.isWithin(point2) + \"\\n  query=\" + query);\n                  }\n                } else {\n                  assertFalse(hits.get(docID));\n                }\n\n              }\n            }\n          }\n        };\n      thread.setName(\"T\" + i);\n      thread.start();\n      threads.add(thread);\n    }\n    startingGun.countDown();\n    for(Thread thread : threads) {\n      thread.join();\n    }\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eee4175312c41f89aa23427f9e4edfc00deeaac","date":1446373190,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/bkdtree3d/TestGeo3DPointField#verify(double[],double[]).mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/bkdtree3d/TestGeo3DPointField#verify(double[],double[]).mjava","sourceNew":"  private static void verify(double[] lats, double[] lons) throws Exception {\n    int maxPointsInLeaf = TestUtil.nextInt(random(), 16, 2048);\n    int maxPointsSortInHeap = TestUtil.nextInt(random(), maxPointsInLeaf, 1024*1024);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n\n    PlanetModel planetModel = getPlanetModel();\n\n    // Else we can get O(N^2) merging:\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < lats.length/100) {\n      iwc.setMaxBufferedDocs(lats.length/100);\n    }\n    final DocValuesFormat dvFormat = new Geo3DDocValuesFormat(planetModel, maxPointsInLeaf, maxPointsSortInHeap);\n    Codec codec = new Lucene60Codec() {\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          if (field.equals(\"point\")) {\n            return dvFormat;\n          } else {\n            return super.getDocValuesFormatForField(field);\n          }\n        }\n      };\n    iwc.setCodec(codec);\n    Directory dir;\n    if (lats.length > 100000) {\n      dir = noVirusChecker(newFSDirectory(createTempDir(\"TestBKDTree\")));\n    } else {\n      dir = getDirectory();\n    }\n    Set<Integer> deleted = new HashSet<>();\n    // RandomIndexWriter is too slow here:\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int id=0;id<lats.length;id++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      if (Double.isNaN(lats[id]) == false) {\n        doc.add(new Geo3DPointField(\"point\", planetModel, lats[id], lons[id]));\n      }\n      w.addDocument(doc);\n      if (id > 0 && random().nextInt(100) == 42) {\n        int idToDelete = random().nextInt(id);\n        w.deleteDocuments(new Term(\"id\", \"\"+idToDelete));\n        deleted.add(idToDelete);\n        if (VERBOSE) {\n          System.err.println(\"  delete id=\" + idToDelete);\n        }\n      }\n    }\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    final IndexReader r = DirectoryReader.open(w, true);\n    w.close();\n\n    // We can't wrap with \"exotic\" readers because the geo3d query must see the Geo3DDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n\n    int numThreads = TestUtil.nextInt(random(), 2, 5);\n\n    List<Thread> threads = new ArrayList<>();\n    final int iters = atLeast(100);\n\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    final AtomicBoolean failed = new AtomicBoolean();\n\n    for(int i=0;i<numThreads;i++) {\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              _run();\n            } catch (Exception e) {\n              failed.set(true);\n              throw new RuntimeException(e);\n            }\n          }\n\n          private void _run() throws Exception {\n            startingGun.await();\n\n            NumericDocValues docIDToID = MultiDocValues.getNumericValues(r, \"id\");\n\n            for (int iter=0;iter<iters && failed.get() == false;iter++) {\n\n              GeoShape shape = randomShape(planetModel);\n\n              if (VERBOSE) {\n                System.err.println(\"\\n\" + Thread.currentThread() + \": TEST: iter=\" + iter + \" shape=\"+shape);\n              }\n              \n              Query query = new PointInGeo3DShapeQuery(planetModel, \"point\", shape);\n\n              if (VERBOSE) {\n                System.err.println(\"  using query: \" + query);\n              }\n\n              final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n\n              s.search(query, new SimpleCollector() {\n\n                  private int docBase;\n\n                  @Override\n                  public boolean needsScores() {\n                    return false;\n                  }\n\n                  @Override\n                  protected void doSetNextReader(LeafReaderContext context) throws IOException {\n                    docBase = context.docBase;\n                  }\n\n                  @Override\n                  public void collect(int doc) {\n                    hits.set(docBase+doc);\n                  }\n                });\n\n              if (VERBOSE) {\n                System.err.println(\"  hitCount: \" + hits.cardinality());\n              }\n      \n              for(int docID=0;docID<r.maxDoc();docID++) {\n                int id = (int) docIDToID.get(docID);\n                if (Double.isNaN(lats[id]) == false) {\n\n                  // Accurate point:\n                  GeoPoint point1 = new GeoPoint(planetModel, lats[id], lons[id]);\n\n                  // Quantized point (32 bits per dim):\n                  GeoPoint point2 = quantize(planetModel.getMaximumMagnitude(), point1);\n\n                  if (shape.isWithin(point1) != shape.isWithin(point2)) {\n                    if (VERBOSE) {\n                      System.out.println(\"  skip checking docID=\" + docID + \" quantization changed the expected result from \" + shape.isWithin(point1) + \" to \" + shape.isWithin(point2));\n                    }\n                    continue;\n                  }\n\n                  boolean expected = ((deleted.contains(id) == false) && shape.isWithin(point2));\n                  if (hits.get(docID) != expected) {\n                    fail(Thread.currentThread().getName() + \": iter=\" + iter + \" id=\" + id + \" docID=\" + docID + \" lat=\" + lats[id] + \" lon=\" + lons[id] + \" expected \" + expected + \" but got: \" + hits.get(docID) + \" deleted?=\" + deleted.contains(id) + \"\\n  point1=\" + point1 + \", iswithin=\"+shape.isWithin(point1)+\"\\n  point2=\" + point2 + \", iswithin=\"+shape.isWithin(point2) + \"\\n  query=\" + query);\n                  }\n                } else {\n                  assertFalse(hits.get(docID));\n                }\n\n              }\n            }\n          }\n        };\n      thread.setName(\"T\" + i);\n      thread.start();\n      threads.add(thread);\n    }\n    startingGun.countDown();\n    for(Thread thread : threads) {\n      thread.join();\n    }\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  private static void verify(double[] lats, double[] lons) throws Exception {\n    int maxPointsInLeaf = TestUtil.nextInt(random(), 16, 2048);\n    int maxPointsSortInHeap = TestUtil.nextInt(random(), maxPointsInLeaf, 1024*1024);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n\n    PlanetModel planetModel = getPlanetModel();\n\n    // Else we can get O(N^2) merging:\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < lats.length/100) {\n      iwc.setMaxBufferedDocs(lats.length/100);\n    }\n    final DocValuesFormat dvFormat = new Geo3DDocValuesFormat(planetModel, maxPointsInLeaf, maxPointsSortInHeap);\n    Codec codec = new Lucene54Codec() {\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          if (field.equals(\"point\")) {\n            return dvFormat;\n          } else {\n            return super.getDocValuesFormatForField(field);\n          }\n        }\n      };\n    iwc.setCodec(codec);\n    Directory dir;\n    if (lats.length > 100000) {\n      dir = noVirusChecker(newFSDirectory(createTempDir(\"TestBKDTree\")));\n    } else {\n      dir = getDirectory();\n    }\n    Set<Integer> deleted = new HashSet<>();\n    // RandomIndexWriter is too slow here:\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int id=0;id<lats.length;id++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      if (Double.isNaN(lats[id]) == false) {\n        doc.add(new Geo3DPointField(\"point\", planetModel, lats[id], lons[id]));\n      }\n      w.addDocument(doc);\n      if (id > 0 && random().nextInt(100) == 42) {\n        int idToDelete = random().nextInt(id);\n        w.deleteDocuments(new Term(\"id\", \"\"+idToDelete));\n        deleted.add(idToDelete);\n        if (VERBOSE) {\n          System.err.println(\"  delete id=\" + idToDelete);\n        }\n      }\n    }\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    final IndexReader r = DirectoryReader.open(w, true);\n    w.close();\n\n    // We can't wrap with \"exotic\" readers because the geo3d query must see the Geo3DDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n\n    int numThreads = TestUtil.nextInt(random(), 2, 5);\n\n    List<Thread> threads = new ArrayList<>();\n    final int iters = atLeast(100);\n\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    final AtomicBoolean failed = new AtomicBoolean();\n\n    for(int i=0;i<numThreads;i++) {\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              _run();\n            } catch (Exception e) {\n              failed.set(true);\n              throw new RuntimeException(e);\n            }\n          }\n\n          private void _run() throws Exception {\n            startingGun.await();\n\n            NumericDocValues docIDToID = MultiDocValues.getNumericValues(r, \"id\");\n\n            for (int iter=0;iter<iters && failed.get() == false;iter++) {\n\n              GeoShape shape = randomShape(planetModel);\n\n              if (VERBOSE) {\n                System.err.println(\"\\n\" + Thread.currentThread() + \": TEST: iter=\" + iter + \" shape=\"+shape);\n              }\n              \n              Query query = new PointInGeo3DShapeQuery(planetModel, \"point\", shape);\n\n              if (VERBOSE) {\n                System.err.println(\"  using query: \" + query);\n              }\n\n              final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n\n              s.search(query, new SimpleCollector() {\n\n                  private int docBase;\n\n                  @Override\n                  public boolean needsScores() {\n                    return false;\n                  }\n\n                  @Override\n                  protected void doSetNextReader(LeafReaderContext context) throws IOException {\n                    docBase = context.docBase;\n                  }\n\n                  @Override\n                  public void collect(int doc) {\n                    hits.set(docBase+doc);\n                  }\n                });\n\n              if (VERBOSE) {\n                System.err.println(\"  hitCount: \" + hits.cardinality());\n              }\n      \n              for(int docID=0;docID<r.maxDoc();docID++) {\n                int id = (int) docIDToID.get(docID);\n                if (Double.isNaN(lats[id]) == false) {\n\n                  // Accurate point:\n                  GeoPoint point1 = new GeoPoint(planetModel, lats[id], lons[id]);\n\n                  // Quantized point (32 bits per dim):\n                  GeoPoint point2 = quantize(planetModel.getMaximumMagnitude(), point1);\n\n                  if (shape.isWithin(point1) != shape.isWithin(point2)) {\n                    if (VERBOSE) {\n                      System.out.println(\"  skip checking docID=\" + docID + \" quantization changed the expected result from \" + shape.isWithin(point1) + \" to \" + shape.isWithin(point2));\n                    }\n                    continue;\n                  }\n\n                  boolean expected = ((deleted.contains(id) == false) && shape.isWithin(point2));\n                  if (hits.get(docID) != expected) {\n                    fail(Thread.currentThread().getName() + \": iter=\" + iter + \" id=\" + id + \" docID=\" + docID + \" lat=\" + lats[id] + \" lon=\" + lons[id] + \" expected \" + expected + \" but got: \" + hits.get(docID) + \" deleted?=\" + deleted.contains(id) + \"\\n  point1=\" + point1 + \", iswithin=\"+shape.isWithin(point1)+\"\\n  point2=\" + point2 + \", iswithin=\"+shape.isWithin(point2) + \"\\n  query=\" + query);\n                  }\n                } else {\n                  assertFalse(hits.get(docID));\n                }\n\n              }\n            }\n          }\n        };\n      thread.setName(\"T\" + i);\n      thread.start();\n      threads.add(thread);\n    }\n    startingGun.countDown();\n    for(Thread thread : threads) {\n      thread.join();\n    }\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/TestGeo3DPointField#verify(double[],double[]).mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/bkdtree3d/TestGeo3DPointField#verify(double[],double[]).mjava","sourceNew":"  private static void verify(double[] lats, double[] lons) throws Exception {\n    IndexWriterConfig iwc = newIndexWriterConfig();\n\n    PlanetModel planetModel = getPlanetModel();\n\n    // Else we can get O(N^2) merging:\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < lats.length/100) {\n      iwc.setMaxBufferedDocs(lats.length/100);\n    }\n    iwc.setCodec(getCodec());\n    Directory dir;\n    if (lats.length > 100000) {\n      dir = noVirusChecker(newFSDirectory(createTempDir(\"TestBKDTree\")));\n    } else {\n      dir = getDirectory();\n    }\n    Set<Integer> deleted = new HashSet<>();\n    // RandomIndexWriter is too slow here:\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int id=0;id<lats.length;id++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      if (Double.isNaN(lats[id]) == false) {\n        doc.add(new Geo3DPointField(\"point\", planetModel, lats[id], lons[id]));\n      }\n      w.addDocument(doc);\n      if (id > 0 && random().nextInt(100) == 42) {\n        int idToDelete = random().nextInt(id);\n        w.deleteDocuments(new Term(\"id\", \"\"+idToDelete));\n        deleted.add(idToDelete);\n        if (VERBOSE) {\n          System.err.println(\"  delete id=\" + idToDelete);\n        }\n      }\n    }\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    final IndexReader r = DirectoryReader.open(w, true);\n    w.close();\n\n    // We can't wrap with \"exotic\" readers because the geo3d query must see the Geo3DDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n\n    int numThreads = TestUtil.nextInt(random(), 2, 5);\n\n    List<Thread> threads = new ArrayList<>();\n    final int iters = atLeast(100);\n\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    final AtomicBoolean failed = new AtomicBoolean();\n\n    for(int i=0;i<numThreads;i++) {\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              _run();\n            } catch (Exception e) {\n              failed.set(true);\n              throw new RuntimeException(e);\n            }\n          }\n\n          private void _run() throws Exception {\n            startingGun.await();\n\n            NumericDocValues docIDToID = MultiDocValues.getNumericValues(r, \"id\");\n\n            for (int iter=0;iter<iters && failed.get() == false;iter++) {\n\n              GeoShape shape = randomShape(planetModel);\n\n              if (VERBOSE) {\n                System.err.println(\"\\n\" + Thread.currentThread() + \": TEST: iter=\" + iter + \" shape=\"+shape);\n              }\n              \n              Query query = new PointInGeo3DShapeQuery(planetModel, \"point\", shape);\n\n              if (VERBOSE) {\n                System.err.println(\"  using query: \" + query);\n              }\n\n              final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n\n              s.search(query, new SimpleCollector() {\n\n                  private int docBase;\n\n                  @Override\n                  public boolean needsScores() {\n                    return false;\n                  }\n\n                  @Override\n                  protected void doSetNextReader(LeafReaderContext context) throws IOException {\n                    docBase = context.docBase;\n                  }\n\n                  @Override\n                  public void collect(int doc) {\n                    hits.set(docBase+doc);\n                  }\n                });\n\n              if (VERBOSE) {\n                System.err.println(\"  hitCount: \" + hits.cardinality());\n              }\n      \n              for(int docID=0;docID<r.maxDoc();docID++) {\n                int id = (int) docIDToID.get(docID);\n                if (Double.isNaN(lats[id]) == false) {\n\n                  // Accurate point:\n                  GeoPoint point1 = new GeoPoint(planetModel, lats[id], lons[id]);\n\n                  // Quantized point (32 bits per dim):\n                  GeoPoint point2 = quantize(planetModel.getMaximumMagnitude(), point1);\n\n                  if (shape.isWithin(point1) != shape.isWithin(point2)) {\n                    if (VERBOSE) {\n                      System.out.println(\"  skip checking docID=\" + docID + \" quantization changed the expected result from \" + shape.isWithin(point1) + \" to \" + shape.isWithin(point2));\n                    }\n                    continue;\n                  }\n\n                  boolean expected = ((deleted.contains(id) == false) && shape.isWithin(point2));\n                  if (hits.get(docID) != expected) {\n                    fail(Thread.currentThread().getName() + \": iter=\" + iter + \" id=\" + id + \" docID=\" + docID + \" lat=\" + lats[id] + \" lon=\" + lons[id] + \" expected \" + expected + \" but got: \" + hits.get(docID) + \" deleted?=\" + deleted.contains(id) + \"\\n  point1=\" + point1 + \", iswithin=\"+shape.isWithin(point1)+\"\\n  point2=\" + point2 + \", iswithin=\"+shape.isWithin(point2) + \"\\n  query=\" + query);\n                  }\n                } else {\n                  assertFalse(hits.get(docID));\n                }\n\n              }\n            }\n          }\n        };\n      thread.setName(\"T\" + i);\n      thread.start();\n      threads.add(thread);\n    }\n    startingGun.countDown();\n    for(Thread thread : threads) {\n      thread.join();\n    }\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  private static void verify(double[] lats, double[] lons) throws Exception {\n    int maxPointsInLeaf = TestUtil.nextInt(random(), 16, 2048);\n    int maxPointsSortInHeap = TestUtil.nextInt(random(), maxPointsInLeaf, 1024*1024);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n\n    PlanetModel planetModel = getPlanetModel();\n\n    // Else we can get O(N^2) merging:\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < lats.length/100) {\n      iwc.setMaxBufferedDocs(lats.length/100);\n    }\n    final DocValuesFormat dvFormat = new Geo3DDocValuesFormat(planetModel, maxPointsInLeaf, maxPointsSortInHeap);\n    Codec codec = new Lucene60Codec() {\n        @Override\n        public DocValuesFormat getDocValuesFormatForField(String field) {\n          if (field.equals(\"point\")) {\n            return dvFormat;\n          } else {\n            return super.getDocValuesFormatForField(field);\n          }\n        }\n      };\n    iwc.setCodec(codec);\n    Directory dir;\n    if (lats.length > 100000) {\n      dir = noVirusChecker(newFSDirectory(createTempDir(\"TestBKDTree\")));\n    } else {\n      dir = getDirectory();\n    }\n    Set<Integer> deleted = new HashSet<>();\n    // RandomIndexWriter is too slow here:\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for(int id=0;id<lats.length;id++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      if (Double.isNaN(lats[id]) == false) {\n        doc.add(new Geo3DPointField(\"point\", planetModel, lats[id], lons[id]));\n      }\n      w.addDocument(doc);\n      if (id > 0 && random().nextInt(100) == 42) {\n        int idToDelete = random().nextInt(id);\n        w.deleteDocuments(new Term(\"id\", \"\"+idToDelete));\n        deleted.add(idToDelete);\n        if (VERBOSE) {\n          System.err.println(\"  delete id=\" + idToDelete);\n        }\n      }\n    }\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    final IndexReader r = DirectoryReader.open(w, true);\n    w.close();\n\n    // We can't wrap with \"exotic\" readers because the geo3d query must see the Geo3DDVFormat:\n    IndexSearcher s = newSearcher(r, false);\n\n    int numThreads = TestUtil.nextInt(random(), 2, 5);\n\n    List<Thread> threads = new ArrayList<>();\n    final int iters = atLeast(100);\n\n    final CountDownLatch startingGun = new CountDownLatch(1);\n    final AtomicBoolean failed = new AtomicBoolean();\n\n    for(int i=0;i<numThreads;i++) {\n      Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              _run();\n            } catch (Exception e) {\n              failed.set(true);\n              throw new RuntimeException(e);\n            }\n          }\n\n          private void _run() throws Exception {\n            startingGun.await();\n\n            NumericDocValues docIDToID = MultiDocValues.getNumericValues(r, \"id\");\n\n            for (int iter=0;iter<iters && failed.get() == false;iter++) {\n\n              GeoShape shape = randomShape(planetModel);\n\n              if (VERBOSE) {\n                System.err.println(\"\\n\" + Thread.currentThread() + \": TEST: iter=\" + iter + \" shape=\"+shape);\n              }\n              \n              Query query = new PointInGeo3DShapeQuery(planetModel, \"point\", shape);\n\n              if (VERBOSE) {\n                System.err.println(\"  using query: \" + query);\n              }\n\n              final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n\n              s.search(query, new SimpleCollector() {\n\n                  private int docBase;\n\n                  @Override\n                  public boolean needsScores() {\n                    return false;\n                  }\n\n                  @Override\n                  protected void doSetNextReader(LeafReaderContext context) throws IOException {\n                    docBase = context.docBase;\n                  }\n\n                  @Override\n                  public void collect(int doc) {\n                    hits.set(docBase+doc);\n                  }\n                });\n\n              if (VERBOSE) {\n                System.err.println(\"  hitCount: \" + hits.cardinality());\n              }\n      \n              for(int docID=0;docID<r.maxDoc();docID++) {\n                int id = (int) docIDToID.get(docID);\n                if (Double.isNaN(lats[id]) == false) {\n\n                  // Accurate point:\n                  GeoPoint point1 = new GeoPoint(planetModel, lats[id], lons[id]);\n\n                  // Quantized point (32 bits per dim):\n                  GeoPoint point2 = quantize(planetModel.getMaximumMagnitude(), point1);\n\n                  if (shape.isWithin(point1) != shape.isWithin(point2)) {\n                    if (VERBOSE) {\n                      System.out.println(\"  skip checking docID=\" + docID + \" quantization changed the expected result from \" + shape.isWithin(point1) + \" to \" + shape.isWithin(point2));\n                    }\n                    continue;\n                  }\n\n                  boolean expected = ((deleted.contains(id) == false) && shape.isWithin(point2));\n                  if (hits.get(docID) != expected) {\n                    fail(Thread.currentThread().getName() + \": iter=\" + iter + \" id=\" + id + \" docID=\" + docID + \" lat=\" + lats[id] + \" lon=\" + lons[id] + \" expected \" + expected + \" but got: \" + hits.get(docID) + \" deleted?=\" + deleted.contains(id) + \"\\n  point1=\" + point1 + \", iswithin=\"+shape.isWithin(point1)+\"\\n  point2=\" + point2 + \", iswithin=\"+shape.isWithin(point2) + \"\\n  query=\" + query);\n                  }\n                } else {\n                  assertFalse(hits.get(docID));\n                }\n\n              }\n            }\n          }\n        };\n      thread.setName(\"T\" + i);\n      thread.start();\n      threads.add(thread);\n    }\n    startingGun.countDown();\n    for(Thread thread : threads) {\n      thread.join();\n    }\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d8f71af177fad4bbfdf462d318247e573faac27f":["f64b7098768253180859cd8faeae6b1a185b06ed"],"f64b7098768253180859cd8faeae6b1a185b06ed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1eee4175312c41f89aa23427f9e4edfc00deeaac":["a870f9917149dc600c4ad4417d615c1795de5864"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["1eee4175312c41f89aa23427f9e4edfc00deeaac"],"a870f9917149dc600c4ad4417d615c1795de5864":["cf1a6fe0cad9503f2c3eaca4de8c4f80a9eb14f0"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["d8f71af177fad4bbfdf462d318247e573faac27f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"cf1a6fe0cad9503f2c3eaca4de8c4f80a9eb14f0":["867e3d9153fb761456b54a9dcce566e1545c5ef6"]},"commit2Childs":{"d8f71af177fad4bbfdf462d318247e573faac27f":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"f64b7098768253180859cd8faeae6b1a185b06ed":["d8f71af177fad4bbfdf462d318247e573faac27f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f64b7098768253180859cd8faeae6b1a185b06ed"],"1eee4175312c41f89aa23427f9e4edfc00deeaac":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a870f9917149dc600c4ad4417d615c1795de5864":["1eee4175312c41f89aa23427f9e4edfc00deeaac"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["cf1a6fe0cad9503f2c3eaca4de8c4f80a9eb14f0"],"cf1a6fe0cad9503f2c3eaca4de8c4f80a9eb14f0":["a870f9917149dc600c4ad4417d615c1795de5864"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}