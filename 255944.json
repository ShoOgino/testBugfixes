{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#copySplitValue(int,byte[]).mjava","commits":[{"id":"9fc0d60683b47b5d922124c31f57c8b34734f9e6","date":1480846684,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#copySplitValue(int,byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#copySplitValue(int,byte[]).mjava","sourceNew":"  /** Copies the split value for this node into the provided byte array */\n  public void copySplitValue(int nodeID, byte[] splitPackedValue) {\n    int address = nodeID * bytesPerIndexEntry;\n    int splitDim;\n    if (numDims == 1) {\n      splitDim = 0;\n    } else {\n      splitDim = splitPackedValues[address++] & 0xff;\n    }\n    \n    assert splitDim < numDims;\n    System.arraycopy(splitPackedValues, address, splitPackedValue, splitDim*bytesPerDim, bytesPerDim);\n  }\n\n","sourceOld":"  /** Copies the split value for this node into the provided byte array */\n  public void copySplitValue(int nodeID, byte[] splitPackedValue) {\n    int address = nodeID * bytesPerIndexEntry;\n    int splitDim;\n    if (numDims == 1) {\n      splitDim = 0;\n      if (version < BKDWriter.VERSION_IMPLICIT_SPLIT_DIM_1D) {\n        // skip over wastefully encoded 0 splitDim:\n        assert splitPackedValues[address] == 0;\n        address++;\n      }\n    } else {\n      splitDim = splitPackedValues[address++] & 0xff;\n    }\n    \n    assert splitDim < numDims;\n    System.arraycopy(splitPackedValues, address, splitPackedValue, splitDim*bytesPerDim, bytesPerDim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#copySplitValue(int,byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#copySplitValue(int,byte[]).mjava","sourceNew":"  /** Copies the split value for this node into the provided byte array */\n  public void copySplitValue(int nodeID, byte[] splitPackedValue) {\n    int address = nodeID * bytesPerIndexEntry;\n    int splitDim;\n    if (numDims == 1) {\n      splitDim = 0;\n    } else {\n      splitDim = splitPackedValues[address++] & 0xff;\n    }\n    \n    assert splitDim < numDims;\n    System.arraycopy(splitPackedValues, address, splitPackedValue, splitDim*bytesPerDim, bytesPerDim);\n  }\n\n","sourceOld":"  /** Copies the split value for this node into the provided byte array */\n  public void copySplitValue(int nodeID, byte[] splitPackedValue) {\n    int address = nodeID * bytesPerIndexEntry;\n    int splitDim;\n    if (numDims == 1) {\n      splitDim = 0;\n      if (version < BKDWriter.VERSION_IMPLICIT_SPLIT_DIM_1D) {\n        // skip over wastefully encoded 0 splitDim:\n        assert splitPackedValues[address] == 0;\n        address++;\n      }\n    } else {\n      splitDim = splitPackedValues[address++] & 0xff;\n    }\n    \n    assert splitDim < numDims;\n    System.arraycopy(splitPackedValues, address, splitPackedValue, splitDim*bytesPerDim, bytesPerDim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#copySplitValue(int,byte[]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#copySplitValue(int,byte[]).mjava","sourceNew":"  /** Copies the split value for this node into the provided byte array */\n  public void copySplitValue(int nodeID, byte[] splitPackedValue) {\n    int address = nodeID * bytesPerIndexEntry;\n    int splitDim;\n    if (numIndexDims == 1) {\n      splitDim = 0;\n    } else {\n      splitDim = splitPackedValues[address++] & 0xff;\n    }\n    \n    assert splitDim < numIndexDims;\n    System.arraycopy(splitPackedValues, address, splitPackedValue, splitDim*bytesPerDim, bytesPerDim);\n  }\n\n","sourceOld":"  /** Copies the split value for this node into the provided byte array */\n  public void copySplitValue(int nodeID, byte[] splitPackedValue) {\n    int address = nodeID * bytesPerIndexEntry;\n    int splitDim;\n    if (numDims == 1) {\n      splitDim = 0;\n    } else {\n      splitDim = splitPackedValues[address++] & 0xff;\n    }\n    \n    assert splitDim < numDims;\n    System.arraycopy(splitPackedValues, address, splitPackedValue, splitDim*bytesPerDim, bytesPerDim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f6652c943595e92c187ee904c382863013eae28f":["9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f6652c943595e92c187ee904c382863013eae28f"]},"commit2Childs":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["f6652c943595e92c187ee904c382863013eae28f","9856095f7afb5a607bf5e65077615ed91273508c"],"f6652c943595e92c187ee904c382863013eae28f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc0d60683b47b5d922124c31f57c8b34734f9e6","9856095f7afb5a607bf5e65077615ed91273508c"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}