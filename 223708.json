{"path":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#discardEscapeChar(String).mjava","commits":[{"id":"3cdb67100dc016748799a77218aa409478372d79","date":1353699950,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#discardEscapeChar(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a String where the escape char has been\n   * removed, or kept only once if there was a double escape.\n   *\n   * Supports escaped unicode characters, e. g. translates\n   * <code>\\\\u0041</code> to <code>A</code>.\n   *\n   */\n  String discardEscapeChar(String input) throws SyntaxError {\n    // Create char array to hold unescaped char sequence\n    char[] output = new char[input.length()];\n\n    // The length of the output can be less than the input\n    // due to discarded escape chars. This variable holds\n    // the actual length of the output\n    int length = 0;\n\n    // We remember whether the last processed character was\n    // an escape character\n    boolean lastCharWasEscapeChar = false;\n\n    // The multiplier the current unicode digit must be multiplied with.\n    // E. g. the first digit must be multiplied with 16^3, the second with 16^2...\n    int codePointMultiplier = 0;\n\n    // Used to calculate the codepoint of the escaped unicode character\n    int codePoint = 0;\n\n    for (int i = 0; i < input.length(); i++) {\n      char curChar = input.charAt(i);\n      if (codePointMultiplier > 0) {\n        codePoint += hexToInt(curChar) * codePointMultiplier;\n        codePointMultiplier >>>= 4;\n        if (codePointMultiplier == 0) {\n          output[length++] = (char)codePoint;\n          codePoint = 0;\n        }\n      } else if (lastCharWasEscapeChar) {\n        if (curChar == 'u') {\n          // found an escaped unicode character\n          codePointMultiplier = 16 * 16 * 16;\n        } else {\n          // this character was escaped\n          output[length] = curChar;\n          length++;\n        }\n        lastCharWasEscapeChar = false;\n      } else {\n        if (curChar == '\\\\') {\n          lastCharWasEscapeChar = true;\n        } else {\n          output[length] = curChar;\n          length++;\n        }\n      }\n    }\n\n    if (codePointMultiplier > 0) {\n      throw new SyntaxError(\"Truncated unicode escape sequence.\");\n    }\n\n    if (lastCharWasEscapeChar) {\n      throw new SyntaxError(\"Term can not end with escape character.\");\n    }\n\n    return new String(output, 0, length);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#discardEscapeChar(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a String where the escape char has been\n   * removed, or kept only once if there was a double escape.\n   *\n   * Supports escaped unicode characters, e. g. translates\n   * <code>\\\\u0041</code> to <code>A</code>.\n   *\n   */\n  String discardEscapeChar(String input) throws SyntaxError {\n    // Create char array to hold unescaped char sequence\n    char[] output = new char[input.length()];\n\n    // The length of the output can be less than the input\n    // due to discarded escape chars. This variable holds\n    // the actual length of the output\n    int length = 0;\n\n    // We remember whether the last processed character was\n    // an escape character\n    boolean lastCharWasEscapeChar = false;\n\n    // The multiplier the current unicode digit must be multiplied with.\n    // E. g. the first digit must be multiplied with 16^3, the second with 16^2...\n    int codePointMultiplier = 0;\n\n    // Used to calculate the codepoint of the escaped unicode character\n    int codePoint = 0;\n\n    for (int i = 0; i < input.length(); i++) {\n      char curChar = input.charAt(i);\n      if (codePointMultiplier > 0) {\n        codePoint += hexToInt(curChar) * codePointMultiplier;\n        codePointMultiplier >>>= 4;\n        if (codePointMultiplier == 0) {\n          output[length++] = (char)codePoint;\n          codePoint = 0;\n        }\n      } else if (lastCharWasEscapeChar) {\n        if (curChar == 'u') {\n          // found an escaped unicode character\n          codePointMultiplier = 16 * 16 * 16;\n        } else {\n          // this character was escaped\n          output[length] = curChar;\n          length++;\n        }\n        lastCharWasEscapeChar = false;\n      } else {\n        if (curChar == '\\\\') {\n          lastCharWasEscapeChar = true;\n        } else {\n          output[length] = curChar;\n          length++;\n        }\n      }\n    }\n\n    if (codePointMultiplier > 0) {\n      throw new SyntaxError(\"Truncated unicode escape sequence.\");\n    }\n\n    if (lastCharWasEscapeChar) {\n      throw new SyntaxError(\"Term can not end with escape character.\");\n    }\n\n    return new String(output, 0, length);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68c354ba50abc8ed5c5fe98901e61d68f93952bb","date":1479836000,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#discardEscapeChar(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#discardEscapeChar(String).mjava","sourceNew":"  /**\n   * Returns a String where the escape char has been\n   * removed, or kept only once if there was a double escape.\n   *\n   * Supports escaped unicode characters, e. g. translates\n   * <code>\\\\u0041</code> to <code>A</code>.\n   *\n   */\n  String discardEscapeChar(String input) throws SyntaxError {\n    int start = input.indexOf('\\\\');\n    if (start < 0) return input;\n\n    // Create char array to hold unescaped char sequence\n    char[] output = new char[input.length()];\n    input.getChars(0, start, output, 0);\n\n    // The length of the output can be less than the input\n    // due to discarded escape chars. This variable holds\n    // the actual length of the output\n    int length = start;\n\n    // We remember whether the last processed character was\n    // an escape character\n    boolean lastCharWasEscapeChar = true;\n\n    // The multiplier the current unicode digit must be multiplied with.\n    // E. g. the first digit must be multiplied with 16^3, the second with 16^2...\n    int codePointMultiplier = 0;\n\n    // Used to calculate the codepoint of the escaped unicode character\n    int codePoint = 0;\n\n    // start after the first escape char\n    for (int i = start+1; i < input.length(); i++) {\n      char curChar = input.charAt(i);\n      if (codePointMultiplier > 0) {\n        codePoint += hexToInt(curChar) * codePointMultiplier;\n        codePointMultiplier >>>= 4;\n        if (codePointMultiplier == 0) {\n          output[length++] = (char)codePoint;\n          codePoint = 0;\n        }\n      } else if (lastCharWasEscapeChar) {\n        if (curChar == 'u') {\n          // found an escaped unicode character\n          codePointMultiplier = 16 * 16 * 16;\n        } else {\n          // this character was escaped\n          output[length] = curChar;\n          length++;\n        }\n        lastCharWasEscapeChar = false;\n      } else {\n        if (curChar == '\\\\') {\n          lastCharWasEscapeChar = true;\n        } else {\n          output[length] = curChar;\n          length++;\n        }\n      }\n    }\n\n    if (codePointMultiplier > 0) {\n      throw new SyntaxError(\"Truncated unicode escape sequence.\");\n    }\n\n    if (lastCharWasEscapeChar) {\n      throw new SyntaxError(\"Term can not end with escape character.\");\n    }\n\n    return new String(output, 0, length);\n  }\n\n","sourceOld":"  /**\n   * Returns a String where the escape char has been\n   * removed, or kept only once if there was a double escape.\n   *\n   * Supports escaped unicode characters, e. g. translates\n   * <code>\\\\u0041</code> to <code>A</code>.\n   *\n   */\n  String discardEscapeChar(String input) throws SyntaxError {\n    // Create char array to hold unescaped char sequence\n    char[] output = new char[input.length()];\n\n    // The length of the output can be less than the input\n    // due to discarded escape chars. This variable holds\n    // the actual length of the output\n    int length = 0;\n\n    // We remember whether the last processed character was\n    // an escape character\n    boolean lastCharWasEscapeChar = false;\n\n    // The multiplier the current unicode digit must be multiplied with.\n    // E. g. the first digit must be multiplied with 16^3, the second with 16^2...\n    int codePointMultiplier = 0;\n\n    // Used to calculate the codepoint of the escaped unicode character\n    int codePoint = 0;\n\n    for (int i = 0; i < input.length(); i++) {\n      char curChar = input.charAt(i);\n      if (codePointMultiplier > 0) {\n        codePoint += hexToInt(curChar) * codePointMultiplier;\n        codePointMultiplier >>>= 4;\n        if (codePointMultiplier == 0) {\n          output[length++] = (char)codePoint;\n          codePoint = 0;\n        }\n      } else if (lastCharWasEscapeChar) {\n        if (curChar == 'u') {\n          // found an escaped unicode character\n          codePointMultiplier = 16 * 16 * 16;\n        } else {\n          // this character was escaped\n          output[length] = curChar;\n          length++;\n        }\n        lastCharWasEscapeChar = false;\n      } else {\n        if (curChar == '\\\\') {\n          lastCharWasEscapeChar = true;\n        } else {\n          output[length] = curChar;\n          length++;\n        }\n      }\n    }\n\n    if (codePointMultiplier > 0) {\n      throw new SyntaxError(\"Truncated unicode escape sequence.\");\n    }\n\n    if (lastCharWasEscapeChar) {\n      throw new SyntaxError(\"Term can not end with escape character.\");\n    }\n\n    return new String(output, 0, length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#discardEscapeChar(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#discardEscapeChar(String).mjava","sourceNew":"  /**\n   * Returns a String where the escape char has been\n   * removed, or kept only once if there was a double escape.\n   *\n   * Supports escaped unicode characters, e. g. translates\n   * <code>\\\\u0041</code> to <code>A</code>.\n   *\n   */\n  String discardEscapeChar(String input) throws SyntaxError {\n    int start = input.indexOf('\\\\');\n    if (start < 0) return input;\n\n    // Create char array to hold unescaped char sequence\n    char[] output = new char[input.length()];\n    input.getChars(0, start, output, 0);\n\n    // The length of the output can be less than the input\n    // due to discarded escape chars. This variable holds\n    // the actual length of the output\n    int length = start;\n\n    // We remember whether the last processed character was\n    // an escape character\n    boolean lastCharWasEscapeChar = true;\n\n    // The multiplier the current unicode digit must be multiplied with.\n    // E. g. the first digit must be multiplied with 16^3, the second with 16^2...\n    int codePointMultiplier = 0;\n\n    // Used to calculate the codepoint of the escaped unicode character\n    int codePoint = 0;\n\n    // start after the first escape char\n    for (int i = start+1; i < input.length(); i++) {\n      char curChar = input.charAt(i);\n      if (codePointMultiplier > 0) {\n        codePoint += hexToInt(curChar) * codePointMultiplier;\n        codePointMultiplier >>>= 4;\n        if (codePointMultiplier == 0) {\n          output[length++] = (char)codePoint;\n          codePoint = 0;\n        }\n      } else if (lastCharWasEscapeChar) {\n        if (curChar == 'u') {\n          // found an escaped unicode character\n          codePointMultiplier = 16 * 16 * 16;\n        } else {\n          // this character was escaped\n          output[length] = curChar;\n          length++;\n        }\n        lastCharWasEscapeChar = false;\n      } else {\n        if (curChar == '\\\\') {\n          lastCharWasEscapeChar = true;\n        } else {\n          output[length] = curChar;\n          length++;\n        }\n      }\n    }\n\n    if (codePointMultiplier > 0) {\n      throw new SyntaxError(\"Truncated unicode escape sequence.\");\n    }\n\n    if (lastCharWasEscapeChar) {\n      throw new SyntaxError(\"Term can not end with escape character.\");\n    }\n\n    return new String(output, 0, length);\n  }\n\n","sourceOld":"  /**\n   * Returns a String where the escape char has been\n   * removed, or kept only once if there was a double escape.\n   *\n   * Supports escaped unicode characters, e. g. translates\n   * <code>\\\\u0041</code> to <code>A</code>.\n   *\n   */\n  String discardEscapeChar(String input) throws SyntaxError {\n    // Create char array to hold unescaped char sequence\n    char[] output = new char[input.length()];\n\n    // The length of the output can be less than the input\n    // due to discarded escape chars. This variable holds\n    // the actual length of the output\n    int length = 0;\n\n    // We remember whether the last processed character was\n    // an escape character\n    boolean lastCharWasEscapeChar = false;\n\n    // The multiplier the current unicode digit must be multiplied with.\n    // E. g. the first digit must be multiplied with 16^3, the second with 16^2...\n    int codePointMultiplier = 0;\n\n    // Used to calculate the codepoint of the escaped unicode character\n    int codePoint = 0;\n\n    for (int i = 0; i < input.length(); i++) {\n      char curChar = input.charAt(i);\n      if (codePointMultiplier > 0) {\n        codePoint += hexToInt(curChar) * codePointMultiplier;\n        codePointMultiplier >>>= 4;\n        if (codePointMultiplier == 0) {\n          output[length++] = (char)codePoint;\n          codePoint = 0;\n        }\n      } else if (lastCharWasEscapeChar) {\n        if (curChar == 'u') {\n          // found an escaped unicode character\n          codePointMultiplier = 16 * 16 * 16;\n        } else {\n          // this character was escaped\n          output[length] = curChar;\n          length++;\n        }\n        lastCharWasEscapeChar = false;\n      } else {\n        if (curChar == '\\\\') {\n          lastCharWasEscapeChar = true;\n        } else {\n          output[length] = curChar;\n          length++;\n        }\n      }\n    }\n\n    if (codePointMultiplier > 0) {\n      throw new SyntaxError(\"Truncated unicode escape sequence.\");\n    }\n\n    if (lastCharWasEscapeChar) {\n      throw new SyntaxError(\"Term can not end with escape character.\");\n    }\n\n    return new String(output, 0, length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"727bb765ff2542275f6d31f67be18d7104bae148":["3cdb67100dc016748799a77218aa409478372d79","68c354ba50abc8ed5c5fe98901e61d68f93952bb"],"3cdb67100dc016748799a77218aa409478372d79":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb67100dc016748799a77218aa409478372d79"],"68c354ba50abc8ed5c5fe98901e61d68f93952bb":["3cdb67100dc016748799a77218aa409478372d79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["68c354ba50abc8ed5c5fe98901e61d68f93952bb"]},"commit2Childs":{"727bb765ff2542275f6d31f67be18d7104bae148":[],"3cdb67100dc016748799a77218aa409478372d79":["727bb765ff2542275f6d31f67be18d7104bae148","407687e67faf6e1f02a211ca078d8e3eed631027","68c354ba50abc8ed5c5fe98901e61d68f93952bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cdb67100dc016748799a77218aa409478372d79","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"68c354ba50abc8ed5c5fe98901e61d68f93952bb":["727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["727bb765ff2542275f6d31f67be18d7104bae148","407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}