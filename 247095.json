{"path":"lucene/src/java/org/apache/lucene/util/PagedBytes.Reader#fillAndGetStart(BytesRef,long).mjava","commits":[{"id":"224555f245128127dc8d161673eb9e867d67857c","date":1290782170,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/PagedBytes.Reader#fillAndGetStart(BytesRef,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/PagedBytes.Reader#fillUsingLengthPrefix3(BytesRef,long).mjava","sourceNew":"    /**\n     * Reads length as 1 or 2 byte vInt prefix, starting at <i>start</i> and\n     * returns the start offset of the next part, suitable as start parameter on\n     * next call to sequentially read all {@link BytesRef}.\n     * \n     * <p>\n     * <b>Note:</b> this method does not support slices spanning across block\n     * borders.\n     * </p>\n     * \n     * @return the start offset of the next part, suitable as start parameter on\n     *         next call to sequentially read all {@link BytesRef}.\n     * @lucene.internal\n     **/\n    public long fillAndGetStart(BytesRef b, long start) {\n      final int index = (int) (start >> blockBits);\n      final int offset = (int) (start & blockMask);\n      final byte[] block = b.bytes = blocks[index];\n\n      if ((block[offset] & 128) == 0) {\n        b.length = block[offset];\n        b.offset = offset+1;\n        start += 1L + b.length;\n      } else {\n        b.length = ((block[offset] & 0x7f) << 8) | (block[1+offset] & 0xff);\n        b.offset = offset+2;\n        start += 2L + b.length;\n        assert b.length > 0;\n      }\n      return start;\n    }\n\n","sourceOld":"    /** @lucene.internal  Reads length as 1 or 2 byte vInt prefix, starting @ start. \n     * Returns the start offset of the next part, suitable as start parameter on next call\n     * to sequentially read all BytesRefs. */\n    public long fillUsingLengthPrefix3(BytesRef b, long start) {\n      final int index = (int) (start >> blockBits);\n      final int offset = (int) (start & blockMask);\n      final byte[] block = b.bytes = blocks[index];\n\n      if ((block[offset] & 128) == 0) {\n        b.length = block[offset];\n        b.offset = offset+1;\n        start += 1L + b.length;\n      } else {\n        b.length = ((block[offset] & 0x7f) << 8) | (block[1+offset] & 0xff);\n        b.offset = offset+2;\n        start += 2L + b.length;\n        assert b.length > 0;\n      }\n      return start;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/PagedBytes.Reader#fillAndGetStart(BytesRef,long).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Reads length as 1 or 2 byte vInt prefix, starting at <i>start</i> and\n     * returns the start offset of the next part, suitable as start parameter on\n     * next call to sequentially read all {@link BytesRef}.\n     * \n     * <p>\n     * <b>Note:</b> this method does not support slices spanning across block\n     * borders.\n     * </p>\n     * \n     * @return the start offset of the next part, suitable as start parameter on\n     *         next call to sequentially read all {@link BytesRef}.\n     * @lucene.internal\n     **/\n    public long fillAndGetStart(BytesRef b, long start) {\n      final int index = (int) (start >> blockBits);\n      final int offset = (int) (start & blockMask);\n      final byte[] block = b.bytes = blocks[index];\n\n      if ((block[offset] & 128) == 0) {\n        b.length = block[offset];\n        b.offset = offset+1;\n        start += 1L + b.length;\n      } else {\n        b.length = ((block[offset] & 0x7f) << 8) | (block[1+offset] & 0xff);\n        b.offset = offset+2;\n        start += 2L + b.length;\n        assert b.length > 0;\n      }\n      return start;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/PagedBytes.Reader#fillAndGetStart(BytesRef,long).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Reads length as 1 or 2 byte vInt prefix, starting at <i>start</i> and\n     * returns the start offset of the next part, suitable as start parameter on\n     * next call to sequentially read all {@link BytesRef}.\n     * \n     * <p>\n     * <b>Note:</b> this method does not support slices spanning across block\n     * borders.\n     * </p>\n     * \n     * @return the start offset of the next part, suitable as start parameter on\n     *         next call to sequentially read all {@link BytesRef}.\n     * @lucene.internal\n     **/\n    public long fillAndGetStart(BytesRef b, long start) {\n      final int index = (int) (start >> blockBits);\n      final int offset = (int) (start & blockMask);\n      final byte[] block = b.bytes = blocks[index];\n\n      if ((block[offset] & 128) == 0) {\n        b.length = block[offset];\n        b.offset = offset+1;\n        start += 1L + b.length;\n      } else {\n        b.length = ((block[offset] & 0x7f) << 8) | (block[1+offset] & 0xff);\n        b.offset = offset+2;\n        start += 2L + b.length;\n        assert b.length > 0;\n      }\n      return start;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/PagedBytes.Reader#fillAndGetStart(BytesRef,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/PagedBytes.Reader#fillAndGetStart(BytesRef,long).mjava","sourceNew":"    /**\n     * Reads length as 1 or 2 byte vInt prefix, starting at <i>start</i> and\n     * returns the start offset of the next part, suitable as start parameter on\n     * next call to sequentially read all {@link BytesRef}.\n     * \n     * <p>\n     * <b>Note:</b> this method does not support slices spanning across block\n     * borders.\n     * </p>\n     * \n     * @return the start offset of the next part, suitable as start parameter on\n     *         next call to sequentially read all {@link BytesRef}.\n     * @lucene.internal\n     **/\n    public long fillAndGetStart(BytesRef b, long start) {\n      final int index = (int) (start >> blockBits);\n      final int offset = (int) (start & blockMask);\n      final byte[] block = b.bytes = blocks[index];\n\n      if ((block[offset] & 128) == 0) {\n        b.length = block[offset];\n        b.offset = offset+1;\n        start += 1L + b.length;\n      } else {\n        b.length = ((block[offset] & 0x7f) << 8) | (block[1+offset] & 0xff);\n        b.offset = offset+2;\n        start += 2L + b.length;\n        assert b.length > 0;\n      }\n      return start;\n    }\n\n","sourceOld":"    /**\n     * Reads length as 1 or 2 byte vInt prefix, starting at <i>start</i> and\n     * returns the start offset of the next part, suitable as start parameter on\n     * next call to sequentially read all {@link BytesRef}.\n     * \n     * <p>\n     * <b>Note:</b> this method does not support slices spanning across block\n     * borders.\n     * </p>\n     * \n     * @return the start offset of the next part, suitable as start parameter on\n     *         next call to sequentially read all {@link BytesRef}.\n     * @lucene.internal\n     **/\n    public long fillAndGetStart(BytesRef b, long start) {\n      final int index = (int) (start >> blockBits);\n      final int offset = (int) (start & blockMask);\n      final byte[] block = b.bytes = blocks[index];\n\n      if ((block[offset] & 128) == 0) {\n        b.length = block[offset];\n        b.offset = offset+1;\n        start += 1L + b.length;\n      } else {\n        b.length = ((block[offset] & 0x7f) << 8) | (block[1+offset] & 0xff);\n        b.offset = offset+2;\n        start += 2L + b.length;\n        assert b.length > 0;\n      }\n      return start;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["224555f245128127dc8d161673eb9e867d67857c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","224555f245128127dc8d161673eb9e867d67857c"],"3bb13258feba31ab676502787ab2e1779f129b7a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","224555f245128127dc8d161673eb9e867d67857c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"224555f245128127dc8d161673eb9e867d67857c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","224555f245128127dc8d161673eb9e867d67857c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"224555f245128127dc8d161673eb9e867d67857c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}