{"path":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#testSetClusterReqHandler().mjava","commits":[{"id":"fb50877dc038c021eba3a70999fd1f6ed85001c1","date":1563596432,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#testSetClusterReqHandler().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSetClusterReqHandler() throws Exception {\n    MiniSolrCloudCluster cluster = configureCluster(4).configure();\n    try {\n      SolrZkClient zkClient = cluster.getZkClient();\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{add-requesthandler:{name : 'foo', class : 'org.apache.solr.handler.DumpRequestHandler'}}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n\n      Map<String, Object> map = assertVersionInSync(zkClient, cluster.getSolrClient());\n\n      assertEquals(\"org.apache.solr.handler.DumpRequestHandler\",\n          getObjectByPath(map, true, Arrays.asList(\"requestHandler\", \"foo\", \"class\")));\n\n      assertVersionInSync(zkClient, cluster.getSolrClient());\n      V2Response rsp = new V2Request.Builder(\"/node/ext/foo\")\n          .withMethod(SolrRequest.METHOD.GET)\n          .withParams(new MapSolrParams((Map) Utils.makeMap(\"testkey\", \"testval\")))\n          .build().process(cluster.getSolrClient());\n      assertEquals(\"testval\", rsp._getStr(\"params/testkey\", null));\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{delete-requesthandler: 'foo'}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n\n      assertNull(getObjectByPath(map, true, Arrays.asList(\"requestHandler\", \"foo\")));\n    } finally {\n      cluster.shutdown();\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#testSetClusterReqHandler().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testSetClusterReqHandler() throws Exception {\n    MiniSolrCloudCluster cluster = configureCluster(4).configure();\n    try {\n      SolrZkClient zkClient = cluster.getZkClient();\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{add-requesthandler:{name : 'foo', class : 'org.apache.solr.handler.DumpRequestHandler'}}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n\n      Map<String, Object> map = assertVersionInSync(zkClient, cluster.getSolrClient());\n\n      assertEquals(\"org.apache.solr.handler.DumpRequestHandler\",\n          getObjectByPath(map, true, Arrays.asList(\"requestHandler\", \"foo\", \"class\")));\n\n      assertVersionInSync(zkClient, cluster.getSolrClient());\n      V2Response rsp = new V2Request.Builder(\"/node/ext/foo\")\n          .withMethod(SolrRequest.METHOD.GET)\n          .withParams(new MapSolrParams((Map) Utils.makeMap(\"testkey\", \"testval\")))\n          .build().process(cluster.getSolrClient());\n      assertEquals(\"testval\", rsp._getStr(\"params/testkey\", null));\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{delete-requesthandler: 'foo'}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n\n      assertNull(getObjectByPath(map, true, Arrays.asList(\"requestHandler\", \"foo\")));\n    } finally {\n      cluster.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":4,"author":"jimczi","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/handler/TestContainerReqHandler#testSetClusterReqHandler().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testSetClusterReqHandler() throws Exception {\n    MiniSolrCloudCluster cluster = configureCluster(4).configure();\n    try {\n      SolrZkClient zkClient = cluster.getZkClient();\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{add-requesthandler:{name : 'foo', class : 'org.apache.solr.handler.DumpRequestHandler'}}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n\n      Map<String, Object> map = assertVersionInSync(zkClient, cluster.getSolrClient());\n\n      assertEquals(\"org.apache.solr.handler.DumpRequestHandler\",\n          getObjectByPath(map, true, Arrays.asList(\"requestHandler\", \"foo\", \"class\")));\n\n      assertVersionInSync(zkClient, cluster.getSolrClient());\n      V2Response rsp = new V2Request.Builder(\"/node/ext/foo\")\n          .withMethod(SolrRequest.METHOD.GET)\n          .withParams(new MapSolrParams((Map) Utils.makeMap(\"testkey\", \"testval\")))\n          .build().process(cluster.getSolrClient());\n      assertEquals(\"testval\", rsp._getStr(\"params/testkey\", null));\n\n      new V2Request.Builder(\"/cluster\")\n          .withPayload(\"{delete-requesthandler: 'foo'}\")\n          .withMethod(SolrRequest.METHOD.POST)\n          .build().process(cluster.getSolrClient());\n\n      assertNull(getObjectByPath(map, true, Arrays.asList(\"requestHandler\", \"foo\")));\n    } finally {\n      cluster.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb50877dc038c021eba3a70999fd1f6ed85001c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c44cc06c26e456fe9c215072b79fce30babe3975":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c44cc06c26e456fe9c215072b79fce30babe3975"],"b0b597c65628ca9e73913a07e81691f8229bae35":["fb50877dc038c021eba3a70999fd1f6ed85001c1","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"fb50877dc038c021eba3a70999fd1f6ed85001c1":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"c44cc06c26e456fe9c215072b79fce30babe3975":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}