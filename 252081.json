{"path":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testWhiteboxCreateFields().mjava","commits":[{"id":"0ff61c2e5ce6b1f26a271d9d454206db1917d628","date":1491505661,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testWhiteboxCreateFields().mjava","pathOld":"/dev/null","sourceNew":"  public void testWhiteboxCreateFields() throws Exception {\n    // TODO: we should have a \"coverage\" assert that we're looping over all the dynamic (point) fields in the schema\n    \n    String[] typeNames = new String[]{\"i\", \"l\", \"f\", \"d\", \"dt\"};\n    String[] suffixes = new String[]{\"\", \"_dv\", \"_mv\", \"_mv_dv\", \"_ni\", \"_ni_dv\", \"_ni_dv_ns\", \"_ni_mv\", \"_ni_mv_dv\", \"_ni_ns\", \"_ni_ns_mv\", \"_dv_ns\", \"_ni_ns_dv\", \"_dv_ns_mv\"};\n    Class<?>[] expectedClasses = new Class[]{IntPoint.class, LongPoint.class, FloatPoint.class, DoublePoint.class, LongPoint.class};\n    \n    Date dateToTest = new Date();\n    Object[][] values = new Object[][] {\n      {42, \"42\"},\n      {42, \"42\"},\n      {42.123, \"42.123\"},\n      {12345.6789, \"12345.6789\"},\n      {dateToTest, new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Locale.ROOT).format(dateToTest), \"NOW\"} // \"NOW\" won't be equal to the other dates\n    };\n    \n    Set<String> typesTested = new HashSet<>();\n    for (int i = 0; i < typeNames.length; i++) {\n      for (String suffix:suffixes) {\n        doWhiteboxCreateFields(\"whitebox_p_\" + typeNames[i] + suffix, expectedClasses[i], values[i]);\n        typesTested.add(\"*_p_\" + typeNames[i] + suffix);\n      }\n    }\n    Set<String> typesToTest = new HashSet<>();\n    for (DynamicField dynField:h.getCore().getLatestSchema().getDynamicFields()) {\n      if (dynField.getPrototype().getType() instanceof PointField) {\n        typesToTest.add(dynField.getRegex());\n      }\n    }\n    assertEquals(\"Missing types in the test\", typesTested, typesToTest);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"459679dac02ecc58120b21ff31374b6ca915e88c","date":1491590182,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testWhiteboxCreateFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testWhiteboxCreateFields().mjava","sourceNew":"  public void testWhiteboxCreateFields() throws Exception {\n    String[] typeNames = new String[]{\"i\", \"l\", \"f\", \"d\", \"dt\"};\n    String[] suffixes = new String[]{\"\", \"_dv\", \"_mv\", \"_mv_dv\", \"_ni\", \"_ni_dv\", \"_ni_dv_ns\", \"_ni_dv_ns_mv\", \"_ni_mv\", \"_ni_mv_dv\", \"_ni_ns\", \"_ni_ns_mv\", \"_dv_ns\", \"_ni_ns_dv\", \"_dv_ns_mv\"};\n    Class<?>[] expectedClasses = new Class[]{IntPoint.class, LongPoint.class, FloatPoint.class, DoublePoint.class, LongPoint.class};\n    \n    Date dateToTest = new Date();\n    Object[][] values = new Object[][] {\n      {42, \"42\"},\n      {42, \"42\"},\n      {42.123, \"42.123\"},\n      {12345.6789, \"12345.6789\"},\n      {dateToTest, new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Locale.ROOT).format(dateToTest), \"NOW\"} // \"NOW\" won't be equal to the other dates\n    };\n    \n    Set<String> typesTested = new HashSet<>();\n    for (int i = 0; i < typeNames.length; i++) {\n      for (String suffix:suffixes) {\n        doWhiteboxCreateFields(\"whitebox_p_\" + typeNames[i] + suffix, expectedClasses[i], values[i]);\n        typesTested.add(\"*_p_\" + typeNames[i] + suffix);\n      }\n    }\n    Set<String> typesToTest = new HashSet<>();\n    for (DynamicField dynField:h.getCore().getLatestSchema().getDynamicFields()) {\n      if (dynField.getPrototype().getType() instanceof PointField) {\n        typesToTest.add(dynField.getRegex());\n      }\n    }\n    assertEquals(\"Missing types in the test\", typesTested, typesToTest);\n  }\n\n","sourceOld":"  public void testWhiteboxCreateFields() throws Exception {\n    // TODO: we should have a \"coverage\" assert that we're looping over all the dynamic (point) fields in the schema\n    \n    String[] typeNames = new String[]{\"i\", \"l\", \"f\", \"d\", \"dt\"};\n    String[] suffixes = new String[]{\"\", \"_dv\", \"_mv\", \"_mv_dv\", \"_ni\", \"_ni_dv\", \"_ni_dv_ns\", \"_ni_mv\", \"_ni_mv_dv\", \"_ni_ns\", \"_ni_ns_mv\", \"_dv_ns\", \"_ni_ns_dv\", \"_dv_ns_mv\"};\n    Class<?>[] expectedClasses = new Class[]{IntPoint.class, LongPoint.class, FloatPoint.class, DoublePoint.class, LongPoint.class};\n    \n    Date dateToTest = new Date();\n    Object[][] values = new Object[][] {\n      {42, \"42\"},\n      {42, \"42\"},\n      {42.123, \"42.123\"},\n      {12345.6789, \"12345.6789\"},\n      {dateToTest, new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Locale.ROOT).format(dateToTest), \"NOW\"} // \"NOW\" won't be equal to the other dates\n    };\n    \n    Set<String> typesTested = new HashSet<>();\n    for (int i = 0; i < typeNames.length; i++) {\n      for (String suffix:suffixes) {\n        doWhiteboxCreateFields(\"whitebox_p_\" + typeNames[i] + suffix, expectedClasses[i], values[i]);\n        typesTested.add(\"*_p_\" + typeNames[i] + suffix);\n      }\n    }\n    Set<String> typesToTest = new HashSet<>();\n    for (DynamicField dynField:h.getCore().getLatestSchema().getDynamicFields()) {\n      if (dynField.getPrototype().getType() instanceof PointField) {\n        typesToTest.add(dynField.getRegex());\n      }\n    }\n    assertEquals(\"Missing types in the test\", typesTested, typesToTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testWhiteboxCreateFields().mjava","pathOld":"/dev/null","sourceNew":"  public void testWhiteboxCreateFields() throws Exception {\n    String[] typeNames = new String[]{\"i\", \"l\", \"f\", \"d\", \"dt\"};\n    String[] suffixes = new String[]{\"\", \"_dv\", \"_mv\", \"_mv_dv\", \"_ni\", \"_ni_dv\", \"_ni_dv_ns\", \"_ni_dv_ns_mv\", \"_ni_mv\", \"_ni_mv_dv\", \"_ni_ns\", \"_ni_ns_mv\", \"_dv_ns\", \"_ni_ns_dv\", \"_dv_ns_mv\"};\n    Class<?>[] expectedClasses = new Class[]{IntPoint.class, LongPoint.class, FloatPoint.class, DoublePoint.class, LongPoint.class};\n    \n    Date dateToTest = new Date();\n    Object[][] values = new Object[][] {\n      {42, \"42\"},\n      {42, \"42\"},\n      {42.123, \"42.123\"},\n      {12345.6789, \"12345.6789\"},\n      {dateToTest, new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Locale.ROOT).format(dateToTest), \"NOW\"} // \"NOW\" won't be equal to the other dates\n    };\n    \n    Set<String> typesTested = new HashSet<>();\n    for (int i = 0; i < typeNames.length; i++) {\n      for (String suffix:suffixes) {\n        doWhiteboxCreateFields(\"whitebox_p_\" + typeNames[i] + suffix, expectedClasses[i], values[i]);\n        typesTested.add(\"*_p_\" + typeNames[i] + suffix);\n      }\n    }\n    Set<String> typesToTest = new HashSet<>();\n    for (DynamicField dynField:h.getCore().getLatestSchema().getDynamicFields()) {\n      if (dynField.getPrototype().getType() instanceof PointField) {\n        typesToTest.add(dynField.getRegex());\n      }\n    }\n    assertEquals(\"Missing types in the test\", typesTested, typesToTest);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89c0b1a887eabf9facdf2c5d2df5e284c6d6daa","date":1496877670,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testWhiteboxCreateFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testWhiteboxCreateFields().mjava","sourceNew":"  public void testWhiteboxCreateFields() throws Exception {\n    String[] typeNames = new String[]{\"i\", \"l\", \"f\", \"d\", \"dt\"};\n    Class<?>[] expectedClasses = new Class[]{IntPoint.class, LongPoint.class, FloatPoint.class, DoublePoint.class, LongPoint.class};\n    \n    Date dateToTest = new Date();\n    Object[][] values = new Object[][] {\n      {42, \"42\"},\n      {42, \"42\"},\n      {42.123, \"42.123\"},\n      {12345.6789, \"12345.6789\"},\n      {dateToTest, new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Locale.ROOT).format(dateToTest), \"NOW\"} // \"NOW\" won't be equal to the other dates\n    };\n    \n    Set<String> typesTested = new HashSet<>();\n    for (int i = 0; i < typeNames.length; i++) {\n      for (String suffix:FIELD_SUFFIXES) {\n        doWhiteboxCreateFields(\"whitebox_p_\" + typeNames[i] + suffix, expectedClasses[i], values[i]);\n        typesTested.add(\"*_p_\" + typeNames[i] + suffix);\n      }\n    }\n    Set<String> typesToTest = new HashSet<>();\n    for (DynamicField dynField:h.getCore().getLatestSchema().getDynamicFields()) {\n      if (dynField.getPrototype().getType() instanceof PointField) {\n        typesToTest.add(dynField.getRegex());\n      }\n    }\n    assertEquals(\"Missing types in the test\", typesTested, typesToTest);\n  }\n\n","sourceOld":"  public void testWhiteboxCreateFields() throws Exception {\n    String[] typeNames = new String[]{\"i\", \"l\", \"f\", \"d\", \"dt\"};\n    String[] suffixes = new String[]{\"\", \"_dv\", \"_mv\", \"_mv_dv\", \"_ni\", \"_ni_dv\", \"_ni_dv_ns\", \"_ni_dv_ns_mv\", \"_ni_mv\", \"_ni_mv_dv\", \"_ni_ns\", \"_ni_ns_mv\", \"_dv_ns\", \"_ni_ns_dv\", \"_dv_ns_mv\"};\n    Class<?>[] expectedClasses = new Class[]{IntPoint.class, LongPoint.class, FloatPoint.class, DoublePoint.class, LongPoint.class};\n    \n    Date dateToTest = new Date();\n    Object[][] values = new Object[][] {\n      {42, \"42\"},\n      {42, \"42\"},\n      {42.123, \"42.123\"},\n      {12345.6789, \"12345.6789\"},\n      {dateToTest, new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Locale.ROOT).format(dateToTest), \"NOW\"} // \"NOW\" won't be equal to the other dates\n    };\n    \n    Set<String> typesTested = new HashSet<>();\n    for (int i = 0; i < typeNames.length; i++) {\n      for (String suffix:suffixes) {\n        doWhiteboxCreateFields(\"whitebox_p_\" + typeNames[i] + suffix, expectedClasses[i], values[i]);\n        typesTested.add(\"*_p_\" + typeNames[i] + suffix);\n      }\n    }\n    Set<String> typesToTest = new HashSet<>();\n    for (DynamicField dynField:h.getCore().getLatestSchema().getDynamicFields()) {\n      if (dynField.getPrototype().getType() instanceof PointField) {\n        typesToTest.add(dynField.getRegex());\n      }\n    }\n    assertEquals(\"Missing types in the test\", typesTested, typesToTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f344bb33ca91f48e99c061980115b46fa84fc8f5","date":1496903283,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testWhiteboxCreateFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testWhiteboxCreateFields().mjava","sourceNew":"  public void testWhiteboxCreateFields() throws Exception {\n    String[] typeNames = new String[]{\"i\", \"l\", \"f\", \"d\", \"dt\"};\n    Class<?>[] expectedClasses = new Class[]{IntPoint.class, LongPoint.class, FloatPoint.class, DoublePoint.class, LongPoint.class};\n    \n    Date dateToTest = new Date();\n    Object[][] values = new Object[][] {\n      {42, \"42\"},\n      {42, \"42\"},\n      {42.123, \"42.123\"},\n      {12345.6789, \"12345.6789\"},\n      {dateToTest, new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Locale.ROOT).format(dateToTest), \"NOW\"} // \"NOW\" won't be equal to the other dates\n    };\n    \n    Set<String> typesTested = new HashSet<>();\n    for (int i = 0; i < typeNames.length; i++) {\n      for (String suffix:FIELD_SUFFIXES) {\n        doWhiteboxCreateFields(\"whitebox_p_\" + typeNames[i] + suffix, expectedClasses[i], values[i]);\n        typesTested.add(\"*_p_\" + typeNames[i] + suffix);\n      }\n    }\n    Set<String> typesToTest = new HashSet<>();\n    for (DynamicField dynField:h.getCore().getLatestSchema().getDynamicFields()) {\n      if (dynField.getPrototype().getType() instanceof PointField) {\n        typesToTest.add(dynField.getRegex());\n      }\n    }\n    assertEquals(\"Missing types in the test\", typesTested, typesToTest);\n  }\n\n","sourceOld":"  public void testWhiteboxCreateFields() throws Exception {\n    String[] typeNames = new String[]{\"i\", \"l\", \"f\", \"d\", \"dt\"};\n    String[] suffixes = new String[]{\"\", \"_dv\", \"_mv\", \"_mv_dv\", \"_ni\", \"_ni_dv\", \"_ni_dv_ns\", \"_ni_dv_ns_mv\", \"_ni_mv\", \"_ni_mv_dv\", \"_ni_ns\", \"_ni_ns_mv\", \"_dv_ns\", \"_ni_ns_dv\", \"_dv_ns_mv\"};\n    Class<?>[] expectedClasses = new Class[]{IntPoint.class, LongPoint.class, FloatPoint.class, DoublePoint.class, LongPoint.class};\n    \n    Date dateToTest = new Date();\n    Object[][] values = new Object[][] {\n      {42, \"42\"},\n      {42, \"42\"},\n      {42.123, \"42.123\"},\n      {12345.6789, \"12345.6789\"},\n      {dateToTest, new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Locale.ROOT).format(dateToTest), \"NOW\"} // \"NOW\" won't be equal to the other dates\n    };\n    \n    Set<String> typesTested = new HashSet<>();\n    for (int i = 0; i < typeNames.length; i++) {\n      for (String suffix:suffixes) {\n        doWhiteboxCreateFields(\"whitebox_p_\" + typeNames[i] + suffix, expectedClasses[i], values[i]);\n        typesTested.add(\"*_p_\" + typeNames[i] + suffix);\n      }\n    }\n    Set<String> typesToTest = new HashSet<>();\n    for (DynamicField dynField:h.getCore().getLatestSchema().getDynamicFields()) {\n      if (dynField.getPrototype().getType() instanceof PointField) {\n        typesToTest.add(dynField.getRegex());\n      }\n    }\n    assertEquals(\"Missing types in the test\", typesTested, typesToTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testWhiteboxCreateFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testWhiteboxCreateFields().mjava","sourceNew":"  public void testWhiteboxCreateFields() throws Exception {\n    String[] typeNames = new String[]{\"i\", \"l\", \"f\", \"d\", \"dt\"};\n    Class<?>[] expectedClasses = new Class[]{IntPoint.class, LongPoint.class, FloatPoint.class, DoublePoint.class, LongPoint.class};\n    \n    Date dateToTest = new Date();\n    Object[][] values = new Object[][] {\n      {42, \"42\"},\n      {42, \"42\"},\n      {42.123, \"42.123\"},\n      {12345.6789, \"12345.6789\"},\n      {dateToTest, new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Locale.ROOT).format(dateToTest), \"NOW\"} // \"NOW\" won't be equal to the other dates\n    };\n    \n    Set<String> typesTested = new HashSet<>();\n    for (int i = 0; i < typeNames.length; i++) {\n      for (String suffix:FIELD_SUFFIXES) {\n        doWhiteboxCreateFields(\"whitebox_p_\" + typeNames[i] + suffix, expectedClasses[i], values[i]);\n        typesTested.add(\"*_p_\" + typeNames[i] + suffix);\n      }\n    }\n    Set<String> typesToTest = new HashSet<>();\n    for (DynamicField dynField:h.getCore().getLatestSchema().getDynamicFields()) {\n      if (dynField.getPrototype().getType() instanceof PointField) {\n        typesToTest.add(dynField.getRegex());\n      }\n    }\n    assertEquals(\"Missing types in the test\", typesTested, typesToTest);\n  }\n\n","sourceOld":"  public void testWhiteboxCreateFields() throws Exception {\n    String[] typeNames = new String[]{\"i\", \"l\", \"f\", \"d\", \"dt\"};\n    String[] suffixes = new String[]{\"\", \"_dv\", \"_mv\", \"_mv_dv\", \"_ni\", \"_ni_dv\", \"_ni_dv_ns\", \"_ni_dv_ns_mv\", \"_ni_mv\", \"_ni_mv_dv\", \"_ni_ns\", \"_ni_ns_mv\", \"_dv_ns\", \"_ni_ns_dv\", \"_dv_ns_mv\"};\n    Class<?>[] expectedClasses = new Class[]{IntPoint.class, LongPoint.class, FloatPoint.class, DoublePoint.class, LongPoint.class};\n    \n    Date dateToTest = new Date();\n    Object[][] values = new Object[][] {\n      {42, \"42\"},\n      {42, \"42\"},\n      {42.123, \"42.123\"},\n      {12345.6789, \"12345.6789\"},\n      {dateToTest, new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Locale.ROOT).format(dateToTest), \"NOW\"} // \"NOW\" won't be equal to the other dates\n    };\n    \n    Set<String> typesTested = new HashSet<>();\n    for (int i = 0; i < typeNames.length; i++) {\n      for (String suffix:suffixes) {\n        doWhiteboxCreateFields(\"whitebox_p_\" + typeNames[i] + suffix, expectedClasses[i], values[i]);\n        typesTested.add(\"*_p_\" + typeNames[i] + suffix);\n      }\n    }\n    Set<String> typesToTest = new HashSet<>();\n    for (DynamicField dynField:h.getCore().getLatestSchema().getDynamicFields()) {\n      if (dynField.getPrototype().getType() instanceof PointField) {\n        typesToTest.add(dynField.getRegex());\n      }\n    }\n    assertEquals(\"Missing types in the test\", typesTested, typesToTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testWhiteboxCreateFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testWhiteboxCreateFields().mjava","sourceNew":"  public void testWhiteboxCreateFields() throws Exception {\n    String[] typeNames = new String[]{\"i\", \"l\", \"f\", \"d\", \"dt\"};\n    Class<?>[] expectedClasses = new Class[]{IntPoint.class, LongPoint.class, FloatPoint.class, DoublePoint.class, LongPoint.class};\n    \n    Date dateToTest = new Date();\n    Object[][] values = new Object[][] {\n      {42, \"42\"},\n      {42, \"42\"},\n      {42.123, \"42.123\"},\n      {12345.6789, \"12345.6789\"},\n      {dateToTest, new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Locale.ROOT).format(dateToTest), \"NOW\"} // \"NOW\" won't be equal to the other dates\n    };\n    \n    Set<String> typesTested = new HashSet<>();\n    for (int i = 0; i < typeNames.length; i++) {\n      for (String suffix:FIELD_SUFFIXES) {\n        doWhiteboxCreateFields(\"whitebox_p_\" + typeNames[i] + suffix, expectedClasses[i], values[i]);\n        typesTested.add(\"*_p_\" + typeNames[i] + suffix);\n      }\n    }\n    Set<String> typesToTest = new HashSet<>();\n    for (DynamicField dynField:h.getCore().getLatestSchema().getDynamicFields()) {\n      if (dynField.getPrototype().getType() instanceof PointField) {\n        typesToTest.add(dynField.getRegex());\n      }\n    }\n    assertEquals(\"Missing types in the test\", typesTested, typesToTest);\n  }\n\n","sourceOld":"  public void testWhiteboxCreateFields() throws Exception {\n    String[] typeNames = new String[]{\"i\", \"l\", \"f\", \"d\", \"dt\"};\n    String[] suffixes = new String[]{\"\", \"_dv\", \"_mv\", \"_mv_dv\", \"_ni\", \"_ni_dv\", \"_ni_dv_ns\", \"_ni_dv_ns_mv\", \"_ni_mv\", \"_ni_mv_dv\", \"_ni_ns\", \"_ni_ns_mv\", \"_dv_ns\", \"_ni_ns_dv\", \"_dv_ns_mv\"};\n    Class<?>[] expectedClasses = new Class[]{IntPoint.class, LongPoint.class, FloatPoint.class, DoublePoint.class, LongPoint.class};\n    \n    Date dateToTest = new Date();\n    Object[][] values = new Object[][] {\n      {42, \"42\"},\n      {42, \"42\"},\n      {42.123, \"42.123\"},\n      {12345.6789, \"12345.6789\"},\n      {dateToTest, new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Locale.ROOT).format(dateToTest), \"NOW\"} // \"NOW\" won't be equal to the other dates\n    };\n    \n    Set<String> typesTested = new HashSet<>();\n    for (int i = 0; i < typeNames.length; i++) {\n      for (String suffix:suffixes) {\n        doWhiteboxCreateFields(\"whitebox_p_\" + typeNames[i] + suffix, expectedClasses[i], values[i]);\n        typesTested.add(\"*_p_\" + typeNames[i] + suffix);\n      }\n    }\n    Set<String> typesToTest = new HashSet<>();\n    for (DynamicField dynField:h.getCore().getLatestSchema().getDynamicFields()) {\n      if (dynField.getPrototype().getType() instanceof PointField) {\n        typesToTest.add(dynField.getRegex());\n      }\n    }\n    assertEquals(\"Missing types in the test\", typesTested, typesToTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testWhiteboxCreateFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testWhiteboxCreateFields().mjava","sourceNew":"  public void testWhiteboxCreateFields() throws Exception {\n    String[] typeNames = new String[]{\"i\", \"l\", \"f\", \"d\", \"dt\"};\n    @SuppressWarnings({\"rawtypes\"})\n    Class<?>[] expectedClasses = new Class[]{IntPoint.class, LongPoint.class, FloatPoint.class, DoublePoint.class, LongPoint.class};\n    \n    Date dateToTest = new Date();\n    Object[][] values = new Object[][] {\n      {42, \"42\"},\n      {42, \"42\"},\n      {42.123, \"42.123\"},\n      {12345.6789, \"12345.6789\"},\n      {dateToTest, new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Locale.ROOT).format(dateToTest), \"NOW\"} // \"NOW\" won't be equal to the other dates\n    };\n    \n    Set<String> typesTested = new HashSet<>();\n    for (int i = 0; i < typeNames.length; i++) {\n      for (String suffix:FIELD_SUFFIXES) {\n        doWhiteboxCreateFields(\"whitebox_p_\" + typeNames[i] + suffix, expectedClasses[i], values[i]);\n        typesTested.add(\"*_p_\" + typeNames[i] + suffix);\n      }\n    }\n    Set<String> typesToTest = new HashSet<>();\n    for (DynamicField dynField:h.getCore().getLatestSchema().getDynamicFields()) {\n      if (dynField.getPrototype().getType() instanceof PointField) {\n        typesToTest.add(dynField.getRegex());\n      }\n    }\n    assertEquals(\"Missing types in the test\", typesTested, typesToTest);\n  }\n\n","sourceOld":"  public void testWhiteboxCreateFields() throws Exception {\n    String[] typeNames = new String[]{\"i\", \"l\", \"f\", \"d\", \"dt\"};\n    Class<?>[] expectedClasses = new Class[]{IntPoint.class, LongPoint.class, FloatPoint.class, DoublePoint.class, LongPoint.class};\n    \n    Date dateToTest = new Date();\n    Object[][] values = new Object[][] {\n      {42, \"42\"},\n      {42, \"42\"},\n      {42.123, \"42.123\"},\n      {12345.6789, \"12345.6789\"},\n      {dateToTest, new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z'\", Locale.ROOT).format(dateToTest), \"NOW\"} // \"NOW\" won't be equal to the other dates\n    };\n    \n    Set<String> typesTested = new HashSet<>();\n    for (int i = 0; i < typeNames.length; i++) {\n      for (String suffix:FIELD_SUFFIXES) {\n        doWhiteboxCreateFields(\"whitebox_p_\" + typeNames[i] + suffix, expectedClasses[i], values[i]);\n        typesTested.add(\"*_p_\" + typeNames[i] + suffix);\n      }\n    }\n    Set<String> typesToTest = new HashSet<>();\n    for (DynamicField dynField:h.getCore().getLatestSchema().getDynamicFields()) {\n      if (dynField.getPrototype().getType() instanceof PointField) {\n        typesToTest.add(dynField.getRegex());\n      }\n    }\n    assertEquals(\"Missing types in the test\", typesTested, typesToTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"459679dac02ecc58120b21ff31374b6ca915e88c":["0ff61c2e5ce6b1f26a271d9d454206db1917d628"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b89c0b1a887eabf9facdf2c5d2df5e284c6d6daa":["459679dac02ecc58120b21ff31374b6ca915e88c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f344bb33ca91f48e99c061980115b46fa84fc8f5":["459679dac02ecc58120b21ff31374b6ca915e88c","b89c0b1a887eabf9facdf2c5d2df5e284c6d6daa"],"28288370235ed02234a64753cdbf0c6ec096304a":["459679dac02ecc58120b21ff31374b6ca915e88c","f344bb33ca91f48e99c061980115b46fa84fc8f5"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","f344bb33ca91f48e99c061980115b46fa84fc8f5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["28288370235ed02234a64753cdbf0c6ec096304a"],"0ff61c2e5ce6b1f26a271d9d454206db1917d628":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"459679dac02ecc58120b21ff31374b6ca915e88c":["b89c0b1a887eabf9facdf2c5d2df5e284c6d6daa","f344bb33ca91f48e99c061980115b46fa84fc8f5","28288370235ed02234a64753cdbf0c6ec096304a"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"b89c0b1a887eabf9facdf2c5d2df5e284c6d6daa":["f344bb33ca91f48e99c061980115b46fa84fc8f5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","0ff61c2e5ce6b1f26a271d9d454206db1917d628"],"f344bb33ca91f48e99c061980115b46fa84fc8f5":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["e98520789adb1d5ad05afb4956eca0944a929688"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"0ff61c2e5ce6b1f26a271d9d454206db1917d628":["459679dac02ecc58120b21ff31374b6ca915e88c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}