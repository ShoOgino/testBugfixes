{"path":"solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory#createStatsValues(SchemaField).mjava","commits":[{"id":"11982a7b6834a8571852448312db4624c32990b5","date":1321300684,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory#createStatsValues(SchemaField).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates an instance of StatsValues which supports values from a field of the given FieldType\n   *\n   * @param sf SchemaField for the field whose statistics will be created by the resulting StatsValues\n   * @return Instance of StatsValues that will create statistics from values from a field of the given type\n   */\n  public static StatsValues createStatsValues(SchemaField sf) {\n    FieldType fieldType = sf.getType();\n    if (DoubleField.class.isInstance(fieldType) ||\n        IntField.class.isInstance(fieldType) ||\n        LongField.class.isInstance(fieldType) ||\n        ShortField.class.isInstance(fieldType) ||\n        FloatField.class.isInstance(fieldType) ||\n        ByteField.class.isInstance(fieldType) ||\n        TrieField.class.isInstance(fieldType) ||\n        SortableDoubleField.class.isInstance(fieldType) ||\n        SortableIntField.class.isInstance(fieldType) ||\n        SortableLongField.class.isInstance(fieldType) ||\n        SortableFloatField.class.isInstance(fieldType)) {\n      return new NumericStatsValues(sf);\n    } else if (DateField.class.isInstance(fieldType)) {\n      return new DateStatsValues(sf);\n    } else if (StrField.class.isInstance(fieldType)) {\n      return new StringStatsValues(sf);\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Field type \" + fieldType + \" is not currently supported\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73bb5a57dc75b54a39494f99986599cae7dff417","date":1361040620,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory#createStatsValues(SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory#createStatsValues(SchemaField).mjava","sourceNew":"  /**\n   * Creates an instance of StatsValues which supports values from a field of the given FieldType\n   *\n   * @param sf SchemaField for the field whose statistics will be created by the resulting StatsValues\n   * @return Instance of StatsValues that will create statistics from values from a field of the given type\n   */\n  public static StatsValues createStatsValues(SchemaField sf) {\n    // TODO: allow for custom field types\n    FieldType fieldType = sf.getType();\n    if (DoubleField.class.isInstance(fieldType) ||\n        IntField.class.isInstance(fieldType) ||\n        LongField.class.isInstance(fieldType) ||\n        ShortField.class.isInstance(fieldType) ||\n        FloatField.class.isInstance(fieldType) ||\n        ByteField.class.isInstance(fieldType) ||\n        TrieField.class.isInstance(fieldType) ||\n        SortableDoubleField.class.isInstance(fieldType) ||\n        SortableIntField.class.isInstance(fieldType) ||\n        SortableLongField.class.isInstance(fieldType) ||\n        SortableFloatField.class.isInstance(fieldType)) {\n      return new NumericStatsValues(sf);\n    } else if (DateField.class.isInstance(fieldType)) {\n      return new DateStatsValues(sf);\n    } else if (StrField.class.isInstance(fieldType)) {\n      return new StringStatsValues(sf);\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Field type \" + fieldType + \" is not currently supported\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates an instance of StatsValues which supports values from a field of the given FieldType\n   *\n   * @param sf SchemaField for the field whose statistics will be created by the resulting StatsValues\n   * @return Instance of StatsValues that will create statistics from values from a field of the given type\n   */\n  public static StatsValues createStatsValues(SchemaField sf) {\n    FieldType fieldType = sf.getType();\n    if (DoubleField.class.isInstance(fieldType) ||\n        IntField.class.isInstance(fieldType) ||\n        LongField.class.isInstance(fieldType) ||\n        ShortField.class.isInstance(fieldType) ||\n        FloatField.class.isInstance(fieldType) ||\n        ByteField.class.isInstance(fieldType) ||\n        TrieField.class.isInstance(fieldType) ||\n        SortableDoubleField.class.isInstance(fieldType) ||\n        SortableIntField.class.isInstance(fieldType) ||\n        SortableLongField.class.isInstance(fieldType) ||\n        SortableFloatField.class.isInstance(fieldType)) {\n      return new NumericStatsValues(sf);\n    } else if (DateField.class.isInstance(fieldType)) {\n      return new DateStatsValues(sf);\n    } else if (StrField.class.isInstance(fieldType)) {\n      return new StringStatsValues(sf);\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Field type \" + fieldType + \" is not currently supported\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95303ff3749680c743b9425f9cf99e6e4065e8a8","date":1361061922,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory#createStatsValues(SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory#createStatsValues(SchemaField).mjava","sourceNew":"  /**\n   * Creates an instance of StatsValues which supports values from a field of the given FieldType\n   *\n   * @param sf SchemaField for the field whose statistics will be created by the resulting StatsValues\n   * @return Instance of StatsValues that will create statistics from values from a field of the given type\n   */\n  public static StatsValues createStatsValues(SchemaField sf) {\n    // TODO: allow for custom field types\n    FieldType fieldType = sf.getType();\n    if (DoubleField.class.isInstance(fieldType) ||\n        IntField.class.isInstance(fieldType) ||\n        LongField.class.isInstance(fieldType) ||\n        ShortField.class.isInstance(fieldType) ||\n        FloatField.class.isInstance(fieldType) ||\n        ByteField.class.isInstance(fieldType) ||\n        TrieField.class.isInstance(fieldType) ||\n        SortableDoubleField.class.isInstance(fieldType) ||\n        SortableIntField.class.isInstance(fieldType) ||\n        SortableLongField.class.isInstance(fieldType) ||\n        SortableFloatField.class.isInstance(fieldType)) {\n      return new NumericStatsValues(sf);\n    } else if (DateField.class.isInstance(fieldType)) {\n      return new DateStatsValues(sf);\n    } else if (StrField.class.isInstance(fieldType)) {\n      return new StringStatsValues(sf);\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Field type \" + fieldType + \" is not currently supported\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates an instance of StatsValues which supports values from a field of the given FieldType\n   *\n   * @param sf SchemaField for the field whose statistics will be created by the resulting StatsValues\n   * @return Instance of StatsValues that will create statistics from values from a field of the given type\n   */\n  public static StatsValues createStatsValues(SchemaField sf) {\n    FieldType fieldType = sf.getType();\n    if (DoubleField.class.isInstance(fieldType) ||\n        IntField.class.isInstance(fieldType) ||\n        LongField.class.isInstance(fieldType) ||\n        ShortField.class.isInstance(fieldType) ||\n        FloatField.class.isInstance(fieldType) ||\n        ByteField.class.isInstance(fieldType) ||\n        TrieField.class.isInstance(fieldType) ||\n        SortableDoubleField.class.isInstance(fieldType) ||\n        SortableIntField.class.isInstance(fieldType) ||\n        SortableLongField.class.isInstance(fieldType) ||\n        SortableFloatField.class.isInstance(fieldType)) {\n      return new NumericStatsValues(sf);\n    } else if (DateField.class.isInstance(fieldType)) {\n      return new DateStatsValues(sf);\n    } else if (StrField.class.isInstance(fieldType)) {\n      return new StringStatsValues(sf);\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Field type \" + fieldType + \" is not currently supported\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59a0020b413d44dd79d85d7a66ed5004265fb453","date":1371758877,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory#createStatsValues(SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory#createStatsValues(SchemaField).mjava","sourceNew":"  /**\n   * Creates an instance of StatsValues which supports values from a field of the given FieldType\n   *\n   * @param sf SchemaField for the field whose statistics will be created by the resulting StatsValues\n   * @return Instance of StatsValues that will create statistics from values from a field of the given type\n   */\n  public static StatsValues createStatsValues(SchemaField sf) {\n    // TODO: allow for custom field types\n    FieldType fieldType = sf.getType();\n    if (DoubleField.class.isInstance(fieldType) ||\n        IntField.class.isInstance(fieldType) ||\n        LongField.class.isInstance(fieldType) ||\n        FloatField.class.isInstance(fieldType) ||\n        TrieField.class.isInstance(fieldType) ||\n        SortableDoubleField.class.isInstance(fieldType) ||\n        SortableIntField.class.isInstance(fieldType) ||\n        SortableLongField.class.isInstance(fieldType) ||\n        SortableFloatField.class.isInstance(fieldType)) {\n      return new NumericStatsValues(sf);\n    } else if (DateField.class.isInstance(fieldType)) {\n      return new DateStatsValues(sf);\n    } else if (StrField.class.isInstance(fieldType)) {\n      return new StringStatsValues(sf);\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Field type \" + fieldType + \" is not currently supported\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates an instance of StatsValues which supports values from a field of the given FieldType\n   *\n   * @param sf SchemaField for the field whose statistics will be created by the resulting StatsValues\n   * @return Instance of StatsValues that will create statistics from values from a field of the given type\n   */\n  public static StatsValues createStatsValues(SchemaField sf) {\n    // TODO: allow for custom field types\n    FieldType fieldType = sf.getType();\n    if (DoubleField.class.isInstance(fieldType) ||\n        IntField.class.isInstance(fieldType) ||\n        LongField.class.isInstance(fieldType) ||\n        ShortField.class.isInstance(fieldType) ||\n        FloatField.class.isInstance(fieldType) ||\n        ByteField.class.isInstance(fieldType) ||\n        TrieField.class.isInstance(fieldType) ||\n        SortableDoubleField.class.isInstance(fieldType) ||\n        SortableIntField.class.isInstance(fieldType) ||\n        SortableLongField.class.isInstance(fieldType) ||\n        SortableFloatField.class.isInstance(fieldType)) {\n      return new NumericStatsValues(sf);\n    } else if (DateField.class.isInstance(fieldType)) {\n      return new DateStatsValues(sf);\n    } else if (StrField.class.isInstance(fieldType)) {\n      return new StringStatsValues(sf);\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Field type \" + fieldType + \" is not currently supported\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory#createStatsValues(SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory#createStatsValues(SchemaField).mjava","sourceNew":"  /**\n   * Creates an instance of StatsValues which supports values from a field of the given FieldType\n   *\n   * @param sf SchemaField for the field whose statistics will be created by the resulting StatsValues\n   * @return Instance of StatsValues that will create statistics from values from a field of the given type\n   */\n  public static StatsValues createStatsValues(SchemaField sf) {\n    // TODO: allow for custom field types\n    FieldType fieldType = sf.getType();\n    if (DoubleField.class.isInstance(fieldType) ||\n        IntField.class.isInstance(fieldType) ||\n        LongField.class.isInstance(fieldType) ||\n        FloatField.class.isInstance(fieldType) ||\n        TrieField.class.isInstance(fieldType) ||\n        SortableDoubleField.class.isInstance(fieldType) ||\n        SortableIntField.class.isInstance(fieldType) ||\n        SortableLongField.class.isInstance(fieldType) ||\n        SortableFloatField.class.isInstance(fieldType)) {\n      return new NumericStatsValues(sf);\n    } else if (DateField.class.isInstance(fieldType)) {\n      return new DateStatsValues(sf);\n    } else if (StrField.class.isInstance(fieldType)) {\n      return new StringStatsValues(sf);\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Field type \" + fieldType + \" is not currently supported\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates an instance of StatsValues which supports values from a field of the given FieldType\n   *\n   * @param sf SchemaField for the field whose statistics will be created by the resulting StatsValues\n   * @return Instance of StatsValues that will create statistics from values from a field of the given type\n   */\n  public static StatsValues createStatsValues(SchemaField sf) {\n    // TODO: allow for custom field types\n    FieldType fieldType = sf.getType();\n    if (DoubleField.class.isInstance(fieldType) ||\n        IntField.class.isInstance(fieldType) ||\n        LongField.class.isInstance(fieldType) ||\n        ShortField.class.isInstance(fieldType) ||\n        FloatField.class.isInstance(fieldType) ||\n        ByteField.class.isInstance(fieldType) ||\n        TrieField.class.isInstance(fieldType) ||\n        SortableDoubleField.class.isInstance(fieldType) ||\n        SortableIntField.class.isInstance(fieldType) ||\n        SortableLongField.class.isInstance(fieldType) ||\n        SortableFloatField.class.isInstance(fieldType)) {\n      return new NumericStatsValues(sf);\n    } else if (DateField.class.isInstance(fieldType)) {\n      return new DateStatsValues(sf);\n    } else if (StrField.class.isInstance(fieldType)) {\n      return new StringStatsValues(sf);\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Field type \" + fieldType + \" is not currently supported\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"567c8d957d62e7e7bcf2ac9e7fb9bacb03182656","date":1383680488,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory#createStatsValues(SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory#createStatsValues(SchemaField).mjava","sourceNew":"  /**\n   * Creates an instance of StatsValues which supports values from a field of the given FieldType\n   *\n   * @param sf SchemaField for the field whose statistics will be created by the resulting StatsValues\n   * @return Instance of StatsValues that will create statistics from values from a field of the given type\n   */\n  public static StatsValues createStatsValues(SchemaField sf) {\n    // TODO: allow for custom field types\n    FieldType fieldType = sf.getType();\n    if (DoubleField.class.isInstance(fieldType) ||\n        IntField.class.isInstance(fieldType) ||\n        LongField.class.isInstance(fieldType) ||\n        FloatField.class.isInstance(fieldType) ||\n        TrieField.class.isInstance(fieldType) ||\n        SortableDoubleField.class.isInstance(fieldType) ||\n        SortableIntField.class.isInstance(fieldType) ||\n        SortableLongField.class.isInstance(fieldType) ||\n        SortableFloatField.class.isInstance(fieldType)) {\n      return new NumericStatsValues(sf);\n    } else if (DateField.class.isInstance(fieldType)) {\n      return new DateStatsValues(sf);\n    } else if (StrField.class.isInstance(fieldType)) {\n      return new StringStatsValues(sf);\n    } else if (sf.getType().getClass().equals(EnumField.class)) {\n      return new EnumStatsValues(sf);\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Field type \" + fieldType + \" is not currently supported\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates an instance of StatsValues which supports values from a field of the given FieldType\n   *\n   * @param sf SchemaField for the field whose statistics will be created by the resulting StatsValues\n   * @return Instance of StatsValues that will create statistics from values from a field of the given type\n   */\n  public static StatsValues createStatsValues(SchemaField sf) {\n    // TODO: allow for custom field types\n    FieldType fieldType = sf.getType();\n    if (DoubleField.class.isInstance(fieldType) ||\n        IntField.class.isInstance(fieldType) ||\n        LongField.class.isInstance(fieldType) ||\n        FloatField.class.isInstance(fieldType) ||\n        TrieField.class.isInstance(fieldType) ||\n        SortableDoubleField.class.isInstance(fieldType) ||\n        SortableIntField.class.isInstance(fieldType) ||\n        SortableLongField.class.isInstance(fieldType) ||\n        SortableFloatField.class.isInstance(fieldType)) {\n      return new NumericStatsValues(sf);\n    } else if (DateField.class.isInstance(fieldType)) {\n      return new DateStatsValues(sf);\n    } else if (StrField.class.isInstance(fieldType)) {\n      return new StringStatsValues(sf);\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Field type \" + fieldType + \" is not currently supported\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf795ee457272965bd751f513787065bbf0a650a","date":1385015231,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory#createStatsValues(SchemaField,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory#createStatsValues(SchemaField).mjava","sourceNew":"  /**\n   * Creates an instance of StatsValues which supports values from a field of the given FieldType\n   *\n   * @param sf SchemaField for the field whose statistics will be created by the resulting StatsValues\n   * @return Instance of StatsValues that will create statistics from values from a field of the given type\n   */\n  public static StatsValues createStatsValues(SchemaField sf, boolean calcDistinct) {\n    // TODO: allow for custom field types\n    FieldType fieldType = sf.getType();\n    if (DoubleField.class.isInstance(fieldType) ||\n        IntField.class.isInstance(fieldType) ||\n        LongField.class.isInstance(fieldType) ||\n        FloatField.class.isInstance(fieldType) ||\n        TrieField.class.isInstance(fieldType) ||\n        SortableDoubleField.class.isInstance(fieldType) ||\n        SortableIntField.class.isInstance(fieldType) ||\n        SortableLongField.class.isInstance(fieldType) ||\n        SortableFloatField.class.isInstance(fieldType)) {\n      return new NumericStatsValues(sf, calcDistinct);\n    } else if (DateField.class.isInstance(fieldType)) {\n      return new DateStatsValues(sf, calcDistinct);\n    } else if (StrField.class.isInstance(fieldType)) {\n      return new StringStatsValues(sf, calcDistinct);\n    } else if (sf.getType().getClass().equals(EnumField.class)) {\n      return new EnumStatsValues(sf, calcDistinct);\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Field type \" + fieldType + \" is not currently supported\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates an instance of StatsValues which supports values from a field of the given FieldType\n   *\n   * @param sf SchemaField for the field whose statistics will be created by the resulting StatsValues\n   * @return Instance of StatsValues that will create statistics from values from a field of the given type\n   */\n  public static StatsValues createStatsValues(SchemaField sf) {\n    // TODO: allow for custom field types\n    FieldType fieldType = sf.getType();\n    if (DoubleField.class.isInstance(fieldType) ||\n        IntField.class.isInstance(fieldType) ||\n        LongField.class.isInstance(fieldType) ||\n        FloatField.class.isInstance(fieldType) ||\n        TrieField.class.isInstance(fieldType) ||\n        SortableDoubleField.class.isInstance(fieldType) ||\n        SortableIntField.class.isInstance(fieldType) ||\n        SortableLongField.class.isInstance(fieldType) ||\n        SortableFloatField.class.isInstance(fieldType)) {\n      return new NumericStatsValues(sf);\n    } else if (DateField.class.isInstance(fieldType)) {\n      return new DateStatsValues(sf);\n    } else if (StrField.class.isInstance(fieldType)) {\n      return new StringStatsValues(sf);\n    } else if (sf.getType().getClass().equals(EnumField.class)) {\n      return new EnumStatsValues(sf);\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Field type \" + fieldType + \" is not currently supported\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory#createStatsValues(SchemaField).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates an instance of StatsValues which supports values from a field of the given FieldType\n   *\n   * @param sf SchemaField for the field whose statistics will be created by the resulting StatsValues\n   * @return Instance of StatsValues that will create statistics from values from a field of the given type\n   */\n  public static StatsValues createStatsValues(SchemaField sf) {\n    // TODO: allow for custom field types\n    FieldType fieldType = sf.getType();\n    if (DoubleField.class.isInstance(fieldType) ||\n        IntField.class.isInstance(fieldType) ||\n        LongField.class.isInstance(fieldType) ||\n        FloatField.class.isInstance(fieldType) ||\n        TrieField.class.isInstance(fieldType) ||\n        SortableDoubleField.class.isInstance(fieldType) ||\n        SortableIntField.class.isInstance(fieldType) ||\n        SortableLongField.class.isInstance(fieldType) ||\n        SortableFloatField.class.isInstance(fieldType)) {\n      return new NumericStatsValues(sf);\n    } else if (DateField.class.isInstance(fieldType)) {\n      return new DateStatsValues(sf);\n    } else if (StrField.class.isInstance(fieldType)) {\n      return new StringStatsValues(sf);\n    } else if (sf.getType().getClass().equals(EnumField.class)) {\n      return new EnumStatsValues(sf);\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Field type \" + fieldType + \" is not currently supported\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":["73bb5a57dc75b54a39494f99986599cae7dff417","59a0020b413d44dd79d85d7a66ed5004265fb453"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":["11982a7b6834a8571852448312db4624c32990b5","73bb5a57dc75b54a39494f99986599cae7dff417"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"59a0020b413d44dd79d85d7a66ed5004265fb453":["73bb5a57dc75b54a39494f99986599cae7dff417"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["567c8d957d62e7e7bcf2ac9e7fb9bacb03182656","bf795ee457272965bd751f513787065bbf0a650a"],"567c8d957d62e7e7bcf2ac9e7fb9bacb03182656":["59a0020b413d44dd79d85d7a66ed5004265fb453"],"bf795ee457272965bd751f513787065bbf0a650a":["567c8d957d62e7e7bcf2ac9e7fb9bacb03182656"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bf795ee457272965bd751f513787065bbf0a650a"],"73bb5a57dc75b54a39494f99986599cae7dff417":["11982a7b6834a8571852448312db4624c32990b5"],"11982a7b6834a8571852448312db4624c32990b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"95303ff3749680c743b9425f9cf99e6e4065e8a8":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["11982a7b6834a8571852448312db4624c32990b5"],"59a0020b413d44dd79d85d7a66ed5004265fb453":["37a0f60745e53927c4c876cfe5b5a58170f0646c","567c8d957d62e7e7bcf2ac9e7fb9bacb03182656"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"567c8d957d62e7e7bcf2ac9e7fb9bacb03182656":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","bf795ee457272965bd751f513787065bbf0a650a"],"bf795ee457272965bd751f513787065bbf0a650a":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"73bb5a57dc75b54a39494f99986599cae7dff417":["37a0f60745e53927c4c876cfe5b5a58170f0646c","95303ff3749680c743b9425f9cf99e6e4065e8a8","59a0020b413d44dd79d85d7a66ed5004265fb453"],"11982a7b6834a8571852448312db4624c32990b5":["95303ff3749680c743b9425f9cf99e6e4065e8a8","73bb5a57dc75b54a39494f99986599cae7dff417"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","95303ff3749680c743b9425f9cf99e6e4065e8a8","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}