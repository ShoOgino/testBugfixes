{"path":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#compareChildHits(IndexReader,IndexReader,TopDocs,TopDocs).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#compareChildHits(IndexReader,IndexReader,TopDocs,TopDocs).mjava","pathOld":"modules/join/src/test/org/apache/lucene/search/join/TestBlockJoin#compareChildHits(IndexReader,IndexReader,TopDocs,TopDocs).mjava","sourceNew":"  private void compareChildHits(IndexReader r, IndexReader joinR, TopDocs results, TopDocs joinResults) throws Exception {\n    assertEquals(results.totalHits, joinResults.totalHits);\n    assertEquals(results.scoreDocs.length, joinResults.scoreDocs.length);\n    for(int hitCount=0;hitCount<results.scoreDocs.length;hitCount++) {\n      ScoreDoc hit = results.scoreDocs[hitCount];\n      ScoreDoc joinHit = joinResults.scoreDocs[hitCount];\n      Document doc1 = r.document(hit.doc);\n      Document doc2 = joinR.document(joinHit.doc);\n      assertEquals(\"hit \" + hitCount + \" differs\",\n                   doc1.get(\"childID\"), doc2.get(\"childID\"));\n      // don't compare scores -- they are expected to differ\n\n\n      assertTrue(hit instanceof FieldDoc);\n      assertTrue(joinHit instanceof FieldDoc);\n\n      FieldDoc hit0 = (FieldDoc) hit;\n      FieldDoc joinHit0 = (FieldDoc) joinHit;\n      assertArrayEquals(hit0.fields, joinHit0.fields);\n    }\n  }\n\n","sourceOld":"  private void compareChildHits(IndexReader r, IndexReader joinR, TopDocs results, TopDocs joinResults) throws Exception {\n    assertEquals(results.totalHits, joinResults.totalHits);\n    assertEquals(results.scoreDocs.length, joinResults.scoreDocs.length);\n    for(int hitCount=0;hitCount<results.scoreDocs.length;hitCount++) {\n      ScoreDoc hit = results.scoreDocs[hitCount];\n      ScoreDoc joinHit = joinResults.scoreDocs[hitCount];\n      Document doc1 = r.document(hit.doc);\n      Document doc2 = joinR.document(joinHit.doc);\n      assertEquals(\"hit \" + hitCount + \" differs\",\n                   doc1.get(\"childID\"), doc2.get(\"childID\"));\n      // don't compare scores -- they are expected to differ\n\n\n      assertTrue(hit instanceof FieldDoc);\n      assertTrue(joinHit instanceof FieldDoc);\n\n      FieldDoc hit0 = (FieldDoc) hit;\n      FieldDoc joinHit0 = (FieldDoc) joinHit;\n      assertArrayEquals(hit0.fields, joinHit0.fields);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7e4907084808af8fdb14b9809e6dceaccf6867b","date":1343473006,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#compareChildHits(IndexReader,IndexReader,TopDocs,TopDocs).mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#compareChildHits(IndexReader,IndexReader,TopDocs,TopDocs).mjava","sourceNew":"  private void compareChildHits(IndexReader r, IndexReader joinR, TopDocs results, TopDocs joinResults) throws Exception {\n    assertEquals(results.totalHits, joinResults.totalHits);\n    assertEquals(results.scoreDocs.length, joinResults.scoreDocs.length);\n    for(int hitCount=0;hitCount<results.scoreDocs.length;hitCount++) {\n      ScoreDoc hit = results.scoreDocs[hitCount];\n      ScoreDoc joinHit = joinResults.scoreDocs[hitCount];\n      StoredDocument doc1 = r.document(hit.doc);\n      StoredDocument doc2 = joinR.document(joinHit.doc);\n      assertEquals(\"hit \" + hitCount + \" differs\",\n                   doc1.get(\"childID\"), doc2.get(\"childID\"));\n      // don't compare scores -- they are expected to differ\n\n\n      assertTrue(hit instanceof FieldDoc);\n      assertTrue(joinHit instanceof FieldDoc);\n\n      FieldDoc hit0 = (FieldDoc) hit;\n      FieldDoc joinHit0 = (FieldDoc) joinHit;\n      assertArrayEquals(hit0.fields, joinHit0.fields);\n    }\n  }\n\n","sourceOld":"  private void compareChildHits(IndexReader r, IndexReader joinR, TopDocs results, TopDocs joinResults) throws Exception {\n    assertEquals(results.totalHits, joinResults.totalHits);\n    assertEquals(results.scoreDocs.length, joinResults.scoreDocs.length);\n    for(int hitCount=0;hitCount<results.scoreDocs.length;hitCount++) {\n      ScoreDoc hit = results.scoreDocs[hitCount];\n      ScoreDoc joinHit = joinResults.scoreDocs[hitCount];\n      Document doc1 = r.document(hit.doc);\n      Document doc2 = joinR.document(joinHit.doc);\n      assertEquals(\"hit \" + hitCount + \" differs\",\n                   doc1.get(\"childID\"), doc2.get(\"childID\"));\n      // don't compare scores -- they are expected to differ\n\n\n      assertTrue(hit instanceof FieldDoc);\n      assertTrue(joinHit instanceof FieldDoc);\n\n      FieldDoc hit0 = (FieldDoc) hit;\n      FieldDoc joinHit0 = (FieldDoc) joinHit;\n      assertArrayEquals(hit0.fields, joinHit0.fields);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#compareChildHits(IndexReader,IndexReader,TopDocs,TopDocs).mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#compareChildHits(IndexReader,IndexReader,TopDocs,TopDocs).mjava","sourceNew":"  private void compareChildHits(IndexReader r, IndexReader joinR, TopDocs results, TopDocs joinResults) throws Exception {\n    assertEquals(results.totalHits, joinResults.totalHits);\n    assertEquals(results.scoreDocs.length, joinResults.scoreDocs.length);\n    for(int hitCount=0;hitCount<results.scoreDocs.length;hitCount++) {\n      ScoreDoc hit = results.scoreDocs[hitCount];\n      ScoreDoc joinHit = joinResults.scoreDocs[hitCount];\n      StoredDocument doc1 = r.document(hit.doc);\n      StoredDocument doc2 = joinR.document(joinHit.doc);\n      assertEquals(\"hit \" + hitCount + \" differs\",\n                   doc1.get(\"childID\"), doc2.get(\"childID\"));\n      // don't compare scores -- they are expected to differ\n\n\n      assertTrue(hit instanceof FieldDoc);\n      assertTrue(joinHit instanceof FieldDoc);\n\n      FieldDoc hit0 = (FieldDoc) hit;\n      FieldDoc joinHit0 = (FieldDoc) joinHit;\n      assertArrayEquals(hit0.fields, joinHit0.fields);\n    }\n  }\n\n","sourceOld":"  private void compareChildHits(IndexReader r, IndexReader joinR, TopDocs results, TopDocs joinResults) throws Exception {\n    assertEquals(results.totalHits, joinResults.totalHits);\n    assertEquals(results.scoreDocs.length, joinResults.scoreDocs.length);\n    for(int hitCount=0;hitCount<results.scoreDocs.length;hitCount++) {\n      ScoreDoc hit = results.scoreDocs[hitCount];\n      ScoreDoc joinHit = joinResults.scoreDocs[hitCount];\n      Document doc1 = r.document(hit.doc);\n      Document doc2 = joinR.document(joinHit.doc);\n      assertEquals(\"hit \" + hitCount + \" differs\",\n                   doc1.get(\"childID\"), doc2.get(\"childID\"));\n      // don't compare scores -- they are expected to differ\n\n\n      assertTrue(hit instanceof FieldDoc);\n      assertTrue(joinHit instanceof FieldDoc);\n\n      FieldDoc hit0 = (FieldDoc) hit;\n      FieldDoc joinHit0 = (FieldDoc) joinHit;\n      assertArrayEquals(hit0.fields, joinHit0.fields);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#compareChildHits(IndexReader,IndexReader,TopDocs,TopDocs).mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#compareChildHits(IndexReader,IndexReader,TopDocs,TopDocs).mjava","sourceNew":"  private void compareChildHits(IndexReader r, IndexReader joinR, TopDocs results, TopDocs joinResults) throws Exception {\n    assertEquals(results.totalHits, joinResults.totalHits);\n    assertEquals(results.scoreDocs.length, joinResults.scoreDocs.length);\n    for(int hitCount=0;hitCount<results.scoreDocs.length;hitCount++) {\n      ScoreDoc hit = results.scoreDocs[hitCount];\n      ScoreDoc joinHit = joinResults.scoreDocs[hitCount];\n      Document doc1 = r.document(hit.doc);\n      Document doc2 = joinR.document(joinHit.doc);\n      assertEquals(\"hit \" + hitCount + \" differs\",\n                   doc1.get(\"childID\"), doc2.get(\"childID\"));\n      // don't compare scores -- they are expected to differ\n\n\n      assertTrue(hit instanceof FieldDoc);\n      assertTrue(joinHit instanceof FieldDoc);\n\n      FieldDoc hit0 = (FieldDoc) hit;\n      FieldDoc joinHit0 = (FieldDoc) joinHit;\n      assertArrayEquals(hit0.fields, joinHit0.fields);\n    }\n  }\n\n","sourceOld":"  private void compareChildHits(IndexReader r, IndexReader joinR, TopDocs results, TopDocs joinResults) throws Exception {\n    assertEquals(results.totalHits, joinResults.totalHits);\n    assertEquals(results.scoreDocs.length, joinResults.scoreDocs.length);\n    for(int hitCount=0;hitCount<results.scoreDocs.length;hitCount++) {\n      ScoreDoc hit = results.scoreDocs[hitCount];\n      ScoreDoc joinHit = joinResults.scoreDocs[hitCount];\n      StoredDocument doc1 = r.document(hit.doc);\n      StoredDocument doc2 = joinR.document(joinHit.doc);\n      assertEquals(\"hit \" + hitCount + \" differs\",\n                   doc1.get(\"childID\"), doc2.get(\"childID\"));\n      // don't compare scores -- they are expected to differ\n\n\n      assertTrue(hit instanceof FieldDoc);\n      assertTrue(joinHit instanceof FieldDoc);\n\n      FieldDoc hit0 = (FieldDoc) hit;\n      FieldDoc joinHit0 = (FieldDoc) joinHit;\n      assertArrayEquals(hit0.fields, joinHit0.fields);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#compareChildHits(IndexReader,IndexReader,TopDocs,TopDocs).mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#compareChildHits(IndexReader,IndexReader,TopDocs,TopDocs).mjava","sourceNew":"  private void compareChildHits(IndexReader r, IndexReader joinR, TopDocs results, TopDocs joinResults) throws Exception {\n    assertEquals(results.totalHits.value, joinResults.totalHits.value);\n    assertEquals(results.scoreDocs.length, joinResults.scoreDocs.length);\n    for(int hitCount=0;hitCount<results.scoreDocs.length;hitCount++) {\n      ScoreDoc hit = results.scoreDocs[hitCount];\n      ScoreDoc joinHit = joinResults.scoreDocs[hitCount];\n      Document doc1 = r.document(hit.doc);\n      Document doc2 = joinR.document(joinHit.doc);\n      assertEquals(\"hit \" + hitCount + \" differs\",\n                   doc1.get(\"childID\"), doc2.get(\"childID\"));\n      // don't compare scores -- they are expected to differ\n\n\n      assertTrue(hit instanceof FieldDoc);\n      assertTrue(joinHit instanceof FieldDoc);\n\n      FieldDoc hit0 = (FieldDoc) hit;\n      FieldDoc joinHit0 = (FieldDoc) joinHit;\n      assertArrayEquals(hit0.fields, joinHit0.fields);\n    }\n  }\n\n","sourceOld":"  private void compareChildHits(IndexReader r, IndexReader joinR, TopDocs results, TopDocs joinResults) throws Exception {\n    assertEquals(results.totalHits, joinResults.totalHits);\n    assertEquals(results.scoreDocs.length, joinResults.scoreDocs.length);\n    for(int hitCount=0;hitCount<results.scoreDocs.length;hitCount++) {\n      ScoreDoc hit = results.scoreDocs[hitCount];\n      ScoreDoc joinHit = joinResults.scoreDocs[hitCount];\n      Document doc1 = r.document(hit.doc);\n      Document doc2 = joinR.document(joinHit.doc);\n      assertEquals(\"hit \" + hitCount + \" differs\",\n                   doc1.get(\"childID\"), doc2.get(\"childID\"));\n      // don't compare scores -- they are expected to differ\n\n\n      assertTrue(hit instanceof FieldDoc);\n      assertTrue(joinHit instanceof FieldDoc);\n\n      FieldDoc hit0 = (FieldDoc) hit;\n      FieldDoc joinHit0 = (FieldDoc) joinHit;\n      assertArrayEquals(hit0.fields, joinHit0.fields);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1d028314cced5858683a1bb4741423d0f934257b":["b89678825b68eccaf09e6ab71675fc0b0af1e099","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83788ad129a5154d5c6562c4e8ce3db48793aada":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["1d028314cced5858683a1bb4741423d0f934257b"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["1d028314cced5858683a1bb4741423d0f934257b","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"1d028314cced5858683a1bb4741423d0f934257b":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["1d028314cced5858683a1bb4741423d0f934257b"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}