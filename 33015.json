{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DDocValuesField#newDistanceSort(String,double[],double[],double).mjava","commits":[{"id":"f32db9456b1759bf570a512581f5cea321f69f73","date":1463520039,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DDocValuesField#newDistanceSort(String,double[],double[],double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a SortField for sorting by distance along a path.\n   * <p>\n   * This sort orders documents by ascending distance along the described path. The value returned in {@link FieldDoc} for\n   * the hits contains a Double instance with the distance in meters.\n   * <p>\n   * If a document is missing the field, then by default it is treated as having {@link Double#POSITIVE_INFINITY} distance\n   * (missing values sort last).\n   * <p>\n   * If a document contains multiple values for the field, the <i>closest</i> distance to the location is used.\n   * \n   * @param field field name. must not be null.\n   * @param pathLatitudes latitude values for points of the path: must be within standard +/-90 coordinate bounds.\n   * @param pathLongitudes longitude values for points of the path: must be within standard +/-180 coordinate bounds.\n   * @param pathWidthMeters width of the path in meters.\n   * @return SortField ordering documents by distance\n   * @throws IllegalArgumentException if {@code field} is null or location has invalid coordinates.\n   */\n  public static SortField newDistanceSort(final String field, final double[] pathLatitudes, final double[] pathLongitudes, final double pathWidthMeters) {\n    final GeoDistanceShape shape = Geo3DUtil.fromPath(pathLatitudes, pathLongitudes, pathWidthMeters);\n    return new Geo3DPointSortField(field, shape);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c9819d04ff44d2877a5a19257cd662751284a5f","date":1463541580,"type":0,"author":"David Smiley","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DDocValuesField#newDistanceSort(String,double[],double[],double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a SortField for sorting by distance along a path.\n   * <p>\n   * This sort orders documents by ascending distance along the described path. The value returned in {@link FieldDoc} for\n   * the hits contains a Double instance with the distance in meters.\n   * <p>\n   * If a document is missing the field, then by default it is treated as having {@link Double#POSITIVE_INFINITY} distance\n   * (missing values sort last).\n   * <p>\n   * If a document contains multiple values for the field, the <i>closest</i> distance to the location is used.\n   * \n   * @param field field name. must not be null.\n   * @param pathLatitudes latitude values for points of the path: must be within standard +/-90 coordinate bounds.\n   * @param pathLongitudes longitude values for points of the path: must be within standard +/-180 coordinate bounds.\n   * @param pathWidthMeters width of the path in meters.\n   * @return SortField ordering documents by distance\n   * @throws IllegalArgumentException if {@code field} is null or location has invalid coordinates.\n   */\n  public static SortField newDistanceSort(final String field, final double[] pathLatitudes, final double[] pathLongitudes, final double pathWidthMeters) {\n    final GeoDistanceShape shape = Geo3DUtil.fromPath(pathLatitudes, pathLongitudes, pathWidthMeters);\n    return new Geo3DPointSortField(field, shape);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07f2ef55de2eb77a39f3aea17314309bc5ecd783","date":1463574894,"type":5,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DDocValuesField#newPathSort(String,double[],double[],double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DDocValuesField#newDistanceSort(String,double[],double[],double).mjava","sourceNew":"  /**\n   * Creates a SortField for sorting by distance along a path.\n   * <p>\n   * This sort orders documents by ascending distance along the described path. The value returned in {@link FieldDoc} for\n   * the hits contains a Double instance with the distance in meters.\n   * <p>\n   * If a document is missing the field, then by default it is treated as having {@link Double#POSITIVE_INFINITY} distance\n   * (missing values sort last).\n   * <p>\n   * If a document contains multiple values for the field, the <i>closest</i> distance to the location is used.\n   * \n   * @param field field name. must not be null.\n   * @param pathLatitudes latitude values for points of the path: must be within standard +/-90 coordinate bounds.\n   * @param pathLongitudes longitude values for points of the path: must be within standard +/-180 coordinate bounds.\n   * @param pathWidthMeters width of the path in meters.\n   * @return SortField ordering documents by distance\n   * @throws IllegalArgumentException if {@code field} is null or location has invalid coordinates.\n   */\n  public static SortField newPathSort(final String field, final double[] pathLatitudes, final double[] pathLongitudes, final double pathWidthMeters) {\n    final GeoDistanceShape shape = Geo3DUtil.fromPath(pathLatitudes, pathLongitudes, pathWidthMeters);\n    return new Geo3DPointSortField(field, shape);\n  }\n\n","sourceOld":"  /**\n   * Creates a SortField for sorting by distance along a path.\n   * <p>\n   * This sort orders documents by ascending distance along the described path. The value returned in {@link FieldDoc} for\n   * the hits contains a Double instance with the distance in meters.\n   * <p>\n   * If a document is missing the field, then by default it is treated as having {@link Double#POSITIVE_INFINITY} distance\n   * (missing values sort last).\n   * <p>\n   * If a document contains multiple values for the field, the <i>closest</i> distance to the location is used.\n   * \n   * @param field field name. must not be null.\n   * @param pathLatitudes latitude values for points of the path: must be within standard +/-90 coordinate bounds.\n   * @param pathLongitudes longitude values for points of the path: must be within standard +/-180 coordinate bounds.\n   * @param pathWidthMeters width of the path in meters.\n   * @return SortField ordering documents by distance\n   * @throws IllegalArgumentException if {@code field} is null or location has invalid coordinates.\n   */\n  public static SortField newDistanceSort(final String field, final double[] pathLatitudes, final double[] pathLongitudes, final double pathWidthMeters) {\n    final GeoDistanceShape shape = Geo3DUtil.fromPath(pathLatitudes, pathLongitudes, pathWidthMeters);\n    return new Geo3DPointSortField(field, shape);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"07f2ef55de2eb77a39f3aea17314309bc5ecd783":["f32db9456b1759bf570a512581f5cea321f69f73"],"9c9819d04ff44d2877a5a19257cd662751284a5f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f32db9456b1759bf570a512581f5cea321f69f73"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f32db9456b1759bf570a512581f5cea321f69f73":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"07f2ef55de2eb77a39f3aea17314309bc5ecd783":[],"9c9819d04ff44d2877a5a19257cd662751284a5f":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9c9819d04ff44d2877a5a19257cd662751284a5f","f32db9456b1759bf570a512581f5cea321f69f73","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f32db9456b1759bf570a512581f5cea321f69f73":["07f2ef55de2eb77a39f3aea17314309bc5ecd783","9c9819d04ff44d2877a5a19257cd662751284a5f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["07f2ef55de2eb77a39f3aea17314309bc5ecd783","9c9819d04ff44d2877a5a19257cd662751284a5f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}