{"path":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testSimpleCollectionWatch().mjava","commits":[{"id":"5b4df85b7268ca40452d6c01343d8eb00ed1f70a","date":1463171656,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testSimpleCollectionWatch().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSimpleCollectionWatch() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n    cluster.createCollection(\"testcollection\", CLUSTER_SIZE, 1, \"config\", new HashMap<>());\n\n    client.waitForState(\"testcollection\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS, DocCollection::isFullyActive);\n\n    // shutdown a node and check that we get notified about the change\n    final AtomicInteger nodeCount = new AtomicInteger(0);\n    final CountDownLatch latch = new CountDownLatch(1);\n    client.registerCollectionStateWatcher(\"testcollection\", (liveNodes, collectionState) -> {\n      // we can't just count liveNodes here, because that's updated by a separate watcher,\n      // and it may be the case that we're triggered by a node setting itself to DOWN before\n      // the liveNodes watcher is called\n      log.info(\"State changed: {}\", collectionState);\n      for (Slice slice : collectionState) {\n        for (Replica replica : slice) {\n          if (replica.isActive(liveNodes))\n            nodeCount.incrementAndGet();\n        }\n      }\n      latch.countDown();\n    });\n\n    cluster.stopJettySolrRunner(random().nextInt(cluster.getJettySolrRunners().size()));\n    assertTrue(\"CollectionStateWatcher was never notified of cluster change\", latch.await(MAX_WAIT_TIMEOUT, TimeUnit.SECONDS));\n\n    assertThat(nodeCount.intValue(), is(3));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"27b43f9a8cc600a073ced9342cb6882853856049","date":1463221077,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testSimpleCollectionWatch().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testSimpleCollectionWatch().mjava","sourceNew":"  @Test\n  public void testSimpleCollectionWatch() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(\"testcollection\", \"config\", 4, 1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    client.waitForState(\"testcollection\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 4, 1));\n\n    // shutdown a node and check that we get notified about the change\n    final AtomicInteger nodeCount = new AtomicInteger(0);\n    final CountDownLatch latch = new CountDownLatch(1);\n    client.registerCollectionStateWatcher(\"testcollection\", (liveNodes, collectionState) -> {\n      // we can't just count liveNodes here, because that's updated by a separate watcher,\n      // and it may be the case that we're triggered by a node setting itself to DOWN before\n      // the liveNodes watcher is called\n      log.info(\"State changed: {}\", collectionState);\n      for (Slice slice : collectionState) {\n        for (Replica replica : slice) {\n          if (replica.isActive(liveNodes))\n            nodeCount.incrementAndGet();\n        }\n      }\n      latch.countDown();\n    });\n\n    cluster.stopJettySolrRunner(random().nextInt(cluster.getJettySolrRunners().size()));\n    assertTrue(\"CollectionStateWatcher was never notified of cluster change\", latch.await(MAX_WAIT_TIMEOUT, TimeUnit.SECONDS));\n\n    assertThat(nodeCount.intValue(), is(3));\n\n  }\n\n","sourceOld":"  @Test\n  public void testSimpleCollectionWatch() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n    cluster.createCollection(\"testcollection\", CLUSTER_SIZE, 1, \"config\", new HashMap<>());\n\n    client.waitForState(\"testcollection\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS, DocCollection::isFullyActive);\n\n    // shutdown a node and check that we get notified about the change\n    final AtomicInteger nodeCount = new AtomicInteger(0);\n    final CountDownLatch latch = new CountDownLatch(1);\n    client.registerCollectionStateWatcher(\"testcollection\", (liveNodes, collectionState) -> {\n      // we can't just count liveNodes here, because that's updated by a separate watcher,\n      // and it may be the case that we're triggered by a node setting itself to DOWN before\n      // the liveNodes watcher is called\n      log.info(\"State changed: {}\", collectionState);\n      for (Slice slice : collectionState) {\n        for (Replica replica : slice) {\n          if (replica.isActive(liveNodes))\n            nodeCount.incrementAndGet();\n        }\n      }\n      latch.countDown();\n    });\n\n    cluster.stopJettySolrRunner(random().nextInt(cluster.getJettySolrRunners().size()));\n    assertTrue(\"CollectionStateWatcher was never notified of cluster change\", latch.await(MAX_WAIT_TIMEOUT, TimeUnit.SECONDS));\n\n    assertThat(nodeCount.intValue(), is(3));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testSimpleCollectionWatch().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSimpleCollectionWatch() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(\"testcollection\", \"config\", 4, 1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    client.waitForState(\"testcollection\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 4, 1));\n\n    // shutdown a node and check that we get notified about the change\n    final AtomicInteger nodeCount = new AtomicInteger(0);\n    final CountDownLatch latch = new CountDownLatch(1);\n    client.registerCollectionStateWatcher(\"testcollection\", (liveNodes, collectionState) -> {\n      // we can't just count liveNodes here, because that's updated by a separate watcher,\n      // and it may be the case that we're triggered by a node setting itself to DOWN before\n      // the liveNodes watcher is called\n      log.info(\"State changed: {}\", collectionState);\n      for (Slice slice : collectionState) {\n        for (Replica replica : slice) {\n          if (replica.isActive(liveNodes))\n            nodeCount.incrementAndGet();\n        }\n      }\n      latch.countDown();\n    });\n\n    cluster.stopJettySolrRunner(random().nextInt(cluster.getJettySolrRunners().size()));\n    assertTrue(\"CollectionStateWatcher was never notified of cluster change\", latch.await(MAX_WAIT_TIMEOUT, TimeUnit.SECONDS));\n\n    assertThat(nodeCount.intValue(), is(3));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cd4080fba20c774e4183c2ceb96ede05e5fb779","date":1463477646,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testSimpleCollectionWatch().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testSimpleCollectionWatch().mjava","sourceNew":"  @Test\n  public void testSimpleCollectionWatch() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(\"testcollection\", \"config\", 4, 1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    client.waitForState(\"testcollection\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 4, 1));\n\n    // shutdown a node and check that we get notified about the change\n    final CountDownLatch latch = new CountDownLatch(1);\n    client.registerCollectionStateWatcher(\"testcollection\", (liveNodes, collectionState) -> {\n      int nodeCount = 0;\n      log.info(\"State changed: {}\", collectionState);\n      for (Slice slice : collectionState) {\n        for (Replica replica : slice) {\n          if (replica.isActive(liveNodes))\n            nodeCount++;\n        }\n      }\n      if (nodeCount == 3) {\n        latch.countDown();\n        return true;\n      }\n      return false;\n    });\n\n    cluster.stopJettySolrRunner(random().nextInt(cluster.getJettySolrRunners().size()));\n    assertTrue(\"CollectionStateWatcher was never notified of cluster change\", latch.await(MAX_WAIT_TIMEOUT, TimeUnit.SECONDS));\n\n    assertEquals(\"CollectionStateWatcher wasn't cleared after completion\",\n        0, client.getZkStateReader().getStateWatchers(\"testcollection\").size());\n\n  }\n\n","sourceOld":"  @Test\n  public void testSimpleCollectionWatch() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(\"testcollection\", \"config\", 4, 1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    client.waitForState(\"testcollection\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 4, 1));\n\n    // shutdown a node and check that we get notified about the change\n    final AtomicInteger nodeCount = new AtomicInteger(0);\n    final CountDownLatch latch = new CountDownLatch(1);\n    client.registerCollectionStateWatcher(\"testcollection\", (liveNodes, collectionState) -> {\n      // we can't just count liveNodes here, because that's updated by a separate watcher,\n      // and it may be the case that we're triggered by a node setting itself to DOWN before\n      // the liveNodes watcher is called\n      log.info(\"State changed: {}\", collectionState);\n      for (Slice slice : collectionState) {\n        for (Replica replica : slice) {\n          if (replica.isActive(liveNodes))\n            nodeCount.incrementAndGet();\n        }\n      }\n      latch.countDown();\n    });\n\n    cluster.stopJettySolrRunner(random().nextInt(cluster.getJettySolrRunners().size()));\n    assertTrue(\"CollectionStateWatcher was never notified of cluster change\", latch.await(MAX_WAIT_TIMEOUT, TimeUnit.SECONDS));\n\n    assertThat(nodeCount.intValue(), is(3));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"77ce1a4cb826c58d16a217558a9b746368d1351b","date":1463665766,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testSimpleCollectionWatch().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testSimpleCollectionWatch().mjava","sourceNew":"  @Test\n  public void testSimpleCollectionWatch() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(\"testcollection\", \"config\", 4, 1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    client.waitForState(\"testcollection\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 4, 1));\n\n    // shutdown a node and check that we get notified about the change\n    final CountDownLatch latch = new CountDownLatch(1);\n    client.registerCollectionStateWatcher(\"testcollection\", (liveNodes, collectionState) -> {\n      int nodeCount = 0;\n      log.info(\"State changed: {}\", collectionState);\n      for (Slice slice : collectionState) {\n        for (Replica replica : slice) {\n          if (replica.isActive(liveNodes))\n            nodeCount++;\n        }\n      }\n      if (nodeCount == 3) {\n        latch.countDown();\n        return true;\n      }\n      return false;\n    });\n\n    cluster.stopJettySolrRunner(random().nextInt(cluster.getJettySolrRunners().size()));\n    assertTrue(\"CollectionStateWatcher was never notified of cluster change\", latch.await(MAX_WAIT_TIMEOUT, TimeUnit.SECONDS));\n\n    Set<CollectionStateWatcher> watchers = client.getZkStateReader().getStateWatchers(\"testcollection\");\n    assertTrue(\"CollectionStateWatcher wasn't cleared after completion\",\n        watchers == null || watchers.size() == 0);\n\n  }\n\n","sourceOld":"  @Test\n  public void testSimpleCollectionWatch() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(\"testcollection\", \"config\", 4, 1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    client.waitForState(\"testcollection\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 4, 1));\n\n    // shutdown a node and check that we get notified about the change\n    final CountDownLatch latch = new CountDownLatch(1);\n    client.registerCollectionStateWatcher(\"testcollection\", (liveNodes, collectionState) -> {\n      int nodeCount = 0;\n      log.info(\"State changed: {}\", collectionState);\n      for (Slice slice : collectionState) {\n        for (Replica replica : slice) {\n          if (replica.isActive(liveNodes))\n            nodeCount++;\n        }\n      }\n      if (nodeCount == 3) {\n        latch.countDown();\n        return true;\n      }\n      return false;\n    });\n\n    cluster.stopJettySolrRunner(random().nextInt(cluster.getJettySolrRunners().size()));\n    assertTrue(\"CollectionStateWatcher was never notified of cluster change\", latch.await(MAX_WAIT_TIMEOUT, TimeUnit.SECONDS));\n\n    assertEquals(\"CollectionStateWatcher wasn't cleared after completion\",\n        0, client.getZkStateReader().getStateWatchers(\"testcollection\").size());\n\n  }\n\n","bugFix":null,"bugIntro":["37057643c9e6b6e9d2c6ebc8df54e906b26dc6ff"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testSimpleCollectionWatch().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSimpleCollectionWatch() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(\"testcollection\", \"config\", 4, 1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    client.waitForState(\"testcollection\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 4, 1));\n\n    // shutdown a node and check that we get notified about the change\n    final CountDownLatch latch = new CountDownLatch(1);\n    client.registerCollectionStateWatcher(\"testcollection\", (liveNodes, collectionState) -> {\n      int nodeCount = 0;\n      log.info(\"State changed: {}\", collectionState);\n      for (Slice slice : collectionState) {\n        for (Replica replica : slice) {\n          if (replica.isActive(liveNodes))\n            nodeCount++;\n        }\n      }\n      if (nodeCount == 3) {\n        latch.countDown();\n        return true;\n      }\n      return false;\n    });\n\n    cluster.stopJettySolrRunner(random().nextInt(cluster.getJettySolrRunners().size()));\n    assertTrue(\"CollectionStateWatcher was never notified of cluster change\", latch.await(MAX_WAIT_TIMEOUT, TimeUnit.SECONDS));\n\n    Set<CollectionStateWatcher> watchers = client.getZkStateReader().getStateWatchers(\"testcollection\");\n    assertTrue(\"CollectionStateWatcher wasn't cleared after completion\",\n        watchers == null || watchers.size() == 0);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37057643c9e6b6e9d2c6ebc8df54e906b26dc6ff","date":1471003412,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testSimpleCollectionWatch().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testSimpleCollectionWatch().mjava","sourceNew":"  @Test\n  public void testSimpleCollectionWatch() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(\"testcollection\", \"config\", 4, 1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    client.waitForState(\"testcollection\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 4, 1));\n\n    // shutdown a node and check that we get notified about the change\n    final CountDownLatch latch = new CountDownLatch(1);\n    client.registerCollectionStateWatcher(\"testcollection\", (liveNodes, collectionState) -> {\n      int nodeCount = 0;\n      log.info(\"State changed: {}\", collectionState);\n      for (Slice slice : collectionState) {\n        for (Replica replica : slice) {\n          if (replica.isActive(liveNodes))\n            nodeCount++;\n        }\n      }\n      if (nodeCount == 3) {\n        latch.countDown();\n        return true;\n      }\n      return false;\n    });\n\n    cluster.stopJettySolrRunner(random().nextInt(cluster.getJettySolrRunners().size()));\n    assertTrue(\"CollectionStateWatcher was never notified of cluster change\", latch.await(MAX_WAIT_TIMEOUT, TimeUnit.SECONDS));\n\n    waitFor(\"CollectionStateWatcher wasn't cleared after completion\", 1, TimeUnit.SECONDS,\n        () -> client.getZkStateReader().getStateWatchers(\"testcollection\").isEmpty());\n\n  }\n\n","sourceOld":"  @Test\n  public void testSimpleCollectionWatch() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(\"testcollection\", \"config\", 4, 1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    client.waitForState(\"testcollection\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 4, 1));\n\n    // shutdown a node and check that we get notified about the change\n    final CountDownLatch latch = new CountDownLatch(1);\n    client.registerCollectionStateWatcher(\"testcollection\", (liveNodes, collectionState) -> {\n      int nodeCount = 0;\n      log.info(\"State changed: {}\", collectionState);\n      for (Slice slice : collectionState) {\n        for (Replica replica : slice) {\n          if (replica.isActive(liveNodes))\n            nodeCount++;\n        }\n      }\n      if (nodeCount == 3) {\n        latch.countDown();\n        return true;\n      }\n      return false;\n    });\n\n    cluster.stopJettySolrRunner(random().nextInt(cluster.getJettySolrRunners().size()));\n    assertTrue(\"CollectionStateWatcher was never notified of cluster change\", latch.await(MAX_WAIT_TIMEOUT, TimeUnit.SECONDS));\n\n    Set<CollectionStateWatcher> watchers = client.getZkStateReader().getStateWatchers(\"testcollection\");\n    assertTrue(\"CollectionStateWatcher wasn't cleared after completion\",\n        watchers == null || watchers.size() == 0);\n\n  }\n\n","bugFix":["77ce1a4cb826c58d16a217558a9b746368d1351b"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testSimpleCollectionWatch().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testSimpleCollectionWatch().mjava","sourceNew":"  @Test\n  public void testSimpleCollectionWatch() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(\"testcollection\", \"config\", 4, 1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    client.waitForState(\"testcollection\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 4, 1));\n\n    // shutdown a node and check that we get notified about the change\n    final CountDownLatch latch = new CountDownLatch(1);\n    client.registerCollectionStateWatcher(\"testcollection\", (liveNodes, collectionState) -> {\n      int nodeCount = 0;\n      log.info(\"State changed: {}\", collectionState);\n      for (Slice slice : collectionState) {\n        for (Replica replica : slice) {\n          if (replica.isActive(liveNodes))\n            nodeCount++;\n        }\n      }\n      if (nodeCount == 3) {\n        latch.countDown();\n        return true;\n      }\n      return false;\n    });\n\n    cluster.stopJettySolrRunner(random().nextInt(cluster.getJettySolrRunners().size()));\n    assertTrue(\"CollectionStateWatcher was never notified of cluster change\", latch.await(MAX_WAIT_TIMEOUT, TimeUnit.SECONDS));\n\n    waitFor(\"CollectionStateWatcher wasn't cleared after completion\", 1, TimeUnit.SECONDS,\n        () -> client.getZkStateReader().getStateWatchers(\"testcollection\").isEmpty());\n\n  }\n\n","sourceOld":"  @Test\n  public void testSimpleCollectionWatch() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(\"testcollection\", \"config\", 4, 1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    client.waitForState(\"testcollection\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 4, 1));\n\n    // shutdown a node and check that we get notified about the change\n    final CountDownLatch latch = new CountDownLatch(1);\n    client.registerCollectionStateWatcher(\"testcollection\", (liveNodes, collectionState) -> {\n      int nodeCount = 0;\n      log.info(\"State changed: {}\", collectionState);\n      for (Slice slice : collectionState) {\n        for (Replica replica : slice) {\n          if (replica.isActive(liveNodes))\n            nodeCount++;\n        }\n      }\n      if (nodeCount == 3) {\n        latch.countDown();\n        return true;\n      }\n      return false;\n    });\n\n    cluster.stopJettySolrRunner(random().nextInt(cluster.getJettySolrRunners().size()));\n    assertTrue(\"CollectionStateWatcher was never notified of cluster change\", latch.await(MAX_WAIT_TIMEOUT, TimeUnit.SECONDS));\n\n    Set<CollectionStateWatcher> watchers = client.getZkStateReader().getStateWatchers(\"testcollection\");\n    assertTrue(\"CollectionStateWatcher wasn't cleared after completion\",\n        watchers == null || watchers.size() == 0);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testSimpleCollectionWatch().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testSimpleCollectionWatch().mjava","sourceNew":"  @Test\n  public void testSimpleCollectionWatch() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(\"testcollection\", \"config\", 4, 1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    client.waitForState(\"testcollection\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 4, 1));\n\n    // shutdown a node and check that we get notified about the change\n    final CountDownLatch latch = new CountDownLatch(1);\n    client.registerCollectionStateWatcher(\"testcollection\", (liveNodes, collectionState) -> {\n      int nodeCount = 0;\n      log.info(\"State changed: {}\", collectionState);\n      for (Slice slice : collectionState) {\n        for (Replica replica : slice) {\n          if (replica.isActive(liveNodes))\n            nodeCount++;\n        }\n      }\n      if (nodeCount == 3) {\n        latch.countDown();\n        return true;\n      }\n      return false;\n    });\n\n    cluster.stopJettySolrRunner(random().nextInt(cluster.getJettySolrRunners().size()));\n    assertTrue(\"CollectionStateWatcher was never notified of cluster change\", latch.await(MAX_WAIT_TIMEOUT, TimeUnit.SECONDS));\n\n    waitFor(\"CollectionStateWatcher wasn't cleared after completion\", 1, TimeUnit.SECONDS,\n        () -> client.getZkStateReader().getStateWatchers(\"testcollection\").isEmpty());\n\n  }\n\n","sourceOld":"  @Test\n  public void testSimpleCollectionWatch() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(\"testcollection\", \"config\", 4, 1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    client.waitForState(\"testcollection\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 4, 1));\n\n    // shutdown a node and check that we get notified about the change\n    final CountDownLatch latch = new CountDownLatch(1);\n    client.registerCollectionStateWatcher(\"testcollection\", (liveNodes, collectionState) -> {\n      int nodeCount = 0;\n      log.info(\"State changed: {}\", collectionState);\n      for (Slice slice : collectionState) {\n        for (Replica replica : slice) {\n          if (replica.isActive(liveNodes))\n            nodeCount++;\n        }\n      }\n      if (nodeCount == 3) {\n        latch.countDown();\n        return true;\n      }\n      return false;\n    });\n\n    cluster.stopJettySolrRunner(random().nextInt(cluster.getJettySolrRunners().size()));\n    assertTrue(\"CollectionStateWatcher was never notified of cluster change\", latch.await(MAX_WAIT_TIMEOUT, TimeUnit.SECONDS));\n\n    Set<CollectionStateWatcher> watchers = client.getZkStateReader().getStateWatchers(\"testcollection\");\n    assertTrue(\"CollectionStateWatcher wasn't cleared after completion\",\n        watchers == null || watchers.size() == 0);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testSimpleCollectionWatch().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSimpleCollectionWatch() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(\"testcollection\", \"config\", 4, 1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    client.waitForState(\"testcollection\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 4, 1));\n\n    // shutdown a node and check that we get notified about the change\n    final CountDownLatch latch = new CountDownLatch(1);\n    client.registerCollectionStateWatcher(\"testcollection\", (liveNodes, collectionState) -> {\n      int nodeCount = 0;\n      log.info(\"State changed: {}\", collectionState);\n      for (Slice slice : collectionState) {\n        for (Replica replica : slice) {\n          if (replica.isActive(liveNodes))\n            nodeCount++;\n        }\n      }\n      if (nodeCount == 3) {\n        latch.countDown();\n        return true;\n      }\n      return false;\n    });\n\n    cluster.stopJettySolrRunner(random().nextInt(cluster.getJettySolrRunners().size()));\n    assertTrue(\"CollectionStateWatcher was never notified of cluster change\", latch.await(MAX_WAIT_TIMEOUT, TimeUnit.SECONDS));\n\n    waitFor(\"CollectionStateWatcher wasn't cleared after completion\", 1, TimeUnit.SECONDS,\n        () -> client.getZkStateReader().getStateWatchers(\"testcollection\").isEmpty());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1c374690db69470f6aa4bffc43dcacf1f4e3e49","date":1529007399,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testSimpleCollectionWatch().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testSimpleCollectionWatch().mjava","sourceNew":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 12-Jun-2018\n  public void testSimpleCollectionWatch() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(\"testcollection\", \"config\", 4, 1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    client.waitForState(\"testcollection\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 4, 1));\n\n    // shutdown a node and check that we get notified about the change\n    final CountDownLatch latch = new CountDownLatch(1);\n    client.registerCollectionStateWatcher(\"testcollection\", (liveNodes, collectionState) -> {\n      int nodeCount = 0;\n      log.info(\"State changed: {}\", collectionState);\n      for (Slice slice : collectionState) {\n        for (Replica replica : slice) {\n          if (replica.isActive(liveNodes))\n            nodeCount++;\n        }\n      }\n      if (nodeCount == 3) {\n        latch.countDown();\n        return true;\n      }\n      return false;\n    });\n\n    cluster.stopJettySolrRunner(random().nextInt(cluster.getJettySolrRunners().size()));\n    assertTrue(\"CollectionStateWatcher was never notified of cluster change\", latch.await(MAX_WAIT_TIMEOUT, TimeUnit.SECONDS));\n\n    waitFor(\"CollectionStateWatcher wasn't cleared after completion\", 1, TimeUnit.SECONDS,\n        () -> client.getZkStateReader().getStateWatchers(\"testcollection\").isEmpty());\n\n  }\n\n","sourceOld":"  @Test\n  public void testSimpleCollectionWatch() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(\"testcollection\", \"config\", 4, 1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    client.waitForState(\"testcollection\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 4, 1));\n\n    // shutdown a node and check that we get notified about the change\n    final CountDownLatch latch = new CountDownLatch(1);\n    client.registerCollectionStateWatcher(\"testcollection\", (liveNodes, collectionState) -> {\n      int nodeCount = 0;\n      log.info(\"State changed: {}\", collectionState);\n      for (Slice slice : collectionState) {\n        for (Replica replica : slice) {\n          if (replica.isActive(liveNodes))\n            nodeCount++;\n        }\n      }\n      if (nodeCount == 3) {\n        latch.countDown();\n        return true;\n      }\n      return false;\n    });\n\n    cluster.stopJettySolrRunner(random().nextInt(cluster.getJettySolrRunners().size()));\n    assertTrue(\"CollectionStateWatcher was never notified of cluster change\", latch.await(MAX_WAIT_TIMEOUT, TimeUnit.SECONDS));\n\n    waitFor(\"CollectionStateWatcher wasn't cleared after completion\", 1, TimeUnit.SECONDS,\n        () -> client.getZkStateReader().getStateWatchers(\"testcollection\").isEmpty());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testSimpleCollectionWatch().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testSimpleCollectionWatch().mjava","sourceNew":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 12-Jun-2018\n  public void testSimpleCollectionWatch() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(\"testcollection\", \"config\", 4, 1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    client.waitForState(\"testcollection\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 4, 1));\n\n    // shutdown a node and check that we get notified about the change\n    final CountDownLatch latch = new CountDownLatch(1);\n    client.registerCollectionStateWatcher(\"testcollection\", (liveNodes, collectionState) -> {\n      int nodeCount = 0;\n      log.info(\"State changed: {}\", collectionState);\n      for (Slice slice : collectionState) {\n        for (Replica replica : slice) {\n          if (replica.isActive(liveNodes))\n            nodeCount++;\n        }\n      }\n      if (nodeCount == 3) {\n        latch.countDown();\n        return true;\n      }\n      return false;\n    });\n\n    cluster.stopJettySolrRunner(random().nextInt(cluster.getJettySolrRunners().size()));\n    assertTrue(\"CollectionStateWatcher was never notified of cluster change\", latch.await(MAX_WAIT_TIMEOUT, TimeUnit.SECONDS));\n\n    waitFor(\"CollectionStateWatcher wasn't cleared after completion\", 1, TimeUnit.SECONDS,\n        () -> client.getZkStateReader().getStateWatchers(\"testcollection\").isEmpty());\n\n  }\n\n","sourceOld":"  @Test\n  public void testSimpleCollectionWatch() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(\"testcollection\", \"config\", 4, 1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    client.waitForState(\"testcollection\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 4, 1));\n\n    // shutdown a node and check that we get notified about the change\n    final CountDownLatch latch = new CountDownLatch(1);\n    client.registerCollectionStateWatcher(\"testcollection\", (liveNodes, collectionState) -> {\n      int nodeCount = 0;\n      log.info(\"State changed: {}\", collectionState);\n      for (Slice slice : collectionState) {\n        for (Replica replica : slice) {\n          if (replica.isActive(liveNodes))\n            nodeCount++;\n        }\n      }\n      if (nodeCount == 3) {\n        latch.countDown();\n        return true;\n      }\n      return false;\n    });\n\n    cluster.stopJettySolrRunner(random().nextInt(cluster.getJettySolrRunners().size()));\n    assertTrue(\"CollectionStateWatcher was never notified of cluster change\", latch.await(MAX_WAIT_TIMEOUT, TimeUnit.SECONDS));\n\n    waitFor(\"CollectionStateWatcher wasn't cleared after completion\", 1, TimeUnit.SECONDS,\n        () -> client.getZkStateReader().getStateWatchers(\"testcollection\").isEmpty());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testSimpleCollectionWatch().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testSimpleCollectionWatch().mjava","sourceNew":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 12-Jun-2018\n  public void testSimpleCollectionWatch() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(\"testcollection\", \"config\", 4, 1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    client.waitForState(\"testcollection\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 4, 1));\n\n    // shutdown a node and check that we get notified about the change\n    final CountDownLatch latch = new CountDownLatch(1);\n    client.registerCollectionStateWatcher(\"testcollection\", (liveNodes, collectionState) -> {\n      int nodeCount = 0;\n      log.info(\"State changed: {}\", collectionState);\n      for (Slice slice : collectionState) {\n        for (Replica replica : slice) {\n          if (replica.isActive(liveNodes))\n            nodeCount++;\n        }\n      }\n      if (nodeCount == 3) {\n        latch.countDown();\n        return true;\n      }\n      return false;\n    });\n\n    cluster.stopJettySolrRunner(random().nextInt(cluster.getJettySolrRunners().size()));\n    assertTrue(\"CollectionStateWatcher was never notified of cluster change\", latch.await(MAX_WAIT_TIMEOUT, TimeUnit.SECONDS));\n\n    waitFor(\"CollectionStateWatcher wasn't cleared after completion\", 1, TimeUnit.SECONDS,\n        () -> client.getZkStateReader().getStateWatchers(\"testcollection\").isEmpty());\n\n  }\n\n","sourceOld":"  @Test\n  public void testSimpleCollectionWatch() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(\"testcollection\", \"config\", 4, 1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    client.waitForState(\"testcollection\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 4, 1));\n\n    // shutdown a node and check that we get notified about the change\n    final CountDownLatch latch = new CountDownLatch(1);\n    client.registerCollectionStateWatcher(\"testcollection\", (liveNodes, collectionState) -> {\n      int nodeCount = 0;\n      log.info(\"State changed: {}\", collectionState);\n      for (Slice slice : collectionState) {\n        for (Replica replica : slice) {\n          if (replica.isActive(liveNodes))\n            nodeCount++;\n        }\n      }\n      if (nodeCount == 3) {\n        latch.countDown();\n        return true;\n      }\n      return false;\n    });\n\n    cluster.stopJettySolrRunner(random().nextInt(cluster.getJettySolrRunners().size()));\n    assertTrue(\"CollectionStateWatcher was never notified of cluster change\", latch.await(MAX_WAIT_TIMEOUT, TimeUnit.SECONDS));\n\n    waitFor(\"CollectionStateWatcher wasn't cleared after completion\", 1, TimeUnit.SECONDS,\n        () -> client.getZkStateReader().getStateWatchers(\"testcollection\").isEmpty());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44dd40f6c2c1465aebf4677bab10f696c7ea18d8","date":1539566013,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testSimpleCollectionWatch().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testSimpleCollectionWatch().mjava","sourceNew":"  @Test\n  //Commented 14-Oct-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 12-Jun-2018\n  public void testSimpleCollectionWatch() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(\"testcollection\", \"config\", 4, 1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    client.waitForState(\"testcollection\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 4, 1));\n\n    // shutdown a node and check that we get notified about the change\n    final CountDownLatch latch = new CountDownLatch(1);\n    client.registerCollectionStateWatcher(\"testcollection\", (liveNodes, collectionState) -> {\n      int nodeCount = 0;\n      log.info(\"State changed: {}\", collectionState);\n      for (Slice slice : collectionState) {\n        for (Replica replica : slice) {\n          if (replica.isActive(liveNodes))\n            nodeCount++;\n        }\n      }\n      if (nodeCount == 3) {\n        latch.countDown();\n        return true;\n      }\n      return false;\n    });\n\n    cluster.stopJettySolrRunner(random().nextInt(cluster.getJettySolrRunners().size()));\n    assertTrue(\"CollectionStateWatcher was never notified of cluster change\", latch.await(MAX_WAIT_TIMEOUT, TimeUnit.SECONDS));\n\n    waitFor(\"CollectionStateWatcher wasn't cleared after completion\", 1, TimeUnit.SECONDS,\n        () -> client.getZkStateReader().getStateWatchers(\"testcollection\").isEmpty());\n\n  }\n\n","sourceOld":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 12-Jun-2018\n  public void testSimpleCollectionWatch() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(\"testcollection\", \"config\", 4, 1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    client.waitForState(\"testcollection\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 4, 1));\n\n    // shutdown a node and check that we get notified about the change\n    final CountDownLatch latch = new CountDownLatch(1);\n    client.registerCollectionStateWatcher(\"testcollection\", (liveNodes, collectionState) -> {\n      int nodeCount = 0;\n      log.info(\"State changed: {}\", collectionState);\n      for (Slice slice : collectionState) {\n        for (Replica replica : slice) {\n          if (replica.isActive(liveNodes))\n            nodeCount++;\n        }\n      }\n      if (nodeCount == 3) {\n        latch.countDown();\n        return true;\n      }\n      return false;\n    });\n\n    cluster.stopJettySolrRunner(random().nextInt(cluster.getJettySolrRunners().size()));\n    assertTrue(\"CollectionStateWatcher was never notified of cluster change\", latch.await(MAX_WAIT_TIMEOUT, TimeUnit.SECONDS));\n\n    waitFor(\"CollectionStateWatcher wasn't cleared after completion\", 1, TimeUnit.SECONDS,\n        () -> client.getZkStateReader().getStateWatchers(\"testcollection\").isEmpty());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testSimpleCollectionWatch().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testSimpleCollectionWatch().mjava","sourceNew":"  @Test\n  //Commented 14-Oct-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 12-Jun-2018\n  public void testSimpleCollectionWatch() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(\"testcollection\", \"config\", 4, 1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    client.waitForState(\"testcollection\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 4, 1));\n\n    // shutdown a node and check that we get notified about the change\n    final CountDownLatch latch = new CountDownLatch(1);\n    client.registerCollectionStateWatcher(\"testcollection\", (liveNodes, collectionState) -> {\n      int nodeCount = 0;\n      log.info(\"State changed: {}\", collectionState);\n      for (Slice slice : collectionState) {\n        for (Replica replica : slice) {\n          if (replica.isActive(liveNodes))\n            nodeCount++;\n        }\n      }\n      if (nodeCount == 3) {\n        latch.countDown();\n        return true;\n      }\n      return false;\n    });\n\n    JettySolrRunner j = cluster.stopJettySolrRunner(random().nextInt(cluster.getJettySolrRunners().size()));\n    cluster.waitForJettyToStop(j);\n    assertTrue(\"CollectionStateWatcher was never notified of cluster change\", latch.await(MAX_WAIT_TIMEOUT, TimeUnit.SECONDS));\n\n    waitFor(\"CollectionStateWatcher wasn't cleared after completion\", 1, TimeUnit.SECONDS,\n        () -> client.getZkStateReader().getStateWatchers(\"testcollection\").isEmpty());\n\n  }\n\n","sourceOld":"  @Test\n  //Commented 14-Oct-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 12-Jun-2018\n  public void testSimpleCollectionWatch() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(\"testcollection\", \"config\", 4, 1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    client.waitForState(\"testcollection\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 4, 1));\n\n    // shutdown a node and check that we get notified about the change\n    final CountDownLatch latch = new CountDownLatch(1);\n    client.registerCollectionStateWatcher(\"testcollection\", (liveNodes, collectionState) -> {\n      int nodeCount = 0;\n      log.info(\"State changed: {}\", collectionState);\n      for (Slice slice : collectionState) {\n        for (Replica replica : slice) {\n          if (replica.isActive(liveNodes))\n            nodeCount++;\n        }\n      }\n      if (nodeCount == 3) {\n        latch.countDown();\n        return true;\n      }\n      return false;\n    });\n\n    cluster.stopJettySolrRunner(random().nextInt(cluster.getJettySolrRunners().size()));\n    assertTrue(\"CollectionStateWatcher was never notified of cluster change\", latch.await(MAX_WAIT_TIMEOUT, TimeUnit.SECONDS));\n\n    waitFor(\"CollectionStateWatcher wasn't cleared after completion\", 1, TimeUnit.SECONDS,\n        () -> client.getZkStateReader().getStateWatchers(\"testcollection\").isEmpty());\n\n  }\n\n","bugFix":["5b4df85b7268ca40452d6c01343d8eb00ed1f70a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b366e7dd3172289251a86be96031af4002cd19c","date":1560790783,"type":5,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#doTestCollectionWatchWithNodeShutdown(boolean).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCollectionStateWatchers#testSimpleCollectionWatch().mjava","sourceNew":"  private void doTestCollectionWatchWithNodeShutdown(final boolean shutdownUnusedNode)\n    throws Exception {\n    \n    CloudSolrClient client = cluster.getSolrClient();\n\n    // note: one node in our cluster is unsed by collection\n    CollectionAdminRequest.createCollection(\"testcollection\", \"config\", CLUSTER_SIZE, 1)\n      .processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    client.waitForState(\"testcollection\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n                        (n, c) -> DocCollection.isFullyActive(n, c, CLUSTER_SIZE, 1));\n\n    final JettySolrRunner extraJetty = cluster.startJettySolrRunner();\n    final JettySolrRunner jettyToShutdown\n      = shutdownUnusedNode ? extraJetty : cluster.getJettySolrRunners().get(0);\n    final int expectedNodesWithActiveReplicas = CLUSTER_SIZE - (shutdownUnusedNode ? 0 : 1);\n    \n    cluster.waitForAllNodes(MAX_WAIT_TIMEOUT);\n    \n    // shutdown a node and check that we get notified about the change\n    final CountDownLatch latch = new CountDownLatch(1);\n    client.registerCollectionStateWatcher(\"testcollection\", (liveNodes, collectionState) -> {\n      int nodesWithActiveReplicas = 0;\n      log.info(\"State changed: {}\", collectionState);\n      for (Slice slice : collectionState) {\n        for (Replica replica : slice) {\n          if (replica.isActive(liveNodes))\n            nodesWithActiveReplicas++;\n        }\n      }\n      if (liveNodes.size() == CLUSTER_SIZE\n          && expectedNodesWithActiveReplicas == nodesWithActiveReplicas) {\n        latch.countDown();\n        return true;\n      }\n      return false;\n    });\n\n    cluster.stopJettySolrRunner(jettyToShutdown);\n    cluster.waitForJettyToStop(jettyToShutdown);\n    \n    assertTrue(\"CollectionStateWatcher was never notified of cluster change\",\n               latch.await(MAX_WAIT_TIMEOUT, TimeUnit.SECONDS));\n\n    waitFor(\"CollectionStateWatcher wasn't cleared after completion\",\n            MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n            () -> client.getZkStateReader().getStateWatchers(\"testcollection\").isEmpty());\n\n  }\n\n","sourceOld":"  @Test\n  //Commented 14-Oct-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 12-Jun-2018\n  public void testSimpleCollectionWatch() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(\"testcollection\", \"config\", 4, 1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    client.waitForState(\"testcollection\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 4, 1));\n\n    // shutdown a node and check that we get notified about the change\n    final CountDownLatch latch = new CountDownLatch(1);\n    client.registerCollectionStateWatcher(\"testcollection\", (liveNodes, collectionState) -> {\n      int nodeCount = 0;\n      log.info(\"State changed: {}\", collectionState);\n      for (Slice slice : collectionState) {\n        for (Replica replica : slice) {\n          if (replica.isActive(liveNodes))\n            nodeCount++;\n        }\n      }\n      if (nodeCount == 3) {\n        latch.countDown();\n        return true;\n      }\n      return false;\n    });\n\n    JettySolrRunner j = cluster.stopJettySolrRunner(random().nextInt(cluster.getJettySolrRunners().size()));\n    cluster.waitForJettyToStop(j);\n    assertTrue(\"CollectionStateWatcher was never notified of cluster change\", latch.await(MAX_WAIT_TIMEOUT, TimeUnit.SECONDS));\n\n    waitFor(\"CollectionStateWatcher wasn't cleared after completion\", 1, TimeUnit.SECONDS,\n        () -> client.getZkStateReader().getStateWatchers(\"testcollection\").isEmpty());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"44dd40f6c2c1465aebf4677bab10f696c7ea18d8":["a1c374690db69470f6aa4bffc43dcacf1f4e3e49"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["d470c8182e92b264680e34081b75e70a9f2b3c89","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["44dd40f6c2c1465aebf4677bab10f696c7ea18d8"],"77ce1a4cb826c58d16a217558a9b746368d1351b":["5cd4080fba20c774e4183c2ceb96ede05e5fb779"],"7b366e7dd3172289251a86be96031af4002cd19c":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"0ad30c6a479e764150a3316e57263319775f1df2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","27b43f9a8cc600a073ced9342cb6882853856049"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["d470c8182e92b264680e34081b75e70a9f2b3c89","37057643c9e6b6e9d2c6ebc8df54e906b26dc6ff"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","77ce1a4cb826c58d16a217558a9b746368d1351b"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["403d05f7f8d69b65659157eff1bc1d2717f04c66","a1c374690db69470f6aa4bffc43dcacf1f4e3e49"],"5cd4080fba20c774e4183c2ceb96ede05e5fb779":["0ad30c6a479e764150a3316e57263319775f1df2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"27b43f9a8cc600a073ced9342cb6882853856049":["5b4df85b7268ca40452d6c01343d8eb00ed1f70a"],"5b4df85b7268ca40452d6c01343d8eb00ed1f70a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b366e7dd3172289251a86be96031af4002cd19c"],"a1c374690db69470f6aa4bffc43dcacf1f4e3e49":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"37057643c9e6b6e9d2c6ebc8df54e906b26dc6ff":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["403d05f7f8d69b65659157eff1bc1d2717f04c66","a1c374690db69470f6aa4bffc43dcacf1f4e3e49"]},"commit2Childs":{"44dd40f6c2c1465aebf4677bab10f696c7ea18d8":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","a1c374690db69470f6aa4bffc43dcacf1f4e3e49","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["7b366e7dd3172289251a86be96031af4002cd19c"],"77ce1a4cb826c58d16a217558a9b746368d1351b":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"7b366e7dd3172289251a86be96031af4002cd19c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0ad30c6a479e764150a3316e57263319775f1df2":["5cd4080fba20c774e4183c2ceb96ede05e5fb779"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["403d05f7f8d69b65659157eff1bc1d2717f04c66","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","37057643c9e6b6e9d2c6ebc8df54e906b26dc6ff"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"5cd4080fba20c774e4183c2ceb96ede05e5fb779":["77ce1a4cb826c58d16a217558a9b746368d1351b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ad30c6a479e764150a3316e57263319775f1df2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","5b4df85b7268ca40452d6c01343d8eb00ed1f70a"],"27b43f9a8cc600a073ced9342cb6882853856049":["0ad30c6a479e764150a3316e57263319775f1df2"],"5b4df85b7268ca40452d6c01343d8eb00ed1f70a":["27b43f9a8cc600a073ced9342cb6882853856049"],"a1c374690db69470f6aa4bffc43dcacf1f4e3e49":["44dd40f6c2c1465aebf4677bab10f696c7ea18d8","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"37057643c9e6b6e9d2c6ebc8df54e906b26dc6ff":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}