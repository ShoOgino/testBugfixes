{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#peekTopN(int,Set[String],long).mjava","commits":[{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":1,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#peekTopN(int,Set[String],long).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionQueue#peekTopN(int,Set[String],long).mjava","sourceNew":"  public List<QueueEvent> peekTopN(int n, Set<String> excludeSet, long waitMillis)\n      throws KeeperException, InterruptedException {\n    ArrayList<QueueEvent> topN = new ArrayList<>();\n\n    LOG.debug(\"Peeking for top {} elements. ExcludeSet: {}\", n, excludeSet);\n    TimerContext time = null;\n    if (waitMillis == Long.MAX_VALUE) time = stats.time(dir + \"_peekTopN_wait_forever\");\n    else time = stats.time(dir + \"_peekTopN_wait\" + waitMillis);\n\n    try {\n      for (String headNode : getChildren(waitMillis)) {\n        if (topN.size() < n) {\n          try {\n            String id = dir + \"/\" + headNode;\n            if (excludeSet.contains(id)) continue;\n            QueueEvent queueEvent = new QueueEvent(id,\n                zookeeper.getData(dir + \"/\" + headNode, null, null, true), null);\n            topN.add(queueEvent);\n          } catch (KeeperException.NoNodeException e) {\n            // Another client removed the node first, try next\n          }\n        } else {\n          if (topN.size() >= 1) {\n            printQueueEventsListElementIds(topN);\n            return topN;\n          }\n        }\n      }\n\n      if (topN.size() > 0 ) {\n        printQueueEventsListElementIds(topN);\n        return topN;\n      }\n      return null;\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  public List<QueueEvent> peekTopN(int n, Set<String> excludeSet, long waitMillis)\n      throws KeeperException, InterruptedException {\n    ArrayList<QueueEvent> topN = new ArrayList<>();\n\n    LOG.debug(\"Peeking for top {} elements. ExcludeSet: {}\", n, excludeSet);\n    TimerContext time = null;\n    if (waitMillis == Long.MAX_VALUE) time = stats.time(dir + \"_peekTopN_wait_forever\");\n    else time = stats.time(dir + \"_peekTopN_wait\" + waitMillis);\n\n    try {\n      for (String headNode : getChildren(waitMillis)) {\n        if (topN.size() < n) {\n          try {\n            String id = dir + \"/\" + headNode;\n            if (excludeSet.contains(id)) continue;\n            QueueEvent queueEvent = new QueueEvent(id,\n                zookeeper.getData(dir + \"/\" + headNode, null, null, true), null);\n            topN.add(queueEvent);\n          } catch (KeeperException.NoNodeException e) {\n            // Another client removed the node first, try next\n          }\n        } else {\n          if (topN.size() >= 1) {\n            printQueueEventsListElementIds(topN);\n            return topN;\n          }\n        }\n      }\n\n      if (topN.size() > 0 ) {\n        printQueueEventsListElementIds(topN);\n        return topN;\n      }\n      return null;\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7fd147f6ec145b926803480f62aa12e2aad258e","date":1465448343,"type":3,"author":"Scott Blum","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#peekTopN(int,Set[String],long).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#peekTopN(int,Set[String],long).mjava","sourceNew":"  public List<QueueEvent> peekTopN(int n, Set<String> excludeSet, long waitMillis)\n      throws KeeperException, InterruptedException {\n    ArrayList<QueueEvent> topN = new ArrayList<>();\n\n    LOG.debug(\"Peeking for top {} elements. ExcludeSet: {}\", n, excludeSet);\n    TimerContext time;\n    if (waitMillis == Long.MAX_VALUE) time = stats.time(dir + \"_peekTopN_wait_forever\");\n    else time = stats.time(dir + \"_peekTopN_wait\" + waitMillis);\n\n    try {\n      for (Pair<String, byte[]> element : peekElements(n, waitMillis, child -> !excludeSet.contains(dir + \"/\" + child))) {\n        topN.add(new QueueEvent(dir + \"/\" + element.first(),\n            element.second(), null));\n      }\n      printQueueEventsListElementIds(topN);\n      return topN;\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  public List<QueueEvent> peekTopN(int n, Set<String> excludeSet, long waitMillis)\n      throws KeeperException, InterruptedException {\n    ArrayList<QueueEvent> topN = new ArrayList<>();\n\n    LOG.debug(\"Peeking for top {} elements. ExcludeSet: {}\", n, excludeSet);\n    TimerContext time = null;\n    if (waitMillis == Long.MAX_VALUE) time = stats.time(dir + \"_peekTopN_wait_forever\");\n    else time = stats.time(dir + \"_peekTopN_wait\" + waitMillis);\n\n    try {\n      for (String headNode : getChildren(waitMillis)) {\n        if (topN.size() < n) {\n          try {\n            String id = dir + \"/\" + headNode;\n            if (excludeSet.contains(id)) continue;\n            QueueEvent queueEvent = new QueueEvent(id,\n                zookeeper.getData(dir + \"/\" + headNode, null, null, true), null);\n            topN.add(queueEvent);\n          } catch (KeeperException.NoNodeException e) {\n            // Another client removed the node first, try next\n          }\n        } else {\n          if (topN.size() >= 1) {\n            printQueueEventsListElementIds(topN);\n            return topN;\n          }\n        }\n      }\n\n      if (topN.size() > 0 ) {\n        printQueueEventsListElementIds(topN);\n        return topN;\n      }\n      return null;\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77c9633f72998c3815ffe21baa5f16d6e50f1e4a","date":1465453043,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#peekTopN(int,Set[String],long).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#peekTopN(int,Set[String],long).mjava","sourceNew":"  public List<QueueEvent> peekTopN(int n, Set<String> excludeSet, long waitMillis)\n      throws KeeperException, InterruptedException {\n    ArrayList<QueueEvent> topN = new ArrayList<>();\n\n    LOG.debug(\"Peeking for top {} elements. ExcludeSet: {}\", n, excludeSet);\n    TimerContext time;\n    if (waitMillis == Long.MAX_VALUE) time = stats.time(dir + \"_peekTopN_wait_forever\");\n    else time = stats.time(dir + \"_peekTopN_wait\" + waitMillis);\n\n    try {\n      for (Pair<String, byte[]> element : peekElements(n, waitMillis, child -> !excludeSet.contains(dir + \"/\" + child))) {\n        topN.add(new QueueEvent(dir + \"/\" + element.first(),\n            element.second(), null));\n      }\n      printQueueEventsListElementIds(topN);\n      return topN;\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  public List<QueueEvent> peekTopN(int n, Set<String> excludeSet, long waitMillis)\n      throws KeeperException, InterruptedException {\n    ArrayList<QueueEvent> topN = new ArrayList<>();\n\n    LOG.debug(\"Peeking for top {} elements. ExcludeSet: {}\", n, excludeSet);\n    TimerContext time = null;\n    if (waitMillis == Long.MAX_VALUE) time = stats.time(dir + \"_peekTopN_wait_forever\");\n    else time = stats.time(dir + \"_peekTopN_wait\" + waitMillis);\n\n    try {\n      for (String headNode : getChildren(waitMillis)) {\n        if (topN.size() < n) {\n          try {\n            String id = dir + \"/\" + headNode;\n            if (excludeSet.contains(id)) continue;\n            QueueEvent queueEvent = new QueueEvent(id,\n                zookeeper.getData(dir + \"/\" + headNode, null, null, true), null);\n            topN.add(queueEvent);\n          } catch (KeeperException.NoNodeException e) {\n            // Another client removed the node first, try next\n          }\n        } else {\n          if (topN.size() >= 1) {\n            printQueueEventsListElementIds(topN);\n            return topN;\n          }\n        }\n      }\n\n      if (topN.size() > 0 ) {\n        printQueueEventsListElementIds(topN);\n        return topN;\n      }\n      return null;\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4014209b24e71d602e579a316f994355596012","date":1465717267,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#peekTopN(int,Predicate[String],long).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#peekTopN(int,Set[String],long).mjava","sourceNew":"  public List<QueueEvent> peekTopN(int n, Predicate<String> excludeSet, long waitMillis)\n      throws KeeperException, InterruptedException {\n    ArrayList<QueueEvent> topN = new ArrayList<>();\n\n    LOG.debug(\"Peeking for top {} elements. ExcludeSet: {}\", n, excludeSet);\n    TimerContext time;\n    if (waitMillis == Long.MAX_VALUE) time = stats.time(dir + \"_peekTopN_wait_forever\");\n    else time = stats.time(dir + \"_peekTopN_wait\" + waitMillis);\n\n    try {\n      for (Pair<String, byte[]> element : peekElements(n, waitMillis, child -> !excludeSet.test(dir + \"/\" + child))) {\n        topN.add(new QueueEvent(dir + \"/\" + element.first(),\n            element.second(), null));\n      }\n      printQueueEventsListElementIds(topN);\n      return topN;\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  public List<QueueEvent> peekTopN(int n, Set<String> excludeSet, long waitMillis)\n      throws KeeperException, InterruptedException {\n    ArrayList<QueueEvent> topN = new ArrayList<>();\n\n    LOG.debug(\"Peeking for top {} elements. ExcludeSet: {}\", n, excludeSet);\n    TimerContext time;\n    if (waitMillis == Long.MAX_VALUE) time = stats.time(dir + \"_peekTopN_wait_forever\");\n    else time = stats.time(dir + \"_peekTopN_wait\" + waitMillis);\n\n    try {\n      for (Pair<String, byte[]> element : peekElements(n, waitMillis, child -> !excludeSet.contains(dir + \"/\" + child))) {\n        topN.add(new QueueEvent(dir + \"/\" + element.first(),\n            element.second(), null));\n      }\n      printQueueEventsListElementIds(topN);\n      return topN;\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#peekTopN(int,Set[String],long).mjava","sourceNew":null,"sourceOld":"  public List<QueueEvent> peekTopN(int n, Set<String> excludeSet, long waitMillis)\n      throws KeeperException, InterruptedException {\n    ArrayList<QueueEvent> topN = new ArrayList<>();\n\n    LOG.debug(\"Peeking for top {} elements. ExcludeSet: {}\", n, excludeSet);\n    TimerContext time = null;\n    if (waitMillis == Long.MAX_VALUE) time = stats.time(dir + \"_peekTopN_wait_forever\");\n    else time = stats.time(dir + \"_peekTopN_wait\" + waitMillis);\n\n    try {\n      for (String headNode : getChildren(waitMillis)) {\n        if (topN.size() < n) {\n          try {\n            String id = dir + \"/\" + headNode;\n            if (excludeSet.contains(id)) continue;\n            QueueEvent queueEvent = new QueueEvent(id,\n                zookeeper.getData(dir + \"/\" + headNode, null, null, true), null);\n            topN.add(queueEvent);\n          } catch (KeeperException.NoNodeException e) {\n            // Another client removed the node first, try next\n          }\n        } else {\n          if (topN.size() >= 1) {\n            printQueueEventsListElementIds(topN);\n            return topN;\n          }\n        }\n      }\n\n      if (topN.size() > 0 ) {\n        printQueueEventsListElementIds(topN);\n        return topN;\n      }\n      return null;\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2209af2c265d2258ec4b29c8cc78622d36994a15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f7fd147f6ec145b926803480f62aa12e2aad258e":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"1e4014209b24e71d602e579a316f994355596012":["77c9633f72998c3815ffe21baa5f16d6e50f1e4a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77c9633f72998c3815ffe21baa5f16d6e50f1e4a":["2209af2c265d2258ec4b29c8cc78622d36994a15","f7fd147f6ec145b926803480f62aa12e2aad258e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2209af2c265d2258ec4b29c8cc78622d36994a15","1e4014209b24e71d602e579a316f994355596012"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1e4014209b24e71d602e579a316f994355596012"]},"commit2Childs":{"2209af2c265d2258ec4b29c8cc78622d36994a15":["f7fd147f6ec145b926803480f62aa12e2aad258e","77c9633f72998c3815ffe21baa5f16d6e50f1e4a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"f7fd147f6ec145b926803480f62aa12e2aad258e":["77c9633f72998c3815ffe21baa5f16d6e50f1e4a"],"1e4014209b24e71d602e579a316f994355596012":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"77c9633f72998c3815ffe21baa5f16d6e50f1e4a":["1e4014209b24e71d602e579a316f994355596012"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}