{"path":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader#readTermsBlock(IndexInput,FieldInfo,BlockTermState).mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader#readTermsBlock(IndexInput,FieldInfo,BlockTermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReader#readTermsBlock(IndexInput,FieldInfo,BlockTermState).mjava","sourceNew":"  /* Reads but does not decode the byte[] blob holding\n     metadata for the current terms block */\n  @Override\n  public void readTermsBlock(IndexInput termsIn, FieldInfo fieldInfo, BlockTermState _termState) throws IOException {\n    final StandardTermState termState = (StandardTermState) _termState;\n\n    final int len = termsIn.readVInt();\n\n    // if (DEBUG) System.out.println(\"  SPR.readTermsBlock bytes=\" + len + \" ts=\" + _termState);\n    if (termState.bytes == null) {\n      termState.bytes = new byte[ArrayUtil.oversize(len, 1)];\n      termState.bytesReader = new ByteArrayDataInput();\n    } else if (termState.bytes.length < len) {\n      termState.bytes = new byte[ArrayUtil.oversize(len, 1)];\n    }\n\n    termsIn.readBytes(termState.bytes, 0, len);\n    termState.bytesReader.reset(termState.bytes, 0, len);\n  }\n\n","sourceOld":"  /* Reads but does not decode the byte[] blob holding\n     metadata for the current terms block */\n  @Override\n  public void readTermsBlock(IndexInput termsIn, FieldInfo fieldInfo, BlockTermState _termState) throws IOException {\n    final StandardTermState termState = (StandardTermState) _termState;\n\n    final int len = termsIn.readVInt();\n\n    // if (DEBUG) System.out.println(\"  SPR.readTermsBlock bytes=\" + len + \" ts=\" + _termState);\n    if (termState.bytes == null) {\n      termState.bytes = new byte[ArrayUtil.oversize(len, 1)];\n      termState.bytesReader = new ByteArrayDataInput();\n    } else if (termState.bytes.length < len) {\n      termState.bytes = new byte[ArrayUtil.oversize(len, 1)];\n    }\n\n    termsIn.readBytes(termState.bytes, 0, len);\n    termState.bytesReader.reset(termState.bytes, 0, len);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader#readTermsBlock(IndexInput,FieldInfo,BlockTermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader#readTermsBlock(IndexInput,FieldInfo,BlockTermState).mjava","sourceNew":"  /* Reads but does not decode the byte[] blob holding\n     metadata for the current terms block */\n  @Override\n  public void readTermsBlock(IndexInput termsIn, FieldInfo fieldInfo, BlockTermState _termState) throws IOException {\n    final StandardTermState termState = (StandardTermState) _termState;\n\n    final int len = termsIn.readVInt();\n\n    // if (DEBUG) System.out.println(\"  SPR.readTermsBlock bytes=\" + len + \" ts=\" + _termState);\n    if (termState.bytes == null) {\n      termState.bytes = new byte[ArrayUtil.oversize(len, 1)];\n      termState.bytesReader = new ByteArrayDataInput();\n    } else if (termState.bytes.length < len) {\n      termState.bytes = new byte[ArrayUtil.oversize(len, 1)];\n    }\n\n    termsIn.readBytes(termState.bytes, 0, len);\n    termState.bytesReader.reset(termState.bytes, 0, len);\n  }\n\n","sourceOld":"  /* Reads but does not decode the byte[] blob holding\n     metadata for the current terms block */\n  @Override\n  public void readTermsBlock(IndexInput termsIn, FieldInfo fieldInfo, BlockTermState _termState) throws IOException {\n    final StandardTermState termState = (StandardTermState) _termState;\n\n    final int len = termsIn.readVInt();\n\n    // if (DEBUG) System.out.println(\"  SPR.readTermsBlock bytes=\" + len + \" ts=\" + _termState);\n    if (termState.bytes == null) {\n      termState.bytes = new byte[ArrayUtil.oversize(len, 1)];\n      termState.bytesReader = new ByteArrayDataInput();\n    } else if (termState.bytes.length < len) {\n      termState.bytes = new byte[ArrayUtil.oversize(len, 1)];\n    }\n\n    termsIn.readBytes(termState.bytes, 0, len);\n    termState.bytesReader.reset(termState.bytes, 0, len);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}