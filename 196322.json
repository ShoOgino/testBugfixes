{"path":"lucene/test-framework/src/java/org/apache/lucene/util/ValidateNoStaticHooksShadowing#checkNoShadows(Class[#],List[List[Method]],Class[#-extends-Annotation]).mjava","commits":[{"id":"5da0b42730b6b99b31389ef94cb97384e83b9ede","date":1337107665,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/ValidateNoStaticHooksShadowing#checkNoShadows(Class[#],List[List[Method]],Class[#-extends-Annotation]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/NoStaticHooksShadowing#checkNoShadows(Class[#],List[List[Method]],Class[#-extends-Annotation]).mjava","sourceNew":"  private void checkNoShadows(Class<?> clazz, List<List<Method>> all, Class<? extends Annotation> ann) {\n    List<List<Method>> methodHierarchy = annotatedWith(all, ann);\n    List<List<Method>> noShadows = removeShadowed(methodHierarchy);\n    if (!noShadows.equals(methodHierarchy)) {\n      Set<Method> shadowed = new HashSet<Method>(flatten(methodHierarchy));\n      shadowed.removeAll(flatten(noShadows));\n\n      StringBuilder b = new StringBuilder();\n      for (Method m : shadowed) {\n        String sig = signature(m);\n        for (Method other : flatten(methodHierarchy)) {\n          if (other != m && sig.equals(signature(other))) {\n            b.append(\"Method: \" + m.toString()\n                + \"#\" + sig + \" possibly shadowed by \" + \n                other.toString() + \"#\" + signature(other) + \"\\n\");\n          }\n        }\n      }\n\n      throw new RuntimeException(\"There are shadowed methods annotated with \"\n          + ann.getName() + \". These methods would not be executed by JUnit and need to manually chain themselves which can lead to\" +\n              \" maintenance problems.\\n\" + b.toString().trim());\n    }\n  }\n\n","sourceOld":"  private void checkNoShadows(Class<?> clazz, List<List<Method>> all, Class<? extends Annotation> ann) {\n    List<List<Method>> methodHierarchy = annotatedWith(all, ann);\n    List<List<Method>> noShadows = removeShadowed(methodHierarchy);\n    if (!noShadows.equals(methodHierarchy)) {\n      Set<Method> shadowed = new HashSet<Method>(flatten(methodHierarchy));\n      shadowed.removeAll(flatten(noShadows));\n\n      StringBuilder b = new StringBuilder();\n      for (Method m : shadowed) {\n        String sig = signature(m);\n        for (Method other : flatten(methodHierarchy)) {\n          if (other != m && sig.equals(signature(other))) {\n            b.append(\"Method: \" + m.toString()\n                + \"#\" + sig + \" possibly shadowed by \" + \n                other.toString() + \"#\" + signature(other) + \"\\n\");\n          }\n        }\n      }\n\n      throw new RuntimeException(\"There are shadowed methods annotated with \"\n          + ann.getName() + \". These methods would not be executed by JUnit and need to manually chain themselves which can lead to\" +\n              \" maintenance problems.\\n\" + b.toString().trim());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b23c4ca9fc0fb3cbb48860e2c33a813c0e05b4db","date":1337118447,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleNoStaticHooksShadowing#checkNoShadows(Class[#],List[List[Method]],Class[#-extends-Annotation]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/ValidateNoStaticHooksShadowing#checkNoShadows(Class[#],List[List[Method]],Class[#-extends-Annotation]).mjava","sourceNew":"  private void checkNoShadows(Class<?> clazz, List<List<Method>> all, Class<? extends Annotation> ann) {\n    List<List<Method>> methodHierarchy = annotatedWith(all, ann);\n    List<List<Method>> noShadows = removeShadowed(methodHierarchy);\n    if (!noShadows.equals(methodHierarchy)) {\n      Set<Method> shadowed = new HashSet<Method>(flatten(methodHierarchy));\n      shadowed.removeAll(flatten(noShadows));\n\n      StringBuilder b = new StringBuilder();\n      for (Method m : shadowed) {\n        String sig = signature(m);\n        for (Method other : flatten(methodHierarchy)) {\n          if (other != m && sig.equals(signature(other))) {\n            b.append(\"Method: \" + m.toString()\n                + \"#\" + sig + \" possibly shadowed by \" + \n                other.toString() + \"#\" + signature(other) + \"\\n\");\n          }\n        }\n      }\n\n      throw new RuntimeException(\"There are shadowed methods annotated with \"\n          + ann.getName() + \". These methods would not be executed by JUnit and need to manually chain themselves which can lead to\" +\n              \" maintenance problems.\\n\" + b.toString().trim());\n    }\n  }\n\n","sourceOld":"  private void checkNoShadows(Class<?> clazz, List<List<Method>> all, Class<? extends Annotation> ann) {\n    List<List<Method>> methodHierarchy = annotatedWith(all, ann);\n    List<List<Method>> noShadows = removeShadowed(methodHierarchy);\n    if (!noShadows.equals(methodHierarchy)) {\n      Set<Method> shadowed = new HashSet<Method>(flatten(methodHierarchy));\n      shadowed.removeAll(flatten(noShadows));\n\n      StringBuilder b = new StringBuilder();\n      for (Method m : shadowed) {\n        String sig = signature(m);\n        for (Method other : flatten(methodHierarchy)) {\n          if (other != m && sig.equals(signature(other))) {\n            b.append(\"Method: \" + m.toString()\n                + \"#\" + sig + \" possibly shadowed by \" + \n                other.toString() + \"#\" + signature(other) + \"\\n\");\n          }\n        }\n      }\n\n      throw new RuntimeException(\"There are shadowed methods annotated with \"\n          + ann.getName() + \". These methods would not be executed by JUnit and need to manually chain themselves which can lead to\" +\n              \" maintenance problems.\\n\" + b.toString().trim());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b23c4ca9fc0fb3cbb48860e2c33a813c0e05b4db":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b23c4ca9fc0fb3cbb48860e2c33a813c0e05b4db"]},"commit2Childs":{"b23c4ca9fc0fb3cbb48860e2c33a813c0e05b4db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["b23c4ca9fc0fb3cbb48860e2c33a813c0e05b4db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}