{"path":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#freeBuffer(ByteBuffer).mjava","commits":[{"id":"4e5e734869d76c22acfc12bc53ecbfcc1606c2f5","date":1347072117,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#freeBuffer(ByteBuffer).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    protected void freeBuffer(ByteBuffer buffer) throws IOException {\n      cleanMapping(buffer);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["55d81732702acdcf369ac1e8077a9d11a2559f67"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55d81732702acdcf369ac1e8077a9d11a2559f67","date":1359801354,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#freeBuffer(ByteBuffer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#freeBuffer(ByteBuffer).mjava","sourceNew":"    /**\n     * Try to unmap the buffer, this method silently fails if no support\n     * for that in the JVM. On Windows, this leads to the fact,\n     * that mmapped files cannot be modified or deleted.\n     */\n    @Override\n    protected void freeBuffer(final ByteBuffer buffer) throws IOException {\n      if (useUnmapHack) {\n        try {\n          AccessController.doPrivileged(new PrivilegedExceptionAction<Void>() {\n            @Override\n            public Void run() throws Exception {\n              final Method getCleanerMethod = buffer.getClass()\n                .getMethod(\"cleaner\");\n              getCleanerMethod.setAccessible(true);\n              final Object cleaner = getCleanerMethod.invoke(buffer);\n              if (cleaner != null) {\n                cleaner.getClass().getMethod(\"clean\")\n                  .invoke(cleaner);\n              }\n              return null;\n            }\n          });\n        } catch (PrivilegedActionException e) {\n          final IOException ioe = new IOException(\"unable to unmap the mapped buffer\");\n          ioe.initCause(e.getCause());\n          throw ioe;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void freeBuffer(ByteBuffer buffer) throws IOException {\n      cleanMapping(buffer);\n    }\n\n","bugFix":["4e5e734869d76c22acfc12bc53ecbfcc1606c2f5"],"bugIntro":["eddb6e92036afdc160bbf50f071793a24ba8024e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"eb97a913498e2387924cb19fb8be9a95daf6f38a","date":1359823388,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#freeBuffer(ByteBuffer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#freeBuffer(ByteBuffer).mjava","sourceNew":"    /**\n     * Try to unmap the buffer, this method silently fails if no support\n     * for that in the JVM. On Windows, this leads to the fact,\n     * that mmapped files cannot be modified or deleted.\n     */\n    @Override\n    protected void freeBuffer(final ByteBuffer buffer) throws IOException {\n      if (useUnmapHack) {\n        try {\n          AccessController.doPrivileged(new PrivilegedExceptionAction<Void>() {\n            @Override\n            public Void run() throws Exception {\n              final Method getCleanerMethod = buffer.getClass()\n                .getMethod(\"cleaner\");\n              getCleanerMethod.setAccessible(true);\n              final Object cleaner = getCleanerMethod.invoke(buffer);\n              if (cleaner != null) {\n                cleaner.getClass().getMethod(\"clean\")\n                  .invoke(cleaner);\n              }\n              return null;\n            }\n          });\n        } catch (PrivilegedActionException e) {\n          final IOException ioe = new IOException(\"unable to unmap the mapped buffer\");\n          ioe.initCause(e.getCause());\n          throw ioe;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void freeBuffer(ByteBuffer buffer) throws IOException {\n      cleanMapping(buffer);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eddb6e92036afdc160bbf50f071793a24ba8024e","date":1400250278,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#freeBuffer(ByteBuffer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#freeBuffer(ByteBuffer).mjava","sourceNew":"    /**\n     * Try to unmap the buffer, this method silently fails if no support\n     * for that in the JVM. On Windows, this leads to the fact,\n     * that mmapped files cannot be modified or deleted.\n     */\n    @Override\n    protected void freeBuffer(final ByteBuffer buffer) throws IOException {\n      if (useUnmapHack) {\n        try {\n          AccessController.doPrivileged(new PrivilegedExceptionAction<Void>() {\n            @Override\n            public Void run() throws Exception {\n              final Method getCleanerMethod = buffer.getClass()\n                .getMethod(\"cleaner\");\n              getCleanerMethod.setAccessible(true);\n              final Object cleaner = getCleanerMethod.invoke(buffer);\n              if (cleaner != null) {\n                cleaner.getClass().getMethod(\"clean\")\n                  .invoke(cleaner);\n              }\n              return null;\n            }\n          });\n        } catch (PrivilegedActionException e) {\n          throw new IOException(\"Unable to unmap the mapped buffer: \" + toString(), e.getCause());\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Try to unmap the buffer, this method silently fails if no support\n     * for that in the JVM. On Windows, this leads to the fact,\n     * that mmapped files cannot be modified or deleted.\n     */\n    @Override\n    protected void freeBuffer(final ByteBuffer buffer) throws IOException {\n      if (useUnmapHack) {\n        try {\n          AccessController.doPrivileged(new PrivilegedExceptionAction<Void>() {\n            @Override\n            public Void run() throws Exception {\n              final Method getCleanerMethod = buffer.getClass()\n                .getMethod(\"cleaner\");\n              getCleanerMethod.setAccessible(true);\n              final Object cleaner = getCleanerMethod.invoke(buffer);\n              if (cleaner != null) {\n                cleaner.getClass().getMethod(\"clean\")\n                  .invoke(cleaner);\n              }\n              return null;\n            }\n          });\n        } catch (PrivilegedActionException e) {\n          final IOException ioe = new IOException(\"unable to unmap the mapped buffer\");\n          ioe.initCause(e.getCause());\n          throw ioe;\n        }\n      }\n    }\n\n","bugFix":["55d81732702acdcf369ac1e8077a9d11a2559f67"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ccc69a67d5c846a04c7f71e28cb1914e3af895f3","date":1400252660,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#freeBuffer(ByteBuffer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#freeBuffer(ByteBuffer).mjava","sourceNew":"    /**\n     * Try to unmap the buffer, this method silently fails if no support\n     * for that in the JVM. On Windows, this leads to the fact,\n     * that mmapped files cannot be modified or deleted.\n     */\n    @Override\n    protected void freeBuffer(final ByteBuffer buffer) throws IOException {\n      if (useUnmapHack) {\n        try {\n          AccessController.doPrivileged(new PrivilegedExceptionAction<Void>() {\n            @Override\n            public Void run() throws Exception {\n              final Method getCleanerMethod = buffer.getClass()\n                .getMethod(\"cleaner\");\n              getCleanerMethod.setAccessible(true);\n              final Object cleaner = getCleanerMethod.invoke(buffer);\n              if (cleaner != null) {\n                cleaner.getClass().getMethod(\"clean\")\n                  .invoke(cleaner);\n              }\n              return null;\n            }\n          });\n        } catch (PrivilegedActionException e) {\n          throw new IOException(\"Unable to unmap the mapped buffer: \" + toString(), e.getCause());\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Try to unmap the buffer, this method silently fails if no support\n     * for that in the JVM. On Windows, this leads to the fact,\n     * that mmapped files cannot be modified or deleted.\n     */\n    @Override\n    protected void freeBuffer(final ByteBuffer buffer) throws IOException {\n      if (useUnmapHack) {\n        try {\n          AccessController.doPrivileged(new PrivilegedExceptionAction<Void>() {\n            @Override\n            public Void run() throws Exception {\n              final Method getCleanerMethod = buffer.getClass()\n                .getMethod(\"cleaner\");\n              getCleanerMethod.setAccessible(true);\n              final Object cleaner = getCleanerMethod.invoke(buffer);\n              if (cleaner != null) {\n                cleaner.getClass().getMethod(\"clean\")\n                  .invoke(cleaner);\n              }\n              return null;\n            }\n          });\n        } catch (PrivilegedActionException e) {\n          final IOException ioe = new IOException(\"unable to unmap the mapped buffer\");\n          ioe.initCause(e.getCause());\n          throw ioe;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#freeBuffer(ByteBuffer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#freeBuffer(ByteBuffer).mjava","sourceNew":"    /**\n     * Try to unmap the buffer, this method silently fails if no support\n     * for that in the JVM. On Windows, this leads to the fact,\n     * that mmapped files cannot be modified or deleted.\n     */\n    @Override\n    protected void freeBuffer(final ByteBuffer buffer) throws IOException {\n      if (useUnmapHack) {\n        try {\n          AccessController.doPrivileged(new PrivilegedExceptionAction<Void>() {\n            @Override\n            public Void run() throws Exception {\n              final Method getCleanerMethod = buffer.getClass()\n                .getMethod(\"cleaner\");\n              getCleanerMethod.setAccessible(true);\n              final Object cleaner = getCleanerMethod.invoke(buffer);\n              if (cleaner != null) {\n                cleaner.getClass().getMethod(\"clean\")\n                  .invoke(cleaner);\n              }\n              return null;\n            }\n          });\n        } catch (PrivilegedActionException e) {\n          throw new IOException(\"Unable to unmap the mapped buffer: \" + toString(), e.getCause());\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Try to unmap the buffer, this method silently fails if no support\n     * for that in the JVM. On Windows, this leads to the fact,\n     * that mmapped files cannot be modified or deleted.\n     */\n    @Override\n    protected void freeBuffer(final ByteBuffer buffer) throws IOException {\n      if (useUnmapHack) {\n        try {\n          AccessController.doPrivileged(new PrivilegedExceptionAction<Void>() {\n            @Override\n            public Void run() throws Exception {\n              final Method getCleanerMethod = buffer.getClass()\n                .getMethod(\"cleaner\");\n              getCleanerMethod.setAccessible(true);\n              final Object cleaner = getCleanerMethod.invoke(buffer);\n              if (cleaner != null) {\n                cleaner.getClass().getMethod(\"clean\")\n                  .invoke(cleaner);\n              }\n              return null;\n            }\n          });\n        } catch (PrivilegedActionException e) {\n          final IOException ioe = new IOException(\"unable to unmap the mapped buffer\");\n          ioe.initCause(e.getCause());\n          throw ioe;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f986320666d675a260eb4529a0c3c40595731441","date":1401729997,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory.MMapIndexInput#freeBuffer(ByteBuffer).mjava","sourceNew":null,"sourceOld":"    /**\n     * Try to unmap the buffer, this method silently fails if no support\n     * for that in the JVM. On Windows, this leads to the fact,\n     * that mmapped files cannot be modified or deleted.\n     */\n    @Override\n    protected void freeBuffer(final ByteBuffer buffer) throws IOException {\n      if (useUnmapHack) {\n        try {\n          AccessController.doPrivileged(new PrivilegedExceptionAction<Void>() {\n            @Override\n            public Void run() throws Exception {\n              final Method getCleanerMethod = buffer.getClass()\n                .getMethod(\"cleaner\");\n              getCleanerMethod.setAccessible(true);\n              final Object cleaner = getCleanerMethod.invoke(buffer);\n              if (cleaner != null) {\n                cleaner.getClass().getMethod(\"clean\")\n                  .invoke(cleaner);\n              }\n              return null;\n            }\n          });\n        } catch (PrivilegedActionException e) {\n          throw new IOException(\"Unable to unmap the mapped buffer: \" + toString(), e.getCause());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4e5e734869d76c22acfc12bc53ecbfcc1606c2f5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"eb97a913498e2387924cb19fb8be9a95daf6f38a":["4e5e734869d76c22acfc12bc53ecbfcc1606c2f5","55d81732702acdcf369ac1e8077a9d11a2559f67"],"f986320666d675a260eb4529a0c3c40595731441":["eddb6e92036afdc160bbf50f071793a24ba8024e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"55d81732702acdcf369ac1e8077a9d11a2559f67":["4e5e734869d76c22acfc12bc53ecbfcc1606c2f5"],"56572ec06f1407c066d6b7399413178b33176cd8":["55d81732702acdcf369ac1e8077a9d11a2559f67","eddb6e92036afdc160bbf50f071793a24ba8024e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f986320666d675a260eb4529a0c3c40595731441"],"eddb6e92036afdc160bbf50f071793a24ba8024e":["55d81732702acdcf369ac1e8077a9d11a2559f67"],"ccc69a67d5c846a04c7f71e28cb1914e3af895f3":["55d81732702acdcf369ac1e8077a9d11a2559f67","eddb6e92036afdc160bbf50f071793a24ba8024e"]},"commit2Childs":{"4e5e734869d76c22acfc12bc53ecbfcc1606c2f5":["eb97a913498e2387924cb19fb8be9a95daf6f38a","55d81732702acdcf369ac1e8077a9d11a2559f67"],"eb97a913498e2387924cb19fb8be9a95daf6f38a":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4e5e734869d76c22acfc12bc53ecbfcc1606c2f5"],"f986320666d675a260eb4529a0c3c40595731441":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"55d81732702acdcf369ac1e8077a9d11a2559f67":["eb97a913498e2387924cb19fb8be9a95daf6f38a","56572ec06f1407c066d6b7399413178b33176cd8","eddb6e92036afdc160bbf50f071793a24ba8024e","ccc69a67d5c846a04c7f71e28cb1914e3af895f3"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"eddb6e92036afdc160bbf50f071793a24ba8024e":["f986320666d675a260eb4529a0c3c40595731441","56572ec06f1407c066d6b7399413178b33176cd8","ccc69a67d5c846a04c7f71e28cb1914e3af895f3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"ccc69a67d5c846a04c7f71e28cb1914e3af895f3":[]},"heads":["eb97a913498e2387924cb19fb8be9a95daf6f38a","56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817","ccc69a67d5c846a04c7f71e28cb1914e3af895f3"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}