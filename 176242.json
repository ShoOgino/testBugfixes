{"path":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriter#startDoc(int,int).mjava","commits":[{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriterImpl#startDoc(int,int).mjava","sourceNew":"  /** Adds a new doc in this term.  If this returns null\n   *  then we just skip consuming positions/payloads. */\n  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n\n    final int delta = docID - lastDocID;\n    //System.out.println(\"SEPW: startDoc: write doc=\" + docID + \" delta=\" + delta + \" out.fp=\" + docOut);\n\n    if (docID < 0 || (df > 0 && delta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" )\");\n    }\n\n    if ((++df % skipInterval) == 0) {\n      // TODO: -- awkward we have to make these two\n      // separate calls to skipper\n      //System.out.println(\"    buffer skip lastDocID=\" + lastDocID);\n      skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength);\n      skipListWriter.bufferSkip(df);\n    }\n\n    lastDocID = docID;\n    docOut.write(delta);\n    if (indexOptions != IndexOptions.DOCS_ONLY) {\n      //System.out.println(\"    sepw startDoc: write freq=\" + termDocFreq);\n      freqOut.write(termDocFreq);\n    }\n  }\n\n","sourceOld":"  /** Adds a new doc in this term.  If this returns null\n   *  then we just skip consuming positions/payloads. */\n  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n\n    final int delta = docID - lastDocID;\n    //System.out.println(\"SepW startDoc: write doc=\" + docID + \" delta=\" + delta);\n\n    if (docID < 0 || (df > 0 && delta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" )\");\n    }\n\n    if ((++df % skipInterval) == 0) {\n      // TODO: -- awkward we have to make these two\n      // separate calls to skipper\n      //System.out.println(\"    buffer skip lastDocID=\" + lastDocID);\n      skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength);\n      skipListWriter.bufferSkip(df);\n    }\n\n    lastDocID = docID;\n    docOut.write(delta);\n    if (indexOptions != IndexOptions.DOCS_ONLY) {\n      //System.out.println(\"    sepw startDoc: write freq=\" + termDocFreq);\n      freqOut.write(termDocFreq);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1efe3edca215dd9891cb42af283fed96f792ca0","date":1320428891,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriter#startDoc(int,int).mjava","sourceNew":"  /** Adds a new doc in this term.  If this returns null\n   *  then we just skip consuming positions/payloads. */\n  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n\n    final int delta = docID - lastDocID;\n    //System.out.println(\"SEPW: startDoc: write doc=\" + docID + \" delta=\" + delta + \" out.fp=\" + docOut);\n\n    if (docID < 0 || (df > 0 && delta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" ) (docOut: \" + docOut + \")\");\n    }\n\n    if ((++df % skipInterval) == 0) {\n      // TODO: -- awkward we have to make these two\n      // separate calls to skipper\n      //System.out.println(\"    buffer skip lastDocID=\" + lastDocID);\n      skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength);\n      skipListWriter.bufferSkip(df);\n    }\n\n    lastDocID = docID;\n    docOut.write(delta);\n    if (indexOptions != IndexOptions.DOCS_ONLY) {\n      //System.out.println(\"    sepw startDoc: write freq=\" + termDocFreq);\n      freqOut.write(termDocFreq);\n    }\n  }\n\n","sourceOld":"  /** Adds a new doc in this term.  If this returns null\n   *  then we just skip consuming positions/payloads. */\n  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n\n    final int delta = docID - lastDocID;\n    //System.out.println(\"SEPW: startDoc: write doc=\" + docID + \" delta=\" + delta + \" out.fp=\" + docOut);\n\n    if (docID < 0 || (df > 0 && delta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" )\");\n    }\n\n    if ((++df % skipInterval) == 0) {\n      // TODO: -- awkward we have to make these two\n      // separate calls to skipper\n      //System.out.println(\"    buffer skip lastDocID=\" + lastDocID);\n      skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength);\n      skipListWriter.bufferSkip(df);\n    }\n\n    lastDocID = docID;\n    docOut.write(delta);\n    if (indexOptions != IndexOptions.DOCS_ONLY) {\n      //System.out.println(\"    sepw startDoc: write freq=\" + termDocFreq);\n      freqOut.write(termDocFreq);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsWriter#startDoc(int,int).mjava","sourceNew":"  /** Adds a new doc in this term.  If this returns null\n   *  then we just skip consuming positions/payloads. */\n  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n\n    final int delta = docID - lastDocID;\n    //System.out.println(\"SEPW: startDoc: write doc=\" + docID + \" delta=\" + delta + \" out.fp=\" + docOut);\n\n    if (docID < 0 || (df > 0 && delta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" ) (docOut: \" + docOut + \")\");\n    }\n\n    if ((++df % skipInterval) == 0) {\n      // TODO: -- awkward we have to make these two\n      // separate calls to skipper\n      //System.out.println(\"    buffer skip lastDocID=\" + lastDocID);\n      skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength);\n      skipListWriter.bufferSkip(df);\n    }\n\n    lastDocID = docID;\n    docOut.write(delta);\n    if (indexOptions != IndexOptions.DOCS_ONLY) {\n      //System.out.println(\"    sepw startDoc: write freq=\" + termDocFreq);\n      freqOut.write(termDocFreq);\n    }\n  }\n\n","sourceOld":"  /** Adds a new doc in this term.  If this returns null\n   *  then we just skip consuming positions/payloads. */\n  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n\n    final int delta = docID - lastDocID;\n    //System.out.println(\"SEPW: startDoc: write doc=\" + docID + \" delta=\" + delta + \" out.fp=\" + docOut);\n\n    if (docID < 0 || (df > 0 && delta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" ) (docOut: \" + docOut + \")\");\n    }\n\n    if ((++df % skipInterval) == 0) {\n      // TODO: -- awkward we have to make these two\n      // separate calls to skipper\n      //System.out.println(\"    buffer skip lastDocID=\" + lastDocID);\n      skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength);\n      skipListWriter.bufferSkip(df);\n    }\n\n    lastDocID = docID;\n    docOut.write(delta);\n    if (indexOptions != IndexOptions.DOCS_ONLY) {\n      //System.out.println(\"    sepw startDoc: write freq=\" + termDocFreq);\n      freqOut.write(termDocFreq);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f1efe3edca215dd9891cb42af283fed96f792ca0":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["f1efe3edca215dd9891cb42af283fed96f792ca0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["f1efe3edca215dd9891cb42af283fed96f792ca0"],"f1efe3edca215dd9891cb42af283fed96f792ca0":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}