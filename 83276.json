{"path":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#finishDocument(TermsHash).mjava","commits":[{"id":"833a7987bc1c94455fde83e3311f72bddedcfb93","date":1279951470,"type":1,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#finishDocument(TermsHash).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#finishDocument(PerDoc).mjava","sourceNew":"  @Override\n  void finishDocument(TermsHash termsHash) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    initTermVectorsWriter();\n\n    fill(docState.docID);\n    \n    // Append term vectors to the real outputs:\n    tvx.writeLong(tvd.getFilePointer());\n    tvx.writeLong(tvf.getFilePointer());\n    tvd.writeVInt(numVectorFields);\n    if (numVectorFields > 0) {\n      for(int i=0;i<numVectorFields;i++) {\n        tvd.writeVInt(perFields[i].fieldInfo.number);\n      }\n      long lastPos = tvf.getFilePointer();\n      perFields[0].finishDocument();\n      for(int i=1;i<numVectorFields;i++) {\n        long pos = tvf.getFilePointer();\n        tvd.writeVLong(pos-lastPos);\n        lastPos = pos;\n        perFields[i].finishDocument();\n      }\n    }\n\n    assert lastDocID == docState.docID;\n\n    lastDocID++;\n\n    termsHash.reset();\n    reset();\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","sourceOld":"  void finishDocument(PerDoc perDoc) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    initTermVectorsWriter();\n\n    fill(perDoc.docID);\n\n    // Append term vectors to the real outputs:\n    tvx.writeLong(tvd.getFilePointer());\n    tvx.writeLong(tvf.getFilePointer());\n    tvd.writeVInt(perDoc.numVectorFields);\n    if (perDoc.numVectorFields > 0) {\n      for(int i=0;i<perDoc.numVectorFields;i++)\n        tvd.writeVInt(perDoc.fieldNumbers[i]);\n      assert 0 == perDoc.fieldPointers[0];\n      long lastPos = perDoc.fieldPointers[0];\n      for(int i=1;i<perDoc.numVectorFields;i++) {\n        long pos = perDoc.fieldPointers[i];\n        tvd.writeVLong(pos-lastPos);\n        lastPos = pos;\n      }\n      perDoc.perDocTvf.writeTo(tvf);\n      perDoc.numVectorFields = 0;\n    }\n\n    assert lastDocID == perDoc.docID + docWriter.getDocStoreOffset();\n\n    lastDocID++;\n\n    perDoc.reset();\n    free(perDoc);\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ef87af8c7bd0f8429622b83aa74202383f2e757","date":1280262785,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#finishDocument(TermsHash).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#finishDocument(TermsHash).mjava","sourceNew":"  @Override\n  void finishDocument(TermsHash termsHash) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    initTermVectorsWriter();\n\n    fill(docState.docID);\n    \n    // Append term vectors to the real outputs:\n    long pointer = tvd.getFilePointer();\n    tvx.writeLong(pointer);\n    tvx.writeLong(tvf.getFilePointer());\n    tvd.writeVInt(numVectorFields);\n    if (numVectorFields > 0) {\n      for(int i=0;i<numVectorFields;i++) {\n        tvd.writeVInt(perFields[i].fieldInfo.number);\n      }\n      long lastPos = tvf.getFilePointer();\n      perFields[0].finishDocument();\n      for(int i=1;i<numVectorFields;i++) {\n        long pos = tvf.getFilePointer();\n        tvd.writeVLong(pos-lastPos);\n        lastPos = pos;\n        perFields[i].finishDocument();\n      }\n    }\n\n    assert lastDocID == docState.docID;\n\n    lastDocID++;\n\n    termsHash.reset();\n    reset();\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","sourceOld":"  @Override\n  void finishDocument(TermsHash termsHash) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    initTermVectorsWriter();\n\n    fill(docState.docID);\n    \n    // Append term vectors to the real outputs:\n    tvx.writeLong(tvd.getFilePointer());\n    tvx.writeLong(tvf.getFilePointer());\n    tvd.writeVInt(numVectorFields);\n    if (numVectorFields > 0) {\n      for(int i=0;i<numVectorFields;i++) {\n        tvd.writeVInt(perFields[i].fieldInfo.number);\n      }\n      long lastPos = tvf.getFilePointer();\n      perFields[0].finishDocument();\n      for(int i=1;i<numVectorFields;i++) {\n        long pos = tvf.getFilePointer();\n        tvd.writeVLong(pos-lastPos);\n        lastPos = pos;\n        perFields[i].finishDocument();\n      }\n    }\n\n    assert lastDocID == docState.docID;\n\n    lastDocID++;\n\n    termsHash.reset();\n    reset();\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","bugFix":["833a7987bc1c94455fde83e3311f72bddedcfb93"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#finishDocument(TermsHash).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#finishDocument(TermsHash).mjava","sourceNew":"  @Override\n  void finishDocument(TermsHash termsHash) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    initTermVectorsWriter();\n\n    fill(docState.docID);\n\n    // Append term vectors to the real outputs:\n    long pointer = tvd.getFilePointer();\n    tvx.writeLong(pointer);\n    tvx.writeLong(tvf.getFilePointer());\n    tvd.writeVInt(numVectorFields);\n    if (numVectorFields > 0) {\n      for(int i=0;i<numVectorFields;i++) {\n        tvd.writeVInt(perFields[i].fieldInfo.number);\n      }\n      long lastPos = tvf.getFilePointer();\n      perFields[0].finishDocument();\n      for(int i=1;i<numVectorFields;i++) {\n        long pos = tvf.getFilePointer();\n        tvd.writeVLong(pos-lastPos);\n        lastPos = pos;\n        perFields[i].finishDocument();\n      }\n    }\n\n    assert lastDocID == docState.docID;\n\n    lastDocID++;\n\n    termsHash.reset();\n    reset();\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","sourceOld":"  @Override\n  void finishDocument(TermsHash termsHash) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    initTermVectorsWriter();\n\n    fill(docState.docID);\n    \n    // Append term vectors to the real outputs:\n    long pointer = tvd.getFilePointer();\n    tvx.writeLong(pointer);\n    tvx.writeLong(tvf.getFilePointer());\n    tvd.writeVInt(numVectorFields);\n    if (numVectorFields > 0) {\n      for(int i=0;i<numVectorFields;i++) {\n        tvd.writeVInt(perFields[i].fieldInfo.number);\n      }\n      long lastPos = tvf.getFilePointer();\n      perFields[0].finishDocument();\n      for(int i=1;i<numVectorFields;i++) {\n        long pos = tvf.getFilePointer();\n        tvd.writeVLong(pos-lastPos);\n        lastPos = pos;\n        perFields[i].finishDocument();\n      }\n    }\n\n    assert lastDocID == docState.docID;\n\n    lastDocID++;\n\n    termsHash.reset();\n    reset();\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3161e3ffcf20c09a22504a589d4d9bd273e11e33","date":1295142360,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#finishDocument(TermsHash).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#finishDocument(TermsHash).mjava","sourceNew":"  @Override\n  void finishDocument(TermsHash termsHash) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    if (numVectorFields == 0) {\n      return;\n    }\n\n    initTermVectorsWriter();\n\n    fill(docState.docID);\n\n    // Append term vectors to the real outputs:\n    long pointer = tvd.getFilePointer();\n    tvx.writeLong(pointer);\n    tvx.writeLong(tvf.getFilePointer());\n    tvd.writeVInt(numVectorFields);\n    if (numVectorFields > 0) {\n      for(int i=0;i<numVectorFields;i++) {\n        tvd.writeVInt(perFields[i].fieldInfo.number);\n      }\n      long lastPos = tvf.getFilePointer();\n      perFields[0].finishDocument();\n      for(int i=1;i<numVectorFields;i++) {\n        long pos = tvf.getFilePointer();\n        tvd.writeVLong(pos-lastPos);\n        lastPos = pos;\n        perFields[i].finishDocument();\n      }\n    }\n\n    assert lastDocID == docState.docID;\n\n    lastDocID++;\n\n    termsHash.reset();\n    reset();\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","sourceOld":"  @Override\n  void finishDocument(TermsHash termsHash) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    initTermVectorsWriter();\n\n    fill(docState.docID);\n\n    // Append term vectors to the real outputs:\n    long pointer = tvd.getFilePointer();\n    tvx.writeLong(pointer);\n    tvx.writeLong(tvf.getFilePointer());\n    tvd.writeVInt(numVectorFields);\n    if (numVectorFields > 0) {\n      for(int i=0;i<numVectorFields;i++) {\n        tvd.writeVInt(perFields[i].fieldInfo.number);\n      }\n      long lastPos = tvf.getFilePointer();\n      perFields[0].finishDocument();\n      for(int i=1;i<numVectorFields;i++) {\n        long pos = tvf.getFilePointer();\n        tvd.writeVLong(pos-lastPos);\n        lastPos = pos;\n        perFields[i].finishDocument();\n      }\n    }\n\n    assert lastDocID == docState.docID;\n\n    lastDocID++;\n\n    termsHash.reset();\n    reset();\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba55720b69e79b42960ddcde40c19fe27049f5ad","date":1298394897,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#finishDocument(TermsHash).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#finishDocument(TermsHash).mjava","sourceNew":"  @Override\n  void finishDocument(TermsHash termsHash) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    if (!hasVectors) {\n      return;\n    }\n\n    initTermVectorsWriter();\n\n    fill(docState.docID);\n\n    // Append term vectors to the real outputs:\n    long pointer = tvd.getFilePointer();\n    tvx.writeLong(pointer);\n    tvx.writeLong(tvf.getFilePointer());\n    tvd.writeVInt(numVectorFields);\n    if (numVectorFields > 0) {\n      for(int i=0;i<numVectorFields;i++) {\n        tvd.writeVInt(perFields[i].fieldInfo.number);\n      }\n      long lastPos = tvf.getFilePointer();\n      perFields[0].finishDocument();\n      for(int i=1;i<numVectorFields;i++) {\n        long pos = tvf.getFilePointer();\n        tvd.writeVLong(pos-lastPos);\n        lastPos = pos;\n        perFields[i].finishDocument();\n      }\n    }\n\n    assert lastDocID == docState.docID;\n\n    lastDocID++;\n\n    termsHash.reset();\n    reset();\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","sourceOld":"  @Override\n  void finishDocument(TermsHash termsHash) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    if (numVectorFields == 0) {\n      return;\n    }\n\n    initTermVectorsWriter();\n\n    fill(docState.docID);\n\n    // Append term vectors to the real outputs:\n    long pointer = tvd.getFilePointer();\n    tvx.writeLong(pointer);\n    tvx.writeLong(tvf.getFilePointer());\n    tvd.writeVInt(numVectorFields);\n    if (numVectorFields > 0) {\n      for(int i=0;i<numVectorFields;i++) {\n        tvd.writeVInt(perFields[i].fieldInfo.number);\n      }\n      long lastPos = tvf.getFilePointer();\n      perFields[0].finishDocument();\n      for(int i=1;i<numVectorFields;i++) {\n        long pos = tvf.getFilePointer();\n        tvd.writeVLong(pos-lastPos);\n        lastPos = pos;\n        perFields[i].finishDocument();\n      }\n    }\n\n    assert lastDocID == docState.docID;\n\n    lastDocID++;\n\n    termsHash.reset();\n    reset();\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#finishDocument(TermsHash).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#finishDocument(PerDoc).mjava","sourceNew":"  @Override\n  void finishDocument(TermsHash termsHash) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    if (!hasVectors) {\n      return;\n    }\n\n    initTermVectorsWriter();\n\n    fill(docState.docID);\n\n    // Append term vectors to the real outputs:\n    long pointer = tvd.getFilePointer();\n    tvx.writeLong(pointer);\n    tvx.writeLong(tvf.getFilePointer());\n    tvd.writeVInt(numVectorFields);\n    if (numVectorFields > 0) {\n      for(int i=0;i<numVectorFields;i++) {\n        tvd.writeVInt(perFields[i].fieldInfo.number);\n      }\n      long lastPos = tvf.getFilePointer();\n      perFields[0].finishDocument();\n      for(int i=1;i<numVectorFields;i++) {\n        long pos = tvf.getFilePointer();\n        tvd.writeVLong(pos-lastPos);\n        lastPos = pos;\n        perFields[i].finishDocument();\n      }\n    }\n\n    assert lastDocID == docState.docID;\n\n    lastDocID++;\n\n    termsHash.reset();\n    reset();\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","sourceOld":"  synchronized void finishDocument(PerDoc perDoc) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    initTermVectorsWriter();\n\n    fill(perDoc.docID);\n\n    // Append term vectors to the real outputs:\n    tvx.writeLong(tvd.getFilePointer());\n    tvx.writeLong(tvf.getFilePointer());\n    tvd.writeVInt(perDoc.numVectorFields);\n    if (perDoc.numVectorFields > 0) {\n      for(int i=0;i<perDoc.numVectorFields;i++) {\n        tvd.writeVInt(perDoc.fieldNumbers[i]);\n      }\n      assert 0 == perDoc.fieldPointers[0];\n      long lastPos = perDoc.fieldPointers[0];\n      for(int i=1;i<perDoc.numVectorFields;i++) {\n        long pos = perDoc.fieldPointers[i];\n        tvd.writeVLong(pos-lastPos);\n        lastPos = pos;\n      }\n      perDoc.perDocTvf.writeTo(tvf);\n      perDoc.numVectorFields = 0;\n    }\n\n    assert lastDocID == perDoc.docID;\n\n    lastDocID++;\n\n    perDoc.reset();\n    free(perDoc);\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#finishDocument(TermsHash).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  void finishDocument(TermsHash termsHash) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    if (!hasVectors) {\n      return;\n    }\n\n    initTermVectorsWriter();\n\n    fill(docState.docID);\n\n    // Append term vectors to the real outputs:\n    long pointer = tvd.getFilePointer();\n    tvx.writeLong(pointer);\n    tvx.writeLong(tvf.getFilePointer());\n    tvd.writeVInt(numVectorFields);\n    if (numVectorFields > 0) {\n      for(int i=0;i<numVectorFields;i++) {\n        tvd.writeVInt(perFields[i].fieldInfo.number);\n      }\n      long lastPos = tvf.getFilePointer();\n      perFields[0].finishDocument();\n      for(int i=1;i<numVectorFields;i++) {\n        long pos = tvf.getFilePointer();\n        tvd.writeVLong(pos-lastPos);\n        lastPos = pos;\n        perFields[i].finishDocument();\n      }\n    }\n\n    assert lastDocID == docState.docID;\n\n    lastDocID++;\n\n    termsHash.reset();\n    reset();\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fe2fc74577855eadfb5eae3153c2fffdaaf791","date":1305237079,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#finishDocument(TermsHash).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#finishDocument(TermsHash).mjava","sourceNew":"  @Override\n  void finishDocument(TermsHash termsHash) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    if (!hasVectors) {\n      return;\n    }\n\n    initTermVectorsWriter();\n\n    fill(docState.docID);\n\n    // Append term vectors to the real outputs:\n    tvx.writeLong(tvd.getFilePointer());\n    tvx.writeLong(tvf.getFilePointer());\n    tvd.writeVInt(numVectorFields);\n    if (numVectorFields > 0) {\n      for(int i=0;i<numVectorFields;i++) {\n        tvd.writeVInt(perFields[i].fieldInfo.number);\n      }\n      long lastPos = tvf.getFilePointer();\n      perFields[0].finishDocument();\n      for(int i=1;i<numVectorFields;i++) {\n        long pos = tvf.getFilePointer();\n        tvd.writeVLong(pos-lastPos);\n        lastPos = pos;\n        perFields[i].finishDocument();\n        // commit the termVectors once successful success - FI will otherwise reset them\n        perFields[i].fieldInfo.commitVectors();\n      }\n    }\n\n    assert lastDocID == docState.docID;\n\n    lastDocID++;\n\n    termsHash.reset();\n    reset();\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","sourceOld":"  @Override\n  void finishDocument(TermsHash termsHash) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    if (!hasVectors) {\n      return;\n    }\n\n    initTermVectorsWriter();\n\n    fill(docState.docID);\n\n    // Append term vectors to the real outputs:\n    long pointer = tvd.getFilePointer();\n    tvx.writeLong(pointer);\n    tvx.writeLong(tvf.getFilePointer());\n    tvd.writeVInt(numVectorFields);\n    if (numVectorFields > 0) {\n      for(int i=0;i<numVectorFields;i++) {\n        tvd.writeVInt(perFields[i].fieldInfo.number);\n      }\n      long lastPos = tvf.getFilePointer();\n      perFields[0].finishDocument();\n      for(int i=1;i<numVectorFields;i++) {\n        long pos = tvf.getFilePointer();\n        tvd.writeVLong(pos-lastPos);\n        lastPos = pos;\n        perFields[i].finishDocument();\n      }\n    }\n\n    assert lastDocID == docState.docID;\n\n    lastDocID++;\n\n    termsHash.reset();\n    reset();\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#finishDocument(TermsHash).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#finishDocument(TermsHash).mjava","sourceNew":"  @Override\n  void finishDocument(TermsHash termsHash) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    if (!hasVectors) {\n      return;\n    }\n\n    initTermVectorsWriter();\n\n    fill(docState.docID);\n\n    // Append term vectors to the real outputs:\n    tvx.writeLong(tvd.getFilePointer());\n    tvx.writeLong(tvf.getFilePointer());\n    tvd.writeVInt(numVectorFields);\n    if (numVectorFields > 0) {\n      for(int i=0;i<numVectorFields;i++) {\n        tvd.writeVInt(perFields[i].fieldInfo.number);\n      }\n      long lastPos = tvf.getFilePointer();\n      perFields[0].finishDocument();\n      for(int i=1;i<numVectorFields;i++) {\n        long pos = tvf.getFilePointer();\n        tvd.writeVLong(pos-lastPos);\n        lastPos = pos;\n        perFields[i].finishDocument();\n        // commit the termVectors once successful success - FI will otherwise reset them\n        perFields[i].fieldInfo.commitVectors();\n      }\n    }\n\n    assert lastDocID == docState.docID;\n\n    lastDocID++;\n\n    termsHash.reset();\n    reset();\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","sourceOld":"  @Override\n  void finishDocument(TermsHash termsHash) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    if (!hasVectors) {\n      return;\n    }\n\n    initTermVectorsWriter();\n\n    fill(docState.docID);\n\n    // Append term vectors to the real outputs:\n    long pointer = tvd.getFilePointer();\n    tvx.writeLong(pointer);\n    tvx.writeLong(tvf.getFilePointer());\n    tvd.writeVInt(numVectorFields);\n    if (numVectorFields > 0) {\n      for(int i=0;i<numVectorFields;i++) {\n        tvd.writeVInt(perFields[i].fieldInfo.number);\n      }\n      long lastPos = tvf.getFilePointer();\n      perFields[0].finishDocument();\n      for(int i=1;i<numVectorFields;i++) {\n        long pos = tvf.getFilePointer();\n        tvd.writeVLong(pos-lastPos);\n        lastPos = pos;\n        perFields[i].finishDocument();\n      }\n    }\n\n    assert lastDocID == docState.docID;\n\n    lastDocID++;\n\n    termsHash.reset();\n    reset();\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#finishDocument(TermsHash).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  void finishDocument(TermsHash termsHash) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    if (!hasVectors) {\n      return;\n    }\n\n    initTermVectorsWriter();\n\n    fill(docState.docID);\n\n    // Append term vectors to the real outputs:\n    tvx.writeLong(tvd.getFilePointer());\n    tvx.writeLong(tvf.getFilePointer());\n    tvd.writeVInt(numVectorFields);\n    if (numVectorFields > 0) {\n      for(int i=0;i<numVectorFields;i++) {\n        tvd.writeVInt(perFields[i].fieldInfo.number);\n      }\n      long lastPos = tvf.getFilePointer();\n      perFields[0].finishDocument();\n      for(int i=1;i<numVectorFields;i++) {\n        long pos = tvf.getFilePointer();\n        tvd.writeVLong(pos-lastPos);\n        lastPos = pos;\n        perFields[i].finishDocument();\n        // commit the termVectors once successful success - FI will otherwise reset them\n        perFields[i].fieldInfo.commitVectors();\n      }\n    }\n\n    assert lastDocID == docState.docID;\n\n    lastDocID++;\n\n    termsHash.reset();\n    reset();\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27","date":1306166545,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#finishDocument(TermsHash).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#finishDocument(TermsHash).mjava","sourceNew":"  @Override\n  void finishDocument(TermsHash termsHash) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    if (!hasVectors) {\n      return;\n    }\n\n    initTermVectorsWriter();\n\n    fill(docState.docID);\n\n    // Append term vectors to the real outputs:\n    tvx.writeLong(tvd.getFilePointer());\n    tvx.writeLong(tvf.getFilePointer());\n    tvd.writeVInt(numVectorFields);\n    if (numVectorFields > 0) {\n      for(int i=0;i<numVectorFields;i++) {\n        tvd.writeVInt(perFields[i].fieldInfo.number);\n      }\n      long lastPos = tvf.getFilePointer();\n      perFields[0].finishDocument();\n      for(int i=1;i<numVectorFields;i++) {\n        long pos = tvf.getFilePointer();\n        tvd.writeVLong(pos-lastPos);\n        lastPos = pos;\n        perFields[i].finishDocument();\n        // commit the termVectors once successful success - FI will otherwise reset them\n        perFields[i].fieldInfo.commitVectors();\n      }\n    }\n\n    assert lastDocID == docState.docID: \"lastDocID=\" + lastDocID + \" docState.docID=\" + docState.docID;\n\n    lastDocID++;\n\n    termsHash.reset();\n    reset();\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","sourceOld":"  @Override\n  void finishDocument(TermsHash termsHash) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    if (!hasVectors) {\n      return;\n    }\n\n    initTermVectorsWriter();\n\n    fill(docState.docID);\n\n    // Append term vectors to the real outputs:\n    tvx.writeLong(tvd.getFilePointer());\n    tvx.writeLong(tvf.getFilePointer());\n    tvd.writeVInt(numVectorFields);\n    if (numVectorFields > 0) {\n      for(int i=0;i<numVectorFields;i++) {\n        tvd.writeVInt(perFields[i].fieldInfo.number);\n      }\n      long lastPos = tvf.getFilePointer();\n      perFields[0].finishDocument();\n      for(int i=1;i<numVectorFields;i++) {\n        long pos = tvf.getFilePointer();\n        tvd.writeVLong(pos-lastPos);\n        lastPos = pos;\n        perFields[i].finishDocument();\n        // commit the termVectors once successful success - FI will otherwise reset them\n        perFields[i].fieldInfo.commitVectors();\n      }\n    }\n\n    assert lastDocID == docState.docID;\n\n    lastDocID++;\n\n    termsHash.reset();\n    reset();\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#finishDocument(TermsHash).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#finishDocument(TermsHash).mjava","sourceNew":"  @Override\n  void finishDocument(TermsHash termsHash) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    if (!hasVectors) {\n      return;\n    }\n\n    initTermVectorsWriter();\n\n    fill(docState.docID);\n\n    // Append term vectors to the real outputs:\n    tvx.writeLong(tvd.getFilePointer());\n    tvx.writeLong(tvf.getFilePointer());\n    tvd.writeVInt(numVectorFields);\n    if (numVectorFields > 0) {\n      for(int i=0;i<numVectorFields;i++) {\n        tvd.writeVInt(perFields[i].fieldInfo.number);\n      }\n      long lastPos = tvf.getFilePointer();\n      perFields[0].finishDocument();\n      for(int i=1;i<numVectorFields;i++) {\n        long pos = tvf.getFilePointer();\n        tvd.writeVLong(pos-lastPos);\n        lastPos = pos;\n        perFields[i].finishDocument();\n        // commit the termVectors once successful success - FI will otherwise reset them\n        perFields[i].fieldInfo.commitVectors();\n      }\n    }\n\n    assert lastDocID == docState.docID: \"lastDocID=\" + lastDocID + \" docState.docID=\" + docState.docID;\n\n    lastDocID++;\n\n    termsHash.reset();\n    reset();\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","sourceOld":"  @Override\n  void finishDocument(TermsHash termsHash) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    if (!hasVectors) {\n      return;\n    }\n\n    initTermVectorsWriter();\n\n    fill(docState.docID);\n\n    // Append term vectors to the real outputs:\n    tvx.writeLong(tvd.getFilePointer());\n    tvx.writeLong(tvf.getFilePointer());\n    tvd.writeVInt(numVectorFields);\n    if (numVectorFields > 0) {\n      for(int i=0;i<numVectorFields;i++) {\n        tvd.writeVInt(perFields[i].fieldInfo.number);\n      }\n      long lastPos = tvf.getFilePointer();\n      perFields[0].finishDocument();\n      for(int i=1;i<numVectorFields;i++) {\n        long pos = tvf.getFilePointer();\n        tvd.writeVLong(pos-lastPos);\n        lastPos = pos;\n        perFields[i].finishDocument();\n        // commit the termVectors once successful success - FI will otherwise reset them\n        perFields[i].fieldInfo.commitVectors();\n      }\n    }\n\n    assert lastDocID == docState.docID;\n\n    lastDocID++;\n\n    termsHash.reset();\n    reset();\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#finishDocument(TermsHash).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#finishDocument(TermsHash).mjava","sourceNew":"  @Override\n  void finishDocument(TermsHash termsHash) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    if (!hasVectors) {\n      return;\n    }\n\n    initTermVectorsWriter();\n\n    fill(docState.docID);\n\n    // Append term vectors to the real outputs:\n    tvx.writeLong(tvd.getFilePointer());\n    tvx.writeLong(tvf.getFilePointer());\n    tvd.writeVInt(numVectorFields);\n    if (numVectorFields > 0) {\n      for(int i=0;i<numVectorFields;i++) {\n        tvd.writeVInt(perFields[i].fieldInfo.number);\n      }\n      long lastPos = tvf.getFilePointer();\n      perFields[0].finishDocument();\n      for(int i=1;i<numVectorFields;i++) {\n        long pos = tvf.getFilePointer();\n        tvd.writeVLong(pos-lastPos);\n        lastPos = pos;\n        perFields[i].finishDocument();\n        // commit the termVectors once successful success - FI will otherwise reset them\n        perFields[i].fieldInfo.commitVectors();\n      }\n    }\n\n    assert lastDocID == docState.docID: \"lastDocID=\" + lastDocID + \" docState.docID=\" + docState.docID;\n\n    lastDocID++;\n\n    termsHash.reset();\n    reset();\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","sourceOld":"  @Override\n  void finishDocument(TermsHash termsHash) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    if (!hasVectors) {\n      return;\n    }\n\n    initTermVectorsWriter();\n\n    fill(docState.docID);\n\n    // Append term vectors to the real outputs:\n    tvx.writeLong(tvd.getFilePointer());\n    tvx.writeLong(tvf.getFilePointer());\n    tvd.writeVInt(numVectorFields);\n    if (numVectorFields > 0) {\n      for(int i=0;i<numVectorFields;i++) {\n        tvd.writeVInt(perFields[i].fieldInfo.number);\n      }\n      long lastPos = tvf.getFilePointer();\n      perFields[0].finishDocument();\n      for(int i=1;i<numVectorFields;i++) {\n        long pos = tvf.getFilePointer();\n        tvd.writeVLong(pos-lastPos);\n        lastPos = pos;\n        perFields[i].finishDocument();\n        // commit the termVectors once successful success - FI will otherwise reset them\n        perFields[i].fieldInfo.commitVectors();\n      }\n    }\n\n    assert lastDocID == docState.docID;\n\n    lastDocID++;\n\n    termsHash.reset();\n    reset();\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d09b7d4d1171dbafe9aa74ce954b0160be4e39d6","date":1320974223,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#finishDocument(TermsHash).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#finishDocument(TermsHash).mjava","sourceNew":"  @Override\n  void finishDocument(TermsHash termsHash) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    if (!hasVectors) {\n      return;\n    }\n\n    initTermVectorsWriter();\n\n    fill(docState.docID);\n\n    // Append term vectors to the real outputs:\n    tvx.writeLong(tvd.getFilePointer());\n    tvx.writeLong(tvf.getFilePointer());\n    tvd.writeVInt(numVectorFields);\n    if (numVectorFields > 0) {\n      for(int i=0;i<numVectorFields;i++) {\n        tvd.writeVInt(perFields[i].fieldInfo.number);\n      }\n      long lastPos = tvf.getFilePointer();\n      perFields[0].finishDocument();\n      perFields[0].fieldInfo.commitVectors();\n      for(int i=1;i<numVectorFields;i++) {\n        long pos = tvf.getFilePointer();\n        tvd.writeVLong(pos-lastPos);\n        lastPos = pos;\n        perFields[i].finishDocument();\n        // commit the termVectors once successful success - FI will otherwise reset them\n        perFields[i].fieldInfo.commitVectors();\n      }\n    }\n\n    assert lastDocID == docState.docID: \"lastDocID=\" + lastDocID + \" docState.docID=\" + docState.docID;\n\n    lastDocID++;\n\n    termsHash.reset();\n    reset();\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","sourceOld":"  @Override\n  void finishDocument(TermsHash termsHash) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    if (!hasVectors) {\n      return;\n    }\n\n    initTermVectorsWriter();\n\n    fill(docState.docID);\n\n    // Append term vectors to the real outputs:\n    tvx.writeLong(tvd.getFilePointer());\n    tvx.writeLong(tvf.getFilePointer());\n    tvd.writeVInt(numVectorFields);\n    if (numVectorFields > 0) {\n      for(int i=0;i<numVectorFields;i++) {\n        tvd.writeVInt(perFields[i].fieldInfo.number);\n      }\n      long lastPos = tvf.getFilePointer();\n      perFields[0].finishDocument();\n      for(int i=1;i<numVectorFields;i++) {\n        long pos = tvf.getFilePointer();\n        tvd.writeVLong(pos-lastPos);\n        lastPos = pos;\n        perFields[i].finishDocument();\n        // commit the termVectors once successful success - FI will otherwise reset them\n        perFields[i].fieldInfo.commitVectors();\n      }\n    }\n\n    assert lastDocID == docState.docID: \"lastDocID=\" + lastDocID + \" docState.docID=\" + docState.docID;\n\n    lastDocID++;\n\n    termsHash.reset();\n    reset();\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsConsumer#finishDocument(TermsHash).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#finishDocument(TermsHash).mjava","sourceNew":"  @Override\n  void finishDocument(TermsHash termsHash) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    if (!hasVectors) {\n      return;\n    }\n\n    initTermVectorsWriter();\n\n    fill(docState.docID);\n\n    // Append term vectors to the real outputs:\n    writer.startDocument(numVectorFields);\n    for (int i = 0; i < numVectorFields; i++) {\n      perFields[i].finishDocument();\n    }\n\n    assert lastDocID == docState.docID: \"lastDocID=\" + lastDocID + \" docState.docID=\" + docState.docID;\n\n    lastDocID++;\n\n    termsHash.reset();\n    reset();\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","sourceOld":"  @Override\n  void finishDocument(TermsHash termsHash) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    if (!hasVectors) {\n      return;\n    }\n\n    initTermVectorsWriter();\n\n    fill(docState.docID);\n\n    // Append term vectors to the real outputs:\n    tvx.writeLong(tvd.getFilePointer());\n    tvx.writeLong(tvf.getFilePointer());\n    tvd.writeVInt(numVectorFields);\n    if (numVectorFields > 0) {\n      for(int i=0;i<numVectorFields;i++) {\n        tvd.writeVInt(perFields[i].fieldInfo.number);\n      }\n      long lastPos = tvf.getFilePointer();\n      perFields[0].finishDocument();\n      perFields[0].fieldInfo.commitVectors();\n      for(int i=1;i<numVectorFields;i++) {\n        long pos = tvf.getFilePointer();\n        tvd.writeVLong(pos-lastPos);\n        lastPos = pos;\n        perFields[i].finishDocument();\n        // commit the termVectors once successful success - FI will otherwise reset them\n        perFields[i].fieldInfo.commitVectors();\n      }\n    }\n\n    assert lastDocID == docState.docID: \"lastDocID=\" + lastDocID + \" docState.docID=\" + docState.docID;\n\n    lastDocID++;\n\n    termsHash.reset();\n    reset();\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fe2fc74577855eadfb5eae3153c2fffdaaf791":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"3cc749c053615f5871f3b95715fe292f34e70a53":["d09b7d4d1171dbafe9aa74ce954b0160be4e39d6"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ba55720b69e79b42960ddcde40c19fe27049f5ad"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5ef87af8c7bd0f8429622b83aa74202383f2e757","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d09b7d4d1171dbafe9aa74ce954b0160be4e39d6":["2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27"],"2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27":["d3fe2fc74577855eadfb5eae3153c2fffdaaf791"],"3161e3ffcf20c09a22504a589d4d9bd273e11e33":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d3fe2fc74577855eadfb5eae3153c2fffdaaf791"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5ef87af8c7bd0f8429622b83aa74202383f2e757":["833a7987bc1c94455fde83e3311f72bddedcfb93"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["135621f3a0670a9394eb563224a3b76cc4dddc0f","d3fe2fc74577855eadfb5eae3153c2fffdaaf791"],"ba55720b69e79b42960ddcde40c19fe27049f5ad":["3161e3ffcf20c09a22504a589d4d9bd273e11e33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc749c053615f5871f3b95715fe292f34e70a53"],"833a7987bc1c94455fde83e3311f72bddedcfb93":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb","2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27"]},"commit2Childs":{"d3fe2fc74577855eadfb5eae3153c2fffdaaf791":["2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["d3fe2fc74577855eadfb5eae3153c2fffdaaf791","135621f3a0670a9394eb563224a3b76cc4dddc0f"],"3cc749c053615f5871f3b95715fe292f34e70a53":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3161e3ffcf20c09a22504a589d4d9bd273e11e33"],"d09b7d4d1171dbafe9aa74ce954b0160be4e39d6":["3cc749c053615f5871f3b95715fe292f34e70a53"],"2c6dc1a64ac36088ccb8d5e20b74c48c8d3bba27":["d09b7d4d1171dbafe9aa74ce954b0160be4e39d6","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"3161e3ffcf20c09a22504a589d4d9bd273e11e33":["ba55720b69e79b42960ddcde40c19fe27049f5ad"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a3776dccca01c11e7046323cfad46a3b4a471233","833a7987bc1c94455fde83e3311f72bddedcfb93"],"5ef87af8c7bd0f8429622b83aa74202383f2e757":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"ba55720b69e79b42960ddcde40c19fe27049f5ad":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"833a7987bc1c94455fde83e3311f72bddedcfb93":["5ef87af8c7bd0f8429622b83aa74202383f2e757"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}