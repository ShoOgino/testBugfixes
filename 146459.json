{"path":"lucene/contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/SpanNearBuilder#getSpanQuery(Element).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/SpanNearBuilder#getSpanQuery(Element).mjava","pathOld":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/SpanNearBuilder#getSpanQuery(Element).mjava","sourceNew":"\tpublic SpanQuery getSpanQuery(Element e) throws ParserException\n\t{\n \t\tString slopString=DOMUtils.getAttributeOrFail(e,\"slop\");\n  \t\tint slop=Integer.parseInt(slopString);\n\t\tboolean inOrder=DOMUtils.getAttribute(e,\"inOrder\",false);\n\t\tArrayList<SpanQuery> spans=new ArrayList<SpanQuery>();\n\t\tfor (Node kid = e.getFirstChild(); kid != null; kid = kid.getNextSibling())\n\t\t{\n\t\t\t\tif (kid.getNodeType() == Node.ELEMENT_NODE) \n\t\t\t\t{\n\t\t\t\t\tspans.add(factory.getSpanQuery((Element) kid));\n\t\t\t\t}\n\t\t}\n\t\tSpanQuery[] spanQueries= spans.toArray(new SpanQuery[spans.size()]);\n\t\tSpanNearQuery snq=new SpanNearQuery(spanQueries,slop,inOrder);\n\t\treturn snq;\n\t}\n\n","sourceOld":"\tpublic SpanQuery getSpanQuery(Element e) throws ParserException\n\t{\n \t\tString slopString=DOMUtils.getAttributeOrFail(e,\"slop\");\n  \t\tint slop=Integer.parseInt(slopString);\n\t\tboolean inOrder=DOMUtils.getAttribute(e,\"inOrder\",false);\n\t\tArrayList<SpanQuery> spans=new ArrayList<SpanQuery>();\n\t\tfor (Node kid = e.getFirstChild(); kid != null; kid = kid.getNextSibling())\n\t\t{\n\t\t\t\tif (kid.getNodeType() == Node.ELEMENT_NODE) \n\t\t\t\t{\n\t\t\t\t\tspans.add(factory.getSpanQuery((Element) kid));\n\t\t\t\t}\n\t\t}\n\t\tSpanQuery[] spanQueries= spans.toArray(new SpanQuery[spans.size()]);\n\t\tSpanNearQuery snq=new SpanNearQuery(spanQueries,slop,inOrder);\n\t\treturn snq;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2","date":1313460667,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/SpanNearBuilder#getSpanQuery(Element).mjava","pathOld":"lucene/contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/SpanNearBuilder#getSpanQuery(Element).mjava","sourceNew":"  public SpanQuery getSpanQuery(Element e) throws ParserException {\n    String slopString = DOMUtils.getAttributeOrFail(e, \"slop\");\n    int slop = Integer.parseInt(slopString);\n    boolean inOrder = DOMUtils.getAttribute(e, \"inOrder\", false);\n    List<SpanQuery> spans = new ArrayList<SpanQuery>();\n    for (Node kid = e.getFirstChild(); kid != null; kid = kid.getNextSibling()) {\n      if (kid.getNodeType() == Node.ELEMENT_NODE) {\n        spans.add(factory.getSpanQuery((Element) kid));\n      }\n    }\n    SpanQuery[] spanQueries = spans.toArray(new SpanQuery[spans.size()]);\n    return new SpanNearQuery(spanQueries, slop, inOrder);\n  }\n\n","sourceOld":"\tpublic SpanQuery getSpanQuery(Element e) throws ParserException\n\t{\n \t\tString slopString=DOMUtils.getAttributeOrFail(e,\"slop\");\n  \t\tint slop=Integer.parseInt(slopString);\n\t\tboolean inOrder=DOMUtils.getAttribute(e,\"inOrder\",false);\n\t\tArrayList<SpanQuery> spans=new ArrayList<SpanQuery>();\n\t\tfor (Node kid = e.getFirstChild(); kid != null; kid = kid.getNextSibling())\n\t\t{\n\t\t\t\tif (kid.getNodeType() == Node.ELEMENT_NODE) \n\t\t\t\t{\n\t\t\t\t\tspans.add(factory.getSpanQuery((Element) kid));\n\t\t\t\t}\n\t\t}\n\t\tSpanQuery[] spanQueries= spans.toArray(new SpanQuery[spans.size()]);\n\t\tSpanNearQuery snq=new SpanNearQuery(spanQueries,slop,inOrder);\n\t\treturn snq;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"251550f5d19b526a76f8c5126ae7bb2d22cf8935","date":1315202008,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanNearBuilder#getSpanQuery(Element).mjava","pathOld":"lucene/contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/builders/SpanNearBuilder#getSpanQuery(Element).mjava","sourceNew":"  public SpanQuery getSpanQuery(Element e) throws ParserException {\n    String slopString = DOMUtils.getAttributeOrFail(e, \"slop\");\n    int slop = Integer.parseInt(slopString);\n    boolean inOrder = DOMUtils.getAttribute(e, \"inOrder\", false);\n    List<SpanQuery> spans = new ArrayList<SpanQuery>();\n    for (Node kid = e.getFirstChild(); kid != null; kid = kid.getNextSibling()) {\n      if (kid.getNodeType() == Node.ELEMENT_NODE) {\n        spans.add(factory.getSpanQuery((Element) kid));\n      }\n    }\n    SpanQuery[] spanQueries = spans.toArray(new SpanQuery[spans.size()]);\n    return new SpanNearQuery(spanQueries, slop, inOrder);\n  }\n\n","sourceOld":"  public SpanQuery getSpanQuery(Element e) throws ParserException {\n    String slopString = DOMUtils.getAttributeOrFail(e, \"slop\");\n    int slop = Integer.parseInt(slopString);\n    boolean inOrder = DOMUtils.getAttribute(e, \"inOrder\", false);\n    List<SpanQuery> spans = new ArrayList<SpanQuery>();\n    for (Node kid = e.getFirstChild(); kid != null; kid = kid.getNextSibling()) {\n      if (kid.getNodeType() == Node.ELEMENT_NODE) {\n        spans.add(factory.getSpanQuery((Element) kid));\n      }\n    }\n    SpanQuery[] spanQueries = spans.toArray(new SpanQuery[spans.size()]);\n    return new SpanNearQuery(spanQueries, slop, inOrder);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"251550f5d19b526a76f8c5126ae7bb2d22cf8935":["b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["251550f5d19b526a76f8c5126ae7bb2d22cf8935"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2":["251550f5d19b526a76f8c5126ae7bb2d22cf8935"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"251550f5d19b526a76f8c5126ae7bb2d22cf8935":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}