{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanAction#getSuggester(Policy.Session,TriggerEvent,ZkStateReader).mjava","commits":[{"id":"47a99fe8ee3f74e8da2ece1bddbc059d1e1beffa","date":1498706808,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanAction#getSuggester(Policy.Session,TriggerEvent,ZkStateReader).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected Policy.Suggester getSuggester(Policy.Session session, TriggerEvent event, ZkStateReader zkStateReader) {\n    Policy.Suggester suggester = super.getSuggester(session, event, zkStateReader);\n    if (autoAddReplicasCollections == null) {\n      autoAddReplicasCollections = new HashSet<>();\n\n      ClusterState clusterState = zkStateReader.getClusterState();\n      for (DocCollection collection: clusterState.getCollectionsMap().values()) {\n        if (collection.getAutoAddReplicas()) {\n          autoAddReplicasCollections.add(collection.getName());\n        }\n      }\n    }\n\n    for (String collection : autoAddReplicasCollections) {\n      suggester.hint(Policy.Suggester.Hint.COLL, collection);\n    }\n\n    return suggester;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"717e5ceb2acae36d422ec75e5a4ce9fac40506e1","date":1501239603,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanAction#getSuggester(Policy.Session,TriggerEvent,ZkStateReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanAction#getSuggester(Policy.Session,TriggerEvent,ZkStateReader).mjava","sourceNew":"  @Override\n  protected Policy.Suggester getSuggester(Policy.Session session, TriggerEvent event, ZkStateReader zkStateReader) {\n    // for backward compatibility\n    String autoAddReplicas = zkStateReader.getClusterProperty(ZkStateReader.AUTO_ADD_REPLICAS, (String) null);\n    if (autoAddReplicas != null && autoAddReplicas.equals(\"false\")) {\n      return new NoneSuggester();\n    }\n\n    Policy.Suggester suggester = super.getSuggester(session, event, zkStateReader);\n    ClusterState clusterState = zkStateReader.getClusterState();\n\n    boolean anyCollections = false;\n    for (DocCollection collection: clusterState.getCollectionsMap().values()) {\n      if (collection.getAutoAddReplicas()) {\n        anyCollections = true;\n        suggester.hint(Policy.Suggester.Hint.COLL, collection.getName());\n      }\n    }\n\n    if (!anyCollections) return new NoneSuggester();\n    return suggester;\n  }\n\n","sourceOld":"  @Override\n  protected Policy.Suggester getSuggester(Policy.Session session, TriggerEvent event, ZkStateReader zkStateReader) {\n    Policy.Suggester suggester = super.getSuggester(session, event, zkStateReader);\n    if (autoAddReplicasCollections == null) {\n      autoAddReplicasCollections = new HashSet<>();\n\n      ClusterState clusterState = zkStateReader.getClusterState();\n      for (DocCollection collection: clusterState.getCollectionsMap().values()) {\n        if (collection.getAutoAddReplicas()) {\n          autoAddReplicasCollections.add(collection.getName());\n        }\n      }\n    }\n\n    for (String collection : autoAddReplicasCollections) {\n      suggester.hint(Policy.Suggester.Hint.COLL, collection);\n    }\n\n    return suggester;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanAction#getSuggester(Policy.Session,TriggerEvent,ClusterDataProvider).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanAction#getSuggester(Policy.Session,TriggerEvent,ZkStateReader).mjava","sourceNew":"  @Override\n  protected Policy.Suggester getSuggester(Policy.Session session, TriggerEvent event, ClusterDataProvider cdp) {\n    // for backward compatibility\n    String autoAddReplicas = cdp.getClusterProperty(ZkStateReader.AUTO_ADD_REPLICAS, (String) null);\n    if (autoAddReplicas != null && autoAddReplicas.equals(\"false\")) {\n      return new NoneSuggester();\n    }\n\n    Policy.Suggester suggester = super.getSuggester(session, event, cdp);\n    ClusterState clusterState;\n    try {\n      clusterState = cdp.getClusterState();\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception getting cluster state\", e);\n    }\n\n    boolean anyCollections = false;\n    for (DocCollection collection: clusterState.getCollectionsMap().values()) {\n      if (collection.getAutoAddReplicas()) {\n        anyCollections = true;\n        suggester.hint(Policy.Suggester.Hint.COLL, collection.getName());\n      }\n    }\n\n    if (!anyCollections) return new NoneSuggester();\n    return suggester;\n  }\n\n","sourceOld":"  @Override\n  protected Policy.Suggester getSuggester(Policy.Session session, TriggerEvent event, ZkStateReader zkStateReader) {\n    // for backward compatibility\n    String autoAddReplicas = zkStateReader.getClusterProperty(ZkStateReader.AUTO_ADD_REPLICAS, (String) null);\n    if (autoAddReplicas != null && autoAddReplicas.equals(\"false\")) {\n      return new NoneSuggester();\n    }\n\n    Policy.Suggester suggester = super.getSuggester(session, event, zkStateReader);\n    ClusterState clusterState = zkStateReader.getClusterState();\n\n    boolean anyCollections = false;\n    for (DocCollection collection: clusterState.getCollectionsMap().values()) {\n      if (collection.getAutoAddReplicas()) {\n        anyCollections = true;\n        suggester.hint(Policy.Suggester.Hint.COLL, collection.getName());\n      }\n    }\n\n    if (!anyCollections) return new NoneSuggester();\n    return suggester;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanAction#getSuggester(Policy.Session,TriggerEvent,ZkStateReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanAction#getSuggester(Policy.Session,TriggerEvent,ClusterDataProvider).mjava","sourceNew":"  @Override\n  protected Policy.Suggester getSuggester(Policy.Session session, TriggerEvent event, ZkStateReader zkStateReader) {\n    // for backward compatibility\n    String autoAddReplicas = zkStateReader.getClusterProperty(ZkStateReader.AUTO_ADD_REPLICAS, (String) null);\n    if (autoAddReplicas != null && autoAddReplicas.equals(\"false\")) {\n      return new NoneSuggester();\n    }\n\n    Policy.Suggester suggester = super.getSuggester(session, event, zkStateReader);\n    ClusterState clusterState = zkStateReader.getClusterState();\n\n    boolean anyCollections = false;\n    for (DocCollection collection: clusterState.getCollectionsMap().values()) {\n      if (collection.getAutoAddReplicas()) {\n        anyCollections = true;\n        suggester.hint(Policy.Suggester.Hint.COLL, collection.getName());\n      }\n    }\n\n    if (!anyCollections) return new NoneSuggester();\n    return suggester;\n  }\n\n","sourceOld":"  @Override\n  protected Policy.Suggester getSuggester(Policy.Session session, TriggerEvent event, ClusterDataProvider cdp) {\n    // for backward compatibility\n    String autoAddReplicas = cdp.getClusterProperty(ZkStateReader.AUTO_ADD_REPLICAS, (String) null);\n    if (autoAddReplicas != null && autoAddReplicas.equals(\"false\")) {\n      return new NoneSuggester();\n    }\n\n    Policy.Suggester suggester = super.getSuggester(session, event, cdp);\n    ClusterState clusterState;\n    try {\n      clusterState = cdp.getClusterState();\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception getting cluster state\", e);\n    }\n\n    boolean anyCollections = false;\n    for (DocCollection collection: clusterState.getCollectionsMap().values()) {\n      if (collection.getAutoAddReplicas()) {\n        anyCollections = true;\n        suggester.hint(Policy.Suggester.Hint.COLL, collection.getName());\n      }\n    }\n\n    if (!anyCollections) return new NoneSuggester();\n    return suggester;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanAction#getSuggester(Policy.Session,TriggerEvent,ZkStateReader).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected Policy.Suggester getSuggester(Policy.Session session, TriggerEvent event, ZkStateReader zkStateReader) {\n    // for backward compatibility\n    String autoAddReplicas = zkStateReader.getClusterProperty(ZkStateReader.AUTO_ADD_REPLICAS, (String) null);\n    if (autoAddReplicas != null && autoAddReplicas.equals(\"false\")) {\n      return new NoneSuggester();\n    }\n\n    Policy.Suggester suggester = super.getSuggester(session, event, zkStateReader);\n    ClusterState clusterState = zkStateReader.getClusterState();\n\n    boolean anyCollections = false;\n    for (DocCollection collection: clusterState.getCollectionsMap().values()) {\n      if (collection.getAutoAddReplicas()) {\n        anyCollections = true;\n        suggester.hint(Policy.Suggester.Hint.COLL, collection.getName());\n      }\n    }\n\n    if (!anyCollections) return new NoneSuggester();\n    return suggester;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanAction#getSuggester(Policy.Session,TriggerEvent,ZkStateReader).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected Policy.Suggester getSuggester(Policy.Session session, TriggerEvent event, ZkStateReader zkStateReader) {\n    // for backward compatibility\n    String autoAddReplicas = zkStateReader.getClusterProperty(ZkStateReader.AUTO_ADD_REPLICAS, (String) null);\n    if (autoAddReplicas != null && autoAddReplicas.equals(\"false\")) {\n      return new NoneSuggester();\n    }\n\n    Policy.Suggester suggester = super.getSuggester(session, event, zkStateReader);\n    ClusterState clusterState = zkStateReader.getClusterState();\n\n    boolean anyCollections = false;\n    for (DocCollection collection: clusterState.getCollectionsMap().values()) {\n      if (collection.getAutoAddReplicas()) {\n        anyCollections = true;\n        suggester.hint(Policy.Suggester.Hint.COLL, collection.getName());\n      }\n    }\n\n    if (!anyCollections) return new NoneSuggester();\n    return suggester;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanAction#getSuggester(Policy.Session,TriggerEvent,SolrCloudManager).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanAction#getSuggester(Policy.Session,TriggerEvent,ZkStateReader).mjava","sourceNew":"  @Override\n  protected Policy.Suggester getSuggester(Policy.Session session, TriggerEvent event, SolrCloudManager cloudManager) {\n    // for backward compatibility\n    ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n    String autoAddReplicas = stateProvider.getClusterProperty(ZkStateReader.AUTO_ADD_REPLICAS, (String) null);\n    if (autoAddReplicas != null && autoAddReplicas.equals(\"false\")) {\n      return new NoneSuggester();\n    }\n\n    Policy.Suggester suggester = super.getSuggester(session, event, cloudManager);\n    ClusterState clusterState;\n    try {\n      clusterState = stateProvider.getClusterState();\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception getting cluster state\", e);\n    }\n\n    boolean anyCollections = false;\n    for (DocCollection collection: clusterState.getCollectionsMap().values()) {\n      if (collection.getAutoAddReplicas()) {\n        anyCollections = true;\n        suggester.hint(Policy.Suggester.Hint.COLL, collection.getName());\n      }\n    }\n\n    if (!anyCollections) return new NoneSuggester();\n    return suggester;\n  }\n\n","sourceOld":"  @Override\n  protected Policy.Suggester getSuggester(Policy.Session session, TriggerEvent event, ZkStateReader zkStateReader) {\n    // for backward compatibility\n    String autoAddReplicas = zkStateReader.getClusterProperty(ZkStateReader.AUTO_ADD_REPLICAS, (String) null);\n    if (autoAddReplicas != null && autoAddReplicas.equals(\"false\")) {\n      return new NoneSuggester();\n    }\n\n    Policy.Suggester suggester = super.getSuggester(session, event, zkStateReader);\n    ClusterState clusterState = zkStateReader.getClusterState();\n\n    boolean anyCollections = false;\n    for (DocCollection collection: clusterState.getCollectionsMap().values()) {\n      if (collection.getAutoAddReplicas()) {\n        anyCollections = true;\n        suggester.hint(Policy.Suggester.Hint.COLL, collection.getName());\n      }\n    }\n\n    if (!anyCollections) return new NoneSuggester();\n    return suggester;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b869898f50ca80263bac2e3ae0949f7700e5c977"],"717e5ceb2acae36d422ec75e5a4ce9fac40506e1":["47a99fe8ee3f74e8da2ece1bddbc059d1e1beffa"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["717e5ceb2acae36d422ec75e5a4ce9fac40506e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["560c18d71dad43d675158783c3840f8c80d6d39c"],"47a99fe8ee3f74e8da2ece1bddbc059d1e1beffa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"717e5ceb2acae36d422ec75e5a4ce9fac40506e1":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","47a99fe8ee3f74e8da2ece1bddbc059d1e1beffa","560c18d71dad43d675158783c3840f8c80d6d39c"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"47a99fe8ee3f74e8da2ece1bddbc059d1e1beffa":["717e5ceb2acae36d422ec75e5a4ce9fac40506e1"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"560c18d71dad43d675158783c3840f8c80d6d39c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}