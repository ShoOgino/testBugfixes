{"path":"lucene/core/src/test/org/apache/lucene/geo/TestTessellator#isEdgeFromPolygon(Polygon,double,double,double,double).mjava","commits":[{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestTessellator#isEdgeFromPolygon(Polygon,double,double,double,double).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/geo/TestTessellator#isEdgeFromPolygon(Polygon,double,double,double,double).mjava","sourceNew":"  private boolean isEdgeFromPolygon(Polygon p, double aLon, double aLat, double bLon, double bLat) {\n    for (int i = 0; i < p.getPolyLats().length - 1; i++) {\n      if (isPointInLine(p.getPolyLon(i), p.getPolyLat(i), p.getPolyLon(i + 1), p.getPolyLat(i + 1), aLon, aLat) &&\n          isPointInLine(p.getPolyLon(i), p.getPolyLat(i), p.getPolyLon(i + 1), p.getPolyLat(i + 1), bLon, bLat)) {\n        return true;\n      }\n      if (p.getPolyLon(i) != p.getPolyLon(i + 1) || p.getPolyLat(i) != p.getPolyLat(i + 1)) {\n        //Check for co-planar points\n        final int length = p.getPolyLats().length;\n        final int offset = i + 2;\n        int j = 0;\n        int index = getIndex(length, j + offset);\n        while (j < length  && area(p.getPolyLon(i), p.getPolyLat(i), p.getPolyLon(i + 1), p.getPolyLat(i + 1), p.getPolyLon(index), p.getPolyLat(index)) == 0) {\n          if (isPointInLine(p.getPolyLon(i), p.getPolyLat(i), p.getPolyLon(index), p.getPolyLat(index), aLon, aLat) &&\n              isPointInLine(p.getPolyLon(i), p.getPolyLat(i), p.getPolyLon(index), p.getPolyLat(index), bLon, bLat)) {\n            return true;\n          }\n          index = getIndex(length, ++j + offset);\n        }\n      }\n    }\n    if (p.getHoles() != null && p.getHoles().length > 0) {\n      for (Polygon hole : p.getHoles()) {\n        if (isEdgeFromPolygon(hole, aLon, aLat, bLon, bLat)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  private boolean isEdgeFromPolygon(Polygon p, double aLon, double aLat, double bLon, double bLat) {\n    for (int i = 0; i < p.getPolyLats().length - 1; i++) {\n      if (isPointInLine(p.getPolyLon(i), p.getPolyLat(i), p.getPolyLon(i + 1), p.getPolyLat(i + 1), aLon, aLat) &&\n          isPointInLine(p.getPolyLon(i), p.getPolyLat(i), p.getPolyLon(i + 1), p.getPolyLat(i + 1), bLon, bLat)) {\n        return true;\n      }\n      if (p.getPolyLon(i) != p.getPolyLon(i + 1) || p.getPolyLat(i) != p.getPolyLat(i + 1)) {\n        //Check for co-planar points\n        final int length = p.getPolyLats().length;\n        final int offset = i + 2;\n        int j = 0;\n        int index = getIndex(length, j + offset);\n        while (j < length  && area(p.getPolyLon(i), p.getPolyLat(i), p.getPolyLon(i + 1), p.getPolyLat(i + 1), p.getPolyLon(index), p.getPolyLat(index)) == 0) {\n          if (isPointInLine(p.getPolyLon(i), p.getPolyLat(i), p.getPolyLon(index), p.getPolyLat(index), aLon, aLat) &&\n              isPointInLine(p.getPolyLon(i), p.getPolyLat(i), p.getPolyLon(index), p.getPolyLat(index), bLon, bLat)) {\n            return true;\n          }\n          index = getIndex(length, ++j + offset);\n        }\n      }\n    }\n    if (p.getHoles() != null && p.getHoles().length > 0) {\n      for (Polygon hole : p.getHoles()) {\n        if (isEdgeFromPolygon(hole, aLon, aLat, bLon, bLat)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}