{"path":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#assertDocCounts(boolean).mjava","commits":[{"id":"2c30e4c1cee08b3b229a77991882594fe7250b66","date":1344448871,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#assertDocCounts(boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#assertDocCounts(boolean).mjava","sourceNew":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    // do some really inefficient mapping...\n    ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), 10000,\n        AbstractZkTestCase.TIMEOUT);\n    Map<String,Slice> slices = null;\n    ClusterState clusterState;\n    try {\n      zk.createClusterStateWatchersAndUpdate();\n      clusterState = zk.getClusterState();\n      slices = clusterState.getSlices(DEFAULT_COLLECTION);\n    } finally {\n      zk.close();\n    }\n    \n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n    \n    for (CloudJettyRunner cjetty : cloudJettys) {\n      CloudSolrServerClient client = cjetty.client;\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrServer) client.solrClient).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      \n      long count = 0;\n      String currentState = cjetty.info.get(ZkStateReader.STATE_PROP);\n      if (currentState != null\n          && currentState.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getClusterState().liveNodesContain(\n              cjetty.info.get(ZkStateReader.NODE_NAME_PROP))) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.solrClient.query(query).getResults().getNumFound();\n      }\n      \n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","sourceOld":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    // do some really inefficient mapping...\n    ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), 10000,\n        AbstractZkTestCase.TIMEOUT);\n    Map<String,Slice> slices = null;\n    ClusterState clusterState;\n    try {\n      zk.createClusterStateWatchersAndUpdate();\n      clusterState = zk.getClusterState();\n      slices = clusterState.getSlices(DEFAULT_COLLECTION);\n    } finally {\n      zk.close();\n    }\n    \n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n    \n    for (CloudJettyRunner cjetty : cloudJettys) {\n      CloudSolrServerClient client = cjetty.client;\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrServer) client.solrClient).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      \n      long count = 0;\n      String currentState = cjetty.info.get(ZkStateReader.STATE_PROP);\n      if (currentState != null\n          && currentState.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getClusterState().liveNodesContain(\n              cjetty.info.get(ZkStateReader.NODE_NAME_PROP))) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.solrClient.query(query).getResults().getNumFound();\n      }\n      \n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#assertDocCounts(boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    // do some really inefficient mapping...\n    ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), 10000,\n        AbstractZkTestCase.TIMEOUT);\n    Map<String,Slice> slices = null;\n    ClusterState clusterState;\n    try {\n      zk.createClusterStateWatchersAndUpdate();\n      clusterState = zk.getClusterState();\n      slices = clusterState.getSlices(DEFAULT_COLLECTION);\n    } finally {\n      zk.close();\n    }\n    \n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n    \n    for (CloudJettyRunner cjetty : cloudJettys) {\n      CloudSolrServerClient client = cjetty.client;\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrServer) client.solrClient).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      \n      long count = 0;\n      String currentState = cjetty.info.get(ZkStateReader.STATE_PROP);\n      if (currentState != null\n          && currentState.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getClusterState().liveNodesContain(\n              cjetty.info.get(ZkStateReader.NODE_NAME_PROP))) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.solrClient.query(query).getResults().getNumFound();\n      }\n      \n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#assertDocCounts(boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#assertDocCounts(boolean).mjava","sourceNew":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    // do some really inefficient mapping...\n    ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), 10000,\n        AbstractZkTestCase.TIMEOUT);\n    Map<String,Slice> slices = null;\n    ClusterState clusterState;\n    try {\n      zk.createClusterStateWatchersAndUpdate();\n      clusterState = zk.getClusterState();\n      slices = clusterState.getSlices(DEFAULT_COLLECTION);\n    } finally {\n      zk.close();\n    }\n    \n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n    \n    for (CloudJettyRunner cjetty : cloudJettys) {\n      CloudSolrServerClient client = cjetty.client;\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrServer) client.solrClient).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      \n      long count = 0;\n      String currentState = cjetty.info.get(ZkStateReader.STATE_PROP);\n      if (currentState != null\n          && currentState.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getClusterState().liveNodesContain(\n              cjetty.info.get(ZkStateReader.NODE_NAME_PROP))) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.solrClient.query(query).getResults().getNumFound();\n      }\n      \n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","sourceOld":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    // do some really inefficient mapping...\n    ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), 10000,\n        AbstractZkTestCase.TIMEOUT);\n    Map<String,Slice> slices = null;\n    ClusterState clusterState;\n    try {\n      zk.createClusterStateWatchersAndUpdate();\n      clusterState = zk.getClusterState();\n      slices = clusterState.getSlices(DEFAULT_COLLECTION);\n    } finally {\n      zk.close();\n    }\n    \n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n    \n    for (CloudJettyRunner cjetty : cloudJettys) {\n      CloudSolrServerClient client = cjetty.client;\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrServer) client.solrClient).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      \n      long count = 0;\n      String currentState = cjetty.info.get(ZkStateReader.STATE_PROP);\n      if (currentState != null\n          && currentState.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getClusterState().liveNodesContain(\n              cjetty.info.get(ZkStateReader.NODE_NAME_PROP))) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.solrClient.query(query).getResults().getNumFound();\n      }\n      \n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa64435b5902ce266c23755a4a00691a3285dab8","date":1347243290,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#assertDocCounts(boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#assertDocCounts(boolean).mjava","sourceNew":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    // do some really inefficient mapping...\n    ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), 10000,\n        AbstractZkTestCase.TIMEOUT);\n    Map<String,Slice> slices = null;\n    ClusterState clusterState;\n    try {\n      zk.createClusterStateWatchersAndUpdate();\n      clusterState = zk.getClusterState();\n      slices = clusterState.getSlices(DEFAULT_COLLECTION);\n    } finally {\n      zk.close();\n    }\n    \n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n    \n    for (CloudJettyRunner cjetty : cloudJettys) {\n      CloudSolrServerClient client = cjetty.client;\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,Replica> theShards = slice.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrServer) client.solrClient).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      \n      long count = 0;\n      String currentState = cjetty.info.getStr(ZkStateReader.STATE_PROP);\n      if (currentState != null\n          && currentState.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getClusterState().liveNodesContain(\n              cjetty.info.getStr(ZkStateReader.NODE_NAME_PROP))) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.solrClient.query(query).getResults().getNumFound();\n      }\n      \n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","sourceOld":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    // do some really inefficient mapping...\n    ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), 10000,\n        AbstractZkTestCase.TIMEOUT);\n    Map<String,Slice> slices = null;\n    ClusterState clusterState;\n    try {\n      zk.createClusterStateWatchersAndUpdate();\n      clusterState = zk.getClusterState();\n      slices = clusterState.getSlices(DEFAULT_COLLECTION);\n    } finally {\n      zk.close();\n    }\n    \n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n    \n    for (CloudJettyRunner cjetty : cloudJettys) {\n      CloudSolrServerClient client = cjetty.client;\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,ZkNodeProps> theShards = slice.getValue().getShards();\n        for (Map.Entry<String,ZkNodeProps> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrServer) client.solrClient).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      \n      long count = 0;\n      String currentState = cjetty.info.get(ZkStateReader.STATE_PROP);\n      if (currentState != null\n          && currentState.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getClusterState().liveNodesContain(\n              cjetty.info.get(ZkStateReader.NODE_NAME_PROP))) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.solrClient.query(query).getResults().getNumFound();\n      }\n      \n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#assertDocCounts(boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#assertDocCounts(boolean).mjava","sourceNew":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    // do some really inefficient mapping...\n    ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), 10000,\n        AbstractZkTestCase.TIMEOUT);\n    Map<String,Slice> slices = null;\n    ClusterState clusterState;\n    try {\n      zk.createClusterStateWatchersAndUpdate();\n      clusterState = zk.getClusterState();\n      slices = clusterState.getSlices(DEFAULT_COLLECTION);\n    } finally {\n      zk.close();\n    }\n    \n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n    \n    for (CloudJettyRunner cjetty : cloudJettys) {\n      CloudSolrServerClient client = cjetty.client;\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,Replica> theShards = slice.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrServer) client.solrClient).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      long count = 0;\n      String currentState = cjetty.info.getStr(ZkStateReader.STATE_PROP);\n      if (currentState != null\n          && currentState.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getClusterState().liveNodesContain(\n              cjetty.info.getStr(ZkStateReader.NODE_NAME_PROP))) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.solrClient.query(query).getResults().getNumFound();\n      }\n      \n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","sourceOld":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    // do some really inefficient mapping...\n    ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), 10000,\n        AbstractZkTestCase.TIMEOUT);\n    Map<String,Slice> slices = null;\n    ClusterState clusterState;\n    try {\n      zk.createClusterStateWatchersAndUpdate();\n      clusterState = zk.getClusterState();\n      slices = clusterState.getSlices(DEFAULT_COLLECTION);\n    } finally {\n      zk.close();\n    }\n    \n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n    \n    for (CloudJettyRunner cjetty : cloudJettys) {\n      CloudSolrServerClient client = cjetty.client;\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,Replica> theShards = slice.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrServer) client.solrClient).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      \n      long count = 0;\n      String currentState = cjetty.info.getStr(ZkStateReader.STATE_PROP);\n      if (currentState != null\n          && currentState.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getClusterState().liveNodesContain(\n              cjetty.info.getStr(ZkStateReader.NODE_NAME_PROP))) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.solrClient.query(query).getResults().getNumFound();\n      }\n      \n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#assertDocCounts(boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#assertDocCounts(boolean).mjava","sourceNew":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    // do some really inefficient mapping...\n    ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), 10000,\n        AbstractZkTestCase.TIMEOUT);\n    Map<String,Slice> slices = null;\n    ClusterState clusterState;\n    try {\n      zk.createClusterStateWatchersAndUpdate();\n      clusterState = zk.getClusterState();\n      slices = clusterState.getSlices(DEFAULT_COLLECTION);\n    } finally {\n      zk.close();\n    }\n    \n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n    \n    for (CloudJettyRunner cjetty : cloudJettys) {\n      CloudSolrServerClient client = cjetty.client;\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,Replica> theShards = slice.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrServer) client.solrClient).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      long count = 0;\n      String currentState = cjetty.info.getStr(ZkStateReader.STATE_PROP);\n      if (currentState != null\n          && currentState.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getClusterState().liveNodesContain(\n              cjetty.info.getStr(ZkStateReader.NODE_NAME_PROP))) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.solrClient.query(query).getResults().getNumFound();\n      }\n      \n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","sourceOld":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    // do some really inefficient mapping...\n    ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), 10000,\n        AbstractZkTestCase.TIMEOUT);\n    Map<String,Slice> slices = null;\n    ClusterState clusterState;\n    try {\n      zk.createClusterStateWatchersAndUpdate();\n      clusterState = zk.getClusterState();\n      slices = clusterState.getSlices(DEFAULT_COLLECTION);\n    } finally {\n      zk.close();\n    }\n    \n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n    \n    for (CloudJettyRunner cjetty : cloudJettys) {\n      CloudSolrServerClient client = cjetty.client;\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,Replica> theShards = slice.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrServer) client.solrClient).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      \n      long count = 0;\n      String currentState = cjetty.info.getStr(ZkStateReader.STATE_PROP);\n      if (currentState != null\n          && currentState.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getClusterState().liveNodesContain(\n              cjetty.info.getStr(ZkStateReader.NODE_NAME_PROP))) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.solrClient.query(query).getResults().getNumFound();\n      }\n      \n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5a558d54519c651068ddb202f03befefb1514a7","date":1354382006,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#assertDocCounts(boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#assertDocCounts(boolean).mjava","sourceNew":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    // do some really inefficient mapping...\n    ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), 10000,\n        AbstractZkTestCase.TIMEOUT);\n    Map<String,Slice> slices = null;\n    ClusterState clusterState;\n    try {\n      zk.createClusterStateWatchersAndUpdate();\n      clusterState = zk.getClusterState();\n      slices = clusterState.getSlicesMap(DEFAULT_COLLECTION);\n    } finally {\n      zk.close();\n    }\n    \n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n    \n    for (CloudJettyRunner cjetty : cloudJettys) {\n      CloudSolrServerClient client = cjetty.client;\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,Replica> theShards = slice.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrServer) client.solrClient).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      long count = 0;\n      String currentState = cjetty.info.getStr(ZkStateReader.STATE_PROP);\n      if (currentState != null\n          && currentState.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getClusterState().liveNodesContain(\n              cjetty.info.getStr(ZkStateReader.NODE_NAME_PROP))) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.solrClient.query(query).getResults().getNumFound();\n      }\n      \n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","sourceOld":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    // do some really inefficient mapping...\n    ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), 10000,\n        AbstractZkTestCase.TIMEOUT);\n    Map<String,Slice> slices = null;\n    ClusterState clusterState;\n    try {\n      zk.createClusterStateWatchersAndUpdate();\n      clusterState = zk.getClusterState();\n      slices = clusterState.getSlices(DEFAULT_COLLECTION);\n    } finally {\n      zk.close();\n    }\n    \n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n    \n    for (CloudJettyRunner cjetty : cloudJettys) {\n      CloudSolrServerClient client = cjetty.client;\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,Replica> theShards = slice.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrServer) client.solrClient).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      long count = 0;\n      String currentState = cjetty.info.getStr(ZkStateReader.STATE_PROP);\n      if (currentState != null\n          && currentState.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getClusterState().liveNodesContain(\n              cjetty.info.getStr(ZkStateReader.NODE_NAME_PROP))) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.solrClient.query(query).getResults().getNumFound();\n      }\n      \n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":["344b0840364d990b29b97467bfcc766ff8325d11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#assertDocCounts(boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#assertDocCounts(boolean).mjava","sourceNew":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    // do some really inefficient mapping...\n    ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), 10000,\n        AbstractZkTestCase.TIMEOUT);\n    Map<String,Slice> slices = null;\n    ClusterState clusterState;\n    try {\n      zk.createClusterStateWatchersAndUpdate();\n      clusterState = zk.getClusterState();\n      slices = clusterState.getSlicesMap(DEFAULT_COLLECTION);\n    } finally {\n      zk.close();\n    }\n    \n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n    \n    for (CloudJettyRunner cjetty : cloudJettys) {\n      CloudSolrServerClient client = cjetty.client;\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,Replica> theShards = slice.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrServer) client.solrClient).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      long count = 0;\n      String currentState = cjetty.info.getStr(ZkStateReader.STATE_PROP);\n      if (currentState != null\n          && currentState.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getClusterState().liveNodesContain(\n              cjetty.info.getStr(ZkStateReader.NODE_NAME_PROP))) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.solrClient.query(query).getResults().getNumFound();\n      }\n      \n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","sourceOld":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    // do some really inefficient mapping...\n    ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), 10000,\n        AbstractZkTestCase.TIMEOUT);\n    Map<String,Slice> slices = null;\n    ClusterState clusterState;\n    try {\n      zk.createClusterStateWatchersAndUpdate();\n      clusterState = zk.getClusterState();\n      slices = clusterState.getSlices(DEFAULT_COLLECTION);\n    } finally {\n      zk.close();\n    }\n    \n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n    \n    for (CloudJettyRunner cjetty : cloudJettys) {\n      CloudSolrServerClient client = cjetty.client;\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,Replica> theShards = slice.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrServer) client.solrClient).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      long count = 0;\n      String currentState = cjetty.info.getStr(ZkStateReader.STATE_PROP);\n      if (currentState != null\n          && currentState.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getClusterState().liveNodesContain(\n              cjetty.info.getStr(ZkStateReader.NODE_NAME_PROP))) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.solrClient.query(query).getResults().getNumFound();\n      }\n      \n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#assertDocCounts(boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#assertDocCounts(boolean).mjava","sourceNew":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    // do some really inefficient mapping...\n    ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), 10000,\n        AbstractZkTestCase.TIMEOUT);\n    Map<String,Slice> slices = null;\n    ClusterState clusterState;\n    try {\n      zk.createClusterStateWatchersAndUpdate();\n      clusterState = zk.getClusterState();\n      slices = clusterState.getSlicesMap(DEFAULT_COLLECTION);\n    } finally {\n      zk.close();\n    }\n    \n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n    \n    for (CloudJettyRunner cjetty : cloudJettys) {\n      CloudSolrServerClient client = cjetty.client;\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,Replica> theShards = slice.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrClient) client.solrClient).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      long count = 0;\n      String currentState = cjetty.info.getStr(ZkStateReader.STATE_PROP);\n      if (currentState != null\n          && currentState.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getClusterState().liveNodesContain(\n              cjetty.info.getStr(ZkStateReader.NODE_NAME_PROP))) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.solrClient.query(query).getResults().getNumFound();\n      }\n      \n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","sourceOld":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    // do some really inefficient mapping...\n    ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), 10000,\n        AbstractZkTestCase.TIMEOUT);\n    Map<String,Slice> slices = null;\n    ClusterState clusterState;\n    try {\n      zk.createClusterStateWatchersAndUpdate();\n      clusterState = zk.getClusterState();\n      slices = clusterState.getSlicesMap(DEFAULT_COLLECTION);\n    } finally {\n      zk.close();\n    }\n    \n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n    \n    for (CloudJettyRunner cjetty : cloudJettys) {\n      CloudSolrServerClient client = cjetty.client;\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,Replica> theShards = slice.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrServer) client.solrClient).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      long count = 0;\n      String currentState = cjetty.info.getStr(ZkStateReader.STATE_PROP);\n      if (currentState != null\n          && currentState.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getClusterState().liveNodesContain(\n              cjetty.info.getStr(ZkStateReader.NODE_NAME_PROP))) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.solrClient.query(query).getResults().getNumFound();\n      }\n      \n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#assertDocCounts(boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#assertDocCounts(boolean).mjava","sourceNew":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n\n    // do some really inefficient mapping...\n    ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), 10000,\n        AbstractZkTestCase.TIMEOUT);\n    Map<String,Slice> slices = null;\n    ClusterState clusterState;\n    try {\n      zk.createClusterStateWatchersAndUpdate();\n      clusterState = zk.getClusterState();\n      slices = clusterState.getSlicesMap(DEFAULT_COLLECTION);\n    } finally {\n      zk.close();\n    }\n\n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n\n    for (CloudJettyRunner cjetty : cloudJettys) {\n      CloudSolrServerClient client = cjetty.client;\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,Replica> theShards = slice.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrClient) client.solrClient).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      long count = 0;\n      String currentState = cjetty.info.getStr(ZkStateReader.STATE_PROP);\n      if (currentState != null\n          && currentState.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getClusterState().liveNodesContain(\n              cjetty.info.getStr(ZkStateReader.NODE_NAME_PROP))) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.solrClient.query(query).getResults().getNumFound();\n      }\n\n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","sourceOld":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    \n    // do some really inefficient mapping...\n    ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), 10000,\n        AbstractZkTestCase.TIMEOUT);\n    Map<String,Slice> slices = null;\n    ClusterState clusterState;\n    try {\n      zk.createClusterStateWatchersAndUpdate();\n      clusterState = zk.getClusterState();\n      slices = clusterState.getSlicesMap(DEFAULT_COLLECTION);\n    } finally {\n      zk.close();\n    }\n    \n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n    \n    for (CloudJettyRunner cjetty : cloudJettys) {\n      CloudSolrServerClient client = cjetty.client;\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,Replica> theShards = slice.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrClient) client.solrClient).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      long count = 0;\n      String currentState = cjetty.info.getStr(ZkStateReader.STATE_PROP);\n      if (currentState != null\n          && currentState.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getClusterState().liveNodesContain(\n              cjetty.info.getStr(ZkStateReader.NODE_NAME_PROP))) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.solrClient.query(query).getResults().getNumFound();\n      }\n      \n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"98287baa2c8d136e801f366a73e27a23285b7b98","date":1427241813,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#assertDocCounts(boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#assertDocCounts(boolean).mjava","sourceNew":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n\n    // do some really inefficient mapping...\n    Map<String,Slice> slices = null;\n    ClusterState clusterState;\n    try (ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), 10000,\n        AbstractZkTestCase.TIMEOUT)) {\n      zk.createClusterStateWatchersAndUpdate();\n      clusterState = zk.getClusterState();\n      slices = clusterState.getSlicesMap(DEFAULT_COLLECTION);\n    }\n\n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n\n    for (CloudJettyRunner cjetty : cloudJettys) {\n      CloudSolrServerClient client = cjetty.client;\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,Replica> theShards = slice.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrClient) client.solrClient).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      long count = 0;\n      String currentState = cjetty.info.getStr(ZkStateReader.STATE_PROP);\n      if (currentState != null\n          && currentState.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getClusterState().liveNodesContain(\n              cjetty.info.getStr(ZkStateReader.NODE_NAME_PROP))) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.solrClient.query(query).getResults().getNumFound();\n      }\n\n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","sourceOld":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n\n    // do some really inefficient mapping...\n    ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), 10000,\n        AbstractZkTestCase.TIMEOUT);\n    Map<String,Slice> slices = null;\n    ClusterState clusterState;\n    try {\n      zk.createClusterStateWatchersAndUpdate();\n      clusterState = zk.getClusterState();\n      slices = clusterState.getSlicesMap(DEFAULT_COLLECTION);\n    } finally {\n      zk.close();\n    }\n\n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n\n    for (CloudJettyRunner cjetty : cloudJettys) {\n      CloudSolrServerClient client = cjetty.client;\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,Replica> theShards = slice.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrClient) client.solrClient).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      long count = 0;\n      String currentState = cjetty.info.getStr(ZkStateReader.STATE_PROP);\n      if (currentState != null\n          && currentState.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getClusterState().liveNodesContain(\n              cjetty.info.getStr(ZkStateReader.NODE_NAME_PROP))) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.solrClient.query(query).getResults().getNumFound();\n      }\n\n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#assertDocCounts(boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#assertDocCounts(boolean).mjava","sourceNew":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n\n    // do some really inefficient mapping...\n    Map<String,Slice> slices = null;\n    ClusterState clusterState;\n    try (ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), 10000,\n        AbstractZkTestCase.TIMEOUT)) {\n      zk.createClusterStateWatchersAndUpdate();\n      clusterState = zk.getClusterState();\n      slices = clusterState.getSlicesMap(DEFAULT_COLLECTION);\n    }\n\n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n\n    for (CloudJettyRunner cjetty : cloudJettys) {\n      CloudSolrServerClient client = cjetty.client;\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,Replica> theShards = slice.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrClient) client.solrClient).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      long count = 0;\n      String currentState = cjetty.info.getStr(ZkStateReader.STATE_PROP);\n      if (currentState != null\n          && currentState.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getClusterState().liveNodesContain(\n              cjetty.info.getStr(ZkStateReader.NODE_NAME_PROP))) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.solrClient.query(query).getResults().getNumFound();\n      }\n\n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","sourceOld":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n\n    // do some really inefficient mapping...\n    ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), 10000,\n        AbstractZkTestCase.TIMEOUT);\n    Map<String,Slice> slices = null;\n    ClusterState clusterState;\n    try {\n      zk.createClusterStateWatchersAndUpdate();\n      clusterState = zk.getClusterState();\n      slices = clusterState.getSlicesMap(DEFAULT_COLLECTION);\n    } finally {\n      zk.close();\n    }\n\n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n\n    for (CloudJettyRunner cjetty : cloudJettys) {\n      CloudSolrServerClient client = cjetty.client;\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,Replica> theShards = slice.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrClient) client.solrClient).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      long count = 0;\n      String currentState = cjetty.info.getStr(ZkStateReader.STATE_PROP);\n      if (currentState != null\n          && currentState.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getClusterState().liveNodesContain(\n              cjetty.info.getStr(ZkStateReader.NODE_NAME_PROP))) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.solrClient.query(query).getResults().getNumFound();\n      }\n\n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a219f1dcad1700e84807666bdbd2b573e8de7021","date":1428130940,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#assertDocCounts(boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#assertDocCounts(boolean).mjava","sourceNew":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n\n    // do some really inefficient mapping...\n    Map<String,Slice> slices = null;\n    ClusterState clusterState;\n    try (ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), 10000,\n        AbstractZkTestCase.TIMEOUT)) {\n      zk.createClusterStateWatchersAndUpdate();\n      clusterState = zk.getClusterState();\n      slices = clusterState.getSlicesMap(DEFAULT_COLLECTION);\n    }\n\n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n\n    for (CloudJettyRunner cjetty : cloudJettys) {\n      CloudSolrServerClient client = cjetty.client;\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,Replica> theShards = slice.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrClient) client.solrClient).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      long count = 0;\n      final Replica.State currentState = Replica.State.getState(cjetty.info.getStr(ZkStateReader.STATE_PROP));\n      if (currentState == Replica.State.ACTIVE\n          && zkStateReader.getClusterState().liveNodesContain(cjetty.info.getStr(ZkStateReader.NODE_NAME_PROP))) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.solrClient.query(query).getResults().getNumFound();\n      }\n\n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","sourceOld":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n\n    // do some really inefficient mapping...\n    Map<String,Slice> slices = null;\n    ClusterState clusterState;\n    try (ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), 10000,\n        AbstractZkTestCase.TIMEOUT)) {\n      zk.createClusterStateWatchersAndUpdate();\n      clusterState = zk.getClusterState();\n      slices = clusterState.getSlicesMap(DEFAULT_COLLECTION);\n    }\n\n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n\n    for (CloudJettyRunner cjetty : cloudJettys) {\n      CloudSolrServerClient client = cjetty.client;\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,Replica> theShards = slice.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrClient) client.solrClient).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      long count = 0;\n      String currentState = cjetty.info.getStr(ZkStateReader.STATE_PROP);\n      if (currentState != null\n          && currentState.equals(ZkStateReader.ACTIVE)\n          && zkStateReader.getClusterState().liveNodesContain(\n              cjetty.info.getStr(ZkStateReader.NODE_NAME_PROP))) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.solrClient.query(query).getResults().getNumFound();\n      }\n\n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9f1a5871b8ff5e2e0c0bf62340337c7f3801cffe","date":1452379366,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#assertDocCounts(boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#assertDocCounts(boolean).mjava","sourceNew":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n\n    // do some really inefficient mapping...\n    Map<String,Slice> slices = null;\n    ClusterState clusterState;\n    try (ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT,\n        AbstractZkTestCase.TIMEOUT)) {\n      zk.createClusterStateWatchersAndUpdate();\n      clusterState = zk.getClusterState();\n      slices = clusterState.getSlicesMap(DEFAULT_COLLECTION);\n    }\n\n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n\n    for (CloudJettyRunner cjetty : cloudJettys) {\n      CloudSolrServerClient client = cjetty.client;\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,Replica> theShards = slice.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrClient) client.solrClient).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      long count = 0;\n      final Replica.State currentState = Replica.State.getState(cjetty.info.getStr(ZkStateReader.STATE_PROP));\n      if (currentState == Replica.State.ACTIVE\n          && zkStateReader.getClusterState().liveNodesContain(cjetty.info.getStr(ZkStateReader.NODE_NAME_PROP))) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.solrClient.query(query).getResults().getNumFound();\n      }\n\n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","sourceOld":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n\n    // do some really inefficient mapping...\n    Map<String,Slice> slices = null;\n    ClusterState clusterState;\n    try (ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), 10000,\n        AbstractZkTestCase.TIMEOUT)) {\n      zk.createClusterStateWatchersAndUpdate();\n      clusterState = zk.getClusterState();\n      slices = clusterState.getSlicesMap(DEFAULT_COLLECTION);\n    }\n\n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n\n    for (CloudJettyRunner cjetty : cloudJettys) {\n      CloudSolrServerClient client = cjetty.client;\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,Replica> theShards = slice.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrClient) client.solrClient).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      long count = 0;\n      final Replica.State currentState = Replica.State.getState(cjetty.info.getStr(ZkStateReader.STATE_PROP));\n      if (currentState == Replica.State.ACTIVE\n          && zkStateReader.getClusterState().liveNodesContain(cjetty.info.getStr(ZkStateReader.NODE_NAME_PROP))) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.solrClient.query(query).getResults().getNumFound();\n      }\n\n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9974f61802aea1d15849a1053f88f5e89fc32b4","date":1462405923,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#assertDocCounts(boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#assertDocCounts(boolean).mjava","sourceNew":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n\n    // do some really inefficient mapping...\n    Map<String,Slice> slices = null;\n    ClusterState clusterState;\n    try (ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT,\n        AbstractZkTestCase.TIMEOUT)) {\n      zk.createClusterStateWatchersAndUpdate();\n      clusterState = zk.getClusterState();\n      slices = clusterState.getSlicesMap(DEFAULT_COLLECTION);\n    }\n\n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollectionsMap().keySet());\n    }\n\n    for (CloudJettyRunner cjetty : cloudJettys) {\n      CloudSolrServerClient client = cjetty.client;\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,Replica> theShards = slice.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrClient) client.solrClient).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      long count = 0;\n      final Replica.State currentState = Replica.State.getState(cjetty.info.getStr(ZkStateReader.STATE_PROP));\n      if (currentState == Replica.State.ACTIVE\n          && zkStateReader.getClusterState().liveNodesContain(cjetty.info.getStr(ZkStateReader.NODE_NAME_PROP))) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.solrClient.query(query).getResults().getNumFound();\n      }\n\n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","sourceOld":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n\n    // do some really inefficient mapping...\n    Map<String,Slice> slices = null;\n    ClusterState clusterState;\n    try (ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT,\n        AbstractZkTestCase.TIMEOUT)) {\n      zk.createClusterStateWatchersAndUpdate();\n      clusterState = zk.getClusterState();\n      slices = clusterState.getSlicesMap(DEFAULT_COLLECTION);\n    }\n\n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n\n    for (CloudJettyRunner cjetty : cloudJettys) {\n      CloudSolrServerClient client = cjetty.client;\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,Replica> theShards = slice.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrClient) client.solrClient).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      long count = 0;\n      final Replica.State currentState = Replica.State.getState(cjetty.info.getStr(ZkStateReader.STATE_PROP));\n      if (currentState == Replica.State.ACTIVE\n          && zkStateReader.getClusterState().liveNodesContain(cjetty.info.getStr(ZkStateReader.NODE_NAME_PROP))) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.solrClient.query(query).getResults().getNumFound();\n      }\n\n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#assertDocCounts(boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#assertDocCounts(boolean).mjava","sourceNew":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n\n    // do some really inefficient mapping...\n    Map<String,Slice> slices = null;\n    ClusterState clusterState;\n    try (ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT,\n        AbstractZkTestCase.TIMEOUT)) {\n      zk.createClusterStateWatchersAndUpdate();\n      clusterState = zk.getClusterState();\n      slices = clusterState.getSlicesMap(DEFAULT_COLLECTION);\n    }\n\n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollectionsMap().keySet());\n    }\n\n    for (CloudJettyRunner cjetty : cloudJettys) {\n      CloudSolrServerClient client = cjetty.client;\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,Replica> theShards = slice.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrClient) client.solrClient).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      long count = 0;\n      final Replica.State currentState = Replica.State.getState(cjetty.info.getStr(ZkStateReader.STATE_PROP));\n      if (currentState == Replica.State.ACTIVE\n          && zkStateReader.getClusterState().liveNodesContain(cjetty.info.getStr(ZkStateReader.NODE_NAME_PROP))) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.solrClient.query(query).getResults().getNumFound();\n      }\n\n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","sourceOld":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n\n    // do some really inefficient mapping...\n    Map<String,Slice> slices = null;\n    ClusterState clusterState;\n    try (ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT,\n        AbstractZkTestCase.TIMEOUT)) {\n      zk.createClusterStateWatchersAndUpdate();\n      clusterState = zk.getClusterState();\n      slices = clusterState.getSlicesMap(DEFAULT_COLLECTION);\n    }\n\n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n\n    for (CloudJettyRunner cjetty : cloudJettys) {\n      CloudSolrServerClient client = cjetty.client;\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,Replica> theShards = slice.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrClient) client.solrClient).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      long count = 0;\n      final Replica.State currentState = Replica.State.getState(cjetty.info.getStr(ZkStateReader.STATE_PROP));\n      if (currentState == Replica.State.ACTIVE\n          && zkStateReader.getClusterState().liveNodesContain(cjetty.info.getStr(ZkStateReader.NODE_NAME_PROP))) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.solrClient.query(query).getResults().getNumFound();\n      }\n\n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc08f02757dd10637b16a5c65eaaef839a91a9a","date":1462455462,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#assertDocCounts(boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#assertDocCounts(boolean).mjava","sourceNew":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n\n    // do some really inefficient mapping...\n    Map<String,Slice> slices = null;\n    ClusterState clusterState;\n    try (ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT,\n        AbstractZkTestCase.TIMEOUT)) {\n      zk.createClusterStateWatchersAndUpdate();\n      clusterState = zk.getClusterState();\n      slices = clusterState.getSlicesMap(DEFAULT_COLLECTION);\n    }\n\n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollectionsMap().keySet());\n    }\n\n    for (CloudJettyRunner cjetty : cloudJettys) {\n      CloudSolrServerClient client = cjetty.client;\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,Replica> theShards = slice.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrClient) client.solrClient).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      long count = 0;\n      final Replica.State currentState = Replica.State.getState(cjetty.info.getStr(ZkStateReader.STATE_PROP));\n      if (currentState == Replica.State.ACTIVE\n          && zkStateReader.getClusterState().liveNodesContain(cjetty.info.getStr(ZkStateReader.NODE_NAME_PROP))) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.solrClient.query(query).getResults().getNumFound();\n      }\n\n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","sourceOld":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n\n    // do some really inefficient mapping...\n    Map<String,Slice> slices = null;\n    ClusterState clusterState;\n    try (ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT,\n        AbstractZkTestCase.TIMEOUT)) {\n      zk.createClusterStateWatchersAndUpdate();\n      clusterState = zk.getClusterState();\n      slices = clusterState.getSlicesMap(DEFAULT_COLLECTION);\n    }\n\n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n\n    for (CloudJettyRunner cjetty : cloudJettys) {\n      CloudSolrServerClient client = cjetty.client;\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,Replica> theShards = slice.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrClient) client.solrClient).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      long count = 0;\n      final Replica.State currentState = Replica.State.getState(cjetty.info.getStr(ZkStateReader.STATE_PROP));\n      if (currentState == Replica.State.ACTIVE\n          && zkStateReader.getClusterState().liveNodesContain(cjetty.info.getStr(ZkStateReader.NODE_NAME_PROP))) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.solrClient.query(query).getResults().getNumFound();\n      }\n\n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#assertDocCounts(boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#assertDocCounts(boolean).mjava","sourceNew":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n\n    // do some really inefficient mapping...\n    Map<String,Slice> slices = null;\n    ClusterState clusterState;\n    try (ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT,\n        AbstractZkTestCase.TIMEOUT)) {\n      zk.createClusterStateWatchersAndUpdate();\n      clusterState = zk.getClusterState();\n      slices = clusterState.getSlicesMap(DEFAULT_COLLECTION);\n    }\n\n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollectionsMap().keySet());\n    }\n\n    for (CloudJettyRunner cjetty : cloudJettys) {\n      CloudSolrServerClient client = cjetty.client;\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,Replica> theShards = slice.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrClient) client.solrClient).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      long count = 0;\n      final Replica.State currentState = Replica.State.getState(cjetty.info.getStr(ZkStateReader.STATE_PROP));\n      if (currentState == Replica.State.ACTIVE\n          && zkStateReader.getClusterState().liveNodesContain(cjetty.info.getStr(ZkStateReader.NODE_NAME_PROP))) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.solrClient.query(query).getResults().getNumFound();\n      }\n\n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","sourceOld":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n\n    // do some really inefficient mapping...\n    Map<String,Slice> slices = null;\n    ClusterState clusterState;\n    try (ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT,\n        AbstractZkTestCase.TIMEOUT)) {\n      zk.createClusterStateWatchersAndUpdate();\n      clusterState = zk.getClusterState();\n      slices = clusterState.getSlicesMap(DEFAULT_COLLECTION);\n    }\n\n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollections());\n    }\n\n    for (CloudJettyRunner cjetty : cloudJettys) {\n      CloudSolrServerClient client = cjetty.client;\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,Replica> theShards = slice.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrClient) client.solrClient).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      long count = 0;\n      final Replica.State currentState = Replica.State.getState(cjetty.info.getStr(ZkStateReader.STATE_PROP));\n      if (currentState == Replica.State.ACTIVE\n          && zkStateReader.getClusterState().liveNodesContain(cjetty.info.getStr(ZkStateReader.NODE_NAME_PROP))) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.solrClient.query(query).getResults().getNumFound();\n      }\n\n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"344b0840364d990b29b97467bfcc766ff8325d11","date":1501574100,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#assertDocCounts(boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#assertDocCounts(boolean).mjava","sourceNew":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n\n    // do some really inefficient mapping...\n    Map<String,Slice> slices = null;\n    ClusterState clusterState;\n    try (ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT,\n        AbstractZkTestCase.TIMEOUT)) {\n      zk.createClusterStateWatchersAndUpdate();\n      clusterState = zk.getClusterState();\n      final DocCollection docCollection = clusterState.getCollectionOrNull(DEFAULT_COLLECTION);\n      slices = (docCollection != null) ? docCollection.getSlicesMap() : null;\n    }\n\n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollectionsMap().keySet());\n    }\n\n    for (CloudJettyRunner cjetty : cloudJettys) {\n      CloudSolrServerClient client = cjetty.client;\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,Replica> theShards = slice.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrClient) client.solrClient).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      long count = 0;\n      final Replica.State currentState = Replica.State.getState(cjetty.info.getStr(ZkStateReader.STATE_PROP));\n      if (currentState == Replica.State.ACTIVE\n          && zkStateReader.getClusterState().liveNodesContain(cjetty.info.getStr(ZkStateReader.NODE_NAME_PROP))) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.solrClient.query(query).getResults().getNumFound();\n      }\n\n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","sourceOld":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n\n    // do some really inefficient mapping...\n    Map<String,Slice> slices = null;\n    ClusterState clusterState;\n    try (ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT,\n        AbstractZkTestCase.TIMEOUT)) {\n      zk.createClusterStateWatchersAndUpdate();\n      clusterState = zk.getClusterState();\n      slices = clusterState.getSlicesMap(DEFAULT_COLLECTION);\n    }\n\n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollectionsMap().keySet());\n    }\n\n    for (CloudJettyRunner cjetty : cloudJettys) {\n      CloudSolrServerClient client = cjetty.client;\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,Replica> theShards = slice.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrClient) client.solrClient).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      long count = 0;\n      final Replica.State currentState = Replica.State.getState(cjetty.info.getStr(ZkStateReader.STATE_PROP));\n      if (currentState == Replica.State.ACTIVE\n          && zkStateReader.getClusterState().liveNodesContain(cjetty.info.getStr(ZkStateReader.NODE_NAME_PROP))) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.solrClient.query(query).getResults().getNumFound();\n      }\n\n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","bugFix":["c5a558d54519c651068ddb202f03befefb1514a7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#assertDocCounts(boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#assertDocCounts(boolean).mjava","sourceNew":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n\n    // do some really inefficient mapping...\n    Map<String,Slice> slices = null;\n    ClusterState clusterState;\n    try (ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT,\n        AbstractZkTestCase.TIMEOUT)) {\n      zk.createClusterStateWatchersAndUpdate();\n      clusterState = zk.getClusterState();\n      final DocCollection docCollection = clusterState.getCollectionOrNull(DEFAULT_COLLECTION);\n      slices = (docCollection != null) ? docCollection.getSlicesMap() : null;\n    }\n\n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollectionsMap().keySet());\n    }\n\n    for (CloudJettyRunner cjetty : cloudJettys) {\n      CloudSolrServerClient client = cjetty.client;\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,Replica> theShards = slice.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrClient) client.solrClient).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      long count = 0;\n      final Replica.State currentState = Replica.State.getState(cjetty.info.getStr(ZkStateReader.STATE_PROP));\n      if (currentState == Replica.State.ACTIVE\n          && zkStateReader.getClusterState().liveNodesContain(cjetty.info.getStr(ZkStateReader.NODE_NAME_PROP))) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.solrClient.query(query).getResults().getNumFound();\n      }\n\n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","sourceOld":"  protected void assertDocCounts(boolean verbose) throws Exception {\n    // TODO: as we create the clients, we should build a map from shard to\n    // node/client\n    // and node/client to shard?\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    long controlCount = controlClient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n\n    // do some really inefficient mapping...\n    Map<String,Slice> slices = null;\n    ClusterState clusterState;\n    try (ZkStateReader zk = new ZkStateReader(zkServer.getZkAddress(), AbstractZkTestCase.TIMEOUT,\n        AbstractZkTestCase.TIMEOUT)) {\n      zk.createClusterStateWatchersAndUpdate();\n      clusterState = zk.getClusterState();\n      slices = clusterState.getSlicesMap(DEFAULT_COLLECTION);\n    }\n\n    if (slices == null) {\n      throw new RuntimeException(\"Could not find collection \"\n          + DEFAULT_COLLECTION + \" in \" + clusterState.getCollectionsMap().keySet());\n    }\n\n    for (CloudJettyRunner cjetty : cloudJettys) {\n      CloudSolrServerClient client = cjetty.client;\n      for (Map.Entry<String,Slice> slice : slices.entrySet()) {\n        Map<String,Replica> theShards = slice.getValue().getReplicasMap();\n        for (Map.Entry<String,Replica> shard : theShards.entrySet()) {\n          String shardName = new URI(\n              ((HttpSolrClient) client.solrClient).getBaseURL()).getPort()\n              + \"_solr_\";\n          if (verbose && shard.getKey().endsWith(shardName)) {\n            System.err.println(\"shard:\" + slice.getKey());\n            System.err.println(shard.getValue());\n          }\n        }\n      }\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      long count = 0;\n      final Replica.State currentState = Replica.State.getState(cjetty.info.getStr(ZkStateReader.STATE_PROP));\n      if (currentState == Replica.State.ACTIVE\n          && zkStateReader.getClusterState().liveNodesContain(cjetty.info.getStr(ZkStateReader.NODE_NAME_PROP))) {\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        count = client.solrClient.query(query).getResults().getNumFound();\n      }\n\n      if (verbose) System.err.println(\"client docs:\" + count + \"\\n\\n\");\n    }\n    if (verbose) System.err.println(\"control docs:\"\n        + controlClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound()\n        + \"\\n\\n\");\n    SolrQuery query = new SolrQuery(\"*:*\");\n    assertEquals(\"Doc Counts do not add up\", controlCount,\n        cloudClient.query(query).getResults().getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"abb23fcc2461782ab204e61213240feb77d355aa":["bafca15d8e408346a67f4282ad1143b88023893b"],"73450c0955930295d34703e7ddbfc6973b7a121a":["9f1a5871b8ff5e2e0c0bf62340337c7f3801cffe","e9974f61802aea1d15849a1053f88f5e89fc32b4"],"7dc08f02757dd10637b16a5c65eaaef839a91a9a":["9f1a5871b8ff5e2e0c0bf62340337c7f3801cffe","73450c0955930295d34703e7ddbfc6973b7a121a"],"344b0840364d990b29b97467bfcc766ff8325d11":["73450c0955930295d34703e7ddbfc6973b7a121a"],"fa64435b5902ce266c23755a4a00691a3285dab8":["2c30e4c1cee08b3b229a77991882594fe7250b66"],"9f1a5871b8ff5e2e0c0bf62340337c7f3801cffe":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d9405f486872f1e416304dfe389741f4ee2f8a4d","c5a558d54519c651068ddb202f03befefb1514a7"],"98287baa2c8d136e801f366a73e27a23285b7b98":["abb23fcc2461782ab204e61213240feb77d355aa"],"bafca15d8e408346a67f4282ad1143b88023893b":["c5a558d54519c651068ddb202f03befefb1514a7"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["fa64435b5902ce266c23755a4a00691a3285dab8"],"a219f1dcad1700e84807666bdbd2b573e8de7021":["98287baa2c8d136e801f366a73e27a23285b7b98"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["abb23fcc2461782ab204e61213240feb77d355aa","98287baa2c8d136e801f366a73e27a23285b7b98"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["73450c0955930295d34703e7ddbfc6973b7a121a","344b0840364d990b29b97467bfcc766ff8325d11"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c30e4c1cee08b3b229a77991882594fe7250b66"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["9f1a5871b8ff5e2e0c0bf62340337c7f3801cffe","73450c0955930295d34703e7ddbfc6973b7a121a"],"c5a558d54519c651068ddb202f03befefb1514a7":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c30e4c1cee08b3b229a77991882594fe7250b66"],"f2126b84bd093fa3d921582a109a0ee578c28126":["fa64435b5902ce266c23755a4a00691a3285dab8","d9405f486872f1e416304dfe389741f4ee2f8a4d"],"e9974f61802aea1d15849a1053f88f5e89fc32b4":["9f1a5871b8ff5e2e0c0bf62340337c7f3801cffe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["344b0840364d990b29b97467bfcc766ff8325d11"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"abb23fcc2461782ab204e61213240feb77d355aa":["98287baa2c8d136e801f366a73e27a23285b7b98","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"73450c0955930295d34703e7ddbfc6973b7a121a":["7dc08f02757dd10637b16a5c65eaaef839a91a9a","344b0840364d990b29b97467bfcc766ff8325d11","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"7dc08f02757dd10637b16a5c65eaaef839a91a9a":[],"344b0840364d990b29b97467bfcc766ff8325d11":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fa64435b5902ce266c23755a4a00691a3285dab8":["d9405f486872f1e416304dfe389741f4ee2f8a4d","f2126b84bd093fa3d921582a109a0ee578c28126"],"9f1a5871b8ff5e2e0c0bf62340337c7f3801cffe":["73450c0955930295d34703e7ddbfc6973b7a121a","7dc08f02757dd10637b16a5c65eaaef839a91a9a","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","e9974f61802aea1d15849a1053f88f5e89fc32b4"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"98287baa2c8d136e801f366a73e27a23285b7b98":["a219f1dcad1700e84807666bdbd2b573e8de7021","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"bafca15d8e408346a67f4282ad1143b88023893b":["abb23fcc2461782ab204e61213240feb77d355aa"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["407687e67faf6e1f02a211ca078d8e3eed631027","c5a558d54519c651068ddb202f03befefb1514a7","f2126b84bd093fa3d921582a109a0ee578c28126"],"a219f1dcad1700e84807666bdbd2b573e8de7021":["9f1a5871b8ff5e2e0c0bf62340337c7f3801cffe"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"c5a558d54519c651068ddb202f03befefb1514a7":["407687e67faf6e1f02a211ca078d8e3eed631027","bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","2c30e4c1cee08b3b229a77991882594fe7250b66"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"e9974f61802aea1d15849a1053f88f5e89fc32b4":["73450c0955930295d34703e7ddbfc6973b7a121a"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["fa64435b5902ce266c23755a4a00691a3285dab8","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7dc08f02757dd10637b16a5c65eaaef839a91a9a","407687e67faf6e1f02a211ca078d8e3eed631027","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","c7869f64c874ebf7f317d22c00baf2b6857797a6","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","d6f074e73200c07d54f242d3880a8da5a35ff97b","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}