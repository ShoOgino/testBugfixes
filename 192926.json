{"path":"solr/core/src/test/org/apache/solr/search/TestOverriddenPrefixQueryForCustomFieldType#assertQueryEquals(SolrQueryRequest,String...).mjava","commits":[{"id":"ee9efffeff762194ca606ff91a43e2f6f56a430f","date":1390409407,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestOverriddenPrefixQueryForCustomFieldType#assertQueryEquals(SolrQueryRequest,String...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @see org.apache.lucene.search.QueryUtils#check\n   * @see org.apache.lucene.search.QueryUtils#checkEqual\n   */\n  protected void assertQueryEquals(final SolrQueryRequest req,\n                                   final String... inputs) throws Exception {\n\n    final Query[] queries = new Query[inputs.length];\n\n    try {\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      for (int i = 0; i < inputs.length; i++) {\n        queries[i] = (QParser.getParser(inputs[i], null, req).getQuery());\n      }\n    } finally {\n      SolrRequestInfo.clearRequestInfo();\n    }\n\n    for (int i = 0; i < queries.length; i++) {\n      org.apache.lucene.search.QueryUtils.check(queries[i]);\n      for (int j = i; j < queries.length; j++) {\n        org.apache.lucene.search.QueryUtils.checkEqual(queries[i], queries[j]);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc5ee54a993d26579e3fe1f8f2a696b46b61c48f","date":1470751445,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestOverriddenPrefixQueryForCustomFieldType#assertQueryEquals(SolrQueryRequest,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestOverriddenPrefixQueryForCustomFieldType#assertQueryEquals(SolrQueryRequest,String...).mjava","sourceNew":"  /**\n   * @see org.apache.lucene.search.QueryUtils#check\n   * @see org.apache.lucene.search.QueryUtils#checkEqual\n   */\n  protected void assertQueryEquals(final SolrQueryRequest req,\n                                   final String... inputs) throws Exception {\n\n    final Query[] queries = new Query[inputs.length];\n\n    try {\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      for (int i = 0; i < inputs.length; i++) {\n        queries[i] = (QParser.getParser(inputs[i], req).getQuery());\n      }\n    } finally {\n      SolrRequestInfo.clearRequestInfo();\n    }\n\n    for (int i = 0; i < queries.length; i++) {\n      org.apache.lucene.search.QueryUtils.check(queries[i]);\n      for (int j = i; j < queries.length; j++) {\n        org.apache.lucene.search.QueryUtils.checkEqual(queries[i], queries[j]);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @see org.apache.lucene.search.QueryUtils#check\n   * @see org.apache.lucene.search.QueryUtils#checkEqual\n   */\n  protected void assertQueryEquals(final SolrQueryRequest req,\n                                   final String... inputs) throws Exception {\n\n    final Query[] queries = new Query[inputs.length];\n\n    try {\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      for (int i = 0; i < inputs.length; i++) {\n        queries[i] = (QParser.getParser(inputs[i], null, req).getQuery());\n      }\n    } finally {\n      SolrRequestInfo.clearRequestInfo();\n    }\n\n    for (int i = 0; i < queries.length; i++) {\n      org.apache.lucene.search.QueryUtils.check(queries[i]);\n      for (int j = i; j < queries.length; j++) {\n        org.apache.lucene.search.QueryUtils.checkEqual(queries[i], queries[j]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8bca25eefa1f2205e2b0ef713701dc3a0fecd702","date":1470810578,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestOverriddenPrefixQueryForCustomFieldType#assertQueryEquals(SolrQueryRequest,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestOverriddenPrefixQueryForCustomFieldType#assertQueryEquals(SolrQueryRequest,String...).mjava","sourceNew":"  /**\n   * @see org.apache.lucene.search.QueryUtils#check\n   * @see org.apache.lucene.search.QueryUtils#checkEqual\n   */\n  protected void assertQueryEquals(final SolrQueryRequest req,\n                                   final String... inputs) throws Exception {\n\n    final Query[] queries = new Query[inputs.length];\n\n    try {\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      for (int i = 0; i < inputs.length; i++) {\n        queries[i] = (QParser.getParser(inputs[i], req).getQuery());\n      }\n    } finally {\n      SolrRequestInfo.clearRequestInfo();\n    }\n\n    for (int i = 0; i < queries.length; i++) {\n      org.apache.lucene.search.QueryUtils.check(queries[i]);\n      for (int j = i; j < queries.length; j++) {\n        org.apache.lucene.search.QueryUtils.checkEqual(queries[i], queries[j]);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @see org.apache.lucene.search.QueryUtils#check\n   * @see org.apache.lucene.search.QueryUtils#checkEqual\n   */\n  protected void assertQueryEquals(final SolrQueryRequest req,\n                                   final String... inputs) throws Exception {\n\n    final Query[] queries = new Query[inputs.length];\n\n    try {\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      for (int i = 0; i < inputs.length; i++) {\n        queries[i] = (QParser.getParser(inputs[i], null, req).getQuery());\n      }\n    } finally {\n      SolrRequestInfo.clearRequestInfo();\n    }\n\n    for (int i = 0; i < queries.length; i++) {\n      org.apache.lucene.search.QueryUtils.check(queries[i]);\n      for (int j = i; j < queries.length; j++) {\n        org.apache.lucene.search.QueryUtils.checkEqual(queries[i], queries[j]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestOverriddenPrefixQueryForCustomFieldType#assertQueryEquals(SolrQueryRequest,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestOverriddenPrefixQueryForCustomFieldType#assertQueryEquals(SolrQueryRequest,String...).mjava","sourceNew":"  /**\n   * @see org.apache.lucene.search.QueryUtils#check\n   * @see org.apache.lucene.search.QueryUtils#checkEqual\n   */\n  protected void assertQueryEquals(final SolrQueryRequest req,\n                                   final String... inputs) throws Exception {\n\n    final Query[] queries = new Query[inputs.length];\n\n    try {\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      for (int i = 0; i < inputs.length; i++) {\n        queries[i] = (QParser.getParser(inputs[i], req).getQuery());\n      }\n    } finally {\n      SolrRequestInfo.clearRequestInfo();\n    }\n\n    for (int i = 0; i < queries.length; i++) {\n      org.apache.lucene.search.QueryUtils.check(queries[i]);\n      for (int j = i; j < queries.length; j++) {\n        org.apache.lucene.search.QueryUtils.checkEqual(queries[i], queries[j]);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @see org.apache.lucene.search.QueryUtils#check\n   * @see org.apache.lucene.search.QueryUtils#checkEqual\n   */\n  protected void assertQueryEquals(final SolrQueryRequest req,\n                                   final String... inputs) throws Exception {\n\n    final Query[] queries = new Query[inputs.length];\n\n    try {\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      for (int i = 0; i < inputs.length; i++) {\n        queries[i] = (QParser.getParser(inputs[i], null, req).getQuery());\n      }\n    } finally {\n      SolrRequestInfo.clearRequestInfo();\n    }\n\n    for (int i = 0; i < queries.length; i++) {\n      org.apache.lucene.search.QueryUtils.check(queries[i]);\n      for (int j = i; j < queries.length; j++) {\n        org.apache.lucene.search.QueryUtils.checkEqual(queries[i], queries[j]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestOverriddenPrefixQueryForCustomFieldType#assertQueryEquals(SolrQueryRequest,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestOverriddenPrefixQueryForCustomFieldType#assertQueryEquals(SolrQueryRequest,String...).mjava","sourceNew":"  /**\n   * @see org.apache.lucene.search.QueryUtils#check\n   * @see org.apache.lucene.search.QueryUtils#checkEqual\n   */\n  protected void assertQueryEquals(final SolrQueryRequest req,\n                                   final String... inputs) throws Exception {\n\n    final Query[] queries = new Query[inputs.length];\n\n    try {\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      for (int i = 0; i < inputs.length; i++) {\n        queries[i] = (QParser.getParser(inputs[i], req).getQuery());\n      }\n    } finally {\n      SolrRequestInfo.clearRequestInfo();\n    }\n\n    for (int i = 0; i < queries.length; i++) {\n      org.apache.lucene.search.QueryUtils.check(queries[i]);\n      for (int j = i; j < queries.length; j++) {\n        org.apache.lucene.search.QueryUtils.checkEqual(queries[i], queries[j]);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @see org.apache.lucene.search.QueryUtils#check\n   * @see org.apache.lucene.search.QueryUtils#checkEqual\n   */\n  protected void assertQueryEquals(final SolrQueryRequest req,\n                                   final String... inputs) throws Exception {\n\n    final Query[] queries = new Query[inputs.length];\n\n    try {\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));\n      for (int i = 0; i < inputs.length; i++) {\n        queries[i] = (QParser.getParser(inputs[i], null, req).getQuery());\n      }\n    } finally {\n      SolrRequestInfo.clearRequestInfo();\n    }\n\n    for (int i = 0; i < queries.length; i++) {\n      org.apache.lucene.search.QueryUtils.check(queries[i]);\n      for (int j = i; j < queries.length; j++) {\n        org.apache.lucene.search.QueryUtils.checkEqual(queries[i], queries[j]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8bca25eefa1f2205e2b0ef713701dc3a0fecd702":["ee9efffeff762194ca606ff91a43e2f6f56a430f","cc5ee54a993d26579e3fe1f8f2a696b46b61c48f"],"ee9efffeff762194ca606ff91a43e2f6f56a430f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cc5ee54a993d26579e3fe1f8f2a696b46b61c48f":["ee9efffeff762194ca606ff91a43e2f6f56a430f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["ee9efffeff762194ca606ff91a43e2f6f56a430f","8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["ee9efffeff762194ca606ff91a43e2f6f56a430f","8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702"]},"commit2Childs":{"8bca25eefa1f2205e2b0ef713701dc3a0fecd702":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ee9efffeff762194ca606ff91a43e2f6f56a430f":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702","cc5ee54a993d26579e3fe1f8f2a696b46b61c48f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ee9efffeff762194ca606ff91a43e2f6f56a430f"],"cc5ee54a993d26579e3fe1f8f2a696b46b61c48f":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}