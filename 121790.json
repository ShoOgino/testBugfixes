{"path":"src/test/org/apache/lucene/search/TestElevationComparator#getElevatedQuery(String[]).mjava","commits":[{"id":"c7e70cecc56c33998f8f16cd1fbbc5a58de17f28","date":1247656558,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestElevationComparator#getElevatedQuery(String[]).mjava","pathOld":"/dev/null","sourceNew":" private Query getElevatedQuery(String[] vals) {\n   BooleanQuery q = new BooleanQuery(false);\n   q.setBoost(0);\n   int max = (vals.length / 2) + 5;\n   for (int i = 0; i < vals.length - 1; i += 2) {\n     q.add(new TermQuery(new Term(vals[i], vals[i + 1])), BooleanClause.Occur.SHOULD);\n     priority.put(vals[i + 1], new Integer(max--));\n     System.out.println(\" pri doc=\" + vals[i+1] + \" pri=\" + (1+max));\n   }\n   return q;\n }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dbdcb1215009000a7902ef60bba05d7ca9f21305","date":1248281068,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestElevationComparator#getElevatedQuery(String[]).mjava","pathOld":"src/test/org/apache/lucene/search/TestElevationComparator#getElevatedQuery(String[]).mjava","sourceNew":" private Query getElevatedQuery(String[] vals) {\n   BooleanQuery q = new BooleanQuery(false);\n   q.setBoost(0);\n   int max = (vals.length / 2) + 5;\n   for (int i = 0; i < vals.length - 1; i += 2) {\n     q.add(new TermQuery(new Term(vals[i], vals[i + 1])), BooleanClause.Occur.SHOULD);\n     priority.put(vals[i + 1], new Integer(max--));\n     // System.out.println(\" pri doc=\" + vals[i+1] + \" pri=\" + (1+max));\n   }\n   return q;\n }\n\n","sourceOld":" private Query getElevatedQuery(String[] vals) {\n   BooleanQuery q = new BooleanQuery(false);\n   q.setBoost(0);\n   int max = (vals.length / 2) + 5;\n   for (int i = 0; i < vals.length - 1; i += 2) {\n     q.add(new TermQuery(new Term(vals[i], vals[i + 1])), BooleanClause.Occur.SHOULD);\n     priority.put(vals[i + 1], new Integer(max--));\n     System.out.println(\" pri doc=\" + vals[i+1] + \" pri=\" + (1+max));\n   }\n   return q;\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bcde5e3f23911110baa101ed062b544162825b5","date":1254521804,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestElevationComparator#getElevatedQuery(String[]).mjava","pathOld":"src/test/org/apache/lucene/search/TestElevationComparator#getElevatedQuery(String[]).mjava","sourceNew":" private Query getElevatedQuery(String[] vals) {\n   BooleanQuery q = new BooleanQuery(false);\n   q.setBoost(0);\n   int max = (vals.length / 2) + 5;\n   for (int i = 0; i < vals.length - 1; i += 2) {\n     q.add(new TermQuery(new Term(vals[i], vals[i + 1])), BooleanClause.Occur.SHOULD);\n     priority.put(vals[i + 1], Integer.valueOf(max--));\n     // System.out.println(\" pri doc=\" + vals[i+1] + \" pri=\" + (1+max));\n   }\n   return q;\n }\n\n","sourceOld":" private Query getElevatedQuery(String[] vals) {\n   BooleanQuery q = new BooleanQuery(false);\n   q.setBoost(0);\n   int max = (vals.length / 2) + 5;\n   for (int i = 0; i < vals.length - 1; i += 2) {\n     q.add(new TermQuery(new Term(vals[i], vals[i + 1])), BooleanClause.Occur.SHOULD);\n     priority.put(vals[i + 1], new Integer(max--));\n     // System.out.println(\" pri doc=\" + vals[i+1] + \" pri=\" + (1+max));\n   }\n   return q;\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestElevationComparator#getElevatedQuery(String[]).mjava","pathOld":"src/test/org/apache/lucene/search/TestElevationComparator#getElevatedQuery(String[]).mjava","sourceNew":" private Query getElevatedQuery(String[] vals) {\n   BooleanQuery q = new BooleanQuery(false);\n   q.setBoost(0);\n   int max = (vals.length / 2) + 5;\n   for (int i = 0; i < vals.length - 1; i += 2) {\n     q.add(new TermQuery(new Term(vals[i], vals[i + 1])), BooleanClause.Occur.SHOULD);\n     priority.put(vals[i + 1], Integer.valueOf(max--));\n     // System.out.println(\" pri doc=\" + vals[i+1] + \" pri=\" + (1+max));\n   }\n   return q;\n }\n\n","sourceOld":" private Query getElevatedQuery(String[] vals) {\n   BooleanQuery q = new BooleanQuery(false);\n   q.setBoost(0);\n   int max = (vals.length / 2) + 5;\n   for (int i = 0; i < vals.length - 1; i += 2) {\n     q.add(new TermQuery(new Term(vals[i], vals[i + 1])), BooleanClause.Occur.SHOULD);\n     priority.put(vals[i + 1], Integer.valueOf(max--));\n     // System.out.println(\" pri doc=\" + vals[i+1] + \" pri=\" + (1+max));\n   }\n   return q;\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6bcde5e3f23911110baa101ed062b544162825b5":["dbdcb1215009000a7902ef60bba05d7ca9f21305"],"c7e70cecc56c33998f8f16cd1fbbc5a58de17f28":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dbdcb1215009000a7902ef60bba05d7ca9f21305":["c7e70cecc56c33998f8f16cd1fbbc5a58de17f28"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["6bcde5e3f23911110baa101ed062b544162825b5"]},"commit2Childs":{"6bcde5e3f23911110baa101ed062b544162825b5":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c7e70cecc56c33998f8f16cd1fbbc5a58de17f28":["dbdcb1215009000a7902ef60bba05d7ca9f21305"],"dbdcb1215009000a7902ef60bba05d7ca9f21305":["6bcde5e3f23911110baa101ed062b544162825b5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7e70cecc56c33998f8f16cd1fbbc5a58de17f28"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}