{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/DelimitedTermFrequencyTokenFilterTest#testTermFrequency().mjava","commits":[{"id":"69027ca5ebd5df004fc3727c370f3ab203610027","date":1497045139,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/DelimitedTermFrequencyTokenFilterTest#testTermFrequency().mjava","pathOld":"/dev/null","sourceNew":"  public void testTermFrequency() throws Exception {\n    String test = \"The quick|40 red|4 fox|06 jumped|1 over the lazy|2 brown|123 dogs|1024\";\n    DelimitedTermFrequencyTokenFilter filter =\n        new DelimitedTermFrequencyTokenFilter(whitespaceMockTokenizer(test));\n    CharTermAttribute termAtt = filter.getAttribute(CharTermAttribute.class);\n    TermFrequencyAttribute tfAtt = filter.getAttribute(TermFrequencyAttribute.class);\n    filter.reset();\n    assertTermEquals(\"The\", filter, termAtt, tfAtt, 1);\n    assertTermEquals(\"quick\", filter, termAtt, tfAtt, 40);\n    assertTermEquals(\"red\", filter, termAtt, tfAtt, 4);\n    assertTermEquals(\"fox\", filter, termAtt, tfAtt, 6);\n    assertTermEquals(\"jumped\", filter, termAtt, tfAtt, 1);\n    assertTermEquals(\"over\", filter, termAtt, tfAtt, 1);\n    assertTermEquals(\"the\", filter, termAtt, tfAtt, 1);\n    assertTermEquals(\"lazy\", filter, termAtt, tfAtt, 2);\n    assertTermEquals(\"brown\", filter, termAtt, tfAtt, 123);\n    assertTermEquals(\"dogs\", filter, termAtt, tfAtt, 1024);\n    assertFalse(filter.incrementToken());\n    filter.end();\n    filter.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/DelimitedTermFrequencyTokenFilterTest#testTermFrequency().mjava","pathOld":"/dev/null","sourceNew":"  public void testTermFrequency() throws Exception {\n    String test = \"The quick|40 red|4 fox|06 jumped|1 over the lazy|2 brown|123 dogs|1024\";\n    DelimitedTermFrequencyTokenFilter filter =\n        new DelimitedTermFrequencyTokenFilter(whitespaceMockTokenizer(test));\n    CharTermAttribute termAtt = filter.getAttribute(CharTermAttribute.class);\n    TermFrequencyAttribute tfAtt = filter.getAttribute(TermFrequencyAttribute.class);\n    filter.reset();\n    assertTermEquals(\"The\", filter, termAtt, tfAtt, 1);\n    assertTermEquals(\"quick\", filter, termAtt, tfAtt, 40);\n    assertTermEquals(\"red\", filter, termAtt, tfAtt, 4);\n    assertTermEquals(\"fox\", filter, termAtt, tfAtt, 6);\n    assertTermEquals(\"jumped\", filter, termAtt, tfAtt, 1);\n    assertTermEquals(\"over\", filter, termAtt, tfAtt, 1);\n    assertTermEquals(\"the\", filter, termAtt, tfAtt, 1);\n    assertTermEquals(\"lazy\", filter, termAtt, tfAtt, 2);\n    assertTermEquals(\"brown\", filter, termAtt, tfAtt, 123);\n    assertTermEquals(\"dogs\", filter, termAtt, tfAtt, 1024);\n    assertFalse(filter.incrementToken());\n    filter.end();\n    filter.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/DelimitedTermFrequencyTokenFilterTest#testTermFrequency().mjava","pathOld":"/dev/null","sourceNew":"  public void testTermFrequency() throws Exception {\n    String test = \"The quick|40 red|4 fox|06 jumped|1 over the lazy|2 brown|123 dogs|1024\";\n    DelimitedTermFrequencyTokenFilter filter =\n        new DelimitedTermFrequencyTokenFilter(whitespaceMockTokenizer(test));\n    CharTermAttribute termAtt = filter.getAttribute(CharTermAttribute.class);\n    TermFrequencyAttribute tfAtt = filter.getAttribute(TermFrequencyAttribute.class);\n    filter.reset();\n    assertTermEquals(\"The\", filter, termAtt, tfAtt, 1);\n    assertTermEquals(\"quick\", filter, termAtt, tfAtt, 40);\n    assertTermEquals(\"red\", filter, termAtt, tfAtt, 4);\n    assertTermEquals(\"fox\", filter, termAtt, tfAtt, 6);\n    assertTermEquals(\"jumped\", filter, termAtt, tfAtt, 1);\n    assertTermEquals(\"over\", filter, termAtt, tfAtt, 1);\n    assertTermEquals(\"the\", filter, termAtt, tfAtt, 1);\n    assertTermEquals(\"lazy\", filter, termAtt, tfAtt, 2);\n    assertTermEquals(\"brown\", filter, termAtt, tfAtt, 123);\n    assertTermEquals(\"dogs\", filter, termAtt, tfAtt, 1024);\n    assertFalse(filter.incrementToken());\n    filter.end();\n    filter.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"69027ca5ebd5df004fc3727c370f3ab203610027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","69027ca5ebd5df004fc3727c370f3ab203610027"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","69027ca5ebd5df004fc3727c370f3ab203610027"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"69027ca5ebd5df004fc3727c370f3ab203610027":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["69027ca5ebd5df004fc3727c370f3ab203610027","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}