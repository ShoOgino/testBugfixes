{"path":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#grow(int[],int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#grow(int[],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ArrayUtil#grow(int[],int).mjava","sourceNew":"  public static int[] grow(int[] array, int minSize) {\n    assert minSize >= 0: \"size must be positive (got \" + minSize + \"): likely integer overflow?\";\n    if (array.length < minSize) {\n      int[] newArray = new int[oversize(minSize, RamUsageEstimator.NUM_BYTES_INT)];\n      System.arraycopy(array, 0, newArray, 0, array.length);\n      return newArray;\n    } else\n      return array;\n  }\n\n","sourceOld":"  public static int[] grow(int[] array, int minSize) {\n    assert minSize >= 0: \"size must be positive (got \" + minSize + \"): likely integer overflow?\";\n    if (array.length < minSize) {\n      int[] newArray = new int[oversize(minSize, RamUsageEstimator.NUM_BYTES_INT)];\n      System.arraycopy(array, 0, newArray, 0, array.length);\n      return newArray;\n    } else\n      return array;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f226a8b088dd9c8f6ab287a77237c4aa00a238e5","date":1456187572,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#grow(int[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#grow(int[],int).mjava","sourceNew":"  public static int[] grow(int[] array, int minSize) {\n    assert minSize >= 0: \"size must be positive (got \" + minSize + \"): likely integer overflow?\";\n    if (array.length < minSize) {\n      int[] newArray = new int[oversize(minSize, Integer.BYTES)];\n      System.arraycopy(array, 0, newArray, 0, array.length);\n      return newArray;\n    } else\n      return array;\n  }\n\n","sourceOld":"  public static int[] grow(int[] array, int minSize) {\n    assert minSize >= 0: \"size must be positive (got \" + minSize + \"): likely integer overflow?\";\n    if (array.length < minSize) {\n      int[] newArray = new int[oversize(minSize, RamUsageEstimator.NUM_BYTES_INT)];\n      System.arraycopy(array, 0, newArray, 0, array.length);\n      return newArray;\n    } else\n      return array;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"419a8f52c6635419beb951255cacbbb281044c57","date":1456189353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#grow(int[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#grow(int[],int).mjava","sourceNew":"  public static int[] grow(int[] array, int minSize) {\n    assert minSize >= 0: \"size must be positive (got \" + minSize + \"): likely integer overflow?\";\n    if (array.length < minSize) {\n      int[] newArray = new int[oversize(minSize, Integer.BYTES)];\n      System.arraycopy(array, 0, newArray, 0, array.length);\n      return newArray;\n    } else\n      return array;\n  }\n\n","sourceOld":"  public static int[] grow(int[] array, int minSize) {\n    assert minSize >= 0: \"size must be positive (got \" + minSize + \"): likely integer overflow?\";\n    if (array.length < minSize) {\n      int[] newArray = new int[oversize(minSize, RamUsageEstimator.NUM_BYTES_INT)];\n      System.arraycopy(array, 0, newArray, 0, array.length);\n      return newArray;\n    } else\n      return array;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcb85e0b9bc3b04eccb9b0f54a53706c8ac0659f","date":1464187721,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#grow(int[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#grow(int[],int).mjava","sourceNew":"  public static int[] grow(int[] array, int minSize) {\n    assert minSize >= 0: \"size must be positive (got \" + minSize + \"): likely integer overflow?\";\n    if (array.length < minSize) {\n      return Arrays.copyOf(array, oversize(minSize, Integer.BYTES));\n    } else\n      return array;\n  }\n\n","sourceOld":"  public static int[] grow(int[] array, int minSize) {\n    assert minSize >= 0: \"size must be positive (got \" + minSize + \"): likely integer overflow?\";\n    if (array.length < minSize) {\n      int[] newArray = new int[oversize(minSize, Integer.BYTES)];\n      System.arraycopy(array, 0, newArray, 0, array.length);\n      return newArray;\n    } else\n      return array;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#grow(int[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#grow(int[],int).mjava","sourceNew":"  public static int[] grow(int[] array, int minSize) {\n    assert minSize >= 0: \"size must be positive (got \" + minSize + \"): likely integer overflow?\";\n    if (array.length < minSize) {\n      return Arrays.copyOf(array, oversize(minSize, Integer.BYTES));\n    } else\n      return array;\n  }\n\n","sourceOld":"  public static int[] grow(int[] array, int minSize) {\n    assert minSize >= 0: \"size must be positive (got \" + minSize + \"): likely integer overflow?\";\n    if (array.length < minSize) {\n      int[] newArray = new int[oversize(minSize, Integer.BYTES)];\n      System.arraycopy(array, 0, newArray, 0, array.length);\n      return newArray;\n    } else\n      return array;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#grow(int[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#grow(int[],int).mjava","sourceNew":"  public static int[] grow(int[] array, int minSize) {\n    assert minSize >= 0: \"size must be positive (got \" + minSize + \"): likely integer overflow?\";\n    if (array.length < minSize) {\n      return Arrays.copyOf(array, oversize(minSize, Integer.BYTES));\n    } else\n      return array;\n  }\n\n","sourceOld":"  public static int[] grow(int[] array, int minSize) {\n    assert minSize >= 0: \"size must be positive (got \" + minSize + \"): likely integer overflow?\";\n    if (array.length < minSize) {\n      int[] newArray = new int[oversize(minSize, Integer.BYTES)];\n      System.arraycopy(array, 0, newArray, 0, array.length);\n      return newArray;\n    } else\n      return array;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#grow(int[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#grow(int[],int).mjava","sourceNew":"  public static int[] grow(int[] array, int minSize) {\n    assert minSize >= 0: \"size must be positive (got \" + minSize + \"): likely integer overflow?\";\n    if (array.length < minSize) {\n      return Arrays.copyOf(array, oversize(minSize, Integer.BYTES));\n    } else\n      return array;\n  }\n\n","sourceOld":"  public static int[] grow(int[] array, int minSize) {\n    assert minSize >= 0: \"size must be positive (got \" + minSize + \"): likely integer overflow?\";\n    if (array.length < minSize) {\n      int[] newArray = new int[oversize(minSize, Integer.BYTES)];\n      System.arraycopy(array, 0, newArray, 0, array.length);\n      return newArray;\n    } else\n      return array;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9798d0818e7a880546802b509792d3f3d57babd2","date":1528358901,"type":3,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#grow(int[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#grow(int[],int).mjava","sourceNew":"  /** Returns an array whose size is at least {@code minSize}, generally over-allocating exponentially */\n  public static int[] grow(int[] array, int minSize) {\n    assert minSize >= 0: \"size must be positive (got \" + minSize + \"): likely integer overflow?\";\n    if (array.length < minSize) {\n      return growExact(array, oversize(minSize, Integer.BYTES));\n    } else\n      return array;\n  }\n\n","sourceOld":"  public static int[] grow(int[] array, int minSize) {\n    assert minSize >= 0: \"size must be positive (got \" + minSize + \"): likely integer overflow?\";\n    if (array.length < minSize) {\n      return Arrays.copyOf(array, oversize(minSize, Integer.BYTES));\n    } else\n      return array;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#grow(int[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#grow(int[],int).mjava","sourceNew":"  /** Returns an array whose size is at least {@code minSize}, generally over-allocating exponentially */\n  public static int[] grow(int[] array, int minSize) {\n    assert minSize >= 0: \"size must be positive (got \" + minSize + \"): likely integer overflow?\";\n    if (array.length < minSize) {\n      return growExact(array, oversize(minSize, Integer.BYTES));\n    } else\n      return array;\n  }\n\n","sourceOld":"  public static int[] grow(int[] array, int minSize) {\n    assert minSize >= 0: \"size must be positive (got \" + minSize + \"): likely integer overflow?\";\n    if (array.length < minSize) {\n      return Arrays.copyOf(array, oversize(minSize, Integer.BYTES));\n    } else\n      return array;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#grow(int[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#grow(int[],int).mjava","sourceNew":"  /** Returns an array whose size is at least {@code minSize}, generally over-allocating exponentially */\n  public static int[] grow(int[] array, int minSize) {\n    assert minSize >= 0: \"size must be positive (got \" + minSize + \"): likely integer overflow?\";\n    if (array.length < minSize) {\n      return growExact(array, oversize(minSize, Integer.BYTES));\n    } else\n      return array;\n  }\n\n","sourceOld":"  public static int[] grow(int[] array, int minSize) {\n    assert minSize >= 0: \"size must be positive (got \" + minSize + \"): likely integer overflow?\";\n    if (array.length < minSize) {\n      return Arrays.copyOf(array, oversize(minSize, Integer.BYTES));\n    } else\n      return array;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bcb85e0b9bc3b04eccb9b0f54a53706c8ac0659f":["419a8f52c6635419beb951255cacbbb281044c57"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["419a8f52c6635419beb951255cacbbb281044c57","bcb85e0b9bc3b04eccb9b0f54a53706c8ac0659f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["0e121d43b5a10f2df530f406f935102656e9c4e8","9798d0818e7a880546802b509792d3f3d57babd2"],"419a8f52c6635419beb951255cacbbb281044c57":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","f226a8b088dd9c8f6ab287a77237c4aa00a238e5"],"f226a8b088dd9c8f6ab287a77237c4aa00a238e5":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"83870855d82aba6819217abeff5a40779dbb28b4":["419a8f52c6635419beb951255cacbbb281044c57","0e121d43b5a10f2df530f406f935102656e9c4e8"],"9798d0818e7a880546802b509792d3f3d57babd2":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["419a8f52c6635419beb951255cacbbb281044c57","0e121d43b5a10f2df530f406f935102656e9c4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9798d0818e7a880546802b509792d3f3d57babd2"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["0e121d43b5a10f2df530f406f935102656e9c4e8","9798d0818e7a880546802b509792d3f3d57babd2"]},"commit2Childs":{"bcb85e0b9bc3b04eccb9b0f54a53706c8ac0659f":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["b70042a8a492f7054d480ccdd2be9796510d4327","83870855d82aba6819217abeff5a40779dbb28b4","9798d0818e7a880546802b509792d3f3d57babd2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["419a8f52c6635419beb951255cacbbb281044c57","f226a8b088dd9c8f6ab287a77237c4aa00a238e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"419a8f52c6635419beb951255cacbbb281044c57":["bcb85e0b9bc3b04eccb9b0f54a53706c8ac0659f","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"f226a8b088dd9c8f6ab287a77237c4aa00a238e5":["419a8f52c6635419beb951255cacbbb281044c57"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"9798d0818e7a880546802b509792d3f3d57babd2":["b70042a8a492f7054d480ccdd2be9796510d4327","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}