{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#exists(String,boolean).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#exists(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param path\n   * @return true if path exists\n   * @throws KeeperException\n   * @param retryOnConnLoss  \n   * @throws InterruptedException\n   */\n  public Boolean exists(final String path, boolean retryOnConnLoss)\n      throws KeeperException, InterruptedException {\n    if (retryOnConnLoss) {\n      return zkCmdExecutor.retryOperation(new ZkOperation() {\n        @Override\n        public Boolean execute() throws KeeperException, InterruptedException {\n          return keeper.exists(path, null) != null;\n        }\n      });\n    } else {\n      return keeper.exists(path, null) != null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#exists(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param path\n   * @return true if path exists\n   * @throws KeeperException\n   * @param retryOnConnLoss  \n   * @throws InterruptedException\n   */\n  public Boolean exists(final String path, boolean retryOnConnLoss)\n      throws KeeperException, InterruptedException {\n    if (retryOnConnLoss) {\n      return zkCmdExecutor.retryOperation(new ZkOperation() {\n        @Override\n        public Boolean execute() throws KeeperException, InterruptedException {\n          return keeper.exists(path, null) != null;\n        }\n      });\n    } else {\n      return keeper.exists(path, null) != null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#exists(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param path\n   * @return true if path exists\n   * @throws KeeperException\n   * @param retryOnConnLoss  \n   * @throws InterruptedException\n   */\n  public Boolean exists(final String path, boolean retryOnConnLoss)\n      throws KeeperException, InterruptedException {\n    if (retryOnConnLoss) {\n      return zkCmdExecutor.retryOperation(new ZkOperation() {\n        @Override\n        public Boolean execute() throws KeeperException, InterruptedException {\n          return keeper.exists(path, null) != null;\n        }\n      });\n    } else {\n      return keeper.exists(path, null) != null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd9ddb59e9d33950773d186a8b726b5610ae3aad","date":1341258232,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#exists(String,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#exists(String,boolean).mjava","sourceNew":"  /**\n   * @param path\n   * @return true if path exists\n   * @param retryOnConnLoss  \n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public Boolean exists(final String path, boolean retryOnConnLoss)\n      throws KeeperException, InterruptedException {\n    if (retryOnConnLoss) {\n      return zkCmdExecutor.retryOperation(new ZkOperation() {\n        @Override\n        public Boolean execute() throws KeeperException, InterruptedException {\n          return keeper.exists(path, null) != null;\n        }\n      });\n    } else {\n      return keeper.exists(path, null) != null;\n    }\n  }\n\n","sourceOld":"  /**\n   * @param path\n   * @return true if path exists\n   * @throws KeeperException\n   * @param retryOnConnLoss  \n   * @throws InterruptedException\n   */\n  public Boolean exists(final String path, boolean retryOnConnLoss)\n      throws KeeperException, InterruptedException {\n    if (retryOnConnLoss) {\n      return zkCmdExecutor.retryOperation(new ZkOperation() {\n        @Override\n        public Boolean execute() throws KeeperException, InterruptedException {\n          return keeper.exists(path, null) != null;\n        }\n      });\n    } else {\n      return keeper.exists(path, null) != null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#exists(String,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#exists(String,boolean).mjava","sourceNew":"  /**\n   * @param path\n   * @return true if path exists\n   * @param retryOnConnLoss  \n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public Boolean exists(final String path, boolean retryOnConnLoss)\n      throws KeeperException, InterruptedException {\n    if (retryOnConnLoss) {\n      return zkCmdExecutor.retryOperation(new ZkOperation() {\n        @Override\n        public Boolean execute() throws KeeperException, InterruptedException {\n          return keeper.exists(path, null) != null;\n        }\n      });\n    } else {\n      return keeper.exists(path, null) != null;\n    }\n  }\n\n","sourceOld":"  /**\n   * @param path\n   * @return true if path exists\n   * @throws KeeperException\n   * @param retryOnConnLoss  \n   * @throws InterruptedException\n   */\n  public Boolean exists(final String path, boolean retryOnConnLoss)\n      throws KeeperException, InterruptedException {\n    if (retryOnConnLoss) {\n      return zkCmdExecutor.retryOperation(new ZkOperation() {\n        @Override\n        public Boolean execute() throws KeeperException, InterruptedException {\n          return keeper.exists(path, null) != null;\n        }\n      });\n    } else {\n      return keeper.exists(path, null) != null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#exists(String,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#exists(String,boolean).mjava","sourceNew":"  /**\n   * Returns true if path exists\n   */\n  public Boolean exists(final String path, boolean retryOnConnLoss)\n      throws KeeperException, InterruptedException {\n    if (retryOnConnLoss) {\n      return zkCmdExecutor.retryOperation(new ZkOperation() {\n        @Override\n        public Boolean execute() throws KeeperException, InterruptedException {\n          return keeper.exists(path, null) != null;\n        }\n      });\n    } else {\n      return keeper.exists(path, null) != null;\n    }\n  }\n\n","sourceOld":"  /**\n   * @param path\n   * @return true if path exists\n   * @param retryOnConnLoss  \n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public Boolean exists(final String path, boolean retryOnConnLoss)\n      throws KeeperException, InterruptedException {\n    if (retryOnConnLoss) {\n      return zkCmdExecutor.retryOperation(new ZkOperation() {\n        @Override\n        public Boolean execute() throws KeeperException, InterruptedException {\n          return keeper.exists(path, null) != null;\n        }\n      });\n    } else {\n      return keeper.exists(path, null) != null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eacdba691ec9e0ff24c589e65a852b9915265e6","date":1508917488,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#exists(String,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#exists(String,boolean).mjava","sourceNew":"  /**\n   * Returns true if path exists\n   */\n  public Boolean exists(final String path, boolean retryOnConnLoss)\n      throws KeeperException, InterruptedException {\n    if (retryOnConnLoss) {\n      return zkCmdExecutor.retryOperation(() -> keeper.exists(path, null) != null);\n    } else {\n      return keeper.exists(path, null) != null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns true if path exists\n   */\n  public Boolean exists(final String path, boolean retryOnConnLoss)\n      throws KeeperException, InterruptedException {\n    if (retryOnConnLoss) {\n      return zkCmdExecutor.retryOperation(new ZkOperation() {\n        @Override\n        public Boolean execute() throws KeeperException, InterruptedException {\n          return keeper.exists(path, null) != null;\n        }\n      });\n    } else {\n      return keeper.exists(path, null) != null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["bd9ddb59e9d33950773d186a8b726b5610ae3aad"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bd9ddb59e9d33950773d186a8b726b5610ae3aad":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","bd9ddb59e9d33950773d186a8b726b5610ae3aad"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"1eacdba691ec9e0ff24c589e65a852b9915265e6":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1eacdba691ec9e0ff24c589e65a852b9915265e6"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["1eacdba691ec9e0ff24c589e65a852b9915265e6"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"bd9ddb59e9d33950773d186a8b726b5610ae3aad":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","bd9ddb59e9d33950773d186a8b726b5610ae3aad","fe33227f6805edab2036cbb80645cc4e2d1fa424","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"1eacdba691ec9e0ff24c589e65a852b9915265e6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","fe33227f6805edab2036cbb80645cc4e2d1fa424","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}