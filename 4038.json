{"path":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","sourceNew":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = atLeast(10);\n      for (int i=0; i<num; i++) {\n        int level = random.nextInt(3);\n        q1 = randBoolQuery(new Random(random.nextLong()), random.nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random, q1,searcher);\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, true);\n\n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, false);\n        \n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","sourceOld":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = atLeast(10);\n      for (int i=0; i<num; i++) {\n        int level = random.nextInt(3);\n        q1 = randBoolQuery(new Random(random.nextLong()), random.nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random, q1,searcher);\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, true);\n\n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, false);\n        \n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","sourceNew":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = atLeast(10);\n      for (int i=0; i<num; i++) {\n        int level = random().nextInt(3);\n        q1 = randBoolQuery(new Random(random().nextLong()), random().nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random(), q1,searcher);\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, true);\n\n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, false);\n        \n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","sourceOld":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = atLeast(10);\n      for (int i=0; i<num; i++) {\n        int level = random.nextInt(3);\n        q1 = randBoolQuery(new Random(random.nextLong()), random.nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random, q1,searcher);\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, true);\n\n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, false);\n        \n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","bugFix":null,"bugIntro":["b0c73b4e6b72cca35c7f115ab543ce9dcf50d8b5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b0c73b4e6b72cca35c7f115ab543ce9dcf50d8b5","date":1344439048,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","sourceNew":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = atLeast(20);\n      for (int i=0; i<num; i++) {\n        int level = random().nextInt(3);\n        q1 = randBoolQuery(new Random(random().nextLong()), random().nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random(), q1,searcher); // baseline sim\n        try {\n          // a little hackish, QueryUtils.check is too costly to do on bigSearcher in this loop.\n          searcher.setSimilarity(bigSearcher.getSimilarity()); // random sim\n          QueryUtils.check(random(), q1, searcher);\n        } finally {\n          searcher.setSimilarity(new DefaultSimilarity()); // restore\n        }\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, true);\n\n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, false);\n        \n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","sourceOld":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = atLeast(10);\n      for (int i=0; i<num; i++) {\n        int level = random().nextInt(3);\n        q1 = randBoolQuery(new Random(random().nextLong()), random().nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random(), q1,searcher);\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, true);\n\n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, false);\n        \n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","bugFix":["f83af14a2a8131b14d7aee6274c740334e0363d3","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","sourceNew":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = atLeast(20);\n      for (int i=0; i<num; i++) {\n        int level = random().nextInt(3);\n        q1 = randBoolQuery(new Random(random().nextLong()), random().nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random(), q1,searcher); // baseline sim\n        try {\n          // a little hackish, QueryUtils.check is too costly to do on bigSearcher in this loop.\n          searcher.setSimilarity(bigSearcher.getSimilarity()); // random sim\n          QueryUtils.check(random(), q1, searcher);\n        } finally {\n          searcher.setSimilarity(new DefaultSimilarity()); // restore\n        }\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, true);\n\n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, false);\n        \n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","sourceOld":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = atLeast(10);\n      for (int i=0; i<num; i++) {\n        int level = random().nextInt(3);\n        q1 = randBoolQuery(new Random(random().nextLong()), random().nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random(), q1,searcher);\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, true);\n\n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, false);\n        \n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","sourceNew":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = atLeast(20);\n      for (int i=0; i<num; i++) {\n        int level = random().nextInt(3);\n        q1 = randBoolQuery(new Random(random().nextLong()), random().nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random(), q1,searcher); // baseline sim\n        try {\n          // a little hackish, QueryUtils.check is too costly to do on bigSearcher in this loop.\n          searcher.setSimilarity(bigSearcher.getSimilarity()); // random sim\n          QueryUtils.check(random(), q1, searcher);\n        } finally {\n          searcher.setSimilarity(new DefaultSimilarity()); // restore\n        }\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, true);\n\n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, false);\n        \n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","sourceOld":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = atLeast(10);\n      for (int i=0; i<num; i++) {\n        int level = random().nextInt(3);\n        q1 = randBoolQuery(new Random(random().nextLong()), random().nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random(), q1,searcher);\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, true);\n\n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, false);\n        \n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","date":1421314520,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","sourceNew":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = atLeast(20);\n      for (int i=0; i<num; i++) {\n        int level = random().nextInt(3);\n        q1 = randBoolQuery(new Random(random().nextLong()), random().nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random(), q1,searcher); // baseline sim\n        try {\n          // a little hackish, QueryUtils.check is too costly to do on bigSearcher in this loop.\n          searcher.setSimilarity(bigSearcher.getSimilarity()); // random sim\n          QueryUtils.check(random(), q1, searcher);\n        } finally {\n          searcher.setSimilarity(new DefaultSimilarity()); // restore\n        }\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true);\n\n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true);\n        \n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","sourceOld":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = atLeast(20);\n      for (int i=0; i<num; i++) {\n        int level = random().nextInt(3);\n        q1 = randBoolQuery(new Random(random().nextLong()), random().nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random(), q1,searcher); // baseline sim\n        try {\n          // a little hackish, QueryUtils.check is too costly to do on bigSearcher in this loop.\n          searcher.setSimilarity(bigSearcher.getSimilarity()); // random sim\n          QueryUtils.check(random(), q1, searcher);\n        } finally {\n          searcher.setSimilarity(new DefaultSimilarity()); // restore\n        }\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, true);\n\n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, false);\n        \n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","bugFix":null,"bugIntro":["7c82b0d4b7bf499a159eeff92add20bac6599cc1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","sourceNew":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = atLeast(20);\n      for (int i=0; i<num; i++) {\n        int level = random().nextInt(3);\n        q1 = randBoolQuery(new Random(random().nextLong()), random().nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random(), q1,searcher); // baseline sim\n        try {\n          // a little hackish, QueryUtils.check is too costly to do on bigSearcher in this loop.\n          searcher.setSimilarity(bigSearcher.getSimilarity()); // random sim\n          QueryUtils.check(random(), q1, searcher);\n        } finally {\n          searcher.setSimilarity(new DefaultSimilarity()); // restore\n        }\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true);\n\n        searcher.search(q1, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true);\n        \n        searcher.search(q1, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","sourceOld":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = atLeast(20);\n      for (int i=0; i<num; i++) {\n        int level = random().nextInt(3);\n        q1 = randBoolQuery(new Random(random().nextLong()), random().nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random(), q1,searcher); // baseline sim\n        try {\n          // a little hackish, QueryUtils.check is too costly to do on bigSearcher in this loop.\n          searcher.setSimilarity(bigSearcher.getSimilarity()); // random sim\n          QueryUtils.check(random(), q1, searcher);\n        } finally {\n          searcher.setSimilarity(new DefaultSimilarity()); // restore\n        }\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true);\n\n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true);\n        \n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"485545da3b4429d6f138b4baac573a97820ee93b","date":1433876557,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","sourceNew":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = atLeast(20);\n      for (int i=0; i<num; i++) {\n        int level = random().nextInt(3);\n        q1 = randBoolQuery(new Random(random().nextLong()), random().nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random(), q1,searcher); // baseline sim\n        try {\n          // a little hackish, QueryUtils.check is too costly to do on bigSearcher in this loop.\n          searcher.setSimilarity(bigSearcher.getSimilarity(true)); // random sim\n          QueryUtils.check(random(), q1, searcher);\n        } finally {\n          searcher.setSimilarity(new DefaultSimilarity()); // restore\n        }\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true);\n\n        searcher.search(q1, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true);\n        \n        searcher.search(q1, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","sourceOld":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = atLeast(20);\n      for (int i=0; i<num; i++) {\n        int level = random().nextInt(3);\n        q1 = randBoolQuery(new Random(random().nextLong()), random().nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random(), q1,searcher); // baseline sim\n        try {\n          // a little hackish, QueryUtils.check is too costly to do on bigSearcher in this loop.\n          searcher.setSimilarity(bigSearcher.getSimilarity()); // random sim\n          QueryUtils.check(random(), q1, searcher);\n        } finally {\n          searcher.setSimilarity(new DefaultSimilarity()); // restore\n        }\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true);\n\n        searcher.search(q1, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true);\n        \n        searcher.search(q1, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","sourceNew":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = atLeast(20);\n      for (int i=0; i<num; i++) {\n        int level = random().nextInt(3);\n        q1 = randBoolQuery(new Random(random().nextLong()), random().nextBoolean(), level, field, vals, null).build();\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random(), q1,searcher); // baseline sim\n        try {\n          // a little hackish, QueryUtils.check is too costly to do on bigSearcher in this loop.\n          searcher.setSimilarity(bigSearcher.getSimilarity(true)); // random sim\n          QueryUtils.check(random(), q1, searcher);\n        } finally {\n          searcher.setSimilarity(new DefaultSimilarity()); // restore\n        }\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true);\n\n        searcher.search(q1, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true);\n        \n        searcher.search(q1, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery.Builder q3 = new BooleanQuery.Builder();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3.build(), 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","sourceOld":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = atLeast(20);\n      for (int i=0; i<num; i++) {\n        int level = random().nextInt(3);\n        q1 = randBoolQuery(new Random(random().nextLong()), random().nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random(), q1,searcher); // baseline sim\n        try {\n          // a little hackish, QueryUtils.check is too costly to do on bigSearcher in this loop.\n          searcher.setSimilarity(bigSearcher.getSimilarity(true)); // random sim\n          QueryUtils.check(random(), q1, searcher);\n        } finally {\n          searcher.setSimilarity(new DefaultSimilarity()); // restore\n        }\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true);\n\n        searcher.search(q1, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true);\n        \n        searcher.search(q1, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"81d0720146de53dd3a4a023d2a3d1089d86d748d","date":1442268215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","sourceNew":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = atLeast(20);\n      for (int i=0; i<num; i++) {\n        int level = random().nextInt(3);\n        q1 = randBoolQuery(new Random(random().nextLong()), random().nextBoolean(), level, field, vals, null).build();\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random(), q1,searcher); // baseline sim\n        try {\n          // a little hackish, QueryUtils.check is too costly to do on bigSearcher in this loop.\n          searcher.setSimilarity(bigSearcher.getSimilarity(true)); // random sim\n          QueryUtils.check(random(), q1, searcher);\n        } finally {\n          searcher.setSimilarity(new ClassicSimilarity()); // restore\n        }\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true);\n\n        searcher.search(q1, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true);\n        \n        searcher.search(q1, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery.Builder q3 = new BooleanQuery.Builder();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3.build(), 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","sourceOld":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = atLeast(20);\n      for (int i=0; i<num; i++) {\n        int level = random().nextInt(3);\n        q1 = randBoolQuery(new Random(random().nextLong()), random().nextBoolean(), level, field, vals, null).build();\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random(), q1,searcher); // baseline sim\n        try {\n          // a little hackish, QueryUtils.check is too costly to do on bigSearcher in this loop.\n          searcher.setSimilarity(bigSearcher.getSimilarity(true)); // random sim\n          QueryUtils.check(random(), q1, searcher);\n        } finally {\n          searcher.setSimilarity(new DefaultSimilarity()); // restore\n        }\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true);\n\n        searcher.search(q1, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true);\n        \n        searcher.search(q1, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery.Builder q3 = new BooleanQuery.Builder();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3.build(), 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c82b0d4b7bf499a159eeff92add20bac6599cc1","date":1465223716,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","sourceNew":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = atLeast(20);\n      for (int i=0; i<num; i++) {\n        int level = random().nextInt(3);\n        q1 = randBoolQuery(new Random(random().nextLong()), random().nextBoolean(), level, field, vals, null).build();\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random(), q1,searcher); // baseline sim\n        try {\n          // a little hackish, QueryUtils.check is too costly to do on bigSearcher in this loop.\n          searcher.setSimilarity(bigSearcher.getSimilarity(true)); // random sim\n          QueryUtils.check(random(), q1, searcher);\n        } finally {\n          searcher.setSimilarity(new ClassicSimilarity()); // restore\n        }\n\n        // check diff (randomized) scorers (from AssertingSearcher) produce the same results\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000, false, true, true);\n        searcher.search(q1, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n        collector = TopFieldCollector.create(sort, 1000, false, true, true);\n        searcher.search(q1, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery.Builder q3 = new BooleanQuery.Builder();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3.build(), 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n\n        // test diff (randomized) scorers produce the same results on bigSearcher as well\n        collector = TopFieldCollector.create(sort, 1000 * mulFactor, false, true, true);\n        bigSearcher.search(q1, collector);\n        hits1 = collector.topDocs().scoreDocs;\n        collector = TopFieldCollector.create(sort, 1000 * mulFactor, false, true, true);\n        bigSearcher.search(q1, collector);\n        hits2 = collector.topDocs().scoreDocs;\n        CheckHits.checkEqual(q1, hits1, hits2);\n        \n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","sourceOld":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = atLeast(20);\n      for (int i=0; i<num; i++) {\n        int level = random().nextInt(3);\n        q1 = randBoolQuery(new Random(random().nextLong()), random().nextBoolean(), level, field, vals, null).build();\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random(), q1,searcher); // baseline sim\n        try {\n          // a little hackish, QueryUtils.check is too costly to do on bigSearcher in this loop.\n          searcher.setSimilarity(bigSearcher.getSimilarity(true)); // random sim\n          QueryUtils.check(random(), q1, searcher);\n        } finally {\n          searcher.setSimilarity(new ClassicSimilarity()); // restore\n        }\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true);\n\n        searcher.search(q1, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true);\n        \n        searcher.search(q1, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery.Builder q3 = new BooleanQuery.Builder();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3.build(), 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","bugFix":["131a9e895609b4da33662dc087e0bc6303e1e29c","5ea6fc03e82fd6d988bc20c201471202ceca0f0e","f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"191128ac5b85671b1671e2c857437694283b6ebf","date":1465297861,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","sourceNew":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = atLeast(20);\n      for (int i=0; i<num; i++) {\n        int level = random().nextInt(3);\n        q1 = randBoolQuery(new Random(random().nextLong()), random().nextBoolean(), level, field, vals, null).build();\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random(), q1,searcher); // baseline sim\n        try {\n          // a little hackish, QueryUtils.check is too costly to do on bigSearcher in this loop.\n          searcher.setSimilarity(bigSearcher.getSimilarity(true)); // random sim\n          QueryUtils.check(random(), q1, searcher);\n        } finally {\n          searcher.setSimilarity(new ClassicSimilarity()); // restore\n        }\n\n        // check diff (randomized) scorers (from AssertingSearcher) produce the same results\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000, false, true, true);\n        searcher.search(q1, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n        collector = TopFieldCollector.create(sort, 1000, false, true, true);\n        searcher.search(q1, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery.Builder q3 = new BooleanQuery.Builder();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3.build(), 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n\n        // test diff (randomized) scorers produce the same results on bigSearcher as well\n        collector = TopFieldCollector.create(sort, 1000 * mulFactor, false, true, true);\n        bigSearcher.search(q1, collector);\n        hits1 = collector.topDocs().scoreDocs;\n        collector = TopFieldCollector.create(sort, 1000 * mulFactor, false, true, true);\n        bigSearcher.search(q1, collector);\n        hits2 = collector.topDocs().scoreDocs;\n        CheckHits.checkEqual(q1, hits1, hits2);\n        \n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","sourceOld":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = atLeast(20);\n      for (int i=0; i<num; i++) {\n        int level = random().nextInt(3);\n        q1 = randBoolQuery(new Random(random().nextLong()), random().nextBoolean(), level, field, vals, null).build();\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random(), q1,searcher); // baseline sim\n        try {\n          // a little hackish, QueryUtils.check is too costly to do on bigSearcher in this loop.\n          searcher.setSimilarity(bigSearcher.getSimilarity(true)); // random sim\n          QueryUtils.check(random(), q1, searcher);\n        } finally {\n          searcher.setSimilarity(new ClassicSimilarity()); // restore\n        }\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true);\n\n        searcher.search(q1, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true);\n        \n        searcher.search(q1, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery.Builder q3 = new BooleanQuery.Builder();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3.build(), 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","sourceNew":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = atLeast(20);\n      for (int i=0; i<num; i++) {\n        int level = random().nextInt(3);\n        q1 = randBoolQuery(new Random(random().nextLong()), random().nextBoolean(), level, field, vals, null).build();\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random(), q1,searcher); // baseline sim\n        try {\n          // a little hackish, QueryUtils.check is too costly to do on bigSearcher in this loop.\n          searcher.setSimilarity(bigSearcher.getSimilarity(true)); // random sim\n          QueryUtils.check(random(), q1, searcher);\n        } finally {\n          searcher.setSimilarity(new ClassicSimilarity()); // restore\n        }\n\n        // check diff (randomized) scorers (from AssertingSearcher) produce the same results\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000, false, true, true);\n        searcher.search(q1, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n        collector = TopFieldCollector.create(sort, 1000, false, true, true);\n        searcher.search(q1, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery.Builder q3 = new BooleanQuery.Builder();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3.build(), 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n\n        // test diff (randomized) scorers produce the same results on bigSearcher as well\n        collector = TopFieldCollector.create(sort, 1000 * mulFactor, false, true, true);\n        bigSearcher.search(q1, collector);\n        hits1 = collector.topDocs().scoreDocs;\n        collector = TopFieldCollector.create(sort, 1000 * mulFactor, false, true, true);\n        bigSearcher.search(q1, collector);\n        hits2 = collector.topDocs().scoreDocs;\n        CheckHits.checkEqual(q1, hits1, hits2);\n        \n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","sourceOld":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = atLeast(20);\n      for (int i=0; i<num; i++) {\n        int level = random().nextInt(3);\n        q1 = randBoolQuery(new Random(random().nextLong()), random().nextBoolean(), level, field, vals, null).build();\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random(), q1,searcher); // baseline sim\n        try {\n          // a little hackish, QueryUtils.check is too costly to do on bigSearcher in this loop.\n          searcher.setSimilarity(bigSearcher.getSimilarity(true)); // random sim\n          QueryUtils.check(random(), q1, searcher);\n        } finally {\n          searcher.setSimilarity(new ClassicSimilarity()); // restore\n        }\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true);\n\n        searcher.search(q1, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true);\n        \n        searcher.search(q1, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery.Builder q3 = new BooleanQuery.Builder();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3.build(), 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"404d1ab7f6f396235047017c88d545fec15dafb7","date":1511975378,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","sourceNew":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = atLeast(20);\n      for (int i=0; i<num; i++) {\n        int level = random().nextInt(3);\n        q1 = randBoolQuery(new Random(random().nextLong()), random().nextBoolean(), level, field, vals, null).build();\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random(), q1,searcher); // baseline sim\n        try {\n          // a little hackish, QueryUtils.check is too costly to do on bigSearcher in this loop.\n          searcher.setSimilarity(bigSearcher.getSimilarity(true)); // random sim\n          QueryUtils.check(random(), q1, searcher);\n        } finally {\n          searcher.setSimilarity(new ClassicSimilarity()); // restore\n        }\n\n        // check diff (randomized) scorers (from AssertingSearcher) produce the same results\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000, false, true, true, false);\n        searcher.search(q1, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n        collector = TopFieldCollector.create(sort, 1000, false, true, true, false);\n        searcher.search(q1, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery.Builder q3 = new BooleanQuery.Builder();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3.build(), 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n\n        // test diff (randomized) scorers produce the same results on bigSearcher as well\n        collector = TopFieldCollector.create(sort, 1000 * mulFactor, false, true, true, false);\n        bigSearcher.search(q1, collector);\n        hits1 = collector.topDocs().scoreDocs;\n        collector = TopFieldCollector.create(sort, 1000 * mulFactor, false, true, true, false);\n        bigSearcher.search(q1, collector);\n        hits2 = collector.topDocs().scoreDocs;\n        CheckHits.checkEqual(q1, hits1, hits2);\n        \n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","sourceOld":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = atLeast(20);\n      for (int i=0; i<num; i++) {\n        int level = random().nextInt(3);\n        q1 = randBoolQuery(new Random(random().nextLong()), random().nextBoolean(), level, field, vals, null).build();\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random(), q1,searcher); // baseline sim\n        try {\n          // a little hackish, QueryUtils.check is too costly to do on bigSearcher in this loop.\n          searcher.setSimilarity(bigSearcher.getSimilarity(true)); // random sim\n          QueryUtils.check(random(), q1, searcher);\n        } finally {\n          searcher.setSimilarity(new ClassicSimilarity()); // restore\n        }\n\n        // check diff (randomized) scorers (from AssertingSearcher) produce the same results\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000, false, true, true);\n        searcher.search(q1, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n        collector = TopFieldCollector.create(sort, 1000, false, true, true);\n        searcher.search(q1, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery.Builder q3 = new BooleanQuery.Builder();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3.build(), 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n\n        // test diff (randomized) scorers produce the same results on bigSearcher as well\n        collector = TopFieldCollector.create(sort, 1000 * mulFactor, false, true, true);\n        bigSearcher.search(q1, collector);\n        hits1 = collector.topDocs().scoreDocs;\n        collector = TopFieldCollector.create(sort, 1000 * mulFactor, false, true, true);\n        bigSearcher.search(q1, collector);\n        hits2 = collector.topDocs().scoreDocs;\n        CheckHits.checkEqual(q1, hits1, hits2);\n        \n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","sourceNew":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = atLeast(20);\n      for (int i=0; i<num; i++) {\n        int level = random().nextInt(3);\n        q1 = randBoolQuery(new Random(random().nextLong()), random().nextBoolean(), level, field, vals, null).build();\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random(), q1,searcher); // baseline sim\n        try {\n          // a little hackish, QueryUtils.check is too costly to do on bigSearcher in this loop.\n          searcher.setSimilarity(bigSearcher.getSimilarity(true)); // random sim\n          QueryUtils.check(random(), q1, searcher);\n        } finally {\n          searcher.setSimilarity(new ClassicSimilarity()); // restore\n        }\n\n        // check diff (randomized) scorers (from AssertingSearcher) produce the same results\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000, false, true, true, false);\n        searcher.search(q1, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n        collector = TopFieldCollector.create(sort, 1000, false, true, true, false);\n        searcher.search(q1, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery.Builder q3 = new BooleanQuery.Builder();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3.build(), 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n\n        // test diff (randomized) scorers produce the same results on bigSearcher as well\n        collector = TopFieldCollector.create(sort, 1000 * mulFactor, false, true, true, false);\n        bigSearcher.search(q1, collector);\n        hits1 = collector.topDocs().scoreDocs;\n        collector = TopFieldCollector.create(sort, 1000 * mulFactor, false, true, true, false);\n        bigSearcher.search(q1, collector);\n        hits2 = collector.topDocs().scoreDocs;\n        CheckHits.checkEqual(q1, hits1, hits2);\n        \n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","sourceOld":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = atLeast(20);\n      for (int i=0; i<num; i++) {\n        int level = random().nextInt(3);\n        q1 = randBoolQuery(new Random(random().nextLong()), random().nextBoolean(), level, field, vals, null).build();\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random(), q1,searcher); // baseline sim\n        try {\n          // a little hackish, QueryUtils.check is too costly to do on bigSearcher in this loop.\n          searcher.setSimilarity(bigSearcher.getSimilarity(true)); // random sim\n          QueryUtils.check(random(), q1, searcher);\n        } finally {\n          searcher.setSimilarity(new ClassicSimilarity()); // restore\n        }\n\n        // check diff (randomized) scorers (from AssertingSearcher) produce the same results\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000, false, true, true);\n        searcher.search(q1, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n        collector = TopFieldCollector.create(sort, 1000, false, true, true);\n        searcher.search(q1, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery.Builder q3 = new BooleanQuery.Builder();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3.build(), 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n\n        // test diff (randomized) scorers produce the same results on bigSearcher as well\n        collector = TopFieldCollector.create(sort, 1000 * mulFactor, false, true, true);\n        bigSearcher.search(q1, collector);\n        hits1 = collector.topDocs().scoreDocs;\n        collector = TopFieldCollector.create(sort, 1000 * mulFactor, false, true, true);\n        bigSearcher.search(q1, collector);\n        hits2 = collector.topDocs().scoreDocs;\n        CheckHits.checkEqual(q1, hits1, hits2);\n        \n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68d6cb7f0f019661a784bd0e5a21e85b5f812af6","date":1515075216,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","sourceNew":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = atLeast(20);\n      for (int i=0; i<num; i++) {\n        int level = random().nextInt(3);\n        q1 = randBoolQuery(new Random(random().nextLong()), random().nextBoolean(), level, field, vals, null).build();\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random(), q1,searcher); // baseline sim\n        try {\n          // a little hackish, QueryUtils.check is too costly to do on bigSearcher in this loop.\n          searcher.setSimilarity(bigSearcher.getSimilarity()); // random sim\n          QueryUtils.check(random(), q1, searcher);\n        } finally {\n          searcher.setSimilarity(new ClassicSimilarity()); // restore\n        }\n\n        // check diff (randomized) scorers (from AssertingSearcher) produce the same results\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000, false, true, true, false);\n        searcher.search(q1, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n        collector = TopFieldCollector.create(sort, 1000, false, true, true, false);\n        searcher.search(q1, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery.Builder q3 = new BooleanQuery.Builder();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3.build(), 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n\n        // test diff (randomized) scorers produce the same results on bigSearcher as well\n        collector = TopFieldCollector.create(sort, 1000 * mulFactor, false, true, true, false);\n        bigSearcher.search(q1, collector);\n        hits1 = collector.topDocs().scoreDocs;\n        collector = TopFieldCollector.create(sort, 1000 * mulFactor, false, true, true, false);\n        bigSearcher.search(q1, collector);\n        hits2 = collector.topDocs().scoreDocs;\n        CheckHits.checkEqual(q1, hits1, hits2);\n        \n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","sourceOld":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = atLeast(20);\n      for (int i=0; i<num; i++) {\n        int level = random().nextInt(3);\n        q1 = randBoolQuery(new Random(random().nextLong()), random().nextBoolean(), level, field, vals, null).build();\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random(), q1,searcher); // baseline sim\n        try {\n          // a little hackish, QueryUtils.check is too costly to do on bigSearcher in this loop.\n          searcher.setSimilarity(bigSearcher.getSimilarity(true)); // random sim\n          QueryUtils.check(random(), q1, searcher);\n        } finally {\n          searcher.setSimilarity(new ClassicSimilarity()); // restore\n        }\n\n        // check diff (randomized) scorers (from AssertingSearcher) produce the same results\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000, false, true, true, false);\n        searcher.search(q1, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n        collector = TopFieldCollector.create(sort, 1000, false, true, true, false);\n        searcher.search(q1, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery.Builder q3 = new BooleanQuery.Builder();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3.build(), 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n\n        // test diff (randomized) scorers produce the same results on bigSearcher as well\n        collector = TopFieldCollector.create(sort, 1000 * mulFactor, false, true, true, false);\n        bigSearcher.search(q1, collector);\n        hits1 = collector.topDocs().scoreDocs;\n        collector = TopFieldCollector.create(sort, 1000 * mulFactor, false, true, true, false);\n        bigSearcher.search(q1, collector);\n        hits2 = collector.topDocs().scoreDocs;\n        CheckHits.checkEqual(q1, hits1, hits2);\n        \n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","sourceNew":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = atLeast(20);\n      for (int i=0; i<num; i++) {\n        int level = random().nextInt(3);\n        q1 = randBoolQuery(new Random(random().nextLong()), random().nextBoolean(), level, field, vals, null).build();\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random(), q1,searcher); // baseline sim\n        try {\n          // a little hackish, QueryUtils.check is too costly to do on bigSearcher in this loop.\n          searcher.setSimilarity(bigSearcher.getSimilarity()); // random sim\n          QueryUtils.check(random(), q1, searcher);\n        } finally {\n          searcher.setSimilarity(new ClassicSimilarity()); // restore\n        }\n\n        // check diff (randomized) scorers (from AssertingSearcher) produce the same results\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000, false, true, true, false);\n        searcher.search(q1, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n        collector = TopFieldCollector.create(sort, 1000, false, true, true, false);\n        searcher.search(q1, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery.Builder q3 = new BooleanQuery.Builder();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3.build(), 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n\n        // test diff (randomized) scorers produce the same results on bigSearcher as well\n        collector = TopFieldCollector.create(sort, 1000 * mulFactor, false, true, true, false);\n        bigSearcher.search(q1, collector);\n        hits1 = collector.topDocs().scoreDocs;\n        collector = TopFieldCollector.create(sort, 1000 * mulFactor, false, true, true, false);\n        bigSearcher.search(q1, collector);\n        hits2 = collector.topDocs().scoreDocs;\n        CheckHits.checkEqual(q1, hits1, hits2);\n        \n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","sourceOld":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = atLeast(20);\n      for (int i=0; i<num; i++) {\n        int level = random().nextInt(3);\n        q1 = randBoolQuery(new Random(random().nextLong()), random().nextBoolean(), level, field, vals, null).build();\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random(), q1,searcher); // baseline sim\n        try {\n          // a little hackish, QueryUtils.check is too costly to do on bigSearcher in this loop.\n          searcher.setSimilarity(bigSearcher.getSimilarity(true)); // random sim\n          QueryUtils.check(random(), q1, searcher);\n        } finally {\n          searcher.setSimilarity(new ClassicSimilarity()); // restore\n        }\n\n        // check diff (randomized) scorers (from AssertingSearcher) produce the same results\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000, false, true, true, false);\n        searcher.search(q1, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n        collector = TopFieldCollector.create(sort, 1000, false, true, true, false);\n        searcher.search(q1, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery.Builder q3 = new BooleanQuery.Builder();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3.build(), 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n\n        // test diff (randomized) scorers produce the same results on bigSearcher as well\n        collector = TopFieldCollector.create(sort, 1000 * mulFactor, false, true, true, false);\n        bigSearcher.search(q1, collector);\n        hits1 = collector.topDocs().scoreDocs;\n        collector = TopFieldCollector.create(sort, 1000 * mulFactor, false, true, true, false);\n        bigSearcher.search(q1, collector);\n        hits2 = collector.topDocs().scoreDocs;\n        CheckHits.checkEqual(q1, hits1, hits2);\n        \n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81fff83bdb893c1471efd78f6a9a3ce4f98120b9","date":1531895937,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","sourceNew":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = atLeast(20);\n      for (int i=0; i<num; i++) {\n        int level = random().nextInt(3);\n        q1 = randBoolQuery(new Random(random().nextLong()), random().nextBoolean(), level, field, vals, null).build();\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random(), q1,searcher); // baseline sim\n        try {\n          // a little hackish, QueryUtils.check is too costly to do on bigSearcher in this loop.\n          searcher.setSimilarity(bigSearcher.getSimilarity()); // random sim\n          QueryUtils.check(random(), q1, searcher);\n        } finally {\n          searcher.setSimilarity(new ClassicSimilarity()); // restore\n        }\n\n        // check diff (randomized) scorers (from AssertingSearcher) produce the same results\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000, false, true, false);\n        searcher.search(q1, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n        collector = TopFieldCollector.create(sort, 1000, false, true, false);\n        searcher.search(q1, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery.Builder q3 = new BooleanQuery.Builder();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3.build(), 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n\n        // test diff (randomized) scorers produce the same results on bigSearcher as well\n        collector = TopFieldCollector.create(sort, 1000 * mulFactor, false, true, false);\n        bigSearcher.search(q1, collector);\n        hits1 = collector.topDocs().scoreDocs;\n        collector = TopFieldCollector.create(sort, 1000 * mulFactor, false, true, false);\n        bigSearcher.search(q1, collector);\n        hits2 = collector.topDocs().scoreDocs;\n        CheckHits.checkEqual(q1, hits1, hits2);\n        \n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","sourceOld":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = atLeast(20);\n      for (int i=0; i<num; i++) {\n        int level = random().nextInt(3);\n        q1 = randBoolQuery(new Random(random().nextLong()), random().nextBoolean(), level, field, vals, null).build();\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random(), q1,searcher); // baseline sim\n        try {\n          // a little hackish, QueryUtils.check is too costly to do on bigSearcher in this loop.\n          searcher.setSimilarity(bigSearcher.getSimilarity()); // random sim\n          QueryUtils.check(random(), q1, searcher);\n        } finally {\n          searcher.setSimilarity(new ClassicSimilarity()); // restore\n        }\n\n        // check diff (randomized) scorers (from AssertingSearcher) produce the same results\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000, false, true, true, false);\n        searcher.search(q1, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n        collector = TopFieldCollector.create(sort, 1000, false, true, true, false);\n        searcher.search(q1, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery.Builder q3 = new BooleanQuery.Builder();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3.build(), 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n\n        // test diff (randomized) scorers produce the same results on bigSearcher as well\n        collector = TopFieldCollector.create(sort, 1000 * mulFactor, false, true, true, false);\n        bigSearcher.search(q1, collector);\n        hits1 = collector.topDocs().scoreDocs;\n        collector = TopFieldCollector.create(sort, 1000 * mulFactor, false, true, true, false);\n        bigSearcher.search(q1, collector);\n        hits2 = collector.topDocs().scoreDocs;\n        CheckHits.checkEqual(q1, hits1, hits2);\n        \n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","sourceNew":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = atLeast(20);\n      for (int i=0; i<num; i++) {\n        int level = random().nextInt(3);\n        q1 = randBoolQuery(new Random(random().nextLong()), random().nextBoolean(), level, field, vals, null).build();\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random(), q1,searcher); // baseline sim\n        try {\n          // a little hackish, QueryUtils.check is too costly to do on bigSearcher in this loop.\n          searcher.setSimilarity(bigSearcher.getSimilarity()); // random sim\n          QueryUtils.check(random(), q1, searcher);\n        } finally {\n          searcher.setSimilarity(new ClassicSimilarity()); // restore\n        }\n\n        // check diff (randomized) scorers (from AssertingSearcher) produce the same results\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000, false, true, false);\n        searcher.search(q1, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n        collector = TopFieldCollector.create(sort, 1000, false, true, false);\n        searcher.search(q1, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery.Builder q3 = new BooleanQuery.Builder();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3.build(), 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n\n        // test diff (randomized) scorers produce the same results on bigSearcher as well\n        collector = TopFieldCollector.create(sort, 1000 * mulFactor, false, true, false);\n        bigSearcher.search(q1, collector);\n        hits1 = collector.topDocs().scoreDocs;\n        collector = TopFieldCollector.create(sort, 1000 * mulFactor, false, true, false);\n        bigSearcher.search(q1, collector);\n        hits2 = collector.topDocs().scoreDocs;\n        CheckHits.checkEqual(q1, hits1, hits2);\n        \n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","sourceOld":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = atLeast(20);\n      for (int i=0; i<num; i++) {\n        int level = random().nextInt(3);\n        q1 = randBoolQuery(new Random(random().nextLong()), random().nextBoolean(), level, field, vals, null).build();\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random(), q1,searcher); // baseline sim\n        try {\n          // a little hackish, QueryUtils.check is too costly to do on bigSearcher in this loop.\n          searcher.setSimilarity(bigSearcher.getSimilarity()); // random sim\n          QueryUtils.check(random(), q1, searcher);\n        } finally {\n          searcher.setSimilarity(new ClassicSimilarity()); // restore\n        }\n\n        // check diff (randomized) scorers (from AssertingSearcher) produce the same results\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000, false, true, true, false);\n        searcher.search(q1, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n        collector = TopFieldCollector.create(sort, 1000, false, true, true, false);\n        searcher.search(q1, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery.Builder q3 = new BooleanQuery.Builder();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3.build(), 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n\n        // test diff (randomized) scorers produce the same results on bigSearcher as well\n        collector = TopFieldCollector.create(sort, 1000 * mulFactor, false, true, true, false);\n        bigSearcher.search(q1, collector);\n        hits1 = collector.topDocs().scoreDocs;\n        collector = TopFieldCollector.create(sort, 1000 * mulFactor, false, true, true, false);\n        bigSearcher.search(q1, collector);\n        hits2 = collector.topDocs().scoreDocs;\n        CheckHits.checkEqual(q1, hits1, hits2);\n        \n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04c370507e5521b2eb998530736f1c19b851ed5a","date":1531911305,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","sourceNew":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = atLeast(20);\n      for (int i=0; i<num; i++) {\n        int level = random().nextInt(3);\n        q1 = randBoolQuery(new Random(random().nextLong()), random().nextBoolean(), level, field, vals, null).build();\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random(), q1,searcher); // baseline sim\n        try {\n          // a little hackish, QueryUtils.check is too costly to do on bigSearcher in this loop.\n          searcher.setSimilarity(bigSearcher.getSimilarity()); // random sim\n          QueryUtils.check(random(), q1, searcher);\n        } finally {\n          searcher.setSimilarity(new ClassicSimilarity()); // restore\n        }\n\n        // check diff (randomized) scorers (from AssertingSearcher) produce the same results\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000, true, false);\n        searcher.search(q1, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n        collector = TopFieldCollector.create(sort, 1000, true, false);\n        searcher.search(q1, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery.Builder q3 = new BooleanQuery.Builder();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3.build(), 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n\n        // test diff (randomized) scorers produce the same results on bigSearcher as well\n        collector = TopFieldCollector.create(sort, 1000 * mulFactor, true, false);\n        bigSearcher.search(q1, collector);\n        hits1 = collector.topDocs().scoreDocs;\n        collector = TopFieldCollector.create(sort, 1000 * mulFactor, true, false);\n        bigSearcher.search(q1, collector);\n        hits2 = collector.topDocs().scoreDocs;\n        CheckHits.checkEqual(q1, hits1, hits2);\n        \n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","sourceOld":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = atLeast(20);\n      for (int i=0; i<num; i++) {\n        int level = random().nextInt(3);\n        q1 = randBoolQuery(new Random(random().nextLong()), random().nextBoolean(), level, field, vals, null).build();\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random(), q1,searcher); // baseline sim\n        try {\n          // a little hackish, QueryUtils.check is too costly to do on bigSearcher in this loop.\n          searcher.setSimilarity(bigSearcher.getSimilarity()); // random sim\n          QueryUtils.check(random(), q1, searcher);\n        } finally {\n          searcher.setSimilarity(new ClassicSimilarity()); // restore\n        }\n\n        // check diff (randomized) scorers (from AssertingSearcher) produce the same results\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000, false, true, false);\n        searcher.search(q1, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n        collector = TopFieldCollector.create(sort, 1000, false, true, false);\n        searcher.search(q1, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery.Builder q3 = new BooleanQuery.Builder();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3.build(), 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n\n        // test diff (randomized) scorers produce the same results on bigSearcher as well\n        collector = TopFieldCollector.create(sort, 1000 * mulFactor, false, true, false);\n        bigSearcher.search(q1, collector);\n        hits1 = collector.topDocs().scoreDocs;\n        collector = TopFieldCollector.create(sort, 1000 * mulFactor, false, true, false);\n        bigSearcher.search(q1, collector);\n        hits2 = collector.topDocs().scoreDocs;\n        CheckHits.checkEqual(q1, hits1, hits2);\n        \n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d3f7ab1a502671bbdb03bcced21e764d2483221","date":1532329609,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","sourceNew":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = atLeast(20);\n      for (int i=0; i<num; i++) {\n        int level = random().nextInt(3);\n        q1 = randBoolQuery(new Random(random().nextLong()), random().nextBoolean(), level, field, vals, null).build();\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random(), q1,searcher); // baseline sim\n        try {\n          // a little hackish, QueryUtils.check is too costly to do on bigSearcher in this loop.\n          searcher.setSimilarity(bigSearcher.getSimilarity()); // random sim\n          QueryUtils.check(random(), q1, searcher);\n        } finally {\n          searcher.setSimilarity(new ClassicSimilarity()); // restore\n        }\n\n        // check diff (randomized) scorers (from AssertingSearcher) produce the same results\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000, false);\n        searcher.search(q1, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n        collector = TopFieldCollector.create(sort, 1000, false);\n        searcher.search(q1, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery.Builder q3 = new BooleanQuery.Builder();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3.build(), 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n\n        // test diff (randomized) scorers produce the same results on bigSearcher as well\n        collector = TopFieldCollector.create(sort, 1000 * mulFactor, false);\n        bigSearcher.search(q1, collector);\n        hits1 = collector.topDocs().scoreDocs;\n        collector = TopFieldCollector.create(sort, 1000 * mulFactor, false);\n        bigSearcher.search(q1, collector);\n        hits2 = collector.topDocs().scoreDocs;\n        CheckHits.checkEqual(q1, hits1, hits2);\n        \n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","sourceOld":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = atLeast(20);\n      for (int i=0; i<num; i++) {\n        int level = random().nextInt(3);\n        q1 = randBoolQuery(new Random(random().nextLong()), random().nextBoolean(), level, field, vals, null).build();\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random(), q1,searcher); // baseline sim\n        try {\n          // a little hackish, QueryUtils.check is too costly to do on bigSearcher in this loop.\n          searcher.setSimilarity(bigSearcher.getSimilarity()); // random sim\n          QueryUtils.check(random(), q1, searcher);\n        } finally {\n          searcher.setSimilarity(new ClassicSimilarity()); // restore\n        }\n\n        // check diff (randomized) scorers (from AssertingSearcher) produce the same results\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000, true, false);\n        searcher.search(q1, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n        collector = TopFieldCollector.create(sort, 1000, true, false);\n        searcher.search(q1, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery.Builder q3 = new BooleanQuery.Builder();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3.build(), 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n\n        // test diff (randomized) scorers produce the same results on bigSearcher as well\n        collector = TopFieldCollector.create(sort, 1000 * mulFactor, true, false);\n        bigSearcher.search(q1, collector);\n        hits1 = collector.topDocs().scoreDocs;\n        collector = TopFieldCollector.create(sort, 1000 * mulFactor, true, false);\n        bigSearcher.search(q1, collector);\n        hits2 = collector.topDocs().scoreDocs;\n        CheckHits.checkEqual(q1, hits1, hits2);\n        \n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","sourceNew":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = atLeast(20);\n      for (int i=0; i<num; i++) {\n        int level = random().nextInt(3);\n        q1 = randBoolQuery(new Random(random().nextLong()), random().nextBoolean(), level, field, vals, null).build();\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random(), q1,searcher); // baseline sim\n        try {\n          // a little hackish, QueryUtils.check is too costly to do on bigSearcher in this loop.\n          searcher.setSimilarity(bigSearcher.getSimilarity()); // random sim\n          QueryUtils.check(random(), q1, searcher);\n        } finally {\n          searcher.setSimilarity(new ClassicSimilarity()); // restore\n        }\n\n        // check diff (randomized) scorers (from AssertingSearcher) produce the same results\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000, false);\n        searcher.search(q1, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n        collector = TopFieldCollector.create(sort, 1000, false);\n        searcher.search(q1, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery.Builder q3 = new BooleanQuery.Builder();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3.build(), 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits.value);\n\n        // test diff (randomized) scorers produce the same results on bigSearcher as well\n        collector = TopFieldCollector.create(sort, 1000 * mulFactor, false);\n        bigSearcher.search(q1, collector);\n        hits1 = collector.topDocs().scoreDocs;\n        collector = TopFieldCollector.create(sort, 1000 * mulFactor, false);\n        bigSearcher.search(q1, collector);\n        hits2 = collector.topDocs().scoreDocs;\n        CheckHits.checkEqual(q1, hits1, hits2);\n        \n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","sourceOld":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = atLeast(20);\n      for (int i=0; i<num; i++) {\n        int level = random().nextInt(3);\n        q1 = randBoolQuery(new Random(random().nextLong()), random().nextBoolean(), level, field, vals, null).build();\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random(), q1,searcher); // baseline sim\n        try {\n          // a little hackish, QueryUtils.check is too costly to do on bigSearcher in this loop.\n          searcher.setSimilarity(bigSearcher.getSimilarity()); // random sim\n          QueryUtils.check(random(), q1, searcher);\n        } finally {\n          searcher.setSimilarity(new ClassicSimilarity()); // restore\n        }\n\n        // check diff (randomized) scorers (from AssertingSearcher) produce the same results\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000, false);\n        searcher.search(q1, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n        collector = TopFieldCollector.create(sort, 1000, false);\n        searcher.search(q1, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery.Builder q3 = new BooleanQuery.Builder();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3.build(), 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n\n        // test diff (randomized) scorers produce the same results on bigSearcher as well\n        collector = TopFieldCollector.create(sort, 1000 * mulFactor, false);\n        bigSearcher.search(q1, collector);\n        hits1 = collector.topDocs().scoreDocs;\n        collector = TopFieldCollector.create(sort, 1000 * mulFactor, false);\n        bigSearcher.search(q1, collector);\n        hits2 = collector.topDocs().scoreDocs;\n        CheckHits.checkEqual(q1, hits1, hits2);\n        \n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe3c6364bed04a73ad0884b05401d80ce96027a9","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","sourceNew":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = atLeast(20);\n      for (int i=0; i<num; i++) {\n        int level = random().nextInt(3);\n        q1 = randBoolQuery(new Random(random().nextLong()), random().nextBoolean(), level, field, vals, null).build();\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random(), q1,searcher); // baseline sim\n        try {\n          // a little hackish, QueryUtils.check is too costly to do on bigSearcher in this loop.\n          searcher.setSimilarity(bigSearcher.getSimilarity()); // random sim\n          QueryUtils.check(random(), q1, searcher);\n        } finally {\n          searcher.setSimilarity(new ClassicSimilarity()); // restore\n        }\n\n        // check diff (randomized) scorers (from AssertingSearcher) produce the same results\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000, 1);\n        searcher.search(q1, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n        collector = TopFieldCollector.create(sort, 1000, 1);\n        searcher.search(q1, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery.Builder q3 = new BooleanQuery.Builder();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3.build(), 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits.value);\n\n        // test diff (randomized) scorers produce the same results on bigSearcher as well\n        collector = TopFieldCollector.create(sort, 1000 * mulFactor, 1);\n        bigSearcher.search(q1, collector);\n        hits1 = collector.topDocs().scoreDocs;\n        collector = TopFieldCollector.create(sort, 1000 * mulFactor, 1);\n        bigSearcher.search(q1, collector);\n        hits2 = collector.topDocs().scoreDocs;\n        CheckHits.checkEqual(q1, hits1, hits2);\n        \n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","sourceOld":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = atLeast(20);\n      for (int i=0; i<num; i++) {\n        int level = random().nextInt(3);\n        q1 = randBoolQuery(new Random(random().nextLong()), random().nextBoolean(), level, field, vals, null).build();\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random(), q1,searcher); // baseline sim\n        try {\n          // a little hackish, QueryUtils.check is too costly to do on bigSearcher in this loop.\n          searcher.setSimilarity(bigSearcher.getSimilarity()); // random sim\n          QueryUtils.check(random(), q1, searcher);\n        } finally {\n          searcher.setSimilarity(new ClassicSimilarity()); // restore\n        }\n\n        // check diff (randomized) scorers (from AssertingSearcher) produce the same results\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000, false);\n        searcher.search(q1, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n        collector = TopFieldCollector.create(sort, 1000, false);\n        searcher.search(q1, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery.Builder q3 = new BooleanQuery.Builder();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3.build(), 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits.value);\n\n        // test diff (randomized) scorers produce the same results on bigSearcher as well\n        collector = TopFieldCollector.create(sort, 1000 * mulFactor, false);\n        bigSearcher.search(q1, collector);\n        hits1 = collector.topDocs().scoreDocs;\n        collector = TopFieldCollector.create(sort, 1000 * mulFactor, false);\n        bigSearcher.search(q1, collector);\n        hits2 = collector.topDocs().scoreDocs;\n        CheckHits.checkEqual(q1, hits1, hits2);\n        \n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e708f948b384f9aa85c665caee4486eb2d9e197d","date":1533106881,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","sourceNew":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = atLeast(20);\n      for (int i=0; i<num; i++) {\n        int level = random().nextInt(3);\n        q1 = randBoolQuery(new Random(random().nextLong()), random().nextBoolean(), level, field, vals, null).build();\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random(), q1,searcher); // baseline sim\n        try {\n          // a little hackish, QueryUtils.check is too costly to do on bigSearcher in this loop.\n          searcher.setSimilarity(bigSearcher.getSimilarity()); // random sim\n          QueryUtils.check(random(), q1, searcher);\n        } finally {\n          searcher.setSimilarity(new ClassicSimilarity()); // restore\n        }\n\n        // check diff (randomized) scorers (from AssertingSearcher) produce the same results\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000, 1);\n        searcher.search(q1, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n        collector = TopFieldCollector.create(sort, 1000, 1);\n        searcher.search(q1, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery.Builder q3 = new BooleanQuery.Builder();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, bigSearcher.count(q3.build()));\n\n        // test diff (randomized) scorers produce the same results on bigSearcher as well\n        collector = TopFieldCollector.create(sort, 1000 * mulFactor, 1);\n        bigSearcher.search(q1, collector);\n        hits1 = collector.topDocs().scoreDocs;\n        collector = TopFieldCollector.create(sort, 1000 * mulFactor, 1);\n        bigSearcher.search(q1, collector);\n        hits2 = collector.topDocs().scoreDocs;\n        CheckHits.checkEqual(q1, hits1, hits2);\n        \n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","sourceOld":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = atLeast(20);\n      for (int i=0; i<num; i++) {\n        int level = random().nextInt(3);\n        q1 = randBoolQuery(new Random(random().nextLong()), random().nextBoolean(), level, field, vals, null).build();\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random(), q1,searcher); // baseline sim\n        try {\n          // a little hackish, QueryUtils.check is too costly to do on bigSearcher in this loop.\n          searcher.setSimilarity(bigSearcher.getSimilarity()); // random sim\n          QueryUtils.check(random(), q1, searcher);\n        } finally {\n          searcher.setSimilarity(new ClassicSimilarity()); // restore\n        }\n\n        // check diff (randomized) scorers (from AssertingSearcher) produce the same results\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000, 1);\n        searcher.search(q1, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n        collector = TopFieldCollector.create(sort, 1000, 1);\n        searcher.search(q1, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery.Builder q3 = new BooleanQuery.Builder();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3.build(), 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits.value);\n\n        // test diff (randomized) scorers produce the same results on bigSearcher as well\n        collector = TopFieldCollector.create(sort, 1000 * mulFactor, 1);\n        bigSearcher.search(q1, collector);\n        hits1 = collector.topDocs().scoreDocs;\n        collector = TopFieldCollector.create(sort, 1000 * mulFactor, 1);\n        bigSearcher.search(q1, collector);\n        hits2 = collector.topDocs().scoreDocs;\n        CheckHits.checkEqual(q1, hits1, hits2);\n        \n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f","date":1579652839,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","sourceNew":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = atLeast(3);\n      for (int i=0; i<num; i++) {\n        int level = random().nextInt(3);\n        q1 = randBoolQuery(new Random(random().nextLong()), random().nextBoolean(), level, field, vals, null).build();\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random(), q1,searcher); // baseline sim\n        try {\n          // a little hackish, QueryUtils.check is too costly to do on bigSearcher in this loop.\n          searcher.setSimilarity(bigSearcher.getSimilarity()); // random sim\n          QueryUtils.check(random(), q1, searcher);\n        } finally {\n          searcher.setSimilarity(new ClassicSimilarity()); // restore\n        }\n\n        // check diff (randomized) scorers (from AssertingSearcher) produce the same results\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000, 1);\n        searcher.search(q1, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n        collector = TopFieldCollector.create(sort, 1000, 1);\n        searcher.search(q1, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery.Builder q3 = new BooleanQuery.Builder();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, bigSearcher.count(q3.build()));\n\n        // test diff (randomized) scorers produce the same results on bigSearcher as well\n        collector = TopFieldCollector.create(sort, 1000 * mulFactor, 1);\n        bigSearcher.search(q1, collector);\n        hits1 = collector.topDocs().scoreDocs;\n        collector = TopFieldCollector.create(sort, 1000 * mulFactor, 1);\n        bigSearcher.search(q1, collector);\n        hits2 = collector.topDocs().scoreDocs;\n        CheckHits.checkEqual(q1, hits1, hits2);\n        \n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","sourceOld":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = atLeast(20);\n      for (int i=0; i<num; i++) {\n        int level = random().nextInt(3);\n        q1 = randBoolQuery(new Random(random().nextLong()), random().nextBoolean(), level, field, vals, null).build();\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random(), q1,searcher); // baseline sim\n        try {\n          // a little hackish, QueryUtils.check is too costly to do on bigSearcher in this loop.\n          searcher.setSimilarity(bigSearcher.getSimilarity()); // random sim\n          QueryUtils.check(random(), q1, searcher);\n        } finally {\n          searcher.setSimilarity(new ClassicSimilarity()); // restore\n        }\n\n        // check diff (randomized) scorers (from AssertingSearcher) produce the same results\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000, 1);\n        searcher.search(q1, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n        collector = TopFieldCollector.create(sort, 1000, 1);\n        searcher.search(q1, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery.Builder q3 = new BooleanQuery.Builder();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, bigSearcher.count(q3.build()));\n\n        // test diff (randomized) scorers produce the same results on bigSearcher as well\n        collector = TopFieldCollector.create(sort, 1000 * mulFactor, 1);\n        bigSearcher.search(q1, collector);\n        hits1 = collector.topDocs().scoreDocs;\n        collector = TopFieldCollector.create(sort, 1000 * mulFactor, 1);\n        bigSearcher.search(q1, collector);\n        hits2 = collector.topDocs().scoreDocs;\n        CheckHits.checkEqual(q1, hits1, hits2);\n        \n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["1aad05eeff7818b0833c02ac6b743aa72054963b","68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"e708f948b384f9aa85c665caee4486eb2d9e197d":["fe3c6364bed04a73ad0884b05401d80ce96027a9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"04c370507e5521b2eb998530736f1c19b851ed5a":["81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"485545da3b4429d6f138b4baac573a97820ee93b":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"191128ac5b85671b1671e2c857437694283b6ebf":["81d0720146de53dd3a4a023d2a3d1089d86d748d","7c82b0d4b7bf499a159eeff92add20bac6599cc1"],"b0c73b4e6b72cca35c7f115ab543ce9dcf50d8b5":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["485545da3b4429d6f138b4baac573a97820ee93b"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["191128ac5b85671b1671e2c857437694283b6ebf","404d1ab7f6f396235047017c88d545fec15dafb7"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["b94236357aaa22b76c10629851fe4e376e0cea82","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","b0c73b4e6b72cca35c7f115ab543ce9dcf50d8b5"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83788ad129a5154d5c6562c4e8ce3db48793aada":["1d3f7ab1a502671bbdb03bcced21e764d2483221"],"fe3c6364bed04a73ad0884b05401d80ce96027a9":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["e708f948b384f9aa85c665caee4486eb2d9e197d"],"404d1ab7f6f396235047017c88d545fec15dafb7":["191128ac5b85671b1671e2c857437694283b6ebf"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["81d0720146de53dd3a4a023d2a3d1089d86d748d","191128ac5b85671b1671e2c857437694283b6ebf"],"1d3f7ab1a502671bbdb03bcced21e764d2483221":["04c370507e5521b2eb998530736f1c19b851ed5a"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"7c82b0d4b7bf499a159eeff92add20bac6599cc1":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["b0c73b4e6b72cca35c7f115ab543ce9dcf50d8b5"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","b0c73b4e6b72cca35c7f115ab543ce9dcf50d8b5"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["b94236357aaa22b76c10629851fe4e376e0cea82"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"e708f948b384f9aa85c665caee4486eb2d9e197d":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"04c370507e5521b2eb998530736f1c19b851ed5a":["1d3f7ab1a502671bbdb03bcced21e764d2483221"],"485545da3b4429d6f138b4baac573a97820ee93b":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"191128ac5b85671b1671e2c857437694283b6ebf":["1aad05eeff7818b0833c02ac6b743aa72054963b","404d1ab7f6f396235047017c88d545fec15dafb7","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b0c73b4e6b72cca35c7f115ab543ce9dcf50d8b5":["c7869f64c874ebf7f317d22c00baf2b6857797a6","f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["191128ac5b85671b1671e2c857437694283b6ebf","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","7c82b0d4b7bf499a159eeff92add20bac6599cc1"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["b94236357aaa22b76c10629851fe4e376e0cea82","68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["485545da3b4429d6f138b4baac573a97820ee93b"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["fe3c6364bed04a73ad0884b05401d80ce96027a9"],"fe3c6364bed04a73ad0884b05401d80ce96027a9":["e708f948b384f9aa85c665caee4486eb2d9e197d"],"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"404d1ab7f6f396235047017c88d545fec15dafb7":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"1d3f7ab1a502671bbdb03bcced21e764d2483221":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["b94236357aaa22b76c10629851fe4e376e0cea82"],"7c82b0d4b7bf499a159eeff92add20bac6599cc1":["191128ac5b85671b1671e2c857437694283b6ebf"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["04c370507e5521b2eb998530736f1c19b851ed5a","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b0c73b4e6b72cca35c7f115ab543ce9dcf50d8b5","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","c7869f64c874ebf7f317d22c00baf2b6857797a6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}