{"path":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean,boolean).mjava","commits":[{"id":"ad28156288ac00b91352582904d97e6653205757","date":1486850922,"type":1,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean).mjava","sourceNew":"  void initIndex(boolean passOnPreviousState, boolean reload) throws IOException {\n\n    String indexDir = getNewIndexDir();\n    boolean indexExists = getDirectoryFactory().exists(indexDir);\n    boolean firstTime;\n    synchronized (SolrCore.class) {\n      firstTime = dirs.add(getDirectoryFactory().normalize(indexDir));\n    }\n\n    initIndexReaderFactory();\n\n    if (indexExists && firstTime && !passOnPreviousState) {\n      final String lockType = getSolrConfig().indexConfig.lockType;\n      Directory dir = directoryFactory.get(indexDir, DirContext.DEFAULT, lockType);\n      try {\n        if (isWriterLocked(dir)) {\n          log.error(logid + \"Solr index directory '{}' is locked (lockType={}).  Throwing exception.\",\n                    indexDir, lockType);\n          throw new LockObtainFailedException\n            (\"Index dir '\" + indexDir + \"' of core '\" + name + \"' is already locked. \" +\n             \"The most likely cause is another Solr server (or another solr core in this server) \" +\n             \"also configured to use this directory; other possible causes may be specific to lockType: \" +\n             lockType);\n        }\n      } finally {\n        directoryFactory.release(dir);\n      }\n    }\n\n    // Create the index if it doesn't exist.\n    if(!indexExists) {\n      log.debug(logid + \"Solr index directory '\" + new File(indexDir) + \"' doesn't exist.\"\n          + \" Creating new index...\");\n\n      SolrIndexWriter writer = SolrIndexWriter.create(this, \"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true,\n                                                      getLatestSchema(), solrConfig.indexConfig, solrDelPolicy, codec);\n      writer.close();\n    }\n\n\n    cleanupOldIndexDirectories(reload);\n  }\n\n","sourceOld":"  void initIndex(boolean reload) throws IOException {\n\n    String indexDir = getNewIndexDir();\n    boolean indexExists = getDirectoryFactory().exists(indexDir);\n    boolean firstTime;\n    synchronized (SolrCore.class) {\n      firstTime = dirs.add(getDirectoryFactory().normalize(indexDir));\n    }\n\n    initIndexReaderFactory();\n\n    if (indexExists && firstTime && !reload) {\n      final String lockType = getSolrConfig().indexConfig.lockType;\n      Directory dir = directoryFactory.get(indexDir, DirContext.DEFAULT, lockType);\n      try {\n        if (isWriterLocked(dir)) {\n          log.error(logid + \"Solr index directory '{}' is locked (lockType={}).  Throwing exception.\",\n                    indexDir, lockType);\n          throw new LockObtainFailedException\n            (\"Index dir '\" + indexDir + \"' of core '\" + name + \"' is already locked. \" +\n             \"The most likely cause is another Solr server (or another solr core in this server) \" +\n             \"also configured to use this directory; other possible causes may be specific to lockType: \" +\n             lockType);\n        }\n      } finally {\n        directoryFactory.release(dir);\n      }\n    }\n\n    // Create the index if it doesn't exist.\n    if(!indexExists) {\n      log.debug(logid + \"Solr index directory '\" + new File(indexDir) + \"' doesn't exist.\"\n          + \" Creating new index...\");\n\n      SolrIndexWriter writer = SolrIndexWriter.create(this, \"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true,\n                                                      getLatestSchema(), solrConfig.indexConfig, solrDelPolicy, codec);\n      writer.close();\n    }\n\n\n    cleanupOldIndexDirectories();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24792720c893049d53a1807bd0ae9b64d1cd7be5","date":1527536585,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean,boolean).mjava","sourceNew":"  void initIndex(boolean passOnPreviousState, boolean reload) throws IOException {\n    String indexDir = getNewIndexDir();\n    boolean indexExists = getDirectoryFactory().exists(indexDir);\n    boolean firstTime;\n    synchronized (SolrCore.class) {\n      firstTime = dirs.add(getDirectoryFactory().normalize(indexDir));\n    }\n\n    initIndexReaderFactory();\n\n    if (indexExists && firstTime && !passOnPreviousState) {\n      final String lockType = getSolrConfig().indexConfig.lockType;\n      Directory dir = directoryFactory.get(indexDir, DirContext.DEFAULT, lockType);\n      try {\n        if (isWriterLocked(dir)) {\n          log.error(\"{}Solr index directory '{}' is locked (lockType={}).  Throwing exception.\", logid,\n              indexDir, lockType);\n          throw new LockObtainFailedException(\n              \"Index dir '\" + indexDir + \"' of core '\" + name + \"' is already locked. \" +\n                  \"The most likely cause is another Solr server (or another solr core in this server) \" +\n                  \"also configured to use this directory; other possible causes may be specific to lockType: \" +\n                  lockType);\n        }\n      } finally {\n        directoryFactory.release(dir);\n      }\n    }\n\n    // Create the index if it doesn't exist.\n    if (!indexExists) {\n      log.debug(\"{}Solr index directory '{}' doesn't exist. Creating new index...\", logid, indexDir);\n\n      SolrIndexWriter writer = SolrIndexWriter.create(this, \"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true,\n          getLatestSchema(), solrConfig.indexConfig, solrDelPolicy, codec);\n      writer.close();\n    }\n\n    cleanupOldIndexDirectories(reload);\n  }\n\n","sourceOld":"  void initIndex(boolean passOnPreviousState, boolean reload) throws IOException {\n\n    String indexDir = getNewIndexDir();\n    boolean indexExists = getDirectoryFactory().exists(indexDir);\n    boolean firstTime;\n    synchronized (SolrCore.class) {\n      firstTime = dirs.add(getDirectoryFactory().normalize(indexDir));\n    }\n\n    initIndexReaderFactory();\n\n    if (indexExists && firstTime && !passOnPreviousState) {\n      final String lockType = getSolrConfig().indexConfig.lockType;\n      Directory dir = directoryFactory.get(indexDir, DirContext.DEFAULT, lockType);\n      try {\n        if (isWriterLocked(dir)) {\n          log.error(logid + \"Solr index directory '{}' is locked (lockType={}).  Throwing exception.\",\n                    indexDir, lockType);\n          throw new LockObtainFailedException\n            (\"Index dir '\" + indexDir + \"' of core '\" + name + \"' is already locked. \" +\n             \"The most likely cause is another Solr server (or another solr core in this server) \" +\n             \"also configured to use this directory; other possible causes may be specific to lockType: \" +\n             lockType);\n        }\n      } finally {\n        directoryFactory.release(dir);\n      }\n    }\n\n    // Create the index if it doesn't exist.\n    if(!indexExists) {\n      log.debug(logid + \"Solr index directory '\" + new File(indexDir) + \"' doesn't exist.\"\n          + \" Creating new index...\");\n\n      SolrIndexWriter writer = SolrIndexWriter.create(this, \"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true,\n                                                      getLatestSchema(), solrConfig.indexConfig, solrDelPolicy, codec);\n      writer.close();\n    }\n\n\n    cleanupOldIndexDirectories(reload);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean,boolean).mjava","sourceNew":"  void initIndex(boolean passOnPreviousState, boolean reload) throws IOException {\n    String indexDir = getNewIndexDir();\n    boolean indexExists = getDirectoryFactory().exists(indexDir);\n    boolean firstTime;\n    synchronized (SolrCore.class) {\n      firstTime = dirs.add(getDirectoryFactory().normalize(indexDir));\n    }\n\n    initIndexReaderFactory();\n\n    if (indexExists && firstTime && !passOnPreviousState) {\n      final String lockType = getSolrConfig().indexConfig.lockType;\n      Directory dir = directoryFactory.get(indexDir, DirContext.DEFAULT, lockType);\n      try {\n        if (isWriterLocked(dir)) {\n          log.error(\"{}Solr index directory '{}' is locked (lockType={}).  Throwing exception.\", logid,\n              indexDir, lockType);\n          throw new LockObtainFailedException(\n              \"Index dir '\" + indexDir + \"' of core '\" + name + \"' is already locked. \" +\n                  \"The most likely cause is another Solr server (or another solr core in this server) \" +\n                  \"also configured to use this directory; other possible causes may be specific to lockType: \" +\n                  lockType);\n        }\n      } finally {\n        directoryFactory.release(dir);\n      }\n    }\n\n    // Create the index if it doesn't exist.\n    if (!indexExists) {\n      log.debug(\"{}Solr index directory '{}' doesn't exist. Creating new index...\", logid, indexDir);\n      SolrIndexWriter writer = null;\n      try {\n       writer = SolrIndexWriter.create(this, \"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true,\n          getLatestSchema(), solrConfig.indexConfig, solrDelPolicy, codec);\n      } finally {\n        IOUtils.closeQuietly(writer);\n      }\n   \n    }\n\n    cleanupOldIndexDirectories(reload);\n  }\n\n","sourceOld":"  void initIndex(boolean passOnPreviousState, boolean reload) throws IOException {\n    String indexDir = getNewIndexDir();\n    boolean indexExists = getDirectoryFactory().exists(indexDir);\n    boolean firstTime;\n    synchronized (SolrCore.class) {\n      firstTime = dirs.add(getDirectoryFactory().normalize(indexDir));\n    }\n\n    initIndexReaderFactory();\n\n    if (indexExists && firstTime && !passOnPreviousState) {\n      final String lockType = getSolrConfig().indexConfig.lockType;\n      Directory dir = directoryFactory.get(indexDir, DirContext.DEFAULT, lockType);\n      try {\n        if (isWriterLocked(dir)) {\n          log.error(\"{}Solr index directory '{}' is locked (lockType={}).  Throwing exception.\", logid,\n              indexDir, lockType);\n          throw new LockObtainFailedException(\n              \"Index dir '\" + indexDir + \"' of core '\" + name + \"' is already locked. \" +\n                  \"The most likely cause is another Solr server (or another solr core in this server) \" +\n                  \"also configured to use this directory; other possible causes may be specific to lockType: \" +\n                  lockType);\n        }\n      } finally {\n        directoryFactory.release(dir);\n      }\n    }\n\n    // Create the index if it doesn't exist.\n    if (!indexExists) {\n      log.debug(\"{}Solr index directory '{}' doesn't exist. Creating new index...\", logid, indexDir);\n\n      SolrIndexWriter writer = SolrIndexWriter.create(this, \"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true,\n          getLatestSchema(), solrConfig.indexConfig, solrDelPolicy, codec);\n      writer.close();\n    }\n\n    cleanupOldIndexDirectories(reload);\n  }\n\n","bugFix":["e0bbfc7e96e0cf26b51dcefe3b2e4c93fe34e8c0","0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#initIndex(boolean,boolean).mjava","sourceNew":"  void initIndex(boolean passOnPreviousState, boolean reload) throws IOException {\n    String indexDir = getNewIndexDir();\n    boolean indexExists = getDirectoryFactory().exists(indexDir);\n    boolean firstTime;\n    synchronized (SolrCore.class) {\n      firstTime = dirs.add(getDirectoryFactory().normalize(indexDir));\n    }\n\n    initIndexReaderFactory();\n\n    if (indexExists && firstTime && !passOnPreviousState) {\n      final String lockType = getSolrConfig().indexConfig.lockType;\n      Directory dir = directoryFactory.get(indexDir, DirContext.DEFAULT, lockType);\n      try {\n        if (isWriterLocked(dir)) {\n          log.error(\"{}Solr index directory '{}' is locked (lockType={}).  Throwing exception.\", logid,\n              indexDir, lockType);\n          throw new LockObtainFailedException(\n              \"Index dir '\" + indexDir + \"' of core '\" + name + \"' is already locked. \" +\n                  \"The most likely cause is another Solr server (or another solr core in this server) \" +\n                  \"also configured to use this directory; other possible causes may be specific to lockType: \" +\n                  lockType);\n        }\n      } finally {\n        directoryFactory.release(dir);\n      }\n    }\n\n    // Create the index if it doesn't exist.\n    if (!indexExists) {\n      log.debug(\"{}Solr index directory '{}' doesn't exist. Creating new index...\", logid, indexDir);\n      SolrIndexWriter writer = null;\n      try {\n        writer = SolrIndexWriter.create(this, \"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true,\n            getLatestSchema(), solrConfig.indexConfig, solrDelPolicy, codec);\n      } finally {\n        IOUtils.closeQuietly(writer);\n      }\n\n    }\n\n    cleanupOldIndexDirectories(reload);\n  }\n\n","sourceOld":"  void initIndex(boolean passOnPreviousState, boolean reload) throws IOException {\n    String indexDir = getNewIndexDir();\n    boolean indexExists = getDirectoryFactory().exists(indexDir);\n    boolean firstTime;\n    synchronized (SolrCore.class) {\n      firstTime = dirs.add(getDirectoryFactory().normalize(indexDir));\n    }\n\n    initIndexReaderFactory();\n\n    if (indexExists && firstTime && !passOnPreviousState) {\n      final String lockType = getSolrConfig().indexConfig.lockType;\n      Directory dir = directoryFactory.get(indexDir, DirContext.DEFAULT, lockType);\n      try {\n        if (isWriterLocked(dir)) {\n          log.error(\"{}Solr index directory '{}' is locked (lockType={}).  Throwing exception.\", logid,\n              indexDir, lockType);\n          throw new LockObtainFailedException(\n              \"Index dir '\" + indexDir + \"' of core '\" + name + \"' is already locked. \" +\n                  \"The most likely cause is another Solr server (or another solr core in this server) \" +\n                  \"also configured to use this directory; other possible causes may be specific to lockType: \" +\n                  lockType);\n        }\n      } finally {\n        directoryFactory.release(dir);\n      }\n    }\n\n    // Create the index if it doesn't exist.\n    if (!indexExists) {\n      log.debug(\"{}Solr index directory '{}' doesn't exist. Creating new index...\", logid, indexDir);\n      SolrIndexWriter writer = null;\n      try {\n       writer = SolrIndexWriter.create(this, \"SolrCore.initIndex\", indexDir, getDirectoryFactory(), true,\n          getLatestSchema(), solrConfig.indexConfig, solrDelPolicy, codec);\n      } finally {\n        IOUtils.closeQuietly(writer);\n      }\n   \n    }\n\n    cleanupOldIndexDirectories(reload);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ad28156288ac00b91352582904d97e6653205757":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["24792720c893049d53a1807bd0ae9b64d1cd7be5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"24792720c893049d53a1807bd0ae9b64d1cd7be5":["ad28156288ac00b91352582904d97e6653205757"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2668c99990e4c94a78bac005aa682b7c5986d23a"]},"commit2Childs":{"ad28156288ac00b91352582904d97e6653205757":["24792720c893049d53a1807bd0ae9b64d1cd7be5"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ad28156288ac00b91352582904d97e6653205757"],"24792720c893049d53a1807bd0ae9b64d1cd7be5":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}