{"path":"lucene/src/java/org/apache/lucene/index/SegmentInfos#read(Directory).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#read(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#read(Directory).mjava","sourceNew":"  /**\n   * This version of read uses the retry logic (for lock-less\n   * commits) to find the right segments file to load.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory) throws CorruptIndexException, IOException {\n\n    generation = lastGeneration = -1;\n\n    new FindSegmentsFile(directory) {\n\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        read(directory, segmentFileName);\n        return null;\n      }\n    }.run();\n  }\n\n","sourceOld":"  /**\n   * This version of read uses the retry logic (for lock-less\n   * commits) to find the right segments file to load.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory) throws CorruptIndexException, IOException {\n\n    generation = lastGeneration = -1;\n\n    new FindSegmentsFile(directory) {\n\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        read(directory, segmentFileName);\n        return null;\n      }\n    }.run();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#read(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#read(Directory).mjava","sourceNew":"  /**\n   * This version of read uses the retry logic (for lock-less\n   * commits) to find the right segments file to load.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory) throws CorruptIndexException, IOException {\n    read(directory, CodecProvider.getDefault());\n  }\n\n","sourceOld":"  /**\n   * This version of read uses the retry logic (for lock-less\n   * commits) to find the right segments file to load.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory) throws CorruptIndexException, IOException {\n\n    generation = lastGeneration = -1;\n\n    new FindSegmentsFile(directory) {\n\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        read(directory, segmentFileName);\n        return null;\n      }\n    }.run();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#read(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#read(Directory).mjava","sourceNew":"  public final void read(Directory directory) throws CorruptIndexException, IOException {\n    generation = lastGeneration = -1;\n\n    new FindSegmentsFile(directory) {\n\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        read(directory, segmentFileName);\n        return null;\n      }\n    }.run();\n    // either we are on 4.0 or we don't have a lastGlobalFieldMapVersion i.e. its still set to 0\n    assert DefaultSegmentInfosWriter.FORMAT_4_0 <= format || (DefaultSegmentInfosWriter.FORMAT_4_0 > format && lastGlobalFieldMapVersion == 0); \n  }\n\n","sourceOld":"  /**\n   * This version of read uses the retry logic (for lock-less\n   * commits) to find the right segments file to load.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory) throws CorruptIndexException, IOException {\n    read(directory, CodecProvider.getDefault());\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"319624eb66a10b717d3e66af448543e7dc5c479d","date":1322741556,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#read(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#read(Directory).mjava","sourceNew":"  public final void read(Directory directory) throws CorruptIndexException, IOException {\n    generation = lastGeneration = -1;\n\n    new FindSegmentsFile(directory) {\n\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        read(directory, segmentFileName);\n        return null;\n      }\n    }.run();\n  }\n\n","sourceOld":"  public final void read(Directory directory) throws CorruptIndexException, IOException {\n    generation = lastGeneration = -1;\n\n    new FindSegmentsFile(directory) {\n\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        read(directory, segmentFileName);\n        return null;\n      }\n    }.run();\n    // either we are on 4.0 or we don't have a lastGlobalFieldMapVersion i.e. its still set to 0\n    assert DefaultSegmentInfosWriter.FORMAT_4_0 <= format || (DefaultSegmentInfosWriter.FORMAT_4_0 > format && lastGlobalFieldMapVersion == 0); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#read(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#read(Directory).mjava","sourceNew":"  public final void read(Directory directory) throws CorruptIndexException, IOException {\n    generation = lastGeneration = -1;\n\n    new FindSegmentsFile(directory) {\n\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        read(directory, segmentFileName);\n        return null;\n      }\n    }.run();\n  }\n\n","sourceOld":"  public final void read(Directory directory) throws CorruptIndexException, IOException {\n    generation = lastGeneration = -1;\n\n    new FindSegmentsFile(directory) {\n\n      @Override\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        read(directory, segmentFileName);\n        return null;\n      }\n    }.run();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["319624eb66a10b717d3e66af448543e7dc5c479d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"319624eb66a10b717d3e66af448543e7dc5c479d":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["319624eb66a10b717d3e66af448543e7dc5c479d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["7b91922b55d15444d554721b352861d028eb8278"],"319624eb66a10b717d3e66af448543e7dc5c479d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}