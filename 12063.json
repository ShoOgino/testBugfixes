{"path":"lucene/facet/src/test/org/apache/lucene/facet/index/TestFacetsPayloadMigrationReader#verifyDrillDown(Map[String,Integer],FacetIndexingParams,DirectoryReader,TaxonomyReader,IndexSearcher).mjava","commits":[{"id":"6c2cd18c7da6f499a33f06fc89c07a463ec074c0","date":1358329431,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/TestFacetsPayloadMigrationReader#verifyDrillDown(Map[String,Integer],FacetIndexingParams,DirectoryReader,TaxonomyReader,IndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  private void verifyDrillDown(Map<String,Integer> expectedCounts, FacetIndexingParams fip, DirectoryReader indexReader, \n      TaxonomyReader taxoReader, IndexSearcher searcher) throws IOException {\n    // verify drill-down\n    for (String dim : expectedCounts.keySet()) {\n      CategoryPath drillDownCP = new CategoryPath(dim);\n      ArrayList<FacetRequest> request = new ArrayList<FacetRequest>(1);\n      request.add(new CountFacetRequest(drillDownCP, 10));\n      FacetSearchParams fsp = new FacetSearchParams(request, fip);\n      Query drillDown = DrillDown.query(fsp, new MatchAllDocsQuery(), drillDownCP);\n      TotalHitCountCollector total = new TotalHitCountCollector();\n      FacetsCollector fc = new FacetsCollector(fsp, indexReader, taxoReader);\n      searcher.search(drillDown, MultiCollector.wrap(fc, total));\n      assertTrue(\"no results for drill-down query \" + drillDown, total.getTotalHits() > 0);\n      List<FacetResult> facetResults = fc.getFacetResults();\n      assertEquals(1, facetResults.size());\n      FacetResultNode rootNode = facetResults.get(0).getFacetResultNode();\n      assertEquals(\"wrong count for \" + dim, expectedCounts.get(dim).intValue(), (int) rootNode.getValue());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/TestFacetsPayloadMigrationReader#verifyDrillDown(Map[String,Integer],FacetIndexingParams,DirectoryReader,TaxonomyReader,IndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"  private void verifyDrillDown(Map<String,Integer> expectedCounts, FacetIndexingParams fip, DirectoryReader indexReader, \n      TaxonomyReader taxoReader, IndexSearcher searcher) throws IOException {\n    // verify drill-down\n    for (String dim : expectedCounts.keySet()) {\n      CategoryPath drillDownCP = new CategoryPath(dim);\n      ArrayList<FacetRequest> request = new ArrayList<FacetRequest>(1);\n      request.add(new CountFacetRequest(drillDownCP, 10));\n      FacetSearchParams fsp = new FacetSearchParams(request, fip);\n      Query drillDown = DrillDown.query(fsp, new MatchAllDocsQuery(), drillDownCP);\n      TotalHitCountCollector total = new TotalHitCountCollector();\n      FacetsCollector fc = new FacetsCollector(fsp, indexReader, taxoReader);\n      searcher.search(drillDown, MultiCollector.wrap(fc, total));\n      assertTrue(\"no results for drill-down query \" + drillDown, total.getTotalHits() > 0);\n      List<FacetResult> facetResults = fc.getFacetResults();\n      assertEquals(1, facetResults.size());\n      FacetResultNode rootNode = facetResults.get(0).getFacetResultNode();\n      assertEquals(\"wrong count for \" + dim, expectedCounts.get(dim).intValue(), (int) rootNode.getValue());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"811cdb4a80352766eb0c762e48972707a924e5cd","date":1358767313,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/TestFacetsPayloadMigrationReader#verifyDrillDown(Map[String,Integer],FacetIndexingParams,DirectoryReader,TaxonomyReader,IndexSearcher).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/TestFacetsPayloadMigrationReader#verifyDrillDown(Map[String,Integer],FacetIndexingParams,DirectoryReader,TaxonomyReader,IndexSearcher).mjava","sourceNew":"  private void verifyDrillDown(Map<String,Integer> expectedCounts, FacetIndexingParams fip, DirectoryReader indexReader, \n      TaxonomyReader taxoReader, IndexSearcher searcher) throws IOException {\n    // verify drill-down\n    for (String dim : expectedCounts.keySet()) {\n      CategoryPath drillDownCP = new CategoryPath(dim);\n      ArrayList<FacetRequest> request = new ArrayList<FacetRequest>(1);\n      request.add(new CountFacetRequest(drillDownCP, 10));\n      FacetSearchParams fsp = new FacetSearchParams(request, fip);\n      Query drillDown = DrillDown.query(fsp, new MatchAllDocsQuery(), drillDownCP);\n      TotalHitCountCollector total = new TotalHitCountCollector();\n      FacetsCollector fc = new FacetsCollector(fsp, indexReader, taxoReader);\n      searcher.search(drillDown, MultiCollector.wrap(fc, total));\n      assertTrue(\"no results for drill-down query \" + drillDown, total.getTotalHits() > 0);\n      List<FacetResult> facetResults = fc.getFacetResults();\n      assertEquals(1, facetResults.size());\n      FacetResultNode rootNode = facetResults.get(0).getFacetResultNode();\n      assertEquals(\"wrong count for \" + dim, expectedCounts.get(dim).intValue(), (int) rootNode.value);\n    }\n  }\n\n","sourceOld":"  private void verifyDrillDown(Map<String,Integer> expectedCounts, FacetIndexingParams fip, DirectoryReader indexReader, \n      TaxonomyReader taxoReader, IndexSearcher searcher) throws IOException {\n    // verify drill-down\n    for (String dim : expectedCounts.keySet()) {\n      CategoryPath drillDownCP = new CategoryPath(dim);\n      ArrayList<FacetRequest> request = new ArrayList<FacetRequest>(1);\n      request.add(new CountFacetRequest(drillDownCP, 10));\n      FacetSearchParams fsp = new FacetSearchParams(request, fip);\n      Query drillDown = DrillDown.query(fsp, new MatchAllDocsQuery(), drillDownCP);\n      TotalHitCountCollector total = new TotalHitCountCollector();\n      FacetsCollector fc = new FacetsCollector(fsp, indexReader, taxoReader);\n      searcher.search(drillDown, MultiCollector.wrap(fc, total));\n      assertTrue(\"no results for drill-down query \" + drillDown, total.getTotalHits() > 0);\n      List<FacetResult> facetResults = fc.getFacetResults();\n      assertEquals(1, facetResults.size());\n      FacetResultNode rootNode = facetResults.get(0).getFacetResultNode();\n      assertEquals(\"wrong count for \" + dim, expectedCounts.get(dim).intValue(), (int) rootNode.getValue());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d","date":1358784296,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/TestFacetsPayloadMigrationReader#verifyDrillDown(Map[String,Integer],FacetIndexingParams,DirectoryReader,TaxonomyReader,IndexSearcher).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/TestFacetsPayloadMigrationReader#verifyDrillDown(Map[String,Integer],FacetIndexingParams,DirectoryReader,TaxonomyReader,IndexSearcher).mjava","sourceNew":"  private void verifyDrillDown(Map<String,Integer> expectedCounts, FacetIndexingParams fip, DirectoryReader indexReader, \n      TaxonomyReader taxoReader, IndexSearcher searcher) throws IOException {\n    // verify drill-down\n    for (String dim : expectedCounts.keySet()) {\n      CategoryPath drillDownCP = new CategoryPath(dim);\n      FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(drillDownCP, 10));\n      Query drillDown = DrillDown.query(fsp, new MatchAllDocsQuery(), drillDownCP);\n      TotalHitCountCollector total = new TotalHitCountCollector();\n      FacetsCollector fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n      searcher.search(drillDown, MultiCollector.wrap(fc, total));\n      assertTrue(\"no results for drill-down query \" + drillDown, total.getTotalHits() > 0);\n      List<FacetResult> facetResults = fc.getFacetResults();\n      assertEquals(1, facetResults.size());\n      FacetResultNode rootNode = facetResults.get(0).getFacetResultNode();\n      assertEquals(\"wrong count for \" + dim, expectedCounts.get(dim).intValue(), (int) rootNode.value);\n    }\n  }\n\n","sourceOld":"  private void verifyDrillDown(Map<String,Integer> expectedCounts, FacetIndexingParams fip, DirectoryReader indexReader, \n      TaxonomyReader taxoReader, IndexSearcher searcher) throws IOException {\n    // verify drill-down\n    for (String dim : expectedCounts.keySet()) {\n      CategoryPath drillDownCP = new CategoryPath(dim);\n      ArrayList<FacetRequest> request = new ArrayList<FacetRequest>(1);\n      request.add(new CountFacetRequest(drillDownCP, 10));\n      FacetSearchParams fsp = new FacetSearchParams(request, fip);\n      Query drillDown = DrillDown.query(fsp, new MatchAllDocsQuery(), drillDownCP);\n      TotalHitCountCollector total = new TotalHitCountCollector();\n      FacetsCollector fc = new FacetsCollector(fsp, indexReader, taxoReader);\n      searcher.search(drillDown, MultiCollector.wrap(fc, total));\n      assertTrue(\"no results for drill-down query \" + drillDown, total.getTotalHits() > 0);\n      List<FacetResult> facetResults = fc.getFacetResults();\n      assertEquals(1, facetResults.size());\n      FacetResultNode rootNode = facetResults.get(0).getFacetResultNode();\n      assertEquals(\"wrong count for \" + dim, expectedCounts.get(dim).intValue(), (int) rootNode.value);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/TestFacetsPayloadMigrationReader#verifyDrillDown(Map[String,Integer],FacetIndexingParams,DirectoryReader,TaxonomyReader,IndexSearcher).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/TestFacetsPayloadMigrationReader#verifyDrillDown(Map[String,Integer],FacetIndexingParams,DirectoryReader,TaxonomyReader,IndexSearcher).mjava","sourceNew":"  private void verifyDrillDown(Map<String,Integer> expectedCounts, FacetIndexingParams fip, DirectoryReader indexReader, \n      TaxonomyReader taxoReader, IndexSearcher searcher) throws IOException {\n    // verify drill-down\n    for (String dim : expectedCounts.keySet()) {\n      CategoryPath drillDownCP = new CategoryPath(dim);\n      FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(drillDownCP, 10));\n      Query drillDown = DrillDown.query(fsp, new MatchAllDocsQuery(), drillDownCP);\n      TotalHitCountCollector total = new TotalHitCountCollector();\n      FacetsCollector fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n      searcher.search(drillDown, MultiCollector.wrap(fc, total));\n      assertTrue(\"no results for drill-down query \" + drillDown, total.getTotalHits() > 0);\n      List<FacetResult> facetResults = fc.getFacetResults();\n      assertEquals(1, facetResults.size());\n      FacetResultNode rootNode = facetResults.get(0).getFacetResultNode();\n      assertEquals(\"wrong count for \" + dim, expectedCounts.get(dim).intValue(), (int) rootNode.value);\n    }\n  }\n\n","sourceOld":"  private void verifyDrillDown(Map<String,Integer> expectedCounts, FacetIndexingParams fip, DirectoryReader indexReader, \n      TaxonomyReader taxoReader, IndexSearcher searcher) throws IOException {\n    // verify drill-down\n    for (String dim : expectedCounts.keySet()) {\n      CategoryPath drillDownCP = new CategoryPath(dim);\n      ArrayList<FacetRequest> request = new ArrayList<FacetRequest>(1);\n      request.add(new CountFacetRequest(drillDownCP, 10));\n      FacetSearchParams fsp = new FacetSearchParams(request, fip);\n      Query drillDown = DrillDown.query(fsp, new MatchAllDocsQuery(), drillDownCP);\n      TotalHitCountCollector total = new TotalHitCountCollector();\n      FacetsCollector fc = new FacetsCollector(fsp, indexReader, taxoReader);\n      searcher.search(drillDown, MultiCollector.wrap(fc, total));\n      assertTrue(\"no results for drill-down query \" + drillDown, total.getTotalHits() > 0);\n      List<FacetResult> facetResults = fc.getFacetResults();\n      assertEquals(1, facetResults.size());\n      FacetResultNode rootNode = facetResults.get(0).getFacetResultNode();\n      assertEquals(\"wrong count for \" + dim, expectedCounts.get(dim).intValue(), (int) rootNode.getValue());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fa7a3db4fa6c77f454964f515841c097ca09212","date":1359119468,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/TestFacetsPayloadMigrationReader#verifyDrillDown(Map[String,Integer],FacetIndexingParams,DirectoryReader,TaxonomyReader,IndexSearcher).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/TestFacetsPayloadMigrationReader#verifyDrillDown(Map[String,Integer],FacetIndexingParams,DirectoryReader,TaxonomyReader,IndexSearcher).mjava","sourceNew":"  private void verifyDrillDown(Map<String,Integer> expectedCounts, FacetIndexingParams fip, DirectoryReader indexReader, \n      TaxonomyReader taxoReader, IndexSearcher searcher) throws IOException {\n    // verify drill-down\n    for (String dim : expectedCounts.keySet()) {\n      CategoryPath drillDownCP = new CategoryPath(dim);\n      FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(drillDownCP, 10));\n      Query drillDown = DrillDown.query(fsp, new MatchAllDocsQuery(), Occur.MUST, drillDownCP);\n      TotalHitCountCollector total = new TotalHitCountCollector();\n      FacetsCollector fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n      searcher.search(drillDown, MultiCollector.wrap(fc, total));\n      assertTrue(\"no results for drill-down query \" + drillDown, total.getTotalHits() > 0);\n      List<FacetResult> facetResults = fc.getFacetResults();\n      assertEquals(1, facetResults.size());\n      FacetResultNode rootNode = facetResults.get(0).getFacetResultNode();\n      assertEquals(\"wrong count for \" + dim, expectedCounts.get(dim).intValue(), (int) rootNode.value);\n    }\n  }\n\n","sourceOld":"  private void verifyDrillDown(Map<String,Integer> expectedCounts, FacetIndexingParams fip, DirectoryReader indexReader, \n      TaxonomyReader taxoReader, IndexSearcher searcher) throws IOException {\n    // verify drill-down\n    for (String dim : expectedCounts.keySet()) {\n      CategoryPath drillDownCP = new CategoryPath(dim);\n      FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(drillDownCP, 10));\n      Query drillDown = DrillDown.query(fsp, new MatchAllDocsQuery(), drillDownCP);\n      TotalHitCountCollector total = new TotalHitCountCollector();\n      FacetsCollector fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n      searcher.search(drillDown, MultiCollector.wrap(fc, total));\n      assertTrue(\"no results for drill-down query \" + drillDown, total.getTotalHits() > 0);\n      List<FacetResult> facetResults = fc.getFacetResults();\n      assertEquals(1, facetResults.size());\n      FacetResultNode rootNode = facetResults.get(0).getFacetResultNode();\n      assertEquals(\"wrong count for \" + dim, expectedCounts.get(dim).intValue(), (int) rootNode.value);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd45d4a2ee01a1932d33eec42f5272c2402da679","date":1359316912,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/TestFacetsPayloadMigrationReader#verifyDrillDown(Map[String,Integer],FacetIndexingParams,DirectoryReader,TaxonomyReader,IndexSearcher).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/TestFacetsPayloadMigrationReader#verifyDrillDown(Map[String,Integer],FacetIndexingParams,DirectoryReader,TaxonomyReader,IndexSearcher).mjava","sourceNew":"  private void verifyDrillDown(Map<String,Integer> expectedCounts, FacetIndexingParams fip, DirectoryReader indexReader, \n      TaxonomyReader taxoReader, IndexSearcher searcher) throws IOException {\n    // verify drill-down\n    for (String dim : expectedCounts.keySet()) {\n      CategoryPath drillDownCP = new CategoryPath(dim);\n      FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(drillDownCP, 10));\n      Query drillDown = DrillDown.query(fsp, new MatchAllDocsQuery(), Occur.MUST, drillDownCP);\n      TotalHitCountCollector total = new TotalHitCountCollector();\n      FacetsCollector fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n      searcher.search(drillDown, MultiCollector.wrap(fc, total));\n      assertTrue(\"no results for drill-down query \" + drillDown, total.getTotalHits() > 0);\n      List<FacetResult> facetResults = fc.getFacetResults();\n      assertEquals(1, facetResults.size());\n      FacetResultNode rootNode = facetResults.get(0).getFacetResultNode();\n      assertEquals(\"wrong count for \" + dim, expectedCounts.get(dim).intValue(), (int) rootNode.value);\n    }\n  }\n\n","sourceOld":"  private void verifyDrillDown(Map<String,Integer> expectedCounts, FacetIndexingParams fip, DirectoryReader indexReader, \n      TaxonomyReader taxoReader, IndexSearcher searcher) throws IOException {\n    // verify drill-down\n    for (String dim : expectedCounts.keySet()) {\n      CategoryPath drillDownCP = new CategoryPath(dim);\n      FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(drillDownCP, 10));\n      Query drillDown = DrillDown.query(fsp, new MatchAllDocsQuery(), drillDownCP);\n      TotalHitCountCollector total = new TotalHitCountCollector();\n      FacetsCollector fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n      searcher.search(drillDown, MultiCollector.wrap(fc, total));\n      assertTrue(\"no results for drill-down query \" + drillDown, total.getTotalHits() > 0);\n      List<FacetResult> facetResults = fc.getFacetResults();\n      assertEquals(1, facetResults.size());\n      FacetResultNode rootNode = facetResults.get(0).getFacetResultNode();\n      assertEquals(\"wrong count for \" + dim, expectedCounts.get(dim).intValue(), (int) rootNode.value);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/util/TestFacetsPayloadMigrationReader#verifyDrillDown(Map[String,Integer],FacetIndexingParams,DirectoryReader,TaxonomyReader,IndexSearcher).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/TestFacetsPayloadMigrationReader#verifyDrillDown(Map[String,Integer],FacetIndexingParams,DirectoryReader,TaxonomyReader,IndexSearcher).mjava","sourceNew":"  private void verifyDrillDown(Map<String,Integer> expectedCounts, FacetIndexingParams fip, DirectoryReader indexReader, \n      TaxonomyReader taxoReader, IndexSearcher searcher) throws IOException {\n    // verify drill-down\n    for (String dim : expectedCounts.keySet()) {\n      CategoryPath drillDownCP = new CategoryPath(dim);\n      FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(drillDownCP, 10));\n      Query drillDown = DrillDown.query(fsp, new MatchAllDocsQuery(), Occur.MUST, drillDownCP);\n      TotalHitCountCollector total = new TotalHitCountCollector();\n      FacetsCollector fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n      searcher.search(drillDown, MultiCollector.wrap(fc, total));\n      assertTrue(\"no results for drill-down query \" + drillDown, total.getTotalHits() > 0);\n      List<FacetResult> facetResults = fc.getFacetResults();\n      assertEquals(1, facetResults.size());\n      FacetResultNode rootNode = facetResults.get(0).getFacetResultNode();\n      assertEquals(\"wrong count for \" + dim, expectedCounts.get(dim).intValue(), (int) rootNode.value);\n    }\n  }\n\n","sourceOld":"  private void verifyDrillDown(Map<String,Integer> expectedCounts, FacetIndexingParams fip, DirectoryReader indexReader, \n      TaxonomyReader taxoReader, IndexSearcher searcher) throws IOException {\n    // verify drill-down\n    for (String dim : expectedCounts.keySet()) {\n      CategoryPath drillDownCP = new CategoryPath(dim);\n      FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(drillDownCP, 10));\n      Query drillDown = DrillDown.query(fsp, new MatchAllDocsQuery(), Occur.MUST, drillDownCP);\n      TotalHitCountCollector total = new TotalHitCountCollector();\n      FacetsCollector fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n      searcher.search(drillDown, MultiCollector.wrap(fc, total));\n      assertTrue(\"no results for drill-down query \" + drillDown, total.getTotalHits() > 0);\n      List<FacetResult> facetResults = fc.getFacetResults();\n      assertEquals(1, facetResults.size());\n      FacetResultNode rootNode = facetResults.get(0).getFacetResultNode();\n      assertEquals(\"wrong count for \" + dim, expectedCounts.get(dim).intValue(), (int) rootNode.value);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d":["811cdb4a80352766eb0c762e48972707a924e5cd"],"607428da722dcb3e86bbd11c63de8986e6275c36":["9fa7a3db4fa6c77f454964f515841c097ca09212"],"9fa7a3db4fa6c77f454964f515841c097ca09212":["f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd45d4a2ee01a1932d33eec42f5272c2402da679":["07155cdd910937cdf6877e48884d5782845c8b8b","9fa7a3db4fa6c77f454964f515841c097ca09212"],"07155cdd910937cdf6877e48884d5782845c8b8b":["c4015cd39dff8d4dec562d909f9766debac53aa6","f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"],"811cdb4a80352766eb0c762e48972707a924e5cd":["6c2cd18c7da6f499a33f06fc89c07a463ec074c0"]},"commit2Childs":{"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d":["9fa7a3db4fa6c77f454964f515841c097ca09212","07155cdd910937cdf6877e48884d5782845c8b8b"],"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9fa7a3db4fa6c77f454964f515841c097ca09212":["607428da722dcb3e86bbd11c63de8986e6275c36","dd45d4a2ee01a1932d33eec42f5272c2402da679"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["07155cdd910937cdf6877e48884d5782845c8b8b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c4015cd39dff8d4dec562d909f9766debac53aa6","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":[],"07155cdd910937cdf6877e48884d5782845c8b8b":["dd45d4a2ee01a1932d33eec42f5272c2402da679"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["c4015cd39dff8d4dec562d909f9766debac53aa6","811cdb4a80352766eb0c762e48972707a924e5cd"],"811cdb4a80352766eb0c762e48972707a924e5cd":["f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dd45d4a2ee01a1932d33eec42f5272c2402da679","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}