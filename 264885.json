{"path":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testSameFieldAddedMultipleTimes().mjava","commits":[{"id":"30fd30bfbfa6b9e036bcd99c8339712e965d4a63","date":1351859294,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testSameFieldAddedMultipleTimes().mjava","pathOld":"/dev/null","sourceNew":"  public void testSameFieldAddedMultipleTimes() throws IOException {\n    MemoryIndex mindex = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    mindex.addField(\"field\", \"jumps over the\", mockAnalyzer);\n    AtomicReader reader = (AtomicReader) mindex.createSearcher().getIndexReader();\n    assertEquals(7, reader.terms(\"field\").getSumTotalTermFreq());\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"fox\"));\n    query.add(new Term(\"field\", \"jumps\"));\n    assertTrue(mindex.search(query) > 0.1);\n    mindex.reset();\n    mockAnalyzer.setPositionIncrementGap(1 + random().nextInt(10));\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    mindex.addField(\"field\", \"jumps over the\", mockAnalyzer);\n    assertEquals(0, mindex.search(query), 0.00001f);\n    query.setSlop(10);\n    assertTrue(\"posGap\" + mockAnalyzer.getPositionIncrementGap(\"field\") , mindex.search(query) > 0.0001);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testSameFieldAddedMultipleTimes().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testSameFieldAddedMultipleTimes().mjava","sourceNew":"  public void testSameFieldAddedMultipleTimes() throws IOException {\n    MemoryIndex mindex = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    mindex.addField(\"field\", \"jumps over the\", mockAnalyzer);\n    LeafReader reader = (LeafReader) mindex.createSearcher().getIndexReader();\n    assertEquals(7, reader.terms(\"field\").getSumTotalTermFreq());\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"fox\"));\n    query.add(new Term(\"field\", \"jumps\"));\n    assertTrue(mindex.search(query) > 0.1);\n    mindex.reset();\n    mockAnalyzer.setPositionIncrementGap(1 + random().nextInt(10));\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    mindex.addField(\"field\", \"jumps over the\", mockAnalyzer);\n    assertEquals(0, mindex.search(query), 0.00001f);\n    query.setSlop(10);\n    assertTrue(\"posGap\" + mockAnalyzer.getPositionIncrementGap(\"field\") , mindex.search(query) > 0.0001);\n  }\n\n","sourceOld":"  public void testSameFieldAddedMultipleTimes() throws IOException {\n    MemoryIndex mindex = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    mindex.addField(\"field\", \"jumps over the\", mockAnalyzer);\n    AtomicReader reader = (AtomicReader) mindex.createSearcher().getIndexReader();\n    assertEquals(7, reader.terms(\"field\").getSumTotalTermFreq());\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"fox\"));\n    query.add(new Term(\"field\", \"jumps\"));\n    assertTrue(mindex.search(query) > 0.1);\n    mindex.reset();\n    mockAnalyzer.setPositionIncrementGap(1 + random().nextInt(10));\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    mindex.addField(\"field\", \"jumps over the\", mockAnalyzer);\n    assertEquals(0, mindex.search(query), 0.00001f);\n    query.setSlop(10);\n    assertTrue(\"posGap\" + mockAnalyzer.getPositionIncrementGap(\"field\") , mindex.search(query) > 0.0001);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"761333d77c7f29123c00c93b107b743f32f012e6","date":1411986072,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testSameFieldAddedMultipleTimes().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testSameFieldAddedMultipleTimes().mjava","sourceNew":"  public void testSameFieldAddedMultipleTimes() throws IOException {\n    MemoryIndex mindex = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    mindex.addField(\"field\", \"jumps over the\", mockAnalyzer);\n    LeafReader reader = (LeafReader) mindex.createSearcher().getIndexReader();\n    assertEquals(7, reader.terms(\"field\").getSumTotalTermFreq());\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"fox\"));\n    query.add(new Term(\"field\", \"jumps\"));\n    assertTrue(mindex.search(query) > 0.1);\n    mindex.reset();\n    mockAnalyzer.setPositionIncrementGap(1 + random().nextInt(10));\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    mindex.addField(\"field\", \"jumps over the\", mockAnalyzer);\n    assertEquals(0, mindex.search(query), 0.00001f);\n    query.setSlop(10);\n    assertTrue(\"posGap\" + mockAnalyzer.getPositionIncrementGap(\"field\") , mindex.search(query) > 0.0001);\n  }\n\n","sourceOld":"  public void testSameFieldAddedMultipleTimes() throws IOException {\n    MemoryIndex mindex = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    mindex.addField(\"field\", \"jumps over the\", mockAnalyzer);\n    LeafReader reader = (LeafReader) mindex.createSearcher().getIndexReader();\n    assertEquals(7, reader.terms(\"field\").getSumTotalTermFreq());\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"fox\"));\n    query.add(new Term(\"field\", \"jumps\"));\n    assertTrue(mindex.search(query) > 0.1);\n    mindex.reset();\n    mockAnalyzer.setPositionIncrementGap(1 + random().nextInt(10));\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    mindex.addField(\"field\", \"jumps over the\", mockAnalyzer);\n    assertEquals(0, mindex.search(query), 0.00001f);\n    query.setSlop(10);\n    assertTrue(\"posGap\" + mockAnalyzer.getPositionIncrementGap(\"field\") , mindex.search(query) > 0.0001);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#testSameFieldAddedMultipleTimes().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#testSameFieldAddedMultipleTimes().mjava","sourceNew":"  public void testSameFieldAddedMultipleTimes() throws IOException {\n    MemoryIndex mindex = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    mindex.addField(\"field\", \"jumps over the\", mockAnalyzer);\n    LeafReader reader = (LeafReader) mindex.createSearcher().getIndexReader();\n    assertEquals(7, reader.terms(\"field\").getSumTotalTermFreq());\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"fox\"));\n    query.add(new Term(\"field\", \"jumps\"));\n    assertTrue(mindex.search(query) > 0.1);\n    mindex.reset();\n    mockAnalyzer.setPositionIncrementGap(1 + random().nextInt(10));\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    mindex.addField(\"field\", \"jumps over the\", mockAnalyzer);\n    assertEquals(0, mindex.search(query), 0.00001f);\n    query.setSlop(10);\n    assertTrue(\"posGap\" + mockAnalyzer.getPositionIncrementGap(\"field\") , mindex.search(query) > 0.0001);\n  }\n\n","sourceOld":"  public void testSameFieldAddedMultipleTimes() throws IOException {\n    MemoryIndex mindex = new MemoryIndex(random().nextBoolean(),  random().nextInt(50) * 1024 * 1024);\n    MockAnalyzer mockAnalyzer = new MockAnalyzer(random());\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    mindex.addField(\"field\", \"jumps over the\", mockAnalyzer);\n    LeafReader reader = (LeafReader) mindex.createSearcher().getIndexReader();\n    assertEquals(7, reader.terms(\"field\").getSumTotalTermFreq());\n    PhraseQuery query = new PhraseQuery();\n    query.add(new Term(\"field\", \"fox\"));\n    query.add(new Term(\"field\", \"jumps\"));\n    assertTrue(mindex.search(query) > 0.1);\n    mindex.reset();\n    mockAnalyzer.setPositionIncrementGap(1 + random().nextInt(10));\n    mindex.addField(\"field\", \"the quick brown fox\", mockAnalyzer);\n    mindex.addField(\"field\", \"jumps over the\", mockAnalyzer);\n    assertEquals(0, mindex.search(query), 0.00001f);\n    query.setSlop(10);\n    assertTrue(\"posGap\" + mockAnalyzer.getPositionIncrementGap(\"field\") , mindex.search(query) > 0.0001);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["c9fb5f46e264daf5ba3860defe623a89d202dd87","761333d77c7f29123c00c93b107b743f32f012e6"],"761333d77c7f29123c00c93b107b743f32f012e6":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["761333d77c7f29123c00c93b107b743f32f012e6"]},"commit2Childs":{"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d9a47902d6207303f5ed3e7aaca62ca33433af66","761333d77c7f29123c00c93b107b743f32f012e6"],"761333d77c7f29123c00c93b107b743f32f012e6":["d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}