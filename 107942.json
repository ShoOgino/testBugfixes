{"path":"solr/core/src/test/org/apache/solr/handler/component/TestPivotHelperCode#testCompareWithNullLast().mjava","commits":[{"id":"92751ba9273251eab6a2e379ec42a1697a32ff96","date":1407954233,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TestPivotHelperCode#testCompareWithNullLast().mjava","pathOld":"/dev/null","sourceNew":"  public void testCompareWithNullLast() throws Exception {\n    Long a = random().nextLong();\n    Long b = random().nextLong();\n\n    assertEquals(a.compareTo(b), PivotFacetFieldValueCollection.compareWithNullLast(a, b));\n    assertEquals(b.compareTo(a), PivotFacetFieldValueCollection.compareWithNullLast(b, a));\n\n    Long bb = new Long(b.longValue());\n    assertEquals(0, PivotFacetFieldValueCollection.compareWithNullLast(b, bb));\n\n    assertEquals(0, PivotFacetFieldValueCollection.compareWithNullLast(null, null));\n\n    assertTrue( PivotFacetFieldValueCollection.compareWithNullLast(a, null) < 0 );\n    assertTrue( PivotFacetFieldValueCollection.compareWithNullLast(b, null) < 0 );\n\n    assertTrue( 0 < PivotFacetFieldValueCollection.compareWithNullLast(null, a) );\n    assertTrue( 0 < PivotFacetFieldValueCollection.compareWithNullLast(null, b) );\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","date":1528054850,"type":3,"author":"Michael Braun","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TestPivotHelperCode#testCompareWithNullLast().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/TestPivotHelperCode#testCompareWithNullLast().mjava","sourceNew":"  @SuppressForbidden(reason = \"Checking object equality for Long instance\")\n  public void testCompareWithNullLast() throws Exception {\n    Long a = random().nextLong();\n    Long b = random().nextLong();\n\n    assertEquals(a.compareTo(b), PivotFacetFieldValueCollection.compareWithNullLast(a, b));\n    assertEquals(b.compareTo(a), PivotFacetFieldValueCollection.compareWithNullLast(b, a));\n\n    Long bb = new Long(b.longValue());\n    assertEquals(0, PivotFacetFieldValueCollection.compareWithNullLast(b, bb));\n\n    assertEquals(0, PivotFacetFieldValueCollection.compareWithNullLast(null, null));\n\n    assertTrue( PivotFacetFieldValueCollection.compareWithNullLast(a, null) < 0 );\n    assertTrue( PivotFacetFieldValueCollection.compareWithNullLast(b, null) < 0 );\n\n    assertTrue( 0 < PivotFacetFieldValueCollection.compareWithNullLast(null, a) );\n    assertTrue( 0 < PivotFacetFieldValueCollection.compareWithNullLast(null, b) );\n\n  }\n\n","sourceOld":"  public void testCompareWithNullLast() throws Exception {\n    Long a = random().nextLong();\n    Long b = random().nextLong();\n\n    assertEquals(a.compareTo(b), PivotFacetFieldValueCollection.compareWithNullLast(a, b));\n    assertEquals(b.compareTo(a), PivotFacetFieldValueCollection.compareWithNullLast(b, a));\n\n    Long bb = new Long(b.longValue());\n    assertEquals(0, PivotFacetFieldValueCollection.compareWithNullLast(b, bb));\n\n    assertEquals(0, PivotFacetFieldValueCollection.compareWithNullLast(null, null));\n\n    assertTrue( PivotFacetFieldValueCollection.compareWithNullLast(a, null) < 0 );\n    assertTrue( PivotFacetFieldValueCollection.compareWithNullLast(b, null) < 0 );\n\n    assertTrue( 0 < PivotFacetFieldValueCollection.compareWithNullLast(null, a) );\n    assertTrue( 0 < PivotFacetFieldValueCollection.compareWithNullLast(null, b) );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"628903f37b6c442da0d390db1c6af9a0e74d41a7","date":1531736685,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TestPivotHelperCode#testCompareWithNullLast().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/TestPivotHelperCode#testCompareWithNullLast().mjava","sourceNew":"  @SuppressForbidden(reason = \"Checking object equality for Long instance\")\n  public void testCompareWithNullLast() throws Exception {\n    Long a = random().nextLong();\n    Long b = random().nextLong();\n\n    assertEquals(a.compareTo(b), PivotFacetFieldValueCollection.compareWithNullLast(a, b));\n    assertEquals(b.compareTo(a), PivotFacetFieldValueCollection.compareWithNullLast(b, a));\n\n    Long bb = new Long(b.longValue());\n    assertEquals(0, PivotFacetFieldValueCollection.compareWithNullLast(b, bb));\n\n    assertEquals(0, PivotFacetFieldValueCollection.compareWithNullLast(null, null));\n\n    assertTrue( PivotFacetFieldValueCollection.compareWithNullLast(a, null) < 0 );\n    assertTrue( PivotFacetFieldValueCollection.compareWithNullLast(b, null) < 0 );\n\n    assertTrue( 0 < PivotFacetFieldValueCollection.compareWithNullLast(null, a) );\n    assertTrue( 0 < PivotFacetFieldValueCollection.compareWithNullLast(null, b) );\n\n  }\n\n","sourceOld":"  public void testCompareWithNullLast() throws Exception {\n    Long a = random().nextLong();\n    Long b = random().nextLong();\n\n    assertEquals(a.compareTo(b), PivotFacetFieldValueCollection.compareWithNullLast(a, b));\n    assertEquals(b.compareTo(a), PivotFacetFieldValueCollection.compareWithNullLast(b, a));\n\n    Long bb = new Long(b.longValue());\n    assertEquals(0, PivotFacetFieldValueCollection.compareWithNullLast(b, bb));\n\n    assertEquals(0, PivotFacetFieldValueCollection.compareWithNullLast(null, null));\n\n    assertTrue( PivotFacetFieldValueCollection.compareWithNullLast(a, null) < 0 );\n    assertTrue( PivotFacetFieldValueCollection.compareWithNullLast(b, null) < 0 );\n\n    assertTrue( 0 < PivotFacetFieldValueCollection.compareWithNullLast(null, a) );\n    assertTrue( 0 < PivotFacetFieldValueCollection.compareWithNullLast(null, b) );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TestPivotHelperCode#testCompareWithNullLast().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/TestPivotHelperCode#testCompareWithNullLast().mjava","sourceNew":"  @SuppressForbidden(reason = \"Checking object equality for Long instance\")\n  public void testCompareWithNullLast() throws Exception {\n    Long a = random().nextLong();\n    Long b = random().nextLong();\n\n    assertEquals(a.compareTo(b), PivotFacetFieldValueCollection.compareWithNullLast(a, b));\n    assertEquals(b.compareTo(a), PivotFacetFieldValueCollection.compareWithNullLast(b, a));\n\n    Long bb = new Long(b.longValue());\n    assertEquals(0, PivotFacetFieldValueCollection.compareWithNullLast(b, bb));\n\n    assertEquals(0, PivotFacetFieldValueCollection.compareWithNullLast(null, null));\n\n    assertTrue( PivotFacetFieldValueCollection.compareWithNullLast(a, null) < 0 );\n    assertTrue( PivotFacetFieldValueCollection.compareWithNullLast(b, null) < 0 );\n\n    assertTrue( 0 < PivotFacetFieldValueCollection.compareWithNullLast(null, a) );\n    assertTrue( 0 < PivotFacetFieldValueCollection.compareWithNullLast(null, b) );\n\n  }\n\n","sourceOld":"  public void testCompareWithNullLast() throws Exception {\n    Long a = random().nextLong();\n    Long b = random().nextLong();\n\n    assertEquals(a.compareTo(b), PivotFacetFieldValueCollection.compareWithNullLast(a, b));\n    assertEquals(b.compareTo(a), PivotFacetFieldValueCollection.compareWithNullLast(b, a));\n\n    Long bb = new Long(b.longValue());\n    assertEquals(0, PivotFacetFieldValueCollection.compareWithNullLast(b, bb));\n\n    assertEquals(0, PivotFacetFieldValueCollection.compareWithNullLast(null, null));\n\n    assertTrue( PivotFacetFieldValueCollection.compareWithNullLast(a, null) < 0 );\n    assertTrue( PivotFacetFieldValueCollection.compareWithNullLast(b, null) < 0 );\n\n    assertTrue( 0 < PivotFacetFieldValueCollection.compareWithNullLast(null, a) );\n    assertTrue( 0 < PivotFacetFieldValueCollection.compareWithNullLast(null, b) );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"92751ba9273251eab6a2e379ec42a1697a32ff96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["92751ba9273251eab6a2e379ec42a1697a32ff96"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["92751ba9273251eab6a2e379ec42a1697a32ff96","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["92751ba9273251eab6a2e379ec42a1697a32ff96","b6a269c1ddba3f8c9fa9a40572ecc538eddda41a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["628903f37b6c442da0d390db1c6af9a0e74d41a7"]},"commit2Childs":{"92751ba9273251eab6a2e379ec42a1697a32ff96":["b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["92751ba9273251eab6a2e379ec42a1697a32ff96"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}