{"path":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","commits":[{"id":"938e4fd7b1e4b34da1650edba7471764bbfaefde","date":1344033248,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#Overseer(ShardHandler,String,ZkStateReader,String).mjava","sourceNew":"  public void start(String id) {\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new Thread(tg, new CloudStateUpdater(reader, id));\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n    ccThread = new Thread(ccTg, new OverseerCollectionProcessor(reader, id, shardHandler, adminPath), \n        \"Overseer-\" + id);\n    ccThread.setDaemon(true);\n    \n    updaterThread.start();\n    ccThread.start();\n  }\n\n","sourceOld":"  public Overseer(ShardHandler shardHandler, String adminPath, final ZkStateReader reader, final String id) throws KeeperException, InterruptedException {\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    Thread updaterThread = new Thread(tg, new CloudStateUpdater(reader, id));\n    updaterThread.setDaemon(true);\n    updaterThread.start();\n    \n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n    Thread ccThread = new Thread(ccTg, new OverseerCollectionProcessor(reader, id, shardHandler, adminPath));\n    ccThread.setDaemon(true);\n    ccThread.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","sourceNew":"  public void start(String id) {\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new Thread(tg, new ClusterStateUpdater(reader, id));\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n    ccThread = new Thread(ccTg, new OverseerCollectionProcessor(reader, id, shardHandler, adminPath), \n        \"Overseer-\" + id);\n    ccThread.setDaemon(true);\n    \n    updaterThread.start();\n    ccThread.start();\n  }\n\n","sourceOld":"  public void start(String id) {\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new Thread(tg, new CloudStateUpdater(reader, id));\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n    ccThread = new Thread(ccTg, new OverseerCollectionProcessor(reader, id, shardHandler, adminPath), \n        \"Overseer-\" + id);\n    ccThread.setDaemon(true);\n    \n    updaterThread.start();\n    ccThread.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#Overseer(ShardHandler,String,ZkStateReader,String).mjava","sourceNew":"  public void start(String id) {\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new Thread(tg, new ClusterStateUpdater(reader, id));\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n    ccThread = new Thread(ccTg, new OverseerCollectionProcessor(reader, id, shardHandler, adminPath), \n        \"Overseer-\" + id);\n    ccThread.setDaemon(true);\n    \n    updaterThread.start();\n    ccThread.start();\n  }\n\n","sourceOld":"  public Overseer(ShardHandler shardHandler, String adminPath, final ZkStateReader reader, final String id) throws KeeperException, InterruptedException {\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    Thread updaterThread = new Thread(tg, new CloudStateUpdater(reader, id));\n    updaterThread.setDaemon(true);\n    updaterThread.start();\n    \n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n    Thread ccThread = new Thread(ccTg, new OverseerCollectionProcessor(reader, id, shardHandler, adminPath));\n    ccThread.setDaemon(true);\n    ccThread.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","pathOld":"/dev/null","sourceNew":"  public void start(String id) {\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new Thread(tg, new ClusterStateUpdater(reader, id));\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n    ccThread = new Thread(ccTg, new OverseerCollectionProcessor(reader, id, shardHandler, adminPath), \n        \"Overseer-\" + id);\n    ccThread.setDaemon(true);\n    \n    updaterThread.start();\n    ccThread.start();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ef2f1fb62d1e1507a618a2accff53a38b6c6e3d","date":1344892928,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","sourceNew":"  public void start(String id) {\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id));\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n    ccThread = new OverseerThread(ccTg, new OverseerCollectionProcessor(reader, id, shardHandler, adminPath), \n        \"Overseer-\" + id);\n    ccThread.setDaemon(true);\n    \n    updaterThread.start();\n    ccThread.start();\n  }\n\n","sourceOld":"  public void start(String id) {\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new Thread(tg, new ClusterStateUpdater(reader, id));\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n    ccThread = new Thread(ccTg, new OverseerCollectionProcessor(reader, id, shardHandler, adminPath), \n        \"Overseer-\" + id);\n    ccThread.setDaemon(true);\n    \n    updaterThread.start();\n    ccThread.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","sourceNew":"  public void start(String id) {\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id));\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n    ccThread = new OverseerThread(ccTg, new OverseerCollectionProcessor(reader, id, shardHandler, adminPath), \n        \"Overseer-\" + id);\n    ccThread.setDaemon(true);\n    \n    updaterThread.start();\n    ccThread.start();\n  }\n\n","sourceOld":"  public void start(String id) {\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new Thread(tg, new ClusterStateUpdater(reader, id));\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n    ccThread = new Thread(ccTg, new OverseerCollectionProcessor(reader, id, shardHandler, adminPath), \n        \"Overseer-\" + id);\n    ccThread.setDaemon(true);\n    \n    updaterThread.start();\n    ccThread.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","sourceNew":"  public void start(String id) {\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id));\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n    ccThread = new OverseerThread(ccTg, new OverseerCollectionProcessor(reader, id, shardHandler, adminPath), \n        \"Overseer-\" + id);\n    ccThread.setDaemon(true);\n    \n    updaterThread.start();\n    ccThread.start();\n  }\n\n","sourceOld":"  public void start(String id) {\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new Thread(tg, new ClusterStateUpdater(reader, id));\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n    ccThread = new Thread(ccTg, new OverseerCollectionProcessor(reader, id, shardHandler, adminPath), \n        \"Overseer-\" + id);\n    ccThread.setDaemon(true);\n    \n    updaterThread.start();\n    ccThread.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e6c873b95174ff04c895232927baa76a95925eb","date":1385054916,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","sourceNew":"  public void start(String id) {\n    close();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id));\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n    ccThread = new OverseerThread(ccTg, new OverseerCollectionProcessor(reader, id, shardHandler, adminPath), \n        \"Overseer-\" + id);\n    ccThread.setDaemon(true);\n    \n    updaterThread.start();\n    ccThread.start();\n  }\n\n","sourceOld":"  public void start(String id) {\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id));\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n    ccThread = new OverseerThread(ccTg, new OverseerCollectionProcessor(reader, id, shardHandler, adminPath), \n        \"Overseer-\" + id);\n    ccThread.setDaemon(true);\n    \n    updaterThread.start();\n    ccThread.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","sourceNew":"  public void start(String id) {\n    close();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id));\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n    ccThread = new OverseerThread(ccTg, new OverseerCollectionProcessor(reader, id, shardHandler, adminPath), \n        \"Overseer-\" + id);\n    ccThread.setDaemon(true);\n    \n    updaterThread.start();\n    ccThread.start();\n  }\n\n","sourceOld":"  public void start(String id) {\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id));\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n    ccThread = new OverseerThread(ccTg, new OverseerCollectionProcessor(reader, id, shardHandler, adminPath), \n        \"Overseer-\" + id);\n    ccThread.setDaemon(true);\n    \n    updaterThread.start();\n    ccThread.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bdd460d2fe72f80e52acb2774d58a4ae2e67b9b","date":1392108367,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","sourceNew":"  public void start(String id) {\n    close();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id));\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    ocp = new OverseerCollectionProcessor(reader, id, shardHandler, adminPath);\n    ccThread = new OverseerThread(ccTg, ocp,\n        \"Overseer-\" + id);\n    ccThread.setDaemon(true);\n    \n    updaterThread.start();\n    ccThread.start();\n  }\n\n","sourceOld":"  public void start(String id) {\n    close();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id));\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n    ccThread = new OverseerThread(ccTg, new OverseerCollectionProcessor(reader, id, shardHandler, adminPath), \n        \"Overseer-\" + id);\n    ccThread.setDaemon(true);\n    \n    updaterThread.start();\n    ccThread.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afd709fe548f0ddbaa0a678015e7c3d41ff1c87a","date":1392108948,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","sourceNew":"  public void start(String id) {\n    close();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id));\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n    ccThread = new OverseerThread(ccTg, new OverseerCollectionProcessor(reader, id, shardHandler, adminPath), \n        \"Overseer-\" + id);\n    ccThread.setDaemon(true);\n    \n    updaterThread.start();\n    ccThread.start();\n  }\n\n","sourceOld":"  public void start(String id) {\n    close();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id));\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    ocp = new OverseerCollectionProcessor(reader, id, shardHandler, adminPath);\n    ccThread = new OverseerThread(ccTg, ocp,\n        \"Overseer-\" + id);\n    ccThread.setDaemon(true);\n    \n    updaterThread.start();\n    ccThread.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8497bb4f9de61b5520423bd9af88ea11a6e109e7","date":1393245090,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","sourceNew":"  public void start(String id) {\n    close();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id));\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    ocp = new OverseerCollectionProcessor(reader, id, shardHandler, adminPath);\n    ccThread = new OverseerThread(ccTg, ocp,\n        \"Overseer-\" + id);\n    ccThread.setDaemon(true);\n    \n    updaterThread.start();\n    ccThread.start();\n  }\n\n","sourceOld":"  public void start(String id) {\n    close();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id));\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n    ccThread = new OverseerThread(ccTg, new OverseerCollectionProcessor(reader, id, shardHandler, adminPath), \n        \"Overseer-\" + id);\n    ccThread.setDaemon(true);\n    \n    updaterThread.start();\n    ccThread.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","date":1393532551,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","sourceNew":"  public void start(String id) {\n    close();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id));\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    ocp = new OverseerCollectionProcessor(reader, id, shardHandler, adminPath);\n    ccThread = new OverseerThread(ccTg, ocp,\n        \"Overseer-\" + id);\n    ccThread.setDaemon(true);\n    \n    updaterThread.start();\n    ccThread.start();\n  }\n\n","sourceOld":"  public void start(String id) {\n    close();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id));\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n    ccThread = new OverseerThread(ccTg, new OverseerCollectionProcessor(reader, id, shardHandler, adminPath), \n        \"Overseer-\" + id);\n    ccThread.setDaemon(true);\n    \n    updaterThread.start();\n    ccThread.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29d3735a752b61a8a74dea24ddb5c77ef486affa","date":1394253500,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","sourceNew":"  public void start(String id) {\n    close();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id));\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    ocp = new OverseerCollectionProcessor(reader, id, shardHandler, adminPath);\n    ccThread = new OverseerThread(ccTg, ocp, \"Overseer-\" + id);\n    ccThread.setDaemon(true);\n    \n    updaterThread.start();\n    ccThread.start();\n  }\n\n","sourceOld":"  public void start(String id) {\n    close();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id));\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    ocp = new OverseerCollectionProcessor(reader, id, shardHandler, adminPath);\n    ccThread = new OverseerThread(ccTg, ocp,\n        \"Overseer-\" + id);\n    ccThread.setDaemon(true);\n    \n    updaterThread.start();\n    ccThread.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","date":1394564625,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","sourceNew":"  public void start(String id) {\n    close();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id));\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    ocp = new OverseerCollectionProcessor(reader, id, shardHandler, adminPath);\n    ccThread = new OverseerThread(ccTg, ocp, \"Overseer-\" + id);\n    ccThread.setDaemon(true);\n    \n    updaterThread.start();\n    ccThread.start();\n  }\n\n","sourceOld":"  public void start(String id) {\n    close();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id));\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    ocp = new OverseerCollectionProcessor(reader, id, shardHandler, adminPath);\n    ccThread = new OverseerThread(ccTg, ocp,\n        \"Overseer-\" + id);\n    ccThread.setDaemon(true);\n    \n    updaterThread.start();\n    ccThread.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f45f67a018421da088ea39274f23ad5d339b97d","date":1395559348,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","sourceNew":"  public void start(String id) {\n    close();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats));\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    ocp = new OverseerCollectionProcessor(reader, id, shardHandler, adminPath, stats);\n    ccThread = new OverseerThread(ccTg, ocp, \"Overseer-\" + id);\n    ccThread.setDaemon(true);\n    \n    updaterThread.start();\n    ccThread.start();\n  }\n\n","sourceOld":"  public void start(String id) {\n    close();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id));\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    ocp = new OverseerCollectionProcessor(reader, id, shardHandler, adminPath);\n    ccThread = new OverseerThread(ccTg, ocp, \"Overseer-\" + id);\n    ccThread.setDaemon(true);\n    \n    updaterThread.start();\n    ccThread.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b15576cafd8b5d06857055c28f26912321937e3","date":1396452121,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","sourceNew":"  public void start(String id) {\n    close();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats));\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    overseerCollectionProcessor = new OverseerCollectionProcessor(reader, id, shardHandler, adminPath, stats);\n    ccThread = new OverseerThread(ccTg, overseerCollectionProcessor, \"Overseer-\" + id);\n    ccThread.setDaemon(true);\n    \n    updaterThread.start();\n    ccThread.start();\n  }\n\n","sourceOld":"  public void start(String id) {\n    close();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats));\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    ocp = new OverseerCollectionProcessor(reader, id, shardHandler, adminPath, stats);\n    ccThread = new OverseerThread(ccTg, ocp, \"Overseer-\" + id);\n    ccThread.setDaemon(true);\n    \n    updaterThread.start();\n    ccThread.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","sourceNew":"  public void start(String id) {\n    close();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats));\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    overseerCollectionProcessor = new OverseerCollectionProcessor(reader, id, shardHandler, adminPath, stats);\n    ccThread = new OverseerThread(ccTg, overseerCollectionProcessor, \"Overseer-\" + id);\n    ccThread.setDaemon(true);\n    \n    updaterThread.start();\n    ccThread.start();\n  }\n\n","sourceOld":"  public void start(String id) {\n    close();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats));\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    ocp = new OverseerCollectionProcessor(reader, id, shardHandler, adminPath, stats);\n    ccThread = new OverseerThread(ccTg, ocp, \"Overseer-\" + id);\n    ccThread.setDaemon(true);\n    \n    updaterThread.start();\n    ccThread.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad7bdba3e91cf3373cda2e52239cb761fc0b452","date":1408019547,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","sourceNew":"  public synchronized void start(String id) {\n    this.id = id;\n    closed = false;\n    doClose();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    overseerCollectionProcessor = new OverseerCollectionProcessor(reader, id, shardHandler, adminPath, stats);\n    ccThread = new OverseerThread(ccTg, overseerCollectionProcessor, \"OverseerCollectionProcessor-\" + id);\n    ccThread.setDaemon(true);\n    \n    ThreadGroup ohcfTg = new ThreadGroup(\"Overseer Hdfs SolrCore Failover Thread.\");\n\n    OverseerAutoReplicaFailoverThread autoReplicaFailoverThread = new OverseerAutoReplicaFailoverThread(config, reader, updateShardHandler);\n    arfoThread = new OverseerThread(ohcfTg, autoReplicaFailoverThread, \"OverseerHdfsCoreFailoverThread-\" + id);\n    arfoThread.setDaemon(true);\n    \n    updaterThread.start();\n    ccThread.start();\n    arfoThread.start();\n  }\n\n","sourceOld":"  public void start(String id) {\n    close();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats));\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    overseerCollectionProcessor = new OverseerCollectionProcessor(reader, id, shardHandler, adminPath, stats);\n    ccThread = new OverseerThread(ccTg, overseerCollectionProcessor, \"Overseer-\" + id);\n    ccThread.setDaemon(true);\n    \n    updaterThread.start();\n    ccThread.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4497a62bc4277479a03071cdcaba45e97915cab0","date":1429346577,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","sourceNew":"  public synchronized void start(String id) {\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    overseerCollectionProcessor = new OverseerCollectionProcessor(reader, id, shardHandler, adminPath, stats);\n    ccThread = new OverseerThread(ccTg, overseerCollectionProcessor, \"OverseerCollectionProcessor-\" + id);\n    ccThread.setDaemon(true);\n    \n    ThreadGroup ohcfTg = new ThreadGroup(\"Overseer Hdfs SolrCore Failover Thread.\");\n\n    OverseerAutoReplicaFailoverThread autoReplicaFailoverThread = new OverseerAutoReplicaFailoverThread(config, reader, updateShardHandler);\n    arfoThread = new OverseerThread(ohcfTg, autoReplicaFailoverThread, \"OverseerHdfsCoreFailoverThread-\" + id);\n    arfoThread.setDaemon(true);\n    \n    updaterThread.start();\n    ccThread.start();\n    arfoThread.start();\n  }\n\n","sourceOld":"  public synchronized void start(String id) {\n    this.id = id;\n    closed = false;\n    doClose();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    overseerCollectionProcessor = new OverseerCollectionProcessor(reader, id, shardHandler, adminPath, stats);\n    ccThread = new OverseerThread(ccTg, overseerCollectionProcessor, \"OverseerCollectionProcessor-\" + id);\n    ccThread.setDaemon(true);\n    \n    ThreadGroup ohcfTg = new ThreadGroup(\"Overseer Hdfs SolrCore Failover Thread.\");\n\n    OverseerAutoReplicaFailoverThread autoReplicaFailoverThread = new OverseerAutoReplicaFailoverThread(config, reader, updateShardHandler);\n    arfoThread = new OverseerThread(ohcfTg, autoReplicaFailoverThread, \"OverseerHdfsCoreFailoverThread-\" + id);\n    arfoThread.setDaemon(true);\n    \n    updaterThread.start();\n    ccThread.start();\n    arfoThread.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe","date":1430750405,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","sourceNew":"  public synchronized void start(String id) {\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    overseerCollectionProcessor = new OverseerCollectionProcessor(reader, id, shardHandler, adminPath, stats, Overseer.this);\n    ccThread = new OverseerThread(ccTg, overseerCollectionProcessor, \"OverseerCollectionProcessor-\" + id);\n    ccThread.setDaemon(true);\n    \n    ThreadGroup ohcfTg = new ThreadGroup(\"Overseer Hdfs SolrCore Failover Thread.\");\n\n    OverseerAutoReplicaFailoverThread autoReplicaFailoverThread = new OverseerAutoReplicaFailoverThread(config, reader, updateShardHandler);\n    arfoThread = new OverseerThread(ohcfTg, autoReplicaFailoverThread, \"OverseerHdfsCoreFailoverThread-\" + id);\n    arfoThread.setDaemon(true);\n    \n    updaterThread.start();\n    ccThread.start();\n    arfoThread.start();\n  }\n\n","sourceOld":"  public synchronized void start(String id) {\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    overseerCollectionProcessor = new OverseerCollectionProcessor(reader, id, shardHandler, adminPath, stats);\n    ccThread = new OverseerThread(ccTg, overseerCollectionProcessor, \"OverseerCollectionProcessor-\" + id);\n    ccThread.setDaemon(true);\n    \n    ThreadGroup ohcfTg = new ThreadGroup(\"Overseer Hdfs SolrCore Failover Thread.\");\n\n    OverseerAutoReplicaFailoverThread autoReplicaFailoverThread = new OverseerAutoReplicaFailoverThread(config, reader, updateShardHandler);\n    arfoThread = new OverseerThread(ohcfTg, autoReplicaFailoverThread, \"OverseerHdfsCoreFailoverThread-\" + id);\n    arfoThread.setDaemon(true);\n    \n    updaterThread.start();\n    ccThread.start();\n    arfoThread.start();\n  }\n\n","bugFix":null,"bugIntro":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","date":1438841252,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","sourceNew":"  public synchronized void start(String id) {\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    OverseerNodePrioritizer overseerPrioritizer = new OverseerNodePrioritizer(reader, adminPath, shardHandler.getShardHandlerFactory());\n    overseerCollectionProcessor = new OverseerCollectionProcessor(reader, id, shardHandler, adminPath, stats, Overseer.this, overseerPrioritizer);\n    ccThread = new OverseerThread(ccTg, overseerCollectionProcessor, \"OverseerCollectionProcessor-\" + id);\n    ccThread.setDaemon(true);\n    \n    ThreadGroup ohcfTg = new ThreadGroup(\"Overseer Hdfs SolrCore Failover Thread.\");\n\n    OverseerAutoReplicaFailoverThread autoReplicaFailoverThread = new OverseerAutoReplicaFailoverThread(config, reader, updateShardHandler);\n    arfoThread = new OverseerThread(ohcfTg, autoReplicaFailoverThread, \"OverseerHdfsCoreFailoverThread-\" + id);\n    arfoThread.setDaemon(true);\n    \n    updaterThread.start();\n    ccThread.start();\n    arfoThread.start();\n  }\n\n","sourceOld":"  public synchronized void start(String id) {\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    overseerCollectionProcessor = new OverseerCollectionProcessor(reader, id, shardHandler, adminPath, stats, Overseer.this);\n    ccThread = new OverseerThread(ccTg, overseerCollectionProcessor, \"OverseerCollectionProcessor-\" + id);\n    ccThread.setDaemon(true);\n    \n    ThreadGroup ohcfTg = new ThreadGroup(\"Overseer Hdfs SolrCore Failover Thread.\");\n\n    OverseerAutoReplicaFailoverThread autoReplicaFailoverThread = new OverseerAutoReplicaFailoverThread(config, reader, updateShardHandler);\n    arfoThread = new OverseerThread(ohcfTg, autoReplicaFailoverThread, \"OverseerHdfsCoreFailoverThread-\" + id);\n    arfoThread.setDaemon(true);\n    \n    updaterThread.start();\n    ccThread.start();\n    arfoThread.start();\n  }\n\n","bugFix":["8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe"],"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","sourceNew":"  public synchronized void start(String id) {\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    OverseerNodePrioritizer overseerPrioritizer = new OverseerNodePrioritizer(reader, adminPath, shardHandler.getShardHandlerFactory());\n    overseerCollectionConfigSetProcessor = new OverseerCollectionConfigSetProcessor(reader, id, shardHandler, adminPath, stats, Overseer.this, overseerPrioritizer);\n    ccThread = new OverseerThread(ccTg, overseerCollectionConfigSetProcessor, \"OverseerCollectionConfigSetProcessor-\" + id);\n    ccThread.setDaemon(true);\n    \n    ThreadGroup ohcfTg = new ThreadGroup(\"Overseer Hdfs SolrCore Failover Thread.\");\n\n    OverseerAutoReplicaFailoverThread autoReplicaFailoverThread = new OverseerAutoReplicaFailoverThread(config, reader, updateShardHandler);\n    arfoThread = new OverseerThread(ohcfTg, autoReplicaFailoverThread, \"OverseerHdfsCoreFailoverThread-\" + id);\n    arfoThread.setDaemon(true);\n    \n    updaterThread.start();\n    ccThread.start();\n    arfoThread.start();\n  }\n\n","sourceOld":"  public synchronized void start(String id) {\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    OverseerNodePrioritizer overseerPrioritizer = new OverseerNodePrioritizer(reader, adminPath, shardHandler.getShardHandlerFactory());\n    overseerCollectionProcessor = new OverseerCollectionProcessor(reader, id, shardHandler, adminPath, stats, Overseer.this, overseerPrioritizer);\n    ccThread = new OverseerThread(ccTg, overseerCollectionProcessor, \"OverseerCollectionProcessor-\" + id);\n    ccThread.setDaemon(true);\n    \n    ThreadGroup ohcfTg = new ThreadGroup(\"Overseer Hdfs SolrCore Failover Thread.\");\n\n    OverseerAutoReplicaFailoverThread autoReplicaFailoverThread = new OverseerAutoReplicaFailoverThread(config, reader, updateShardHandler);\n    arfoThread = new OverseerThread(ohcfTg, autoReplicaFailoverThread, \"OverseerHdfsCoreFailoverThread-\" + id);\n    arfoThread.setDaemon(true);\n    \n    updaterThread.start();\n    ccThread.start();\n    arfoThread.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"53c27cf75f102f0f4efb834cc98179f8318ecdc2","date":1487091937,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","sourceNew":"  public synchronized void start(String id) {\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    OverseerNodePrioritizer overseerPrioritizer = new OverseerNodePrioritizer(reader, adminPath, shardHandler.getShardHandlerFactory());\n    overseerCollectionConfigSetProcessor = new OverseerCollectionConfigSetProcessor(reader, id, shardHandler, adminPath, stats, Overseer.this, overseerPrioritizer);\n    ccThread = new OverseerThread(ccTg, overseerCollectionConfigSetProcessor, \"OverseerCollectionConfigSetProcessor-\" + id);\n    ccThread.setDaemon(true);\n    \n    ThreadGroup ohcfTg = new ThreadGroup(\"Overseer Hdfs SolrCore Failover Thread.\");\n\n    OverseerAutoReplicaFailoverThread autoReplicaFailoverThread = new OverseerAutoReplicaFailoverThread(config, reader, updateShardHandler);\n    arfoThread = new OverseerThread(ohcfTg, autoReplicaFailoverThread, \"OverseerHdfsCoreFailoverThread-\" + id);\n    arfoThread.setDaemon(true);\n    \n    updaterThread.start();\n    ccThread.start();\n    arfoThread.start();\n    assert ObjectReleaseTracker.track(this);\n  }\n\n","sourceOld":"  public synchronized void start(String id) {\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    OverseerNodePrioritizer overseerPrioritizer = new OverseerNodePrioritizer(reader, adminPath, shardHandler.getShardHandlerFactory());\n    overseerCollectionConfigSetProcessor = new OverseerCollectionConfigSetProcessor(reader, id, shardHandler, adminPath, stats, Overseer.this, overseerPrioritizer);\n    ccThread = new OverseerThread(ccTg, overseerCollectionConfigSetProcessor, \"OverseerCollectionConfigSetProcessor-\" + id);\n    ccThread.setDaemon(true);\n    \n    ThreadGroup ohcfTg = new ThreadGroup(\"Overseer Hdfs SolrCore Failover Thread.\");\n\n    OverseerAutoReplicaFailoverThread autoReplicaFailoverThread = new OverseerAutoReplicaFailoverThread(config, reader, updateShardHandler);\n    arfoThread = new OverseerThread(ohcfTg, autoReplicaFailoverThread, \"OverseerHdfsCoreFailoverThread-\" + id);\n    arfoThread.setDaemon(true);\n    \n    updaterThread.start();\n    ccThread.start();\n    arfoThread.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"022a4de90e0479b604264ca9c2e134c996454ab3","date":1487118265,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","sourceNew":"  public synchronized void start(String id) {\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    OverseerNodePrioritizer overseerPrioritizer = new OverseerNodePrioritizer(reader, adminPath, shardHandler.getShardHandlerFactory());\n    overseerCollectionConfigSetProcessor = new OverseerCollectionConfigSetProcessor(reader, id, shardHandler, adminPath, stats, Overseer.this, overseerPrioritizer);\n    ccThread = new OverseerThread(ccTg, overseerCollectionConfigSetProcessor, \"OverseerCollectionConfigSetProcessor-\" + id);\n    ccThread.setDaemon(true);\n    \n    ThreadGroup ohcfTg = new ThreadGroup(\"Overseer Hdfs SolrCore Failover Thread.\");\n\n    OverseerAutoReplicaFailoverThread autoReplicaFailoverThread = new OverseerAutoReplicaFailoverThread(config, reader, updateShardHandler);\n    arfoThread = new OverseerThread(ohcfTg, autoReplicaFailoverThread, \"OverseerHdfsCoreFailoverThread-\" + id);\n    arfoThread.setDaemon(true);\n    \n    updaterThread.start();\n    ccThread.start();\n    arfoThread.start();\n    assert ObjectReleaseTracker.track(this);\n  }\n\n","sourceOld":"  public synchronized void start(String id) {\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    OverseerNodePrioritizer overseerPrioritizer = new OverseerNodePrioritizer(reader, adminPath, shardHandler.getShardHandlerFactory());\n    overseerCollectionConfigSetProcessor = new OverseerCollectionConfigSetProcessor(reader, id, shardHandler, adminPath, stats, Overseer.this, overseerPrioritizer);\n    ccThread = new OverseerThread(ccTg, overseerCollectionConfigSetProcessor, \"OverseerCollectionConfigSetProcessor-\" + id);\n    ccThread.setDaemon(true);\n    \n    ThreadGroup ohcfTg = new ThreadGroup(\"Overseer Hdfs SolrCore Failover Thread.\");\n\n    OverseerAutoReplicaFailoverThread autoReplicaFailoverThread = new OverseerAutoReplicaFailoverThread(config, reader, updateShardHandler);\n    arfoThread = new OverseerThread(ohcfTg, autoReplicaFailoverThread, \"OverseerHdfsCoreFailoverThread-\" + id);\n    arfoThread.setDaemon(true);\n    \n    updaterThread.start();\n    ccThread.start();\n    arfoThread.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96","date":1487122334,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","sourceNew":"  public synchronized void start(String id) {\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    OverseerNodePrioritizer overseerPrioritizer = new OverseerNodePrioritizer(reader, adminPath, shardHandler.getShardHandlerFactory());\n    overseerCollectionConfigSetProcessor = new OverseerCollectionConfigSetProcessor(reader, id, shardHandler, adminPath, stats, Overseer.this, overseerPrioritizer);\n    ccThread = new OverseerThread(ccTg, overseerCollectionConfigSetProcessor, \"OverseerCollectionConfigSetProcessor-\" + id);\n    ccThread.setDaemon(true);\n    \n    ThreadGroup ohcfTg = new ThreadGroup(\"Overseer Hdfs SolrCore Failover Thread.\");\n\n    OverseerAutoReplicaFailoverThread autoReplicaFailoverThread = new OverseerAutoReplicaFailoverThread(config, reader, updateShardHandler);\n    arfoThread = new OverseerThread(ohcfTg, autoReplicaFailoverThread, \"OverseerHdfsCoreFailoverThread-\" + id);\n    arfoThread.setDaemon(true);\n    \n    updaterThread.start();\n    ccThread.start();\n    arfoThread.start();\n  }\n\n","sourceOld":"  public synchronized void start(String id) {\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    OverseerNodePrioritizer overseerPrioritizer = new OverseerNodePrioritizer(reader, adminPath, shardHandler.getShardHandlerFactory());\n    overseerCollectionConfigSetProcessor = new OverseerCollectionConfigSetProcessor(reader, id, shardHandler, adminPath, stats, Overseer.this, overseerPrioritizer);\n    ccThread = new OverseerThread(ccTg, overseerCollectionConfigSetProcessor, \"OverseerCollectionConfigSetProcessor-\" + id);\n    ccThread.setDaemon(true);\n    \n    ThreadGroup ohcfTg = new ThreadGroup(\"Overseer Hdfs SolrCore Failover Thread.\");\n\n    OverseerAutoReplicaFailoverThread autoReplicaFailoverThread = new OverseerAutoReplicaFailoverThread(config, reader, updateShardHandler);\n    arfoThread = new OverseerThread(ohcfTg, autoReplicaFailoverThread, \"OverseerHdfsCoreFailoverThread-\" + id);\n    arfoThread.setDaemon(true);\n    \n    updaterThread.start();\n    ccThread.start();\n    arfoThread.start();\n    assert ObjectReleaseTracker.track(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"897b06b1364bd1f658a8be7591e43f0851458e7f","date":1487123008,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","sourceNew":"  public synchronized void start(String id) {\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    OverseerNodePrioritizer overseerPrioritizer = new OverseerNodePrioritizer(reader, adminPath, shardHandler.getShardHandlerFactory());\n    overseerCollectionConfigSetProcessor = new OverseerCollectionConfigSetProcessor(reader, id, shardHandler, adminPath, stats, Overseer.this, overseerPrioritizer);\n    ccThread = new OverseerThread(ccTg, overseerCollectionConfigSetProcessor, \"OverseerCollectionConfigSetProcessor-\" + id);\n    ccThread.setDaemon(true);\n    \n    ThreadGroup ohcfTg = new ThreadGroup(\"Overseer Hdfs SolrCore Failover Thread.\");\n\n    OverseerAutoReplicaFailoverThread autoReplicaFailoverThread = new OverseerAutoReplicaFailoverThread(config, reader, updateShardHandler);\n    arfoThread = new OverseerThread(ohcfTg, autoReplicaFailoverThread, \"OverseerHdfsCoreFailoverThread-\" + id);\n    arfoThread.setDaemon(true);\n    \n    updaterThread.start();\n    ccThread.start();\n    arfoThread.start();\n    assert ObjectReleaseTracker.track(this);\n  }\n\n","sourceOld":"  public synchronized void start(String id) {\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    OverseerNodePrioritizer overseerPrioritizer = new OverseerNodePrioritizer(reader, adminPath, shardHandler.getShardHandlerFactory());\n    overseerCollectionConfigSetProcessor = new OverseerCollectionConfigSetProcessor(reader, id, shardHandler, adminPath, stats, Overseer.this, overseerPrioritizer);\n    ccThread = new OverseerThread(ccTg, overseerCollectionConfigSetProcessor, \"OverseerCollectionConfigSetProcessor-\" + id);\n    ccThread.setDaemon(true);\n    \n    ThreadGroup ohcfTg = new ThreadGroup(\"Overseer Hdfs SolrCore Failover Thread.\");\n\n    OverseerAutoReplicaFailoverThread autoReplicaFailoverThread = new OverseerAutoReplicaFailoverThread(config, reader, updateShardHandler);\n    arfoThread = new OverseerThread(ohcfTg, autoReplicaFailoverThread, \"OverseerHdfsCoreFailoverThread-\" + id);\n    arfoThread.setDaemon(true);\n    \n    updaterThread.start();\n    ccThread.start();\n    arfoThread.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6ca81a50d0a6c6f97f1e2b15ef90c5bd81765d09","date":1492411712,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","sourceNew":"  public synchronized void start(String id) {\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    OverseerNodePrioritizer overseerPrioritizer = new OverseerNodePrioritizer(reader, adminPath, shardHandler.getShardHandlerFactory());\n    overseerCollectionConfigSetProcessor = new OverseerCollectionConfigSetProcessor(reader, id, shardHandler, adminPath, stats, Overseer.this, overseerPrioritizer);\n    ccThread = new OverseerThread(ccTg, overseerCollectionConfigSetProcessor, \"OverseerCollectionConfigSetProcessor-\" + id);\n    ccThread.setDaemon(true);\n    \n    ThreadGroup ohcfTg = new ThreadGroup(\"Overseer Hdfs SolrCore Failover Thread.\");\n\n    OverseerAutoReplicaFailoverThread autoReplicaFailoverThread = new OverseerAutoReplicaFailoverThread(config, reader, updateShardHandler);\n    arfoThread = new OverseerThread(ohcfTg, autoReplicaFailoverThread, \"OverseerHdfsCoreFailoverThread-\" + id);\n    arfoThread.setDaemon(true);\n\n    ThreadGroup triggerThreadGroup = new ThreadGroup(\"Overseer autoscaling triggers\");\n    OverseerTriggerThread trigger = new OverseerTriggerThread(zkController);\n    triggerThread = new OverseerThread(triggerThreadGroup, trigger, \"OverseerAutoScalingTriggerThread-\" + id);\n\n    updaterThread.start();\n    ccThread.start();\n    arfoThread.start();\n    triggerThread.start();\n    assert ObjectReleaseTracker.track(this);\n  }\n\n","sourceOld":"  public synchronized void start(String id) {\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    OverseerNodePrioritizer overseerPrioritizer = new OverseerNodePrioritizer(reader, adminPath, shardHandler.getShardHandlerFactory());\n    overseerCollectionConfigSetProcessor = new OverseerCollectionConfigSetProcessor(reader, id, shardHandler, adminPath, stats, Overseer.this, overseerPrioritizer);\n    ccThread = new OverseerThread(ccTg, overseerCollectionConfigSetProcessor, \"OverseerCollectionConfigSetProcessor-\" + id);\n    ccThread.setDaemon(true);\n    \n    ThreadGroup ohcfTg = new ThreadGroup(\"Overseer Hdfs SolrCore Failover Thread.\");\n\n    OverseerAutoReplicaFailoverThread autoReplicaFailoverThread = new OverseerAutoReplicaFailoverThread(config, reader, updateShardHandler);\n    arfoThread = new OverseerThread(ohcfTg, autoReplicaFailoverThread, \"OverseerHdfsCoreFailoverThread-\" + id);\n    arfoThread.setDaemon(true);\n    \n    updaterThread.start();\n    ccThread.start();\n    arfoThread.start();\n    assert ObjectReleaseTracker.track(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"326b5c746af092eb827c5c1accdab1b47fe0cf3c","date":1492433195,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","sourceNew":"  public synchronized void start(String id) {\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    OverseerNodePrioritizer overseerPrioritizer = new OverseerNodePrioritizer(reader, adminPath, shardHandler.getShardHandlerFactory());\n    overseerCollectionConfigSetProcessor = new OverseerCollectionConfigSetProcessor(reader, id, shardHandler, adminPath, stats, Overseer.this, overseerPrioritizer);\n    ccThread = new OverseerThread(ccTg, overseerCollectionConfigSetProcessor, \"OverseerCollectionConfigSetProcessor-\" + id);\n    ccThread.setDaemon(true);\n    \n    ThreadGroup ohcfTg = new ThreadGroup(\"Overseer Hdfs SolrCore Failover Thread.\");\n\n    OverseerAutoReplicaFailoverThread autoReplicaFailoverThread = new OverseerAutoReplicaFailoverThread(config, reader, updateShardHandler);\n    arfoThread = new OverseerThread(ohcfTg, autoReplicaFailoverThread, \"OverseerHdfsCoreFailoverThread-\" + id);\n    arfoThread.setDaemon(true);\n\n    ThreadGroup triggerThreadGroup = new ThreadGroup(\"Overseer autoscaling triggers\");\n    OverseerTriggerThread trigger = new OverseerTriggerThread(zkController);\n    triggerThread = new OverseerThread(triggerThreadGroup, trigger, \"OverseerAutoScalingTriggerThread-\" + id);\n\n    updaterThread.start();\n    ccThread.start();\n    arfoThread.start();\n    triggerThread.start();\n    assert ObjectReleaseTracker.track(this);\n  }\n\n","sourceOld":"  public synchronized void start(String id) {\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    OverseerNodePrioritizer overseerPrioritizer = new OverseerNodePrioritizer(reader, adminPath, shardHandler.getShardHandlerFactory());\n    overseerCollectionConfigSetProcessor = new OverseerCollectionConfigSetProcessor(reader, id, shardHandler, adminPath, stats, Overseer.this, overseerPrioritizer);\n    ccThread = new OverseerThread(ccTg, overseerCollectionConfigSetProcessor, \"OverseerCollectionConfigSetProcessor-\" + id);\n    ccThread.setDaemon(true);\n    \n    ThreadGroup ohcfTg = new ThreadGroup(\"Overseer Hdfs SolrCore Failover Thread.\");\n\n    OverseerAutoReplicaFailoverThread autoReplicaFailoverThread = new OverseerAutoReplicaFailoverThread(config, reader, updateShardHandler);\n    arfoThread = new OverseerThread(ohcfTg, autoReplicaFailoverThread, \"OverseerHdfsCoreFailoverThread-\" + id);\n    arfoThread.setDaemon(true);\n    \n    updaterThread.start();\n    ccThread.start();\n    arfoThread.start();\n    assert ObjectReleaseTracker.track(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"717e5ceb2acae36d422ec75e5a4ce9fac40506e1","date":1501239603,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","sourceNew":"  public synchronized void start(String id) {\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    OverseerNodePrioritizer overseerPrioritizer = new OverseerNodePrioritizer(reader, adminPath, shardHandler.getShardHandlerFactory());\n    overseerCollectionConfigSetProcessor = new OverseerCollectionConfigSetProcessor(reader, id, shardHandler, adminPath, stats, Overseer.this, overseerPrioritizer);\n    ccThread = new OverseerThread(ccTg, overseerCollectionConfigSetProcessor, \"OverseerCollectionConfigSetProcessor-\" + id);\n    ccThread.setDaemon(true);\n\n    //TODO nocommit, autoscaling framework should start autoAddReplicas trigger automatically (implicitly)\n    Thread autoscalingTriggerCreator = new Thread(createAutoscalingTriggerIfNotExist(), \"AutoscalingTriggerCreator\");\n    autoscalingTriggerCreator.setDaemon(true);\n    autoscalingTriggerCreator.start();\n\n    ThreadGroup triggerThreadGroup = new ThreadGroup(\"Overseer autoscaling triggers\");\n    OverseerTriggerThread trigger = new OverseerTriggerThread(zkController);\n    triggerThread = new OverseerThread(triggerThreadGroup, trigger, \"OverseerAutoScalingTriggerThread-\" + id);\n\n    updaterThread.start();\n    ccThread.start();\n    triggerThread.start();\n    assert ObjectReleaseTracker.track(this);\n  }\n\n","sourceOld":"  public synchronized void start(String id) {\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    OverseerNodePrioritizer overseerPrioritizer = new OverseerNodePrioritizer(reader, adminPath, shardHandler.getShardHandlerFactory());\n    overseerCollectionConfigSetProcessor = new OverseerCollectionConfigSetProcessor(reader, id, shardHandler, adminPath, stats, Overseer.this, overseerPrioritizer);\n    ccThread = new OverseerThread(ccTg, overseerCollectionConfigSetProcessor, \"OverseerCollectionConfigSetProcessor-\" + id);\n    ccThread.setDaemon(true);\n    \n    ThreadGroup ohcfTg = new ThreadGroup(\"Overseer Hdfs SolrCore Failover Thread.\");\n\n    OverseerAutoReplicaFailoverThread autoReplicaFailoverThread = new OverseerAutoReplicaFailoverThread(config, reader, updateShardHandler);\n    arfoThread = new OverseerThread(ohcfTg, autoReplicaFailoverThread, \"OverseerHdfsCoreFailoverThread-\" + id);\n    arfoThread.setDaemon(true);\n\n    ThreadGroup triggerThreadGroup = new ThreadGroup(\"Overseer autoscaling triggers\");\n    OverseerTriggerThread trigger = new OverseerTriggerThread(zkController);\n    triggerThread = new OverseerThread(triggerThreadGroup, trigger, \"OverseerAutoScalingTriggerThread-\" + id);\n\n    updaterThread.start();\n    ccThread.start();\n    arfoThread.start();\n    triggerThread.start();\n    assert ObjectReleaseTracker.track(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0f8232be84c4df50ef0c041d4cb000eaeeb22ceb","date":1501299817,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","sourceNew":"  public synchronized void start(String id) {\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    OverseerNodePrioritizer overseerPrioritizer = new OverseerNodePrioritizer(reader, adminPath, shardHandler.getShardHandlerFactory());\n    overseerCollectionConfigSetProcessor = new OverseerCollectionConfigSetProcessor(reader, id, shardHandler, adminPath, stats, Overseer.this, overseerPrioritizer);\n    ccThread = new OverseerThread(ccTg, overseerCollectionConfigSetProcessor, \"OverseerCollectionConfigSetProcessor-\" + id);\n    ccThread.setDaemon(true);\n\n    //TODO nocommit, autoscaling framework should start autoAddReplicas trigger automatically (implicitly)\n    autoscalingTriggerCreator = new Thread(createAutoscalingTriggerIfNotExist(), \"AutoscalingTriggerCreator\");\n    autoscalingTriggerCreator.setDaemon(true);\n    autoscalingTriggerCreator.start();\n\n    ThreadGroup triggerThreadGroup = new ThreadGroup(\"Overseer autoscaling triggers\");\n    OverseerTriggerThread trigger = new OverseerTriggerThread(zkController);\n    triggerThread = new OverseerThread(triggerThreadGroup, trigger, \"OverseerAutoScalingTriggerThread-\" + id);\n\n    updaterThread.start();\n    ccThread.start();\n    triggerThread.start();\n    assert ObjectReleaseTracker.track(this);\n  }\n\n","sourceOld":"  public synchronized void start(String id) {\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    OverseerNodePrioritizer overseerPrioritizer = new OverseerNodePrioritizer(reader, adminPath, shardHandler.getShardHandlerFactory());\n    overseerCollectionConfigSetProcessor = new OverseerCollectionConfigSetProcessor(reader, id, shardHandler, adminPath, stats, Overseer.this, overseerPrioritizer);\n    ccThread = new OverseerThread(ccTg, overseerCollectionConfigSetProcessor, \"OverseerCollectionConfigSetProcessor-\" + id);\n    ccThread.setDaemon(true);\n\n    //TODO nocommit, autoscaling framework should start autoAddReplicas trigger automatically (implicitly)\n    Thread autoscalingTriggerCreator = new Thread(createAutoscalingTriggerIfNotExist(), \"AutoscalingTriggerCreator\");\n    autoscalingTriggerCreator.setDaemon(true);\n    autoscalingTriggerCreator.start();\n\n    ThreadGroup triggerThreadGroup = new ThreadGroup(\"Overseer autoscaling triggers\");\n    OverseerTriggerThread trigger = new OverseerTriggerThread(zkController);\n    triggerThread = new OverseerThread(triggerThreadGroup, trigger, \"OverseerAutoScalingTriggerThread-\" + id);\n\n    updaterThread.start();\n    ccThread.start();\n    triggerThread.start();\n    assert ObjectReleaseTracker.track(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","sourceNew":"  public synchronized void start(String id) {\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    OverseerNodePrioritizer overseerPrioritizer = new OverseerNodePrioritizer(reader, adminPath, shardHandler.getShardHandlerFactory());\n    overseerCollectionConfigSetProcessor = new OverseerCollectionConfigSetProcessor(reader, id, shardHandler, adminPath, stats, Overseer.this, overseerPrioritizer);\n    ccThread = new OverseerThread(ccTg, overseerCollectionConfigSetProcessor, \"OverseerCollectionConfigSetProcessor-\" + id);\n    ccThread.setDaemon(true);\n\n    //TODO nocommit, autoscaling framework should start autoAddReplicas trigger automatically (implicitly)\n    autoscalingTriggerCreator = new Thread(createAutoscalingTriggerIfNotExist(), \"AutoscalingTriggerCreator\");\n    autoscalingTriggerCreator.setDaemon(true);\n    autoscalingTriggerCreator.start();\n\n    ThreadGroup triggerThreadGroup = new ThreadGroup(\"Overseer autoscaling triggers\");\n    OverseerTriggerThread trigger = new OverseerTriggerThread(zkController.getCoreContainer().getResourceLoader(),\n        zkController.getClusterDataProvider());\n    triggerThread = new OverseerThread(triggerThreadGroup, trigger, \"OverseerAutoScalingTriggerThread-\" + id);\n\n    updaterThread.start();\n    ccThread.start();\n    triggerThread.start();\n    assert ObjectReleaseTracker.track(this);\n  }\n\n","sourceOld":"  public synchronized void start(String id) {\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    OverseerNodePrioritizer overseerPrioritizer = new OverseerNodePrioritizer(reader, adminPath, shardHandler.getShardHandlerFactory());\n    overseerCollectionConfigSetProcessor = new OverseerCollectionConfigSetProcessor(reader, id, shardHandler, adminPath, stats, Overseer.this, overseerPrioritizer);\n    ccThread = new OverseerThread(ccTg, overseerCollectionConfigSetProcessor, \"OverseerCollectionConfigSetProcessor-\" + id);\n    ccThread.setDaemon(true);\n\n    //TODO nocommit, autoscaling framework should start autoAddReplicas trigger automatically (implicitly)\n    autoscalingTriggerCreator = new Thread(createAutoscalingTriggerIfNotExist(), \"AutoscalingTriggerCreator\");\n    autoscalingTriggerCreator.setDaemon(true);\n    autoscalingTriggerCreator.start();\n\n    ThreadGroup triggerThreadGroup = new ThreadGroup(\"Overseer autoscaling triggers\");\n    OverseerTriggerThread trigger = new OverseerTriggerThread(zkController);\n    triggerThread = new OverseerThread(triggerThreadGroup, trigger, \"OverseerAutoScalingTriggerThread-\" + id);\n\n    updaterThread.start();\n    ccThread.start();\n    triggerThread.start();\n    assert ObjectReleaseTracker.track(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","sourceNew":"  public synchronized void start(String id) {\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    OverseerNodePrioritizer overseerPrioritizer = new OverseerNodePrioritizer(reader, adminPath, shardHandler.getShardHandlerFactory());\n    overseerCollectionConfigSetProcessor = new OverseerCollectionConfigSetProcessor(reader, id, shardHandler, adminPath, stats, Overseer.this, overseerPrioritizer);\n    ccThread = new OverseerThread(ccTg, overseerCollectionConfigSetProcessor, \"OverseerCollectionConfigSetProcessor-\" + id);\n    ccThread.setDaemon(true);\n\n    //TODO nocommit, autoscaling framework should start autoAddReplicas trigger automatically (implicitly)\n    autoscalingTriggerCreator = new Thread(createAutoscalingTriggerIfNotExist(), \"AutoscalingTriggerCreator\");\n    autoscalingTriggerCreator.setDaemon(true);\n    autoscalingTriggerCreator.start();\n\n    ThreadGroup triggerThreadGroup = new ThreadGroup(\"Overseer autoscaling triggers\");\n    OverseerTriggerThread trigger = new OverseerTriggerThread(zkController);\n    triggerThread = new OverseerThread(triggerThreadGroup, trigger, \"OverseerAutoScalingTriggerThread-\" + id);\n\n    updaterThread.start();\n    ccThread.start();\n    triggerThread.start();\n    assert ObjectReleaseTracker.track(this);\n  }\n\n","sourceOld":"  public synchronized void start(String id) {\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    OverseerNodePrioritizer overseerPrioritizer = new OverseerNodePrioritizer(reader, adminPath, shardHandler.getShardHandlerFactory());\n    overseerCollectionConfigSetProcessor = new OverseerCollectionConfigSetProcessor(reader, id, shardHandler, adminPath, stats, Overseer.this, overseerPrioritizer);\n    ccThread = new OverseerThread(ccTg, overseerCollectionConfigSetProcessor, \"OverseerCollectionConfigSetProcessor-\" + id);\n    ccThread.setDaemon(true);\n\n    //TODO nocommit, autoscaling framework should start autoAddReplicas trigger automatically (implicitly)\n    autoscalingTriggerCreator = new Thread(createAutoscalingTriggerIfNotExist(), \"AutoscalingTriggerCreator\");\n    autoscalingTriggerCreator.setDaemon(true);\n    autoscalingTriggerCreator.start();\n\n    ThreadGroup triggerThreadGroup = new ThreadGroup(\"Overseer autoscaling triggers\");\n    OverseerTriggerThread trigger = new OverseerTriggerThread(zkController.getCoreContainer().getResourceLoader(),\n        zkController.getClusterDataProvider());\n    triggerThread = new OverseerThread(triggerThreadGroup, trigger, \"OverseerAutoScalingTriggerThread-\" + id);\n\n    updaterThread.start();\n    ccThread.start();\n    triggerThread.start();\n    assert ObjectReleaseTracker.track(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b6c71577c4ee99246f48a2c29bc213daab310ee5","date":1505785422,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","sourceNew":"  public synchronized void start(String id) {\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    OverseerNodePrioritizer overseerPrioritizer = new OverseerNodePrioritizer(reader, adminPath, shardHandler.getShardHandlerFactory());\n    overseerCollectionConfigSetProcessor = new OverseerCollectionConfigSetProcessor(reader, id, shardHandler, adminPath, stats, Overseer.this, overseerPrioritizer);\n    ccThread = new OverseerThread(ccTg, overseerCollectionConfigSetProcessor, \"OverseerCollectionConfigSetProcessor-\" + id);\n    ccThread.setDaemon(true);\n\n    ThreadGroup triggerThreadGroup = new ThreadGroup(\"Overseer autoscaling triggers\");\n    OverseerTriggerThread trigger = new OverseerTriggerThread(zkController);\n    triggerThread = new OverseerThread(triggerThreadGroup, trigger, \"OverseerAutoScalingTriggerThread-\" + id);\n\n    updaterThread.start();\n    ccThread.start();\n    triggerThread.start();\n    assert ObjectReleaseTracker.track(this);\n  }\n\n","sourceOld":"  public synchronized void start(String id) {\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    OverseerNodePrioritizer overseerPrioritizer = new OverseerNodePrioritizer(reader, adminPath, shardHandler.getShardHandlerFactory());\n    overseerCollectionConfigSetProcessor = new OverseerCollectionConfigSetProcessor(reader, id, shardHandler, adminPath, stats, Overseer.this, overseerPrioritizer);\n    ccThread = new OverseerThread(ccTg, overseerCollectionConfigSetProcessor, \"OverseerCollectionConfigSetProcessor-\" + id);\n    ccThread.setDaemon(true);\n\n    //TODO nocommit, autoscaling framework should start autoAddReplicas trigger automatically (implicitly)\n    autoscalingTriggerCreator = new Thread(createAutoscalingTriggerIfNotExist(), \"AutoscalingTriggerCreator\");\n    autoscalingTriggerCreator.setDaemon(true);\n    autoscalingTriggerCreator.start();\n\n    ThreadGroup triggerThreadGroup = new ThreadGroup(\"Overseer autoscaling triggers\");\n    OverseerTriggerThread trigger = new OverseerTriggerThread(zkController);\n    triggerThread = new OverseerThread(triggerThreadGroup, trigger, \"OverseerAutoScalingTriggerThread-\" + id);\n\n    updaterThread.start();\n    ccThread.start();\n    triggerThread.start();\n    assert ObjectReleaseTracker.track(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d74e47b708b42ff110911e64513d0e872ac2577b","date":1505844540,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","sourceNew":"  public synchronized void start(String id) {\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    OverseerNodePrioritizer overseerPrioritizer = new OverseerNodePrioritizer(reader, adminPath, shardHandler.getShardHandlerFactory());\n    overseerCollectionConfigSetProcessor = new OverseerCollectionConfigSetProcessor(reader, id, shardHandler, adminPath, stats, Overseer.this, overseerPrioritizer);\n    ccThread = new OverseerThread(ccTg, overseerCollectionConfigSetProcessor, \"OverseerCollectionConfigSetProcessor-\" + id);\n    ccThread.setDaemon(true);\n\n    ThreadGroup triggerThreadGroup = new ThreadGroup(\"Overseer autoscaling triggers\");\n    OverseerTriggerThread trigger = new OverseerTriggerThread(zkController, config);\n    triggerThread = new OverseerThread(triggerThreadGroup, trigger, \"OverseerAutoScalingTriggerThread-\" + id);\n\n    updaterThread.start();\n    ccThread.start();\n    triggerThread.start();\n    assert ObjectReleaseTracker.track(this);\n  }\n\n","sourceOld":"  public synchronized void start(String id) {\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    OverseerNodePrioritizer overseerPrioritizer = new OverseerNodePrioritizer(reader, adminPath, shardHandler.getShardHandlerFactory());\n    overseerCollectionConfigSetProcessor = new OverseerCollectionConfigSetProcessor(reader, id, shardHandler, adminPath, stats, Overseer.this, overseerPrioritizer);\n    ccThread = new OverseerThread(ccTg, overseerCollectionConfigSetProcessor, \"OverseerCollectionConfigSetProcessor-\" + id);\n    ccThread.setDaemon(true);\n\n    ThreadGroup triggerThreadGroup = new ThreadGroup(\"Overseer autoscaling triggers\");\n    OverseerTriggerThread trigger = new OverseerTriggerThread(zkController);\n    triggerThread = new OverseerThread(triggerThreadGroup, trigger, \"OverseerAutoScalingTriggerThread-\" + id);\n\n    updaterThread.start();\n    ccThread.start();\n    triggerThread.start();\n    assert ObjectReleaseTracker.track(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","sourceNew":"  public synchronized void start(String id) {\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    OverseerNodePrioritizer overseerPrioritizer = new OverseerNodePrioritizer(reader, adminPath, shardHandler.getShardHandlerFactory());\n    overseerCollectionConfigSetProcessor = new OverseerCollectionConfigSetProcessor(reader, id, shardHandler, adminPath, stats, Overseer.this, overseerPrioritizer);\n    ccThread = new OverseerThread(ccTg, overseerCollectionConfigSetProcessor, \"OverseerCollectionConfigSetProcessor-\" + id);\n    ccThread.setDaemon(true);\n\n    ThreadGroup triggerThreadGroup = new ThreadGroup(\"Overseer autoscaling triggers\");\n    OverseerTriggerThread trigger = new OverseerTriggerThread(zkController, config);\n    triggerThread = new OverseerThread(triggerThreadGroup, trigger, \"OverseerAutoScalingTriggerThread-\" + id);\n\n    updaterThread.start();\n    ccThread.start();\n    triggerThread.start();\n    assert ObjectReleaseTracker.track(this);\n  }\n\n","sourceOld":"  public synchronized void start(String id) {\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    OverseerNodePrioritizer overseerPrioritizer = new OverseerNodePrioritizer(reader, adminPath, shardHandler.getShardHandlerFactory());\n    overseerCollectionConfigSetProcessor = new OverseerCollectionConfigSetProcessor(reader, id, shardHandler, adminPath, stats, Overseer.this, overseerPrioritizer);\n    ccThread = new OverseerThread(ccTg, overseerCollectionConfigSetProcessor, \"OverseerCollectionConfigSetProcessor-\" + id);\n    ccThread.setDaemon(true);\n    \n    ThreadGroup ohcfTg = new ThreadGroup(\"Overseer Hdfs SolrCore Failover Thread.\");\n\n    OverseerAutoReplicaFailoverThread autoReplicaFailoverThread = new OverseerAutoReplicaFailoverThread(config, reader, updateShardHandler);\n    arfoThread = new OverseerThread(ohcfTg, autoReplicaFailoverThread, \"OverseerHdfsCoreFailoverThread-\" + id);\n    arfoThread.setDaemon(true);\n    \n    updaterThread.start();\n    ccThread.start();\n    arfoThread.start();\n    assert ObjectReleaseTracker.track(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","sourceNew":"  public synchronized void start(String id) {\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    OverseerNodePrioritizer overseerPrioritizer = new OverseerNodePrioritizer(reader, adminPath, shardHandler.getShardHandlerFactory());\n    overseerCollectionConfigSetProcessor = new OverseerCollectionConfigSetProcessor(reader, id, shardHandler, adminPath, stats, Overseer.this, overseerPrioritizer);\n    ccThread = new OverseerThread(ccTg, overseerCollectionConfigSetProcessor, \"OverseerCollectionConfigSetProcessor-\" + id);\n    ccThread.setDaemon(true);\n\n    ThreadGroup triggerThreadGroup = new ThreadGroup(\"Overseer autoscaling triggers\");\n    OverseerTriggerThread trigger = new OverseerTriggerThread(zkController, config);\n    triggerThread = new OverseerThread(triggerThreadGroup, trigger, \"OverseerAutoScalingTriggerThread-\" + id);\n\n    updaterThread.start();\n    ccThread.start();\n    triggerThread.start();\n    assert ObjectReleaseTracker.track(this);\n  }\n\n","sourceOld":"  public synchronized void start(String id) {\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    OverseerNodePrioritizer overseerPrioritizer = new OverseerNodePrioritizer(reader, adminPath, shardHandler.getShardHandlerFactory());\n    overseerCollectionConfigSetProcessor = new OverseerCollectionConfigSetProcessor(reader, id, shardHandler, adminPath, stats, Overseer.this, overseerPrioritizer);\n    ccThread = new OverseerThread(ccTg, overseerCollectionConfigSetProcessor, \"OverseerCollectionConfigSetProcessor-\" + id);\n    ccThread.setDaemon(true);\n    \n    ThreadGroup ohcfTg = new ThreadGroup(\"Overseer Hdfs SolrCore Failover Thread.\");\n\n    OverseerAutoReplicaFailoverThread autoReplicaFailoverThread = new OverseerAutoReplicaFailoverThread(config, reader, updateShardHandler);\n    arfoThread = new OverseerThread(ohcfTg, autoReplicaFailoverThread, \"OverseerHdfsCoreFailoverThread-\" + id);\n    arfoThread.setDaemon(true);\n    \n    updaterThread.start();\n    ccThread.start();\n    arfoThread.start();\n    assert ObjectReleaseTracker.track(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","sourceNew":"  public synchronized void start(String id) {\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    OverseerNodePrioritizer overseerPrioritizer = new OverseerNodePrioritizer(reader, adminPath, shardHandler.getShardHandlerFactory());\n    overseerCollectionConfigSetProcessor = new OverseerCollectionConfigSetProcessor(reader, id, shardHandler, adminPath, stats, Overseer.this, overseerPrioritizer);\n    ccThread = new OverseerThread(ccTg, overseerCollectionConfigSetProcessor, \"OverseerCollectionConfigSetProcessor-\" + id);\n    ccThread.setDaemon(true);\n\n    ThreadGroup triggerThreadGroup = new ThreadGroup(\"Overseer autoscaling triggers\");\n    OverseerTriggerThread trigger = new OverseerTriggerThread(zkController.getCoreContainer().getResourceLoader(),\n        zkController.getSolrCloudManager(), config);\n    triggerThread = new OverseerThread(triggerThreadGroup, trigger, \"OverseerAutoScalingTriggerThread-\" + id);\n\n    updaterThread.start();\n    ccThread.start();\n    triggerThread.start();\n    assert ObjectReleaseTracker.track(this);\n  }\n\n","sourceOld":"  public synchronized void start(String id) {\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    OverseerNodePrioritizer overseerPrioritizer = new OverseerNodePrioritizer(reader, adminPath, shardHandler.getShardHandlerFactory());\n    overseerCollectionConfigSetProcessor = new OverseerCollectionConfigSetProcessor(reader, id, shardHandler, adminPath, stats, Overseer.this, overseerPrioritizer);\n    ccThread = new OverseerThread(ccTg, overseerCollectionConfigSetProcessor, \"OverseerCollectionConfigSetProcessor-\" + id);\n    ccThread.setDaemon(true);\n\n    ThreadGroup triggerThreadGroup = new ThreadGroup(\"Overseer autoscaling triggers\");\n    OverseerTriggerThread trigger = new OverseerTriggerThread(zkController, config);\n    triggerThread = new OverseerThread(triggerThreadGroup, trigger, \"OverseerAutoScalingTriggerThread-\" + id);\n\n    updaterThread.start();\n    ccThread.start();\n    triggerThread.start();\n    assert ObjectReleaseTracker.track(this);\n  }\n\n","bugFix":null,"bugIntro":["f94e3cd399f3275b48f601d95bc80d6d9b7fc4ca"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"427490d2618a9f2357c50cef93308d4b505704cb","date":1531854970,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","sourceNew":"  public synchronized void start(String id) {\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    OverseerNodePrioritizer overseerPrioritizer = new OverseerNodePrioritizer(reader, adminPath, shardHandler.getShardHandlerFactory());\n    overseerCollectionConfigSetProcessor = new OverseerCollectionConfigSetProcessor(reader, id, shardHandler, adminPath, stats, Overseer.this, overseerPrioritizer);\n    ccThread = new OverseerThread(ccTg, overseerCollectionConfigSetProcessor, \"OverseerCollectionConfigSetProcessor-\" + id);\n    ccThread.setDaemon(true);\n\n    ThreadGroup triggerThreadGroup = new ThreadGroup(\"Overseer autoscaling triggers\");\n    OverseerTriggerThread trigger = new OverseerTriggerThread(zkController.getCoreContainer().getResourceLoader(),\n        zkController.getSolrCloudManager(), config);\n    triggerThread = new OverseerThread(triggerThreadGroup, trigger, \"OverseerAutoScalingTriggerThread-\" + id);\n\n    updaterThread.start();\n    ccThread.start();\n    triggerThread.start();\n    if (this.id != null) {\n      assert ObjectReleaseTracker.track(this);\n    }\n  }\n\n","sourceOld":"  public synchronized void start(String id) {\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    OverseerNodePrioritizer overseerPrioritizer = new OverseerNodePrioritizer(reader, adminPath, shardHandler.getShardHandlerFactory());\n    overseerCollectionConfigSetProcessor = new OverseerCollectionConfigSetProcessor(reader, id, shardHandler, adminPath, stats, Overseer.this, overseerPrioritizer);\n    ccThread = new OverseerThread(ccTg, overseerCollectionConfigSetProcessor, \"OverseerCollectionConfigSetProcessor-\" + id);\n    ccThread.setDaemon(true);\n\n    ThreadGroup triggerThreadGroup = new ThreadGroup(\"Overseer autoscaling triggers\");\n    OverseerTriggerThread trigger = new OverseerTriggerThread(zkController.getCoreContainer().getResourceLoader(),\n        zkController.getSolrCloudManager(), config);\n    triggerThread = new OverseerThread(triggerThreadGroup, trigger, \"OverseerAutoScalingTriggerThread-\" + id);\n\n    updaterThread.start();\n    ccThread.start();\n    triggerThread.start();\n    assert ObjectReleaseTracker.track(this);\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","sourceNew":"  public synchronized void start(String id) {\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    OverseerNodePrioritizer overseerPrioritizer = new OverseerNodePrioritizer(reader, adminPath, shardHandler.getShardHandlerFactory());\n    overseerCollectionConfigSetProcessor = new OverseerCollectionConfigSetProcessor(reader, id, shardHandler, adminPath, stats, Overseer.this, overseerPrioritizer);\n    ccThread = new OverseerThread(ccTg, overseerCollectionConfigSetProcessor, \"OverseerCollectionConfigSetProcessor-\" + id);\n    ccThread.setDaemon(true);\n\n    ThreadGroup triggerThreadGroup = new ThreadGroup(\"Overseer autoscaling triggers\");\n    OverseerTriggerThread trigger = new OverseerTriggerThread(zkController.getCoreContainer().getResourceLoader(),\n        zkController.getSolrCloudManager(), config);\n    triggerThread = new OverseerThread(triggerThreadGroup, trigger, \"OverseerAutoScalingTriggerThread-\" + id);\n\n    updaterThread.start();\n    ccThread.start();\n    triggerThread.start();\n    if (this.id != null) {\n      assert ObjectReleaseTracker.track(this);\n    }\n  }\n\n","sourceOld":"  public synchronized void start(String id) {\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    OverseerNodePrioritizer overseerPrioritizer = new OverseerNodePrioritizer(reader, adminPath, shardHandler.getShardHandlerFactory());\n    overseerCollectionConfigSetProcessor = new OverseerCollectionConfigSetProcessor(reader, id, shardHandler, adminPath, stats, Overseer.this, overseerPrioritizer);\n    ccThread = new OverseerThread(ccTg, overseerCollectionConfigSetProcessor, \"OverseerCollectionConfigSetProcessor-\" + id);\n    ccThread.setDaemon(true);\n\n    ThreadGroup triggerThreadGroup = new ThreadGroup(\"Overseer autoscaling triggers\");\n    OverseerTriggerThread trigger = new OverseerTriggerThread(zkController.getCoreContainer().getResourceLoader(),\n        zkController.getSolrCloudManager(), config);\n    triggerThread = new OverseerThread(triggerThreadGroup, trigger, \"OverseerAutoScalingTriggerThread-\" + id);\n\n    updaterThread.start();\n    ccThread.start();\n    triggerThread.start();\n    assert ObjectReleaseTracker.track(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"042da0877b8e28fd372a8ed80d11c4506a466ad7","date":1534516670,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","sourceNew":"  public synchronized void start(String id) {\n    MDCLoggingContext.setNode(zkController == null ?\n        null :\n        zkController.getNodeName());\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    OverseerNodePrioritizer overseerPrioritizer = new OverseerNodePrioritizer(reader, adminPath, shardHandler.getShardHandlerFactory());\n    overseerCollectionConfigSetProcessor = new OverseerCollectionConfigSetProcessor(reader, id, shardHandler, adminPath, stats, Overseer.this, overseerPrioritizer);\n    ccThread = new OverseerThread(ccTg, overseerCollectionConfigSetProcessor, \"OverseerCollectionConfigSetProcessor-\" + id);\n    ccThread.setDaemon(true);\n\n    ThreadGroup triggerThreadGroup = new ThreadGroup(\"Overseer autoscaling triggers\");\n    OverseerTriggerThread trigger = new OverseerTriggerThread(zkController.getCoreContainer().getResourceLoader(),\n        zkController.getSolrCloudManager(), config);\n    triggerThread = new OverseerThread(triggerThreadGroup, trigger, \"OverseerAutoScalingTriggerThread-\" + id);\n\n    updaterThread.start();\n    ccThread.start();\n    triggerThread.start();\n    if (this.id != null) {\n      assert ObjectReleaseTracker.track(this);\n    }\n  }\n\n","sourceOld":"  public synchronized void start(String id) {\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    OverseerNodePrioritizer overseerPrioritizer = new OverseerNodePrioritizer(reader, adminPath, shardHandler.getShardHandlerFactory());\n    overseerCollectionConfigSetProcessor = new OverseerCollectionConfigSetProcessor(reader, id, shardHandler, adminPath, stats, Overseer.this, overseerPrioritizer);\n    ccThread = new OverseerThread(ccTg, overseerCollectionConfigSetProcessor, \"OverseerCollectionConfigSetProcessor-\" + id);\n    ccThread.setDaemon(true);\n\n    ThreadGroup triggerThreadGroup = new ThreadGroup(\"Overseer autoscaling triggers\");\n    OverseerTriggerThread trigger = new OverseerTriggerThread(zkController.getCoreContainer().getResourceLoader(),\n        zkController.getSolrCloudManager(), config);\n    triggerThread = new OverseerThread(triggerThreadGroup, trigger, \"OverseerAutoScalingTriggerThread-\" + id);\n\n    updaterThread.start();\n    ccThread.start();\n    triggerThread.start();\n    if (this.id != null) {\n      assert ObjectReleaseTracker.track(this);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","sourceNew":"  public synchronized void start(String id) {\n    MDCLoggingContext.setNode(zkController == null ?\n        null :\n        zkController.getNodeName());\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    OverseerNodePrioritizer overseerPrioritizer = new OverseerNodePrioritizer(reader, getStateUpdateQueue(), adminPath, shardHandler.getShardHandlerFactory(), updateShardHandler.getDefaultHttpClient());\n    overseerCollectionConfigSetProcessor = new OverseerCollectionConfigSetProcessor(reader, id, shardHandler, adminPath, stats, Overseer.this, overseerPrioritizer);\n    ccThread = new OverseerThread(ccTg, overseerCollectionConfigSetProcessor, \"OverseerCollectionConfigSetProcessor-\" + id);\n    ccThread.setDaemon(true);\n\n    ThreadGroup triggerThreadGroup = new ThreadGroup(\"Overseer autoscaling triggers\");\n    OverseerTriggerThread trigger = new OverseerTriggerThread(zkController.getCoreContainer().getResourceLoader(),\n        zkController.getSolrCloudManager(), config);\n    triggerThread = new OverseerThread(triggerThreadGroup, trigger, \"OverseerAutoScalingTriggerThread-\" + id);\n\n    updaterThread.start();\n    ccThread.start();\n    triggerThread.start();\n \n    assert ObjectReleaseTracker.track(this);\n  }\n\n","sourceOld":"  public synchronized void start(String id) {\n    MDCLoggingContext.setNode(zkController == null ?\n        null :\n        zkController.getNodeName());\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    OverseerNodePrioritizer overseerPrioritizer = new OverseerNodePrioritizer(reader, adminPath, shardHandler.getShardHandlerFactory());\n    overseerCollectionConfigSetProcessor = new OverseerCollectionConfigSetProcessor(reader, id, shardHandler, adminPath, stats, Overseer.this, overseerPrioritizer);\n    ccThread = new OverseerThread(ccTg, overseerCollectionConfigSetProcessor, \"OverseerCollectionConfigSetProcessor-\" + id);\n    ccThread.setDaemon(true);\n\n    ThreadGroup triggerThreadGroup = new ThreadGroup(\"Overseer autoscaling triggers\");\n    OverseerTriggerThread trigger = new OverseerTriggerThread(zkController.getCoreContainer().getResourceLoader(),\n        zkController.getSolrCloudManager(), config);\n    triggerThread = new OverseerThread(triggerThreadGroup, trigger, \"OverseerAutoScalingTriggerThread-\" + id);\n\n    updaterThread.start();\n    ccThread.start();\n    triggerThread.start();\n    if (this.id != null) {\n      assert ObjectReleaseTracker.track(this);\n    }\n  }\n\n","bugFix":["427490d2618a9f2357c50cef93308d4b505704cb","e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dad6a48950aafc9c2f5dc54740f8c6ab81304203","date":1552999379,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","sourceNew":"  public synchronized void start(String id) {\n    MDCLoggingContext.setNode(zkController == null ?\n        null :\n        zkController.getNodeName());\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    OverseerNodePrioritizer overseerPrioritizer = new OverseerNodePrioritizer(reader, getStateUpdateQueue(), adminPath, shardHandler.getShardHandlerFactory(), updateShardHandler.getDefaultHttpClient());\n    overseerCollectionConfigSetProcessor = new OverseerCollectionConfigSetProcessor(reader, id, shardHandler, adminPath, stats, Overseer.this, overseerPrioritizer);\n    ccThread = new OverseerThread(ccTg, overseerCollectionConfigSetProcessor, \"OverseerCollectionConfigSetProcessor-\" + id);\n    ccThread.setDaemon(true);\n\n    ThreadGroup triggerThreadGroup = new ThreadGroup(\"Overseer autoscaling triggers\");\n    OverseerTriggerThread trigger = new OverseerTriggerThread(zkController.getCoreContainer().getResourceLoader(),\n        zkController.getSolrCloudManager(), config);\n    triggerThread = new OverseerThread(triggerThreadGroup, trigger, \"OverseerAutoScalingTriggerThread-\" + id);\n\n    updaterThread.start();\n    ccThread.start();\n    triggerThread.start();\n\n    systemCollectionCompatCheck(new BiConsumer<String, Object>() {\n      boolean firstPair = true;\n      @Override\n      public void accept(String s, Object o) {\n        if (firstPair) {\n          log.warn(\"WARNING: Collection '.system' may need re-indexing due to compatibility issues listed below. See REINDEXCOLLECTION documentation for more details.\");\n          firstPair = false;\n        }\n        log.warn(\"WARNING: *\\t{}:\\t{}\", s, o);\n      }\n    });\n\n    assert ObjectReleaseTracker.track(this);\n  }\n\n","sourceOld":"  public synchronized void start(String id) {\n    MDCLoggingContext.setNode(zkController == null ?\n        null :\n        zkController.getNodeName());\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    OverseerNodePrioritizer overseerPrioritizer = new OverseerNodePrioritizer(reader, getStateUpdateQueue(), adminPath, shardHandler.getShardHandlerFactory(), updateShardHandler.getDefaultHttpClient());\n    overseerCollectionConfigSetProcessor = new OverseerCollectionConfigSetProcessor(reader, id, shardHandler, adminPath, stats, Overseer.this, overseerPrioritizer);\n    ccThread = new OverseerThread(ccTg, overseerCollectionConfigSetProcessor, \"OverseerCollectionConfigSetProcessor-\" + id);\n    ccThread.setDaemon(true);\n\n    ThreadGroup triggerThreadGroup = new ThreadGroup(\"Overseer autoscaling triggers\");\n    OverseerTriggerThread trigger = new OverseerTriggerThread(zkController.getCoreContainer().getResourceLoader(),\n        zkController.getSolrCloudManager(), config);\n    triggerThread = new OverseerThread(triggerThreadGroup, trigger, \"OverseerAutoScalingTriggerThread-\" + id);\n\n    updaterThread.start();\n    ccThread.start();\n    triggerThread.start();\n \n    assert ObjectReleaseTracker.track(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f94e3cd399f3275b48f601d95bc80d6d9b7fc4ca","date":1586138114,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","sourceNew":"  public synchronized void start(String id) {\n    MDCLoggingContext.setNode(zkController == null ?\n        null :\n        zkController.getNodeName());\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    OverseerNodePrioritizer overseerPrioritizer = new OverseerNodePrioritizer(reader, getStateUpdateQueue(), adminPath, shardHandler.getShardHandlerFactory(), updateShardHandler.getDefaultHttpClient());\n    overseerCollectionConfigSetProcessor = new OverseerCollectionConfigSetProcessor(reader, id, shardHandler, adminPath, stats, Overseer.this, overseerPrioritizer);\n    ccThread = new OverseerThread(ccTg, overseerCollectionConfigSetProcessor, \"OverseerCollectionConfigSetProcessor-\" + id);\n    ccThread.setDaemon(true);\n\n    ThreadGroup triggerThreadGroup = new ThreadGroup(\"Overseer autoscaling triggers\");\n    OverseerTriggerThread trigger = new OverseerTriggerThread(zkController.getCoreContainer().getResourceLoader(),\n        zkController.getSolrCloudManager());\n    triggerThread = new OverseerThread(triggerThreadGroup, trigger, \"OverseerAutoScalingTriggerThread-\" + id);\n\n    updaterThread.start();\n    ccThread.start();\n    triggerThread.start();\n\n    systemCollectionCompatCheck(new BiConsumer<String, Object>() {\n      boolean firstPair = true;\n      @Override\n      public void accept(String s, Object o) {\n        if (firstPair) {\n          log.warn(\"WARNING: Collection '.system' may need re-indexing due to compatibility issues listed below. See REINDEXCOLLECTION documentation for more details.\");\n          firstPair = false;\n        }\n        log.warn(\"WARNING: *\\t{}:\\t{}\", s, o);\n      }\n    });\n\n    assert ObjectReleaseTracker.track(this);\n  }\n\n","sourceOld":"  public synchronized void start(String id) {\n    MDCLoggingContext.setNode(zkController == null ?\n        null :\n        zkController.getNodeName());\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    OverseerNodePrioritizer overseerPrioritizer = new OverseerNodePrioritizer(reader, getStateUpdateQueue(), adminPath, shardHandler.getShardHandlerFactory(), updateShardHandler.getDefaultHttpClient());\n    overseerCollectionConfigSetProcessor = new OverseerCollectionConfigSetProcessor(reader, id, shardHandler, adminPath, stats, Overseer.this, overseerPrioritizer);\n    ccThread = new OverseerThread(ccTg, overseerCollectionConfigSetProcessor, \"OverseerCollectionConfigSetProcessor-\" + id);\n    ccThread.setDaemon(true);\n\n    ThreadGroup triggerThreadGroup = new ThreadGroup(\"Overseer autoscaling triggers\");\n    OverseerTriggerThread trigger = new OverseerTriggerThread(zkController.getCoreContainer().getResourceLoader(),\n        zkController.getSolrCloudManager(), config);\n    triggerThread = new OverseerThread(triggerThreadGroup, trigger, \"OverseerAutoScalingTriggerThread-\" + id);\n\n    updaterThread.start();\n    ccThread.start();\n    triggerThread.start();\n\n    systemCollectionCompatCheck(new BiConsumer<String, Object>() {\n      boolean firstPair = true;\n      @Override\n      public void accept(String s, Object o) {\n        if (firstPair) {\n          log.warn(\"WARNING: Collection '.system' may need re-indexing due to compatibility issues listed below. See REINDEXCOLLECTION documentation for more details.\");\n          firstPair = false;\n        }\n        log.warn(\"WARNING: *\\t{}:\\t{}\", s, o);\n      }\n    });\n\n    assert ObjectReleaseTracker.track(this);\n  }\n\n","bugFix":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad4957cde742defe6db19689abdc267c5d948066","date":1587990850,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","sourceNew":"  public synchronized void start(String id) {\n    MDCLoggingContext.setNode(zkController == null ?\n        null :\n        zkController.getNodeName());\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id={}) starting\", id);\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    OverseerNodePrioritizer overseerPrioritizer = new OverseerNodePrioritizer(reader, getStateUpdateQueue(), adminPath, shardHandler.getShardHandlerFactory(), updateShardHandler.getDefaultHttpClient());\n    overseerCollectionConfigSetProcessor = new OverseerCollectionConfigSetProcessor(reader, id, shardHandler, adminPath, stats, Overseer.this, overseerPrioritizer);\n    ccThread = new OverseerThread(ccTg, overseerCollectionConfigSetProcessor, \"OverseerCollectionConfigSetProcessor-\" + id);\n    ccThread.setDaemon(true);\n\n    ThreadGroup triggerThreadGroup = new ThreadGroup(\"Overseer autoscaling triggers\");\n    OverseerTriggerThread trigger = new OverseerTriggerThread(zkController.getCoreContainer().getResourceLoader(),\n        zkController.getSolrCloudManager());\n    triggerThread = new OverseerThread(triggerThreadGroup, trigger, \"OverseerAutoScalingTriggerThread-\" + id);\n\n    updaterThread.start();\n    ccThread.start();\n    triggerThread.start();\n\n    systemCollectionCompatCheck(new BiConsumer<String, Object>() {\n      boolean firstPair = true;\n      @Override\n      public void accept(String s, Object o) {\n        if (firstPair) {\n          log.warn(\"WARNING: Collection '.system' may need re-indexing due to compatibility issues listed below. See REINDEXCOLLECTION documentation for more details.\");\n          firstPair = false;\n        }\n        log.warn(\"WARNING: *\\t{}:\\t{}\", s, o);\n      }\n    });\n\n    assert ObjectReleaseTracker.track(this);\n  }\n\n","sourceOld":"  public synchronized void start(String id) {\n    MDCLoggingContext.setNode(zkController == null ?\n        null :\n        zkController.getNodeName());\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id=\" + id + \") starting\");\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    OverseerNodePrioritizer overseerPrioritizer = new OverseerNodePrioritizer(reader, getStateUpdateQueue(), adminPath, shardHandler.getShardHandlerFactory(), updateShardHandler.getDefaultHttpClient());\n    overseerCollectionConfigSetProcessor = new OverseerCollectionConfigSetProcessor(reader, id, shardHandler, adminPath, stats, Overseer.this, overseerPrioritizer);\n    ccThread = new OverseerThread(ccTg, overseerCollectionConfigSetProcessor, \"OverseerCollectionConfigSetProcessor-\" + id);\n    ccThread.setDaemon(true);\n\n    ThreadGroup triggerThreadGroup = new ThreadGroup(\"Overseer autoscaling triggers\");\n    OverseerTriggerThread trigger = new OverseerTriggerThread(zkController.getCoreContainer().getResourceLoader(),\n        zkController.getSolrCloudManager());\n    triggerThread = new OverseerThread(triggerThreadGroup, trigger, \"OverseerAutoScalingTriggerThread-\" + id);\n\n    updaterThread.start();\n    ccThread.start();\n    triggerThread.start();\n\n    systemCollectionCompatCheck(new BiConsumer<String, Object>() {\n      boolean firstPair = true;\n      @Override\n      public void accept(String s, Object o) {\n        if (firstPair) {\n          log.warn(\"WARNING: Collection '.system' may need re-indexing due to compatibility issues listed below. See REINDEXCOLLECTION documentation for more details.\");\n          firstPair = false;\n        }\n        log.warn(\"WARNING: *\\t{}:\\t{}\", s, o);\n      }\n    });\n\n    assert ObjectReleaseTracker.track(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1964c059f45ae1de1877f9f0fe3ca327ea4218e8","date":1594088246,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","sourceNew":"  public synchronized void start(String id) {\n    MDCLoggingContext.setNode(zkController == null ?\n        null :\n        zkController.getNodeName());\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id={}) starting\", id);\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    OverseerNodePrioritizer overseerPrioritizer = new OverseerNodePrioritizer(reader, getStateUpdateQueue(), adminPath, shardHandler.getShardHandlerFactory());\n    overseerCollectionConfigSetProcessor = new OverseerCollectionConfigSetProcessor(reader, id, shardHandler, adminPath, stats, Overseer.this, overseerPrioritizer);\n    ccThread = new OverseerThread(ccTg, overseerCollectionConfigSetProcessor, \"OverseerCollectionConfigSetProcessor-\" + id);\n    ccThread.setDaemon(true);\n\n    ThreadGroup triggerThreadGroup = new ThreadGroup(\"Overseer autoscaling triggers\");\n    OverseerTriggerThread trigger = new OverseerTriggerThread(zkController.getCoreContainer().getResourceLoader(),\n        zkController.getSolrCloudManager());\n    triggerThread = new OverseerThread(triggerThreadGroup, trigger, \"OverseerAutoScalingTriggerThread-\" + id);\n\n    updaterThread.start();\n    ccThread.start();\n    triggerThread.start();\n\n    systemCollectionCompatCheck(new BiConsumer<String, Object>() {\n      boolean firstPair = true;\n      @Override\n      public void accept(String s, Object o) {\n        if (firstPair) {\n          log.warn(\"WARNING: Collection '.system' may need re-indexing due to compatibility issues listed below. See REINDEXCOLLECTION documentation for more details.\");\n          firstPair = false;\n        }\n        log.warn(\"WARNING: *\\t{}:\\t{}\", s, o);\n      }\n    });\n\n    assert ObjectReleaseTracker.track(this);\n  }\n\n","sourceOld":"  public synchronized void start(String id) {\n    MDCLoggingContext.setNode(zkController == null ?\n        null :\n        zkController.getNodeName());\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id={}) starting\", id);\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    OverseerNodePrioritizer overseerPrioritizer = new OverseerNodePrioritizer(reader, getStateUpdateQueue(), adminPath, shardHandler.getShardHandlerFactory(), updateShardHandler.getDefaultHttpClient());\n    overseerCollectionConfigSetProcessor = new OverseerCollectionConfigSetProcessor(reader, id, shardHandler, adminPath, stats, Overseer.this, overseerPrioritizer);\n    ccThread = new OverseerThread(ccTg, overseerCollectionConfigSetProcessor, \"OverseerCollectionConfigSetProcessor-\" + id);\n    ccThread.setDaemon(true);\n\n    ThreadGroup triggerThreadGroup = new ThreadGroup(\"Overseer autoscaling triggers\");\n    OverseerTriggerThread trigger = new OverseerTriggerThread(zkController.getCoreContainer().getResourceLoader(),\n        zkController.getSolrCloudManager());\n    triggerThread = new OverseerThread(triggerThreadGroup, trigger, \"OverseerAutoScalingTriggerThread-\" + id);\n\n    updaterThread.start();\n    ccThread.start();\n    triggerThread.start();\n\n    systemCollectionCompatCheck(new BiConsumer<String, Object>() {\n      boolean firstPair = true;\n      @Override\n      public void accept(String s, Object o) {\n        if (firstPair) {\n          log.warn(\"WARNING: Collection '.system' may need re-indexing due to compatibility issues listed below. See REINDEXCOLLECTION documentation for more details.\");\n          firstPair = false;\n        }\n        log.warn(\"WARNING: *\\t{}:\\t{}\", s, o);\n      }\n    });\n\n    assert ObjectReleaseTracker.track(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","sourceNew":"  public synchronized void start(String id) {\n    MDCLoggingContext.setNode(zkController == null ?\n        null :\n        zkController.getNodeName());\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id={}) starting\", id);\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    OverseerNodePrioritizer overseerPrioritizer = new OverseerNodePrioritizer(reader, getStateUpdateQueue(), adminPath, shardHandler.getShardHandlerFactory());\n    overseerCollectionConfigSetProcessor = new OverseerCollectionConfigSetProcessor(reader, id, shardHandler, adminPath, stats, Overseer.this, overseerPrioritizer);\n    ccThread = new OverseerThread(ccTg, overseerCollectionConfigSetProcessor, \"OverseerCollectionConfigSetProcessor-\" + id);\n    ccThread.setDaemon(true);\n\n    updaterThread.start();\n    ccThread.start();\n\n    systemCollectionCompatCheck(new BiConsumer<String, Object>() {\n      boolean firstPair = true;\n      @Override\n      public void accept(String s, Object o) {\n        if (firstPair) {\n          log.warn(\"WARNING: Collection '.system' may need re-indexing due to compatibility issues listed below. See REINDEXCOLLECTION documentation for more details.\");\n          firstPair = false;\n        }\n        log.warn(\"WARNING: *\\t{}:\\t{}\", s, o);\n      }\n    });\n\n    assert ObjectReleaseTracker.track(this);\n  }\n\n","sourceOld":"  public synchronized void start(String id) {\n    MDCLoggingContext.setNode(zkController == null ?\n        null :\n        zkController.getNodeName());\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id={}) starting\", id);\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    OverseerNodePrioritizer overseerPrioritizer = new OverseerNodePrioritizer(reader, getStateUpdateQueue(), adminPath, shardHandler.getShardHandlerFactory());\n    overseerCollectionConfigSetProcessor = new OverseerCollectionConfigSetProcessor(reader, id, shardHandler, adminPath, stats, Overseer.this, overseerPrioritizer);\n    ccThread = new OverseerThread(ccTg, overseerCollectionConfigSetProcessor, \"OverseerCollectionConfigSetProcessor-\" + id);\n    ccThread.setDaemon(true);\n\n    ThreadGroup triggerThreadGroup = new ThreadGroup(\"Overseer autoscaling triggers\");\n    OverseerTriggerThread trigger = new OverseerTriggerThread(zkController.getCoreContainer().getResourceLoader(),\n        zkController.getSolrCloudManager());\n    triggerThread = new OverseerThread(triggerThreadGroup, trigger, \"OverseerAutoScalingTriggerThread-\" + id);\n\n    updaterThread.start();\n    ccThread.start();\n    triggerThread.start();\n\n    systemCollectionCompatCheck(new BiConsumer<String, Object>() {\n      boolean firstPair = true;\n      @Override\n      public void accept(String s, Object o) {\n        if (firstPair) {\n          log.warn(\"WARNING: Collection '.system' may need re-indexing due to compatibility issues listed below. See REINDEXCOLLECTION documentation for more details.\");\n          firstPair = false;\n        }\n        log.warn(\"WARNING: *\\t{}:\\t{}\", s, o);\n      }\n    });\n\n    assert ObjectReleaseTracker.track(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c526352db87264a72a7a9ad68c1b769b81e54305","date":1598780188,"type":3,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","sourceNew":"  public synchronized void start(String id) {\n    MDCLoggingContext.setNode(zkController == null ?\n        null :\n        zkController.getNodeName());\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id={}) starting\", id);\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    OverseerNodePrioritizer overseerPrioritizer = new OverseerNodePrioritizer(reader, getStateUpdateQueue(), adminPath, shardHandler.getShardHandlerFactory());\n    overseerCollectionConfigSetProcessor = new OverseerCollectionConfigSetProcessor(config, reader, id, shardHandler, adminPath, stats, Overseer.this, overseerPrioritizer);\n    ccThread = new OverseerThread(ccTg, overseerCollectionConfigSetProcessor, \"OverseerCollectionConfigSetProcessor-\" + id);\n    ccThread.setDaemon(true);\n\n    updaterThread.start();\n    ccThread.start();\n\n    systemCollectionCompatCheck(new BiConsumer<String, Object>() {\n      boolean firstPair = true;\n      @Override\n      public void accept(String s, Object o) {\n        if (firstPair) {\n          log.warn(\"WARNING: Collection '.system' may need re-indexing due to compatibility issues listed below. See REINDEXCOLLECTION documentation for more details.\");\n          firstPair = false;\n        }\n        log.warn(\"WARNING: *\\t{}:\\t{}\", s, o);\n      }\n    });\n\n    assert ObjectReleaseTracker.track(this);\n  }\n\n","sourceOld":"  public synchronized void start(String id) {\n    MDCLoggingContext.setNode(zkController == null ?\n        null :\n        zkController.getNodeName());\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id={}) starting\", id);\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    OverseerNodePrioritizer overseerPrioritizer = new OverseerNodePrioritizer(reader, getStateUpdateQueue(), adminPath, shardHandler.getShardHandlerFactory());\n    overseerCollectionConfigSetProcessor = new OverseerCollectionConfigSetProcessor(reader, id, shardHandler, adminPath, stats, Overseer.this, overseerPrioritizer);\n    ccThread = new OverseerThread(ccTg, overseerCollectionConfigSetProcessor, \"OverseerCollectionConfigSetProcessor-\" + id);\n    ccThread.setDaemon(true);\n\n    updaterThread.start();\n    ccThread.start();\n\n    systemCollectionCompatCheck(new BiConsumer<String, Object>() {\n      boolean firstPair = true;\n      @Override\n      public void accept(String s, Object o) {\n        if (firstPair) {\n          log.warn(\"WARNING: Collection '.system' may need re-indexing due to compatibility issues listed below. See REINDEXCOLLECTION documentation for more details.\");\n          firstPair = false;\n        }\n        log.warn(\"WARNING: *\\t{}:\\t{}\", s, o);\n      }\n    });\n\n    assert ObjectReleaseTracker.track(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7b17e79a71117668ecbf8d3417c876e41396565","date":1598973672,"type":3,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#start(String).mjava","sourceNew":"  public synchronized void start(String id) {\n    MDCLoggingContext.setNode(zkController == null ?\n        null :\n        zkController.getNodeName());\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id={}) starting\", id);\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    OverseerNodePrioritizer overseerPrioritizer = new OverseerNodePrioritizer(reader, getStateUpdateQueue(), adminPath, shardHandler.getShardHandlerFactory());\n    overseerCollectionConfigSetProcessor = new OverseerCollectionConfigSetProcessor(reader, id, shardHandler, adminPath, stats, Overseer.this, overseerPrioritizer);\n    ccThread = new OverseerThread(ccTg, overseerCollectionConfigSetProcessor, \"OverseerCollectionConfigSetProcessor-\" + id);\n    ccThread.setDaemon(true);\n\n    updaterThread.start();\n    ccThread.start();\n\n    systemCollectionCompatCheck(new BiConsumer<String, Object>() {\n      boolean firstPair = true;\n      @Override\n      public void accept(String s, Object o) {\n        if (firstPair) {\n          log.warn(\"WARNING: Collection '.system' may need re-indexing due to compatibility issues listed below. See REINDEXCOLLECTION documentation for more details.\");\n          firstPair = false;\n        }\n        log.warn(\"WARNING: *\\t{}:\\t{}\", s, o);\n      }\n    });\n\n    assert ObjectReleaseTracker.track(this);\n  }\n\n","sourceOld":"  public synchronized void start(String id) {\n    MDCLoggingContext.setNode(zkController == null ?\n        null :\n        zkController.getNodeName());\n    this.id = id;\n    closed = false;\n    doClose();\n    stats = new Stats();\n    log.info(\"Overseer (id={}) starting\", id);\n    createOverseerNode(reader.getZkClient());\n    //launch cluster state updater thread\n    ThreadGroup tg = new ThreadGroup(\"Overseer state updater.\");\n    updaterThread = new OverseerThread(tg, new ClusterStateUpdater(reader, id, stats), \"OverseerStateUpdate-\" + id);\n    updaterThread.setDaemon(true);\n\n    ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n\n    OverseerNodePrioritizer overseerPrioritizer = new OverseerNodePrioritizer(reader, getStateUpdateQueue(), adminPath, shardHandler.getShardHandlerFactory());\n    overseerCollectionConfigSetProcessor = new OverseerCollectionConfigSetProcessor(config, reader, id, shardHandler, adminPath, stats, Overseer.this, overseerPrioritizer);\n    ccThread = new OverseerThread(ccTg, overseerCollectionConfigSetProcessor, \"OverseerCollectionConfigSetProcessor-\" + id);\n    ccThread.setDaemon(true);\n\n    updaterThread.start();\n    ccThread.start();\n\n    systemCollectionCompatCheck(new BiConsumer<String, Object>() {\n      boolean firstPair = true;\n      @Override\n      public void accept(String s, Object o) {\n        if (firstPair) {\n          log.warn(\"WARNING: Collection '.system' may need re-indexing due to compatibility issues listed below. See REINDEXCOLLECTION documentation for more details.\");\n          firstPair = false;\n        }\n        log.warn(\"WARNING: *\\t{}:\\t{}\", s, o);\n      }\n    });\n\n    assert ObjectReleaseTracker.track(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f94e3cd399f3275b48f601d95bc80d6d9b7fc4ca":["dad6a48950aafc9c2f5dc54740f8c6ab81304203"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"c526352db87264a72a7a9ad68c1b769b81e54305":["3f504512a03d978990cbff30db0522b354e846db"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["8fd5be977c105554c6a7b68afcdbc511439723ab","7ef2f1fb62d1e1507a618a2accff53a38b6c6e3d"],"29d3735a752b61a8a74dea24ddb5c77ef486affa":["8497bb4f9de61b5520423bd9af88ea11a6e109e7"],"022a4de90e0479b604264ca9c2e134c996454ab3":["2209af2c265d2258ec4b29c8cc78622d36994a15","53c27cf75f102f0f4efb834cc98179f8318ecdc2"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8","427490d2618a9f2357c50cef93308d4b505704cb"],"560c18d71dad43d675158783c3840f8c80d6d39c":["897b06b1364bd1f658a8be7591e43f0851458e7f","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"6ca81a50d0a6c6f97f1e2b15ef90c5bd81765d09":["897b06b1364bd1f658a8be7591e43f0851458e7f"],"3f504512a03d978990cbff30db0522b354e846db":["1964c059f45ae1de1877f9f0fe3ca327ea4218e8"],"dad6a48950aafc9c2f5dc54740f8c6ab81304203":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"938e4fd7b1e4b34da1650edba7471764bbfaefde":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe":["4497a62bc4277479a03071cdcaba45e97915cab0"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["560c18d71dad43d675158783c3840f8c80d6d39c"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3f767f8c99eaedb984df754fe61f21c5de260f94"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["7ef2f1fb62d1e1507a618a2accff53a38b6c6e3d","9e6c873b95174ff04c895232927baa76a95925eb"],"8497bb4f9de61b5520423bd9af88ea11a6e109e7":["afd709fe548f0ddbaa0a678015e7c3d41ff1c87a"],"1964c059f45ae1de1877f9f0fe3ca327ea4218e8":["ad4957cde742defe6db19689abdc267c5d948066"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["897b06b1364bd1f658a8be7591e43f0851458e7f","d74e47b708b42ff110911e64513d0e872ac2577b"],"717e5ceb2acae36d422ec75e5a4ce9fac40506e1":["326b5c746af092eb827c5c1accdab1b47fe0cf3c"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["042da0877b8e28fd372a8ed80d11c4506a466ad7"],"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":["8497bb4f9de61b5520423bd9af88ea11a6e109e7","29d3735a752b61a8a74dea24ddb5c77ef486affa"],"ad4957cde742defe6db19689abdc267c5d948066":["f94e3cd399f3275b48f601d95bc80d6d9b7fc4ca"],"9f45f67a018421da088ea39274f23ad5d339b97d":["29d3735a752b61a8a74dea24ddb5c77ef486affa"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["d6f074e73200c07d54f242d3880a8da5a35ff97b","7ef2f1fb62d1e1507a618a2accff53a38b6c6e3d"],"4497a62bc4277479a03071cdcaba45e97915cab0":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":["afd709fe548f0ddbaa0a678015e7c3d41ff1c87a","8497bb4f9de61b5520423bd9af88ea11a6e109e7"],"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe"],"5b15576cafd8b5d06857055c28f26912321937e3":["9f45f67a018421da088ea39274f23ad5d339b97d"],"7ef2f1fb62d1e1507a618a2accff53a38b6c6e3d":["3f767f8c99eaedb984df754fe61f21c5de260f94"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f8232be84c4df50ef0c041d4cb000eaeeb22ceb":["717e5ceb2acae36d422ec75e5a4ce9fac40506e1"],"5eb2511ababf862ea11e10761c70ee560cd84510":["9f45f67a018421da088ea39274f23ad5d339b97d","5b15576cafd8b5d06857055c28f26912321937e3"],"e7b17e79a71117668ecbf8d3417c876e41396565":["c526352db87264a72a7a9ad68c1b769b81e54305"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["0f8232be84c4df50ef0c041d4cb000eaeeb22ceb"],"897b06b1364bd1f658a8be7591e43f0851458e7f":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"afd709fe548f0ddbaa0a678015e7c3d41ff1c87a":["6bdd460d2fe72f80e52acb2774d58a4ae2e67b9b"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3f767f8c99eaedb984df754fe61f21c5de260f94"],"6bdd460d2fe72f80e52acb2774d58a4ae2e67b9b":["9e6c873b95174ff04c895232927baa76a95925eb"],"53c27cf75f102f0f4efb834cc98179f8318ecdc2":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"326b5c746af092eb827c5c1accdab1b47fe0cf3c":["897b06b1364bd1f658a8be7591e43f0851458e7f","6ca81a50d0a6c6f97f1e2b15ef90c5bd81765d09"],"042da0877b8e28fd372a8ed80d11c4506a466ad7":["427490d2618a9f2357c50cef93308d4b505704cb"],"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["022a4de90e0479b604264ca9c2e134c996454ab3"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["938e4fd7b1e4b34da1650edba7471764bbfaefde"],"9e6c873b95174ff04c895232927baa76a95925eb":["7ef2f1fb62d1e1507a618a2accff53a38b6c6e3d"],"0ad7bdba3e91cf3373cda2e52239cb761fc0b452":["5b15576cafd8b5d06857055c28f26912321937e3"],"427490d2618a9f2357c50cef93308d4b505704cb":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"d74e47b708b42ff110911e64513d0e872ac2577b":["b6c71577c4ee99246f48a2c29bc213daab310ee5"],"b6c71577c4ee99246f48a2c29bc213daab310ee5":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7b17e79a71117668ecbf8d3417c876e41396565"]},"commit2Childs":{"f94e3cd399f3275b48f601d95bc80d6d9b7fc4ca":["ad4957cde742defe6db19689abdc267c5d948066"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["022a4de90e0479b604264ca9c2e134c996454ab3","53c27cf75f102f0f4efb834cc98179f8318ecdc2"],"c526352db87264a72a7a9ad68c1b769b81e54305":["e7b17e79a71117668ecbf8d3417c876e41396565"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"29d3735a752b61a8a74dea24ddb5c77ef486affa":["a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","9f45f67a018421da088ea39274f23ad5d339b97d"],"022a4de90e0479b604264ca9c2e134c996454ab3":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"560c18d71dad43d675158783c3840f8c80d6d39c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"6ca81a50d0a6c6f97f1e2b15ef90c5bd81765d09":["326b5c746af092eb827c5c1accdab1b47fe0cf3c"],"3f504512a03d978990cbff30db0522b354e846db":["c526352db87264a72a7a9ad68c1b769b81e54305"],"dad6a48950aafc9c2f5dc54740f8c6ab81304203":["f94e3cd399f3275b48f601d95bc80d6d9b7fc4ca"],"938e4fd7b1e4b34da1650edba7471764bbfaefde":["3f767f8c99eaedb984df754fe61f21c5de260f94"],"8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","427490d2618a9f2357c50cef93308d4b505704cb"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"8497bb4f9de61b5520423bd9af88ea11a6e109e7":["29d3735a752b61a8a74dea24ddb5c77ef486affa","a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"1964c059f45ae1de1877f9f0fe3ca327ea4218e8":["3f504512a03d978990cbff30db0522b354e846db"],"717e5ceb2acae36d422ec75e5a4ce9fac40506e1":["0f8232be84c4df50ef0c041d4cb000eaeeb22ceb"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["dad6a48950aafc9c2f5dc54740f8c6ab81304203"],"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":[],"ad4957cde742defe6db19689abdc267c5d948066":["1964c059f45ae1de1877f9f0fe3ca327ea4218e8"],"9f45f67a018421da088ea39274f23ad5d339b97d":["5b15576cafd8b5d06857055c28f26912321937e3","5eb2511ababf862ea11e10761c70ee560cd84510"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"4497a62bc4277479a03071cdcaba45e97915cab0":["8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":[],"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"7ef2f1fb62d1e1507a618a2accff53a38b6c6e3d":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","74f45af4339b0daf7a95c820ab88c1aea74fbce0","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","9e6c873b95174ff04c895232927baa76a95925eb"],"5b15576cafd8b5d06857055c28f26912321937e3":["5eb2511ababf862ea11e10761c70ee560cd84510","0ad7bdba3e91cf3373cda2e52239cb761fc0b452"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["938e4fd7b1e4b34da1650edba7471764bbfaefde","d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab"],"0f8232be84c4df50ef0c041d4cb000eaeeb22ceb":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"e7b17e79a71117668ecbf8d3417c876e41396565":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"897b06b1364bd1f658a8be7591e43f0851458e7f":["560c18d71dad43d675158783c3840f8c80d6d39c","6ca81a50d0a6c6f97f1e2b15ef90c5bd81765d09","c304e97e7c1d472bc70e801b35ee78583916c6cd","326b5c746af092eb827c5c1accdab1b47fe0cf3c"],"afd709fe548f0ddbaa0a678015e7c3d41ff1c87a":["8497bb4f9de61b5520423bd9af88ea11a6e109e7","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["b6c71577c4ee99246f48a2c29bc213daab310ee5"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["b05c56a41b733e02a189c48895922b5bd8c7f3d1"],"53c27cf75f102f0f4efb834cc98179f8318ecdc2":["022a4de90e0479b604264ca9c2e134c996454ab3"],"326b5c746af092eb827c5c1accdab1b47fe0cf3c":["717e5ceb2acae36d422ec75e5a4ce9fac40506e1"],"6bdd460d2fe72f80e52acb2774d58a4ae2e67b9b":["afd709fe548f0ddbaa0a678015e7c3d41ff1c87a"],"042da0877b8e28fd372a8ed80d11c4506a466ad7":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["d6f074e73200c07d54f242d3880a8da5a35ff97b","7ef2f1fb62d1e1507a618a2accff53a38b6c6e3d","8fd5be977c105554c6a7b68afcdbc511439723ab"],"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["897b06b1364bd1f658a8be7591e43f0851458e7f"],"9e6c873b95174ff04c895232927baa76a95925eb":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","6bdd460d2fe72f80e52acb2774d58a4ae2e67b9b"],"0ad7bdba3e91cf3373cda2e52239cb761fc0b452":["4497a62bc4277479a03071cdcaba45e97915cab0"],"427490d2618a9f2357c50cef93308d4b505704cb":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","042da0877b8e28fd372a8ed80d11c4506a466ad7"],"d74e47b708b42ff110911e64513d0e872ac2577b":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"b6c71577c4ee99246f48a2c29bc213daab310ee5":["d74e47b708b42ff110911e64513d0e872ac2577b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","74f45af4339b0daf7a95c820ab88c1aea74fbce0","a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}