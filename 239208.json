{"path":"src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","commits":[{"id":"2e40e7e910b7a5d8fe0bc0b9d557777a31eb0b20","date":1208127317,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null)\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    File indexDir = new File(tempDir, \"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["229c9e4d133b2ca0d40130aead6ca64d4db2d266"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","sourceNew":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null)\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    File indexDir = new File(tempDir, \"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null)\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    File indexDir = new File(tempDir, \"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","sourceNew":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null)\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    File indexDir = new File(tempDir, \"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null)\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    File indexDir = new File(tempDir, \"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","sourceNew":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null)\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    File indexDir = new File(tempDir, \"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null)\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    File indexDir = new File(tempDir, \"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","sourceNew":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null)\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    File indexDir = new File(tempDir, \"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null)\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    File indexDir = new File(tempDir, \"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","sourceNew":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null)\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    File indexDir = new File(tempDir, \"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT).setOpenMode(OpenMode.CREATE));\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null)\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    File indexDir = new File(tempDir, \"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","sourceNew":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null)\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    File indexDir = new File(tempDir, \"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null)\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    File indexDir = new File(tempDir, \"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT).setOpenMode(OpenMode.CREATE));\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","sourceNew":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null)\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    File indexDir = new File(tempDir, \"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null)\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    File indexDir = new File(tempDir, \"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d16275d75dfe0b780ed62df4c811d083187c71a","date":1268583591,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","sourceNew":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = new File(TEMP_DIR, \"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    String tempDir = System.getProperty(\"java.io.tmpdir\");\n    if (tempDir == null)\n      throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n    File indexDir = new File(tempDir, \"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["3741149a89925c02f14dbeef8365b896798d91fc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","pathOld":"src/test/org/apache/lucene/index/TestFieldsReader#testExceptions().mjava","sourceNew":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = new File(TEMP_DIR, \"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","sourceOld":"  // LUCENE-1262\n  public void testExceptions() throws Throwable {\n    File indexDir = new File(TEMP_DIR, \"testfieldswriterexceptions\");\n\n    try {\n      Directory dir = new FaultyFSDirectory(indexDir);\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE));\n      for(int i=0;i<2;i++)\n        writer.addDocument(testDoc);\n      writer.optimize();\n      writer.close();\n\n      IndexReader reader = IndexReader.open(dir, true);\n\n      FaultyIndexInput.doFail = true;\n\n      boolean exc = false;\n\n      for(int i=0;i<2;i++) {\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n        try {\n          reader.document(i);\n        } catch (IOException ioe) {\n          // expected\n          exc = true;\n        }\n      }\n      assertTrue(exc);\n      reader.close();\n      dir.close();\n    } finally {\n      _TestUtil.rmDir(indexDir);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["2e40e7e910b7a5d8fe0bc0b9d557777a31eb0b20"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["0a046c0c310bc77931fc8441bd920053b607dd14"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["2e40e7e910b7a5d8fe0bc0b9d557777a31eb0b20","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"2e40e7e910b7a5d8fe0bc0b9d557777a31eb0b20":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1d16275d75dfe0b780ed62df4c811d083187c71a":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1d16275d75dfe0b780ed62df4c811d083187c71a"]},"commit2Childs":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["1d16275d75dfe0b780ed62df4c811d083187c71a"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"0a046c0c310bc77931fc8441bd920053b607dd14":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2e40e7e910b7a5d8fe0bc0b9d557777a31eb0b20"],"2e40e7e910b7a5d8fe0bc0b9d557777a31eb0b20":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"1d16275d75dfe0b780ed62df4c811d083187c71a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}