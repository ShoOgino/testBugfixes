{"path":"src/java/org/apache/lucene/analysis/StopFilter#next(Token).mjava","commits":[{"id":"6864413dbc0c12104c978c05456f3da1d45adb03","date":1186770873,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/StopFilter#next(Token).mjava","pathOld":"src/java/org/apache/lucene/analysis/StopFilter#next().mjava","sourceNew":"  /**\n   * Returns the next input Token whose termText() is not a stop word.\n   */\n  public final Token next(Token result) throws IOException {\n    // return the first non-stop word found\n    while((result = input.next(result)) != null) {\n      if (!stopWords.contains(result.termBuffer(), result.termLength))\n        return result;\n    }\n    // reached EOS -- return null\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Returns the next input Token whose termText() is not a stop word.\n   */\n  public final Token next() throws IOException {\n    // return the first non-stop word found\n    for (Token token = input.next(); token != null; token = input.next())\n    {\n        String termText = ignoreCase ? token.termText.toLowerCase() : token.termText;\n        if (!stopWords.contains(termText))\n          return token;\n    }\n    // reached EOS -- return null\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"050b03edbe9b8423ff4c09685c6f03d900e86b83","date":1195514584,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/StopFilter#next(Token).mjava","pathOld":"src/java/org/apache/lucene/analysis/StopFilter#next(Token).mjava","sourceNew":"  /**\n   * Returns the next input Token whose termText() is not a stop word.\n   */\n  public final Token next(Token result) throws IOException {\n    // return the first non-stop word found\n    while((result = input.next(result)) != null) {\n      if (!stopWords.contains(result.termBuffer(), 0, result.termLength))\n        return result;\n    }\n    // reached EOS -- return null\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Returns the next input Token whose termText() is not a stop word.\n   */\n  public final Token next(Token result) throws IOException {\n    // return the first non-stop word found\n    while((result = input.next(result)) != null) {\n      if (!stopWords.contains(result.termBuffer(), result.termLength))\n        return result;\n    }\n    // reached EOS -- return null\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"693d6573b6621fc1265316fc6b042c24235c81d8","date":1199049557,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/StopFilter#next(Token).mjava","pathOld":"src/java/org/apache/lucene/analysis/StopFilter#next(Token).mjava","sourceNew":"  /**\n   * Returns the next input Token whose termText() is not a stop word.\n   */\n  public final Token next(Token result) throws IOException {\n    // return the first non-stop word found\n    int skippedPositions = 0;\n    while((result = input.next(result)) != null) {\n      if (!stopWords.contains(result.termBuffer(), 0, result.termLength)) {\n        if (enablePositionIncrements) {\n          result.setPositionIncrement(result.getPositionIncrement() + skippedPositions);\n        }\n        return result;\n      }\n      skippedPositions += result.getPositionIncrement();\n    }\n    // reached EOS -- return null\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Returns the next input Token whose termText() is not a stop word.\n   */\n  public final Token next(Token result) throws IOException {\n    // return the first non-stop word found\n    while((result = input.next(result)) != null) {\n      if (!stopWords.contains(result.termBuffer(), 0, result.termLength))\n        return result;\n    }\n    // reached EOS -- return null\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/StopFilter#next(Token).mjava","pathOld":"src/java/org/apache/lucene/analysis/StopFilter#next(Token).mjava","sourceNew":"  /**\n   * Returns the next input Token whose term() is not a stop word.\n   */\n  public final Token next(final Token reusableToken) throws IOException {\n    assert reusableToken != null;\n    // return the first non-stop word found\n    int skippedPositions = 0;\n    for (Token nextToken = input.next(reusableToken); nextToken != null; nextToken = input.next(reusableToken)) {\n      if (!stopWords.contains(nextToken.termBuffer(), 0, nextToken.termLength())) {\n        if (enablePositionIncrements) {\n          nextToken.setPositionIncrement(nextToken.getPositionIncrement() + skippedPositions);\n        }\n        return nextToken;\n      }\n      skippedPositions += nextToken.getPositionIncrement();\n    }\n    // reached EOS -- return null\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Returns the next input Token whose termText() is not a stop word.\n   */\n  public final Token next(Token result) throws IOException {\n    // return the first non-stop word found\n    int skippedPositions = 0;\n    while((result = input.next(result)) != null) {\n      if (!stopWords.contains(result.termBuffer(), 0, result.termLength)) {\n        if (enablePositionIncrements) {\n          result.setPositionIncrement(result.getPositionIncrement() + skippedPositions);\n        }\n        return result;\n      }\n      skippedPositions += result.getPositionIncrement();\n    }\n    // reached EOS -- return null\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223","date":1227051709,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/StopFilter#next(Token).mjava","pathOld":"src/java/org/apache/lucene/analysis/StopFilter#next(Token).mjava","sourceNew":"  /**\n   * Returns the next input Token whose term() is not a stop word.\n   * @deprecated\n   */\n  public final Token next(final Token reusableToken) throws IOException {\n    assert reusableToken != null;\n    // return the first non-stop word found\n    int skippedPositions = 0;\n    for (Token nextToken = input.next(reusableToken); nextToken != null; nextToken = input.next(reusableToken)) {\n      if (!stopWords.contains(nextToken.termBuffer(), 0, nextToken.termLength())) {\n        if (enablePositionIncrements) {\n          nextToken.setPositionIncrement(nextToken.getPositionIncrement() + skippedPositions);\n        }\n        return nextToken;\n      }\n      skippedPositions += nextToken.getPositionIncrement();\n    }\n    // reached EOS -- return null\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Returns the next input Token whose term() is not a stop word.\n   */\n  public final Token next(final Token reusableToken) throws IOException {\n    assert reusableToken != null;\n    // return the first non-stop word found\n    int skippedPositions = 0;\n    for (Token nextToken = input.next(reusableToken); nextToken != null; nextToken = input.next(reusableToken)) {\n      if (!stopWords.contains(nextToken.termBuffer(), 0, nextToken.termLength())) {\n        if (enablePositionIncrements) {\n          nextToken.setPositionIncrement(nextToken.getPositionIncrement() + skippedPositions);\n        }\n        return nextToken;\n      }\n      skippedPositions += nextToken.getPositionIncrement();\n    }\n    // reached EOS -- return null\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec8b5a20a12931b8d7e616c79c5248ae06cc5568","date":1248471948,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/analysis/StopFilter#next(Token).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns the next input Token whose term() is not a stop word.\n   * @deprecated\n   */\n  public final Token next(final Token reusableToken) throws IOException {\n    assert reusableToken != null;\n    // return the first non-stop word found\n    int skippedPositions = 0;\n    for (Token nextToken = input.next(reusableToken); nextToken != null; nextToken = input.next(reusableToken)) {\n      if (!stopWords.contains(nextToken.termBuffer(), 0, nextToken.termLength())) {\n        if (enablePositionIncrements) {\n          nextToken.setPositionIncrement(nextToken.getPositionIncrement() + skippedPositions);\n        }\n        return nextToken;\n      }\n      skippedPositions += nextToken.getPositionIncrement();\n    }\n    // reached EOS -- return null\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["693d6573b6621fc1265316fc6b042c24235c81d8"],"6864413dbc0c12104c978c05456f3da1d45adb03":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"050b03edbe9b8423ff4c09685c6f03d900e86b83":["6864413dbc0c12104c978c05456f3da1d45adb03"],"693d6573b6621fc1265316fc6b042c24235c81d8":["050b03edbe9b8423ff4c09685c6f03d900e86b83"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ec8b5a20a12931b8d7e616c79c5248ae06cc5568"],"ec8b5a20a12931b8d7e616c79c5248ae06cc5568":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"],"6864413dbc0c12104c978c05456f3da1d45adb03":["050b03edbe9b8423ff4c09685c6f03d900e86b83"],"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["ec8b5a20a12931b8d7e616c79c5248ae06cc5568"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6864413dbc0c12104c978c05456f3da1d45adb03"],"050b03edbe9b8423ff4c09685c6f03d900e86b83":["693d6573b6621fc1265316fc6b042c24235c81d8"],"693d6573b6621fc1265316fc6b042c24235c81d8":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"ec8b5a20a12931b8d7e616c79c5248ae06cc5568":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}