{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#getDataFile(String).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#getDataFile(String).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#getDataFile(String).mjava","sourceNew":"  /** Gets a resource from the classpath as {@link File}. This method should only be used,\n   * if a real file is needed. To get a stream, code should prefer\n   * {@link Class#getResourceAsStream} using {@code this.getClass()}.\n   */\n\n  protected File getDataFile(String name) throws IOException {\n    try {\n      return new File(this.getClass().getResource(name).toURI());\n    } catch (Exception e) {\n      throw new IOException(\"Cannot find resource: \" + name);\n    }\n  }\n\n","sourceOld":"  /** Gets a resource from the classpath as {@link File}. This method should only be used,\n   * if a real file is needed. To get a stream, code should prefer\n   * {@link Class#getResourceAsStream} using {@code this.getClass()}.\n   */\n\n  protected File getDataFile(String name) throws IOException {\n    try {\n      return new File(this.getClass().getResource(name).toURI());\n    } catch (Exception e) {\n      throw new IOException(\"Cannot find resource: \" + name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5da0b42730b6b99b31389ef94cb97384e83b9ede","date":1337107665,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#getDataFile(String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#getDataFile(String).mjava","sourceNew":"  /**\n   * Gets a resource from the classpath as {@link File}. This method should only\n   * be used, if a real file is needed. To get a stream, code should prefer\n   * {@link Class#getResourceAsStream} using {@code this.getClass()}.\n   */\n  protected File getDataFile(String name) throws IOException {\n    try {\n      return new File(this.getClass().getResource(name).toURI());\n    } catch (Exception e) {\n      throw new IOException(\"Cannot find resource: \" + name);\n    }\n  }\n\n","sourceOld":"  /** Gets a resource from the classpath as {@link File}. This method should only be used,\n   * if a real file is needed. To get a stream, code should prefer\n   * {@link Class#getResourceAsStream} using {@code this.getClass()}.\n   */\n\n  protected File getDataFile(String name) throws IOException {\n    try {\n      return new File(this.getClass().getResource(name).toURI());\n    } catch (Exception e) {\n      throw new IOException(\"Cannot find resource: \" + name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#getDataPath(String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#getDataFile(String).mjava","sourceNew":"  /**\n   * Gets a resource from the classpath as {@link Path}. This method should only\n   * be used, if a real file is needed. To get a stream, code should prefer\n   * {@link Class#getResourceAsStream} using {@code this.getClass()}.\n   */\n  protected Path getDataPath(String name) throws IOException {\n    try {\n      return Paths.get(this.getClass().getResource(name).toURI());\n    } catch (Exception e) {\n      throw new IOException(\"Cannot find resource: \" + name);\n    }\n  }\n\n","sourceOld":"  /**\n   * Gets a resource from the classpath as {@link File}. This method should only\n   * be used, if a real file is needed. To get a stream, code should prefer\n   * {@link Class#getResourceAsStream} using {@code this.getClass()}.\n   */\n  protected File getDataFile(String name) throws IOException {\n    try {\n      return new File(this.getClass().getResource(name).toURI());\n    } catch (Exception e) {\n      throw new IOException(\"Cannot find resource: \" + name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5da0b42730b6b99b31389ef94cb97384e83b9ede":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f4abec28b874149a7223e32cc7a01704c27790de":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f4abec28b874149a7223e32cc7a01704c27790de"]},"commit2Childs":{"5da0b42730b6b99b31389ef94cb97384e83b9ede":["f4abec28b874149a7223e32cc7a01704c27790de"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f4abec28b874149a7223e32cc7a01704c27790de":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}