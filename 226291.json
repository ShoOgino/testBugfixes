{"path":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","commits":[{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","sourceNew":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    int rogueThreads = threadCleanup(\"test class\");\n    if (rogueThreads > 0) {\n      // TODO: fail here once the leaks are fixed.\n      System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n    }\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (cp instanceof RandomCodecProvider)\n        codecDescription = cp.toString();\n      else \n        codecDescription = \"PreFlex\";\n    } else {\n      codecDescription = codec.toString();\n    }\n    \n    if (CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription + \n        \", locale=\" + locale + \n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n      System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \" \n          + System.getProperty(\"os.version\") + \" \" \n          + System.getProperty(\"os.arch\") + \"/\"\n          + System.getProperty(\"java.vendor\") + \" \"\n          + System.getProperty(\"java.version\") + \" \"\n          + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n          + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n          + \"threads=\" + Thread.activeCount() + \",\"\n          + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n          + \"total=\" + Runtime.getRuntime().totalMemory());\n    }\n  }\n\n","sourceOld":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    int rogueThreads = threadCleanup(\"test class\");\n    if (rogueThreads > 0) {\n      // TODO: fail here once the leaks are fixed.\n      System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n    }\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (cp instanceof RandomCodecProvider)\n        codecDescription = cp.toString();\n      else \n        codecDescription = \"PreFlex\";\n    } else {\n      codecDescription = codec.toString();\n    }\n    \n    if (CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription + \n        \", locale=\" + locale + \n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n      System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \" \n          + System.getProperty(\"os.version\") + \" \" \n          + System.getProperty(\"os.arch\") + \"/\"\n          + System.getProperty(\"java.vendor\") + \" \"\n          + System.getProperty(\"java.version\") + \" \"\n          + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n          + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n          + \"threads=\" + Thread.activeCount() + \",\"\n          + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n          + \"total=\" + Runtime.getRuntime().totalMemory());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","pathOld":"/dev/null","sourceNew":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    int rogueThreads = threadCleanup(\"test class\");\n    if (rogueThreads > 0) {\n      // TODO: fail here once the leaks are fixed.\n      System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n    }\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (cp instanceof RandomCodecProvider)\n        codecDescription = cp.toString();\n      else \n        codecDescription = \"PreFlex\";\n    } else {\n      codecDescription = codec.toString();\n    }\n    \n    if (CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription + \n        \", locale=\" + locale + \n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n      System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \" \n          + System.getProperty(\"os.version\") + \" \" \n          + System.getProperty(\"os.arch\") + \"/\"\n          + System.getProperty(\"java.vendor\") + \" \"\n          + System.getProperty(\"java.version\") + \" \"\n          + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n          + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n          + \"threads=\" + Thread.activeCount() + \",\"\n          + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n          + \"total=\" + Runtime.getRuntime().totalMemory());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","sourceNew":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    int rogueThreads = threadCleanup(\"test class\");\n    if (rogueThreads > 0) {\n      // TODO: fail here once the leaks are fixed.\n      System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n    }\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (cp instanceof RandomCodecProvider)\n        codecDescription = cp.toString();\n      else\n        codecDescription = \"PreFlex\";\n    } else {\n      codecDescription = codec.toString();\n    }\n\n    if (CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription +\n        \", locale=\" + locale +\n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n      System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \"\n          + System.getProperty(\"os.version\") + \" \"\n          + System.getProperty(\"os.arch\") + \"/\"\n          + System.getProperty(\"java.vendor\") + \" \"\n          + System.getProperty(\"java.version\") + \" \"\n          + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n          + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n          + \"threads=\" + Thread.activeCount() + \",\"\n          + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n          + \"total=\" + Runtime.getRuntime().totalMemory());\n    }\n  }\n\n","sourceOld":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    int rogueThreads = threadCleanup(\"test class\");\n    if (rogueThreads > 0) {\n      // TODO: fail here once the leaks are fixed.\n      System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n    }\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (cp instanceof RandomCodecProvider)\n        codecDescription = cp.toString();\n      else\n        codecDescription = \"PreFlex\";\n    } else {\n      codecDescription = codec.toString();\n    }\n\n    if (CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription +\n        \", locale=\" + locale +\n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n      System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \" \n          + System.getProperty(\"os.version\") + \" \" \n          + System.getProperty(\"os.arch\") + \"/\"\n          + System.getProperty(\"java.vendor\") + \" \"\n          + System.getProperty(\"java.version\") + \" \"\n          + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n          + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n          + \"threads=\" + Thread.activeCount() + \",\"\n          + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n          + \"total=\" + Runtime.getRuntime().totalMemory());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd6abb7020b5aeeff86624594e1d9aacedfe2d5d","date":1301021377,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","sourceNew":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    if (! \"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (cp instanceof RandomCodecProvider)\n        codecDescription = cp.toString();\n      else \n        codecDescription = \"PreFlex\";\n    } else {\n      codecDescription = codec.toString();\n    }\n    \n    if (CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription + \n        \", locale=\" + locale + \n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n      System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \" \n          + System.getProperty(\"os.version\") + \" \" \n          + System.getProperty(\"os.arch\") + \"/\"\n          + System.getProperty(\"java.vendor\") + \" \"\n          + System.getProperty(\"java.version\") + \" \"\n          + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n          + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n          + \"threads=\" + Thread.activeCount() + \",\"\n          + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n          + \"total=\" + Runtime.getRuntime().totalMemory());\n    }\n  }\n\n","sourceOld":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    int rogueThreads = threadCleanup(\"test class\");\n    if (rogueThreads > 0) {\n      // TODO: fail here once the leaks are fixed.\n      System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n    }\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (cp instanceof RandomCodecProvider)\n        codecDescription = cp.toString();\n      else \n        codecDescription = \"PreFlex\";\n    } else {\n      codecDescription = codec.toString();\n    }\n    \n    if (CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription + \n        \", locale=\" + locale + \n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n      System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \" \n          + System.getProperty(\"os.version\") + \" \" \n          + System.getProperty(\"os.arch\") + \"/\"\n          + System.getProperty(\"java.vendor\") + \" \"\n          + System.getProperty(\"java.version\") + \" \"\n          + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n          + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n          + \"threads=\" + Thread.activeCount() + \",\"\n          + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n          + \"total=\" + Runtime.getRuntime().totalMemory());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","sourceNew":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    if (! \"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (cp instanceof RandomCodecProvider)\n        codecDescription = cp.toString();\n      else \n        codecDescription = \"PreFlex\";\n    } else {\n      codecDescription = codec.toString();\n    }\n    \n    if (CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription + \n        \", locale=\" + locale + \n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n      System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \" \n          + System.getProperty(\"os.version\") + \" \" \n          + System.getProperty(\"os.arch\") + \"/\"\n          + System.getProperty(\"java.vendor\") + \" \"\n          + System.getProperty(\"java.version\") + \" \"\n          + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n          + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n          + \"threads=\" + Thread.activeCount() + \",\"\n          + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n          + \"total=\" + Runtime.getRuntime().totalMemory());\n    }\n  }\n\n","sourceOld":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    int rogueThreads = threadCleanup(\"test class\");\n    if (rogueThreads > 0) {\n      // TODO: fail here once the leaks are fixed.\n      System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n    }\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (cp instanceof RandomCodecProvider)\n        codecDescription = cp.toString();\n      else \n        codecDescription = \"PreFlex\";\n    } else {\n      codecDescription = codec.toString();\n    }\n    \n    if (CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription + \n        \", locale=\" + locale + \n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n      System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \" \n          + System.getProperty(\"os.version\") + \" \" \n          + System.getProperty(\"os.arch\") + \"/\"\n          + System.getProperty(\"java.vendor\") + \" \"\n          + System.getProperty(\"java.version\") + \" \"\n          + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n          + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n          + \"threads=\" + Thread.activeCount() + \",\"\n          + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n          + \"total=\" + Runtime.getRuntime().totalMemory());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","sourceNew":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    if (! \"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (cp instanceof RandomCodecProvider)\n        codecDescription = cp.toString();\n      else\n        codecDescription = \"PreFlex\";\n    } else {\n      codecDescription = codec.toString();\n    }\n\n    if (CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription +\n        \", locale=\" + locale +\n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n      System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \"\n          + System.getProperty(\"os.version\") + \" \"\n          + System.getProperty(\"os.arch\") + \"/\"\n          + System.getProperty(\"java.vendor\") + \" \"\n          + System.getProperty(\"java.version\") + \" \"\n          + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n          + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n          + \"threads=\" + Thread.activeCount() + \",\"\n          + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n          + \"total=\" + Runtime.getRuntime().totalMemory());\n    }\n  }\n\n","sourceOld":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    int rogueThreads = threadCleanup(\"test class\");\n    if (rogueThreads > 0) {\n      // TODO: fail here once the leaks are fixed.\n      System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n    }\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (cp instanceof RandomCodecProvider)\n        codecDescription = cp.toString();\n      else\n        codecDescription = \"PreFlex\";\n    } else {\n      codecDescription = codec.toString();\n    }\n\n    if (CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription +\n        \", locale=\" + locale +\n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n      System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \"\n          + System.getProperty(\"os.version\") + \" \"\n          + System.getProperty(\"os.arch\") + \"/\"\n          + System.getProperty(\"java.vendor\") + \" \"\n          + System.getProperty(\"java.version\") + \" \"\n          + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n          + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n          + \"threads=\" + Thread.activeCount() + \",\"\n          + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n          + \"total=\" + Runtime.getRuntime().totalMemory());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3741149a89925c02f14dbeef8365b896798d91fc","date":1303483574,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","sourceNew":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    if (! \"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (cp instanceof RandomCodecProvider)\n        codecDescription = cp.toString();\n      else \n        codecDescription = \"PreFlex\";\n    } else {\n      codecDescription = codec.toString();\n    }\n    \n    if (CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription + \n        \", locale=\" + locale + \n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n      System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \" \n          + System.getProperty(\"os.version\") + \" \" \n          + System.getProperty(\"os.arch\") + \"/\"\n          + System.getProperty(\"java.vendor\") + \" \"\n          + System.getProperty(\"java.version\") + \" \"\n          + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n          + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n          + \"threads=\" + Thread.activeCount() + \",\"\n          + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n          + \"total=\" + Runtime.getRuntime().totalMemory());\n    }\n    // clear out any temp directories if we can\n    if (!testsFailed) {\n      for (String path : tempDirs) {\n        try {\n          _TestUtil.rmDir(new File(path));\n        } catch (IOException e) {\n          e.printStackTrace();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    if (! \"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (cp instanceof RandomCodecProvider)\n        codecDescription = cp.toString();\n      else \n        codecDescription = \"PreFlex\";\n    } else {\n      codecDescription = codec.toString();\n    }\n    \n    if (CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription + \n        \", locale=\" + locale + \n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n      System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \" \n          + System.getProperty(\"os.version\") + \" \" \n          + System.getProperty(\"os.arch\") + \"/\"\n          + System.getProperty(\"java.vendor\") + \" \"\n          + System.getProperty(\"java.version\") + \" \"\n          + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n          + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n          + \"threads=\" + Thread.activeCount() + \",\"\n          + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n          + \"total=\" + Runtime.getRuntime().totalMemory());\n    }\n  }\n\n","bugFix":null,"bugIntro":["558b125bbf6fa91eb5355da7e849d46edaf735bc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d493718201f0d0c54c773fb323d87bbd2fbffe41","date":1303546048,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","sourceNew":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    if (! \"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (cp instanceof RandomCodecProvider)\n        codecDescription = cp.toString();\n      else\n        codecDescription = \"PreFlex\";\n    } else {\n      codecDescription = codec.toString();\n    }\n\n    if (CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription +\n        \", locale=\" + locale +\n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n      System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \"\n          + System.getProperty(\"os.version\") + \" \"\n          + System.getProperty(\"os.arch\") + \"/\"\n          + System.getProperty(\"java.vendor\") + \" \"\n          + System.getProperty(\"java.version\") + \" \"\n          + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n          + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n          + \"threads=\" + Thread.activeCount() + \",\"\n          + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n          + \"total=\" + Runtime.getRuntime().totalMemory());\n    }\n    // clear out any temp directories if we can\n    if (!testsFailed) {\n      for (String path : tempDirs) {\n        try {\n          _TestUtil.rmDir(new File(path));\n        } catch (IOException e) {\n          e.printStackTrace();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    if (! \"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (cp instanceof RandomCodecProvider)\n        codecDescription = cp.toString();\n      else\n        codecDescription = \"PreFlex\";\n    } else {\n      codecDescription = codec.toString();\n    }\n\n    if (CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription +\n        \", locale=\" + locale +\n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n      System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \"\n          + System.getProperty(\"os.version\") + \" \"\n          + System.getProperty(\"os.arch\") + \"/\"\n          + System.getProperty(\"java.vendor\") + \" \"\n          + System.getProperty(\"java.version\") + \" \"\n          + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n          + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n          + \"threads=\" + Thread.activeCount() + \",\"\n          + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n          + \"total=\" + Runtime.getRuntime().totalMemory());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","sourceNew":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    if (! \"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (cp instanceof RandomCodecProvider)\n        codecDescription = cp.toString();\n      else\n        codecDescription = \"PreFlex\";\n    } else {\n      codecDescription = codec.toString();\n    }\n\n    if (CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription +\n        \", locale=\" + locale +\n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n      System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \"\n          + System.getProperty(\"os.version\") + \" \"\n          + System.getProperty(\"os.arch\") + \"/\"\n          + System.getProperty(\"java.vendor\") + \" \"\n          + System.getProperty(\"java.version\") + \" \"\n          + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n          + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n          + \"threads=\" + Thread.activeCount() + \",\"\n          + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n          + \"total=\" + Runtime.getRuntime().totalMemory());\n    }\n    // clear out any temp directories if we can\n    if (!testsFailed) {\n      for (String path : tempDirs) {\n        try {\n          _TestUtil.rmDir(new File(path));\n        } catch (IOException e) {\n          e.printStackTrace();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    if (! \"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (cp instanceof RandomCodecProvider)\n        codecDescription = cp.toString();\n      else \n        codecDescription = \"PreFlex\";\n    } else {\n      codecDescription = codec.toString();\n    }\n    \n    if (CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription + \n        \", locale=\" + locale + \n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n      System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \" \n          + System.getProperty(\"os.version\") + \" \" \n          + System.getProperty(\"os.arch\") + \"/\"\n          + System.getProperty(\"java.vendor\") + \" \"\n          + System.getProperty(\"java.version\") + \" \"\n          + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n          + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n          + \"threads=\" + Thread.activeCount() + \",\"\n          + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n          + \"total=\" + Runtime.getRuntime().totalMemory());\n    }\n    // clear out any temp directories if we can\n    if (!testsFailed) {\n      for (String path : tempDirs) {\n        try {\n          _TestUtil.rmDir(new File(path));\n        } catch (IOException e) {\n          e.printStackTrace();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","sourceNew":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    if (! \"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (cp instanceof RandomCodecProvider)\n        codecDescription = cp.toString();\n      else\n        codecDescription = \"PreFlex\";\n    } else {\n      codecDescription = codec.toString();\n    }\n\n    if (CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription +\n        \", locale=\" + locale +\n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n      System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \"\n          + System.getProperty(\"os.version\") + \" \"\n          + System.getProperty(\"os.arch\") + \"/\"\n          + System.getProperty(\"java.vendor\") + \" \"\n          + System.getProperty(\"java.version\") + \" \"\n          + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n          + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n          + \"threads=\" + Thread.activeCount() + \",\"\n          + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n          + \"total=\" + Runtime.getRuntime().totalMemory());\n    }\n    // clear out any temp directories if we can\n    if (!testsFailed) {\n      for (String path : tempDirs) {\n        try {\n          _TestUtil.rmDir(new File(path));\n        } catch (IOException e) {\n          e.printStackTrace();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    if (! \"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (cp instanceof RandomCodecProvider)\n        codecDescription = cp.toString();\n      else \n        codecDescription = \"PreFlex\";\n    } else {\n      codecDescription = codec.toString();\n    }\n    \n    if (CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription + \n        \", locale=\" + locale + \n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n      System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \" \n          + System.getProperty(\"os.version\") + \" \" \n          + System.getProperty(\"os.arch\") + \"/\"\n          + System.getProperty(\"java.vendor\") + \" \"\n          + System.getProperty(\"java.version\") + \" \"\n          + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n          + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n          + \"threads=\" + Thread.activeCount() + \",\"\n          + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n          + \"total=\" + Runtime.getRuntime().totalMemory());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"232515072ebc96d9bf7e9c188e7f57b20e10916d","date":1304682144,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","sourceNew":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    if (! \"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC) && cp instanceof RandomCodecProvider) {\n      codecDescription = cp.toString();\n    } else {\n      codecDescription = codec.toString();\n    }\n\n    if (\"random\".equals(TEST_CODECPROVIDER) && CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription +\n        \", locale=\" + locale +\n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n      System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \"\n          + System.getProperty(\"os.version\") + \" \"\n          + System.getProperty(\"os.arch\") + \"/\"\n          + System.getProperty(\"java.vendor\") + \" \"\n          + System.getProperty(\"java.version\") + \" \"\n          + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n          + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n          + \"threads=\" + Thread.activeCount() + \",\"\n          + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n          + \"total=\" + Runtime.getRuntime().totalMemory());\n    }\n    // clear out any temp directories if we can\n    if (!testsFailed) {\n      for (String path : tempDirs) {\n        try {\n          _TestUtil.rmDir(new File(path));\n        } catch (IOException e) {\n          e.printStackTrace();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    if (! \"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (cp instanceof RandomCodecProvider)\n        codecDescription = cp.toString();\n      else\n        codecDescription = \"PreFlex\";\n    } else {\n      codecDescription = codec.toString();\n    }\n\n    if (CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription +\n        \", locale=\" + locale +\n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n      System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \"\n          + System.getProperty(\"os.version\") + \" \"\n          + System.getProperty(\"os.arch\") + \"/\"\n          + System.getProperty(\"java.vendor\") + \" \"\n          + System.getProperty(\"java.version\") + \" \"\n          + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n          + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n          + \"threads=\" + Thread.activeCount() + \",\"\n          + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n          + \"total=\" + Runtime.getRuntime().totalMemory());\n    }\n    // clear out any temp directories if we can\n    if (!testsFailed) {\n      for (String path : tempDirs) {\n        try {\n          _TestUtil.rmDir(new File(path));\n        } catch (IOException e) {\n          e.printStackTrace();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["558b125bbf6fa91eb5355da7e849d46edaf735bc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","sourceNew":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    if (! \"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC) && cp instanceof RandomCodecProvider) {\n      codecDescription = cp.toString();\n    } else {\n      codecDescription = codec.toString();\n    }\n\n    if (\"random\".equals(TEST_CODECPROVIDER) && CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription +\n        \", locale=\" + locale +\n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n      System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \"\n          + System.getProperty(\"os.version\") + \" \"\n          + System.getProperty(\"os.arch\") + \"/\"\n          + System.getProperty(\"java.vendor\") + \" \"\n          + System.getProperty(\"java.version\") + \" \"\n          + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n          + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n          + \"threads=\" + Thread.activeCount() + \",\"\n          + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n          + \"total=\" + Runtime.getRuntime().totalMemory());\n    }\n    // clear out any temp directories if we can\n    if (!testsFailed) {\n      for (String path : tempDirs) {\n        try {\n          _TestUtil.rmDir(new File(path));\n        } catch (IOException e) {\n          e.printStackTrace();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    if (! \"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (cp instanceof RandomCodecProvider)\n        codecDescription = cp.toString();\n      else\n        codecDescription = \"PreFlex\";\n    } else {\n      codecDescription = codec.toString();\n    }\n\n    if (CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription +\n        \", locale=\" + locale +\n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n      System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \"\n          + System.getProperty(\"os.version\") + \" \"\n          + System.getProperty(\"os.arch\") + \"/\"\n          + System.getProperty(\"java.vendor\") + \" \"\n          + System.getProperty(\"java.version\") + \" \"\n          + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n          + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n          + \"threads=\" + Thread.activeCount() + \",\"\n          + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n          + \"total=\" + Runtime.getRuntime().totalMemory());\n    }\n    // clear out any temp directories if we can\n    if (!testsFailed) {\n      for (String path : tempDirs) {\n        try {\n          _TestUtil.rmDir(new File(path));\n        } catch (IOException e) {\n          e.printStackTrace();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f0dc13f9e59664be282b46015a020c945dc2a48","date":1305657127,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","sourceNew":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    if (!testsFailed) {\n      assertTrue(\"ensure your setUp() calls super.setUp() and your tearDown() calls super.tearDown()!!!\", \n          state == State.INITIAL || state == State.TEARDOWN);\n    }\n    state = State.INITIAL;\n    if (! \"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC) && cp instanceof RandomCodecProvider) {\n      codecDescription = cp.toString();\n    } else {\n      codecDescription = codec.toString();\n    }\n\n    if (\"random\".equals(TEST_CODECPROVIDER) && CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription +\n        \", locale=\" + locale +\n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n      System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \"\n          + System.getProperty(\"os.version\") + \" \"\n          + System.getProperty(\"os.arch\") + \"/\"\n          + System.getProperty(\"java.vendor\") + \" \"\n          + System.getProperty(\"java.version\") + \" \"\n          + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n          + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n          + \"threads=\" + Thread.activeCount() + \",\"\n          + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n          + \"total=\" + Runtime.getRuntime().totalMemory());\n    }\n    // clear out any temp directories if we can\n    if (!testsFailed) {\n      for (String path : tempDirs) {\n        try {\n          _TestUtil.rmDir(new File(path));\n        } catch (IOException e) {\n          e.printStackTrace();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    if (! \"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC) && cp instanceof RandomCodecProvider) {\n      codecDescription = cp.toString();\n    } else {\n      codecDescription = codec.toString();\n    }\n\n    if (\"random\".equals(TEST_CODECPROVIDER) && CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription +\n        \", locale=\" + locale +\n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n      System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \"\n          + System.getProperty(\"os.version\") + \" \"\n          + System.getProperty(\"os.arch\") + \"/\"\n          + System.getProperty(\"java.vendor\") + \" \"\n          + System.getProperty(\"java.version\") + \" \"\n          + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n          + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n          + \"threads=\" + Thread.activeCount() + \",\"\n          + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n          + \"total=\" + Runtime.getRuntime().totalMemory());\n    }\n    // clear out any temp directories if we can\n    if (!testsFailed) {\n      for (String path : tempDirs) {\n        try {\n          _TestUtil.rmDir(new File(path));\n        } catch (IOException e) {\n          e.printStackTrace();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["558b125bbf6fa91eb5355da7e849d46edaf735bc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","sourceNew":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    if (!testsFailed) {\n      assertTrue(\"ensure your setUp() calls super.setUp() and your tearDown() calls super.tearDown()!!!\", \n          state == State.INITIAL || state == State.TEARDOWN);\n    }\n    state = State.INITIAL;\n    if (! \"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC) && cp instanceof RandomCodecProvider) {\n      codecDescription = cp.toString();\n    } else {\n      codecDescription = codec.toString();\n    }\n\n    if (\"random\".equals(TEST_CODECPROVIDER) && CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription +\n        \", locale=\" + locale +\n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n      System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \"\n          + System.getProperty(\"os.version\") + \" \"\n          + System.getProperty(\"os.arch\") + \"/\"\n          + System.getProperty(\"java.vendor\") + \" \"\n          + System.getProperty(\"java.version\") + \" \"\n          + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n          + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n          + \"threads=\" + Thread.activeCount() + \",\"\n          + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n          + \"total=\" + Runtime.getRuntime().totalMemory());\n    }\n    // clear out any temp directories if we can\n    if (!testsFailed) {\n      for (String path : tempDirs) {\n        try {\n          _TestUtil.rmDir(new File(path));\n        } catch (IOException e) {\n          e.printStackTrace();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    if (! \"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC) && cp instanceof RandomCodecProvider) {\n      codecDescription = cp.toString();\n    } else {\n      codecDescription = codec.toString();\n    }\n\n    if (\"random\".equals(TEST_CODECPROVIDER) && CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription +\n        \", locale=\" + locale +\n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n      System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \"\n          + System.getProperty(\"os.version\") + \" \"\n          + System.getProperty(\"os.arch\") + \"/\"\n          + System.getProperty(\"java.vendor\") + \" \"\n          + System.getProperty(\"java.version\") + \" \"\n          + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n          + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n          + \"threads=\" + Thread.activeCount() + \",\"\n          + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n          + \"total=\" + Runtime.getRuntime().totalMemory());\n    }\n    // clear out any temp directories if we can\n    if (!testsFailed) {\n      for (String path : tempDirs) {\n        try {\n          _TestUtil.rmDir(new File(path));\n        } catch (IOException e) {\n          e.printStackTrace();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","sourceNew":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    if (!testsFailed) {\n      assertTrue(\"ensure your setUp() calls super.setUp() and your tearDown() calls super.tearDown()!!!\", \n          state == State.INITIAL || state == State.TEARDOWN);\n    }\n    state = State.INITIAL;\n    if (! \"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC) && cp instanceof RandomCodecProvider) {\n      codecDescription = cp.toString();\n    } else {\n      codecDescription = codec.toString();\n    }\n\n    if (\"random\".equals(TEST_CODECPROVIDER) && CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription +\n        \", locale=\" + locale +\n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n      System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \"\n          + System.getProperty(\"os.version\") + \" \"\n          + System.getProperty(\"os.arch\") + \"/\"\n          + System.getProperty(\"java.vendor\") + \" \"\n          + System.getProperty(\"java.version\") + \" \"\n          + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n          + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n          + \"threads=\" + Thread.activeCount() + \",\"\n          + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n          + \"total=\" + Runtime.getRuntime().totalMemory());\n    }\n    // clear out any temp directories if we can\n    if (!testsFailed) {\n      for (String path : tempDirs) {\n        try {\n          _TestUtil.rmDir(new File(path));\n        } catch (IOException e) {\n          e.printStackTrace();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    if (! \"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC)) {\n      if (cp instanceof RandomCodecProvider)\n        codecDescription = cp.toString();\n      else \n        codecDescription = \"PreFlex\";\n    } else {\n      codecDescription = codec.toString();\n    }\n    \n    if (CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription + \n        \", locale=\" + locale + \n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n      System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \" \n          + System.getProperty(\"os.version\") + \" \" \n          + System.getProperty(\"os.arch\") + \"/\"\n          + System.getProperty(\"java.vendor\") + \" \"\n          + System.getProperty(\"java.version\") + \" \"\n          + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n          + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n          + \"threads=\" + Thread.activeCount() + \",\"\n          + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n          + \"total=\" + Runtime.getRuntime().totalMemory());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"435c7fca8d9d4e96fdc2b59f3392b08ef46725e7","date":1306320383,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","sourceNew":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    if (!testsFailed) {\n      assertTrue(\"ensure your setUp() calls super.setUp() and your tearDown() calls super.tearDown()!!!\", \n          state == State.INITIAL || state == State.TEARDOWN);\n    }\n    state = State.INITIAL;\n    if (! \"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC) && cp instanceof RandomCodecProvider) {\n      codecDescription = cp.toString();\n    } else {\n      codecDescription = codec.toString();\n    }\n\n    if (\"random\".equals(TEST_CODECPROVIDER) && CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription +\n        \", locale=\" + locale +\n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n      System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \"\n          + System.getProperty(\"os.version\") + \" \"\n          + System.getProperty(\"os.arch\") + \"/\"\n          + System.getProperty(\"java.vendor\") + \" \"\n          + System.getProperty(\"java.version\") + \" \"\n          + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n          + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n          + \"threads=\" + Thread.activeCount() + \",\"\n          + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n          + \"total=\" + Runtime.getRuntime().totalMemory());\n    }\n    // clear out any temp directories if we can\n    if (!testsFailed) {\n      for (Entry<File, StackTraceElement[]> entry : tempDirs.entrySet()) {\n        try {\n          _TestUtil.rmDir(entry.getKey());\n        } catch (IOException e) {\n          e.printStackTrace();\n          System.err.println(\"path \" + entry.getKey() + \" allocated from\");\n          // first two STE's are Java's\n          StackTraceElement[] elements = entry.getValue();\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];            \n            // print only our code's stack information\n            if (ste.getClassName().indexOf(\"org.apache.lucene\") == -1) break; \n            System.err.println(\"\\t\" + ste);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    if (!testsFailed) {\n      assertTrue(\"ensure your setUp() calls super.setUp() and your tearDown() calls super.tearDown()!!!\", \n          state == State.INITIAL || state == State.TEARDOWN);\n    }\n    state = State.INITIAL;\n    if (! \"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC) && cp instanceof RandomCodecProvider) {\n      codecDescription = cp.toString();\n    } else {\n      codecDescription = codec.toString();\n    }\n\n    if (\"random\".equals(TEST_CODECPROVIDER) && CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription +\n        \", locale=\" + locale +\n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n      System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \"\n          + System.getProperty(\"os.version\") + \" \"\n          + System.getProperty(\"os.arch\") + \"/\"\n          + System.getProperty(\"java.vendor\") + \" \"\n          + System.getProperty(\"java.version\") + \" \"\n          + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n          + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n          + \"threads=\" + Thread.activeCount() + \",\"\n          + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n          + \"total=\" + Runtime.getRuntime().totalMemory());\n    }\n    // clear out any temp directories if we can\n    if (!testsFailed) {\n      for (String path : tempDirs) {\n        try {\n          _TestUtil.rmDir(new File(path));\n        } catch (IOException e) {\n          e.printStackTrace();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["558b125bbf6fa91eb5355da7e849d46edaf735bc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"efb7a19703a037c29e30440260d393500febc1f4","date":1306648116,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","sourceNew":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    if (!testsFailed) {\n      assertTrue(\"ensure your setUp() calls super.setUp() and your tearDown() calls super.tearDown()!!!\", \n          state == State.INITIAL || state == State.TEARDOWN);\n    }\n    state = State.INITIAL;\n    if (! \"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC) && cp instanceof RandomCodecProvider) {\n      codecDescription = cp.toString();\n    } else {\n      codecDescription = codec.toString();\n    }\n\n    if (\"random\".equals(TEST_CODECPROVIDER) && CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription +\n        \", locale=\" + locale +\n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n      System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \"\n          + System.getProperty(\"os.version\") + \" \"\n          + System.getProperty(\"os.arch\") + \"/\"\n          + System.getProperty(\"java.vendor\") + \" \"\n          + System.getProperty(\"java.version\") + \" \"\n          + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n          + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n          + \"threads=\" + Thread.activeCount() + \",\"\n          + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n          + \"total=\" + Runtime.getRuntime().totalMemory());\n    }\n    // clear out any temp directories if we can\n    if (!testsFailed) {\n      for (Entry<File, StackTraceElement[]> entry : tempDirs.entrySet()) {\n        try {\n          _TestUtil.rmDir(entry.getKey());\n        } catch (IOException e) {\n          e.printStackTrace();\n          System.err.println(\"path \" + entry.getKey() + \" allocated from\");\n          // first two STE's are Java's\n          StackTraceElement[] elements = entry.getValue();\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];            \n            // print only our code's stack information\n            if (ste.getClassName().indexOf(\"org.apache.lucene\") == -1) break; \n            System.err.println(\"\\t\" + ste);\n          }\n          fail(\"could not remove temp dir: \" + entry.getKey());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    if (!testsFailed) {\n      assertTrue(\"ensure your setUp() calls super.setUp() and your tearDown() calls super.tearDown()!!!\", \n          state == State.INITIAL || state == State.TEARDOWN);\n    }\n    state = State.INITIAL;\n    if (! \"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC) && cp instanceof RandomCodecProvider) {\n      codecDescription = cp.toString();\n    } else {\n      codecDescription = codec.toString();\n    }\n\n    if (\"random\".equals(TEST_CODECPROVIDER) && CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription +\n        \", locale=\" + locale +\n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n      System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \"\n          + System.getProperty(\"os.version\") + \" \"\n          + System.getProperty(\"os.arch\") + \"/\"\n          + System.getProperty(\"java.vendor\") + \" \"\n          + System.getProperty(\"java.version\") + \" \"\n          + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n          + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n          + \"threads=\" + Thread.activeCount() + \",\"\n          + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n          + \"total=\" + Runtime.getRuntime().totalMemory());\n    }\n    // clear out any temp directories if we can\n    if (!testsFailed) {\n      for (Entry<File, StackTraceElement[]> entry : tempDirs.entrySet()) {\n        try {\n          _TestUtil.rmDir(entry.getKey());\n        } catch (IOException e) {\n          e.printStackTrace();\n          System.err.println(\"path \" + entry.getKey() + \" allocated from\");\n          // first two STE's are Java's\n          StackTraceElement[] elements = entry.getValue();\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];            \n            // print only our code's stack information\n            if (ste.getClassName().indexOf(\"org.apache.lucene\") == -1) break; \n            System.err.println(\"\\t\" + ste);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["558b125bbf6fa91eb5355da7e849d46edaf735bc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","sourceNew":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    if (!testsFailed) {\n      assertTrue(\"ensure your setUp() calls super.setUp() and your tearDown() calls super.tearDown()!!!\", \n          state == State.INITIAL || state == State.TEARDOWN);\n    }\n    state = State.INITIAL;\n    if (! \"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC) && cp instanceof RandomCodecProvider) {\n      codecDescription = cp.toString();\n    } else {\n      codecDescription = codec.toString();\n    }\n\n    if (\"random\".equals(TEST_CODECPROVIDER) && CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription +\n        \", locale=\" + locale +\n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n      System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \"\n          + System.getProperty(\"os.version\") + \" \"\n          + System.getProperty(\"os.arch\") + \"/\"\n          + System.getProperty(\"java.vendor\") + \" \"\n          + System.getProperty(\"java.version\") + \" \"\n          + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n          + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n          + \"threads=\" + Thread.activeCount() + \",\"\n          + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n          + \"total=\" + Runtime.getRuntime().totalMemory());\n    }\n    // clear out any temp directories if we can\n    if (!testsFailed) {\n      for (Entry<File, StackTraceElement[]> entry : tempDirs.entrySet()) {\n        try {\n          _TestUtil.rmDir(entry.getKey());\n        } catch (IOException e) {\n          e.printStackTrace();\n          System.err.println(\"path \" + entry.getKey() + \" allocated from\");\n          // first two STE's are Java's\n          StackTraceElement[] elements = entry.getValue();\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];            \n            // print only our code's stack information\n            if (ste.getClassName().indexOf(\"org.apache.lucene\") == -1) break; \n            System.err.println(\"\\t\" + ste);\n          }\n          fail(\"could not remove temp dir: \" + entry.getKey());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    if (!testsFailed) {\n      assertTrue(\"ensure your setUp() calls super.setUp() and your tearDown() calls super.tearDown()!!!\", \n          state == State.INITIAL || state == State.TEARDOWN);\n    }\n    state = State.INITIAL;\n    if (! \"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC) && cp instanceof RandomCodecProvider) {\n      codecDescription = cp.toString();\n    } else {\n      codecDescription = codec.toString();\n    }\n\n    if (\"random\".equals(TEST_CODECPROVIDER) && CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription +\n        \", locale=\" + locale +\n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n      System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \"\n          + System.getProperty(\"os.version\") + \" \"\n          + System.getProperty(\"os.arch\") + \"/\"\n          + System.getProperty(\"java.vendor\") + \" \"\n          + System.getProperty(\"java.version\") + \" \"\n          + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n          + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n          + \"threads=\" + Thread.activeCount() + \",\"\n          + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n          + \"total=\" + Runtime.getRuntime().totalMemory());\n    }\n    // clear out any temp directories if we can\n    if (!testsFailed) {\n      for (String path : tempDirs) {\n        try {\n          _TestUtil.rmDir(new File(path));\n        } catch (IOException e) {\n          e.printStackTrace();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","sourceNew":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    if (!testsFailed) {\n      assertTrue(\"ensure your setUp() calls super.setUp() and your tearDown() calls super.tearDown()!!!\", \n          state == State.INITIAL || state == State.TEARDOWN);\n    }\n    state = State.INITIAL;\n    if (! \"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC) && cp instanceof RandomCodecProvider) {\n      codecDescription = cp.toString();\n    } else {\n      codecDescription = codec.toString();\n    }\n\n    if (\"random\".equals(TEST_CODECPROVIDER) && CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription +\n        \", locale=\" + locale +\n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n      System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \"\n          + System.getProperty(\"os.version\") + \" \"\n          + System.getProperty(\"os.arch\") + \"/\"\n          + System.getProperty(\"java.vendor\") + \" \"\n          + System.getProperty(\"java.version\") + \" \"\n          + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n          + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n          + \"threads=\" + Thread.activeCount() + \",\"\n          + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n          + \"total=\" + Runtime.getRuntime().totalMemory());\n    }\n    // clear out any temp directories if we can\n    if (!testsFailed) {\n      for (Entry<File, StackTraceElement[]> entry : tempDirs.entrySet()) {\n        try {\n          _TestUtil.rmDir(entry.getKey());\n        } catch (IOException e) {\n          e.printStackTrace();\n          System.err.println(\"path \" + entry.getKey() + \" allocated from\");\n          // first two STE's are Java's\n          StackTraceElement[] elements = entry.getValue();\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];            \n            // print only our code's stack information\n            if (ste.getClassName().indexOf(\"org.apache.lucene\") == -1) break; \n            System.err.println(\"\\t\" + ste);\n          }\n          fail(\"could not remove temp dir: \" + entry.getKey());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    if (!testsFailed) {\n      assertTrue(\"ensure your setUp() calls super.setUp() and your tearDown() calls super.tearDown()!!!\", \n          state == State.INITIAL || state == State.TEARDOWN);\n    }\n    state = State.INITIAL;\n    if (! \"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC) && cp instanceof RandomCodecProvider) {\n      codecDescription = cp.toString();\n    } else {\n      codecDescription = codec.toString();\n    }\n\n    if (\"random\".equals(TEST_CODECPROVIDER) && CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription +\n        \", locale=\" + locale +\n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n      System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \"\n          + System.getProperty(\"os.version\") + \" \"\n          + System.getProperty(\"os.arch\") + \"/\"\n          + System.getProperty(\"java.vendor\") + \" \"\n          + System.getProperty(\"java.version\") + \" \"\n          + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n          + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n          + \"threads=\" + Thread.activeCount() + \",\"\n          + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n          + \"total=\" + Runtime.getRuntime().totalMemory());\n    }\n    // clear out any temp directories if we can\n    if (!testsFailed) {\n      for (String path : tempDirs) {\n        try {\n          _TestUtil.rmDir(new File(path));\n        } catch (IOException e) {\n          e.printStackTrace();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3391411bd88eb23a38cddc1e1698d8116d32c2","date":1310494698,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","sourceNew":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    if (!testsFailed) {\n      assertTrue(\"ensure your setUp() calls super.setUp() and your tearDown() calls super.tearDown()!!!\", \n          state == State.INITIAL || state == State.TEARDOWN);\n    }\n    state = State.INITIAL;\n    if (! \"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC) && cp instanceof RandomCodecProvider) {\n      codecDescription = cp.toString();\n    } else {\n      codecDescription = codec.toString();\n    }\n\n    if (\"random\".equals(TEST_CODECPROVIDER) && CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription +\n        \", locale=\" + locale +\n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n      System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \"\n          + System.getProperty(\"os.version\") + \" \"\n          + System.getProperty(\"os.arch\") + \"/\"\n          + System.getProperty(\"java.vendor\") + \" \"\n          + System.getProperty(\"java.version\") + \" \"\n          + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n          + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n          + \"threads=\" + Thread.activeCount() + \",\"\n          + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n          + \"total=\" + Runtime.getRuntime().totalMemory());\n    }\n    // clear out any temp directories if we can\n    if (!testsFailed) {\n      for (Entry<File, StackTraceElement[]> entry : tempDirs.entrySet()) {\n        try {\n          _TestUtil.rmDir(entry.getKey());\n        } catch (IOException e) {\n          e.printStackTrace();\n          System.err.println(\"path \" + entry.getKey() + \" allocated from\");\n          // first two STE's are Java's\n          StackTraceElement[] elements = entry.getValue();\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];            \n            // print only our code's stack information\n            if (ste.getClassName().indexOf(\"org.apache.lucene\") == -1) break; \n            System.err.println(\"\\t\" + ste);\n          }\n          fail(\"could not remove temp dir: \" + entry.getKey());\n        }\n      }\n    }\n    random.setSeed(0L);\n    random.initialized = false;\n  }\n\n","sourceOld":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    if (!testsFailed) {\n      assertTrue(\"ensure your setUp() calls super.setUp() and your tearDown() calls super.tearDown()!!!\", \n          state == State.INITIAL || state == State.TEARDOWN);\n    }\n    state = State.INITIAL;\n    if (! \"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC) && cp instanceof RandomCodecProvider) {\n      codecDescription = cp.toString();\n    } else {\n      codecDescription = codec.toString();\n    }\n\n    if (\"random\".equals(TEST_CODECPROVIDER) && CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription +\n        \", locale=\" + locale +\n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n      System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \"\n          + System.getProperty(\"os.version\") + \" \"\n          + System.getProperty(\"os.arch\") + \"/\"\n          + System.getProperty(\"java.vendor\") + \" \"\n          + System.getProperty(\"java.version\") + \" \"\n          + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n          + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n          + \"threads=\" + Thread.activeCount() + \",\"\n          + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n          + \"total=\" + Runtime.getRuntime().totalMemory());\n    }\n    // clear out any temp directories if we can\n    if (!testsFailed) {\n      for (Entry<File, StackTraceElement[]> entry : tempDirs.entrySet()) {\n        try {\n          _TestUtil.rmDir(entry.getKey());\n        } catch (IOException e) {\n          e.printStackTrace();\n          System.err.println(\"path \" + entry.getKey() + \" allocated from\");\n          // first two STE's are Java's\n          StackTraceElement[] elements = entry.getValue();\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];            \n            // print only our code's stack information\n            if (ste.getClassName().indexOf(\"org.apache.lucene\") == -1) break; \n            System.err.println(\"\\t\" + ste);\n          }\n          fail(\"could not remove temp dir: \" + entry.getKey());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","sourceNew":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    if (!testsFailed) {\n      assertTrue(\"ensure your setUp() calls super.setUp() and your tearDown() calls super.tearDown()!!!\", \n          state == State.INITIAL || state == State.TEARDOWN);\n    }\n    state = State.INITIAL;\n    if (! \"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC) && cp instanceof RandomCodecProvider) {\n      codecDescription = cp.toString();\n    } else {\n      codecDescription = codec.toString();\n    }\n\n    if (\"random\".equals(TEST_CODECPROVIDER) && CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription +\n        \", locale=\" + locale +\n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (VERBOSE || testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n      System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \"\n          + System.getProperty(\"os.version\") + \" \"\n          + System.getProperty(\"os.arch\") + \"/\"\n          + System.getProperty(\"java.vendor\") + \" \"\n          + System.getProperty(\"java.version\") + \" \"\n          + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n          + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n          + \"threads=\" + Thread.activeCount() + \",\"\n          + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n          + \"total=\" + Runtime.getRuntime().totalMemory());\n    }\n    // clear out any temp directories if we can\n    if (!testsFailed) {\n      for (Entry<File, StackTraceElement[]> entry : tempDirs.entrySet()) {\n        try {\n          _TestUtil.rmDir(entry.getKey());\n        } catch (IOException e) {\n          e.printStackTrace();\n          System.err.println(\"path \" + entry.getKey() + \" allocated from\");\n          // first two STE's are Java's\n          StackTraceElement[] elements = entry.getValue();\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];            \n            // print only our code's stack information\n            if (ste.getClassName().indexOf(\"org.apache.lucene\") == -1) break; \n            System.err.println(\"\\t\" + ste);\n          }\n          fail(\"could not remove temp dir: \" + entry.getKey());\n        }\n      }\n    }\n    random.setSeed(0L);\n    random.initialized = false;\n  }\n\n","sourceOld":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    if (!testsFailed) {\n      assertTrue(\"ensure your setUp() calls super.setUp() and your tearDown() calls super.tearDown()!!!\", \n          state == State.INITIAL || state == State.TEARDOWN);\n    }\n    state = State.INITIAL;\n    if (! \"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC) && cp instanceof RandomCodecProvider) {\n      codecDescription = cp.toString();\n    } else {\n      codecDescription = codec.toString();\n    }\n\n    if (\"random\".equals(TEST_CODECPROVIDER) && CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription +\n        \", locale=\" + locale +\n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n      System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \"\n          + System.getProperty(\"os.version\") + \" \"\n          + System.getProperty(\"os.arch\") + \"/\"\n          + System.getProperty(\"java.vendor\") + \" \"\n          + System.getProperty(\"java.version\") + \" \"\n          + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n          + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n          + \"threads=\" + Thread.activeCount() + \",\"\n          + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n          + \"total=\" + Runtime.getRuntime().totalMemory());\n    }\n    // clear out any temp directories if we can\n    if (!testsFailed) {\n      for (Entry<File, StackTraceElement[]> entry : tempDirs.entrySet()) {\n        try {\n          _TestUtil.rmDir(entry.getKey());\n        } catch (IOException e) {\n          e.printStackTrace();\n          System.err.println(\"path \" + entry.getKey() + \" allocated from\");\n          // first two STE's are Java's\n          StackTraceElement[] elements = entry.getValue();\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];            \n            // print only our code's stack information\n            if (ste.getClassName().indexOf(\"org.apache.lucene\") == -1) break; \n            System.err.println(\"\\t\" + ste);\n          }\n          fail(\"could not remove temp dir: \" + entry.getKey());\n        }\n      }\n    }\n    random.setSeed(0L);\n    random.initialized = false;\n  }\n\n","bugFix":null,"bugIntro":["558b125bbf6fa91eb5355da7e849d46edaf735bc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"558b125bbf6fa91eb5355da7e849d46edaf735bc","date":1314371299,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","sourceNew":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    State oldState = state; // capture test execution state\n    state = State.INITIAL; // set the state for subsequent tests\n    \n    Throwable problem = null;\n    try {\n      if (!testsFailed) {\n        assertTrue(\"ensure your setUp() calls super.setUp() and your tearDown() calls super.tearDown()!!!\", \n          oldState == State.INITIAL || oldState == State.TEARDOWN);\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n    \n    if (! \"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    \n    String codecDescription = uninstallCodecsAfterClass();\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    \n    try {\n      // now look for unclosed resources\n      if (!testsFailed) {\n        checkResourcesAfterClass();\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n    \n    stores = null;\n\n    try {\n      // clear out any temp directories if we can\n      if (!testsFailed) {\n        clearTempDirectoriesAfterClass();\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n\n    // if we had afterClass failures, get some debugging information\n    if (problem != null) {\n      reportPartialFailureInfo();      \n    }\n    \n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed || problem != null) {\n      printDebuggingInformation(codecDescription);\n    }\n    \n    // reset seed\n    random.setSeed(0L);\n    random.initialized = false;\n    \n    if (problem != null) {\n      throw new RuntimeException(problem);\n    }\n  }\n\n","sourceOld":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    if (!testsFailed) {\n      assertTrue(\"ensure your setUp() calls super.setUp() and your tearDown() calls super.tearDown()!!!\", \n          state == State.INITIAL || state == State.TEARDOWN);\n    }\n    state = State.INITIAL;\n    if (! \"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    String codecDescription;\n    CodecProvider cp = CodecProvider.getDefault();\n\n    if (\"randomPerField\".equals(TEST_CODEC) && cp instanceof RandomCodecProvider) {\n      codecDescription = cp.toString();\n    } else {\n      codecDescription = codec.toString();\n    }\n\n    if (\"random\".equals(TEST_CODECPROVIDER) && CodecProvider.getDefault() == savedCodecProvider)\n      removeTestCodecs(codec, CodecProvider.getDefault());\n    CodecProvider.setDefault(savedCodecProvider);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    // now look for unclosed resources\n    if (!testsFailed)\n      for (MockDirectoryWrapper d : stores.keySet()) {\n        if (d.isOpen()) {\n          StackTraceElement elements[] = stores.get(d);\n          // Look for the first class that is not LuceneTestCase that requested\n          // a Directory. The first two items are of Thread's, so skipping over\n          // them.\n          StackTraceElement element = null;\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];\n            if (ste.getClassName().indexOf(\"LuceneTestCase\") == -1) {\n              element = ste;\n              break;\n            }\n          }\n          fail(\"directory of test was not closed, opened from: \" + element);\n        }\n      }\n    stores = null;\n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed)\n      System.err.println(\"NOTE: test params are: codec=\" + codecDescription +\n        \", locale=\" + locale +\n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    if (VERBOSE || testsFailed) {\n      System.err.println(\"NOTE: all tests run in this JVM:\");\n      System.err.println(Arrays.toString(testClassesRun.toArray()));\n      System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \"\n          + System.getProperty(\"os.version\") + \" \"\n          + System.getProperty(\"os.arch\") + \"/\"\n          + System.getProperty(\"java.vendor\") + \" \"\n          + System.getProperty(\"java.version\") + \" \"\n          + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n          + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n          + \"threads=\" + Thread.activeCount() + \",\"\n          + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n          + \"total=\" + Runtime.getRuntime().totalMemory());\n    }\n    // clear out any temp directories if we can\n    if (!testsFailed) {\n      for (Entry<File, StackTraceElement[]> entry : tempDirs.entrySet()) {\n        try {\n          _TestUtil.rmDir(entry.getKey());\n        } catch (IOException e) {\n          e.printStackTrace();\n          System.err.println(\"path \" + entry.getKey() + \" allocated from\");\n          // first two STE's are Java's\n          StackTraceElement[] elements = entry.getValue();\n          for (int i = 2; i < elements.length; i++) {\n            StackTraceElement ste = elements[i];            \n            // print only our code's stack information\n            if (ste.getClassName().indexOf(\"org.apache.lucene\") == -1) break; \n            System.err.println(\"\\t\" + ste);\n          }\n          fail(\"could not remove temp dir: \" + entry.getKey());\n        }\n      }\n    }\n    random.setSeed(0L);\n    random.initialized = false;\n  }\n\n","bugFix":["a437a884d67f37dfc512e1df760f59f8ea45c56a","74637427311cf2dd084ed0cf383acdb039c1823f","182cfc5b92d5da17fd74fc41c8091ed157d80ff4","efb7a19703a037c29e30440260d393500febc1f4","232515072ebc96d9bf7e9c188e7f57b20e10916d","435c7fca8d9d4e96fdc2b59f3392b08ef46725e7","ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","bce89597a7c3a4535b5b7f8100c2078e520f6e57","60ba444201d2570214b6fcf1d15600dc1a01f548","3741149a89925c02f14dbeef8365b896798d91fc","5f0dc13f9e59664be282b46015a020c945dc2a48","a13a126d15299d5c1e117ea99ddae6fb0fa3f209","bde51b089eb7f86171eb3406e38a274743f9b7ac","157e325cec248f59df94ab8a12d22dda083e37aa","ea53729544bfdd226c3fb0367da9ec4db3e5f8b7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#afterClassLuceneTestCaseJ4().mjava","sourceNew":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    State oldState = state; // capture test execution state\n    state = State.INITIAL; // set the state for subsequent tests\n    \n    Throwable problem = null;\n    try {\n      if (!testsFailed) {\n        assertTrue(\"ensure your setUp() calls super.setUp() and your tearDown() calls super.tearDown()!!!\", \n          oldState == State.INITIAL || oldState == State.TEARDOWN);\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n    \n    if (! \"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    \n    String codecDescription = Codec.getDefault().toString();\n    Codec.setDefault(savedCodec);\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    \n    try {\n      // now look for unclosed resources\n      if (!testsFailed) {\n        checkResourcesAfterClass();\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n    \n    stores = null;\n\n    try {\n      // clear out any temp directories if we can\n      if (!testsFailed) {\n        clearTempDirectoriesAfterClass();\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n\n    // if we had afterClass failures, get some debugging information\n    if (problem != null) {\n      reportPartialFailureInfo();      \n    }\n    \n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed || problem != null) {\n      printDebuggingInformation(codecDescription);\n    }\n    \n    // reset seed\n    random.setSeed(0L);\n    random.initialized = false;\n    \n    if (problem != null) {\n      throw new RuntimeException(problem);\n    }\n  }\n\n","sourceOld":"  @AfterClass\n  public static void afterClassLuceneTestCaseJ4() {\n    State oldState = state; // capture test execution state\n    state = State.INITIAL; // set the state for subsequent tests\n    \n    Throwable problem = null;\n    try {\n      if (!testsFailed) {\n        assertTrue(\"ensure your setUp() calls super.setUp() and your tearDown() calls super.tearDown()!!!\", \n          oldState == State.INITIAL || oldState == State.TEARDOWN);\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n    \n    if (! \"false\".equals(TEST_CLEAN_THREADS)) {\n      int rogueThreads = threadCleanup(\"test class\");\n      if (rogueThreads > 0) {\n        // TODO: fail here once the leaks are fixed.\n        System.err.println(\"RESOURCE LEAK: test class left \" + rogueThreads + \" thread(s) running\");\n      }\n    }\n    \n    String codecDescription = uninstallCodecsAfterClass();\n    Locale.setDefault(savedLocale);\n    TimeZone.setDefault(savedTimeZone);\n    System.clearProperty(\"solr.solr.home\");\n    System.clearProperty(\"solr.data.dir\");\n    \n    try {\n      // now look for unclosed resources\n      if (!testsFailed) {\n        checkResourcesAfterClass();\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n    \n    stores = null;\n\n    try {\n      // clear out any temp directories if we can\n      if (!testsFailed) {\n        clearTempDirectoriesAfterClass();\n      }\n    } catch (Throwable t) {\n      if (problem == null) problem = t;\n    }\n\n    // if we had afterClass failures, get some debugging information\n    if (problem != null) {\n      reportPartialFailureInfo();      \n    }\n    \n    // if verbose or tests failed, report some information back\n    if (VERBOSE || testsFailed || problem != null) {\n      printDebuggingInformation(codecDescription);\n    }\n    \n    // reset seed\n    random.setSeed(0L);\n    random.initialized = false;\n    \n    if (problem != null) {\n      throw new RuntimeException(problem);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"efb7a19703a037c29e30440260d393500febc1f4":["435c7fca8d9d4e96fdc2b59f3392b08ef46725e7"],"d493718201f0d0c54c773fb323d87bbd2fbffe41":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","3741149a89925c02f14dbeef8365b896798d91fc"],"bd6abb7020b5aeeff86624594e1d9aacedfe2d5d":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"435c7fca8d9d4e96fdc2b59f3392b08ef46725e7":["5f0dc13f9e59664be282b46015a020c945dc2a48"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["bde51b089eb7f86171eb3406e38a274743f9b7ac","bd6abb7020b5aeeff86624594e1d9aacedfe2d5d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","efb7a19703a037c29e30440260d393500febc1f4"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["135621f3a0670a9394eb563224a3b76cc4dddc0f","232515072ebc96d9bf7e9c188e7f57b20e10916d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["c3a8a449466c1ff7ce2274fe73dab487256964b4","efb7a19703a037c29e30440260d393500febc1f4"],"4d3391411bd88eb23a38cddc1e1698d8116d32c2":["efb7a19703a037c29e30440260d393500febc1f4"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["d619839baa8ce5503e496b94a9e42ad6f079293f","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["3741149a89925c02f14dbeef8365b896798d91fc","d493718201f0d0c54c773fb323d87bbd2fbffe41"],"60ba444201d2570214b6fcf1d15600dc1a01f548":["4d3391411bd88eb23a38cddc1e1698d8116d32c2"],"7b91922b55d15444d554721b352861d028eb8278":["558b125bbf6fa91eb5355da7e849d46edaf735bc"],"232515072ebc96d9bf7e9c188e7f57b20e10916d":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb","5f0dc13f9e59664be282b46015a020c945dc2a48"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["29ef99d61cda9641b6250bf9567329a6e65f901d","bd6abb7020b5aeeff86624594e1d9aacedfe2d5d"],"a3776dccca01c11e7046323cfad46a3b4a471233":["bd6abb7020b5aeeff86624594e1d9aacedfe2d5d","5f0dc13f9e59664be282b46015a020c945dc2a48"],"558b125bbf6fa91eb5355da7e849d46edaf735bc":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"3741149a89925c02f14dbeef8365b896798d91fc":["bd6abb7020b5aeeff86624594e1d9aacedfe2d5d"],"5f0dc13f9e59664be282b46015a020c945dc2a48":["232515072ebc96d9bf7e9c188e7f57b20e10916d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"efb7a19703a037c29e30440260d393500febc1f4":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d","4d3391411bd88eb23a38cddc1e1698d8116d32c2"],"d493718201f0d0c54c773fb323d87bbd2fbffe41":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"bd6abb7020b5aeeff86624594e1d9aacedfe2d5d":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a3776dccca01c11e7046323cfad46a3b4a471233","3741149a89925c02f14dbeef8365b896798d91fc"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["bd6abb7020b5aeeff86624594e1d9aacedfe2d5d","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"435c7fca8d9d4e96fdc2b59f3392b08ef46725e7":["efb7a19703a037c29e30440260d393500febc1f4"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["d493718201f0d0c54c773fb323d87bbd2fbffe41"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["c3a8a449466c1ff7ce2274fe73dab487256964b4"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"4d3391411bd88eb23a38cddc1e1698d8116d32c2":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["135621f3a0670a9394eb563224a3b76cc4dddc0f","232515072ebc96d9bf7e9c188e7f57b20e10916d"],"60ba444201d2570214b6fcf1d15600dc1a01f548":["558b125bbf6fa91eb5355da7e849d46edaf735bc"],"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"232515072ebc96d9bf7e9c188e7f57b20e10916d":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb","5f0dc13f9e59664be282b46015a020c945dc2a48"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"558b125bbf6fa91eb5355da7e849d46edaf735bc":["7b91922b55d15444d554721b352861d028eb8278"],"3741149a89925c02f14dbeef8365b896798d91fc":["d493718201f0d0c54c773fb323d87bbd2fbffe41","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"5f0dc13f9e59664be282b46015a020c945dc2a48":["435c7fca8d9d4e96fdc2b59f3392b08ef46725e7","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}