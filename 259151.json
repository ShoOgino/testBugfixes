{"path":"src/test/org/apache/solr/analysis/CommonGramsFilterTest#testFilter(String,String).mjava","commits":[{"id":"8f8f5dd9e0322b913c47628300753239d0d5ef7e","date":1253656557,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/CommonGramsFilterTest#testFilter(String,String).mjava","pathOld":"/dev/null","sourceNew":"  public static String testFilter(String in, String type) throws IOException {\n    TokenStream nsf;\n    StringTokenStream ts = new StringTokenStream(in, \" .\");\n    if (type.equals(\"query\")) {\n      CommonGramsFilter cgf = new CommonGramsFilter(ts, commonWords);\n      nsf = new CommonGramsQueryFilter(cgf);\n    } else {\n      nsf = new CommonGramsFilter(ts, commonWords);\n    }\n\n    StringBuffer outBuf = new StringBuffer();\n    while (true) {\n      Token t = nsf.next();\n      if (t == null)\n        break;\n      for (int i = 0; i < t.getPositionIncrement(); i++)\n        outBuf.append('/');\n      if (t.getPositionIncrement() == 0)\n        outBuf.append(',');\n      outBuf.append(t.term());\n    }\n\n    String out = outBuf.toString();\n    out = out.replaceAll(\" \", \"\");\n    return out;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fd023a662cc25ae7e0ad0f33d71c476a16d0579","date":1261403630,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/solr/analysis/CommonGramsFilterTest#testFilter(String,String).mjava","sourceNew":null,"sourceOld":"  public static String testFilter(String in, String type) throws IOException {\n    TokenStream nsf;\n    StringTokenStream ts = new StringTokenStream(in, \" .\");\n    if (type.equals(\"query\")) {\n      CommonGramsFilter cgf = new CommonGramsFilter(ts, commonWords);\n      nsf = new CommonGramsQueryFilter(cgf);\n    } else {\n      nsf = new CommonGramsFilter(ts, commonWords);\n    }\n\n    StringBuffer outBuf = new StringBuffer();\n    while (true) {\n      Token t = nsf.next();\n      if (t == null)\n        break;\n      for (int i = 0; i < t.getPositionIncrement(); i++)\n        outBuf.append('/');\n      if (t.getPositionIncrement() == 0)\n        outBuf.append(',');\n      outBuf.append(t.term());\n    }\n\n    String out = outBuf.toString();\n    out = out.replaceAll(\" \", \"\");\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"8f8f5dd9e0322b913c47628300753239d0d5ef7e":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"2fd023a662cc25ae7e0ad0f33d71c476a16d0579":["8f8f5dd9e0322b913c47628300753239d0d5ef7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["8f8f5dd9e0322b913c47628300753239d0d5ef7e"],"8f8f5dd9e0322b913c47628300753239d0d5ef7e":["2fd023a662cc25ae7e0ad0f33d71c476a16d0579"],"2fd023a662cc25ae7e0ad0f33d71c476a16d0579":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2fd023a662cc25ae7e0ad0f33d71c476a16d0579","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}