{"path":"src/java/org/apache/lucene/search/RangeQuery#RangeQuery(Term,Term,boolean,Collator).mjava","commits":[{"id":"b33dc4652df2747e38f9782fde82bd426b77c538","date":1221599001,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/RangeQuery#RangeQuery(Term,Term,boolean,Collator).mjava","pathOld":"/dev/null","sourceNew":"    /** Constructs a query selecting all terms greater than\n     * <code>lowerTerm</code> but less than <code>upperTerm</code>.\n     * There must be at least one term and either term may be null,\n     * in which case there is no bound on that side, but if there are\n     * two terms, both terms <b>must</b> be for the same field.\n     * <p>\n     * If <code>collator</code> is not null, it will be used to decide whether\n     * index terms are within the given range, rather than using the Unicode code\n     * point order in which index terms are stored.\n     * <p>\n     * <strong>WARNING:</strong> Using this constructor and supplying a non-null\n     * value in the <code>collator</code> parameter will cause every single \n     * index Term in the Field referenced by lowerTerm and/or upperTerm to be\n     * examined.  Depending on the number of index Terms in this Field, the \n     * operation could be very slow.\n     *\n     * @param lowerTerm The Term at the lower end of the range\n     * @param upperTerm The Term at the upper end of the range\n     * @param inclusive If true, both <code>lowerTerm</code> and\n     *  <code>upperTerm</code> will themselves be included in the range.\n     * @param collator The collator to use to collate index Terms, to determine\n     *  their membership in the range bounded by <code>lowerTerm</code> and\n     *  <code>upperTerm</code>.\n     */\n    public RangeQuery(Term lowerTerm, Term upperTerm, boolean inclusive,\n                      Collator collator)\n    {\n        this(lowerTerm, upperTerm, inclusive);\n        this.collator = collator;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f7a11eba51d213f09b96054111cf56a1e5796a3","date":1226364000,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/RangeQuery#RangeQuery(Term,Term,boolean,Collator).mjava","pathOld":"src/java/org/apache/lucene/search/RangeQuery#RangeQuery(Term,Term,boolean,Collator).mjava","sourceNew":"  /** @deprecated Please use {@link #RangeQuery(String,\n   *  String, String, boolean, boolean, Collator)} instead */\n  public RangeQuery(Term lowerTerm, Term upperTerm, boolean inclusive,\n                    Collator collator) {\n    init(lowerTerm, upperTerm, inclusive, inclusive, collator);\n  }\n\n","sourceOld":"    /** Constructs a query selecting all terms greater than\n     * <code>lowerTerm</code> but less than <code>upperTerm</code>.\n     * There must be at least one term and either term may be null,\n     * in which case there is no bound on that side, but if there are\n     * two terms, both terms <b>must</b> be for the same field.\n     * <p>\n     * If <code>collator</code> is not null, it will be used to decide whether\n     * index terms are within the given range, rather than using the Unicode code\n     * point order in which index terms are stored.\n     * <p>\n     * <strong>WARNING:</strong> Using this constructor and supplying a non-null\n     * value in the <code>collator</code> parameter will cause every single \n     * index Term in the Field referenced by lowerTerm and/or upperTerm to be\n     * examined.  Depending on the number of index Terms in this Field, the \n     * operation could be very slow.\n     *\n     * @param lowerTerm The Term at the lower end of the range\n     * @param upperTerm The Term at the upper end of the range\n     * @param inclusive If true, both <code>lowerTerm</code> and\n     *  <code>upperTerm</code> will themselves be included in the range.\n     * @param collator The collator to use to collate index Terms, to determine\n     *  their membership in the range bounded by <code>lowerTerm</code> and\n     *  <code>upperTerm</code>.\n     */\n    public RangeQuery(Term lowerTerm, Term upperTerm, boolean inclusive,\n                      Collator collator)\n    {\n        this(lowerTerm, upperTerm, inclusive);\n        this.collator = collator;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f612096ab5275c4821d05f126bf45a89f4782b8","date":1246738452,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/RangeQuery#RangeQuery(Term,Term,boolean,Collator).mjava","sourceNew":null,"sourceOld":"  /** @deprecated Please use {@link #RangeQuery(String,\n   *  String, String, boolean, boolean, Collator)} instead */\n  public RangeQuery(Term lowerTerm, Term upperTerm, boolean inclusive,\n                    Collator collator) {\n    init(lowerTerm, upperTerm, inclusive, inclusive, collator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d5a0b761c4f4d0c34ebb3a8e04b62c71b3a8c0c","date":1246738520,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/RangeQuery#RangeQuery(Term,Term,boolean,Collator).mjava","pathOld":"/dev/null","sourceNew":"  /** Constructs a query selecting all terms greater than\n   * <code>lowerTerm</code> but less than <code>upperTerm</code>.\n   * There must be at least one term and either term may be null,\n   * in which case there is no bound on that side, but if there are\n   * two terms, both terms <b>must</b> be for the same field.\n   * <p>\n   * If <code>collator</code> is not null, it will be used to decide whether\n   * index terms are within the given range, rather than using the Unicode code\n   * point order in which index terms are stored.\n   * <p>\n   * <strong>WARNING:</strong> Using this constructor and supplying a non-null\n   * value in the <code>collator</code> parameter will cause every single \n   * index Term in the Field referenced by lowerTerm and/or upperTerm to be\n   * examined.  Depending on the number of index Terms in this Field, the \n   * operation could be very slow.\n   *\n   * @param lowerTerm The Term at the lower end of the range\n   * @param upperTerm The Term at the upper end of the range\n   * @param inclusive If true, both <code>lowerTerm</code> and\n   *  <code>upperTerm</code> will themselves be included in the range.\n   * @param collator The collator to use to collate index Terms, to determine\n   *  their membership in the range bounded by <code>lowerTerm</code> and\n   *  <code>upperTerm</code>.\n   */\n  public RangeQuery(Term lowerTerm, Term upperTerm, boolean inclusive, Collator collator) {\n    if (lowerTerm == null && upperTerm == null)\n      throw new IllegalArgumentException(\"At least one term must be non-null\");\n    if (lowerTerm != null && upperTerm != null && lowerTerm.field() != upperTerm.field())\n      throw new IllegalArgumentException(\"Both terms must have the same field\");\n      \n    delegate = new TermRangeQuery(\n      (lowerTerm == null) ? upperTerm.field() : lowerTerm.field(), \n      (lowerTerm == null) ? null : lowerTerm.text(), \n      (upperTerm == null) ? null : upperTerm.text(), \n      inclusive, inclusive,\n      collator\n    );\n    delegate.setConstantScoreRewrite(false);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b20609f6fb2cd074bd08115b0c3280b9646af7c","date":1248480213,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/RangeQuery#RangeQuery(Term,Term,boolean,Collator).mjava","pathOld":"src/java/org/apache/lucene/search/RangeQuery#RangeQuery(Term,Term,boolean,Collator).mjava","sourceNew":"  /** Constructs a query selecting all terms greater than\n   * <code>lowerTerm</code> but less than <code>upperTerm</code>.\n   * There must be at least one term and either term may be null,\n   * in which case there is no bound on that side, but if there are\n   * two terms, both terms <b>must</b> be for the same field.\n   * <p>\n   * If <code>collator</code> is not null, it will be used to decide whether\n   * index terms are within the given range, rather than using the Unicode code\n   * point order in which index terms are stored.\n   * <p>\n   * <strong>WARNING:</strong> Using this constructor and supplying a non-null\n   * value in the <code>collator</code> parameter will cause every single \n   * index Term in the Field referenced by lowerTerm and/or upperTerm to be\n   * examined.  Depending on the number of index Terms in this Field, the \n   * operation could be very slow.\n   *\n   * @param lowerTerm The Term at the lower end of the range\n   * @param upperTerm The Term at the upper end of the range\n   * @param inclusive If true, both <code>lowerTerm</code> and\n   *  <code>upperTerm</code> will themselves be included in the range.\n   * @param collator The collator to use to collate index Terms, to determine\n   *  their membership in the range bounded by <code>lowerTerm</code> and\n   *  <code>upperTerm</code>.\n   */\n  public RangeQuery(Term lowerTerm, Term upperTerm, boolean inclusive, Collator collator) {\n    if (lowerTerm == null && upperTerm == null)\n      throw new IllegalArgumentException(\"At least one term must be non-null\");\n    if (lowerTerm != null && upperTerm != null && lowerTerm.field() != upperTerm.field())\n      throw new IllegalArgumentException(\"Both terms must have the same field\");\n      \n    delegate = new TermRangeQuery(\n      (lowerTerm == null) ? upperTerm.field() : lowerTerm.field(), \n      (lowerTerm == null) ? null : lowerTerm.text(), \n      (upperTerm == null) ? null : upperTerm.text(), \n      inclusive, inclusive,\n      collator\n    );\n    delegate.setRewriteMethod(TermRangeQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n  }\n\n","sourceOld":"  /** Constructs a query selecting all terms greater than\n   * <code>lowerTerm</code> but less than <code>upperTerm</code>.\n   * There must be at least one term and either term may be null,\n   * in which case there is no bound on that side, but if there are\n   * two terms, both terms <b>must</b> be for the same field.\n   * <p>\n   * If <code>collator</code> is not null, it will be used to decide whether\n   * index terms are within the given range, rather than using the Unicode code\n   * point order in which index terms are stored.\n   * <p>\n   * <strong>WARNING:</strong> Using this constructor and supplying a non-null\n   * value in the <code>collator</code> parameter will cause every single \n   * index Term in the Field referenced by lowerTerm and/or upperTerm to be\n   * examined.  Depending on the number of index Terms in this Field, the \n   * operation could be very slow.\n   *\n   * @param lowerTerm The Term at the lower end of the range\n   * @param upperTerm The Term at the upper end of the range\n   * @param inclusive If true, both <code>lowerTerm</code> and\n   *  <code>upperTerm</code> will themselves be included in the range.\n   * @param collator The collator to use to collate index Terms, to determine\n   *  their membership in the range bounded by <code>lowerTerm</code> and\n   *  <code>upperTerm</code>.\n   */\n  public RangeQuery(Term lowerTerm, Term upperTerm, boolean inclusive, Collator collator) {\n    if (lowerTerm == null && upperTerm == null)\n      throw new IllegalArgumentException(\"At least one term must be non-null\");\n    if (lowerTerm != null && upperTerm != null && lowerTerm.field() != upperTerm.field())\n      throw new IllegalArgumentException(\"Both terms must have the same field\");\n      \n    delegate = new TermRangeQuery(\n      (lowerTerm == null) ? upperTerm.field() : lowerTerm.field(), \n      (lowerTerm == null) ? null : lowerTerm.text(), \n      (upperTerm == null) ? null : upperTerm.text(), \n      inclusive, inclusive,\n      collator\n    );\n    delegate.setConstantScoreRewrite(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da","date":1255296547,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/RangeQuery#RangeQuery(Term,Term,boolean,Collator).mjava","sourceNew":null,"sourceOld":"  /** Constructs a query selecting all terms greater than\n   * <code>lowerTerm</code> but less than <code>upperTerm</code>.\n   * There must be at least one term and either term may be null,\n   * in which case there is no bound on that side, but if there are\n   * two terms, both terms <b>must</b> be for the same field.\n   * <p>\n   * If <code>collator</code> is not null, it will be used to decide whether\n   * index terms are within the given range, rather than using the Unicode code\n   * point order in which index terms are stored.\n   * <p>\n   * <strong>WARNING:</strong> Using this constructor and supplying a non-null\n   * value in the <code>collator</code> parameter will cause every single \n   * index Term in the Field referenced by lowerTerm and/or upperTerm to be\n   * examined.  Depending on the number of index Terms in this Field, the \n   * operation could be very slow.\n   *\n   * @param lowerTerm The Term at the lower end of the range\n   * @param upperTerm The Term at the upper end of the range\n   * @param inclusive If true, both <code>lowerTerm</code> and\n   *  <code>upperTerm</code> will themselves be included in the range.\n   * @param collator The collator to use to collate index Terms, to determine\n   *  their membership in the range bounded by <code>lowerTerm</code> and\n   *  <code>upperTerm</code>.\n   */\n  public RangeQuery(Term lowerTerm, Term upperTerm, boolean inclusive, Collator collator) {\n    if (lowerTerm == null && upperTerm == null)\n      throw new IllegalArgumentException(\"At least one term must be non-null\");\n    if (lowerTerm != null && upperTerm != null && lowerTerm.field() != upperTerm.field())\n      throw new IllegalArgumentException(\"Both terms must have the same field\");\n      \n    delegate = new TermRangeQuery(\n      (lowerTerm == null) ? upperTerm.field() : lowerTerm.field(), \n      (lowerTerm == null) ? null : lowerTerm.text(), \n      (upperTerm == null) ? null : upperTerm.text(), \n      inclusive, inclusive,\n      collator\n    );\n    delegate.setRewriteMethod(TermRangeQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da":["8b20609f6fb2cd074bd08115b0c3280b9646af7c"],"0f612096ab5275c4821d05f126bf45a89f4782b8":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"b33dc4652df2747e38f9782fde82bd426b77c538":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8b20609f6fb2cd074bd08115b0c3280b9646af7c":["5d5a0b761c4f4d0c34ebb3a8e04b62c71b3a8c0c"],"5d5a0b761c4f4d0c34ebb3a8e04b62c71b3a8c0c":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["b33dc4652df2747e38f9782fde82bd426b77c538"]},"commit2Childs":{"80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0f612096ab5275c4821d05f126bf45a89f4782b8":["5d5a0b761c4f4d0c34ebb3a8e04b62c71b3a8c0c"],"b33dc4652df2747e38f9782fde82bd426b77c538":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b33dc4652df2747e38f9782fde82bd426b77c538"],"8b20609f6fb2cd074bd08115b0c3280b9646af7c":["80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da"],"5d5a0b761c4f4d0c34ebb3a8e04b62c71b3a8c0c":["8b20609f6fb2cd074bd08115b0c3280b9646af7c"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}