{"path":"src/java/org/apache/lucene/util/PriorityQueue#insert(Object).mjava","commits":[{"id":"d36e31648b7ec39d875e5e05bcc9ac24ae313690","date":1063282530,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/PriorityQueue#insert(Object).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Adds element to the PriorityQueue in log(size) time if either\n   * the PriorityQueue is not full, or !lessThan(element, top()).\n   * @param element\n   * @return true if element is added, false otherwise.\n   */\n  public boolean insert(Object element){\n    if(size < maxSize){\n        put(element);\n        return true;\n    }\n    else if(size > 0 && !lessThan(element, top())){\n        heap[1] = element;\n        adjustTop();\n        return true;\n    }\n    else\n        return false;\n   }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91a92e9cc2402fc50cebd424edfcfdd044d0cfd6","date":1064066807,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/PriorityQueue#insert(Object).mjava","pathOld":"src/java/org/apache/lucene/util/PriorityQueue#insert(Object).mjava","sourceNew":"  /**\n   * Adds element to the PriorityQueue in log(size) time if either\n   * the PriorityQueue is not full, or not lessThan(element, top()).\n   * @param element\n   * @return true if element is added, false otherwise.\n   */\n  public boolean insert(Object element){\n    if(size < maxSize){\n        put(element);\n        return true;\n    }\n    else if(size > 0 && !lessThan(element, top())){\n        heap[1] = element;\n        adjustTop();\n        return true;\n    }\n    else\n        return false;\n   }\n\n","sourceOld":"  /**\n   * Adds element to the PriorityQueue in log(size) time if either\n   * the PriorityQueue is not full, or !lessThan(element, top()).\n   * @param element\n   * @return true if element is added, false otherwise.\n   */\n  public boolean insert(Object element){\n    if(size < maxSize){\n        put(element);\n        return true;\n    }\n    else if(size > 0 && !lessThan(element, top())){\n        heap[1] = element;\n        adjustTop();\n        return true;\n    }\n    else\n        return false;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e81f97844548edc114ec2d1eb1a9e01c99f37062","date":1094676223,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/PriorityQueue#insert(Object).mjava","pathOld":"src/java/org/apache/lucene/util/PriorityQueue#insert(Object).mjava","sourceNew":"  /**\n   * Adds element to the PriorityQueue in log(size) time if either\n   * the PriorityQueue is not full, or not lessThan(element, top()).\n   * @param element\n   * @return true if element is added, false otherwise.\n   */\n  public boolean insert(Object element){\n    if(size < maxSize){\n      put(element);\n      return true;\n    }\n    else if(size > 0 && !lessThan(element, top())){\n      heap[1] = element;\n      adjustTop();\n      return true;\n    }\n    else\n      return false;\n   }\n\n","sourceOld":"  /**\n   * Adds element to the PriorityQueue in log(size) time if either\n   * the PriorityQueue is not full, or not lessThan(element, top()).\n   * @param element\n   * @return true if element is added, false otherwise.\n   */\n  public boolean insert(Object element){\n    if(size < maxSize){\n        put(element);\n        return true;\n    }\n    else if(size > 0 && !lessThan(element, top())){\n        heap[1] = element;\n        adjustTop();\n        return true;\n    }\n    else\n        return false;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5241670df94f0524d3e8e9764331dea13b545564","date":1197914713,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/PriorityQueue#insert(Object).mjava","pathOld":"src/java/org/apache/lucene/util/PriorityQueue#insert(Object).mjava","sourceNew":"  /**\n   * Adds element to the PriorityQueue in log(size) time if either\n   * the PriorityQueue is not full, or not lessThan(element, top()).\n   * @param element\n   * @return true if element is added, false otherwise.\n   */\n  public boolean insert(Object element) {\n    return insertWithOverflow(element) != element;\n  }\n\n","sourceOld":"  /**\n   * Adds element to the PriorityQueue in log(size) time if either\n   * the PriorityQueue is not full, or not lessThan(element, top()).\n   * @param element\n   * @return true if element is added, false otherwise.\n   */\n  public boolean insert(Object element){\n    if(size < maxSize){\n      put(element);\n      return true;\n    }\n    else if(size > 0 && !lessThan(element, top())){\n      heap[1] = element;\n      adjustTop();\n      return true;\n    }\n    else\n      return false;\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc","date":1241865401,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/PriorityQueue#insert(Object).mjava","pathOld":"src/java/org/apache/lucene/util/PriorityQueue#insert(Object).mjava","sourceNew":"  /**\n   * Adds element to the PriorityQueue in log(size) time if either the\n   * PriorityQueue is not full, or not lessThan(element, top()).\n   * \n   * @param element\n   * @return true if element is added, false otherwise.\n   * @deprecated use {@link #insertWithOverflow(Object)} instead, which\n   *             encourages objects reuse.\n   */\n  public boolean insert(Object element) {\n    return insertWithOverflow(element) != element;\n  }\n\n","sourceOld":"  /**\n   * Adds element to the PriorityQueue in log(size) time if either\n   * the PriorityQueue is not full, or not lessThan(element, top()).\n   * @param element\n   * @return true if element is added, false otherwise.\n   */\n  public boolean insert(Object element) {\n    return insertWithOverflow(element) != element;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d48430886f0d62ca63d20bf2a8bc01acee0c12f","date":1254504483,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/PriorityQueue#insert(T).mjava","pathOld":"src/java/org/apache/lucene/util/PriorityQueue#insert(Object).mjava","sourceNew":"  /**\n   * Adds element to the PriorityQueue in log(size) time if either the\n   * PriorityQueue is not full, or not lessThan(element, top()).\n   * \n   * @param element\n   * @return true if element is added, false otherwise.\n   * @deprecated use {@link #insertWithOverflow(T)} instead, which\n   *             encourages objects reuse.\n   */\n  public boolean insert(T element) {\n    return insertWithOverflow(element) != element;\n  }\n\n","sourceOld":"  /**\n   * Adds element to the PriorityQueue in log(size) time if either the\n   * PriorityQueue is not full, or not lessThan(element, top()).\n   * \n   * @param element\n   * @return true if element is added, false otherwise.\n   * @deprecated use {@link #insertWithOverflow(Object)} instead, which\n   *             encourages objects reuse.\n   */\n  public boolean insert(Object element) {\n    return insertWithOverflow(element) != element;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc":["5241670df94f0524d3e8e9764331dea13b545564"],"e81f97844548edc114ec2d1eb1a9e01c99f37062":["91a92e9cc2402fc50cebd424edfcfdd044d0cfd6"],"d36e31648b7ec39d875e5e05bcc9ac24ae313690":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"91a92e9cc2402fc50cebd424edfcfdd044d0cfd6":["d36e31648b7ec39d875e5e05bcc9ac24ae313690"],"8d48430886f0d62ca63d20bf2a8bc01acee0c12f":["17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc"],"5241670df94f0524d3e8e9764331dea13b545564":["e81f97844548edc114ec2d1eb1a9e01c99f37062"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8d48430886f0d62ca63d20bf2a8bc01acee0c12f"]},"commit2Childs":{"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc":["8d48430886f0d62ca63d20bf2a8bc01acee0c12f"],"e81f97844548edc114ec2d1eb1a9e01c99f37062":["5241670df94f0524d3e8e9764331dea13b545564"],"d36e31648b7ec39d875e5e05bcc9ac24ae313690":["91a92e9cc2402fc50cebd424edfcfdd044d0cfd6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d36e31648b7ec39d875e5e05bcc9ac24ae313690"],"91a92e9cc2402fc50cebd424edfcfdd044d0cfd6":["e81f97844548edc114ec2d1eb1a9e01c99f37062"],"5241670df94f0524d3e8e9764331dea13b545564":["17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc"],"8d48430886f0d62ca63d20bf2a8bc01acee0c12f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}