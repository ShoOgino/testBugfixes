{"path":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testPerField().mjava","commits":[{"id":"df18b2465217a237531d0d944c22ea4a4316411e","date":1278157467,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testPerField().mjava","pathOld":"/dev/null","sourceNew":"  /*\n<field name=\"test_basictv\" type=\"text\" termVectors=\"true\"/>\n   <field name=\"test_notv\" type=\"text\" termVectors=\"false\"/>\n   <field name=\"test_postv\" type=\"text\" termVectors=\"true\" termPositions=\"true\"/>\n   <field name=\"test_offtv\" type=\"text\" termVectors=\"true\" termOffsets=\"true\"/>\n   <field name=\"test_posofftv\" type=\"text\" termVectors=\"true\"\n     termPositions=\"true\" termOffsets=\"true\"/>\n   */\n  @Test\n  public void testPerField() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent tvComp = core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.FIELDS, \"test_basictv,test_notv,test_postv,test_offtv,test_posofftv\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorParams.TF_IDF, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n    //per field\n    params.add(\"f.test_posofftv.\" + TermVectorParams.POSITIONS, \"false\");\n    params.add(\"f.test_offtv.\" + TermVectorParams.OFFSETS, \"false\");\n    params.add(\"f.test_basictv.\" + TermVectorParams.DF, \"false\");\n    params.add(\"f.test_basictv.\" + TermVectorParams.TF, \"false\");\n    params.add(\"f.test_basictv.\" + TermVectorParams.TF_IDF, \"false\");\n    SolrRequestHandler handler = core.getRequestHandler(\"tvrh\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    NamedList termVectors = (NamedList) values.get(TermVectorComponent.TERM_VECTORS);\n    assertTrue(\"termVectors is null and it shouldn't be\", termVectors != null);\n    System.out.println(\"TVs: \" + termVectors);\n    NamedList doc = (NamedList) termVectors.get(\"doc-0\");\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    assertEquals(doc.size(), 5);\n    NamedList vec;\n    NamedList another;\n    NamedList offsets;\n    NamedList pos;\n    Integer df;\n    Double val;\n    vec = (NamedList) doc.get(\"test_posofftv\");\n    assertNotNull(vec);\n    assertEquals(vec.size(), 2);\n    another = (NamedList) vec.get(\"anoth\");\n    offsets = (NamedList) another.get(\"offsets\");\n    assertNotNull(offsets);\n    assertTrue(offsets.size() > 0);\n    pos = (NamedList) another.get(\"positions\");\n    //positions should be null, since we turned them off\n    assertNull(pos);\n    df = (Integer) another.get(\"df\");\n    assertNotNull(df);\n    assertTrue(df == 2);\n    val = (Double) another.get(\"tf-idf\");\n    assertTrue(\"tfIdf is null and it shouldn't be\", val != null);\n    assertTrue(val + \" does not equal: \" + 0.5, val == 0.5);\n    //Try out the other fields, too\n    vec = (NamedList) doc.get(\"test_offtv\");\n    assertNotNull(vec);\n    assertEquals(vec.size(), 2);\n    another = (NamedList) vec.get(\"anoth\");\n    offsets = (NamedList) another.get(\"offsets\");\n    assertNull(offsets);\n    pos = (NamedList) another.get(\"positions\");\n    //positions should be null, since we turned them off\n    assertNull(vec.toString(), pos);\n    df = (Integer) another.get(\"df\");\n    assertNotNull(df);\n    assertTrue(df == 2);\n    val = (Double) another.get(\"tf-idf\");\n    assertTrue(\"tfIdf is null and it shouldn't be\", val != null);\n    assertTrue(val + \" does not equal: \" + 0.5, val == 0.5);\n    vec = (NamedList) doc.get(\"test_basictv\");\n    assertNotNull(vec);\n    assertEquals(vec.size(), 2);\n    another = (NamedList) vec.get(\"anoth\");\n    offsets = (NamedList) another.get(\"offsets\");\n    assertNull(offsets);\n    pos = (NamedList) another.get(\"positions\");\n    assertNull(pos);\n    df = (Integer) another.get(\"df\");\n    assertNull(df);\n    val = (Double) another.get(\"tf-idf\");\n    assertNull(val);\n    val = (Double) another.get(\"tf\");\n    assertNull(val);\n    //Now validate we have error messages\n    NamedList warnings = (NamedList) termVectors.get(\"warnings\");\n    assertNotNull(warnings);\n    List<String> theList;\n    theList = (List<String>) warnings.get(\"noTermVectors\");\n    assertNotNull(theList);\n    assertEquals(theList.size(), 1);\n    theList = (List<String>) warnings.get(\"noPositions\");\n    assertNotNull(theList);\n    assertEquals(theList.size(), 2);\n    theList = (List<String>) warnings.get(\"noOffsets\");\n    assertNotNull(theList);\n    assertEquals(theList.size(), 2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d5cccaae6cc86d750cac2aff57b2748de06c0e7","date":1279072441,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testPerField().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testPerField().mjava","sourceNew":"  /*\n<field name=\"test_basictv\" type=\"text\" termVectors=\"true\"/>\n   <field name=\"test_notv\" type=\"text\" termVectors=\"false\"/>\n   <field name=\"test_postv\" type=\"text\" termVectors=\"true\" termPositions=\"true\"/>\n   <field name=\"test_offtv\" type=\"text\" termVectors=\"true\" termOffsets=\"true\"/>\n   <field name=\"test_posofftv\" type=\"text\" termVectors=\"true\"\n     termPositions=\"true\" termOffsets=\"true\"/>\n   */\n  @Test\n  public void testPerField() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent tvComp = core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.FIELDS, \"test_basictv,test_notv,test_postv,test_offtv,test_posofftv\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorParams.TF_IDF, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n    //per field\n    params.add(\"f.test_posofftv.\" + TermVectorParams.POSITIONS, \"false\");\n    params.add(\"f.test_offtv.\" + TermVectorParams.OFFSETS, \"false\");\n    params.add(\"f.test_basictv.\" + TermVectorParams.DF, \"false\");\n    params.add(\"f.test_basictv.\" + TermVectorParams.TF, \"false\");\n    params.add(\"f.test_basictv.\" + TermVectorParams.TF_IDF, \"false\");\n    SolrRequestHandler handler = core.getRequestHandler(\"tvrh\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    NamedList termVectors = (NamedList) values.get(TermVectorComponent.TERM_VECTORS);\n    assertTrue(\"termVectors is null and it shouldn't be\", termVectors != null);\n    if (VERBOSE) System.out.println(\"TVs: \" + termVectors);\n    NamedList doc = (NamedList) termVectors.get(\"doc-0\");\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    assertEquals(doc.size(), 5);\n    NamedList vec;\n    NamedList another;\n    NamedList offsets;\n    NamedList pos;\n    Integer df;\n    Double val;\n    vec = (NamedList) doc.get(\"test_posofftv\");\n    assertNotNull(vec);\n    assertEquals(vec.size(), 2);\n    another = (NamedList) vec.get(\"anoth\");\n    offsets = (NamedList) another.get(\"offsets\");\n    assertNotNull(offsets);\n    assertTrue(offsets.size() > 0);\n    pos = (NamedList) another.get(\"positions\");\n    //positions should be null, since we turned them off\n    assertNull(pos);\n    df = (Integer) another.get(\"df\");\n    assertNotNull(df);\n    assertTrue(df == 2);\n    val = (Double) another.get(\"tf-idf\");\n    assertTrue(\"tfIdf is null and it shouldn't be\", val != null);\n    assertTrue(val + \" does not equal: \" + 0.5, val == 0.5);\n    //Try out the other fields, too\n    vec = (NamedList) doc.get(\"test_offtv\");\n    assertNotNull(vec);\n    assertEquals(vec.size(), 2);\n    another = (NamedList) vec.get(\"anoth\");\n    offsets = (NamedList) another.get(\"offsets\");\n    assertNull(offsets);\n    pos = (NamedList) another.get(\"positions\");\n    //positions should be null, since we turned them off\n    assertNull(vec.toString(), pos);\n    df = (Integer) another.get(\"df\");\n    assertNotNull(df);\n    assertTrue(df == 2);\n    val = (Double) another.get(\"tf-idf\");\n    assertTrue(\"tfIdf is null and it shouldn't be\", val != null);\n    assertTrue(val + \" does not equal: \" + 0.5, val == 0.5);\n    vec = (NamedList) doc.get(\"test_basictv\");\n    assertNotNull(vec);\n    assertEquals(vec.size(), 2);\n    another = (NamedList) vec.get(\"anoth\");\n    offsets = (NamedList) another.get(\"offsets\");\n    assertNull(offsets);\n    pos = (NamedList) another.get(\"positions\");\n    assertNull(pos);\n    df = (Integer) another.get(\"df\");\n    assertNull(df);\n    val = (Double) another.get(\"tf-idf\");\n    assertNull(val);\n    val = (Double) another.get(\"tf\");\n    assertNull(val);\n    //Now validate we have error messages\n    NamedList warnings = (NamedList) termVectors.get(\"warnings\");\n    assertNotNull(warnings);\n    List<String> theList;\n    theList = (List<String>) warnings.get(\"noTermVectors\");\n    assertNotNull(theList);\n    assertEquals(theList.size(), 1);\n    theList = (List<String>) warnings.get(\"noPositions\");\n    assertNotNull(theList);\n    assertEquals(theList.size(), 2);\n    theList = (List<String>) warnings.get(\"noOffsets\");\n    assertNotNull(theList);\n    assertEquals(theList.size(), 2);\n  }\n\n","sourceOld":"  /*\n<field name=\"test_basictv\" type=\"text\" termVectors=\"true\"/>\n   <field name=\"test_notv\" type=\"text\" termVectors=\"false\"/>\n   <field name=\"test_postv\" type=\"text\" termVectors=\"true\" termPositions=\"true\"/>\n   <field name=\"test_offtv\" type=\"text\" termVectors=\"true\" termOffsets=\"true\"/>\n   <field name=\"test_posofftv\" type=\"text\" termVectors=\"true\"\n     termPositions=\"true\" termOffsets=\"true\"/>\n   */\n  @Test\n  public void testPerField() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent tvComp = core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.FIELDS, \"test_basictv,test_notv,test_postv,test_offtv,test_posofftv\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorParams.TF_IDF, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n    //per field\n    params.add(\"f.test_posofftv.\" + TermVectorParams.POSITIONS, \"false\");\n    params.add(\"f.test_offtv.\" + TermVectorParams.OFFSETS, \"false\");\n    params.add(\"f.test_basictv.\" + TermVectorParams.DF, \"false\");\n    params.add(\"f.test_basictv.\" + TermVectorParams.TF, \"false\");\n    params.add(\"f.test_basictv.\" + TermVectorParams.TF_IDF, \"false\");\n    SolrRequestHandler handler = core.getRequestHandler(\"tvrh\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    NamedList termVectors = (NamedList) values.get(TermVectorComponent.TERM_VECTORS);\n    assertTrue(\"termVectors is null and it shouldn't be\", termVectors != null);\n    System.out.println(\"TVs: \" + termVectors);\n    NamedList doc = (NamedList) termVectors.get(\"doc-0\");\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    assertEquals(doc.size(), 5);\n    NamedList vec;\n    NamedList another;\n    NamedList offsets;\n    NamedList pos;\n    Integer df;\n    Double val;\n    vec = (NamedList) doc.get(\"test_posofftv\");\n    assertNotNull(vec);\n    assertEquals(vec.size(), 2);\n    another = (NamedList) vec.get(\"anoth\");\n    offsets = (NamedList) another.get(\"offsets\");\n    assertNotNull(offsets);\n    assertTrue(offsets.size() > 0);\n    pos = (NamedList) another.get(\"positions\");\n    //positions should be null, since we turned them off\n    assertNull(pos);\n    df = (Integer) another.get(\"df\");\n    assertNotNull(df);\n    assertTrue(df == 2);\n    val = (Double) another.get(\"tf-idf\");\n    assertTrue(\"tfIdf is null and it shouldn't be\", val != null);\n    assertTrue(val + \" does not equal: \" + 0.5, val == 0.5);\n    //Try out the other fields, too\n    vec = (NamedList) doc.get(\"test_offtv\");\n    assertNotNull(vec);\n    assertEquals(vec.size(), 2);\n    another = (NamedList) vec.get(\"anoth\");\n    offsets = (NamedList) another.get(\"offsets\");\n    assertNull(offsets);\n    pos = (NamedList) another.get(\"positions\");\n    //positions should be null, since we turned them off\n    assertNull(vec.toString(), pos);\n    df = (Integer) another.get(\"df\");\n    assertNotNull(df);\n    assertTrue(df == 2);\n    val = (Double) another.get(\"tf-idf\");\n    assertTrue(\"tfIdf is null and it shouldn't be\", val != null);\n    assertTrue(val + \" does not equal: \" + 0.5, val == 0.5);\n    vec = (NamedList) doc.get(\"test_basictv\");\n    assertNotNull(vec);\n    assertEquals(vec.size(), 2);\n    another = (NamedList) vec.get(\"anoth\");\n    offsets = (NamedList) another.get(\"offsets\");\n    assertNull(offsets);\n    pos = (NamedList) another.get(\"positions\");\n    assertNull(pos);\n    df = (Integer) another.get(\"df\");\n    assertNull(df);\n    val = (Double) another.get(\"tf-idf\");\n    assertNull(val);\n    val = (Double) another.get(\"tf\");\n    assertNull(val);\n    //Now validate we have error messages\n    NamedList warnings = (NamedList) termVectors.get(\"warnings\");\n    assertNotNull(warnings);\n    List<String> theList;\n    theList = (List<String>) warnings.get(\"noTermVectors\");\n    assertNotNull(theList);\n    assertEquals(theList.size(), 1);\n    theList = (List<String>) warnings.get(\"noPositions\");\n    assertNotNull(theList);\n    assertEquals(theList.size(), 2);\n    theList = (List<String>) warnings.get(\"noOffsets\");\n    assertNotNull(theList);\n    assertEquals(theList.size(), 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testPerField().mjava","pathOld":"/dev/null","sourceNew":"  /*\n<field name=\"test_basictv\" type=\"text\" termVectors=\"true\"/>\n   <field name=\"test_notv\" type=\"text\" termVectors=\"false\"/>\n   <field name=\"test_postv\" type=\"text\" termVectors=\"true\" termPositions=\"true\"/>\n   <field name=\"test_offtv\" type=\"text\" termVectors=\"true\" termOffsets=\"true\"/>\n   <field name=\"test_posofftv\" type=\"text\" termVectors=\"true\"\n     termPositions=\"true\" termOffsets=\"true\"/>\n   */\n  @Test\n  public void testPerField() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent tvComp = core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.FIELDS, \"test_basictv,test_notv,test_postv,test_offtv,test_posofftv\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorParams.TF_IDF, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n    //per field\n    params.add(\"f.test_posofftv.\" + TermVectorParams.POSITIONS, \"false\");\n    params.add(\"f.test_offtv.\" + TermVectorParams.OFFSETS, \"false\");\n    params.add(\"f.test_basictv.\" + TermVectorParams.DF, \"false\");\n    params.add(\"f.test_basictv.\" + TermVectorParams.TF, \"false\");\n    params.add(\"f.test_basictv.\" + TermVectorParams.TF_IDF, \"false\");\n    SolrRequestHandler handler = core.getRequestHandler(\"tvrh\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    NamedList termVectors = (NamedList) values.get(TermVectorComponent.TERM_VECTORS);\n    assertTrue(\"termVectors is null and it shouldn't be\", termVectors != null);\n    if (VERBOSE) System.out.println(\"TVs: \" + termVectors);\n    NamedList doc = (NamedList) termVectors.get(\"doc-0\");\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    assertEquals(doc.size(), 5);\n    NamedList vec;\n    NamedList another;\n    NamedList offsets;\n    NamedList pos;\n    Integer df;\n    Double val;\n    vec = (NamedList) doc.get(\"test_posofftv\");\n    assertNotNull(vec);\n    assertEquals(vec.size(), 2);\n    another = (NamedList) vec.get(\"anoth\");\n    offsets = (NamedList) another.get(\"offsets\");\n    assertNotNull(offsets);\n    assertTrue(offsets.size() > 0);\n    pos = (NamedList) another.get(\"positions\");\n    //positions should be null, since we turned them off\n    assertNull(pos);\n    df = (Integer) another.get(\"df\");\n    assertNotNull(df);\n    assertTrue(df == 2);\n    val = (Double) another.get(\"tf-idf\");\n    assertTrue(\"tfIdf is null and it shouldn't be\", val != null);\n    assertTrue(val + \" does not equal: \" + 0.5, val == 0.5);\n    //Try out the other fields, too\n    vec = (NamedList) doc.get(\"test_offtv\");\n    assertNotNull(vec);\n    assertEquals(vec.size(), 2);\n    another = (NamedList) vec.get(\"anoth\");\n    offsets = (NamedList) another.get(\"offsets\");\n    assertNull(offsets);\n    pos = (NamedList) another.get(\"positions\");\n    //positions should be null, since we turned them off\n    assertNull(vec.toString(), pos);\n    df = (Integer) another.get(\"df\");\n    assertNotNull(df);\n    assertTrue(df == 2);\n    val = (Double) another.get(\"tf-idf\");\n    assertTrue(\"tfIdf is null and it shouldn't be\", val != null);\n    assertTrue(val + \" does not equal: \" + 0.5, val == 0.5);\n    vec = (NamedList) doc.get(\"test_basictv\");\n    assertNotNull(vec);\n    assertEquals(vec.size(), 2);\n    another = (NamedList) vec.get(\"anoth\");\n    offsets = (NamedList) another.get(\"offsets\");\n    assertNull(offsets);\n    pos = (NamedList) another.get(\"positions\");\n    assertNull(pos);\n    df = (Integer) another.get(\"df\");\n    assertNull(df);\n    val = (Double) another.get(\"tf-idf\");\n    assertNull(val);\n    val = (Double) another.get(\"tf\");\n    assertNull(val);\n    //Now validate we have error messages\n    NamedList warnings = (NamedList) termVectors.get(\"warnings\");\n    assertNotNull(warnings);\n    List<String> theList;\n    theList = (List<String>) warnings.get(\"noTermVectors\");\n    assertNotNull(theList);\n    assertEquals(theList.size(), 1);\n    theList = (List<String>) warnings.get(\"noPositions\");\n    assertNotNull(theList);\n    assertEquals(theList.size(), 2);\n    theList = (List<String>) warnings.get(\"noOffsets\");\n    assertNotNull(theList);\n    assertEquals(theList.size(), 2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4eacd50421fb83ad5dbe90a00984962e7ec0df7c","date":1287151800,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testPerField().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testPerField().mjava","sourceNew":"  @Test\n  public void testPerField() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent tvComp = core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.FIELDS, \"test_basictv,test_notv,test_postv,test_offtv,test_posofftv\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorParams.TF_IDF, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n    //per field\n    params.add(\"f.test_posofftv.\" + TermVectorParams.POSITIONS, \"false\");\n    params.add(\"f.test_offtv.\" + TermVectorParams.OFFSETS, \"false\");\n    params.add(\"f.test_basictv.\" + TermVectorParams.DF, \"false\");\n    params.add(\"f.test_basictv.\" + TermVectorParams.TF, \"false\");\n    params.add(\"f.test_basictv.\" + TermVectorParams.TF_IDF, \"false\");\n    SolrRequestHandler handler = core.getRequestHandler(\"tvrh\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    NamedList termVectors = (NamedList) values.get(TermVectorComponent.TERM_VECTORS);\n    assertTrue(\"termVectors is null and it shouldn't be\", termVectors != null);\n    if (VERBOSE) System.out.println(\"TVs: \" + termVectors);\n    NamedList doc = (NamedList) termVectors.get(\"doc-0\");\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    assertEquals(doc.size(), 5);\n    NamedList vec;\n    NamedList another;\n    NamedList offsets;\n    NamedList pos;\n    Integer df;\n    Double val;\n    vec = (NamedList) doc.get(\"test_posofftv\");\n    assertNotNull(vec);\n    assertEquals(vec.size(), 2);\n    another = (NamedList) vec.get(\"anoth\");\n    offsets = (NamedList) another.get(\"offsets\");\n    assertNotNull(offsets);\n    assertTrue(offsets.size() > 0);\n    pos = (NamedList) another.get(\"positions\");\n    //positions should be null, since we turned them off\n    assertNull(pos);\n    df = (Integer) another.get(\"df\");\n    assertNotNull(df);\n    assertTrue(df == 2);\n    val = (Double) another.get(\"tf-idf\");\n    assertTrue(\"tfIdf is null and it shouldn't be\", val != null);\n    assertTrue(val + \" does not equal: \" + 0.5, val == 0.5);\n    //Try out the other fields, too\n    vec = (NamedList) doc.get(\"test_offtv\");\n    assertNotNull(vec);\n    assertEquals(vec.size(), 2);\n    another = (NamedList) vec.get(\"anoth\");\n    offsets = (NamedList) another.get(\"offsets\");\n    assertNull(offsets);\n    pos = (NamedList) another.get(\"positions\");\n    //positions should be null, since we turned them off\n    assertNull(vec.toString(), pos);\n    df = (Integer) another.get(\"df\");\n    assertNotNull(df);\n    assertTrue(df == 2);\n    val = (Double) another.get(\"tf-idf\");\n    assertTrue(\"tfIdf is null and it shouldn't be\", val != null);\n    assertTrue(val + \" does not equal: \" + 0.5, val == 0.5);\n    vec = (NamedList) doc.get(\"test_basictv\");\n    assertNotNull(vec);\n    assertEquals(vec.size(), 2);\n    another = (NamedList) vec.get(\"anoth\");\n    offsets = (NamedList) another.get(\"offsets\");\n    assertNull(offsets);\n    pos = (NamedList) another.get(\"positions\");\n    assertNull(pos);\n    df = (Integer) another.get(\"df\");\n    assertNull(df);\n    val = (Double) another.get(\"tf-idf\");\n    assertNull(val);\n    val = (Double) another.get(\"tf\");\n    assertNull(val);\n    //Now validate we have error messages\n    NamedList warnings = (NamedList) termVectors.get(\"warnings\");\n    assertNotNull(warnings);\n    List<String> theList;\n    theList = (List<String>) warnings.get(\"noTermVectors\");\n    assertNotNull(theList);\n    assertEquals(theList.size(), 1);\n    theList = (List<String>) warnings.get(\"noPositions\");\n    assertNotNull(theList);\n    assertEquals(theList.size(), 2);\n    theList = (List<String>) warnings.get(\"noOffsets\");\n    assertNotNull(theList);\n    assertEquals(theList.size(), 2);\n  }\n\n","sourceOld":"  /*\n<field name=\"test_basictv\" type=\"text\" termVectors=\"true\"/>\n   <field name=\"test_notv\" type=\"text\" termVectors=\"false\"/>\n   <field name=\"test_postv\" type=\"text\" termVectors=\"true\" termPositions=\"true\"/>\n   <field name=\"test_offtv\" type=\"text\" termVectors=\"true\" termOffsets=\"true\"/>\n   <field name=\"test_posofftv\" type=\"text\" termVectors=\"true\"\n     termPositions=\"true\" termOffsets=\"true\"/>\n   */\n  @Test\n  public void testPerField() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent tvComp = core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.FIELDS, \"test_basictv,test_notv,test_postv,test_offtv,test_posofftv\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorParams.TF_IDF, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n    //per field\n    params.add(\"f.test_posofftv.\" + TermVectorParams.POSITIONS, \"false\");\n    params.add(\"f.test_offtv.\" + TermVectorParams.OFFSETS, \"false\");\n    params.add(\"f.test_basictv.\" + TermVectorParams.DF, \"false\");\n    params.add(\"f.test_basictv.\" + TermVectorParams.TF, \"false\");\n    params.add(\"f.test_basictv.\" + TermVectorParams.TF_IDF, \"false\");\n    SolrRequestHandler handler = core.getRequestHandler(\"tvrh\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    NamedList termVectors = (NamedList) values.get(TermVectorComponent.TERM_VECTORS);\n    assertTrue(\"termVectors is null and it shouldn't be\", termVectors != null);\n    if (VERBOSE) System.out.println(\"TVs: \" + termVectors);\n    NamedList doc = (NamedList) termVectors.get(\"doc-0\");\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    assertEquals(doc.size(), 5);\n    NamedList vec;\n    NamedList another;\n    NamedList offsets;\n    NamedList pos;\n    Integer df;\n    Double val;\n    vec = (NamedList) doc.get(\"test_posofftv\");\n    assertNotNull(vec);\n    assertEquals(vec.size(), 2);\n    another = (NamedList) vec.get(\"anoth\");\n    offsets = (NamedList) another.get(\"offsets\");\n    assertNotNull(offsets);\n    assertTrue(offsets.size() > 0);\n    pos = (NamedList) another.get(\"positions\");\n    //positions should be null, since we turned them off\n    assertNull(pos);\n    df = (Integer) another.get(\"df\");\n    assertNotNull(df);\n    assertTrue(df == 2);\n    val = (Double) another.get(\"tf-idf\");\n    assertTrue(\"tfIdf is null and it shouldn't be\", val != null);\n    assertTrue(val + \" does not equal: \" + 0.5, val == 0.5);\n    //Try out the other fields, too\n    vec = (NamedList) doc.get(\"test_offtv\");\n    assertNotNull(vec);\n    assertEquals(vec.size(), 2);\n    another = (NamedList) vec.get(\"anoth\");\n    offsets = (NamedList) another.get(\"offsets\");\n    assertNull(offsets);\n    pos = (NamedList) another.get(\"positions\");\n    //positions should be null, since we turned them off\n    assertNull(vec.toString(), pos);\n    df = (Integer) another.get(\"df\");\n    assertNotNull(df);\n    assertTrue(df == 2);\n    val = (Double) another.get(\"tf-idf\");\n    assertTrue(\"tfIdf is null and it shouldn't be\", val != null);\n    assertTrue(val + \" does not equal: \" + 0.5, val == 0.5);\n    vec = (NamedList) doc.get(\"test_basictv\");\n    assertNotNull(vec);\n    assertEquals(vec.size(), 2);\n    another = (NamedList) vec.get(\"anoth\");\n    offsets = (NamedList) another.get(\"offsets\");\n    assertNull(offsets);\n    pos = (NamedList) another.get(\"positions\");\n    assertNull(pos);\n    df = (Integer) another.get(\"df\");\n    assertNull(df);\n    val = (Double) another.get(\"tf-idf\");\n    assertNull(val);\n    val = (Double) another.get(\"tf\");\n    assertNull(val);\n    //Now validate we have error messages\n    NamedList warnings = (NamedList) termVectors.get(\"warnings\");\n    assertNotNull(warnings);\n    List<String> theList;\n    theList = (List<String>) warnings.get(\"noTermVectors\");\n    assertNotNull(theList);\n    assertEquals(theList.size(), 1);\n    theList = (List<String>) warnings.get(\"noPositions\");\n    assertNotNull(theList);\n    assertEquals(theList.size(), 2);\n    theList = (List<String>) warnings.get(\"noOffsets\");\n    assertNotNull(theList);\n    assertEquals(theList.size(), 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"537aa1aad31dab05c20bd62ddedb670d7d3a1aa6","date":1287154428,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testPerField().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testPerField().mjava","sourceNew":"  @Test\n  public void testPerField() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n        ,TermVectorParams.TF, \"true\", TermVectorParams.DF, \"true\", TermVectorParams.OFFSETS, \"true\", TermVectorParams.POSITIONS, \"true\", TermVectorParams.TF_IDF, \"true\"\n        ,TermVectorParams.FIELDS, \"test_basictv,test_notv,test_postv,test_offtv,test_posofftv\"\n        ,\"f.test_posofftv.\" + TermVectorParams.POSITIONS, \"false\"\n        ,\"f.test_offtv.\" + TermVectorParams.OFFSETS, \"false\"\n        ,\"f.test_basictv.\" + TermVectorParams.DF, \"false\"\n        ,\"f.test_basictv.\" + TermVectorParams.TF, \"false\"\n        ,\"f.test_basictv.\" + TermVectorParams.TF_IDF, \"false\"\n        )\n    ,\"/termVectors/doc-0/test_basictv=={'anoth':{},'titl':{}}\"\n    ,\"/termVectors/doc-0/test_postv/anoth=={'tf':1, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n    ,\"/termVectors/doc-0/test_offtv/anoth=={'tf':1, 'df':2, 'tf-idf':0.5}\"\n    ,\"/termVectors/warnings=={ 'noTermVectors':['test_notv'], 'noPositions':['test_basictv', 'test_offtv'], 'noOffsets':['test_basictv', 'test_postv']}\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testPerField() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent tvComp = core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.FIELDS, \"test_basictv,test_notv,test_postv,test_offtv,test_posofftv\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorParams.TF_IDF, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n    //per field\n    params.add(\"f.test_posofftv.\" + TermVectorParams.POSITIONS, \"false\");\n    params.add(\"f.test_offtv.\" + TermVectorParams.OFFSETS, \"false\");\n    params.add(\"f.test_basictv.\" + TermVectorParams.DF, \"false\");\n    params.add(\"f.test_basictv.\" + TermVectorParams.TF, \"false\");\n    params.add(\"f.test_basictv.\" + TermVectorParams.TF_IDF, \"false\");\n    SolrRequestHandler handler = core.getRequestHandler(\"tvrh\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    NamedList termVectors = (NamedList) values.get(TermVectorComponent.TERM_VECTORS);\n    assertTrue(\"termVectors is null and it shouldn't be\", termVectors != null);\n    if (VERBOSE) System.out.println(\"TVs: \" + termVectors);\n    NamedList doc = (NamedList) termVectors.get(\"doc-0\");\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    assertEquals(doc.size(), 5);\n    NamedList vec;\n    NamedList another;\n    NamedList offsets;\n    NamedList pos;\n    Integer df;\n    Double val;\n    vec = (NamedList) doc.get(\"test_posofftv\");\n    assertNotNull(vec);\n    assertEquals(vec.size(), 2);\n    another = (NamedList) vec.get(\"anoth\");\n    offsets = (NamedList) another.get(\"offsets\");\n    assertNotNull(offsets);\n    assertTrue(offsets.size() > 0);\n    pos = (NamedList) another.get(\"positions\");\n    //positions should be null, since we turned them off\n    assertNull(pos);\n    df = (Integer) another.get(\"df\");\n    assertNotNull(df);\n    assertTrue(df == 2);\n    val = (Double) another.get(\"tf-idf\");\n    assertTrue(\"tfIdf is null and it shouldn't be\", val != null);\n    assertTrue(val + \" does not equal: \" + 0.5, val == 0.5);\n    //Try out the other fields, too\n    vec = (NamedList) doc.get(\"test_offtv\");\n    assertNotNull(vec);\n    assertEquals(vec.size(), 2);\n    another = (NamedList) vec.get(\"anoth\");\n    offsets = (NamedList) another.get(\"offsets\");\n    assertNull(offsets);\n    pos = (NamedList) another.get(\"positions\");\n    //positions should be null, since we turned them off\n    assertNull(vec.toString(), pos);\n    df = (Integer) another.get(\"df\");\n    assertNotNull(df);\n    assertTrue(df == 2);\n    val = (Double) another.get(\"tf-idf\");\n    assertTrue(\"tfIdf is null and it shouldn't be\", val != null);\n    assertTrue(val + \" does not equal: \" + 0.5, val == 0.5);\n    vec = (NamedList) doc.get(\"test_basictv\");\n    assertNotNull(vec);\n    assertEquals(vec.size(), 2);\n    another = (NamedList) vec.get(\"anoth\");\n    offsets = (NamedList) another.get(\"offsets\");\n    assertNull(offsets);\n    pos = (NamedList) another.get(\"positions\");\n    assertNull(pos);\n    df = (Integer) another.get(\"df\");\n    assertNull(df);\n    val = (Double) another.get(\"tf-idf\");\n    assertNull(val);\n    val = (Double) another.get(\"tf\");\n    assertNull(val);\n    //Now validate we have error messages\n    NamedList warnings = (NamedList) termVectors.get(\"warnings\");\n    assertNotNull(warnings);\n    List<String> theList;\n    theList = (List<String>) warnings.get(\"noTermVectors\");\n    assertNotNull(theList);\n    assertEquals(theList.size(), 1);\n    theList = (List<String>) warnings.get(\"noPositions\");\n    assertNotNull(theList);\n    assertEquals(theList.size(), 2);\n    theList = (List<String>) warnings.get(\"noOffsets\");\n    assertNotNull(theList);\n    assertEquals(theList.size(), 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testPerField().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testPerField().mjava","sourceNew":"  @Test\n  public void testPerField() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n        ,TermVectorParams.TF, \"true\", TermVectorParams.DF, \"true\", TermVectorParams.OFFSETS, \"true\", TermVectorParams.POSITIONS, \"true\", TermVectorParams.TF_IDF, \"true\"\n        ,TermVectorParams.FIELDS, \"test_basictv,test_notv,test_postv,test_offtv,test_posofftv\"\n        ,\"f.test_posofftv.\" + TermVectorParams.POSITIONS, \"false\"\n        ,\"f.test_offtv.\" + TermVectorParams.OFFSETS, \"false\"\n        ,\"f.test_basictv.\" + TermVectorParams.DF, \"false\"\n        ,\"f.test_basictv.\" + TermVectorParams.TF, \"false\"\n        ,\"f.test_basictv.\" + TermVectorParams.TF_IDF, \"false\"\n        )\n    ,\"/termVectors/doc-0/test_basictv=={'anoth':{},'titl':{}}\"\n    ,\"/termVectors/doc-0/test_postv/anoth=={'tf':1, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n    ,\"/termVectors/doc-0/test_offtv/anoth=={'tf':1, 'df':2, 'tf-idf':0.5}\"\n    ,\"/termVectors/warnings=={ 'noTermVectors':['test_notv'], 'noPositions':['test_basictv', 'test_offtv'], 'noOffsets':['test_basictv', 'test_postv']}\"\n    );\n  }\n\n","sourceOld":"  /*\n<field name=\"test_basictv\" type=\"text\" termVectors=\"true\"/>\n   <field name=\"test_notv\" type=\"text\" termVectors=\"false\"/>\n   <field name=\"test_postv\" type=\"text\" termVectors=\"true\" termPositions=\"true\"/>\n   <field name=\"test_offtv\" type=\"text\" termVectors=\"true\" termOffsets=\"true\"/>\n   <field name=\"test_posofftv\" type=\"text\" termVectors=\"true\"\n     termPositions=\"true\" termOffsets=\"true\"/>\n   */\n  @Test\n  public void testPerField() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent tvComp = core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.FIELDS, \"test_basictv,test_notv,test_postv,test_offtv,test_posofftv\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorParams.TF_IDF, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n    //per field\n    params.add(\"f.test_posofftv.\" + TermVectorParams.POSITIONS, \"false\");\n    params.add(\"f.test_offtv.\" + TermVectorParams.OFFSETS, \"false\");\n    params.add(\"f.test_basictv.\" + TermVectorParams.DF, \"false\");\n    params.add(\"f.test_basictv.\" + TermVectorParams.TF, \"false\");\n    params.add(\"f.test_basictv.\" + TermVectorParams.TF_IDF, \"false\");\n    SolrRequestHandler handler = core.getRequestHandler(\"tvrh\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    NamedList termVectors = (NamedList) values.get(TermVectorComponent.TERM_VECTORS);\n    assertTrue(\"termVectors is null and it shouldn't be\", termVectors != null);\n    if (VERBOSE) System.out.println(\"TVs: \" + termVectors);\n    NamedList doc = (NamedList) termVectors.get(\"doc-0\");\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    assertEquals(doc.size(), 5);\n    NamedList vec;\n    NamedList another;\n    NamedList offsets;\n    NamedList pos;\n    Integer df;\n    Double val;\n    vec = (NamedList) doc.get(\"test_posofftv\");\n    assertNotNull(vec);\n    assertEquals(vec.size(), 2);\n    another = (NamedList) vec.get(\"anoth\");\n    offsets = (NamedList) another.get(\"offsets\");\n    assertNotNull(offsets);\n    assertTrue(offsets.size() > 0);\n    pos = (NamedList) another.get(\"positions\");\n    //positions should be null, since we turned them off\n    assertNull(pos);\n    df = (Integer) another.get(\"df\");\n    assertNotNull(df);\n    assertTrue(df == 2);\n    val = (Double) another.get(\"tf-idf\");\n    assertTrue(\"tfIdf is null and it shouldn't be\", val != null);\n    assertTrue(val + \" does not equal: \" + 0.5, val == 0.5);\n    //Try out the other fields, too\n    vec = (NamedList) doc.get(\"test_offtv\");\n    assertNotNull(vec);\n    assertEquals(vec.size(), 2);\n    another = (NamedList) vec.get(\"anoth\");\n    offsets = (NamedList) another.get(\"offsets\");\n    assertNull(offsets);\n    pos = (NamedList) another.get(\"positions\");\n    //positions should be null, since we turned them off\n    assertNull(vec.toString(), pos);\n    df = (Integer) another.get(\"df\");\n    assertNotNull(df);\n    assertTrue(df == 2);\n    val = (Double) another.get(\"tf-idf\");\n    assertTrue(\"tfIdf is null and it shouldn't be\", val != null);\n    assertTrue(val + \" does not equal: \" + 0.5, val == 0.5);\n    vec = (NamedList) doc.get(\"test_basictv\");\n    assertNotNull(vec);\n    assertEquals(vec.size(), 2);\n    another = (NamedList) vec.get(\"anoth\");\n    offsets = (NamedList) another.get(\"offsets\");\n    assertNull(offsets);\n    pos = (NamedList) another.get(\"positions\");\n    assertNull(pos);\n    df = (Integer) another.get(\"df\");\n    assertNull(df);\n    val = (Double) another.get(\"tf-idf\");\n    assertNull(val);\n    val = (Double) another.get(\"tf\");\n    assertNull(val);\n    //Now validate we have error messages\n    NamedList warnings = (NamedList) termVectors.get(\"warnings\");\n    assertNotNull(warnings);\n    List<String> theList;\n    theList = (List<String>) warnings.get(\"noTermVectors\");\n    assertNotNull(theList);\n    assertEquals(theList.size(), 1);\n    theList = (List<String>) warnings.get(\"noPositions\");\n    assertNotNull(theList);\n    assertEquals(theList.size(), 2);\n    theList = (List<String>) warnings.get(\"noOffsets\");\n    assertNotNull(theList);\n    assertEquals(theList.size(), 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testPerField().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testPerField().mjava","sourceNew":"  @Test\n  public void testPerField() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n        ,TermVectorParams.TF, \"true\", TermVectorParams.DF, \"true\", TermVectorParams.OFFSETS, \"true\", TermVectorParams.POSITIONS, \"true\", TermVectorParams.TF_IDF, \"true\"\n        ,TermVectorParams.FIELDS, \"test_basictv,test_notv,test_postv,test_offtv,test_posofftv\"\n        ,\"f.test_posofftv.\" + TermVectorParams.POSITIONS, \"false\"\n        ,\"f.test_offtv.\" + TermVectorParams.OFFSETS, \"false\"\n        ,\"f.test_basictv.\" + TermVectorParams.DF, \"false\"\n        ,\"f.test_basictv.\" + TermVectorParams.TF, \"false\"\n        ,\"f.test_basictv.\" + TermVectorParams.TF_IDF, \"false\"\n        )\n    ,\"/termVectors/doc-0/test_basictv=={'anoth':{},'titl':{}}\"\n    ,\"/termVectors/doc-0/test_postv/anoth=={'tf':1, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n    ,\"/termVectors/doc-0/test_offtv/anoth=={'tf':1, 'df':2, 'tf-idf':0.5}\"\n    ,\"/termVectors/warnings=={ 'noTermVectors':['test_notv'], 'noPositions':['test_basictv', 'test_offtv'], 'noOffsets':['test_basictv', 'test_postv']}\"\n    );\n  }\n\n","sourceOld":"  /*\n<field name=\"test_basictv\" type=\"text\" termVectors=\"true\"/>\n   <field name=\"test_notv\" type=\"text\" termVectors=\"false\"/>\n   <field name=\"test_postv\" type=\"text\" termVectors=\"true\" termPositions=\"true\"/>\n   <field name=\"test_offtv\" type=\"text\" termVectors=\"true\" termOffsets=\"true\"/>\n   <field name=\"test_posofftv\" type=\"text\" termVectors=\"true\"\n     termPositions=\"true\" termOffsets=\"true\"/>\n   */\n  @Test\n  public void testPerField() throws Exception {\n    SolrCore core = h.getCore();\n    SearchComponent tvComp = core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.FIELDS, \"test_basictv,test_notv,test_postv,test_offtv,test_posofftv\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorParams.TF_IDF, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n    //per field\n    params.add(\"f.test_posofftv.\" + TermVectorParams.POSITIONS, \"false\");\n    params.add(\"f.test_offtv.\" + TermVectorParams.OFFSETS, \"false\");\n    params.add(\"f.test_basictv.\" + TermVectorParams.DF, \"false\");\n    params.add(\"f.test_basictv.\" + TermVectorParams.TF, \"false\");\n    params.add(\"f.test_basictv.\" + TermVectorParams.TF_IDF, \"false\");\n    SolrRequestHandler handler = core.getRequestHandler(\"tvrh\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    NamedList values = rsp.getValues();\n    NamedList termVectors = (NamedList) values.get(TermVectorComponent.TERM_VECTORS);\n    assertTrue(\"termVectors is null and it shouldn't be\", termVectors != null);\n    if (VERBOSE) System.out.println(\"TVs: \" + termVectors);\n    NamedList doc = (NamedList) termVectors.get(\"doc-0\");\n    assertTrue(\"doc is null and it shouldn't be\", doc != null);\n    assertEquals(doc.size(), 5);\n    NamedList vec;\n    NamedList another;\n    NamedList offsets;\n    NamedList pos;\n    Integer df;\n    Double val;\n    vec = (NamedList) doc.get(\"test_posofftv\");\n    assertNotNull(vec);\n    assertEquals(vec.size(), 2);\n    another = (NamedList) vec.get(\"anoth\");\n    offsets = (NamedList) another.get(\"offsets\");\n    assertNotNull(offsets);\n    assertTrue(offsets.size() > 0);\n    pos = (NamedList) another.get(\"positions\");\n    //positions should be null, since we turned them off\n    assertNull(pos);\n    df = (Integer) another.get(\"df\");\n    assertNotNull(df);\n    assertTrue(df == 2);\n    val = (Double) another.get(\"tf-idf\");\n    assertTrue(\"tfIdf is null and it shouldn't be\", val != null);\n    assertTrue(val + \" does not equal: \" + 0.5, val == 0.5);\n    //Try out the other fields, too\n    vec = (NamedList) doc.get(\"test_offtv\");\n    assertNotNull(vec);\n    assertEquals(vec.size(), 2);\n    another = (NamedList) vec.get(\"anoth\");\n    offsets = (NamedList) another.get(\"offsets\");\n    assertNull(offsets);\n    pos = (NamedList) another.get(\"positions\");\n    //positions should be null, since we turned them off\n    assertNull(vec.toString(), pos);\n    df = (Integer) another.get(\"df\");\n    assertNotNull(df);\n    assertTrue(df == 2);\n    val = (Double) another.get(\"tf-idf\");\n    assertTrue(\"tfIdf is null and it shouldn't be\", val != null);\n    assertTrue(val + \" does not equal: \" + 0.5, val == 0.5);\n    vec = (NamedList) doc.get(\"test_basictv\");\n    assertNotNull(vec);\n    assertEquals(vec.size(), 2);\n    another = (NamedList) vec.get(\"anoth\");\n    offsets = (NamedList) another.get(\"offsets\");\n    assertNull(offsets);\n    pos = (NamedList) another.get(\"positions\");\n    assertNull(pos);\n    df = (Integer) another.get(\"df\");\n    assertNull(df);\n    val = (Double) another.get(\"tf-idf\");\n    assertNull(val);\n    val = (Double) another.get(\"tf\");\n    assertNull(val);\n    //Now validate we have error messages\n    NamedList warnings = (NamedList) termVectors.get(\"warnings\");\n    assertNotNull(warnings);\n    List<String> theList;\n    theList = (List<String>) warnings.get(\"noTermVectors\");\n    assertNotNull(theList);\n    assertEquals(theList.size(), 1);\n    theList = (List<String>) warnings.get(\"noPositions\");\n    assertNotNull(theList);\n    assertEquals(theList.size(), 2);\n    theList = (List<String>) warnings.get(\"noOffsets\");\n    assertNotNull(theList);\n    assertEquals(theList.size(), 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testPerField().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testPerField().mjava","sourceNew":"  @Test\n  public void testPerField() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n        ,TermVectorParams.TF, \"true\", TermVectorParams.DF, \"true\", TermVectorParams.OFFSETS, \"true\", TermVectorParams.POSITIONS, \"true\", TermVectorParams.TF_IDF, \"true\"\n        ,TermVectorParams.FIELDS, \"test_basictv,test_notv,test_postv,test_offtv,test_posofftv\"\n        ,\"f.test_posofftv.\" + TermVectorParams.POSITIONS, \"false\"\n        ,\"f.test_offtv.\" + TermVectorParams.OFFSETS, \"false\"\n        ,\"f.test_basictv.\" + TermVectorParams.DF, \"false\"\n        ,\"f.test_basictv.\" + TermVectorParams.TF, \"false\"\n        ,\"f.test_basictv.\" + TermVectorParams.TF_IDF, \"false\"\n        )\n    ,\"/termVectors/doc-0/test_basictv=={'anoth':{},'titl':{}}\"\n    ,\"/termVectors/doc-0/test_postv/anoth=={'tf':1, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n    ,\"/termVectors/doc-0/test_offtv/anoth=={'tf':1, 'df':2, 'tf-idf':0.5}\"\n    ,\"/termVectors/warnings=={ 'noTermVectors':['test_notv'], 'noPositions':['test_basictv', 'test_offtv'], 'noOffsets':['test_basictv', 'test_postv']}\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testPerField() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n        ,TermVectorParams.TF, \"true\", TermVectorParams.DF, \"true\", TermVectorParams.OFFSETS, \"true\", TermVectorParams.POSITIONS, \"true\", TermVectorParams.TF_IDF, \"true\"\n        ,TermVectorParams.FIELDS, \"test_basictv,test_notv,test_postv,test_offtv,test_posofftv\"\n        ,\"f.test_posofftv.\" + TermVectorParams.POSITIONS, \"false\"\n        ,\"f.test_offtv.\" + TermVectorParams.OFFSETS, \"false\"\n        ,\"f.test_basictv.\" + TermVectorParams.DF, \"false\"\n        ,\"f.test_basictv.\" + TermVectorParams.TF, \"false\"\n        ,\"f.test_basictv.\" + TermVectorParams.TF_IDF, \"false\"\n        )\n    ,\"/termVectors/doc-0/test_basictv=={'anoth':{},'titl':{}}\"\n    ,\"/termVectors/doc-0/test_postv/anoth=={'tf':1, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n    ,\"/termVectors/doc-0/test_offtv/anoth=={'tf':1, 'df':2, 'tf-idf':0.5}\"\n    ,\"/termVectors/warnings=={ 'noTermVectors':['test_notv'], 'noPositions':['test_basictv', 'test_offtv'], 'noOffsets':['test_basictv', 'test_postv']}\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testPerField().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testPerField().mjava","sourceNew":"  @Test\n  public void testPerField() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n        ,TermVectorParams.TF, \"true\", TermVectorParams.DF, \"true\", TermVectorParams.OFFSETS, \"true\", TermVectorParams.POSITIONS, \"true\", TermVectorParams.TF_IDF, \"true\"\n        ,TermVectorParams.FIELDS, \"test_basictv,test_notv,test_postv,test_offtv,test_posofftv\"\n        ,\"f.test_posofftv.\" + TermVectorParams.POSITIONS, \"false\"\n        ,\"f.test_offtv.\" + TermVectorParams.OFFSETS, \"false\"\n        ,\"f.test_basictv.\" + TermVectorParams.DF, \"false\"\n        ,\"f.test_basictv.\" + TermVectorParams.TF, \"false\"\n        ,\"f.test_basictv.\" + TermVectorParams.TF_IDF, \"false\"\n        )\n    ,\"/termVectors/doc-0/test_basictv=={'anoth':{},'titl':{}}\"\n    ,\"/termVectors/doc-0/test_postv/anoth=={'tf':1, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n    ,\"/termVectors/doc-0/test_offtv/anoth=={'tf':1, 'df':2, 'tf-idf':0.5}\"\n    ,\"/termVectors/warnings=={ 'noTermVectors':['test_notv'], 'noPositions':['test_basictv', 'test_offtv'], 'noOffsets':['test_basictv', 'test_postv']}\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testPerField() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n        ,TermVectorParams.TF, \"true\", TermVectorParams.DF, \"true\", TermVectorParams.OFFSETS, \"true\", TermVectorParams.POSITIONS, \"true\", TermVectorParams.TF_IDF, \"true\"\n        ,TermVectorParams.FIELDS, \"test_basictv,test_notv,test_postv,test_offtv,test_posofftv\"\n        ,\"f.test_posofftv.\" + TermVectorParams.POSITIONS, \"false\"\n        ,\"f.test_offtv.\" + TermVectorParams.OFFSETS, \"false\"\n        ,\"f.test_basictv.\" + TermVectorParams.DF, \"false\"\n        ,\"f.test_basictv.\" + TermVectorParams.TF, \"false\"\n        ,\"f.test_basictv.\" + TermVectorParams.TF_IDF, \"false\"\n        )\n    ,\"/termVectors/doc-0/test_basictv=={'anoth':{},'titl':{}}\"\n    ,\"/termVectors/doc-0/test_postv/anoth=={'tf':1, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n    ,\"/termVectors/doc-0/test_offtv/anoth=={'tf':1, 'df':2, 'tf-idf':0.5}\"\n    ,\"/termVectors/warnings=={ 'noTermVectors':['test_notv'], 'noPositions':['test_basictv', 'test_offtv'], 'noOffsets':['test_basictv', 'test_postv']}\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testPerField().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testPerField().mjava","sourceNew":"  @Test\n  public void testPerField() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n        ,TermVectorParams.TF, \"true\", TermVectorParams.DF, \"true\", TermVectorParams.OFFSETS, \"true\", TermVectorParams.POSITIONS, \"true\", TermVectorParams.TF_IDF, \"true\"\n        ,TermVectorParams.FIELDS, \"test_basictv,test_notv,test_postv,test_offtv,test_posofftv\"\n        ,\"f.test_posofftv.\" + TermVectorParams.POSITIONS, \"false\"\n        ,\"f.test_offtv.\" + TermVectorParams.OFFSETS, \"false\"\n        ,\"f.test_basictv.\" + TermVectorParams.DF, \"false\"\n        ,\"f.test_basictv.\" + TermVectorParams.TF, \"false\"\n        ,\"f.test_basictv.\" + TermVectorParams.TF_IDF, \"false\"\n        )\n    ,\"/termVectors/doc-0/test_basictv=={'anoth':{},'titl':{}}\"\n    ,\"/termVectors/doc-0/test_postv/anoth=={'tf':1, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n    ,\"/termVectors/doc-0/test_offtv/anoth=={'tf':1, 'df':2, 'tf-idf':0.5}\"\n    ,\"/termVectors/warnings=={ 'noTermVectors':['test_notv'], 'noPositions':['test_basictv', 'test_offtv'], 'noOffsets':['test_basictv', 'test_postv']}\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testPerField() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\"\n        ,TermVectorParams.TF, \"true\", TermVectorParams.DF, \"true\", TermVectorParams.OFFSETS, \"true\", TermVectorParams.POSITIONS, \"true\", TermVectorParams.TF_IDF, \"true\"\n        ,TermVectorParams.FIELDS, \"test_basictv,test_notv,test_postv,test_offtv,test_posofftv\"\n        ,\"f.test_posofftv.\" + TermVectorParams.POSITIONS, \"false\"\n        ,\"f.test_offtv.\" + TermVectorParams.OFFSETS, \"false\"\n        ,\"f.test_basictv.\" + TermVectorParams.DF, \"false\"\n        ,\"f.test_basictv.\" + TermVectorParams.TF, \"false\"\n        ,\"f.test_basictv.\" + TermVectorParams.TF_IDF, \"false\"\n        )\n    ,\"/termVectors/doc-0/test_basictv=={'anoth':{},'titl':{}}\"\n    ,\"/termVectors/doc-0/test_postv/anoth=={'tf':1, 'positions':{'position':1}, 'df':2, 'tf-idf':0.5}\"\n    ,\"/termVectors/doc-0/test_offtv/anoth=={'tf':1, 'df':2, 'tf-idf':0.5}\"\n    ,\"/termVectors/warnings=={ 'noTermVectors':['test_notv'], 'noPositions':['test_basictv', 'test_offtv'], 'noOffsets':['test_basictv', 'test_postv']}\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["537aa1aad31dab05c20bd62ddedb670d7d3a1aa6"],"c26f00b574427b55127e869b935845554afde1fa":["537aa1aad31dab05c20bd62ddedb670d7d3a1aa6","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"537aa1aad31dab05c20bd62ddedb670d7d3a1aa6":["4eacd50421fb83ad5dbe90a00984962e7ec0df7c"],"4eacd50421fb83ad5dbe90a00984962e7ec0df7c":["9d5cccaae6cc86d750cac2aff57b2748de06c0e7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["537aa1aad31dab05c20bd62ddedb670d7d3a1aa6"],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9d5cccaae6cc86d750cac2aff57b2748de06c0e7"],"9d5cccaae6cc86d750cac2aff57b2748de06c0e7":["df18b2465217a237531d0d944c22ea4a4316411e"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","537aa1aad31dab05c20bd62ddedb670d7d3a1aa6"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["9d5cccaae6cc86d750cac2aff57b2748de06c0e7","537aa1aad31dab05c20bd62ddedb670d7d3a1aa6"],"df18b2465217a237531d0d944c22ea4a4316411e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"537aa1aad31dab05c20bd62ddedb670d7d3a1aa6":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"4eacd50421fb83ad5dbe90a00984962e7ec0df7c":["537aa1aad31dab05c20bd62ddedb670d7d3a1aa6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5f4e87790277826a2aea119328600dfb07761f32","df18b2465217a237531d0d944c22ea4a4316411e"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"9d5cccaae6cc86d750cac2aff57b2748de06c0e7":["4eacd50421fb83ad5dbe90a00984962e7ec0df7c","5f4e87790277826a2aea119328600dfb07761f32","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":[],"df18b2465217a237531d0d944c22ea4a4316411e":["9d5cccaae6cc86d750cac2aff57b2748de06c0e7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}