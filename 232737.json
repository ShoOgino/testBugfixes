{"path":"lucene/core/src/java/org/apache/lucene/document/Field#tokenStream(Analyzer,TokenStream).mjava","commits":[{"id":"090a3a6b4b32e55f8fe1eab3359dbe628a208a0c","date":1399054058,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#tokenStream(Analyzer,TokenStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Field#tokenStream(Analyzer).mjava","sourceNew":"  @Override\n  public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) throws IOException {\n    if (!fieldType().indexed()) {\n      return null;\n    }\n\n    final NumericType numericType = fieldType().numericType();\n    if (numericType != null) {\n      if (!(reuse instanceof NumericTokenStream && ((NumericTokenStream)reuse).getPrecisionStep() == type.numericPrecisionStep())) {\n        // lazy init the TokenStream as it is heavy to instantiate\n        // (attributes,...) if not needed (stored field loading)\n        reuse = new NumericTokenStream(type.numericPrecisionStep());\n      }\n      final NumericTokenStream nts = (NumericTokenStream) reuse;\n      // initialize value in TokenStream\n      final Number val = (Number) fieldsData;\n      switch (numericType) {\n      case INT:\n        nts.setIntValue(val.intValue());\n        break;\n      case LONG:\n        nts.setLongValue(val.longValue());\n        break;\n      case FLOAT:\n        nts.setFloatValue(val.floatValue());\n        break;\n      case DOUBLE:\n        nts.setDoubleValue(val.doubleValue());\n        break;\n      default:\n        throw new AssertionError(\"Should never get here\");\n      }\n      return reuse;\n    }\n\n    if (!fieldType().tokenized()) {\n      if (stringValue() == null) {\n        throw new IllegalArgumentException(\"Non-Tokenized Fields must have a String value\");\n      }\n      if (!(reuse instanceof StringTokenStream)) {\n        // lazy init the TokenStream as it is heavy to instantiate\n        // (attributes,...) if not needed (stored field loading)\n        reuse = new StringTokenStream();\n      }\n      ((StringTokenStream) reuse).setValue(stringValue());\n      return reuse;\n    }\n\n    if (tokenStream != null) {\n      return tokenStream;\n    } else if (readerValue() != null) {\n      return analyzer.tokenStream(name(), readerValue());\n    } else if (stringValue() != null) {\n      return analyzer.tokenStream(name(), stringValue());\n    }\n\n    throw new IllegalArgumentException(\"Field must have either TokenStream, String, Reader or Number value; got \" + this);\n  }\n\n","sourceOld":"  @Override\n  public TokenStream tokenStream(Analyzer analyzer) throws IOException {\n    if (!fieldType().indexed()) {\n      return null;\n    }\n\n    final NumericType numericType = fieldType().numericType();\n    if (numericType != null) {\n      if (!(internalTokenStream instanceof NumericTokenStream)) {\n        // lazy init the TokenStream as it is heavy to instantiate\n        // (attributes,...) if not needed (stored field loading)\n        internalTokenStream = new NumericTokenStream(type.numericPrecisionStep());\n      }\n      final NumericTokenStream nts = (NumericTokenStream) internalTokenStream;\n      // initialize value in TokenStream\n      final Number val = (Number) fieldsData;\n      switch (numericType) {\n      case INT:\n        nts.setIntValue(val.intValue());\n        break;\n      case LONG:\n        nts.setLongValue(val.longValue());\n        break;\n      case FLOAT:\n        nts.setFloatValue(val.floatValue());\n        break;\n      case DOUBLE:\n        nts.setDoubleValue(val.doubleValue());\n        break;\n      default:\n        throw new AssertionError(\"Should never get here\");\n      }\n      return internalTokenStream;\n    }\n\n    if (!fieldType().tokenized()) {\n      if (stringValue() == null) {\n        throw new IllegalArgumentException(\"Non-Tokenized Fields must have a String value\");\n      }\n      if (!(internalTokenStream instanceof StringTokenStream)) {\n        // lazy init the TokenStream as it is heavy to instantiate\n        // (attributes,...) if not needed (stored field loading)\n        internalTokenStream = new StringTokenStream();\n      }\n      ((StringTokenStream) internalTokenStream).setValue(stringValue());\n      return internalTokenStream;\n    }\n\n    if (tokenStream != null) {\n      return tokenStream;\n    } else if (readerValue() != null) {\n      return analyzer.tokenStream(name(), readerValue());\n    } else if (stringValue() != null) {\n      return analyzer.tokenStream(name(), stringValue());\n    }\n\n    throw new IllegalArgumentException(\"Field must have either TokenStream, String, Reader or Number value; got \" + this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3184874f7f3aca850248483485b4995343066875","date":1413876758,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#tokenStream(Analyzer,TokenStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Field#tokenStream(Analyzer,TokenStream).mjava","sourceNew":"  @Override\n  public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) throws IOException {\n    if (fieldType().indexOptions() == null) {\n      // Not indexed\n      return null;\n    }\n\n    final NumericType numericType = fieldType().numericType();\n    if (numericType != null) {\n      if (!(reuse instanceof NumericTokenStream && ((NumericTokenStream)reuse).getPrecisionStep() == type.numericPrecisionStep())) {\n        // lazy init the TokenStream as it is heavy to instantiate\n        // (attributes,...) if not needed (stored field loading)\n        reuse = new NumericTokenStream(type.numericPrecisionStep());\n      }\n      final NumericTokenStream nts = (NumericTokenStream) reuse;\n      // initialize value in TokenStream\n      final Number val = (Number) fieldsData;\n      switch (numericType) {\n      case INT:\n        nts.setIntValue(val.intValue());\n        break;\n      case LONG:\n        nts.setLongValue(val.longValue());\n        break;\n      case FLOAT:\n        nts.setFloatValue(val.floatValue());\n        break;\n      case DOUBLE:\n        nts.setDoubleValue(val.doubleValue());\n        break;\n      default:\n        throw new AssertionError(\"Should never get here\");\n      }\n      return reuse;\n    }\n\n    if (!fieldType().tokenized()) {\n      if (stringValue() == null) {\n        throw new IllegalArgumentException(\"Non-Tokenized Fields must have a String value\");\n      }\n      if (!(reuse instanceof StringTokenStream)) {\n        // lazy init the TokenStream as it is heavy to instantiate\n        // (attributes,...) if not needed (stored field loading)\n        reuse = new StringTokenStream();\n      }\n      ((StringTokenStream) reuse).setValue(stringValue());\n      return reuse;\n    }\n\n    if (tokenStream != null) {\n      return tokenStream;\n    } else if (readerValue() != null) {\n      return analyzer.tokenStream(name(), readerValue());\n    } else if (stringValue() != null) {\n      return analyzer.tokenStream(name(), stringValue());\n    }\n\n    throw new IllegalArgumentException(\"Field must have either TokenStream, String, Reader or Number value; got \" + this);\n  }\n\n","sourceOld":"  @Override\n  public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) throws IOException {\n    if (!fieldType().indexed()) {\n      return null;\n    }\n\n    final NumericType numericType = fieldType().numericType();\n    if (numericType != null) {\n      if (!(reuse instanceof NumericTokenStream && ((NumericTokenStream)reuse).getPrecisionStep() == type.numericPrecisionStep())) {\n        // lazy init the TokenStream as it is heavy to instantiate\n        // (attributes,...) if not needed (stored field loading)\n        reuse = new NumericTokenStream(type.numericPrecisionStep());\n      }\n      final NumericTokenStream nts = (NumericTokenStream) reuse;\n      // initialize value in TokenStream\n      final Number val = (Number) fieldsData;\n      switch (numericType) {\n      case INT:\n        nts.setIntValue(val.intValue());\n        break;\n      case LONG:\n        nts.setLongValue(val.longValue());\n        break;\n      case FLOAT:\n        nts.setFloatValue(val.floatValue());\n        break;\n      case DOUBLE:\n        nts.setDoubleValue(val.doubleValue());\n        break;\n      default:\n        throw new AssertionError(\"Should never get here\");\n      }\n      return reuse;\n    }\n\n    if (!fieldType().tokenized()) {\n      if (stringValue() == null) {\n        throw new IllegalArgumentException(\"Non-Tokenized Fields must have a String value\");\n      }\n      if (!(reuse instanceof StringTokenStream)) {\n        // lazy init the TokenStream as it is heavy to instantiate\n        // (attributes,...) if not needed (stored field loading)\n        reuse = new StringTokenStream();\n      }\n      ((StringTokenStream) reuse).setValue(stringValue());\n      return reuse;\n    }\n\n    if (tokenStream != null) {\n      return tokenStream;\n    } else if (readerValue() != null) {\n      return analyzer.tokenStream(name(), readerValue());\n    } else if (stringValue() != null) {\n      return analyzer.tokenStream(name(), stringValue());\n    }\n\n    throw new IllegalArgumentException(\"Field must have either TokenStream, String, Reader or Number value; got \" + this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#tokenStream(Analyzer,TokenStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Field#tokenStream(Analyzer,TokenStream).mjava","sourceNew":"  @Override\n  public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) throws IOException {\n    if (fieldType().indexOptions() == null) {\n      // Not indexed\n      return null;\n    }\n\n    final NumericType numericType = fieldType().numericType();\n    if (numericType != null) {\n      if (!(reuse instanceof NumericTokenStream && ((NumericTokenStream)reuse).getPrecisionStep() == type.numericPrecisionStep())) {\n        // lazy init the TokenStream as it is heavy to instantiate\n        // (attributes,...) if not needed (stored field loading)\n        reuse = new NumericTokenStream(type.numericPrecisionStep());\n      }\n      final NumericTokenStream nts = (NumericTokenStream) reuse;\n      // initialize value in TokenStream\n      final Number val = (Number) fieldsData;\n      switch (numericType) {\n      case INT:\n        nts.setIntValue(val.intValue());\n        break;\n      case LONG:\n        nts.setLongValue(val.longValue());\n        break;\n      case FLOAT:\n        nts.setFloatValue(val.floatValue());\n        break;\n      case DOUBLE:\n        nts.setDoubleValue(val.doubleValue());\n        break;\n      default:\n        throw new AssertionError(\"Should never get here\");\n      }\n      return reuse;\n    }\n\n    if (!fieldType().tokenized()) {\n      if (stringValue() == null) {\n        throw new IllegalArgumentException(\"Non-Tokenized Fields must have a String value\");\n      }\n      if (!(reuse instanceof StringTokenStream)) {\n        // lazy init the TokenStream as it is heavy to instantiate\n        // (attributes,...) if not needed (stored field loading)\n        reuse = new StringTokenStream();\n      }\n      ((StringTokenStream) reuse).setValue(stringValue());\n      return reuse;\n    }\n\n    if (tokenStream != null) {\n      return tokenStream;\n    } else if (readerValue() != null) {\n      return analyzer.tokenStream(name(), readerValue());\n    } else if (stringValue() != null) {\n      return analyzer.tokenStream(name(), stringValue());\n    }\n\n    throw new IllegalArgumentException(\"Field must have either TokenStream, String, Reader or Number value; got \" + this);\n  }\n\n","sourceOld":"  @Override\n  public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) throws IOException {\n    if (!fieldType().indexed()) {\n      return null;\n    }\n\n    final NumericType numericType = fieldType().numericType();\n    if (numericType != null) {\n      if (!(reuse instanceof NumericTokenStream && ((NumericTokenStream)reuse).getPrecisionStep() == type.numericPrecisionStep())) {\n        // lazy init the TokenStream as it is heavy to instantiate\n        // (attributes,...) if not needed (stored field loading)\n        reuse = new NumericTokenStream(type.numericPrecisionStep());\n      }\n      final NumericTokenStream nts = (NumericTokenStream) reuse;\n      // initialize value in TokenStream\n      final Number val = (Number) fieldsData;\n      switch (numericType) {\n      case INT:\n        nts.setIntValue(val.intValue());\n        break;\n      case LONG:\n        nts.setLongValue(val.longValue());\n        break;\n      case FLOAT:\n        nts.setFloatValue(val.floatValue());\n        break;\n      case DOUBLE:\n        nts.setDoubleValue(val.doubleValue());\n        break;\n      default:\n        throw new AssertionError(\"Should never get here\");\n      }\n      return reuse;\n    }\n\n    if (!fieldType().tokenized()) {\n      if (stringValue() == null) {\n        throw new IllegalArgumentException(\"Non-Tokenized Fields must have a String value\");\n      }\n      if (!(reuse instanceof StringTokenStream)) {\n        // lazy init the TokenStream as it is heavy to instantiate\n        // (attributes,...) if not needed (stored field loading)\n        reuse = new StringTokenStream();\n      }\n      ((StringTokenStream) reuse).setValue(stringValue());\n      return reuse;\n    }\n\n    if (tokenStream != null) {\n      return tokenStream;\n    } else if (readerValue() != null) {\n      return analyzer.tokenStream(name(), readerValue());\n    } else if (stringValue() != null) {\n      return analyzer.tokenStream(name(), stringValue());\n    }\n\n    throw new IllegalArgumentException(\"Field must have either TokenStream, String, Reader or Number value; got \" + this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#tokenStream(Analyzer,TokenStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Field#tokenStream(Analyzer,TokenStream).mjava","sourceNew":"  @Override\n  public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) throws IOException {\n    if (fieldType().indexOptions() == IndexOptions.NO) {\n      // Not indexed\n      return null;\n    }\n\n    final NumericType numericType = fieldType().numericType();\n    if (numericType != null) {\n      if (!(reuse instanceof NumericTokenStream && ((NumericTokenStream)reuse).getPrecisionStep() == type.numericPrecisionStep())) {\n        // lazy init the TokenStream as it is heavy to instantiate\n        // (attributes,...) if not needed (stored field loading)\n        reuse = new NumericTokenStream(type.numericPrecisionStep());\n      }\n      final NumericTokenStream nts = (NumericTokenStream) reuse;\n      // initialize value in TokenStream\n      final Number val = (Number) fieldsData;\n      switch (numericType) {\n      case INT:\n        nts.setIntValue(val.intValue());\n        break;\n      case LONG:\n        nts.setLongValue(val.longValue());\n        break;\n      case FLOAT:\n        nts.setFloatValue(val.floatValue());\n        break;\n      case DOUBLE:\n        nts.setDoubleValue(val.doubleValue());\n        break;\n      default:\n        throw new AssertionError(\"Should never get here\");\n      }\n      return reuse;\n    }\n\n    if (!fieldType().tokenized()) {\n      if (stringValue() == null) {\n        throw new IllegalArgumentException(\"Non-Tokenized Fields must have a String value\");\n      }\n      if (!(reuse instanceof StringTokenStream)) {\n        // lazy init the TokenStream as it is heavy to instantiate\n        // (attributes,...) if not needed (stored field loading)\n        reuse = new StringTokenStream();\n      }\n      ((StringTokenStream) reuse).setValue(stringValue());\n      return reuse;\n    }\n\n    if (tokenStream != null) {\n      return tokenStream;\n    } else if (readerValue() != null) {\n      return analyzer.tokenStream(name(), readerValue());\n    } else if (stringValue() != null) {\n      return analyzer.tokenStream(name(), stringValue());\n    }\n\n    throw new IllegalArgumentException(\"Field must have either TokenStream, String, Reader or Number value; got \" + this);\n  }\n\n","sourceOld":"  @Override\n  public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) throws IOException {\n    if (fieldType().indexOptions() == null) {\n      // Not indexed\n      return null;\n    }\n\n    final NumericType numericType = fieldType().numericType();\n    if (numericType != null) {\n      if (!(reuse instanceof NumericTokenStream && ((NumericTokenStream)reuse).getPrecisionStep() == type.numericPrecisionStep())) {\n        // lazy init the TokenStream as it is heavy to instantiate\n        // (attributes,...) if not needed (stored field loading)\n        reuse = new NumericTokenStream(type.numericPrecisionStep());\n      }\n      final NumericTokenStream nts = (NumericTokenStream) reuse;\n      // initialize value in TokenStream\n      final Number val = (Number) fieldsData;\n      switch (numericType) {\n      case INT:\n        nts.setIntValue(val.intValue());\n        break;\n      case LONG:\n        nts.setLongValue(val.longValue());\n        break;\n      case FLOAT:\n        nts.setFloatValue(val.floatValue());\n        break;\n      case DOUBLE:\n        nts.setDoubleValue(val.doubleValue());\n        break;\n      default:\n        throw new AssertionError(\"Should never get here\");\n      }\n      return reuse;\n    }\n\n    if (!fieldType().tokenized()) {\n      if (stringValue() == null) {\n        throw new IllegalArgumentException(\"Non-Tokenized Fields must have a String value\");\n      }\n      if (!(reuse instanceof StringTokenStream)) {\n        // lazy init the TokenStream as it is heavy to instantiate\n        // (attributes,...) if not needed (stored field loading)\n        reuse = new StringTokenStream();\n      }\n      ((StringTokenStream) reuse).setValue(stringValue());\n      return reuse;\n    }\n\n    if (tokenStream != null) {\n      return tokenStream;\n    } else if (readerValue() != null) {\n      return analyzer.tokenStream(name(), readerValue());\n    } else if (stringValue() != null) {\n      return analyzer.tokenStream(name(), stringValue());\n    }\n\n    throw new IllegalArgumentException(\"Field must have either TokenStream, String, Reader or Number value; got \" + this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95ce1375367b92d411a06175eab3915fe93c6bc","date":1414788502,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#tokenStream(Analyzer,TokenStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Field#tokenStream(Analyzer,TokenStream).mjava","sourceNew":"  @Override\n  public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) throws IOException {\n    if (fieldType().indexOptions() == IndexOptions.NONE) {\n      // Not indexed\n      return null;\n    }\n\n    final NumericType numericType = fieldType().numericType();\n    if (numericType != null) {\n      if (!(reuse instanceof NumericTokenStream && ((NumericTokenStream)reuse).getPrecisionStep() == type.numericPrecisionStep())) {\n        // lazy init the TokenStream as it is heavy to instantiate\n        // (attributes,...) if not needed (stored field loading)\n        reuse = new NumericTokenStream(type.numericPrecisionStep());\n      }\n      final NumericTokenStream nts = (NumericTokenStream) reuse;\n      // initialize value in TokenStream\n      final Number val = (Number) fieldsData;\n      switch (numericType) {\n      case INT:\n        nts.setIntValue(val.intValue());\n        break;\n      case LONG:\n        nts.setLongValue(val.longValue());\n        break;\n      case FLOAT:\n        nts.setFloatValue(val.floatValue());\n        break;\n      case DOUBLE:\n        nts.setDoubleValue(val.doubleValue());\n        break;\n      default:\n        throw new AssertionError(\"Should never get here\");\n      }\n      return reuse;\n    }\n\n    if (!fieldType().tokenized()) {\n      if (stringValue() == null) {\n        throw new IllegalArgumentException(\"Non-Tokenized Fields must have a String value\");\n      }\n      if (!(reuse instanceof StringTokenStream)) {\n        // lazy init the TokenStream as it is heavy to instantiate\n        // (attributes,...) if not needed (stored field loading)\n        reuse = new StringTokenStream();\n      }\n      ((StringTokenStream) reuse).setValue(stringValue());\n      return reuse;\n    }\n\n    if (tokenStream != null) {\n      return tokenStream;\n    } else if (readerValue() != null) {\n      return analyzer.tokenStream(name(), readerValue());\n    } else if (stringValue() != null) {\n      return analyzer.tokenStream(name(), stringValue());\n    }\n\n    throw new IllegalArgumentException(\"Field must have either TokenStream, String, Reader or Number value; got \" + this);\n  }\n\n","sourceOld":"  @Override\n  public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) throws IOException {\n    if (fieldType().indexOptions() == IndexOptions.NO) {\n      // Not indexed\n      return null;\n    }\n\n    final NumericType numericType = fieldType().numericType();\n    if (numericType != null) {\n      if (!(reuse instanceof NumericTokenStream && ((NumericTokenStream)reuse).getPrecisionStep() == type.numericPrecisionStep())) {\n        // lazy init the TokenStream as it is heavy to instantiate\n        // (attributes,...) if not needed (stored field loading)\n        reuse = new NumericTokenStream(type.numericPrecisionStep());\n      }\n      final NumericTokenStream nts = (NumericTokenStream) reuse;\n      // initialize value in TokenStream\n      final Number val = (Number) fieldsData;\n      switch (numericType) {\n      case INT:\n        nts.setIntValue(val.intValue());\n        break;\n      case LONG:\n        nts.setLongValue(val.longValue());\n        break;\n      case FLOAT:\n        nts.setFloatValue(val.floatValue());\n        break;\n      case DOUBLE:\n        nts.setDoubleValue(val.doubleValue());\n        break;\n      default:\n        throw new AssertionError(\"Should never get here\");\n      }\n      return reuse;\n    }\n\n    if (!fieldType().tokenized()) {\n      if (stringValue() == null) {\n        throw new IllegalArgumentException(\"Non-Tokenized Fields must have a String value\");\n      }\n      if (!(reuse instanceof StringTokenStream)) {\n        // lazy init the TokenStream as it is heavy to instantiate\n        // (attributes,...) if not needed (stored field loading)\n        reuse = new StringTokenStream();\n      }\n      ((StringTokenStream) reuse).setValue(stringValue());\n      return reuse;\n    }\n\n    if (tokenStream != null) {\n      return tokenStream;\n    } else if (readerValue() != null) {\n      return analyzer.tokenStream(name(), readerValue());\n    } else if (stringValue() != null) {\n      return analyzer.tokenStream(name(), stringValue());\n    }\n\n    throw new IllegalArgumentException(\"Field must have either TokenStream, String, Reader or Number value; got \" + this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"399d127639ae13222a8545b50e0ac545a6bcd2d7","date":1428704686,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#tokenStream(Analyzer,TokenStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Field#tokenStream(Analyzer,TokenStream).mjava","sourceNew":"  @Override\n  public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) throws IOException {\n    if (fieldType().indexOptions() == IndexOptions.NONE) {\n      // Not indexed\n      return null;\n    }\n\n    final NumericType numericType = fieldType().numericType();\n    if (numericType != null) {\n      if (!(reuse instanceof NumericTokenStream && ((NumericTokenStream)reuse).getPrecisionStep() == type.numericPrecisionStep())) {\n        // lazy init the TokenStream as it is heavy to instantiate\n        // (attributes,...) if not needed (stored field loading)\n        reuse = new NumericTokenStream(type.numericPrecisionStep());\n      }\n      final NumericTokenStream nts = (NumericTokenStream) reuse;\n      // initialize value in TokenStream\n      final Number val = (Number) fieldsData;\n      switch (numericType) {\n      case INT:\n        nts.setIntValue(val.intValue());\n        break;\n      case LONG:\n        nts.setLongValue(val.longValue());\n        break;\n      case FLOAT:\n        nts.setFloatValue(val.floatValue());\n        break;\n      case DOUBLE:\n        nts.setDoubleValue(val.doubleValue());\n        break;\n      default:\n        throw new AssertionError(\"Should never get here\");\n      }\n      return reuse;\n    }\n\n    if (!fieldType().tokenized()) {\n      if (stringValue() != null) {\n        if (!(reuse instanceof StringTokenStream)) {\n          // lazy init the TokenStream as it is heavy to instantiate\n          // (attributes,...) if not needed\n          reuse = new StringTokenStream();\n        }\n        ((StringTokenStream) reuse).setValue(stringValue());\n        return reuse;\n      } else if (binaryValue() != null) {\n        if (!(reuse instanceof BinaryTokenStream)) {\n          // lazy init the TokenStream as it is heavy to instantiate\n          // (attributes,...) if not needed\n          reuse = new BinaryTokenStream();\n        }\n        ((BinaryTokenStream) reuse).setValue(binaryValue());\n        return reuse;\n      } else {\n        throw new IllegalArgumentException(\"Non-Tokenized Fields must have a String value\");\n      }\n    }\n\n    if (tokenStream != null) {\n      return tokenStream;\n    } else if (readerValue() != null) {\n      return analyzer.tokenStream(name(), readerValue());\n    } else if (stringValue() != null) {\n      return analyzer.tokenStream(name(), stringValue());\n    }\n\n    throw new IllegalArgumentException(\"Field must have either TokenStream, String, Reader or Number value; got \" + this);\n  }\n\n","sourceOld":"  @Override\n  public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) throws IOException {\n    if (fieldType().indexOptions() == IndexOptions.NONE) {\n      // Not indexed\n      return null;\n    }\n\n    final NumericType numericType = fieldType().numericType();\n    if (numericType != null) {\n      if (!(reuse instanceof NumericTokenStream && ((NumericTokenStream)reuse).getPrecisionStep() == type.numericPrecisionStep())) {\n        // lazy init the TokenStream as it is heavy to instantiate\n        // (attributes,...) if not needed (stored field loading)\n        reuse = new NumericTokenStream(type.numericPrecisionStep());\n      }\n      final NumericTokenStream nts = (NumericTokenStream) reuse;\n      // initialize value in TokenStream\n      final Number val = (Number) fieldsData;\n      switch (numericType) {\n      case INT:\n        nts.setIntValue(val.intValue());\n        break;\n      case LONG:\n        nts.setLongValue(val.longValue());\n        break;\n      case FLOAT:\n        nts.setFloatValue(val.floatValue());\n        break;\n      case DOUBLE:\n        nts.setDoubleValue(val.doubleValue());\n        break;\n      default:\n        throw new AssertionError(\"Should never get here\");\n      }\n      return reuse;\n    }\n\n    if (!fieldType().tokenized()) {\n      if (stringValue() == null) {\n        throw new IllegalArgumentException(\"Non-Tokenized Fields must have a String value\");\n      }\n      if (!(reuse instanceof StringTokenStream)) {\n        // lazy init the TokenStream as it is heavy to instantiate\n        // (attributes,...) if not needed (stored field loading)\n        reuse = new StringTokenStream();\n      }\n      ((StringTokenStream) reuse).setValue(stringValue());\n      return reuse;\n    }\n\n    if (tokenStream != null) {\n      return tokenStream;\n    } else if (readerValue() != null) {\n      return analyzer.tokenStream(name(), readerValue());\n    } else if (stringValue() != null) {\n      return analyzer.tokenStream(name(), stringValue());\n    }\n\n    throw new IllegalArgumentException(\"Field must have either TokenStream, String, Reader or Number value; got \" + this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#tokenStream(Analyzer,TokenStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Field#tokenStream(Analyzer,TokenStream).mjava","sourceNew":"  @Override\n  public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) throws IOException {\n    if (fieldType().indexOptions() == IndexOptions.NONE) {\n      // Not indexed\n      return null;\n    }\n\n    final FieldType.LegacyNumericType numericType = fieldType().numericType();\n    if (numericType != null) {\n      if (!(reuse instanceof LegacyNumericTokenStream && ((LegacyNumericTokenStream)reuse).getPrecisionStep() == type.numericPrecisionStep())) {\n        // lazy init the TokenStream as it is heavy to instantiate\n        // (attributes,...) if not needed (stored field loading)\n        reuse = new LegacyNumericTokenStream(type.numericPrecisionStep());\n      }\n      final LegacyNumericTokenStream nts = (LegacyNumericTokenStream) reuse;\n      // initialize value in TokenStream\n      final Number val = (Number) fieldsData;\n      switch (numericType) {\n      case INT:\n        nts.setIntValue(val.intValue());\n        break;\n      case LONG:\n        nts.setLongValue(val.longValue());\n        break;\n      case FLOAT:\n        nts.setFloatValue(val.floatValue());\n        break;\n      case DOUBLE:\n        nts.setDoubleValue(val.doubleValue());\n        break;\n      default:\n        throw new AssertionError(\"Should never get here\");\n      }\n      return reuse;\n    }\n\n    if (!fieldType().tokenized()) {\n      if (stringValue() != null) {\n        if (!(reuse instanceof StringTokenStream)) {\n          // lazy init the TokenStream as it is heavy to instantiate\n          // (attributes,...) if not needed\n          reuse = new StringTokenStream();\n        }\n        ((StringTokenStream) reuse).setValue(stringValue());\n        return reuse;\n      } else if (binaryValue() != null) {\n        if (!(reuse instanceof BinaryTokenStream)) {\n          // lazy init the TokenStream as it is heavy to instantiate\n          // (attributes,...) if not needed\n          reuse = new BinaryTokenStream();\n        }\n        ((BinaryTokenStream) reuse).setValue(binaryValue());\n        return reuse;\n      } else {\n        throw new IllegalArgumentException(\"Non-Tokenized Fields must have a String value\");\n      }\n    }\n\n    if (tokenStream != null) {\n      return tokenStream;\n    } else if (readerValue() != null) {\n      return analyzer.tokenStream(name(), readerValue());\n    } else if (stringValue() != null) {\n      return analyzer.tokenStream(name(), stringValue());\n    }\n\n    throw new IllegalArgumentException(\"Field must have either TokenStream, String, Reader or Number value; got \" + this);\n  }\n\n","sourceOld":"  @Override\n  public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) throws IOException {\n    if (fieldType().indexOptions() == IndexOptions.NONE) {\n      // Not indexed\n      return null;\n    }\n\n    final NumericType numericType = fieldType().numericType();\n    if (numericType != null) {\n      if (!(reuse instanceof NumericTokenStream && ((NumericTokenStream)reuse).getPrecisionStep() == type.numericPrecisionStep())) {\n        // lazy init the TokenStream as it is heavy to instantiate\n        // (attributes,...) if not needed (stored field loading)\n        reuse = new NumericTokenStream(type.numericPrecisionStep());\n      }\n      final NumericTokenStream nts = (NumericTokenStream) reuse;\n      // initialize value in TokenStream\n      final Number val = (Number) fieldsData;\n      switch (numericType) {\n      case INT:\n        nts.setIntValue(val.intValue());\n        break;\n      case LONG:\n        nts.setLongValue(val.longValue());\n        break;\n      case FLOAT:\n        nts.setFloatValue(val.floatValue());\n        break;\n      case DOUBLE:\n        nts.setDoubleValue(val.doubleValue());\n        break;\n      default:\n        throw new AssertionError(\"Should never get here\");\n      }\n      return reuse;\n    }\n\n    if (!fieldType().tokenized()) {\n      if (stringValue() != null) {\n        if (!(reuse instanceof StringTokenStream)) {\n          // lazy init the TokenStream as it is heavy to instantiate\n          // (attributes,...) if not needed\n          reuse = new StringTokenStream();\n        }\n        ((StringTokenStream) reuse).setValue(stringValue());\n        return reuse;\n      } else if (binaryValue() != null) {\n        if (!(reuse instanceof BinaryTokenStream)) {\n          // lazy init the TokenStream as it is heavy to instantiate\n          // (attributes,...) if not needed\n          reuse = new BinaryTokenStream();\n        }\n        ((BinaryTokenStream) reuse).setValue(binaryValue());\n        return reuse;\n      } else {\n        throw new IllegalArgumentException(\"Non-Tokenized Fields must have a String value\");\n      }\n    }\n\n    if (tokenStream != null) {\n      return tokenStream;\n    } else if (readerValue() != null) {\n      return analyzer.tokenStream(name(), readerValue());\n    } else if (stringValue() != null) {\n      return analyzer.tokenStream(name(), stringValue());\n    }\n\n    throw new IllegalArgumentException(\"Field must have either TokenStream, String, Reader or Number value; got \" + this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d7b35a5b70dfb7617f799444beea32ac58a2d14f","date":1453716281,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#tokenStream(Analyzer,TokenStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Field#tokenStream(Analyzer,TokenStream).mjava","sourceNew":"  @Override\n  public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) {\n    if (fieldType().indexOptions() == IndexOptions.NONE) {\n      // Not indexed\n      return null;\n    }\n\n    final FieldType.LegacyNumericType numericType = fieldType().numericType();\n    if (numericType != null) {\n      if (!(reuse instanceof LegacyNumericTokenStream && ((LegacyNumericTokenStream)reuse).getPrecisionStep() == type.numericPrecisionStep())) {\n        // lazy init the TokenStream as it is heavy to instantiate\n        // (attributes,...) if not needed (stored field loading)\n        reuse = new LegacyNumericTokenStream(type.numericPrecisionStep());\n      }\n      final LegacyNumericTokenStream nts = (LegacyNumericTokenStream) reuse;\n      // initialize value in TokenStream\n      final Number val = (Number) fieldsData;\n      switch (numericType) {\n      case INT:\n        nts.setIntValue(val.intValue());\n        break;\n      case LONG:\n        nts.setLongValue(val.longValue());\n        break;\n      case FLOAT:\n        nts.setFloatValue(val.floatValue());\n        break;\n      case DOUBLE:\n        nts.setDoubleValue(val.doubleValue());\n        break;\n      default:\n        throw new AssertionError(\"Should never get here\");\n      }\n      return reuse;\n    }\n\n    if (!fieldType().tokenized()) {\n      if (stringValue() != null) {\n        if (!(reuse instanceof StringTokenStream)) {\n          // lazy init the TokenStream as it is heavy to instantiate\n          // (attributes,...) if not needed\n          reuse = new StringTokenStream();\n        }\n        ((StringTokenStream) reuse).setValue(stringValue());\n        return reuse;\n      } else if (binaryValue() != null) {\n        if (!(reuse instanceof BinaryTokenStream)) {\n          // lazy init the TokenStream as it is heavy to instantiate\n          // (attributes,...) if not needed\n          reuse = new BinaryTokenStream();\n        }\n        ((BinaryTokenStream) reuse).setValue(binaryValue());\n        return reuse;\n      } else {\n        throw new IllegalArgumentException(\"Non-Tokenized Fields must have a String value\");\n      }\n    }\n\n    if (tokenStream != null) {\n      return tokenStream;\n    } else if (readerValue() != null) {\n      return analyzer.tokenStream(name(), readerValue());\n    } else if (stringValue() != null) {\n      return analyzer.tokenStream(name(), stringValue());\n    }\n\n    throw new IllegalArgumentException(\"Field must have either TokenStream, String, Reader or Number value; got \" + this);\n  }\n\n","sourceOld":"  @Override\n  public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) throws IOException {\n    if (fieldType().indexOptions() == IndexOptions.NONE) {\n      // Not indexed\n      return null;\n    }\n\n    final FieldType.LegacyNumericType numericType = fieldType().numericType();\n    if (numericType != null) {\n      if (!(reuse instanceof LegacyNumericTokenStream && ((LegacyNumericTokenStream)reuse).getPrecisionStep() == type.numericPrecisionStep())) {\n        // lazy init the TokenStream as it is heavy to instantiate\n        // (attributes,...) if not needed (stored field loading)\n        reuse = new LegacyNumericTokenStream(type.numericPrecisionStep());\n      }\n      final LegacyNumericTokenStream nts = (LegacyNumericTokenStream) reuse;\n      // initialize value in TokenStream\n      final Number val = (Number) fieldsData;\n      switch (numericType) {\n      case INT:\n        nts.setIntValue(val.intValue());\n        break;\n      case LONG:\n        nts.setLongValue(val.longValue());\n        break;\n      case FLOAT:\n        nts.setFloatValue(val.floatValue());\n        break;\n      case DOUBLE:\n        nts.setDoubleValue(val.doubleValue());\n        break;\n      default:\n        throw new AssertionError(\"Should never get here\");\n      }\n      return reuse;\n    }\n\n    if (!fieldType().tokenized()) {\n      if (stringValue() != null) {\n        if (!(reuse instanceof StringTokenStream)) {\n          // lazy init the TokenStream as it is heavy to instantiate\n          // (attributes,...) if not needed\n          reuse = new StringTokenStream();\n        }\n        ((StringTokenStream) reuse).setValue(stringValue());\n        return reuse;\n      } else if (binaryValue() != null) {\n        if (!(reuse instanceof BinaryTokenStream)) {\n          // lazy init the TokenStream as it is heavy to instantiate\n          // (attributes,...) if not needed\n          reuse = new BinaryTokenStream();\n        }\n        ((BinaryTokenStream) reuse).setValue(binaryValue());\n        return reuse;\n      } else {\n        throw new IllegalArgumentException(\"Non-Tokenized Fields must have a String value\");\n      }\n    }\n\n    if (tokenStream != null) {\n      return tokenStream;\n    } else if (readerValue() != null) {\n      return analyzer.tokenStream(name(), readerValue());\n    } else if (stringValue() != null) {\n      return analyzer.tokenStream(name(), stringValue());\n    }\n\n    throw new IllegalArgumentException(\"Field must have either TokenStream, String, Reader or Number value; got \" + this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#tokenStream(Analyzer,TokenStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Field#tokenStream(Analyzer,TokenStream).mjava","sourceNew":"  @Override\n  public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) {\n    if (fieldType().indexOptions() == IndexOptions.NONE) {\n      // Not indexed\n      return null;\n    }\n\n    final FieldType.LegacyNumericType numericType = fieldType().numericType();\n    if (numericType != null) {\n      if (!(reuse instanceof LegacyNumericTokenStream && ((LegacyNumericTokenStream)reuse).getPrecisionStep() == type.numericPrecisionStep())) {\n        // lazy init the TokenStream as it is heavy to instantiate\n        // (attributes,...) if not needed (stored field loading)\n        reuse = new LegacyNumericTokenStream(type.numericPrecisionStep());\n      }\n      final LegacyNumericTokenStream nts = (LegacyNumericTokenStream) reuse;\n      // initialize value in TokenStream\n      final Number val = (Number) fieldsData;\n      switch (numericType) {\n      case INT:\n        nts.setIntValue(val.intValue());\n        break;\n      case LONG:\n        nts.setLongValue(val.longValue());\n        break;\n      case FLOAT:\n        nts.setFloatValue(val.floatValue());\n        break;\n      case DOUBLE:\n        nts.setDoubleValue(val.doubleValue());\n        break;\n      default:\n        throw new AssertionError(\"Should never get here\");\n      }\n      return reuse;\n    }\n\n    if (!fieldType().tokenized()) {\n      if (stringValue() != null) {\n        if (!(reuse instanceof StringTokenStream)) {\n          // lazy init the TokenStream as it is heavy to instantiate\n          // (attributes,...) if not needed\n          reuse = new StringTokenStream();\n        }\n        ((StringTokenStream) reuse).setValue(stringValue());\n        return reuse;\n      } else if (binaryValue() != null) {\n        if (!(reuse instanceof BinaryTokenStream)) {\n          // lazy init the TokenStream as it is heavy to instantiate\n          // (attributes,...) if not needed\n          reuse = new BinaryTokenStream();\n        }\n        ((BinaryTokenStream) reuse).setValue(binaryValue());\n        return reuse;\n      } else {\n        throw new IllegalArgumentException(\"Non-Tokenized Fields must have a String value\");\n      }\n    }\n\n    if (tokenStream != null) {\n      return tokenStream;\n    } else if (readerValue() != null) {\n      return analyzer.tokenStream(name(), readerValue());\n    } else if (stringValue() != null) {\n      return analyzer.tokenStream(name(), stringValue());\n    }\n\n    throw new IllegalArgumentException(\"Field must have either TokenStream, String, Reader or Number value; got \" + this);\n  }\n\n","sourceOld":"  @Override\n  public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) throws IOException {\n    if (fieldType().indexOptions() == IndexOptions.NONE) {\n      // Not indexed\n      return null;\n    }\n\n    final FieldType.LegacyNumericType numericType = fieldType().numericType();\n    if (numericType != null) {\n      if (!(reuse instanceof LegacyNumericTokenStream && ((LegacyNumericTokenStream)reuse).getPrecisionStep() == type.numericPrecisionStep())) {\n        // lazy init the TokenStream as it is heavy to instantiate\n        // (attributes,...) if not needed (stored field loading)\n        reuse = new LegacyNumericTokenStream(type.numericPrecisionStep());\n      }\n      final LegacyNumericTokenStream nts = (LegacyNumericTokenStream) reuse;\n      // initialize value in TokenStream\n      final Number val = (Number) fieldsData;\n      switch (numericType) {\n      case INT:\n        nts.setIntValue(val.intValue());\n        break;\n      case LONG:\n        nts.setLongValue(val.longValue());\n        break;\n      case FLOAT:\n        nts.setFloatValue(val.floatValue());\n        break;\n      case DOUBLE:\n        nts.setDoubleValue(val.doubleValue());\n        break;\n      default:\n        throw new AssertionError(\"Should never get here\");\n      }\n      return reuse;\n    }\n\n    if (!fieldType().tokenized()) {\n      if (stringValue() != null) {\n        if (!(reuse instanceof StringTokenStream)) {\n          // lazy init the TokenStream as it is heavy to instantiate\n          // (attributes,...) if not needed\n          reuse = new StringTokenStream();\n        }\n        ((StringTokenStream) reuse).setValue(stringValue());\n        return reuse;\n      } else if (binaryValue() != null) {\n        if (!(reuse instanceof BinaryTokenStream)) {\n          // lazy init the TokenStream as it is heavy to instantiate\n          // (attributes,...) if not needed\n          reuse = new BinaryTokenStream();\n        }\n        ((BinaryTokenStream) reuse).setValue(binaryValue());\n        return reuse;\n      } else {\n        throw new IllegalArgumentException(\"Non-Tokenized Fields must have a String value\");\n      }\n    }\n\n    if (tokenStream != null) {\n      return tokenStream;\n    } else if (readerValue() != null) {\n      return analyzer.tokenStream(name(), readerValue());\n    } else if (stringValue() != null) {\n      return analyzer.tokenStream(name(), stringValue());\n    }\n\n    throw new IllegalArgumentException(\"Field must have either TokenStream, String, Reader or Number value; got \" + this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af5ba0166322092193d4c29880b0f7670fc7ca0","date":1471440525,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#tokenStream(Analyzer,TokenStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Field#tokenStream(Analyzer,TokenStream).mjava","sourceNew":"  @Override\n  public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) {\n    if (fieldType().indexOptions() == IndexOptions.NONE) {\n      // Not indexed\n      return null;\n    }\n\n    if (!fieldType().tokenized()) {\n      if (stringValue() != null) {\n        if (!(reuse instanceof StringTokenStream)) {\n          // lazy init the TokenStream as it is heavy to instantiate\n          // (attributes,...) if not needed\n          reuse = new StringTokenStream();\n        }\n        ((StringTokenStream) reuse).setValue(stringValue());\n        return reuse;\n      } else if (binaryValue() != null) {\n        if (!(reuse instanceof BinaryTokenStream)) {\n          // lazy init the TokenStream as it is heavy to instantiate\n          // (attributes,...) if not needed\n          reuse = new BinaryTokenStream();\n        }\n        ((BinaryTokenStream) reuse).setValue(binaryValue());\n        return reuse;\n      } else {\n        throw new IllegalArgumentException(\"Non-Tokenized Fields must have a String value\");\n      }\n    }\n\n    if (tokenStream != null) {\n      return tokenStream;\n    } else if (readerValue() != null) {\n      return analyzer.tokenStream(name(), readerValue());\n    } else if (stringValue() != null) {\n      return analyzer.tokenStream(name(), stringValue());\n    }\n\n    throw new IllegalArgumentException(\"Field must have either TokenStream, String, Reader or Number value; got \" + this);\n  }\n\n","sourceOld":"  @Override\n  public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) {\n    if (fieldType().indexOptions() == IndexOptions.NONE) {\n      // Not indexed\n      return null;\n    }\n\n    final FieldType.LegacyNumericType numericType = fieldType().numericType();\n    if (numericType != null) {\n      if (!(reuse instanceof LegacyNumericTokenStream && ((LegacyNumericTokenStream)reuse).getPrecisionStep() == type.numericPrecisionStep())) {\n        // lazy init the TokenStream as it is heavy to instantiate\n        // (attributes,...) if not needed (stored field loading)\n        reuse = new LegacyNumericTokenStream(type.numericPrecisionStep());\n      }\n      final LegacyNumericTokenStream nts = (LegacyNumericTokenStream) reuse;\n      // initialize value in TokenStream\n      final Number val = (Number) fieldsData;\n      switch (numericType) {\n      case INT:\n        nts.setIntValue(val.intValue());\n        break;\n      case LONG:\n        nts.setLongValue(val.longValue());\n        break;\n      case FLOAT:\n        nts.setFloatValue(val.floatValue());\n        break;\n      case DOUBLE:\n        nts.setDoubleValue(val.doubleValue());\n        break;\n      default:\n        throw new AssertionError(\"Should never get here\");\n      }\n      return reuse;\n    }\n\n    if (!fieldType().tokenized()) {\n      if (stringValue() != null) {\n        if (!(reuse instanceof StringTokenStream)) {\n          // lazy init the TokenStream as it is heavy to instantiate\n          // (attributes,...) if not needed\n          reuse = new StringTokenStream();\n        }\n        ((StringTokenStream) reuse).setValue(stringValue());\n        return reuse;\n      } else if (binaryValue() != null) {\n        if (!(reuse instanceof BinaryTokenStream)) {\n          // lazy init the TokenStream as it is heavy to instantiate\n          // (attributes,...) if not needed\n          reuse = new BinaryTokenStream();\n        }\n        ((BinaryTokenStream) reuse).setValue(binaryValue());\n        return reuse;\n      } else {\n        throw new IllegalArgumentException(\"Non-Tokenized Fields must have a String value\");\n      }\n    }\n\n    if (tokenStream != null) {\n      return tokenStream;\n    } else if (readerValue() != null) {\n      return analyzer.tokenStream(name(), readerValue());\n    } else if (stringValue() != null) {\n      return analyzer.tokenStream(name(), stringValue());\n    }\n\n    throw new IllegalArgumentException(\"Field must have either TokenStream, String, Reader or Number value; got \" + this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#tokenStream(Analyzer,TokenStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Field#tokenStream(Analyzer,TokenStream).mjava","sourceNew":"  @Override\n  public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) {\n    if (fieldType().indexOptions() == IndexOptions.NONE) {\n      // Not indexed\n      return null;\n    }\n\n    if (!fieldType().tokenized()) {\n      if (stringValue() != null) {\n        if (!(reuse instanceof StringTokenStream)) {\n          // lazy init the TokenStream as it is heavy to instantiate\n          // (attributes,...) if not needed\n          reuse = new StringTokenStream();\n        }\n        ((StringTokenStream) reuse).setValue(stringValue());\n        return reuse;\n      } else if (binaryValue() != null) {\n        if (!(reuse instanceof BinaryTokenStream)) {\n          // lazy init the TokenStream as it is heavy to instantiate\n          // (attributes,...) if not needed\n          reuse = new BinaryTokenStream();\n        }\n        ((BinaryTokenStream) reuse).setValue(binaryValue());\n        return reuse;\n      } else {\n        throw new IllegalArgumentException(\"Non-Tokenized Fields must have a String value\");\n      }\n    }\n\n    if (tokenStream != null) {\n      return tokenStream;\n    } else if (readerValue() != null) {\n      return analyzer.tokenStream(name(), readerValue());\n    } else if (stringValue() != null) {\n      return analyzer.tokenStream(name(), stringValue());\n    }\n\n    throw new IllegalArgumentException(\"Field must have either TokenStream, String, Reader or Number value; got \" + this);\n  }\n\n","sourceOld":"  @Override\n  public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) {\n    if (fieldType().indexOptions() == IndexOptions.NONE) {\n      // Not indexed\n      return null;\n    }\n\n    final FieldType.LegacyNumericType numericType = fieldType().numericType();\n    if (numericType != null) {\n      if (!(reuse instanceof LegacyNumericTokenStream && ((LegacyNumericTokenStream)reuse).getPrecisionStep() == type.numericPrecisionStep())) {\n        // lazy init the TokenStream as it is heavy to instantiate\n        // (attributes,...) if not needed (stored field loading)\n        reuse = new LegacyNumericTokenStream(type.numericPrecisionStep());\n      }\n      final LegacyNumericTokenStream nts = (LegacyNumericTokenStream) reuse;\n      // initialize value in TokenStream\n      final Number val = (Number) fieldsData;\n      switch (numericType) {\n      case INT:\n        nts.setIntValue(val.intValue());\n        break;\n      case LONG:\n        nts.setLongValue(val.longValue());\n        break;\n      case FLOAT:\n        nts.setFloatValue(val.floatValue());\n        break;\n      case DOUBLE:\n        nts.setDoubleValue(val.doubleValue());\n        break;\n      default:\n        throw new AssertionError(\"Should never get here\");\n      }\n      return reuse;\n    }\n\n    if (!fieldType().tokenized()) {\n      if (stringValue() != null) {\n        if (!(reuse instanceof StringTokenStream)) {\n          // lazy init the TokenStream as it is heavy to instantiate\n          // (attributes,...) if not needed\n          reuse = new StringTokenStream();\n        }\n        ((StringTokenStream) reuse).setValue(stringValue());\n        return reuse;\n      } else if (binaryValue() != null) {\n        if (!(reuse instanceof BinaryTokenStream)) {\n          // lazy init the TokenStream as it is heavy to instantiate\n          // (attributes,...) if not needed\n          reuse = new BinaryTokenStream();\n        }\n        ((BinaryTokenStream) reuse).setValue(binaryValue());\n        return reuse;\n      } else {\n        throw new IllegalArgumentException(\"Non-Tokenized Fields must have a String value\");\n      }\n    }\n\n    if (tokenStream != null) {\n      return tokenStream;\n    } else if (readerValue() != null) {\n      return analyzer.tokenStream(name(), readerValue());\n    } else if (stringValue() != null) {\n      return analyzer.tokenStream(name(), stringValue());\n    }\n\n    throw new IllegalArgumentException(\"Field must have either TokenStream, String, Reader or Number value; got \" + this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#tokenStream(Analyzer,TokenStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Field#tokenStream(Analyzer,TokenStream).mjava","sourceNew":"  @Override\n  public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) {\n    if (fieldType().indexOptions() == IndexOptions.NONE) {\n      // Not indexed\n      return null;\n    }\n\n    if (!fieldType().tokenized()) {\n      if (stringValue() != null) {\n        if (!(reuse instanceof StringTokenStream)) {\n          // lazy init the TokenStream as it is heavy to instantiate\n          // (attributes,...) if not needed\n          reuse = new StringTokenStream();\n        }\n        ((StringTokenStream) reuse).setValue(stringValue());\n        return reuse;\n      } else if (binaryValue() != null) {\n        if (!(reuse instanceof BinaryTokenStream)) {\n          // lazy init the TokenStream as it is heavy to instantiate\n          // (attributes,...) if not needed\n          reuse = new BinaryTokenStream();\n        }\n        ((BinaryTokenStream) reuse).setValue(binaryValue());\n        return reuse;\n      } else {\n        throw new IllegalArgumentException(\"Non-Tokenized Fields must have a String value\");\n      }\n    }\n\n    if (tokenStream != null) {\n      return tokenStream;\n    } else if (readerValue() != null) {\n      return analyzer.tokenStream(name(), readerValue());\n    } else if (stringValue() != null) {\n      return analyzer.tokenStream(name(), stringValue());\n    }\n\n    throw new IllegalArgumentException(\"Field must have either TokenStream, String, Reader or Number value; got \" + this);\n  }\n\n","sourceOld":"  @Override\n  public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) {\n    if (fieldType().indexOptions() == IndexOptions.NONE) {\n      // Not indexed\n      return null;\n    }\n\n    final FieldType.LegacyNumericType numericType = fieldType().numericType();\n    if (numericType != null) {\n      if (!(reuse instanceof LegacyNumericTokenStream && ((LegacyNumericTokenStream)reuse).getPrecisionStep() == type.numericPrecisionStep())) {\n        // lazy init the TokenStream as it is heavy to instantiate\n        // (attributes,...) if not needed (stored field loading)\n        reuse = new LegacyNumericTokenStream(type.numericPrecisionStep());\n      }\n      final LegacyNumericTokenStream nts = (LegacyNumericTokenStream) reuse;\n      // initialize value in TokenStream\n      final Number val = (Number) fieldsData;\n      switch (numericType) {\n      case INT:\n        nts.setIntValue(val.intValue());\n        break;\n      case LONG:\n        nts.setLongValue(val.longValue());\n        break;\n      case FLOAT:\n        nts.setFloatValue(val.floatValue());\n        break;\n      case DOUBLE:\n        nts.setDoubleValue(val.doubleValue());\n        break;\n      default:\n        throw new AssertionError(\"Should never get here\");\n      }\n      return reuse;\n    }\n\n    if (!fieldType().tokenized()) {\n      if (stringValue() != null) {\n        if (!(reuse instanceof StringTokenStream)) {\n          // lazy init the TokenStream as it is heavy to instantiate\n          // (attributes,...) if not needed\n          reuse = new StringTokenStream();\n        }\n        ((StringTokenStream) reuse).setValue(stringValue());\n        return reuse;\n      } else if (binaryValue() != null) {\n        if (!(reuse instanceof BinaryTokenStream)) {\n          // lazy init the TokenStream as it is heavy to instantiate\n          // (attributes,...) if not needed\n          reuse = new BinaryTokenStream();\n        }\n        ((BinaryTokenStream) reuse).setValue(binaryValue());\n        return reuse;\n      } else {\n        throw new IllegalArgumentException(\"Non-Tokenized Fields must have a String value\");\n      }\n    }\n\n    if (tokenStream != null) {\n      return tokenStream;\n    } else if (readerValue() != null) {\n      return analyzer.tokenStream(name(), readerValue());\n    } else if (stringValue() != null) {\n      return analyzer.tokenStream(name(), stringValue());\n    }\n\n    throw new IllegalArgumentException(\"Field must have either TokenStream, String, Reader or Number value; got \" + this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#tokenStream(Analyzer,TokenStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Field#tokenStream(Analyzer,TokenStream).mjava","sourceNew":"  @Override\n  public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) {\n    if (fieldType().indexOptions() == IndexOptions.NONE) {\n      // Not indexed\n      return null;\n    }\n\n    if (!fieldType().tokenized()) {\n      if (stringValue() != null) {\n        if (!(reuse instanceof StringTokenStream)) {\n          // lazy init the TokenStream as it is heavy to instantiate\n          // (attributes,...) if not needed\n          reuse = new StringTokenStream();\n        }\n        ((StringTokenStream) reuse).setValue(stringValue());\n        return reuse;\n      } else if (binaryValue() != null) {\n        if (!(reuse instanceof BinaryTokenStream)) {\n          // lazy init the TokenStream as it is heavy to instantiate\n          // (attributes,...) if not needed\n          reuse = new BinaryTokenStream();\n        }\n        ((BinaryTokenStream) reuse).setValue(binaryValue());\n        return reuse;\n      } else {\n        throw new IllegalArgumentException(\"Non-Tokenized Fields must have a String value\");\n      }\n    }\n\n    if (tokenStream != null) {\n      return tokenStream;\n    } else if (readerValue() != null) {\n      return analyzer.tokenStream(name(), readerValue());\n    } else if (stringValue() != null) {\n      return analyzer.tokenStream(name(), stringValue());\n    }\n\n    throw new IllegalArgumentException(\"Field must have either TokenStream, String, Reader or Number value; got \" + this);\n  }\n\n","sourceOld":"  @Override\n  public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) {\n    if (fieldType().indexOptions() == IndexOptions.NONE) {\n      // Not indexed\n      return null;\n    }\n\n    final FieldType.LegacyNumericType numericType = fieldType().numericType();\n    if (numericType != null) {\n      if (!(reuse instanceof LegacyNumericTokenStream && ((LegacyNumericTokenStream)reuse).getPrecisionStep() == type.numericPrecisionStep())) {\n        // lazy init the TokenStream as it is heavy to instantiate\n        // (attributes,...) if not needed (stored field loading)\n        reuse = new LegacyNumericTokenStream(type.numericPrecisionStep());\n      }\n      final LegacyNumericTokenStream nts = (LegacyNumericTokenStream) reuse;\n      // initialize value in TokenStream\n      final Number val = (Number) fieldsData;\n      switch (numericType) {\n      case INT:\n        nts.setIntValue(val.intValue());\n        break;\n      case LONG:\n        nts.setLongValue(val.longValue());\n        break;\n      case FLOAT:\n        nts.setFloatValue(val.floatValue());\n        break;\n      case DOUBLE:\n        nts.setDoubleValue(val.doubleValue());\n        break;\n      default:\n        throw new AssertionError(\"Should never get here\");\n      }\n      return reuse;\n    }\n\n    if (!fieldType().tokenized()) {\n      if (stringValue() != null) {\n        if (!(reuse instanceof StringTokenStream)) {\n          // lazy init the TokenStream as it is heavy to instantiate\n          // (attributes,...) if not needed\n          reuse = new StringTokenStream();\n        }\n        ((StringTokenStream) reuse).setValue(stringValue());\n        return reuse;\n      } else if (binaryValue() != null) {\n        if (!(reuse instanceof BinaryTokenStream)) {\n          // lazy init the TokenStream as it is heavy to instantiate\n          // (attributes,...) if not needed\n          reuse = new BinaryTokenStream();\n        }\n        ((BinaryTokenStream) reuse).setValue(binaryValue());\n        return reuse;\n      } else {\n        throw new IllegalArgumentException(\"Non-Tokenized Fields must have a String value\");\n      }\n    }\n\n    if (tokenStream != null) {\n      return tokenStream;\n    } else if (readerValue() != null) {\n      return analyzer.tokenStream(name(), readerValue());\n    } else if (stringValue() != null) {\n      return analyzer.tokenStream(name(), stringValue());\n    }\n\n    throw new IllegalArgumentException(\"Field must have either TokenStream, String, Reader or Number value; got \" + this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["d7b35a5b70dfb7617f799444beea32ac58a2d14f","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["770342641f7b505eaa8dccdc666158bff2419109","d7b35a5b70dfb7617f799444beea32ac58a2d14f"],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["d7b35a5b70dfb7617f799444beea32ac58a2d14f"],"399d127639ae13222a8545b50e0ac545a6bcd2d7":["f95ce1375367b92d411a06175eab3915fe93c6bc"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["3184874f7f3aca850248483485b4995343066875"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["d7b35a5b70dfb7617f799444beea32ac58a2d14f","5af5ba0166322092193d4c29880b0f7670fc7ca0"],"d7b35a5b70dfb7617f799444beea32ac58a2d14f":["770342641f7b505eaa8dccdc666158bff2419109"],"770342641f7b505eaa8dccdc666158bff2419109":["399d127639ae13222a8545b50e0ac545a6bcd2d7"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"3184874f7f3aca850248483485b4995343066875":["090a3a6b4b32e55f8fe1eab3359dbe628a208a0c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["d7b35a5b70dfb7617f799444beea32ac58a2d14f","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["090a3a6b4b32e55f8fe1eab3359dbe628a208a0c","3184874f7f3aca850248483485b4995343066875"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"090a3a6b4b32e55f8fe1eab3359dbe628a208a0c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["403d05f7f8d69b65659157eff1bc1d2717f04c66"]},"commit2Childs":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"399d127639ae13222a8545b50e0ac545a6bcd2d7":["770342641f7b505eaa8dccdc666158bff2419109"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["f95ce1375367b92d411a06175eab3915fe93c6bc"],"d7b35a5b70dfb7617f799444beea32ac58a2d14f":["403d05f7f8d69b65659157eff1bc1d2717f04c66","1e6acbaae7af722f17204ceccf0f7db5753eccf3","5af5ba0166322092193d4c29880b0f7670fc7ca0","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"770342641f7b505eaa8dccdc666158bff2419109":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","d7b35a5b70dfb7617f799444beea32ac58a2d14f"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["399d127639ae13222a8545b50e0ac545a6bcd2d7"],"3184874f7f3aca850248483485b4995343066875":["2bb2842e561df4e8e9ad89010605fc86ac265465","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["090a3a6b4b32e55f8fe1eab3359dbe628a208a0c"],"090a3a6b4b32e55f8fe1eab3359dbe628a208a0c":["3184874f7f3aca850248483485b4995343066875","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}