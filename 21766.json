{"path":"lucene/queries/src/test/org/apache/lucene/queries/function/PreciseClassicSimilarity[TestLongNormValueSource]#lengthNorm(FieldInvertState).mjava","commits":[{"id":"81d0720146de53dd3a4a023d2a3d1089d86d748d","date":1442268215,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/PreciseClassicSimilarity[TestLongNormValueSource]#lengthNorm(FieldInvertState).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/PreciseDefaultSimilarity[TestLongNormValueSource]#lengthNorm(FieldInvertState).mjava","sourceNew":"  /** Implemented as\n   *  <code>state.getBoost()*lengthNorm(numTerms)</code>, where\n   *  <code>numTerms</code> is {@link org.apache.lucene.index.FieldInvertState#getLength()} if {@link\n   *  #setDiscountOverlaps} is false, else it's {@link\n   *  org.apache.lucene.index.FieldInvertState#getLength()} - {@link\n   *  org.apache.lucene.index.FieldInvertState#getNumOverlap()}.\n   *\n   *  @lucene.experimental */\n  @Override\n  public float lengthNorm(FieldInvertState state) {\n    final int numTerms;\n    if (discountOverlaps) {\n      numTerms = state.getLength() - state.getNumOverlap();\n    } else {\n      numTerms = state.getLength();\n    }\n    return state.getBoost() * ((float) (1.0 / Math.sqrt(numTerms)));\n  }\n\n","sourceOld":"  /** Implemented as\n   *  <code>state.getBoost()*lengthNorm(numTerms)</code>, where\n   *  <code>numTerms</code> is {@link org.apache.lucene.index.FieldInvertState#getLength()} if {@link\n   *  #setDiscountOverlaps} is false, else it's {@link\n   *  org.apache.lucene.index.FieldInvertState#getLength()} - {@link\n   *  org.apache.lucene.index.FieldInvertState#getNumOverlap()}.\n   *\n   *  @lucene.experimental */\n  @Override\n  public float lengthNorm(FieldInvertState state) {\n    final int numTerms;\n    if (discountOverlaps) {\n      numTerms = state.getLength() - state.getNumOverlap();\n    } else {\n      numTerms = state.getLength();\n    }\n    return state.getBoost() * ((float) (1.0 / Math.sqrt(numTerms)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/PreciseClassicSimilarity[TestLongNormValueSource]#lengthNorm(FieldInvertState).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/PreciseClassicSimilarity[TestLongNormValueSource]#lengthNorm(FieldInvertState).mjava","sourceNew":"  /** Implemented as\n   *  <code>state.getBoost()*lengthNorm(numTerms)</code>, where\n   *  <code>numTerms</code> is {@link org.apache.lucene.index.FieldInvertState#getLength()} if {@link\n   *  #setDiscountOverlaps} is false, else it's {@link\n   *  org.apache.lucene.index.FieldInvertState#getLength()} - {@link\n   *  org.apache.lucene.index.FieldInvertState#getNumOverlap()}.\n   *\n   *  @lucene.experimental */\n  @Override\n  public float lengthNorm(FieldInvertState state) {\n    final int numTerms;\n    if (discountOverlaps) {\n      numTerms = state.getLength() - state.getNumOverlap();\n    } else {\n      numTerms = state.getLength();\n    }\n    return (float) (1.0 / Math.sqrt(numTerms));\n  }\n\n","sourceOld":"  /** Implemented as\n   *  <code>state.getBoost()*lengthNorm(numTerms)</code>, where\n   *  <code>numTerms</code> is {@link org.apache.lucene.index.FieldInvertState#getLength()} if {@link\n   *  #setDiscountOverlaps} is false, else it's {@link\n   *  org.apache.lucene.index.FieldInvertState#getLength()} - {@link\n   *  org.apache.lucene.index.FieldInvertState#getNumOverlap()}.\n   *\n   *  @lucene.experimental */\n  @Override\n  public float lengthNorm(FieldInvertState state) {\n    final int numTerms;\n    if (discountOverlaps) {\n      numTerms = state.getLength() - state.getNumOverlap();\n    } else {\n      numTerms = state.getLength();\n    }\n    return state.getBoost() * ((float) (1.0 / Math.sqrt(numTerms)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615370d2b876c3435773b5174df2e2242ad7981a","date":1495117651,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/PreciseClassicSimilarity[TestLongNormValueSource]#lengthNorm(FieldInvertState).mjava","sourceNew":null,"sourceOld":"  /** Implemented as\n   *  <code>state.getBoost()*lengthNorm(numTerms)</code>, where\n   *  <code>numTerms</code> is {@link org.apache.lucene.index.FieldInvertState#getLength()} if {@link\n   *  #setDiscountOverlaps} is false, else it's {@link\n   *  org.apache.lucene.index.FieldInvertState#getLength()} - {@link\n   *  org.apache.lucene.index.FieldInvertState#getNumOverlap()}.\n   *\n   *  @lucene.experimental */\n  @Override\n  public float lengthNorm(FieldInvertState state) {\n    final int numTerms;\n    if (discountOverlaps) {\n      numTerms = state.getLength() - state.getNumOverlap();\n    } else {\n      numTerms = state.getLength();\n    }\n    return (float) (1.0 / Math.sqrt(numTerms));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/function/PreciseClassicSimilarity[TestLongNormValueSource]#lengthNorm(FieldInvertState).mjava","sourceNew":null,"sourceOld":"  /** Implemented as\n   *  <code>state.getBoost()*lengthNorm(numTerms)</code>, where\n   *  <code>numTerms</code> is {@link org.apache.lucene.index.FieldInvertState#getLength()} if {@link\n   *  #setDiscountOverlaps} is false, else it's {@link\n   *  org.apache.lucene.index.FieldInvertState#getLength()} - {@link\n   *  org.apache.lucene.index.FieldInvertState#getNumOverlap()}.\n   *\n   *  @lucene.experimental */\n  @Override\n  public float lengthNorm(FieldInvertState state) {\n    final int numTerms;\n    if (discountOverlaps) {\n      numTerms = state.getLength() - state.getNumOverlap();\n    } else {\n      numTerms = state.getLength();\n    }\n    return (float) (1.0 / Math.sqrt(numTerms));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["acd9883560fd89e6448b2b447302fe543040cd4f","615370d2b876c3435773b5174df2e2242ad7981a"],"615370d2b876c3435773b5174df2e2242ad7981a":["acd9883560fd89e6448b2b447302fe543040cd4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"acd9883560fd89e6448b2b447302fe543040cd4f":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["615370d2b876c3435773b5174df2e2242ad7981a"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"615370d2b876c3435773b5174df2e2242ad7981a":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"acd9883560fd89e6448b2b447302fe543040cd4f":["e9017cf144952056066919f1ebc7897ff9bd71b1","615370d2b876c3435773b5174df2e2242ad7981a"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["acd9883560fd89e6448b2b447302fe543040cd4f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}