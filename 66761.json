{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/GenericDistributedQueue#take().mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/GenericDistributedQueue#take().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Removes the head of the queue and returns it, blocks until it succeeds.\n   *\n   * @return The former head of the queue\n   */\n  @Override\n  public byte[] take() throws Exception {\n    // Same as for element. Should refactor this.\n    Timer.Context timer = stats.time(dir + \"_take\");\n    updateLock.lockInterruptibly();\n    try {\n      while (true) {\n        byte[] result = removeFirst();\n        if (result != null) {\n          return result;\n        }\n        changed.await();\n      }\n    } finally {\n      updateLock.unlock();\n      timer.stop();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/GenericDistributedQueue#take().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/GenericDistributedQueue#take().mjava","sourceNew":"  /**\n   * Removes the head of the queue and returns it, blocks until it succeeds.\n   *\n   * @return The former head of the queue\n   */\n  @Override\n  public byte[] take() throws Exception {\n    // Same as for element. Should refactor this.\n    Timer.Context timer = stats.time(dir + \"_take\");\n    updateLock.lockInterruptibly();\n    try {\n      while (true) {\n        byte[] result = removeFirst();\n        if (result != null) {\n          return result;\n        }\n        changed.await();\n      }\n    } finally {\n      updateLock.unlock();\n      timer.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Removes the head of the queue and returns it, blocks until it succeeds.\n   *\n   * @return The former head of the queue\n   */\n  @Override\n  public byte[] take() throws Exception {\n    // Same as for element. Should refactor this.\n    Timer.Context timer = stats.time(dir + \"_take\");\n    updateLock.lockInterruptibly();\n    try {\n      while (true) {\n        byte[] result = removeFirst();\n        if (result != null) {\n          return result;\n        }\n        changed.await();\n      }\n    } finally {\n      updateLock.unlock();\n      timer.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}