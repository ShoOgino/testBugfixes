{"path":"lucene/facet/src/java/org/apache/lucene/facet/util/ScoredDocIdsUtils.AllLiveDocsScoredDocIDs#getDocIDs().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/util/ScoredDocIdsUtils.AllLiveDocsScoredDocIDs#getDocIDs().mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/util/ScoredDocIdsUtils.AllLiveDocsScoredDocIDs#getDocIDs().mjava","sourceNew":"    public DocIdSet getDocIDs() {\n      return new DocIdSet() {\n\n        @Override\n        public boolean isCacheable() {\n          return true;\n        }\n\n        @Override\n        public DocIdSetIterator iterator() throws IOException {\n          return new DocIdSetIterator() {\n            final Bits liveDocs = MultiFields.getLiveDocs(reader);\n            private int next = -1;\n\n            @Override\n            public int advance(int target) throws IOException {\n              if (target > next) {\n                next = target - 1;\n              }\n              return nextDoc();\n            }\n\n            @Override\n            public int docID() {\n              return next;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              do {\n                ++next;\n              } while (next < maxDoc && liveDocs != null && !liveDocs.get(next));\n\n              return next < maxDoc ? next : NO_MORE_DOCS;\n            }\n\n          };\n        }\n      };\n    }\n\n","sourceOld":"    public DocIdSet getDocIDs() {\n      return new DocIdSet() {\n\n        @Override\n        public boolean isCacheable() {\n          return true;\n        }\n\n        @Override\n        public DocIdSetIterator iterator() throws IOException {\n          return new DocIdSetIterator() {\n            final Bits liveDocs = MultiFields.getLiveDocs(reader);\n            private int next = -1;\n\n            @Override\n            public int advance(int target) throws IOException {\n              if (target > next) {\n                next = target - 1;\n              }\n              return nextDoc();\n            }\n\n            @Override\n            public int docID() {\n              return next;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              do {\n                ++next;\n              } while (next < maxDoc && liveDocs != null && !liveDocs.get(next));\n\n              return next < maxDoc ? next : NO_MORE_DOCS;\n            }\n\n          };\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/util/ScoredDocIdsUtils.AllLiveDocsScoredDocIDs#getDocIDs().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/util/ScoredDocIdsUtils.AllLiveDocsScoredDocIDs#getDocIDs().mjava","sourceNew":"    public DocIdSet getDocIDs() {\n      return new DocIdSet() {\n\n        @Override\n        public boolean isCacheable() {\n          return true;\n        }\n\n        @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n            final Bits liveDocs = MultiFields.getLiveDocs(reader);\n            private int next = -1;\n\n            @Override\n            public int advance(int target) {\n              if (target > next) {\n                next = target - 1;\n              }\n              return nextDoc();\n            }\n\n            @Override\n            public int docID() {\n              return next;\n            }\n\n            @Override\n            public int nextDoc() {\n              do {\n                ++next;\n              } while (next < maxDoc && liveDocs != null && !liveDocs.get(next));\n\n              return next < maxDoc ? next : NO_MORE_DOCS;\n            }\n\n          };\n        }\n      };\n    }\n\n","sourceOld":"    public DocIdSet getDocIDs() {\n      return new DocIdSet() {\n\n        @Override\n        public boolean isCacheable() {\n          return true;\n        }\n\n        @Override\n        public DocIdSetIterator iterator() throws IOException {\n          return new DocIdSetIterator() {\n            final Bits liveDocs = MultiFields.getLiveDocs(reader);\n            private int next = -1;\n\n            @Override\n            public int advance(int target) throws IOException {\n              if (target > next) {\n                next = target - 1;\n              }\n              return nextDoc();\n            }\n\n            @Override\n            public int docID() {\n              return next;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              do {\n                ++next;\n              } while (next < maxDoc && liveDocs != null && !liveDocs.get(next));\n\n              return next < maxDoc ? next : NO_MORE_DOCS;\n            }\n\n          };\n        }\n      };\n    }\n\n","bugFix":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/util/ScoredDocIdsUtils.AllLiveDocsScoredDocIDs#getDocIDs().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/util/ScoredDocIdsUtils.AllLiveDocsScoredDocIDs#getDocIDs().mjava","sourceNew":"    public DocIdSet getDocIDs() {\n      return new DocIdSet() {\n\n        @Override\n        public boolean isCacheable() {\n          return true;\n        }\n\n        @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n            final Bits liveDocs = MultiFields.getLiveDocs(reader);\n            private int next = -1;\n\n            @Override\n            public int advance(int target) {\n              if (target > next) {\n                next = target - 1;\n              }\n              return nextDoc();\n            }\n\n            @Override\n            public int docID() {\n              return next;\n            }\n\n            @Override\n            public int nextDoc() {\n              do {\n                ++next;\n              } while (next < maxDoc && liveDocs != null && !liveDocs.get(next));\n\n              return next < maxDoc ? next : NO_MORE_DOCS;\n            }\n\n          };\n        }\n      };\n    }\n\n","sourceOld":"    public DocIdSet getDocIDs() {\n      return new DocIdSet() {\n\n        @Override\n        public boolean isCacheable() {\n          return true;\n        }\n\n        @Override\n        public DocIdSetIterator iterator() throws IOException {\n          return new DocIdSetIterator() {\n            final Bits liveDocs = MultiFields.getLiveDocs(reader);\n            private int next = -1;\n\n            @Override\n            public int advance(int target) throws IOException {\n              if (target > next) {\n                next = target - 1;\n              }\n              return nextDoc();\n            }\n\n            @Override\n            public int docID() {\n              return next;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              do {\n                ++next;\n              } while (next < maxDoc && liveDocs != null && !liveDocs.get(next));\n\n              return next < maxDoc ? next : NO_MORE_DOCS;\n            }\n\n          };\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/util/ScoredDocIdsUtils.AllLiveDocsScoredDocIDs#getDocIDs().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/util/ScoredDocIdsUtils.AllLiveDocsScoredDocIDs#getDocIDs().mjava","sourceNew":"    @Override\n    public DocIdSet getDocIDs() {\n      return new DocIdSet() {\n\n        @Override\n        public boolean isCacheable() {\n          return true;\n        }\n\n        @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n            final Bits liveDocs = MultiFields.getLiveDocs(reader);\n            private int next = -1;\n\n            @Override\n            public int advance(int target) {\n              if (target > next) {\n                next = target - 1;\n              }\n              return nextDoc();\n            }\n\n            @Override\n            public int docID() {\n              return next;\n            }\n\n            @Override\n            public int nextDoc() {\n              do {\n                ++next;\n              } while (next < maxDoc && liveDocs != null && !liveDocs.get(next));\n\n              return next < maxDoc ? next : NO_MORE_DOCS;\n            }\n\n          };\n        }\n      };\n    }\n\n","sourceOld":"    public DocIdSet getDocIDs() {\n      return new DocIdSet() {\n\n        @Override\n        public boolean isCacheable() {\n          return true;\n        }\n\n        @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n            final Bits liveDocs = MultiFields.getLiveDocs(reader);\n            private int next = -1;\n\n            @Override\n            public int advance(int target) {\n              if (target > next) {\n                next = target - 1;\n              }\n              return nextDoc();\n            }\n\n            @Override\n            public int docID() {\n              return next;\n            }\n\n            @Override\n            public int nextDoc() {\n              do {\n                ++next;\n              } while (next < maxDoc && liveDocs != null && !liveDocs.get(next));\n\n              return next < maxDoc ? next : NO_MORE_DOCS;\n            }\n\n          };\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/util/ScoredDocIdsUtils.AllLiveDocsScoredDocIDs#getDocIDs().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/util/ScoredDocIdsUtils.AllLiveDocsScoredDocIDs#getDocIDs().mjava","sourceNew":"    @Override\n    public DocIdSet getDocIDs() {\n      return new DocIdSet() {\n\n        @Override\n        public boolean isCacheable() {\n          return true;\n        }\n\n        @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n            final Bits liveDocs = MultiFields.getLiveDocs(reader);\n            private int next = -1;\n\n            @Override\n            public int advance(int target) {\n              if (target > next) {\n                next = target - 1;\n              }\n              return nextDoc();\n            }\n\n            @Override\n            public int docID() {\n              return next;\n            }\n\n            @Override\n            public int nextDoc() {\n              do {\n                ++next;\n              } while (next < maxDoc && liveDocs != null && !liveDocs.get(next));\n\n              return next < maxDoc ? next : NO_MORE_DOCS;\n            }\n\n          };\n        }\n      };\n    }\n\n","sourceOld":"    public DocIdSet getDocIDs() {\n      return new DocIdSet() {\n\n        @Override\n        public boolean isCacheable() {\n          return true;\n        }\n\n        @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n            final Bits liveDocs = MultiFields.getLiveDocs(reader);\n            private int next = -1;\n\n            @Override\n            public int advance(int target) {\n              if (target > next) {\n                next = target - 1;\n              }\n              return nextDoc();\n            }\n\n            @Override\n            public int docID() {\n              return next;\n            }\n\n            @Override\n            public int nextDoc() {\n              do {\n                ++next;\n              } while (next < maxDoc && liveDocs != null && !liveDocs.get(next));\n\n              return next < maxDoc ? next : NO_MORE_DOCS;\n            }\n\n          };\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a","date":1363294103,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/util/ScoredDocIdsUtils.AllLiveDocsScoredDocIDs#getDocIDs().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/util/ScoredDocIdsUtils.AllLiveDocsScoredDocIDs#getDocIDs().mjava","sourceNew":"    @Override\n    public DocIdSet getDocIDs() {\n      return new DocIdSet() {\n\n        @Override\n        public boolean isCacheable() {\n          return true;\n        }\n\n        @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n            final Bits liveDocs = MultiFields.getLiveDocs(reader);\n            private int next = -1;\n\n            @Override\n            public int advance(int target) {\n              if (target > next) {\n                next = target - 1;\n              }\n              return nextDoc();\n            }\n\n            @Override\n            public int docID() {\n              return next;\n            }\n\n            @Override\n            public int nextDoc() {\n              do {\n                ++next;\n              } while (next < maxDoc && liveDocs != null && !liveDocs.get(next));\n\n              return next < maxDoc ? next : NO_MORE_DOCS;\n            }\n\n            @Override\n            public long cost() {\n              return maxDoc;\n            }\n          };\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public DocIdSet getDocIDs() {\n      return new DocIdSet() {\n\n        @Override\n        public boolean isCacheable() {\n          return true;\n        }\n\n        @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n            final Bits liveDocs = MultiFields.getLiveDocs(reader);\n            private int next = -1;\n\n            @Override\n            public int advance(int target) {\n              if (target > next) {\n                next = target - 1;\n              }\n              return nextDoc();\n            }\n\n            @Override\n            public int docID() {\n              return next;\n            }\n\n            @Override\n            public int nextDoc() {\n              do {\n                ++next;\n              } while (next < maxDoc && liveDocs != null && !liveDocs.get(next));\n\n              return next < maxDoc ? next : NO_MORE_DOCS;\n            }\n\n          };\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6","date":1375108983,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/old/ScoredDocIdsUtils.AllLiveDocsScoredDocIDs#getDocIDs().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/util/ScoredDocIdsUtils.AllLiveDocsScoredDocIDs#getDocIDs().mjava","sourceNew":"    @Override\n    public DocIdSet getDocIDs() {\n      return new DocIdSet() {\n\n        @Override\n        public boolean isCacheable() {\n          return true;\n        }\n\n        @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n            final Bits liveDocs = MultiFields.getLiveDocs(reader);\n            private int next = -1;\n\n            @Override\n            public int advance(int target) {\n              if (target > next) {\n                next = target - 1;\n              }\n              return nextDoc();\n            }\n\n            @Override\n            public int docID() {\n              return next;\n            }\n\n            @Override\n            public int nextDoc() {\n              do {\n                ++next;\n              } while (next < maxDoc && liveDocs != null && !liveDocs.get(next));\n\n              return next < maxDoc ? next : NO_MORE_DOCS;\n            }\n\n            @Override\n            public long cost() {\n              return maxDoc;\n            }\n          };\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public DocIdSet getDocIDs() {\n      return new DocIdSet() {\n\n        @Override\n        public boolean isCacheable() {\n          return true;\n        }\n\n        @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n            final Bits liveDocs = MultiFields.getLiveDocs(reader);\n            private int next = -1;\n\n            @Override\n            public int advance(int target) {\n              if (target > next) {\n                next = target - 1;\n              }\n              return nextDoc();\n            }\n\n            @Override\n            public int docID() {\n              return next;\n            }\n\n            @Override\n            public int nextDoc() {\n              do {\n                ++next;\n              } while (next < maxDoc && liveDocs != null && !liveDocs.get(next));\n\n              return next < maxDoc ? next : NO_MORE_DOCS;\n            }\n\n            @Override\n            public long cost() {\n              return maxDoc;\n            }\n          };\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/old/ScoredDocIdsUtils.AllLiveDocsScoredDocIDs#getDocIDs().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/util/ScoredDocIdsUtils.AllLiveDocsScoredDocIDs#getDocIDs().mjava","sourceNew":"    @Override\n    public DocIdSet getDocIDs() {\n      return new DocIdSet() {\n\n        @Override\n        public boolean isCacheable() {\n          return true;\n        }\n\n        @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n            final Bits liveDocs = MultiFields.getLiveDocs(reader);\n            private int next = -1;\n\n            @Override\n            public int advance(int target) {\n              if (target > next) {\n                next = target - 1;\n              }\n              return nextDoc();\n            }\n\n            @Override\n            public int docID() {\n              return next;\n            }\n\n            @Override\n            public int nextDoc() {\n              do {\n                ++next;\n              } while (next < maxDoc && liveDocs != null && !liveDocs.get(next));\n\n              return next < maxDoc ? next : NO_MORE_DOCS;\n            }\n\n            @Override\n            public long cost() {\n              return maxDoc;\n            }\n          };\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public DocIdSet getDocIDs() {\n      return new DocIdSet() {\n\n        @Override\n        public boolean isCacheable() {\n          return true;\n        }\n\n        @Override\n        public DocIdSetIterator iterator() {\n          return new DocIdSetIterator() {\n            final Bits liveDocs = MultiFields.getLiveDocs(reader);\n            private int next = -1;\n\n            @Override\n            public int advance(int target) {\n              if (target > next) {\n                next = target - 1;\n              }\n              return nextDoc();\n            }\n\n            @Override\n            public int docID() {\n              return next;\n            }\n\n            @Override\n            public int nextDoc() {\n              do {\n                ++next;\n              } while (next < maxDoc && liveDocs != null && !liveDocs.get(next));\n\n              return next < maxDoc ? next : NO_MORE_DOCS;\n            }\n\n            @Override\n            public long cost() {\n              return maxDoc;\n            }\n          };\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6":["7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","7530de27b87b961b51f01bd1299b7004d46e8823"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a"],"7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a":["7530de27b87b961b51f01bd1299b7004d46e8823"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7530de27b87b961b51f01bd1299b7004d46e8823":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6"]},"commit2Childs":{"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","fe33227f6805edab2036cbb80645cc4e2d1fa424","7530de27b87b961b51f01bd1299b7004d46e8823"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","fe33227f6805edab2036cbb80645cc4e2d1fa424","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}