{"path":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/ICUNormalizer2FilterFactory#init(Map[String,String]).mjava","commits":[{"id":"f06d2946e1cf81da42cf64135b5af1fdf4fdac30","date":1343107672,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/ICUNormalizer2FilterFactory#init(Map[String,String]).mjava","pathOld":"solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/ICUNormalizer2FilterFactory#init(Map[String,String]).mjava","sourceNew":"  // TODO: support custom normalization\n  @Override\n  public void init(Map<String,String> args) {\n    super.init(args);\n    String name = args.get(\"name\");\n    if (name == null)\n      name = \"nfkc_cf\";\n    String mode = args.get(\"mode\");\n    if (mode == null)\n      mode = \"compose\";\n    \n    if (mode.equals(\"compose\"))\n      normalizer = Normalizer2.getInstance(null, name, Normalizer2.Mode.COMPOSE);\n    else if (mode.equals(\"decompose\"))\n      normalizer = Normalizer2.getInstance(null, name, Normalizer2.Mode.DECOMPOSE);\n    else \n      throw new InitializationException(\"Invalid mode: \" + mode);\n    \n    String filter = args.get(\"filter\");\n    if (filter != null) {\n      UnicodeSet set = new UnicodeSet(filter);\n      if (!set.isEmpty()) {\n        set.freeze();\n        normalizer = new FilteredNormalizer2(normalizer, set);\n      }\n    }\n  }\n\n","sourceOld":"  // TODO: support custom normalization\n  @Override\n  public void init(Map<String,String> args) {\n    super.init(args);\n    String name = args.get(\"name\");\n    if (name == null)\n      name = \"nfkc_cf\";\n    String mode = args.get(\"mode\");\n    if (mode == null)\n      mode = \"compose\";\n    \n    if (mode.equals(\"compose\"))\n      normalizer = Normalizer2.getInstance(null, name, Normalizer2.Mode.COMPOSE);\n    else if (mode.equals(\"decompose\"))\n      normalizer = Normalizer2.getInstance(null, name, Normalizer2.Mode.DECOMPOSE);\n    else \n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid mode: \" + mode);\n    \n    String filter = args.get(\"filter\");\n    if (filter != null) {\n      UnicodeSet set = new UnicodeSet(filter);\n      if (!set.isEmpty()) {\n        set.freeze();\n        normalizer = new FilteredNormalizer2(normalizer, set);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/ICUNormalizer2FilterFactory#init(Map[String,String]).mjava","pathOld":"solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/ICUNormalizer2FilterFactory#init(Map[String,String]).mjava","sourceNew":"  // TODO: support custom normalization\n  @Override\n  public void init(Map<String,String> args) {\n    super.init(args);\n    String name = args.get(\"name\");\n    if (name == null)\n      name = \"nfkc_cf\";\n    String mode = args.get(\"mode\");\n    if (mode == null)\n      mode = \"compose\";\n    \n    if (mode.equals(\"compose\"))\n      normalizer = Normalizer2.getInstance(null, name, Normalizer2.Mode.COMPOSE);\n    else if (mode.equals(\"decompose\"))\n      normalizer = Normalizer2.getInstance(null, name, Normalizer2.Mode.DECOMPOSE);\n    else \n      throw new InitializationException(\"Invalid mode: \" + mode);\n    \n    String filter = args.get(\"filter\");\n    if (filter != null) {\n      UnicodeSet set = new UnicodeSet(filter);\n      if (!set.isEmpty()) {\n        set.freeze();\n        normalizer = new FilteredNormalizer2(normalizer, set);\n      }\n    }\n  }\n\n","sourceOld":"  // TODO: support custom normalization\n  @Override\n  public void init(Map<String,String> args) {\n    super.init(args);\n    String name = args.get(\"name\");\n    if (name == null)\n      name = \"nfkc_cf\";\n    String mode = args.get(\"mode\");\n    if (mode == null)\n      mode = \"compose\";\n    \n    if (mode.equals(\"compose\"))\n      normalizer = Normalizer2.getInstance(null, name, Normalizer2.Mode.COMPOSE);\n    else if (mode.equals(\"decompose\"))\n      normalizer = Normalizer2.getInstance(null, name, Normalizer2.Mode.DECOMPOSE);\n    else \n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid mode: \" + mode);\n    \n    String filter = args.get(\"filter\");\n    if (filter != null) {\n      UnicodeSet set = new UnicodeSet(filter);\n      if (!set.isEmpty()) {\n        set.freeze();\n        normalizer = new FilteredNormalizer2(normalizer, set);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6f80818731469e00f54165ec94aae2db868ea05","date":1343266866,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/ICUNormalizer2FilterFactory#init(Map[String,String]).mjava","pathOld":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/ICUNormalizer2FilterFactory#init(Map[String,String]).mjava","sourceNew":"  // TODO: support custom normalization\n  @Override\n  public void init(Map<String,String> args) {\n    super.init(args);\n    String name = args.get(\"name\");\n    if (name == null)\n      name = \"nfkc_cf\";\n    String mode = args.get(\"mode\");\n    if (mode == null)\n      mode = \"compose\";\n    \n    if (mode.equals(\"compose\"))\n      normalizer = Normalizer2.getInstance(null, name, Normalizer2.Mode.COMPOSE);\n    else if (mode.equals(\"decompose\"))\n      normalizer = Normalizer2.getInstance(null, name, Normalizer2.Mode.DECOMPOSE);\n    else \n      throw new IllegalArgumentException(\"Invalid mode: \" + mode);\n    \n    String filter = args.get(\"filter\");\n    if (filter != null) {\n      UnicodeSet set = new UnicodeSet(filter);\n      if (!set.isEmpty()) {\n        set.freeze();\n        normalizer = new FilteredNormalizer2(normalizer, set);\n      }\n    }\n  }\n\n","sourceOld":"  // TODO: support custom normalization\n  @Override\n  public void init(Map<String,String> args) {\n    super.init(args);\n    String name = args.get(\"name\");\n    if (name == null)\n      name = \"nfkc_cf\";\n    String mode = args.get(\"mode\");\n    if (mode == null)\n      mode = \"compose\";\n    \n    if (mode.equals(\"compose\"))\n      normalizer = Normalizer2.getInstance(null, name, Normalizer2.Mode.COMPOSE);\n    else if (mode.equals(\"decompose\"))\n      normalizer = Normalizer2.getInstance(null, name, Normalizer2.Mode.DECOMPOSE);\n    else \n      throw new InitializationException(\"Invalid mode: \" + mode);\n    \n    String filter = args.get(\"filter\");\n    if (filter != null) {\n      UnicodeSet set = new UnicodeSet(filter);\n      if (!set.isEmpty()) {\n        set.freeze();\n        normalizer = new FilteredNormalizer2(normalizer, set);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/ICUNormalizer2FilterFactory#init(Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  // TODO: support custom normalization\n  @Override\n  public void init(Map<String,String> args) {\n    super.init(args);\n    String name = args.get(\"name\");\n    if (name == null)\n      name = \"nfkc_cf\";\n    String mode = args.get(\"mode\");\n    if (mode == null)\n      mode = \"compose\";\n    \n    if (mode.equals(\"compose\"))\n      normalizer = Normalizer2.getInstance(null, name, Normalizer2.Mode.COMPOSE);\n    else if (mode.equals(\"decompose\"))\n      normalizer = Normalizer2.getInstance(null, name, Normalizer2.Mode.DECOMPOSE);\n    else \n      throw new IllegalArgumentException(\"Invalid mode: \" + mode);\n    \n    String filter = args.get(\"filter\");\n    if (filter != null) {\n      UnicodeSet set = new UnicodeSet(filter);\n      if (!set.isEmpty()) {\n        set.freeze();\n        normalizer = new FilteredNormalizer2(normalizer, set);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/ICUNormalizer2FilterFactory#init(Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  // TODO: support custom normalization\n  @Override\n  public void init(Map<String,String> args) {\n    super.init(args);\n    String name = args.get(\"name\");\n    if (name == null)\n      name = \"nfkc_cf\";\n    String mode = args.get(\"mode\");\n    if (mode == null)\n      mode = \"compose\";\n    \n    if (mode.equals(\"compose\"))\n      normalizer = Normalizer2.getInstance(null, name, Normalizer2.Mode.COMPOSE);\n    else if (mode.equals(\"decompose\"))\n      normalizer = Normalizer2.getInstance(null, name, Normalizer2.Mode.DECOMPOSE);\n    else \n      throw new IllegalArgumentException(\"Invalid mode: \" + mode);\n    \n    String filter = args.get(\"filter\");\n    if (filter != null) {\n      UnicodeSet set = new UnicodeSet(filter);\n      if (!set.isEmpty()) {\n        set.freeze();\n        normalizer = new FilteredNormalizer2(normalizer, set);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/ICUNormalizer2FilterFactory#ICUNormalizer2FilterFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/ICUNormalizer2FilterFactory#init(Map[String,String]).mjava","sourceNew":"  /** Creates a new ICUNormalizer2FilterFactory */\n  public ICUNormalizer2FilterFactory(Map<String,String> args) {\n    super(args);\n    String name = args.remove(\"name\");\n    if (name == null)\n      name = \"nfkc_cf\";\n    String mode = args.remove(\"mode\");\n    if (mode == null)\n      mode = \"compose\";\n    \n    Normalizer2 normalizer;\n    if (mode.equals(\"compose\"))\n      normalizer = Normalizer2.getInstance(null, name, Normalizer2.Mode.COMPOSE);\n    else if (mode.equals(\"decompose\"))\n      normalizer = Normalizer2.getInstance(null, name, Normalizer2.Mode.DECOMPOSE);\n    else \n      throw new IllegalArgumentException(\"Invalid mode: \" + mode);\n    \n    String filter = args.remove(\"filter\");\n    if (filter != null) {\n      UnicodeSet set = new UnicodeSet(filter);\n      if (!set.isEmpty()) {\n        set.freeze();\n        normalizer = new FilteredNormalizer2(normalizer, set);\n      }\n    }\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n    this.normalizer = normalizer;\n  }\n\n","sourceOld":"  // TODO: support custom normalization\n  @Override\n  public void init(Map<String,String> args) {\n    super.init(args);\n    String name = args.get(\"name\");\n    if (name == null)\n      name = \"nfkc_cf\";\n    String mode = args.get(\"mode\");\n    if (mode == null)\n      mode = \"compose\";\n    \n    if (mode.equals(\"compose\"))\n      normalizer = Normalizer2.getInstance(null, name, Normalizer2.Mode.COMPOSE);\n    else if (mode.equals(\"decompose\"))\n      normalizer = Normalizer2.getInstance(null, name, Normalizer2.Mode.DECOMPOSE);\n    else \n      throw new IllegalArgumentException(\"Invalid mode: \" + mode);\n    \n    String filter = args.get(\"filter\");\n    if (filter != null) {\n      UnicodeSet set = new UnicodeSet(filter);\n      if (!set.isEmpty()) {\n        set.freeze();\n        normalizer = new FilteredNormalizer2(normalizer, set);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f6f80818731469e00f54165ec94aae2db868ea05"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f6f80818731469e00f54165ec94aae2db868ea05"],"f6f80818731469e00f54165ec94aae2db868ea05":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["f6f80818731469e00f54165ec94aae2db868ea05"],"f06d2946e1cf81da42cf64135b5af1fdf4fdac30":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f06d2946e1cf81da42cf64135b5af1fdf4fdac30"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","f06d2946e1cf81da42cf64135b5af1fdf4fdac30","5a1a22b1ad88b436661458df567f3fdb446392a4"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"f6f80818731469e00f54165ec94aae2db868ea05":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f06d2946e1cf81da42cf64135b5af1fdf4fdac30":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["f6f80818731469e00f54165ec94aae2db868ea05"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}