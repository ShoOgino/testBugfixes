{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/StreamingTest#testTuple().mjava","commits":[{"id":"91814ce09be68efd0626969632e79ae47d8876d4","date":1425951537,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/StreamingTest#testTuple().mjava","pathOld":"/dev/null","sourceNew":"  private void testTuple() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"5.1\", \"s_multi\", \"a\", \"s_multi\", \"b\", \"i_multi\", \"1\", \"i_multi\", \"2\", \"f_multi\", \"1.2\", \"f_multi\", \"1.3\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f,s_multi,i_multi,f_multi\",\"sort\", \"a_s asc\", \"partitionKeys\",\"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n    Tuple tuple = tuples.get(0);\n\n    String s = tuple.getString(\"a_s\");\n    assert(s.equals(\"hello0\")) ;\n\n    long l = tuple.getLong(\"a_i\");\n    assert(l == 0);\n\n    double d = tuple.getDouble(\"a_f\");\n    assert(d == 5.1);\n\n\n    List<String> stringList = tuple.getStrings(\"s_multi\");\n    assert(stringList.get(0).equals(\"a\"));\n    assert(stringList.get(1).equals(\"b\"));\n\n    List<Long> longList = tuple.getLongs(\"i_multi\");\n    assert(longList.get(0).longValue() == 1);\n    assert(longList.get(1).longValue() == 2);\n\n    List<Double> doubleList = tuple.getDoubles(\"f_multi\");\n    assert(doubleList.get(0).doubleValue() == 1.2);\n    assert(doubleList.get(1).doubleValue() == 1.3);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42f03b407cd85abd6edd2a1fe7cab9990164aa4b","date":1427303865,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/StreamingTest#testTuple().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/StreamingTest#testTuple().mjava","sourceNew":"  private void testTuple() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"5.1\", \"s_multi\", \"a\", \"s_multi\", \"b\", \"i_multi\", \"1\", \"i_multi\", \"2\", \"f_multi\", \"1.2\", \"f_multi\", \"1.3\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f,s_multi,i_multi,f_multi\",\"sort\", \"a_s asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n    Tuple tuple = tuples.get(0);\n\n    String s = tuple.getString(\"a_s\");\n    assert(s.equals(\"hello0\")) ;\n\n    long l = tuple.getLong(\"a_i\");\n    assert(l == 0);\n\n    double d = tuple.getDouble(\"a_f\");\n    assert(d == 5.1);\n\n\n    List<String> stringList = tuple.getStrings(\"s_multi\");\n    assert(stringList.get(0).equals(\"a\"));\n    assert(stringList.get(1).equals(\"b\"));\n\n    List<Long> longList = tuple.getLongs(\"i_multi\");\n    assert(longList.get(0).longValue() == 1);\n    assert(longList.get(1).longValue() == 2);\n\n    List<Double> doubleList = tuple.getDoubles(\"f_multi\");\n    assert(doubleList.get(0).doubleValue() == 1.2);\n    assert(doubleList.get(1).doubleValue() == 1.3);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":"  private void testTuple() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"5.1\", \"s_multi\", \"a\", \"s_multi\", \"b\", \"i_multi\", \"1\", \"i_multi\", \"2\", \"f_multi\", \"1.2\", \"f_multi\", \"1.3\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f,s_multi,i_multi,f_multi\",\"sort\", \"a_s asc\", \"partitionKeys\",\"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n    Tuple tuple = tuples.get(0);\n\n    String s = tuple.getString(\"a_s\");\n    assert(s.equals(\"hello0\")) ;\n\n    long l = tuple.getLong(\"a_i\");\n    assert(l == 0);\n\n    double d = tuple.getDouble(\"a_f\");\n    assert(d == 5.1);\n\n\n    List<String> stringList = tuple.getStrings(\"s_multi\");\n    assert(stringList.get(0).equals(\"a\"));\n    assert(stringList.get(1).equals(\"b\"));\n\n    List<Long> longList = tuple.getLongs(\"i_multi\");\n    assert(longList.get(0).longValue() == 1);\n    assert(longList.get(1).longValue() == 2);\n\n    List<Double> doubleList = tuple.getDoubles(\"f_multi\");\n    assert(doubleList.get(0).doubleValue() == 1.2);\n    assert(doubleList.get(1).doubleValue() == 1.3);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/StreamingTest#testTuple().mjava","pathOld":"/dev/null","sourceNew":"  private void testTuple() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"5.1\", \"s_multi\", \"a\", \"s_multi\", \"b\", \"i_multi\", \"1\", \"i_multi\", \"2\", \"f_multi\", \"1.2\", \"f_multi\", \"1.3\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f,s_multi,i_multi,f_multi\",\"sort\", \"a_s asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n    Tuple tuple = tuples.get(0);\n\n    String s = tuple.getString(\"a_s\");\n    assert(s.equals(\"hello0\")) ;\n\n    long l = tuple.getLong(\"a_i\");\n    assert(l == 0);\n\n    double d = tuple.getDouble(\"a_f\");\n    assert(d == 5.1);\n\n\n    List<String> stringList = tuple.getStrings(\"s_multi\");\n    assert(stringList.get(0).equals(\"a\"));\n    assert(stringList.get(1).equals(\"b\"));\n\n    List<Long> longList = tuple.getLongs(\"i_multi\");\n    assert(longList.get(0).longValue() == 1);\n    assert(longList.get(1).longValue() == 2);\n\n    List<Double> doubleList = tuple.getDoubles(\"f_multi\");\n    assert(doubleList.get(0).doubleValue() == 1.2);\n    assert(doubleList.get(1).doubleValue() == 1.3);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f00f1c5fad501b66705121feb623f8cfbb6712f9","date":1431347838,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testTuple().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/StreamingTest#testTuple().mjava","sourceNew":"  private void testTuple() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"5.1\", \"s_multi\", \"a\", \"s_multi\", \"b\", \"i_multi\", \"1\", \"i_multi\", \"2\", \"f_multi\", \"1.2\", \"f_multi\", \"1.3\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f,s_multi,i_multi,f_multi\",\"sort\", \"a_s asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n    Tuple tuple = tuples.get(0);\n\n    String s = tuple.getString(\"a_s\");\n    assert(s.equals(\"hello0\")) ;\n\n    long l = tuple.getLong(\"a_i\");\n    assert(l == 0);\n\n    double d = tuple.getDouble(\"a_f\");\n    assert(d == 5.1);\n\n\n    List<String> stringList = tuple.getStrings(\"s_multi\");\n    assert(stringList.get(0).equals(\"a\"));\n    assert(stringList.get(1).equals(\"b\"));\n\n    List<Long> longList = tuple.getLongs(\"i_multi\");\n    assert(longList.get(0).longValue() == 1);\n    assert(longList.get(1).longValue() == 2);\n\n    List<Double> doubleList = tuple.getDoubles(\"f_multi\");\n    assert(doubleList.get(0).doubleValue() == 1.2);\n    assert(doubleList.get(1).doubleValue() == 1.3);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":"  private void testTuple() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"5.1\", \"s_multi\", \"a\", \"s_multi\", \"b\", \"i_multi\", \"1\", \"i_multi\", \"2\", \"f_multi\", \"1.2\", \"f_multi\", \"1.3\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f,s_multi,i_multi,f_multi\",\"sort\", \"a_s asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n    Tuple tuple = tuples.get(0);\n\n    String s = tuple.getString(\"a_s\");\n    assert(s.equals(\"hello0\")) ;\n\n    long l = tuple.getLong(\"a_i\");\n    assert(l == 0);\n\n    double d = tuple.getDouble(\"a_f\");\n    assert(d == 5.1);\n\n\n    List<String> stringList = tuple.getStrings(\"s_multi\");\n    assert(stringList.get(0).equals(\"a\"));\n    assert(stringList.get(1).equals(\"b\"));\n\n    List<Long> longList = tuple.getLongs(\"i_multi\");\n    assert(longList.get(0).longValue() == 1);\n    assert(longList.get(1).longValue() == 2);\n\n    List<Double> doubleList = tuple.getDoubles(\"f_multi\");\n    assert(doubleList.get(0).doubleValue() == 1.2);\n    assert(doubleList.get(1).doubleValue() == 1.3);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["42f03b407cd85abd6edd2a1fe7cab9990164aa4b"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","42f03b407cd85abd6edd2a1fe7cab9990164aa4b"],"42f03b407cd85abd6edd2a1fe7cab9990164aa4b":["91814ce09be68efd0626969632e79ae47d8876d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"91814ce09be68efd0626969632e79ae47d8876d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f00f1c5fad501b66705121feb623f8cfbb6712f9"]},"commit2Childs":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"42f03b407cd85abd6edd2a1fe7cab9990164aa4b":["f00f1c5fad501b66705121feb623f8cfbb6712f9","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","91814ce09be68efd0626969632e79ae47d8876d4"],"91814ce09be68efd0626969632e79ae47d8876d4":["42f03b407cd85abd6edd2a1fe7cab9990164aa4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}