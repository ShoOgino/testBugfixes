{"path":"lucene/core/src/test/org/apache/lucene/search/TestDimensionalRangeQuery#testBasicSortedSet().mjava","commits":[{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDimensionalRangeQuery#testBasicSortedSet().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasicSortedSet() throws Exception {\n    Directory dir = getDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setCodec(getCodec());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new DimensionalField(\"value\", toUTF8(\"abc\")));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new DimensionalField(\"value\", toUTF8(\"def\")));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n\n    IndexSearcher s = newSearcher(r);\n\n    assertEquals(1, s.count(new DimensionalRangeQuery(\"value\",\n                                                      toUTF8(\"aaa\"),\n                                                      true,\n                                                      toUTF8(\"bbb\"),\n                                                      true)));\n    assertEquals(1, s.count(new DimensionalRangeQuery(\"value\",\n                                                      toUTF8(\"c\", 3),\n                                                      true,\n                                                      toUTF8(\"e\", 3),\n                                                      true)));\n    assertEquals(2, s.count(new DimensionalRangeQuery(\"value\",\n                                                      toUTF8(\"a\", 3),\n                                                      true,\n                                                      toUTF8(\"z\", 3),\n                                                      true)));\n    assertEquals(1, s.count(new DimensionalRangeQuery(\"value\",\n                                                      null,\n                                                      true,\n                                                      toUTF8(\"abc\"),\n                                                      true)));\n    assertEquals(1, s.count(new DimensionalRangeQuery(\"value\",\n                                                      toUTF8(\"a\", 3),\n                                                      true,\n                                                      toUTF8(\"abc\"),\n                                                      true)));\n    assertEquals(0, s.count(new DimensionalRangeQuery(\"value\",\n                                                      toUTF8(\"a\", 3),\n                                                      true,\n                                                      toUTF8(\"abc\"),\n                                                      false)));\n    assertEquals(1, s.count(new DimensionalRangeQuery(\"value\",\n                                                      toUTF8(\"def\"),\n                                                      true,\n                                                      null,\n                                                      false)));\n    assertEquals(1, s.count(new DimensionalRangeQuery(\"value\",\n                                                      toUTF8((\"def\")),\n                                                      true,\n                                                      toUTF8(\"z\", 3),\n                                                      true)));\n    assertEquals(0, s.count(new DimensionalRangeQuery(\"value\",\n                                                      toUTF8(\"def\"),\n                                                      false,\n                                                      toUTF8(\"z\", 3),\n                                                      true)));\n\n    IOUtils.close(r, w, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDimensionalRangeQuery#testBasicSortedSet().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDimensionalRangeQuery#testBasicSortedSet().mjava","sourceNew":"  public void testBasicSortedSet() throws Exception {\n    Directory dir = getDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setCodec(getCodec());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new DimensionalBinaryField(\"value\", toUTF8(\"abc\")));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new DimensionalBinaryField(\"value\", toUTF8(\"def\")));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n\n    IndexSearcher s = newSearcher(r);\n\n    assertEquals(1, s.count(DimensionalRangeQuery.new1DBinaryRange(\"value\",\n                                                                   toUTF8(\"aaa\"),\n                                                                   true,\n                                                                   toUTF8(\"bbb\"),\n                                                                   true)));\n    assertEquals(1, s.count(DimensionalRangeQuery.new1DBinaryRange(\"value\",\n                                                                   toUTF8(\"c\", 3),\n                                                                   true,\n                                                                   toUTF8(\"e\", 3),\n                                                                   true)));\n    assertEquals(2, s.count(DimensionalRangeQuery.new1DBinaryRange(\"value\",\n                                                                   toUTF8(\"a\", 3),\n                                                                   true,\n                                                                   toUTF8(\"z\", 3),\n                                                                   true)));\n    assertEquals(1, s.count(DimensionalRangeQuery.new1DBinaryRange(\"value\",\n                                                                   null,\n                                                                   true,\n                                                                   toUTF8(\"abc\"),\n                                                                   true)));\n    assertEquals(1, s.count(DimensionalRangeQuery.new1DBinaryRange(\"value\",\n                                                                   toUTF8(\"a\", 3),\n                                                                   true,\n                                                                   toUTF8(\"abc\"),\n                                                                   true)));\n    assertEquals(0, s.count(DimensionalRangeQuery.new1DBinaryRange(\"value\",\n                                                                   toUTF8(\"a\", 3),\n                                                                   true,\n                                                                   toUTF8(\"abc\"),\n                                                                   false)));\n    assertEquals(1, s.count(DimensionalRangeQuery.new1DBinaryRange(\"value\",\n                                                                   toUTF8(\"def\"),\n                                                                   true,\n                                                                   null,\n                                                                   false)));\n    assertEquals(1, s.count(DimensionalRangeQuery.new1DBinaryRange(\"value\",\n                                                                   toUTF8((\"def\")),\n                                                                   true,\n                                                                   toUTF8(\"z\", 3),\n                                                                   true)));\n    assertEquals(0, s.count(DimensionalRangeQuery.new1DBinaryRange(\"value\",\n                                                                   toUTF8(\"def\"),\n                                                                   false,\n                                                                   toUTF8(\"z\", 3),\n                                                                   true)));\n\n    IOUtils.close(r, w, dir);\n  }\n\n","sourceOld":"  public void testBasicSortedSet() throws Exception {\n    Directory dir = getDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setCodec(getCodec());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new DimensionalField(\"value\", toUTF8(\"abc\")));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new DimensionalField(\"value\", toUTF8(\"def\")));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n\n    IndexSearcher s = newSearcher(r);\n\n    assertEquals(1, s.count(new DimensionalRangeQuery(\"value\",\n                                                      toUTF8(\"aaa\"),\n                                                      true,\n                                                      toUTF8(\"bbb\"),\n                                                      true)));\n    assertEquals(1, s.count(new DimensionalRangeQuery(\"value\",\n                                                      toUTF8(\"c\", 3),\n                                                      true,\n                                                      toUTF8(\"e\", 3),\n                                                      true)));\n    assertEquals(2, s.count(new DimensionalRangeQuery(\"value\",\n                                                      toUTF8(\"a\", 3),\n                                                      true,\n                                                      toUTF8(\"z\", 3),\n                                                      true)));\n    assertEquals(1, s.count(new DimensionalRangeQuery(\"value\",\n                                                      null,\n                                                      true,\n                                                      toUTF8(\"abc\"),\n                                                      true)));\n    assertEquals(1, s.count(new DimensionalRangeQuery(\"value\",\n                                                      toUTF8(\"a\", 3),\n                                                      true,\n                                                      toUTF8(\"abc\"),\n                                                      true)));\n    assertEquals(0, s.count(new DimensionalRangeQuery(\"value\",\n                                                      toUTF8(\"a\", 3),\n                                                      true,\n                                                      toUTF8(\"abc\"),\n                                                      false)));\n    assertEquals(1, s.count(new DimensionalRangeQuery(\"value\",\n                                                      toUTF8(\"def\"),\n                                                      true,\n                                                      null,\n                                                      false)));\n    assertEquals(1, s.count(new DimensionalRangeQuery(\"value\",\n                                                      toUTF8((\"def\")),\n                                                      true,\n                                                      toUTF8(\"z\", 3),\n                                                      true)));\n    assertEquals(0, s.count(new DimensionalRangeQuery(\"value\",\n                                                      toUTF8(\"def\"),\n                                                      false,\n                                                      toUTF8(\"z\", 3),\n                                                      true)));\n\n    IOUtils.close(r, w, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDimensionalRangeQuery#testBasicSortedSet().mjava","sourceNew":null,"sourceOld":"  public void testBasicSortedSet() throws Exception {\n    Directory dir = getDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setCodec(getCodec());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new DimensionalBinaryField(\"value\", toUTF8(\"abc\")));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new DimensionalBinaryField(\"value\", toUTF8(\"def\")));\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n\n    IndexSearcher s = newSearcher(r);\n\n    assertEquals(1, s.count(DimensionalRangeQuery.new1DBinaryRange(\"value\",\n                                                                   toUTF8(\"aaa\"),\n                                                                   true,\n                                                                   toUTF8(\"bbb\"),\n                                                                   true)));\n    assertEquals(1, s.count(DimensionalRangeQuery.new1DBinaryRange(\"value\",\n                                                                   toUTF8(\"c\", 3),\n                                                                   true,\n                                                                   toUTF8(\"e\", 3),\n                                                                   true)));\n    assertEquals(2, s.count(DimensionalRangeQuery.new1DBinaryRange(\"value\",\n                                                                   toUTF8(\"a\", 3),\n                                                                   true,\n                                                                   toUTF8(\"z\", 3),\n                                                                   true)));\n    assertEquals(1, s.count(DimensionalRangeQuery.new1DBinaryRange(\"value\",\n                                                                   null,\n                                                                   true,\n                                                                   toUTF8(\"abc\"),\n                                                                   true)));\n    assertEquals(1, s.count(DimensionalRangeQuery.new1DBinaryRange(\"value\",\n                                                                   toUTF8(\"a\", 3),\n                                                                   true,\n                                                                   toUTF8(\"abc\"),\n                                                                   true)));\n    assertEquals(0, s.count(DimensionalRangeQuery.new1DBinaryRange(\"value\",\n                                                                   toUTF8(\"a\", 3),\n                                                                   true,\n                                                                   toUTF8(\"abc\"),\n                                                                   false)));\n    assertEquals(1, s.count(DimensionalRangeQuery.new1DBinaryRange(\"value\",\n                                                                   toUTF8(\"def\"),\n                                                                   true,\n                                                                   null,\n                                                                   false)));\n    assertEquals(1, s.count(DimensionalRangeQuery.new1DBinaryRange(\"value\",\n                                                                   toUTF8((\"def\")),\n                                                                   true,\n                                                                   toUTF8(\"z\", 3),\n                                                                   true)));\n    assertEquals(0, s.count(DimensionalRangeQuery.new1DBinaryRange(\"value\",\n                                                                   toUTF8(\"def\"),\n                                                                   false,\n                                                                   toUTF8(\"z\", 3),\n                                                                   true)));\n\n    IOUtils.close(r, w, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["770342641f7b505eaa8dccdc666158bff2419109"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1904709ea0185dc04e3d77ea01c79e909caf2796":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"770342641f7b505eaa8dccdc666158bff2419109":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["770342641f7b505eaa8dccdc666158bff2419109"],"770342641f7b505eaa8dccdc666158bff2419109":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}