{"path":"solr/core/src/test/org/apache/solr/search/join/GraphQueryTest#testGraph().mjava","commits":[{"id":"49f41ca5b59802ba2b8fb507bb73d5c4bf53db2b","date":1444426023,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/join/GraphQueryTest#testGraph().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testGraph() throws Exception {\n    // 1 -> 2 -> 3 -> ( 4 5 )\n    // 7 -> 1\n    // 8 -> ( 1 2 )\n    assertU(adoc(\"id\", \"doc_1\", \"node_id\", \"1\", \"edge_id\", \"2\", \"text\", \"foo\", \"title\", \"foo10\"));\n    assertU(adoc(\"id\", \"doc_2\", \"node_id\", \"2\", \"edge_id\", \"3\", \"text\", \"foo\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"doc_3\", \"node_id\", \"3\", \"edge_id\", \"4\", \"edge_id\", \"5\", \"table\", \"foo\"));\n    assertU(adoc(\"id\", \"doc_4\", \"node_id\", \"4\", \"table\", \"foo\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"doc_5\", \"node_id\", \"5\", \"edge_id\", \"7\", \"table\", \"bar\"));\n    assertU(adoc(\"id\", \"doc_6\", \"node_id\", \"6\", \"edge_id\", \"3\" ));\n    assertU(adoc(\"id\", \"doc_7\", \"node_id\", \"7\", \"edge_id\", \"1\" ));\n    assertU(adoc(\"id\", \"doc_8\", \"node_id\", \"8\", \"edge_id\", \"1\", \"edge_id\", \"2\" ));\n    assertU(adoc(\"id\", \"doc_9\", \"node_id\", \"9\"));\n    assertU(commit());\n    // update docs so they're in a new segment.\n    assertU(adoc(\"id\", \"doc_1\", \"node_id\", \"1\", \"edge_id\", \"2\", \"text\", \"foo\"));\n    assertU(adoc(\"id\", \"doc_2\", \"node_id\", \"2\", \"edge_id\", \"3\", \"edge_id\", \"9\", \"text\", \"foo11\"));\n    assertU(commit());\n    // a graph for testing traversal filter 10 - 11 -> (12 | 13)\n    assertU(adoc(\"id\", \"doc_10\", \"node_id\", \"10\", \"edge_id\", \"11\", \"title\", \"foo\"));\n    assertU(adoc(\"id\", \"doc_11\", \"node_id\", \"11\", \"edge_id\", \"12\", \"edge_id\", \"13\", \"text\", \"foo11\"));\n    assertU(adoc(\"id\", \"doc_12\", \"node_id\", \"12\", \"text\", \"foo10\"));\n    assertU(adoc(\"id\", \"doc_13\", \"node_id\", \"13\", \"edge_id\", \"12\", \"text\", \"foo10\"));  \n    assertU(commit());\n    // Now we have created a simple graph\n    // start traversal from node id to edge id\n    String gQuery = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\"}id:doc_1\";\n    SolrQueryRequest qr = createRequest(gQuery);\n    assertQ(qr,\"//*[@numFound='7']\");\n    \n    String g2Query = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\" returnRoot=\\\"true\\\" returnOnlyLeaf=\\\"false\\\"}id:doc_8\";\n    qr = createRequest(g2Query);    \n    assertQ(qr,\"//*[@numFound='8']\");\n\n    String g3Query = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\" returnRoot=\\\"false\\\" returnOnlyLeaf=\\\"false\\\"}id:doc_8\";\n    qr = createRequest(g3Query);    \n    assertQ(qr,\"//*[@numFound='7']\");\n    \n    String g4Query = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\" returnRoot=\\\"true\\\" returnOnlyLeaf=\\\"false\\\" traversalFilter=\\\"text:foo11\\\"}id:doc_8\";\n    qr = createRequest(g4Query);    \n    assertQ(qr,\"//*[@numFound='2']\");\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"826e791d635df5093032ca5d1925016bdf0c1df6","date":1454083189,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/join/GraphQueryTest#testGraph().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/GraphQueryTest#testGraph().mjava","sourceNew":"  @Test\n  public void testGraph() throws Exception {\n    // 1 -> 2 -> 3 -> ( 4 5 )\n    // 7 -> 1\n    // 8 -> ( 1 2 )\n    assertU(adoc(\"id\", \"doc_1\", \"node_id\", \"1\", \"edge_id\", \"2\", \"text\", \"foo\", \"title\", \"foo10\"));\n    assertU(adoc(\"id\", \"doc_2\", \"node_id\", \"2\", \"edge_id\", \"3\", \"text\", \"foo\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"doc_3\", \"node_id\", \"3\", \"edge_id\", \"4\", \"edge_id\", \"5\", \"table\", \"foo\"));\n    assertU(adoc(\"id\", \"doc_4\", \"node_id\", \"4\", \"table\", \"foo\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"doc_5\", \"node_id\", \"5\", \"edge_id\", \"7\", \"table\", \"bar\"));\n    assertU(adoc(\"id\", \"doc_6\", \"node_id\", \"6\", \"edge_id\", \"3\" ));\n    assertU(adoc(\"id\", \"doc_7\", \"node_id\", \"7\", \"edge_id\", \"1\" ));\n    assertU(adoc(\"id\", \"doc_8\", \"node_id\", \"8\", \"edge_id\", \"1\", \"edge_id\", \"2\" ));\n    assertU(adoc(\"id\", \"doc_9\", \"node_id\", \"9\"));\n    assertU(commit());\n    // update docs so they're in a new segment.\n    assertU(adoc(\"id\", \"doc_1\", \"node_id\", \"1\", \"edge_id\", \"2\", \"text\", \"foo\"));\n    assertU(adoc(\"id\", \"doc_2\", \"node_id\", \"2\", \"edge_id\", \"3\", \"edge_id\", \"9\", \"text\", \"foo11\"));\n    assertU(commit());\n    // a graph for testing traversal filter 10 - 11 -> (12 | 13)\n    assertU(adoc(\"id\", \"doc_10\", \"node_id\", \"10\", \"edge_id\", \"11\", \"title\", \"foo\"));\n    assertU(adoc(\"id\", \"doc_11\", \"node_id\", \"11\", \"edge_id\", \"12\", \"edge_id\", \"13\", \"text\", \"foo11\"));\n    assertU(adoc(\"id\", \"doc_12\", \"node_id\", \"12\", \"text\", \"foo10\"));\n    assertU(adoc(\"id\", \"doc_13\", \"node_id\", \"13\", \"edge_id\", \"12\", \"text\", \"foo10\"));  \n    assertU(commit());\n    // Now we have created a simple graph\n    // start traversal from node id to edge id\n    String gQuery = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\"}id:doc_1\";\n    SolrQueryRequest qr = createRequest(gQuery);\n    assertQ(qr,\"//*[@numFound='7']\");\n    \n    String g2Query = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\" returnRoot=\\\"true\\\" returnOnlyLeaf=\\\"false\\\"}id:doc_8\";\n    qr = createRequest(g2Query);    \n    assertQ(qr,\"//*[@numFound='8']\");\n\n    String g3Query = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\" returnRoot=\\\"false\\\" returnOnlyLeaf=\\\"false\\\"}id:doc_8\";\n    qr = createRequest(g3Query);    \n    assertQ(qr,\"//*[@numFound='7']\");\n    \n    String g4Query = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\" returnRoot=\\\"true\\\" returnOnlyLeaf=\\\"false\\\" traversalFilter=\\\"text:foo11\\\"}id:doc_8\";\n    qr = createRequest(g4Query);    \n    assertQ(qr,\"//*[@numFound='2']\");\n    \n    String g5Query = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\" returnRoot=\\\"true\\\" returnOnlyLeaf=\\\"false\\\" maxDepth=0}id:doc_8\";\n    qr = createRequest(g5Query);    \n    assertQ(qr,\"//*[@numFound='1']\");  \n\n    String g6Query = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\" returnRoot=\\\"true\\\" returnOnlyLeaf=\\\"false\\\" maxDepth=1}id:doc_8\";\n    qr = createRequest(g6Query);    \n    assertQ(qr,\"//*[@numFound='3']\");\n    \n    String g7Query = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\" returnRoot=\\\"false\\\" returnOnlyLeaf=\\\"false\\\" maxDepth=1}id:doc_8\";\n    qr = createRequest(g7Query);    \n    assertQ(qr,\"//*[@numFound='2']\");\n\n    String g8Query = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\" returnRoot=\\\"false\\\" returnOnlyLeaf=\\\"true\\\" maxDepth=2}id:doc_8\";\n    qr = createRequest(g8Query);    \n    assertQ(qr,\"//*[@numFound='1']\");\n\n    String g9Query = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\" maxDepth=1}id:doc_1\";\n    qr = createRequest(g9Query);    \n    assertQ(qr,\"//*[@numFound='2']\");\n    \n    String g10Query = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\" returnRoot=false maxDepth=1}id:doc_1\";\n    qr = createRequest(g10Query);    \n    assertQ(qr,\"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  @Test\n  public void testGraph() throws Exception {\n    // 1 -> 2 -> 3 -> ( 4 5 )\n    // 7 -> 1\n    // 8 -> ( 1 2 )\n    assertU(adoc(\"id\", \"doc_1\", \"node_id\", \"1\", \"edge_id\", \"2\", \"text\", \"foo\", \"title\", \"foo10\"));\n    assertU(adoc(\"id\", \"doc_2\", \"node_id\", \"2\", \"edge_id\", \"3\", \"text\", \"foo\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"doc_3\", \"node_id\", \"3\", \"edge_id\", \"4\", \"edge_id\", \"5\", \"table\", \"foo\"));\n    assertU(adoc(\"id\", \"doc_4\", \"node_id\", \"4\", \"table\", \"foo\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"doc_5\", \"node_id\", \"5\", \"edge_id\", \"7\", \"table\", \"bar\"));\n    assertU(adoc(\"id\", \"doc_6\", \"node_id\", \"6\", \"edge_id\", \"3\" ));\n    assertU(adoc(\"id\", \"doc_7\", \"node_id\", \"7\", \"edge_id\", \"1\" ));\n    assertU(adoc(\"id\", \"doc_8\", \"node_id\", \"8\", \"edge_id\", \"1\", \"edge_id\", \"2\" ));\n    assertU(adoc(\"id\", \"doc_9\", \"node_id\", \"9\"));\n    assertU(commit());\n    // update docs so they're in a new segment.\n    assertU(adoc(\"id\", \"doc_1\", \"node_id\", \"1\", \"edge_id\", \"2\", \"text\", \"foo\"));\n    assertU(adoc(\"id\", \"doc_2\", \"node_id\", \"2\", \"edge_id\", \"3\", \"edge_id\", \"9\", \"text\", \"foo11\"));\n    assertU(commit());\n    // a graph for testing traversal filter 10 - 11 -> (12 | 13)\n    assertU(adoc(\"id\", \"doc_10\", \"node_id\", \"10\", \"edge_id\", \"11\", \"title\", \"foo\"));\n    assertU(adoc(\"id\", \"doc_11\", \"node_id\", \"11\", \"edge_id\", \"12\", \"edge_id\", \"13\", \"text\", \"foo11\"));\n    assertU(adoc(\"id\", \"doc_12\", \"node_id\", \"12\", \"text\", \"foo10\"));\n    assertU(adoc(\"id\", \"doc_13\", \"node_id\", \"13\", \"edge_id\", \"12\", \"text\", \"foo10\"));  \n    assertU(commit());\n    // Now we have created a simple graph\n    // start traversal from node id to edge id\n    String gQuery = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\"}id:doc_1\";\n    SolrQueryRequest qr = createRequest(gQuery);\n    assertQ(qr,\"//*[@numFound='7']\");\n    \n    String g2Query = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\" returnRoot=\\\"true\\\" returnOnlyLeaf=\\\"false\\\"}id:doc_8\";\n    qr = createRequest(g2Query);    \n    assertQ(qr,\"//*[@numFound='8']\");\n\n    String g3Query = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\" returnRoot=\\\"false\\\" returnOnlyLeaf=\\\"false\\\"}id:doc_8\";\n    qr = createRequest(g3Query);    \n    assertQ(qr,\"//*[@numFound='7']\");\n    \n    String g4Query = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\" returnRoot=\\\"true\\\" returnOnlyLeaf=\\\"false\\\" traversalFilter=\\\"text:foo11\\\"}id:doc_8\";\n    qr = createRequest(g4Query);    \n    assertQ(qr,\"//*[@numFound='2']\");\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d15e34266d75e4e8b95da046cd0afc812367b38","date":1454246129,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/join/GraphQueryTest#testGraph().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/GraphQueryTest#testGraph().mjava","sourceNew":"  @Test\n  public void testGraph() throws Exception {\n    // 1 -> 2 -> 3 -> ( 4 5 )\n    // 7 -> 1\n    // 8 -> ( 1 2 )\n    assertU(adoc(\"id\", \"doc_1\", \"node_id\", \"1\", \"edge_id\", \"2\", \"text\", \"foo\", \"title\", \"foo10\"));\n    assertU(adoc(\"id\", \"doc_2\", \"node_id\", \"2\", \"edge_id\", \"3\", \"text\", \"foo\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"doc_3\", \"node_id\", \"3\", \"edge_id\", \"4\", \"edge_id\", \"5\", \"table\", \"foo\"));\n    assertU(adoc(\"id\", \"doc_4\", \"node_id\", \"4\", \"table\", \"foo\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"doc_5\", \"node_id\", \"5\", \"edge_id\", \"7\", \"table\", \"bar\"));\n    assertU(adoc(\"id\", \"doc_6\", \"node_id\", \"6\", \"edge_id\", \"3\" ));\n    assertU(adoc(\"id\", \"doc_7\", \"node_id\", \"7\", \"edge_id\", \"1\" ));\n    assertU(adoc(\"id\", \"doc_8\", \"node_id\", \"8\", \"edge_id\", \"1\", \"edge_id\", \"2\" ));\n    assertU(adoc(\"id\", \"doc_9\", \"node_id\", \"9\"));\n    assertU(commit());\n    // update docs so they're in a new segment.\n    assertU(adoc(\"id\", \"doc_1\", \"node_id\", \"1\", \"edge_id\", \"2\", \"text\", \"foo\"));\n    assertU(adoc(\"id\", \"doc_2\", \"node_id\", \"2\", \"edge_id\", \"3\", \"edge_id\", \"9\", \"text\", \"foo11\"));\n    assertU(commit());\n    // a graph for testing traversal filter 10 - 11 -> (12 | 13)\n    assertU(adoc(\"id\", \"doc_10\", \"node_id\", \"10\", \"edge_id\", \"11\", \"title\", \"foo\"));\n    assertU(adoc(\"id\", \"doc_11\", \"node_id\", \"11\", \"edge_id\", \"12\", \"edge_id\", \"13\", \"text\", \"foo11\"));\n    assertU(adoc(\"id\", \"doc_12\", \"node_id\", \"12\", \"text\", \"foo10\"));\n    assertU(adoc(\"id\", \"doc_13\", \"node_id\", \"13\", \"edge_id\", \"12\", \"text\", \"foo10\"));  \n    assertU(commit());\n    // Now we have created a simple graph\n    // start traversal from node id to edge id\n    String gQuery = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\"}id:doc_1\";\n    SolrQueryRequest qr = createRequest(gQuery);\n    assertQ(qr,\"//*[@numFound='7']\");\n    \n    String g2Query = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\" returnRoot=\\\"true\\\" returnOnlyLeaf=\\\"false\\\"}id:doc_8\";\n    qr = createRequest(g2Query);    \n    assertQ(qr,\"//*[@numFound='8']\");\n\n    String g3Query = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\" returnRoot=\\\"false\\\" returnOnlyLeaf=\\\"false\\\"}id:doc_8\";\n    qr = createRequest(g3Query);    \n    assertQ(qr,\"//*[@numFound='7']\");\n    \n    String g4Query = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\" returnRoot=\\\"true\\\" returnOnlyLeaf=\\\"false\\\" traversalFilter=\\\"text:foo11\\\"}id:doc_8\";\n    qr = createRequest(g4Query);    \n    assertQ(qr,\"//*[@numFound='2']\");\n    \n    String g5Query = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\" returnRoot=\\\"true\\\" returnOnlyLeaf=\\\"false\\\" maxDepth=0}id:doc_8\";\n    qr = createRequest(g5Query);    \n    assertQ(qr,\"//*[@numFound='1']\");  \n\n    String g6Query = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\" returnRoot=\\\"true\\\" returnOnlyLeaf=\\\"false\\\" maxDepth=1}id:doc_8\";\n    qr = createRequest(g6Query);    \n    assertQ(qr,\"//*[@numFound='3']\");\n    \n    String g7Query = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\" returnRoot=\\\"false\\\" returnOnlyLeaf=\\\"false\\\" maxDepth=1}id:doc_8\";\n    qr = createRequest(g7Query);    \n    assertQ(qr,\"//*[@numFound='2']\");\n\n    String g8Query = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\" returnRoot=\\\"false\\\" returnOnlyLeaf=\\\"true\\\" maxDepth=2}id:doc_8\";\n    qr = createRequest(g8Query);    \n    assertQ(qr,\"//*[@numFound='1']\");\n\n    String g9Query = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\" maxDepth=1}id:doc_1\";\n    qr = createRequest(g9Query);    \n    assertQ(qr,\"//*[@numFound='2']\");\n    \n    String g10Query = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\" returnRoot=false maxDepth=1}id:doc_1\";\n    qr = createRequest(g10Query);    \n    assertQ(qr,\"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  @Test\n  public void testGraph() throws Exception {\n    // 1 -> 2 -> 3 -> ( 4 5 )\n    // 7 -> 1\n    // 8 -> ( 1 2 )\n    assertU(adoc(\"id\", \"doc_1\", \"node_id\", \"1\", \"edge_id\", \"2\", \"text\", \"foo\", \"title\", \"foo10\"));\n    assertU(adoc(\"id\", \"doc_2\", \"node_id\", \"2\", \"edge_id\", \"3\", \"text\", \"foo\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"doc_3\", \"node_id\", \"3\", \"edge_id\", \"4\", \"edge_id\", \"5\", \"table\", \"foo\"));\n    assertU(adoc(\"id\", \"doc_4\", \"node_id\", \"4\", \"table\", \"foo\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"doc_5\", \"node_id\", \"5\", \"edge_id\", \"7\", \"table\", \"bar\"));\n    assertU(adoc(\"id\", \"doc_6\", \"node_id\", \"6\", \"edge_id\", \"3\" ));\n    assertU(adoc(\"id\", \"doc_7\", \"node_id\", \"7\", \"edge_id\", \"1\" ));\n    assertU(adoc(\"id\", \"doc_8\", \"node_id\", \"8\", \"edge_id\", \"1\", \"edge_id\", \"2\" ));\n    assertU(adoc(\"id\", \"doc_9\", \"node_id\", \"9\"));\n    assertU(commit());\n    // update docs so they're in a new segment.\n    assertU(adoc(\"id\", \"doc_1\", \"node_id\", \"1\", \"edge_id\", \"2\", \"text\", \"foo\"));\n    assertU(adoc(\"id\", \"doc_2\", \"node_id\", \"2\", \"edge_id\", \"3\", \"edge_id\", \"9\", \"text\", \"foo11\"));\n    assertU(commit());\n    // a graph for testing traversal filter 10 - 11 -> (12 | 13)\n    assertU(adoc(\"id\", \"doc_10\", \"node_id\", \"10\", \"edge_id\", \"11\", \"title\", \"foo\"));\n    assertU(adoc(\"id\", \"doc_11\", \"node_id\", \"11\", \"edge_id\", \"12\", \"edge_id\", \"13\", \"text\", \"foo11\"));\n    assertU(adoc(\"id\", \"doc_12\", \"node_id\", \"12\", \"text\", \"foo10\"));\n    assertU(adoc(\"id\", \"doc_13\", \"node_id\", \"13\", \"edge_id\", \"12\", \"text\", \"foo10\"));  \n    assertU(commit());\n    // Now we have created a simple graph\n    // start traversal from node id to edge id\n    String gQuery = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\"}id:doc_1\";\n    SolrQueryRequest qr = createRequest(gQuery);\n    assertQ(qr,\"//*[@numFound='7']\");\n    \n    String g2Query = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\" returnRoot=\\\"true\\\" returnOnlyLeaf=\\\"false\\\"}id:doc_8\";\n    qr = createRequest(g2Query);    \n    assertQ(qr,\"//*[@numFound='8']\");\n\n    String g3Query = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\" returnRoot=\\\"false\\\" returnOnlyLeaf=\\\"false\\\"}id:doc_8\";\n    qr = createRequest(g3Query);    \n    assertQ(qr,\"//*[@numFound='7']\");\n    \n    String g4Query = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\" returnRoot=\\\"true\\\" returnOnlyLeaf=\\\"false\\\" traversalFilter=\\\"text:foo11\\\"}id:doc_8\";\n    qr = createRequest(g4Query);    \n    assertQ(qr,\"//*[@numFound='2']\");\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/join/GraphQueryTest#testGraph().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/GraphQueryTest#testGraph().mjava","sourceNew":"  @Test\n  public void testGraph() throws Exception {\n    // 1 -> 2 -> 3 -> ( 4 5 )\n    // 7 -> 1\n    // 8 -> ( 1 2 )\n    assertU(adoc(\"id\", \"doc_1\", \"node_id\", \"1\", \"edge_id\", \"2\", \"text\", \"foo\", \"title\", \"foo10\"));\n    assertU(adoc(\"id\", \"doc_2\", \"node_id\", \"2\", \"edge_id\", \"3\", \"text\", \"foo\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"doc_3\", \"node_id\", \"3\", \"edge_id\", \"4\", \"edge_id\", \"5\", \"table\", \"foo\"));\n    assertU(adoc(\"id\", \"doc_4\", \"node_id\", \"4\", \"table\", \"foo\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"doc_5\", \"node_id\", \"5\", \"edge_id\", \"7\", \"table\", \"bar\"));\n    assertU(adoc(\"id\", \"doc_6\", \"node_id\", \"6\", \"edge_id\", \"3\" ));\n    assertU(adoc(\"id\", \"doc_7\", \"node_id\", \"7\", \"edge_id\", \"1\" ));\n    assertU(adoc(\"id\", \"doc_8\", \"node_id\", \"8\", \"edge_id\", \"1\", \"edge_id\", \"2\" ));\n    assertU(adoc(\"id\", \"doc_9\", \"node_id\", \"9\"));\n    assertU(commit());\n    // update docs so they're in a new segment.\n    assertU(adoc(\"id\", \"doc_1\", \"node_id\", \"1\", \"edge_id\", \"2\", \"text\", \"foo\"));\n    assertU(adoc(\"id\", \"doc_2\", \"node_id\", \"2\", \"edge_id\", \"3\", \"edge_id\", \"9\", \"text\", \"foo11\"));\n    assertU(commit());\n    // a graph for testing traversal filter 10 - 11 -> (12 | 13)\n    assertU(adoc(\"id\", \"doc_10\", \"node_id\", \"10\", \"edge_id\", \"11\", \"title\", \"foo\"));\n    assertU(adoc(\"id\", \"doc_11\", \"node_id\", \"11\", \"edge_id\", \"12\", \"edge_id\", \"13\", \"text\", \"foo11\"));\n    assertU(adoc(\"id\", \"doc_12\", \"node_id\", \"12\", \"text\", \"foo10\"));\n    assertU(adoc(\"id\", \"doc_13\", \"node_id\", \"13\", \"edge_id\", \"12\", \"text\", \"foo10\"));  \n    assertU(commit());\n    // Now we have created a simple graph\n    // start traversal from node id to edge id\n    String gQuery = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\"}id:doc_1\";\n    SolrQueryRequest qr = createRequest(gQuery);\n    assertQ(qr,\"//*[@numFound='7']\");\n    \n    String g2Query = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\" returnRoot=\\\"true\\\" returnOnlyLeaf=\\\"false\\\"}id:doc_8\";\n    qr = createRequest(g2Query);    \n    assertQ(qr,\"//*[@numFound='8']\");\n\n    String g3Query = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\" returnRoot=\\\"false\\\" returnOnlyLeaf=\\\"false\\\"}id:doc_8\";\n    qr = createRequest(g3Query);    \n    assertQ(qr,\"//*[@numFound='7']\");\n    \n    String g4Query = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\" returnRoot=\\\"true\\\" returnOnlyLeaf=\\\"false\\\" traversalFilter=\\\"text:foo11\\\"}id:doc_8\";\n    qr = createRequest(g4Query);    \n    assertQ(qr,\"//*[@numFound='2']\");\n    \n    String g5Query = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\" returnRoot=\\\"true\\\" returnOnlyLeaf=\\\"false\\\" maxDepth=0}id:doc_8\";\n    qr = createRequest(g5Query);    \n    assertQ(qr,\"//*[@numFound='1']\");  \n\n    String g6Query = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\" returnRoot=\\\"true\\\" returnOnlyLeaf=\\\"false\\\" maxDepth=1}id:doc_8\";\n    qr = createRequest(g6Query);    \n    assertQ(qr,\"//*[@numFound='3']\");\n    \n    String g7Query = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\" returnRoot=\\\"false\\\" returnOnlyLeaf=\\\"false\\\" maxDepth=1}id:doc_8\";\n    qr = createRequest(g7Query);    \n    assertQ(qr,\"//*[@numFound='2']\");\n\n    String g8Query = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\" returnRoot=\\\"false\\\" returnOnlyLeaf=\\\"true\\\" maxDepth=2}id:doc_8\";\n    qr = createRequest(g8Query);    \n    assertQ(qr,\"//*[@numFound='1']\");\n\n    String g9Query = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\" maxDepth=1}id:doc_1\";\n    qr = createRequest(g9Query);    \n    assertQ(qr,\"//*[@numFound='2']\");\n    \n    String g10Query = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\" returnRoot=false maxDepth=1}id:doc_1\";\n    qr = createRequest(g10Query);    \n    assertQ(qr,\"//*[@numFound='1']\");\n  }\n\n","sourceOld":"  @Test\n  public void testGraph() throws Exception {\n    // 1 -> 2 -> 3 -> ( 4 5 )\n    // 7 -> 1\n    // 8 -> ( 1 2 )\n    assertU(adoc(\"id\", \"doc_1\", \"node_id\", \"1\", \"edge_id\", \"2\", \"text\", \"foo\", \"title\", \"foo10\"));\n    assertU(adoc(\"id\", \"doc_2\", \"node_id\", \"2\", \"edge_id\", \"3\", \"text\", \"foo\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"doc_3\", \"node_id\", \"3\", \"edge_id\", \"4\", \"edge_id\", \"5\", \"table\", \"foo\"));\n    assertU(adoc(\"id\", \"doc_4\", \"node_id\", \"4\", \"table\", \"foo\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"doc_5\", \"node_id\", \"5\", \"edge_id\", \"7\", \"table\", \"bar\"));\n    assertU(adoc(\"id\", \"doc_6\", \"node_id\", \"6\", \"edge_id\", \"3\" ));\n    assertU(adoc(\"id\", \"doc_7\", \"node_id\", \"7\", \"edge_id\", \"1\" ));\n    assertU(adoc(\"id\", \"doc_8\", \"node_id\", \"8\", \"edge_id\", \"1\", \"edge_id\", \"2\" ));\n    assertU(adoc(\"id\", \"doc_9\", \"node_id\", \"9\"));\n    assertU(commit());\n    // update docs so they're in a new segment.\n    assertU(adoc(\"id\", \"doc_1\", \"node_id\", \"1\", \"edge_id\", \"2\", \"text\", \"foo\"));\n    assertU(adoc(\"id\", \"doc_2\", \"node_id\", \"2\", \"edge_id\", \"3\", \"edge_id\", \"9\", \"text\", \"foo11\"));\n    assertU(commit());\n    // a graph for testing traversal filter 10 - 11 -> (12 | 13)\n    assertU(adoc(\"id\", \"doc_10\", \"node_id\", \"10\", \"edge_id\", \"11\", \"title\", \"foo\"));\n    assertU(adoc(\"id\", \"doc_11\", \"node_id\", \"11\", \"edge_id\", \"12\", \"edge_id\", \"13\", \"text\", \"foo11\"));\n    assertU(adoc(\"id\", \"doc_12\", \"node_id\", \"12\", \"text\", \"foo10\"));\n    assertU(adoc(\"id\", \"doc_13\", \"node_id\", \"13\", \"edge_id\", \"12\", \"text\", \"foo10\"));  \n    assertU(commit());\n    // Now we have created a simple graph\n    // start traversal from node id to edge id\n    String gQuery = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\"}id:doc_1\";\n    SolrQueryRequest qr = createRequest(gQuery);\n    assertQ(qr,\"//*[@numFound='7']\");\n    \n    String g2Query = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\" returnRoot=\\\"true\\\" returnOnlyLeaf=\\\"false\\\"}id:doc_8\";\n    qr = createRequest(g2Query);    \n    assertQ(qr,\"//*[@numFound='8']\");\n\n    String g3Query = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\" returnRoot=\\\"false\\\" returnOnlyLeaf=\\\"false\\\"}id:doc_8\";\n    qr = createRequest(g3Query);    \n    assertQ(qr,\"//*[@numFound='7']\");\n    \n    String g4Query = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\" returnRoot=\\\"true\\\" returnOnlyLeaf=\\\"false\\\" traversalFilter=\\\"text:foo11\\\"}id:doc_8\";\n    qr = createRequest(g4Query);    \n    assertQ(qr,\"//*[@numFound='2']\");\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5582ac681e0def83075f05006fc43f34052fe7a9","date":1500400581,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/join/GraphQueryTest#testGraph().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/GraphQueryTest#testGraph().mjava","sourceNew":"  @Test\n  public void testGraph() throws Exception {\n    doGraph( params(\"node_id\",\"node_s\", \"edge_id\",\"edge_ss\") );\n    // TODO: try with numeric fields...   doGraph( params(\"node_id\",\"node_i\", \"edge_id\",\"edge_is\") );\n  }\n\n","sourceOld":"  @Test\n  public void testGraph() throws Exception {\n    // 1 -> 2 -> 3 -> ( 4 5 )\n    // 7 -> 1\n    // 8 -> ( 1 2 )\n    assertU(adoc(\"id\", \"doc_1\", \"node_id\", \"1\", \"edge_id\", \"2\", \"text\", \"foo\", \"title\", \"foo10\"));\n    assertU(adoc(\"id\", \"doc_2\", \"node_id\", \"2\", \"edge_id\", \"3\", \"text\", \"foo\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"doc_3\", \"node_id\", \"3\", \"edge_id\", \"4\", \"edge_id\", \"5\", \"table\", \"foo\"));\n    assertU(adoc(\"id\", \"doc_4\", \"node_id\", \"4\", \"table\", \"foo\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"doc_5\", \"node_id\", \"5\", \"edge_id\", \"7\", \"table\", \"bar\"));\n    assertU(adoc(\"id\", \"doc_6\", \"node_id\", \"6\", \"edge_id\", \"3\" ));\n    assertU(adoc(\"id\", \"doc_7\", \"node_id\", \"7\", \"edge_id\", \"1\" ));\n    assertU(adoc(\"id\", \"doc_8\", \"node_id\", \"8\", \"edge_id\", \"1\", \"edge_id\", \"2\" ));\n    assertU(adoc(\"id\", \"doc_9\", \"node_id\", \"9\"));\n    assertU(commit());\n    // update docs so they're in a new segment.\n    assertU(adoc(\"id\", \"doc_1\", \"node_id\", \"1\", \"edge_id\", \"2\", \"text\", \"foo\"));\n    assertU(adoc(\"id\", \"doc_2\", \"node_id\", \"2\", \"edge_id\", \"3\", \"edge_id\", \"9\", \"text\", \"foo11\"));\n    assertU(commit());\n    // a graph for testing traversal filter 10 - 11 -> (12 | 13)\n    assertU(adoc(\"id\", \"doc_10\", \"node_id\", \"10\", \"edge_id\", \"11\", \"title\", \"foo\"));\n    assertU(adoc(\"id\", \"doc_11\", \"node_id\", \"11\", \"edge_id\", \"12\", \"edge_id\", \"13\", \"text\", \"foo11\"));\n    assertU(adoc(\"id\", \"doc_12\", \"node_id\", \"12\", \"text\", \"foo10\"));\n    assertU(adoc(\"id\", \"doc_13\", \"node_id\", \"13\", \"edge_id\", \"12\", \"text\", \"foo10\"));  \n    assertU(commit());\n    // Now we have created a simple graph\n    // start traversal from node id to edge id\n    String gQuery = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\"}id:doc_1\";\n    SolrQueryRequest qr = createRequest(gQuery);\n    assertQ(qr,\"//*[@numFound='7']\");\n    \n    String g2Query = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\" returnRoot=\\\"true\\\" returnOnlyLeaf=\\\"false\\\"}id:doc_8\";\n    qr = createRequest(g2Query);    \n    assertQ(qr,\"//*[@numFound='8']\");\n\n    String g3Query = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\" returnRoot=\\\"false\\\" returnOnlyLeaf=\\\"false\\\"}id:doc_8\";\n    qr = createRequest(g3Query);    \n    assertQ(qr,\"//*[@numFound='7']\");\n    \n    String g4Query = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\" returnRoot=\\\"true\\\" returnOnlyLeaf=\\\"false\\\" traversalFilter=\\\"text:foo11\\\"}id:doc_8\";\n    qr = createRequest(g4Query);    \n    assertQ(qr,\"//*[@numFound='2']\");\n    \n    String g5Query = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\" returnRoot=\\\"true\\\" returnOnlyLeaf=\\\"false\\\" maxDepth=0}id:doc_8\";\n    qr = createRequest(g5Query);    \n    assertQ(qr,\"//*[@numFound='1']\");  \n\n    String g6Query = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\" returnRoot=\\\"true\\\" returnOnlyLeaf=\\\"false\\\" maxDepth=1}id:doc_8\";\n    qr = createRequest(g6Query);    \n    assertQ(qr,\"//*[@numFound='3']\");\n    \n    String g7Query = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\" returnRoot=\\\"false\\\" returnOnlyLeaf=\\\"false\\\" maxDepth=1}id:doc_8\";\n    qr = createRequest(g7Query);    \n    assertQ(qr,\"//*[@numFound='2']\");\n\n    String g8Query = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\" returnRoot=\\\"false\\\" returnOnlyLeaf=\\\"true\\\" maxDepth=2}id:doc_8\";\n    qr = createRequest(g8Query);    \n    assertQ(qr,\"//*[@numFound='1']\");\n\n    String g9Query = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\" maxDepth=1}id:doc_1\";\n    qr = createRequest(g9Query);    \n    assertQ(qr,\"//*[@numFound='2']\");\n    \n    String g10Query = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\" returnRoot=false maxDepth=1}id:doc_1\";\n    qr = createRequest(g10Query);    \n    assertQ(qr,\"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":["487de3f55283f58d7e02a16993f8be55bbe32061"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/join/GraphQueryTest#testGraph().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/GraphQueryTest#testGraph().mjava","sourceNew":"  @Test\n  public void testGraph() throws Exception {\n    doGraph( params(\"node_id\",\"node_s\", \"edge_id\",\"edge_ss\") );\n    // TODO: try with numeric fields...   doGraph( params(\"node_id\",\"node_i\", \"edge_id\",\"edge_is\") );\n  }\n\n","sourceOld":"  @Test\n  public void testGraph() throws Exception {\n    // 1 -> 2 -> 3 -> ( 4 5 )\n    // 7 -> 1\n    // 8 -> ( 1 2 )\n    assertU(adoc(\"id\", \"doc_1\", \"node_id\", \"1\", \"edge_id\", \"2\", \"text\", \"foo\", \"title\", \"foo10\"));\n    assertU(adoc(\"id\", \"doc_2\", \"node_id\", \"2\", \"edge_id\", \"3\", \"text\", \"foo\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"doc_3\", \"node_id\", \"3\", \"edge_id\", \"4\", \"edge_id\", \"5\", \"table\", \"foo\"));\n    assertU(adoc(\"id\", \"doc_4\", \"node_id\", \"4\", \"table\", \"foo\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"doc_5\", \"node_id\", \"5\", \"edge_id\", \"7\", \"table\", \"bar\"));\n    assertU(adoc(\"id\", \"doc_6\", \"node_id\", \"6\", \"edge_id\", \"3\" ));\n    assertU(adoc(\"id\", \"doc_7\", \"node_id\", \"7\", \"edge_id\", \"1\" ));\n    assertU(adoc(\"id\", \"doc_8\", \"node_id\", \"8\", \"edge_id\", \"1\", \"edge_id\", \"2\" ));\n    assertU(adoc(\"id\", \"doc_9\", \"node_id\", \"9\"));\n    assertU(commit());\n    // update docs so they're in a new segment.\n    assertU(adoc(\"id\", \"doc_1\", \"node_id\", \"1\", \"edge_id\", \"2\", \"text\", \"foo\"));\n    assertU(adoc(\"id\", \"doc_2\", \"node_id\", \"2\", \"edge_id\", \"3\", \"edge_id\", \"9\", \"text\", \"foo11\"));\n    assertU(commit());\n    // a graph for testing traversal filter 10 - 11 -> (12 | 13)\n    assertU(adoc(\"id\", \"doc_10\", \"node_id\", \"10\", \"edge_id\", \"11\", \"title\", \"foo\"));\n    assertU(adoc(\"id\", \"doc_11\", \"node_id\", \"11\", \"edge_id\", \"12\", \"edge_id\", \"13\", \"text\", \"foo11\"));\n    assertU(adoc(\"id\", \"doc_12\", \"node_id\", \"12\", \"text\", \"foo10\"));\n    assertU(adoc(\"id\", \"doc_13\", \"node_id\", \"13\", \"edge_id\", \"12\", \"text\", \"foo10\"));  \n    assertU(commit());\n    // Now we have created a simple graph\n    // start traversal from node id to edge id\n    String gQuery = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\"}id:doc_1\";\n    SolrQueryRequest qr = createRequest(gQuery);\n    assertQ(qr,\"//*[@numFound='7']\");\n    \n    String g2Query = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\" returnRoot=\\\"true\\\" returnOnlyLeaf=\\\"false\\\"}id:doc_8\";\n    qr = createRequest(g2Query);    \n    assertQ(qr,\"//*[@numFound='8']\");\n\n    String g3Query = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\" returnRoot=\\\"false\\\" returnOnlyLeaf=\\\"false\\\"}id:doc_8\";\n    qr = createRequest(g3Query);    \n    assertQ(qr,\"//*[@numFound='7']\");\n    \n    String g4Query = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\" returnRoot=\\\"true\\\" returnOnlyLeaf=\\\"false\\\" traversalFilter=\\\"text:foo11\\\"}id:doc_8\";\n    qr = createRequest(g4Query);    \n    assertQ(qr,\"//*[@numFound='2']\");\n    \n    String g5Query = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\" returnRoot=\\\"true\\\" returnOnlyLeaf=\\\"false\\\" maxDepth=0}id:doc_8\";\n    qr = createRequest(g5Query);    \n    assertQ(qr,\"//*[@numFound='1']\");  \n\n    String g6Query = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\" returnRoot=\\\"true\\\" returnOnlyLeaf=\\\"false\\\" maxDepth=1}id:doc_8\";\n    qr = createRequest(g6Query);    \n    assertQ(qr,\"//*[@numFound='3']\");\n    \n    String g7Query = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\" returnRoot=\\\"false\\\" returnOnlyLeaf=\\\"false\\\" maxDepth=1}id:doc_8\";\n    qr = createRequest(g7Query);    \n    assertQ(qr,\"//*[@numFound='2']\");\n\n    String g8Query = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\" returnRoot=\\\"false\\\" returnOnlyLeaf=\\\"true\\\" maxDepth=2}id:doc_8\";\n    qr = createRequest(g8Query);    \n    assertQ(qr,\"//*[@numFound='1']\");\n\n    String g9Query = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\" maxDepth=1}id:doc_1\";\n    qr = createRequest(g9Query);    \n    assertQ(qr,\"//*[@numFound='2']\");\n    \n    String g10Query = \"{!graph from=\\\"node_id\\\" to=\\\"edge_id\\\" returnRoot=false maxDepth=1}id:doc_1\";\n    qr = createRequest(g10Query);    \n    assertQ(qr,\"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3be7723008a2c26b93c1b9d6a5e67ed2e4a2976","date":1500994164,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/join/GraphQueryTest#testGraph().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/GraphQueryTest#testGraph().mjava","sourceNew":"  @Test\n  public void testGraph() throws Exception {\n    // normal strings\n    doGraph( params(\"node_id\",\"node_s\", \"edge_id\",\"edge_ss\") );\n\n    // point based fields with docvalues\n    doGraph( params(\"node_id\",\"node_ip\", \"edge_id\",\"edge_ips\") );\n    doGraph( params(\"node_id\",\"node_lp\", \"edge_id\",\"edge_lps\") );\n    doGraph( params(\"node_id\",\"node_fp\", \"edge_id\",\"edge_fps\") );\n    doGraph( params(\"node_id\",\"node_dp\", \"edge_id\",\"edge_dps\") );\n  }\n\n","sourceOld":"  @Test\n  public void testGraph() throws Exception {\n    doGraph( params(\"node_id\",\"node_s\", \"edge_id\",\"edge_ss\") );\n    // TODO: try with numeric fields...   doGraph( params(\"node_id\",\"node_i\", \"edge_id\",\"edge_is\") );\n  }\n\n","bugFix":null,"bugIntro":["487de3f55283f58d7e02a16993f8be55bbe32061"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/join/GraphQueryTest#testGraph().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/GraphQueryTest#testGraph().mjava","sourceNew":"  @Test\n  public void testGraph() throws Exception {\n    // normal strings\n    doGraph( params(\"node_id\",\"node_s\", \"edge_id\",\"edge_ss\") );\n\n    // point based fields with docvalues\n    doGraph( params(\"node_id\",\"node_ip\", \"edge_id\",\"edge_ips\") );\n    doGraph( params(\"node_id\",\"node_lp\", \"edge_id\",\"edge_lps\") );\n    doGraph( params(\"node_id\",\"node_fp\", \"edge_id\",\"edge_fps\") );\n    doGraph( params(\"node_id\",\"node_dp\", \"edge_id\",\"edge_dps\") );\n  }\n\n","sourceOld":"  @Test\n  public void testGraph() throws Exception {\n    doGraph( params(\"node_id\",\"node_s\", \"edge_id\",\"edge_ss\") );\n    // TODO: try with numeric fields...   doGraph( params(\"node_id\",\"node_i\", \"edge_id\",\"edge_is\") );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"487de3f55283f58d7e02a16993f8be55bbe32061","date":1502123368,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/join/GraphQueryTest#testGraph().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/GraphQueryTest#testGraph().mjava","sourceNew":"  @Test\n  public void testGraph() throws Exception {\n    // normal strings\n    doGraph( params(\"node_id\",\"node_s\",  \"edge_id\",\"edge_ss\") );\n    doGraph( params(\"node_id\",\"node_ss\", \"edge_id\",\"edge_ss\") );\n\n    // point based fields with docvalues (single and multi-valued for the node field)\n    doGraph( params(\"node_id\",\"node_ip\",  \"edge_id\",\"edge_ips\") );\n    doGraph( params(\"node_id\",\"node_ips\", \"edge_id\",\"edge_ips\") );\n    doGraph( params(\"node_id\",\"node_lp\",  \"edge_id\",\"edge_lps\") );\n    doGraph( params(\"node_id\",\"node_lps\", \"edge_id\",\"edge_lps\") );\n    doGraph( params(\"node_id\",\"node_fp\",  \"edge_id\",\"edge_fps\") );\n    doGraph( params(\"node_id\",\"node_fps\", \"edge_id\",\"edge_fps\") );\n    doGraph( params(\"node_id\",\"node_dp\",  \"edge_id\",\"edge_dps\") );\n    doGraph( params(\"node_id\",\"node_dps\", \"edge_id\",\"edge_dps\") );\n  }\n\n","sourceOld":"  @Test\n  public void testGraph() throws Exception {\n    // normal strings\n    doGraph( params(\"node_id\",\"node_s\", \"edge_id\",\"edge_ss\") );\n\n    // point based fields with docvalues\n    doGraph( params(\"node_id\",\"node_ip\", \"edge_id\",\"edge_ips\") );\n    doGraph( params(\"node_id\",\"node_lp\", \"edge_id\",\"edge_lps\") );\n    doGraph( params(\"node_id\",\"node_fp\", \"edge_id\",\"edge_fps\") );\n    doGraph( params(\"node_id\",\"node_dp\", \"edge_id\",\"edge_dps\") );\n  }\n\n","bugFix":["a3be7723008a2c26b93c1b9d6a5e67ed2e4a2976","5582ac681e0def83075f05006fc43f34052fe7a9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/join/GraphQueryTest#testGraph().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/GraphQueryTest#testGraph().mjava","sourceNew":"  @Test\n  public void testGraph() throws Exception {\n    // normal strings\n    doGraph( params(\"node_id\",\"node_s\",  \"edge_id\",\"edge_ss\") );\n    doGraph( params(\"node_id\",\"node_ss\", \"edge_id\",\"edge_ss\") );\n\n    // point based fields with docvalues (single and multi-valued for the node field)\n    doGraph( params(\"node_id\",\"node_ip\",  \"edge_id\",\"edge_ips\") );\n    doGraph( params(\"node_id\",\"node_ips\", \"edge_id\",\"edge_ips\") );\n    doGraph( params(\"node_id\",\"node_lp\",  \"edge_id\",\"edge_lps\") );\n    doGraph( params(\"node_id\",\"node_lps\", \"edge_id\",\"edge_lps\") );\n    doGraph( params(\"node_id\",\"node_fp\",  \"edge_id\",\"edge_fps\") );\n    doGraph( params(\"node_id\",\"node_fps\", \"edge_id\",\"edge_fps\") );\n    doGraph( params(\"node_id\",\"node_dp\",  \"edge_id\",\"edge_dps\") );\n    doGraph( params(\"node_id\",\"node_dps\", \"edge_id\",\"edge_dps\") );\n  }\n\n","sourceOld":"  @Test\n  public void testGraph() throws Exception {\n    doGraph( params(\"node_id\",\"node_s\", \"edge_id\",\"edge_ss\") );\n    // TODO: try with numeric fields...   doGraph( params(\"node_id\",\"node_i\", \"edge_id\",\"edge_is\") );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"644de864e024cdc6f1631b340e14c6d32c62352b","date":1502307834,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/join/GraphQueryTest#testGraph().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/GraphQueryTest#testGraph().mjava","sourceNew":"  @Test\n  public void testGraph() throws Exception {\n    // normal strings\n    doGraph( params(\"node_id\",\"node_s\",  \"edge_id\",\"edge_ss\") );\n    doGraph( params(\"node_id\",\"node_ss\", \"edge_id\",\"edge_ss\") );\n\n    // point based fields with docvalues (single and multi-valued for the node field)\n    doGraph( params(\"node_id\",\"node_ip\",  \"edge_id\",\"edge_ips\") );\n    doGraph( params(\"node_id\",\"node_ips\", \"edge_id\",\"edge_ips\") );\n    doGraph( params(\"node_id\",\"node_lp\",  \"edge_id\",\"edge_lps\") );\n    doGraph( params(\"node_id\",\"node_lps\", \"edge_id\",\"edge_lps\") );\n    doGraph( params(\"node_id\",\"node_fp\",  \"edge_id\",\"edge_fps\") );\n    doGraph( params(\"node_id\",\"node_fps\", \"edge_id\",\"edge_fps\") );\n    doGraph( params(\"node_id\",\"node_dp\",  \"edge_id\",\"edge_dps\") );\n    doGraph( params(\"node_id\",\"node_dps\", \"edge_id\",\"edge_dps\") );\n\n    // string with indexed=false and docValues=true\n    doGraph( params(\"node_id\",\"node_sdN\", \"edge_id\",\"edge_sdsN\") );\n  }\n\n","sourceOld":"  @Test\n  public void testGraph() throws Exception {\n    // normal strings\n    doGraph( params(\"node_id\",\"node_s\",  \"edge_id\",\"edge_ss\") );\n    doGraph( params(\"node_id\",\"node_ss\", \"edge_id\",\"edge_ss\") );\n\n    // point based fields with docvalues (single and multi-valued for the node field)\n    doGraph( params(\"node_id\",\"node_ip\",  \"edge_id\",\"edge_ips\") );\n    doGraph( params(\"node_id\",\"node_ips\", \"edge_id\",\"edge_ips\") );\n    doGraph( params(\"node_id\",\"node_lp\",  \"edge_id\",\"edge_lps\") );\n    doGraph( params(\"node_id\",\"node_lps\", \"edge_id\",\"edge_lps\") );\n    doGraph( params(\"node_id\",\"node_fp\",  \"edge_id\",\"edge_fps\") );\n    doGraph( params(\"node_id\",\"node_fps\", \"edge_id\",\"edge_fps\") );\n    doGraph( params(\"node_id\",\"node_dp\",  \"edge_id\",\"edge_dps\") );\n    doGraph( params(\"node_id\",\"node_dps\", \"edge_id\",\"edge_dps\") );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58884af1f68e9d61c217c753fbd6266d86a63b14","date":1502363401,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/join/GraphQueryTest#testGraph().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/GraphQueryTest#testGraph().mjava","sourceNew":"  @Test\n  public void testGraph() throws Exception {\n    // normal strings\n    doGraph( params(\"node_id\",\"node_s\",  \"edge_id\",\"edge_ss\") );\n    doGraph( params(\"node_id\",\"node_ss\", \"edge_id\",\"edge_ss\") );\n\n    // point based fields with docvalues (single and multi-valued for the node field)\n    doGraph( params(\"node_id\",\"node_ip\",  \"edge_id\",\"edge_ips\") );\n    doGraph( params(\"node_id\",\"node_ips\", \"edge_id\",\"edge_ips\") );\n    doGraph( params(\"node_id\",\"node_lp\",  \"edge_id\",\"edge_lps\") );\n    doGraph( params(\"node_id\",\"node_lps\", \"edge_id\",\"edge_lps\") );\n    doGraph( params(\"node_id\",\"node_fp\",  \"edge_id\",\"edge_fps\") );\n    doGraph( params(\"node_id\",\"node_fps\", \"edge_id\",\"edge_fps\") );\n    doGraph( params(\"node_id\",\"node_dp\",  \"edge_id\",\"edge_dps\") );\n    doGraph( params(\"node_id\",\"node_dps\", \"edge_id\",\"edge_dps\") );\n\n    // string with indexed=false and docValues=true\n    doGraph( params(\"node_id\",\"node_sdN\", \"edge_id\",\"edge_sdsN\") );\n  }\n\n","sourceOld":"  @Test\n  public void testGraph() throws Exception {\n    // normal strings\n    doGraph( params(\"node_id\",\"node_s\", \"edge_id\",\"edge_ss\") );\n\n    // point based fields with docvalues\n    doGraph( params(\"node_id\",\"node_ip\", \"edge_id\",\"edge_ips\") );\n    doGraph( params(\"node_id\",\"node_lp\", \"edge_id\",\"edge_lps\") );\n    doGraph( params(\"node_id\",\"node_fp\", \"edge_id\",\"edge_fps\") );\n    doGraph( params(\"node_id\",\"node_dp\", \"edge_id\",\"edge_dps\") );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","date":1502692251,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/join/GraphQueryTest#testGraph().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/GraphQueryTest#testGraph().mjava","sourceNew":"  @Test\n  public void testGraph() throws Exception {\n    // normal strings\n    doGraph( params(\"node_id\",\"node_s\",  \"edge_id\",\"edge_ss\") );\n    doGraph( params(\"node_id\",\"node_ss\", \"edge_id\",\"edge_ss\") );\n\n    // point based fields with docvalues (single and multi-valued for the node field)\n    doGraph( params(\"node_id\",\"node_ip\",  \"edge_id\",\"edge_ips\") );\n    doGraph( params(\"node_id\",\"node_ips\", \"edge_id\",\"edge_ips\") );\n    doGraph( params(\"node_id\",\"node_lp\",  \"edge_id\",\"edge_lps\") );\n    doGraph( params(\"node_id\",\"node_lps\", \"edge_id\",\"edge_lps\") );\n    doGraph( params(\"node_id\",\"node_fp\",  \"edge_id\",\"edge_fps\") );\n    doGraph( params(\"node_id\",\"node_fps\", \"edge_id\",\"edge_fps\") );\n    doGraph( params(\"node_id\",\"node_dp\",  \"edge_id\",\"edge_dps\") );\n    doGraph( params(\"node_id\",\"node_dps\", \"edge_id\",\"edge_dps\") );\n\n    // string with indexed=false and docValues=true\n    doGraph( params(\"node_id\",\"node_sdN\", \"edge_id\",\"edge_sdsN\") );\n  }\n\n","sourceOld":"  @Test\n  public void testGraph() throws Exception {\n    // normal strings\n    doGraph( params(\"node_id\",\"node_s\",  \"edge_id\",\"edge_ss\") );\n    doGraph( params(\"node_id\",\"node_ss\", \"edge_id\",\"edge_ss\") );\n\n    // point based fields with docvalues (single and multi-valued for the node field)\n    doGraph( params(\"node_id\",\"node_ip\",  \"edge_id\",\"edge_ips\") );\n    doGraph( params(\"node_id\",\"node_ips\", \"edge_id\",\"edge_ips\") );\n    doGraph( params(\"node_id\",\"node_lp\",  \"edge_id\",\"edge_lps\") );\n    doGraph( params(\"node_id\",\"node_lps\", \"edge_id\",\"edge_lps\") );\n    doGraph( params(\"node_id\",\"node_fp\",  \"edge_id\",\"edge_fps\") );\n    doGraph( params(\"node_id\",\"node_fps\", \"edge_id\",\"edge_fps\") );\n    doGraph( params(\"node_id\",\"node_dp\",  \"edge_id\",\"edge_dps\") );\n    doGraph( params(\"node_id\",\"node_dps\", \"edge_id\",\"edge_dps\") );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"49f41ca5b59802ba2b8fb507bb73d5c4bf53db2b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"826e791d635df5093032ca5d1925016bdf0c1df6":["49f41ca5b59802ba2b8fb507bb73d5c4bf53db2b"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["49f41ca5b59802ba2b8fb507bb73d5c4bf53db2b","8d15e34266d75e4e8b95da046cd0afc812367b38"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["8d15e34266d75e4e8b95da046cd0afc812367b38","5582ac681e0def83075f05006fc43f34052fe7a9"],"487de3f55283f58d7e02a16993f8be55bbe32061":["a52341299179de5479672f7cf518bf4b173f34b3"],"5582ac681e0def83075f05006fc43f34052fe7a9":["8d15e34266d75e4e8b95da046cd0afc812367b38"],"a3be7723008a2c26b93c1b9d6a5e67ed2e4a2976":["5582ac681e0def83075f05006fc43f34052fe7a9"],"a52341299179de5479672f7cf518bf4b173f34b3":["5582ac681e0def83075f05006fc43f34052fe7a9","a3be7723008a2c26b93c1b9d6a5e67ed2e4a2976"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["936cdd5882761db3b844afd6f84ab81cbb011a75","487de3f55283f58d7e02a16993f8be55bbe32061"],"58884af1f68e9d61c217c753fbd6266d86a63b14":["a52341299179de5479672f7cf518bf4b173f34b3","644de864e024cdc6f1631b340e14c6d32c62352b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","644de864e024cdc6f1631b340e14c6d32c62352b"],"644de864e024cdc6f1631b340e14c6d32c62352b":["487de3f55283f58d7e02a16993f8be55bbe32061"],"8d15e34266d75e4e8b95da046cd0afc812367b38":["49f41ca5b59802ba2b8fb507bb73d5c4bf53db2b","826e791d635df5093032ca5d1925016bdf0c1df6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["644de864e024cdc6f1631b340e14c6d32c62352b"]},"commit2Childs":{"49f41ca5b59802ba2b8fb507bb73d5c4bf53db2b":["826e791d635df5093032ca5d1925016bdf0c1df6","1e6acbaae7af722f17204ceccf0f7db5753eccf3","8d15e34266d75e4e8b95da046cd0afc812367b38"],"826e791d635df5093032ca5d1925016bdf0c1df6":["8d15e34266d75e4e8b95da046cd0afc812367b38"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"936cdd5882761db3b844afd6f84ab81cbb011a75":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"487de3f55283f58d7e02a16993f8be55bbe32061":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","644de864e024cdc6f1631b340e14c6d32c62352b"],"5582ac681e0def83075f05006fc43f34052fe7a9":["936cdd5882761db3b844afd6f84ab81cbb011a75","a3be7723008a2c26b93c1b9d6a5e67ed2e4a2976","a52341299179de5479672f7cf518bf4b173f34b3"],"a3be7723008a2c26b93c1b9d6a5e67ed2e4a2976":["a52341299179de5479672f7cf518bf4b173f34b3"],"a52341299179de5479672f7cf518bf4b173f34b3":["487de3f55283f58d7e02a16993f8be55bbe32061","58884af1f68e9d61c217c753fbd6266d86a63b14"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"58884af1f68e9d61c217c753fbd6266d86a63b14":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["49f41ca5b59802ba2b8fb507bb73d5c4bf53db2b"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":[],"644de864e024cdc6f1631b340e14c6d32c62352b":["58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8d15e34266d75e4e8b95da046cd0afc812367b38":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","936cdd5882761db3b844afd6f84ab81cbb011a75","5582ac681e0def83075f05006fc43f34052fe7a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}