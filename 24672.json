{"path":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonTree#relate(double,double,double,double).mjava","commits":[{"id":"034996547ca41c5004216fdd0178acbf06438da2","date":1461284133,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonTree#relate(double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns relation to the provided rectangle */\n  Relation relate(double minLat, double maxLat, double minLon, double maxLon) {\n    // if the bounding boxes are disjoint then the shape does not cross\n    if (maxLon < this.minLon || minLon > this.maxLon || maxLat < this.minLat || minLat > this.maxLat) {\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n    // if the rectangle fully encloses us, we cross.\n    if (minLat <= this.minLat && maxLat >= this.maxLat && minLon <= this.minLon && maxLon >= this.maxLon) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    // check any holes\n    for (LatLonTree hole : holes) {\n      Relation holeRelation = hole.relate(minLat, maxLat, minLon, maxLon);\n      if (holeRelation == Relation.CELL_CROSSES_QUERY) {\n        return Relation.CELL_CROSSES_QUERY;\n      } else if (holeRelation == Relation.CELL_INSIDE_QUERY) {\n        return Relation.CELL_OUTSIDE_QUERY;\n      }\n    }\n    // check each corner: if < 4 are present, its cheaper than crossesSlowly\n    int numCorners = numberOfCorners(minLat, maxLat, minLon, maxLon);\n    if (numCorners == 4) {\n      if (tree.crosses(minLat, maxLat, minLon, maxLon)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_INSIDE_QUERY;\n    } else if (numCorners > 0) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    \n    // we cross\n    if (tree.crosses(minLat, maxLat, minLon, maxLon)) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    \n    return Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca","date":1461308643,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonTree#relate(double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns relation to the provided rectangle */\n  Relation relate(double minLat, double maxLat, double minLon, double maxLon) {\n    // if the bounding boxes are disjoint then the shape does not cross\n    if (maxLon < this.minLon || minLon > this.maxLon || maxLat < this.minLat || minLat > this.maxLat) {\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n    // if the rectangle fully encloses us, we cross.\n    if (minLat <= this.minLat && maxLat >= this.maxLat && minLon <= this.minLon && maxLon >= this.maxLon) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    // check any holes\n    for (LatLonTree hole : holes) {\n      Relation holeRelation = hole.relate(minLat, maxLat, minLon, maxLon);\n      if (holeRelation == Relation.CELL_CROSSES_QUERY) {\n        return Relation.CELL_CROSSES_QUERY;\n      } else if (holeRelation == Relation.CELL_INSIDE_QUERY) {\n        return Relation.CELL_OUTSIDE_QUERY;\n      }\n    }\n    // check each corner: if < 4 are present, its cheaper than crossesSlowly\n    int numCorners = numberOfCorners(minLat, maxLat, minLon, maxLon);\n    if (numCorners == 4) {\n      if (tree.crosses(minLat, maxLat, minLon, maxLon)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_INSIDE_QUERY;\n    } else if (numCorners > 0) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    \n    // we cross\n    if (tree.crosses(minLat, maxLat, minLon, maxLon)) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    \n    return Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"925fce43f3bac029d912b9b7de03c789e258a333","date":1461612714,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#componentRelate(double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonTree#relate(double,double,double,double).mjava","sourceNew":"  /** Returns relation to the provided rectangle for this component */\n  private Relation componentRelate(double minLat, double maxLat, double minLon, double maxLon) {\n    // if the bounding boxes are disjoint then the shape does not cross\n    if (maxLon < this.minLon || minLon > this.maxLon || maxLat < this.minLat || minLat > this.maxLat) {\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n    // if the rectangle fully encloses us, we cross.\n    if (minLat <= this.minLat && maxLat >= this.maxLat && minLon <= this.minLon && maxLon >= this.maxLon) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    // check any holes\n    if (holes != null) {\n      Relation holeRelation = holes.relate(minLat, maxLat, minLon, maxLon);\n      if (holeRelation == Relation.CELL_CROSSES_QUERY) {\n        return Relation.CELL_CROSSES_QUERY;\n      } else if (holeRelation == Relation.CELL_INSIDE_QUERY) {\n        return Relation.CELL_OUTSIDE_QUERY;\n      }\n    }\n    // check each corner: if < 4 are present, its cheaper than crossesSlowly\n    int numCorners = numberOfCorners(minLat, maxLat, minLon, maxLon);\n    if (numCorners == 4) {\n      if (tree.crosses(minLat, maxLat, minLon, maxLon)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_INSIDE_QUERY;\n    } else if (numCorners > 0) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    \n    // we cross\n    if (tree.crosses(minLat, maxLat, minLon, maxLon)) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    \n    return Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","sourceOld":"  /** Returns relation to the provided rectangle */\n  Relation relate(double minLat, double maxLat, double minLon, double maxLon) {\n    // if the bounding boxes are disjoint then the shape does not cross\n    if (maxLon < this.minLon || minLon > this.maxLon || maxLat < this.minLat || minLat > this.maxLat) {\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n    // if the rectangle fully encloses us, we cross.\n    if (minLat <= this.minLat && maxLat >= this.maxLat && minLon <= this.minLon && maxLon >= this.maxLon) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    // check any holes\n    for (LatLonTree hole : holes) {\n      Relation holeRelation = hole.relate(minLat, maxLat, minLon, maxLon);\n      if (holeRelation == Relation.CELL_CROSSES_QUERY) {\n        return Relation.CELL_CROSSES_QUERY;\n      } else if (holeRelation == Relation.CELL_INSIDE_QUERY) {\n        return Relation.CELL_OUTSIDE_QUERY;\n      }\n    }\n    // check each corner: if < 4 are present, its cheaper than crossesSlowly\n    int numCorners = numberOfCorners(minLat, maxLat, minLon, maxLon);\n    if (numCorners == 4) {\n      if (tree.crosses(minLat, maxLat, minLon, maxLon)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_INSIDE_QUERY;\n    } else if (numCorners > 0) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    \n    // we cross\n    if (tree.crosses(minLat, maxLat, minLon, maxLon)) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    \n    return Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Polygon2D#componentRelate(double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonTree#relate(double,double,double,double).mjava","sourceNew":"  /** Returns relation to the provided rectangle for this component */\n  private Relation componentRelate(double minLat, double maxLat, double minLon, double maxLon) {\n    // if the bounding boxes are disjoint then the shape does not cross\n    if (maxLon < this.minLon || minLon > this.maxLon || maxLat < this.minLat || minLat > this.maxLat) {\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n    // if the rectangle fully encloses us, we cross.\n    if (minLat <= this.minLat && maxLat >= this.maxLat && minLon <= this.minLon && maxLon >= this.maxLon) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    // check any holes\n    if (holes != null) {\n      Relation holeRelation = holes.relate(minLat, maxLat, minLon, maxLon);\n      if (holeRelation == Relation.CELL_CROSSES_QUERY) {\n        return Relation.CELL_CROSSES_QUERY;\n      } else if (holeRelation == Relation.CELL_INSIDE_QUERY) {\n        return Relation.CELL_OUTSIDE_QUERY;\n      }\n    }\n    // check each corner: if < 4 are present, its cheaper than crossesSlowly\n    int numCorners = numberOfCorners(minLat, maxLat, minLon, maxLon);\n    if (numCorners == 4) {\n      if (tree.crosses(minLat, maxLat, minLon, maxLon)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_INSIDE_QUERY;\n    } else if (numCorners > 0) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    \n    // we cross\n    if (tree.crosses(minLat, maxLat, minLon, maxLon)) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    \n    return Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","sourceOld":"  /** Returns relation to the provided rectangle */\n  Relation relate(double minLat, double maxLat, double minLon, double maxLon) {\n    // if the bounding boxes are disjoint then the shape does not cross\n    if (maxLon < this.minLon || minLon > this.maxLon || maxLat < this.minLat || minLat > this.maxLat) {\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n    // if the rectangle fully encloses us, we cross.\n    if (minLat <= this.minLat && maxLat >= this.maxLat && minLon <= this.minLon && maxLon >= this.maxLon) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    // check any holes\n    for (LatLonTree hole : holes) {\n      Relation holeRelation = hole.relate(minLat, maxLat, minLon, maxLon);\n      if (holeRelation == Relation.CELL_CROSSES_QUERY) {\n        return Relation.CELL_CROSSES_QUERY;\n      } else if (holeRelation == Relation.CELL_INSIDE_QUERY) {\n        return Relation.CELL_OUTSIDE_QUERY;\n      }\n    }\n    // check each corner: if < 4 are present, its cheaper than crossesSlowly\n    int numCorners = numberOfCorners(minLat, maxLat, minLon, maxLon);\n    if (numCorners == 4) {\n      if (tree.crosses(minLat, maxLat, minLon, maxLon)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_INSIDE_QUERY;\n    } else if (numCorners > 0) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    \n    // we cross\n    if (tree.crosses(minLat, maxLat, minLon, maxLon)) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    \n    return Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","034996547ca41c5004216fdd0178acbf06438da2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca","925fce43f3bac029d912b9b7de03c789e258a333"],"034996547ca41c5004216fdd0178acbf06438da2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"925fce43f3bac029d912b9b7de03c789e258a333":["ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca"]},"commit2Childs":{"ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","925fce43f3bac029d912b9b7de03c789e258a333"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca","034996547ca41c5004216fdd0178acbf06438da2"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"034996547ca41c5004216fdd0178acbf06438da2":["ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca"],"925fce43f3bac029d912b9b7de03c789e258a333":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}