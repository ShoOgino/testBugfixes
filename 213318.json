{"path":"solr/contrib/analytics/src/test/org/apache/solr/analytics/NoFacetTest#countTest().mjava","commits":[{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/NoFacetTest#countTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/analytics/NoFacetTest#countTest().mjava","sourceNew":"  @Test\n  public void countTest() throws Exception { \n    //Int\n    Long intResult = (Long)getStatResult(\"cr\", \"int_id\", VAL_TYPE.LONG);\n    Long intTest = (Long)calculateStat(intTestStart, \"count\");\n    assertEquals(getRawResponse(), intResult,intTest);\n\n    //Long\n    Long longResult = (Long)getStatResult(\"cr\", \"long_ld\", VAL_TYPE.LONG);\n    Long longTest = (Long)calculateStat(longTestStart, \"count\");\n    assertEquals(getRawResponse(), longResult,longTest);\n\n    //Float\n    Long floatResult = (Long)getStatResult(\"cr\", \"float_fd\", VAL_TYPE.LONG);\n    Long floatTest = (Long)calculateStat(floatTestStart, \"count\");\n    assertEquals(getRawResponse(), floatResult,floatTest);\n\n    //Double\n    Long doubleResult = (Long)getStatResult(\"cr\", \"double_dd\", VAL_TYPE.LONG);\n    Long doubleTest = (Long)calculateStat(doubleTestStart, \"count\");\n    assertEquals(getRawResponse(), doubleResult,doubleTest);\n\n    //Date\n    Long dateResult = (Long)getStatResult(\"cr\", \"date_dtd\", VAL_TYPE.LONG);\n    Long dateTest = (Long)calculateStat(dateTestStart, \"count\");\n    assertEquals(getRawResponse(), dateResult,dateTest);\n\n    //String\n    Long stringResult = (Long)getStatResult(\"cr\", \"string_sd\", VAL_TYPE.LONG);\n    Long stringTest = (Long)calculateStat(stringTestStart, \"count\");\n    assertEquals(getRawResponse(), stringResult,stringTest);\n  }  \n\n","sourceOld":"  @Test\n  public void countTest() throws Exception { \n    //Int\n    Long intResult = (Long)getStatResult(\"cr\", \"int_id\", VAL_TYPE.LONG);\n    Long intTest = (Long)calculateStat(intTestStart, \"count\");\n    assertEquals(getRawResponse(), intResult,intTest);\n\n    //Long\n    Long longResult = (Long)getStatResult(\"cr\", \"long_ld\", VAL_TYPE.LONG);\n    Long longTest = (Long)calculateStat(longTestStart, \"count\");\n    assertEquals(getRawResponse(), longResult,longTest);\n\n    //Float\n    Long floatResult = (Long)getStatResult(\"cr\", \"float_fd\", VAL_TYPE.LONG);\n    Long floatTest = (Long)calculateStat(floatTestStart, \"count\");\n    assertEquals(getRawResponse(), floatResult,floatTest);\n\n    //Double\n    Long doubleResult = (Long)getStatResult(\"cr\", \"double_dd\", VAL_TYPE.LONG);\n    Long doubleTest = (Long)calculateStat(doubleTestStart, \"count\");\n    assertEquals(getRawResponse(), doubleResult,doubleTest);\n\n    //Date\n    Long dateResult = (Long)getStatResult(\"cr\", \"date_dtd\", VAL_TYPE.LONG);\n    Long dateTest = (Long)calculateStat(dateTestStart, \"count\");\n    assertEquals(getRawResponse(), dateResult,dateTest);\n\n    //String\n    Long stringResult = (Long)getStatResult(\"cr\", \"string_sd\", VAL_TYPE.LONG);\n    Long stringTest = (Long)calculateStat(stringTestStart, \"count\");\n    assertEquals(getRawResponse(), stringResult,stringTest);\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":3,"author":"Houston Putman","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/NoFacetTest#countTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/NoFacetTest#countTest().mjava","sourceNew":"  @Test\n  public void countTest() throws Exception {\n    Map<String, ETP> expressions = new HashMap<>();\n    expressions.put(\"single\", new ETP(\"count(long_l)\", 10L));\n    expressions.put(\"multi\", new ETP(\"count(string_sm)\", 30L));\n    \n    testExpressions(expressions);\n  }\n\n","sourceOld":"  @Test\n  public void countTest() throws Exception { \n    //Int\n    Long intResult = (Long)getStatResult(\"cr\", \"int_id\", VAL_TYPE.LONG);\n    Long intTest = (Long)calculateStat(intTestStart, \"count\");\n    assertEquals(getRawResponse(), intResult,intTest);\n\n    //Long\n    Long longResult = (Long)getStatResult(\"cr\", \"long_ld\", VAL_TYPE.LONG);\n    Long longTest = (Long)calculateStat(longTestStart, \"count\");\n    assertEquals(getRawResponse(), longResult,longTest);\n\n    //Float\n    Long floatResult = (Long)getStatResult(\"cr\", \"float_fd\", VAL_TYPE.LONG);\n    Long floatTest = (Long)calculateStat(floatTestStart, \"count\");\n    assertEquals(getRawResponse(), floatResult,floatTest);\n\n    //Double\n    Long doubleResult = (Long)getStatResult(\"cr\", \"double_dd\", VAL_TYPE.LONG);\n    Long doubleTest = (Long)calculateStat(doubleTestStart, \"count\");\n    assertEquals(getRawResponse(), doubleResult,doubleTest);\n\n    //Date\n    Long dateResult = (Long)getStatResult(\"cr\", \"date_dtd\", VAL_TYPE.LONG);\n    Long dateTest = (Long)calculateStat(dateTestStart, \"count\");\n    assertEquals(getRawResponse(), dateResult,dateTest);\n\n    //String\n    Long stringResult = (Long)getStatResult(\"cr\", \"string_sd\", VAL_TYPE.LONG);\n    Long stringTest = (Long)calculateStat(stringTestStart, \"count\");\n    assertEquals(getRawResponse(), stringResult,stringTest);\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4e64b7199d2f2a17be7f3926c7532553910dce","date":1564342581,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/NoFacetTest#countTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/NoFacetTest#countTest().mjava","sourceNew":"  @Test\n  public void countTest() throws Exception {\n    Map<String, ETP> expressions = new HashMap<>();\n    expressions.put(\"single\", new ETP(\"count(long_l)\", 10L));\n    expressions.put(\"multi\", new ETP(\"count(string_sm)\", 30L));\n\n    testExpressions(expressions);\n  }\n\n","sourceOld":"  @Test\n  public void countTest() throws Exception {\n    Map<String, ETP> expressions = new HashMap<>();\n    expressions.put(\"single\", new ETP(\"count(long_l)\", 10L));\n    expressions.put(\"multi\", new ETP(\"count(string_sm)\", 30L));\n    \n    testExpressions(expressions);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/NoFacetTest#countTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/NoFacetTest#countTest().mjava","sourceNew":"  @Test\n  public void countTest() throws Exception {\n    Map<String, ETP> expressions = new HashMap<>();\n    expressions.put(\"single\", new ETP(\"count(long_l)\", 10L));\n    expressions.put(\"multi\", new ETP(\"count(string_sm)\", 30L));\n\n    testExpressions(expressions);\n  }\n\n","sourceOld":"  @Test\n  public void countTest() throws Exception {\n    Map<String, ETP> expressions = new HashMap<>();\n    expressions.put(\"single\", new ETP(\"count(long_l)\", 10L));\n    expressions.put(\"multi\", new ETP(\"count(string_sm)\", 30L));\n    \n    testExpressions(expressions);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8061ddd97f3352007d927dae445884a6f3d857b":["3bd4c6955956e76c96eb12dfe64108ed03522983","1e4e64b7199d2f2a17be7f3926c7532553910dce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1e4e64b7199d2f2a17be7f3926c7532553910dce"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["0f719faa74f7213d4a395510dbc1f1b7cb178484"]},"commit2Childs":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"3bd4c6955956e76c96eb12dfe64108ed03522983":["1e4e64b7199d2f2a17be7f3926c7532553910dce","f8061ddd97f3352007d927dae445884a6f3d857b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}