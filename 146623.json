{"path":"lucene/core/src/java/org/apache/lucene/util/MSBRadixSorter#reorder(int,int,int[],int[],int).mjava","commits":[{"id":"1ad3fdaef92a8e8112ab0f5be5fd95362cf9030e","date":1464596999,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/MSBRadixSorter#reorder(int,int,int[],int[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/StringMSBRadixSorter#reorder(int,int,int[],int[],int).mjava","sourceNew":"  /**\n   * Reorder based on start/end offsets for each bucket. When this method\n   * returns, startOffsets and endOffsets are equal.\n   * @param startOffsets start offsets per bucket\n   * @param endOffsets end offsets per bucket\n   */\n  private void reorder(int from, int to, int[] startOffsets, int[] endOffsets, int k) {\n    // reorder in place, like the dutch flag problem\n    for (int i = 0; i < HISTOGRAM_SIZE; ++i) {\n      final int limit = endOffsets[i];\n      for (int h1 = startOffsets[i]; h1 < limit; h1 = startOffsets[i]) {\n        final int b = getBucket(from + h1, k);\n        final int h2 = startOffsets[b]++;\n        swap(from + h1, from + h2);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Reorder based on start/end offsets for each bucket. When this method\n   * returns, startOffsets and endOffsets are equal.\n   * @param startOffsets start offsets per bucket\n   * @param endOffsets end offsets per bucket\n   */\n  private void reorder(int from, int to, int[] startOffsets, int[] endOffsets, int k) {\n    // reorder in place, like the dutch flag problem\n    for (int i = 0; i < HISTOGRAM_SIZE; ++i) {\n      final int limit = endOffsets[i];\n      for (int h1 = startOffsets[i]; h1 < limit; h1 = startOffsets[i]) {\n        final int b = getBucket(from + h1, k);\n        final int h2 = startOffsets[b]++;\n        swap(from + h1, from + h2);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da8a02bef7458089240404614139b53c9f875ec7","date":1464597207,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/MSBRadixSorter#reorder(int,int,int[],int[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/StringMSBRadixSorter#reorder(int,int,int[],int[],int).mjava","sourceNew":"  /**\n   * Reorder based on start/end offsets for each bucket. When this method\n   * returns, startOffsets and endOffsets are equal.\n   * @param startOffsets start offsets per bucket\n   * @param endOffsets end offsets per bucket\n   */\n  private void reorder(int from, int to, int[] startOffsets, int[] endOffsets, int k) {\n    // reorder in place, like the dutch flag problem\n    for (int i = 0; i < HISTOGRAM_SIZE; ++i) {\n      final int limit = endOffsets[i];\n      for (int h1 = startOffsets[i]; h1 < limit; h1 = startOffsets[i]) {\n        final int b = getBucket(from + h1, k);\n        final int h2 = startOffsets[b]++;\n        swap(from + h1, from + h2);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Reorder based on start/end offsets for each bucket. When this method\n   * returns, startOffsets and endOffsets are equal.\n   * @param startOffsets start offsets per bucket\n   * @param endOffsets end offsets per bucket\n   */\n  private void reorder(int from, int to, int[] startOffsets, int[] endOffsets, int k) {\n    // reorder in place, like the dutch flag problem\n    for (int i = 0; i < HISTOGRAM_SIZE; ++i) {\n      final int limit = endOffsets[i];\n      for (int h1 = startOffsets[i]; h1 < limit; h1 = startOffsets[i]) {\n        final int b = getBucket(from + h1, k);\n        final int h2 = startOffsets[b]++;\n        swap(from + h1, from + h2);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b8ee93140fd0efef7e101786e3ed5160a700b5f","date":1464820111,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/MSBRadixSorter#reorder(int,int,int[],int[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/StringMSBRadixSorter#reorder(int,int,int[],int[],int).mjava","sourceNew":"  /**\n   * Reorder based on start/end offsets for each bucket. When this method\n   * returns, startOffsets and endOffsets are equal.\n   * @param startOffsets start offsets per bucket\n   * @param endOffsets end offsets per bucket\n   */\n  private void reorder(int from, int to, int[] startOffsets, int[] endOffsets, int k) {\n    // reorder in place, like the dutch flag problem\n    for (int i = 0; i < HISTOGRAM_SIZE; ++i) {\n      final int limit = endOffsets[i];\n      for (int h1 = startOffsets[i]; h1 < limit; h1 = startOffsets[i]) {\n        final int b = getBucket(from + h1, k);\n        final int h2 = startOffsets[b]++;\n        swap(from + h1, from + h2);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Reorder based on start/end offsets for each bucket. When this method\n   * returns, startOffsets and endOffsets are equal.\n   * @param startOffsets start offsets per bucket\n   * @param endOffsets end offsets per bucket\n   */\n  private void reorder(int from, int to, int[] startOffsets, int[] endOffsets, int k) {\n    // reorder in place, like the dutch flag problem\n    for (int i = 0; i < HISTOGRAM_SIZE; ++i) {\n      final int limit = endOffsets[i];\n      for (int h1 = startOffsets[i]; h1 < limit; h1 = startOffsets[i]) {\n        final int b = getBucket(from + h1, k);\n        final int h2 = startOffsets[b]++;\n        swap(from + h1, from + h2);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/MSBRadixSorter#reorder(int,int,int[],int[],int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Reorder based on start/end offsets for each bucket. When this method\n   * returns, startOffsets and endOffsets are equal.\n   * @param startOffsets start offsets per bucket\n   * @param endOffsets end offsets per bucket\n   */\n  private void reorder(int from, int to, int[] startOffsets, int[] endOffsets, int k) {\n    // reorder in place, like the dutch flag problem\n    for (int i = 0; i < HISTOGRAM_SIZE; ++i) {\n      final int limit = endOffsets[i];\n      for (int h1 = startOffsets[i]; h1 < limit; h1 = startOffsets[i]) {\n        final int b = getBucket(from + h1, k);\n        final int h2 = startOffsets[b]++;\n        swap(from + h1, from + h2);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da8a02bef7458089240404614139b53c9f875ec7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1ad3fdaef92a8e8112ab0f5be5fd95362cf9030e"],"1ad3fdaef92a8e8112ab0f5be5fd95362cf9030e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1ad3fdaef92a8e8112ab0f5be5fd95362cf9030e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1ad3fdaef92a8e8112ab0f5be5fd95362cf9030e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1ad3fdaef92a8e8112ab0f5be5fd95362cf9030e"]},"commit2Childs":{"da8a02bef7458089240404614139b53c9f875ec7":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["da8a02bef7458089240404614139b53c9f875ec7","1ad3fdaef92a8e8112ab0f5be5fd95362cf9030e","5b8ee93140fd0efef7e101786e3ed5160a700b5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"1ad3fdaef92a8e8112ab0f5be5fd95362cf9030e":["da8a02bef7458089240404614139b53c9f875ec7","5b8ee93140fd0efef7e101786e3ed5160a700b5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["da8a02bef7458089240404614139b53c9f875ec7","5b8ee93140fd0efef7e101786e3ed5160a700b5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}