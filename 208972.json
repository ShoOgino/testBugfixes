{"path":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#test().mjava","commits":[{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#doTest().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n\n    Slice slice1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1);\n    Slice slice2 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD2);\n\n    assertNotNull(\"Shard1 not found\", slice1);\n    assertNotNull(\"Shard2 not found\", slice2);\n    assertEquals(\"Shard1 is not active\", Slice.ACTIVE, slice1.getState());\n    assertEquals(\"Shard2 is not active\", Slice.ACTIVE, slice2.getState());\n\n    try {\n      deleteShard(SHARD1);\n      fail(\"Deleting an active shard should not have succeeded\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n\n    setSliceState(SHARD1, Slice.INACTIVE);\n\n    clusterState = cloudClient.getZkStateReader().getClusterState();\n\n    slice1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1);\n\n    assertEquals(\"Shard1 is not inactive yet.\", Slice.INACTIVE, slice1.getState());\n\n    deleteShard(SHARD1);\n\n    confirmShardDeletion(SHARD1);\n\n    setSliceState(SHARD2, Slice.CONSTRUCTION);\n    deleteShard(SHARD2);\n    confirmShardDeletion(SHARD2);\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n\n    Slice slice1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1);\n    Slice slice2 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD2);\n\n    assertNotNull(\"Shard1 not found\", slice1);\n    assertNotNull(\"Shard2 not found\", slice2);\n    assertEquals(\"Shard1 is not active\", Slice.ACTIVE, slice1.getState());\n    assertEquals(\"Shard2 is not active\", Slice.ACTIVE, slice2.getState());\n\n    try {\n      deleteShard(SHARD1);\n      fail(\"Deleting an active shard should not have succeeded\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n\n    setSliceState(SHARD1, Slice.INACTIVE);\n\n    clusterState = cloudClient.getZkStateReader().getClusterState();\n\n    slice1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1);\n\n    assertEquals(\"Shard1 is not inactive yet.\", Slice.INACTIVE, slice1.getState());\n\n    deleteShard(SHARD1);\n\n    confirmShardDeletion(SHARD1);\n\n    setSliceState(SHARD2, Slice.CONSTRUCTION);\n    deleteShard(SHARD2);\n    confirmShardDeletion(SHARD2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296","date":1427866967,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n\n    Slice slice1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1);\n    Slice slice2 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD2);\n\n    assertNotNull(\"Shard1 not found\", slice1);\n    assertNotNull(\"Shard2 not found\", slice2);\n    assertSame(\"Shard1 is not active\", Slice.State.ACTIVE, slice1.getState());\n    assertSame(\"Shard2 is not active\", Slice.State.ACTIVE, slice2.getState());\n\n    try {\n      deleteShard(SHARD1);\n      fail(\"Deleting an active shard should not have succeeded\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n\n    setSliceState(SHARD1, Slice.State.INACTIVE);\n\n    clusterState = cloudClient.getZkStateReader().getClusterState();\n\n    slice1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1);\n\n    assertSame(\"Shard1 is not inactive yet.\", Slice.State.INACTIVE, slice1.getState());\n\n    deleteShard(SHARD1);\n\n    confirmShardDeletion(SHARD1);\n\n    setSliceState(SHARD2, Slice.State.CONSTRUCTION);\n    deleteShard(SHARD2);\n    confirmShardDeletion(SHARD2);\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n\n    Slice slice1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1);\n    Slice slice2 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD2);\n\n    assertNotNull(\"Shard1 not found\", slice1);\n    assertNotNull(\"Shard2 not found\", slice2);\n    assertEquals(\"Shard1 is not active\", Slice.ACTIVE, slice1.getState());\n    assertEquals(\"Shard2 is not active\", Slice.ACTIVE, slice2.getState());\n\n    try {\n      deleteShard(SHARD1);\n      fail(\"Deleting an active shard should not have succeeded\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n\n    setSliceState(SHARD1, Slice.INACTIVE);\n\n    clusterState = cloudClient.getZkStateReader().getClusterState();\n\n    slice1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1);\n\n    assertEquals(\"Shard1 is not inactive yet.\", Slice.INACTIVE, slice1.getState());\n\n    deleteShard(SHARD1);\n\n    confirmShardDeletion(SHARD1);\n\n    setSliceState(SHARD2, Slice.CONSTRUCTION);\n    deleteShard(SHARD2);\n    confirmShardDeletion(SHARD2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c924d4069ef5a5bc479a493befe0121aada6896","date":1427901860,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n\n    Slice slice1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1);\n    Slice slice2 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD2);\n\n    assertNotNull(\"Shard1 not found\", slice1);\n    assertNotNull(\"Shard2 not found\", slice2);\n    assertSame(\"Shard1 is not active\", Slice.State.ACTIVE, slice1.getState());\n    assertSame(\"Shard2 is not active\", Slice.State.ACTIVE, slice2.getState());\n\n    try {\n      deleteShard(SHARD1);\n      fail(\"Deleting an active shard should not have succeeded\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n\n    setSliceState(SHARD1, Slice.State.INACTIVE);\n\n    clusterState = cloudClient.getZkStateReader().getClusterState();\n\n    slice1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1);\n\n    assertSame(\"Shard1 is not inactive yet.\", Slice.State.INACTIVE, slice1.getState());\n\n    deleteShard(SHARD1);\n\n    confirmShardDeletion(SHARD1);\n\n    setSliceState(SHARD2, Slice.State.CONSTRUCTION);\n    deleteShard(SHARD2);\n    confirmShardDeletion(SHARD2);\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n\n    Slice slice1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1);\n    Slice slice2 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD2);\n\n    assertNotNull(\"Shard1 not found\", slice1);\n    assertNotNull(\"Shard2 not found\", slice2);\n    assertEquals(\"Shard1 is not active\", Slice.ACTIVE, slice1.getState());\n    assertEquals(\"Shard2 is not active\", Slice.ACTIVE, slice2.getState());\n\n    try {\n      deleteShard(SHARD1);\n      fail(\"Deleting an active shard should not have succeeded\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n\n    setSliceState(SHARD1, Slice.INACTIVE);\n\n    clusterState = cloudClient.getZkStateReader().getClusterState();\n\n    slice1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1);\n\n    assertEquals(\"Shard1 is not inactive yet.\", Slice.INACTIVE, slice1.getState());\n\n    deleteShard(SHARD1);\n\n    confirmShardDeletion(SHARD1);\n\n    setSliceState(SHARD2, Slice.CONSTRUCTION);\n    deleteShard(SHARD2);\n    confirmShardDeletion(SHARD2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"636a04bc82e662bf141a55f1d10f52e1c76c727b","date":1483014160,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n\n    final String collection = \"deleteShard\";\n\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 1)\n        .process(cluster.getSolrClient());\n\n    DocCollection state = getCollectionState(collection);\n    assertEquals(State.ACTIVE, state.getSlice(\"shard1\").getState());\n    assertEquals(State.ACTIVE, state.getSlice(\"shard2\").getState());\n\n    // Can't delete an ACTIVE shard\n    expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.deleteShard(collection, \"shard1\").process(cluster.getSolrClient());\n    });\n\n    setSliceState(collection, \"shard1\", Slice.State.INACTIVE);\n\n    // Can delete an INATIVE shard\n    CollectionAdminRequest.deleteShard(collection, \"shard1\").process(cluster.getSolrClient());\n    waitForState(\"Expected 'shard1' to be removed\", collection, (n, c) -> {\n      return c.getSlice(\"shard1\") == null;\n    });\n\n    // Can delete a shard under construction\n    setSliceState(collection, \"shard2\", Slice.State.CONSTRUCTION);\n    CollectionAdminRequest.deleteShard(collection, \"shard2\").process(cluster.getSolrClient());\n    waitForState(\"Expected 'shard2' to be removed\", collection, (n, c) -> {\n      return c.getSlice(\"shard2\") == null;\n    });\n\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n\n    Slice slice1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1);\n    Slice slice2 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD2);\n\n    assertNotNull(\"Shard1 not found\", slice1);\n    assertNotNull(\"Shard2 not found\", slice2);\n    assertSame(\"Shard1 is not active\", Slice.State.ACTIVE, slice1.getState());\n    assertSame(\"Shard2 is not active\", Slice.State.ACTIVE, slice2.getState());\n\n    try {\n      deleteShard(SHARD1);\n      fail(\"Deleting an active shard should not have succeeded\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n\n    setSliceState(SHARD1, Slice.State.INACTIVE);\n\n    clusterState = cloudClient.getZkStateReader().getClusterState();\n\n    slice1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1);\n\n    assertSame(\"Shard1 is not inactive yet.\", Slice.State.INACTIVE, slice1.getState());\n\n    deleteShard(SHARD1);\n\n    confirmShardDeletion(SHARD1);\n\n    setSliceState(SHARD2, Slice.State.CONSTRUCTION);\n    deleteShard(SHARD2);\n    confirmShardDeletion(SHARD2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n\n    final String collection = \"deleteShard\";\n\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 1)\n        .process(cluster.getSolrClient());\n\n    DocCollection state = getCollectionState(collection);\n    assertEquals(State.ACTIVE, state.getSlice(\"shard1\").getState());\n    assertEquals(State.ACTIVE, state.getSlice(\"shard2\").getState());\n\n    // Can't delete an ACTIVE shard\n    expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.deleteShard(collection, \"shard1\").process(cluster.getSolrClient());\n    });\n\n    setSliceState(collection, \"shard1\", Slice.State.INACTIVE);\n\n    // Can delete an INATIVE shard\n    CollectionAdminRequest.deleteShard(collection, \"shard1\").process(cluster.getSolrClient());\n    waitForState(\"Expected 'shard1' to be removed\", collection, (n, c) -> {\n      return c.getSlice(\"shard1\") == null;\n    });\n\n    // Can delete a shard under construction\n    setSliceState(collection, \"shard2\", Slice.State.CONSTRUCTION);\n    CollectionAdminRequest.deleteShard(collection, \"shard2\").process(cluster.getSolrClient());\n    waitForState(\"Expected 'shard2' to be removed\", collection, (n, c) -> {\n      return c.getSlice(\"shard2\") == null;\n    });\n\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n\n    Slice slice1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1);\n    Slice slice2 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD2);\n\n    assertNotNull(\"Shard1 not found\", slice1);\n    assertNotNull(\"Shard2 not found\", slice2);\n    assertSame(\"Shard1 is not active\", Slice.State.ACTIVE, slice1.getState());\n    assertSame(\"Shard2 is not active\", Slice.State.ACTIVE, slice2.getState());\n\n    try {\n      deleteShard(SHARD1);\n      fail(\"Deleting an active shard should not have succeeded\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      // expected\n    }\n\n    setSliceState(SHARD1, Slice.State.INACTIVE);\n\n    clusterState = cloudClient.getZkStateReader().getClusterState();\n\n    slice1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1);\n\n    assertSame(\"Shard1 is not inactive yet.\", Slice.State.INACTIVE, slice1.getState());\n\n    deleteShard(SHARD1);\n\n    confirmShardDeletion(SHARD1);\n\n    setSliceState(SHARD2, Slice.State.CONSTRUCTION);\n    deleteShard(SHARD2);\n    confirmShardDeletion(SHARD2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteShardTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n\n    final String collection = \"deleteShard\";\n\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 1)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(collection, 2, 2);\n\n    DocCollection state = getCollectionState(collection);\n    assertEquals(State.ACTIVE, state.getSlice(\"shard1\").getState());\n    assertEquals(State.ACTIVE, state.getSlice(\"shard2\").getState());\n\n    // Can't delete an ACTIVE shard\n    expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.deleteShard(collection, \"shard1\").process(cluster.getSolrClient());\n    });\n\n    setSliceState(collection, \"shard1\", Slice.State.INACTIVE);\n\n    // Can delete an INATIVE shard\n    CollectionAdminRequest.deleteShard(collection, \"shard1\").process(cluster.getSolrClient());\n    waitForState(\"Expected 'shard1' to be removed\", collection, (n, c) -> {\n      return c.getSlice(\"shard1\") == null;\n    });\n\n    // Can delete a shard under construction\n    setSliceState(collection, \"shard2\", Slice.State.CONSTRUCTION);\n    CollectionAdminRequest.deleteShard(collection, \"shard2\").process(cluster.getSolrClient());\n    waitForState(\"Expected 'shard2' to be removed\", collection, (n, c) -> {\n      return c.getSlice(\"shard2\") == null;\n    });\n\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n\n    final String collection = \"deleteShard\";\n\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 1)\n        .process(cluster.getSolrClient());\n\n    DocCollection state = getCollectionState(collection);\n    assertEquals(State.ACTIVE, state.getSlice(\"shard1\").getState());\n    assertEquals(State.ACTIVE, state.getSlice(\"shard2\").getState());\n\n    // Can't delete an ACTIVE shard\n    expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.deleteShard(collection, \"shard1\").process(cluster.getSolrClient());\n    });\n\n    setSliceState(collection, \"shard1\", Slice.State.INACTIVE);\n\n    // Can delete an INATIVE shard\n    CollectionAdminRequest.deleteShard(collection, \"shard1\").process(cluster.getSolrClient());\n    waitForState(\"Expected 'shard1' to be removed\", collection, (n, c) -> {\n      return c.getSlice(\"shard1\") == null;\n    });\n\n    // Can delete a shard under construction\n    setSliceState(collection, \"shard2\", Slice.State.CONSTRUCTION);\n    CollectionAdminRequest.deleteShard(collection, \"shard2\").process(cluster.getSolrClient());\n    waitForState(\"Expected 'shard2' to be removed\", collection, (n, c) -> {\n      return c.getSlice(\"shard2\") == null;\n    });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"636a04bc82e662bf141a55f1d10f52e1c76c727b":["d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["636a04bc82e662bf141a55f1d10f52e1c76c727b"],"d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296":["abb23fcc2461782ab204e61213240feb77d355aa"],"abb23fcc2461782ab204e61213240feb77d355aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296","636a04bc82e662bf141a55f1d10f52e1c76c727b"],"0c924d4069ef5a5bc479a493befe0121aada6896":["abb23fcc2461782ab204e61213240feb77d355aa","d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296"]},"commit2Childs":{"636a04bc82e662bf141a55f1d10f52e1c76c727b":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296":["636a04bc82e662bf141a55f1d10f52e1c76c727b","f03e4bed5023ec3ef93a771b8888cae991cf448d","0c924d4069ef5a5bc479a493befe0121aada6896"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"abb23fcc2461782ab204e61213240feb77d355aa":["d0dcc63c22f7cfe3d3a83aee576d0fc5b403a296","0c924d4069ef5a5bc479a493befe0121aada6896"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["abb23fcc2461782ab204e61213240feb77d355aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[],"0c924d4069ef5a5bc479a493befe0121aada6896":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d","0c924d4069ef5a5bc479a493befe0121aada6896"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}