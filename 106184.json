{"path":"src/java/org/apache/solr/handler/SnapShooter.FileCopier#copyFile(File,File,boolean).mjava","commits":[{"id":"9b87acd61509ed222a7ae58c584568eca5a6243e","date":1255125162,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapShooter.FileCopier#copyFile(File,File,boolean).mjava","pathOld":"/dev/null","sourceNew":"    public void copyFile(File source, File destination, boolean preserveFileDate)\n        throws IOException {\n      // check source exists\n      if (!source.exists()) {\n        String message = \"File \" + source + \" does not exist\";\n        throw new FileNotFoundException(message);\n      }\n\n      // does destinations directory exist ?\n      if (destination.getParentFile() != null\n          && !destination.getParentFile().exists()) {\n        destination.getParentFile().mkdirs();\n      }\n\n      // make sure we can write to destination\n      if (destination.exists() && !destination.canWrite()) {\n        String message = \"Unable to open file \" + destination + \" for writing.\";\n        throw new IOException(message);\n      }\n\n      FileInputStream input = null;\n      FileOutputStream output = null;\n      try {\n        input = new FileInputStream(source);\n        output = new FileOutputStream(destination);\n \n        int count = 0;\n        int n = 0;\n        int rcnt = 0;\n        while (-1 != (n = input.read(buffer))) {\n          output.write(buffer, 0, n);\n          count += n;\n          rcnt++;\n          /***\n          // reserve every 4.6875 MB\n          if (rcnt == 150) {\n            rcnt = 0;\n            delPolicy.setReserveDuration(indexCommit.getVersion(), reserveTime);\n          }\n           ***/\n        }\n      } finally {\n        try {\n          IOUtils.closeQuietly(input);\n        } finally {\n          IOUtils.closeQuietly(output);\n        }\n      }\n\n      if (source.length() != destination.length()) {\n        String message = \"Failed to copy full contents from \" + source + \" to \"\n            + destination;\n        throw new IOException(message);\n      }\n\n      if (preserveFileDate) {\n        // file copy should preserve file date\n        destination.setLastModified(source.lastModified());\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/SnapShooter.FileCopier#copyFile(File,File,boolean).mjava","pathOld":"src/java/org/apache/solr/handler/SnapShooter.FileCopier#copyFile(File,File,boolean).mjava","sourceNew":"    public void copyFile(File source, File destination, boolean preserveFileDate)\n        throws IOException {\n      // check source exists\n      if (!source.exists()) {\n        String message = \"File \" + source + \" does not exist\";\n        throw new FileNotFoundException(message);\n      }\n\n      // does destinations directory exist ?\n      if (destination.getParentFile() != null\n          && !destination.getParentFile().exists()) {\n        destination.getParentFile().mkdirs();\n      }\n\n      // make sure we can write to destination\n      if (destination.exists() && !destination.canWrite()) {\n        String message = \"Unable to open file \" + destination + \" for writing.\";\n        throw new IOException(message);\n      }\n\n      FileInputStream input = null;\n      FileOutputStream output = null;\n      try {\n        input = new FileInputStream(source);\n        output = new FileOutputStream(destination);\n \n        int count = 0;\n        int n = 0;\n        int rcnt = 0;\n        while (-1 != (n = input.read(buffer))) {\n          output.write(buffer, 0, n);\n          count += n;\n          rcnt++;\n          /***\n          // reserve every 4.6875 MB\n          if (rcnt == 150) {\n            rcnt = 0;\n            delPolicy.setReserveDuration(indexCommit.getVersion(), reserveTime);\n          }\n           ***/\n        }\n      } finally {\n        try {\n          IOUtils.closeQuietly(input);\n        } finally {\n          IOUtils.closeQuietly(output);\n        }\n      }\n\n      if (source.length() != destination.length()) {\n        String message = \"Failed to copy full contents from \" + source + \" to \"\n            + destination;\n        throw new IOException(message);\n      }\n\n      if (preserveFileDate) {\n        // file copy should preserve file date\n        destination.setLastModified(source.lastModified());\n      }\n    }\n\n","sourceOld":"    public void copyFile(File source, File destination, boolean preserveFileDate)\n        throws IOException {\n      // check source exists\n      if (!source.exists()) {\n        String message = \"File \" + source + \" does not exist\";\n        throw new FileNotFoundException(message);\n      }\n\n      // does destinations directory exist ?\n      if (destination.getParentFile() != null\n          && !destination.getParentFile().exists()) {\n        destination.getParentFile().mkdirs();\n      }\n\n      // make sure we can write to destination\n      if (destination.exists() && !destination.canWrite()) {\n        String message = \"Unable to open file \" + destination + \" for writing.\";\n        throw new IOException(message);\n      }\n\n      FileInputStream input = null;\n      FileOutputStream output = null;\n      try {\n        input = new FileInputStream(source);\n        output = new FileOutputStream(destination);\n \n        int count = 0;\n        int n = 0;\n        int rcnt = 0;\n        while (-1 != (n = input.read(buffer))) {\n          output.write(buffer, 0, n);\n          count += n;\n          rcnt++;\n          /***\n          // reserve every 4.6875 MB\n          if (rcnt == 150) {\n            rcnt = 0;\n            delPolicy.setReserveDuration(indexCommit.getVersion(), reserveTime);\n          }\n           ***/\n        }\n      } finally {\n        try {\n          IOUtils.closeQuietly(input);\n        } finally {\n          IOUtils.closeQuietly(output);\n        }\n      }\n\n      if (source.length() != destination.length()) {\n        String message = \"Failed to copy full contents from \" + source + \" to \"\n            + destination;\n        throw new IOException(message);\n      }\n\n      if (preserveFileDate) {\n        // file copy should preserve file date\n        destination.setLastModified(source.lastModified());\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9b87acd61509ed222a7ae58c584568eca5a6243e":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["9b87acd61509ed222a7ae58c584568eca5a6243e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9b87acd61509ed222a7ae58c584568eca5a6243e":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["9b87acd61509ed222a7ae58c584568eca5a6243e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}