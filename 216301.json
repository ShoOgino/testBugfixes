{"path":"lucene/highlighter/src/java/org/apache/lucene/search/matchhighlight/OffsetsFromTokens#get(MatchesIterator,MatchRegionRetriever.FieldValueProvider).mjava","commits":[{"id":"2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c","date":1597407672,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/matchhighlight/OffsetsFromTokens#get(MatchesIterator,MatchRegionRetriever.FieldValueProvider).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public List<OffsetRange> get(MatchesIterator matchesIterator, MatchRegionRetriever.FieldValueProvider doc) throws IOException {\n    List<CharSequence> values = doc.getValues(field);\n\n    Set<BytesRef> matchTerms = new HashSet<>();\n    while (matchesIterator.next()) {\n      Query q = matchesIterator.getQuery();\n      q.visit(new QueryVisitor() {\n        @Override\n        public void consumeTerms(Query query, Term... terms) {\n          for (Term t : terms) {\n            if (field.equals(t.field())) {\n              matchTerms.add(t.bytes());\n            }\n          }\n        }\n      });\n    }\n\n    ArrayList<OffsetRange> ranges = new ArrayList<>();\n    int valueOffset = 0;\n    for (int valueIndex = 0, max = values.size(); valueIndex < max; valueIndex++) {\n      final String value = values.get(valueIndex).toString();\n\n      TokenStream ts = analyzer.tokenStream(field, value);\n      OffsetAttribute offsetAttr = ts.getAttribute(OffsetAttribute.class);\n      TermToBytesRefAttribute termAttr = ts.getAttribute(TermToBytesRefAttribute.class);\n      ts.reset();\n      while (ts.incrementToken()) {\n        if (matchTerms.contains(termAttr.getBytesRef())) {\n          int startOffset = valueOffset + offsetAttr.startOffset();\n          int endOffset = valueOffset + offsetAttr.endOffset();\n          ranges.add(new OffsetRange(startOffset, endOffset));\n        }\n      }\n      ts.end();\n      valueOffset += offsetAttr.endOffset() + analyzer.getOffsetGap(field);\n      ts.close();\n    }\n    return ranges;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c"]},"commit2Childs":{"2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}