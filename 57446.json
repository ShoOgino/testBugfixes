{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,String,String,IOContext).mjava","commits":[{"id":"8435160e9702b19398118ddf76b61c846612b6a4","date":1380349140,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,String,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, segmentSuffix, FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    BytesRef scratch = new BytesRef();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        final IndexOptions indexOptions;\n        if (isIndexed) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, INDEXOPTIONS);\n          indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));          \n        } else {\n          indexOptions = null;\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS_TYPE);\n        String nrmType = readString(NORMS_TYPE.length, scratch);\n        final DocValuesType normsType = docValuesType(nrmType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<String,String>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType, Collections.unmodifiableMap(atts));\n        infos[i].setDocValuesGen(dvGen);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    BytesRef scratch = new BytesRef();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        final IndexOptions indexOptions;\n        if (isIndexed) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, INDEXOPTIONS);\n          indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));          \n        } else {\n          indexOptions = null;\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS_TYPE);\n        String nrmType = readString(NORMS_TYPE.length, scratch);\n        final DocValuesType normsType = docValuesType(nrmType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<String,String>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType, Collections.unmodifiableMap(atts));\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,String,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,String,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, segmentSuffix, FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    BytesRef scratch = new BytesRef();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        final IndexOptions indexOptions;\n        if (isIndexed) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, INDEXOPTIONS);\n          indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));          \n        } else {\n          indexOptions = null;\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS_TYPE);\n        String nrmType = readString(NORMS_TYPE.length, scratch);\n        final DocValuesType normsType = docValuesType(nrmType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType, Collections.unmodifiableMap(atts));\n        infos[i].setDocValuesGen(dvGen);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, segmentSuffix, FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    BytesRef scratch = new BytesRef();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        final IndexOptions indexOptions;\n        if (isIndexed) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, INDEXOPTIONS);\n          indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));          \n        } else {\n          indexOptions = null;\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS_TYPE);\n        String nrmType = readString(NORMS_TYPE.length, scratch);\n        final DocValuesType normsType = docValuesType(nrmType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<String,String>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType, Collections.unmodifiableMap(atts));\n        infos[i].setDocValuesGen(dvGen);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f3b037cd083286b2af89f96e768f85dcd8072d6","date":1396337805,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,String,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,String,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, segmentSuffix, FIELD_INFOS_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(fileName, iocontext);\n    BytesRef scratch = new BytesRef();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        final IndexOptions indexOptions;\n        if (isIndexed) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, INDEXOPTIONS);\n          indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));          \n        } else {\n          indexOptions = null;\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS_TYPE);\n        String nrmType = readString(NORMS_TYPE.length, scratch);\n        final DocValuesType normsType = docValuesType(nrmType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType, Collections.unmodifiableMap(atts));\n        infos[i].setDocValuesGen(dvGen);\n      }\n\n      SimpleTextUtil.checkFooter(input, CHECKSUM);\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, segmentSuffix, FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    BytesRef scratch = new BytesRef();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        final IndexOptions indexOptions;\n        if (isIndexed) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, INDEXOPTIONS);\n          indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));          \n        } else {\n          indexOptions = null;\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS_TYPE);\n        String nrmType = readString(NORMS_TYPE.length, scratch);\n        final DocValuesType normsType = docValuesType(nrmType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType, Collections.unmodifiableMap(atts));\n        infos[i].setDocValuesGen(dvGen);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["caf65fa364fcf8ea8ef1032c1247622933af3b04"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,String,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,String,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, segmentSuffix, FIELD_INFOS_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(fileName, iocontext);\n    BytesRef scratch = new BytesRef();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        final IndexOptions indexOptions;\n        if (isIndexed) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, INDEXOPTIONS);\n          indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));          \n        } else {\n          indexOptions = null;\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS_TYPE);\n        String nrmType = readString(NORMS_TYPE.length, scratch);\n        final DocValuesType normsType = docValuesType(nrmType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType, Collections.unmodifiableMap(atts));\n        infos[i].setDocValuesGen(dvGen);\n      }\n\n      SimpleTextUtil.checkFooter(input, CHECKSUM);\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, segmentSuffix, FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    BytesRef scratch = new BytesRef();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        final IndexOptions indexOptions;\n        if (isIndexed) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, INDEXOPTIONS);\n          indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));          \n        } else {\n          indexOptions = null;\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS_TYPE);\n        String nrmType = readString(NORMS_TYPE.length, scratch);\n        final DocValuesType normsType = docValuesType(nrmType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType, Collections.unmodifiableMap(atts));\n        infos[i].setDocValuesGen(dvGen);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"caf65fa364fcf8ea8ef1032c1247622933af3b04","date":1397057745,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,String,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,String,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, segmentSuffix, FIELD_INFOS_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(fileName, iocontext);\n    BytesRef scratch = new BytesRef();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        final IndexOptions indexOptions;\n        if (isIndexed) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, INDEXOPTIONS);\n          indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));          \n        } else {\n          indexOptions = null;\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS_TYPE);\n        String nrmType = readString(NORMS_TYPE.length, scratch);\n        final DocValuesType normsType = docValuesType(nrmType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType, Collections.unmodifiableMap(atts));\n        infos[i].setDocValuesGen(dvGen);\n      }\n\n      SimpleTextUtil.checkFooter(input);\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, segmentSuffix, FIELD_INFOS_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(fileName, iocontext);\n    BytesRef scratch = new BytesRef();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        final IndexOptions indexOptions;\n        if (isIndexed) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, INDEXOPTIONS);\n          indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));          \n        } else {\n          indexOptions = null;\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS_TYPE);\n        String nrmType = readString(NORMS_TYPE.length, scratch);\n        final DocValuesType normsType = docValuesType(nrmType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType, Collections.unmodifiableMap(atts));\n        infos[i].setDocValuesGen(dvGen);\n      }\n\n      SimpleTextUtil.checkFooter(input, CHECKSUM);\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","bugFix":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ca02c6cbb1ba28fd0bd36bd0f8a2ac84be5f0e71","date":1400675008,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,String,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,String,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, segmentSuffix, FIELD_INFOS_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(fileName, iocontext);\n    BytesRef scratch = new BytesRef();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        final IndexOptions indexOptions;\n        if (isIndexed) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, INDEXOPTIONS);\n          indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));          \n        } else {\n          indexOptions = null;\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS_TYPE);\n        String nrmType = readString(NORMS_TYPE.length, scratch);\n        final DocValuesType normsType = docValuesType(nrmType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType, dvGen, Collections.unmodifiableMap(atts));\n      }\n\n      SimpleTextUtil.checkFooter(input);\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, segmentSuffix, FIELD_INFOS_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(fileName, iocontext);\n    BytesRef scratch = new BytesRef();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        final IndexOptions indexOptions;\n        if (isIndexed) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, INDEXOPTIONS);\n          indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));          \n        } else {\n          indexOptions = null;\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS_TYPE);\n        String nrmType = readString(NORMS_TYPE.length, scratch);\n        final DocValuesType normsType = docValuesType(nrmType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType, Collections.unmodifiableMap(atts));\n        infos[i].setDocValuesGen(dvGen);\n      }\n\n      SimpleTextUtil.checkFooter(input);\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","bugFix":["8435160e9702b19398118ddf76b61c846612b6a4","f00f0f8c602950d28e2cb62039b72f51f5d5c44c"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a656b32c3aa151037a8c52e9b134acc3cbf482bc","date":1400688195,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,String,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,String,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, segmentSuffix, FIELD_INFOS_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(fileName, iocontext);\n    BytesRef scratch = new BytesRef();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        final IndexOptions indexOptions;\n        if (isIndexed) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, INDEXOPTIONS);\n          indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));          \n        } else {\n          indexOptions = null;\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS_TYPE);\n        String nrmType = readString(NORMS_TYPE.length, scratch);\n        final DocValuesType normsType = docValuesType(nrmType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType, dvGen, Collections.unmodifiableMap(atts));\n      }\n\n      SimpleTextUtil.checkFooter(input);\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, segmentSuffix, FIELD_INFOS_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(fileName, iocontext);\n    BytesRef scratch = new BytesRef();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        final IndexOptions indexOptions;\n        if (isIndexed) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, INDEXOPTIONS);\n          indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));          \n        } else {\n          indexOptions = null;\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS_TYPE);\n        String nrmType = readString(NORMS_TYPE.length, scratch);\n        final DocValuesType normsType = docValuesType(nrmType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType, Collections.unmodifiableMap(atts));\n        infos[i].setDocValuesGen(dvGen);\n      }\n\n      SimpleTextUtil.checkFooter(input);\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,String,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,String,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, segmentSuffix, FIELD_INFOS_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(fileName, iocontext);\n    BytesRef scratch = new BytesRef();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        final IndexOptions indexOptions;\n        if (isIndexed) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, INDEXOPTIONS);\n          indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));          \n        } else {\n          indexOptions = null;\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS_TYPE);\n        String nrmType = readString(NORMS_TYPE.length, scratch);\n        final DocValuesType normsType = docValuesType(nrmType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType, dvGen, Collections.unmodifiableMap(atts));\n      }\n\n      SimpleTextUtil.checkFooter(input);\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, segmentSuffix, FIELD_INFOS_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(fileName, iocontext);\n    BytesRef scratch = new BytesRef();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        final IndexOptions indexOptions;\n        if (isIndexed) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, INDEXOPTIONS);\n          indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));          \n        } else {\n          indexOptions = null;\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS_TYPE);\n        String nrmType = readString(NORMS_TYPE.length, scratch);\n        final DocValuesType normsType = docValuesType(nrmType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType, Collections.unmodifiableMap(atts));\n        infos[i].setDocValuesGen(dvGen);\n      }\n\n      SimpleTextUtil.checkFooter(input);\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,String,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,String,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, segmentSuffix, FIELD_INFOS_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(fileName, iocontext);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        final IndexOptions indexOptions;\n        if (isIndexed) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), INDEXOPTIONS);\n          indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));          \n        } else {\n          indexOptions = null;\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS_TYPE);\n        String nrmType = readString(NORMS_TYPE.length, scratch);\n        final DocValuesType normsType = docValuesType(nrmType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType, dvGen, Collections.unmodifiableMap(atts));\n      }\n\n      SimpleTextUtil.checkFooter(input);\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, segmentSuffix, FIELD_INFOS_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(fileName, iocontext);\n    BytesRef scratch = new BytesRef();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        final IndexOptions indexOptions;\n        if (isIndexed) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, INDEXOPTIONS);\n          indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));          \n        } else {\n          indexOptions = null;\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NORMS_TYPE);\n        String nrmType = readString(NORMS_TYPE.length, scratch);\n        final DocValuesType normsType = docValuesType(nrmType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch, ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType, dvGen, Collections.unmodifiableMap(atts));\n      }\n\n      SimpleTextUtil.checkFooter(input);\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","bugFix":["83ede60c0b5bb96ad193414bbd663193b56689b3","8435160e9702b19398118ddf76b61c846612b6a4","3cc749c053615f5871f3b95715fe292f34e70a53","61f30939a6ca0891c7b0c0f34aa43800bd4c9a15","a0f42e0639920b2e917c9ece35fb68ad83021e38","9e8d5a6ffbfa3405d234a87c833741eabed98d13"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c65d2864d936ccf22dc7ec14dd48b4dff7bacceb","date":1411653326,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,SegmentInfo,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,String,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(fileName, iocontext);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        final IndexOptions indexOptions;\n        if (isIndexed) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), INDEXOPTIONS);\n          indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));          \n        } else {\n          indexOptions = null;\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS_TYPE);\n        String nrmType = readString(NORMS_TYPE.length, scratch);\n        final DocValuesType normsType = docValuesType(nrmType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType, dvGen, Collections.unmodifiableMap(atts));\n      }\n\n      SimpleTextUtil.checkFooter(input);\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, segmentSuffix, FIELD_INFOS_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(fileName, iocontext);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        final IndexOptions indexOptions;\n        if (isIndexed) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), INDEXOPTIONS);\n          indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));          \n        } else {\n          indexOptions = null;\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS_TYPE);\n        String nrmType = readString(NORMS_TYPE.length, scratch);\n        final DocValuesType normsType = docValuesType(nrmType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType, dvGen, Collections.unmodifiableMap(atts));\n      }\n\n      SimpleTextUtil.checkFooter(input);\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f6bd27530a2846413fe2d00030493c0e2d3a072","date":1411811855,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,SegmentInfo,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,String,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(fileName, iocontext);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        final IndexOptions indexOptions;\n        if (isIndexed) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), INDEXOPTIONS);\n          indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));          \n        } else {\n          indexOptions = null;\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS_TYPE);\n        String nrmType = readString(NORMS_TYPE.length, scratch);\n        final DocValuesType normsType = docValuesType(nrmType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType, dvGen, Collections.unmodifiableMap(atts));\n      }\n\n      SimpleTextUtil.checkFooter(input);\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, segmentSuffix, FIELD_INFOS_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(fileName, iocontext);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        final IndexOptions indexOptions;\n        if (isIndexed) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), INDEXOPTIONS);\n          indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));          \n        } else {\n          indexOptions = null;\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS_TYPE);\n        String nrmType = readString(NORMS_TYPE.length, scratch);\n        final DocValuesType normsType = docValuesType(nrmType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType, dvGen, Collections.unmodifiableMap(atts));\n      }\n\n      SimpleTextUtil.checkFooter(input);\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["8435160e9702b19398118ddf76b61c846612b6a4"],"5f6bd27530a2846413fe2d00030493c0e2d3a072":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","c65d2864d936ccf22dc7ec14dd48b4dff7bacceb"],"8435160e9702b19398118ddf76b61c846612b6a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["ca02c6cbb1ba28fd0bd36bd0f8a2ac84be5f0e71"],"b7605579001505896d48b07160075a5c8b8e128e":["caf65fa364fcf8ea8ef1032c1247622933af3b04","ca02c6cbb1ba28fd0bd36bd0f8a2ac84be5f0e71"],"caf65fa364fcf8ea8ef1032c1247622933af3b04":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a656b32c3aa151037a8c52e9b134acc3cbf482bc":["caf65fa364fcf8ea8ef1032c1247622933af3b04","ca02c6cbb1ba28fd0bd36bd0f8a2ac84be5f0e71"],"ca02c6cbb1ba28fd0bd36bd0f8a2ac84be5f0e71":["caf65fa364fcf8ea8ef1032c1247622933af3b04"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5f6bd27530a2846413fe2d00030493c0e2d3a072"],"c65d2864d936ccf22dc7ec14dd48b4dff7bacceb":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["5eb2511ababf862ea11e10761c70ee560cd84510","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["5eb2511ababf862ea11e10761c70ee560cd84510","caf65fa364fcf8ea8ef1032c1247622933af3b04"],"5f6bd27530a2846413fe2d00030493c0e2d3a072":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8435160e9702b19398118ddf76b61c846612b6a4":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["5f6bd27530a2846413fe2d00030493c0e2d3a072","c65d2864d936ccf22dc7ec14dd48b4dff7bacceb"],"b7605579001505896d48b07160075a5c8b8e128e":[],"caf65fa364fcf8ea8ef1032c1247622933af3b04":["b7605579001505896d48b07160075a5c8b8e128e","a656b32c3aa151037a8c52e9b134acc3cbf482bc","ca02c6cbb1ba28fd0bd36bd0f8a2ac84be5f0e71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8435160e9702b19398118ddf76b61c846612b6a4"],"a656b32c3aa151037a8c52e9b134acc3cbf482bc":[],"ca02c6cbb1ba28fd0bd36bd0f8a2ac84be5f0e71":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","b7605579001505896d48b07160075a5c8b8e128e","a656b32c3aa151037a8c52e9b134acc3cbf482bc"],"c65d2864d936ccf22dc7ec14dd48b4dff7bacceb":["5f6bd27530a2846413fe2d00030493c0e2d3a072"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","b7605579001505896d48b07160075a5c8b8e128e","a656b32c3aa151037a8c52e9b134acc3cbf482bc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}