{"path":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#reset().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#reset().mjava","pathOld":"solr/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#reset().mjava","sourceNew":"  @Override\n  public void reset() throws IOException {\n    super.reset();\n    ts.reset();\n  }\n\n","sourceOld":"  @Override\n  public void reset() throws IOException {\n    super.reset();\n    ts.reset();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#reset().mjava","pathOld":"solr/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#reset().mjava","sourceNew":"  @Override\n  public void reset() throws IOException {\n    super.reset();\n    ts.reset();\n  }\n\n","sourceOld":"  @Override\n  public void reset() throws IOException {\n    super.reset();\n    ts.reset();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#reset().mjava","pathOld":"solr/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#reset().mjava","sourceNew":"  @Override\n  public void reset() throws IOException {\n    super.reset();\n    ts.reset();\n  }\n\n","sourceOld":"  @Override\n  public void reset() throws IOException {\n    super.reset();\n    ts.reset();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c1b87b155748a27fbed84a0ffb3f8799177451e","date":1346349018,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#reset().mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#reset().mjava","sourceNew":"  @Override\n  public void reset() {\n   try {\n      char[] buf = new char[32];\n      int len = input.read(buf);\n      this.startOfs = correctOffset(0);\n      this.endOfs = correctOffset(len);\n      String v = new String(buf, 0, len);\n      try {\n        switch (type) {\n          case INTEGER:\n            ts.setIntValue(Integer.parseInt(v));\n            break;\n          case FLOAT:\n            ts.setFloatValue(Float.parseFloat(v));\n            break;\n          case LONG:\n            ts.setLongValue(Long.parseLong(v));\n            break;\n          case DOUBLE:\n            ts.setDoubleValue(Double.parseDouble(v));\n            break;\n          case DATE:\n            ts.setLongValue(dateField.parseMath(null, v).getTime());\n            break;\n          default:\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n        }\n      } catch (NumberFormatException nfe) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                \"Invalid Number: \" + v);\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to create TrieIndexTokenizer\", e);\n    }\n    ts.reset();\n  }\n\n","sourceOld":"  @Override\n  public void reset() throws IOException {\n    super.reset();\n    ts.reset();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#reset().mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#reset().mjava","sourceNew":"  @Override\n  public void reset() {\n   try {\n      char[] buf = new char[32];\n      int len = input.read(buf);\n      this.startOfs = correctOffset(0);\n      this.endOfs = correctOffset(len);\n      String v = new String(buf, 0, len);\n      try {\n        switch (type) {\n          case INTEGER:\n            ts.setIntValue(Integer.parseInt(v));\n            break;\n          case FLOAT:\n            ts.setFloatValue(Float.parseFloat(v));\n            break;\n          case LONG:\n            ts.setLongValue(Long.parseLong(v));\n            break;\n          case DOUBLE:\n            ts.setDoubleValue(Double.parseDouble(v));\n            break;\n          case DATE:\n            ts.setLongValue(dateField.parseMath(null, v).getTime());\n            break;\n          default:\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n        }\n      } catch (NumberFormatException nfe) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                \"Invalid Number: \" + v);\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to create TrieIndexTokenizer\", e);\n    }\n    ts.reset();\n  }\n\n","sourceOld":"  @Override\n  public void reset() throws IOException {\n    super.reset();\n    ts.reset();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76bed23fab69b464e4533b39b120258a5dc5a4b5","date":1357424354,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#reset().mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#reset().mjava","sourceNew":"  @Override\n  public void reset() {\n   try {\n      int upto = 0;\n      while (upto < buf.length) {\n        final int length = input.read(buf, upto, buf.length - upto);\n        if (length == -1) break;\n        upto += length;\n      }\n      // skip remaining data if buffer was too short:\n      if (upto == buf.length) {\n        input.skip(Long.MAX_VALUE);\n      }\n\n      this.startOfs = correctOffset(0);\n      this.endOfs = correctOffset(upto);\n      \n      if (upto == 0) {\n        hasValue = false;\n        return;\n      }\n\n      final String v = new String(buf, 0, upto);\n      try {\n        switch (type) {\n          case INTEGER:\n            ts.setIntValue(Integer.parseInt(v));\n            break;\n          case FLOAT:\n            ts.setFloatValue(Float.parseFloat(v));\n            break;\n          case LONG:\n            ts.setLongValue(Long.parseLong(v));\n            break;\n          case DOUBLE:\n            ts.setDoubleValue(Double.parseDouble(v));\n            break;\n          case DATE:\n            ts.setLongValue(dateField.parseMath(null, v).getTime());\n            break;\n          default:\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n        }\n      } catch (NumberFormatException nfe) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                \"Invalid Number: \" + v);\n      }\n      hasValue = true;\n      ts.reset();\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to create TrieIndexTokenizer\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void reset() {\n   try {\n      char[] buf = new char[32];\n      int len = input.read(buf);\n      this.startOfs = correctOffset(0);\n      this.endOfs = correctOffset(len);\n      String v = new String(buf, 0, len);\n      try {\n        switch (type) {\n          case INTEGER:\n            ts.setIntValue(Integer.parseInt(v));\n            break;\n          case FLOAT:\n            ts.setFloatValue(Float.parseFloat(v));\n            break;\n          case LONG:\n            ts.setLongValue(Long.parseLong(v));\n            break;\n          case DOUBLE:\n            ts.setDoubleValue(Double.parseDouble(v));\n            break;\n          case DATE:\n            ts.setLongValue(dateField.parseMath(null, v).getTime());\n            break;\n          default:\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n        }\n      } catch (NumberFormatException nfe) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                \"Invalid Number: \" + v);\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to create TrieIndexTokenizer\", e);\n    }\n    ts.reset();\n  }\n\n","bugFix":null,"bugIntro":["d0fad4c5c26f8a062d31d59ceb5ea2dc3ca38aef"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#reset().mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#reset().mjava","sourceNew":"  @Override\n  public void reset() {\n   try {\n      int upto = 0;\n      while (upto < buf.length) {\n        final int length = input.read(buf, upto, buf.length - upto);\n        if (length == -1) break;\n        upto += length;\n      }\n      // skip remaining data if buffer was too short:\n      if (upto == buf.length) {\n        input.skip(Long.MAX_VALUE);\n      }\n\n      this.startOfs = correctOffset(0);\n      this.endOfs = correctOffset(upto);\n      \n      if (upto == 0) {\n        hasValue = false;\n        return;\n      }\n\n      final String v = new String(buf, 0, upto);\n      try {\n        switch (type) {\n          case INTEGER:\n            ts.setIntValue(Integer.parseInt(v));\n            break;\n          case FLOAT:\n            ts.setFloatValue(Float.parseFloat(v));\n            break;\n          case LONG:\n            ts.setLongValue(Long.parseLong(v));\n            break;\n          case DOUBLE:\n            ts.setDoubleValue(Double.parseDouble(v));\n            break;\n          case DATE:\n            ts.setLongValue(dateField.parseMath(null, v).getTime());\n            break;\n          default:\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n        }\n      } catch (NumberFormatException nfe) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                \"Invalid Number: \" + v);\n      }\n      hasValue = true;\n      ts.reset();\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to create TrieIndexTokenizer\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void reset() {\n   try {\n      char[] buf = new char[32];\n      int len = input.read(buf);\n      this.startOfs = correctOffset(0);\n      this.endOfs = correctOffset(len);\n      String v = new String(buf, 0, len);\n      try {\n        switch (type) {\n          case INTEGER:\n            ts.setIntValue(Integer.parseInt(v));\n            break;\n          case FLOAT:\n            ts.setFloatValue(Float.parseFloat(v));\n            break;\n          case LONG:\n            ts.setLongValue(Long.parseLong(v));\n            break;\n          case DOUBLE:\n            ts.setDoubleValue(Double.parseDouble(v));\n            break;\n          case DATE:\n            ts.setLongValue(dateField.parseMath(null, v).getTime());\n            break;\n          default:\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n        }\n      } catch (NumberFormatException nfe) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                \"Invalid Number: \" + v);\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to create TrieIndexTokenizer\", e);\n    }\n    ts.reset();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0fad4c5c26f8a062d31d59ceb5ea2dc3ca38aef","date":1363025664,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#reset().mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#reset().mjava","sourceNew":"  @Override\n  public void reset() {\n   try {\n      int upto = 0;\n      char[] buf = termAtt.buffer();\n      while (true) {\n        final int length = input.read(buf, upto, buf.length-upto);\n        if (length == -1) break;\n        upto += length;\n        if (upto == buf.length)\n          buf = termAtt.resizeBuffer(1+buf.length);\n      }\n      termAtt.setLength(upto);\n      this.startOfs = correctOffset(0);\n      this.endOfs = correctOffset(upto);\n      \n      if (upto == 0) {\n        hasValue = false;\n        return;\n      }\n\n      final String v = new String(buf, 0, upto);\n      try {\n        switch (type) {\n          case INTEGER:\n            ts.setIntValue(Integer.parseInt(v));\n            break;\n          case FLOAT:\n            ts.setFloatValue(Float.parseFloat(v));\n            break;\n          case LONG:\n            ts.setLongValue(Long.parseLong(v));\n            break;\n          case DOUBLE:\n            ts.setDoubleValue(Double.parseDouble(v));\n            break;\n          case DATE:\n            ts.setLongValue(dateField.parseMath(null, v).getTime());\n            break;\n          default:\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n        }\n      } catch (NumberFormatException nfe) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                \"Invalid Number: \" + v);\n      }\n      hasValue = true;\n      ts.reset();\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to create TrieIndexTokenizer\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void reset() {\n   try {\n      int upto = 0;\n      while (upto < buf.length) {\n        final int length = input.read(buf, upto, buf.length - upto);\n        if (length == -1) break;\n        upto += length;\n      }\n      // skip remaining data if buffer was too short:\n      if (upto == buf.length) {\n        input.skip(Long.MAX_VALUE);\n      }\n\n      this.startOfs = correctOffset(0);\n      this.endOfs = correctOffset(upto);\n      \n      if (upto == 0) {\n        hasValue = false;\n        return;\n      }\n\n      final String v = new String(buf, 0, upto);\n      try {\n        switch (type) {\n          case INTEGER:\n            ts.setIntValue(Integer.parseInt(v));\n            break;\n          case FLOAT:\n            ts.setFloatValue(Float.parseFloat(v));\n            break;\n          case LONG:\n            ts.setLongValue(Long.parseLong(v));\n            break;\n          case DOUBLE:\n            ts.setDoubleValue(Double.parseDouble(v));\n            break;\n          case DATE:\n            ts.setLongValue(dateField.parseMath(null, v).getTime());\n            break;\n          default:\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n        }\n      } catch (NumberFormatException nfe) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                \"Invalid Number: \" + v);\n      }\n      hasValue = true;\n      ts.reset();\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to create TrieIndexTokenizer\", e);\n    }\n  }\n\n","bugFix":["76bed23fab69b464e4533b39b120258a5dc5a4b5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df1b735b811bfe6055a98336ee8dfd1e43cf2dc0","date":1379858263,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#reset().mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#reset().mjava","sourceNew":"  @Override\n  public void reset() throws IOException {\n    super.reset();\n    try {\n      int upto = 0;\n      char[] buf = termAtt.buffer();\n      while (true) {\n        final int length = input.read(buf, upto, buf.length-upto);\n        if (length == -1) break;\n        upto += length;\n        if (upto == buf.length)\n          buf = termAtt.resizeBuffer(1+buf.length);\n      }\n      termAtt.setLength(upto);\n      this.startOfs = correctOffset(0);\n      this.endOfs = correctOffset(upto);\n      \n      if (upto == 0) {\n        hasValue = false;\n        return;\n      }\n\n      final String v = new String(buf, 0, upto);\n      try {\n        switch (type) {\n          case INTEGER:\n            ts.setIntValue(Integer.parseInt(v));\n            break;\n          case FLOAT:\n            ts.setFloatValue(Float.parseFloat(v));\n            break;\n          case LONG:\n            ts.setLongValue(Long.parseLong(v));\n            break;\n          case DOUBLE:\n            ts.setDoubleValue(Double.parseDouble(v));\n            break;\n          case DATE:\n            ts.setLongValue(dateField.parseMath(null, v).getTime());\n            break;\n          default:\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n        }\n      } catch (NumberFormatException nfe) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                \"Invalid Number: \" + v);\n      }\n      hasValue = true;\n      ts.reset();\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to create TrieIndexTokenizer\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void reset() {\n   try {\n      int upto = 0;\n      char[] buf = termAtt.buffer();\n      while (true) {\n        final int length = input.read(buf, upto, buf.length-upto);\n        if (length == -1) break;\n        upto += length;\n        if (upto == buf.length)\n          buf = termAtt.resizeBuffer(1+buf.length);\n      }\n      termAtt.setLength(upto);\n      this.startOfs = correctOffset(0);\n      this.endOfs = correctOffset(upto);\n      \n      if (upto == 0) {\n        hasValue = false;\n        return;\n      }\n\n      final String v = new String(buf, 0, upto);\n      try {\n        switch (type) {\n          case INTEGER:\n            ts.setIntValue(Integer.parseInt(v));\n            break;\n          case FLOAT:\n            ts.setFloatValue(Float.parseFloat(v));\n            break;\n          case LONG:\n            ts.setLongValue(Long.parseLong(v));\n            break;\n          case DOUBLE:\n            ts.setDoubleValue(Double.parseDouble(v));\n            break;\n          case DATE:\n            ts.setLongValue(dateField.parseMath(null, v).getTime());\n            break;\n          default:\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n        }\n      } catch (NumberFormatException nfe) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                \"Invalid Number: \" + v);\n      }\n      hasValue = true;\n      ts.reset();\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to create TrieIndexTokenizer\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99c9d8533c954f661481ae44273622957dbf572f","date":1380991288,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/analysis/TrieTokenizer[TrieTokenizerFactory]#reset().mjava","sourceNew":null,"sourceOld":"  @Override\n  public void reset() throws IOException {\n    super.reset();\n    try {\n      int upto = 0;\n      char[] buf = termAtt.buffer();\n      while (true) {\n        final int length = input.read(buf, upto, buf.length-upto);\n        if (length == -1) break;\n        upto += length;\n        if (upto == buf.length)\n          buf = termAtt.resizeBuffer(1+buf.length);\n      }\n      termAtt.setLength(upto);\n      this.startOfs = correctOffset(0);\n      this.endOfs = correctOffset(upto);\n      \n      if (upto == 0) {\n        hasValue = false;\n        return;\n      }\n\n      final String v = new String(buf, 0, upto);\n      try {\n        switch (type) {\n          case INTEGER:\n            ts.setIntValue(Integer.parseInt(v));\n            break;\n          case FLOAT:\n            ts.setFloatValue(Float.parseFloat(v));\n            break;\n          case LONG:\n            ts.setLongValue(Long.parseLong(v));\n            break;\n          case DOUBLE:\n            ts.setDoubleValue(Double.parseDouble(v));\n            break;\n          case DATE:\n            ts.setLongValue(dateField.parseMath(null, v).getTime());\n            break;\n          default:\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n        }\n      } catch (NumberFormatException nfe) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n                                \"Invalid Number: \" + v);\n      }\n      hasValue = true;\n      ts.reset();\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unable to create TrieIndexTokenizer\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"99c9d8533c954f661481ae44273622957dbf572f":["df1b735b811bfe6055a98336ee8dfd1e43cf2dc0"],"4c1b87b155748a27fbed84a0ffb3f8799177451e":["c26f00b574427b55127e869b935845554afde1fa"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["4c1b87b155748a27fbed84a0ffb3f8799177451e","76bed23fab69b464e4533b39b120258a5dc5a4b5"],"df1b735b811bfe6055a98336ee8dfd1e43cf2dc0":["d0fad4c5c26f8a062d31d59ceb5ea2dc3ca38aef"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d0fad4c5c26f8a062d31d59ceb5ea2dc3ca38aef":["76bed23fab69b464e4533b39b120258a5dc5a4b5"],"76bed23fab69b464e4533b39b120258a5dc5a4b5":["4c1b87b155748a27fbed84a0ffb3f8799177451e"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["c26f00b574427b55127e869b935845554afde1fa","4c1b87b155748a27fbed84a0ffb3f8799177451e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["99c9d8533c954f661481ae44273622957dbf572f"]},"commit2Childs":{"99c9d8533c954f661481ae44273622957dbf572f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4c1b87b155748a27fbed84a0ffb3f8799177451e":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","76bed23fab69b464e4533b39b120258a5dc5a4b5","05a14b2611ead08655a2b2bdc61632eb31316e57"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"df1b735b811bfe6055a98336ee8dfd1e43cf2dc0":["99c9d8533c954f661481ae44273622957dbf572f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["4c1b87b155748a27fbed84a0ffb3f8799177451e","05a14b2611ead08655a2b2bdc61632eb31316e57"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"76bed23fab69b464e4533b39b120258a5dc5a4b5":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d0fad4c5c26f8a062d31d59ceb5ea2dc3ca38aef"],"d0fad4c5c26f8a062d31d59ceb5ea2dc3ca38aef":["df1b735b811bfe6055a98336ee8dfd1e43cf2dc0"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a258fbb26824fd104ed795e5d9033d2d040049ee","05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}