{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimUtils#v2AdminRequestToV1Params(V2Request).mjava","commits":[{"id":"edf5b262a72d10530eb2f01dc8f19060355b213e","date":1557765866,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimUtils#v2AdminRequestToV1Params(V2Request).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Convert a V2 {@link org.apache.solr.client.solrj.request.CollectionAdminRequest} to regular {@link org.apache.solr.common.params.SolrParams}\n   * @param req request\n   * @return payload converted to V1 params\n   */\n  public static ModifiableSolrParams v2AdminRequestToV1Params(V2Request req) {\n    Map<String, Object> reqMap = new HashMap<>();\n    ((V2Request)req).toMap(reqMap);\n    String path = (String)reqMap.get(\"path\");\n    if (!path.startsWith(\"/c/\") || path.length() < 4) {\n      throw new UnsupportedOperationException(\"Unsupported V2 request path: \" + reqMap);\n    }\n    Map<String, Object> cmd = (Map<String, Object>)reqMap.get(\"command\");\n    if (cmd.size() != 1) {\n      throw new UnsupportedOperationException(\"Unsupported multi-command V2 request: \" + reqMap);\n    }\n    String a = cmd.keySet().iterator().next();\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CollectionAdminParams.COLLECTION, path.substring(3));\n    if (req.getParams() != null) {\n      params.add(req.getParams());\n    }\n    Map<String, Object> reqParams = (Map<String, Object>)cmd.get(a);\n    for (Map.Entry<String, Object> e : reqParams.entrySet()) {\n      params.add(e.getKey(), e.getValue().toString());\n    }\n    // re-map from v2 to v1 action\n    a = v2v1Mapping.get(a);\n    if (a == null) {\n      throw new UnsupportedOperationException(\"Unsupported V2 request: \" + reqMap);\n    }\n    params.add(CoreAdminParams.ACTION, a);\n    return params;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7aeb53916301ea6a5fedff4fdc9617b257cbc7d","date":1571856490,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimUtils#v2AdminRequestToV1Params(V2Request).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimUtils#v2AdminRequestToV1Params(V2Request).mjava","sourceNew":"  /**\n   * Convert a V2 {@link org.apache.solr.client.solrj.request.CollectionAdminRequest} to regular {@link org.apache.solr.common.params.SolrParams}\n   * @param req request\n   * @return payload converted to V1 params\n   */\n  public static ModifiableSolrParams v2AdminRequestToV1Params(V2Request req) {\n    Map<String, Object> reqMap = new HashMap<>();\n    ((V2Request)req).toMap(reqMap);\n    String path = (String)reqMap.get(\"path\");\n    if (!path.startsWith(\"/c/\") || path.length() < 4) {\n      throw new UnsupportedOperationException(\"Unsupported V2 request path: \" + reqMap);\n    }\n    Map<String, Object> cmd = (Map<String, Object>)reqMap.get(\"command\");\n    if (cmd.size() != 1) {\n      throw new UnsupportedOperationException(\"Unsupported multi-command V2 request: \" + reqMap);\n    }\n    String a = cmd.keySet().iterator().next();\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    if (req.getParams() != null) {\n      params.add(req.getParams());\n    }\n    params.add(CollectionAdminParams.COLLECTION, path.substring(3));\n    if (req.getParams() != null) {\n      params.add(req.getParams());\n    }\n    Map<String, Object> reqParams = (Map<String, Object>)cmd.get(a);\n    for (Map.Entry<String, Object> e : reqParams.entrySet()) {\n      params.add(e.getKey(), e.getValue().toString());\n    }\n    // re-map from v2 to v1 action\n    a = v2v1Mapping.get(a);\n    if (a == null) {\n      throw new UnsupportedOperationException(\"Unsupported V2 request: \" + reqMap);\n    }\n    params.add(CoreAdminParams.ACTION, a);\n    return params;\n  }\n\n","sourceOld":"  /**\n   * Convert a V2 {@link org.apache.solr.client.solrj.request.CollectionAdminRequest} to regular {@link org.apache.solr.common.params.SolrParams}\n   * @param req request\n   * @return payload converted to V1 params\n   */\n  public static ModifiableSolrParams v2AdminRequestToV1Params(V2Request req) {\n    Map<String, Object> reqMap = new HashMap<>();\n    ((V2Request)req).toMap(reqMap);\n    String path = (String)reqMap.get(\"path\");\n    if (!path.startsWith(\"/c/\") || path.length() < 4) {\n      throw new UnsupportedOperationException(\"Unsupported V2 request path: \" + reqMap);\n    }\n    Map<String, Object> cmd = (Map<String, Object>)reqMap.get(\"command\");\n    if (cmd.size() != 1) {\n      throw new UnsupportedOperationException(\"Unsupported multi-command V2 request: \" + reqMap);\n    }\n    String a = cmd.keySet().iterator().next();\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CollectionAdminParams.COLLECTION, path.substring(3));\n    if (req.getParams() != null) {\n      params.add(req.getParams());\n    }\n    Map<String, Object> reqParams = (Map<String, Object>)cmd.get(a);\n    for (Map.Entry<String, Object> e : reqParams.entrySet()) {\n      params.add(e.getKey(), e.getValue().toString());\n    }\n    // re-map from v2 to v1 action\n    a = v2v1Mapping.get(a);\n    if (a == null) {\n      throw new UnsupportedOperationException(\"Unsupported V2 request: \" + reqMap);\n    }\n    params.add(CoreAdminParams.ACTION, a);\n    return params;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39b618e1f3a762c3fba1e4434e0a71a3043fa0ac","date":1577969685,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimUtils#v2AdminRequestToV1Params(V2Request).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimUtils#v2AdminRequestToV1Params(V2Request).mjava","sourceNew":"  /**\n   * Convert a V2 {@link org.apache.solr.client.solrj.request.CollectionAdminRequest} to regular {@link org.apache.solr.common.params.SolrParams}\n   * @param req request\n   * @return request payload and parameters converted to V1 params\n   */\n  public static ModifiableSolrParams v2AdminRequestToV1Params(V2Request req) {\n    Map<String, Object> reqMap = new HashMap<>();\n    req.toMap(reqMap);\n    String path = (String)reqMap.get(\"path\");\n    if (!(path.startsWith(\"/c/\") || path.startsWith(\"/collections/\")) || path.length() < 4) {\n      throw new UnsupportedOperationException(\"Unsupported V2 request path: \" + reqMap);\n    }\n    Map<String, Object> cmd;\n    Object cmdObj = reqMap.get(\"command\");\n    if (cmdObj instanceof String) {\n      cmd = (Map<String, Object>)Utils.fromJSONString((String)cmdObj);\n    } else if (cmdObj instanceof Map) {\n      cmd = (Map<String, Object>)cmdObj;\n    } else {\n      throw new UnsupportedOperationException(\"Unsupported 'command': \" + cmdObj + \" (of type \" + cmdObj.getClass() + \")\");\n    }\n    if (cmd.size() != 1) {\n      throw new UnsupportedOperationException(\"Unsupported multi-command V2 request: \" + reqMap);\n    }\n    String a = cmd.keySet().iterator().next();\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"path\", \"/admin/collections\");\n    if (req.getParams() != null) {\n      params.add(req.getParams());\n    }\n    Map<String, Object> reqParams = (Map<String, Object>)cmd.get(a);\n    for (Map.Entry<String, Object> e : reqParams.entrySet()) {\n      params.add(e.getKey(), e.getValue().toString());\n    }\n    // trim the leading /\n    path = path.substring(1);\n    String[] pathEls = path.split(\"/\");\n    if (pathEls.length < 2) {\n      throw new UnsupportedOperationException(\"Unsupported V2 request path: \" + reqMap);\n    }\n    params.set(CollectionAdminParams.COLLECTION, pathEls[1]);\n    if (pathEls.length > 3) {\n      if (!pathEls[2].equals(\"shards\")) {\n        throw new UnsupportedOperationException(\"Invalid V2 request path: expected 'shards' but was '\" + pathEls[2] + \"'\");\n      }\n      if (!pathEls[3].isBlank()) {\n        params.set(\"shard\", pathEls[3]);\n      }\n    }\n    if (pathEls.length > 4 && !pathEls[4].isBlank()) {\n      params.set(\"replica\", pathEls[4]);\n    }\n    // re-map from v2 to v1 action\n    a = v2v1Mapping.get(a);\n    if (a == null) {\n      throw new UnsupportedOperationException(\"Unsupported V2 request: \" + reqMap);\n    }\n    params.add(CoreAdminParams.ACTION, a);\n    return params;\n  }\n\n","sourceOld":"  /**\n   * Convert a V2 {@link org.apache.solr.client.solrj.request.CollectionAdminRequest} to regular {@link org.apache.solr.common.params.SolrParams}\n   * @param req request\n   * @return payload converted to V1 params\n   */\n  public static ModifiableSolrParams v2AdminRequestToV1Params(V2Request req) {\n    Map<String, Object> reqMap = new HashMap<>();\n    ((V2Request)req).toMap(reqMap);\n    String path = (String)reqMap.get(\"path\");\n    if (!path.startsWith(\"/c/\") || path.length() < 4) {\n      throw new UnsupportedOperationException(\"Unsupported V2 request path: \" + reqMap);\n    }\n    Map<String, Object> cmd = (Map<String, Object>)reqMap.get(\"command\");\n    if (cmd.size() != 1) {\n      throw new UnsupportedOperationException(\"Unsupported multi-command V2 request: \" + reqMap);\n    }\n    String a = cmd.keySet().iterator().next();\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    if (req.getParams() != null) {\n      params.add(req.getParams());\n    }\n    params.add(CollectionAdminParams.COLLECTION, path.substring(3));\n    if (req.getParams() != null) {\n      params.add(req.getParams());\n    }\n    Map<String, Object> reqParams = (Map<String, Object>)cmd.get(a);\n    for (Map.Entry<String, Object> e : reqParams.entrySet()) {\n      params.add(e.getKey(), e.getValue().toString());\n    }\n    // re-map from v2 to v1 action\n    a = v2v1Mapping.get(a);\n    if (a == null) {\n      throw new UnsupportedOperationException(\"Unsupported V2 request: \" + reqMap);\n    }\n    params.add(CoreAdminParams.ACTION, a);\n    return params;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"827159ea3e2a111ecec6b5659336e7f09131e18a","date":1578045775,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimUtils#v2AdminRequestToV1Params(V2Request).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimUtils#v2AdminRequestToV1Params(V2Request).mjava","sourceNew":"  /**\n   * Convert a V2 {@link org.apache.solr.client.solrj.request.CollectionAdminRequest} to regular {@link org.apache.solr.common.params.SolrParams}\n   * @param req request\n   * @return request payload and parameters converted to V1 params\n   */\n  public static ModifiableSolrParams v2AdminRequestToV1Params(V2Request req) {\n    Map<String, Object> reqMap = new HashMap<>();\n    req.toMap(reqMap);\n    String path = (String)reqMap.get(\"path\");\n    if (!(path.startsWith(\"/c/\") || path.startsWith(\"/collections/\")) || path.length() < 4) {\n      throw new UnsupportedOperationException(\"Unsupported V2 request path: \" + reqMap);\n    }\n    Map<String, Object> cmd;\n    Object cmdObj = reqMap.get(\"command\");\n    if (cmdObj instanceof String) {\n      cmd = (Map<String, Object>)Utils.fromJSONString((String)cmdObj);\n    } else if (cmdObj instanceof Map) {\n      cmd = (Map<String, Object>)cmdObj;\n    } else {\n      throw new UnsupportedOperationException(\"Unsupported 'command': \" + cmdObj + \" (of type \" + cmdObj.getClass() + \")\");\n    }\n    if (cmd.size() != 1) {\n      throw new UnsupportedOperationException(\"Unsupported multi-command V2 request: \" + reqMap);\n    }\n    String a = cmd.keySet().iterator().next();\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"path\", \"/admin/collections\");\n    if (req.getParams() != null) {\n      params.add(req.getParams());\n    }\n    Map<String, Object> reqParams = (Map<String, Object>)cmd.get(a);\n    for (Map.Entry<String, Object> e : reqParams.entrySet()) {\n      params.add(e.getKey(), e.getValue().toString());\n    }\n    // trim the leading /\n    path = path.substring(1);\n    String[] pathEls = path.split(\"/\");\n    if (pathEls.length < 2) {\n      throw new UnsupportedOperationException(\"Unsupported V2 request path: \" + reqMap);\n    }\n    params.set(CollectionAdminParams.COLLECTION, pathEls[1]);\n    if (pathEls.length > 3) {\n      if (!pathEls[2].equals(\"shards\")) {\n        throw new UnsupportedOperationException(\"Invalid V2 request path: expected 'shards' but was '\" + pathEls[2] + \"'\");\n      }\n      if (!pathEls[3].isBlank()) {\n        params.set(\"shard\", pathEls[3]);\n      }\n    }\n    if (pathEls.length > 4 && !pathEls[4].isBlank()) {\n      params.set(\"replica\", pathEls[4]);\n    }\n    // re-map from v2 to v1 action\n    a = v2v1Mapping.get(a);\n    if (a == null) {\n      throw new UnsupportedOperationException(\"Unsupported V2 request: \" + reqMap);\n    }\n    params.add(CoreAdminParams.ACTION, a);\n    return params;\n  }\n\n","sourceOld":"  /**\n   * Convert a V2 {@link org.apache.solr.client.solrj.request.CollectionAdminRequest} to regular {@link org.apache.solr.common.params.SolrParams}\n   * @param req request\n   * @return payload converted to V1 params\n   */\n  public static ModifiableSolrParams v2AdminRequestToV1Params(V2Request req) {\n    Map<String, Object> reqMap = new HashMap<>();\n    ((V2Request)req).toMap(reqMap);\n    String path = (String)reqMap.get(\"path\");\n    if (!path.startsWith(\"/c/\") || path.length() < 4) {\n      throw new UnsupportedOperationException(\"Unsupported V2 request path: \" + reqMap);\n    }\n    Map<String, Object> cmd = (Map<String, Object>)reqMap.get(\"command\");\n    if (cmd.size() != 1) {\n      throw new UnsupportedOperationException(\"Unsupported multi-command V2 request: \" + reqMap);\n    }\n    String a = cmd.keySet().iterator().next();\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    if (req.getParams() != null) {\n      params.add(req.getParams());\n    }\n    params.add(CollectionAdminParams.COLLECTION, path.substring(3));\n    if (req.getParams() != null) {\n      params.add(req.getParams());\n    }\n    Map<String, Object> reqParams = (Map<String, Object>)cmd.get(a);\n    for (Map.Entry<String, Object> e : reqParams.entrySet()) {\n      params.add(e.getKey(), e.getValue().toString());\n    }\n    // re-map from v2 to v1 action\n    a = v2v1Mapping.get(a);\n    if (a == null) {\n      throw new UnsupportedOperationException(\"Unsupported V2 request: \" + reqMap);\n    }\n    params.add(CoreAdminParams.ACTION, a);\n    return params;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daa0f21a44e235a2299ea1fa913898b182dd7cce","date":1590952026,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimUtils#v2AdminRequestToV1Params(V2Request).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimUtils#v2AdminRequestToV1Params(V2Request).mjava","sourceNew":"  /**\n   * Convert a V2 {@link org.apache.solr.client.solrj.request.CollectionAdminRequest} to regular {@link org.apache.solr.common.params.SolrParams}\n   * @param req request\n   * @return request payload and parameters converted to V1 params\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public static ModifiableSolrParams v2AdminRequestToV1Params(V2Request req) {\n    Map<String, Object> reqMap = new HashMap<>();\n    req.toMap(reqMap);\n    String path = (String)reqMap.get(\"path\");\n    if (!(path.startsWith(\"/c/\") || path.startsWith(\"/collections/\")) || path.length() < 4) {\n      throw new UnsupportedOperationException(\"Unsupported V2 request path: \" + reqMap);\n    }\n    Map<String, Object> cmd;\n    Object cmdObj = reqMap.get(\"command\");\n    if (cmdObj instanceof String) {\n      cmd = (Map<String, Object>)Utils.fromJSONString((String)cmdObj);\n    } else if (cmdObj instanceof Map) {\n      cmd = (Map<String, Object>)cmdObj;\n    } else {\n      throw new UnsupportedOperationException(\"Unsupported 'command': \" + cmdObj + \" (of type \" + cmdObj.getClass() + \")\");\n    }\n    if (cmd.size() != 1) {\n      throw new UnsupportedOperationException(\"Unsupported multi-command V2 request: \" + reqMap);\n    }\n    String a = cmd.keySet().iterator().next();\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"path\", \"/admin/collections\");\n    if (req.getParams() != null) {\n      params.add(req.getParams());\n    }\n    Map<String, Object> reqParams = (Map<String, Object>)cmd.get(a);\n    for (Map.Entry<String, Object> e : reqParams.entrySet()) {\n      params.add(e.getKey(), e.getValue().toString());\n    }\n    // trim the leading /\n    path = path.substring(1);\n    String[] pathEls = path.split(\"/\");\n    if (pathEls.length < 2) {\n      throw new UnsupportedOperationException(\"Unsupported V2 request path: \" + reqMap);\n    }\n    params.set(CollectionAdminParams.COLLECTION, pathEls[1]);\n    if (pathEls.length > 3) {\n      if (!pathEls[2].equals(\"shards\")) {\n        throw new UnsupportedOperationException(\"Invalid V2 request path: expected 'shards' but was '\" + pathEls[2] + \"'\");\n      }\n      if (!pathEls[3].isBlank()) {\n        params.set(\"shard\", pathEls[3]);\n      }\n    }\n    if (pathEls.length > 4 && !pathEls[4].isBlank()) {\n      params.set(\"replica\", pathEls[4]);\n    }\n    // re-map from v2 to v1 action\n    a = v2v1Mapping.get(a);\n    if (a == null) {\n      throw new UnsupportedOperationException(\"Unsupported V2 request: \" + reqMap);\n    }\n    params.add(CoreAdminParams.ACTION, a);\n    return params;\n  }\n\n","sourceOld":"  /**\n   * Convert a V2 {@link org.apache.solr.client.solrj.request.CollectionAdminRequest} to regular {@link org.apache.solr.common.params.SolrParams}\n   * @param req request\n   * @return request payload and parameters converted to V1 params\n   */\n  public static ModifiableSolrParams v2AdminRequestToV1Params(V2Request req) {\n    Map<String, Object> reqMap = new HashMap<>();\n    req.toMap(reqMap);\n    String path = (String)reqMap.get(\"path\");\n    if (!(path.startsWith(\"/c/\") || path.startsWith(\"/collections/\")) || path.length() < 4) {\n      throw new UnsupportedOperationException(\"Unsupported V2 request path: \" + reqMap);\n    }\n    Map<String, Object> cmd;\n    Object cmdObj = reqMap.get(\"command\");\n    if (cmdObj instanceof String) {\n      cmd = (Map<String, Object>)Utils.fromJSONString((String)cmdObj);\n    } else if (cmdObj instanceof Map) {\n      cmd = (Map<String, Object>)cmdObj;\n    } else {\n      throw new UnsupportedOperationException(\"Unsupported 'command': \" + cmdObj + \" (of type \" + cmdObj.getClass() + \")\");\n    }\n    if (cmd.size() != 1) {\n      throw new UnsupportedOperationException(\"Unsupported multi-command V2 request: \" + reqMap);\n    }\n    String a = cmd.keySet().iterator().next();\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"path\", \"/admin/collections\");\n    if (req.getParams() != null) {\n      params.add(req.getParams());\n    }\n    Map<String, Object> reqParams = (Map<String, Object>)cmd.get(a);\n    for (Map.Entry<String, Object> e : reqParams.entrySet()) {\n      params.add(e.getKey(), e.getValue().toString());\n    }\n    // trim the leading /\n    path = path.substring(1);\n    String[] pathEls = path.split(\"/\");\n    if (pathEls.length < 2) {\n      throw new UnsupportedOperationException(\"Unsupported V2 request path: \" + reqMap);\n    }\n    params.set(CollectionAdminParams.COLLECTION, pathEls[1]);\n    if (pathEls.length > 3) {\n      if (!pathEls[2].equals(\"shards\")) {\n        throw new UnsupportedOperationException(\"Invalid V2 request path: expected 'shards' but was '\" + pathEls[2] + \"'\");\n      }\n      if (!pathEls[3].isBlank()) {\n        params.set(\"shard\", pathEls[3]);\n      }\n    }\n    if (pathEls.length > 4 && !pathEls[4].isBlank()) {\n      params.set(\"replica\", pathEls[4]);\n    }\n    // re-map from v2 to v1 action\n    a = v2v1Mapping.get(a);\n    if (a == null) {\n      throw new UnsupportedOperationException(\"Unsupported V2 request: \" + reqMap);\n    }\n    params.add(CoreAdminParams.ACTION, a);\n    return params;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimUtils#v2AdminRequestToV1Params(V2Request).mjava","sourceNew":null,"sourceOld":"  /**\n   * Convert a V2 {@link org.apache.solr.client.solrj.request.CollectionAdminRequest} to regular {@link org.apache.solr.common.params.SolrParams}\n   * @param req request\n   * @return request payload and parameters converted to V1 params\n   */\n  @SuppressWarnings({\"unchecked\"})\n  public static ModifiableSolrParams v2AdminRequestToV1Params(V2Request req) {\n    Map<String, Object> reqMap = new HashMap<>();\n    req.toMap(reqMap);\n    String path = (String)reqMap.get(\"path\");\n    if (!(path.startsWith(\"/c/\") || path.startsWith(\"/collections/\")) || path.length() < 4) {\n      throw new UnsupportedOperationException(\"Unsupported V2 request path: \" + reqMap);\n    }\n    Map<String, Object> cmd;\n    Object cmdObj = reqMap.get(\"command\");\n    if (cmdObj instanceof String) {\n      cmd = (Map<String, Object>)Utils.fromJSONString((String)cmdObj);\n    } else if (cmdObj instanceof Map) {\n      cmd = (Map<String, Object>)cmdObj;\n    } else {\n      throw new UnsupportedOperationException(\"Unsupported 'command': \" + cmdObj + \" (of type \" + cmdObj.getClass() + \")\");\n    }\n    if (cmd.size() != 1) {\n      throw new UnsupportedOperationException(\"Unsupported multi-command V2 request: \" + reqMap);\n    }\n    String a = cmd.keySet().iterator().next();\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"path\", \"/admin/collections\");\n    if (req.getParams() != null) {\n      params.add(req.getParams());\n    }\n    Map<String, Object> reqParams = (Map<String, Object>)cmd.get(a);\n    for (Map.Entry<String, Object> e : reqParams.entrySet()) {\n      params.add(e.getKey(), e.getValue().toString());\n    }\n    // trim the leading /\n    path = path.substring(1);\n    String[] pathEls = path.split(\"/\");\n    if (pathEls.length < 2) {\n      throw new UnsupportedOperationException(\"Unsupported V2 request path: \" + reqMap);\n    }\n    params.set(CollectionAdminParams.COLLECTION, pathEls[1]);\n    if (pathEls.length > 3) {\n      if (!pathEls[2].equals(\"shards\")) {\n        throw new UnsupportedOperationException(\"Invalid V2 request path: expected 'shards' but was '\" + pathEls[2] + \"'\");\n      }\n      if (!pathEls[3].isBlank()) {\n        params.set(\"shard\", pathEls[3]);\n      }\n    }\n    if (pathEls.length > 4 && !pathEls[4].isBlank()) {\n      params.set(\"replica\", pathEls[4]);\n    }\n    // re-map from v2 to v1 action\n    a = v2v1Mapping.get(a);\n    if (a == null) {\n      throw new UnsupportedOperationException(\"Unsupported V2 request: \" + reqMap);\n    }\n    params.add(CoreAdminParams.ACTION, a);\n    return params;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["39b618e1f3a762c3fba1e4434e0a71a3043fa0ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"edf5b262a72d10530eb2f01dc8f19060355b213e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"827159ea3e2a111ecec6b5659336e7f09131e18a":["a7aeb53916301ea6a5fedff4fdc9617b257cbc7d","39b618e1f3a762c3fba1e4434e0a71a3043fa0ac"],"39b618e1f3a762c3fba1e4434e0a71a3043fa0ac":["a7aeb53916301ea6a5fedff4fdc9617b257cbc7d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"a7aeb53916301ea6a5fedff4fdc9617b257cbc7d":["edf5b262a72d10530eb2f01dc8f19060355b213e"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["3f504512a03d978990cbff30db0522b354e846db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["edf5b262a72d10530eb2f01dc8f19060355b213e"],"edf5b262a72d10530eb2f01dc8f19060355b213e":["a7aeb53916301ea6a5fedff4fdc9617b257cbc7d"],"827159ea3e2a111ecec6b5659336e7f09131e18a":[],"39b618e1f3a762c3fba1e4434e0a71a3043fa0ac":["daa0f21a44e235a2299ea1fa913898b182dd7cce","827159ea3e2a111ecec6b5659336e7f09131e18a"],"a7aeb53916301ea6a5fedff4fdc9617b257cbc7d":["827159ea3e2a111ecec6b5659336e7f09131e18a","39b618e1f3a762c3fba1e4434e0a71a3043fa0ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["827159ea3e2a111ecec6b5659336e7f09131e18a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}