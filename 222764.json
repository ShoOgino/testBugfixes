{"path":"lucene/core/src/java/org/apache/lucene/document/LatLonShape#newGeometryQuery(String,QueryRelation,LatLonGeometry...).mjava","commits":[{"id":"22cd5821b741de2f2eadca41790b86b8260ec739","date":1580367802,"type":0,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LatLonShape#newGeometryQuery(String,QueryRelation,LatLonGeometry...).mjava","pathOld":"/dev/null","sourceNew":"  /** create a query to find all indexed geo shapes that intersect a provided geometry (or array of geometries).\n   **/\n  public static Query newGeometryQuery(String field, QueryRelation queryRelation, LatLonGeometry... latLonGeometries) {\n    if (queryRelation == QueryRelation.CONTAINS && latLonGeometries.length > 1) {\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      for (int i = 0; i < latLonGeometries.length; i++) {\n        builder.add(newGeometryQuery(field, queryRelation, latLonGeometries[i]), BooleanClause.Occur.MUST);\n      }\n      return builder.build();\n    }\n    return new LatLonShapeQuery(field, queryRelation, latLonGeometries);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56c42be8d779573d0c86ba775117e17360dbf5a6","date":1583217404,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LatLonShape#newGeometryQuery(String,QueryRelation,LatLonGeometry...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/LatLonShape#newGeometryQuery(String,QueryRelation,LatLonGeometry...).mjava","sourceNew":"  /** create a query to find all indexed geo shapes that intersect a provided geometry (or array of geometries).\n   **/\n  public static Query newGeometryQuery(String field, QueryRelation queryRelation, LatLonGeometry... latLonGeometries) {\n    if  (latLonGeometries.length == 1) {\n      LatLonGeometry geometry = latLonGeometries[0];\n      if (geometry instanceof Rectangle) {\n        Rectangle rect = (Rectangle) geometry;\n        return newBoxQuery(field, queryRelation, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n      } else {\n        return new LatLonShapeQuery(field, queryRelation, latLonGeometries);\n      }\n    } else {\n      if (queryRelation == QueryRelation.CONTAINS) {\n        return makeContainsGeometryQuery(field, latLonGeometries);\n      } else {\n        return new LatLonShapeQuery(field, queryRelation, latLonGeometries);\n      }\n    }\n  }\n\n","sourceOld":"  /** create a query to find all indexed geo shapes that intersect a provided geometry (or array of geometries).\n   **/\n  public static Query newGeometryQuery(String field, QueryRelation queryRelation, LatLonGeometry... latLonGeometries) {\n    if (queryRelation == QueryRelation.CONTAINS && latLonGeometries.length > 1) {\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      for (int i = 0; i < latLonGeometries.length; i++) {\n        builder.add(newGeometryQuery(field, queryRelation, latLonGeometries[i]), BooleanClause.Occur.MUST);\n      }\n      return builder.build();\n    }\n    return new LatLonShapeQuery(field, queryRelation, latLonGeometries);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"56c42be8d779573d0c86ba775117e17360dbf5a6":["22cd5821b741de2f2eadca41790b86b8260ec739"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"22cd5821b741de2f2eadca41790b86b8260ec739":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["56c42be8d779573d0c86ba775117e17360dbf5a6"]},"commit2Childs":{"56c42be8d779573d0c86ba775117e17360dbf5a6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["22cd5821b741de2f2eadca41790b86b8260ec739"],"22cd5821b741de2f2eadca41790b86b8260ec739":["56c42be8d779573d0c86ba775117e17360dbf5a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}