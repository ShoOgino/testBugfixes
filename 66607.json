{"path":"lucene/core/src/java/org/apache/lucene/search/UnionPostingsEnum[MultiPhraseQuery].DocsQueue#DocsQueue(List[PostingsEnum]).mjava","commits":[{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/UnionPostingsEnum[MultiPhraseQuery].DocsQueue#DocsQueue(List[PostingsEnum]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/UnionDocsAndPositionsEnum[MultiPhraseQuery].DocsQueue#DocsQueue(List[DocsAndPositionsEnum]).mjava","sourceNew":"    DocsQueue(List<PostingsEnum> postingsEnums) throws IOException {\n      super(postingsEnums.size());\n\n      Iterator<PostingsEnum> i = postingsEnums.iterator();\n      while (i.hasNext()) {\n        PostingsEnum postings = i.next();\n        if (postings.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          add(postings);\n        }\n      }\n    }\n\n","sourceOld":"    DocsQueue(List<DocsAndPositionsEnum> docsEnums) throws IOException {\n      super(docsEnums.size());\n\n      Iterator<DocsAndPositionsEnum> i = docsEnums.iterator();\n      while (i.hasNext()) {\n        DocsAndPositionsEnum postings = i.next();\n        if (postings.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          add(postings);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ac81480868d6bcd251ab080a87395b9e23d7c7","date":1429050381,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/UnionPostingsEnum[MultiPhraseQuery].DocsQueue#DocsQueue(List[PostingsEnum]).mjava","sourceNew":null,"sourceOld":"    DocsQueue(List<PostingsEnum> postingsEnums) throws IOException {\n      super(postingsEnums.size());\n\n      Iterator<PostingsEnum> i = postingsEnums.iterator();\n      while (i.hasNext()) {\n        PostingsEnum postings = i.next();\n        if (postings.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          add(postings);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d5e43895c6f1bdbf4f7260372c0526309ea78ee","date":1429052573,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/UnionPostingsEnum[MultiPhraseQuery].DocsQueue#DocsQueue(List[PostingsEnum]).mjava","pathOld":"/dev/null","sourceNew":"    DocsQueue(List<PostingsEnum> postingsEnums) throws IOException {\n      super(postingsEnums.size());\n\n      Iterator<PostingsEnum> i = postingsEnums.iterator();\n      while (i.hasNext()) {\n        PostingsEnum postings = i.next();\n        if (postings.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          add(postings);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c74000f48f15dd52e66dc2f279abd04cb226ed2","date":1429059243,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/UnionPostingsEnum[MultiPhraseQuery].DocsQueue#DocsQueue(List[PostingsEnum]).mjava","sourceNew":null,"sourceOld":"    DocsQueue(List<PostingsEnum> postingsEnums) throws IOException {\n      super(postingsEnums.size());\n\n      Iterator<PostingsEnum> i = postingsEnums.iterator();\n      while (i.hasNext()) {\n        PostingsEnum postings = i.next();\n        if (postings.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n          add(postings);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6d5e43895c6f1bdbf4f7260372c0526309ea78ee":["f8ac81480868d6bcd251ab080a87395b9e23d7c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8ac81480868d6bcd251ab080a87395b9e23d7c7":["51f5280f31484820499077f41fcdfe92d527d9dc"],"51f5280f31484820499077f41fcdfe92d527d9dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4c74000f48f15dd52e66dc2f279abd04cb226ed2":["6d5e43895c6f1bdbf4f7260372c0526309ea78ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4c74000f48f15dd52e66dc2f279abd04cb226ed2"]},"commit2Childs":{"6d5e43895c6f1bdbf4f7260372c0526309ea78ee":["4c74000f48f15dd52e66dc2f279abd04cb226ed2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["51f5280f31484820499077f41fcdfe92d527d9dc"],"f8ac81480868d6bcd251ab080a87395b9e23d7c7":["6d5e43895c6f1bdbf4f7260372c0526309ea78ee"],"51f5280f31484820499077f41fcdfe92d527d9dc":["f8ac81480868d6bcd251ab080a87395b9e23d7c7"],"4c74000f48f15dd52e66dc2f279abd04cb226ed2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}