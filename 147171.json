{"path":"solr/test-framework/src/test/org/apache/solr/TestLogLevelAnnotations#checkLogLevelsAfterClass().mjava","commits":[{"id":"86ca4dae7c5e12c39255e15568e91dd428619428","date":1576619925,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/test/org/apache/solr/TestLogLevelAnnotations#checkLogLevelsAfterClass().mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Check that the expected log level <em>configurations</em> have been reset after the test\n   * <p>\n   * <b>NOTE:</b> We only validate <code>@LogLevel</code> modifications made at the \n   * {@link #testMethodLogLevels} level,  not at the 'class' level, because of the lifecycle of junit \n   * methods: This <code>@AfterClass</code> will run before the <code>SolrTestCaseJ4</code> \n   * <code>@AfterClass</code> method where the 'class' <code>@LogLevel</code> modifications will be reset.\n   * </p>\n   *\n   * @see #checkLogLevelsBeforeClass\n   * @see #testWhiteBoxMethods\n   */\n  @AfterClass\n  public static void checkLogLevelsAfterClass() {\n    final LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n    final Configuration config = ctx.getConfiguration();\n    \n    // NOTE: we're checking the CONFIGURATION of the loggers, not the \"effective\" value of the Logger\n    assertEquals(DEFAULT_LOG_LEVEL, config.getRootLogger().getLevel());\n    assertEquals(bogus_logger_prefix\n                 + \" should have had it's config unset; should now return the 'root' LoggerConfig\",\n                 config.getRootLogger(),\n                 config.getLoggerConfig(bogus_logger_prefix));\n    assertEquals(Level.ERROR, config.getLoggerConfig(bogus_logger_prefix + \".ClassLogLevel\").getLevel());\n    assertEquals(Level.WARN, config.getLoggerConfig(bogus_logger_prefix + \".MethodLogLevel\").getLevel());\n\n    // Now sanity check the EFFECTIVE Level of these loggers...\n    assertEquals(DEFAULT_LOG_LEVEL, LogManager.getRootLogger().getLevel());\n    assertEquals(DEFAULT_LOG_LEVEL, LogManager.getLogger(bogus_logger_prefix).getLevel());\n    assertEquals(Level.ERROR, LogManager.getLogger(bogus_logger_prefix + \".ClassLogLevel\").getLevel());\n    assertEquals(Level.WARN, LogManager.getLogger(bogus_logger_prefix + \".MethodLogLevel\").getLevel());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"246314af59d76a47fccc31e9494eefee01ec9c00","date":1576657955,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/test-framework/src/test/org/apache/solr/TestLogLevelAnnotations#checkLogLevelsAfterClass().mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Check that the expected log level <em>configurations</em> have been reset after the test\n   * <p>\n   * <b>NOTE:</b> We only validate <code>@LogLevel</code> modifications made at the \n   * {@link #testMethodLogLevels} level,  not at the 'class' level, because of the lifecycle of junit \n   * methods: This <code>@AfterClass</code> will run before the <code>SolrTestCaseJ4</code> \n   * <code>@AfterClass</code> method where the 'class' <code>@LogLevel</code> modifications will be reset.\n   * </p>\n   *\n   * @see #checkLogLevelsBeforeClass\n   * @see #testWhiteBoxMethods\n   */\n  @AfterClass\n  public static void checkLogLevelsAfterClass() {\n    final LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n    final Configuration config = ctx.getConfiguration();\n    \n    // NOTE: we're checking the CONFIGURATION of the loggers, not the \"effective\" value of the Logger\n    assertEquals(DEFAULT_LOG_LEVEL, config.getRootLogger().getLevel());\n    assertEquals(bogus_logger_prefix\n                 + \" should have had it's config unset; should now return the 'root' LoggerConfig\",\n                 config.getRootLogger(),\n                 config.getLoggerConfig(bogus_logger_prefix));\n    assertEquals(Level.ERROR, config.getLoggerConfig(bogus_logger_prefix + \".ClassLogLevel\").getLevel());\n    assertEquals(Level.WARN, config.getLoggerConfig(bogus_logger_prefix + \".MethodLogLevel\").getLevel());\n\n    // Now sanity check the EFFECTIVE Level of these loggers...\n    assertEquals(DEFAULT_LOG_LEVEL, LogManager.getRootLogger().getLevel());\n    assertEquals(DEFAULT_LOG_LEVEL, LogManager.getLogger(bogus_logger_prefix).getLevel());\n    assertEquals(Level.ERROR, LogManager.getLogger(bogus_logger_prefix + \".ClassLogLevel\").getLevel());\n    assertEquals(Level.WARN, LogManager.getLogger(bogus_logger_prefix + \".MethodLogLevel\").getLevel());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"246314af59d76a47fccc31e9494eefee01ec9c00":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","86ca4dae7c5e12c39255e15568e91dd428619428"],"86ca4dae7c5e12c39255e15568e91dd428619428":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["86ca4dae7c5e12c39255e15568e91dd428619428"]},"commit2Childs":{"246314af59d76a47fccc31e9494eefee01ec9c00":[],"86ca4dae7c5e12c39255e15568e91dd428619428":["246314af59d76a47fccc31e9494eefee01ec9c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["246314af59d76a47fccc31e9494eefee01ec9c00","86ca4dae7c5e12c39255e15568e91dd428619428"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["246314af59d76a47fccc31e9494eefee01ec9c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}