{"path":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testNoDocsHaveGroupField().mjava","commits":[{"id":"a0201bd24de8c2e43ffd97115399c48fbcc83836","date":1447713745,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testNoDocsHaveGroupField().mjava","pathOld":"/dev/null","sourceNew":"  public void testNoDocsHaveGroupField() throws Exception {\n    // as unlikely as this test seems, it's important for the possibility that a segment exists w/o\n    // any live docs that have DocValues for the group field -- ie: every doc in segment is in null group.\n    \n    assertU(adoc(\"id\", \"1\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"2\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"1000\"));\n    assertU(adoc(\"id\", \"3\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"1000\"));\n    assertU(adoc(\"id\", \"4\", \"group_s\", \"group1\", \"test_ti\", \"10\", \"test_tl\", \"100\"));\n    //\n    assertU(adoc(\"id\", \"5\", \"group_s\", \"group2\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"term_s\", \"YYYY\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"6\", \"group_s\", \"group2\", \"test_ti\", \"5\", \"test_tl\",\"1000\"));\n    assertU(adoc(\"id\", \"7\", \"group_s\", \"group2\", \"test_ti\", \"5\", \"test_tl\",\"1000\", \"term_s\", \"XXXX\"));\n    assertU(adoc(\"id\", \"8\", \"group_s\", \"group2\", \"test_ti\", \"10\",\"test_tl\", \"100\"));\n    assertU(commit());\n    \n    // none of these grouping fields are in any doc\n    for (String group : new String[] {\n        \"field=bogus_s\", \"field=bogus_s_dv\",\n        \"field=bogus_s hint=top_fc\", // alternative docvalues codepath w/ hint\n        \"field=bogus_s_dv hint=top_fc\", // alternative docvalues codepath w/ hint\n        \"field=bogus_ti\", \"field=bogus_tf\" }) {\n      \n      // for any of these selectors, behavior of these checks should be consistent\n      for (String selector : new String[] {\n          \"\", \" sort='score desc' \",\n          \" min=test_ti \", \" max=test_ti \", \" sort='test_ti asc' \",  \" sort='test_ti desc' \",\n          \" min=test_tf \", \" max=test_tf \", \" sort='test_tf asc' \",  \" sort='test_tf desc' \",\n          \" sort='group_s asc' \",  \" sort='group_s desc' \",\n          // fields that don't exist\n          \" min=bogus_sort_ti \", \" max=bogus_sort_ti \",\n          \" sort='bogus_sort_ti asc' \",  \" sort='bogus_sort_ti desc' \",\n          \" sort='bogus_sort_s asc' \",  \" sort='bogus_sort_s desc' \",\n        }) {\n          \n          \n        ModifiableSolrParams params = null;\n\n        // w/default nullPolicy, no groups found\n        params = new ModifiableSolrParams();\n        params.add(\"q\", \"*:*\");\n        params.add(\"sort\", \"id desc\");\n        params.add(\"fq\", \"{!collapse \"+group+\" \"+selector+\"}\");\n        assertQ(req(params), \"*[count(//doc)=0]\");\n\n        // w/nullPolicy=expand, every doc found\n        params = new ModifiableSolrParams();\n        params.add(\"q\", \"*:*\");\n        params.add(\"sort\", \"id desc\");\n        params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=expand \"+selector+\"}\");\n        assertQ(req(params)\n                , \"*[count(//doc)=8]\"\n                ,\"//result/doc[1]/float[@name='id'][.='8.0']\"\n                ,\"//result/doc[2]/float[@name='id'][.='7.0']\"\n                ,\"//result/doc[3]/float[@name='id'][.='6.0']\"\n                ,\"//result/doc[4]/float[@name='id'][.='5.0']\"\n                ,\"//result/doc[5]/float[@name='id'][.='4.0']\"\n                ,\"//result/doc[6]/float[@name='id'][.='3.0']\"\n                ,\"//result/doc[7]/float[@name='id'][.='2.0']\"\n                ,\"//result/doc[8]/float[@name='id'][.='1.0']\"\n                );\n\n        \n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ea826cad27aae1c1287b70d2eaf0202ec6aa754","date":1490169633,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testNoDocsHaveGroupField().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testNoDocsHaveGroupField().mjava","sourceNew":"  public void testNoDocsHaveGroupField() throws Exception {\n    // as unlikely as this test seems, it's important for the possibility that a segment exists w/o\n    // any live docs that have DocValues for the group field -- ie: every doc in segment is in null group.\n    \n    assertU(adoc(\"id\", \"1\", \"group_s\", \"group1\", \"test_i\", \"5\", \"test_l\", \"10\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"2\", \"group_s\", \"group1\", \"test_i\", \"5\", \"test_l\", \"1000\"));\n    assertU(adoc(\"id\", \"3\", \"group_s\", \"group1\", \"test_i\", \"5\", \"test_l\", \"1000\"));\n    assertU(adoc(\"id\", \"4\", \"group_s\", \"group1\", \"test_i\", \"10\", \"test_l\", \"100\"));\n    //\n    assertU(adoc(\"id\", \"5\", \"group_s\", \"group2\", \"test_i\", \"5\", \"test_l\", \"10\", \"term_s\", \"YYYY\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"6\", \"group_s\", \"group2\", \"test_i\", \"5\", \"test_l\",\"1000\"));\n    assertU(adoc(\"id\", \"7\", \"group_s\", \"group2\", \"test_i\", \"5\", \"test_l\",\"1000\", \"term_s\", \"XXXX\"));\n    assertU(adoc(\"id\", \"8\", \"group_s\", \"group2\", \"test_i\", \"10\",\"test_l\", \"100\"));\n    assertU(commit());\n    \n    // none of these grouping fields are in any doc\n    for (String group : new String[] {\n        \"field=bogus_s\", \"field=bogus_s_dv\",\n        \"field=bogus_s hint=top_fc\", // alternative docvalues codepath w/ hint\n        \"field=bogus_s_dv hint=top_fc\", // alternative docvalues codepath w/ hint\n        \"field=bogus_i\", \"field=bogus_tf\" }) {\n      \n      // for any of these selectors, behavior of these checks should be consistent\n      for (String selector : new String[] {\n          \"\", \" sort='score desc' \",\n          \" min=test_i \", \" max=test_i \", \" sort='test_i asc' \",  \" sort='test_i desc' \",\n          \" min=test_f \", \" max=test_f \", \" sort='test_f asc' \",  \" sort='test_f desc' \",\n          \" sort='group_s asc' \",  \" sort='group_s desc' \",\n          // fields that don't exist\n          \" min=bogus_sort_i \", \" max=bogus_sort_i \",\n          \" sort='bogus_sort_i asc' \",  \" sort='bogus_sort_i desc' \",\n          \" sort='bogus_sort_s asc' \",  \" sort='bogus_sort_s desc' \",\n        }) {\n          \n          \n        ModifiableSolrParams params = null;\n\n        // w/default nullPolicy, no groups found\n        params = new ModifiableSolrParams();\n        params.add(\"q\", \"*:*\");\n        params.add(\"sort\", \"id desc\");\n        params.add(\"fq\", \"{!collapse \"+group+\" \"+selector+\"}\");\n        assertQ(req(params), \"*[count(//doc)=0]\");\n\n        // w/nullPolicy=expand, every doc found\n        params = new ModifiableSolrParams();\n        params.add(\"q\", \"*:*\");\n        params.add(\"sort\", \"id desc\");\n        params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=expand \"+selector+\"}\");\n        assertQ(req(params)\n                , \"*[count(//doc)=8]\"\n                ,\"//result/doc[1]/float[@name='id'][.='8.0']\"\n                ,\"//result/doc[2]/float[@name='id'][.='7.0']\"\n                ,\"//result/doc[3]/float[@name='id'][.='6.0']\"\n                ,\"//result/doc[4]/float[@name='id'][.='5.0']\"\n                ,\"//result/doc[5]/float[@name='id'][.='4.0']\"\n                ,\"//result/doc[6]/float[@name='id'][.='3.0']\"\n                ,\"//result/doc[7]/float[@name='id'][.='2.0']\"\n                ,\"//result/doc[8]/float[@name='id'][.='1.0']\"\n                );\n\n        \n      }\n    }\n  }\n\n","sourceOld":"  public void testNoDocsHaveGroupField() throws Exception {\n    // as unlikely as this test seems, it's important for the possibility that a segment exists w/o\n    // any live docs that have DocValues for the group field -- ie: every doc in segment is in null group.\n    \n    assertU(adoc(\"id\", \"1\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"2\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"1000\"));\n    assertU(adoc(\"id\", \"3\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"1000\"));\n    assertU(adoc(\"id\", \"4\", \"group_s\", \"group1\", \"test_ti\", \"10\", \"test_tl\", \"100\"));\n    //\n    assertU(adoc(\"id\", \"5\", \"group_s\", \"group2\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"term_s\", \"YYYY\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"6\", \"group_s\", \"group2\", \"test_ti\", \"5\", \"test_tl\",\"1000\"));\n    assertU(adoc(\"id\", \"7\", \"group_s\", \"group2\", \"test_ti\", \"5\", \"test_tl\",\"1000\", \"term_s\", \"XXXX\"));\n    assertU(adoc(\"id\", \"8\", \"group_s\", \"group2\", \"test_ti\", \"10\",\"test_tl\", \"100\"));\n    assertU(commit());\n    \n    // none of these grouping fields are in any doc\n    for (String group : new String[] {\n        \"field=bogus_s\", \"field=bogus_s_dv\",\n        \"field=bogus_s hint=top_fc\", // alternative docvalues codepath w/ hint\n        \"field=bogus_s_dv hint=top_fc\", // alternative docvalues codepath w/ hint\n        \"field=bogus_ti\", \"field=bogus_tf\" }) {\n      \n      // for any of these selectors, behavior of these checks should be consistent\n      for (String selector : new String[] {\n          \"\", \" sort='score desc' \",\n          \" min=test_ti \", \" max=test_ti \", \" sort='test_ti asc' \",  \" sort='test_ti desc' \",\n          \" min=test_tf \", \" max=test_tf \", \" sort='test_tf asc' \",  \" sort='test_tf desc' \",\n          \" sort='group_s asc' \",  \" sort='group_s desc' \",\n          // fields that don't exist\n          \" min=bogus_sort_ti \", \" max=bogus_sort_ti \",\n          \" sort='bogus_sort_ti asc' \",  \" sort='bogus_sort_ti desc' \",\n          \" sort='bogus_sort_s asc' \",  \" sort='bogus_sort_s desc' \",\n        }) {\n          \n          \n        ModifiableSolrParams params = null;\n\n        // w/default nullPolicy, no groups found\n        params = new ModifiableSolrParams();\n        params.add(\"q\", \"*:*\");\n        params.add(\"sort\", \"id desc\");\n        params.add(\"fq\", \"{!collapse \"+group+\" \"+selector+\"}\");\n        assertQ(req(params), \"*[count(//doc)=0]\");\n\n        // w/nullPolicy=expand, every doc found\n        params = new ModifiableSolrParams();\n        params.add(\"q\", \"*:*\");\n        params.add(\"sort\", \"id desc\");\n        params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=expand \"+selector+\"}\");\n        assertQ(req(params)\n                , \"*[count(//doc)=8]\"\n                ,\"//result/doc[1]/float[@name='id'][.='8.0']\"\n                ,\"//result/doc[2]/float[@name='id'][.='7.0']\"\n                ,\"//result/doc[3]/float[@name='id'][.='6.0']\"\n                ,\"//result/doc[4]/float[@name='id'][.='5.0']\"\n                ,\"//result/doc[5]/float[@name='id'][.='4.0']\"\n                ,\"//result/doc[6]/float[@name='id'][.='3.0']\"\n                ,\"//result/doc[7]/float[@name='id'][.='2.0']\"\n                ,\"//result/doc[8]/float[@name='id'][.='1.0']\"\n                );\n\n        \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa09e86cb64347ee96ff0a59f09b539abd620e57","date":1490280013,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testNoDocsHaveGroupField().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testNoDocsHaveGroupField().mjava","sourceNew":"  public void testNoDocsHaveGroupField() throws Exception {\n    // as unlikely as this test seems, it's important for the possibility that a segment exists w/o\n    // any live docs that have DocValues for the group field -- ie: every doc in segment is in null group.\n    \n    assertU(adoc(\"id\", \"1\", \"group_s\", \"group1\", \"test_i\", \"5\", \"test_l\", \"10\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"2\", \"group_s\", \"group1\", \"test_i\", \"5\", \"test_l\", \"1000\"));\n    assertU(adoc(\"id\", \"3\", \"group_s\", \"group1\", \"test_i\", \"5\", \"test_l\", \"1000\"));\n    assertU(adoc(\"id\", \"4\", \"group_s\", \"group1\", \"test_i\", \"10\", \"test_l\", \"100\"));\n    //\n    assertU(adoc(\"id\", \"5\", \"group_s\", \"group2\", \"test_i\", \"5\", \"test_l\", \"10\", \"term_s\", \"YYYY\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"6\", \"group_s\", \"group2\", \"test_i\", \"5\", \"test_l\",\"1000\"));\n    assertU(adoc(\"id\", \"7\", \"group_s\", \"group2\", \"test_i\", \"5\", \"test_l\",\"1000\", \"term_s\", \"XXXX\"));\n    assertU(adoc(\"id\", \"8\", \"group_s\", \"group2\", \"test_i\", \"10\",\"test_l\", \"100\"));\n    assertU(commit());\n    \n    // none of these grouping fields are in any doc\n    for (String group : new String[] {\n        \"field=bogus_s\", \"field=bogus_s_dv\",\n        \"field=bogus_s hint=top_fc\", // alternative docvalues codepath w/ hint\n        \"field=bogus_s_dv hint=top_fc\", // alternative docvalues codepath w/ hint\n        \"field=bogus_i\", \"field=bogus_tf\" }) {\n      \n      // for any of these selectors, behavior of these checks should be consistent\n      for (String selector : new String[] {\n          \"\", \" sort='score desc' \",\n          \" min=test_i \", \" max=test_i \", \" sort='test_i asc' \",  \" sort='test_i desc' \",\n          \" min=test_f \", \" max=test_f \", \" sort='test_f asc' \",  \" sort='test_f desc' \",\n          \" sort='group_s asc' \",  \" sort='group_s desc' \",\n          // fields that don't exist\n          \" min=bogus_sort_i \", \" max=bogus_sort_i \",\n          \" sort='bogus_sort_i asc' \",  \" sort='bogus_sort_i desc' \",\n          \" sort='bogus_sort_s asc' \",  \" sort='bogus_sort_s desc' \",\n        }) {\n          \n          \n        ModifiableSolrParams params = null;\n\n        // w/default nullPolicy, no groups found\n        params = new ModifiableSolrParams();\n        params.add(\"q\", \"*:*\");\n        params.add(\"sort\", \"id desc\");\n        params.add(\"fq\", \"{!collapse \"+group+\" \"+selector+\"}\");\n        assertQ(req(params), \"*[count(//doc)=0]\");\n\n        // w/nullPolicy=expand, every doc found\n        params = new ModifiableSolrParams();\n        params.add(\"q\", \"*:*\");\n        params.add(\"sort\", \"id desc\");\n        params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=expand \"+selector+\"}\");\n        assertQ(req(params)\n                , \"*[count(//doc)=8]\"\n                ,\"//result/doc[1]/float[@name='id'][.='8.0']\"\n                ,\"//result/doc[2]/float[@name='id'][.='7.0']\"\n                ,\"//result/doc[3]/float[@name='id'][.='6.0']\"\n                ,\"//result/doc[4]/float[@name='id'][.='5.0']\"\n                ,\"//result/doc[5]/float[@name='id'][.='4.0']\"\n                ,\"//result/doc[6]/float[@name='id'][.='3.0']\"\n                ,\"//result/doc[7]/float[@name='id'][.='2.0']\"\n                ,\"//result/doc[8]/float[@name='id'][.='1.0']\"\n                );\n\n        \n      }\n    }\n  }\n\n","sourceOld":"  public void testNoDocsHaveGroupField() throws Exception {\n    // as unlikely as this test seems, it's important for the possibility that a segment exists w/o\n    // any live docs that have DocValues for the group field -- ie: every doc in segment is in null group.\n    \n    assertU(adoc(\"id\", \"1\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"10\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"2\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"1000\"));\n    assertU(adoc(\"id\", \"3\", \"group_s\", \"group1\", \"test_ti\", \"5\", \"test_tl\", \"1000\"));\n    assertU(adoc(\"id\", \"4\", \"group_s\", \"group1\", \"test_ti\", \"10\", \"test_tl\", \"100\"));\n    //\n    assertU(adoc(\"id\", \"5\", \"group_s\", \"group2\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"term_s\", \"YYYY\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"6\", \"group_s\", \"group2\", \"test_ti\", \"5\", \"test_tl\",\"1000\"));\n    assertU(adoc(\"id\", \"7\", \"group_s\", \"group2\", \"test_ti\", \"5\", \"test_tl\",\"1000\", \"term_s\", \"XXXX\"));\n    assertU(adoc(\"id\", \"8\", \"group_s\", \"group2\", \"test_ti\", \"10\",\"test_tl\", \"100\"));\n    assertU(commit());\n    \n    // none of these grouping fields are in any doc\n    for (String group : new String[] {\n        \"field=bogus_s\", \"field=bogus_s_dv\",\n        \"field=bogus_s hint=top_fc\", // alternative docvalues codepath w/ hint\n        \"field=bogus_s_dv hint=top_fc\", // alternative docvalues codepath w/ hint\n        \"field=bogus_ti\", \"field=bogus_tf\" }) {\n      \n      // for any of these selectors, behavior of these checks should be consistent\n      for (String selector : new String[] {\n          \"\", \" sort='score desc' \",\n          \" min=test_ti \", \" max=test_ti \", \" sort='test_ti asc' \",  \" sort='test_ti desc' \",\n          \" min=test_tf \", \" max=test_tf \", \" sort='test_tf asc' \",  \" sort='test_tf desc' \",\n          \" sort='group_s asc' \",  \" sort='group_s desc' \",\n          // fields that don't exist\n          \" min=bogus_sort_ti \", \" max=bogus_sort_ti \",\n          \" sort='bogus_sort_ti asc' \",  \" sort='bogus_sort_ti desc' \",\n          \" sort='bogus_sort_s asc' \",  \" sort='bogus_sort_s desc' \",\n        }) {\n          \n          \n        ModifiableSolrParams params = null;\n\n        // w/default nullPolicy, no groups found\n        params = new ModifiableSolrParams();\n        params.add(\"q\", \"*:*\");\n        params.add(\"sort\", \"id desc\");\n        params.add(\"fq\", \"{!collapse \"+group+\" \"+selector+\"}\");\n        assertQ(req(params), \"*[count(//doc)=0]\");\n\n        // w/nullPolicy=expand, every doc found\n        params = new ModifiableSolrParams();\n        params.add(\"q\", \"*:*\");\n        params.add(\"sort\", \"id desc\");\n        params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=expand \"+selector+\"}\");\n        assertQ(req(params)\n                , \"*[count(//doc)=8]\"\n                ,\"//result/doc[1]/float[@name='id'][.='8.0']\"\n                ,\"//result/doc[2]/float[@name='id'][.='7.0']\"\n                ,\"//result/doc[3]/float[@name='id'][.='6.0']\"\n                ,\"//result/doc[4]/float[@name='id'][.='5.0']\"\n                ,\"//result/doc[5]/float[@name='id'][.='4.0']\"\n                ,\"//result/doc[6]/float[@name='id'][.='3.0']\"\n                ,\"//result/doc[7]/float[@name='id'][.='2.0']\"\n                ,\"//result/doc[8]/float[@name='id'][.='1.0']\"\n                );\n\n        \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71f63026529f3c1f03cfdd664910873ab2369ae","date":1497543264,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testNoDocsHaveGroupField().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testNoDocsHaveGroupField().mjava","sourceNew":"  public void testNoDocsHaveGroupField() throws Exception {\n    // as unlikely as this test seems, it's important for the possibility that a segment exists w/o\n    // any live docs that have DocValues for the group field -- ie: every doc in segment is in null group.\n    \n    assertU(adoc(\"id\", \"1\", \"group_s\", \"group1\", \"test_i\", \"5\", \"test_l\", \"10\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"2\", \"group_s\", \"group1\", \"test_i\", \"5\", \"test_l\", \"1000\"));\n    assertU(adoc(\"id\", \"3\", \"group_s\", \"group1\", \"test_i\", \"5\", \"test_l\", \"1000\"));\n    assertU(adoc(\"id\", \"4\", \"group_s\", \"group1\", \"test_i\", \"10\", \"test_l\", \"100\"));\n    //\n    assertU(adoc(\"id\", \"5\", \"group_s\", \"group2\", \"test_i\", \"5\", \"test_l\", \"10\", \"term_s\", \"YYYY\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"6\", \"group_s\", \"group2\", \"test_i\", \"5\", \"test_l\",\"1000\"));\n    assertU(adoc(\"id\", \"7\", \"group_s\", \"group2\", \"test_i\", \"5\", \"test_l\",\"1000\", \"term_s\", \"XXXX\"));\n    assertU(adoc(\"id\", \"8\", \"group_s\", \"group2\", \"test_i\", \"10\",\"test_l\", \"100\"));\n    assertU(commit());\n    \n    // none of these grouping fields are in any doc\n    for (String group : new String[] {\n        \"field=bogus_s\", \"field=bogus_s_dv\",\n        \"field=bogus_s hint=top_fc\", // alternative docvalues codepath w/ hint\n        \"field=bogus_s_dv hint=top_fc\", // alternative docvalues codepath w/ hint\n        \"field=bogus_i\", \"field=bogus_tf\" }) {\n      \n      // for any of these selectors, behavior of these checks should be consistent\n      for (String selector : new String[] {\n          \"\", \" sort='score desc' \",\n          \" min=test_i \", \" max=test_i \", \" sort='test_i asc' \",  \" sort='test_i desc' \",\n          \" min=test_f \", \" max=test_f \", \" sort='test_f asc' \",  \" sort='test_f desc' \",\n          \" sort='group_s asc' \",  \" sort='group_s desc' \",\n          // fields that don't exist\n          \" min=bogus_sort_i \", \" max=bogus_sort_i \",\n          \" sort='bogus_sort_i asc' \",  \" sort='bogus_sort_i desc' \",\n          \" sort='bogus_sort_s asc' \",  \" sort='bogus_sort_s desc' \",\n        }) {\n          \n          \n        ModifiableSolrParams params = null;\n\n        // w/default nullPolicy, no groups found\n        params = new ModifiableSolrParams();\n        params.add(\"q\", \"*:*\");\n        params.add(\"sort\", \"id_i desc\");\n        params.add(\"fq\", \"{!collapse \"+group+\" \"+selector+\"}\");\n        assertQ(req(params), \"*[count(//doc)=0]\");\n\n        // w/nullPolicy=expand, every doc found\n        params = new ModifiableSolrParams();\n        params.add(\"q\", \"*:*\");\n        params.add(\"sort\", \"id_i desc\");\n        params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=expand \"+selector+\"}\");\n        assertQ(req(params)\n                , \"*[count(//doc)=8]\"\n                ,\"//result/doc[1]/str[@name='id'][.='8']\"\n                ,\"//result/doc[2]/str[@name='id'][.='7']\"\n                ,\"//result/doc[3]/str[@name='id'][.='6']\"\n                ,\"//result/doc[4]/str[@name='id'][.='5']\"\n                ,\"//result/doc[5]/str[@name='id'][.='4']\"\n                ,\"//result/doc[6]/str[@name='id'][.='3']\"\n                ,\"//result/doc[7]/str[@name='id'][.='2']\"\n                ,\"//result/doc[8]/str[@name='id'][.='1']\"\n                );\n\n        \n      }\n    }\n  }\n\n","sourceOld":"  public void testNoDocsHaveGroupField() throws Exception {\n    // as unlikely as this test seems, it's important for the possibility that a segment exists w/o\n    // any live docs that have DocValues for the group field -- ie: every doc in segment is in null group.\n    \n    assertU(adoc(\"id\", \"1\", \"group_s\", \"group1\", \"test_i\", \"5\", \"test_l\", \"10\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"2\", \"group_s\", \"group1\", \"test_i\", \"5\", \"test_l\", \"1000\"));\n    assertU(adoc(\"id\", \"3\", \"group_s\", \"group1\", \"test_i\", \"5\", \"test_l\", \"1000\"));\n    assertU(adoc(\"id\", \"4\", \"group_s\", \"group1\", \"test_i\", \"10\", \"test_l\", \"100\"));\n    //\n    assertU(adoc(\"id\", \"5\", \"group_s\", \"group2\", \"test_i\", \"5\", \"test_l\", \"10\", \"term_s\", \"YYYY\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"6\", \"group_s\", \"group2\", \"test_i\", \"5\", \"test_l\",\"1000\"));\n    assertU(adoc(\"id\", \"7\", \"group_s\", \"group2\", \"test_i\", \"5\", \"test_l\",\"1000\", \"term_s\", \"XXXX\"));\n    assertU(adoc(\"id\", \"8\", \"group_s\", \"group2\", \"test_i\", \"10\",\"test_l\", \"100\"));\n    assertU(commit());\n    \n    // none of these grouping fields are in any doc\n    for (String group : new String[] {\n        \"field=bogus_s\", \"field=bogus_s_dv\",\n        \"field=bogus_s hint=top_fc\", // alternative docvalues codepath w/ hint\n        \"field=bogus_s_dv hint=top_fc\", // alternative docvalues codepath w/ hint\n        \"field=bogus_i\", \"field=bogus_tf\" }) {\n      \n      // for any of these selectors, behavior of these checks should be consistent\n      for (String selector : new String[] {\n          \"\", \" sort='score desc' \",\n          \" min=test_i \", \" max=test_i \", \" sort='test_i asc' \",  \" sort='test_i desc' \",\n          \" min=test_f \", \" max=test_f \", \" sort='test_f asc' \",  \" sort='test_f desc' \",\n          \" sort='group_s asc' \",  \" sort='group_s desc' \",\n          // fields that don't exist\n          \" min=bogus_sort_i \", \" max=bogus_sort_i \",\n          \" sort='bogus_sort_i asc' \",  \" sort='bogus_sort_i desc' \",\n          \" sort='bogus_sort_s asc' \",  \" sort='bogus_sort_s desc' \",\n        }) {\n          \n          \n        ModifiableSolrParams params = null;\n\n        // w/default nullPolicy, no groups found\n        params = new ModifiableSolrParams();\n        params.add(\"q\", \"*:*\");\n        params.add(\"sort\", \"id desc\");\n        params.add(\"fq\", \"{!collapse \"+group+\" \"+selector+\"}\");\n        assertQ(req(params), \"*[count(//doc)=0]\");\n\n        // w/nullPolicy=expand, every doc found\n        params = new ModifiableSolrParams();\n        params.add(\"q\", \"*:*\");\n        params.add(\"sort\", \"id desc\");\n        params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=expand \"+selector+\"}\");\n        assertQ(req(params)\n                , \"*[count(//doc)=8]\"\n                ,\"//result/doc[1]/float[@name='id'][.='8.0']\"\n                ,\"//result/doc[2]/float[@name='id'][.='7.0']\"\n                ,\"//result/doc[3]/float[@name='id'][.='6.0']\"\n                ,\"//result/doc[4]/float[@name='id'][.='5.0']\"\n                ,\"//result/doc[5]/float[@name='id'][.='4.0']\"\n                ,\"//result/doc[6]/float[@name='id'][.='3.0']\"\n                ,\"//result/doc[7]/float[@name='id'][.='2.0']\"\n                ,\"//result/doc[8]/float[@name='id'][.='1.0']\"\n                );\n\n        \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testNoDocsHaveGroupField().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testNoDocsHaveGroupField().mjava","sourceNew":"  public void testNoDocsHaveGroupField() throws Exception {\n    // as unlikely as this test seems, it's important for the possibility that a segment exists w/o\n    // any live docs that have DocValues for the group field -- ie: every doc in segment is in null group.\n    \n    assertU(adoc(\"id\", \"1\", \"group_s\", \"group1\", \"test_i\", \"5\", \"test_l\", \"10\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"2\", \"group_s\", \"group1\", \"test_i\", \"5\", \"test_l\", \"1000\"));\n    assertU(adoc(\"id\", \"3\", \"group_s\", \"group1\", \"test_i\", \"5\", \"test_l\", \"1000\"));\n    assertU(adoc(\"id\", \"4\", \"group_s\", \"group1\", \"test_i\", \"10\", \"test_l\", \"100\"));\n    //\n    assertU(adoc(\"id\", \"5\", \"group_s\", \"group2\", \"test_i\", \"5\", \"test_l\", \"10\", \"term_s\", \"YYYY\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"6\", \"group_s\", \"group2\", \"test_i\", \"5\", \"test_l\",\"1000\"));\n    assertU(adoc(\"id\", \"7\", \"group_s\", \"group2\", \"test_i\", \"5\", \"test_l\",\"1000\", \"term_s\", \"XXXX\"));\n    assertU(adoc(\"id\", \"8\", \"group_s\", \"group2\", \"test_i\", \"10\",\"test_l\", \"100\"));\n    assertU(commit());\n    \n    // none of these grouping fields are in any doc\n    for (String group : new String[] {\n        \"field=bogus_s\", \"field=bogus_s_dv\",\n        \"field=bogus_s hint=top_fc\", // alternative docvalues codepath w/ hint\n        \"field=bogus_s_dv hint=top_fc\", // alternative docvalues codepath w/ hint\n        \"field=bogus_i\", \"field=bogus_tf\" }) {\n      \n      // for any of these selectors, behavior of these checks should be consistent\n      for (String selector : new String[] {\n          \"\", \" sort='score desc' \",\n          \" min=test_i \", \" max=test_i \", \" sort='test_i asc' \",  \" sort='test_i desc' \",\n          \" min=test_f \", \" max=test_f \", \" sort='test_f asc' \",  \" sort='test_f desc' \",\n          \" sort='group_s asc' \",  \" sort='group_s desc' \",\n          // fields that don't exist\n          \" min=bogus_sort_i \", \" max=bogus_sort_i \",\n          \" sort='bogus_sort_i asc' \",  \" sort='bogus_sort_i desc' \",\n          \" sort='bogus_sort_s asc' \",  \" sort='bogus_sort_s desc' \",\n        }) {\n          \n          \n        ModifiableSolrParams params = null;\n\n        // w/default nullPolicy, no groups found\n        params = new ModifiableSolrParams();\n        params.add(\"q\", \"*:*\");\n        params.add(\"sort\", \"id_i desc\");\n        params.add(\"fq\", \"{!collapse \"+group+\" \"+selector+\"}\");\n        assertQ(req(params), \"*[count(//doc)=0]\");\n\n        // w/nullPolicy=expand, every doc found\n        params = new ModifiableSolrParams();\n        params.add(\"q\", \"*:*\");\n        params.add(\"sort\", \"id_i desc\");\n        params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=expand \"+selector+\"}\");\n        assertQ(req(params)\n                , \"*[count(//doc)=8]\"\n                ,\"//result/doc[1]/str[@name='id'][.='8']\"\n                ,\"//result/doc[2]/str[@name='id'][.='7']\"\n                ,\"//result/doc[3]/str[@name='id'][.='6']\"\n                ,\"//result/doc[4]/str[@name='id'][.='5']\"\n                ,\"//result/doc[5]/str[@name='id'][.='4']\"\n                ,\"//result/doc[6]/str[@name='id'][.='3']\"\n                ,\"//result/doc[7]/str[@name='id'][.='2']\"\n                ,\"//result/doc[8]/str[@name='id'][.='1']\"\n                );\n\n        \n      }\n    }\n  }\n\n","sourceOld":"  public void testNoDocsHaveGroupField() throws Exception {\n    // as unlikely as this test seems, it's important for the possibility that a segment exists w/o\n    // any live docs that have DocValues for the group field -- ie: every doc in segment is in null group.\n    \n    assertU(adoc(\"id\", \"1\", \"group_s\", \"group1\", \"test_i\", \"5\", \"test_l\", \"10\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"2\", \"group_s\", \"group1\", \"test_i\", \"5\", \"test_l\", \"1000\"));\n    assertU(adoc(\"id\", \"3\", \"group_s\", \"group1\", \"test_i\", \"5\", \"test_l\", \"1000\"));\n    assertU(adoc(\"id\", \"4\", \"group_s\", \"group1\", \"test_i\", \"10\", \"test_l\", \"100\"));\n    //\n    assertU(adoc(\"id\", \"5\", \"group_s\", \"group2\", \"test_i\", \"5\", \"test_l\", \"10\", \"term_s\", \"YYYY\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"6\", \"group_s\", \"group2\", \"test_i\", \"5\", \"test_l\",\"1000\"));\n    assertU(adoc(\"id\", \"7\", \"group_s\", \"group2\", \"test_i\", \"5\", \"test_l\",\"1000\", \"term_s\", \"XXXX\"));\n    assertU(adoc(\"id\", \"8\", \"group_s\", \"group2\", \"test_i\", \"10\",\"test_l\", \"100\"));\n    assertU(commit());\n    \n    // none of these grouping fields are in any doc\n    for (String group : new String[] {\n        \"field=bogus_s\", \"field=bogus_s_dv\",\n        \"field=bogus_s hint=top_fc\", // alternative docvalues codepath w/ hint\n        \"field=bogus_s_dv hint=top_fc\", // alternative docvalues codepath w/ hint\n        \"field=bogus_i\", \"field=bogus_tf\" }) {\n      \n      // for any of these selectors, behavior of these checks should be consistent\n      for (String selector : new String[] {\n          \"\", \" sort='score desc' \",\n          \" min=test_i \", \" max=test_i \", \" sort='test_i asc' \",  \" sort='test_i desc' \",\n          \" min=test_f \", \" max=test_f \", \" sort='test_f asc' \",  \" sort='test_f desc' \",\n          \" sort='group_s asc' \",  \" sort='group_s desc' \",\n          // fields that don't exist\n          \" min=bogus_sort_i \", \" max=bogus_sort_i \",\n          \" sort='bogus_sort_i asc' \",  \" sort='bogus_sort_i desc' \",\n          \" sort='bogus_sort_s asc' \",  \" sort='bogus_sort_s desc' \",\n        }) {\n          \n          \n        ModifiableSolrParams params = null;\n\n        // w/default nullPolicy, no groups found\n        params = new ModifiableSolrParams();\n        params.add(\"q\", \"*:*\");\n        params.add(\"sort\", \"id desc\");\n        params.add(\"fq\", \"{!collapse \"+group+\" \"+selector+\"}\");\n        assertQ(req(params), \"*[count(//doc)=0]\");\n\n        // w/nullPolicy=expand, every doc found\n        params = new ModifiableSolrParams();\n        params.add(\"q\", \"*:*\");\n        params.add(\"sort\", \"id desc\");\n        params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=expand \"+selector+\"}\");\n        assertQ(req(params)\n                , \"*[count(//doc)=8]\"\n                ,\"//result/doc[1]/float[@name='id'][.='8.0']\"\n                ,\"//result/doc[2]/float[@name='id'][.='7.0']\"\n                ,\"//result/doc[3]/float[@name='id'][.='6.0']\"\n                ,\"//result/doc[4]/float[@name='id'][.='5.0']\"\n                ,\"//result/doc[5]/float[@name='id'][.='4.0']\"\n                ,\"//result/doc[6]/float[@name='id'][.='3.0']\"\n                ,\"//result/doc[7]/float[@name='id'][.='2.0']\"\n                ,\"//result/doc[8]/float[@name='id'][.='1.0']\"\n                );\n\n        \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testNoDocsHaveGroupField().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testNoDocsHaveGroupField().mjava","sourceNew":"  public void testNoDocsHaveGroupField() throws Exception {\n    // as unlikely as this test seems, it's important for the possibility that a segment exists w/o\n    // any live docs that have DocValues for the group field -- ie: every doc in segment is in null group.\n    \n    assertU(adoc(\"id\", \"1\", \"group_s\", \"group1\", \"test_i\", \"5\", \"test_l\", \"10\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"2\", \"group_s\", \"group1\", \"test_i\", \"5\", \"test_l\", \"1000\"));\n    assertU(adoc(\"id\", \"3\", \"group_s\", \"group1\", \"test_i\", \"5\", \"test_l\", \"1000\"));\n    assertU(adoc(\"id\", \"4\", \"group_s\", \"group1\", \"test_i\", \"10\", \"test_l\", \"100\"));\n    //\n    assertU(adoc(\"id\", \"5\", \"group_s\", \"group2\", \"test_i\", \"5\", \"test_l\", \"10\", \"term_s\", \"YYYY\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"6\", \"group_s\", \"group2\", \"test_i\", \"5\", \"test_l\",\"1000\"));\n    assertU(adoc(\"id\", \"7\", \"group_s\", \"group2\", \"test_i\", \"5\", \"test_l\",\"1000\", \"term_s\", \"XXXX\"));\n    assertU(adoc(\"id\", \"8\", \"group_s\", \"group2\", \"test_i\", \"10\",\"test_l\", \"100\"));\n    assertU(commit());\n    \n    // none of these grouping fields are in any doc\n    for (String group : new String[] {\n        \"field=bogus_s\", \"field=bogus_s_dv\",\n        \"field=bogus_s hint=top_fc\", // alternative docvalues codepath w/ hint\n        \"field=bogus_s_dv hint=top_fc\", // alternative docvalues codepath w/ hint\n        \"field=bogus_i\", \"field=bogus_tf\" }) {\n      \n      // for any of these selectors, behavior of these checks should be consistent\n      for (String selector : new String[] {\n          \"\", \" sort='score desc' \",\n          \" min=test_i \", \" max=test_i \", \" sort='test_i asc' \",  \" sort='test_i desc' \",\n          \" min=test_f \", \" max=test_f \", \" sort='test_f asc' \",  \" sort='test_f desc' \",\n          \" sort='group_s asc' \",  \" sort='group_s desc' \",\n          // fields that don't exist\n          \" min=bogus_sort_i \", \" max=bogus_sort_i \",\n          \" sort='bogus_sort_i asc' \",  \" sort='bogus_sort_i desc' \",\n          \" sort='bogus_sort_s asc' \",  \" sort='bogus_sort_s desc' \",\n        }) {\n          \n          \n        ModifiableSolrParams params = null;\n\n        // w/default nullPolicy, no groups found\n        params = new ModifiableSolrParams();\n        params.add(\"q\", \"*:*\");\n        params.add(\"sort\", \"id_i desc\");\n        params.add(\"fq\", \"{!collapse \"+group+\" \"+selector+\"}\");\n        assertQ(req(params), \"*[count(//doc)=0]\");\n\n        // w/nullPolicy=expand, every doc found\n        params = new ModifiableSolrParams();\n        params.add(\"q\", \"*:*\");\n        params.add(\"sort\", \"id_i desc\");\n        params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=expand \"+selector+\"}\");\n        assertQ(req(params)\n                , \"*[count(//doc)=8]\"\n                ,\"//result/doc[1]/str[@name='id'][.='8']\"\n                ,\"//result/doc[2]/str[@name='id'][.='7']\"\n                ,\"//result/doc[3]/str[@name='id'][.='6']\"\n                ,\"//result/doc[4]/str[@name='id'][.='5']\"\n                ,\"//result/doc[5]/str[@name='id'][.='4']\"\n                ,\"//result/doc[6]/str[@name='id'][.='3']\"\n                ,\"//result/doc[7]/str[@name='id'][.='2']\"\n                ,\"//result/doc[8]/str[@name='id'][.='1']\"\n                );\n\n        \n      }\n    }\n  }\n\n","sourceOld":"  public void testNoDocsHaveGroupField() throws Exception {\n    // as unlikely as this test seems, it's important for the possibility that a segment exists w/o\n    // any live docs that have DocValues for the group field -- ie: every doc in segment is in null group.\n    \n    assertU(adoc(\"id\", \"1\", \"group_s\", \"group1\", \"test_i\", \"5\", \"test_l\", \"10\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"2\", \"group_s\", \"group1\", \"test_i\", \"5\", \"test_l\", \"1000\"));\n    assertU(adoc(\"id\", \"3\", \"group_s\", \"group1\", \"test_i\", \"5\", \"test_l\", \"1000\"));\n    assertU(adoc(\"id\", \"4\", \"group_s\", \"group1\", \"test_i\", \"10\", \"test_l\", \"100\"));\n    //\n    assertU(adoc(\"id\", \"5\", \"group_s\", \"group2\", \"test_i\", \"5\", \"test_l\", \"10\", \"term_s\", \"YYYY\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"6\", \"group_s\", \"group2\", \"test_i\", \"5\", \"test_l\",\"1000\"));\n    assertU(adoc(\"id\", \"7\", \"group_s\", \"group2\", \"test_i\", \"5\", \"test_l\",\"1000\", \"term_s\", \"XXXX\"));\n    assertU(adoc(\"id\", \"8\", \"group_s\", \"group2\", \"test_i\", \"10\",\"test_l\", \"100\"));\n    assertU(commit());\n    \n    // none of these grouping fields are in any doc\n    for (String group : new String[] {\n        \"field=bogus_s\", \"field=bogus_s_dv\",\n        \"field=bogus_s hint=top_fc\", // alternative docvalues codepath w/ hint\n        \"field=bogus_s_dv hint=top_fc\", // alternative docvalues codepath w/ hint\n        \"field=bogus_i\", \"field=bogus_tf\" }) {\n      \n      // for any of these selectors, behavior of these checks should be consistent\n      for (String selector : new String[] {\n          \"\", \" sort='score desc' \",\n          \" min=test_i \", \" max=test_i \", \" sort='test_i asc' \",  \" sort='test_i desc' \",\n          \" min=test_f \", \" max=test_f \", \" sort='test_f asc' \",  \" sort='test_f desc' \",\n          \" sort='group_s asc' \",  \" sort='group_s desc' \",\n          // fields that don't exist\n          \" min=bogus_sort_i \", \" max=bogus_sort_i \",\n          \" sort='bogus_sort_i asc' \",  \" sort='bogus_sort_i desc' \",\n          \" sort='bogus_sort_s asc' \",  \" sort='bogus_sort_s desc' \",\n        }) {\n          \n          \n        ModifiableSolrParams params = null;\n\n        // w/default nullPolicy, no groups found\n        params = new ModifiableSolrParams();\n        params.add(\"q\", \"*:*\");\n        params.add(\"sort\", \"id desc\");\n        params.add(\"fq\", \"{!collapse \"+group+\" \"+selector+\"}\");\n        assertQ(req(params), \"*[count(//doc)=0]\");\n\n        // w/nullPolicy=expand, every doc found\n        params = new ModifiableSolrParams();\n        params.add(\"q\", \"*:*\");\n        params.add(\"sort\", \"id desc\");\n        params.add(\"fq\", \"{!collapse field=\"+group+\" nullPolicy=expand \"+selector+\"}\");\n        assertQ(req(params)\n                , \"*[count(//doc)=8]\"\n                ,\"//result/doc[1]/float[@name='id'][.='8.0']\"\n                ,\"//result/doc[2]/float[@name='id'][.='7.0']\"\n                ,\"//result/doc[3]/float[@name='id'][.='6.0']\"\n                ,\"//result/doc[4]/float[@name='id'][.='5.0']\"\n                ,\"//result/doc[5]/float[@name='id'][.='4.0']\"\n                ,\"//result/doc[6]/float[@name='id'][.='3.0']\"\n                ,\"//result/doc[7]/float[@name='id'][.='2.0']\"\n                ,\"//result/doc[8]/float[@name='id'][.='1.0']\"\n                );\n\n        \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0201bd24de8c2e43ffd97115399c48fbcc83836":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a71f63026529f3c1f03cfdd664910873ab2369ae":["5ea826cad27aae1c1287b70d2eaf0202ec6aa754"],"fa09e86cb64347ee96ff0a59f09b539abd620e57":["a0201bd24de8c2e43ffd97115399c48fbcc83836"],"28288370235ed02234a64753cdbf0c6ec096304a":["5ea826cad27aae1c1287b70d2eaf0202ec6aa754","a71f63026529f3c1f03cfdd664910873ab2369ae"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["fa09e86cb64347ee96ff0a59f09b539abd620e57","a71f63026529f3c1f03cfdd664910873ab2369ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"5ea826cad27aae1c1287b70d2eaf0202ec6aa754":["a0201bd24de8c2e43ffd97115399c48fbcc83836"]},"commit2Childs":{"a0201bd24de8c2e43ffd97115399c48fbcc83836":["fa09e86cb64347ee96ff0a59f09b539abd620e57","5ea826cad27aae1c1287b70d2eaf0202ec6aa754"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0201bd24de8c2e43ffd97115399c48fbcc83836"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"fa09e86cb64347ee96ff0a59f09b539abd620e57":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"5ea826cad27aae1c1287b70d2eaf0202ec6aa754":["a71f63026529f3c1f03cfdd664910873ab2369ae","28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}