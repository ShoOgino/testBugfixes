{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/UniformSplitTermsWriter#writeFieldTerms(BlockWriter,DataOutput,TermsEnum,FieldInfo,NormsProducer).mjava","commits":[{"id":"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89","date":1567784912,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/UniformSplitTermsWriter#writeFieldTerms(BlockWriter,DataOutput,TermsEnum,FieldInfo,NormsProducer).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @return 1 if the field was written; 0 otherwise.\n   */\n  protected int writeFieldTerms(BlockWriter blockWriter, DataOutput fieldsOutput, TermsEnum termsEnum,\n                              FieldInfo fieldInfo, NormsProducer normsProducer) throws IOException {\n\n    FieldMetadata fieldMetadata = new FieldMetadata(fieldInfo, maxDoc);\n    fieldMetadata.setDictionaryStartFP(dictionaryOutput.getFilePointer());\n\n    postingsWriter.setField(fieldInfo);\n    blockWriter.setField(fieldMetadata);\n    IndexDictionary.Builder dictionaryBuilder = new FSTDictionary.Builder();\n    BytesRef lastTerm = null;\n    while (termsEnum.next() != null) {\n      BlockTermState blockTermState = writePostingLine(termsEnum, fieldMetadata, normsProducer);\n      if (blockTermState != null) {\n        lastTerm = BytesRef.deepCopyOf(termsEnum.term());\n        blockWriter.addLine(lastTerm, blockTermState, dictionaryBuilder);\n      }\n    }\n\n    // Flush remaining terms.\n    blockWriter.finishLastBlock(dictionaryBuilder);\n\n    if (fieldMetadata.getNumTerms() > 0) {\n      fieldMetadata.setLastTerm(lastTerm);\n      fieldMetadata.write(fieldsOutput);\n      writeDictionary(dictionaryBuilder);\n      return 1;\n    }\n    return 0;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d28da8a459f5f0c930da7185c56d0c25edd3fbd1","date":1577783695,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/UniformSplitTermsWriter#writeFieldTerms(BlockWriter,DataOutput,TermsEnum,FieldInfo,NormsProducer).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/UniformSplitTermsWriter#writeFieldTerms(BlockWriter,DataOutput,TermsEnum,FieldInfo,NormsProducer).mjava","sourceNew":"  /**\n   * @return 1 if the field was written; 0 otherwise.\n   */\n  protected int writeFieldTerms(BlockWriter blockWriter, DataOutput fieldsOutput, TermsEnum termsEnum,\n                              FieldInfo fieldInfo, NormsProducer normsProducer) throws IOException {\n\n    FieldMetadata fieldMetadata = new FieldMetadata(fieldInfo, maxDoc);\n    fieldMetadata.setDictionaryStartFP(dictionaryOutput.getFilePointer());\n\n    postingsWriter.setField(fieldInfo);\n    blockWriter.setField(fieldMetadata);\n    IndexDictionary.Builder dictionaryBuilder = new FSTDictionary.Builder();\n    BytesRef lastTerm = null;\n    while (termsEnum.next() != null) {\n      BlockTermState blockTermState = writePostingLine(termsEnum, fieldMetadata, normsProducer);\n      if (blockTermState != null) {\n        lastTerm = BytesRef.deepCopyOf(termsEnum.term());\n        blockWriter.addLine(lastTerm, blockTermState, dictionaryBuilder);\n      }\n    }\n\n    // Flush remaining terms.\n    blockWriter.finishLastBlock(dictionaryBuilder);\n\n    if (fieldMetadata.getNumTerms() > 0) {\n      fieldMetadata.setLastTerm(lastTerm);\n      fieldMetadataWriter.write(fieldsOutput, fieldMetadata);\n      writeDictionary(dictionaryBuilder);\n      return 1;\n    }\n    return 0;\n  }\n\n","sourceOld":"  /**\n   * @return 1 if the field was written; 0 otherwise.\n   */\n  protected int writeFieldTerms(BlockWriter blockWriter, DataOutput fieldsOutput, TermsEnum termsEnum,\n                              FieldInfo fieldInfo, NormsProducer normsProducer) throws IOException {\n\n    FieldMetadata fieldMetadata = new FieldMetadata(fieldInfo, maxDoc);\n    fieldMetadata.setDictionaryStartFP(dictionaryOutput.getFilePointer());\n\n    postingsWriter.setField(fieldInfo);\n    blockWriter.setField(fieldMetadata);\n    IndexDictionary.Builder dictionaryBuilder = new FSTDictionary.Builder();\n    BytesRef lastTerm = null;\n    while (termsEnum.next() != null) {\n      BlockTermState blockTermState = writePostingLine(termsEnum, fieldMetadata, normsProducer);\n      if (blockTermState != null) {\n        lastTerm = BytesRef.deepCopyOf(termsEnum.term());\n        blockWriter.addLine(lastTerm, blockTermState, dictionaryBuilder);\n      }\n    }\n\n    // Flush remaining terms.\n    blockWriter.finishLastBlock(dictionaryBuilder);\n\n    if (fieldMetadata.getNumTerms() > 0) {\n      fieldMetadata.setLastTerm(lastTerm);\n      fieldMetadata.write(fieldsOutput);\n      writeDictionary(dictionaryBuilder);\n      return 1;\n    }\n    return 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c606b777c4250f3f3f6f66d659c7c4c403679b71","date":1577958559,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/UniformSplitTermsWriter#writeFieldTerms(BlockWriter,DataOutput,TermsEnum,FieldInfo,NormsProducer).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/UniformSplitTermsWriter#writeFieldTerms(BlockWriter,DataOutput,TermsEnum,FieldInfo,NormsProducer).mjava","sourceNew":"  /**\n   * @return 1 if the field was written; 0 otherwise.\n   */\n  protected int writeFieldTerms(BlockWriter blockWriter, DataOutput fieldsOutput, TermsEnum termsEnum,\n                              FieldInfo fieldInfo, NormsProducer normsProducer) throws IOException {\n\n    FieldMetadata fieldMetadata = new FieldMetadata(fieldInfo, maxDoc);\n    fieldMetadata.setDictionaryStartFP(dictionaryOutput.getFilePointer());\n\n    postingsWriter.setField(fieldInfo);\n    blockWriter.setField(fieldMetadata);\n    IndexDictionary.Builder dictionaryBuilder = new FSTDictionary.Builder();\n    BytesRef lastTerm = null;\n    while (termsEnum.next() != null) {\n      BlockTermState blockTermState = writePostingLine(termsEnum, fieldMetadata, normsProducer);\n      if (blockTermState != null) {\n        lastTerm = BytesRef.deepCopyOf(termsEnum.term());\n        blockWriter.addLine(lastTerm, blockTermState, dictionaryBuilder);\n      }\n    }\n\n    // Flush remaining terms.\n    blockWriter.finishLastBlock(dictionaryBuilder);\n\n    if (fieldMetadata.getNumTerms() > 0) {\n      fieldMetadata.setLastTerm(lastTerm);\n      fieldMetadataWriter.write(fieldsOutput, fieldMetadata);\n      writeDictionary(dictionaryBuilder);\n      return 1;\n    }\n    return 0;\n  }\n\n","sourceOld":"  /**\n   * @return 1 if the field was written; 0 otherwise.\n   */\n  protected int writeFieldTerms(BlockWriter blockWriter, DataOutput fieldsOutput, TermsEnum termsEnum,\n                              FieldInfo fieldInfo, NormsProducer normsProducer) throws IOException {\n\n    FieldMetadata fieldMetadata = new FieldMetadata(fieldInfo, maxDoc);\n    fieldMetadata.setDictionaryStartFP(dictionaryOutput.getFilePointer());\n\n    postingsWriter.setField(fieldInfo);\n    blockWriter.setField(fieldMetadata);\n    IndexDictionary.Builder dictionaryBuilder = new FSTDictionary.Builder();\n    BytesRef lastTerm = null;\n    while (termsEnum.next() != null) {\n      BlockTermState blockTermState = writePostingLine(termsEnum, fieldMetadata, normsProducer);\n      if (blockTermState != null) {\n        lastTerm = BytesRef.deepCopyOf(termsEnum.term());\n        blockWriter.addLine(lastTerm, blockTermState, dictionaryBuilder);\n      }\n    }\n\n    // Flush remaining terms.\n    blockWriter.finishLastBlock(dictionaryBuilder);\n\n    if (fieldMetadata.getNumTerms() > 0) {\n      fieldMetadata.setLastTerm(lastTerm);\n      fieldMetadata.write(fieldsOutput);\n      writeDictionary(dictionaryBuilder);\n      return 1;\n    }\n    return 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c606b777c4250f3f3f6f66d659c7c4c403679b71":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89","d28da8a459f5f0c930da7185c56d0c25edd3fbd1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d28da8a459f5f0c930da7185c56d0c25edd3fbd1":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d28da8a459f5f0c930da7185c56d0c25edd3fbd1"]},"commit2Childs":{"c606b777c4250f3f3f6f66d659c7c4c403679b71":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89"],"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89":["c606b777c4250f3f3f6f66d659c7c4c403679b71","d28da8a459f5f0c930da7185c56d0c25edd3fbd1"],"d28da8a459f5f0c930da7185c56d0c25edd3fbd1":["c606b777c4250f3f3f6f66d659c7c4c403679b71","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c606b777c4250f3f3f6f66d659c7c4c403679b71","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}