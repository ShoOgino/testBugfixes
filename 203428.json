{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/ConditionalTokenFilter.OneTimeWrapper#incrementToken().mjava","commits":[{"id":"25d4b0425e7ddf8fb0d7b4e24c06ecd9f071e5bd","date":1526034899,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/ConditionalTokenFilter.OneTimeWrapper#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (state == TokenState.PREBUFFERING) {\n        state = TokenState.BUFFERING;\n        return true;\n      }\n      if (state == TokenState.DELEGATING) {\n        return false;\n      }\n      return ConditionalTokenFilter.this.incrementToken();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57e34488c685935a055be1bc57b850be1e8c850d","date":1526645499,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/ConditionalTokenFilter.OneTimeWrapper#incrementToken().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/ConditionalTokenFilter.OneTimeWrapper#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (state == TokenState.PREBUFFERING) {\n        state = TokenState.DELEGATING;\n        return true;\n      }\n      assert state == TokenState.DELEGATING;\n      boolean more = input.incrementToken();\n      if (more && shouldFilter()) {\n        return true;\n      }\n      if (more) {\n        endOffset = offsetAtt.endOffset();\n        bufferedState = captureState();\n      }\n      else {\n        exhausted = true;\n      }\n      return false;\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (state == TokenState.PREBUFFERING) {\n        state = TokenState.BUFFERING;\n        return true;\n      }\n      if (state == TokenState.DELEGATING) {\n        return false;\n      }\n      return ConditionalTokenFilter.this.incrementToken();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8c072c5e1c6ed1643a8c71758930b6b13ccbd43","date":1529312258,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/ConditionalTokenFilter.OneTimeWrapper#incrementToken().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/ConditionalTokenFilter.OneTimeWrapper#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (state == TokenState.PREBUFFERING) {\n        if (posIncAtt.getPositionIncrement() == 0) {\n          adjustPosition = true;\n          posIncAtt.setPositionIncrement(1);\n        }\n        state = TokenState.DELEGATING;\n        return true;\n      }\n      assert state == TokenState.DELEGATING;\n      if (input.incrementToken()) {\n        if (shouldFilter()) {\n          return true;\n        }\n        endOffset = offsetAtt.endOffset();\n        bufferedState = captureState();\n      }\n      else {\n        exhausted = true;\n      }\n      return false;\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (state == TokenState.PREBUFFERING) {\n        state = TokenState.DELEGATING;\n        return true;\n      }\n      assert state == TokenState.DELEGATING;\n      boolean more = input.incrementToken();\n      if (more && shouldFilter()) {\n        return true;\n      }\n      if (more) {\n        endOffset = offsetAtt.endOffset();\n        bufferedState = captureState();\n      }\n      else {\n        exhausted = true;\n      }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/ConditionalTokenFilter.OneTimeWrapper#incrementToken().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/ConditionalTokenFilter.OneTimeWrapper#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (state == TokenState.PREBUFFERING) {\n        if (posIncAtt.getPositionIncrement() == 0) {\n          adjustPosition = true;\n          posIncAtt.setPositionIncrement(1);\n        }\n        state = TokenState.DELEGATING;\n        return true;\n      }\n      assert state == TokenState.DELEGATING;\n      if (input.incrementToken()) {\n        if (shouldFilter()) {\n          return true;\n        }\n        endOffset = offsetAtt.endOffset();\n        bufferedState = captureState();\n      }\n      else {\n        exhausted = true;\n      }\n      return false;\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (state == TokenState.PREBUFFERING) {\n        state = TokenState.DELEGATING;\n        return true;\n      }\n      assert state == TokenState.DELEGATING;\n      boolean more = input.incrementToken();\n      if (more && shouldFilter()) {\n        return true;\n      }\n      if (more) {\n        endOffset = offsetAtt.endOffset();\n        bufferedState = captureState();\n      }\n      else {\n        exhausted = true;\n      }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/ConditionalTokenFilter.OneTimeWrapper#incrementToken().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/ConditionalTokenFilter.OneTimeWrapper#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (state == TokenState.PREBUFFERING) {\n        if (posIncAtt.getPositionIncrement() == 0) {\n          adjustPosition = true;\n          posIncAtt.setPositionIncrement(1);\n        }\n        state = TokenState.DELEGATING;\n        return true;\n      }\n      assert state == TokenState.DELEGATING;\n      if (input.incrementToken()) {\n        if (shouldFilter()) {\n          return true;\n        }\n        endOffset = offsetAtt.endOffset();\n        bufferedState = captureState();\n      }\n      else {\n        exhausted = true;\n      }\n      return false;\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (state == TokenState.PREBUFFERING) {\n        state = TokenState.DELEGATING;\n        return true;\n      }\n      assert state == TokenState.DELEGATING;\n      boolean more = input.incrementToken();\n      if (more && shouldFilter()) {\n        return true;\n      }\n      if (more) {\n        endOffset = offsetAtt.endOffset();\n        bufferedState = captureState();\n      }\n      else {\n        exhausted = true;\n      }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["57e34488c685935a055be1bc57b850be1e8c850d","b8c072c5e1c6ed1643a8c71758930b6b13ccbd43"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b8c072c5e1c6ed1643a8c71758930b6b13ccbd43":["57e34488c685935a055be1bc57b850be1e8c850d"],"57e34488c685935a055be1bc57b850be1e8c850d":["25d4b0425e7ddf8fb0d7b4e24c06ecd9f071e5bd"],"25d4b0425e7ddf8fb0d7b4e24c06ecd9f071e5bd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b8c072c5e1c6ed1643a8c71758930b6b13ccbd43"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["57e34488c685935a055be1bc57b850be1e8c850d","b8c072c5e1c6ed1643a8c71758930b6b13ccbd43"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["25d4b0425e7ddf8fb0d7b4e24c06ecd9f071e5bd"],"b8c072c5e1c6ed1643a8c71758930b6b13ccbd43":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"57e34488c685935a055be1bc57b850be1e8c850d":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","b8c072c5e1c6ed1643a8c71758930b6b13ccbd43","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"25d4b0425e7ddf8fb0d7b4e24c06ecd9f071e5bd":["57e34488c685935a055be1bc57b850be1e8c850d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}