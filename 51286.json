{"path":"src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest).mjava","commits":[{"id":"4f483a44e10befaaa6da11d433e2eb0f52829eec","date":1175273998,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  CSVLoader(SolrQueryRequest req) {\n    this.params = req.getParams();\n    handler = req.getCore().getUpdateHandler();\n    schema = req.getSchema();\n\n    templateAdd = new AddUpdateCommand();\n    templateAdd.allowDups=false;\n    templateAdd.overwriteCommitted=true;\n    templateAdd.overwritePending=true;\n\n    if (params.getBool(OVERWRITE,true)) {\n      templateAdd.allowDups=false;\n      templateAdd.overwriteCommitted=true;\n      templateAdd.overwritePending=true;\n    } else {\n      templateAdd.allowDups=true;\n      templateAdd.overwriteCommitted=false;\n      templateAdd.overwritePending=false;\n    }\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, true,  false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException(400,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException(400,\"Invalid encapsulator:'\"+sep+\"'\");\n      strategy.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (hasHeader) {\n        throw new SolrException(400,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines=1;\n\n      prepareFields();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["908c8e2c79736122e37d47d73a053999c24bac65","908c8e2c79736122e37d47d73a053999c24bac65","908c8e2c79736122e37d47d73a053999c24bac65"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"81ff0927a55317ddd087294760c76c18b82ac36c","date":1175293817,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest).mjava","sourceNew":"  CSVLoader(SolrQueryRequest req) {\n    this.params = req.getParams();\n    handler = req.getCore().getUpdateHandler();\n    schema = req.getSchema();\n\n    templateAdd = new AddUpdateCommand();\n    templateAdd.allowDups=false;\n    templateAdd.overwriteCommitted=true;\n    templateAdd.overwritePending=true;\n\n    if (params.getBool(OVERWRITE,true)) {\n      templateAdd.allowDups=false;\n      templateAdd.overwriteCommitted=true;\n      templateAdd.overwritePending=true;\n    } else {\n      templateAdd.allowDups=true;\n      templateAdd.overwriteCommitted=false;\n      templateAdd.overwritePending=false;\n    }\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, true,  false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException(400,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException(400,\"Invalid encapsulator:'\"+sep+\"'\");\n      strategy.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIP,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (hasHeader) {\n        throw new SolrException(400,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","sourceOld":"  CSVLoader(SolrQueryRequest req) {\n    this.params = req.getParams();\n    handler = req.getCore().getUpdateHandler();\n    schema = req.getSchema();\n\n    templateAdd = new AddUpdateCommand();\n    templateAdd.allowDups=false;\n    templateAdd.overwriteCommitted=true;\n    templateAdd.overwritePending=true;\n\n    if (params.getBool(OVERWRITE,true)) {\n      templateAdd.allowDups=false;\n      templateAdd.overwriteCommitted=true;\n      templateAdd.overwritePending=true;\n    } else {\n      templateAdd.allowDups=true;\n      templateAdd.overwriteCommitted=false;\n      templateAdd.overwritePending=false;\n    }\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, true,  false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException(400,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException(400,\"Invalid encapsulator:'\"+sep+\"'\");\n      strategy.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (hasHeader) {\n        throw new SolrException(400,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines=1;\n\n      prepareFields();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"39fe916f708b7a41a8b8f6572f135e2cb4d66aed","date":1175360846,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest).mjava","sourceNew":"  CSVLoader(SolrQueryRequest req) {\n    this.params = req.getParams();\n    handler = req.getCore().getUpdateHandler();\n    schema = req.getSchema();\n\n    templateAdd = new AddUpdateCommand();\n    templateAdd.allowDups=false;\n    templateAdd.overwriteCommitted=true;\n    templateAdd.overwritePending=true;\n\n    if (params.getBool(OVERWRITE,true)) {\n      templateAdd.allowDups=false;\n      templateAdd.overwriteCommitted=true;\n      templateAdd.overwritePending=true;\n    } else {\n      templateAdd.allowDups=true;\n      templateAdd.overwriteCommitted=false;\n      templateAdd.overwritePending=false;\n    }\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, true,  false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException(400,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException(400,\"Invalid encapsulator:'\"+sep+\"'\");\n      strategy.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (hasHeader) {\n        throw new SolrException(400,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","sourceOld":"  CSVLoader(SolrQueryRequest req) {\n    this.params = req.getParams();\n    handler = req.getCore().getUpdateHandler();\n    schema = req.getSchema();\n\n    templateAdd = new AddUpdateCommand();\n    templateAdd.allowDups=false;\n    templateAdd.overwriteCommitted=true;\n    templateAdd.overwritePending=true;\n\n    if (params.getBool(OVERWRITE,true)) {\n      templateAdd.allowDups=false;\n      templateAdd.overwriteCommitted=true;\n      templateAdd.overwritePending=true;\n    } else {\n      templateAdd.allowDups=true;\n      templateAdd.overwriteCommitted=false;\n      templateAdd.overwritePending=false;\n    }\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, true,  false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException(400,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException(400,\"Invalid encapsulator:'\"+sep+\"'\");\n      strategy.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIP,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (hasHeader) {\n        throw new SolrException(400,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996","date":1180477701,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest).mjava","sourceNew":"  CSVLoader(SolrQueryRequest req) {\n    this.params = req.getParams();\n    handler = req.getCore().getUpdateHandler();\n    schema = req.getSchema();\n\n    templateAdd = new AddUpdateCommand();\n    templateAdd.allowDups=false;\n    templateAdd.overwriteCommitted=true;\n    templateAdd.overwritePending=true;\n\n    if (params.getBool(OVERWRITE,true)) {\n      templateAdd.allowDups=false;\n      templateAdd.overwriteCommitted=true;\n      templateAdd.overwritePending=true;\n    } else {\n      templateAdd.allowDups=true;\n      templateAdd.overwriteCommitted=false;\n      templateAdd.overwritePending=false;\n    }\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, true,  false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+sep+\"'\");\n      strategy.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","sourceOld":"  CSVLoader(SolrQueryRequest req) {\n    this.params = req.getParams();\n    handler = req.getCore().getUpdateHandler();\n    schema = req.getSchema();\n\n    templateAdd = new AddUpdateCommand();\n    templateAdd.allowDups=false;\n    templateAdd.overwriteCommitted=true;\n    templateAdd.overwritePending=true;\n\n    if (params.getBool(OVERWRITE,true)) {\n      templateAdd.allowDups=false;\n      templateAdd.overwriteCommitted=true;\n      templateAdd.overwritePending=true;\n    } else {\n      templateAdd.allowDups=true;\n      templateAdd.overwriteCommitted=false;\n      templateAdd.overwritePending=false;\n    }\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, true,  false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException(400,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException(400,\"Invalid encapsulator:'\"+sep+\"'\");\n      strategy.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (hasHeader) {\n        throw new SolrException(400,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b0ffb19816b9fdb274ff9ba1773474003ae2ebd8","date":1196647530,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest).mjava","sourceNew":"  CSVLoader(SolrQueryRequest req) {\n    this.params = req.getParams();\n    handler = req.getCore().getUpdateHandler();\n    schema = req.getSchema();\n\n    templateAdd = new AddUpdateCommand();\n    templateAdd.allowDups=false;\n    templateAdd.overwriteCommitted=true;\n    templateAdd.overwritePending=true;\n\n    if (params.getBool(OVERWRITE,true)) {\n      templateAdd.allowDups=false;\n      templateAdd.overwriteCommitted=true;\n      templateAdd.overwritePending=true;\n    } else {\n      templateAdd.allowDups=true;\n      templateAdd.overwriteCommitted=false;\n      templateAdd.overwritePending=false;\n    }\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, true,  false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+sep+\"'\");\n      strategy.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","sourceOld":"  CSVLoader(SolrQueryRequest req) {\n    this.params = req.getParams();\n    handler = req.getCore().getUpdateHandler();\n    schema = req.getSchema();\n\n    templateAdd = new AddUpdateCommand();\n    templateAdd.allowDups=false;\n    templateAdd.overwriteCommitted=true;\n    templateAdd.overwritePending=true;\n\n    if (params.getBool(OVERWRITE,true)) {\n      templateAdd.allowDups=false;\n      templateAdd.overwriteCommitted=true;\n      templateAdd.overwritePending=true;\n    } else {\n      templateAdd.allowDups=true;\n      templateAdd.overwriteCommitted=false;\n      templateAdd.overwritePending=false;\n    }\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, true,  false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+sep+\"'\");\n      strategy.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bddf871b13db29360a473667cf42e0b0e2572572","date":1199634230,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest).mjava","sourceNew":"  CSVLoader(SolrQueryRequest req) {\n    this.params = req.getParams();\n    handler = req.getCore().getUpdateHandler();\n    schema = req.getSchema();\n\n    templateAdd = new AddUpdateCommand();\n    templateAdd.allowDups=false;\n    templateAdd.overwriteCommitted=true;\n    templateAdd.overwritePending=true;\n\n    if (params.getBool(OVERWRITE,true)) {\n      templateAdd.allowDups=false;\n      templateAdd.overwriteCommitted=true;\n      templateAdd.overwritePending=true;\n    } else {\n      templateAdd.allowDups=true;\n      templateAdd.overwriteCommitted=false;\n      templateAdd.overwritePending=false;\n    }\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator((char)-2);  // TODO: add CSVStrategy.ENCAPSULATOR_DISABLED      \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.\n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","sourceOld":"  CSVLoader(SolrQueryRequest req) {\n    this.params = req.getParams();\n    handler = req.getCore().getUpdateHandler();\n    schema = req.getSchema();\n\n    templateAdd = new AddUpdateCommand();\n    templateAdd.allowDups=false;\n    templateAdd.overwriteCommitted=true;\n    templateAdd.overwritePending=true;\n\n    if (params.getBool(OVERWRITE,true)) {\n      templateAdd.allowDups=false;\n      templateAdd.overwriteCommitted=true;\n      templateAdd.overwritePending=true;\n    } else {\n      templateAdd.allowDups=true;\n      templateAdd.overwriteCommitted=false;\n      templateAdd.overwritePending=false;\n    }\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, true,  false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+sep+\"'\");\n      strategy.setEncapsulator(encapsulator.charAt(0));\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","bugFix":null,"bugIntro":["df476dd588f9e2c99c43fd9d3d896fd30221938f","df476dd588f9e2c99c43fd9d3d896fd30221938f","df476dd588f9e2c99c43fd9d3d896fd30221938f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab0f969a7a1933d9fe89a74336793987da8cce14","date":1199804280,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest).mjava","pathOld":"src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest).mjava","sourceNew":"  CSVLoader(SolrQueryRequest req) {\n    this.params = req.getParams();\n    handler = req.getCore().getUpdateHandler();\n    schema = req.getSchema();\n\n    templateAdd = new AddUpdateCommand();\n    templateAdd.allowDups=false;\n    templateAdd.overwriteCommitted=true;\n    templateAdd.overwritePending=true;\n\n    if (params.getBool(OVERWRITE,true)) {\n      templateAdd.allowDups=false;\n      templateAdd.overwriteCommitted=true;\n      templateAdd.overwritePending=true;\n    } else {\n      templateAdd.allowDups=true;\n      templateAdd.overwriteCommitted=false;\n      templateAdd.overwritePending=false;\n    }\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator((char)-2);  // TODO: add CSVStrategy.ENCAPSULATOR_DISABLED      \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","sourceOld":"  CSVLoader(SolrQueryRequest req) {\n    this.params = req.getParams();\n    handler = req.getCore().getUpdateHandler();\n    schema = req.getSchema();\n\n    templateAdd = new AddUpdateCommand();\n    templateAdd.allowDups=false;\n    templateAdd.overwriteCommitted=true;\n    templateAdd.overwritePending=true;\n\n    if (params.getBool(OVERWRITE,true)) {\n      templateAdd.allowDups=false;\n      templateAdd.overwriteCommitted=true;\n      templateAdd.overwritePending=true;\n    } else {\n      templateAdd.allowDups=true;\n      templateAdd.overwriteCommitted=false;\n      templateAdd.overwritePending=false;\n    }\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator((char)-2);  // TODO: add CSVStrategy.ENCAPSULATOR_DISABLED      \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.\n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"abf644a9bed9c9f68be70fcfbe59137ec716f54a","date":1206114973,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest,UpdateRequestProcessor).mjava","pathOld":"src/java/org/apache/solr/handler/CSVLoader[CSVRequestHandler]#CSVLoader(SolrQueryRequest).mjava","sourceNew":"  CSVLoader(SolrQueryRequest req, UpdateRequestProcessor processor) {\n    this.processor = processor;\n    this.params = req.getParams();\n    schema = req.getSchema();\n\n    templateAdd = new AddUpdateCommand();\n    templateAdd.allowDups=false;\n    templateAdd.overwriteCommitted=true;\n    templateAdd.overwritePending=true;\n\n    if (params.getBool(OVERWRITE,true)) {\n      templateAdd.allowDups=false;\n      templateAdd.overwriteCommitted=true;\n      templateAdd.overwritePending=true;\n    } else {\n      templateAdd.allowDups=true;\n      templateAdd.overwriteCommitted=false;\n      templateAdd.overwritePending=false;\n    }\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator((char)-2);  // TODO: add CSVStrategy.ENCAPSULATOR_DISABLED      \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","sourceOld":"  CSVLoader(SolrQueryRequest req) {\n    this.params = req.getParams();\n    handler = req.getCore().getUpdateHandler();\n    schema = req.getSchema();\n\n    templateAdd = new AddUpdateCommand();\n    templateAdd.allowDups=false;\n    templateAdd.overwriteCommitted=true;\n    templateAdd.overwritePending=true;\n\n    if (params.getBool(OVERWRITE,true)) {\n      templateAdd.allowDups=false;\n      templateAdd.overwriteCommitted=true;\n      templateAdd.overwritePending=true;\n    } else {\n      templateAdd.allowDups=true;\n      templateAdd.overwriteCommitted=false;\n      templateAdd.overwritePending=false;\n    }\n\n    strategy = new CSVStrategy(',', '\"', CSVStrategy.COMMENTS_DISABLED, CSVStrategy.ESCAPE_DISABLED, false, false, false, true);\n    String sep = params.get(SEPARATOR);\n    if (sep!=null) {\n      if (sep.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid separator:'\"+sep+\"'\");\n      strategy.setDelimiter(sep.charAt(0));\n    }\n\n    String encapsulator = params.get(ENCAPSULATOR);\n    if (encapsulator!=null) {\n      if (encapsulator.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid encapsulator:'\"+encapsulator+\"'\");\n    }\n\n    String escape = params.get(ESCAPE);\n    if (escape!=null) {\n      if (escape.length()!=1) throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid escape:'\"+escape+\"'\");\n    }\n\n    // if only encapsulator or escape is set, disable the other escaping mechanism\n    if (encapsulator == null && escape != null) {\n      strategy.setEncapsulator((char)-2);  // TODO: add CSVStrategy.ENCAPSULATOR_DISABLED      \n      strategy.setEscape(escape.charAt(0));\n    } else {\n      if (encapsulator != null) {\n        strategy.setEncapsulator(encapsulator.charAt(0));\n      }\n      if (escape != null) {\n        char ch = escape.charAt(0);\n        strategy.setEscape(ch);\n        if (ch == '\\\\') {\n          // If the escape is the standard backslash, then also enable\n          // unicode escapes (it's harmless since 'u' would not otherwise\n          // be escaped.                    \n          strategy.setUnicodeEscapeInterpretation(true);\n        }\n      }\n    }\n\n    String fn = params.get(FIELDNAMES);\n    fieldnames = fn != null ? commaSplit.split(fn,-1) : null;\n\n    Boolean hasHeader = params.getBool(HEADER);\n\n    skipLines = params.getInt(SKIPLINES,0);\n\n    if (fieldnames==null) {\n      if (null == hasHeader) {\n        // assume the file has the headers if they aren't supplied in the args\n        hasHeader=true;\n      } else if (!hasHeader) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"CSVLoader: must specify fieldnames=<fields>* or header=true\");\n      }\n    } else {\n      // if the fieldnames were supplied and the file has a header, we need to\n      // skip over that header.\n      if (hasHeader!=null && hasHeader) skipLines++;\n\n      prepareFields();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"abf644a9bed9c9f68be70fcfbe59137ec716f54a":["ab0f969a7a1933d9fe89a74336793987da8cce14"],"bddf871b13db29360a473667cf42e0b0e2572572":["b0ffb19816b9fdb274ff9ba1773474003ae2ebd8"],"b0ffb19816b9fdb274ff9ba1773474003ae2ebd8":["c4abe53aaee39b5f2f41dd9a0b905c1ddf880996"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"81ff0927a55317ddd087294760c76c18b82ac36c":["4f483a44e10befaaa6da11d433e2eb0f52829eec"],"39fe916f708b7a41a8b8f6572f135e2cb4d66aed":["81ff0927a55317ddd087294760c76c18b82ac36c"],"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996":["39fe916f708b7a41a8b8f6572f135e2cb4d66aed"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ab0f969a7a1933d9fe89a74336793987da8cce14":["bddf871b13db29360a473667cf42e0b0e2572572"],"4f483a44e10befaaa6da11d433e2eb0f52829eec":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"]},"commit2Childs":{"abf644a9bed9c9f68be70fcfbe59137ec716f54a":[],"bddf871b13db29360a473667cf42e0b0e2572572":["ab0f969a7a1933d9fe89a74336793987da8cce14"],"b0ffb19816b9fdb274ff9ba1773474003ae2ebd8":["bddf871b13db29360a473667cf42e0b0e2572572"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4f483a44e10befaaa6da11d433e2eb0f52829eec"],"81ff0927a55317ddd087294760c76c18b82ac36c":["39fe916f708b7a41a8b8f6572f135e2cb4d66aed"],"39fe916f708b7a41a8b8f6572f135e2cb4d66aed":["c4abe53aaee39b5f2f41dd9a0b905c1ddf880996"],"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996":["b0ffb19816b9fdb274ff9ba1773474003ae2ebd8"],"ab0f969a7a1933d9fe89a74336793987da8cce14":["abf644a9bed9c9f68be70fcfbe59137ec716f54a"],"4f483a44e10befaaa6da11d433e2eb0f52829eec":["81ff0927a55317ddd087294760c76c18b82ac36c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["abf644a9bed9c9f68be70fcfbe59137ec716f54a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}