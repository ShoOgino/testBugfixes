{"path":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#initializeMetrics(SolrMetricManager,String,String).mjava","commits":[{"id":"e52c21eddb989aed5815d30ea4c8abf481ace8ad","date":1488795043,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    commitCommands = manager.meter(registry, \"commits\", getCategory().toString(), scope);\n    Gauge<Integer> autoCommits = () -> commitTracker.getCommitCount();\n    manager.register(registry, autoCommits, true, \"autoCommits\", getCategory().toString(), scope);\n    Gauge<Integer> softAutoCommits = () -> softCommitTracker.getCommitCount();\n    manager.register(registry, softAutoCommits, true, \"softAutoCommits\", getCategory().toString(), scope);\n    optimizeCommands = manager.meter(registry, \"optimizes\", getCategory().toString(), scope);\n    rollbackCommands = manager.meter(registry, \"rollbacks\", getCategory().toString(), scope);\n    splitCommands = manager.meter(registry, \"splits\", getCategory().toString(), scope);\n    mergeIndexesCommands = manager.meter(registry, \"merges\", getCategory().toString(), scope);\n    expungeDeleteCommands = manager.meter(registry, \"expungeDeletes\", getCategory().toString(), scope);\n    Gauge<Long> docsPending = () -> numDocsPending.longValue();\n    manager.register(registry, docsPending, true, \"docsPending\", getCategory().toString(), scope);\n    Gauge<Long> adds = () -> addCommands.longValue();\n    manager.register(registry, adds, true, \"adds\", getCategory().toString(), scope);\n    Gauge<Long> deletesById = () -> deleteByIdCommands.longValue();\n    manager.register(registry, deletesById, true, \"deletesById\", getCategory().toString(), scope);\n    Gauge<Long> deletesByQuery = () -> deleteByQueryCommands.longValue();\n    manager.register(registry, deletesByQuery, true, \"deletesByQuery\", getCategory().toString(), scope);\n    Gauge<Long> errors = () -> numErrors.longValue();\n    manager.register(registry, errors, true, \"errors\", getCategory().toString(), scope);\n\n    addCommandsCumulative = manager.meter(registry, \"cumulativeAdds\", getCategory().toString(), scope);\n    deleteByIdCommandsCumulative = manager.meter(registry, \"cumulativeDeletesById\", getCategory().toString(), scope);\n    deleteByQueryCommandsCumulative = manager.meter(registry, \"cumulativeDeletesByQuery\", getCategory().toString(), scope);\n    numErrorsCumulative = manager.meter(registry, \"cumulativeErrors\", getCategory().toString(), scope);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f9c888ad333614d8139c568c1ca7d5ef42e9193c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f34d83c894e07c24f5f957820777b5da2cc29e5a","date":1489491395,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    commitCommands = manager.meter(registry, \"commits\", getCategory().toString(), scope);\n    manager.registerGauge(registry, () -> commitTracker.getCommitCount(), true, \"autoCommits\", getCategory().toString(), scope);\n    manager.registerGauge(registry, () -> softCommitTracker.getCommitCount(), true, \"softAutoCommits\", getCategory().toString(), scope);\n    optimizeCommands = manager.meter(registry, \"optimizes\", getCategory().toString(), scope);\n    rollbackCommands = manager.meter(registry, \"rollbacks\", getCategory().toString(), scope);\n    splitCommands = manager.meter(registry, \"splits\", getCategory().toString(), scope);\n    mergeIndexesCommands = manager.meter(registry, \"merges\", getCategory().toString(), scope);\n    expungeDeleteCommands = manager.meter(registry, \"expungeDeletes\", getCategory().toString(), scope);\n    manager.registerGauge(registry, () -> numDocsPending.longValue(), true, \"docsPending\", getCategory().toString(), scope);\n    manager.registerGauge(registry, () -> addCommands.longValue(), true, \"adds\", getCategory().toString(), scope);\n    manager.registerGauge(registry, () -> deleteByIdCommands.longValue(), true, \"deletesById\", getCategory().toString(), scope);\n    manager.registerGauge(registry, () -> deleteByQueryCommands.longValue(), true, \"deletesByQuery\", getCategory().toString(), scope);\n    manager.registerGauge(registry, () -> numErrors.longValue(), true, \"errors\", getCategory().toString(), scope);\n\n    addCommandsCumulative = manager.meter(registry, \"cumulativeAdds\", getCategory().toString(), scope);\n    deleteByIdCommandsCumulative = manager.meter(registry, \"cumulativeDeletesById\", getCategory().toString(), scope);\n    deleteByQueryCommandsCumulative = manager.meter(registry, \"cumulativeDeletesByQuery\", getCategory().toString(), scope);\n    numErrorsCumulative = manager.meter(registry, \"cumulativeErrors\", getCategory().toString(), scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    commitCommands = manager.meter(registry, \"commits\", getCategory().toString(), scope);\n    Gauge<Integer> autoCommits = () -> commitTracker.getCommitCount();\n    manager.register(registry, autoCommits, true, \"autoCommits\", getCategory().toString(), scope);\n    Gauge<Integer> softAutoCommits = () -> softCommitTracker.getCommitCount();\n    manager.register(registry, softAutoCommits, true, \"softAutoCommits\", getCategory().toString(), scope);\n    optimizeCommands = manager.meter(registry, \"optimizes\", getCategory().toString(), scope);\n    rollbackCommands = manager.meter(registry, \"rollbacks\", getCategory().toString(), scope);\n    splitCommands = manager.meter(registry, \"splits\", getCategory().toString(), scope);\n    mergeIndexesCommands = manager.meter(registry, \"merges\", getCategory().toString(), scope);\n    expungeDeleteCommands = manager.meter(registry, \"expungeDeletes\", getCategory().toString(), scope);\n    Gauge<Long> docsPending = () -> numDocsPending.longValue();\n    manager.register(registry, docsPending, true, \"docsPending\", getCategory().toString(), scope);\n    Gauge<Long> adds = () -> addCommands.longValue();\n    manager.register(registry, adds, true, \"adds\", getCategory().toString(), scope);\n    Gauge<Long> deletesById = () -> deleteByIdCommands.longValue();\n    manager.register(registry, deletesById, true, \"deletesById\", getCategory().toString(), scope);\n    Gauge<Long> deletesByQuery = () -> deleteByQueryCommands.longValue();\n    manager.register(registry, deletesByQuery, true, \"deletesByQuery\", getCategory().toString(), scope);\n    Gauge<Long> errors = () -> numErrors.longValue();\n    manager.register(registry, errors, true, \"errors\", getCategory().toString(), scope);\n\n    addCommandsCumulative = manager.meter(registry, \"cumulativeAdds\", getCategory().toString(), scope);\n    deleteByIdCommandsCumulative = manager.meter(registry, \"cumulativeDeletesById\", getCategory().toString(), scope);\n    deleteByQueryCommandsCumulative = manager.meter(registry, \"cumulativeDeletesByQuery\", getCategory().toString(), scope);\n    numErrorsCumulative = manager.meter(registry, \"cumulativeErrors\", getCategory().toString(), scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b","date":1489651910,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    commitCommands = manager.meter(registry, \"commits\", getCategory().toString(), scope);\n    manager.registerGauge(registry, () -> commitTracker.getCommitCount(), true, \"autoCommits\", getCategory().toString(), scope);\n    manager.registerGauge(registry, () -> softCommitTracker.getCommitCount(), true, \"softAutoCommits\", getCategory().toString(), scope);\n    optimizeCommands = manager.meter(registry, \"optimizes\", getCategory().toString(), scope);\n    rollbackCommands = manager.meter(registry, \"rollbacks\", getCategory().toString(), scope);\n    splitCommands = manager.meter(registry, \"splits\", getCategory().toString(), scope);\n    mergeIndexesCommands = manager.meter(registry, \"merges\", getCategory().toString(), scope);\n    expungeDeleteCommands = manager.meter(registry, \"expungeDeletes\", getCategory().toString(), scope);\n    manager.registerGauge(registry, () -> numDocsPending.longValue(), true, \"docsPending\", getCategory().toString(), scope);\n    manager.registerGauge(registry, () -> addCommands.longValue(), true, \"adds\", getCategory().toString(), scope);\n    manager.registerGauge(registry, () -> deleteByIdCommands.longValue(), true, \"deletesById\", getCategory().toString(), scope);\n    manager.registerGauge(registry, () -> deleteByQueryCommands.longValue(), true, \"deletesByQuery\", getCategory().toString(), scope);\n    manager.registerGauge(registry, () -> numErrors.longValue(), true, \"errors\", getCategory().toString(), scope);\n\n    addCommandsCumulative = manager.meter(registry, \"cumulativeAdds\", getCategory().toString(), scope);\n    deleteByIdCommandsCumulative = manager.meter(registry, \"cumulativeDeletesById\", getCategory().toString(), scope);\n    deleteByQueryCommandsCumulative = manager.meter(registry, \"cumulativeDeletesByQuery\", getCategory().toString(), scope);\n    numErrorsCumulative = manager.meter(registry, \"cumulativeErrors\", getCategory().toString(), scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    commitCommands = manager.meter(registry, \"commits\", getCategory().toString(), scope);\n    Gauge<Integer> autoCommits = () -> commitTracker.getCommitCount();\n    manager.register(registry, autoCommits, true, \"autoCommits\", getCategory().toString(), scope);\n    Gauge<Integer> softAutoCommits = () -> softCommitTracker.getCommitCount();\n    manager.register(registry, softAutoCommits, true, \"softAutoCommits\", getCategory().toString(), scope);\n    optimizeCommands = manager.meter(registry, \"optimizes\", getCategory().toString(), scope);\n    rollbackCommands = manager.meter(registry, \"rollbacks\", getCategory().toString(), scope);\n    splitCommands = manager.meter(registry, \"splits\", getCategory().toString(), scope);\n    mergeIndexesCommands = manager.meter(registry, \"merges\", getCategory().toString(), scope);\n    expungeDeleteCommands = manager.meter(registry, \"expungeDeletes\", getCategory().toString(), scope);\n    Gauge<Long> docsPending = () -> numDocsPending.longValue();\n    manager.register(registry, docsPending, true, \"docsPending\", getCategory().toString(), scope);\n    Gauge<Long> adds = () -> addCommands.longValue();\n    manager.register(registry, adds, true, \"adds\", getCategory().toString(), scope);\n    Gauge<Long> deletesById = () -> deleteByIdCommands.longValue();\n    manager.register(registry, deletesById, true, \"deletesById\", getCategory().toString(), scope);\n    Gauge<Long> deletesByQuery = () -> deleteByQueryCommands.longValue();\n    manager.register(registry, deletesByQuery, true, \"deletesByQuery\", getCategory().toString(), scope);\n    Gauge<Long> errors = () -> numErrors.longValue();\n    manager.register(registry, errors, true, \"errors\", getCategory().toString(), scope);\n\n    addCommandsCumulative = manager.meter(registry, \"cumulativeAdds\", getCategory().toString(), scope);\n    deleteByIdCommandsCumulative = manager.meter(registry, \"cumulativeDeletesById\", getCategory().toString(), scope);\n    deleteByQueryCommandsCumulative = manager.meter(registry, \"cumulativeDeletesByQuery\", getCategory().toString(), scope);\n    numErrorsCumulative = manager.meter(registry, \"cumulativeErrors\", getCategory().toString(), scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    commitCommands = manager.meter(registry, \"commits\", getCategory().toString(), scope);\n    manager.registerGauge(registry, () -> commitTracker.getCommitCount(), true, \"autoCommits\", getCategory().toString(), scope);\n    manager.registerGauge(registry, () -> softCommitTracker.getCommitCount(), true, \"softAutoCommits\", getCategory().toString(), scope);\n    optimizeCommands = manager.meter(registry, \"optimizes\", getCategory().toString(), scope);\n    rollbackCommands = manager.meter(registry, \"rollbacks\", getCategory().toString(), scope);\n    splitCommands = manager.meter(registry, \"splits\", getCategory().toString(), scope);\n    mergeIndexesCommands = manager.meter(registry, \"merges\", getCategory().toString(), scope);\n    expungeDeleteCommands = manager.meter(registry, \"expungeDeletes\", getCategory().toString(), scope);\n    manager.registerGauge(registry, () -> numDocsPending.longValue(), true, \"docsPending\", getCategory().toString(), scope);\n    manager.registerGauge(registry, () -> addCommands.longValue(), true, \"adds\", getCategory().toString(), scope);\n    manager.registerGauge(registry, () -> deleteByIdCommands.longValue(), true, \"deletesById\", getCategory().toString(), scope);\n    manager.registerGauge(registry, () -> deleteByQueryCommands.longValue(), true, \"deletesByQuery\", getCategory().toString(), scope);\n    manager.registerGauge(registry, () -> numErrors.longValue(), true, \"errors\", getCategory().toString(), scope);\n\n    addCommandsCumulative = manager.meter(registry, \"cumulativeAdds\", getCategory().toString(), scope);\n    deleteByIdCommandsCumulative = manager.meter(registry, \"cumulativeDeletesById\", getCategory().toString(), scope);\n    deleteByQueryCommandsCumulative = manager.meter(registry, \"cumulativeDeletesByQuery\", getCategory().toString(), scope);\n    numErrorsCumulative = manager.meter(registry, \"cumulativeErrors\", getCategory().toString(), scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    commitCommands = manager.meter(registry, \"commits\", getCategory().toString(), scope);\n    Gauge<Integer> autoCommits = () -> commitTracker.getCommitCount();\n    manager.register(registry, autoCommits, true, \"autoCommits\", getCategory().toString(), scope);\n    Gauge<Integer> softAutoCommits = () -> softCommitTracker.getCommitCount();\n    manager.register(registry, softAutoCommits, true, \"softAutoCommits\", getCategory().toString(), scope);\n    optimizeCommands = manager.meter(registry, \"optimizes\", getCategory().toString(), scope);\n    rollbackCommands = manager.meter(registry, \"rollbacks\", getCategory().toString(), scope);\n    splitCommands = manager.meter(registry, \"splits\", getCategory().toString(), scope);\n    mergeIndexesCommands = manager.meter(registry, \"merges\", getCategory().toString(), scope);\n    expungeDeleteCommands = manager.meter(registry, \"expungeDeletes\", getCategory().toString(), scope);\n    Gauge<Long> docsPending = () -> numDocsPending.longValue();\n    manager.register(registry, docsPending, true, \"docsPending\", getCategory().toString(), scope);\n    Gauge<Long> adds = () -> addCommands.longValue();\n    manager.register(registry, adds, true, \"adds\", getCategory().toString(), scope);\n    Gauge<Long> deletesById = () -> deleteByIdCommands.longValue();\n    manager.register(registry, deletesById, true, \"deletesById\", getCategory().toString(), scope);\n    Gauge<Long> deletesByQuery = () -> deleteByQueryCommands.longValue();\n    manager.register(registry, deletesByQuery, true, \"deletesByQuery\", getCategory().toString(), scope);\n    Gauge<Long> errors = () -> numErrors.longValue();\n    manager.register(registry, errors, true, \"errors\", getCategory().toString(), scope);\n\n    addCommandsCumulative = manager.meter(registry, \"cumulativeAdds\", getCategory().toString(), scope);\n    deleteByIdCommandsCumulative = manager.meter(registry, \"cumulativeDeletesById\", getCategory().toString(), scope);\n    deleteByQueryCommandsCumulative = manager.meter(registry, \"cumulativeDeletesByQuery\", getCategory().toString(), scope);\n    numErrorsCumulative = manager.meter(registry, \"cumulativeErrors\", getCategory().toString(), scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    commitCommands = manager.meter(this, registry, \"commits\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> commitTracker.getCommitCount(), true, \"autoCommits\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> softCommitTracker.getCommitCount(), true, \"softAutoCommits\", getCategory().toString(), scope);\n    if (commitTracker.getDocsUpperBound() > 0) {\n      manager.registerGauge(this, registry, () -> commitTracker.getDocsUpperBound(), true, \"autoCommitMaxDocs\",\n          getCategory().toString(), scope);\n    }\n    if (commitTracker.getTimeUpperBound() > 0) {\n      manager.registerGauge(this, registry, () -> \"\" + commitTracker.getTimeUpperBound() + \"ms\", true, \"autoCommitMaxTime\",\n          getCategory().toString(), scope);\n    }\n    if (softCommitTracker.getDocsUpperBound() > 0) {\n      manager.registerGauge(this, registry, () -> softCommitTracker.getDocsUpperBound(), true, \"softAutoCommitMaxDocs\",\n          getCategory().toString(), scope);\n    }\n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      manager.registerGauge(this, registry, () -> \"\" + softCommitTracker.getTimeUpperBound() + \"ms\", true, \"softAutoCommitMaxTime\",\n          getCategory().toString(), scope);\n    }\n    optimizeCommands = manager.meter(this, registry, \"optimizes\", getCategory().toString(), scope);\n    rollbackCommands = manager.meter(this, registry, \"rollbacks\", getCategory().toString(), scope);\n    splitCommands = manager.meter(this, registry, \"splits\", getCategory().toString(), scope);\n    mergeIndexesCommands = manager.meter(this, registry, \"merges\", getCategory().toString(), scope);\n    expungeDeleteCommands = manager.meter(this, registry, \"expungeDeletes\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> numDocsPending.longValue(), true, \"docsPending\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> addCommands.longValue(), true, \"adds\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> deleteByIdCommands.longValue(), true, \"deletesById\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> deleteByQueryCommands.longValue(), true, \"deletesByQuery\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> numErrors.longValue(), true, \"errors\", getCategory().toString(), scope);\n\n    addCommandsCumulative = manager.meter(this, registry, \"cumulativeAdds\", getCategory().toString(), scope);\n    deleteByIdCommandsCumulative = manager.meter(this, registry, \"cumulativeDeletesById\", getCategory().toString(), scope);\n    deleteByQueryCommandsCumulative = manager.meter(this, registry, \"cumulativeDeletesByQuery\", getCategory().toString(), scope);\n    numErrorsCumulative = manager.meter(this, registry, \"cumulativeErrors\", getCategory().toString(), scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    commitCommands = manager.meter(registry, \"commits\", getCategory().toString(), scope);\n    manager.registerGauge(registry, () -> commitTracker.getCommitCount(), true, \"autoCommits\", getCategory().toString(), scope);\n    manager.registerGauge(registry, () -> softCommitTracker.getCommitCount(), true, \"softAutoCommits\", getCategory().toString(), scope);\n    optimizeCommands = manager.meter(registry, \"optimizes\", getCategory().toString(), scope);\n    rollbackCommands = manager.meter(registry, \"rollbacks\", getCategory().toString(), scope);\n    splitCommands = manager.meter(registry, \"splits\", getCategory().toString(), scope);\n    mergeIndexesCommands = manager.meter(registry, \"merges\", getCategory().toString(), scope);\n    expungeDeleteCommands = manager.meter(registry, \"expungeDeletes\", getCategory().toString(), scope);\n    manager.registerGauge(registry, () -> numDocsPending.longValue(), true, \"docsPending\", getCategory().toString(), scope);\n    manager.registerGauge(registry, () -> addCommands.longValue(), true, \"adds\", getCategory().toString(), scope);\n    manager.registerGauge(registry, () -> deleteByIdCommands.longValue(), true, \"deletesById\", getCategory().toString(), scope);\n    manager.registerGauge(registry, () -> deleteByQueryCommands.longValue(), true, \"deletesByQuery\", getCategory().toString(), scope);\n    manager.registerGauge(registry, () -> numErrors.longValue(), true, \"errors\", getCategory().toString(), scope);\n\n    addCommandsCumulative = manager.meter(registry, \"cumulativeAdds\", getCategory().toString(), scope);\n    deleteByIdCommandsCumulative = manager.meter(registry, \"cumulativeDeletesById\", getCategory().toString(), scope);\n    deleteByQueryCommandsCumulative = manager.meter(registry, \"cumulativeDeletesByQuery\", getCategory().toString(), scope);\n    numErrorsCumulative = manager.meter(registry, \"cumulativeErrors\", getCategory().toString(), scope);\n  }\n\n","bugFix":null,"bugIntro":["f9c888ad333614d8139c568c1ca7d5ef42e9193c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    commitCommands = manager.meter(this, registry, \"commits\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> commitTracker.getCommitCount(), true, \"autoCommits\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> softCommitTracker.getCommitCount(), true, \"softAutoCommits\", getCategory().toString(), scope);\n    if (commitTracker.getDocsUpperBound() > 0) {\n      manager.registerGauge(this, registry, () -> commitTracker.getDocsUpperBound(), true, \"autoCommitMaxDocs\",\n          getCategory().toString(), scope);\n    }\n    if (commitTracker.getTimeUpperBound() > 0) {\n      manager.registerGauge(this, registry, () -> \"\" + commitTracker.getTimeUpperBound() + \"ms\", true, \"autoCommitMaxTime\",\n          getCategory().toString(), scope);\n    }\n    if (softCommitTracker.getDocsUpperBound() > 0) {\n      manager.registerGauge(this, registry, () -> softCommitTracker.getDocsUpperBound(), true, \"softAutoCommitMaxDocs\",\n          getCategory().toString(), scope);\n    }\n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      manager.registerGauge(this, registry, () -> \"\" + softCommitTracker.getTimeUpperBound() + \"ms\", true, \"softAutoCommitMaxTime\",\n          getCategory().toString(), scope);\n    }\n    optimizeCommands = manager.meter(this, registry, \"optimizes\", getCategory().toString(), scope);\n    rollbackCommands = manager.meter(this, registry, \"rollbacks\", getCategory().toString(), scope);\n    splitCommands = manager.meter(this, registry, \"splits\", getCategory().toString(), scope);\n    mergeIndexesCommands = manager.meter(this, registry, \"merges\", getCategory().toString(), scope);\n    expungeDeleteCommands = manager.meter(this, registry, \"expungeDeletes\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> numDocsPending.longValue(), true, \"docsPending\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> addCommands.longValue(), true, \"adds\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> deleteByIdCommands.longValue(), true, \"deletesById\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> deleteByQueryCommands.longValue(), true, \"deletesByQuery\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> numErrors.longValue(), true, \"errors\", getCategory().toString(), scope);\n\n    addCommandsCumulative = manager.meter(this, registry, \"cumulativeAdds\", getCategory().toString(), scope);\n    deleteByIdCommandsCumulative = manager.meter(this, registry, \"cumulativeDeletesById\", getCategory().toString(), scope);\n    deleteByQueryCommandsCumulative = manager.meter(this, registry, \"cumulativeDeletesByQuery\", getCategory().toString(), scope);\n    numErrorsCumulative = manager.meter(this, registry, \"cumulativeErrors\", getCategory().toString(), scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    commitCommands = manager.meter(registry, \"commits\", getCategory().toString(), scope);\n    manager.registerGauge(registry, () -> commitTracker.getCommitCount(), true, \"autoCommits\", getCategory().toString(), scope);\n    manager.registerGauge(registry, () -> softCommitTracker.getCommitCount(), true, \"softAutoCommits\", getCategory().toString(), scope);\n    optimizeCommands = manager.meter(registry, \"optimizes\", getCategory().toString(), scope);\n    rollbackCommands = manager.meter(registry, \"rollbacks\", getCategory().toString(), scope);\n    splitCommands = manager.meter(registry, \"splits\", getCategory().toString(), scope);\n    mergeIndexesCommands = manager.meter(registry, \"merges\", getCategory().toString(), scope);\n    expungeDeleteCommands = manager.meter(registry, \"expungeDeletes\", getCategory().toString(), scope);\n    manager.registerGauge(registry, () -> numDocsPending.longValue(), true, \"docsPending\", getCategory().toString(), scope);\n    manager.registerGauge(registry, () -> addCommands.longValue(), true, \"adds\", getCategory().toString(), scope);\n    manager.registerGauge(registry, () -> deleteByIdCommands.longValue(), true, \"deletesById\", getCategory().toString(), scope);\n    manager.registerGauge(registry, () -> deleteByQueryCommands.longValue(), true, \"deletesByQuery\", getCategory().toString(), scope);\n    manager.registerGauge(registry, () -> numErrors.longValue(), true, \"errors\", getCategory().toString(), scope);\n\n    addCommandsCumulative = manager.meter(registry, \"cumulativeAdds\", getCategory().toString(), scope);\n    deleteByIdCommandsCumulative = manager.meter(registry, \"cumulativeDeletesById\", getCategory().toString(), scope);\n    deleteByQueryCommandsCumulative = manager.meter(registry, \"cumulativeDeletesByQuery\", getCategory().toString(), scope);\n    numErrorsCumulative = manager.meter(registry, \"cumulativeErrors\", getCategory().toString(), scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f9c888ad333614d8139c568c1ca7d5ef42e9193c","date":1493229103,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String scope) {\n    this.registry = manager.registry(registryName);\n    commitCommands = manager.meter(this, registryName, \"commits\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> commitTracker.getCommitCount(), true, \"autoCommits\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> softCommitTracker.getCommitCount(), true, \"softAutoCommits\", getCategory().toString(), scope);\n    if (commitTracker.getDocsUpperBound() > 0) {\n      manager.registerGauge(this, registryName, () -> commitTracker.getDocsUpperBound(), true, \"autoCommitMaxDocs\",\n          getCategory().toString(), scope);\n    }\n    if (commitTracker.getTimeUpperBound() > 0) {\n      manager.registerGauge(this, registryName, () -> \"\" + commitTracker.getTimeUpperBound() + \"ms\", true, \"autoCommitMaxTime\",\n          getCategory().toString(), scope);\n    }\n    if (softCommitTracker.getDocsUpperBound() > 0) {\n      manager.registerGauge(this, registryName, () -> softCommitTracker.getDocsUpperBound(), true, \"softAutoCommitMaxDocs\",\n          getCategory().toString(), scope);\n    }\n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      manager.registerGauge(this, registryName, () -> \"\" + softCommitTracker.getTimeUpperBound() + \"ms\", true, \"softAutoCommitMaxTime\",\n          getCategory().toString(), scope);\n    }\n    optimizeCommands = manager.meter(this, registryName, \"optimizes\", getCategory().toString(), scope);\n    rollbackCommands = manager.meter(this, registryName, \"rollbacks\", getCategory().toString(), scope);\n    splitCommands = manager.meter(this, registryName, \"splits\", getCategory().toString(), scope);\n    mergeIndexesCommands = manager.meter(this, registryName, \"merges\", getCategory().toString(), scope);\n    expungeDeleteCommands = manager.meter(this, registryName, \"expungeDeletes\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> numDocsPending.longValue(), true, \"docsPending\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> addCommands.longValue(), true, \"adds\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> deleteByIdCommands.longValue(), true, \"deletesById\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> deleteByQueryCommands.longValue(), true, \"deletesByQuery\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> numErrors.longValue(), true, \"errors\", getCategory().toString(), scope);\n\n    addCommandsCumulative = manager.meter(this, registryName, \"cumulativeAdds\", getCategory().toString(), scope);\n    deleteByIdCommandsCumulative = manager.meter(this, registryName, \"cumulativeDeletesById\", getCategory().toString(), scope);\n    deleteByQueryCommandsCumulative = manager.meter(this, registryName, \"cumulativeDeletesByQuery\", getCategory().toString(), scope);\n    numErrorsCumulative = manager.meter(this, registryName, \"cumulativeErrors\", getCategory().toString(), scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    commitCommands = manager.meter(this, registry, \"commits\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> commitTracker.getCommitCount(), true, \"autoCommits\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> softCommitTracker.getCommitCount(), true, \"softAutoCommits\", getCategory().toString(), scope);\n    if (commitTracker.getDocsUpperBound() > 0) {\n      manager.registerGauge(this, registry, () -> commitTracker.getDocsUpperBound(), true, \"autoCommitMaxDocs\",\n          getCategory().toString(), scope);\n    }\n    if (commitTracker.getTimeUpperBound() > 0) {\n      manager.registerGauge(this, registry, () -> \"\" + commitTracker.getTimeUpperBound() + \"ms\", true, \"autoCommitMaxTime\",\n          getCategory().toString(), scope);\n    }\n    if (softCommitTracker.getDocsUpperBound() > 0) {\n      manager.registerGauge(this, registry, () -> softCommitTracker.getDocsUpperBound(), true, \"softAutoCommitMaxDocs\",\n          getCategory().toString(), scope);\n    }\n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      manager.registerGauge(this, registry, () -> \"\" + softCommitTracker.getTimeUpperBound() + \"ms\", true, \"softAutoCommitMaxTime\",\n          getCategory().toString(), scope);\n    }\n    optimizeCommands = manager.meter(this, registry, \"optimizes\", getCategory().toString(), scope);\n    rollbackCommands = manager.meter(this, registry, \"rollbacks\", getCategory().toString(), scope);\n    splitCommands = manager.meter(this, registry, \"splits\", getCategory().toString(), scope);\n    mergeIndexesCommands = manager.meter(this, registry, \"merges\", getCategory().toString(), scope);\n    expungeDeleteCommands = manager.meter(this, registry, \"expungeDeletes\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> numDocsPending.longValue(), true, \"docsPending\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> addCommands.longValue(), true, \"adds\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> deleteByIdCommands.longValue(), true, \"deletesById\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> deleteByQueryCommands.longValue(), true, \"deletesByQuery\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> numErrors.longValue(), true, \"errors\", getCategory().toString(), scope);\n\n    addCommandsCumulative = manager.meter(this, registry, \"cumulativeAdds\", getCategory().toString(), scope);\n    deleteByIdCommandsCumulative = manager.meter(this, registry, \"cumulativeDeletesById\", getCategory().toString(), scope);\n    deleteByQueryCommandsCumulative = manager.meter(this, registry, \"cumulativeDeletesByQuery\", getCategory().toString(), scope);\n    numErrorsCumulative = manager.meter(this, registry, \"cumulativeErrors\", getCategory().toString(), scope);\n  }\n\n","bugFix":["e52c21eddb989aed5815d30ea4c8abf481ace8ad","816521ebaad5add9cb96bb88c577394e2938c40b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String scope) {\n    this.registry = manager.registry(registryName);\n    commitCommands = manager.meter(this, registryName, \"commits\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> commitTracker.getCommitCount(), true, \"autoCommits\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> softCommitTracker.getCommitCount(), true, \"softAutoCommits\", getCategory().toString(), scope);\n    if (commitTracker.getDocsUpperBound() > 0) {\n      manager.registerGauge(this, registryName, () -> commitTracker.getDocsUpperBound(), true, \"autoCommitMaxDocs\",\n          getCategory().toString(), scope);\n    }\n    if (commitTracker.getTimeUpperBound() > 0) {\n      manager.registerGauge(this, registryName, () -> \"\" + commitTracker.getTimeUpperBound() + \"ms\", true, \"autoCommitMaxTime\",\n          getCategory().toString(), scope);\n    }\n    if (softCommitTracker.getDocsUpperBound() > 0) {\n      manager.registerGauge(this, registryName, () -> softCommitTracker.getDocsUpperBound(), true, \"softAutoCommitMaxDocs\",\n          getCategory().toString(), scope);\n    }\n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      manager.registerGauge(this, registryName, () -> \"\" + softCommitTracker.getTimeUpperBound() + \"ms\", true, \"softAutoCommitMaxTime\",\n          getCategory().toString(), scope);\n    }\n    optimizeCommands = manager.meter(this, registryName, \"optimizes\", getCategory().toString(), scope);\n    rollbackCommands = manager.meter(this, registryName, \"rollbacks\", getCategory().toString(), scope);\n    splitCommands = manager.meter(this, registryName, \"splits\", getCategory().toString(), scope);\n    mergeIndexesCommands = manager.meter(this, registryName, \"merges\", getCategory().toString(), scope);\n    expungeDeleteCommands = manager.meter(this, registryName, \"expungeDeletes\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> numDocsPending.longValue(), true, \"docsPending\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> addCommands.longValue(), true, \"adds\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> deleteByIdCommands.longValue(), true, \"deletesById\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> deleteByQueryCommands.longValue(), true, \"deletesByQuery\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> numErrors.longValue(), true, \"errors\", getCategory().toString(), scope);\n\n    addCommandsCumulative = manager.meter(this, registryName, \"cumulativeAdds\", getCategory().toString(), scope);\n    deleteByIdCommandsCumulative = manager.meter(this, registryName, \"cumulativeDeletesById\", getCategory().toString(), scope);\n    deleteByQueryCommandsCumulative = manager.meter(this, registryName, \"cumulativeDeletesByQuery\", getCategory().toString(), scope);\n    numErrorsCumulative = manager.meter(this, registryName, \"cumulativeErrors\", getCategory().toString(), scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    commitCommands = manager.meter(this, registry, \"commits\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> commitTracker.getCommitCount(), true, \"autoCommits\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> softCommitTracker.getCommitCount(), true, \"softAutoCommits\", getCategory().toString(), scope);\n    if (commitTracker.getDocsUpperBound() > 0) {\n      manager.registerGauge(this, registry, () -> commitTracker.getDocsUpperBound(), true, \"autoCommitMaxDocs\",\n          getCategory().toString(), scope);\n    }\n    if (commitTracker.getTimeUpperBound() > 0) {\n      manager.registerGauge(this, registry, () -> \"\" + commitTracker.getTimeUpperBound() + \"ms\", true, \"autoCommitMaxTime\",\n          getCategory().toString(), scope);\n    }\n    if (softCommitTracker.getDocsUpperBound() > 0) {\n      manager.registerGauge(this, registry, () -> softCommitTracker.getDocsUpperBound(), true, \"softAutoCommitMaxDocs\",\n          getCategory().toString(), scope);\n    }\n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      manager.registerGauge(this, registry, () -> \"\" + softCommitTracker.getTimeUpperBound() + \"ms\", true, \"softAutoCommitMaxTime\",\n          getCategory().toString(), scope);\n    }\n    optimizeCommands = manager.meter(this, registry, \"optimizes\", getCategory().toString(), scope);\n    rollbackCommands = manager.meter(this, registry, \"rollbacks\", getCategory().toString(), scope);\n    splitCommands = manager.meter(this, registry, \"splits\", getCategory().toString(), scope);\n    mergeIndexesCommands = manager.meter(this, registry, \"merges\", getCategory().toString(), scope);\n    expungeDeleteCommands = manager.meter(this, registry, \"expungeDeletes\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> numDocsPending.longValue(), true, \"docsPending\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> addCommands.longValue(), true, \"adds\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> deleteByIdCommands.longValue(), true, \"deletesById\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> deleteByQueryCommands.longValue(), true, \"deletesByQuery\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> numErrors.longValue(), true, \"errors\", getCategory().toString(), scope);\n\n    addCommandsCumulative = manager.meter(this, registry, \"cumulativeAdds\", getCategory().toString(), scope);\n    deleteByIdCommandsCumulative = manager.meter(this, registry, \"cumulativeDeletesById\", getCategory().toString(), scope);\n    deleteByQueryCommandsCumulative = manager.meter(this, registry, \"cumulativeDeletesByQuery\", getCategory().toString(), scope);\n    numErrorsCumulative = manager.meter(this, registry, \"cumulativeErrors\", getCategory().toString(), scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfc52860e6d13d034226a760813c59d984c6817a","date":1522229027,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, String scope) {\n    this.metricManager = manager;\n    this.registryName = registryName;\n    this.registry = manager.registry(registryName);\n    commitCommands = manager.meter(this, registryName, \"commits\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> commitTracker.getCommitCount(), tag, true, \"autoCommits\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> softCommitTracker.getCommitCount(), tag, true, \"softAutoCommits\", getCategory().toString(), scope);\n    if (commitTracker.getDocsUpperBound() > 0) {\n      manager.registerGauge(this, registryName, () -> commitTracker.getDocsUpperBound(), tag, true, \"autoCommitMaxDocs\",\n          getCategory().toString(), scope);\n    }\n    if (commitTracker.getTimeUpperBound() > 0) {\n      manager.registerGauge(this, registryName, () -> \"\" + commitTracker.getTimeUpperBound() + \"ms\", tag, true, \"autoCommitMaxTime\",\n          getCategory().toString(), scope);\n    }\n    if (softCommitTracker.getDocsUpperBound() > 0) {\n      manager.registerGauge(this, registryName, () -> softCommitTracker.getDocsUpperBound(), tag, true, \"softAutoCommitMaxDocs\",\n          getCategory().toString(), scope);\n    }\n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      manager.registerGauge(this, registryName, () -> \"\" + softCommitTracker.getTimeUpperBound() + \"ms\", tag, true, \"softAutoCommitMaxTime\",\n          getCategory().toString(), scope);\n    }\n    optimizeCommands = manager.meter(this, registryName, \"optimizes\", getCategory().toString(), scope);\n    rollbackCommands = manager.meter(this, registryName, \"rollbacks\", getCategory().toString(), scope);\n    splitCommands = manager.meter(this, registryName, \"splits\", getCategory().toString(), scope);\n    mergeIndexesCommands = manager.meter(this, registryName, \"merges\", getCategory().toString(), scope);\n    expungeDeleteCommands = manager.meter(this, registryName, \"expungeDeletes\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> numDocsPending.longValue(), tag, true, \"docsPending\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> addCommands.longValue(), tag, true, \"adds\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> deleteByIdCommands.longValue(), tag, true, \"deletesById\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> deleteByQueryCommands.longValue(), tag, true, \"deletesByQuery\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> numErrors.longValue(), tag, true, \"errors\", getCategory().toString(), scope);\n\n    addCommandsCumulative = manager.meter(this, registryName, \"cumulativeAdds\", getCategory().toString(), scope);\n    deleteByIdCommandsCumulative = manager.meter(this, registryName, \"cumulativeDeletesById\", getCategory().toString(), scope);\n    deleteByQueryCommandsCumulative = manager.meter(this, registryName, \"cumulativeDeletesByQuery\", getCategory().toString(), scope);\n    numErrorsCumulative = manager.meter(this, registryName, \"cumulativeErrors\", getCategory().toString(), scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String scope) {\n    this.registry = manager.registry(registryName);\n    commitCommands = manager.meter(this, registryName, \"commits\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> commitTracker.getCommitCount(), true, \"autoCommits\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> softCommitTracker.getCommitCount(), true, \"softAutoCommits\", getCategory().toString(), scope);\n    if (commitTracker.getDocsUpperBound() > 0) {\n      manager.registerGauge(this, registryName, () -> commitTracker.getDocsUpperBound(), true, \"autoCommitMaxDocs\",\n          getCategory().toString(), scope);\n    }\n    if (commitTracker.getTimeUpperBound() > 0) {\n      manager.registerGauge(this, registryName, () -> \"\" + commitTracker.getTimeUpperBound() + \"ms\", true, \"autoCommitMaxTime\",\n          getCategory().toString(), scope);\n    }\n    if (softCommitTracker.getDocsUpperBound() > 0) {\n      manager.registerGauge(this, registryName, () -> softCommitTracker.getDocsUpperBound(), true, \"softAutoCommitMaxDocs\",\n          getCategory().toString(), scope);\n    }\n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      manager.registerGauge(this, registryName, () -> \"\" + softCommitTracker.getTimeUpperBound() + \"ms\", true, \"softAutoCommitMaxTime\",\n          getCategory().toString(), scope);\n    }\n    optimizeCommands = manager.meter(this, registryName, \"optimizes\", getCategory().toString(), scope);\n    rollbackCommands = manager.meter(this, registryName, \"rollbacks\", getCategory().toString(), scope);\n    splitCommands = manager.meter(this, registryName, \"splits\", getCategory().toString(), scope);\n    mergeIndexesCommands = manager.meter(this, registryName, \"merges\", getCategory().toString(), scope);\n    expungeDeleteCommands = manager.meter(this, registryName, \"expungeDeletes\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> numDocsPending.longValue(), true, \"docsPending\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> addCommands.longValue(), true, \"adds\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> deleteByIdCommands.longValue(), true, \"deletesById\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> deleteByQueryCommands.longValue(), true, \"deletesByQuery\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> numErrors.longValue(), true, \"errors\", getCategory().toString(), scope);\n\n    addCommandsCumulative = manager.meter(this, registryName, \"cumulativeAdds\", getCategory().toString(), scope);\n    deleteByIdCommandsCumulative = manager.meter(this, registryName, \"cumulativeDeletesById\", getCategory().toString(), scope);\n    deleteByQueryCommandsCumulative = manager.meter(this, registryName, \"cumulativeDeletesByQuery\", getCategory().toString(), scope);\n    numErrorsCumulative = manager.meter(this, registryName, \"cumulativeErrors\", getCategory().toString(), scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43564cbb30b064675027cfb569564e8531096e97","date":1522334265,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String tag, String scope) {\n    this.metricManager = manager;\n    this.registryName = registryName;\n    this.registry = manager.registry(registryName);\n    commitCommands = manager.meter(this, registryName, \"commits\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> commitTracker.getCommitCount(), tag, true, \"autoCommits\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> softCommitTracker.getCommitCount(), tag, true, \"softAutoCommits\", getCategory().toString(), scope);\n    if (commitTracker.getDocsUpperBound() > 0) {\n      manager.registerGauge(this, registryName, () -> commitTracker.getDocsUpperBound(), tag, true, \"autoCommitMaxDocs\",\n          getCategory().toString(), scope);\n    }\n    if (commitTracker.getTimeUpperBound() > 0) {\n      manager.registerGauge(this, registryName, () -> \"\" + commitTracker.getTimeUpperBound() + \"ms\", tag, true, \"autoCommitMaxTime\",\n          getCategory().toString(), scope);\n    }\n    if (softCommitTracker.getDocsUpperBound() > 0) {\n      manager.registerGauge(this, registryName, () -> softCommitTracker.getDocsUpperBound(), tag, true, \"softAutoCommitMaxDocs\",\n          getCategory().toString(), scope);\n    }\n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      manager.registerGauge(this, registryName, () -> \"\" + softCommitTracker.getTimeUpperBound() + \"ms\", tag, true, \"softAutoCommitMaxTime\",\n          getCategory().toString(), scope);\n    }\n    optimizeCommands = manager.meter(this, registryName, \"optimizes\", getCategory().toString(), scope);\n    rollbackCommands = manager.meter(this, registryName, \"rollbacks\", getCategory().toString(), scope);\n    splitCommands = manager.meter(this, registryName, \"splits\", getCategory().toString(), scope);\n    mergeIndexesCommands = manager.meter(this, registryName, \"merges\", getCategory().toString(), scope);\n    expungeDeleteCommands = manager.meter(this, registryName, \"expungeDeletes\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> numDocsPending.longValue(), tag, true, \"docsPending\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> addCommands.longValue(), tag, true, \"adds\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> deleteByIdCommands.longValue(), tag, true, \"deletesById\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> deleteByQueryCommands.longValue(), tag, true, \"deletesByQuery\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> numErrors.longValue(), tag, true, \"errors\", getCategory().toString(), scope);\n\n    addCommandsCumulative = manager.meter(this, registryName, \"cumulativeAdds\", getCategory().toString(), scope);\n    deleteByIdCommandsCumulative = manager.meter(this, registryName, \"cumulativeDeletesById\", getCategory().toString(), scope);\n    deleteByQueryCommandsCumulative = manager.meter(this, registryName, \"cumulativeDeletesByQuery\", getCategory().toString(), scope);\n    numErrorsCumulative = manager.meter(this, registryName, \"cumulativeErrors\", getCategory().toString(), scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registryName, String scope) {\n    this.registry = manager.registry(registryName);\n    commitCommands = manager.meter(this, registryName, \"commits\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> commitTracker.getCommitCount(), true, \"autoCommits\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> softCommitTracker.getCommitCount(), true, \"softAutoCommits\", getCategory().toString(), scope);\n    if (commitTracker.getDocsUpperBound() > 0) {\n      manager.registerGauge(this, registryName, () -> commitTracker.getDocsUpperBound(), true, \"autoCommitMaxDocs\",\n          getCategory().toString(), scope);\n    }\n    if (commitTracker.getTimeUpperBound() > 0) {\n      manager.registerGauge(this, registryName, () -> \"\" + commitTracker.getTimeUpperBound() + \"ms\", true, \"autoCommitMaxTime\",\n          getCategory().toString(), scope);\n    }\n    if (softCommitTracker.getDocsUpperBound() > 0) {\n      manager.registerGauge(this, registryName, () -> softCommitTracker.getDocsUpperBound(), true, \"softAutoCommitMaxDocs\",\n          getCategory().toString(), scope);\n    }\n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      manager.registerGauge(this, registryName, () -> \"\" + softCommitTracker.getTimeUpperBound() + \"ms\", true, \"softAutoCommitMaxTime\",\n          getCategory().toString(), scope);\n    }\n    optimizeCommands = manager.meter(this, registryName, \"optimizes\", getCategory().toString(), scope);\n    rollbackCommands = manager.meter(this, registryName, \"rollbacks\", getCategory().toString(), scope);\n    splitCommands = manager.meter(this, registryName, \"splits\", getCategory().toString(), scope);\n    mergeIndexesCommands = manager.meter(this, registryName, \"merges\", getCategory().toString(), scope);\n    expungeDeleteCommands = manager.meter(this, registryName, \"expungeDeletes\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> numDocsPending.longValue(), true, \"docsPending\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> addCommands.longValue(), true, \"adds\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> deleteByIdCommands.longValue(), true, \"deletesById\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> deleteByQueryCommands.longValue(), true, \"deletesByQuery\", getCategory().toString(), scope);\n    manager.registerGauge(this, registryName, () -> numErrors.longValue(), true, \"errors\", getCategory().toString(), scope);\n\n    addCommandsCumulative = manager.meter(this, registryName, \"cumulativeAdds\", getCategory().toString(), scope);\n    deleteByIdCommandsCumulative = manager.meter(this, registryName, \"cumulativeDeletesById\", getCategory().toString(), scope);\n    deleteByQueryCommandsCumulative = manager.meter(this, registryName, \"cumulativeDeletesByQuery\", getCategory().toString(), scope);\n    numErrorsCumulative = manager.meter(this, registryName, \"cumulativeErrors\", getCategory().toString(), scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["ab68488225b6a6c357dda72ed11dedca9914a192"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","f9c888ad333614d8139c568c1ca7d5ef42e9193c"],"bfc52860e6d13d034226a760813c59d984c6817a":["f9c888ad333614d8139c568c1ca7d5ef42e9193c"],"43564cbb30b064675027cfb569564e8531096e97":["f9c888ad333614d8139c568c1ca7d5ef42e9193c","bfc52860e6d13d034226a760813c59d984c6817a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f9c888ad333614d8139c568c1ca7d5ef42e9193c":["816521ebaad5add9cb96bb88c577394e2938c40b"],"f34d83c894e07c24f5f957820777b5da2cc29e5a":["e52c21eddb989aed5815d30ea4c8abf481ace8ad"],"e52c21eddb989aed5815d30ea4c8abf481ace8ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ab68488225b6a6c357dda72ed11dedca9914a192":["e52c21eddb989aed5815d30ea4c8abf481ace8ad","0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b"],"816521ebaad5add9cb96bb88c577394e2938c40b":["f34d83c894e07c24f5f957820777b5da2cc29e5a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["43564cbb30b064675027cfb569564e8531096e97"],"0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b":["e52c21eddb989aed5815d30ea4c8abf481ace8ad"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"bfc52860e6d13d034226a760813c59d984c6817a":["43564cbb30b064675027cfb569564e8531096e97"],"43564cbb30b064675027cfb569564e8531096e97":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e52c21eddb989aed5815d30ea4c8abf481ace8ad"],"f9c888ad333614d8139c568c1ca7d5ef42e9193c":["e9017cf144952056066919f1ebc7897ff9bd71b1","bfc52860e6d13d034226a760813c59d984c6817a","43564cbb30b064675027cfb569564e8531096e97"],"f34d83c894e07c24f5f957820777b5da2cc29e5a":["816521ebaad5add9cb96bb88c577394e2938c40b"],"e52c21eddb989aed5815d30ea4c8abf481ace8ad":["f34d83c894e07c24f5f957820777b5da2cc29e5a","ab68488225b6a6c357dda72ed11dedca9914a192","0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b"],"ab68488225b6a6c357dda72ed11dedca9914a192":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"816521ebaad5add9cb96bb88c577394e2938c40b":["f9c888ad333614d8139c568c1ca7d5ef42e9193c"],"0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b":["ab68488225b6a6c357dda72ed11dedca9914a192"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}