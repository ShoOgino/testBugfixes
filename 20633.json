{"path":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#getDocValues(IndexReader,String).mjava","commits":[{"id":"b5c559c875836474bafae7243263d93b1b1965db","date":1289581659,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#getDocValues(IndexReader,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestIndexValues#getDocValues(IndexReader,String).mjava","sourceNew":"  private DocValues getDocValues(IndexReader reader, String field)\n      throws IOException {\n    boolean optimized = reader.isOptimized();\n    Fields fields = optimized ? reader.getSequentialSubReaders()[0].fields()\n        : MultiFields.getFields(reader);\n    switch (random.nextInt(optimized ? 3 : 2)) { // case 2 only if optimized\n    case 0:\n      return fields.docValues(field);\n    case 1:\n      FieldsEnum iterator = fields.iterator();\n      String name;\n      while ((name = iterator.next()) != null) {\n        if (name.equals(field))\n          return iterator.docValues();\n      }\n      throw new RuntimeException(\"no such field \" + field);\n    case 2:// this only works if we are on an optimized index!\n      return reader.getSequentialSubReaders()[0].docValues(field);\n    }\n    throw new RuntimeException();\n  }\n\n","sourceOld":"  private DocValues getDocValues(IndexReader reader, String field)\n      throws IOException {\n    boolean optimized = reader.isOptimized();\n    Fields fields = optimized ? reader.getSequentialSubReaders()[0].fields()\n        : MultiFields.getFields(reader);\n    switch (random.nextInt(optimized ? 3 : 2)) { // case 2 only if optimized\n    case 0:\n      return fields.docValues(field);\n    case 1:\n      FieldsEnum iterator = fields.iterator();\n      String name;\n      while ((name = iterator.next()) != null) {\n        if (name.equals(field))\n          return iterator.docValues();\n      }\n      throw new RuntimeException(\"no such field \" + field);\n    case 2:// this only works if we are on an optimized index!\n      return reader.getSequentialSubReaders()[0].docValues(field);\n    }\n    throw new RuntimeException();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4bd5d0a5ac72666f0bcbd50b535d2cc70dbf584b","date":1291778725,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#getDocValues(IndexReader,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#getDocValues(IndexReader,String).mjava","sourceNew":"  private DocValues getDocValues(IndexReader reader, String field)\n      throws IOException {\n    boolean optimized = reader.isOptimized();\n    reader.isCurrent();\n    Fields fields = optimized ? reader.getSequentialSubReaders()[0].fields()\n        : MultiFields.getFields(reader);\n    switch (random.nextInt(optimized ? 3 : 2)) { // case 2 only if optimized\n    case 0:\n      return fields.docValues(field);\n    case 1:\n      FieldsEnum iterator = fields.iterator();\n      String name;\n      while ((name = iterator.next()) != null) {\n        if (name.equals(field))\n          return iterator.docValues();\n      }\n      throw new RuntimeException(\"no such field \" + field);\n    case 2:// this only works if we are on an optimized index!\n      return reader.getSequentialSubReaders()[0].docValues(field);\n    }\n    throw new RuntimeException();\n  }\n\n","sourceOld":"  private DocValues getDocValues(IndexReader reader, String field)\n      throws IOException {\n    boolean optimized = reader.isOptimized();\n    Fields fields = optimized ? reader.getSequentialSubReaders()[0].fields()\n        : MultiFields.getFields(reader);\n    switch (random.nextInt(optimized ? 3 : 2)) { // case 2 only if optimized\n    case 0:\n      return fields.docValues(field);\n    case 1:\n      FieldsEnum iterator = fields.iterator();\n      String name;\n      while ((name = iterator.next()) != null) {\n        if (name.equals(field))\n          return iterator.docValues();\n      }\n      throw new RuntimeException(\"no such field \" + field);\n    case 2:// this only works if we are on an optimized index!\n      return reader.getSequentialSubReaders()[0].docValues(field);\n    }\n    throw new RuntimeException();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#getDocValues(IndexReader,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#getDocValues(IndexReader,String).mjava","sourceNew":"  private DocValues getDocValues(IndexReader reader, String field)\n      throws IOException {\n    boolean optimized = reader.isOptimized();\n    Fields fields = optimized ? reader.getSequentialSubReaders()[0].fields()\n        : MultiFields.getFields(reader);\n    switch (random.nextInt(optimized ? 3 : 2)) { // case 2 only if optimized\n    case 0:\n      return fields.docValues(field);\n    case 1:\n      FieldsEnum iterator = fields.iterator();\n      String name;\n      while ((name = iterator.next()) != null) {\n        if (name.equals(field))\n          return iterator.docValues();\n      }\n      throw new RuntimeException(\"no such field \" + field);\n    case 2:// this only works if we are on an optimized index!\n      return reader.getSequentialSubReaders()[0].docValues(field);\n    }\n    throw new RuntimeException();\n  }\n\n","sourceOld":"  private DocValues getDocValues(IndexReader reader, String field)\n      throws IOException {\n    boolean optimized = reader.isOptimized();\n    reader.isCurrent();\n    Fields fields = optimized ? reader.getSequentialSubReaders()[0].fields()\n        : MultiFields.getFields(reader);\n    switch (random.nextInt(optimized ? 3 : 2)) { // case 2 only if optimized\n    case 0:\n      return fields.docValues(field);\n    case 1:\n      FieldsEnum iterator = fields.iterator();\n      String name;\n      while ((name = iterator.next()) != null) {\n        if (name.equals(field))\n          return iterator.docValues();\n      }\n      throw new RuntimeException(\"no such field \" + field);\n    case 2:// this only works if we are on an optimized index!\n      return reader.getSequentialSubReaders()[0].docValues(field);\n    }\n    throw new RuntimeException();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#getDocValues(IndexReader,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#getDocValues(IndexReader,String).mjava","sourceNew":"  private DocValues getDocValues(IndexReader reader, String field)\n      throws IOException {\n    boolean optimized = reader.isOptimized();\n    PerDocValues perDoc = optimized ? reader.getSequentialSubReaders()[0].perDocValues()\n        : MultiPerDocValues.getPerDocs(reader);\n    switch (random.nextInt(optimized ? 3 : 2)) { // case 2 only if optimized\n    case 0:\n      return perDoc.docValues(field);\n    case 1:\n      DocValues docValues = perDoc.docValues(field);\n      if (docValues != null) {\n        return docValues;\n      }\n      throw new RuntimeException(\"no such field \" + field);\n    case 2:// this only works if we are on an optimized index!\n      return reader.getSequentialSubReaders()[0].docValues(field);\n    }\n    throw new RuntimeException();\n  }\n\n","sourceOld":"  private DocValues getDocValues(IndexReader reader, String field)\n      throws IOException {\n    boolean optimized = reader.isOptimized();\n    Fields fields = optimized ? reader.getSequentialSubReaders()[0].fields()\n        : MultiFields.getFields(reader);\n    switch (random.nextInt(optimized ? 3 : 2)) { // case 2 only if optimized\n    case 0:\n      return fields.docValues(field);\n    case 1:\n      FieldsEnum iterator = fields.iterator();\n      String name;\n      while ((name = iterator.next()) != null) {\n        if (name.equals(field))\n          return iterator.docValues();\n      }\n      throw new RuntimeException(\"no such field \" + field);\n    case 2:// this only works if we are on an optimized index!\n      return reader.getSequentialSubReaders()[0].docValues(field);\n    }\n    throw new RuntimeException();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41e5bbad683f7546e96f08ffe8bc50cf447f2586","date":1307113213,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#getDocValues(IndexReader,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#getDocValues(IndexReader,String).mjava","sourceNew":"  private IndexDocValues getDocValues(IndexReader reader, String field)\n      throws IOException {\n    boolean optimized = reader.isOptimized();\n    PerDocValues perDoc = optimized ? reader.getSequentialSubReaders()[0].perDocValues()\n        : MultiPerDocValues.getPerDocs(reader);\n    switch (random.nextInt(optimized ? 3 : 2)) { // case 2 only if optimized\n    case 0:\n      return perDoc.docValues(field);\n    case 1:\n      IndexDocValues docValues = perDoc.docValues(field);\n      if (docValues != null) {\n        return docValues;\n      }\n      throw new RuntimeException(\"no such field \" + field);\n    case 2:// this only works if we are on an optimized index!\n      return reader.getSequentialSubReaders()[0].docValues(field);\n    }\n    throw new RuntimeException();\n  }\n\n","sourceOld":"  private DocValues getDocValues(IndexReader reader, String field)\n      throws IOException {\n    boolean optimized = reader.isOptimized();\n    PerDocValues perDoc = optimized ? reader.getSequentialSubReaders()[0].perDocValues()\n        : MultiPerDocValues.getPerDocs(reader);\n    switch (random.nextInt(optimized ? 3 : 2)) { // case 2 only if optimized\n    case 0:\n      return perDoc.docValues(field);\n    case 1:\n      DocValues docValues = perDoc.docValues(field);\n      if (docValues != null) {\n        return docValues;\n      }\n      throw new RuntimeException(\"no such field \" + field);\n    case 2:// this only works if we are on an optimized index!\n      return reader.getSequentialSubReaders()[0].docValues(field);\n    }\n    throw new RuntimeException();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#getDocValues(IndexReader,String).mjava","pathOld":"/dev/null","sourceNew":"  private IndexDocValues getDocValues(IndexReader reader, String field)\n      throws IOException {\n    boolean optimized = reader.isOptimized();\n    PerDocValues perDoc = optimized ? reader.getSequentialSubReaders()[0].perDocValues()\n        : MultiPerDocValues.getPerDocs(reader);\n    switch (random.nextInt(optimized ? 3 : 2)) { // case 2 only if optimized\n    case 0:\n      return perDoc.docValues(field);\n    case 1:\n      IndexDocValues docValues = perDoc.docValues(field);\n      if (docValues != null) {\n        return docValues;\n      }\n      throw new RuntimeException(\"no such field \" + field);\n    case 2:// this only works if we are on an optimized index!\n      return reader.getSequentialSubReaders()[0].docValues(field);\n    }\n    throw new RuntimeException();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#getDocValues(IndexReader,String).mjava","pathOld":"/dev/null","sourceNew":"  private IndexDocValues getDocValues(IndexReader reader, String field)\n      throws IOException {\n    boolean optimized = reader.isOptimized();\n    PerDocValues perDoc = optimized ? reader.getSequentialSubReaders()[0].perDocValues()\n        : MultiPerDocValues.getPerDocs(reader);\n    switch (random.nextInt(optimized ? 3 : 2)) { // case 2 only if optimized\n    case 0:\n      return perDoc.docValues(field);\n    case 1:\n      IndexDocValues docValues = perDoc.docValues(field);\n      if (docValues != null) {\n        return docValues;\n      }\n      throw new RuntimeException(\"no such field \" + field);\n    case 2:// this only works if we are on an optimized index!\n      return reader.getSequentialSubReaders()[0].docValues(field);\n    }\n    throw new RuntimeException();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#getDocValues(IndexReader,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#getDocValues(IndexReader,String).mjava","sourceNew":"  private IndexDocValues getDocValues(IndexReader reader, String field)\n      throws IOException {\n    boolean singleSeg = reader.getSequentialSubReaders().length == 1;\n    PerDocValues perDoc = singleSeg ? reader.getSequentialSubReaders()[0].perDocValues()\n        : MultiPerDocValues.getPerDocs(reader);\n    switch (random.nextInt(singleSeg ? 3 : 2)) { // case 2 only if single seg\n    case 0:\n      return perDoc.docValues(field);\n    case 1:\n      IndexDocValues docValues = perDoc.docValues(field);\n      if (docValues != null) {\n        return docValues;\n      }\n      throw new RuntimeException(\"no such field \" + field);\n    case 2:// this only works if we are on a single seg index!\n      return reader.getSequentialSubReaders()[0].docValues(field);\n    }\n    throw new RuntimeException();\n  }\n\n","sourceOld":"  private IndexDocValues getDocValues(IndexReader reader, String field)\n      throws IOException {\n    boolean optimized = reader.isOptimized();\n    PerDocValues perDoc = optimized ? reader.getSequentialSubReaders()[0].perDocValues()\n        : MultiPerDocValues.getPerDocs(reader);\n    switch (random.nextInt(optimized ? 3 : 2)) { // case 2 only if optimized\n    case 0:\n      return perDoc.docValues(field);\n    case 1:\n      IndexDocValues docValues = perDoc.docValues(field);\n      if (docValues != null) {\n        return docValues;\n      }\n      throw new RuntimeException(\"no such field \" + field);\n    case 2:// this only works if we are on an optimized index!\n      return reader.getSequentialSubReaders()[0].docValues(field);\n    }\n    throw new RuntimeException();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","date":1323449025,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#getDocValues(IndexReader,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#getDocValues(IndexReader,String).mjava","sourceNew":"  private DocValues getDocValues(IndexReader reader, String field)\n      throws IOException {\n    boolean singleSeg = reader.getSequentialSubReaders().length == 1;\n    PerDocValues perDoc = singleSeg ? reader.getSequentialSubReaders()[0].perDocValues()\n        : MultiPerDocValues.getPerDocs(reader);\n    switch (random.nextInt(singleSeg ? 3 : 2)) { // case 2 only if single seg\n    case 0:\n      return perDoc.docValues(field);\n    case 1:\n      DocValues docValues = perDoc.docValues(field);\n      if (docValues != null) {\n        return docValues;\n      }\n      throw new RuntimeException(\"no such field \" + field);\n    case 2:// this only works if we are on a single seg index!\n      return reader.getSequentialSubReaders()[0].docValues(field);\n    }\n    throw new RuntimeException();\n  }\n\n","sourceOld":"  private IndexDocValues getDocValues(IndexReader reader, String field)\n      throws IOException {\n    boolean singleSeg = reader.getSequentialSubReaders().length == 1;\n    PerDocValues perDoc = singleSeg ? reader.getSequentialSubReaders()[0].perDocValues()\n        : MultiPerDocValues.getPerDocs(reader);\n    switch (random.nextInt(singleSeg ? 3 : 2)) { // case 2 only if single seg\n    case 0:\n      return perDoc.docValues(field);\n    case 1:\n      IndexDocValues docValues = perDoc.docValues(field);\n      if (docValues != null) {\n        return docValues;\n      }\n      throw new RuntimeException(\"no such field \" + field);\n    case 2:// this only works if we are on a single seg index!\n      return reader.getSequentialSubReaders()[0].docValues(field);\n    }\n    throw new RuntimeException();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cac4d5fa6c305b94f6232a70bda07f096ad0348c","date":1323538980,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#getDocValues(IndexReader,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#getDocValues(IndexReader,String).mjava","sourceNew":"  private DocValues getDocValues(IndexReader reader, String field) throws IOException {\n    return MultiDocValues.getDocValues(reader, field);\n  }\n\n","sourceOld":"  private DocValues getDocValues(IndexReader reader, String field)\n      throws IOException {\n    boolean singleSeg = reader.getSequentialSubReaders().length == 1;\n    PerDocValues perDoc = singleSeg ? reader.getSequentialSubReaders()[0].perDocValues()\n        : MultiPerDocValues.getPerDocs(reader);\n    switch (random.nextInt(singleSeg ? 3 : 2)) { // case 2 only if single seg\n    case 0:\n      return perDoc.docValues(field);\n    case 1:\n      DocValues docValues = perDoc.docValues(field);\n      if (docValues != null) {\n        return docValues;\n      }\n      throw new RuntimeException(\"no such field \" + field);\n    case 2:// this only works if we are on a single seg index!\n      return reader.getSequentialSubReaders()[0].docValues(field);\n    }\n    throw new RuntimeException();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#getDocValues(IndexReader,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#getDocValues(IndexReader,String).mjava","sourceNew":"  private DocValues getDocValues(IndexReader reader, String field) throws IOException {\n    return MultiDocValues.getDocValues(reader, field);\n  }\n\n","sourceOld":"  private IndexDocValues getDocValues(IndexReader reader, String field)\n      throws IOException {\n    boolean singleSeg = reader.getSequentialSubReaders().length == 1;\n    PerDocValues perDoc = singleSeg ? reader.getSequentialSubReaders()[0].perDocValues()\n        : MultiPerDocValues.getPerDocs(reader);\n    switch (random.nextInt(singleSeg ? 3 : 2)) { // case 2 only if single seg\n    case 0:\n      return perDoc.docValues(field);\n    case 1:\n      IndexDocValues docValues = perDoc.docValues(field);\n      if (docValues != null) {\n        return docValues;\n      }\n      throw new RuntimeException(\"no such field \" + field);\n    case 2:// this only works if we are on a single seg index!\n      return reader.getSequentialSubReaders()[0].docValues(field);\n    }\n    throw new RuntimeException();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocValuesIndexing#getDocValues(IndexReader,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#getDocValues(IndexReader,String).mjava","sourceNew":"  private DocValues getDocValues(IndexReader reader, String field) throws IOException {\n    return MultiDocValues.getDocValues(reader, field);\n  }\n\n","sourceOld":"  private DocValues getDocValues(IndexReader reader, String field) throws IOException {\n    return MultiDocValues.getDocValues(reader, field);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2e8d7ba2175f47e280231533f7d3016249cea88b"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"b5c559c875836474bafae7243263d93b1b1965db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","cac4d5fa6c305b94f6232a70bda07f096ad0348c"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","41e5bbad683f7546e96f08ffe8bc50cf447f2586"],"cac4d5fa6c305b94f6232a70bda07f096ad0348c":["1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"],"4bd5d0a5ac72666f0bcbd50b535d2cc70dbf584b":["b5c559c875836474bafae7243263d93b1b1965db"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["4bd5d0a5ac72666f0bcbd50b535d2cc70dbf584b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"41e5bbad683f7546e96f08ffe8bc50cf447f2586":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["41e5bbad683f7546e96f08ffe8bc50cf447f2586"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["d638301ad1cfcae567b681b893bc8781f0ee48a5","1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"],"b5c559c875836474bafae7243263d93b1b1965db":["4bd5d0a5ac72666f0bcbd50b535d2cc70dbf584b"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"cac4d5fa6c305b94f6232a70bda07f096ad0348c":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"4bd5d0a5ac72666f0bcbd50b535d2cc70dbf584b":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","135621f3a0670a9394eb563224a3b76cc4dddc0f","b5c559c875836474bafae7243263d93b1b1965db","2e8d7ba2175f47e280231533f7d3016249cea88b","29ef99d61cda9641b6250bf9567329a6e65f901d"],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["cac4d5fa6c305b94f6232a70bda07f096ad0348c"],"41e5bbad683f7546e96f08ffe8bc50cf447f2586":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}