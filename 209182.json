{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#assertHardLiveDocs(IndexWriter,Set[Integer]).mjava","commits":[{"id":"578a4d73d90ecd838846cc32bf1098aaa262b524","date":1532504076,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#assertHardLiveDocs(IndexWriter,Set[Integer]).mjava","pathOld":"/dev/null","sourceNew":"  private void assertHardLiveDocs(IndexWriter writer, Set<Integer> uniqueDocs) throws IOException {\n    try (DirectoryReader reader = DirectoryReader.open(writer)) {\n      assertEquals(uniqueDocs.size(), reader.numDocs());\n      List<LeafReaderContext> leaves = reader.leaves();\n      for (LeafReaderContext ctx : leaves) {\n        LeafReader leaf = ctx.reader();\n        assertTrue(leaf instanceof SegmentReader);\n        SegmentReader sr = (SegmentReader) leaf;\n        if (sr.getHardLiveDocs() != null) {\n          Terms id = sr.terms(\"id\");\n          TermsEnum iterator = id.iterator();\n          Bits hardLiveDocs = sr.getHardLiveDocs();\n          Bits liveDocs = sr.getLiveDocs();\n          for (Integer dId : uniqueDocs) {\n            boolean mustBeHardDeleted = dId % 2 == 0;\n            if (iterator.seekExact(new BytesRef(dId.toString()))) {\n              PostingsEnum postings = iterator.postings(null);\n              while (postings.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n                if (liveDocs.get(postings.docID())) {\n                  assertTrue(hardLiveDocs.get(postings.docID()));\n                } else if (mustBeHardDeleted) {\n                  assertFalse(hardLiveDocs.get(postings.docID()));\n                } else {\n                  assertTrue(hardLiveDocs.get(postings.docID()));\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"578a4d73d90ecd838846cc32bf1098aaa262b524":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["578a4d73d90ecd838846cc32bf1098aaa262b524"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["578a4d73d90ecd838846cc32bf1098aaa262b524"],"578a4d73d90ecd838846cc32bf1098aaa262b524":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}