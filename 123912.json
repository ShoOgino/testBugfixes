{"path":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymGraphFilterFactory#onManagedResourceInitialized(NamedList[#],ManagedResource).mjava","commits":[{"id":"eb58c4024f450cc56f3a748012536d763700adb5","date":1495748960,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymGraphFilterFactory#onManagedResourceInitialized(NamedList[#],ManagedResource).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Called once, during core initialization, to initialize any analysis components\n   * that depend on the data managed by this resource. It is important that the\n   * analysis component is only initialized once during core initialization so that\n   * text analysis is consistent, especially in a distributed environment, as we\n   * don't want one server applying a different set of stop words than other servers.\n   */\n  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void onManagedResourceInitialized(NamedList<?> initArgs, final ManagedResource res)\n      throws SolrException\n  {\n    NamedList<Object> args = (NamedList<Object>)initArgs;\n    args.add(\"synonyms\", getResourceId());\n    args.add(\"expand\", \"false\");\n    args.add(\"format\", \"solr\");\n\n    Map<String,String> filtArgs = new HashMap<>();\n    for (Map.Entry<String,?> entry : args) {\n      filtArgs.put(entry.getKey(), entry.getValue().toString());\n    }\n    // create the actual filter factory that pulls the synonym mappings\n    // from synonymMappings using a custom parser implementation\n    delegate = new SynonymGraphFilterFactory(filtArgs) {\n      @Override\n      protected SynonymMap loadSynonyms\n          (ResourceLoader loader, String cname, boolean dedup, Analyzer analyzer)\n          throws IOException, ParseException {\n\n        ManagedSynonymParser parser =\n            new ManagedSynonymParser((SynonymManager)res, dedup, analyzer);\n        // null is safe here because there's no actual parsing done against a input Reader\n        parser.parse(null);\n        return parser.build();\n      }\n    };\n    try {\n      delegate.inform(res.getResourceLoader());\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymGraphFilterFactory#onManagedResourceInitialized(NamedList[#],ManagedResource).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Called once, during core initialization, to initialize any analysis components\n   * that depend on the data managed by this resource. It is important that the\n   * analysis component is only initialized once during core initialization so that\n   * text analysis is consistent, especially in a distributed environment, as we\n   * don't want one server applying a different set of stop words than other servers.\n   */\n  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void onManagedResourceInitialized(NamedList<?> initArgs, final ManagedResource res)\n      throws SolrException\n  {\n    NamedList<Object> args = (NamedList<Object>)initArgs;\n    args.add(\"synonyms\", getResourceId());\n    args.add(\"expand\", \"false\");\n    args.add(\"format\", \"solr\");\n\n    Map<String,String> filtArgs = new HashMap<>();\n    for (Map.Entry<String,?> entry : args) {\n      filtArgs.put(entry.getKey(), entry.getValue().toString());\n    }\n    // create the actual filter factory that pulls the synonym mappings\n    // from synonymMappings using a custom parser implementation\n    delegate = new SynonymGraphFilterFactory(filtArgs) {\n      @Override\n      protected SynonymMap loadSynonyms\n          (ResourceLoader loader, String cname, boolean dedup, Analyzer analyzer)\n          throws IOException, ParseException {\n\n        ManagedSynonymParser parser =\n            new ManagedSynonymParser((SynonymManager)res, dedup, analyzer);\n        // null is safe here because there's no actual parsing done against a input Reader\n        parser.parse(null);\n        return parser.build();\n      }\n    };\n    try {\n      delegate.inform(res.getResourceLoader());\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymGraphFilterFactory#onManagedResourceInitialized(NamedList[#],ManagedResource).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Called once, during core initialization, to initialize any analysis components\n   * that depend on the data managed by this resource. It is important that the\n   * analysis component is only initialized once during core initialization so that\n   * text analysis is consistent, especially in a distributed environment, as we\n   * don't want one server applying a different set of stop words than other servers.\n   */\n  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void onManagedResourceInitialized(NamedList<?> initArgs, final ManagedResource res)\n      throws SolrException\n  {\n    NamedList<Object> args = (NamedList<Object>)initArgs;\n    args.add(\"synonyms\", getResourceId());\n    args.add(\"expand\", \"false\");\n    args.add(\"format\", \"solr\");\n\n    Map<String,String> filtArgs = new HashMap<>();\n    for (Map.Entry<String,?> entry : args) {\n      filtArgs.put(entry.getKey(), entry.getValue().toString());\n    }\n    // create the actual filter factory that pulls the synonym mappings\n    // from synonymMappings using a custom parser implementation\n    delegate = new SynonymGraphFilterFactory(filtArgs) {\n      @Override\n      protected SynonymMap loadSynonyms\n          (ResourceLoader loader, String cname, boolean dedup, Analyzer analyzer)\n          throws IOException, ParseException {\n\n        ManagedSynonymParser parser =\n            new ManagedSynonymParser((SynonymManager)res, dedup, analyzer);\n        // null is safe here because there's no actual parsing done against a input Reader\n        parser.parse(null);\n        return parser.build();\n      }\n    };\n    try {\n      delegate.inform(res.getResourceLoader());\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eb58c4024f450cc56f3a748012536d763700adb5"],"eb58c4024f450cc56f3a748012536d763700adb5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eb58c4024f450cc56f3a748012536d763700adb5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"eb58c4024f450cc56f3a748012536d763700adb5":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","eb58c4024f450cc56f3a748012536d763700adb5","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}