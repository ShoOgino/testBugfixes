{"path":"src/java/org/apache/solr/search/SolrIndexSearcher#numDocs(Query,Query).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrIndexSearcher#numDocs(Query,Query).mjava","pathOld":"/dev/null","sourceNew":"   /**\n   * Returns the number of documents that match both <code>a</code> and <code>b</code>.\n   * <p>\n   * This method is cache-aware and may check as well as modify the cache.\n   *\n   * @param a\n   * @param b\n   * @return the numer of documents in the intersection between <code>a</code> and <code>b</code>.\n   * @throws IOException\n   */\n  public int numDocs(Query a, Query b) throws IOException {\n    return getDocSet(b).intersectionSize(getDocSet(a));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1940b60224897131cf61bb615e02af1b26558c8","date":1169501002,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrIndexSearcher#numDocs(Query,Query).mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#numDocs(Query,Query).mjava","sourceNew":"   /**\n   * Returns the number of documents that match both <code>a</code> and <code>b</code>.\n   * <p>\n   * This method is cache-aware and may check as well as modify the cache.\n   *\n   * @param a\n   * @param b\n   * @return the numer of documents in the intersection between <code>a</code> and <code>b</code>.\n   * @throws IOException\n   */\n  public int numDocs(Query a, Query b) throws IOException {\n    Query absA = QueryUtils.getAbs(a);\n    Query absB = QueryUtils.getAbs(b);     \n    DocSet positiveA = getPositiveDocSet(absA);\n    DocSet positiveB = getPositiveDocSet(absB);\n\n    // Negative query if absolute value different from original\n    if (a==absA) {\n      if (b==absB) return positiveA.intersectionSize(positiveB);\n      return positiveA.andNotSize(positiveB);\n    }\n    if (b==absB) return positiveB.andNotSize(positiveA);\n\n    // if both negative, we need to create a temp DocSet since we\n    // don't have a counting method that takes three.\n    DocSet all = getPositiveDocSet(matchAllDocsQuery);\n\n    // -a -b == *:*.andNot(a).andNotSize(b) == *.*.andNotSize(a.union(b))\n    // we use the last form since the intermediate DocSet should normally be smaller.\n    return all.andNotSize(positiveA.union(positiveB));\n  }\n\n","sourceOld":"   /**\n   * Returns the number of documents that match both <code>a</code> and <code>b</code>.\n   * <p>\n   * This method is cache-aware and may check as well as modify the cache.\n   *\n   * @param a\n   * @param b\n   * @return the numer of documents in the intersection between <code>a</code> and <code>b</code>.\n   * @throws IOException\n   */\n  public int numDocs(Query a, Query b) throws IOException {\n    return getDocSet(b).intersectionSize(getDocSet(a));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#numDocs(Query,Query).mjava","pathOld":"src/java/org/apache/solr/search/SolrIndexSearcher#numDocs(Query,Query).mjava","sourceNew":"   /**\n   * Returns the number of documents that match both <code>a</code> and <code>b</code>.\n   * <p>\n   * This method is cache-aware and may check as well as modify the cache.\n   *\n   * @param a\n   * @param b\n   * @return the numer of documents in the intersection between <code>a</code> and <code>b</code>.\n   * @throws IOException\n   */\n  public int numDocs(Query a, Query b) throws IOException {\n    Query absA = QueryUtils.getAbs(a);\n    Query absB = QueryUtils.getAbs(b);     \n    DocSet positiveA = getPositiveDocSet(absA);\n    DocSet positiveB = getPositiveDocSet(absB);\n\n    // Negative query if absolute value different from original\n    if (a==absA) {\n      if (b==absB) return positiveA.intersectionSize(positiveB);\n      return positiveA.andNotSize(positiveB);\n    }\n    if (b==absB) return positiveB.andNotSize(positiveA);\n\n    // if both negative, we need to create a temp DocSet since we\n    // don't have a counting method that takes three.\n    DocSet all = getPositiveDocSet(matchAllDocsQuery);\n\n    // -a -b == *:*.andNot(a).andNotSize(b) == *.*.andNotSize(a.union(b))\n    // we use the last form since the intermediate DocSet should normally be smaller.\n    return all.andNotSize(positiveA.union(positiveB));\n  }\n\n","sourceOld":"   /**\n   * Returns the number of documents that match both <code>a</code> and <code>b</code>.\n   * <p>\n   * This method is cache-aware and may check as well as modify the cache.\n   *\n   * @param a\n   * @param b\n   * @return the numer of documents in the intersection between <code>a</code> and <code>b</code>.\n   * @throws IOException\n   */\n  public int numDocs(Query a, Query b) throws IOException {\n    Query absA = QueryUtils.getAbs(a);\n    Query absB = QueryUtils.getAbs(b);     \n    DocSet positiveA = getPositiveDocSet(absA);\n    DocSet positiveB = getPositiveDocSet(absB);\n\n    // Negative query if absolute value different from original\n    if (a==absA) {\n      if (b==absB) return positiveA.intersectionSize(positiveB);\n      return positiveA.andNotSize(positiveB);\n    }\n    if (b==absB) return positiveB.andNotSize(positiveA);\n\n    // if both negative, we need to create a temp DocSet since we\n    // don't have a counting method that takes three.\n    DocSet all = getPositiveDocSet(matchAllDocsQuery);\n\n    // -a -b == *:*.andNot(a).andNotSize(b) == *.*.andNotSize(a.union(b))\n    // we use the last form since the intermediate DocSet should normally be smaller.\n    return all.andNotSize(positiveA.union(positiveB));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b1940b60224897131cf61bb615e02af1b26558c8":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["b1940b60224897131cf61bb615e02af1b26558c8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["b1940b60224897131cf61bb615e02af1b26558c8"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b1940b60224897131cf61bb615e02af1b26558c8":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}