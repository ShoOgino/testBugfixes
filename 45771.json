{"path":"solr/core/src/test/org/apache/solr/analysis/TestBeiderMorseFilterFactory#testBasics().mjava","commits":[{"id":"6e3cb3ab0ae0e80cf24f56515b246da9de46c0b5","date":1325088052,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestBeiderMorseFilterFactory#testBasics().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasics() throws Exception {\n    BeiderMorseFilterFactory factory = new BeiderMorseFilterFactory();\n    factory.init(DEFAULT_VERSION_PARAM);\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"Weinberg\"), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(ts,\n        new String[] { \"vDnbirk\", \"vanbirk\", \"vinbirk\", \"wDnbirk\", \"wanbirk\", \"winbirk\" },\n        new int[] { 0, 0, 0, 0, 0, 0 },\n        new int[] { 8, 8, 8, 8, 8, 8 },\n        new int[] { 1, 0, 0, 0, 0, 0 });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6d3ad4230a9094e97925f9395cf6db4729284d9","date":1335503918,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestBeiderMorseFilterFactory#testBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestBeiderMorseFilterFactory#testBasics().mjava","sourceNew":"  public void testBasics() throws Exception {\n    BeiderMorseFilterFactory factory = new BeiderMorseFilterFactory();\n    factory.setLuceneMatchVersion(DEFAULT_VERSION);\n    factory.init(EMPTY_PARAMS);\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"Weinberg\"), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(ts,\n        new String[] { \"vDnbirk\", \"vanbirk\", \"vinbirk\", \"wDnbirk\", \"wanbirk\", \"winbirk\" },\n        new int[] { 0, 0, 0, 0, 0, 0 },\n        new int[] { 8, 8, 8, 8, 8, 8 },\n        new int[] { 1, 0, 0, 0, 0, 0 });\n  }\n\n","sourceOld":"  public void testBasics() throws Exception {\n    BeiderMorseFilterFactory factory = new BeiderMorseFilterFactory();\n    factory.init(DEFAULT_VERSION_PARAM);\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"Weinberg\"), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(ts,\n        new String[] { \"vDnbirk\", \"vanbirk\", \"vinbirk\", \"wDnbirk\", \"wanbirk\", \"winbirk\" },\n        new int[] { 0, 0, 0, 0, 0, 0 },\n        new int[] { 8, 8, 8, 8, 8, 8 },\n        new int[] { 1, 0, 0, 0, 0, 0 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92ed69fd02d759d98f62e869eaa64e64e22302bf","date":1336612003,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestBeiderMorseFilterFactory#testBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestBeiderMorseFilterFactory#testBasics().mjava","sourceNew":"  public void testBasics() throws Exception {\n    BeiderMorseFilterFactory factory = new BeiderMorseFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    Map<String, String> args = Collections.emptyMap();\n    factory.init(args);\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"Weinberg\"), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(ts,\n        new String[] { \"vDnbirk\", \"vanbirk\", \"vinbirk\", \"wDnbirk\", \"wanbirk\", \"winbirk\" },\n        new int[] { 0, 0, 0, 0, 0, 0 },\n        new int[] { 8, 8, 8, 8, 8, 8 },\n        new int[] { 1, 0, 0, 0, 0, 0 });\n  }\n\n","sourceOld":"  public void testBasics() throws Exception {\n    BeiderMorseFilterFactory factory = new BeiderMorseFilterFactory();\n    factory.setLuceneMatchVersion(DEFAULT_VERSION);\n    factory.init(EMPTY_PARAMS);\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"Weinberg\"), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(ts,\n        new String[] { \"vDnbirk\", \"vanbirk\", \"vinbirk\", \"wDnbirk\", \"wanbirk\", \"winbirk\" },\n        new int[] { 0, 0, 0, 0, 0, 0 },\n        new int[] { 8, 8, 8, 8, 8, 8 },\n        new int[] { 1, 0, 0, 0, 0, 0 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3241e06e642196396b80bb293acd9c0814d079e0","date":1343094999,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestBeiderMorseFilterFactory#testBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestBeiderMorseFilterFactory#testBasics().mjava","sourceNew":"  public void testBasics() throws Exception {\n    BeiderMorseFilterFactory factory = new BeiderMorseFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    Map<String, String> args = Collections.emptyMap();\n    factory.init(args);\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"Weinberg\"), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(ts,\n        new String[] { \"vDnbirk\", \"vanbirk\", \"vinbirk\", \"wDnbirk\", \"wanbirk\", \"winbirk\" },\n        new int[] { 0, 0, 0, 0, 0, 0 },\n        new int[] { 8, 8, 8, 8, 8, 8 },\n        new int[] { 1, 0, 0, 0, 0, 0 });\n  }\n\n","sourceOld":"  public void testBasics() throws Exception {\n    BeiderMorseFilterFactory factory = new BeiderMorseFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    Map<String, String> args = Collections.emptyMap();\n    factory.init(args);\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"Weinberg\"), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(ts,\n        new String[] { \"vDnbirk\", \"vanbirk\", \"vinbirk\", \"wDnbirk\", \"wanbirk\", \"winbirk\" },\n        new int[] { 0, 0, 0, 0, 0, 0 },\n        new int[] { 8, 8, 8, 8, 8, 8 },\n        new int[] { 1, 0, 0, 0, 0, 0 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestBeiderMorseFilterFactory#testBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestBeiderMorseFilterFactory#testBasics().mjava","sourceNew":"  public void testBasics() throws Exception {\n    BeiderMorseFilterFactory factory = new BeiderMorseFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    Map<String, String> args = Collections.emptyMap();\n    factory.init(args);\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"Weinberg\"), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(ts,\n        new String[] { \"vDnbirk\", \"vanbirk\", \"vinbirk\", \"wDnbirk\", \"wanbirk\", \"winbirk\" },\n        new int[] { 0, 0, 0, 0, 0, 0 },\n        new int[] { 8, 8, 8, 8, 8, 8 },\n        new int[] { 1, 0, 0, 0, 0, 0 });\n  }\n\n","sourceOld":"  public void testBasics() throws Exception {\n    BeiderMorseFilterFactory factory = new BeiderMorseFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    Map<String, String> args = Collections.emptyMap();\n    factory.init(args);\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"Weinberg\"), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(ts,\n        new String[] { \"vDnbirk\", \"vanbirk\", \"vinbirk\", \"wDnbirk\", \"wanbirk\", \"winbirk\" },\n        new int[] { 0, 0, 0, 0, 0, 0 },\n        new int[] { 8, 8, 8, 8, 8, 8 },\n        new int[] { 1, 0, 0, 0, 0, 0 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestBeiderMorseFilterFactory#testBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestBeiderMorseFilterFactory#testBasics().mjava","sourceNew":"  public void testBasics() throws Exception {\n    BeiderMorseFilterFactory factory = new BeiderMorseFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    Map<String, String> args = Collections.emptyMap();\n    factory.init(args);\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"Weinberg\"), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(ts,\n        new String[] { \"vDnbirk\", \"vanbirk\", \"vinbirk\", \"wDnbirk\", \"wanbirk\", \"winbirk\" },\n        new int[] { 0, 0, 0, 0, 0, 0 },\n        new int[] { 8, 8, 8, 8, 8, 8 },\n        new int[] { 1, 0, 0, 0, 0, 0 });\n  }\n\n","sourceOld":"  public void testBasics() throws Exception {\n    BeiderMorseFilterFactory factory = new BeiderMorseFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    Map<String, String> args = Collections.emptyMap();\n    factory.init(args);\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"Weinberg\"), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(ts,\n        new String[] { \"vDnbirk\", \"vanbirk\", \"vinbirk\", \"wDnbirk\", \"wanbirk\", \"winbirk\" },\n        new int[] { 0, 0, 0, 0, 0, 0 },\n        new int[] { 8, 8, 8, 8, 8, 8 },\n        new int[] { 1, 0, 0, 0, 0, 0 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestBeiderMorseFilterFactory#testBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestBeiderMorseFilterFactory#testBasics().mjava","sourceNew":"  public void testBasics() throws Exception {\n    BeiderMorseFilterFactory factory = new BeiderMorseFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    Map<String, String> args = Collections.emptyMap();\n    factory.init(args);\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"Weinberg\"), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(ts,\n        new String[] { \"vDnbirk\", \"vanbirk\", \"vinbirk\", \"wDnbirk\", \"wanbirk\", \"winbirk\" },\n        new int[] { 0, 0, 0, 0, 0, 0 },\n        new int[] { 8, 8, 8, 8, 8, 8 },\n        new int[] { 1, 0, 0, 0, 0, 0 });\n  }\n\n","sourceOld":"  public void testBasics() throws Exception {\n    BeiderMorseFilterFactory factory = new BeiderMorseFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    Map<String, String> args = Collections.emptyMap();\n    factory.init(args);\n    TokenStream ts = factory.create(new MockTokenizer(new StringReader(\"Weinberg\"), MockTokenizer.WHITESPACE, false));\n    assertTokenStreamContents(ts,\n        new String[] { \"vDnbirk\", \"vanbirk\", \"vinbirk\", \"wDnbirk\", \"wanbirk\", \"winbirk\" },\n        new int[] { 0, 0, 0, 0, 0, 0 },\n        new int[] { 8, 8, 8, 8, 8, 8 },\n        new int[] { 1, 0, 0, 0, 0, 0 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["92ed69fd02d759d98f62e869eaa64e64e22302bf","5a1a22b1ad88b436661458df567f3fdb446392a4"],"d6d3ad4230a9094e97925f9395cf6db4729284d9":["6e3cb3ab0ae0e80cf24f56515b246da9de46c0b5"],"92ed69fd02d759d98f62e869eaa64e64e22302bf":["d6d3ad4230a9094e97925f9395cf6db4729284d9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["92ed69fd02d759d98f62e869eaa64e64e22302bf","5a1a22b1ad88b436661458df567f3fdb446392a4"],"6e3cb3ab0ae0e80cf24f56515b246da9de46c0b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["92ed69fd02d759d98f62e869eaa64e64e22302bf","3241e06e642196396b80bb293acd9c0814d079e0"],"3241e06e642196396b80bb293acd9c0814d079e0":["92ed69fd02d759d98f62e869eaa64e64e22302bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a1a22b1ad88b436661458df567f3fdb446392a4"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"d6d3ad4230a9094e97925f9395cf6db4729284d9":["92ed69fd02d759d98f62e869eaa64e64e22302bf"],"92ed69fd02d759d98f62e869eaa64e64e22302bf":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","5a1a22b1ad88b436661458df567f3fdb446392a4","3241e06e642196396b80bb293acd9c0814d079e0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6e3cb3ab0ae0e80cf24f56515b246da9de46c0b5"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"6e3cb3ab0ae0e80cf24f56515b246da9de46c0b5":["d6d3ad4230a9094e97925f9395cf6db4729284d9"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3241e06e642196396b80bb293acd9c0814d079e0":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}