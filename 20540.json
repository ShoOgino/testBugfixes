{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilter#incrementToken().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilter#incrementToken().mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    while (!exhausted && input.incrementToken()) {\n      char[] term = termAttribute.buffer();\n      int termLength = termAttribute.length();\n      lastEndOffset = offsetAttribute.endOffset();\n      \n      if (termLength > 0 && term[termLength - 1] == '-') {\n        // a hyphenated word\n        // capture the state of the first token only\n        if (savedState == null) {\n          savedState = captureState();\n        }\n        hyphenated.append(term, 0, termLength - 1);\n      } else if (savedState == null) {\n        // not part of a hyphenated word.\n        return true;\n      } else {\n        // the final portion of a hyphenated word\n        hyphenated.append(term, 0, termLength);\n        unhyphenate();\n        return true;\n      }\n    }\n    \n    exhausted = true;\n\n    if (savedState != null) {\n      // the final term ends with a hyphen\n      // add back the hyphen, for backwards compatibility.\n      hyphenated.append('-');\n      unhyphenate();\n      return true;\n    }\n    \n    return false;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    while (!exhausted && input.incrementToken()) {\n      char[] term = termAttribute.buffer();\n      int termLength = termAttribute.length();\n      lastEndOffset = offsetAttribute.endOffset();\n      \n      if (termLength > 0 && term[termLength - 1] == '-') {\n        // a hyphenated word\n        // capture the state of the first token only\n        if (savedState == null) {\n          savedState = captureState();\n        }\n        hyphenated.append(term, 0, termLength - 1);\n      } else if (savedState == null) {\n        // not part of a hyphenated word.\n        return true;\n      } else {\n        // the final portion of a hyphenated word\n        hyphenated.append(term, 0, termLength);\n        unhyphenate();\n        return true;\n      }\n    }\n    \n    exhausted = true;\n\n    if (savedState != null) {\n      // the final term ends with a hyphen\n      // add back the hyphen, for backwards compatibility.\n      hyphenated.append('-');\n      unhyphenate();\n      return true;\n    }\n    \n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilter#incrementToken().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilter#incrementToken().mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    while (!exhausted && input.incrementToken()) {\n      char[] term = termAttribute.buffer();\n      int termLength = termAttribute.length();\n      lastEndOffset = offsetAttribute.endOffset();\n      \n      if (termLength > 0 && term[termLength - 1] == '-') {\n        // a hyphenated word\n        // capture the state of the first token only\n        if (savedState == null) {\n          savedState = captureState();\n        }\n        hyphenated.append(term, 0, termLength - 1);\n      } else if (savedState == null) {\n        // not part of a hyphenated word.\n        return true;\n      } else {\n        // the final portion of a hyphenated word\n        hyphenated.append(term, 0, termLength);\n        unhyphenate();\n        return true;\n      }\n    }\n    \n    exhausted = true;\n\n    if (savedState != null) {\n      // the final term ends with a hyphen\n      // add back the hyphen, for backwards compatibility.\n      hyphenated.append('-');\n      unhyphenate();\n      return true;\n    }\n    \n    return false;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    while (!exhausted && input.incrementToken()) {\n      char[] term = termAttribute.buffer();\n      int termLength = termAttribute.length();\n      lastEndOffset = offsetAttribute.endOffset();\n      \n      if (termLength > 0 && term[termLength - 1] == '-') {\n        // a hyphenated word\n        // capture the state of the first token only\n        if (savedState == null) {\n          savedState = captureState();\n        }\n        hyphenated.append(term, 0, termLength - 1);\n      } else if (savedState == null) {\n        // not part of a hyphenated word.\n        return true;\n      } else {\n        // the final portion of a hyphenated word\n        hyphenated.append(term, 0, termLength);\n        unhyphenate();\n        return true;\n      }\n    }\n    \n    exhausted = true;\n\n    if (savedState != null) {\n      // the final term ends with a hyphen\n      // add back the hyphen, for backwards compatibility.\n      hyphenated.append('-');\n      unhyphenate();\n      return true;\n    }\n    \n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilter#incrementToken().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilter#incrementToken().mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    while (!exhausted && input.incrementToken()) {\n      char[] term = termAttribute.buffer();\n      int termLength = termAttribute.length();\n      lastEndOffset = offsetAttribute.endOffset();\n      \n      if (termLength > 0 && term[termLength - 1] == '-') {\n        // a hyphenated word\n        // capture the state of the first token only\n        if (savedState == null) {\n          savedState = captureState();\n        }\n        hyphenated.append(term, 0, termLength - 1);\n      } else if (savedState == null) {\n        // not part of a hyphenated word.\n        return true;\n      } else {\n        // the final portion of a hyphenated word\n        hyphenated.append(term, 0, termLength);\n        unhyphenate();\n        return true;\n      }\n    }\n    \n    exhausted = true;\n\n    if (savedState != null) {\n      // the final term ends with a hyphen\n      // add back the hyphen, for backwards compatibility.\n      hyphenated.append('-');\n      unhyphenate();\n      return true;\n    }\n    \n    return false;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    while (!exhausted && input.incrementToken()) {\n      char[] term = termAttribute.buffer();\n      int termLength = termAttribute.length();\n      lastEndOffset = offsetAttribute.endOffset();\n      \n      if (termLength > 0 && term[termLength - 1] == '-') {\n        // a hyphenated word\n        // capture the state of the first token only\n        if (savedState == null) {\n          savedState = captureState();\n        }\n        hyphenated.append(term, 0, termLength - 1);\n      } else if (savedState == null) {\n        // not part of a hyphenated word.\n        return true;\n      } else {\n        // the final portion of a hyphenated word\n        hyphenated.append(term, 0, termLength);\n        unhyphenate();\n        return true;\n      }\n    }\n    \n    exhausted = true;\n\n    if (savedState != null) {\n      // the final term ends with a hyphen\n      // add back the hyphen, for backwards compatibility.\n      hyphenated.append('-');\n      unhyphenate();\n      return true;\n    }\n    \n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a80a37ae73034270b57bfd57a44f8fcadc952fa0","date":1515440719,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilter#incrementToken().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    while (!exhausted && input.incrementToken()) {\n      char[] term = termAttribute.buffer();\n      int termLength = termAttribute.length();\n      lastEndOffset = offsetAttribute.endOffset();\n      \n      if (termLength > 0 && term[termLength - 1] == '-') {\n        // a hyphenated word\n        // capture the state of the first token only\n        if (savedState == null) {\n          savedState = captureState();\n        }\n        hyphenated.append(term, 0, termLength - 1);\n      } else if (savedState == null) {\n        // not part of a hyphenated word.\n        return true;\n      } else {\n        // the final portion of a hyphenated word\n        hyphenated.append(term, 0, termLength);\n        unhyphenate();\n        return true;\n      }\n    }\n    \n    exhausted = true;\n\n    if (savedState != null) {\n      // the final term ends with a hyphen\n      // add back the hyphen, for backwards compatibility.\n      hyphenated.append('-');\n      unhyphenate();\n      return true;\n    }\n    \n    return false;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    while (!exhausted && input.incrementToken()) {\n      char[] term = termAttribute.buffer();\n      int termLength = termAttribute.length();\n      lastEndOffset = offsetAttribute.endOffset();\n      \n      if (termLength > 0 && term[termLength - 1] == '-') {\n        // a hyphenated word\n        // capture the state of the first token only\n        if (savedState == null) {\n          savedState = captureState();\n        }\n        hyphenated.append(term, 0, termLength - 1);\n      } else if (savedState == null) {\n        // not part of a hyphenated word.\n        return true;\n      } else {\n        // the final portion of a hyphenated word\n        hyphenated.append(term, 0, termLength);\n        unhyphenate();\n        return true;\n      }\n    }\n    \n    exhausted = true;\n\n    if (savedState != null) {\n      // the final term ends with a hyphen\n      // add back the hyphen, for backwards compatibility.\n      hyphenated.append('-');\n      unhyphenate();\n      return true;\n    }\n    \n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilter#incrementToken().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    while (!exhausted && input.incrementToken()) {\n      char[] term = termAttribute.buffer();\n      int termLength = termAttribute.length();\n      lastEndOffset = offsetAttribute.endOffset();\n      \n      if (termLength > 0 && term[termLength - 1] == '-') {\n        // a hyphenated word\n        // capture the state of the first token only\n        if (savedState == null) {\n          savedState = captureState();\n        }\n        hyphenated.append(term, 0, termLength - 1);\n      } else if (savedState == null) {\n        // not part of a hyphenated word.\n        return true;\n      } else {\n        // the final portion of a hyphenated word\n        hyphenated.append(term, 0, termLength);\n        unhyphenate();\n        return true;\n      }\n    }\n    \n    exhausted = true;\n\n    if (savedState != null) {\n      // the final term ends with a hyphen\n      // add back the hyphen, for backwards compatibility.\n      hyphenated.append('-');\n      unhyphenate();\n      return true;\n    }\n    \n    return false;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    while (!exhausted && input.incrementToken()) {\n      char[] term = termAttribute.buffer();\n      int termLength = termAttribute.length();\n      lastEndOffset = offsetAttribute.endOffset();\n      \n      if (termLength > 0 && term[termLength - 1] == '-') {\n        // a hyphenated word\n        // capture the state of the first token only\n        if (savedState == null) {\n          savedState = captureState();\n        }\n        hyphenated.append(term, 0, termLength - 1);\n      } else if (savedState == null) {\n        // not part of a hyphenated word.\n        return true;\n      } else {\n        // the final portion of a hyphenated word\n        hyphenated.append(term, 0, termLength);\n        unhyphenate();\n        return true;\n      }\n    }\n    \n    exhausted = true;\n\n    if (savedState != null) {\n      // the final term ends with a hyphen\n      // add back the hyphen, for backwards compatibility.\n      hyphenated.append('-');\n      unhyphenate();\n      return true;\n    }\n    \n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["19275ba31e621f6da1b83bf13af75233876fd3d4","a80a37ae73034270b57bfd57a44f8fcadc952fa0"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a80a37ae73034270b57bfd57a44f8fcadc952fa0":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a80a37ae73034270b57bfd57a44f8fcadc952fa0":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["b94236357aaa22b76c10629851fe4e376e0cea82","a80a37ae73034270b57bfd57a44f8fcadc952fa0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}