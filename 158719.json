{"path":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#MockDirectoryWrapper(Random,Directory).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#MockDirectoryWrapper(Random,Directory).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/store/MockDirectoryWrapper#MockDirectoryWrapper(Random,Directory).mjava","sourceNew":"  public MockDirectoryWrapper(Random random, Directory delegate) {\n    this.delegate = delegate;\n    // must make a private random since our methods are\n    // called from different threads; else test failures may\n    // not be reproducible from the original seed\n    this.randomState = new Random(random.nextInt());\n    this.throttledOutput = new ThrottledIndexOutput(ThrottledIndexOutput\n        .mBitsToBytes(40 + randomState.nextInt(10)), 5 + randomState.nextInt(5), null);\n    // force wrapping of lockfactory\n    try {\n      setLockFactory(new MockLockFactoryWrapper(this, delegate.getLockFactory()));\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    init();\n  }\n\n","sourceOld":"  public MockDirectoryWrapper(Random random, Directory delegate) {\n    this.delegate = delegate;\n    // must make a private random since our methods are\n    // called from different threads; else test failures may\n    // not be reproducible from the original seed\n    this.randomState = new Random(random.nextInt());\n    this.throttledOutput = new ThrottledIndexOutput(ThrottledIndexOutput\n        .mBitsToBytes(40 + randomState.nextInt(10)), 5 + randomState.nextInt(5), null);\n    // force wrapping of lockfactory\n    try {\n      setLockFactory(new MockLockFactoryWrapper(this, delegate.getLockFactory()));\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    init();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e818a930274c36c14447e50ba474ebf7c8d27f73","date":1336312324,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#MockDirectoryWrapper(Random,Directory).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#MockDirectoryWrapper(Random,Directory).mjava","sourceNew":"  public MockDirectoryWrapper(Random random, Directory delegate) {\n    this.delegate = delegate;\n    // must make a private random since our methods are\n    // called from different threads; else test failures may\n    // not be reproducible from the original seed\n    this.randomState = new Random(random.nextInt());\n    this.throttledOutput = new ThrottledIndexOutput(ThrottledIndexOutput\n        .mBitsToBytes(40 + randomState.nextInt(10)), 5 + randomState.nextInt(5), null);\n    // force wrapping of lockfactory\n    try {\n      setLockFactory(new MockLockFactoryWrapper(this, delegate.getLockFactory()));\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n\n    // 2% of the time use rate limiter\n    if (randomState.nextInt(50) == 17) {\n      // Use RateLimiter\n      double maxMBPerSec = 10 + 5*(randomState.nextDouble()-0.5);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: will rate limit output IO to \" + maxMBPerSec + \" MB/sec\");\n      }\n      rateLimiter = new RateLimiter(maxMBPerSec);\n    } else {\n      rateLimiter = null;\n    }\n\n    init();\n  }\n\n","sourceOld":"  public MockDirectoryWrapper(Random random, Directory delegate) {\n    this.delegate = delegate;\n    // must make a private random since our methods are\n    // called from different threads; else test failures may\n    // not be reproducible from the original seed\n    this.randomState = new Random(random.nextInt());\n    this.throttledOutput = new ThrottledIndexOutput(ThrottledIndexOutput\n        .mBitsToBytes(40 + randomState.nextInt(10)), 5 + randomState.nextInt(5), null);\n    // force wrapping of lockfactory\n    try {\n      setLockFactory(new MockLockFactoryWrapper(this, delegate.getLockFactory()));\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    init();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d19974432be9aed28ee7dca73bdf01d139e763a9","date":1342822166,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#MockDirectoryWrapper(Random,Directory).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#MockDirectoryWrapper(Random,Directory).mjava","sourceNew":"  public MockDirectoryWrapper(Random random, Directory delegate) {\n    super(delegate);\n    // must make a private random since our methods are\n    // called from different threads; else test failures may\n    // not be reproducible from the original seed\n    this.randomState = new Random(random.nextInt());\n    this.throttledOutput = new ThrottledIndexOutput(ThrottledIndexOutput\n        .mBitsToBytes(40 + randomState.nextInt(10)), 5 + randomState.nextInt(5), null);\n    // force wrapping of lockfactory\n    try {\n      setLockFactory(new MockLockFactoryWrapper(this, delegate.getLockFactory()));\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n\n    // 2% of the time use rate limiter\n    if (randomState.nextInt(50) == 17) {\n      // Use RateLimiter\n      double maxMBPerSec = 10 + 5*(randomState.nextDouble()-0.5);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: will rate limit output IO to \" + maxMBPerSec + \" MB/sec\");\n      }\n      rateLimiter = new RateLimiter(maxMBPerSec);\n    } else {\n      rateLimiter = null;\n    }\n\n    init();\n  }\n\n","sourceOld":"  public MockDirectoryWrapper(Random random, Directory delegate) {\n    this.delegate = delegate;\n    // must make a private random since our methods are\n    // called from different threads; else test failures may\n    // not be reproducible from the original seed\n    this.randomState = new Random(random.nextInt());\n    this.throttledOutput = new ThrottledIndexOutput(ThrottledIndexOutput\n        .mBitsToBytes(40 + randomState.nextInt(10)), 5 + randomState.nextInt(5), null);\n    // force wrapping of lockfactory\n    try {\n      setLockFactory(new MockLockFactoryWrapper(this, delegate.getLockFactory()));\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n\n    // 2% of the time use rate limiter\n    if (randomState.nextInt(50) == 17) {\n      // Use RateLimiter\n      double maxMBPerSec = 10 + 5*(randomState.nextDouble()-0.5);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: will rate limit output IO to \" + maxMBPerSec + \" MB/sec\");\n      }\n      rateLimiter = new RateLimiter(maxMBPerSec);\n    } else {\n      rateLimiter = null;\n    }\n\n    init();\n  }\n\n","bugFix":["53a31399f2471493d67b19a95c028a74e0113b6a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#MockDirectoryWrapper(Random,Directory).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#MockDirectoryWrapper(Random,Directory).mjava","sourceNew":"  public MockDirectoryWrapper(Random random, Directory delegate) {\n    super(delegate);\n    // must make a private random since our methods are\n    // called from different threads; else test failures may\n    // not be reproducible from the original seed\n    this.randomState = new Random(random.nextInt());\n    this.throttledOutput = new ThrottledIndexOutput(ThrottledIndexOutput\n        .mBitsToBytes(40 + randomState.nextInt(10)), 5 + randomState.nextInt(5), null);\n    // force wrapping of lockfactory\n    try {\n      setLockFactory(new MockLockFactoryWrapper(this, delegate.getLockFactory()));\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n\n    // 2% of the time use rate limiter\n    if (randomState.nextInt(50) == 17) {\n      // Use RateLimiter\n      double maxMBPerSec = 10 + 5*(randomState.nextDouble()-0.5);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: will rate limit output IO to \" + maxMBPerSec + \" MB/sec\");\n      }\n      rateLimiter = new RateLimiter(maxMBPerSec);\n    } else {\n      rateLimiter = null;\n    }\n\n    init();\n  }\n\n","sourceOld":"  public MockDirectoryWrapper(Random random, Directory delegate) {\n    this.delegate = delegate;\n    // must make a private random since our methods are\n    // called from different threads; else test failures may\n    // not be reproducible from the original seed\n    this.randomState = new Random(random.nextInt());\n    this.throttledOutput = new ThrottledIndexOutput(ThrottledIndexOutput\n        .mBitsToBytes(40 + randomState.nextInt(10)), 5 + randomState.nextInt(5), null);\n    // force wrapping of lockfactory\n    try {\n      setLockFactory(new MockLockFactoryWrapper(this, delegate.getLockFactory()));\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n\n    // 2% of the time use rate limiter\n    if (randomState.nextInt(50) == 17) {\n      // Use RateLimiter\n      double maxMBPerSec = 10 + 5*(randomState.nextDouble()-0.5);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: will rate limit output IO to \" + maxMBPerSec + \" MB/sec\");\n      }\n      rateLimiter = new RateLimiter(maxMBPerSec);\n    } else {\n      rateLimiter = null;\n    }\n\n    init();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#MockDirectoryWrapper(Random,Directory).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#MockDirectoryWrapper(Random,Directory).mjava","sourceNew":"  public MockDirectoryWrapper(Random random, Directory delegate) {\n    super(delegate);\n    // must make a private random since our methods are\n    // called from different threads; else test failures may\n    // not be reproducible from the original seed\n    this.randomState = new Random(random.nextInt());\n    this.throttledOutput = new ThrottledIndexOutput(ThrottledIndexOutput\n        .mBitsToBytes(40 + randomState.nextInt(10)), 5 + randomState.nextInt(5), null);\n    // force wrapping of lockfactory\n    try {\n      setLockFactory(new MockLockFactoryWrapper(this, delegate.getLockFactory()));\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n\n    // 2% of the time use rate limiter\n    if (randomState.nextInt(50) == 17) {\n      // Use RateLimiter\n      double maxMBPerSec = 10 + 5*(randomState.nextDouble()-0.5);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: will rate limit output IO to \" + maxMBPerSec + \" MB/sec\");\n      }\n      rateLimiter = new RateLimiter(maxMBPerSec);\n    } else {\n      rateLimiter = null;\n    }\n\n    init();\n  }\n\n","sourceOld":"  public MockDirectoryWrapper(Random random, Directory delegate) {\n    this.delegate = delegate;\n    // must make a private random since our methods are\n    // called from different threads; else test failures may\n    // not be reproducible from the original seed\n    this.randomState = new Random(random.nextInt());\n    this.throttledOutput = new ThrottledIndexOutput(ThrottledIndexOutput\n        .mBitsToBytes(40 + randomState.nextInt(10)), 5 + randomState.nextInt(5), null);\n    // force wrapping of lockfactory\n    try {\n      setLockFactory(new MockLockFactoryWrapper(this, delegate.getLockFactory()));\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n\n    // 2% of the time use rate limiter\n    if (randomState.nextInt(50) == 17) {\n      // Use RateLimiter\n      double maxMBPerSec = 10 + 5*(randomState.nextDouble()-0.5);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: will rate limit output IO to \" + maxMBPerSec + \" MB/sec\");\n      }\n      rateLimiter = new RateLimiter(maxMBPerSec);\n    } else {\n      rateLimiter = null;\n    }\n\n    init();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0cc32d96f128d1904bfd6876bf8b7e4620ed8da0","date":1345003667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#MockDirectoryWrapper(Random,Directory).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#MockDirectoryWrapper(Random,Directory).mjava","sourceNew":"  public MockDirectoryWrapper(Random random, Directory delegate) {\n    super(delegate);\n    // must make a private random since our methods are\n    // called from different threads; else test failures may\n    // not be reproducible from the original seed\n    this.randomState = new Random(random.nextInt());\n    this.throttledOutput = new ThrottledIndexOutput(ThrottledIndexOutput\n        .mBitsToBytes(40 + randomState.nextInt(10)), 5 + randomState.nextInt(5), null);\n    // force wrapping of lockfactory\n    this.lockFactory = new MockLockFactoryWrapper(this, delegate.getLockFactory());\n\n    // 2% of the time use rate limiter\n    if (randomState.nextInt(50) == 17) {\n      // Use RateLimiter\n      double maxMBPerSec = 10 + 5*(randomState.nextDouble()-0.5);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: will rate limit output IO to \" + maxMBPerSec + \" MB/sec\");\n      }\n      rateLimiter = new RateLimiter(maxMBPerSec);\n    } else {\n      rateLimiter = null;\n    }\n\n    init();\n  }\n\n","sourceOld":"  public MockDirectoryWrapper(Random random, Directory delegate) {\n    super(delegate);\n    // must make a private random since our methods are\n    // called from different threads; else test failures may\n    // not be reproducible from the original seed\n    this.randomState = new Random(random.nextInt());\n    this.throttledOutput = new ThrottledIndexOutput(ThrottledIndexOutput\n        .mBitsToBytes(40 + randomState.nextInt(10)), 5 + randomState.nextInt(5), null);\n    // force wrapping of lockfactory\n    try {\n      setLockFactory(new MockLockFactoryWrapper(this, delegate.getLockFactory()));\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n\n    // 2% of the time use rate limiter\n    if (randomState.nextInt(50) == 17) {\n      // Use RateLimiter\n      double maxMBPerSec = 10 + 5*(randomState.nextDouble()-0.5);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: will rate limit output IO to \" + maxMBPerSec + \" MB/sec\");\n      }\n      rateLimiter = new RateLimiter(maxMBPerSec);\n    } else {\n      rateLimiter = null;\n    }\n\n    init();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#MockDirectoryWrapper(Random,Directory).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#MockDirectoryWrapper(Random,Directory).mjava","sourceNew":"  public MockDirectoryWrapper(Random random, Directory delegate) {\n    super(delegate);\n    // must make a private random since our methods are\n    // called from different threads; else test failures may\n    // not be reproducible from the original seed\n    this.randomState = new Random(random.nextInt());\n    this.throttledOutput = new ThrottledIndexOutput(ThrottledIndexOutput\n        .mBitsToBytes(40 + randomState.nextInt(10)), 5 + randomState.nextInt(5), null);\n    // force wrapping of lockfactory\n    this.lockFactory = new MockLockFactoryWrapper(this, delegate.getLockFactory());\n\n    // 2% of the time use rate limiter\n    if (randomState.nextInt(50) == 17) {\n      // Use RateLimiter\n      double maxMBPerSec = 10 + 5*(randomState.nextDouble()-0.5);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: will rate limit output IO to \" + maxMBPerSec + \" MB/sec\");\n      }\n      rateLimiter = new RateLimiter(maxMBPerSec);\n    } else {\n      rateLimiter = null;\n    }\n\n    init();\n  }\n\n","sourceOld":"  public MockDirectoryWrapper(Random random, Directory delegate) {\n    super(delegate);\n    // must make a private random since our methods are\n    // called from different threads; else test failures may\n    // not be reproducible from the original seed\n    this.randomState = new Random(random.nextInt());\n    this.throttledOutput = new ThrottledIndexOutput(ThrottledIndexOutput\n        .mBitsToBytes(40 + randomState.nextInt(10)), 5 + randomState.nextInt(5), null);\n    // force wrapping of lockfactory\n    try {\n      setLockFactory(new MockLockFactoryWrapper(this, delegate.getLockFactory()));\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n\n    // 2% of the time use rate limiter\n    if (randomState.nextInt(50) == 17) {\n      // Use RateLimiter\n      double maxMBPerSec = 10 + 5*(randomState.nextDouble()-0.5);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: will rate limit output IO to \" + maxMBPerSec + \" MB/sec\");\n      }\n      rateLimiter = new RateLimiter(maxMBPerSec);\n    } else {\n      rateLimiter = null;\n    }\n\n    init();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#MockDirectoryWrapper(Random,Directory).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#MockDirectoryWrapper(Random,Directory).mjava","sourceNew":"  public MockDirectoryWrapper(Random random, Directory delegate) {\n    super(delegate);\n    // must make a private random since our methods are\n    // called from different threads; else test failures may\n    // not be reproducible from the original seed\n    this.randomState = new Random(random.nextInt());\n    this.throttledOutput = new ThrottledIndexOutput(ThrottledIndexOutput\n        .mBitsToBytes(40 + randomState.nextInt(10)), 5 + randomState.nextInt(5), null);\n    // force wrapping of lockfactory\n    this.lockFactory = new MockLockFactoryWrapper(this, delegate.getLockFactory());\n\n    // 2% of the time use rate limiter\n    if (randomState.nextInt(50) == 17) {\n      // Use RateLimiter\n      double maxMBPerSec = 10 + 5*(randomState.nextDouble()-0.5);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: will rate limit output IO to \" + maxMBPerSec + \" MB/sec\");\n      }\n      rateLimiter = new RateLimiter(maxMBPerSec);\n    } else {\n      rateLimiter = null;\n    }\n\n    init();\n  }\n\n","sourceOld":"  public MockDirectoryWrapper(Random random, Directory delegate) {\n    super(delegate);\n    // must make a private random since our methods are\n    // called from different threads; else test failures may\n    // not be reproducible from the original seed\n    this.randomState = new Random(random.nextInt());\n    this.throttledOutput = new ThrottledIndexOutput(ThrottledIndexOutput\n        .mBitsToBytes(40 + randomState.nextInt(10)), 5 + randomState.nextInt(5), null);\n    // force wrapping of lockfactory\n    try {\n      setLockFactory(new MockLockFactoryWrapper(this, delegate.getLockFactory()));\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n\n    // 2% of the time use rate limiter\n    if (randomState.nextInt(50) == 17) {\n      // Use RateLimiter\n      double maxMBPerSec = 10 + 5*(randomState.nextDouble()-0.5);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: will rate limit output IO to \" + maxMBPerSec + \" MB/sec\");\n      }\n      rateLimiter = new RateLimiter(maxMBPerSec);\n    } else {\n      rateLimiter = null;\n    }\n\n    init();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8fbe4ce6e68a5b5f8936cf16786f6c37cc27090","date":1349125657,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#MockDirectoryWrapper(Random,Directory).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#MockDirectoryWrapper(Random,Directory).mjava","sourceNew":"  public MockDirectoryWrapper(Random random, Directory delegate) {\n    super(delegate);\n    // must make a private random since our methods are\n    // called from different threads; else test failures may\n    // not be reproducible from the original seed\n    this.randomState = new Random(random.nextInt());\n    // force wrapping of lockfactory\n    this.lockFactory = new MockLockFactoryWrapper(this, delegate.getLockFactory());\n\n    // NOTE: we init rateLimiter always but we only\n    // sometimes use it (by default) in createOutput:\n    double maxMBPerSec = 10 + 5*(randomState.nextDouble()-0.5);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockDirectoryWrapper: will rate limit output IO to \" + maxMBPerSec + \" MB/sec\");\n    }\n    rateLimiter = new RateLimiter(maxMBPerSec);\n\n    init();\n  }\n\n","sourceOld":"  public MockDirectoryWrapper(Random random, Directory delegate) {\n    super(delegate);\n    // must make a private random since our methods are\n    // called from different threads; else test failures may\n    // not be reproducible from the original seed\n    this.randomState = new Random(random.nextInt());\n    this.throttledOutput = new ThrottledIndexOutput(ThrottledIndexOutput\n        .mBitsToBytes(40 + randomState.nextInt(10)), 5 + randomState.nextInt(5), null);\n    // force wrapping of lockfactory\n    this.lockFactory = new MockLockFactoryWrapper(this, delegate.getLockFactory());\n\n    // 2% of the time use rate limiter\n    if (randomState.nextInt(50) == 17) {\n      // Use RateLimiter\n      double maxMBPerSec = 10 + 5*(randomState.nextDouble()-0.5);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: will rate limit output IO to \" + maxMBPerSec + \" MB/sec\");\n      }\n      rateLimiter = new RateLimiter(maxMBPerSec);\n    } else {\n      rateLimiter = null;\n    }\n\n    init();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09a37269f7ae6b4e61f0bfa661c642ad751e05c8","date":1349391311,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#MockDirectoryWrapper(Random,Directory).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#MockDirectoryWrapper(Random,Directory).mjava","sourceNew":"  public MockDirectoryWrapper(Random random, Directory delegate) {\n    super(delegate);\n    // must make a private random since our methods are\n    // called from different threads; else test failures may\n    // not be reproducible from the original seed\n    this.randomState = new Random(random.nextInt());\n    this.throttledOutput = new ThrottledIndexOutput(ThrottledIndexOutput\n        .mBitsToBytes(40 + randomState.nextInt(10)), 5 + randomState.nextInt(5), null);\n    // force wrapping of lockfactory\n    this.lockFactory = new MockLockFactoryWrapper(this, delegate.getLockFactory());\n\n    // 2% of the time use rate limiter\n    if (randomState.nextInt(50) == 17) {\n      // Use RateLimiter\n      double maxMBPerSec = 10 + 5*(randomState.nextDouble()-0.5);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: will rate limit output IO to \" + maxMBPerSec + \" MB/sec\");\n      }\n      rateLimiter = new RateLimiter(maxMBPerSec);\n    } else {\n      rateLimiter = null;\n    }\n\n    init();\n  }\n\n","sourceOld":"  public MockDirectoryWrapper(Random random, Directory delegate) {\n    super(delegate);\n    // must make a private random since our methods are\n    // called from different threads; else test failures may\n    // not be reproducible from the original seed\n    this.randomState = new Random(random.nextInt());\n    // force wrapping of lockfactory\n    this.lockFactory = new MockLockFactoryWrapper(this, delegate.getLockFactory());\n\n    // NOTE: we init rateLimiter always but we only\n    // sometimes use it (by default) in createOutput:\n    double maxMBPerSec = 10 + 5*(randomState.nextDouble()-0.5);\n    if (LuceneTestCase.VERBOSE) {\n      System.out.println(\"MockDirectoryWrapper: will rate limit output IO to \" + maxMBPerSec + \" MB/sec\");\n    }\n    rateLimiter = new RateLimiter(maxMBPerSec);\n\n    init();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e4583d4aac44f313f9af74ab6d81baab3f976232","date":1352409883,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#MockDirectoryWrapper(Random,Directory).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#MockDirectoryWrapper(Random,Directory).mjava","sourceNew":"  public MockDirectoryWrapper(Random random, Directory delegate) {\n    super(delegate);\n    // must make a private random since our methods are\n    // called from different threads; else test failures may\n    // not be reproducible from the original seed\n    this.randomState = new Random(random.nextInt());\n    this.throttledOutput = new ThrottledIndexOutput(ThrottledIndexOutput\n        .mBitsToBytes(40 + randomState.nextInt(10)), 5 + randomState.nextInt(5), null);\n    // force wrapping of lockfactory\n    this.lockFactory = new MockLockFactoryWrapper(this, delegate.getLockFactory());\n    init();\n  }\n\n","sourceOld":"  public MockDirectoryWrapper(Random random, Directory delegate) {\n    super(delegate);\n    // must make a private random since our methods are\n    // called from different threads; else test failures may\n    // not be reproducible from the original seed\n    this.randomState = new Random(random.nextInt());\n    this.throttledOutput = new ThrottledIndexOutput(ThrottledIndexOutput\n        .mBitsToBytes(40 + randomState.nextInt(10)), 5 + randomState.nextInt(5), null);\n    // force wrapping of lockfactory\n    this.lockFactory = new MockLockFactoryWrapper(this, delegate.getLockFactory());\n\n    // 2% of the time use rate limiter\n    if (randomState.nextInt(50) == 17) {\n      // Use RateLimiter\n      double maxMBPerSec = 10 + 5*(randomState.nextDouble()-0.5);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: will rate limit output IO to \" + maxMBPerSec + \" MB/sec\");\n      }\n      rateLimiter = new RateLimiter(maxMBPerSec);\n    } else {\n      rateLimiter = null;\n    }\n\n    init();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#MockDirectoryWrapper(Random,Directory).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#MockDirectoryWrapper(Random,Directory).mjava","sourceNew":"  public MockDirectoryWrapper(Random random, Directory delegate) {\n    super(delegate);\n    // must make a private random since our methods are\n    // called from different threads; else test failures may\n    // not be reproducible from the original seed\n    this.randomState = new Random(random.nextInt());\n    this.throttledOutput = new ThrottledIndexOutput(ThrottledIndexOutput\n        .mBitsToBytes(40 + randomState.nextInt(10)), 5 + randomState.nextInt(5), null);\n    // force wrapping of lockfactory\n    this.lockFactory = new MockLockFactoryWrapper(this, delegate.getLockFactory());\n    init();\n  }\n\n","sourceOld":"  public MockDirectoryWrapper(Random random, Directory delegate) {\n    super(delegate);\n    // must make a private random since our methods are\n    // called from different threads; else test failures may\n    // not be reproducible from the original seed\n    this.randomState = new Random(random.nextInt());\n    this.throttledOutput = new ThrottledIndexOutput(ThrottledIndexOutput\n        .mBitsToBytes(40 + randomState.nextInt(10)), 5 + randomState.nextInt(5), null);\n    // force wrapping of lockfactory\n    this.lockFactory = new MockLockFactoryWrapper(this, delegate.getLockFactory());\n\n    // 2% of the time use rate limiter\n    if (randomState.nextInt(50) == 17) {\n      // Use RateLimiter\n      double maxMBPerSec = 10 + 5*(randomState.nextDouble()-0.5);\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"MockDirectoryWrapper: will rate limit output IO to \" + maxMBPerSec + \" MB/sec\");\n      }\n      rateLimiter = new RateLimiter(maxMBPerSec);\n    } else {\n      rateLimiter = null;\n    }\n\n    init();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285cdc737de75b7cc7c284a156b20214deb67bca","date":1415535483,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#MockDirectoryWrapper(Random,Directory).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#MockDirectoryWrapper(Random,Directory).mjava","sourceNew":"  public MockDirectoryWrapper(Random random, Directory delegate) {\n    super(delegate);\n    // must make a private random since our methods are\n    // called from different threads; else test failures may\n    // not be reproducible from the original seed\n    this.randomState = new Random(random.nextInt());\n    this.throttledOutput = new ThrottledIndexOutput(ThrottledIndexOutput\n        .mBitsToBytes(40 + randomState.nextInt(10)), 5 + randomState.nextInt(5), null);\n    init();\n  }\n\n","sourceOld":"  public MockDirectoryWrapper(Random random, Directory delegate) {\n    super(delegate);\n    // must make a private random since our methods are\n    // called from different threads; else test failures may\n    // not be reproducible from the original seed\n    this.randomState = new Random(random.nextInt());\n    this.throttledOutput = new ThrottledIndexOutput(ThrottledIndexOutput\n        .mBitsToBytes(40 + randomState.nextInt(10)), 5 + randomState.nextInt(5), null);\n    // force wrapping of lockfactory\n    this.lockFactory = new MockLockFactoryWrapper(this, delegate.getLockFactory());\n    init();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a135438c33df9bffb763f5e15d4ac63251107fd","date":1417049132,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#MockDirectoryWrapper(Random,Directory).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockDirectoryWrapper#MockDirectoryWrapper(Random,Directory).mjava","sourceNew":"  public MockDirectoryWrapper(Random random, Directory delegate) {\n    super(delegate);\n    // must make a private random since our methods are\n    // called from different threads; else test failures may\n    // not be reproducible from the original seed\n    this.randomState = new Random(random.nextInt());\n    this.throttledOutput = new ThrottledIndexOutput(ThrottledIndexOutput\n        .mBitsToBytes(40 + randomState.nextInt(10)), 1 + randomState.nextInt(5), null);\n    init();\n  }\n\n","sourceOld":"  public MockDirectoryWrapper(Random random, Directory delegate) {\n    super(delegate);\n    // must make a private random since our methods are\n    // called from different threads; else test failures may\n    // not be reproducible from the original seed\n    this.randomState = new Random(random.nextInt());\n    this.throttledOutput = new ThrottledIndexOutput(ThrottledIndexOutput\n        .mBitsToBytes(40 + randomState.nextInt(10)), 5 + randomState.nextInt(5), null);\n    init();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","0cc32d96f128d1904bfd6876bf8b7e4620ed8da0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"285cdc737de75b7cc7c284a156b20214deb67bca":["e4583d4aac44f313f9af74ab6d81baab3f976232"],"407687e67faf6e1f02a211ca078d8e3eed631027":["09a37269f7ae6b4e61f0bfa661c642ad751e05c8","e4583d4aac44f313f9af74ab6d81baab3f976232"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["aba371508186796cc6151d8223a5b4e16d02e26e","0cc32d96f128d1904bfd6876bf8b7e4620ed8da0"],"0cc32d96f128d1904bfd6876bf8b7e4620ed8da0":["d19974432be9aed28ee7dca73bdf01d139e763a9"],"e818a930274c36c14447e50ba474ebf7c8d27f73":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"aba371508186796cc6151d8223a5b4e16d02e26e":["e818a930274c36c14447e50ba474ebf7c8d27f73","d19974432be9aed28ee7dca73bdf01d139e763a9"],"e4583d4aac44f313f9af74ab6d81baab3f976232":["09a37269f7ae6b4e61f0bfa661c642ad751e05c8"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["e818a930274c36c14447e50ba474ebf7c8d27f73"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["e818a930274c36c14447e50ba474ebf7c8d27f73","d19974432be9aed28ee7dca73bdf01d139e763a9"],"09a37269f7ae6b4e61f0bfa661c642ad751e05c8":["e8fbe4ce6e68a5b5f8936cf16786f6c37cc27090"],"3a135438c33df9bffb763f5e15d4ac63251107fd":["285cdc737de75b7cc7c284a156b20214deb67bca"],"e8fbe4ce6e68a5b5f8936cf16786f6c37cc27090":["0cc32d96f128d1904bfd6876bf8b7e4620ed8da0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a135438c33df9bffb763f5e15d4ac63251107fd"]},"commit2Childs":{"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e818a930274c36c14447e50ba474ebf7c8d27f73"],"285cdc737de75b7cc7c284a156b20214deb67bca":["3a135438c33df9bffb763f5e15d4ac63251107fd"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"0cc32d96f128d1904bfd6876bf8b7e4620ed8da0":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","e8fbe4ce6e68a5b5f8936cf16786f6c37cc27090"],"e818a930274c36c14447e50ba474ebf7c8d27f73":["aba371508186796cc6151d8223a5b4e16d02e26e","d19974432be9aed28ee7dca73bdf01d139e763a9","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"aba371508186796cc6151d8223a5b4e16d02e26e":["c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"e4583d4aac44f313f9af74ab6d81baab3f976232":["285cdc737de75b7cc7c284a156b20214deb67bca","407687e67faf6e1f02a211ca078d8e3eed631027"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["0cc32d96f128d1904bfd6876bf8b7e4620ed8da0","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["b05c56a41b733e02a189c48895922b5bd8c7f3d1"],"09a37269f7ae6b4e61f0bfa661c642ad751e05c8":["407687e67faf6e1f02a211ca078d8e3eed631027","e4583d4aac44f313f9af74ab6d81baab3f976232"],"3a135438c33df9bffb763f5e15d4ac63251107fd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e8fbe4ce6e68a5b5f8936cf16786f6c37cc27090":["09a37269f7ae6b4e61f0bfa661c642ad751e05c8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","407687e67faf6e1f02a211ca078d8e3eed631027","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}