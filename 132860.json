{"path":"modules/facet/src/test/org/apache/lucene/facet/search/TestFacetsAccumulatorWithComplement#doTestComplements().mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestFacetsAccumulatorWithComplement#doTestComplements().mjava","pathOld":"/dev/null","sourceNew":"  private void doTestComplements() throws Exception {\n    assertTrue(\"Would like to test this with deletions!\",indexReader.hasDeletions());\n    assertTrue(\"Would like to test this with deletions!\",indexReader.numDeletedDocs()>0);\n    Query q = new MatchAllDocsQuery(); //new TermQuery(new Term(TEXT,\"white\"));\n    if (VERBOSE) {\n      System.out.println(\"Query: \"+q);\n    }\n    ScoredDocIdCollector dCollector = \n      ScoredDocIdCollector.create(indexReader.maxDoc(),false); // scoring is disabled\n    searcher.search(q, dCollector);\n    \n    // verify by facet values\n    List<FacetResult> countResWithComplement = findFacets(dCollector.getScoredDocIDs(), true);\n    List<FacetResult> countResNoComplement = findFacets(dCollector.getScoredDocIDs(), false);\n    \n    assertEquals(\"Wrong number of facet count results with complement!\",1,countResWithComplement.size());\n    assertEquals(\"Wrong number of facet count results no complement!\",1,countResNoComplement.size());\n    \n    FacetResultNode parentResWithComp = countResWithComplement.get(0).getFacetResultNode();\n    FacetResultNode parentResNoComp = countResWithComplement.get(0).getFacetResultNode();\n    \n    assertEquals(\"Wrong number of top count aggregated categories with complement!\",3,parentResWithComp.getNumSubResults());\n    assertEquals(\"Wrong number of top count aggregated categories no complement!\",3,parentResNoComp.getNumSubResults());\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a4df66e06e0c3b520d7d5941e1c043076f06f17","date":1309454196,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestFacetsAccumulatorWithComplement#doTestComplements().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestFacetsAccumulatorWithComplement#doTestComplements().mjava","sourceNew":"  private void doTestComplements() throws Exception {\n    Query q = new MatchAllDocsQuery(); //new TermQuery(new Term(TEXT,\"white\"));\n    if (VERBOSE) {\n      System.out.println(\"Query: \"+q);\n    }\n    ScoredDocIdCollector dCollector = \n      ScoredDocIdCollector.create(indexReader.maxDoc(),false); // scoring is disabled\n    searcher.search(q, dCollector);\n    \n    // verify by facet values\n    List<FacetResult> countResWithComplement = findFacets(dCollector.getScoredDocIDs(), true);\n    List<FacetResult> countResNoComplement = findFacets(dCollector.getScoredDocIDs(), false);\n    \n    assertEquals(\"Wrong number of facet count results with complement!\",1,countResWithComplement.size());\n    assertEquals(\"Wrong number of facet count results no complement!\",1,countResNoComplement.size());\n    \n    FacetResultNode parentResWithComp = countResWithComplement.get(0).getFacetResultNode();\n    FacetResultNode parentResNoComp = countResWithComplement.get(0).getFacetResultNode();\n    \n    assertEquals(\"Wrong number of top count aggregated categories with complement!\",3,parentResWithComp.getNumSubResults());\n    assertEquals(\"Wrong number of top count aggregated categories no complement!\",3,parentResNoComp.getNumSubResults());\n    \n  }\n\n","sourceOld":"  private void doTestComplements() throws Exception {\n    assertTrue(\"Would like to test this with deletions!\",indexReader.hasDeletions());\n    assertTrue(\"Would like to test this with deletions!\",indexReader.numDeletedDocs()>0);\n    Query q = new MatchAllDocsQuery(); //new TermQuery(new Term(TEXT,\"white\"));\n    if (VERBOSE) {\n      System.out.println(\"Query: \"+q);\n    }\n    ScoredDocIdCollector dCollector = \n      ScoredDocIdCollector.create(indexReader.maxDoc(),false); // scoring is disabled\n    searcher.search(q, dCollector);\n    \n    // verify by facet values\n    List<FacetResult> countResWithComplement = findFacets(dCollector.getScoredDocIDs(), true);\n    List<FacetResult> countResNoComplement = findFacets(dCollector.getScoredDocIDs(), false);\n    \n    assertEquals(\"Wrong number of facet count results with complement!\",1,countResWithComplement.size());\n    assertEquals(\"Wrong number of facet count results no complement!\",1,countResNoComplement.size());\n    \n    FacetResultNode parentResWithComp = countResWithComplement.get(0).getFacetResultNode();\n    FacetResultNode parentResNoComp = countResWithComplement.get(0).getFacetResultNode();\n    \n    assertEquals(\"Wrong number of top count aggregated categories with complement!\",3,parentResWithComp.getNumSubResults());\n    assertEquals(\"Wrong number of top count aggregated categories no complement!\",3,parentResNoComp.getNumSubResults());\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestFacetsAccumulatorWithComplement#doTestComplements().mjava","pathOld":"/dev/null","sourceNew":"  private void doTestComplements() throws Exception {\n    Query q = new MatchAllDocsQuery(); //new TermQuery(new Term(TEXT,\"white\"));\n    if (VERBOSE) {\n      System.out.println(\"Query: \"+q);\n    }\n    ScoredDocIdCollector dCollector = \n      ScoredDocIdCollector.create(indexReader.maxDoc(),false); // scoring is disabled\n    searcher.search(q, dCollector);\n    \n    // verify by facet values\n    List<FacetResult> countResWithComplement = findFacets(dCollector.getScoredDocIDs(), true);\n    List<FacetResult> countResNoComplement = findFacets(dCollector.getScoredDocIDs(), false);\n    \n    assertEquals(\"Wrong number of facet count results with complement!\",1,countResWithComplement.size());\n    assertEquals(\"Wrong number of facet count results no complement!\",1,countResNoComplement.size());\n    \n    FacetResultNode parentResWithComp = countResWithComplement.get(0).getFacetResultNode();\n    FacetResultNode parentResNoComp = countResWithComplement.get(0).getFacetResultNode();\n    \n    assertEquals(\"Wrong number of top count aggregated categories with complement!\",3,parentResWithComp.getNumSubResults());\n    assertEquals(\"Wrong number of top count aggregated categories no complement!\",3,parentResNoComp.getNumSubResults());\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestFacetsAccumulatorWithComplement#doTestComplements().mjava","pathOld":"/dev/null","sourceNew":"  private void doTestComplements() throws Exception {\n    Query q = new MatchAllDocsQuery(); //new TermQuery(new Term(TEXT,\"white\"));\n    if (VERBOSE) {\n      System.out.println(\"Query: \"+q);\n    }\n    ScoredDocIdCollector dCollector = \n      ScoredDocIdCollector.create(indexReader.maxDoc(),false); // scoring is disabled\n    searcher.search(q, dCollector);\n    \n    // verify by facet values\n    List<FacetResult> countResWithComplement = findFacets(dCollector.getScoredDocIDs(), true);\n    List<FacetResult> countResNoComplement = findFacets(dCollector.getScoredDocIDs(), false);\n    \n    assertEquals(\"Wrong number of facet count results with complement!\",1,countResWithComplement.size());\n    assertEquals(\"Wrong number of facet count results no complement!\",1,countResNoComplement.size());\n    \n    FacetResultNode parentResWithComp = countResWithComplement.get(0).getFacetResultNode();\n    FacetResultNode parentResNoComp = countResWithComplement.get(0).getFacetResultNode();\n    \n    assertEquals(\"Wrong number of top count aggregated categories with complement!\",3,parentResWithComp.getNumSubResults());\n    assertEquals(\"Wrong number of top count aggregated categories no complement!\",3,parentResNoComp.getNumSubResults());\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsAccumulatorWithComplement#doTestComplements().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestFacetsAccumulatorWithComplement#doTestComplements().mjava","sourceNew":"  private void doTestComplements() throws Exception {\n    Query q = new MatchAllDocsQuery(); //new TermQuery(new Term(TEXT,\"white\"));\n    if (VERBOSE) {\n      System.out.println(\"Query: \"+q);\n    }\n    ScoredDocIdCollector dCollector = \n      ScoredDocIdCollector.create(indexReader.maxDoc(),false); // scoring is disabled\n    searcher.search(q, dCollector);\n    \n    // verify by facet values\n    List<FacetResult> countResWithComplement = findFacets(dCollector.getScoredDocIDs(), true);\n    List<FacetResult> countResNoComplement = findFacets(dCollector.getScoredDocIDs(), false);\n    \n    assertEquals(\"Wrong number of facet count results with complement!\",1,countResWithComplement.size());\n    assertEquals(\"Wrong number of facet count results no complement!\",1,countResNoComplement.size());\n    \n    FacetResultNode parentResWithComp = countResWithComplement.get(0).getFacetResultNode();\n    FacetResultNode parentResNoComp = countResWithComplement.get(0).getFacetResultNode();\n    \n    assertEquals(\"Wrong number of top count aggregated categories with complement!\",3,parentResWithComp.getNumSubResults());\n    assertEquals(\"Wrong number of top count aggregated categories no complement!\",3,parentResNoComp.getNumSubResults());\n    \n  }\n\n","sourceOld":"  private void doTestComplements() throws Exception {\n    Query q = new MatchAllDocsQuery(); //new TermQuery(new Term(TEXT,\"white\"));\n    if (VERBOSE) {\n      System.out.println(\"Query: \"+q);\n    }\n    ScoredDocIdCollector dCollector = \n      ScoredDocIdCollector.create(indexReader.maxDoc(),false); // scoring is disabled\n    searcher.search(q, dCollector);\n    \n    // verify by facet values\n    List<FacetResult> countResWithComplement = findFacets(dCollector.getScoredDocIDs(), true);\n    List<FacetResult> countResNoComplement = findFacets(dCollector.getScoredDocIDs(), false);\n    \n    assertEquals(\"Wrong number of facet count results with complement!\",1,countResWithComplement.size());\n    assertEquals(\"Wrong number of facet count results no complement!\",1,countResNoComplement.size());\n    \n    FacetResultNode parentResWithComp = countResWithComplement.get(0).getFacetResultNode();\n    FacetResultNode parentResNoComp = countResWithComplement.get(0).getFacetResultNode();\n    \n    assertEquals(\"Wrong number of top count aggregated categories with complement!\",3,parentResWithComp.getNumSubResults());\n    assertEquals(\"Wrong number of top count aggregated categories no complement!\",3,parentResNoComp.getNumSubResults());\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7a4df66e06e0c3b520d7d5941e1c043076f06f17":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"7a4df66e06e0c3b520d7d5941e1c043076f06f17":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}