{"path":"solr/core/src/java/org/apache/solr/util/PropertiesUtil#parsePropertyString(String,List[String],List[String]).mjava","commits":[{"id":"a837c064b67fa63a9394136e31218b908cdcf783","date":1362186072,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/PropertiesUtil#parsePropertyString(String,List[String],List[String]).mjava","pathOld":"/dev/null","sourceNew":"  /*\n   * This method borrowed from Ant's PropertyHelper.parsePropertyStringDefault:\n   *   http://svn.apache.org/repos/asf/ant/core/trunk/src/main/org/apache/tools/ant/PropertyHelper.java\n   */\n  private static void parsePropertyString(String value, List<String> fragments, List<String> propertyRefs) {\n    int prev = 0;\n    int pos;\n    //search for the next instance of $ from the 'prev' position\n    while ((pos = value.indexOf(\"$\", prev)) >= 0) {\n\n      //if there was any text before this, add it as a fragment\n      //TODO, this check could be modified to go if pos>prev;\n      //seems like this current version could stick empty strings\n      //into the list\n      if (pos > 0) {\n        fragments.add(value.substring(prev, pos));\n      }\n      //if we are at the end of the string, we tack on a $\n      //then move past it\n      if (pos == (value.length() - 1)) {\n        fragments.add(\"$\");\n        prev = pos + 1;\n      } else if (value.charAt(pos + 1) != '{') {\n        //peek ahead to see if the next char is a property or not\n        //not a property: insert the char as a literal\n              /*\n              fragments.addElement(value.substring(pos + 1, pos + 2));\n              prev = pos + 2;\n              */\n        if (value.charAt(pos + 1) == '$') {\n          //backwards compatibility two $ map to one mode\n          fragments.add(\"$\");\n          prev = pos + 2;\n        } else {\n          //new behaviour: $X maps to $X for all values of X!='$'\n          fragments.add(value.substring(pos, pos + 2));\n          prev = pos + 2;\n        }\n\n      } else {\n        //property found, extract its name or bail on a typo\n        int endName = value.indexOf('}', pos);\n        if (endName < 0) {\n          throw new RuntimeException(\"Syntax error in property: \" + value);\n        }\n        String propertyName = value.substring(pos + 2, endName);\n        fragments.add(null);\n        propertyRefs.add(propertyName);\n        prev = endName + 1;\n      }\n    }\n    //no more $ signs found\n    //if there is any tail to the string, append it\n    if (prev < value.length()) {\n      fragments.add(value.substring(prev));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23a18981fcc2648fd6e83e9e84e8fa023eb0484b","date":1602334330,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/PropertiesUtil#parsePropertyString(String,List[String],List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/PropertiesUtil#parsePropertyString(String,List[String],List[String]).mjava","sourceNew":"  /*\n   * This method borrowed from Ant's PropertyHelper.parsePropertyStringDefault:\n   *   http://svn.apache.org/repos/asf/ant/core/trunk/src/main/org/apache/tools/ant/PropertyHelper.java\n   */\n  private static void parsePropertyString(String value, List<String> fragments, List<String> propertyRefs) {\n    int prev = 0;\n    int pos;\n    //search for the next instance of $ from the 'prev' position\n    while ((pos = value.indexOf(\"$\", prev)) >= 0) {\n\n      //if there was any text before this, add it as a fragment\n      //TODO, this check could be modified to go if pos>prev;\n      //seems like this current version could stick empty strings\n      //into the list\n      if (pos > 0) {\n        fragments.add(value.substring(prev, pos));\n      }\n      //if we are at the end of the string, we tack on a $\n      //then move past it\n      if (pos == (value.length() - 1)) {\n        fragments.add(\"$\");\n        prev = pos + 1;\n      } else if (value.charAt(pos + 1) != '{') {\n        //peek ahead to see if the next char is a property or not\n        //not a property: insert the char as a literal\n              /*\n              fragments.addElement(value.substring(pos + 1, pos + 2));\n              prev = pos + 2;\n              */\n        if (value.charAt(pos + 1) == '$') {\n          //backwards compatibility two $ map to one mode\n          fragments.add(\"$\");\n          prev = pos + 2;\n        } else {\n          //new behaviour: $X maps to $X for all values of X!='$'\n          fragments.add(value.substring(pos, pos + 2));\n          prev = pos + 2;\n        }\n\n      } else {\n        //property found, extract its name or bail on a typo\n        int endName = value.indexOf('}', pos);\n        if (endName < 0) {\n          throw new RuntimeException(\"Syntax error in property: \" + value);\n        }\n        String propertyName = value.substring(pos + 2, endName);\n        fragments.add(null);\n        propertyRefs.add(propertyName);\n        prev = endName + 1;\n      }\n    }\n    //no more $ signs found\n    //if there is any tail to the string, append it\n    if (prev < value.length()) {\n      fragments.add(value.substring(prev));\n    }\n  }\n\n","sourceOld":"  /*\n   * This method borrowed from Ant's PropertyHelper.parsePropertyStringDefault:\n   *   http://svn.apache.org/repos/asf/ant/core/trunk/src/main/org/apache/tools/ant/PropertyHelper.java\n   */\n  private static void parsePropertyString(String value, List<String> fragments, List<String> propertyRefs) {\n    int prev = 0;\n    int pos;\n    //search for the next instance of $ from the 'prev' position\n    while ((pos = value.indexOf(\"$\", prev)) >= 0) {\n\n      //if there was any text before this, add it as a fragment\n      //TODO, this check could be modified to go if pos>prev;\n      //seems like this current version could stick empty strings\n      //into the list\n      if (pos > 0) {\n        fragments.add(value.substring(prev, pos));\n      }\n      //if we are at the end of the string, we tack on a $\n      //then move past it\n      if (pos == (value.length() - 1)) {\n        fragments.add(\"$\");\n        prev = pos + 1;\n      } else if (value.charAt(pos + 1) != '{') {\n        //peek ahead to see if the next char is a property or not\n        //not a property: insert the char as a literal\n              /*\n              fragments.addElement(value.substring(pos + 1, pos + 2));\n              prev = pos + 2;\n              */\n        if (value.charAt(pos + 1) == '$') {\n          //backwards compatibility two $ map to one mode\n          fragments.add(\"$\");\n          prev = pos + 2;\n        } else {\n          //new behaviour: $X maps to $X for all values of X!='$'\n          fragments.add(value.substring(pos, pos + 2));\n          prev = pos + 2;\n        }\n\n      } else {\n        //property found, extract its name or bail on a typo\n        int endName = value.indexOf('}', pos);\n        if (endName < 0) {\n          throw new RuntimeException(\"Syntax error in property: \" + value);\n        }\n        String propertyName = value.substring(pos + 2, endName);\n        fragments.add(null);\n        propertyRefs.add(propertyName);\n        prev = endName + 1;\n      }\n    }\n    //no more $ signs found\n    //if there is any tail to the string, append it\n    if (prev < value.length()) {\n      fragments.add(value.substring(prev));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"23a18981fcc2648fd6e83e9e84e8fa023eb0484b":["a837c064b67fa63a9394136e31218b908cdcf783"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a837c064b67fa63a9394136e31218b908cdcf783":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23a18981fcc2648fd6e83e9e84e8fa023eb0484b"]},"commit2Childs":{"23a18981fcc2648fd6e83e9e84e8fa023eb0484b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a837c064b67fa63a9394136e31218b908cdcf783"],"a837c064b67fa63a9394136e31218b908cdcf783":["23a18981fcc2648fd6e83e9e84e8fa023eb0484b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}