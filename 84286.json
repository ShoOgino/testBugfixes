{"path":"solr/core/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","sourceNew":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   */\n  public String getNewIndexDir() {\n    String result = dataDir + \"index/\";\n    File propsFile = new File(dataDir + \"index.properties\");\n    if (propsFile.exists()) {\n      Properties p = new Properties();\n      InputStream is = null;\n      try {\n        is = new FileInputStream(propsFile);\n        p.load(is);\n      } catch (IOException e) {\n        /*no op*/\n      } finally {\n        IOUtils.closeQuietly(is);\n      }\n      String s = p.getProperty(\"index\");\n      if (s != null && s.trim().length() > 0) {\n        File tmp = new File(dataDir + s);\n        if (tmp.exists() && tmp.isDirectory())\n          result = dataDir + s;\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   */\n  public String getNewIndexDir() {\n    String result = dataDir + \"index/\";\n    File propsFile = new File(dataDir + \"index.properties\");\n    if (propsFile.exists()) {\n      Properties p = new Properties();\n      InputStream is = null;\n      try {\n        is = new FileInputStream(propsFile);\n        p.load(is);\n      } catch (IOException e) {\n        /*no op*/\n      } finally {\n        IOUtils.closeQuietly(is);\n      }\n      String s = p.getProperty(\"index\");\n      if (s != null && s.trim().length() > 0) {\n        File tmp = new File(dataDir + s);\n        if (tmp.exists() && tmp.isDirectory())\n          result = dataDir + s;\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","sourceNew":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   */\n  public String getNewIndexDir() {\n    String result = dataDir + \"index/\";\n    File propsFile = new File(dataDir + \"index.properties\");\n    if (propsFile.exists()) {\n      Properties p = new Properties();\n      InputStream is = null;\n      try {\n        is = new FileInputStream(propsFile);\n        p.load(is);\n      } catch (IOException e) {\n        /*no op*/\n      } finally {\n        IOUtils.closeQuietly(is);\n      }\n      String s = p.getProperty(\"index\");\n      if (s != null && s.trim().length() > 0) {\n        File tmp = new File(dataDir + s);\n        if (tmp.exists() && tmp.isDirectory())\n          result = dataDir + s;\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   */\n  public String getNewIndexDir() {\n    String result = dataDir + \"index/\";\n    File propsFile = new File(dataDir + \"index.properties\");\n    if (propsFile.exists()) {\n      Properties p = new Properties();\n      InputStream is = null;\n      try {\n        is = new FileInputStream(propsFile);\n        p.load(is);\n      } catch (IOException e) {\n        /*no op*/\n      } finally {\n        IOUtils.closeQuietly(is);\n      }\n      String s = p.getProperty(\"index\");\n      if (s != null && s.trim().length() > 0) {\n        File tmp = new File(dataDir + s);\n        if (tmp.exists() && tmp.isDirectory())\n          result = dataDir + s;\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","sourceNew":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   */\n  public String getNewIndexDir() {\n    String result = dataDir + \"index/\";\n    File propsFile = new File(dataDir + \"index.properties\");\n    if (propsFile.exists()) {\n      Properties p = new Properties();\n      InputStream is = null;\n      try {\n        is = new FileInputStream(propsFile);\n        p.load(is);\n      } catch (IOException e) {\n        /*no op*/\n      } finally {\n        IOUtils.closeQuietly(is);\n      }\n      String s = p.getProperty(\"index\");\n      if (s != null && s.trim().length() > 0) {\n        File tmp = new File(dataDir + s);\n        if (tmp.exists() && tmp.isDirectory())\n          result = dataDir + s;\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   */\n  public String getNewIndexDir() {\n    String result = dataDir + \"index/\";\n    File propsFile = new File(dataDir + \"index.properties\");\n    if (propsFile.exists()) {\n      Properties p = new Properties();\n      InputStream is = null;\n      try {\n        is = new FileInputStream(propsFile);\n        p.load(is);\n      } catch (IOException e) {\n        /*no op*/\n      } finally {\n        IOUtils.closeQuietly(is);\n      }\n      String s = p.getProperty(\"index\");\n      if (s != null && s.trim().length() > 0) {\n        File tmp = new File(dataDir + s);\n        if (tmp.exists() && tmp.isDirectory())\n          result = dataDir + s;\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17423fb5ef5555fbfa7fe53c15d602faef60ba1a","date":1339512496,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","sourceNew":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   */\n  public String getNewIndexDir() {\n    String result = dataDir + \"index/\";\n    File propsFile = new File(dataDir + \"index.properties\");\n    if (propsFile.exists()) {\n      Properties p = new Properties();\n      InputStream is = null;\n      try {\n        is = new FileInputStream(propsFile);\n        p.load(is);\n      } catch (IOException e) {\n        /*no op*/\n      } finally {\n        IOUtils.closeQuietly(is);\n      }\n      String s = p.getProperty(\"index\");\n      if (s != null && s.trim().length() > 0) {\n        File tmp = new File(dataDir + s);\n        if (tmp.exists() && tmp.isDirectory())\n          result = dataDir + s;\n      }\n    }\n    if (!result.equals(lastNewIndexDir)) {\n      log.warn(\"New index directory detected: old=\"+lastNewIndexDir + \" new=\" + result);\n    }\n    lastNewIndexDir = result;\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   */\n  public String getNewIndexDir() {\n    String result = dataDir + \"index/\";\n    File propsFile = new File(dataDir + \"index.properties\");\n    if (propsFile.exists()) {\n      Properties p = new Properties();\n      InputStream is = null;\n      try {\n        is = new FileInputStream(propsFile);\n        p.load(is);\n      } catch (IOException e) {\n        /*no op*/\n      } finally {\n        IOUtils.closeQuietly(is);\n      }\n      String s = p.getProperty(\"index\");\n      if (s != null && s.trim().length() > 0) {\n        File tmp = new File(dataDir + s);\n        if (tmp.exists() && tmp.isDirectory())\n          result = dataDir + s;\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":["96e0d4494fe54b31c7f0151f3a632124ab806351","41afd2bc740f9a7e7357f2d382ba6fcedb293e76"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"41afd2bc740f9a7e7357f2d382ba6fcedb293e76","date":1348755527,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","sourceNew":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   */\n  public String getNewIndexDir() {\n    String result = dataDir + \"index/\";\n    File propsFile = new File(dataDir + \"index.properties\");\n    if (propsFile.exists()) {\n      Properties p = new Properties();\n      InputStream is = null;\n      try {\n        is = new FileInputStream(propsFile);\n        p.load(is);\n      } catch (IOException e) {\n        /*no op*/\n      } finally {\n        IOUtils.closeQuietly(is);\n      }\n      String s = p.getProperty(\"index\");\n      if (s != null && s.trim().length() > 0) {\n        File tmp = new File(dataDir + s);\n        if (tmp.exists() && tmp.isDirectory())\n          result = dataDir + s;\n      }\n    }\n    if (!result.equals(lastNewIndexDir)) {\n      log.info(\"New index directory detected: old=\"+lastNewIndexDir + \" new=\" + result);\n    }\n    lastNewIndexDir = result;\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   */\n  public String getNewIndexDir() {\n    String result = dataDir + \"index/\";\n    File propsFile = new File(dataDir + \"index.properties\");\n    if (propsFile.exists()) {\n      Properties p = new Properties();\n      InputStream is = null;\n      try {\n        is = new FileInputStream(propsFile);\n        p.load(is);\n      } catch (IOException e) {\n        /*no op*/\n      } finally {\n        IOUtils.closeQuietly(is);\n      }\n      String s = p.getProperty(\"index\");\n      if (s != null && s.trim().length() > 0) {\n        File tmp = new File(dataDir + s);\n        if (tmp.exists() && tmp.isDirectory())\n          result = dataDir + s;\n      }\n    }\n    if (!result.equals(lastNewIndexDir)) {\n      log.warn(\"New index directory detected: old=\"+lastNewIndexDir + \" new=\" + result);\n    }\n    lastNewIndexDir = result;\n    return result;\n  }\n\n","bugFix":["17423fb5ef5555fbfa7fe53c15d602faef60ba1a"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","sourceNew":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   */\n  public String getNewIndexDir() {\n    String result = dataDir + \"index/\";\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = getDirectoryFactory().get(getDataDir(), null);\n      if (dir.fileExists(\"index.properties\")){\n        final IndexInput input = dir.openInput(\"index.properties\", IOContext.DEFAULT);\n  \n        final InputStream is = new InputStream() {\n          \n          @Override\n          public int read() throws IOException {\n            byte next;\n            try {\n              next = input.readByte();\n            } catch (EOFException e) {\n              return -1;\n            }\n            return next;\n          }\n          \n          @Override\n          public void close() throws IOException {\n            super.close();\n            input.close();\n          }\n        };\n        \n        try {\n          p.load(is);\n          \n          String s = p.getProperty(\"index\");\n          if (s != null && s.trim().length() > 0) {\n              result = dataDir + s;\n          }\n          \n        } catch (Exception e) {\n          log.error(\"Unable to load index.properties\", e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n    } catch (IOException e) {\n      SolrException.log(log, \"\", e);\n    } finally {\n    \n      try {\n        getDirectoryFactory().release(dir);\n      } catch (IOException e) {\n        SolrException.log(log, \"\", e);\n      }\n    }\n    if (!result.equals(lastNewIndexDir)) {\n      log.info(\"New index directory detected: old=\"+lastNewIndexDir + \" new=\" + result);\n    }\n    lastNewIndexDir = result;\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   */\n  public String getNewIndexDir() {\n    String result = dataDir + \"index/\";\n    File propsFile = new File(dataDir + \"index.properties\");\n    if (propsFile.exists()) {\n      Properties p = new Properties();\n      InputStream is = null;\n      try {\n        is = new FileInputStream(propsFile);\n        p.load(is);\n      } catch (IOException e) {\n        /*no op*/\n      } finally {\n        IOUtils.closeQuietly(is);\n      }\n      String s = p.getProperty(\"index\");\n      if (s != null && s.trim().length() > 0) {\n        File tmp = new File(dataDir + s);\n        if (tmp.exists() && tmp.isDirectory())\n          result = dataDir + s;\n      }\n    }\n    if (!result.equals(lastNewIndexDir)) {\n      log.info(\"New index directory detected: old=\"+lastNewIndexDir + \" new=\" + result);\n    }\n    lastNewIndexDir = result;\n    return result;\n  }\n\n","bugFix":null,"bugIntro":["96e0d4494fe54b31c7f0151f3a632124ab806351","683ee2ef1c6726e074311f22c6c87b48bc5c857c","718607d99d02778db3280e64975663762c94170d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","sourceNew":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   */\n  public String getNewIndexDir() {\n    String result = dataDir + \"index/\";\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = getDirectoryFactory().get(getDataDir(), null);\n      if (dir.fileExists(\"index.properties\")){\n        final IndexInput input = dir.openInput(\"index.properties\", IOContext.DEFAULT);\n  \n        final InputStream is = new InputStream() {\n          \n          @Override\n          public int read() throws IOException {\n            byte next;\n            try {\n              next = input.readByte();\n            } catch (EOFException e) {\n              return -1;\n            }\n            return next;\n          }\n          \n          @Override\n          public void close() throws IOException {\n            super.close();\n            input.close();\n          }\n        };\n        \n        try {\n          p.load(is);\n          \n          String s = p.getProperty(\"index\");\n          if (s != null && s.trim().length() > 0) {\n              result = dataDir + s;\n          }\n          \n        } catch (Exception e) {\n          log.error(\"Unable to load index.properties\", e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n    } catch (IOException e) {\n      SolrException.log(log, \"\", e);\n    } finally {\n    \n      try {\n        getDirectoryFactory().release(dir);\n      } catch (IOException e) {\n        SolrException.log(log, \"\", e);\n      }\n    }\n    if (!result.equals(lastNewIndexDir)) {\n      log.info(\"New index directory detected: old=\"+lastNewIndexDir + \" new=\" + result);\n    }\n    lastNewIndexDir = result;\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   */\n  public String getNewIndexDir() {\n    String result = dataDir + \"index/\";\n    File propsFile = new File(dataDir + \"index.properties\");\n    if (propsFile.exists()) {\n      Properties p = new Properties();\n      InputStream is = null;\n      try {\n        is = new FileInputStream(propsFile);\n        p.load(is);\n      } catch (IOException e) {\n        /*no op*/\n      } finally {\n        IOUtils.closeQuietly(is);\n      }\n      String s = p.getProperty(\"index\");\n      if (s != null && s.trim().length() > 0) {\n        File tmp = new File(dataDir + s);\n        if (tmp.exists() && tmp.isDirectory())\n          result = dataDir + s;\n      }\n    }\n    if (!result.equals(lastNewIndexDir)) {\n      log.info(\"New index directory detected: old=\"+lastNewIndexDir + \" new=\" + result);\n    }\n    lastNewIndexDir = result;\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"718607d99d02778db3280e64975663762c94170d","date":1354986964,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","sourceNew":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   */\n  public String getNewIndexDir() {\n    String result = dataDir + \"index/\";\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = getDirectoryFactory().get(getDataDir(), getSolrConfig().indexConfig.lockType);\n      if (dir.fileExists(\"index.properties\")){\n        final IndexInput input = dir.openInput(\"index.properties\", IOContext.DEFAULT);\n  \n        final InputStream is = new InputStream() {\n          \n          @Override\n          public int read() throws IOException {\n            byte next;\n            try {\n              next = input.readByte();\n            } catch (EOFException e) {\n              return -1;\n            }\n            return next;\n          }\n          \n          @Override\n          public void close() throws IOException {\n            super.close();\n            input.close();\n          }\n        };\n        \n        try {\n          p.load(is);\n          \n          String s = p.getProperty(\"index\");\n          if (s != null && s.trim().length() > 0) {\n              result = dataDir + s;\n          }\n          \n        } catch (Exception e) {\n          log.error(\"Unable to load index.properties\", e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n    } catch (IOException e) {\n      SolrException.log(log, \"\", e);\n    } finally {\n    \n      try {\n        getDirectoryFactory().release(dir);\n      } catch (IOException e) {\n        SolrException.log(log, \"\", e);\n      }\n    }\n    if (!result.equals(lastNewIndexDir)) {\n      log.info(\"New index directory detected: old=\"+lastNewIndexDir + \" new=\" + result);\n    }\n    lastNewIndexDir = result;\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   */\n  public String getNewIndexDir() {\n    String result = dataDir + \"index/\";\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = getDirectoryFactory().get(getDataDir(), null);\n      if (dir.fileExists(\"index.properties\")){\n        final IndexInput input = dir.openInput(\"index.properties\", IOContext.DEFAULT);\n  \n        final InputStream is = new InputStream() {\n          \n          @Override\n          public int read() throws IOException {\n            byte next;\n            try {\n              next = input.readByte();\n            } catch (EOFException e) {\n              return -1;\n            }\n            return next;\n          }\n          \n          @Override\n          public void close() throws IOException {\n            super.close();\n            input.close();\n          }\n        };\n        \n        try {\n          p.load(is);\n          \n          String s = p.getProperty(\"index\");\n          if (s != null && s.trim().length() > 0) {\n              result = dataDir + s;\n          }\n          \n        } catch (Exception e) {\n          log.error(\"Unable to load index.properties\", e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n    } catch (IOException e) {\n      SolrException.log(log, \"\", e);\n    } finally {\n    \n      try {\n        getDirectoryFactory().release(dir);\n      } catch (IOException e) {\n        SolrException.log(log, \"\", e);\n      }\n    }\n    if (!result.equals(lastNewIndexDir)) {\n      log.info(\"New index directory detected: old=\"+lastNewIndexDir + \" new=\" + result);\n    }\n    lastNewIndexDir = result;\n    return result;\n  }\n\n","bugFix":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d1888bdba4dbb0c062f4a2456bba74c12fb0f42e","date":1355002015,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","sourceNew":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   */\n  public String getNewIndexDir() {\n    String result = dataDir + \"index/\";\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = getDirectoryFactory().get(getDataDir(), getSolrConfig().indexConfig.lockType);\n      if (dir.fileExists(\"index.properties\")){\n        final IndexInput input = dir.openInput(\"index.properties\", IOContext.DEFAULT);\n  \n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(is);\n          \n          String s = p.getProperty(\"index\");\n          if (s != null && s.trim().length() > 0) {\n              result = dataDir + s;\n          }\n          \n        } catch (Exception e) {\n          log.error(\"Unable to load index.properties\", e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n    } catch (IOException e) {\n      SolrException.log(log, \"\", e);\n    } finally {\n    \n      try {\n        getDirectoryFactory().release(dir);\n      } catch (IOException e) {\n        SolrException.log(log, \"\", e);\n      }\n    }\n    if (!result.equals(lastNewIndexDir)) {\n      log.info(\"New index directory detected: old=\"+lastNewIndexDir + \" new=\" + result);\n    }\n    lastNewIndexDir = result;\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   */\n  public String getNewIndexDir() {\n    String result = dataDir + \"index/\";\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = getDirectoryFactory().get(getDataDir(), getSolrConfig().indexConfig.lockType);\n      if (dir.fileExists(\"index.properties\")){\n        final IndexInput input = dir.openInput(\"index.properties\", IOContext.DEFAULT);\n  \n        final InputStream is = new InputStream() {\n          \n          @Override\n          public int read() throws IOException {\n            byte next;\n            try {\n              next = input.readByte();\n            } catch (EOFException e) {\n              return -1;\n            }\n            return next;\n          }\n          \n          @Override\n          public void close() throws IOException {\n            super.close();\n            input.close();\n          }\n        };\n        \n        try {\n          p.load(is);\n          \n          String s = p.getProperty(\"index\");\n          if (s != null && s.trim().length() > 0) {\n              result = dataDir + s;\n          }\n          \n        } catch (Exception e) {\n          log.error(\"Unable to load index.properties\", e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n    } catch (IOException e) {\n      SolrException.log(log, \"\", e);\n    } finally {\n    \n      try {\n        getDirectoryFactory().release(dir);\n      } catch (IOException e) {\n        SolrException.log(log, \"\", e);\n      }\n    }\n    if (!result.equals(lastNewIndexDir)) {\n      log.info(\"New index directory detected: old=\"+lastNewIndexDir + \" new=\" + result);\n    }\n    lastNewIndexDir = result;\n    return result;\n  }\n\n","bugFix":null,"bugIntro":["96e0d4494fe54b31c7f0151f3a632124ab806351"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","sourceNew":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   */\n  public String getNewIndexDir() {\n    String result = dataDir + \"index/\";\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = getDirectoryFactory().get(getDataDir(), getSolrConfig().indexConfig.lockType);\n      if (dir.fileExists(\"index.properties\")){\n        final IndexInput input = dir.openInput(\"index.properties\", IOContext.DEFAULT);\n  \n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(is);\n          \n          String s = p.getProperty(\"index\");\n          if (s != null && s.trim().length() > 0) {\n              result = dataDir + s;\n          }\n          \n        } catch (Exception e) {\n          log.error(\"Unable to load index.properties\", e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n    } catch (IOException e) {\n      SolrException.log(log, \"\", e);\n    } finally {\n    \n      try {\n        getDirectoryFactory().release(dir);\n      } catch (IOException e) {\n        SolrException.log(log, \"\", e);\n      }\n    }\n    if (!result.equals(lastNewIndexDir)) {\n      log.info(\"New index directory detected: old=\"+lastNewIndexDir + \" new=\" + result);\n    }\n    lastNewIndexDir = result;\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   */\n  public String getNewIndexDir() {\n    String result = dataDir + \"index/\";\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = getDirectoryFactory().get(getDataDir(), null);\n      if (dir.fileExists(\"index.properties\")){\n        final IndexInput input = dir.openInput(\"index.properties\", IOContext.DEFAULT);\n  \n        final InputStream is = new InputStream() {\n          \n          @Override\n          public int read() throws IOException {\n            byte next;\n            try {\n              next = input.readByte();\n            } catch (EOFException e) {\n              return -1;\n            }\n            return next;\n          }\n          \n          @Override\n          public void close() throws IOException {\n            super.close();\n            input.close();\n          }\n        };\n        \n        try {\n          p.load(is);\n          \n          String s = p.getProperty(\"index\");\n          if (s != null && s.trim().length() > 0) {\n              result = dataDir + s;\n          }\n          \n        } catch (Exception e) {\n          log.error(\"Unable to load index.properties\", e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n    } catch (IOException e) {\n      SolrException.log(log, \"\", e);\n    } finally {\n    \n      try {\n        getDirectoryFactory().release(dir);\n      } catch (IOException e) {\n        SolrException.log(log, \"\", e);\n      }\n    }\n    if (!result.equals(lastNewIndexDir)) {\n      log.info(\"New index directory detected: old=\"+lastNewIndexDir + \" new=\" + result);\n    }\n    lastNewIndexDir = result;\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7d2c955494271bc1fe5eee192f9faa295e47acda","date":1355240592,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","sourceNew":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   */\n  public String getNewIndexDir() {\n    String result = dataDir + \"index/\";\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = getDirectoryFactory().get(getDataDir(), getSolrConfig().indexConfig.lockType);\n      if (dir.fileExists(SnapPuller.INDEX_PROPERTIES)){\n        final IndexInput input = dir.openInput(SnapPuller.INDEX_PROPERTIES, IOContext.DEFAULT);\n  \n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(is);\n          \n          String s = p.getProperty(\"index\");\n          if (s != null && s.trim().length() > 0) {\n              result = dataDir + s;\n          }\n          \n        } catch (Exception e) {\n          log.error(\"Unable to load \" + SnapPuller.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n    } catch (IOException e) {\n      SolrException.log(log, \"\", e);\n    } finally {\n    \n      try {\n        getDirectoryFactory().release(dir);\n      } catch (IOException e) {\n        SolrException.log(log, \"\", e);\n      }\n    }\n    if (!result.equals(lastNewIndexDir)) {\n      log.info(\"New index directory detected: old=\"+lastNewIndexDir + \" new=\" + result);\n    }\n    lastNewIndexDir = result;\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   */\n  public String getNewIndexDir() {\n    String result = dataDir + \"index/\";\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = getDirectoryFactory().get(getDataDir(), getSolrConfig().indexConfig.lockType);\n      if (dir.fileExists(\"index.properties\")){\n        final IndexInput input = dir.openInput(\"index.properties\", IOContext.DEFAULT);\n  \n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(is);\n          \n          String s = p.getProperty(\"index\");\n          if (s != null && s.trim().length() > 0) {\n              result = dataDir + s;\n          }\n          \n        } catch (Exception e) {\n          log.error(\"Unable to load index.properties\", e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n    } catch (IOException e) {\n      SolrException.log(log, \"\", e);\n    } finally {\n    \n      try {\n        getDirectoryFactory().release(dir);\n      } catch (IOException e) {\n        SolrException.log(log, \"\", e);\n      }\n    }\n    if (!result.equals(lastNewIndexDir)) {\n      log.info(\"New index directory detected: old=\"+lastNewIndexDir + \" new=\" + result);\n    }\n    lastNewIndexDir = result;\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"683ee2ef1c6726e074311f22c6c87b48bc5c857c","date":1355497412,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","sourceNew":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   */\n  public String getNewIndexDir() {\n    String result = dataDir + \"index/\";\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = getDirectoryFactory().get(getDataDir(), getSolrConfig().indexConfig.lockType);\n      if (dir.fileExists(SnapPuller.INDEX_PROPERTIES)){\n        final IndexInput input = dir.openInput(SnapPuller.INDEX_PROPERTIES, IOContext.DEFAULT);\n  \n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(is);\n          \n          String s = p.getProperty(\"index\");\n          if (s != null && s.trim().length() > 0) {\n              result = dataDir + s;\n          }\n          \n        } catch (Exception e) {\n          log.error(\"Unable to load \" + SnapPuller.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n    } catch (IOException e) {\n      SolrException.log(log, \"\", e);\n    } finally {\n      if (dir != null) {\n        try {\n          getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(log, \"\", e);\n        }\n      }\n    }\n    if (!result.equals(lastNewIndexDir)) {\n      log.info(\"New index directory detected: old=\"+lastNewIndexDir + \" new=\" + result);\n    }\n    lastNewIndexDir = result;\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   */\n  public String getNewIndexDir() {\n    String result = dataDir + \"index/\";\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = getDirectoryFactory().get(getDataDir(), getSolrConfig().indexConfig.lockType);\n      if (dir.fileExists(SnapPuller.INDEX_PROPERTIES)){\n        final IndexInput input = dir.openInput(SnapPuller.INDEX_PROPERTIES, IOContext.DEFAULT);\n  \n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(is);\n          \n          String s = p.getProperty(\"index\");\n          if (s != null && s.trim().length() > 0) {\n              result = dataDir + s;\n          }\n          \n        } catch (Exception e) {\n          log.error(\"Unable to load \" + SnapPuller.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n    } catch (IOException e) {\n      SolrException.log(log, \"\", e);\n    } finally {\n    \n      try {\n        getDirectoryFactory().release(dir);\n      } catch (IOException e) {\n        SolrException.log(log, \"\", e);\n      }\n    }\n    if (!result.equals(lastNewIndexDir)) {\n      log.info(\"New index directory detected: old=\"+lastNewIndexDir + \" new=\" + result);\n    }\n    lastNewIndexDir = result;\n    return result;\n  }\n\n","bugFix":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","sourceNew":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   */\n  public String getNewIndexDir() {\n    String result = dataDir + \"index/\";\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = getDirectoryFactory().get(getDataDir(), getSolrConfig().indexConfig.lockType);\n      if (dir.fileExists(SnapPuller.INDEX_PROPERTIES)){\n        final IndexInput input = dir.openInput(SnapPuller.INDEX_PROPERTIES, IOContext.DEFAULT);\n  \n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(is);\n          \n          String s = p.getProperty(\"index\");\n          if (s != null && s.trim().length() > 0) {\n              result = dataDir + s;\n          }\n          \n        } catch (Exception e) {\n          log.error(\"Unable to load \" + SnapPuller.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n    } catch (IOException e) {\n      SolrException.log(log, \"\", e);\n    } finally {\n      if (dir != null) {\n        try {\n          getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(log, \"\", e);\n        }\n      }\n    }\n    if (!result.equals(lastNewIndexDir)) {\n      log.info(\"New index directory detected: old=\"+lastNewIndexDir + \" new=\" + result);\n    }\n    lastNewIndexDir = result;\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   */\n  public String getNewIndexDir() {\n    String result = dataDir + \"index/\";\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = getDirectoryFactory().get(getDataDir(), getSolrConfig().indexConfig.lockType);\n      if (dir.fileExists(\"index.properties\")){\n        final IndexInput input = dir.openInput(\"index.properties\", IOContext.DEFAULT);\n  \n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(is);\n          \n          String s = p.getProperty(\"index\");\n          if (s != null && s.trim().length() > 0) {\n              result = dataDir + s;\n          }\n          \n        } catch (Exception e) {\n          log.error(\"Unable to load index.properties\", e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n    } catch (IOException e) {\n      SolrException.log(log, \"\", e);\n    } finally {\n    \n      try {\n        getDirectoryFactory().release(dir);\n      } catch (IOException e) {\n        SolrException.log(log, \"\", e);\n      }\n    }\n    if (!result.equals(lastNewIndexDir)) {\n      log.info(\"New index directory detected: old=\"+lastNewIndexDir + \" new=\" + result);\n    }\n    lastNewIndexDir = result;\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674","date":1358098706,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","sourceNew":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   */\n  public String getNewIndexDir() {\n    String result = dataDir + \"index/\";\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = getDirectoryFactory().get(getDataDir(), DirContext.META_DATA, getSolrConfig().indexConfig.lockType);\n      if (dir.fileExists(SnapPuller.INDEX_PROPERTIES)){\n        final IndexInput input = dir.openInput(SnapPuller.INDEX_PROPERTIES, IOContext.DEFAULT);\n  \n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(is);\n          \n          String s = p.getProperty(\"index\");\n          if (s != null && s.trim().length() > 0) {\n              result = dataDir + s;\n          }\n          \n        } catch (Exception e) {\n          log.error(\"Unable to load \" + SnapPuller.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n    } catch (IOException e) {\n      SolrException.log(log, \"\", e);\n    } finally {\n      if (dir != null) {\n        try {\n          getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(log, \"\", e);\n        }\n      }\n    }\n    if (!result.equals(lastNewIndexDir)) {\n      log.info(\"New index directory detected: old=\"+lastNewIndexDir + \" new=\" + result);\n    }\n    lastNewIndexDir = result;\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   */\n  public String getNewIndexDir() {\n    String result = dataDir + \"index/\";\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = getDirectoryFactory().get(getDataDir(), getSolrConfig().indexConfig.lockType);\n      if (dir.fileExists(SnapPuller.INDEX_PROPERTIES)){\n        final IndexInput input = dir.openInput(SnapPuller.INDEX_PROPERTIES, IOContext.DEFAULT);\n  \n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(is);\n          \n          String s = p.getProperty(\"index\");\n          if (s != null && s.trim().length() > 0) {\n              result = dataDir + s;\n          }\n          \n        } catch (Exception e) {\n          log.error(\"Unable to load \" + SnapPuller.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n    } catch (IOException e) {\n      SolrException.log(log, \"\", e);\n    } finally {\n      if (dir != null) {\n        try {\n          getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(log, \"\", e);\n        }\n      }\n    }\n    if (!result.equals(lastNewIndexDir)) {\n      log.info(\"New index directory detected: old=\"+lastNewIndexDir + \" new=\" + result);\n    }\n    lastNewIndexDir = result;\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","sourceNew":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   */\n  public String getNewIndexDir() {\n    String result = dataDir + \"index/\";\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = getDirectoryFactory().get(getDataDir(), DirContext.META_DATA, getSolrConfig().indexConfig.lockType);\n      if (dir.fileExists(SnapPuller.INDEX_PROPERTIES)){\n        final IndexInput input = dir.openInput(SnapPuller.INDEX_PROPERTIES, IOContext.DEFAULT);\n  \n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(is);\n          \n          String s = p.getProperty(\"index\");\n          if (s != null && s.trim().length() > 0) {\n              result = dataDir + s;\n          }\n          \n        } catch (Exception e) {\n          log.error(\"Unable to load \" + SnapPuller.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n    } catch (IOException e) {\n      SolrException.log(log, \"\", e);\n    } finally {\n      if (dir != null) {\n        try {\n          getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(log, \"\", e);\n        }\n      }\n    }\n    if (!result.equals(lastNewIndexDir)) {\n      log.info(\"New index directory detected: old=\"+lastNewIndexDir + \" new=\" + result);\n    }\n    lastNewIndexDir = result;\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   */\n  public String getNewIndexDir() {\n    String result = dataDir + \"index/\";\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = getDirectoryFactory().get(getDataDir(), getSolrConfig().indexConfig.lockType);\n      if (dir.fileExists(SnapPuller.INDEX_PROPERTIES)){\n        final IndexInput input = dir.openInput(SnapPuller.INDEX_PROPERTIES, IOContext.DEFAULT);\n  \n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(is);\n          \n          String s = p.getProperty(\"index\");\n          if (s != null && s.trim().length() > 0) {\n              result = dataDir + s;\n          }\n          \n        } catch (Exception e) {\n          log.error(\"Unable to load \" + SnapPuller.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n    } catch (IOException e) {\n      SolrException.log(log, \"\", e);\n    } finally {\n      if (dir != null) {\n        try {\n          getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(log, \"\", e);\n        }\n      }\n    }\n    if (!result.equals(lastNewIndexDir)) {\n      log.info(\"New index directory detected: old=\"+lastNewIndexDir + \" new=\" + result);\n    }\n    lastNewIndexDir = result;\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fd8fc50365ae7bb9c0d47256bc40182559b70d1","date":1373649022,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","sourceNew":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   */\n  public String getNewIndexDir() {\n    String result = dataDir + \"index/\";\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = getDirectoryFactory().get(getDataDir(), DirContext.META_DATA, getSolrConfig().indexConfig.lockType);\n      if (dir.fileExists(SnapPuller.INDEX_PROPERTIES)){\n        final IndexInput input = dir.openInput(SnapPuller.INDEX_PROPERTIES, IOContext.DEFAULT);\n  \n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(new InputStreamReader(is, \"UTF-8\"));\n          \n          String s = p.getProperty(\"index\");\n          if (s != null && s.trim().length() > 0) {\n              result = dataDir + s;\n          }\n          \n        } catch (Exception e) {\n          log.error(\"Unable to load \" + SnapPuller.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n    } catch (IOException e) {\n      SolrException.log(log, \"\", e);\n    } finally {\n      if (dir != null) {\n        try {\n          getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(log, \"\", e);\n        }\n      }\n    }\n    if (!result.equals(lastNewIndexDir)) {\n      log.info(\"New index directory detected: old=\"+lastNewIndexDir + \" new=\" + result);\n    }\n    lastNewIndexDir = result;\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   */\n  public String getNewIndexDir() {\n    String result = dataDir + \"index/\";\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = getDirectoryFactory().get(getDataDir(), DirContext.META_DATA, getSolrConfig().indexConfig.lockType);\n      if (dir.fileExists(SnapPuller.INDEX_PROPERTIES)){\n        final IndexInput input = dir.openInput(SnapPuller.INDEX_PROPERTIES, IOContext.DEFAULT);\n  \n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(is);\n          \n          String s = p.getProperty(\"index\");\n          if (s != null && s.trim().length() > 0) {\n              result = dataDir + s;\n          }\n          \n        } catch (Exception e) {\n          log.error(\"Unable to load \" + SnapPuller.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n    } catch (IOException e) {\n      SolrException.log(log, \"\", e);\n    } finally {\n      if (dir != null) {\n        try {\n          getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(log, \"\", e);\n        }\n      }\n    }\n    if (!result.equals(lastNewIndexDir)) {\n      log.info(\"New index directory detected: old=\"+lastNewIndexDir + \" new=\" + result);\n    }\n    lastNewIndexDir = result;\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","sourceNew":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   */\n  public String getNewIndexDir() {\n    String result = dataDir + \"index/\";\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = getDirectoryFactory().get(getDataDir(), DirContext.META_DATA, getSolrConfig().indexConfig.lockType);\n      if (dir.fileExists(SnapPuller.INDEX_PROPERTIES)){\n        final IndexInput input = dir.openInput(SnapPuller.INDEX_PROPERTIES, IOContext.DEFAULT);\n  \n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(new InputStreamReader(is, \"UTF-8\"));\n          \n          String s = p.getProperty(\"index\");\n          if (s != null && s.trim().length() > 0) {\n              result = dataDir + s;\n          }\n          \n        } catch (Exception e) {\n          log.error(\"Unable to load \" + SnapPuller.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n    } catch (IOException e) {\n      SolrException.log(log, \"\", e);\n    } finally {\n      if (dir != null) {\n        try {\n          getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(log, \"\", e);\n        }\n      }\n    }\n    if (!result.equals(lastNewIndexDir)) {\n      log.info(\"New index directory detected: old=\"+lastNewIndexDir + \" new=\" + result);\n    }\n    lastNewIndexDir = result;\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   */\n  public String getNewIndexDir() {\n    String result = dataDir + \"index/\";\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = getDirectoryFactory().get(getDataDir(), DirContext.META_DATA, getSolrConfig().indexConfig.lockType);\n      if (dir.fileExists(SnapPuller.INDEX_PROPERTIES)){\n        final IndexInput input = dir.openInput(SnapPuller.INDEX_PROPERTIES, IOContext.DEFAULT);\n  \n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(is);\n          \n          String s = p.getProperty(\"index\");\n          if (s != null && s.trim().length() > 0) {\n              result = dataDir + s;\n          }\n          \n        } catch (Exception e) {\n          log.error(\"Unable to load \" + SnapPuller.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n    } catch (IOException e) {\n      SolrException.log(log, \"\", e);\n    } finally {\n      if (dir != null) {\n        try {\n          getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(log, \"\", e);\n        }\n      }\n    }\n    if (!result.equals(lastNewIndexDir)) {\n      log.info(\"New index directory detected: old=\"+lastNewIndexDir + \" new=\" + result);\n    }\n    lastNewIndexDir = result;\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd4e13d997cf4fb810398a20a299c2c5a9f6b796","date":1395594336,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","sourceNew":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   */\n  public String getNewIndexDir() {\n    String result = dataDir + \"index/\";\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = getDirectoryFactory().get(getDataDir(), DirContext.META_DATA, getSolrConfig().indexConfig.lockType);\n      IndexInput input;\n      try {\n        input = dir.openInput(SnapPuller.INDEX_PROPERTIES, IOContext.DEFAULT);\n      } catch (FileNotFoundException | NoSuchFileException e) {\n        input = null;\n      }\n\n      if (input != null) {\n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(new InputStreamReader(is, \"UTF-8\"));\n          \n          String s = p.getProperty(\"index\");\n          if (s != null && s.trim().length() > 0) {\n              result = dataDir + s;\n          }\n          \n        } catch (Exception e) {\n          log.error(\"Unable to load \" + SnapPuller.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n    } catch (IOException e) {\n      SolrException.log(log, \"\", e);\n    } finally {\n      if (dir != null) {\n        try {\n          getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(log, \"\", e);\n        }\n      }\n    }\n    if (!result.equals(lastNewIndexDir)) {\n      log.info(\"New index directory detected: old=\"+lastNewIndexDir + \" new=\" + result);\n    }\n    lastNewIndexDir = result;\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   */\n  public String getNewIndexDir() {\n    String result = dataDir + \"index/\";\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = getDirectoryFactory().get(getDataDir(), DirContext.META_DATA, getSolrConfig().indexConfig.lockType);\n      if (dir.fileExists(SnapPuller.INDEX_PROPERTIES)){\n        final IndexInput input = dir.openInput(SnapPuller.INDEX_PROPERTIES, IOContext.DEFAULT);\n  \n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(new InputStreamReader(is, \"UTF-8\"));\n          \n          String s = p.getProperty(\"index\");\n          if (s != null && s.trim().length() > 0) {\n              result = dataDir + s;\n          }\n          \n        } catch (Exception e) {\n          log.error(\"Unable to load \" + SnapPuller.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n    } catch (IOException e) {\n      SolrException.log(log, \"\", e);\n    } finally {\n      if (dir != null) {\n        try {\n          getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(log, \"\", e);\n        }\n      }\n    }\n    if (!result.equals(lastNewIndexDir)) {\n      log.info(\"New index directory detected: old=\"+lastNewIndexDir + \" new=\" + result);\n    }\n    lastNewIndexDir = result;\n    return result;\n  }\n\n","bugFix":null,"bugIntro":["96e0d4494fe54b31c7f0151f3a632124ab806351"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","sourceNew":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   */\n  public String getNewIndexDir() {\n    String result = dataDir + \"index/\";\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = getDirectoryFactory().get(getDataDir(), DirContext.META_DATA, getSolrConfig().indexConfig.lockType);\n      IndexInput input;\n      try {\n        input = dir.openInput(SnapPuller.INDEX_PROPERTIES, IOContext.DEFAULT);\n      } catch (FileNotFoundException | NoSuchFileException e) {\n        input = null;\n      }\n\n      if (input != null) {\n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n          \n          String s = p.getProperty(\"index\");\n          if (s != null && s.trim().length() > 0) {\n              result = dataDir + s;\n          }\n          \n        } catch (Exception e) {\n          log.error(\"Unable to load \" + SnapPuller.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n    } catch (IOException e) {\n      SolrException.log(log, \"\", e);\n    } finally {\n      if (dir != null) {\n        try {\n          getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(log, \"\", e);\n        }\n      }\n    }\n    if (!result.equals(lastNewIndexDir)) {\n      log.info(\"New index directory detected: old=\"+lastNewIndexDir + \" new=\" + result);\n    }\n    lastNewIndexDir = result;\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   */\n  public String getNewIndexDir() {\n    String result = dataDir + \"index/\";\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = getDirectoryFactory().get(getDataDir(), DirContext.META_DATA, getSolrConfig().indexConfig.lockType);\n      IndexInput input;\n      try {\n        input = dir.openInput(SnapPuller.INDEX_PROPERTIES, IOContext.DEFAULT);\n      } catch (FileNotFoundException | NoSuchFileException e) {\n        input = null;\n      }\n\n      if (input != null) {\n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(new InputStreamReader(is, \"UTF-8\"));\n          \n          String s = p.getProperty(\"index\");\n          if (s != null && s.trim().length() > 0) {\n              result = dataDir + s;\n          }\n          \n        } catch (Exception e) {\n          log.error(\"Unable to load \" + SnapPuller.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n    } catch (IOException e) {\n      SolrException.log(log, \"\", e);\n    } finally {\n      if (dir != null) {\n        try {\n          getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(log, \"\", e);\n        }\n      }\n    }\n    if (!result.equals(lastNewIndexDir)) {\n      log.info(\"New index directory detected: old=\"+lastNewIndexDir + \" new=\" + result);\n    }\n    lastNewIndexDir = result;\n    return result;\n  }\n\n","bugFix":null,"bugIntro":["96e0d4494fe54b31c7f0151f3a632124ab806351"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","sourceNew":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   */\n  public String getNewIndexDir() {\n    String result = dataDir + \"index/\";\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = getDirectoryFactory().get(getDataDir(), DirContext.META_DATA, getSolrConfig().indexConfig.lockType);\n      IndexInput input;\n      try {\n        input = dir.openInput(SnapPuller.INDEX_PROPERTIES, IOContext.DEFAULT);\n      } catch (FileNotFoundException | NoSuchFileException e) {\n        input = null;\n      }\n\n      if (input != null) {\n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n          \n          String s = p.getProperty(\"index\");\n          if (s != null && s.trim().length() > 0) {\n              result = dataDir + s;\n          }\n          \n        } catch (Exception e) {\n          log.error(\"Unable to load \" + SnapPuller.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n    } catch (IOException e) {\n      SolrException.log(log, \"\", e);\n    } finally {\n      if (dir != null) {\n        try {\n          getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(log, \"\", e);\n        }\n      }\n    }\n    if (!result.equals(lastNewIndexDir)) {\n      log.info(\"New index directory detected: old=\"+lastNewIndexDir + \" new=\" + result);\n    }\n    lastNewIndexDir = result;\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   */\n  public String getNewIndexDir() {\n    String result = dataDir + \"index/\";\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = getDirectoryFactory().get(getDataDir(), DirContext.META_DATA, getSolrConfig().indexConfig.lockType);\n      IndexInput input;\n      try {\n        input = dir.openInput(SnapPuller.INDEX_PROPERTIES, IOContext.DEFAULT);\n      } catch (FileNotFoundException | NoSuchFileException e) {\n        input = null;\n      }\n\n      if (input != null) {\n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(new InputStreamReader(is, \"UTF-8\"));\n          \n          String s = p.getProperty(\"index\");\n          if (s != null && s.trim().length() > 0) {\n              result = dataDir + s;\n          }\n          \n        } catch (Exception e) {\n          log.error(\"Unable to load \" + SnapPuller.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n    } catch (IOException e) {\n      SolrException.log(log, \"\", e);\n    } finally {\n      if (dir != null) {\n        try {\n          getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(log, \"\", e);\n        }\n      }\n    }\n    if (!result.equals(lastNewIndexDir)) {\n      log.info(\"New index directory detected: old=\"+lastNewIndexDir + \" new=\" + result);\n    }\n    lastNewIndexDir = result;\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20f6b7cff3771384f27af0f059795d7e64aff6b9","date":1425498309,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","sourceNew":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   */\n  public String getNewIndexDir() {\n    String result = dataDir + \"index/\";\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = getDirectoryFactory().get(getDataDir(), DirContext.META_DATA, getSolrConfig().indexConfig.lockType);\n      IndexInput input;\n      try {\n        input = dir.openInput(IndexFetcher.INDEX_PROPERTIES, IOContext.DEFAULT);\n      } catch (FileNotFoundException | NoSuchFileException e) {\n        input = null;\n      }\n\n      if (input != null) {\n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n          \n          String s = p.getProperty(\"index\");\n          if (s != null && s.trim().length() > 0) {\n              result = dataDir + s;\n          }\n          \n        } catch (Exception e) {\n          log.error(\"Unable to load \" + IndexFetcher.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n    } catch (IOException e) {\n      SolrException.log(log, \"\", e);\n    } finally {\n      if (dir != null) {\n        try {\n          getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(log, \"\", e);\n        }\n      }\n    }\n    if (!result.equals(lastNewIndexDir)) {\n      log.info(\"New index directory detected: old=\"+lastNewIndexDir + \" new=\" + result);\n    }\n    lastNewIndexDir = result;\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   */\n  public String getNewIndexDir() {\n    String result = dataDir + \"index/\";\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = getDirectoryFactory().get(getDataDir(), DirContext.META_DATA, getSolrConfig().indexConfig.lockType);\n      IndexInput input;\n      try {\n        input = dir.openInput(SnapPuller.INDEX_PROPERTIES, IOContext.DEFAULT);\n      } catch (FileNotFoundException | NoSuchFileException e) {\n        input = null;\n      }\n\n      if (input != null) {\n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n          \n          String s = p.getProperty(\"index\");\n          if (s != null && s.trim().length() > 0) {\n              result = dataDir + s;\n          }\n          \n        } catch (Exception e) {\n          log.error(\"Unable to load \" + SnapPuller.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n    } catch (IOException e) {\n      SolrException.log(log, \"\", e);\n    } finally {\n      if (dir != null) {\n        try {\n          getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(log, \"\", e);\n        }\n      }\n    }\n    if (!result.equals(lastNewIndexDir)) {\n      log.info(\"New index directory detected: old=\"+lastNewIndexDir + \" new=\" + result);\n    }\n    lastNewIndexDir = result;\n    return result;\n  }\n\n","bugFix":null,"bugIntro":["96e0d4494fe54b31c7f0151f3a632124ab806351"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9aea0485ecacb6734c17da2d02569816c23a69c1","date":1425707735,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","sourceNew":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   */\n  public String getNewIndexDir() {\n    String result = dataDir + \"index/\";\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = getDirectoryFactory().get(getDataDir(), DirContext.META_DATA, getSolrConfig().indexConfig.lockType);\n      IndexInput input;\n      try {\n        input = dir.openInput(IndexFetcher.INDEX_PROPERTIES, IOContext.DEFAULT);\n      } catch (FileNotFoundException | NoSuchFileException e) {\n        input = null;\n      }\n\n      if (input != null) {\n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n\n          String s = p.getProperty(\"index\");\n          if (s != null && s.trim().length() > 0) {\n              result = dataDir + s;\n          }\n\n        } catch (Exception e) {\n          log.error(\"Unable to load \" + IndexFetcher.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n    } catch (IOException e) {\n      SolrException.log(log, \"\", e);\n    } finally {\n      if (dir != null) {\n        try {\n          getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(log, \"\", e);\n        }\n      }\n    }\n    if (!result.equals(lastNewIndexDir)) {\n      log.info(\"New index directory detected: old=\"+lastNewIndexDir + \" new=\" + result);\n    }\n    lastNewIndexDir = result;\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   */\n  public String getNewIndexDir() {\n    String result = dataDir + \"index/\";\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = getDirectoryFactory().get(getDataDir(), DirContext.META_DATA, getSolrConfig().indexConfig.lockType);\n      IndexInput input;\n      try {\n        input = dir.openInput(IndexFetcher.INDEX_PROPERTIES, IOContext.DEFAULT);\n      } catch (FileNotFoundException | NoSuchFileException e) {\n        input = null;\n      }\n\n      if (input != null) {\n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n          \n          String s = p.getProperty(\"index\");\n          if (s != null && s.trim().length() > 0) {\n              result = dataDir + s;\n          }\n          \n        } catch (Exception e) {\n          log.error(\"Unable to load \" + IndexFetcher.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n    } catch (IOException e) {\n      SolrException.log(log, \"\", e);\n    } finally {\n      if (dir != null) {\n        try {\n          getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(log, \"\", e);\n        }\n      }\n    }\n    if (!result.equals(lastNewIndexDir)) {\n      log.info(\"New index directory detected: old=\"+lastNewIndexDir + \" new=\" + result);\n    }\n    lastNewIndexDir = result;\n    return result;\n  }\n\n","bugFix":null,"bugIntro":["96e0d4494fe54b31c7f0151f3a632124ab806351"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","sourceNew":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   */\n  public String getNewIndexDir() {\n    String result = dataDir + \"index/\";\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = getDirectoryFactory().get(getDataDir(), DirContext.META_DATA, getSolrConfig().indexConfig.lockType);\n      IndexInput input;\n      try {\n        input = dir.openInput(IndexFetcher.INDEX_PROPERTIES, IOContext.DEFAULT);\n      } catch (FileNotFoundException | NoSuchFileException e) {\n        input = null;\n      }\n\n      if (input != null) {\n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n\n          String s = p.getProperty(\"index\");\n          if (s != null && s.trim().length() > 0) {\n              result = dataDir + s;\n          }\n\n        } catch (Exception e) {\n          log.error(\"Unable to load \" + IndexFetcher.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n    } catch (IOException e) {\n      SolrException.log(log, \"\", e);\n    } finally {\n      if (dir != null) {\n        try {\n          getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(log, \"\", e);\n        }\n      }\n    }\n    if (!result.equals(lastNewIndexDir)) {\n      log.info(\"New index directory detected: old=\"+lastNewIndexDir + \" new=\" + result);\n    }\n    lastNewIndexDir = result;\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   */\n  public String getNewIndexDir() {\n    String result = dataDir + \"index/\";\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = getDirectoryFactory().get(getDataDir(), DirContext.META_DATA, getSolrConfig().indexConfig.lockType);\n      IndexInput input;\n      try {\n        input = dir.openInput(SnapPuller.INDEX_PROPERTIES, IOContext.DEFAULT);\n      } catch (FileNotFoundException | NoSuchFileException e) {\n        input = null;\n      }\n\n      if (input != null) {\n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n          \n          String s = p.getProperty(\"index\");\n          if (s != null && s.trim().length() > 0) {\n              result = dataDir + s;\n          }\n          \n        } catch (Exception e) {\n          log.error(\"Unable to load \" + SnapPuller.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n    } catch (IOException e) {\n      SolrException.log(log, \"\", e);\n    } finally {\n      if (dir != null) {\n        try {\n          getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(log, \"\", e);\n        }\n      }\n    }\n    if (!result.equals(lastNewIndexDir)) {\n      log.info(\"New index directory detected: old=\"+lastNewIndexDir + \" new=\" + result);\n    }\n    lastNewIndexDir = result;\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d62172dd2fc1195c7e475550ac394a9948a18ae","date":1474974102,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","sourceNew":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   */\n  public String getNewIndexDir() {\n    String result = dataDir + \"index/\";\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = getDirectoryFactory().get(getDataDir(), DirContext.META_DATA, getSolrConfig().indexConfig.lockType);\n      IndexInput input;\n      try {\n        input = dir.openInput(IndexFetcher.INDEX_PROPERTIES, IOContext.DEFAULT);\n      } catch (FileNotFoundException | NoSuchFileException e) {\n        input = null;\n      }\n\n      if (input != null) {\n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n\n          String s = p.getProperty(\"index\");\n          if (s != null && s.trim().length() > 0) {\n              result = dataDir + s;\n          }\n\n        } catch (Exception e) {\n          log.error(\"Unable to load \" + IndexFetcher.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n    } catch (IOException e) {\n      SolrException.log(log, \"\", e);\n    } finally {\n      if (dir != null) {\n        try {\n          getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(log, \"\", e);\n        }\n      }\n    }\n    if (!result.equals(lastNewIndexDir)) {\n      log.debug(\"New index directory detected: old=\"+lastNewIndexDir + \" new=\" + result);\n    }\n    lastNewIndexDir = result;\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   */\n  public String getNewIndexDir() {\n    String result = dataDir + \"index/\";\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = getDirectoryFactory().get(getDataDir(), DirContext.META_DATA, getSolrConfig().indexConfig.lockType);\n      IndexInput input;\n      try {\n        input = dir.openInput(IndexFetcher.INDEX_PROPERTIES, IOContext.DEFAULT);\n      } catch (FileNotFoundException | NoSuchFileException e) {\n        input = null;\n      }\n\n      if (input != null) {\n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n\n          String s = p.getProperty(\"index\");\n          if (s != null && s.trim().length() > 0) {\n              result = dataDir + s;\n          }\n\n        } catch (Exception e) {\n          log.error(\"Unable to load \" + IndexFetcher.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n    } catch (IOException e) {\n      SolrException.log(log, \"\", e);\n    } finally {\n      if (dir != null) {\n        try {\n          getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(log, \"\", e);\n        }\n      }\n    }\n    if (!result.equals(lastNewIndexDir)) {\n      log.info(\"New index directory detected: old=\"+lastNewIndexDir + \" new=\" + result);\n    }\n    lastNewIndexDir = result;\n    return result;\n  }\n\n","bugFix":null,"bugIntro":["96e0d4494fe54b31c7f0151f3a632124ab806351"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","sourceNew":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   */\n  public String getNewIndexDir() {\n    String result = dataDir + \"index/\";\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = getDirectoryFactory().get(getDataDir(), DirContext.META_DATA, getSolrConfig().indexConfig.lockType);\n      IndexInput input;\n      try {\n        input = dir.openInput(IndexFetcher.INDEX_PROPERTIES, IOContext.DEFAULT);\n      } catch (FileNotFoundException | NoSuchFileException e) {\n        input = null;\n      }\n\n      if (input != null) {\n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n\n          String s = p.getProperty(\"index\");\n          if (s != null && s.trim().length() > 0) {\n              result = dataDir + s;\n          }\n\n        } catch (Exception e) {\n          log.error(\"Unable to load \" + IndexFetcher.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n    } catch (IOException e) {\n      SolrException.log(log, \"\", e);\n    } finally {\n      if (dir != null) {\n        try {\n          getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(log, \"\", e);\n        }\n      }\n    }\n    if (!result.equals(lastNewIndexDir)) {\n      log.debug(\"New index directory detected: old=\"+lastNewIndexDir + \" new=\" + result);\n    }\n    lastNewIndexDir = result;\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   */\n  public String getNewIndexDir() {\n    String result = dataDir + \"index/\";\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = getDirectoryFactory().get(getDataDir(), DirContext.META_DATA, getSolrConfig().indexConfig.lockType);\n      IndexInput input;\n      try {\n        input = dir.openInput(IndexFetcher.INDEX_PROPERTIES, IOContext.DEFAULT);\n      } catch (FileNotFoundException | NoSuchFileException e) {\n        input = null;\n      }\n\n      if (input != null) {\n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n\n          String s = p.getProperty(\"index\");\n          if (s != null && s.trim().length() > 0) {\n              result = dataDir + s;\n          }\n\n        } catch (Exception e) {\n          log.error(\"Unable to load \" + IndexFetcher.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n    } catch (IOException e) {\n      SolrException.log(log, \"\", e);\n    } finally {\n      if (dir != null) {\n        try {\n          getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(log, \"\", e);\n        }\n      }\n    }\n    if (!result.equals(lastNewIndexDir)) {\n      log.info(\"New index directory detected: old=\"+lastNewIndexDir + \" new=\" + result);\n    }\n    lastNewIndexDir = result;\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","sourceNew":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   */\n  public String getNewIndexDir() {\n    String result = dataDir + \"index/\";\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = getDirectoryFactory().get(getDataDir(), DirContext.META_DATA, getSolrConfig().indexConfig.lockType);\n      IndexInput input;\n      try {\n        input = dir.openInput(IndexFetcher.INDEX_PROPERTIES, IOContext.DEFAULT);\n      } catch (FileNotFoundException | NoSuchFileException e) {\n        input = null;\n      }\n\n      if (input != null) {\n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n\n          String s = p.getProperty(\"index\");\n          if (s != null && s.trim().length() > 0) {\n              result = dataDir + s;\n          }\n\n        } catch (Exception e) {\n          log.error(\"Unable to load \" + IndexFetcher.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n    } catch (IOException e) {\n      SolrException.log(log, \"\", e);\n    } finally {\n      if (dir != null) {\n        try {\n          getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(log, \"\", e);\n        }\n      }\n    }\n    if (!result.equals(lastNewIndexDir)) {\n      log.debug(\"New index directory detected: old=\"+lastNewIndexDir + \" new=\" + result);\n    }\n    lastNewIndexDir = result;\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   */\n  public String getNewIndexDir() {\n    String result = dataDir + \"index/\";\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = getDirectoryFactory().get(getDataDir(), DirContext.META_DATA, getSolrConfig().indexConfig.lockType);\n      IndexInput input;\n      try {\n        input = dir.openInput(IndexFetcher.INDEX_PROPERTIES, IOContext.DEFAULT);\n      } catch (FileNotFoundException | NoSuchFileException e) {\n        input = null;\n      }\n\n      if (input != null) {\n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n\n          String s = p.getProperty(\"index\");\n          if (s != null && s.trim().length() > 0) {\n              result = dataDir + s;\n          }\n\n        } catch (Exception e) {\n          log.error(\"Unable to load \" + IndexFetcher.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n    } catch (IOException e) {\n      SolrException.log(log, \"\", e);\n    } finally {\n      if (dir != null) {\n        try {\n          getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(log, \"\", e);\n        }\n      }\n    }\n    if (!result.equals(lastNewIndexDir)) {\n      log.info(\"New index directory detected: old=\"+lastNewIndexDir + \" new=\" + result);\n    }\n    lastNewIndexDir = result;\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96e0d4494fe54b31c7f0151f3a632124ab806351","date":1512410218,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","sourceNew":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned. Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   *\n   * @throws SolrException if for any reason the a reasonable index directory cannot be determined.\n   */\n  public String getNewIndexDir() {\n    Directory dir = null;\n    try {\n      dir = getDirectoryFactory().get(getDataDir(), DirContext.META_DATA, getSolrConfig().indexConfig.lockType);\n      String result = getIndexPropertyFromPropFile(dir);\n      if (!result.equals(lastNewIndexDir)) {\n        log.debug(\"New index directory detected: old=\" + lastNewIndexDir + \" new=\" + result);\n      }\n      lastNewIndexDir = result;\n      return result;\n    } catch (IOException e) {\n      SolrException.log(log, \"\", e);\n      // See SOLR-11687. It is inadvisable to assume we can do the right thing for any but a small\n      // number of exceptions that ware caught and swallowed in getIndexProperty.\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error in getNewIndexDir, exception: \", e);\n    } finally {\n      if (dir != null) {\n        try {\n          getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(log, \"\", e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   */\n  public String getNewIndexDir() {\n    String result = dataDir + \"index/\";\n    Properties p = new Properties();\n    Directory dir = null;\n    try {\n      dir = getDirectoryFactory().get(getDataDir(), DirContext.META_DATA, getSolrConfig().indexConfig.lockType);\n      IndexInput input;\n      try {\n        input = dir.openInput(IndexFetcher.INDEX_PROPERTIES, IOContext.DEFAULT);\n      } catch (FileNotFoundException | NoSuchFileException e) {\n        input = null;\n      }\n\n      if (input != null) {\n        final InputStream is = new PropertiesInputStream(input);\n        try {\n          p.load(new InputStreamReader(is, StandardCharsets.UTF_8));\n\n          String s = p.getProperty(\"index\");\n          if (s != null && s.trim().length() > 0) {\n              result = dataDir + s;\n          }\n\n        } catch (Exception e) {\n          log.error(\"Unable to load \" + IndexFetcher.INDEX_PROPERTIES, e);\n        } finally {\n          IOUtils.closeQuietly(is);\n        }\n      }\n    } catch (IOException e) {\n      SolrException.log(log, \"\", e);\n    } finally {\n      if (dir != null) {\n        try {\n          getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(log, \"\", e);\n        }\n      }\n    }\n    if (!result.equals(lastNewIndexDir)) {\n      log.debug(\"New index directory detected: old=\"+lastNewIndexDir + \" new=\" + result);\n    }\n    lastNewIndexDir = result;\n    return result;\n  }\n\n","bugFix":["20f6b7cff3771384f27af0f059795d7e64aff6b9","d9405f486872f1e416304dfe389741f4ee2f8a4d","cd4e13d997cf4fb810398a20a299c2c5a9f6b796","7d89d7e4e5101347833eea558851bf4209218619","0d62172dd2fc1195c7e475550ac394a9948a18ae","29765e35c99654ed87e394d8bc13d8ab07b51092","d1888bdba4dbb0c062f4a2456bba74c12fb0f42e","17423fb5ef5555fbfa7fe53c15d602faef60ba1a","9aea0485ecacb6734c17da2d02569816c23a69c1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24792720c893049d53a1807bd0ae9b64d1cd7be5","date":1527536585,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","sourceNew":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned. Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   *\n   * @throws SolrException if for any reason the a reasonable index directory cannot be determined.\n   */\n  public String getNewIndexDir() {\n    Directory dir = null;\n    try {\n      dir = getDirectoryFactory().get(getDataDir(), DirContext.META_DATA, getSolrConfig().indexConfig.lockType);\n      String result = getIndexPropertyFromPropFile(dir);\n      if (!result.equals(lastNewIndexDir)) {\n        log.debug(\"New index directory detected: old={} new={}\", lastNewIndexDir, result);\n      }\n      lastNewIndexDir = result;\n      return result;\n    } catch (IOException e) {\n      SolrException.log(log, \"\", e);\n      // See SOLR-11687. It is inadvisable to assume we can do the right thing for any but a small\n      // number of exceptions that ware caught and swallowed in getIndexProperty.\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error in getNewIndexDir, exception: \", e);\n    } finally {\n      if (dir != null) {\n        try {\n          getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(log, \"\", e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned. Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   *\n   * @throws SolrException if for any reason the a reasonable index directory cannot be determined.\n   */\n  public String getNewIndexDir() {\n    Directory dir = null;\n    try {\n      dir = getDirectoryFactory().get(getDataDir(), DirContext.META_DATA, getSolrConfig().indexConfig.lockType);\n      String result = getIndexPropertyFromPropFile(dir);\n      if (!result.equals(lastNewIndexDir)) {\n        log.debug(\"New index directory detected: old=\" + lastNewIndexDir + \" new=\" + result);\n      }\n      lastNewIndexDir = result;\n      return result;\n    } catch (IOException e) {\n      SolrException.log(log, \"\", e);\n      // See SOLR-11687. It is inadvisable to assume we can do the right thing for any but a small\n      // number of exceptions that ware caught and swallowed in getIndexProperty.\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error in getNewIndexDir, exception: \", e);\n    } finally {\n      if (dir != null) {\n        try {\n          getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(log, \"\", e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#getNewIndexDir().mjava","sourceNew":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned. Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   * @throws SolrException if for any reason the a reasonable index directory cannot be determined.\n   */\n  public String getNewIndexDir() {\n    Directory dir = null;\n    try {\n      dir = getDirectoryFactory().get(getDataDir(), DirContext.META_DATA, getSolrConfig().indexConfig.lockType);\n      String result = getIndexPropertyFromPropFile(dir);\n      if (!result.equals(lastNewIndexDir)) {\n        log.debug(\"New index directory detected: old={} new={}\", lastNewIndexDir, result);\n      }\n      lastNewIndexDir = result;\n      return result;\n    } catch (IOException e) {\n      SolrException.log(log, \"\", e);\n      // See SOLR-11687. It is inadvisable to assume we can do the right thing for any but a small\n      // number of exceptions that ware caught and swallowed in getIndexProperty.\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error in getNewIndexDir, exception: \", e);\n    } finally {\n      if (dir != null) {\n        try {\n          getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(log, \"\", e);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the indexdir as given in index.properties. If index.properties exists in dataDir and\n   * there is a property <i>index</i> available and it points to a valid directory\n   * in dataDir that is returned. Else dataDir/index is returned. Only called for creating new indexSearchers\n   * and indexwriters. Use the getIndexDir() method to know the active index directory\n   *\n   * @return the indexdir as given in index.properties\n   *\n   * @throws SolrException if for any reason the a reasonable index directory cannot be determined.\n   */\n  public String getNewIndexDir() {\n    Directory dir = null;\n    try {\n      dir = getDirectoryFactory().get(getDataDir(), DirContext.META_DATA, getSolrConfig().indexConfig.lockType);\n      String result = getIndexPropertyFromPropFile(dir);\n      if (!result.equals(lastNewIndexDir)) {\n        log.debug(\"New index directory detected: old={} new={}\", lastNewIndexDir, result);\n      }\n      lastNewIndexDir = result;\n      return result;\n    } catch (IOException e) {\n      SolrException.log(log, \"\", e);\n      // See SOLR-11687. It is inadvisable to assume we can do the right thing for any but a small\n      // number of exceptions that ware caught and swallowed in getIndexProperty.\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error in getNewIndexDir, exception: \", e);\n    } finally {\n      if (dir != null) {\n        try {\n          getDirectoryFactory().release(dir);\n        } catch (IOException e) {\n          SolrException.log(log, \"\", e);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","683ee2ef1c6726e074311f22c6c87b48bc5c857c"],"96e0d4494fe54b31c7f0151f3a632124ab806351":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674","1fd8fc50365ae7bb9c0d47256bc40182559b70d1"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674"],"1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674":["683ee2ef1c6726e074311f22c6c87b48bc5c857c"],"17423fb5ef5555fbfa7fe53c15d602faef60ba1a":["c26f00b574427b55127e869b935845554afde1fa"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["41afd2bc740f9a7e7357f2d382ba6fcedb293e76"],"41afd2bc740f9a7e7357f2d382ba6fcedb293e76":["17423fb5ef5555fbfa7fe53c15d602faef60ba1a"],"d1888bdba4dbb0c062f4a2456bba74c12fb0f42e":["718607d99d02778db3280e64975663762c94170d"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["7d89d7e4e5101347833eea558851bf4209218619","9aea0485ecacb6734c17da2d02569816c23a69c1"],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["7d89d7e4e5101347833eea558851bf4209218619"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["24792720c893049d53a1807bd0ae9b64d1cd7be5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["9aea0485ecacb6734c17da2d02569816c23a69c1","0d62172dd2fc1195c7e475550ac394a9948a18ae"],"683ee2ef1c6726e074311f22c6c87b48bc5c857c":["7d2c955494271bc1fe5eee192f9faa295e47acda"],"f2126b84bd093fa3d921582a109a0ee578c28126":["41afd2bc740f9a7e7357f2d382ba6fcedb293e76","d9405f486872f1e416304dfe389741f4ee2f8a4d"],"9aea0485ecacb6734c17da2d02569816c23a69c1":["20f6b7cff3771384f27af0f059795d7e64aff6b9"],"5eb2511ababf862ea11e10761c70ee560cd84510":["cd4e13d997cf4fb810398a20a299c2c5a9f6b796","7d89d7e4e5101347833eea558851bf4209218619"],"7d2c955494271bc1fe5eee192f9faa295e47acda":["d1888bdba4dbb0c062f4a2456bba74c12fb0f42e"],"cd4e13d997cf4fb810398a20a299c2c5a9f6b796":["1fd8fc50365ae7bb9c0d47256bc40182559b70d1"],"0d62172dd2fc1195c7e475550ac394a9948a18ae":["9aea0485ecacb6734c17da2d02569816c23a69c1"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d9405f486872f1e416304dfe389741f4ee2f8a4d","d1888bdba4dbb0c062f4a2456bba74c12fb0f42e"],"24792720c893049d53a1807bd0ae9b64d1cd7be5":["96e0d4494fe54b31c7f0151f3a632124ab806351"],"7d89d7e4e5101347833eea558851bf4209218619":["cd4e13d997cf4fb810398a20a299c2c5a9f6b796"],"1fd8fc50365ae7bb9c0d47256bc40182559b70d1":["1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9aea0485ecacb6734c17da2d02569816c23a69c1","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"718607d99d02778db3280e64975663762c94170d":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2668c99990e4c94a78bac005aa682b7c5986d23a"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["8917bfede3b4ca30f4305c1e391e9218959cd723"],"96e0d4494fe54b31c7f0151f3a632124ab806351":["24792720c893049d53a1807bd0ae9b64d1cd7be5"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"c26f00b574427b55127e869b935845554afde1fa":["17423fb5ef5555fbfa7fe53c15d602faef60ba1a"],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674":["37a0f60745e53927c4c876cfe5b5a58170f0646c","8917bfede3b4ca30f4305c1e391e9218959cd723","1fd8fc50365ae7bb9c0d47256bc40182559b70d1"],"17423fb5ef5555fbfa7fe53c15d602faef60ba1a":["41afd2bc740f9a7e7357f2d382ba6fcedb293e76"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["f2126b84bd093fa3d921582a109a0ee578c28126","407687e67faf6e1f02a211ca078d8e3eed631027","718607d99d02778db3280e64975663762c94170d"],"41afd2bc740f9a7e7357f2d382ba6fcedb293e76":["d9405f486872f1e416304dfe389741f4ee2f8a4d","f2126b84bd093fa3d921582a109a0ee578c28126"],"d1888bdba4dbb0c062f4a2456bba74c12fb0f42e":["7d2c955494271bc1fe5eee192f9faa295e47acda","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["9aea0485ecacb6734c17da2d02569816c23a69c1"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["96e0d4494fe54b31c7f0151f3a632124ab806351","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"683ee2ef1c6726e074311f22c6c87b48bc5c857c":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"9aea0485ecacb6734c17da2d02569816c23a69c1":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","0d62172dd2fc1195c7e475550ac394a9948a18ae","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"7d2c955494271bc1fe5eee192f9faa295e47acda":["683ee2ef1c6726e074311f22c6c87b48bc5c857c"],"0d62172dd2fc1195c7e475550ac394a9948a18ae":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd4e13d997cf4fb810398a20a299c2c5a9f6b796":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"24792720c893049d53a1807bd0ae9b64d1cd7be5":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"7d89d7e4e5101347833eea558851bf4209218619":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","20f6b7cff3771384f27af0f059795d7e64aff6b9","5eb2511ababf862ea11e10761c70ee560cd84510"],"1fd8fc50365ae7bb9c0d47256bc40182559b70d1":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd4e13d997cf4fb810398a20a299c2c5a9f6b796"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"718607d99d02778db3280e64975663762c94170d":["d1888bdba4dbb0c062f4a2456bba74c12fb0f42e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","8917bfede3b4ca30f4305c1e391e9218959cd723","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","f2126b84bd093fa3d921582a109a0ee578c28126","5eb2511ababf862ea11e10761c70ee560cd84510","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}