{"path":"solr/core/src/test/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/BlockPoolSlice#recoverTempUnlinkedBlock(File).mjava","commits":[{"id":"44ca189138a5b6e1989d12ab992fab60e235ddc7","date":1549051496,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/BlockPoolSlice#recoverTempUnlinkedBlock(File).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Recover an unlinked tmp file on datanode restart. If the original block\n   * does not exist, then the tmp file is renamed to be the\n   * original file name and the original name is returned; otherwise the tmp\n   * file is deleted and null is returned.\n   */\n  File recoverTempUnlinkedBlock(File unlinkedTmp) throws IOException {\n    File blockFile = FsDatasetUtil.getOrigFile(unlinkedTmp);\n    if (blockFile.exists()) {\n      // If the original block file still exists, then no recovery is needed.\n      if (!fileIoProvider.delete(volume, unlinkedTmp)) {\n        throw new IOException(\"Unable to cleanup unlinked tmp file \" +\n            unlinkedTmp);\n      }\n      return null;\n    } else {\n      fileIoProvider.rename(volume, unlinkedTmp, blockFile);\n      return blockFile;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"44ca189138a5b6e1989d12ab992fab60e235ddc7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["44ca189138a5b6e1989d12ab992fab60e235ddc7"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["44ca189138a5b6e1989d12ab992fab60e235ddc7"],"44ca189138a5b6e1989d12ab992fab60e235ddc7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}