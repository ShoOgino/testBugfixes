{"path":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.ChunkIterator#copyCompressedData(DataOutput).mjava","commits":[{"id":"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69","date":1352818449,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.ChunkIterator#copyCompressedData(DataOutput).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.ChunkIterator#copyCompressedData(DataOutput).mjava","sourceNew":"    /**\n     * Copy compressed data.\n     */\n    void copyCompressedData(DataOutput out) throws IOException {\n      final int totalLength = totalLength();\n      decompressor.copyCompressedData(fieldsStream, totalLength, out);\n    }\n\n","sourceOld":"    /**\n     * Copy compressed data.\n     */\n    void copyCompressedData(DataOutput out) throws IOException {\n      final int totalLength = totalLength();\n      decompressor.copyCompressedData(fieldsStream, totalLength, out);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f5960acae7f4fa2e8a50f3f9aae784127f98eb7","date":1352900832,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.ChunkIterator#copyCompressedData(DataOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.ChunkIterator#copyCompressedData(DataOutput).mjava","sourceNew":"    /**\n     * Copy compressed data.\n     */\n    void copyCompressedData(DataOutput out) throws IOException {\n      final int chunkSize = chunkSize();\n      decompressor.copyCompressedData(fieldsStream, chunkSize, out);\n    }\n\n","sourceOld":"    /**\n     * Copy compressed data.\n     */\n    void copyCompressedData(DataOutput out) throws IOException {\n      final int totalLength = totalLength();\n      decompressor.copyCompressedData(fieldsStream, totalLength, out);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.ChunkIterator#copyCompressedData(DataOutput).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Copy compressed data.\n     */\n    void copyCompressedData(DataOutput out) throws IOException {\n      final int chunkSize = chunkSize();\n      decompressor.copyCompressedData(fieldsStream, chunkSize, out);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0da99fd4410e5349226b68858c369aae5d679f0","date":1357725616,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.ChunkIterator#copyCompressedData(DataOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.ChunkIterator#copyCompressedData(DataOutput).mjava","sourceNew":"    /**\n     * Copy compressed data.\n     */\n    void copyCompressedData(DataOutput out) throws IOException {\n      final long chunkEnd = docBase + chunkDocs == numDocs\n          ? fieldsStream.length()\n          : indexReader.getStartPointer(docBase + chunkDocs);\n      out.copyBytes(fieldsStream, chunkEnd - fieldsStream.getFilePointer());\n    }\n\n","sourceOld":"    /**\n     * Copy compressed data.\n     */\n    void copyCompressedData(DataOutput out) throws IOException {\n      final int chunkSize = chunkSize();\n      decompressor.copyCompressedData(fieldsStream, chunkSize, out);\n    }\n\n","bugFix":null,"bugIntro":["3a88f37cd0154833b5c58daac509eb8be347d0f2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.ChunkIterator#copyCompressedData(DataOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.ChunkIterator#copyCompressedData(DataOutput).mjava","sourceNew":"    /**\n     * Copy compressed data.\n     */\n    void copyCompressedData(DataOutput out) throws IOException {\n      final long chunkEnd = docBase + chunkDocs == numDocs\n          ? fieldsStream.length()\n          : indexReader.getStartPointer(docBase + chunkDocs);\n      out.copyBytes(fieldsStream, chunkEnd - fieldsStream.getFilePointer());\n    }\n\n","sourceOld":"    /**\n     * Copy compressed data.\n     */\n    void copyCompressedData(DataOutput out) throws IOException {\n      final int chunkSize = chunkSize();\n      decompressor.copyCompressedData(fieldsStream, chunkSize, out);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a88f37cd0154833b5c58daac509eb8be347d0f2","date":1397029487,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.ChunkIterator#copyCompressedData(DataOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.ChunkIterator#copyCompressedData(DataOutput).mjava","sourceNew":"    /**\n     * Copy compressed data.\n     */\n    void copyCompressedData(DataOutput out) throws IOException {\n      assert getVersion() == VERSION_CURRENT;\n      final long chunkEnd = docBase + chunkDocs == numDocs\n          ? maxPointer\n          : indexReader.getStartPointer(docBase + chunkDocs);\n      out.copyBytes(fieldsStream, chunkEnd - fieldsStream.getFilePointer());\n    }\n\n","sourceOld":"    /**\n     * Copy compressed data.\n     */\n    void copyCompressedData(DataOutput out) throws IOException {\n      final long chunkEnd = docBase + chunkDocs == numDocs\n          ? fieldsStream.length()\n          : indexReader.getStartPointer(docBase + chunkDocs);\n      out.copyBytes(fieldsStream, chunkEnd - fieldsStream.getFilePointer());\n    }\n\n","bugFix":["d0da99fd4410e5349226b68858c369aae5d679f0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c33c9c4ca6dc47739595c708779c537e8fb8813d","date":1399378909,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.ChunkIterator#copyCompressedData(DataOutput).mjava","sourceNew":null,"sourceOld":"    /**\n     * Copy compressed data.\n     */\n    void copyCompressedData(DataOutput out) throws IOException {\n      assert getVersion() == VERSION_CURRENT;\n      final long chunkEnd = docBase + chunkDocs == numDocs\n          ? maxPointer\n          : indexReader.getStartPointer(docBase + chunkDocs);\n      out.copyBytes(fieldsStream, chunkEnd - fieldsStream.getFilePointer());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c33c9c4ca6dc47739595c708779c537e8fb8813d":["3a88f37cd0154833b5c58daac509eb8be347d0f2"],"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d0da99fd4410e5349226b68858c369aae5d679f0":["4f5960acae7f4fa2e8a50f3f9aae784127f98eb7"],"4f5960acae7f4fa2e8a50f3f9aae784127f98eb7":["5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4f5960acae7f4fa2e8a50f3f9aae784127f98eb7"],"3a88f37cd0154833b5c58daac509eb8be347d0f2":["d0da99fd4410e5349226b68858c369aae5d679f0"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["407687e67faf6e1f02a211ca078d8e3eed631027","d0da99fd4410e5349226b68858c369aae5d679f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c33c9c4ca6dc47739595c708779c537e8fb8813d"]},"commit2Childs":{"c33c9c4ca6dc47739595c708779c537e8fb8813d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69":["4f5960acae7f4fa2e8a50f3f9aae784127f98eb7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69","407687e67faf6e1f02a211ca078d8e3eed631027"],"d0da99fd4410e5349226b68858c369aae5d679f0":["3a88f37cd0154833b5c58daac509eb8be347d0f2","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"4f5960acae7f4fa2e8a50f3f9aae784127f98eb7":["d0da99fd4410e5349226b68858c369aae5d679f0","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":["4e6354dd7c71fe122926fc53d7d29f715b1283db"],"3a88f37cd0154833b5c58daac509eb8be347d0f2":["c33c9c4ca6dc47739595c708779c537e8fb8813d"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}