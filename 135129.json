{"path":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testNonFinalStopNodes().mjava","commits":[{"id":"8be6e1e4fbbc94d90b78f175c03ff389b6949373","date":1306674752,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testNonFinalStopNodes().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs#testNonFinalStopNodes().mjava","sourceNew":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNodes() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, outputs);\n\n    final FST<Long> fst = new FST<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<Long>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[0].nextFinalOutput = outputs.get(17);\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = outputs.get(42);\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(rootNode));\n    \n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\");\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\");\n    final FST<Long> fst2 = new FST<Long>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNodes() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, outputs);\n\n    final FST<Long> fst = new FST<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<Long>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[0].nextFinalOutput = outputs.get(17);\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = outputs.get(42);\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(rootNode));\n    \n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\");\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\");\n    final FST<Long> fst2 = new FST<Long>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testNonFinalStopNodes().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs#testNonFinalStopNodes().mjava","sourceNew":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNodes() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, outputs);\n\n    final FST<Long> fst = new FST<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<Long>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[0].nextFinalOutput = outputs.get(17);\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = outputs.get(42);\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(rootNode));\n    \n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\");\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\");\n    final FST<Long> fst2 = new FST<Long>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNodes() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, outputs);\n\n    final FST<Long> fst = new FST<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<Long>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[0].nextFinalOutput = outputs.get(17);\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = outputs.get(42);\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(rootNode));\n    \n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\");\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\");\n    final FST<Long> fst2 = new FST<Long>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testNonFinalStopNodes().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs#testNonFinalStopNodes().mjava","sourceNew":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNodes() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, outputs);\n\n    final FST<Long> fst = new FST<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<Long>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[0].nextFinalOutput = outputs.get(17);\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = outputs.get(42);\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(rootNode));\n    \n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\");\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\");\n    final FST<Long> fst2 = new FST<Long>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNodes() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, outputs);\n\n    final FST<Long> fst = new FST<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<Long>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[0].nextFinalOutput = outputs.get(17);\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = outputs.get(42);\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(rootNode));\n    \n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\");\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\");\n    final FST<Long> fst2 = new FST<Long>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testNonFinalStopNodes().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testNonFinalStopNodes().mjava","sourceNew":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNodes() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, outputs);\n\n    final FST<Long> fst = new FST<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<Long>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[0].nextFinalOutput = outputs.get(17);\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = outputs.get(42);\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(rootNode));\n    \n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\", IOContext.DEFAULT);\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\", IOContext.DEFAULT);\n    final FST<Long> fst2 = new FST<Long>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNodes() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, outputs);\n\n    final FST<Long> fst = new FST<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<Long>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[0].nextFinalOutput = outputs.get(17);\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = outputs.get(42);\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(rootNode));\n    \n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\");\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\");\n    final FST<Long> fst2 = new FST<Long>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testNonFinalStopNodes().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testNonFinalStopNodes().mjava","sourceNew":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNodes() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, outputs);\n\n    final FST<Long> fst = new FST<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<Long>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[0].nextFinalOutput = outputs.get(17);\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = outputs.get(42);\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(rootNode));\n    \n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\", IOContext.DEFAULT);\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\", IOContext.DEFAULT);\n    final FST<Long> fst2 = new FST<Long>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNodes() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, outputs);\n\n    final FST<Long> fst = new FST<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<Long>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[0].nextFinalOutput = outputs.get(17);\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = outputs.get(42);\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(rootNode));\n    \n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\");\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\");\n    final FST<Long> fst2 = new FST<Long>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testNonFinalStopNodes().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testNonFinalStopNodes().mjava","sourceNew":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNodes() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, outputs);\n\n    final FST<Long> fst = new FST<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<Long>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[0].nextFinalOutput = outputs.get(17);\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = outputs.get(42);\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(rootNode));\n    \n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\", IOContext.DEFAULT);\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\", IOContext.DEFAULT);\n    final FST<Long> fst2 = new FST<Long>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNodes() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, outputs);\n\n    final FST<Long> fst = new FST<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<Long>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[0].nextFinalOutput = outputs.get(17);\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = outputs.get(42);\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(rootNode));\n    \n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\");\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\");\n    final FST<Long> fst2 = new FST<Long>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f2bf10c11daad40c1e46fabd0d414c19a3e605b","date":1310410393,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testNonFinalStopNodes().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testNonFinalStopNodes().mjava","sourceNew":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNodes() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final FST<Long> fst = new FST<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<Long>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[0].nextFinalOutput = outputs.get(17);\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = outputs.get(42);\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(rootNode));\n    \n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\", IOContext.DEFAULT);\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\", IOContext.DEFAULT);\n    final FST<Long> fst2 = new FST<Long>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNodes() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE1, 0, 0, true, outputs);\n\n    final FST<Long> fst = new FST<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<Long>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[0].nextFinalOutput = outputs.get(17);\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = outputs.get(42);\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(rootNode));\n    \n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\", IOContext.DEFAULT);\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\", IOContext.DEFAULT);\n    final FST<Long> fst2 = new FST<Long>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3be20ca1091c0b7cdb2308b9023606a5e451cec","date":1327877325,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testNonFinalStopNode().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testNonFinalStopNodes().mjava","sourceNew":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNode() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final FST<Long> fst = new FST<Long>(FST.INPUT_TYPE.BYTE1, outputs, false);\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<Long>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(node);\n      rootNode.arcs[0].nextFinalOutput = 17L;\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = 42L;\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(rootNode));\n\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp3/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    \n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\", IOContext.DEFAULT);\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\", IOContext.DEFAULT);\n    final FST<Long> fst2 = new FST<Long>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNodes() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final FST<Long> fst = new FST<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<Long>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[0].nextFinalOutput = outputs.get(17);\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = outputs.get(42);\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(rootNode));\n    \n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\", IOContext.DEFAULT);\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\", IOContext.DEFAULT);\n    final FST<Long> fst2 = new FST<Long>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817882884229bace7dc5d1b75f6b0e4aa1e47122","date":1327879145,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testNonFinalStopNode().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testNonFinalStopNodes().mjava","sourceNew":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNode() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final FST<Long> fst = new FST<Long>(FST.INPUT_TYPE.BYTE1, outputs, false);\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<Long>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(node);\n      rootNode.arcs[0].nextFinalOutput = 17L;\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = 42L;\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(rootNode));\n\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp3/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    \n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\", IOContext.DEFAULT);\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\", IOContext.DEFAULT);\n    final FST<Long> fst2 = new FST<Long>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNodes() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final FST<Long> fst = new FST<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<Long>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[0].nextFinalOutput = outputs.get(17);\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = outputs.get(42);\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(rootNode));\n    \n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\", IOContext.DEFAULT);\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\", IOContext.DEFAULT);\n    final FST<Long> fst2 = new FST<Long>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testNonFinalStopNode().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testNonFinalStopNodes().mjava","sourceNew":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNode() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final FST<Long> fst = new FST<Long>(FST.INPUT_TYPE.BYTE1, outputs, false);\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<Long>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(node);\n      rootNode.arcs[0].nextFinalOutput = 17L;\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.node = fst.addNode(node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = 42L;\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(rootNode));\n\n    StringWriter w = new StringWriter();\n    //Writer w = new OutputStreamWriter(new FileOutputStream(\"/x/tmp3/out.dot\"));\n    Util.toDot(fst, w, false, false);\n    w.close();\n    \n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\", IOContext.DEFAULT);\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\", IOContext.DEFAULT);\n    final FST<Long> fst2 = new FST<Long>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Make sure raw FST can differentiate between final vs\n  // non-final end nodes\n  public void testNonFinalStopNodes() throws Exception {\n    final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    final Long nothing = outputs.getNoOutput();\n    final Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final FST<Long> fst = new FST<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n    final Builder.UnCompiledNode<Long> rootNode = new Builder.UnCompiledNode<Long>(b, 0);\n\n    // Add final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      node.isFinal = true;\n      rootNode.addArc('a', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[0].nextFinalOutput = outputs.get(17);\n      rootNode.arcs[0].isFinal = true;\n      rootNode.arcs[0].output = nothing;\n      rootNode.arcs[0].target = frozen;\n    }\n\n    // Add non-final stop node\n    {\n      final Builder.UnCompiledNode<Long> node = new Builder.UnCompiledNode<Long>(b, 0);\n      rootNode.addArc('b', node);\n      final Builder.CompiledNode frozen = new Builder.CompiledNode();\n      frozen.address = fst.addNode(node);\n      rootNode.arcs[1].nextFinalOutput = nothing;\n      rootNode.arcs[1].output = outputs.get(42);\n      rootNode.arcs[1].target = frozen;\n    }\n\n    fst.finish(fst.addNode(rootNode));\n    \n    checkStopNodes(fst, outputs);\n\n    // Make sure it still works after save/load:\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(\"fst\", IOContext.DEFAULT);\n    fst.save(out);\n    out.close();\n\n    IndexInput in = dir.openInput(\"fst\", IOContext.DEFAULT);\n    final FST<Long> fst2 = new FST<Long>(in, outputs);\n    checkStopNodes(fst2, outputs);\n    in.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["4f2bf10c11daad40c1e46fabd0d414c19a3e605b"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":["4f2bf10c11daad40c1e46fabd0d414c19a3e605b","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4f2bf10c11daad40c1e46fabd0d414c19a3e605b":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"5b6fdfce35d0adb18836cf8711abe487a934df33":["4f2bf10c11daad40c1e46fabd0d414c19a3e605b","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["8be6e1e4fbbc94d90b78f175c03ff389b6949373","639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8be6e1e4fbbc94d90b78f175c03ff389b6949373"]},"commit2Childs":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","639c36565ce03aed5b0fce7c9e4448e53a1f7efd","ddc4c914be86e34b54f70023f45a60fa7f04e929","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":[],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8be6e1e4fbbc94d90b78f175c03ff389b6949373","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"4f2bf10c11daad40c1e46fabd0d414c19a3e605b":["b3be20ca1091c0b7cdb2308b9023606a5e451cec","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["4f2bf10c11daad40c1e46fabd0d414c19a3e605b","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33","5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}