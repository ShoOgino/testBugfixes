{"path":"solr/core/src/test/org/apache/solr/core/AbstractBadConfigTestBase#assertConfigs(String,String,String).mjava","commits":[{"id":"9e2656623e57ced6c16aae473bab02019c951802","date":1342126181,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/AbstractBadConfigTestBase#assertConfigs(String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Given a solrconfig.xml file name, a schema file name, and an \n   * expected errString, asserts that initializing a core with these \n   * files causes an error matching the specified errString ot be thrown.\n   */\n  protected final void assertConfigs(final String solrconfigFile,\n                                     final String schemaFile, \n                                     final String errString) \n    throws Exception {\n\n    ignoreException(Pattern.quote(errString));\n    try {\n      initCore( solrconfigFile, schemaFile );\n    } catch (Exception e) {\n      // short circuit out if we found what we expected\n      if (-1 != e.getMessage().indexOf(errString)) return;\n      // Test the cause too in case the expected error is wrapped by the TestHarness\n      // (NOTE: we don't go all the way down. Either errString should be changed,\n      // or some error wrapping should use a better message or both)\n      if (null != e.getCause() &&\n          null != e.getCause().getMessage() &&\n          -1 != e.getCause().getMessage().indexOf(errString)) return;\n\n      // otherwise, rethrow it, possibly completley unrelated\n      throw new SolrException\n        (ErrorCode.SERVER_ERROR, \n         \"Unexpected error, expected error matching: \" + errString, e);\n    } finally {\n      deleteCore();\n      resetExceptionIgnores();\n    }\n    fail(\"Did not encounter any exception from: \" + solrconfigFile + \" using \" + schemaFile);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/AbstractBadConfigTestBase#assertConfigs(String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Given a solrconfig.xml file name, a schema file name, and an \n   * expected errString, asserts that initializing a core with these \n   * files causes an error matching the specified errString ot be thrown.\n   */\n  protected final void assertConfigs(final String solrconfigFile,\n                                     final String schemaFile, \n                                     final String errString) \n    throws Exception {\n\n    ignoreException(Pattern.quote(errString));\n    try {\n      initCore( solrconfigFile, schemaFile );\n    } catch (Exception e) {\n      // short circuit out if we found what we expected\n      if (-1 != e.getMessage().indexOf(errString)) return;\n      // Test the cause too in case the expected error is wrapped by the TestHarness\n      // (NOTE: we don't go all the way down. Either errString should be changed,\n      // or some error wrapping should use a better message or both)\n      if (null != e.getCause() &&\n          null != e.getCause().getMessage() &&\n          -1 != e.getCause().getMessage().indexOf(errString)) return;\n\n      // otherwise, rethrow it, possibly completley unrelated\n      throw new SolrException\n        (ErrorCode.SERVER_ERROR, \n         \"Unexpected error, expected error matching: \" + errString, e);\n    } finally {\n      deleteCore();\n      resetExceptionIgnores();\n    }\n    fail(\"Did not encounter any exception from: \" + solrconfigFile + \" using \" + schemaFile);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/AbstractBadConfigTestBase#assertConfigs(String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Given a solrconfig.xml file name, a schema file name, and an \n   * expected errString, asserts that initializing a core with these \n   * files causes an error matching the specified errString ot be thrown.\n   */\n  protected final void assertConfigs(final String solrconfigFile,\n                                     final String schemaFile, \n                                     final String errString) \n    throws Exception {\n\n    ignoreException(Pattern.quote(errString));\n    try {\n      initCore( solrconfigFile, schemaFile );\n    } catch (Exception e) {\n      // short circuit out if we found what we expected\n      if (-1 != e.getMessage().indexOf(errString)) return;\n      // Test the cause too in case the expected error is wrapped by the TestHarness\n      // (NOTE: we don't go all the way down. Either errString should be changed,\n      // or some error wrapping should use a better message or both)\n      if (null != e.getCause() &&\n          null != e.getCause().getMessage() &&\n          -1 != e.getCause().getMessage().indexOf(errString)) return;\n\n      // otherwise, rethrow it, possibly completley unrelated\n      throw new SolrException\n        (ErrorCode.SERVER_ERROR, \n         \"Unexpected error, expected error matching: \" + errString, e);\n    } finally {\n      deleteCore();\n      resetExceptionIgnores();\n    }\n    fail(\"Did not encounter any exception from: \" + solrconfigFile + \" using \" + schemaFile);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9cf81bc8c6e4078e236f0e38b3a2d0271854f207","date":1364832963,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/AbstractBadConfigTestBase#assertConfigs(String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/AbstractBadConfigTestBase#assertConfigs(String,String,String).mjava","sourceNew":"  /**\n   * Given a solrconfig.xml file name, a schema file name, and an \n   * expected errString, asserts that initializing a core with these \n   * files causes an error matching the specified errString ot be thrown.\n   */\n  protected final void assertConfigs(final String solrconfigFile,\n                                     final String schemaFile,\n                                     final String errString)\n      throws Exception {\n    assertConfigs(solrconfigFile, schemaFile, null, errString);\n  }\n\n","sourceOld":"  /**\n   * Given a solrconfig.xml file name, a schema file name, and an \n   * expected errString, asserts that initializing a core with these \n   * files causes an error matching the specified errString ot be thrown.\n   */\n  protected final void assertConfigs(final String solrconfigFile,\n                                     final String schemaFile, \n                                     final String errString) \n    throws Exception {\n\n    ignoreException(Pattern.quote(errString));\n    try {\n      initCore( solrconfigFile, schemaFile );\n    } catch (Exception e) {\n      // short circuit out if we found what we expected\n      if (-1 != e.getMessage().indexOf(errString)) return;\n      // Test the cause too in case the expected error is wrapped by the TestHarness\n      // (NOTE: we don't go all the way down. Either errString should be changed,\n      // or some error wrapping should use a better message or both)\n      if (null != e.getCause() &&\n          null != e.getCause().getMessage() &&\n          -1 != e.getCause().getMessage().indexOf(errString)) return;\n\n      // otherwise, rethrow it, possibly completley unrelated\n      throw new SolrException\n        (ErrorCode.SERVER_ERROR, \n         \"Unexpected error, expected error matching: \" + errString, e);\n    } finally {\n      deleteCore();\n      resetExceptionIgnores();\n    }\n    fail(\"Did not encounter any exception from: \" + solrconfigFile + \" using \" + schemaFile);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be34977edad162456de4a4583804025803591c45","date":1381910671,"type":5,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/core/AbstractBadConfigTestBase#assertConfigs(String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/AbstractBadConfigTestBase#assertConfigs(String,String,String).mjava","sourceNew":"  /**\n   * Given a solrconfig.xml file name, a schema file name, and an \n   * expected errString, asserts that initializing a core with these \n   * files causes an error matching the specified errString ot be thrown.\n   */\n  protected final void assertConfigs(final String solrconfigFile,\n                                     final String schemaFile,\n                                     final String errString)\n      throws Exception {\n    assertConfigs(solrconfigFile, schemaFile, null, errString);\n  }\n\n","sourceOld":"  /**\n   * Given a solrconfig.xml file name, a schema file name, and an \n   * expected errString, asserts that initializing a core with these \n   * files causes an error matching the specified errString ot be thrown.\n   */\n  protected final void assertConfigs(final String solrconfigFile,\n                                     final String schemaFile,\n                                     final String errString)\n      throws Exception {\n    assertConfigs(solrconfigFile, schemaFile, null, errString);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"be34977edad162456de4a4583804025803591c45":["9cf81bc8c6e4078e236f0e38b3a2d0271854f207"],"9e2656623e57ced6c16aae473bab02019c951802":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9cf81bc8c6e4078e236f0e38b3a2d0271854f207":["9e2656623e57ced6c16aae473bab02019c951802"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9e2656623e57ced6c16aae473bab02019c951802"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9e2656623e57ced6c16aae473bab02019c951802"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["be34977edad162456de4a4583804025803591c45"]},"commit2Childs":{"be34977edad162456de4a4583804025803591c45":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9e2656623e57ced6c16aae473bab02019c951802":["9cf81bc8c6e4078e236f0e38b3a2d0271854f207","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"9cf81bc8c6e4078e236f0e38b3a2d0271854f207":["be34977edad162456de4a4583804025803591c45"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9e2656623e57ced6c16aae473bab02019c951802","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}