{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoBaseAreaShape#getRelationship(GeoShape).mjava","commits":[{"id":"0ca94ad4d6120f10fa13ce40a60a7fd1ede51705","date":1501767131,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoBaseAreaShape#getRelationship(GeoShape).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public int getRelationship(GeoShape geoShape) {\n    final int insideGeoAreaShape = isShapeInsideGeoAreaShape(geoShape);\n    if (insideGeoAreaShape == SOME_INSIDE) {\n      return GeoArea.OVERLAPS;\n    }\n\n    final int insideShape = isGeoAreaShapeInsideShape(geoShape);\n    if (insideShape == SOME_INSIDE) {\n      return GeoArea.OVERLAPS;\n    }\n\n    if (insideGeoAreaShape == ALL_INSIDE && insideShape==ALL_INSIDE) {\n      return GeoArea.OVERLAPS;\n    }\n\n    if (intersects(geoShape)){\n      return  GeoArea.OVERLAPS;\n    }\n\n    if (insideGeoAreaShape == ALL_INSIDE) {\n      return GeoArea.WITHIN;\n    }\n\n    if (insideShape==ALL_INSIDE) {\n      return GeoArea.CONTAINS;\n    }\n\n    return GeoArea.DISJOINT;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["75a9b5446751df93faf9a552cbffb19794a59a89"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoBaseAreaShape#getRelationship(GeoShape).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public int getRelationship(GeoShape geoShape) {\n    final int insideGeoAreaShape = isShapeInsideGeoAreaShape(geoShape);\n    if (insideGeoAreaShape == SOME_INSIDE) {\n      return GeoArea.OVERLAPS;\n    }\n\n    final int insideShape = isGeoAreaShapeInsideShape(geoShape);\n    if (insideShape == SOME_INSIDE) {\n      return GeoArea.OVERLAPS;\n    }\n\n    if (insideGeoAreaShape == ALL_INSIDE && insideShape==ALL_INSIDE) {\n      return GeoArea.OVERLAPS;\n    }\n\n    if (intersects(geoShape)){\n      return  GeoArea.OVERLAPS;\n    }\n\n    if (insideGeoAreaShape == ALL_INSIDE) {\n      return GeoArea.WITHIN;\n    }\n\n    if (insideShape==ALL_INSIDE) {\n      return GeoArea.CONTAINS;\n    }\n\n    return GeoArea.DISJOINT;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0dcd28a23753c14d56c7d2c5ba71cf1e03d532b","date":1503230479,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoBaseAreaShape#getRelationship(GeoShape).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoBaseAreaShape#getRelationship(GeoShape).mjava","sourceNew":"  @Override\n  public int getRelationship(GeoShape geoShape) {\n    if (!geoShape.getPlanetModel().equals(planetModel)) {\n      throw new IllegalArgumentException(\"Cannot relate shapes with different planet models.\");\n    }\n    final int insideGeoAreaShape = isShapeInsideGeoAreaShape(geoShape);\n    if (insideGeoAreaShape == SOME_INSIDE) {\n      return GeoArea.OVERLAPS;\n    }\n\n    final int insideShape = isGeoAreaShapeInsideShape(geoShape);\n    if (insideShape == SOME_INSIDE) {\n      return GeoArea.OVERLAPS;\n    }\n\n    if (insideGeoAreaShape == ALL_INSIDE && insideShape==ALL_INSIDE) {\n      return GeoArea.OVERLAPS;\n    }\n\n    if (intersects(geoShape)){\n      return  GeoArea.OVERLAPS;\n    }\n\n    if (insideGeoAreaShape == ALL_INSIDE) {\n      return GeoArea.WITHIN;\n    }\n\n    if (insideShape==ALL_INSIDE) {\n      return GeoArea.CONTAINS;\n    }\n\n    return GeoArea.DISJOINT;\n  }\n\n","sourceOld":"  @Override\n  public int getRelationship(GeoShape geoShape) {\n    final int insideGeoAreaShape = isShapeInsideGeoAreaShape(geoShape);\n    if (insideGeoAreaShape == SOME_INSIDE) {\n      return GeoArea.OVERLAPS;\n    }\n\n    final int insideShape = isGeoAreaShapeInsideShape(geoShape);\n    if (insideShape == SOME_INSIDE) {\n      return GeoArea.OVERLAPS;\n    }\n\n    if (insideGeoAreaShape == ALL_INSIDE && insideShape==ALL_INSIDE) {\n      return GeoArea.OVERLAPS;\n    }\n\n    if (intersects(geoShape)){\n      return  GeoArea.OVERLAPS;\n    }\n\n    if (insideGeoAreaShape == ALL_INSIDE) {\n      return GeoArea.WITHIN;\n    }\n\n    if (insideShape==ALL_INSIDE) {\n      return GeoArea.CONTAINS;\n    }\n\n    return GeoArea.DISJOINT;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3051d6122751c8f6cc1e9cf24592658b59843ec2","date":1503298024,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoBaseAreaShape#getRelationship(GeoShape).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoBaseAreaShape#getRelationship(GeoShape).mjava","sourceNew":"  @Override\n  public int getRelationship(GeoShape geoShape) {\n    if (!geoShape.getPlanetModel().equals(planetModel)) {\n      throw new IllegalArgumentException(\"Cannot relate shapes with different planet models.\");\n    }\n    final int insideGeoAreaShape = isShapeInsideGeoAreaShape(geoShape);\n    if (insideGeoAreaShape == SOME_INSIDE) {\n      return GeoArea.OVERLAPS;\n    }\n\n    final int insideShape = isGeoAreaShapeInsideShape(geoShape);\n    if (insideShape == SOME_INSIDE) {\n      return GeoArea.OVERLAPS;\n    }\n\n    if (insideGeoAreaShape == ALL_INSIDE && insideShape==ALL_INSIDE) {\n      return GeoArea.OVERLAPS;\n    }\n\n    if (intersects(geoShape)){\n      return  GeoArea.OVERLAPS;\n    }\n\n    if (insideGeoAreaShape == ALL_INSIDE) {\n      return GeoArea.WITHIN;\n    }\n\n    if (insideShape==ALL_INSIDE) {\n      return GeoArea.CONTAINS;\n    }\n\n    return GeoArea.DISJOINT;\n  }\n\n","sourceOld":"  @Override\n  public int getRelationship(GeoShape geoShape) {\n    final int insideGeoAreaShape = isShapeInsideGeoAreaShape(geoShape);\n    if (insideGeoAreaShape == SOME_INSIDE) {\n      return GeoArea.OVERLAPS;\n    }\n\n    final int insideShape = isGeoAreaShapeInsideShape(geoShape);\n    if (insideShape == SOME_INSIDE) {\n      return GeoArea.OVERLAPS;\n    }\n\n    if (insideGeoAreaShape == ALL_INSIDE && insideShape==ALL_INSIDE) {\n      return GeoArea.OVERLAPS;\n    }\n\n    if (intersects(geoShape)){\n      return  GeoArea.OVERLAPS;\n    }\n\n    if (insideGeoAreaShape == ALL_INSIDE) {\n      return GeoArea.WITHIN;\n    }\n\n    if (insideShape==ALL_INSIDE) {\n      return GeoArea.CONTAINS;\n    }\n\n    return GeoArea.DISJOINT;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75a9b5446751df93faf9a552cbffb19794a59a89","date":1511305520,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoBaseAreaShape#getRelationship(GeoShape).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoBaseAreaShape#getRelationship(GeoShape).mjava","sourceNew":"  @Override\n  public int getRelationship(GeoShape geoShape) {\n    if (!geoShape.getPlanetModel().equals(planetModel)) {\n      throw new IllegalArgumentException(\"Cannot relate shapes with different planet models.\");\n    }\n    final int insideGeoAreaShape = isShapeInsideGeoAreaShape(geoShape);\n    if (insideGeoAreaShape == SOME_INSIDE) {\n      return GeoArea.OVERLAPS;\n    }\n\n    final int insideShape = isGeoAreaShapeInsideShape(geoShape);\n    if (insideShape == SOME_INSIDE) {\n      return GeoArea.OVERLAPS;\n    }\n\n    if (insideGeoAreaShape == ALL_INSIDE && insideShape==ALL_INSIDE) {\n      return GeoArea.OVERLAPS;\n    }\n    \n    if (intersects(geoShape)){\n      return  GeoArea.OVERLAPS;\n    }\n\n    if (insideGeoAreaShape == ALL_INSIDE) {\n      return GeoArea.WITHIN;\n    }\n\n    if (insideShape==ALL_INSIDE) {\n      return GeoArea.CONTAINS;\n    }\n\n    return GeoArea.DISJOINT;\n  }\n\n","sourceOld":"  @Override\n  public int getRelationship(GeoShape geoShape) {\n    if (!geoShape.getPlanetModel().equals(planetModel)) {\n      throw new IllegalArgumentException(\"Cannot relate shapes with different planet models.\");\n    }\n    final int insideGeoAreaShape = isShapeInsideGeoAreaShape(geoShape);\n    if (insideGeoAreaShape == SOME_INSIDE) {\n      return GeoArea.OVERLAPS;\n    }\n\n    final int insideShape = isGeoAreaShapeInsideShape(geoShape);\n    if (insideShape == SOME_INSIDE) {\n      return GeoArea.OVERLAPS;\n    }\n\n    if (insideGeoAreaShape == ALL_INSIDE && insideShape==ALL_INSIDE) {\n      return GeoArea.OVERLAPS;\n    }\n\n    if (intersects(geoShape)){\n      return  GeoArea.OVERLAPS;\n    }\n\n    if (insideGeoAreaShape == ALL_INSIDE) {\n      return GeoArea.WITHIN;\n    }\n\n    if (insideShape==ALL_INSIDE) {\n      return GeoArea.CONTAINS;\n    }\n\n    return GeoArea.DISJOINT;\n  }\n\n","bugFix":["0ca94ad4d6120f10fa13ce40a60a7fd1ede51705"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"75a9b5446751df93faf9a552cbffb19794a59a89":["0ca94ad4d6120f10fa13ce40a60a7fd1ede51705"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0ca94ad4d6120f10fa13ce40a60a7fd1ede51705"],"d0dcd28a23753c14d56c7d2c5ba71cf1e03d532b":["0ca94ad4d6120f10fa13ce40a60a7fd1ede51705"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ca94ad4d6120f10fa13ce40a60a7fd1ede51705":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3051d6122751c8f6cc1e9cf24592658b59843ec2":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","d0dcd28a23753c14d56c7d2c5ba71cf1e03d532b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["75a9b5446751df93faf9a552cbffb19794a59a89"]},"commit2Childs":{"75a9b5446751df93faf9a552cbffb19794a59a89":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["3051d6122751c8f6cc1e9cf24592658b59843ec2"],"d0dcd28a23753c14d56c7d2c5ba71cf1e03d532b":["3051d6122751c8f6cc1e9cf24592658b59843ec2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","0ca94ad4d6120f10fa13ce40a60a7fd1ede51705"],"0ca94ad4d6120f10fa13ce40a60a7fd1ede51705":["75a9b5446751df93faf9a552cbffb19794a59a89","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","d0dcd28a23753c14d56c7d2c5ba71cf1e03d532b"],"3051d6122751c8f6cc1e9cf24592658b59843ec2":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3051d6122751c8f6cc1e9cf24592658b59843ec2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}