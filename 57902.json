{"path":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testHangOnClose().mjava","commits":[{"id":"56454c8024f29ab494bb7c6b9934104c4a2c7b55","date":1208979441,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testHangOnClose().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, false, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergePolicy(new LogByteSizeMergePolicy());\n    writer.setMaxBufferedDocs(5);\n    writer.setUseCompoundFile(false);\n    writer.setMergeFactor(100);\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n    writer.setMaxBufferedDocs(200);\n    Document doc2 = new Document();\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = new MockRAMDirectory();\n    writer = new IndexWriter(dir2, false, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy();\n    lmp.setMinMergeMB(0.0001);\n    writer.setMergePolicy(lmp);\n    writer.setMergeFactor(4);\n    writer.setUseCompoundFile(false);\n    writer.setMergeScheduler(new SerialMergeScheduler());\n    writer.addIndexesNoOptimize(new Directory[] {dir});\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testHangOnClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testHangOnClose().mjava","sourceNew":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, false, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergePolicy(new LogByteSizeMergePolicy());\n    writer.setMaxBufferedDocs(5);\n    writer.setUseCompoundFile(false);\n    writer.setMergeFactor(100);\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n    writer.setMaxBufferedDocs(200);\n    Document doc2 = new Document();\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = new MockRAMDirectory();\n    writer = new IndexWriter(dir2, false, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy();\n    lmp.setMinMergeMB(0.0001);\n    writer.setMergePolicy(lmp);\n    writer.setMergeFactor(4);\n    writer.setUseCompoundFile(false);\n    writer.setMergeScheduler(new SerialMergeScheduler());\n    writer.addIndexesNoOptimize(new Directory[] {dir});\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","sourceOld":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, false, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergePolicy(new LogByteSizeMergePolicy());\n    writer.setMaxBufferedDocs(5);\n    writer.setUseCompoundFile(false);\n    writer.setMergeFactor(100);\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n    writer.setMaxBufferedDocs(200);\n    Document doc2 = new Document();\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = new MockRAMDirectory();\n    writer = new IndexWriter(dir2, false, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy();\n    lmp.setMinMergeMB(0.0001);\n    writer.setMergePolicy(lmp);\n    writer.setMergeFactor(4);\n    writer.setUseCompoundFile(false);\n    writer.setMergeScheduler(new SerialMergeScheduler());\n    writer.addIndexesNoOptimize(new Directory[] {dir});\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4ae99f08f69aa3acba7cd75134e8447eb747559","date":1222344278,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testHangOnClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testHangOnClose().mjava","sourceNew":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergePolicy(new LogByteSizeMergePolicy());\n    writer.setMaxBufferedDocs(5);\n    writer.setUseCompoundFile(false);\n    writer.setMergeFactor(100);\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n    writer.setMaxBufferedDocs(200);\n    Document doc2 = new Document();\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = new MockRAMDirectory();\n    writer = new IndexWriter(dir2, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy();\n    lmp.setMinMergeMB(0.0001);\n    writer.setMergePolicy(lmp);\n    writer.setMergeFactor(4);\n    writer.setUseCompoundFile(false);\n    writer.setMergeScheduler(new SerialMergeScheduler());\n    writer.addIndexesNoOptimize(new Directory[] {dir});\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","sourceOld":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, false, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergePolicy(new LogByteSizeMergePolicy());\n    writer.setMaxBufferedDocs(5);\n    writer.setUseCompoundFile(false);\n    writer.setMergeFactor(100);\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n    writer.setMaxBufferedDocs(200);\n    Document doc2 = new Document();\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = new MockRAMDirectory();\n    writer = new IndexWriter(dir2, false, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy();\n    lmp.setMinMergeMB(0.0001);\n    writer.setMergePolicy(lmp);\n    writer.setMergeFactor(4);\n    writer.setUseCompoundFile(false);\n    writer.setMergeScheduler(new SerialMergeScheduler());\n    writer.addIndexesNoOptimize(new Directory[] {dir});\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13eaef7d286f35b5c850a1c2eb7b337679aa6453","date":1249118545,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testHangOnClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testHangOnClose().mjava","sourceNew":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergePolicy(new LogByteSizeMergePolicy(writer));\n    writer.setMaxBufferedDocs(5);\n    writer.setUseCompoundFile(false);\n    writer.setMergeFactor(100);\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n    writer.setMaxBufferedDocs(200);\n    Document doc2 = new Document();\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = new MockRAMDirectory();\n    writer = new IndexWriter(dir2, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy(writer);\n    lmp.setMinMergeMB(0.0001);\n    writer.setMergePolicy(lmp);\n    writer.setMergeFactor(4);\n    writer.setUseCompoundFile(false);\n    writer.setMergeScheduler(new SerialMergeScheduler());\n    writer.addIndexesNoOptimize(new Directory[] {dir});\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","sourceOld":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergePolicy(new LogByteSizeMergePolicy());\n    writer.setMaxBufferedDocs(5);\n    writer.setUseCompoundFile(false);\n    writer.setMergeFactor(100);\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n    writer.setMaxBufferedDocs(200);\n    Document doc2 = new Document();\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = new MockRAMDirectory();\n    writer = new IndexWriter(dir2, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy();\n    lmp.setMinMergeMB(0.0001);\n    writer.setMergePolicy(lmp);\n    writer.setMergeFactor(4);\n    writer.setUseCompoundFile(false);\n    writer.setMergeScheduler(new SerialMergeScheduler());\n    writer.addIndexesNoOptimize(new Directory[] {dir});\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testHangOnClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testHangOnClose().mjava","sourceNew":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergePolicy(new LogByteSizeMergePolicy(writer));\n    writer.setMaxBufferedDocs(5);\n    writer.setUseCompoundFile(false);\n    writer.setMergeFactor(100);\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n    writer.setMaxBufferedDocs(200);\n    Document doc2 = new Document();\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = new MockRAMDirectory();\n    writer = new IndexWriter(dir2, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy(writer);\n    lmp.setMinMergeMB(0.0001);\n    writer.setMergePolicy(lmp);\n    writer.setMergeFactor(4);\n    writer.setUseCompoundFile(false);\n    writer.setMergeScheduler(new SerialMergeScheduler());\n    writer.addIndexesNoOptimize(new Directory[] {dir});\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","sourceOld":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergePolicy(new LogByteSizeMergePolicy(writer));\n    writer.setMaxBufferedDocs(5);\n    writer.setUseCompoundFile(false);\n    writer.setMergeFactor(100);\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n    writer.setMaxBufferedDocs(200);\n    Document doc2 = new Document();\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = new MockRAMDirectory();\n    writer = new IndexWriter(dir2, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy(writer);\n    lmp.setMinMergeMB(0.0001);\n    writer.setMergePolicy(lmp);\n    writer.setMergeFactor(4);\n    writer.setUseCompoundFile(false);\n    writer.setMergeScheduler(new SerialMergeScheduler());\n    writer.addIndexesNoOptimize(new Directory[] {dir});\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testHangOnClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testHangOnClose().mjava","sourceNew":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergePolicy(new LogByteSizeMergePolicy(writer));\n    writer.setMaxBufferedDocs(5);\n    writer.setUseCompoundFile(false);\n    writer.setMergeFactor(100);\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n    writer.setMaxBufferedDocs(200);\n    Document doc2 = new Document();\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = new MockRAMDirectory();\n    writer = new IndexWriter(dir2, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy(writer);\n    lmp.setMinMergeMB(0.0001);\n    writer.setMergePolicy(lmp);\n    writer.setMergeFactor(4);\n    writer.setUseCompoundFile(false);\n    writer.setMergeScheduler(new SerialMergeScheduler());\n    writer.addIndexesNoOptimize(new Directory[] {dir});\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","sourceOld":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergePolicy(new LogByteSizeMergePolicy(writer));\n    writer.setMaxBufferedDocs(5);\n    writer.setUseCompoundFile(false);\n    writer.setMergeFactor(100);\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n    writer.setMaxBufferedDocs(200);\n    Document doc2 = new Document();\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = new MockRAMDirectory();\n    writer = new IndexWriter(dir2, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy(writer);\n    lmp.setMinMergeMB(0.0001);\n    writer.setMergePolicy(lmp);\n    writer.setMergeFactor(4);\n    writer.setUseCompoundFile(false);\n    writer.setMergeScheduler(new SerialMergeScheduler());\n    writer.addIndexesNoOptimize(new Directory[] {dir});\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testHangOnClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testHangOnClose().mjava","sourceNew":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setMaxBufferedDocs(5));\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy(writer);\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(100);\n    writer.setMergePolicy(lmp);\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n\n    Document doc2 = new Document();\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = new MockRAMDirectory();\n    writer = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT).setMergeScheduler(new SerialMergeScheduler()));\n    lmp = new LogByteSizeMergePolicy(writer);\n    lmp.setMinMergeMB(0.0001);\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(4);\n    writer.setMergePolicy(lmp);\n    writer.addIndexesNoOptimize(new Directory[] {dir});\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","sourceOld":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergePolicy(new LogByteSizeMergePolicy(writer));\n    writer.setMaxBufferedDocs(5);\n    writer.setUseCompoundFile(false);\n    writer.setMergeFactor(100);\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n    writer.setMaxBufferedDocs(200);\n    Document doc2 = new Document();\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = new MockRAMDirectory();\n    writer = new IndexWriter(dir2, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy(writer);\n    lmp.setMinMergeMB(0.0001);\n    writer.setMergePolicy(lmp);\n    writer.setMergeFactor(4);\n    writer.setUseCompoundFile(false);\n    writer.setMergeScheduler(new SerialMergeScheduler());\n    writer.addIndexesNoOptimize(new Directory[] {dir});\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testHangOnClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testHangOnClose().mjava","sourceNew":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergePolicy(new LogByteSizeMergePolicy(writer));\n    writer.setMaxBufferedDocs(5);\n    writer.setUseCompoundFile(false);\n    writer.setMergeFactor(100);\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n    writer.setMaxBufferedDocs(200);\n    Document doc2 = new Document();\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = new MockRAMDirectory();\n    writer = new IndexWriter(dir2, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy(writer);\n    lmp.setMinMergeMB(0.0001);\n    writer.setMergePolicy(lmp);\n    writer.setMergeFactor(4);\n    writer.setUseCompoundFile(false);\n    writer.setMergeScheduler(new SerialMergeScheduler());\n    writer.addIndexesNoOptimize(new Directory[] {dir});\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","sourceOld":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setMaxBufferedDocs(5));\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy(writer);\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(100);\n    writer.setMergePolicy(lmp);\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n\n    Document doc2 = new Document();\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = new MockRAMDirectory();\n    writer = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT).setMergeScheduler(new SerialMergeScheduler()));\n    lmp = new LogByteSizeMergePolicy(writer);\n    lmp.setMinMergeMB(0.0001);\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(4);\n    writer.setMergePolicy(lmp);\n    writer.addIndexesNoOptimize(new Directory[] {dir});\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testHangOnClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testHangOnClose().mjava","sourceNew":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(5));\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy(writer);\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(100);\n    writer.setMergePolicy(lmp);\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n\n    Document doc2 = new Document();\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = new MockRAMDirectory();\n    writer = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMergeScheduler(new SerialMergeScheduler()));\n    lmp = new LogByteSizeMergePolicy(writer);\n    lmp.setMinMergeMB(0.0001);\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(4);\n    writer.setMergePolicy(lmp);\n    writer.addIndexesNoOptimize(new Directory[] {dir});\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","sourceOld":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergePolicy(new LogByteSizeMergePolicy(writer));\n    writer.setMaxBufferedDocs(5);\n    writer.setUseCompoundFile(false);\n    writer.setMergeFactor(100);\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n    writer.setMaxBufferedDocs(200);\n    Document doc2 = new Document();\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = new MockRAMDirectory();\n    writer = new IndexWriter(dir2, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy(writer);\n    lmp.setMinMergeMB(0.0001);\n    writer.setMergePolicy(lmp);\n    writer.setMergeFactor(4);\n    writer.setUseCompoundFile(false);\n    writer.setMergeScheduler(new SerialMergeScheduler());\n    writer.addIndexesNoOptimize(new Directory[] {dir});\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testHangOnClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestAddIndexesNoOptimize#testHangOnClose().mjava","sourceNew":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(5));\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy(writer);\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(100);\n    writer.setMergePolicy(lmp);\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n\n    Document doc2 = new Document();\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = new MockRAMDirectory();\n    writer = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMergeScheduler(new SerialMergeScheduler()));\n    lmp = new LogByteSizeMergePolicy(writer);\n    lmp.setMinMergeMB(0.0001);\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(4);\n    writer.setMergePolicy(lmp);\n    writer.addIndexesNoOptimize(new Directory[] {dir});\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","sourceOld":"  // LUCENE-1270\n  public void testHangOnClose() throws IOException {\n\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(5));\n    LogByteSizeMergePolicy lmp = new LogByteSizeMergePolicy(writer);\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(100);\n    writer.setMergePolicy(lmp);\n\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<60;i++)\n      writer.addDocument(doc);\n\n    Document doc2 = new Document();\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    doc2.add(new Field(\"content\", \"aaa bbb ccc ddd eee fff ggg hhh iii\", Field.Store.YES,\n                      Field.Index.NO));\n    for(int i=0;i<10;i++)\n      writer.addDocument(doc2);\n    writer.close();\n\n    Directory dir2 = new MockRAMDirectory();\n    writer = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMergeScheduler(new SerialMergeScheduler()));\n    lmp = new LogByteSizeMergePolicy(writer);\n    lmp.setMinMergeMB(0.0001);\n    lmp.setUseCompoundFile(false);\n    lmp.setUseCompoundDocStore(false);\n    lmp.setMergeFactor(4);\n    writer.setMergePolicy(lmp);\n    writer.addIndexesNoOptimize(new Directory[] {dir});\n    writer.close();\n    dir.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"56454c8024f29ab494bb7c6b9934104c4a2c7b55":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"c4ae99f08f69aa3acba7cd75134e8447eb747559":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["13eaef7d286f35b5c850a1c2eb7b337679aa6453"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["56454c8024f29ab494bb7c6b9934104c4a2c7b55"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"13eaef7d286f35b5c850a1c2eb7b337679aa6453":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"56454c8024f29ab494bb7c6b9934104c4a2c7b55":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c4ae99f08f69aa3acba7cd75134e8447eb747559":["13eaef7d286f35b5c850a1c2eb7b337679aa6453"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["56454c8024f29ab494bb7c6b9934104c4a2c7b55"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"13eaef7d286f35b5c850a1c2eb7b337679aa6453":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}