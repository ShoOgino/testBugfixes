{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#checkDocCountsAndShardStates(int[],int,Set[String]).mjava","commits":[{"id":"2ffc8d70d9f57a62a24c3dd15b66e353de935054","date":1533178472,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#checkDocCountsAndShardStates(int[],int,Set[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#checkDocCountsAndShardStates(int[],int).mjava","sourceNew":"  protected void checkDocCountsAndShardStates(int[] docCounts, int numReplicas, Set<String> documentIds) throws Exception {\n    ClusterState clusterState = null;\n    Slice slice1_0 = null, slice1_1 = null;\n    int i = 0;\n    for (i = 0; i < 10; i++) {\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      clusterState = zkStateReader.getClusterState();\n      slice1_0 = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getSlice(\"shard1_0\");\n      slice1_1 = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getSlice(\"shard1_1\");\n      if (slice1_0.getState() == Slice.State.ACTIVE && slice1_1.getState() == Slice.State.ACTIVE) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    log.info(\"ShardSplitTest waited for {} ms for shard state to be set to active\", i * 500);\n\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_0);\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_1);\n    assertSame(\"shard1_0 is not active\", Slice.State.ACTIVE, slice1_0.getState());\n    assertSame(\"shard1_1 is not active\", Slice.State.ACTIVE, slice1_1.getState());\n    assertEquals(\"Wrong number of replicas created for shard1_0\", numReplicas, slice1_0.getReplicas().size());\n    assertEquals(\"Wrong number of replicas created for shard1_1\", numReplicas, slice1_1.getReplicas().size());\n\n    commit();\n\n    // can't use checkShardConsistency because it insists on jettys and clients for each shard\n    checkSubShardConsistency(SHARD1_0);\n    checkSubShardConsistency(SHARD1_1);\n\n    SolrQuery query = new SolrQuery(\"*:*\").setRows(1000).setFields(\"id\", \"_version_\");\n    query.set(\"distrib\", false);\n\n    ZkCoreNodeProps shard1_0 = getLeaderUrlFromZk(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_0);\n    QueryResponse response;\n    try (HttpSolrClient shard1_0Client = getHttpSolrClient(shard1_0.getCoreUrl())) {\n      response = shard1_0Client.query(query);\n    }\n    long shard10Count = response.getResults().getNumFound();\n\n    ZkCoreNodeProps shard1_1 = getLeaderUrlFromZk(\n        AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_1);\n    QueryResponse response2;\n    try (HttpSolrClient shard1_1Client = getHttpSolrClient(shard1_1.getCoreUrl())) {\n      response2 = shard1_1Client.query(query);\n    }\n    long shard11Count = response2.getResults().getNumFound();\n\n    logDebugHelp(docCounts, response, shard10Count, response2, shard11Count, documentIds);\n\n    assertEquals(\"Wrong doc count on shard1_0. See SOLR-5309\", docCounts[0], shard10Count);\n    assertEquals(\"Wrong doc count on shard1_1. See SOLR-5309\", docCounts[1], shard11Count);\n  }\n\n","sourceOld":"  protected void checkDocCountsAndShardStates(int[] docCounts, int numReplicas) throws Exception {\n    ClusterState clusterState = null;\n    Slice slice1_0 = null, slice1_1 = null;\n    int i = 0;\n    for (i = 0; i < 10; i++) {\n      ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n      clusterState = zkStateReader.getClusterState();\n      slice1_0 = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getSlice(\"shard1_0\");\n      slice1_1 = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getSlice(\"shard1_1\");\n      if (slice1_0.getState() == Slice.State.ACTIVE && slice1_1.getState() == Slice.State.ACTIVE) {\n        break;\n      }\n      Thread.sleep(500);\n    }\n\n    log.info(\"ShardSplitTest waited for {} ms for shard state to be set to active\", i * 500);\n\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_0);\n    assertNotNull(\"Cluster state does not contain shard1_0\", slice1_1);\n    assertSame(\"shard1_0 is not active\", Slice.State.ACTIVE, slice1_0.getState());\n    assertSame(\"shard1_1 is not active\", Slice.State.ACTIVE, slice1_1.getState());\n    assertEquals(\"Wrong number of replicas created for shard1_0\", numReplicas, slice1_0.getReplicas().size());\n    assertEquals(\"Wrong number of replicas created for shard1_1\", numReplicas, slice1_1.getReplicas().size());\n\n    commit();\n\n    // can't use checkShardConsistency because it insists on jettys and clients for each shard\n    checkSubShardConsistency(SHARD1_0);\n    checkSubShardConsistency(SHARD1_1);\n\n    SolrQuery query = new SolrQuery(\"*:*\").setRows(1000).setFields(\"id\", \"_version_\");\n    query.set(\"distrib\", false);\n\n    ZkCoreNodeProps shard1_0 = getLeaderUrlFromZk(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_0);\n    QueryResponse response;\n    try (HttpSolrClient shard1_0Client = getHttpSolrClient(shard1_0.getCoreUrl())) {\n      response = shard1_0Client.query(query);\n    }\n    long shard10Count = response.getResults().getNumFound();\n\n    ZkCoreNodeProps shard1_1 = getLeaderUrlFromZk(\n        AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1_1);\n    QueryResponse response2;\n    try (HttpSolrClient shard1_1Client = getHttpSolrClient(shard1_1.getCoreUrl())) {\n      response2 = shard1_1Client.query(query);\n    }\n    long shard11Count = response2.getResults().getNumFound();\n\n    logDebugHelp(docCounts, response, shard10Count, response2, shard11Count);\n\n    assertEquals(\"Wrong doc count on shard1_0. See SOLR-5309\", docCounts[0], shard10Count);\n    assertEquals(\"Wrong doc count on shard1_1. See SOLR-5309\", docCounts[1], shard11Count);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2ffc8d70d9f57a62a24c3dd15b66e353de935054":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2ffc8d70d9f57a62a24c3dd15b66e353de935054"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2ffc8d70d9f57a62a24c3dd15b66e353de935054"],"2ffc8d70d9f57a62a24c3dd15b66e353de935054":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}