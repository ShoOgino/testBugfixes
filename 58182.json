{"path":"src/java/org/apache/solr/update/DirectUpdateHandler#deleteByQuery(DeleteUpdateCommand).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/DirectUpdateHandler#deleteByQuery(DeleteUpdateCommand).mjava","pathOld":"/dev/null","sourceNew":"  // TODO - return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine num...\n  public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n    if (!cmd.fromPending && !cmd.fromCommitted)\n      throw new SolrException(400,\"meaningless command: \" + cmd);\n    if (!cmd.fromPending || !cmd.fromCommitted)\n      throw new SolrException(400,\"operation not supported\" + cmd);\n\n    Query q = QueryParsing.parseQuery(cmd.query, schema);\n\n    int totDeleted = 0;\n    synchronized(this) {\n      closeWriter(); openSearcher();\n\n      // if we want to count the number of docs that were deleted, then\n      // we need a new instance of the DeleteHitCollector\n      final DeleteHitCollector deleter = new DeleteHitCollector(searcher);\n      searcher.search(q, null, deleter);\n      totDeleted = deleter.deleted;\n    }\n\n    if (SolrCore.log.isLoggable(Level.FINE)) {\n      SolrCore.log.fine(\"docs deleted:\" + totDeleted);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996","date":1180477701,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/DirectUpdateHandler#deleteByQuery(DeleteUpdateCommand).mjava","pathOld":"src/java/org/apache/solr/update/DirectUpdateHandler#deleteByQuery(DeleteUpdateCommand).mjava","sourceNew":"  // TODO - return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine num...\n  public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n    if (!cmd.fromPending && !cmd.fromCommitted)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"meaningless command: \" + cmd);\n    if (!cmd.fromPending || !cmd.fromCommitted)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"operation not supported\" + cmd);\n\n    Query q = QueryParsing.parseQuery(cmd.query, schema);\n\n    int totDeleted = 0;\n    synchronized(this) {\n      closeWriter(); openSearcher();\n\n      // if we want to count the number of docs that were deleted, then\n      // we need a new instance of the DeleteHitCollector\n      final DeleteHitCollector deleter = new DeleteHitCollector(searcher);\n      searcher.search(q, null, deleter);\n      totDeleted = deleter.deleted;\n    }\n\n    if (SolrCore.log.isLoggable(Level.FINE)) {\n      SolrCore.log.fine(\"docs deleted:\" + totDeleted);\n    }\n\n  }\n\n","sourceOld":"  // TODO - return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine num...\n  public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n    if (!cmd.fromPending && !cmd.fromCommitted)\n      throw new SolrException(400,\"meaningless command: \" + cmd);\n    if (!cmd.fromPending || !cmd.fromCommitted)\n      throw new SolrException(400,\"operation not supported\" + cmd);\n\n    Query q = QueryParsing.parseQuery(cmd.query, schema);\n\n    int totDeleted = 0;\n    synchronized(this) {\n      closeWriter(); openSearcher();\n\n      // if we want to count the number of docs that were deleted, then\n      // we need a new instance of the DeleteHitCollector\n      final DeleteHitCollector deleter = new DeleteHitCollector(searcher);\n      searcher.search(q, null, deleter);\n      totDeleted = deleter.deleted;\n    }\n\n    if (SolrCore.log.isLoggable(Level.FINE)) {\n      SolrCore.log.fine(\"docs deleted:\" + totDeleted);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"048361614025800e582bfc7a7b0329dc6fd6a95e","date":1196999392,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/DirectUpdateHandler#deleteByQuery(DeleteUpdateCommand).mjava","pathOld":"src/java/org/apache/solr/update/DirectUpdateHandler#deleteByQuery(DeleteUpdateCommand).mjava","sourceNew":"  // TODO - return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine num...\n  public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n    if (!cmd.fromPending && !cmd.fromCommitted)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"meaningless command: \" + cmd);\n    if (!cmd.fromPending || !cmd.fromCommitted)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"operation not supported\" + cmd);\n\n    Query q = QueryParsing.parseQuery(cmd.query, schema);\n\n    int totDeleted = 0;\n    synchronized(this) {\n      closeWriter(); openSearcher();\n\n      // if we want to count the number of docs that were deleted, then\n      // we need a new instance of the DeleteHitCollector\n      final DeleteHitCollector deleter = new DeleteHitCollector(searcher);\n      searcher.search(q, null, deleter);\n      totDeleted = deleter.deleted;\n    }\n\n    if (core.log.isLoggable(Level.FINE)) {\n      core.log.fine(\"[\"+core.getName()+\"] docs deleted:\" + totDeleted);\n    }\n\n  }\n\n","sourceOld":"  // TODO - return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine num...\n  public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n    if (!cmd.fromPending && !cmd.fromCommitted)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"meaningless command: \" + cmd);\n    if (!cmd.fromPending || !cmd.fromCommitted)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"operation not supported\" + cmd);\n\n    Query q = QueryParsing.parseQuery(cmd.query, schema);\n\n    int totDeleted = 0;\n    synchronized(this) {\n      closeWriter(); openSearcher();\n\n      // if we want to count the number of docs that were deleted, then\n      // we need a new instance of the DeleteHitCollector\n      final DeleteHitCollector deleter = new DeleteHitCollector(searcher);\n      searcher.search(q, null, deleter);\n      totDeleted = deleter.deleted;\n    }\n\n    if (SolrCore.log.isLoggable(Level.FINE)) {\n      SolrCore.log.fine(\"docs deleted:\" + totDeleted);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b46f0ccfb6b63c307ea901d48482630e3689042c","date":1198805331,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/DirectUpdateHandler#deleteByQuery(DeleteUpdateCommand).mjava","pathOld":"src/java/org/apache/solr/update/DirectUpdateHandler#deleteByQuery(DeleteUpdateCommand).mjava","sourceNew":"  // TODO - return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine num...\n  public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n    if (!cmd.fromPending && !cmd.fromCommitted)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"meaningless command: \" + cmd);\n    if (!cmd.fromPending || !cmd.fromCommitted)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"operation not supported\" + cmd);\n\n    Query q = QueryParsing.parseQuery(cmd.query, schema);\n\n    int totDeleted = 0;\n    synchronized(this) {\n      closeWriter(); openSearcher();\n\n      // if we want to count the number of docs that were deleted, then\n      // we need a new instance of the DeleteHitCollector\n      final DeleteHitCollector deleter = new DeleteHitCollector(searcher);\n      searcher.search(q, null, deleter);\n      totDeleted = deleter.deleted;\n    }\n\n    if (core.log.isLoggable(Level.FINE)) {\n      core.log.fine(core.getLogId()+\"docs deleted:\" + totDeleted);\n    }\n\n  }\n\n","sourceOld":"  // TODO - return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine num...\n  public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n    if (!cmd.fromPending && !cmd.fromCommitted)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"meaningless command: \" + cmd);\n    if (!cmd.fromPending || !cmd.fromCommitted)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"operation not supported\" + cmd);\n\n    Query q = QueryParsing.parseQuery(cmd.query, schema);\n\n    int totDeleted = 0;\n    synchronized(this) {\n      closeWriter(); openSearcher();\n\n      // if we want to count the number of docs that were deleted, then\n      // we need a new instance of the DeleteHitCollector\n      final DeleteHitCollector deleter = new DeleteHitCollector(searcher);\n      searcher.search(q, null, deleter);\n      totDeleted = deleter.deleted;\n    }\n\n    if (core.log.isLoggable(Level.FINE)) {\n      core.log.fine(\"[\"+core.getName()+\"] docs deleted:\" + totDeleted);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00da8b51bdeae168a5b26ec506db372b219ca7a2","date":1221704186,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/DirectUpdateHandler#deleteByQuery(DeleteUpdateCommand).mjava","pathOld":"src/java/org/apache/solr/update/DirectUpdateHandler#deleteByQuery(DeleteUpdateCommand).mjava","sourceNew":"  // TODO - return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine num...\n  public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n    if (!cmd.fromPending && !cmd.fromCommitted)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"meaningless command: \" + cmd);\n    if (!cmd.fromPending || !cmd.fromCommitted)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"operation not supported\" + cmd);\n\n    Query q = QueryParsing.parseQuery(cmd.query, schema);\n\n    int totDeleted = 0;\n    synchronized(this) {\n      closeWriter(); openSearcher();\n\n      // if we want to count the number of docs that were deleted, then\n      // we need a new instance of the DeleteHitCollector\n      final DeleteHitCollector deleter = new DeleteHitCollector(searcher);\n      searcher.search(q, null, deleter);\n      totDeleted = deleter.deleted;\n    }\n\n    if (core.log.isDebugEnabled()) {\n      core.log.debug(core.getLogId()+\"docs deleted:\" + totDeleted);\n    }\n\n  }\n\n","sourceOld":"  // TODO - return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine num...\n  public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n    if (!cmd.fromPending && !cmd.fromCommitted)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"meaningless command: \" + cmd);\n    if (!cmd.fromPending || !cmd.fromCommitted)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"operation not supported\" + cmd);\n\n    Query q = QueryParsing.parseQuery(cmd.query, schema);\n\n    int totDeleted = 0;\n    synchronized(this) {\n      closeWriter(); openSearcher();\n\n      // if we want to count the number of docs that were deleted, then\n      // we need a new instance of the DeleteHitCollector\n      final DeleteHitCollector deleter = new DeleteHitCollector(searcher);\n      searcher.search(q, null, deleter);\n      totDeleted = deleter.deleted;\n    }\n\n    if (core.log.isLoggable(Level.FINE)) {\n      core.log.fine(core.getLogId()+\"docs deleted:\" + totDeleted);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2c5b6c69b7a616e2efe0053dfc5e07b6d6f4b8d","date":1224067136,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/update/DirectUpdateHandler#deleteByQuery(DeleteUpdateCommand).mjava","pathOld":"src/java/org/apache/solr/update/DirectUpdateHandler#deleteByQuery(DeleteUpdateCommand).mjava","sourceNew":"  // TODO - return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine num...\n  public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n    if (!cmd.fromPending && !cmd.fromCommitted)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"meaningless command: \" + cmd);\n    if (!cmd.fromPending || !cmd.fromCommitted)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"operation not supported: \" + cmd);\n\n    Query q = QueryParsing.parseQuery(cmd.query, schema);\n\n    int totDeleted = 0;\n    synchronized(this) {\n      closeWriter(); openSearcher();\n\n      // if we want to count the number of docs that were deleted, then\n      // we need a new instance of the DeleteHitCollector\n      final DeleteHitCollector deleter = new DeleteHitCollector(searcher);\n      searcher.search(q, null, deleter);\n      totDeleted = deleter.deleted;\n    }\n\n    if (core.log.isDebugEnabled()) {\n      core.log.debug(core.getLogId()+\"docs deleted:\" + totDeleted);\n    }\n\n  }\n\n","sourceOld":"  // TODO - return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine num...\n  public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n    if (!cmd.fromPending && !cmd.fromCommitted)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"meaningless command: \" + cmd);\n    if (!cmd.fromPending || !cmd.fromCommitted)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"operation not supported\" + cmd);\n\n    Query q = QueryParsing.parseQuery(cmd.query, schema);\n\n    int totDeleted = 0;\n    synchronized(this) {\n      closeWriter(); openSearcher();\n\n      // if we want to count the number of docs that were deleted, then\n      // we need a new instance of the DeleteHitCollector\n      final DeleteHitCollector deleter = new DeleteHitCollector(searcher);\n      searcher.search(q, null, deleter);\n      totDeleted = deleter.deleted;\n    }\n\n    if (core.log.isDebugEnabled()) {\n      core.log.debug(core.getLogId()+\"docs deleted:\" + totDeleted);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/update/DirectUpdateHandler#deleteByQuery(DeleteUpdateCommand).mjava","pathOld":"src/java/org/apache/solr/update/DirectUpdateHandler#deleteByQuery(DeleteUpdateCommand).mjava","sourceNew":"  // TODO - return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine num...\n  public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n    if (!cmd.fromPending && !cmd.fromCommitted)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"meaningless command: \" + cmd);\n    if (!cmd.fromPending || !cmd.fromCommitted)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"operation not supported: \" + cmd);\n\n    Query q = QueryParsing.parseQuery(cmd.query, schema);\n\n    int totDeleted = 0;\n    synchronized(this) {\n      closeWriter(); openSearcher();\n\n      // if we want to count the number of docs that were deleted, then\n      // we need a new instance of the DeleteHitCollector\n      final DeleteHitCollector deleter = new DeleteHitCollector(searcher);\n      searcher.search(q, null, deleter);\n      totDeleted = deleter.deleted;\n    }\n\n    if (core.log.isDebugEnabled()) {\n      core.log.debug(core.getLogId()+\"docs deleted:\" + totDeleted);\n    }\n\n  }\n\n","sourceOld":"  // TODO - return number of docs deleted?\n  // Depending on implementation, we may not be able to immediately determine num...\n  public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {\n    if (!cmd.fromPending && !cmd.fromCommitted)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"meaningless command: \" + cmd);\n    if (!cmd.fromPending || !cmd.fromCommitted)\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"operation not supported: \" + cmd);\n\n    Query q = QueryParsing.parseQuery(cmd.query, schema);\n\n    int totDeleted = 0;\n    synchronized(this) {\n      closeWriter(); openSearcher();\n\n      // if we want to count the number of docs that were deleted, then\n      // we need a new instance of the DeleteHitCollector\n      final DeleteHitCollector deleter = new DeleteHitCollector(searcher);\n      searcher.search(q, null, deleter);\n      totDeleted = deleter.deleted;\n    }\n\n    if (core.log.isDebugEnabled()) {\n      core.log.debug(core.getLogId()+\"docs deleted:\" + totDeleted);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c2c5b6c69b7a616e2efe0053dfc5e07b6d6f4b8d":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"048361614025800e582bfc7a7b0329dc6fd6a95e":["c4abe53aaee39b5f2f41dd9a0b905c1ddf880996"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["c2c5b6c69b7a616e2efe0053dfc5e07b6d6f4b8d"],"b46f0ccfb6b63c307ea901d48482630e3689042c":["048361614025800e582bfc7a7b0329dc6fd6a95e"],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["b46f0ccfb6b63c307ea901d48482630e3689042c"],"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c2c5b6c69b7a616e2efe0053dfc5e07b6d6f4b8d":["ad94625fb8d088209f46650c8097196fec67f00c"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["c4abe53aaee39b5f2f41dd9a0b905c1ddf880996"],"048361614025800e582bfc7a7b0329dc6fd6a95e":["b46f0ccfb6b63c307ea901d48482630e3689042c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"b46f0ccfb6b63c307ea901d48482630e3689042c":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["c2c5b6c69b7a616e2efe0053dfc5e07b6d6f4b8d"],"c4abe53aaee39b5f2f41dd9a0b905c1ddf880996":["048361614025800e582bfc7a7b0329dc6fd6a95e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}