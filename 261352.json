{"path":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, EXTENSION);\n    final IndexOutput out = state.directory.createOutput(fileName, state.context);\n    \n    return new FieldsConsumer() {\n      @Override\n      public TermsConsumer addField(FieldInfo field) {\n        if (field.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n          throw new UnsupportedOperationException(\"this codec cannot index offsets\");\n        }\n        if (VERBOSE) System.out.println(\"\\naddField field=\" + field.name);\n        return new TermsWriter(out, field, doPackFST);\n      }\n\n      @Override\n      public void close() throws IOException {\n        // EOF marker:\n        try {\n          out.writeVInt(0);\n        } finally {\n          out.close();\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, EXTENSION);\n    final IndexOutput out = state.directory.createOutput(fileName, state.context);\n    \n    return new FieldsConsumer() {\n      @Override\n      public TermsConsumer addField(FieldInfo field) {\n        if (field.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n          throw new UnsupportedOperationException(\"this codec cannot index offsets\");\n        }\n        if (VERBOSE) System.out.println(\"\\naddField field=\" + field.name);\n        return new TermsWriter(out, field, doPackFST);\n      }\n\n      @Override\n      public void close() throws IOException {\n        // EOF marker:\n        try {\n          out.writeVInt(0);\n        } finally {\n          out.close();\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06e9e87a586e724774d060a39c60ed1178637952","date":1331555866,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, EXTENSION);\n    final IndexOutput out = state.directory.createOutput(fileName, state.context);\n    \n    return new FieldsConsumer() {\n      @Override\n      public TermsConsumer addField(FieldInfo field) {\n        //System.out.println(\"\\naddField field=\" + field.name);\n        return new TermsWriter(out, field, doPackFST);\n      }\n\n      @Override\n      public void close() throws IOException {\n        // EOF marker:\n        try {\n          out.writeVInt(0);\n        } finally {\n          out.close();\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, EXTENSION);\n    final IndexOutput out = state.directory.createOutput(fileName, state.context);\n    \n    return new FieldsConsumer() {\n      @Override\n      public TermsConsumer addField(FieldInfo field) {\n        if (field.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n          throw new UnsupportedOperationException(\"this codec cannot index offsets\");\n        }\n        if (VERBOSE) System.out.println(\"\\naddField field=\" + field.name);\n        return new TermsWriter(out, field, doPackFST);\n      }\n\n      @Override\n      public void close() throws IOException {\n        // EOF marker:\n        try {\n          out.writeVInt(0);\n        } finally {\n          out.close();\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, EXTENSION);\n    final IndexOutput out = state.directory.createOutput(fileName, state.context);\n    \n    return new FieldsConsumer() {\n      @Override\n      public TermsConsumer addField(FieldInfo field) {\n        //System.out.println(\"\\naddField field=\" + field.name);\n        return new TermsWriter(out, field, doPackFST);\n      }\n\n      @Override\n      public void close() throws IOException {\n        // EOF marker:\n        try {\n          out.writeVInt(0);\n        } finally {\n          out.close();\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, EXTENSION);\n    final IndexOutput out = state.directory.createOutput(fileName, state.context);\n    \n    return new FieldsConsumer() {\n      @Override\n      public TermsConsumer addField(FieldInfo field) {\n        if (field.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n          throw new UnsupportedOperationException(\"this codec cannot index offsets\");\n        }\n        if (VERBOSE) System.out.println(\"\\naddField field=\" + field.name);\n        return new TermsWriter(out, field, doPackFST);\n      }\n\n      @Override\n      public void close() throws IOException {\n        // EOF marker:\n        try {\n          out.writeVInt(0);\n        } finally {\n          out.close();\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d08eba3d52b63561ebf936481ce73e6b6a14aa03","date":1333879759,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public InvertedFieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, EXTENSION);\n    final IndexOutput out = state.directory.createOutput(fileName, state.context);\n    \n    return new InvertedFieldsConsumer() {\n      @Override\n      public TermsConsumer addField(FieldInfo field) {\n        //System.out.println(\"\\naddField field=\" + field.name);\n        return new TermsWriter(out, field, doPackFST);\n      }\n\n      @Override\n      public void close() throws IOException {\n        // EOF marker:\n        try {\n          out.writeVInt(0);\n        } finally {\n          out.close();\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, EXTENSION);\n    final IndexOutput out = state.directory.createOutput(fileName, state.context);\n    \n    return new FieldsConsumer() {\n      @Override\n      public TermsConsumer addField(FieldInfo field) {\n        //System.out.println(\"\\naddField field=\" + field.name);\n        return new TermsWriter(out, field, doPackFST);\n      }\n\n      @Override\n      public void close() throws IOException {\n        // EOF marker:\n        try {\n          out.writeVInt(0);\n        } finally {\n          out.close();\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","date":1333892281,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, EXTENSION);\n    final IndexOutput out = state.directory.createOutput(fileName, state.context);\n    \n    return new FieldsConsumer() {\n      @Override\n      public TermsConsumer addField(FieldInfo field) {\n        //System.out.println(\"\\naddField field=\" + field.name);\n        return new TermsWriter(out, field, doPackFST);\n      }\n\n      @Override\n      public void close() throws IOException {\n        // EOF marker:\n        try {\n          out.writeVInt(0);\n        } finally {\n          out.close();\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public InvertedFieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, EXTENSION);\n    final IndexOutput out = state.directory.createOutput(fileName, state.context);\n    \n    return new InvertedFieldsConsumer() {\n      @Override\n      public TermsConsumer addField(FieldInfo field) {\n        //System.out.println(\"\\naddField field=\" + field.name);\n        return new TermsWriter(out, field, doPackFST);\n      }\n\n      @Override\n      public void close() throws IOException {\n        // EOF marker:\n        try {\n          out.writeVInt(0);\n        } finally {\n          out.close();\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"129c6e8ac0c0d9a110ba29e4b5f1889374f30076","date":1337725510,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n    final IndexOutput out = state.directory.createOutput(fileName, state.context);\n    \n    return new FieldsConsumer() {\n      @Override\n      public TermsConsumer addField(FieldInfo field) {\n        //System.out.println(\"\\naddField field=\" + field.name);\n        return new TermsWriter(out, field, doPackFST);\n      }\n\n      @Override\n      public void close() throws IOException {\n        // EOF marker:\n        try {\n          out.writeVInt(0);\n        } finally {\n          out.close();\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, EXTENSION);\n    final IndexOutput out = state.directory.createOutput(fileName, state.context);\n    \n    return new FieldsConsumer() {\n      @Override\n      public TermsConsumer addField(FieldInfo field) {\n        //System.out.println(\"\\naddField field=\" + field.name);\n        return new TermsWriter(out, field, doPackFST);\n      }\n\n      @Override\n      public void close() throws IOException {\n        // EOF marker:\n        try {\n          out.writeVInt(0);\n        } finally {\n          out.close();\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n    final IndexOutput out = state.directory.createOutput(fileName, state.context);\n    \n    return new FieldsConsumer() {\n      @Override\n      public TermsConsumer addField(FieldInfo field) {\n        //System.out.println(\"\\naddField field=\" + field.name);\n        return new TermsWriter(out, field, doPackFST);\n      }\n\n      @Override\n      public void close() throws IOException {\n        // EOF marker:\n        try {\n          out.writeVInt(0);\n        } finally {\n          out.close();\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final String fileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, EXTENSION);\n    final IndexOutput out = state.directory.createOutput(fileName, state.context);\n    \n    return new FieldsConsumer() {\n      @Override\n      public TermsConsumer addField(FieldInfo field) {\n        //System.out.println(\"\\naddField field=\" + field.name);\n        return new TermsWriter(out, field, doPackFST);\n      }\n\n      @Override\n      public void close() throws IOException {\n        // EOF marker:\n        try {\n          out.writeVInt(0);\n        } finally {\n          out.close();\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"edb74c83fff94196b864e08ca033d92823252cb7","date":1339593164,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n    final IndexOutput out = state.directory.createOutput(fileName, state.context);\n    \n    return new FieldsConsumer() {\n      @Override\n      public TermsConsumer addField(FieldInfo field) {\n        //System.out.println(\"\\naddField field=\" + field.name);\n        return new TermsWriter(out, field, doPackFST, acceptableOverheadRatio);\n      }\n\n      @Override\n      public void close() throws IOException {\n        // EOF marker:\n        try {\n          out.writeVInt(0);\n        } finally {\n          out.close();\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n    final IndexOutput out = state.directory.createOutput(fileName, state.context);\n    \n    return new FieldsConsumer() {\n      @Override\n      public TermsConsumer addField(FieldInfo field) {\n        //System.out.println(\"\\naddField field=\" + field.name);\n        return new TermsWriter(out, field, doPackFST);\n      }\n\n      @Override\n      public void close() throws IOException {\n        // EOF marker:\n        try {\n          out.writeVInt(0);\n        } finally {\n          out.close();\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsConsumer(SegmentWriteState).mjava","sourceNew":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n    final IndexOutput out = state.directory.createOutput(fileName, state.context);\n    \n    return new FieldsConsumer() {\n      @Override\n      public TermsConsumer addField(FieldInfo field) {\n        //System.out.println(\"\\naddField field=\" + field.name);\n        return new TermsWriter(out, field, doPackFST, acceptableOverheadRatio);\n      }\n\n      @Override\n      public void close() throws IOException {\n        // EOF marker:\n        try {\n          out.writeVInt(0);\n        } finally {\n          out.close();\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FieldsConsumer fieldsConsumer(SegmentWriteState state) throws IOException {\n\n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n    final IndexOutput out = state.directory.createOutput(fileName, state.context);\n    \n    return new FieldsConsumer() {\n      @Override\n      public TermsConsumer addField(FieldInfo field) {\n        //System.out.println(\"\\naddField field=\" + field.name);\n        return new TermsWriter(out, field, doPackFST, acceptableOverheadRatio);\n      }\n\n      @Override\n      public void close() throws IOException {\n        // EOF marker:\n        try {\n          out.writeVInt(0);\n        } finally {\n          out.close();\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","06e9e87a586e724774d060a39c60ed1178637952"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","129c6e8ac0c0d9a110ba29e4b5f1889374f30076"],"129c6e8ac0c0d9a110ba29e4b5f1889374f30076":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["edb74c83fff94196b864e08ca033d92823252cb7"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"edb74c83fff94196b864e08ca033d92823252cb7":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["06e9e87a586e724774d060a39c60ed1178637952"],"06e9e87a586e724774d060a39c60ed1178637952":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["edb74c83fff94196b864e08ca033d92823252cb7"],"129c6e8ac0c0d9a110ba29e4b5f1889374f30076":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["38e3b736c7ca086d61b7dbb841c905ee115490da","06e9e87a586e724774d060a39c60ed1178637952"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","129c6e8ac0c0d9a110ba29e4b5f1889374f30076"],"06e9e87a586e724774d060a39c60ed1178637952":["38e3b736c7ca086d61b7dbb841c905ee115490da","d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"edb74c83fff94196b864e08ca033d92823252cb7":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}