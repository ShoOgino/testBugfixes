{"path":"solr/core/src/test/org/apache/solr/util/hll/SparseHLLTest#toFromBytesTest().mjava","commits":[{"id":"6faa211c4af605e3cf078a76d200c1dc348973f5","date":1437043657,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/hll/SparseHLLTest#toFromBytesTest().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Tests {@link HLL#toBytes(ISchemaVersion)} and\n     * {@link HLL#fromBytes(byte[])}.\n     */\n    @Test\n    public void toFromBytesTest() {\n        final int log2m = 11/*arbitrary*/;\n        final int regwidth = 5/*arbitrary*/;\n        final int sparseThreshold = 256/*arbitrary*/;\n        final int shortWordLength = 16/*log2m + regwidth = 11 + 5*/;\n\n        final ISchemaVersion schemaVersion = SerializationUtil.DEFAULT_SCHEMA_VERSION;\n        final HLLType type = HLLType.SPARSE;\n        final int padding = schemaVersion.paddingBytes(type);\n\n        {// Should work on an empty element\n            final HLL hll = new HLL(log2m, regwidth, 128/*explicitThreshold, arbitrary, unused*/, sparseThreshold, HLLType.SPARSE);\n            final byte[] bytes = hll.toBytes(schemaVersion);\n\n            // output should just be padding since no registers are used\n            assertEquals(bytes.length, padding);\n\n            final HLL inHLL = HLL.fromBytes(bytes);\n\n            // assert register values correct\n            assertElementsEqual(hll, inHLL);\n        }\n        {// Should work on a partially filled element\n            final HLL hll = new HLL(log2m, regwidth, 128/*explicitThreshold, arbitrary, unused*/, sparseThreshold, HLLType.SPARSE);\n\n            for(int i=0; i<3; i++) {\n                final long rawValue = ProbabilisticTestUtil.constructHLLValue(log2m, i, (i+9));\n                hll.addRaw(rawValue);\n            }\n\n            final byte[] bytes = hll.toBytes(schemaVersion);\n\n            assertEquals(bytes.length, padding + ProbabilisticTestUtil.getRequiredBytes(shortWordLength, 3/*registerCount*/));\n\n            final HLL inHLL = HLL.fromBytes(bytes);\n\n            // assert register values correct\n            assertElementsEqual(hll, inHLL);\n        }\n        {// Should work on a full set\n            final HLL hll = new HLL(log2m, regwidth, 128/*explicitThreshold, arbitrary, unused*/, sparseThreshold, HLLType.SPARSE);\n\n            for(int i=0; i<sparseThreshold; i++) {\n                final long rawValue = ProbabilisticTestUtil.constructHLLValue(log2m, i, (i % 9) + 1);\n                hll.addRaw(rawValue);\n            }\n\n            final byte[] bytes = hll.toBytes(schemaVersion);\n\n            // 'short words' should be 12 bits + 5 bits = 17 bits long\n            assertEquals(bytes.length, padding + ProbabilisticTestUtil.getRequiredBytes(shortWordLength, sparseThreshold));\n\n            final HLL inHLL = HLL.fromBytes(bytes);\n\n            // assert register values correct\n            assertElementsEqual(hll, inHLL);\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b5ee4c66244bdfcc4796a114519d47701b2c026","date":1437132013,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/hll/SparseHLLTest#toFromBytesTest().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Tests {@link HLL#toBytes(ISchemaVersion)} and\n     * {@link HLL#fromBytes(byte[])}.\n     */\n    @Test\n    public void toFromBytesTest() {\n        final int log2m = 11/*arbitrary*/;\n        final int regwidth = 5/*arbitrary*/;\n        final int sparseThreshold = 256/*arbitrary*/;\n        final int shortWordLength = 16/*log2m + regwidth = 11 + 5*/;\n\n        final ISchemaVersion schemaVersion = SerializationUtil.DEFAULT_SCHEMA_VERSION;\n        final HLLType type = HLLType.SPARSE;\n        final int padding = schemaVersion.paddingBytes(type);\n\n        {// Should work on an empty element\n            final HLL hll = new HLL(log2m, regwidth, 128/*explicitThreshold, arbitrary, unused*/, sparseThreshold, HLLType.SPARSE);\n            final byte[] bytes = hll.toBytes(schemaVersion);\n\n            // output should just be padding since no registers are used\n            assertEquals(bytes.length, padding);\n\n            final HLL inHLL = HLL.fromBytes(bytes);\n\n            // assert register values correct\n            assertElementsEqual(hll, inHLL);\n        }\n        {// Should work on a partially filled element\n            final HLL hll = new HLL(log2m, regwidth, 128/*explicitThreshold, arbitrary, unused*/, sparseThreshold, HLLType.SPARSE);\n\n            for(int i=0; i<3; i++) {\n                final long rawValue = ProbabilisticTestUtil.constructHLLValue(log2m, i, (i+9));\n                hll.addRaw(rawValue);\n            }\n\n            final byte[] bytes = hll.toBytes(schemaVersion);\n\n            assertEquals(bytes.length, padding + ProbabilisticTestUtil.getRequiredBytes(shortWordLength, 3/*registerCount*/));\n\n            final HLL inHLL = HLL.fromBytes(bytes);\n\n            // assert register values correct\n            assertElementsEqual(hll, inHLL);\n        }\n        {// Should work on a full set\n            final HLL hll = new HLL(log2m, regwidth, 128/*explicitThreshold, arbitrary, unused*/, sparseThreshold, HLLType.SPARSE);\n\n            for(int i=0; i<sparseThreshold; i++) {\n                final long rawValue = ProbabilisticTestUtil.constructHLLValue(log2m, i, (i % 9) + 1);\n                hll.addRaw(rawValue);\n            }\n\n            final byte[] bytes = hll.toBytes(schemaVersion);\n\n            // 'short words' should be 12 bits + 5 bits = 17 bits long\n            assertEquals(bytes.length, padding + ProbabilisticTestUtil.getRequiredBytes(shortWordLength, sparseThreshold));\n\n            final HLL inHLL = HLL.fromBytes(bytes);\n\n            // assert register values correct\n            assertElementsEqual(hll, inHLL);\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6faa211c4af605e3cf078a76d200c1dc348973f5"],"6faa211c4af605e3cf078a76d200c1dc348973f5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3b5ee4c66244bdfcc4796a114519d47701b2c026"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b5ee4c66244bdfcc4796a114519d47701b2c026","6faa211c4af605e3cf078a76d200c1dc348973f5"],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6faa211c4af605e3cf078a76d200c1dc348973f5":["3b5ee4c66244bdfcc4796a114519d47701b2c026"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}