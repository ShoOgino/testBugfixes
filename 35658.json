{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttp2SolrClient#asyncReq(Req,AsyncListener[Rsp]).mjava","commits":[{"id":"1964c059f45ae1de1877f9f0fe3ca327ea4218e8","date":1594088246,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttp2SolrClient#asyncReq(Req,AsyncListener[Rsp]).mjava","pathOld":"/dev/null","sourceNew":"  public Cancellable asyncReq(Req req, AsyncListener<Rsp> asyncListener) {\n    Rsp rsp = new Rsp();\n    boolean isNonRetryable = req.request instanceof IsUpdateRequest || ADMIN_PATHS.contains(req.request.getPath());\n    ServerIterator it = new ServerIterator(req, zombieServers);\n    asyncListener.onStart();\n    final AtomicBoolean cancelled = new AtomicBoolean(false);\n    AtomicReference<Cancellable> currentCancellable = new AtomicReference<>();\n    RetryListener retryListener = new RetryListener() {\n\n      @Override\n      public void onSuccess(Rsp rsp) {\n        asyncListener.onSuccess(rsp);\n      }\n\n      @Override\n      public void onFailure(Exception e, boolean retryReq) {\n        if (retryReq) {\n          String url;\n          try {\n            url = it.nextOrError(e);\n          } catch (SolrServerException ex) {\n            asyncListener.onFailure(e);\n            return;\n          }\n          try {\n            MDC.put(\"LBSolrClient.url\", url);\n            synchronized (cancelled) {\n              if (cancelled.get()) {\n                return;\n              }\n              Cancellable cancellable = doRequest(url, req, rsp, isNonRetryable, it.isServingZombieServer(), this);\n              currentCancellable.set(cancellable);\n            }\n          } finally {\n            MDC.remove(\"LBSolrClient.url\");\n          }\n        } else {\n          asyncListener.onFailure(e);\n        }\n      }\n    };\n    try {\n      Cancellable cancellable = doRequest(it.nextOrError(), req, rsp, isNonRetryable, it.isServingZombieServer(), retryListener);\n      currentCancellable.set(cancellable);\n    } catch (SolrServerException e) {\n      asyncListener.onFailure(e);\n    }\n    return () -> {\n      synchronized (cancelled) {\n        cancelled.set(true);\n        if (currentCancellable.get() != null) {\n          currentCancellable.get().cancel();\n        }\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1964c059f45ae1de1877f9f0fe3ca327ea4218e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1964c059f45ae1de1877f9f0fe3ca327ea4218e8"]},"commit2Childs":{"1964c059f45ae1de1877f9f0fe3ca327ea4218e8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1964c059f45ae1de1877f9f0fe3ca327ea4218e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}