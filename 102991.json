{"path":"src/test/org/apache/lucene/index/TestIndexWriter#testRandomUnicodeStrings().mjava","commits":[{"id":"dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4","date":1206538765,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testRandomUnicodeStrings().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-510\n  public void testRandomUnicodeStrings() throws Throwable {\n\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    UnicodeUtil.UTF8Result utf8 = new UnicodeUtil.UTF8Result();\n    UnicodeUtil.UTF16Result utf16 = new UnicodeUtil.UTF16Result();\n\n    for(int iter=0;iter<100000;iter++) {\n      boolean hasIllegal = fillUnicode(buffer, expected, 0, 20);\n\n      UnicodeUtil.UTF16toUTF8(buffer, 0, 20, utf8);\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(\"UTF-8\");\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.result[i]);\n      }\n\n      UnicodeUtil.UTF8toUTF16(utf8.result, 0, utf8.length, utf16);\n      assertEquals(utf16.length, 20);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.result[i]);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cb1066f2afe9450585d0d10063ea4450085236f1","date":1233870820,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testRandomUnicodeStrings().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testRandomUnicodeStrings().mjava","sourceNew":"  // LUCENE-510\n  public void testRandomUnicodeStrings() throws Throwable {\n    r = newRandom();\n\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    UnicodeUtil.UTF8Result utf8 = new UnicodeUtil.UTF8Result();\n    UnicodeUtil.UTF16Result utf16 = new UnicodeUtil.UTF16Result();\n\n    for(int iter=0;iter<100000;iter++) {\n      boolean hasIllegal = fillUnicode(buffer, expected, 0, 20);\n\n      UnicodeUtil.UTF16toUTF8(buffer, 0, 20, utf8);\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(\"UTF-8\");\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.result[i]);\n      }\n\n      UnicodeUtil.UTF8toUTF16(utf8.result, 0, utf8.length, utf16);\n      assertEquals(utf16.length, 20);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.result[i]);\n    }\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testRandomUnicodeStrings() throws Throwable {\n\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    UnicodeUtil.UTF8Result utf8 = new UnicodeUtil.UTF8Result();\n    UnicodeUtil.UTF16Result utf16 = new UnicodeUtil.UTF16Result();\n\n    for(int iter=0;iter<100000;iter++) {\n      boolean hasIllegal = fillUnicode(buffer, expected, 0, 20);\n\n      UnicodeUtil.UTF16toUTF8(buffer, 0, 20, utf8);\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(\"UTF-8\");\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.result[i]);\n      }\n\n      UnicodeUtil.UTF8toUTF16(utf8.result, 0, utf8.length, utf16);\n      assertEquals(utf16.length, 20);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.result[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestRandomUnicodeStrings().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testRandomUnicodeStrings().mjava","sourceNew":"  // LUCENE-510\n  public void xxxtestRandomUnicodeStrings() throws Throwable {\n    r = newRandom();\n\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    UnicodeUtil.UTF8Result utf8 = new UnicodeUtil.UTF8Result();\n    UnicodeUtil.UTF16Result utf16 = new UnicodeUtil.UTF16Result();\n\n    for(int iter=0;iter<100000;iter++) {\n      boolean hasIllegal = fillUnicode(buffer, expected, 0, 20);\n\n      UnicodeUtil.UTF16toUTF8(buffer, 0, 20, utf8);\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(\"UTF-8\");\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.result[i]);\n      }\n\n      UnicodeUtil.UTF8toUTF16(utf8.result, 0, utf8.length, utf16);\n      assertEquals(utf16.length, 20);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.result[i]);\n    }\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testRandomUnicodeStrings() throws Throwable {\n    r = newRandom();\n\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    UnicodeUtil.UTF8Result utf8 = new UnicodeUtil.UTF8Result();\n    UnicodeUtil.UTF16Result utf16 = new UnicodeUtil.UTF16Result();\n\n    for(int iter=0;iter<100000;iter++) {\n      boolean hasIllegal = fillUnicode(buffer, expected, 0, 20);\n\n      UnicodeUtil.UTF16toUTF8(buffer, 0, 20, utf8);\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(\"UTF-8\");\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.result[i]);\n      }\n\n      UnicodeUtil.UTF8toUTF16(utf8.result, 0, utf8.length, utf16);\n      assertEquals(utf16.length, 20);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.result[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testRandomUnicodeStrings().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestRandomUnicodeStrings().mjava","sourceNew":"  // LUCENE-510\n  public void testRandomUnicodeStrings() throws Throwable {\n    r = newRandom();\n\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    UnicodeUtil.UTF8Result utf8 = new UnicodeUtil.UTF8Result();\n    UnicodeUtil.UTF16Result utf16 = new UnicodeUtil.UTF16Result();\n\n    for(int iter=0;iter<100000;iter++) {\n      boolean hasIllegal = fillUnicode(buffer, expected, 0, 20);\n\n      UnicodeUtil.UTF16toUTF8(buffer, 0, 20, utf8);\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(\"UTF-8\");\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.result[i]);\n      }\n\n      UnicodeUtil.UTF8toUTF16(utf8.result, 0, utf8.length, utf16);\n      assertEquals(utf16.length, 20);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.result[i]);\n    }\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void xxxtestRandomUnicodeStrings() throws Throwable {\n    r = newRandom();\n\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    UnicodeUtil.UTF8Result utf8 = new UnicodeUtil.UTF8Result();\n    UnicodeUtil.UTF16Result utf16 = new UnicodeUtil.UTF16Result();\n\n    for(int iter=0;iter<100000;iter++) {\n      boolean hasIllegal = fillUnicode(buffer, expected, 0, 20);\n\n      UnicodeUtil.UTF16toUTF8(buffer, 0, 20, utf8);\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(\"UTF-8\");\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.result[i]);\n      }\n\n      UnicodeUtil.UTF8toUTF16(utf8.result, 0, utf8.length, utf16);\n      assertEquals(utf16.length, 20);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.result[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomUnicodeStrings().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testRandomUnicodeStrings().mjava","sourceNew":"  // LUCENE-510\n  public void testRandomUnicodeStrings() throws Throwable {\n    r = newRandom();\n\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    UnicodeUtil.UTF8Result utf8 = new UnicodeUtil.UTF8Result();\n    UnicodeUtil.UTF16Result utf16 = new UnicodeUtil.UTF16Result();\n\n    for(int iter=0;iter<100000;iter++) {\n      boolean hasIllegal = fillUnicode(buffer, expected, 0, 20);\n\n      UnicodeUtil.UTF16toUTF8(buffer, 0, 20, utf8);\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(\"UTF-8\");\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.result[i]);\n      }\n\n      UnicodeUtil.UTF8toUTF16(utf8.result, 0, utf8.length, utf16);\n      assertEquals(utf16.length, 20);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.result[i]);\n    }\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testRandomUnicodeStrings() throws Throwable {\n    r = newRandom();\n\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    UnicodeUtil.UTF8Result utf8 = new UnicodeUtil.UTF8Result();\n    UnicodeUtil.UTF16Result utf16 = new UnicodeUtil.UTF16Result();\n\n    for(int iter=0;iter<100000;iter++) {\n      boolean hasIllegal = fillUnicode(buffer, expected, 0, 20);\n\n      UnicodeUtil.UTF16toUTF8(buffer, 0, 20, utf8);\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(\"UTF-8\");\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.result[i]);\n      }\n\n      UnicodeUtil.UTF8toUTF16(utf8.result, 0, utf8.length, utf16);\n      assertEquals(utf16.length, 20);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.result[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"cb1066f2afe9450585d0d10063ea4450085236f1":["dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3215ae1377fc1ca1790921d75dd39cb764743b85":["cb1066f2afe9450585d0d10063ea4450085236f1"],"dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["09c482d1e63332617181729a225b215c452d8a79"]},"commit2Childs":{"cb1066f2afe9450585d0d10063ea4450085236f1":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4"],"dbb7b6f10bff9eedd5c9bc6cf9222ffbb2df74d4":["cb1066f2afe9450585d0d10063ea4450085236f1"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"09c482d1e63332617181729a225b215c452d8a79":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}