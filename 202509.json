{"path":"lucene/core/src/test/org/apache/lucene/TestDemo#testDemo().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemo#testDemo().mjava","pathOld":"lucene/src/test/org/apache/lucene/TestDemo#testDemo().mjava","sourceNew":"  public void testDemo() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random);\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    //Directory directory = FSDirectory.open(\"/tmp/testindex\");\n    RandomIndexWriter iwriter = new RandomIndexWriter(random, directory, analyzer);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newField(\"fieldname\", text, TextField.TYPE_STORED));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = IndexReader.open(directory); // read-only=true\n    IndexSearcher isearcher = new IndexSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, null, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      Document hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n    }\n\n    // Test simple phrase query\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"fieldname\", \"to\"));\n    phraseQuery.add(new Term(\"fieldname\", \"be\"));\n    assertEquals(1, isearcher.search(phraseQuery, null, 1).totalHits);\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testDemo() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random);\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    //Directory directory = FSDirectory.open(\"/tmp/testindex\");\n    RandomIndexWriter iwriter = new RandomIndexWriter(random, directory, analyzer);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newField(\"fieldname\", text, TextField.TYPE_STORED));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = IndexReader.open(directory); // read-only=true\n    IndexSearcher isearcher = new IndexSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, null, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      Document hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n    }\n\n    // Test simple phrase query\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"fieldname\", \"to\"));\n    phraseQuery.add(new Term(\"fieldname\", \"be\"));\n    assertEquals(1, isearcher.search(phraseQuery, null, 1).totalHits);\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemo#testDemo().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemo#testDemo().mjava","sourceNew":"  public void testDemo() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    //Directory directory = FSDirectory.open(\"/tmp/testindex\");\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, analyzer);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newField(\"fieldname\", text, TextField.TYPE_STORED));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = IndexReader.open(directory); // read-only=true\n    IndexSearcher isearcher = new IndexSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, null, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      Document hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n    }\n\n    // Test simple phrase query\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"fieldname\", \"to\"));\n    phraseQuery.add(new Term(\"fieldname\", \"be\"));\n    assertEquals(1, isearcher.search(phraseQuery, null, 1).totalHits);\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testDemo() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random);\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    //Directory directory = FSDirectory.open(\"/tmp/testindex\");\n    RandomIndexWriter iwriter = new RandomIndexWriter(random, directory, analyzer);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newField(\"fieldname\", text, TextField.TYPE_STORED));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = IndexReader.open(directory); // read-only=true\n    IndexSearcher isearcher = new IndexSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, null, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      Document hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n    }\n\n    // Test simple phrase query\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"fieldname\", \"to\"));\n    phraseQuery.add(new Term(\"fieldname\", \"be\"));\n    assertEquals(1, isearcher.search(phraseQuery, null, 1).totalHits);\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0f42e0639920b2e917c9ece35fb68ad83021e38","date":1337629438,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemo#testDemo().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemo#testDemo().mjava","sourceNew":"  public void testDemo() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, analyzer);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newField(\"fieldname\", text, TextField.TYPE_STORED));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = IndexReader.open(directory); // read-only=true\n    IndexSearcher isearcher = new IndexSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, null, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      Document hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n    }\n\n    // Test simple phrase query\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"fieldname\", \"to\"));\n    phraseQuery.add(new Term(\"fieldname\", \"be\"));\n    assertEquals(1, isearcher.search(phraseQuery, null, 1).totalHits);\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testDemo() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    //Directory directory = FSDirectory.open(\"/tmp/testindex\");\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, analyzer);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newField(\"fieldname\", text, TextField.TYPE_STORED));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = IndexReader.open(directory); // read-only=true\n    IndexSearcher isearcher = new IndexSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, null, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      Document hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n    }\n\n    // Test simple phrase query\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"fieldname\", \"to\"));\n    phraseQuery.add(new Term(\"fieldname\", \"be\"));\n    assertEquals(1, isearcher.search(phraseQuery, null, 1).totalHits);\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemo#testDemo().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemo#testDemo().mjava","sourceNew":"  public void testDemo() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, analyzer);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newField(\"fieldname\", text, TextField.TYPE_STORED));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = IndexReader.open(directory); // read-only=true\n    IndexSearcher isearcher = new IndexSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, null, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      Document hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n    }\n\n    // Test simple phrase query\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"fieldname\", \"to\"));\n    phraseQuery.add(new Term(\"fieldname\", \"be\"));\n    assertEquals(1, isearcher.search(phraseQuery, null, 1).totalHits);\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testDemo() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    //Directory directory = FSDirectory.open(\"/tmp/testindex\");\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, analyzer);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newField(\"fieldname\", text, TextField.TYPE_STORED));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = IndexReader.open(directory); // read-only=true\n    IndexSearcher isearcher = new IndexSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, null, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      Document hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n    }\n\n    // Test simple phrase query\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"fieldname\", \"to\"));\n    phraseQuery.add(new Term(\"fieldname\", \"be\"));\n    assertEquals(1, isearcher.search(phraseQuery, null, 1).totalHits);\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemo#testDemo().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemo#testDemo().mjava","sourceNew":"  public void testDemo() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, analyzer);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newField(\"fieldname\", text, TextField.TYPE_STORED));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = new IndexSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, null, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      Document hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n    }\n\n    // Test simple phrase query\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"fieldname\", \"to\"));\n    phraseQuery.add(new Term(\"fieldname\", \"be\"));\n    assertEquals(1, isearcher.search(phraseQuery, null, 1).totalHits);\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testDemo() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, analyzer);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newField(\"fieldname\", text, TextField.TYPE_STORED));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = IndexReader.open(directory); // read-only=true\n    IndexSearcher isearcher = new IndexSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, null, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      Document hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n    }\n\n    // Test simple phrase query\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"fieldname\", \"to\"));\n    phraseQuery.add(new Term(\"fieldname\", \"be\"));\n    assertEquals(1, isearcher.search(phraseQuery, null, 1).totalHits);\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemo#testDemo().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemo#testDemo().mjava","sourceNew":"  public void testDemo() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, analyzer);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = new IndexSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, null, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      Document hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n    }\n\n    // Test simple phrase query\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"fieldname\", \"to\"));\n    phraseQuery.add(new Term(\"fieldname\", \"be\"));\n    assertEquals(1, isearcher.search(phraseQuery, null, 1).totalHits);\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testDemo() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, analyzer);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newField(\"fieldname\", text, TextField.TYPE_STORED));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = new IndexSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, null, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      Document hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n    }\n\n    // Test simple phrase query\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"fieldname\", \"to\"));\n    phraseQuery.add(new Term(\"fieldname\", \"be\"));\n    assertEquals(1, isearcher.search(phraseQuery, null, 1).totalHits);\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","date":1341839195,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemo#testDemo().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemo#testDemo().mjava","sourceNew":"  public void testDemo() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, analyzer);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = new IndexSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, null, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      StoredDocument hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n    }\n\n    // Test simple phrase query\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"fieldname\", \"to\"));\n    phraseQuery.add(new Term(\"fieldname\", \"be\"));\n    assertEquals(1, isearcher.search(phraseQuery, null, 1).totalHits);\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testDemo() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, analyzer);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = new IndexSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, null, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      Document hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n    }\n\n    // Test simple phrase query\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"fieldname\", \"to\"));\n    phraseQuery.add(new Term(\"fieldname\", \"be\"));\n    assertEquals(1, isearcher.search(phraseQuery, null, 1).totalHits);\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemo#testDemo().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemo#testDemo().mjava","sourceNew":"  public void testDemo() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, analyzer);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = new IndexSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, null, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      StoredDocument hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n    }\n\n    // Test simple phrase query\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"fieldname\", \"to\"));\n    phraseQuery.add(new Term(\"fieldname\", \"be\"));\n    assertEquals(1, isearcher.search(phraseQuery, null, 1).totalHits);\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testDemo() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, analyzer);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = new IndexSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, null, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      Document hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n    }\n\n    // Test simple phrase query\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"fieldname\", \"to\"));\n    phraseQuery.add(new Term(\"fieldname\", \"be\"));\n    assertEquals(1, isearcher.search(phraseQuery, null, 1).totalHits);\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173","date":1365631993,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemo#testDemo().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemo#testDemo().mjava","sourceNew":"  public void testDemo() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, analyzer);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = newSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, null, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      StoredDocument hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n    }\n\n    // Test simple phrase query\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"fieldname\", \"to\"));\n    phraseQuery.add(new Term(\"fieldname\", \"be\"));\n    assertEquals(1, isearcher.search(phraseQuery, null, 1).totalHits);\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testDemo() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, analyzer);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = new IndexSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, null, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      StoredDocument hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n    }\n\n    // Test simple phrase query\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"fieldname\", \"to\"));\n    phraseQuery.add(new Term(\"fieldname\", \"be\"));\n    assertEquals(1, isearcher.search(phraseQuery, null, 1).totalHits);\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemo#testDemo().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemo#testDemo().mjava","sourceNew":"  public void testDemo() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, analyzer);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    iwriter.addDocument(doc);\n    iwriter.shutdown();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = newSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, null, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      StoredDocument hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n    }\n\n    // Test simple phrase query\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"fieldname\", \"to\"));\n    phraseQuery.add(new Term(\"fieldname\", \"be\"));\n    assertEquals(1, isearcher.search(phraseQuery, null, 1).totalHits);\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testDemo() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, analyzer);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = newSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, null, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      StoredDocument hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n    }\n\n    // Test simple phrase query\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"fieldname\", \"to\"));\n    phraseQuery.add(new Term(\"fieldname\", \"be\"));\n    assertEquals(1, isearcher.search(phraseQuery, null, 1).totalHits);\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemo#testDemo().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemo#testDemo().mjava","sourceNew":"  public void testDemo() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, analyzer);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = newSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, null, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      StoredDocument hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n    }\n\n    // Test simple phrase query\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"fieldname\", \"to\"));\n    phraseQuery.add(new Term(\"fieldname\", \"be\"));\n    assertEquals(1, isearcher.search(phraseQuery, null, 1).totalHits);\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testDemo() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, analyzer);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    iwriter.addDocument(doc);\n    iwriter.shutdown();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = newSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, null, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      StoredDocument hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n    }\n\n    // Test simple phrase query\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"fieldname\", \"to\"));\n    phraseQuery.add(new Term(\"fieldname\", \"be\"));\n    assertEquals(1, isearcher.search(phraseQuery, null, 1).totalHits);\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemo#testDemo().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemo#testDemo().mjava","sourceNew":"  public void testDemo() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, analyzer);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = newSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      StoredDocument hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n    }\n\n    // Test simple phrase query\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"fieldname\", \"to\"));\n    phraseQuery.add(new Term(\"fieldname\", \"be\"));\n    assertEquals(1, isearcher.search(phraseQuery, 1).totalHits);\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testDemo() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, analyzer);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = newSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, null, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      StoredDocument hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n    }\n\n    // Test simple phrase query\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"fieldname\", \"to\"));\n    phraseQuery.add(new Term(\"fieldname\", \"be\"));\n    assertEquals(1, isearcher.search(phraseQuery, null, 1).totalHits);\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemo#testDemo().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemo#testDemo().mjava","sourceNew":"  public void testDemo() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, analyzer);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = newSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      StoredDocument hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n    }\n\n    // Test simple phrase query\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"fieldname\", \"to\"));\n    phraseQuery.add(new Term(\"fieldname\", \"be\"));\n    assertEquals(1, isearcher.search(phraseQuery, 1).totalHits);\n\n    ireader.close();\n    directory.close();\n    analyzer.close();\n  }\n\n","sourceOld":"  public void testDemo() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, analyzer);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = newSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      StoredDocument hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n    }\n\n    // Test simple phrase query\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"fieldname\", \"to\"));\n    phraseQuery.add(new Term(\"fieldname\", \"be\"));\n    assertEquals(1, isearcher.search(phraseQuery, 1).totalHits);\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemo#testDemo().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemo#testDemo().mjava","sourceNew":"  public void testDemo() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, analyzer);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = newSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      StoredDocument hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n    }\n\n    // Test simple phrase query\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"fieldname\", \"to\"));\n    phraseQuery.add(new Term(\"fieldname\", \"be\"));\n    assertEquals(1, isearcher.search(phraseQuery, 1).totalHits);\n\n    ireader.close();\n    directory.close();\n    analyzer.close();\n  }\n\n","sourceOld":"  public void testDemo() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, analyzer);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = newSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      StoredDocument hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n    }\n\n    // Test simple phrase query\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"fieldname\", \"to\"));\n    phraseQuery.add(new Term(\"fieldname\", \"be\"));\n    assertEquals(1, isearcher.search(phraseQuery, 1).totalHits);\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9e1499c5d26c936238506df90a3c02c76707722","date":1434449920,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemo#testDemo().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemo#testDemo().mjava","sourceNew":"  public void testDemo() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, analyzer);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = newSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      StoredDocument hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n    }\n\n    // Test simple phrase query\n    PhraseQuery phraseQuery = new PhraseQuery(\"fieldname\", \"to\", \"be\");\n    assertEquals(1, isearcher.search(phraseQuery, 1).totalHits);\n\n    ireader.close();\n    directory.close();\n    analyzer.close();\n  }\n\n","sourceOld":"  public void testDemo() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, analyzer);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = newSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      StoredDocument hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n    }\n\n    // Test simple phrase query\n    PhraseQuery phraseQuery = new PhraseQuery();\n    phraseQuery.add(new Term(\"fieldname\", \"to\"));\n    phraseQuery.add(new Term(\"fieldname\", \"be\"));\n    assertEquals(1, isearcher.search(phraseQuery, 1).totalHits);\n\n    ireader.close();\n    directory.close();\n    analyzer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemo#testDemo().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemo#testDemo().mjava","sourceNew":"  public void testDemo() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, analyzer);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = newSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      Document hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n    }\n\n    // Test simple phrase query\n    PhraseQuery phraseQuery = new PhraseQuery(\"fieldname\", \"to\", \"be\");\n    assertEquals(1, isearcher.search(phraseQuery, 1).totalHits);\n\n    ireader.close();\n    directory.close();\n    analyzer.close();\n  }\n\n","sourceOld":"  public void testDemo() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, analyzer);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = newSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      StoredDocument hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n    }\n\n    // Test simple phrase query\n    PhraseQuery phraseQuery = new PhraseQuery(\"fieldname\", \"to\", \"be\");\n    assertEquals(1, isearcher.search(phraseQuery, 1).totalHits);\n\n    ireader.close();\n    directory.close();\n    analyzer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"470eaac3a77cf637b62126a5408b178d7be93eb1","date":1531830722,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemo#testDemo().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemo#testDemo().mjava","sourceNew":"  public void testDemo() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, analyzer);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = newSearcher(ireader);\n\n    assertEquals(1, isearcher.count(new TermQuery(new Term(\"fieldname\", longTerm))));\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      Document hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n    }\n\n    // Test simple phrase query\n    PhraseQuery phraseQuery = new PhraseQuery(\"fieldname\", \"to\", \"be\");\n    assertEquals(1, isearcher.count(phraseQuery));\n\n    ireader.close();\n    directory.close();\n    analyzer.close();\n  }\n\n","sourceOld":"  public void testDemo() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, analyzer);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = newSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      Document hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n    }\n\n    // Test simple phrase query\n    PhraseQuery phraseQuery = new PhraseQuery(\"fieldname\", \"to\", \"be\");\n    assertEquals(1, isearcher.search(phraseQuery, 1).totalHits);\n\n    ireader.close();\n    directory.close();\n    analyzer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemo#testDemo().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemo#testDemo().mjava","sourceNew":"  public void testDemo() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, analyzer);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = newSearcher(ireader);\n\n    assertEquals(1, isearcher.count(new TermQuery(new Term(\"fieldname\", longTerm))));\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      Document hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n    }\n\n    // Test simple phrase query\n    PhraseQuery phraseQuery = new PhraseQuery(\"fieldname\", \"to\", \"be\");\n    assertEquals(1, isearcher.count(phraseQuery));\n\n    ireader.close();\n    directory.close();\n    analyzer.close();\n  }\n\n","sourceOld":"  public void testDemo() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, analyzer);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = newSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      Document hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n    }\n\n    // Test simple phrase query\n    PhraseQuery phraseQuery = new PhraseQuery(\"fieldname\", \"to\", \"be\");\n    assertEquals(1, isearcher.search(phraseQuery, 1).totalHits);\n\n    ireader.close();\n    directory.close();\n    analyzer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemo#testDemo().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemo#testDemo().mjava","sourceNew":"  public void testDemo() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, analyzer);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = newSearcher(ireader);\n\n    assertEquals(1, isearcher.count(new TermQuery(new Term(\"fieldname\", longTerm))));\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, 1);\n    assertEquals(1, hits.totalHits.value);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      Document hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n    }\n\n    // Test simple phrase query\n    PhraseQuery phraseQuery = new PhraseQuery(\"fieldname\", \"to\", \"be\");\n    assertEquals(1, isearcher.count(phraseQuery));\n\n    ireader.close();\n    directory.close();\n    analyzer.close();\n  }\n\n","sourceOld":"  public void testDemo() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, analyzer);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = newSearcher(ireader);\n\n    assertEquals(1, isearcher.count(new TermQuery(new Term(\"fieldname\", longTerm))));\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, 1);\n    assertEquals(1, hits.totalHits);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      Document hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n    }\n\n    // Test simple phrase query\n    PhraseQuery phraseQuery = new PhraseQuery(\"fieldname\", \"to\", \"be\");\n    assertEquals(1, isearcher.count(phraseQuery));\n\n    ireader.close();\n    directory.close();\n    analyzer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61b62ef3d720d29d3364222c849bc6eb0bc9527a","date":1536219261,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemo#testDemo().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemo#testDemo().mjava","sourceNew":"  public void testDemo() throws IOException {\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n\n    Path indexPath = Files.createTempDirectory(\"tempIndex\");\n    try (Directory dir = FSDirectory.open(indexPath)) {\n      Analyzer analyzer = new StandardAnalyzer();\n      try (IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(analyzer))) {\n        Document doc = new Document();\n        doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n        iw.addDocument(doc);\n      }\n\n      // Now search the index.\n      try (IndexReader reader = DirectoryReader.open(dir)) {\n        IndexSearcher searcher = newSearcher(reader);\n\n        assertEquals(1, searcher.count(new TermQuery(new Term(\"fieldname\", longTerm))));\n\n        Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n        TopDocs hits = searcher.search(query, 1);\n        assertEquals(1, hits.totalHits.value);\n\n        // Iterate through the results.\n        for (int i = 0; i < hits.scoreDocs.length; i++) {\n          Document hitDoc = searcher.doc(hits.scoreDocs[i].doc);\n          assertEquals(text, hitDoc.get(\"fieldname\"));\n        }\n\n        // Test simple phrase query.\n        PhraseQuery phraseQuery = new PhraseQuery(\"fieldname\", \"to\", \"be\");\n        assertEquals(1, searcher.count(phraseQuery));\n      }\n    }\n\n    IOUtils.rm(indexPath);\n  }\n\n","sourceOld":"  public void testDemo() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, analyzer);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = newSearcher(ireader);\n\n    assertEquals(1, isearcher.count(new TermQuery(new Term(\"fieldname\", longTerm))));\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, 1);\n    assertEquals(1, hits.totalHits.value);\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      Document hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n    }\n\n    // Test simple phrase query\n    PhraseQuery phraseQuery = new PhraseQuery(\"fieldname\", \"to\", \"be\");\n    assertEquals(1, isearcher.count(phraseQuery));\n\n    ireader.close();\n    directory.close();\n    analyzer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"61b62ef3d720d29d3364222c849bc6eb0bc9527a":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"a0f42e0639920b2e917c9ece35fb68ad83021e38":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["1d028314cced5858683a1bb4741423d0f934257b"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","a56958d7f71a28824f20031ffbb2e13502a0274e"],"1d028314cced5858683a1bb4741423d0f934257b":["04f07771a2a7dd3a395700665ed839c3dae2def2","8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","470eaac3a77cf637b62126a5408b178d7be93eb1"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","a0f42e0639920b2e917c9ece35fb68ad83021e38"],"e9e1499c5d26c936238506df90a3c02c76707722":["a56958d7f71a28824f20031ffbb2e13502a0274e"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["470eaac3a77cf637b62126a5408b178d7be93eb1"],"470eaac3a77cf637b62126a5408b178d7be93eb1":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["61b62ef3d720d29d3364222c849bc6eb0bc9527a"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["e9e1499c5d26c936238506df90a3c02c76707722"]},"commit2Childs":{"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["1d028314cced5858683a1bb4741423d0f934257b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"61b62ef3d720d29d3364222c849bc6eb0bc9527a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0f42e0639920b2e917c9ece35fb68ad83021e38":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","1d028314cced5858683a1bb4741423d0f934257b"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"1d028314cced5858683a1bb4741423d0f934257b":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"e9e1499c5d26c936238506df90a3c02c76707722":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["61b62ef3d720d29d3364222c849bc6eb0bc9527a"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["a0f42e0639920b2e917c9ece35fb68ad83021e38","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"470eaac3a77cf637b62126a5408b178d7be93eb1":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","83788ad129a5154d5c6562c4e8ce3db48793aada"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","e9e1499c5d26c936238506df90a3c02c76707722"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","470eaac3a77cf637b62126a5408b178d7be93eb1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}