{"path":"lucene/src/java/org/apache/lucene/util/fst/FST#readFirstRealArc(int,Arc[T]).mjava","commits":[{"id":"8be6e1e4fbbc94d90b78f175c03ff389b6949373","date":1306674752,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#readFirstRealArc(int,Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#readFirstRealArc(int,Arc[T]).mjava","sourceNew":"  // Not private because NodeHash needs access:\n  Arc<T> readFirstRealArc(int address, Arc<T> arc) throws IOException {\n\n    final BytesReader in = getBytesReader(address);\n\n    arc.flags = in.readByte();\n\n    if (arc.flag(BIT_ARCS_AS_FIXED_ARRAY)) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readByte() & 0xFF;\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.pos;\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n    return readNextRealArc(arc);\n  }\n\n","sourceOld":"  // Not private because NodeHash needs access:\n  Arc<T> readFirstRealArc(int address, Arc<T> arc) throws IOException {\n\n    final BytesReader in = getBytesReader(address);\n\n    arc.flags = in.readByte();\n\n    if (arc.flag(BIT_ARCS_AS_FIXED_ARRAY)) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readByte() & 0xFF;\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.pos;\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n    return readNextRealArc(arc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#readFirstRealArc(int,Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#readFirstRealArc(int,Arc[T]).mjava","sourceNew":"  // Not private because NodeHash needs access:\n  Arc<T> readFirstRealArc(int address, Arc<T> arc) throws IOException {\n\n    final BytesReader in = getBytesReader(address);\n\n    arc.flags = in.readByte();\n\n    if (arc.flag(BIT_ARCS_AS_FIXED_ARRAY)) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readByte() & 0xFF;\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.pos;\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n    return readNextRealArc(arc);\n  }\n\n","sourceOld":"  // Not private because NodeHash needs access:\n  Arc<T> readFirstRealArc(int address, Arc<T> arc) throws IOException {\n\n    final BytesReader in = getBytesReader(address);\n\n    arc.flags = in.readByte();\n\n    if (arc.flag(BIT_ARCS_AS_FIXED_ARRAY)) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readByte() & 0xFF;\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.pos;\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n    return readNextRealArc(arc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#readFirstRealArc(int,Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#readFirstRealArc(int,Arc[T]).mjava","sourceNew":"  // Not private because NodeHash needs access:\n  Arc<T> readFirstRealArc(int address, Arc<T> arc) throws IOException {\n\n    final BytesReader in = getBytesReader(address);\n\n    arc.flags = in.readByte();\n\n    if (arc.flag(BIT_ARCS_AS_FIXED_ARRAY)) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readByte() & 0xFF;\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.pos;\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n    return readNextRealArc(arc);\n  }\n\n","sourceOld":"  // Not private because NodeHash needs access:\n  Arc<T> readFirstRealArc(int address, Arc<T> arc) throws IOException {\n\n    final BytesReader in = getBytesReader(address);\n\n    arc.flags = in.readByte();\n\n    if (arc.flag(BIT_ARCS_AS_FIXED_ARRAY)) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readByte() & 0xFF;\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.pos;\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n    return readNextRealArc(arc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","date":1310389132,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#readFirstRealArc(int,Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#readFirstRealArc(int,Arc[T]).mjava","sourceNew":"  // Not private because NodeHash needs access:\n  Arc<T> readFirstRealArc(int address, Arc<T> arc) throws IOException {\n\n    final BytesReader in = getBytesReader(address);\n\n    arc.flags = in.readByte();\n\n    if (arc.flag(BIT_ARCS_AS_FIXED_ARRAY)) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readInt();\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.pos;\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n    return readNextRealArc(arc, in);\n  }\n\n","sourceOld":"  // Not private because NodeHash needs access:\n  Arc<T> readFirstRealArc(int address, Arc<T> arc) throws IOException {\n\n    final BytesReader in = getBytesReader(address);\n\n    arc.flags = in.readByte();\n\n    if (arc.flag(BIT_ARCS_AS_FIXED_ARRAY)) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readByte() & 0xFF;\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.pos;\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n    return readNextRealArc(arc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#readFirstRealArc(int,Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#readFirstRealArc(int,Arc[T]).mjava","sourceNew":"  public Arc<T> readFirstRealArc(int address, Arc<T> arc) throws IOException {\n\n    final BytesReader in = getBytesReader(address);\n\n    arc.flags = in.readByte();\n\n    if (arc.flag(BIT_ARCS_AS_FIXED_ARRAY)) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readInt();\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.pos;\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n    return readNextRealArc(arc, in);\n  }\n\n","sourceOld":"  // Not private because NodeHash needs access:\n  Arc<T> readFirstRealArc(int address, Arc<T> arc) throws IOException {\n\n    final BytesReader in = getBytesReader(address);\n\n    arc.flags = in.readByte();\n\n    if (arc.flag(BIT_ARCS_AS_FIXED_ARRAY)) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readInt();\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.pos;\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n    return readNextRealArc(arc, in);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4708e7bf7695781d702d204d178627b4faddc03f","date":1326982060,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#readFirstRealArc(int,Arc[T],BytesReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#readFirstRealArc(int,Arc[T]).mjava","sourceNew":"  public Arc<T> readFirstRealArc(int address, Arc<T> arc, final BytesReader in) throws IOException {\n    in.pos = address;\n    arc.flags = in.readByte();\n\n    if (arc.flag(BIT_ARCS_AS_FIXED_ARRAY)) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readInt();\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.pos;\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n    return readNextRealArc(arc, in);\n  }\n\n","sourceOld":"  public Arc<T> readFirstRealArc(int address, Arc<T> arc) throws IOException {\n\n    final BytesReader in = getBytesReader(address);\n\n    arc.flags = in.readByte();\n\n    if (arc.flag(BIT_ARCS_AS_FIXED_ARRAY)) {\n      //System.out.println(\"  fixedArray\");\n      // this is first arc in a fixed-array\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readInt();\n      arc.arcIdx = -1;\n      arc.nextArc = arc.posArcsStart = in.pos;\n      //System.out.println(\"  bytesPer=\" + arc.bytesPerArc + \" numArcs=\" + arc.numArcs + \" arcsStart=\" + pos);\n    } else {\n      arc.nextArc = address;\n      arc.bytesPerArc = 0;\n    }\n    return readNextRealArc(arc, in);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4708e7bf7695781d702d204d178627b4faddc03f"],"4708e7bf7695781d702d204d178627b4faddc03f":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8be6e1e4fbbc94d90b78f175c03ff389b6949373"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["4708e7bf7695781d702d204d178627b4faddc03f"],"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8be6e1e4fbbc94d90b78f175c03ff389b6949373","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"4708e7bf7695781d702d204d178627b4faddc03f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}