{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrServerTest#getNumRequests(HttpSolrServer).mjava","commits":[{"id":"14f5fb047085ab89f16696609c848b225b51b482","date":1395311996,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrServerTest#getNumRequests(HttpSolrServer).mjava","pathOld":"/dev/null","sourceNew":"  private Long getNumRequests(HttpSolrServer solrServer) throws\n      SolrServerException, IOException {\n    HttpSolrServer server = new HttpSolrServer(solrServer.getBaseURL());\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(60000);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"qt\", \"/admin/mbeans\");\n    params.set(\"stats\", \"true\");\n    params.set(\"key\", \"org.apache.solr.handler.StandardRequestHandler\");\n    params.set(\"cat\", \"QUERYHANDLER\");\n    // use generic request to avoid extra processing of queries\n    QueryRequest req = new QueryRequest(params);\n    NamedList<Object> resp = server.request(req);\n    NamedList mbeans = (NamedList) resp.get(\"solr-mbeans\");\n    NamedList queryHandler = (NamedList) mbeans.get(\"QUERYHANDLER\");\n    NamedList select = (NamedList) queryHandler.get(\"org.apache.solr.handler.StandardRequestHandler\");\n    NamedList stats = (NamedList) select.get(\"stats\");\n    return (Long) stats.get(\"requests\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ce0869149ac7db00681b2dfa4a47463d3f73d01a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0622fbd990643ae4cacb693db6a0c82cf8916ae2","date":1397637446,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrServerTest#getNumRequests(String,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrServerTest#getNumRequests(HttpSolrServer).mjava","sourceNew":"  private Long getNumRequests(String baseUrl, String collectionName) throws\n      SolrServerException, IOException {\n    HttpSolrServer server = new HttpSolrServer(baseUrl + \"/\"+ collectionName);\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(60000);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"qt\", \"/admin/mbeans\");\n    params.set(\"stats\", \"true\");\n    params.set(\"key\", \"org.apache.solr.handler.StandardRequestHandler\");\n    params.set(\"cat\", \"QUERYHANDLER\");\n    // use generic request to avoid extra processing of queries\n    QueryRequest req = new QueryRequest(params);\n    NamedList<Object> resp = server.request(req);\n    NamedList mbeans = (NamedList) resp.get(\"solr-mbeans\");\n    NamedList queryHandler = (NamedList) mbeans.get(\"QUERYHANDLER\");\n    NamedList select = (NamedList) queryHandler.get(\"org.apache.solr.handler.StandardRequestHandler\");\n    NamedList stats = (NamedList) select.get(\"stats\");\n    return (Long) stats.get(\"requests\");\n  }\n\n","sourceOld":"  private Long getNumRequests(HttpSolrServer solrServer) throws\n      SolrServerException, IOException {\n    HttpSolrServer server = new HttpSolrServer(solrServer.getBaseURL());\n    server.setConnectionTimeout(15000);\n    server.setSoTimeout(60000);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"qt\", \"/admin/mbeans\");\n    params.set(\"stats\", \"true\");\n    params.set(\"key\", \"org.apache.solr.handler.StandardRequestHandler\");\n    params.set(\"cat\", \"QUERYHANDLER\");\n    // use generic request to avoid extra processing of queries\n    QueryRequest req = new QueryRequest(params);\n    NamedList<Object> resp = server.request(req);\n    NamedList mbeans = (NamedList) resp.get(\"solr-mbeans\");\n    NamedList queryHandler = (NamedList) mbeans.get(\"QUERYHANDLER\");\n    NamedList select = (NamedList) queryHandler.get(\"org.apache.solr.handler.StandardRequestHandler\");\n    NamedList stats = (NamedList) select.get(\"stats\");\n    return (Long) stats.get(\"requests\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"14f5fb047085ab89f16696609c848b225b51b482":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["14f5fb047085ab89f16696609c848b225b51b482"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"]},"commit2Childs":{"14f5fb047085ab89f16696609c848b225b51b482":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["14f5fb047085ab89f16696609c848b225b51b482"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}