{"path":"src/java/org/apache/lucene/store/RAMDirectory#RAMDirectory(Directory).mjava","commits":[{"id":"03ae70812bc33b0270c1366378b2c2da95fe86a6","date":1036648540,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/RAMDirectory#RAMDirectory(Directory).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a new <code>RAMDirectory</code> instance from a different\n   * <code>Directory</code> implementation.  This can be used to load\n   * a disk-based index into memory.\n   * <P>\n   * This should be used only with indices that can fit into memory.\n   *\n   * @param d a <code>Directory</code> value\n   * @exception IOException if an error occurs\n   */\n  public RAMDirectory(Directory d) throws IOException {\n    final String[] ar = d.list();\n    for (int i = 0; i < ar.length; i++) {\n      // make place on ram disk\n      OutputStream os = createFile(ar[i]);\n      // read current file\n      InputStream is = d.openFile(ar[i]);\n      // and copy to ram disk\n      int len = (int) is.length();\n      byte[] buf = new byte[len];\n      is.readBytes(buf, 0, len);\n      os.writeBytes(buf, len);\n      // graceful cleanup\n      is.close();\n      os.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5105c66a1cba86af7edef15227de3687c5c4b6b","date":1042515665,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/RAMDirectory#RAMDirectory(Directory).mjava","pathOld":"src/java/org/apache/lucene/store/RAMDirectory#RAMDirectory(Directory).mjava","sourceNew":"  /**\n   * Creates a new <code>RAMDirectory</code> instance from a different\n   * <code>Directory</code> implementation.  This can be used to load\n   * a disk-based index into memory.\n   * <P>\n   * This should be used only with indices that can fit into memory.\n   *\n   * @param dir a <code>Directory</code> value\n   * @exception IOException if an error occurs\n   */\n  public RAMDirectory(Directory dir) throws IOException {\n    final String[] ar = dir.list();\n    for (int i = 0; i < ar.length; i++) {\n      // make place on ram disk\n      OutputStream os = createFile(ar[i]);\n      // read current file\n      InputStream is = dir.openFile(ar[i]);\n      // and copy to ram disk\n      int len = (int) is.length();\n      byte[] buf = new byte[len];\n      is.readBytes(buf, 0, len);\n      os.writeBytes(buf, len);\n      // graceful cleanup\n      is.close();\n      os.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new <code>RAMDirectory</code> instance from a different\n   * <code>Directory</code> implementation.  This can be used to load\n   * a disk-based index into memory.\n   * <P>\n   * This should be used only with indices that can fit into memory.\n   *\n   * @param d a <code>Directory</code> value\n   * @exception IOException if an error occurs\n   */\n  public RAMDirectory(Directory d) throws IOException {\n    final String[] ar = d.list();\n    for (int i = 0; i < ar.length; i++) {\n      // make place on ram disk\n      OutputStream os = createFile(ar[i]);\n      // read current file\n      InputStream is = d.openFile(ar[i]);\n      // and copy to ram disk\n      int len = (int) is.length();\n      byte[] buf = new byte[len];\n      is.readBytes(buf, 0, len);\n      os.writeBytes(buf, len);\n      // graceful cleanup\n      is.close();\n      os.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b7c5338d3bda9e7626a720e14969952010c8dec","date":1069160713,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/RAMDirectory#RAMDirectory(Directory).mjava","pathOld":"src/java/org/apache/lucene/store/RAMDirectory#RAMDirectory(Directory).mjava","sourceNew":"  /**\n   * Creates a new <code>RAMDirectory</code> instance from a different\n   * <code>Directory</code> implementation.  This can be used to load\n   * a disk-based index into memory.\n   * <P>\n   * This should be used only with indices that can fit into memory.\n   *\n   * @param dir a <code>Directory</code> value\n   * @exception IOException if an error occurs\n   */\n  public RAMDirectory(Directory dir) throws IOException {\n    final String[] files = dir.list();\n    for (int i = 0; i < files.length; i++) {\n      // make place on ram disk\n      OutputStream os = createFile(files[i]);\n      // read current file\n      InputStream is = dir.openFile(files[i]);\n      // and copy to ram disk\n      int len = (int) is.length();\n      byte[] buf = new byte[len];\n      is.readBytes(buf, 0, len);\n      os.writeBytes(buf, len);\n      // graceful cleanup\n      is.close();\n      os.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new <code>RAMDirectory</code> instance from a different\n   * <code>Directory</code> implementation.  This can be used to load\n   * a disk-based index into memory.\n   * <P>\n   * This should be used only with indices that can fit into memory.\n   *\n   * @param dir a <code>Directory</code> value\n   * @exception IOException if an error occurs\n   */\n  public RAMDirectory(Directory dir) throws IOException {\n    final String[] ar = dir.list();\n    for (int i = 0; i < ar.length; i++) {\n      // make place on ram disk\n      OutputStream os = createFile(ar[i]);\n      // read current file\n      InputStream is = dir.openFile(ar[i]);\n      // and copy to ram disk\n      int len = (int) is.length();\n      byte[] buf = new byte[len];\n      is.readBytes(buf, 0, len);\n      os.writeBytes(buf, len);\n      // graceful cleanup\n      is.close();\n      os.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41d1f005dec73d25cc13cc4521293ad84117d896","date":1082485675,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/RAMDirectory#RAMDirectory(Directory).mjava","pathOld":"src/java/org/apache/lucene/store/RAMDirectory#RAMDirectory(Directory).mjava","sourceNew":"  /**\n   * Creates a new <code>RAMDirectory</code> instance from a different\n   * <code>Directory</code> implementation.  This can be used to load\n   * a disk-based index into memory.\n   * <P>\n   * This should be used only with indices that can fit into memory.\n   *\n   * @param dir a <code>Directory</code> value\n   * @exception IOException if an error occurs\n   */\n  public RAMDirectory(Directory dir) throws IOException {\n    this(dir, false);\n  }\n\n","sourceOld":"  /**\n   * Creates a new <code>RAMDirectory</code> instance from a different\n   * <code>Directory</code> implementation.  This can be used to load\n   * a disk-based index into memory.\n   * <P>\n   * This should be used only with indices that can fit into memory.\n   *\n   * @param dir a <code>Directory</code> value\n   * @exception IOException if an error occurs\n   */\n  public RAMDirectory(Directory dir) throws IOException {\n    final String[] files = dir.list();\n    for (int i = 0; i < files.length; i++) {\n      // make place on ram disk\n      OutputStream os = createFile(files[i]);\n      // read current file\n      InputStream is = dir.openFile(files[i]);\n      // and copy to ram disk\n      int len = (int) is.length();\n      byte[] buf = new byte[len];\n      is.readBytes(buf, 0, len);\n      os.writeBytes(buf, len);\n      // graceful cleanup\n      is.close();\n      os.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d764936a003c9438037e1ed5cbf0428def07012","date":1167660386,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/RAMDirectory#RAMDirectory(Directory).mjava","pathOld":"src/java/org/apache/lucene/store/RAMDirectory#RAMDirectory(Directory).mjava","sourceNew":"  /**\n   * Creates a new <code>RAMDirectory</code> instance from a different\n   * <code>Directory</code> implementation.  This can be used to load\n   * a disk-based index into memory.\n   * <P>\n   * This should be used only with indices that can fit into memory.\n   * <P>\n   * Note that the resulting <code>RAMDirectory</code> instance is fully\n   * independent from the original <code>Directory</code> (it is a\n   * complete copy).  Any subsequent changes to the\n   * original <code>Directory</code> will not be visible in the\n   * <code>RAMDirectory</code> instance.\n   *\n   * @param dir a <code>Directory</code> value\n   * @exception IOException if an error occurs\n   */\n  public RAMDirectory(Directory dir) throws IOException {\n    this(dir, false);\n  }\n\n","sourceOld":"  /**\n   * Creates a new <code>RAMDirectory</code> instance from a different\n   * <code>Directory</code> implementation.  This can be used to load\n   * a disk-based index into memory.\n   * <P>\n   * This should be used only with indices that can fit into memory.\n   *\n   * @param dir a <code>Directory</code> value\n   * @exception IOException if an error occurs\n   */\n  public RAMDirectory(Directory dir) throws IOException {\n    this(dir, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/RAMDirectory#RAMDirectory(Directory).mjava","pathOld":"src/java/org/apache/lucene/store/RAMDirectory#RAMDirectory(Directory).mjava","sourceNew":"  /**\n   * Creates a new <code>RAMDirectory</code> instance from a different\n   * <code>Directory</code> implementation.  This can be used to load\n   * a disk-based index into memory.\n   * <P>\n   * This should be used only with indices that can fit into memory.\n   * <P>\n   * Note that the resulting <code>RAMDirectory</code> instance is fully\n   * independent from the original <code>Directory</code> (it is a\n   * complete copy).  Any subsequent changes to the\n   * original <code>Directory</code> will not be visible in the\n   * <code>RAMDirectory</code> instance.\n   *\n   * @param dir a <code>Directory</code> value\n   * @exception IOException if an error occurs\n   */\n  public RAMDirectory(Directory dir) throws IOException {\n    this(dir, false);\n  }\n\n","sourceOld":"  /**\n   * Creates a new <code>RAMDirectory</code> instance from a different\n   * <code>Directory</code> implementation.  This can be used to load\n   * a disk-based index into memory.\n   * <P>\n   * This should be used only with indices that can fit into memory.\n   * <P>\n   * Note that the resulting <code>RAMDirectory</code> instance is fully\n   * independent from the original <code>Directory</code> (it is a\n   * complete copy).  Any subsequent changes to the\n   * original <code>Directory</code> will not be visible in the\n   * <code>RAMDirectory</code> instance.\n   *\n   * @param dir a <code>Directory</code> value\n   * @exception IOException if an error occurs\n   */\n  public RAMDirectory(Directory dir) throws IOException {\n    this(dir, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d764936a003c9438037e1ed5cbf0428def07012":["41d1f005dec73d25cc13cc4521293ad84117d896"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b7c5338d3bda9e7626a720e14969952010c8dec":["e5105c66a1cba86af7edef15227de3687c5c4b6b"],"03ae70812bc33b0270c1366378b2c2da95fe86a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["4d764936a003c9438037e1ed5cbf0428def07012"],"41d1f005dec73d25cc13cc4521293ad84117d896":["4b7c5338d3bda9e7626a720e14969952010c8dec"],"e5105c66a1cba86af7edef15227de3687c5c4b6b":["03ae70812bc33b0270c1366378b2c2da95fe86a6"]},"commit2Childs":{"4d764936a003c9438037e1ed5cbf0428def07012":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["03ae70812bc33b0270c1366378b2c2da95fe86a6"],"4b7c5338d3bda9e7626a720e14969952010c8dec":["41d1f005dec73d25cc13cc4521293ad84117d896"],"03ae70812bc33b0270c1366378b2c2da95fe86a6":["e5105c66a1cba86af7edef15227de3687c5c4b6b"],"41d1f005dec73d25cc13cc4521293ad84117d896":["4d764936a003c9438037e1ed5cbf0428def07012"],"e5105c66a1cba86af7edef15227de3687c5c4b6b":["4b7c5338d3bda9e7626a720e14969952010c8dec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}