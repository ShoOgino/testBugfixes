{"path":"lucene/core/src/java/org/apache/lucene/util/Version#Version(int,int,int,int).mjava","commits":[{"id":"057a1793765d068ea9302f1a29e21734ee58d41e","date":1408130117,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/Version#Version(int,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private Version(int major, int minor, int bugfix, int prerelease) {\n    if (major > 5 || major < 4) {\n      throw new IllegalArgumentException(\"Lucene 5.x only supports 5.x and 4.x versions\");\n    }\n    if (minor > 255 | minor < 0) {\n      throw new IllegalArgumentException(\"Illegal minor version: \" + minor);\n    }\n    if (bugfix > 255 | bugfix < 0) {\n      throw new IllegalArgumentException(\"Illegal bugfix version: \" + bugfix);\n    }\n    if (prerelease > 2 | prerelease < 0) {\n      throw new IllegalArgumentException(\"Illegal prerelease version: \" + prerelease);\n    }\n    if (prerelease != 0 && (minor != 0 || bugfix != 0)) {\n      throw new IllegalArgumentException(\"Prerelease version only supported with major release\");\n    }\n\n    if (prerelease == 0) {\n      // final release should sort after alpha/beta\n      prerelease = 3;\n    }\n\n    encodedValue = major << 18 | minor << 10 | bugfix << 2 | prerelease;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e2420f5fc81a6b19783f84250b5a5a3f19eb46a","date":1410373276,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/Version#Version(int,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/Version#Version(int,int,int,int).mjava","sourceNew":"  private Version(int major, int minor, int bugfix, int prerelease) {\n    if (major > 5 || major < 4) {\n      throw new IllegalArgumentException(\"Lucene 5.x only supports 5.x and 4.x versions\");\n    }\n    if (minor > 255 | minor < 0) {\n      throw new IllegalArgumentException(\"Illegal minor version: \" + minor);\n    }\n    if (bugfix > 255 | bugfix < 0) {\n      throw new IllegalArgumentException(\"Illegal bugfix version: \" + bugfix);\n    }\n    if (prerelease > 2 | prerelease < 0) {\n      throw new IllegalArgumentException(\"Illegal prerelease version: \" + prerelease);\n    }\n    if (prerelease != 0 && (minor != 0 || bugfix != 0)) {\n      throw new IllegalArgumentException(\"Prerelease version only supported with major release\");\n    }\n\n    encodedValue = major << 18 | minor << 10 | bugfix << 2 | prerelease;\n  }\n\n","sourceOld":"  private Version(int major, int minor, int bugfix, int prerelease) {\n    if (major > 5 || major < 4) {\n      throw new IllegalArgumentException(\"Lucene 5.x only supports 5.x and 4.x versions\");\n    }\n    if (minor > 255 | minor < 0) {\n      throw new IllegalArgumentException(\"Illegal minor version: \" + minor);\n    }\n    if (bugfix > 255 | bugfix < 0) {\n      throw new IllegalArgumentException(\"Illegal bugfix version: \" + bugfix);\n    }\n    if (prerelease > 2 | prerelease < 0) {\n      throw new IllegalArgumentException(\"Illegal prerelease version: \" + prerelease);\n    }\n    if (prerelease != 0 && (minor != 0 || bugfix != 0)) {\n      throw new IllegalArgumentException(\"Prerelease version only supported with major release\");\n    }\n\n    if (prerelease == 0) {\n      // final release should sort after alpha/beta\n      prerelease = 3;\n    }\n\n    encodedValue = major << 18 | minor << 10 | bugfix << 2 | prerelease;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a0b6886e871521dbc3495e30ea752689de9023d","date":1410451802,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/Version#Version(int,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/Version#Version(int,int,int,int).mjava","sourceNew":"  private Version(int major, int minor, int bugfix, int prerelease) {\n    this.major = major;\n    this.minor = minor;\n    this.bugfix = bugfix;\n    this.prerelease = prerelease;\n    if (major > 5 || major < 4) {\n      throw new IllegalArgumentException(\"Lucene 5.x only supports 5.x and 4.x versions\");\n    }\n    if (minor > 255 | minor < 0) {\n      throw new IllegalArgumentException(\"Illegal minor version: \" + minor);\n    }\n    if (bugfix > 255 | bugfix < 0) {\n      throw new IllegalArgumentException(\"Illegal bugfix version: \" + bugfix);\n    }\n    if (prerelease > 2 | prerelease < 0) {\n      throw new IllegalArgumentException(\"Illegal prerelease version: \" + prerelease);\n    }\n    if (prerelease != 0 && (minor != 0 || bugfix != 0)) {\n      throw new IllegalArgumentException(\"Prerelease version only supported with major release\");\n    }\n\n    encodedValue = major << 18 | minor << 10 | bugfix << 2 | prerelease;\n  }\n\n","sourceOld":"  private Version(int major, int minor, int bugfix, int prerelease) {\n    if (major > 5 || major < 4) {\n      throw new IllegalArgumentException(\"Lucene 5.x only supports 5.x and 4.x versions\");\n    }\n    if (minor > 255 | minor < 0) {\n      throw new IllegalArgumentException(\"Illegal minor version: \" + minor);\n    }\n    if (bugfix > 255 | bugfix < 0) {\n      throw new IllegalArgumentException(\"Illegal bugfix version: \" + bugfix);\n    }\n    if (prerelease > 2 | prerelease < 0) {\n      throw new IllegalArgumentException(\"Illegal prerelease version: \" + prerelease);\n    }\n    if (prerelease != 0 && (minor != 0 || bugfix != 0)) {\n      throw new IllegalArgumentException(\"Prerelease version only supported with major release\");\n    }\n\n    encodedValue = major << 18 | minor << 10 | bugfix << 2 | prerelease;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50e9339a3f996d0d2d4c0d91f891bbb2fd84d1d1","date":1411047434,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/Version#Version(int,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/Version#Version(int,int,int,int).mjava","sourceNew":"  private Version(int major, int minor, int bugfix, int prerelease) {\n    this.major = major;\n    this.minor = minor;\n    this.bugfix = bugfix;\n    this.prerelease = prerelease;\n    if (major > 6 || major < 4) { // TODO fix this!!!\n      throw new IllegalArgumentException(\"Lucene 6.x only supports 6.x, 5.x, and 4.x versions\");\n    }\n    if (minor > 255 | minor < 0) {\n      throw new IllegalArgumentException(\"Illegal minor version: \" + minor);\n    }\n    if (bugfix > 255 | bugfix < 0) {\n      throw new IllegalArgumentException(\"Illegal bugfix version: \" + bugfix);\n    }\n    if (prerelease > 2 | prerelease < 0) {\n      throw new IllegalArgumentException(\"Illegal prerelease version: \" + prerelease);\n    }\n    if (prerelease != 0 && (minor != 0 || bugfix != 0)) {\n      throw new IllegalArgumentException(\"Prerelease version only supported with major release\");\n    }\n\n    encodedValue = major << 18 | minor << 10 | bugfix << 2 | prerelease;\n  }\n\n","sourceOld":"  private Version(int major, int minor, int bugfix, int prerelease) {\n    this.major = major;\n    this.minor = minor;\n    this.bugfix = bugfix;\n    this.prerelease = prerelease;\n    if (major > 5 || major < 4) {\n      throw new IllegalArgumentException(\"Lucene 5.x only supports 5.x and 4.x versions\");\n    }\n    if (minor > 255 | minor < 0) {\n      throw new IllegalArgumentException(\"Illegal minor version: \" + minor);\n    }\n    if (bugfix > 255 | bugfix < 0) {\n      throw new IllegalArgumentException(\"Illegal bugfix version: \" + bugfix);\n    }\n    if (prerelease > 2 | prerelease < 0) {\n      throw new IllegalArgumentException(\"Illegal prerelease version: \" + prerelease);\n    }\n    if (prerelease != 0 && (minor != 0 || bugfix != 0)) {\n      throw new IllegalArgumentException(\"Prerelease version only supported with major release\");\n    }\n\n    encodedValue = major << 18 | minor << 10 | bugfix << 2 | prerelease;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46ff533a28b45377dffc601931e60e19492e6384","date":1411292651,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/Version#Version(int,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/Version#Version(int,int,int,int).mjava","sourceNew":"  private Version(int major, int minor, int bugfix, int prerelease) {\n    this.major = major;\n    this.minor = minor;\n    this.bugfix = bugfix;\n    this.prerelease = prerelease;\n    // NOTE: do not enforce major version so we remain future proof, except to\n    // make sure it fits in the 8 bits we encode it into:\n    if (major > 255 || major < 0) {\n      throw new IllegalArgumentException(\"Illegal major version: \" + major);\n    }\n    if (minor > 255 || minor < 0) {\n      throw new IllegalArgumentException(\"Illegal minor version: \" + minor);\n    }\n    if (bugfix > 255 || bugfix < 0) {\n      throw new IllegalArgumentException(\"Illegal bugfix version: \" + bugfix);\n    }\n    if (prerelease > 2 || prerelease < 0) {\n      throw new IllegalArgumentException(\"Illegal prerelease version: \" + prerelease);\n    }\n    if (prerelease != 0 && (minor != 0 || bugfix != 0)) {\n      throw new IllegalArgumentException(\"Prerelease version only supported with major release (got prerelease: \" + prerelease + \", minor: \" + minor + \", bugfix: \" + bugfix + \")\");\n    }\n\n    encodedValue = major << 18 | minor << 10 | bugfix << 2 | prerelease;\n\n    assert encodedIsValid();\n  }\n\n","sourceOld":"  private Version(int major, int minor, int bugfix, int prerelease) {\n    this.major = major;\n    this.minor = minor;\n    this.bugfix = bugfix;\n    this.prerelease = prerelease;\n    if (major > 6 || major < 4) { // TODO fix this!!!\n      throw new IllegalArgumentException(\"Lucene 6.x only supports 6.x, 5.x, and 4.x versions\");\n    }\n    if (minor > 255 | minor < 0) {\n      throw new IllegalArgumentException(\"Illegal minor version: \" + minor);\n    }\n    if (bugfix > 255 | bugfix < 0) {\n      throw new IllegalArgumentException(\"Illegal bugfix version: \" + bugfix);\n    }\n    if (prerelease > 2 | prerelease < 0) {\n      throw new IllegalArgumentException(\"Illegal prerelease version: \" + prerelease);\n    }\n    if (prerelease != 0 && (minor != 0 || bugfix != 0)) {\n      throw new IllegalArgumentException(\"Prerelease version only supported with major release\");\n    }\n\n    encodedValue = major << 18 | minor << 10 | bugfix << 2 | prerelease;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5e2420f5fc81a6b19783f84250b5a5a3f19eb46a":["057a1793765d068ea9302f1a29e21734ee58d41e"],"5a0b6886e871521dbc3495e30ea752689de9023d":["5e2420f5fc81a6b19783f84250b5a5a3f19eb46a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"46ff533a28b45377dffc601931e60e19492e6384":["50e9339a3f996d0d2d4c0d91f891bbb2fd84d1d1"],"057a1793765d068ea9302f1a29e21734ee58d41e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["46ff533a28b45377dffc601931e60e19492e6384"],"50e9339a3f996d0d2d4c0d91f891bbb2fd84d1d1":["5a0b6886e871521dbc3495e30ea752689de9023d"]},"commit2Childs":{"5e2420f5fc81a6b19783f84250b5a5a3f19eb46a":["5a0b6886e871521dbc3495e30ea752689de9023d"],"5a0b6886e871521dbc3495e30ea752689de9023d":["50e9339a3f996d0d2d4c0d91f891bbb2fd84d1d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["057a1793765d068ea9302f1a29e21734ee58d41e"],"46ff533a28b45377dffc601931e60e19492e6384":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"057a1793765d068ea9302f1a29e21734ee58d41e":["5e2420f5fc81a6b19783f84250b5a5a3f19eb46a"],"50e9339a3f996d0d2d4c0d91f891bbb2fd84d1d1":["46ff533a28b45377dffc601931e60e19492e6384"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}