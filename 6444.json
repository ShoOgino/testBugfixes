{"path":"src/test/org/apache/lucene/search/TestCustomSearcherSort#checkHits(ScoreDoc[],String).mjava","commits":[{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestCustomSearcherSort#checkHits(ScoreDoc[],String).mjava","pathOld":"/dev/null","sourceNew":"\t/**\n\t * Check the hits for duplicates.\n\t * @param hits\n\t */\n    private void checkHits(ScoreDoc[] hits, String prefix) {\n        if(hits!=null) {\n            Map idMap = new TreeMap();\n            for(int docnum=0;docnum<hits.length;++docnum) {\n                Integer luceneId = null;\n\n                luceneId = new Integer(hits[docnum].doc);\n                if(idMap.containsKey(luceneId)) {\n                    StringBuffer message = new StringBuffer(prefix);\n                    message.append(\"Duplicate key for hit index = \");\n                    message.append(docnum);\n                    message.append(\", previous index = \");\n                    message.append(((Integer)idMap.get(luceneId)).toString());\n                    message.append(\", Lucene ID = \");\n                    message.append(luceneId);\n                    log(message.toString());\n                } else { \n                    idMap.put(luceneId, new Integer(docnum));\n                }\n            }\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c","date":1254521470,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestCustomSearcherSort#checkHits(ScoreDoc[],String).mjava","pathOld":"src/test/org/apache/lucene/search/TestCustomSearcherSort#checkHits(ScoreDoc[],String).mjava","sourceNew":"\t/**\n\t * Check the hits for duplicates.\n\t * @param hits\n\t */\n    private void checkHits(ScoreDoc[] hits, String prefix) {\n        if(hits!=null) {\n            Map idMap = new TreeMap();\n            for(int docnum=0;docnum<hits.length;++docnum) {\n                Integer luceneId = null;\n\n                luceneId = new Integer(hits[docnum].doc);\n                if(idMap.containsKey(luceneId)) {\n                    StringBuilder message = new StringBuilder(prefix);\n                    message.append(\"Duplicate key for hit index = \");\n                    message.append(docnum);\n                    message.append(\", previous index = \");\n                    message.append(((Integer)idMap.get(luceneId)).toString());\n                    message.append(\", Lucene ID = \");\n                    message.append(luceneId);\n                    log(message.toString());\n                } else { \n                    idMap.put(luceneId, new Integer(docnum));\n                }\n            }\n        }\n    }\n\n","sourceOld":"\t/**\n\t * Check the hits for duplicates.\n\t * @param hits\n\t */\n    private void checkHits(ScoreDoc[] hits, String prefix) {\n        if(hits!=null) {\n            Map idMap = new TreeMap();\n            for(int docnum=0;docnum<hits.length;++docnum) {\n                Integer luceneId = null;\n\n                luceneId = new Integer(hits[docnum].doc);\n                if(idMap.containsKey(luceneId)) {\n                    StringBuffer message = new StringBuffer(prefix);\n                    message.append(\"Duplicate key for hit index = \");\n                    message.append(docnum);\n                    message.append(\", previous index = \");\n                    message.append(((Integer)idMap.get(luceneId)).toString());\n                    message.append(\", Lucene ID = \");\n                    message.append(luceneId);\n                    log(message.toString());\n                } else { \n                    idMap.put(luceneId, new Integer(docnum));\n                }\n            }\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bcde5e3f23911110baa101ed062b544162825b5","date":1254521804,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestCustomSearcherSort#checkHits(ScoreDoc[],String).mjava","pathOld":"src/test/org/apache/lucene/search/TestCustomSearcherSort#checkHits(ScoreDoc[],String).mjava","sourceNew":"\t/**\n\t * Check the hits for duplicates.\n\t * @param hits\n\t */\n    private void checkHits(ScoreDoc[] hits, String prefix) {\n        if(hits!=null) {\n            Map idMap = new TreeMap();\n            for(int docnum=0;docnum<hits.length;++docnum) {\n                Integer luceneId = null;\n\n                luceneId = Integer.valueOf(hits[docnum].doc);\n                if(idMap.containsKey(luceneId)) {\n                    StringBuilder message = new StringBuilder(prefix);\n                    message.append(\"Duplicate key for hit index = \");\n                    message.append(docnum);\n                    message.append(\", previous index = \");\n                    message.append(((Integer)idMap.get(luceneId)).toString());\n                    message.append(\", Lucene ID = \");\n                    message.append(luceneId);\n                    log(message.toString());\n                } else { \n                    idMap.put(luceneId, Integer.valueOf(docnum));\n                }\n            }\n        }\n    }\n\n","sourceOld":"\t/**\n\t * Check the hits for duplicates.\n\t * @param hits\n\t */\n    private void checkHits(ScoreDoc[] hits, String prefix) {\n        if(hits!=null) {\n            Map idMap = new TreeMap();\n            for(int docnum=0;docnum<hits.length;++docnum) {\n                Integer luceneId = null;\n\n                luceneId = new Integer(hits[docnum].doc);\n                if(idMap.containsKey(luceneId)) {\n                    StringBuilder message = new StringBuilder(prefix);\n                    message.append(\"Duplicate key for hit index = \");\n                    message.append(docnum);\n                    message.append(\", previous index = \");\n                    message.append(((Integer)idMap.get(luceneId)).toString());\n                    message.append(\", Lucene ID = \");\n                    message.append(luceneId);\n                    log(message.toString());\n                } else { \n                    idMap.put(luceneId, new Integer(docnum));\n                }\n            }\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestCustomSearcherSort#checkHits(ScoreDoc[],String).mjava","pathOld":"src/test/org/apache/lucene/search/TestCustomSearcherSort#checkHits(ScoreDoc[],String).mjava","sourceNew":"  /**\n   * Check the hits for duplicates.\n   * @param hits\n   */\n    private void checkHits(ScoreDoc[] hits, String prefix) {\n        if(hits!=null) {\n            Map idMap = new TreeMap();\n            for(int docnum=0;docnum<hits.length;++docnum) {\n                Integer luceneId = null;\n\n                luceneId = Integer.valueOf(hits[docnum].doc);\n                if(idMap.containsKey(luceneId)) {\n                    StringBuilder message = new StringBuilder(prefix);\n                    message.append(\"Duplicate key for hit index = \");\n                    message.append(docnum);\n                    message.append(\", previous index = \");\n                    message.append(((Integer)idMap.get(luceneId)).toString());\n                    message.append(\", Lucene ID = \");\n                    message.append(luceneId);\n                    log(message.toString());\n                } else { \n                    idMap.put(luceneId, Integer.valueOf(docnum));\n                }\n            }\n        }\n    }\n\n","sourceOld":"\t/**\n\t * Check the hits for duplicates.\n\t * @param hits\n\t */\n    private void checkHits(ScoreDoc[] hits, String prefix) {\n        if(hits!=null) {\n            Map idMap = new TreeMap();\n            for(int docnum=0;docnum<hits.length;++docnum) {\n                Integer luceneId = null;\n\n                luceneId = Integer.valueOf(hits[docnum].doc);\n                if(idMap.containsKey(luceneId)) {\n                    StringBuilder message = new StringBuilder(prefix);\n                    message.append(\"Duplicate key for hit index = \");\n                    message.append(docnum);\n                    message.append(\", previous index = \");\n                    message.append(((Integer)idMap.get(luceneId)).toString());\n                    message.append(\", Lucene ID = \");\n                    message.append(luceneId);\n                    log(message.toString());\n                } else { \n                    idMap.put(luceneId, Integer.valueOf(docnum));\n                }\n            }\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestCustomSearcherSort#checkHits(ScoreDoc[],String).mjava","pathOld":"src/test/org/apache/lucene/search/TestCustomSearcherSort#checkHits(ScoreDoc[],String).mjava","sourceNew":"  /**\n   * Check the hits for duplicates.\n   * @param hits\n   */\n    private void checkHits(ScoreDoc[] hits, String prefix) {\n        if(hits!=null) {\n            Map<Integer,Integer> idMap = new TreeMap<Integer,Integer>();\n            for(int docnum=0;docnum<hits.length;++docnum) {\n                Integer luceneId = null;\n\n                luceneId = Integer.valueOf(hits[docnum].doc);\n                if(idMap.containsKey(luceneId)) {\n                    StringBuilder message = new StringBuilder(prefix);\n                    message.append(\"Duplicate key for hit index = \");\n                    message.append(docnum);\n                    message.append(\", previous index = \");\n                    message.append((idMap.get(luceneId)).toString());\n                    message.append(\", Lucene ID = \");\n                    message.append(luceneId);\n                    log(message.toString());\n                } else { \n                    idMap.put(luceneId, Integer.valueOf(docnum));\n                }\n            }\n        }\n    }\n\n","sourceOld":"  /**\n   * Check the hits for duplicates.\n   * @param hits\n   */\n    private void checkHits(ScoreDoc[] hits, String prefix) {\n        if(hits!=null) {\n            Map idMap = new TreeMap();\n            for(int docnum=0;docnum<hits.length;++docnum) {\n                Integer luceneId = null;\n\n                luceneId = Integer.valueOf(hits[docnum].doc);\n                if(idMap.containsKey(luceneId)) {\n                    StringBuilder message = new StringBuilder(prefix);\n                    message.append(\"Duplicate key for hit index = \");\n                    message.append(docnum);\n                    message.append(\", previous index = \");\n                    message.append(((Integer)idMap.get(luceneId)).toString());\n                    message.append(\", Lucene ID = \");\n                    message.append(luceneId);\n                    log(message.toString());\n                } else { \n                    idMap.put(luceneId, Integer.valueOf(docnum));\n                }\n            }\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#checkHits(ScoreDoc[],String).mjava","pathOld":"src/test/org/apache/lucene/search/TestCustomSearcherSort#checkHits(ScoreDoc[],String).mjava","sourceNew":"  /**\n   * Check the hits for duplicates.\n   * @param hits\n   */\n    private void checkHits(ScoreDoc[] hits, String prefix) {\n        if(hits!=null) {\n            Map<Integer,Integer> idMap = new TreeMap<Integer,Integer>();\n            for(int docnum=0;docnum<hits.length;++docnum) {\n                Integer luceneId = null;\n\n                luceneId = Integer.valueOf(hits[docnum].doc);\n                if(idMap.containsKey(luceneId)) {\n                    StringBuilder message = new StringBuilder(prefix);\n                    message.append(\"Duplicate key for hit index = \");\n                    message.append(docnum);\n                    message.append(\", previous index = \");\n                    message.append((idMap.get(luceneId)).toString());\n                    message.append(\", Lucene ID = \");\n                    message.append(luceneId);\n                    log(message.toString());\n                } else { \n                    idMap.put(luceneId, Integer.valueOf(docnum));\n                }\n            }\n        }\n    }\n\n","sourceOld":"  /**\n   * Check the hits for duplicates.\n   * @param hits\n   */\n    private void checkHits(ScoreDoc[] hits, String prefix) {\n        if(hits!=null) {\n            Map<Integer,Integer> idMap = new TreeMap<Integer,Integer>();\n            for(int docnum=0;docnum<hits.length;++docnum) {\n                Integer luceneId = null;\n\n                luceneId = Integer.valueOf(hits[docnum].doc);\n                if(idMap.containsKey(luceneId)) {\n                    StringBuilder message = new StringBuilder(prefix);\n                    message.append(\"Duplicate key for hit index = \");\n                    message.append(docnum);\n                    message.append(\", previous index = \");\n                    message.append((idMap.get(luceneId)).toString());\n                    message.append(\", Lucene ID = \");\n                    message.append(luceneId);\n                    log(message.toString());\n                } else { \n                    idMap.put(luceneId, Integer.valueOf(docnum));\n                }\n            }\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["6bcde5e3f23911110baa101ed062b544162825b5"],"6bcde5e3f23911110baa101ed062b544162825b5":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af07783dbc171e26a694c4f7d735e30c2769faa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"]},"commit2Childs":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"6bcde5e3f23911110baa101ed062b544162825b5":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["6bcde5e3f23911110baa101ed062b544162825b5"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}