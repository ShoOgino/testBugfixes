{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49NormsConsumer#addNormsField(FieldInfo,Iterable[Number]).mjava","commits":[{"id":"22a2e66dfda83847e80095b8693c660742ab3e9c","date":1408628796,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49NormsConsumer#addNormsField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49NormsConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addNormsField(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeVInt(field.number);\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    // TODO: more efficient?\n    NormMap uniqueValues = new NormMap();\n    \n    long count = 0;\n    for (Number nv : values) {\n      if (nv == null) {\n        throw new IllegalStateException(\"illegal norms data for field \" + field.name + \", got null for value: \" + count);\n      }\n      final long v = nv.longValue();\n      \n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n      \n      if (uniqueValues != null) {\n        if (uniqueValues.add(v)) {\n          if (uniqueValues.size > 256) {\n            uniqueValues = null;\n          }\n        }\n      }\n      ++count;\n    }\n    \n    if (count != maxDoc) {\n      throw new IllegalStateException(\"illegal norms data for field \" + field.name + \", expected \" + maxDoc + \" values, got \" + count);\n    }\n    \n    if (uniqueValues != null && uniqueValues.size == 1) {\n      // 0 bpv\n      meta.writeByte(CONST_COMPRESSED);\n      meta.writeLong(minValue);\n    } else if (uniqueValues != null) {\n      // small number of unique values: this is the typical case:\n      // we only use bpv=1,2,4,8     \n      PackedInts.Format format = PackedInts.Format.PACKED_SINGLE_BLOCK;\n      int bitsPerValue = PackedInts.bitsRequired(uniqueValues.size-1);\n      if (bitsPerValue == 3) {\n        bitsPerValue = 4;\n      } else if (bitsPerValue > 4) {\n        bitsPerValue = 8;\n      }\n      \n      if (bitsPerValue == 8 && minValue >= Byte.MIN_VALUE && maxValue <= Byte.MAX_VALUE) {\n        meta.writeByte(UNCOMPRESSED); // uncompressed byte[]\n        meta.writeLong(data.getFilePointer());\n        for (Number nv : values) {\n          data.writeByte(nv == null ? 0 : (byte) nv.longValue());\n        }\n      } else {\n        meta.writeByte(TABLE_COMPRESSED); // table-compressed\n        meta.writeLong(data.getFilePointer());\n        data.writeVInt(PackedInts.VERSION_CURRENT);\n        \n        long[] decode = uniqueValues.getDecodeTable();\n        // upgrade to power of two sized array\n        int size = 1 << bitsPerValue;\n        data.writeVInt(size);\n        for (int i = 0; i < decode.length; i++) {\n          data.writeLong(decode[i]);\n        }\n        for (int i = decode.length; i < size; i++) {\n          data.writeLong(0);\n        }\n\n        data.writeVInt(format.getId());\n        data.writeVInt(bitsPerValue);\n\n        final PackedInts.Writer writer = PackedInts.getWriterNoHeader(data, format, maxDoc, bitsPerValue, PackedInts.DEFAULT_BUFFER_SIZE);\n        for(Number nv : values) {\n          writer.add(uniqueValues.getOrd(nv.longValue()));\n        }\n        writer.finish();\n      }\n    } else {\n      meta.writeByte(DELTA_COMPRESSED); // delta-compressed\n      meta.writeLong(data.getFilePointer());\n      data.writeVInt(PackedInts.VERSION_CURRENT);\n      data.writeVInt(BLOCK_SIZE);\n\n      final BlockPackedWriter writer = new BlockPackedWriter(data, BLOCK_SIZE);\n      for (Number nv : values) {\n        writer.add(nv.longValue());\n      }\n      writer.finish();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeVInt(field.number);\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    // TODO: more efficient?\n    NormMap uniqueValues = new NormMap();\n    \n    long count = 0;\n    for (Number nv : values) {\n      if (nv == null) {\n        throw new IllegalStateException(\"illegal norms data for field \" + field.name + \", got null for value: \" + count);\n      }\n      final long v = nv.longValue();\n      \n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n      \n      if (uniqueValues != null) {\n        if (uniqueValues.add(v)) {\n          if (uniqueValues.size > 256) {\n            uniqueValues = null;\n          }\n        }\n      }\n      ++count;\n    }\n    \n    if (count != maxDoc) {\n      throw new IllegalStateException(\"illegal norms data for field \" + field.name + \", expected \" + maxDoc + \" values, got \" + count);\n    }\n    \n    if (uniqueValues != null && uniqueValues.size == 1) {\n      // 0 bpv\n      meta.writeByte(CONST_COMPRESSED);\n      meta.writeLong(minValue);\n    } else if (uniqueValues != null) {\n      // small number of unique values: this is the typical case:\n      // we only use bpv=1,2,4,8     \n      PackedInts.Format format = PackedInts.Format.PACKED_SINGLE_BLOCK;\n      int bitsPerValue = PackedInts.bitsRequired(uniqueValues.size-1);\n      if (bitsPerValue == 3) {\n        bitsPerValue = 4;\n      } else if (bitsPerValue > 4) {\n        bitsPerValue = 8;\n      }\n      \n      if (bitsPerValue == 8 && minValue >= Byte.MIN_VALUE && maxValue <= Byte.MAX_VALUE) {\n        meta.writeByte(UNCOMPRESSED); // uncompressed byte[]\n        meta.writeLong(data.getFilePointer());\n        for (Number nv : values) {\n          data.writeByte(nv == null ? 0 : (byte) nv.longValue());\n        }\n      } else {\n        meta.writeByte(TABLE_COMPRESSED); // table-compressed\n        meta.writeLong(data.getFilePointer());\n        data.writeVInt(PackedInts.VERSION_CURRENT);\n        \n        long[] decode = uniqueValues.getDecodeTable();\n        // upgrade to power of two sized array\n        int size = 1 << bitsPerValue;\n        data.writeVInt(size);\n        for (int i = 0; i < decode.length; i++) {\n          data.writeLong(decode[i]);\n        }\n        for (int i = decode.length; i < size; i++) {\n          data.writeLong(0);\n        }\n\n        data.writeVInt(format.getId());\n        data.writeVInt(bitsPerValue);\n\n        final PackedInts.Writer writer = PackedInts.getWriterNoHeader(data, format, maxDoc, bitsPerValue, PackedInts.DEFAULT_BUFFER_SIZE);\n        for(Number nv : values) {\n          writer.add(uniqueValues.getOrd(nv.longValue()));\n        }\n        writer.finish();\n      }\n    } else {\n      meta.writeByte(DELTA_COMPRESSED); // delta-compressed\n      meta.writeLong(data.getFilePointer());\n      data.writeVInt(PackedInts.VERSION_CURRENT);\n      data.writeVInt(BLOCK_SIZE);\n\n      final BlockPackedWriter writer = new BlockPackedWriter(data, BLOCK_SIZE);\n      for (Number nv : values) {\n        writer.add(nv.longValue());\n      }\n      writer.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc8f80fee115148a0e4a0574560be06b494de821","date":1412069872,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene49/Lucene49NormsConsumer#addNormsField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49NormsConsumer#addNormsField(FieldInfo,Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addNormsField(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeVInt(field.number);\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    // TODO: more efficient?\n    NormMap uniqueValues = new NormMap();\n    \n    long count = 0;\n    for (Number nv : values) {\n      if (nv == null) {\n        throw new IllegalStateException(\"illegal norms data for field \" + field.name + \", got null for value: \" + count);\n      }\n      final long v = nv.longValue();\n      \n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n      \n      if (uniqueValues != null) {\n        if (uniqueValues.add(v)) {\n          if (uniqueValues.size > 256) {\n            uniqueValues = null;\n          }\n        }\n      }\n      ++count;\n    }\n    \n    if (count != maxDoc) {\n      throw new IllegalStateException(\"illegal norms data for field \" + field.name + \", expected \" + maxDoc + \" values, got \" + count);\n    }\n    \n    if (uniqueValues != null && uniqueValues.size == 1) {\n      // 0 bpv\n      meta.writeByte(CONST_COMPRESSED);\n      meta.writeLong(minValue);\n    } else if (uniqueValues != null) {\n      // small number of unique values: this is the typical case:\n      // we only use bpv=1,2,4,8     \n      PackedInts.Format format = PackedInts.Format.PACKED_SINGLE_BLOCK;\n      int bitsPerValue = PackedInts.bitsRequired(uniqueValues.size-1);\n      if (bitsPerValue == 3) {\n        bitsPerValue = 4;\n      } else if (bitsPerValue > 4) {\n        bitsPerValue = 8;\n      }\n      \n      if (bitsPerValue == 8 && minValue >= Byte.MIN_VALUE && maxValue <= Byte.MAX_VALUE) {\n        meta.writeByte(UNCOMPRESSED); // uncompressed byte[]\n        meta.writeLong(data.getFilePointer());\n        for (Number nv : values) {\n          data.writeByte(nv == null ? 0 : (byte) nv.longValue());\n        }\n      } else {\n        meta.writeByte(TABLE_COMPRESSED); // table-compressed\n        meta.writeLong(data.getFilePointer());\n        data.writeVInt(PackedInts.VERSION_CURRENT);\n        \n        long[] decode = uniqueValues.getDecodeTable();\n        // upgrade to power of two sized array\n        int size = 1 << bitsPerValue;\n        data.writeVInt(size);\n        for (int i = 0; i < decode.length; i++) {\n          data.writeLong(decode[i]);\n        }\n        for (int i = decode.length; i < size; i++) {\n          data.writeLong(0);\n        }\n\n        data.writeVInt(format.getId());\n        data.writeVInt(bitsPerValue);\n\n        final PackedInts.Writer writer = PackedInts.getWriterNoHeader(data, format, maxDoc, bitsPerValue, PackedInts.DEFAULT_BUFFER_SIZE);\n        for(Number nv : values) {\n          writer.add(uniqueValues.getOrd(nv.longValue()));\n        }\n        writer.finish();\n      }\n    } else {\n      meta.writeByte(DELTA_COMPRESSED); // delta-compressed\n      meta.writeLong(data.getFilePointer());\n      data.writeVInt(PackedInts.VERSION_CURRENT);\n      data.writeVInt(BLOCK_SIZE);\n\n      final BlockPackedWriter writer = new BlockPackedWriter(data, BLOCK_SIZE);\n      for (Number nv : values) {\n        writer.add(nv.longValue());\n      }\n      writer.finish();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addNormsField(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeVInt(field.number);\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    // TODO: more efficient?\n    NormMap uniqueValues = new NormMap();\n    \n    long count = 0;\n    for (Number nv : values) {\n      if (nv == null) {\n        throw new IllegalStateException(\"illegal norms data for field \" + field.name + \", got null for value: \" + count);\n      }\n      final long v = nv.longValue();\n      \n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n      \n      if (uniqueValues != null) {\n        if (uniqueValues.add(v)) {\n          if (uniqueValues.size > 256) {\n            uniqueValues = null;\n          }\n        }\n      }\n      ++count;\n    }\n    \n    if (count != maxDoc) {\n      throw new IllegalStateException(\"illegal norms data for field \" + field.name + \", expected \" + maxDoc + \" values, got \" + count);\n    }\n    \n    if (uniqueValues != null && uniqueValues.size == 1) {\n      // 0 bpv\n      meta.writeByte(CONST_COMPRESSED);\n      meta.writeLong(minValue);\n    } else if (uniqueValues != null) {\n      // small number of unique values: this is the typical case:\n      // we only use bpv=1,2,4,8     \n      PackedInts.Format format = PackedInts.Format.PACKED_SINGLE_BLOCK;\n      int bitsPerValue = PackedInts.bitsRequired(uniqueValues.size-1);\n      if (bitsPerValue == 3) {\n        bitsPerValue = 4;\n      } else if (bitsPerValue > 4) {\n        bitsPerValue = 8;\n      }\n      \n      if (bitsPerValue == 8 && minValue >= Byte.MIN_VALUE && maxValue <= Byte.MAX_VALUE) {\n        meta.writeByte(UNCOMPRESSED); // uncompressed byte[]\n        meta.writeLong(data.getFilePointer());\n        for (Number nv : values) {\n          data.writeByte(nv == null ? 0 : (byte) nv.longValue());\n        }\n      } else {\n        meta.writeByte(TABLE_COMPRESSED); // table-compressed\n        meta.writeLong(data.getFilePointer());\n        data.writeVInt(PackedInts.VERSION_CURRENT);\n        \n        long[] decode = uniqueValues.getDecodeTable();\n        // upgrade to power of two sized array\n        int size = 1 << bitsPerValue;\n        data.writeVInt(size);\n        for (int i = 0; i < decode.length; i++) {\n          data.writeLong(decode[i]);\n        }\n        for (int i = decode.length; i < size; i++) {\n          data.writeLong(0);\n        }\n\n        data.writeVInt(format.getId());\n        data.writeVInt(bitsPerValue);\n\n        final PackedInts.Writer writer = PackedInts.getWriterNoHeader(data, format, maxDoc, bitsPerValue, PackedInts.DEFAULT_BUFFER_SIZE);\n        for(Number nv : values) {\n          writer.add(uniqueValues.getOrd(nv.longValue()));\n        }\n        writer.finish();\n      }\n    } else {\n      meta.writeByte(DELTA_COMPRESSED); // delta-compressed\n      meta.writeLong(data.getFilePointer());\n      data.writeVInt(PackedInts.VERSION_CURRENT);\n      data.writeVInt(BLOCK_SIZE);\n\n      final BlockPackedWriter writer = new BlockPackedWriter(data, BLOCK_SIZE);\n      for (Number nv : values) {\n        writer.add(nv.longValue());\n      }\n      writer.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene49/Lucene49NormsConsumer#addNormsField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene49/Lucene49NormsConsumer#addNormsField(FieldInfo,Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addNormsField(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeVInt(field.number);\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    // TODO: more efficient?\n    NormMap uniqueValues = new NormMap();\n    \n    long count = 0;\n    for (Number nv : values) {\n      if (nv == null) {\n        throw new IllegalStateException(\"illegal norms data for field \" + field.name + \", got null for value: \" + count);\n      }\n      final long v = nv.longValue();\n      \n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n      \n      if (uniqueValues != null) {\n        if (uniqueValues.add(v)) {\n          if (uniqueValues.size > 256) {\n            uniqueValues = null;\n          }\n        }\n      }\n      ++count;\n    }\n    \n    if (count != maxDoc) {\n      throw new IllegalStateException(\"illegal norms data for field \" + field.name + \", expected \" + maxDoc + \" values, got \" + count);\n    }\n    \n    if (uniqueValues != null && uniqueValues.size == 1) {\n      // 0 bpv\n      meta.writeByte(CONST_COMPRESSED);\n      meta.writeLong(minValue);\n    } else if (uniqueValues != null) {\n      // small number of unique values: this is the typical case:\n      // we only use bpv=1,2,4,8     \n      PackedInts.Format format = PackedInts.Format.PACKED_SINGLE_BLOCK;\n      int bitsPerValue = PackedInts.bitsRequired(uniqueValues.size-1);\n      if (bitsPerValue == 3) {\n        bitsPerValue = 4;\n      } else if (bitsPerValue > 4) {\n        bitsPerValue = 8;\n      }\n      \n      if (bitsPerValue == 8 && minValue >= Byte.MIN_VALUE && maxValue <= Byte.MAX_VALUE) {\n        meta.writeByte(UNCOMPRESSED); // uncompressed byte[]\n        meta.writeLong(data.getFilePointer());\n        for (Number nv : values) {\n          data.writeByte(nv == null ? 0 : (byte) nv.longValue());\n        }\n      } else {\n        meta.writeByte(TABLE_COMPRESSED); // table-compressed\n        meta.writeLong(data.getFilePointer());\n        data.writeVInt(PackedInts.VERSION_CURRENT);\n        \n        long[] decode = uniqueValues.getDecodeTable();\n        // upgrade to power of two sized array\n        int size = 1 << bitsPerValue;\n        data.writeVInt(size);\n        for (int i = 0; i < decode.length; i++) {\n          data.writeLong(decode[i]);\n        }\n        for (int i = decode.length; i < size; i++) {\n          data.writeLong(0);\n        }\n\n        data.writeVInt(format.getId());\n        data.writeVInt(bitsPerValue);\n\n        final PackedInts.Writer writer = PackedInts.getWriterNoHeader(data, format, maxDoc, bitsPerValue, PackedInts.DEFAULT_BUFFER_SIZE);\n        for(Number nv : values) {\n          writer.add(uniqueValues.getOrd(nv.longValue()));\n        }\n        writer.finish();\n      }\n    } else {\n      meta.writeByte(DELTA_COMPRESSED); // delta-compressed\n      meta.writeLong(data.getFilePointer());\n      data.writeVInt(PackedInts.VERSION_CURRENT);\n      data.writeVInt(BLOCK_SIZE);\n\n      final BlockPackedWriter writer = new BlockPackedWriter(data, BLOCK_SIZE);\n      for (Number nv : values) {\n        writer.add(nv.longValue());\n      }\n      writer.finish();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addNormsField(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeVInt(field.number);\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    // TODO: more efficient?\n    NormMap uniqueValues = new NormMap();\n    \n    long count = 0;\n    for (Number nv : values) {\n      if (nv == null) {\n        throw new IllegalStateException(\"illegal norms data for field \" + field.name + \", got null for value: \" + count);\n      }\n      final long v = nv.longValue();\n      \n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n      \n      if (uniqueValues != null) {\n        if (uniqueValues.add(v)) {\n          if (uniqueValues.size > 256) {\n            uniqueValues = null;\n          }\n        }\n      }\n      ++count;\n    }\n    \n    if (count != maxDoc) {\n      throw new IllegalStateException(\"illegal norms data for field \" + field.name + \", expected \" + maxDoc + \" values, got \" + count);\n    }\n    \n    if (uniqueValues != null && uniqueValues.size == 1) {\n      // 0 bpv\n      meta.writeByte(CONST_COMPRESSED);\n      meta.writeLong(minValue);\n    } else if (uniqueValues != null) {\n      // small number of unique values: this is the typical case:\n      // we only use bpv=1,2,4,8     \n      PackedInts.Format format = PackedInts.Format.PACKED_SINGLE_BLOCK;\n      int bitsPerValue = PackedInts.bitsRequired(uniqueValues.size-1);\n      if (bitsPerValue == 3) {\n        bitsPerValue = 4;\n      } else if (bitsPerValue > 4) {\n        bitsPerValue = 8;\n      }\n      \n      if (bitsPerValue == 8 && minValue >= Byte.MIN_VALUE && maxValue <= Byte.MAX_VALUE) {\n        meta.writeByte(UNCOMPRESSED); // uncompressed byte[]\n        meta.writeLong(data.getFilePointer());\n        for (Number nv : values) {\n          data.writeByte(nv == null ? 0 : (byte) nv.longValue());\n        }\n      } else {\n        meta.writeByte(TABLE_COMPRESSED); // table-compressed\n        meta.writeLong(data.getFilePointer());\n        data.writeVInt(PackedInts.VERSION_CURRENT);\n        \n        long[] decode = uniqueValues.getDecodeTable();\n        // upgrade to power of two sized array\n        int size = 1 << bitsPerValue;\n        data.writeVInt(size);\n        for (int i = 0; i < decode.length; i++) {\n          data.writeLong(decode[i]);\n        }\n        for (int i = decode.length; i < size; i++) {\n          data.writeLong(0);\n        }\n\n        data.writeVInt(format.getId());\n        data.writeVInt(bitsPerValue);\n\n        final PackedInts.Writer writer = PackedInts.getWriterNoHeader(data, format, maxDoc, bitsPerValue, PackedInts.DEFAULT_BUFFER_SIZE);\n        for(Number nv : values) {\n          writer.add(uniqueValues.getOrd(nv.longValue()));\n        }\n        writer.finish();\n      }\n    } else {\n      meta.writeByte(DELTA_COMPRESSED); // delta-compressed\n      meta.writeLong(data.getFilePointer());\n      data.writeVInt(PackedInts.VERSION_CURRENT);\n      data.writeVInt(BLOCK_SIZE);\n\n      final BlockPackedWriter writer = new BlockPackedWriter(data, BLOCK_SIZE);\n      for (Number nv : values) {\n        writer.add(nv.longValue());\n      }\n      writer.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bc8f80fee115148a0e4a0574560be06b494de821":["22a2e66dfda83847e80095b8693c660742ab3e9c"],"9bb9a29a5e71a90295f175df8919802993142c9a":["22a2e66dfda83847e80095b8693c660742ab3e9c","bc8f80fee115148a0e4a0574560be06b494de821"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"22a2e66dfda83847e80095b8693c660742ab3e9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9bb9a29a5e71a90295f175df8919802993142c9a"]},"commit2Childs":{"bc8f80fee115148a0e4a0574560be06b494de821":["9bb9a29a5e71a90295f175df8919802993142c9a"],"9bb9a29a5e71a90295f175df8919802993142c9a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["22a2e66dfda83847e80095b8693c660742ab3e9c"],"22a2e66dfda83847e80095b8693c660742ab3e9c":["bc8f80fee115148a0e4a0574560be06b494de821","9bb9a29a5e71a90295f175df8919802993142c9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}