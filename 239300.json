{"path":"modules/queries/src/java/org/apache/lucene/queries/ChainedFilter#getDocIdSet(AtomicReaderContext,int,int[]).mjava","commits":[{"id":"1f9f2355d68aab1348539f7a1603279405e566a4","date":1313634992,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/ChainedFilter#getDocIdSet(AtomicReaderContext,int,int[]).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/ChainedFilter#getDocIdSet(AtomicReaderContext,int,int[]).mjava","sourceNew":"  /**\n   * Delegates to each filter in the chain.\n   *\n   * @param context AtomicReaderContext\n   * @param logic Logical operation\n   * @return DocIdSet\n   */\n  private DocIdSet getDocIdSet(AtomicReaderContext context, int logic, int[] index)\n      throws IOException {\n    OpenBitSetDISI result = initialResult(context, logic, index);\n    for (; index[0] < chain.length; index[0]++) {\n      doChain(result, logic, chain[index[0]].getDocIdSet(context));\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Delegates to each filter in the chain.\n   *\n   * @param context AtomicReaderContext\n   * @param logic Logical operation\n   * @return DocIdSet\n   */\n  private DocIdSet getDocIdSet(AtomicReaderContext context, int logic, int[] index)\n      throws IOException {\n    OpenBitSetDISI result = initialResult(context, logic, index);\n    for (; index[0] < chain.length; index[0]++) {\n      doChain(result, logic, chain[index[0]].getDocIdSet(context));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/ChainedFilter#getDocIdSet(AtomicReaderContext,int,int[]).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/ChainedFilter#getDocIdSet(AtomicReaderContext,int,int[]).mjava","sourceNew":"  /**\n   * Delegates to each filter in the chain.\n   *\n   * @param context AtomicReaderContext\n   * @param logic Logical operation\n   * @return DocIdSet\n   */\n  private DocIdSet getDocIdSet(AtomicReaderContext context, int logic, int[] index)\n      throws IOException {\n    OpenBitSetDISI result = initialResult(context, logic, index);\n    for (; index[0] < chain.length; index[0]++) {\n      // we dont pass acceptDocs, we will filter at the end using an additional filter\n      doChain(result, logic, chain[index[0]].getDocIdSet(context, null));\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Delegates to each filter in the chain.\n   *\n   * @param context AtomicReaderContext\n   * @param logic Logical operation\n   * @return DocIdSet\n   */\n  private DocIdSet getDocIdSet(AtomicReaderContext context, int logic, int[] index)\n      throws IOException {\n    OpenBitSetDISI result = initialResult(context, logic, index);\n    for (; index[0] < chain.length; index[0]++) {\n      doChain(result, logic, chain[index[0]].getDocIdSet(context));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/ChainedFilter#getDocIdSet(AtomicReaderContext,int,int[]).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/ChainedFilter#getDocIdSet(AtomicReaderContext,int,int[]).mjava","sourceNew":"  /**\n   * Delegates to each filter in the chain.\n   *\n   * @param context AtomicReaderContext\n   * @param logic Logical operation\n   * @return DocIdSet\n   */\n  private DocIdSet getDocIdSet(AtomicReaderContext context, int logic, int[] index)\n      throws IOException {\n    OpenBitSetDISI result = initialResult(context, logic, index);\n    for (; index[0] < chain.length; index[0]++) {\n      // we dont pass acceptDocs, we will filter at the end using an additional filter\n      doChain(result, logic, chain[index[0]].getDocIdSet(context, null));\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Delegates to each filter in the chain.\n   *\n   * @param context AtomicReaderContext\n   * @param logic Logical operation\n   * @return DocIdSet\n   */\n  private DocIdSet getDocIdSet(AtomicReaderContext context, int logic, int[] index)\n      throws IOException {\n    OpenBitSetDISI result = initialResult(context, logic, index);\n    for (; index[0] < chain.length; index[0]++) {\n      // we dont pass acceptDocs, we will filter at the end using an additional filter\n      doChain(result, logic, chain[index[0]].getDocIdSet(context, null));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["6620df8541b174097b1133a4fc370adb2e570524"],"6620df8541b174097b1133a4fc370adb2e570524":["1f9f2355d68aab1348539f7a1603279405e566a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"1f9f2355d68aab1348539f7a1603279405e566a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6620df8541b174097b1133a4fc370adb2e570524":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f9f2355d68aab1348539f7a1603279405e566a4"],"1f9f2355d68aab1348539f7a1603279405e566a4":["6620df8541b174097b1133a4fc370adb2e570524"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}