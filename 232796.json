{"path":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/JavaCharStream#readChar().mjava","commits":[{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/JavaCharStream#readChar().mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/JavaCharStream#readChar().mjava","sourceNew":"/** Read a character. */\n  public char readChar() throws java.io.IOException\n  {\n     if (inBuf > 0)\n     {\n        --inBuf;\n\n        if (++bufpos == bufsize)\n           bufpos = 0;\n\n        return buffer[bufpos];\n     }\n\n     char c;\n\n     if (++bufpos == available)\n        AdjustBuffSize();\n\n     if ((buffer[bufpos] = c = ReadByte()) == '\\\\')\n     {\n        UpdateLineColumn(c);\n\n        int backSlashCnt = 1;\n\n        for (;;) // Read all the backslashes\n        {\n           if (++bufpos == available)\n              AdjustBuffSize();\n\n           try\n           {\n              if ((buffer[bufpos] = c = ReadByte()) != '\\\\')\n              {\n                 UpdateLineColumn(c);\n                 // found a non-backslash char.\n                 if ((c == 'u') && ((backSlashCnt & 1) == 1))\n                 {\n                    if (--bufpos < 0)\n                       bufpos = bufsize - 1;\n\n                    break;\n                 }\n\n                 backup(backSlashCnt);\n                 return '\\\\';\n              }\n           }\n           catch(java.io.IOException e)\n           {\n              if (backSlashCnt > 1)\n                 backup(backSlashCnt-1);\n\n              return '\\\\';\n           }\n\n           UpdateLineColumn(c);\n           backSlashCnt++;\n        }\n\n        // Here, we have seen an odd number of backslash's followed by a 'u'\n        try\n        {\n           while ((c = ReadByte()) == 'u')\n              ++column;\n\n           buffer[bufpos] = c = (char)(hexval(c) << 12 |\n                                       hexval(ReadByte()) << 8 |\n                                       hexval(ReadByte()) << 4 |\n                                       hexval(ReadByte()));\n\n           column += 4;\n        }\n        catch(java.io.IOException e)\n        {\n           throw new Error(\"Invalid escape character at line \" + line +\n                                         \" column \" + column + \".\");\n        }\n\n        if (backSlashCnt == 1)\n           return c;\n        else\n        {\n           backup(backSlashCnt - 1);\n           return '\\\\';\n        }\n     }\n     else\n     {\n        UpdateLineColumn(c);\n        return c;\n     }\n  }\n\n","sourceOld":"/** Read a character. */\n  public char readChar() throws java.io.IOException\n  {\n     if (inBuf > 0)\n     {\n        --inBuf;\n\n        if (++bufpos == bufsize)\n           bufpos = 0;\n\n        return buffer[bufpos];\n     }\n\n     char c;\n\n     if (++bufpos == available)\n        AdjustBuffSize();\n\n     if ((buffer[bufpos] = c = ReadByte()) == '\\\\')\n     {\n        UpdateLineColumn(c);\n\n        int backSlashCnt = 1;\n\n        for (;;) // Read all the backslashes\n        {\n           if (++bufpos == available)\n              AdjustBuffSize();\n\n           try\n           {\n              if ((buffer[bufpos] = c = ReadByte()) != '\\\\')\n              {\n                 UpdateLineColumn(c);\n                 // found a non-backslash char.\n                 if ((c == 'u') && ((backSlashCnt & 1) == 1))\n                 {\n                    if (--bufpos < 0)\n                       bufpos = bufsize - 1;\n\n                    break;\n                 }\n\n                 backup(backSlashCnt);\n                 return '\\\\';\n              }\n           }\n           catch(java.io.IOException e)\n           {\n              if (backSlashCnt > 1)\n                 backup(backSlashCnt-1);\n\n              return '\\\\';\n           }\n\n           UpdateLineColumn(c);\n           backSlashCnt++;\n        }\n\n        // Here, we have seen an odd number of backslash's followed by a 'u'\n        try\n        {\n           while ((c = ReadByte()) == 'u')\n              ++column;\n\n           buffer[bufpos] = c = (char)(hexval(c) << 12 |\n                                       hexval(ReadByte()) << 8 |\n                                       hexval(ReadByte()) << 4 |\n                                       hexval(ReadByte()));\n\n           column += 4;\n        }\n        catch(java.io.IOException e)\n        {\n           throw new Error(\"Invalid escape character at line \" + line +\n                                         \" column \" + column + \".\");\n        }\n\n        if (backSlashCnt == 1)\n           return c;\n        else\n        {\n           backup(backSlashCnt - 1);\n           return '\\\\';\n        }\n     }\n     else\n     {\n        UpdateLineColumn(c);\n        return c;\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/JavaCharStream#readChar().mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/JavaCharStream#readChar().mjava","sourceNew":"/** Read a character. */\n  public char readChar() throws java.io.IOException\n  {\n     if (inBuf > 0)\n     {\n        --inBuf;\n\n        if (++bufpos == bufsize)\n           bufpos = 0;\n\n        return buffer[bufpos];\n     }\n\n     char c;\n\n     if (++bufpos == available)\n        AdjustBuffSize();\n\n     if ((buffer[bufpos] = c = ReadByte()) == '\\\\')\n     {\n        UpdateLineColumn(c);\n\n        int backSlashCnt = 1;\n\n        for (;;) // Read all the backslashes\n        {\n           if (++bufpos == available)\n              AdjustBuffSize();\n\n           try\n           {\n              if ((buffer[bufpos] = c = ReadByte()) != '\\\\')\n              {\n                 UpdateLineColumn(c);\n                 // found a non-backslash char.\n                 if ((c == 'u') && ((backSlashCnt & 1) == 1))\n                 {\n                    if (--bufpos < 0)\n                       bufpos = bufsize - 1;\n\n                    break;\n                 }\n\n                 backup(backSlashCnt);\n                 return '\\\\';\n              }\n           }\n           catch(java.io.IOException e)\n           {\n              if (backSlashCnt > 1)\n                 backup(backSlashCnt-1);\n\n              return '\\\\';\n           }\n\n           UpdateLineColumn(c);\n           backSlashCnt++;\n        }\n\n        // Here, we have seen an odd number of backslash's followed by a 'u'\n        try\n        {\n           while ((c = ReadByte()) == 'u')\n              ++column;\n\n           buffer[bufpos] = c = (char)(hexval(c) << 12 |\n                                       hexval(ReadByte()) << 8 |\n                                       hexval(ReadByte()) << 4 |\n                                       hexval(ReadByte()));\n\n           column += 4;\n        }\n        catch(java.io.IOException e)\n        {\n           throw new Error(\"Invalid escape character at line \" + line +\n                                         \" column \" + column + \".\");\n        }\n\n        if (backSlashCnt == 1)\n           return c;\n        else\n        {\n           backup(backSlashCnt - 1);\n           return '\\\\';\n        }\n     }\n     else\n     {\n        UpdateLineColumn(c);\n        return c;\n     }\n  }\n\n","sourceOld":"/** Read a character. */\n  public char readChar() throws java.io.IOException\n  {\n     if (inBuf > 0)\n     {\n        --inBuf;\n\n        if (++bufpos == bufsize)\n           bufpos = 0;\n\n        return buffer[bufpos];\n     }\n\n     char c;\n\n     if (++bufpos == available)\n        AdjustBuffSize();\n\n     if ((buffer[bufpos] = c = ReadByte()) == '\\\\')\n     {\n        UpdateLineColumn(c);\n\n        int backSlashCnt = 1;\n\n        for (;;) // Read all the backslashes\n        {\n           if (++bufpos == available)\n              AdjustBuffSize();\n\n           try\n           {\n              if ((buffer[bufpos] = c = ReadByte()) != '\\\\')\n              {\n                 UpdateLineColumn(c);\n                 // found a non-backslash char.\n                 if ((c == 'u') && ((backSlashCnt & 1) == 1))\n                 {\n                    if (--bufpos < 0)\n                       bufpos = bufsize - 1;\n\n                    break;\n                 }\n\n                 backup(backSlashCnt);\n                 return '\\\\';\n              }\n           }\n           catch(java.io.IOException e)\n           {\n              if (backSlashCnt > 1)\n                 backup(backSlashCnt-1);\n\n              return '\\\\';\n           }\n\n           UpdateLineColumn(c);\n           backSlashCnt++;\n        }\n\n        // Here, we have seen an odd number of backslash's followed by a 'u'\n        try\n        {\n           while ((c = ReadByte()) == 'u')\n              ++column;\n\n           buffer[bufpos] = c = (char)(hexval(c) << 12 |\n                                       hexval(ReadByte()) << 8 |\n                                       hexval(ReadByte()) << 4 |\n                                       hexval(ReadByte()));\n\n           column += 4;\n        }\n        catch(java.io.IOException e)\n        {\n           throw new Error(\"Invalid escape character at line \" + line +\n                                         \" column \" + column + \".\");\n        }\n\n        if (backSlashCnt == 1)\n           return c;\n        else\n        {\n           backup(backSlashCnt - 1);\n           return '\\\\';\n        }\n     }\n     else\n     {\n        UpdateLineColumn(c);\n        return c;\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}