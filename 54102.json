{"path":"contrib/similarity/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveTerms(Reader).mjava","commits":[{"id":"aa8dcd4adc562c6e8da67c42872ef9194f8598fa","date":1108145465,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/similarity/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveTerms(Reader).mjava","pathOld":"sandbox/contributions/similarity/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveTerms(Reader).mjava","sourceNew":"    /**\n     * Find words for a more-like-this query former.\n     *\n     * @param r the reader that has the content of the document\n     */\n    public PriorityQueue retrieveTerms(Reader r) throws IOException {\n        Map words = new HashMap();\n        for (int i = 0; i < fieldNames.length; i++) {\n            String fieldName = fieldNames[i];\n\t\t\taddTermFrequencies(r, words, fieldName);\n        }\n        return createQueue(words);\n    }\n\n","sourceOld":"    /**\n     * Find words for a more-like-this query former.\n     *\n     * @param r the reader that has the content of the document\n     */\n    public PriorityQueue retrieveTerms(Reader r) throws IOException {\n        Map words = new HashMap();\n        for (int i = 0; i < fieldNames.length; i++) {\n            String fieldName = fieldNames[i];\n\t\t\taddTermFrequencies(r, words, fieldName);\n        }\n        return createQueue(words);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"794fe0ed6f3caaed28017d0c5107bc5a071e276b","date":1115750983,"type":3,"author":"David Spencer","isMerge":false,"pathNew":"contrib/similarity/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveTerms(Reader).mjava","pathOld":"contrib/similarity/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveTerms(Reader).mjava","sourceNew":"    /**\n     * Find words for a more-like-this query former.\n\t * The result is a priority queue of arrays.\n\t * Each array has 6 elements.\n\t * The elements are:\n\t * <ol>\n\t * <li> The word (String)\n\t * <li> The top field that this word comes from (String)\n\t * <li> The score for this word (Float)\n\t * <li> The IDF value (Float)\n\t * <li> The frequency of this word in the index (Integer)\n\t * <li> The frequency of this word in the source document (Integer)\t \t \n\t * </ol>\n\t * This is a somewhat \"advanced\" routine, and in general only the 1st entry in the array is of interest.\n\t * This method is exposed so that you can identify the \"interesting words\" in a document.\n\t * For an easier method to call see {@link #retrieveInterestingTerms retrieveInterestingTerms()}.\n     *\n     * @param r the reader that has the content of the document\n\t * @return the most intresting words in the document\n\t * @see #retrieveInterestingTerms\n     */\n    public PriorityQueue retrieveTerms(Reader r) throws IOException {\n        Map words = new HashMap();\n        for (int i = 0; i < fieldNames.length; i++) {\n            String fieldName = fieldNames[i];\n\t\t\taddTermFrequencies(r, words, fieldName);\n        }\n        return createQueue(words);\n    }\n\n","sourceOld":"    /**\n     * Find words for a more-like-this query former.\n     *\n     * @param r the reader that has the content of the document\n     */\n    public PriorityQueue retrieveTerms(Reader r) throws IOException {\n        Map words = new HashMap();\n        for (int i = 0; i < fieldNames.length; i++) {\n            String fieldName = fieldNames[i];\n\t\t\taddTermFrequencies(r, words, fieldName);\n        }\n        return createQueue(words);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cdb8fe8387c97b2e4d95cfea5e57c1b1a0cef95","date":1115752228,"type":3,"author":"David Spencer","isMerge":false,"pathNew":"contrib/similarity/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveTerms(Reader).mjava","pathOld":"contrib/similarity/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveTerms(Reader).mjava","sourceNew":"    /**\n     * Find words for a more-like-this query former.\n\t * The result is a priority queue of arrays with one entry for <b>every word</b> in the document.\n\t * Each array has 6 elements.\n\t * The elements are:\n\t * <ol>\n\t * <li> The word (String)\n\t * <li> The top field that this word comes from (String)\n\t * <li> The score for this word (Float)\n\t * <li> The IDF value (Float)\n\t * <li> The frequency of this word in the index (Integer)\n\t * <li> The frequency of this word in the source document (Integer)\t \t \n\t * </ol>\n\t * This is a somewhat \"advanced\" routine, and in general only the 1st entry in the array is of interest.\n\t * This method is exposed so that you can identify the \"interesting words\" in a document.\n\t * For an easier method to call see {@link #retrieveInterestingTerms retrieveInterestingTerms()}.\n     *\n     * @param r the reader that has the content of the document\n\t * @return the most intresting words in the document ordered by score, with the highest scoring, or best entry, first\n\t *\n\t * @see #retrieveInterestingTerms\n     */\n    public PriorityQueue retrieveTerms(Reader r) throws IOException {\n        Map words = new HashMap();\n        for (int i = 0; i < fieldNames.length; i++) {\n            String fieldName = fieldNames[i];\n\t\t\taddTermFrequencies(r, words, fieldName);\n        }\n        return createQueue(words);\n    }\n\n","sourceOld":"    /**\n     * Find words for a more-like-this query former.\n\t * The result is a priority queue of arrays.\n\t * Each array has 6 elements.\n\t * The elements are:\n\t * <ol>\n\t * <li> The word (String)\n\t * <li> The top field that this word comes from (String)\n\t * <li> The score for this word (Float)\n\t * <li> The IDF value (Float)\n\t * <li> The frequency of this word in the index (Integer)\n\t * <li> The frequency of this word in the source document (Integer)\t \t \n\t * </ol>\n\t * This is a somewhat \"advanced\" routine, and in general only the 1st entry in the array is of interest.\n\t * This method is exposed so that you can identify the \"interesting words\" in a document.\n\t * For an easier method to call see {@link #retrieveInterestingTerms retrieveInterestingTerms()}.\n     *\n     * @param r the reader that has the content of the document\n\t * @return the most intresting words in the document\n\t * @see #retrieveInterestingTerms\n     */\n    public PriorityQueue retrieveTerms(Reader r) throws IOException {\n        Map words = new HashMap();\n        for (int i = 0; i < fieldNames.length; i++) {\n            String fieldName = fieldNames[i];\n\t\t\taddTermFrequencies(r, words, fieldName);\n        }\n        return createQueue(words);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f49ac1854a94b947e36bbdaffa355cb7707aa768","date":1164746802,"type":4,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/similarity/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveTerms(Reader).mjava","sourceNew":null,"sourceOld":"    /**\n     * Find words for a more-like-this query former.\n\t * The result is a priority queue of arrays with one entry for <b>every word</b> in the document.\n\t * Each array has 6 elements.\n\t * The elements are:\n\t * <ol>\n\t * <li> The word (String)\n\t * <li> The top field that this word comes from (String)\n\t * <li> The score for this word (Float)\n\t * <li> The IDF value (Float)\n\t * <li> The frequency of this word in the index (Integer)\n\t * <li> The frequency of this word in the source document (Integer)\t \t \n\t * </ol>\n\t * This is a somewhat \"advanced\" routine, and in general only the 1st entry in the array is of interest.\n\t * This method is exposed so that you can identify the \"interesting words\" in a document.\n\t * For an easier method to call see {@link #retrieveInterestingTerms retrieveInterestingTerms()}.\n     *\n     * @param r the reader that has the content of the document\n\t * @return the most intresting words in the document ordered by score, with the highest scoring, or best entry, first\n\t *\n\t * @see #retrieveInterestingTerms\n     */\n    public PriorityQueue retrieveTerms(Reader r) throws IOException {\n        Map words = new HashMap();\n        for (int i = 0; i < fieldNames.length; i++) {\n            String fieldName = fieldNames[i];\n\t\t\taddTermFrequencies(r, words, fieldName);\n        }\n        return createQueue(words);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f49ac1854a94b947e36bbdaffa355cb7707aa768":["1cdb8fe8387c97b2e4d95cfea5e57c1b1a0cef95"],"794fe0ed6f3caaed28017d0c5107bc5a071e276b":["aa8dcd4adc562c6e8da67c42872ef9194f8598fa"],"aa8dcd4adc562c6e8da67c42872ef9194f8598fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cdb8fe8387c97b2e4d95cfea5e57c1b1a0cef95":["794fe0ed6f3caaed28017d0c5107bc5a071e276b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f49ac1854a94b947e36bbdaffa355cb7707aa768"]},"commit2Childs":{"f49ac1854a94b947e36bbdaffa355cb7707aa768":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"794fe0ed6f3caaed28017d0c5107bc5a071e276b":["1cdb8fe8387c97b2e4d95cfea5e57c1b1a0cef95"],"aa8dcd4adc562c6e8da67c42872ef9194f8598fa":["794fe0ed6f3caaed28017d0c5107bc5a071e276b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aa8dcd4adc562c6e8da67c42872ef9194f8598fa"],"1cdb8fe8387c97b2e4d95cfea5e57c1b1a0cef95":["f49ac1854a94b947e36bbdaffa355cb7707aa768"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}