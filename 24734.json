{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatEvaluator#evaluateString(String,Locale,TimeZone).mjava","commits":[{"id":"b0c3d81a07652af7c4ca5568fbe7282722c32a40","date":1398935464,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatEvaluator#evaluateString(String,Locale,TimeZone).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * NOTE: declared as a method to allow for extensibility\n   * @lucene.experimental\n   * @return the result of evaluating a string\n   */\n  protected Date evaluateString(String datemathfmt, Locale locale, TimeZone tz) {\n    Date date = null;\n    datemathfmt = datemathfmt.replaceAll(\"NOW\", \"\");\n    try {\n      DateMathParser parser = getDateMathParser(locale, tz);\n      date = parseMathString(parser,datemathfmt);\n    } catch (ParseException e) {\n      wrapAndThrow(SEVERE, e, \"Invalid expression for date\");\n    }\n    return date;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29","date":1463148204,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatEvaluator#evaluateString(String,Locale,TimeZone).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatEvaluator#evaluateString(String,Locale,TimeZone).mjava","sourceNew":"  /**\n   * NOTE: declared as a method to allow for extensibility\n   * @lucene.experimental\n   * @return the result of evaluating a string\n   */\n  protected Date evaluateString(String datemathfmt, Locale locale, TimeZone tz) {\n    // note: DMP does not use the locale but perhaps a subclass might use it, for e.g. parsing a date in a custom\n    // string that doesn't necessarily have date math?\n    //TODO refactor DateMathParser.parseMath a bit to have a static method for this logic.\n    if (datemathfmt.startsWith(\"NOW\")) {\n      datemathfmt = datemathfmt.substring(\"NOW\".length());\n    }\n    try {\n      DateMathParser parser = new DateMathParser(tz);\n      parser.setNow(new Date());// thus do *not* use SolrRequestInfo\n      return parser.parseMath(datemathfmt);\n    } catch (ParseException e) {\n      throw wrapAndThrow(SEVERE, e, \"Invalid expression for date\");\n    }\n  }\n\n","sourceOld":"  /**\n   * NOTE: declared as a method to allow for extensibility\n   * @lucene.experimental\n   * @return the result of evaluating a string\n   */\n  protected Date evaluateString(String datemathfmt, Locale locale, TimeZone tz) {\n    Date date = null;\n    datemathfmt = datemathfmt.replaceAll(\"NOW\", \"\");\n    try {\n      DateMathParser parser = getDateMathParser(locale, tz);\n      date = parseMathString(parser,datemathfmt);\n    } catch (ParseException e) {\n      wrapAndThrow(SEVERE, e, \"Invalid expression for date\");\n    }\n    return date;\n  }\n\n","bugFix":["b0c3d81a07652af7c4ca5568fbe7282722c32a40"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatEvaluator#evaluateString(String,Locale,TimeZone).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatEvaluator#evaluateString(String,Locale,TimeZone).mjava","sourceNew":"  /**\n   * NOTE: declared as a method to allow for extensibility\n   * @lucene.experimental\n   * @return the result of evaluating a string\n   */\n  protected Date evaluateString(String datemathfmt, Locale locale, TimeZone tz) {\n    // note: DMP does not use the locale but perhaps a subclass might use it, for e.g. parsing a date in a custom\n    // string that doesn't necessarily have date math?\n    //TODO refactor DateMathParser.parseMath a bit to have a static method for this logic.\n    if (datemathfmt.startsWith(\"NOW\")) {\n      datemathfmt = datemathfmt.substring(\"NOW\".length());\n    }\n    try {\n      DateMathParser parser = new DateMathParser(tz);\n      parser.setNow(new Date());// thus do *not* use SolrRequestInfo\n      return parser.parseMath(datemathfmt);\n    } catch (ParseException e) {\n      throw wrapAndThrow(SEVERE, e, \"Invalid expression for date\");\n    }\n  }\n\n","sourceOld":"  /**\n   * NOTE: declared as a method to allow for extensibility\n   * @lucene.experimental\n   * @return the result of evaluating a string\n   */\n  protected Date evaluateString(String datemathfmt, Locale locale, TimeZone tz) {\n    Date date = null;\n    datemathfmt = datemathfmt.replaceAll(\"NOW\", \"\");\n    try {\n      DateMathParser parser = getDateMathParser(locale, tz);\n      date = parseMathString(parser,datemathfmt);\n    } catch (ParseException e) {\n      wrapAndThrow(SEVERE, e, \"Invalid expression for date\");\n    }\n    return date;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatEvaluator#evaluateString(String,Locale,TimeZone).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatEvaluator#evaluateString(String,Locale,TimeZone).mjava","sourceNew":"  /**\n   * NOTE: declared as a method to allow for extensibility\n   * @lucene.experimental\n   * @return the result of evaluating a string\n   */\n  protected Date evaluateString(String datemathfmt, Locale locale, TimeZone tz) {\n    // note: DMP does not use the locale but perhaps a subclass might use it, for e.g. parsing a date in a custom\n    // string that doesn't necessarily have date math?\n    //TODO refactor DateMathParser.parseMath a bit to have a static method for this logic.\n    if (datemathfmt.startsWith(\"NOW\")) {\n      datemathfmt = datemathfmt.substring(\"NOW\".length());\n    }\n    try {\n      DateMathParser parser = new DateMathParser(tz);\n      parser.setNow(new Date());// thus do *not* use SolrRequestInfo\n      return parser.parseMath(datemathfmt);\n    } catch (ParseException e) {\n      throw wrapAndThrow(SEVERE, e, \"Invalid expression for date\");\n    }\n  }\n\n","sourceOld":"  /**\n   * NOTE: declared as a method to allow for extensibility\n   * @lucene.experimental\n   * @return the result of evaluating a string\n   */\n  protected Date evaluateString(String datemathfmt, Locale locale, TimeZone tz) {\n    Date date = null;\n    datemathfmt = datemathfmt.replaceAll(\"NOW\", \"\");\n    try {\n      DateMathParser parser = getDateMathParser(locale, tz);\n      date = parseMathString(parser,datemathfmt);\n    } catch (ParseException e) {\n      wrapAndThrow(SEVERE, e, \"Invalid expression for date\");\n    }\n    return date;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatEvaluator#evaluateString(String,Locale,TimeZone).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatEvaluator#evaluateString(String,Locale,TimeZone).mjava","sourceNew":"  /**\n   * NOTE: declared as a method to allow for extensibility\n   * @lucene.experimental\n   * @return the result of evaluating a string\n   */\n  protected Date evaluateString(String datemathfmt, Locale locale, TimeZone tz) {\n    // note: DMP does not use the locale but perhaps a subclass might use it, for e.g. parsing a date in a custom\n    // string that doesn't necessarily have date math?\n    //TODO refactor DateMathParser.parseMath a bit to have a static method for this logic.\n    if (datemathfmt.startsWith(\"NOW\")) {\n      datemathfmt = datemathfmt.substring(\"NOW\".length());\n    }\n    try {\n      DateMathParser parser = new DateMathParser(tz);\n      parser.setNow(new Date());// thus do *not* use SolrRequestInfo\n      return parser.parseMath(datemathfmt);\n    } catch (ParseException e) {\n      throw wrapAndThrow(SEVERE, e, \"Invalid expression for date\");\n    }\n  }\n\n","sourceOld":"  /**\n   * NOTE: declared as a method to allow for extensibility\n   * @lucene.experimental\n   * @return the result of evaluating a string\n   */\n  protected Date evaluateString(String datemathfmt, Locale locale, TimeZone tz) {\n    Date date = null;\n    datemathfmt = datemathfmt.replaceAll(\"NOW\", \"\");\n    try {\n      DateMathParser parser = getDateMathParser(locale, tz);\n      date = parseMathString(parser,datemathfmt);\n    } catch (ParseException e) {\n      wrapAndThrow(SEVERE, e, \"Invalid expression for date\");\n    }\n    return date;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DateFormatEvaluator#evaluateString(String,Locale,TimeZone).mjava","sourceNew":null,"sourceOld":"  /**\n   * NOTE: declared as a method to allow for extensibility\n   * @lucene.experimental\n   * @return the result of evaluating a string\n   */\n  protected Date evaluateString(String datemathfmt, Locale locale, TimeZone tz) {\n    // note: DMP does not use the locale but perhaps a subclass might use it, for e.g. parsing a date in a custom\n    // string that doesn't necessarily have date math?\n    //TODO refactor DateMathParser.parseMath a bit to have a static method for this logic.\n    if (datemathfmt.startsWith(\"NOW\")) {\n      datemathfmt = datemathfmt.substring(\"NOW\".length());\n    }\n    try {\n      DateMathParser parser = new DateMathParser(tz);\n      parser.setNow(new Date());// thus do *not* use SolrRequestInfo\n      return parser.parseMath(datemathfmt);\n    } catch (ParseException e) {\n      throw wrapAndThrow(SEVERE, e, \"Invalid expression for date\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29":["b0c3d81a07652af7c4ca5568fbe7282722c32a40"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"b0c3d81a07652af7c4ca5568fbe7282722c32a40":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ad30c6a479e764150a3316e57263319775f1df2":["b0c3d81a07652af7c4ca5568fbe7282722c32a40","ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["b0c3d81a07652af7c4ca5568fbe7282722c32a40","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["b0c3d81a07652af7c4ca5568fbe7282722c32a40","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29":["0ad30c6a479e764150a3316e57263319775f1df2"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b0c3d81a07652af7c4ca5568fbe7282722c32a40":["ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29","0ad30c6a479e764150a3316e57263319775f1df2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b0c3d81a07652af7c4ca5568fbe7282722c32a40"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}