{"path":"solr/core/src/test/org/apache/solr/analytics/NoFacetTest#perc60Test().mjava","commits":[{"id":"ff403346522eaa9de75403763e297e83a3ea585c","date":1384904731,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analytics/NoFacetTest#perc60Test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void perc60Test() throws Exception { \n    //Int 60\n    Integer intResult = (Integer)getStatResult(response, \"p6r\", \"int\", \"int_id\");\n    Integer intTest = (Integer)calculateStat(intTestStart, \"perc_60\");\n    assertEquals(intResult,intTest);\n\n    //Long 60\n    Long longResult = (Long)getStatResult(response, \"p6r\", \"long\", \"long_ld\");\n    Long longTest = (Long)calculateStat(longTestStart, \"perc_60\");\n    assertEquals(longResult,longTest);\n\n    //Float 60\n    Float floatResult = (Float)getStatResult(response, \"p6r\", \"float\", \"float_fd\");\n    Float floatTest = (Float)calculateStat(floatTestStart, \"perc_60\");\n    assertEquals(floatResult,floatTest);\n\n    //Double 60\n    Double doubleResult = (Double)getStatResult(response, \"p6r\", \"double\", \"double_dd\");\n    Double doubleTest = (Double)calculateStat(doubleTestStart, \"perc_60\");\n    assertEquals(doubleResult,doubleTest);\n\n    //Date 60\n    String dateResult = (String)getStatResult(response, \"p6r\", \"date\", \"date_dtd\");\n    String dateTest = (String)calculateStat(dateTestStart, \"perc_60\");\n    assertEquals(dateResult,dateTest);\n\n    //String 60\n    String stringResult = (String)getStatResult(response, \"p6r\", \"str\", \"string_sd\");\n    String stringTest = (String)calculateStat(stringTestStart, \"perc_60\");\n    assertEquals(stringResult,stringTest);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2408d2a60b59b9f5d910383ce065127078892c04","date":1385328825,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analytics/NoFacetTest#perc60Test().mjava","pathOld":"solr/core/src/test/org/apache/solr/analytics/NoFacetTest#perc60Test().mjava","sourceNew":"  @Test\n  public void perc60Test() throws Exception { \n    //Int 60\n    Integer intResult = (Integer)getStatResult(\"p6r\", \"int_id\", VAL_TYPE.INTEGER);\n    Integer intTest = (Integer)calculateStat(intTestStart, \"perc_60\");\n    assertEquals(intResult,intTest);\n\n    //Long 60\n    Long longResult = (Long)getStatResult(\"p6r\", \"long_ld\", VAL_TYPE.LONG);\n    Long longTest = (Long)calculateStat(longTestStart, \"perc_60\");\n    assertEquals(longResult,longTest);\n\n    //Float 60\n    Float floatResult = (Float)getStatResult(\"p6r\", \"float_fd\", VAL_TYPE.FLOAT);\n    Float floatTest = (Float)calculateStat(floatTestStart, \"perc_60\");\n    assertEquals(floatResult,floatTest);\n\n    //Double 60\n    Double doubleResult = (Double)getStatResult(\"p6r\", \"double_dd\", VAL_TYPE.DOUBLE);\n    Double doubleTest = (Double)calculateStat(doubleTestStart, \"perc_60\");\n    assertEquals(doubleResult,doubleTest);\n\n    //Date 60\n    String dateResult = (String)getStatResult(\"p6r\", \"date_dtd\", VAL_TYPE.DATE);\n    String dateTest = (String)calculateStat(dateTestStart, \"perc_60\");\n    assertEquals(dateResult,dateTest);\n\n    //String 60\n    String stringResult = (String)getStatResult(\"p6r\", \"string_sd\", VAL_TYPE.STRING);\n    String stringTest = (String)calculateStat(stringTestStart, \"perc_60\");\n    assertEquals(stringResult,stringTest);\n  }\n\n","sourceOld":"  @Test\n  public void perc60Test() throws Exception { \n    //Int 60\n    Integer intResult = (Integer)getStatResult(response, \"p6r\", \"int\", \"int_id\");\n    Integer intTest = (Integer)calculateStat(intTestStart, \"perc_60\");\n    assertEquals(intResult,intTest);\n\n    //Long 60\n    Long longResult = (Long)getStatResult(response, \"p6r\", \"long\", \"long_ld\");\n    Long longTest = (Long)calculateStat(longTestStart, \"perc_60\");\n    assertEquals(longResult,longTest);\n\n    //Float 60\n    Float floatResult = (Float)getStatResult(response, \"p6r\", \"float\", \"float_fd\");\n    Float floatTest = (Float)calculateStat(floatTestStart, \"perc_60\");\n    assertEquals(floatResult,floatTest);\n\n    //Double 60\n    Double doubleResult = (Double)getStatResult(response, \"p6r\", \"double\", \"double_dd\");\n    Double doubleTest = (Double)calculateStat(doubleTestStart, \"perc_60\");\n    assertEquals(doubleResult,doubleTest);\n\n    //Date 60\n    String dateResult = (String)getStatResult(response, \"p6r\", \"date\", \"date_dtd\");\n    String dateTest = (String)calculateStat(dateTestStart, \"perc_60\");\n    assertEquals(dateResult,dateTest);\n\n    //String 60\n    String stringResult = (String)getStatResult(response, \"p6r\", \"str\", \"string_sd\");\n    String stringTest = (String)calculateStat(stringTestStart, \"perc_60\");\n    assertEquals(stringResult,stringTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d840db4e4ec73c3ff5d5457046c6854cc630e26","date":1385608650,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analytics/NoFacetTest#perc60Test().mjava","pathOld":"solr/core/src/test/org/apache/solr/analytics/NoFacetTest#perc60Test().mjava","sourceNew":"  @Test\n  public void perc60Test() throws Exception { \n    //Int 60\n    Integer intResult = (Integer)getStatResult(\"p6r\", \"int_id\", VAL_TYPE.INTEGER);\n    Integer intTest = (Integer)calculateStat(intTestStart, \"perc_60\");\n    assertEquals(getRawResponse(), intResult,intTest);\n\n    //Long 60\n    Long longResult = (Long)getStatResult(\"p6r\", \"long_ld\", VAL_TYPE.LONG);\n    Long longTest = (Long)calculateStat(longTestStart, \"perc_60\");\n    assertEquals(getRawResponse(), longResult,longTest);\n\n    //Float 60\n    Float floatResult = (Float)getStatResult(\"p6r\", \"float_fd\", VAL_TYPE.FLOAT);\n    Float floatTest = (Float)calculateStat(floatTestStart, \"perc_60\");\n    assertEquals(getRawResponse(), floatResult,floatTest);\n\n    //Double 60\n    Double doubleResult = (Double)getStatResult(\"p6r\", \"double_dd\", VAL_TYPE.DOUBLE);\n    Double doubleTest = (Double)calculateStat(doubleTestStart, \"perc_60\");\n    assertEquals(getRawResponse(), doubleResult,doubleTest);\n\n    //Date 60\n    String dateResult = (String)getStatResult(\"p6r\", \"date_dtd\", VAL_TYPE.DATE);\n    String dateTest = (String)calculateStat(dateTestStart, \"perc_60\");\n    assertEquals(getRawResponse(), dateResult,dateTest);\n\n    //String 60\n    String stringResult = (String)getStatResult(\"p6r\", \"string_sd\", VAL_TYPE.STRING);\n    String stringTest = (String)calculateStat(stringTestStart, \"perc_60\");\n    assertEquals(getRawResponse(), stringResult,stringTest);\n  }\n\n","sourceOld":"  @Test\n  public void perc60Test() throws Exception { \n    //Int 60\n    Integer intResult = (Integer)getStatResult(\"p6r\", \"int_id\", VAL_TYPE.INTEGER);\n    Integer intTest = (Integer)calculateStat(intTestStart, \"perc_60\");\n    assertEquals(intResult,intTest);\n\n    //Long 60\n    Long longResult = (Long)getStatResult(\"p6r\", \"long_ld\", VAL_TYPE.LONG);\n    Long longTest = (Long)calculateStat(longTestStart, \"perc_60\");\n    assertEquals(longResult,longTest);\n\n    //Float 60\n    Float floatResult = (Float)getStatResult(\"p6r\", \"float_fd\", VAL_TYPE.FLOAT);\n    Float floatTest = (Float)calculateStat(floatTestStart, \"perc_60\");\n    assertEquals(floatResult,floatTest);\n\n    //Double 60\n    Double doubleResult = (Double)getStatResult(\"p6r\", \"double_dd\", VAL_TYPE.DOUBLE);\n    Double doubleTest = (Double)calculateStat(doubleTestStart, \"perc_60\");\n    assertEquals(doubleResult,doubleTest);\n\n    //Date 60\n    String dateResult = (String)getStatResult(\"p6r\", \"date_dtd\", VAL_TYPE.DATE);\n    String dateTest = (String)calculateStat(dateTestStart, \"perc_60\");\n    assertEquals(dateResult,dateTest);\n\n    //String 60\n    String stringResult = (String)getStatResult(\"p6r\", \"string_sd\", VAL_TYPE.STRING);\n    String stringTest = (String)calculateStat(stringTestStart, \"perc_60\");\n    assertEquals(stringResult,stringTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analytics/NoFacetTest#perc60Test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void perc60Test() throws Exception { \n    //Int 60\n    Integer intResult = (Integer)getStatResult(\"p6r\", \"int_id\", VAL_TYPE.INTEGER);\n    Integer intTest = (Integer)calculateStat(intTestStart, \"perc_60\");\n    assertEquals(getRawResponse(), intResult,intTest);\n\n    //Long 60\n    Long longResult = (Long)getStatResult(\"p6r\", \"long_ld\", VAL_TYPE.LONG);\n    Long longTest = (Long)calculateStat(longTestStart, \"perc_60\");\n    assertEquals(getRawResponse(), longResult,longTest);\n\n    //Float 60\n    Float floatResult = (Float)getStatResult(\"p6r\", \"float_fd\", VAL_TYPE.FLOAT);\n    Float floatTest = (Float)calculateStat(floatTestStart, \"perc_60\");\n    assertEquals(getRawResponse(), floatResult,floatTest);\n\n    //Double 60\n    Double doubleResult = (Double)getStatResult(\"p6r\", \"double_dd\", VAL_TYPE.DOUBLE);\n    Double doubleTest = (Double)calculateStat(doubleTestStart, \"perc_60\");\n    assertEquals(getRawResponse(), doubleResult,doubleTest);\n\n    //Date 60\n    String dateResult = (String)getStatResult(\"p6r\", \"date_dtd\", VAL_TYPE.DATE);\n    String dateTest = (String)calculateStat(dateTestStart, \"perc_60\");\n    assertEquals(getRawResponse(), dateResult,dateTest);\n\n    //String 60\n    String stringResult = (String)getStatResult(\"p6r\", \"string_sd\", VAL_TYPE.STRING);\n    String stringTest = (String)calculateStat(stringTestStart, \"perc_60\");\n    assertEquals(getRawResponse(), stringResult,stringTest);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/NoFacetTest#perc60Test().mjava","pathOld":"solr/core/src/test/org/apache/solr/analytics/NoFacetTest#perc60Test().mjava","sourceNew":"  @Test\n  public void perc60Test() throws Exception { \n    //Int 60\n    Integer intResult = (Integer)getStatResult(\"p6r\", \"int_id\", VAL_TYPE.INTEGER);\n    Integer intTest = (Integer)calculateStat(intTestStart, \"perc_60\");\n    assertEquals(getRawResponse(), intResult,intTest);\n\n    //Long 60\n    Long longResult = (Long)getStatResult(\"p6r\", \"long_ld\", VAL_TYPE.LONG);\n    Long longTest = (Long)calculateStat(longTestStart, \"perc_60\");\n    assertEquals(getRawResponse(), longResult,longTest);\n\n    //Float 60\n    Float floatResult = (Float)getStatResult(\"p6r\", \"float_fd\", VAL_TYPE.FLOAT);\n    Float floatTest = (Float)calculateStat(floatTestStart, \"perc_60\");\n    assertEquals(getRawResponse(), floatResult,floatTest);\n\n    //Double 60\n    Double doubleResult = (Double)getStatResult(\"p6r\", \"double_dd\", VAL_TYPE.DOUBLE);\n    Double doubleTest = (Double)calculateStat(doubleTestStart, \"perc_60\");\n    assertEquals(getRawResponse(), doubleResult,doubleTest);\n\n    //Date 60\n    String dateResult = (String)getStatResult(\"p6r\", \"date_dtd\", VAL_TYPE.DATE);\n    String dateTest = (String)calculateStat(dateTestStart, \"perc_60\");\n    assertEquals(getRawResponse(), dateResult,dateTest);\n\n    //String 60\n    String stringResult = (String)getStatResult(\"p6r\", \"string_sd\", VAL_TYPE.STRING);\n    String stringTest = (String)calculateStat(stringTestStart, \"perc_60\");\n    assertEquals(getRawResponse(), stringResult,stringTest);\n  }\n\n","sourceOld":"  @Test\n  public void perc60Test() throws Exception { \n    //Int 60\n    Integer intResult = (Integer)getStatResult(\"p6r\", \"int_id\", VAL_TYPE.INTEGER);\n    Integer intTest = (Integer)calculateStat(intTestStart, \"perc_60\");\n    assertEquals(getRawResponse(), intResult,intTest);\n\n    //Long 60\n    Long longResult = (Long)getStatResult(\"p6r\", \"long_ld\", VAL_TYPE.LONG);\n    Long longTest = (Long)calculateStat(longTestStart, \"perc_60\");\n    assertEquals(getRawResponse(), longResult,longTest);\n\n    //Float 60\n    Float floatResult = (Float)getStatResult(\"p6r\", \"float_fd\", VAL_TYPE.FLOAT);\n    Float floatTest = (Float)calculateStat(floatTestStart, \"perc_60\");\n    assertEquals(getRawResponse(), floatResult,floatTest);\n\n    //Double 60\n    Double doubleResult = (Double)getStatResult(\"p6r\", \"double_dd\", VAL_TYPE.DOUBLE);\n    Double doubleTest = (Double)calculateStat(doubleTestStart, \"perc_60\");\n    assertEquals(getRawResponse(), doubleResult,doubleTest);\n\n    //Date 60\n    String dateResult = (String)getStatResult(\"p6r\", \"date_dtd\", VAL_TYPE.DATE);\n    String dateTest = (String)calculateStat(dateTestStart, \"perc_60\");\n    assertEquals(getRawResponse(), dateResult,dateTest);\n\n    //String 60\n    String stringResult = (String)getStatResult(\"p6r\", \"string_sd\", VAL_TYPE.STRING);\n    String stringTest = (String)calculateStat(stringTestStart, \"perc_60\");\n    assertEquals(getRawResponse(), stringResult,stringTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2d840db4e4ec73c3ff5d5457046c6854cc630e26"],"2408d2a60b59b9f5d910383ce065127078892c04":["ff403346522eaa9de75403763e297e83a3ea585c"],"ff403346522eaa9de75403763e297e83a3ea585c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2d840db4e4ec73c3ff5d5457046c6854cc630e26":["2408d2a60b59b9f5d910383ce065127078892c04"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["2d840db4e4ec73c3ff5d5457046c6854cc630e26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f719faa74f7213d4a395510dbc1f1b7cb178484"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","ff403346522eaa9de75403763e297e83a3ea585c"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"2408d2a60b59b9f5d910383ce065127078892c04":["2d840db4e4ec73c3ff5d5457046c6854cc630e26"],"ff403346522eaa9de75403763e297e83a3ea585c":["2408d2a60b59b9f5d910383ce065127078892c04"],"2d840db4e4ec73c3ff5d5457046c6854cc630e26":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","0f719faa74f7213d4a395510dbc1f1b7cb178484"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}