{"path":"solr/core/src/java/org/apache/solr/security/BasicAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","commits":[{"id":"ccfb40e1834cac1619556a0becf198bb7bad5d63","date":1438887805,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/BasicAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void doAuthenticate(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws Exception {\n\n    HttpServletRequest request = (HttpServletRequest) servletRequest;\n    HttpServletResponse response = (HttpServletResponse) servletResponse;\n\n    String authHeader = request.getHeader(\"Authorization\");\n    if (authHeader != null) {\n      BasicAuthPlugin.authHeader.set(new BasicHeader(\"Authorization\", authHeader));\n      StringTokenizer st = new StringTokenizer(authHeader);\n      if (st.hasMoreTokens()) {\n        String basic = st.nextToken();\n        if (basic.equalsIgnoreCase(\"Basic\")) {\n          try {\n            String credentials = new String(Base64.decodeBase64(st.nextToken()), \"UTF-8\");\n            int p = credentials.indexOf(\":\");\n            if (p != -1) {\n              final String username = credentials.substring(0, p).trim();\n              String pwd = credentials.substring(p + 1).trim();\n              if (!authenticate(username, pwd)) {\n                authenticationFailure(response, \"Bad credentials\");\n              } else {\n                HttpServletRequestWrapper wrapper = new HttpServletRequestWrapper(request) {\n                  @Override\n                  public Principal getUserPrincipal() {\n                    return new BasicUserPrincipal(username);\n                  }\n                };\n                filterChain.doFilter(wrapper, response);\n              }\n\n            } else {\n              authenticationFailure(response, \"Invalid authentication token\");\n            }\n          } catch (UnsupportedEncodingException e) {\n            throw new Error(\"Couldn't retrieve authentication\", e);\n          }\n        }\n      }\n    } else {\n      request.setAttribute(AuthenticationPlugin.class.getName(), zkAuthentication.getPromptHeaders());\n      filterChain.doFilter(request, response);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3635776bfb39e459843cfe0a78c7f3f88602f8ea","date":1450428038,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/BasicAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/BasicAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"  @Override\n  public void doAuthenticate(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws Exception {\n\n    HttpServletRequest request = (HttpServletRequest) servletRequest;\n    HttpServletResponse response = (HttpServletResponse) servletResponse;\n\n    String authHeader = request.getHeader(\"Authorization\");\n    if (authHeader != null) {\n      BasicAuthPlugin.authHeader.set(new BasicHeader(\"Authorization\", authHeader));\n      StringTokenizer st = new StringTokenizer(authHeader);\n      if (st.hasMoreTokens()) {\n        String basic = st.nextToken();\n        if (basic.equalsIgnoreCase(\"Basic\")) {\n          try {\n            String credentials = new String(Base64.decodeBase64(st.nextToken()), \"UTF-8\");\n            int p = credentials.indexOf(\":\");\n            if (p != -1) {\n              final String username = credentials.substring(0, p).trim();\n              String pwd = credentials.substring(p + 1).trim();\n              if (!authenticate(username, pwd)) {\n                authenticationFailure(response, \"Bad credentials\");\n              } else {\n                HttpServletRequestWrapper wrapper = new HttpServletRequestWrapper(request) {\n                  @Override\n                  public Principal getUserPrincipal() {\n                    return new BasicUserPrincipal(username);\n                  }\n                };\n                filterChain.doFilter(wrapper, response);\n              }\n\n            } else {\n              authenticationFailure(response, \"Invalid authentication token\");\n            }\n          } catch (UnsupportedEncodingException e) {\n            throw new Error(\"Couldn't retrieve authentication\", e);\n          }\n        }\n      }\n    } else {\n      if (blockUnknown) {\n        authenticationFailure(response, \"require authentication\");\n      } else {\n        request.setAttribute(AuthenticationPlugin.class.getName(), zkAuthentication.getPromptHeaders());\n        filterChain.doFilter(request, response);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void doAuthenticate(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws Exception {\n\n    HttpServletRequest request = (HttpServletRequest) servletRequest;\n    HttpServletResponse response = (HttpServletResponse) servletResponse;\n\n    String authHeader = request.getHeader(\"Authorization\");\n    if (authHeader != null) {\n      BasicAuthPlugin.authHeader.set(new BasicHeader(\"Authorization\", authHeader));\n      StringTokenizer st = new StringTokenizer(authHeader);\n      if (st.hasMoreTokens()) {\n        String basic = st.nextToken();\n        if (basic.equalsIgnoreCase(\"Basic\")) {\n          try {\n            String credentials = new String(Base64.decodeBase64(st.nextToken()), \"UTF-8\");\n            int p = credentials.indexOf(\":\");\n            if (p != -1) {\n              final String username = credentials.substring(0, p).trim();\n              String pwd = credentials.substring(p + 1).trim();\n              if (!authenticate(username, pwd)) {\n                authenticationFailure(response, \"Bad credentials\");\n              } else {\n                HttpServletRequestWrapper wrapper = new HttpServletRequestWrapper(request) {\n                  @Override\n                  public Principal getUserPrincipal() {\n                    return new BasicUserPrincipal(username);\n                  }\n                };\n                filterChain.doFilter(wrapper, response);\n              }\n\n            } else {\n              authenticationFailure(response, \"Invalid authentication token\");\n            }\n          } catch (UnsupportedEncodingException e) {\n            throw new Error(\"Couldn't retrieve authentication\", e);\n          }\n        }\n      }\n    } else {\n      request.setAttribute(AuthenticationPlugin.class.getName(), zkAuthentication.getPromptHeaders());\n      filterChain.doFilter(request, response);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20be168d828ac40d262f85364d02f15b491dd88b","date":1469725145,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/BasicAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/BasicAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"  @Override\n  public boolean doAuthenticate(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws Exception {\n\n    HttpServletRequest request = (HttpServletRequest) servletRequest;\n    HttpServletResponse response = (HttpServletResponse) servletResponse;\n\n    String authHeader = request.getHeader(\"Authorization\");\n    if (authHeader != null) {\n      BasicAuthPlugin.authHeader.set(new BasicHeader(\"Authorization\", authHeader));\n      StringTokenizer st = new StringTokenizer(authHeader);\n      if (st.hasMoreTokens()) {\n        String basic = st.nextToken();\n        if (basic.equalsIgnoreCase(\"Basic\")) {\n          try {\n            String credentials = new String(Base64.decodeBase64(st.nextToken()), \"UTF-8\");\n            int p = credentials.indexOf(\":\");\n            if (p != -1) {\n              final String username = credentials.substring(0, p).trim();\n              String pwd = credentials.substring(p + 1).trim();\n              if (!authenticate(username, pwd)) {\n                authenticationFailure(response, \"Bad credentials\");\n              } else {\n                HttpServletRequestWrapper wrapper = new HttpServletRequestWrapper(request) {\n                  @Override\n                  public Principal getUserPrincipal() {\n                    return new BasicUserPrincipal(username);\n                  }\n                };\n                filterChain.doFilter(wrapper, response);\n                return true;\n              }\n\n            } else {\n              authenticationFailure(response, \"Invalid authentication token\");\n            }\n          } catch (UnsupportedEncodingException e) {\n            throw new Error(\"Couldn't retrieve authentication\", e);\n          }\n        }\n      }\n    } else {\n      if (blockUnknown) {\n        authenticationFailure(response, \"require authentication\");\n      } else {\n        request.setAttribute(AuthenticationPlugin.class.getName(), zkAuthentication.getPromptHeaders());\n        filterChain.doFilter(request, response);\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public void doAuthenticate(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws Exception {\n\n    HttpServletRequest request = (HttpServletRequest) servletRequest;\n    HttpServletResponse response = (HttpServletResponse) servletResponse;\n\n    String authHeader = request.getHeader(\"Authorization\");\n    if (authHeader != null) {\n      BasicAuthPlugin.authHeader.set(new BasicHeader(\"Authorization\", authHeader));\n      StringTokenizer st = new StringTokenizer(authHeader);\n      if (st.hasMoreTokens()) {\n        String basic = st.nextToken();\n        if (basic.equalsIgnoreCase(\"Basic\")) {\n          try {\n            String credentials = new String(Base64.decodeBase64(st.nextToken()), \"UTF-8\");\n            int p = credentials.indexOf(\":\");\n            if (p != -1) {\n              final String username = credentials.substring(0, p).trim();\n              String pwd = credentials.substring(p + 1).trim();\n              if (!authenticate(username, pwd)) {\n                authenticationFailure(response, \"Bad credentials\");\n              } else {\n                HttpServletRequestWrapper wrapper = new HttpServletRequestWrapper(request) {\n                  @Override\n                  public Principal getUserPrincipal() {\n                    return new BasicUserPrincipal(username);\n                  }\n                };\n                filterChain.doFilter(wrapper, response);\n              }\n\n            } else {\n              authenticationFailure(response, \"Invalid authentication token\");\n            }\n          } catch (UnsupportedEncodingException e) {\n            throw new Error(\"Couldn't retrieve authentication\", e);\n          }\n        }\n      }\n    } else {\n      if (blockUnknown) {\n        authenticationFailure(response, \"require authentication\");\n      } else {\n        request.setAttribute(AuthenticationPlugin.class.getName(), zkAuthentication.getPromptHeaders());\n        filterChain.doFilter(request, response);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/security/BasicAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/BasicAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"  @Override\n  public boolean doAuthenticate(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws Exception {\n\n    HttpServletRequest request = (HttpServletRequest) servletRequest;\n    HttpServletResponse response = (HttpServletResponse) servletResponse;\n\n    String authHeader = request.getHeader(\"Authorization\");\n    if (authHeader != null) {\n      BasicAuthPlugin.authHeader.set(new BasicHeader(\"Authorization\", authHeader));\n      StringTokenizer st = new StringTokenizer(authHeader);\n      if (st.hasMoreTokens()) {\n        String basic = st.nextToken();\n        if (basic.equalsIgnoreCase(\"Basic\")) {\n          try {\n            String credentials = new String(Base64.decodeBase64(st.nextToken()), \"UTF-8\");\n            int p = credentials.indexOf(\":\");\n            if (p != -1) {\n              final String username = credentials.substring(0, p).trim();\n              String pwd = credentials.substring(p + 1).trim();\n              if (!authenticate(username, pwd)) {\n                authenticationFailure(response, \"Bad credentials\");\n              } else {\n                HttpServletRequestWrapper wrapper = new HttpServletRequestWrapper(request) {\n                  @Override\n                  public Principal getUserPrincipal() {\n                    return new BasicUserPrincipal(username);\n                  }\n                };\n                filterChain.doFilter(wrapper, response);\n                return true;\n              }\n\n            } else {\n              authenticationFailure(response, \"Invalid authentication token\");\n            }\n          } catch (UnsupportedEncodingException e) {\n            throw new Error(\"Couldn't retrieve authentication\", e);\n          }\n        }\n      }\n    } else {\n      if (blockUnknown) {\n        authenticationFailure(response, \"require authentication\");\n      } else {\n        request.setAttribute(AuthenticationPlugin.class.getName(), zkAuthentication.getPromptHeaders());\n        filterChain.doFilter(request, response);\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public void doAuthenticate(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws Exception {\n\n    HttpServletRequest request = (HttpServletRequest) servletRequest;\n    HttpServletResponse response = (HttpServletResponse) servletResponse;\n\n    String authHeader = request.getHeader(\"Authorization\");\n    if (authHeader != null) {\n      BasicAuthPlugin.authHeader.set(new BasicHeader(\"Authorization\", authHeader));\n      StringTokenizer st = new StringTokenizer(authHeader);\n      if (st.hasMoreTokens()) {\n        String basic = st.nextToken();\n        if (basic.equalsIgnoreCase(\"Basic\")) {\n          try {\n            String credentials = new String(Base64.decodeBase64(st.nextToken()), \"UTF-8\");\n            int p = credentials.indexOf(\":\");\n            if (p != -1) {\n              final String username = credentials.substring(0, p).trim();\n              String pwd = credentials.substring(p + 1).trim();\n              if (!authenticate(username, pwd)) {\n                authenticationFailure(response, \"Bad credentials\");\n              } else {\n                HttpServletRequestWrapper wrapper = new HttpServletRequestWrapper(request) {\n                  @Override\n                  public Principal getUserPrincipal() {\n                    return new BasicUserPrincipal(username);\n                  }\n                };\n                filterChain.doFilter(wrapper, response);\n              }\n\n            } else {\n              authenticationFailure(response, \"Invalid authentication token\");\n            }\n          } catch (UnsupportedEncodingException e) {\n            throw new Error(\"Couldn't retrieve authentication\", e);\n          }\n        }\n      }\n    } else {\n      if (blockUnknown) {\n        authenticationFailure(response, \"require authentication\");\n      } else {\n        request.setAttribute(AuthenticationPlugin.class.getName(), zkAuthentication.getPromptHeaders());\n        filterChain.doFilter(request, response);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b6b27adfd0ae23a874c905f6003b09606641f5f","date":1472324778,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/BasicAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/BasicAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"  @Override\n  public boolean doAuthenticate(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws Exception {\n\n    HttpServletRequest request = (HttpServletRequest) servletRequest;\n    HttpServletResponse response = (HttpServletResponse) servletResponse;\n\n    String authHeader = request.getHeader(\"Authorization\");\n    if (authHeader != null) {\n      BasicAuthPlugin.authHeader.set(new BasicHeader(\"Authorization\", authHeader));\n      StringTokenizer st = new StringTokenizer(authHeader);\n      if (st.hasMoreTokens()) {\n        String basic = st.nextToken();\n        if (basic.equalsIgnoreCase(\"Basic\")) {\n          try {\n            String credentials = new String(Base64.decodeBase64(st.nextToken()), \"UTF-8\");\n            int p = credentials.indexOf(\":\");\n            if (p != -1) {\n              final String username = credentials.substring(0, p).trim();\n              String pwd = credentials.substring(p + 1).trim();\n              if (!authenticate(username, pwd)) {\n                authenticationFailure(response, \"Bad credentials\");\n              } else {\n                HttpServletRequestWrapper wrapper = new HttpServletRequestWrapper(request) {\n                  @Override\n                  public Principal getUserPrincipal() {\n                    return new BasicUserPrincipal(username);\n                  }\n                };\n                filterChain.doFilter(wrapper, response);\n                return true;\n              }\n\n            } else {\n              authenticationFailure(response, \"Invalid authentication token\");\n            }\n          } catch (UnsupportedEncodingException e) {\n            throw new Error(\"Couldn't retrieve authentication\", e);\n          }\n        }\n      }\n    } else {\n      if (blockUnknown) {\n        authenticationFailure(response, \"require authentication for pathinfo :\"+ request.getPathInfo());\n      } else {\n        request.setAttribute(AuthenticationPlugin.class.getName(), zkAuthentication.getPromptHeaders());\n        filterChain.doFilter(request, response);\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean doAuthenticate(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws Exception {\n\n    HttpServletRequest request = (HttpServletRequest) servletRequest;\n    HttpServletResponse response = (HttpServletResponse) servletResponse;\n\n    String authHeader = request.getHeader(\"Authorization\");\n    if (authHeader != null) {\n      BasicAuthPlugin.authHeader.set(new BasicHeader(\"Authorization\", authHeader));\n      StringTokenizer st = new StringTokenizer(authHeader);\n      if (st.hasMoreTokens()) {\n        String basic = st.nextToken();\n        if (basic.equalsIgnoreCase(\"Basic\")) {\n          try {\n            String credentials = new String(Base64.decodeBase64(st.nextToken()), \"UTF-8\");\n            int p = credentials.indexOf(\":\");\n            if (p != -1) {\n              final String username = credentials.substring(0, p).trim();\n              String pwd = credentials.substring(p + 1).trim();\n              if (!authenticate(username, pwd)) {\n                authenticationFailure(response, \"Bad credentials\");\n              } else {\n                HttpServletRequestWrapper wrapper = new HttpServletRequestWrapper(request) {\n                  @Override\n                  public Principal getUserPrincipal() {\n                    return new BasicUserPrincipal(username);\n                  }\n                };\n                filterChain.doFilter(wrapper, response);\n                return true;\n              }\n\n            } else {\n              authenticationFailure(response, \"Invalid authentication token\");\n            }\n          } catch (UnsupportedEncodingException e) {\n            throw new Error(\"Couldn't retrieve authentication\", e);\n          }\n        }\n      }\n    } else {\n      if (blockUnknown) {\n        authenticationFailure(response, \"require authentication\");\n      } else {\n        request.setAttribute(AuthenticationPlugin.class.getName(), zkAuthentication.getPromptHeaders());\n        filterChain.doFilter(request, response);\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"982956f030abe21ea20792c0869b3f78086d41c6","date":1472453682,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/BasicAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/BasicAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"  @Override\n  public boolean doAuthenticate(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws Exception {\n\n    HttpServletRequest request = (HttpServletRequest) servletRequest;\n    HttpServletResponse response = (HttpServletResponse) servletResponse;\n\n    String authHeader = request.getHeader(\"Authorization\");\n    if (authHeader != null) {\n      BasicAuthPlugin.authHeader.set(new BasicHeader(\"Authorization\", authHeader));\n      StringTokenizer st = new StringTokenizer(authHeader);\n      if (st.hasMoreTokens()) {\n        String basic = st.nextToken();\n        if (basic.equalsIgnoreCase(\"Basic\")) {\n          try {\n            String credentials = new String(Base64.decodeBase64(st.nextToken()), \"UTF-8\");\n            int p = credentials.indexOf(\":\");\n            if (p != -1) {\n              final String username = credentials.substring(0, p).trim();\n              String pwd = credentials.substring(p + 1).trim();\n              if (!authenticate(username, pwd)) {\n                authenticationFailure(response, \"Bad credentials\");\n              } else {\n                HttpServletRequestWrapper wrapper = new HttpServletRequestWrapper(request) {\n                  @Override\n                  public Principal getUserPrincipal() {\n                    return new BasicUserPrincipal(username);\n                  }\n                };\n                filterChain.doFilter(wrapper, response);\n                return true;\n              }\n\n            } else {\n              authenticationFailure(response, \"Invalid authentication token\");\n            }\n          } catch (UnsupportedEncodingException e) {\n            throw new Error(\"Couldn't retrieve authentication\", e);\n          }\n        }\n      }\n    } else {\n      if (blockUnknown) {\n        authenticationFailure(response, \"require authentication\");\n      } else {\n        request.setAttribute(AuthenticationPlugin.class.getName(), zkAuthentication.getPromptHeaders());\n        filterChain.doFilter(request, response);\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean doAuthenticate(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws Exception {\n\n    HttpServletRequest request = (HttpServletRequest) servletRequest;\n    HttpServletResponse response = (HttpServletResponse) servletResponse;\n\n    String authHeader = request.getHeader(\"Authorization\");\n    if (authHeader != null) {\n      BasicAuthPlugin.authHeader.set(new BasicHeader(\"Authorization\", authHeader));\n      StringTokenizer st = new StringTokenizer(authHeader);\n      if (st.hasMoreTokens()) {\n        String basic = st.nextToken();\n        if (basic.equalsIgnoreCase(\"Basic\")) {\n          try {\n            String credentials = new String(Base64.decodeBase64(st.nextToken()), \"UTF-8\");\n            int p = credentials.indexOf(\":\");\n            if (p != -1) {\n              final String username = credentials.substring(0, p).trim();\n              String pwd = credentials.substring(p + 1).trim();\n              if (!authenticate(username, pwd)) {\n                authenticationFailure(response, \"Bad credentials\");\n              } else {\n                HttpServletRequestWrapper wrapper = new HttpServletRequestWrapper(request) {\n                  @Override\n                  public Principal getUserPrincipal() {\n                    return new BasicUserPrincipal(username);\n                  }\n                };\n                filterChain.doFilter(wrapper, response);\n                return true;\n              }\n\n            } else {\n              authenticationFailure(response, \"Invalid authentication token\");\n            }\n          } catch (UnsupportedEncodingException e) {\n            throw new Error(\"Couldn't retrieve authentication\", e);\n          }\n        }\n      }\n    } else {\n      if (blockUnknown) {\n        authenticationFailure(response, \"require authentication for pathinfo :\"+ request.getPathInfo());\n      } else {\n        request.setAttribute(AuthenticationPlugin.class.getName(), zkAuthentication.getPromptHeaders());\n        filterChain.doFilter(request, response);\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/security/BasicAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/BasicAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"  @Override\n  public boolean doAuthenticate(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws Exception {\n\n    HttpServletRequest request = (HttpServletRequest) servletRequest;\n    HttpServletResponse response = (HttpServletResponse) servletResponse;\n\n    String authHeader = request.getHeader(\"Authorization\");\n    if (authHeader != null) {\n      BasicAuthPlugin.authHeader.set(new BasicHeader(\"Authorization\", authHeader));\n      StringTokenizer st = new StringTokenizer(authHeader);\n      if (st.hasMoreTokens()) {\n        String basic = st.nextToken();\n        if (basic.equalsIgnoreCase(\"Basic\")) {\n          try {\n            String credentials = new String(Base64.decodeBase64(st.nextToken()), \"UTF-8\");\n            int p = credentials.indexOf(\":\");\n            if (p != -1) {\n              final String username = credentials.substring(0, p).trim();\n              String pwd = credentials.substring(p + 1).trim();\n              if (!authenticate(username, pwd)) {\n                authenticationFailure(response, \"Bad credentials\");\n              } else {\n                HttpServletRequestWrapper wrapper = new HttpServletRequestWrapper(request) {\n                  @Override\n                  public Principal getUserPrincipal() {\n                    return new BasicUserPrincipal(username);\n                  }\n                };\n                filterChain.doFilter(wrapper, response);\n                return true;\n              }\n\n            } else {\n              authenticationFailure(response, \"Invalid authentication token\");\n            }\n          } catch (UnsupportedEncodingException e) {\n            throw new Error(\"Couldn't retrieve authentication\", e);\n          }\n        }\n      }\n    } else {\n      if (blockUnknown) {\n        authenticationFailure(response, \"require authentication\");\n      } else {\n        request.setAttribute(AuthenticationPlugin.class.getName(), zkAuthentication.getPromptHeaders());\n        filterChain.doFilter(request, response);\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public void doAuthenticate(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws Exception {\n\n    HttpServletRequest request = (HttpServletRequest) servletRequest;\n    HttpServletResponse response = (HttpServletResponse) servletResponse;\n\n    String authHeader = request.getHeader(\"Authorization\");\n    if (authHeader != null) {\n      BasicAuthPlugin.authHeader.set(new BasicHeader(\"Authorization\", authHeader));\n      StringTokenizer st = new StringTokenizer(authHeader);\n      if (st.hasMoreTokens()) {\n        String basic = st.nextToken();\n        if (basic.equalsIgnoreCase(\"Basic\")) {\n          try {\n            String credentials = new String(Base64.decodeBase64(st.nextToken()), \"UTF-8\");\n            int p = credentials.indexOf(\":\");\n            if (p != -1) {\n              final String username = credentials.substring(0, p).trim();\n              String pwd = credentials.substring(p + 1).trim();\n              if (!authenticate(username, pwd)) {\n                authenticationFailure(response, \"Bad credentials\");\n              } else {\n                HttpServletRequestWrapper wrapper = new HttpServletRequestWrapper(request) {\n                  @Override\n                  public Principal getUserPrincipal() {\n                    return new BasicUserPrincipal(username);\n                  }\n                };\n                filterChain.doFilter(wrapper, response);\n              }\n\n            } else {\n              authenticationFailure(response, \"Invalid authentication token\");\n            }\n          } catch (UnsupportedEncodingException e) {\n            throw new Error(\"Couldn't retrieve authentication\", e);\n          }\n        }\n      }\n    } else {\n      if (blockUnknown) {\n        authenticationFailure(response, \"require authentication\");\n      } else {\n        request.setAttribute(AuthenticationPlugin.class.getName(), zkAuthentication.getPromptHeaders());\n        filterChain.doFilter(request, response);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"170ef9c82c0d27d4151feff316ba63fbedd91bbf","date":1477436680,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/BasicAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/BasicAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"  @Override\n  public boolean doAuthenticate(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws Exception {\n\n    HttpServletRequest request = (HttpServletRequest) servletRequest;\n    HttpServletResponse response = (HttpServletResponse) servletResponse;\n\n    String authHeader = request.getHeader(\"Authorization\");\n    if (authHeader != null) {\n      BasicAuthPlugin.authHeader.set(new BasicHeader(\"Authorization\", authHeader));\n      StringTokenizer st = new StringTokenizer(authHeader);\n      if (st.hasMoreTokens()) {\n        String basic = st.nextToken();\n        if (basic.equalsIgnoreCase(\"Basic\")) {\n          try {\n            String credentials = new String(Base64.decodeBase64(st.nextToken()), \"UTF-8\");\n            int p = credentials.indexOf(\":\");\n            if (p != -1) {\n              final String username = credentials.substring(0, p).trim();\n              String pwd = credentials.substring(p + 1).trim();\n              if (!authenticate(username, pwd)) {\n                authenticationFailure(response, \"Bad credentials\");\n              } else {\n                HttpServletRequestWrapper wrapper = new HttpServletRequestWrapper(request) {\n                  @Override\n                  public Principal getUserPrincipal() {\n                    return new BasicUserPrincipal(username);\n                  }\n                };\n                filterChain.doFilter(wrapper, response);\n                return true;\n              }\n\n            } else {\n              authenticationFailure(response, \"Invalid authentication token\");\n            }\n          } catch (UnsupportedEncodingException e) {\n            throw new Error(\"Couldn't retrieve authentication\", e);\n          }\n        }\n      }\n    } else {\n      if (blockUnknown) {\n        authenticationFailure(response, \"require authentication\");\n      } else {\n        request.setAttribute(AuthenticationPlugin.class.getName(), authenticationProvider.getPromptHeaders());\n        filterChain.doFilter(request, response);\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean doAuthenticate(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws Exception {\n\n    HttpServletRequest request = (HttpServletRequest) servletRequest;\n    HttpServletResponse response = (HttpServletResponse) servletResponse;\n\n    String authHeader = request.getHeader(\"Authorization\");\n    if (authHeader != null) {\n      BasicAuthPlugin.authHeader.set(new BasicHeader(\"Authorization\", authHeader));\n      StringTokenizer st = new StringTokenizer(authHeader);\n      if (st.hasMoreTokens()) {\n        String basic = st.nextToken();\n        if (basic.equalsIgnoreCase(\"Basic\")) {\n          try {\n            String credentials = new String(Base64.decodeBase64(st.nextToken()), \"UTF-8\");\n            int p = credentials.indexOf(\":\");\n            if (p != -1) {\n              final String username = credentials.substring(0, p).trim();\n              String pwd = credentials.substring(p + 1).trim();\n              if (!authenticate(username, pwd)) {\n                authenticationFailure(response, \"Bad credentials\");\n              } else {\n                HttpServletRequestWrapper wrapper = new HttpServletRequestWrapper(request) {\n                  @Override\n                  public Principal getUserPrincipal() {\n                    return new BasicUserPrincipal(username);\n                  }\n                };\n                filterChain.doFilter(wrapper, response);\n                return true;\n              }\n\n            } else {\n              authenticationFailure(response, \"Invalid authentication token\");\n            }\n          } catch (UnsupportedEncodingException e) {\n            throw new Error(\"Couldn't retrieve authentication\", e);\n          }\n        }\n      }\n    } else {\n      if (blockUnknown) {\n        authenticationFailure(response, \"require authentication\");\n      } else {\n        request.setAttribute(AuthenticationPlugin.class.getName(), zkAuthentication.getPromptHeaders());\n        filterChain.doFilter(request, response);\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b363b110592b02d7f488aff0dbe40a53d3ce81df","date":1477469211,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/security/BasicAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/BasicAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"  @Override\n  public boolean doAuthenticate(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws Exception {\n\n    HttpServletRequest request = (HttpServletRequest) servletRequest;\n    HttpServletResponse response = (HttpServletResponse) servletResponse;\n\n    String authHeader = request.getHeader(\"Authorization\");\n    if (authHeader != null) {\n      BasicAuthPlugin.authHeader.set(new BasicHeader(\"Authorization\", authHeader));\n      StringTokenizer st = new StringTokenizer(authHeader);\n      if (st.hasMoreTokens()) {\n        String basic = st.nextToken();\n        if (basic.equalsIgnoreCase(\"Basic\")) {\n          try {\n            String credentials = new String(Base64.decodeBase64(st.nextToken()), \"UTF-8\");\n            int p = credentials.indexOf(\":\");\n            if (p != -1) {\n              final String username = credentials.substring(0, p).trim();\n              String pwd = credentials.substring(p + 1).trim();\n              if (!authenticate(username, pwd)) {\n                authenticationFailure(response, \"Bad credentials\");\n              } else {\n                HttpServletRequestWrapper wrapper = new HttpServletRequestWrapper(request) {\n                  @Override\n                  public Principal getUserPrincipal() {\n                    return new BasicUserPrincipal(username);\n                  }\n                };\n                filterChain.doFilter(wrapper, response);\n                return true;\n              }\n\n            } else {\n              authenticationFailure(response, \"Invalid authentication token\");\n            }\n          } catch (UnsupportedEncodingException e) {\n            throw new Error(\"Couldn't retrieve authentication\", e);\n          }\n        }\n      }\n    } else {\n      if (blockUnknown) {\n        authenticationFailure(response, \"require authentication\");\n      } else {\n        request.setAttribute(AuthenticationPlugin.class.getName(), authenticationProvider.getPromptHeaders());\n        filterChain.doFilter(request, response);\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean doAuthenticate(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws Exception {\n\n    HttpServletRequest request = (HttpServletRequest) servletRequest;\n    HttpServletResponse response = (HttpServletResponse) servletResponse;\n\n    String authHeader = request.getHeader(\"Authorization\");\n    if (authHeader != null) {\n      BasicAuthPlugin.authHeader.set(new BasicHeader(\"Authorization\", authHeader));\n      StringTokenizer st = new StringTokenizer(authHeader);\n      if (st.hasMoreTokens()) {\n        String basic = st.nextToken();\n        if (basic.equalsIgnoreCase(\"Basic\")) {\n          try {\n            String credentials = new String(Base64.decodeBase64(st.nextToken()), \"UTF-8\");\n            int p = credentials.indexOf(\":\");\n            if (p != -1) {\n              final String username = credentials.substring(0, p).trim();\n              String pwd = credentials.substring(p + 1).trim();\n              if (!authenticate(username, pwd)) {\n                authenticationFailure(response, \"Bad credentials\");\n              } else {\n                HttpServletRequestWrapper wrapper = new HttpServletRequestWrapper(request) {\n                  @Override\n                  public Principal getUserPrincipal() {\n                    return new BasicUserPrincipal(username);\n                  }\n                };\n                filterChain.doFilter(wrapper, response);\n                return true;\n              }\n\n            } else {\n              authenticationFailure(response, \"Invalid authentication token\");\n            }\n          } catch (UnsupportedEncodingException e) {\n            throw new Error(\"Couldn't retrieve authentication\", e);\n          }\n        }\n      }\n    } else {\n      if (blockUnknown) {\n        authenticationFailure(response, \"require authentication\");\n      } else {\n        request.setAttribute(AuthenticationPlugin.class.getName(), zkAuthentication.getPromptHeaders());\n        filterChain.doFilter(request, response);\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/security/BasicAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/BasicAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"  @Override\n  public boolean doAuthenticate(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws Exception {\n\n    HttpServletRequest request = (HttpServletRequest) servletRequest;\n    HttpServletResponse response = (HttpServletResponse) servletResponse;\n\n    String authHeader = request.getHeader(\"Authorization\");\n    if (authHeader != null) {\n      BasicAuthPlugin.authHeader.set(new BasicHeader(\"Authorization\", authHeader));\n      StringTokenizer st = new StringTokenizer(authHeader);\n      if (st.hasMoreTokens()) {\n        String basic = st.nextToken();\n        if (basic.equalsIgnoreCase(\"Basic\")) {\n          try {\n            String credentials = new String(Base64.decodeBase64(st.nextToken()), \"UTF-8\");\n            int p = credentials.indexOf(\":\");\n            if (p != -1) {\n              final String username = credentials.substring(0, p).trim();\n              String pwd = credentials.substring(p + 1).trim();\n              if (!authenticate(username, pwd)) {\n                authenticationFailure(response, \"Bad credentials\");\n              } else {\n                HttpServletRequestWrapper wrapper = new HttpServletRequestWrapper(request) {\n                  @Override\n                  public Principal getUserPrincipal() {\n                    return new BasicUserPrincipal(username);\n                  }\n                };\n                filterChain.doFilter(wrapper, response);\n                return true;\n              }\n\n            } else {\n              authenticationFailure(response, \"Invalid authentication token\");\n            }\n          } catch (UnsupportedEncodingException e) {\n            throw new Error(\"Couldn't retrieve authentication\", e);\n          }\n        }\n      }\n    } else {\n      if (blockUnknown) {\n        authenticationFailure(response, \"require authentication\");\n      } else {\n        request.setAttribute(AuthenticationPlugin.class.getName(), authenticationProvider.getPromptHeaders());\n        filterChain.doFilter(request, response);\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean doAuthenticate(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws Exception {\n\n    HttpServletRequest request = (HttpServletRequest) servletRequest;\n    HttpServletResponse response = (HttpServletResponse) servletResponse;\n\n    String authHeader = request.getHeader(\"Authorization\");\n    if (authHeader != null) {\n      BasicAuthPlugin.authHeader.set(new BasicHeader(\"Authorization\", authHeader));\n      StringTokenizer st = new StringTokenizer(authHeader);\n      if (st.hasMoreTokens()) {\n        String basic = st.nextToken();\n        if (basic.equalsIgnoreCase(\"Basic\")) {\n          try {\n            String credentials = new String(Base64.decodeBase64(st.nextToken()), \"UTF-8\");\n            int p = credentials.indexOf(\":\");\n            if (p != -1) {\n              final String username = credentials.substring(0, p).trim();\n              String pwd = credentials.substring(p + 1).trim();\n              if (!authenticate(username, pwd)) {\n                authenticationFailure(response, \"Bad credentials\");\n              } else {\n                HttpServletRequestWrapper wrapper = new HttpServletRequestWrapper(request) {\n                  @Override\n                  public Principal getUserPrincipal() {\n                    return new BasicUserPrincipal(username);\n                  }\n                };\n                filterChain.doFilter(wrapper, response);\n                return true;\n              }\n\n            } else {\n              authenticationFailure(response, \"Invalid authentication token\");\n            }\n          } catch (UnsupportedEncodingException e) {\n            throw new Error(\"Couldn't retrieve authentication\", e);\n          }\n        }\n      }\n    } else {\n      if (blockUnknown) {\n        authenticationFailure(response, \"require authentication\");\n      } else {\n        request.setAttribute(AuthenticationPlugin.class.getName(), zkAuthentication.getPromptHeaders());\n        filterChain.doFilter(request, response);\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"691f3fd725e13e6708491507e361eaecf91b59f6","date":1478011101,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/BasicAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/BasicAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"  @Override\n  public boolean doAuthenticate(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws Exception {\n\n    HttpServletRequest request = (HttpServletRequest) servletRequest;\n    HttpServletResponse response = (HttpServletResponse) servletResponse;\n\n    String authHeader = request.getHeader(\"Authorization\");\n    if (authHeader != null) {\n      BasicAuthPlugin.authHeader.set(new BasicHeader(\"Authorization\", authHeader));\n      StringTokenizer st = new StringTokenizer(authHeader);\n      if (st.hasMoreTokens()) {\n        String basic = st.nextToken();\n        if (basic.equalsIgnoreCase(\"Basic\")) {\n          try {\n            String credentials = new String(Base64.decodeBase64(st.nextToken()), \"UTF-8\");\n            int p = credentials.indexOf(\":\");\n            if (p != -1) {\n              final String username = credentials.substring(0, p).trim();\n              String pwd = credentials.substring(p + 1).trim();\n              if (!authenticate(username, pwd)) {\n                log.debug(\"Bad auth credentials supplied in Authorization header\");\n                authenticationFailure(response, \"Bad credentials\");\n              } else {\n                HttpServletRequestWrapper wrapper = new HttpServletRequestWrapper(request) {\n                  @Override\n                  public Principal getUserPrincipal() {\n                    return new BasicUserPrincipal(username);\n                  }\n                };\n                filterChain.doFilter(wrapper, response);\n                return true;\n              }\n\n            } else {\n              authenticationFailure(response, \"Invalid authentication token\");\n            }\n          } catch (UnsupportedEncodingException e) {\n            throw new Error(\"Couldn't retrieve authentication\", e);\n          }\n        }\n      }\n    } else {\n      if (blockUnknown) {\n        authenticationFailure(response, \"require authentication\");\n      } else {\n        request.setAttribute(AuthenticationPlugin.class.getName(), authenticationProvider.getPromptHeaders());\n        filterChain.doFilter(request, response);\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean doAuthenticate(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws Exception {\n\n    HttpServletRequest request = (HttpServletRequest) servletRequest;\n    HttpServletResponse response = (HttpServletResponse) servletResponse;\n\n    String authHeader = request.getHeader(\"Authorization\");\n    if (authHeader != null) {\n      BasicAuthPlugin.authHeader.set(new BasicHeader(\"Authorization\", authHeader));\n      StringTokenizer st = new StringTokenizer(authHeader);\n      if (st.hasMoreTokens()) {\n        String basic = st.nextToken();\n        if (basic.equalsIgnoreCase(\"Basic\")) {\n          try {\n            String credentials = new String(Base64.decodeBase64(st.nextToken()), \"UTF-8\");\n            int p = credentials.indexOf(\":\");\n            if (p != -1) {\n              final String username = credentials.substring(0, p).trim();\n              String pwd = credentials.substring(p + 1).trim();\n              if (!authenticate(username, pwd)) {\n                authenticationFailure(response, \"Bad credentials\");\n              } else {\n                HttpServletRequestWrapper wrapper = new HttpServletRequestWrapper(request) {\n                  @Override\n                  public Principal getUserPrincipal() {\n                    return new BasicUserPrincipal(username);\n                  }\n                };\n                filterChain.doFilter(wrapper, response);\n                return true;\n              }\n\n            } else {\n              authenticationFailure(response, \"Invalid authentication token\");\n            }\n          } catch (UnsupportedEncodingException e) {\n            throw new Error(\"Couldn't retrieve authentication\", e);\n          }\n        }\n      }\n    } else {\n      if (blockUnknown) {\n        authenticationFailure(response, \"require authentication\");\n      } else {\n        request.setAttribute(AuthenticationPlugin.class.getName(), authenticationProvider.getPromptHeaders());\n        filterChain.doFilter(request, response);\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5809ad14f6ea649a54ac2b8b8826ec0106bd2c3f","date":1478015910,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/security/BasicAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/BasicAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"  @Override\n  public boolean doAuthenticate(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws Exception {\n\n    HttpServletRequest request = (HttpServletRequest) servletRequest;\n    HttpServletResponse response = (HttpServletResponse) servletResponse;\n\n    String authHeader = request.getHeader(\"Authorization\");\n    if (authHeader != null) {\n      BasicAuthPlugin.authHeader.set(new BasicHeader(\"Authorization\", authHeader));\n      StringTokenizer st = new StringTokenizer(authHeader);\n      if (st.hasMoreTokens()) {\n        String basic = st.nextToken();\n        if (basic.equalsIgnoreCase(\"Basic\")) {\n          try {\n            String credentials = new String(Base64.decodeBase64(st.nextToken()), \"UTF-8\");\n            int p = credentials.indexOf(\":\");\n            if (p != -1) {\n              final String username = credentials.substring(0, p).trim();\n              String pwd = credentials.substring(p + 1).trim();\n              if (!authenticate(username, pwd)) {\n                log.debug(\"Bad auth credentials supplied in Authorization header\");\n                authenticationFailure(response, \"Bad credentials\");\n              } else {\n                HttpServletRequestWrapper wrapper = new HttpServletRequestWrapper(request) {\n                  @Override\n                  public Principal getUserPrincipal() {\n                    return new BasicUserPrincipal(username);\n                  }\n                };\n                filterChain.doFilter(wrapper, response);\n                return true;\n              }\n\n            } else {\n              authenticationFailure(response, \"Invalid authentication token\");\n            }\n          } catch (UnsupportedEncodingException e) {\n            throw new Error(\"Couldn't retrieve authentication\", e);\n          }\n        }\n      }\n    } else {\n      if (blockUnknown) {\n        authenticationFailure(response, \"require authentication\");\n      } else {\n        request.setAttribute(AuthenticationPlugin.class.getName(), authenticationProvider.getPromptHeaders());\n        filterChain.doFilter(request, response);\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean doAuthenticate(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws Exception {\n\n    HttpServletRequest request = (HttpServletRequest) servletRequest;\n    HttpServletResponse response = (HttpServletResponse) servletResponse;\n\n    String authHeader = request.getHeader(\"Authorization\");\n    if (authHeader != null) {\n      BasicAuthPlugin.authHeader.set(new BasicHeader(\"Authorization\", authHeader));\n      StringTokenizer st = new StringTokenizer(authHeader);\n      if (st.hasMoreTokens()) {\n        String basic = st.nextToken();\n        if (basic.equalsIgnoreCase(\"Basic\")) {\n          try {\n            String credentials = new String(Base64.decodeBase64(st.nextToken()), \"UTF-8\");\n            int p = credentials.indexOf(\":\");\n            if (p != -1) {\n              final String username = credentials.substring(0, p).trim();\n              String pwd = credentials.substring(p + 1).trim();\n              if (!authenticate(username, pwd)) {\n                authenticationFailure(response, \"Bad credentials\");\n              } else {\n                HttpServletRequestWrapper wrapper = new HttpServletRequestWrapper(request) {\n                  @Override\n                  public Principal getUserPrincipal() {\n                    return new BasicUserPrincipal(username);\n                  }\n                };\n                filterChain.doFilter(wrapper, response);\n                return true;\n              }\n\n            } else {\n              authenticationFailure(response, \"Invalid authentication token\");\n            }\n          } catch (UnsupportedEncodingException e) {\n            throw new Error(\"Couldn't retrieve authentication\", e);\n          }\n        }\n      }\n    } else {\n      if (blockUnknown) {\n        authenticationFailure(response, \"require authentication\");\n      } else {\n        request.setAttribute(AuthenticationPlugin.class.getName(), authenticationProvider.getPromptHeaders());\n        filterChain.doFilter(request, response);\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e5b14c1a3febf27d88acf3083b7551876933aa5","date":1544607443,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/BasicAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/BasicAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"  @Override\n  public boolean doAuthenticate(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws Exception {\n\n    HttpServletRequest request = (HttpServletRequest) servletRequest;\n    HttpServletResponse response = (HttpServletResponse) servletResponse;\n\n    String authHeader = request.getHeader(\"Authorization\");\n    boolean isAjaxRequest = isAjaxRequest(request);\n    \n    if (authHeader != null) {\n      BasicAuthPlugin.authHeader.set(new BasicHeader(\"Authorization\", authHeader));\n      StringTokenizer st = new StringTokenizer(authHeader);\n      if (st.hasMoreTokens()) {\n        String basic = st.nextToken();\n        if (basic.equalsIgnoreCase(\"Basic\")) {\n          try {\n            String credentials = new String(Base64.decodeBase64(st.nextToken()), \"UTF-8\");\n            int p = credentials.indexOf(\":\");\n            if (p != -1) {\n              final String username = credentials.substring(0, p).trim();\n              String pwd = credentials.substring(p + 1).trim();\n              if (!authenticate(username, pwd)) {\n                log.debug(\"Bad auth credentials supplied in Authorization header\");\n                authenticationFailure(response, isAjaxRequest, \"Bad credentials\");\n              } else {\n                HttpServletRequestWrapper wrapper = new HttpServletRequestWrapper(request) {\n                  @Override\n                  public Principal getUserPrincipal() {\n                    return new BasicUserPrincipal(username);\n                  }\n                };\n                filterChain.doFilter(wrapper, response);\n                return true;\n              }\n\n            } else {\n              authenticationFailure(response, isAjaxRequest, \"Invalid authentication token\");\n            }\n          } catch (UnsupportedEncodingException e) {\n            throw new Error(\"Couldn't retrieve authentication\", e);\n          }\n        }\n      }\n    } else {\n      if (blockUnknown) {\n        authenticationFailure(response, isAjaxRequest, \"require authentication\");\n      } else {\n        request.setAttribute(AuthenticationPlugin.class.getName(), authenticationProvider.getPromptHeaders());\n        filterChain.doFilter(request, response);\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean doAuthenticate(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws Exception {\n\n    HttpServletRequest request = (HttpServletRequest) servletRequest;\n    HttpServletResponse response = (HttpServletResponse) servletResponse;\n\n    String authHeader = request.getHeader(\"Authorization\");\n    if (authHeader != null) {\n      BasicAuthPlugin.authHeader.set(new BasicHeader(\"Authorization\", authHeader));\n      StringTokenizer st = new StringTokenizer(authHeader);\n      if (st.hasMoreTokens()) {\n        String basic = st.nextToken();\n        if (basic.equalsIgnoreCase(\"Basic\")) {\n          try {\n            String credentials = new String(Base64.decodeBase64(st.nextToken()), \"UTF-8\");\n            int p = credentials.indexOf(\":\");\n            if (p != -1) {\n              final String username = credentials.substring(0, p).trim();\n              String pwd = credentials.substring(p + 1).trim();\n              if (!authenticate(username, pwd)) {\n                log.debug(\"Bad auth credentials supplied in Authorization header\");\n                authenticationFailure(response, \"Bad credentials\");\n              } else {\n                HttpServletRequestWrapper wrapper = new HttpServletRequestWrapper(request) {\n                  @Override\n                  public Principal getUserPrincipal() {\n                    return new BasicUserPrincipal(username);\n                  }\n                };\n                filterChain.doFilter(wrapper, response);\n                return true;\n              }\n\n            } else {\n              authenticationFailure(response, \"Invalid authentication token\");\n            }\n          } catch (UnsupportedEncodingException e) {\n            throw new Error(\"Couldn't retrieve authentication\", e);\n          }\n        }\n      }\n    } else {\n      if (blockUnknown) {\n        authenticationFailure(response, \"require authentication\");\n      } else {\n        request.setAttribute(AuthenticationPlugin.class.getName(), authenticationProvider.getPromptHeaders());\n        filterChain.doFilter(request, response);\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85397dd93927c17347c6bf89800cd0fc566c2d03","date":1544610812,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/BasicAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/BasicAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"  @Override\n  public boolean doAuthenticate(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws Exception {\n\n    HttpServletRequest request = (HttpServletRequest) servletRequest;\n    HttpServletResponse response = (HttpServletResponse) servletResponse;\n\n    String authHeader = request.getHeader(\"Authorization\");\n    boolean isAjaxRequest = isAjaxRequest(request);\n    \n    if (authHeader != null) {\n      BasicAuthPlugin.authHeader.set(new BasicHeader(\"Authorization\", authHeader));\n      StringTokenizer st = new StringTokenizer(authHeader);\n      if (st.hasMoreTokens()) {\n        String basic = st.nextToken();\n        if (basic.equalsIgnoreCase(\"Basic\")) {\n          if (st.hasMoreTokens()) {\n            try {\n              String credentials = new String(Base64.decodeBase64(st.nextToken()), \"UTF-8\");\n              int p = credentials.indexOf(\":\");\n              if (p != -1) {\n                final String username = credentials.substring(0, p).trim();\n                String pwd = credentials.substring(p + 1).trim();\n                if (!authenticate(username, pwd)) {\n                  numWrongCredentials.inc();\n                  log.debug(\"Bad auth credentials supplied in Authorization header\");\n                  authenticationFailure(response, isAjaxRequest, \"Bad credentials\");\n                  return false;\n                } else {\n                  HttpServletRequestWrapper wrapper = new HttpServletRequestWrapper(request) {\n                    @Override\n                    public Principal getUserPrincipal() {\n                      return new BasicUserPrincipal(username);\n                    }\n                  };\n                  numAuthenticated.inc();\n                  filterChain.doFilter(wrapper, response);\n                  return true;\n                }\n              } else {\n                numErrors.mark();\n                authenticationFailure(response, isAjaxRequest, \"Invalid authentication token\");\n                return false;\n              }\n            } catch (UnsupportedEncodingException e) {\n              throw new Error(\"Couldn't retrieve authentication\", e);\n            }\n          } else {\n            numErrors.mark();\n            authenticationFailure(response, isAjaxRequest, \"Malformed Basic Auth header\");\n            return false;\n          }\n        }\n      }\n    }\n    \n    // No auth header OR header empty OR Authorization header not of type Basic, i.e. \"unknown\" user\n    if (blockUnknown) {\n      numMissingCredentials.inc();\n      authenticationFailure(response, isAjaxRequest, \"require authentication\");\n      return false;\n    } else {\n      numPassThrough.inc();\n      request.setAttribute(AuthenticationPlugin.class.getName(), authenticationProvider.getPromptHeaders());\n      filterChain.doFilter(request, response);\n      return true;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean doAuthenticate(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws Exception {\n\n    HttpServletRequest request = (HttpServletRequest) servletRequest;\n    HttpServletResponse response = (HttpServletResponse) servletResponse;\n\n    String authHeader = request.getHeader(\"Authorization\");\n    boolean isAjaxRequest = isAjaxRequest(request);\n    \n    if (authHeader != null) {\n      BasicAuthPlugin.authHeader.set(new BasicHeader(\"Authorization\", authHeader));\n      StringTokenizer st = new StringTokenizer(authHeader);\n      if (st.hasMoreTokens()) {\n        String basic = st.nextToken();\n        if (basic.equalsIgnoreCase(\"Basic\")) {\n          try {\n            String credentials = new String(Base64.decodeBase64(st.nextToken()), \"UTF-8\");\n            int p = credentials.indexOf(\":\");\n            if (p != -1) {\n              final String username = credentials.substring(0, p).trim();\n              String pwd = credentials.substring(p + 1).trim();\n              if (!authenticate(username, pwd)) {\n                log.debug(\"Bad auth credentials supplied in Authorization header\");\n                authenticationFailure(response, isAjaxRequest, \"Bad credentials\");\n              } else {\n                HttpServletRequestWrapper wrapper = new HttpServletRequestWrapper(request) {\n                  @Override\n                  public Principal getUserPrincipal() {\n                    return new BasicUserPrincipal(username);\n                  }\n                };\n                filterChain.doFilter(wrapper, response);\n                return true;\n              }\n\n            } else {\n              authenticationFailure(response, isAjaxRequest, \"Invalid authentication token\");\n            }\n          } catch (UnsupportedEncodingException e) {\n            throw new Error(\"Couldn't retrieve authentication\", e);\n          }\n        }\n      }\n    } else {\n      if (blockUnknown) {\n        authenticationFailure(response, isAjaxRequest, \"require authentication\");\n      } else {\n        request.setAttribute(AuthenticationPlugin.class.getName(), authenticationProvider.getPromptHeaders());\n        filterChain.doFilter(request, response);\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4bb519c79b76e52145e37b6681a7012525ed5f4b","date":1544694716,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/BasicAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/BasicAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"  @Override\n  public boolean doAuthenticate(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws Exception {\n\n    HttpServletRequest request = (HttpServletRequest) servletRequest;\n    HttpServletResponse response = (HttpServletResponse) servletResponse;\n\n    String authHeader = request.getHeader(\"Authorization\");\n    boolean isAjaxRequest = isAjaxRequest(request);\n    \n    if (authHeader != null) {\n      BasicAuthPlugin.authHeader.set(new BasicHeader(\"Authorization\", authHeader));\n      StringTokenizer st = new StringTokenizer(authHeader);\n      if (st.hasMoreTokens()) {\n        String basic = st.nextToken();\n        if (basic.equalsIgnoreCase(\"Basic\")) {\n          if (st.hasMoreTokens()) {\n            try {\n              String credentials = new String(Base64.decodeBase64(st.nextToken()), \"UTF-8\");\n              int p = credentials.indexOf(\":\");\n              if (p != -1) {\n                final String username = credentials.substring(0, p).trim();\n                String pwd = credentials.substring(p + 1).trim();\n                if (!authenticate(username, pwd)) {\n                  numWrongCredentials.inc();\n                  log.debug(\"Bad auth credentials supplied in Authorization header\");\n                  authenticationFailure(response, isAjaxRequest, \"Bad credentials\");\n                  return false;\n                } else {\n                  HttpServletRequestWrapper wrapper = new HttpServletRequestWrapper(request) {\n                    @Override\n                    public Principal getUserPrincipal() {\n                      return new BasicAuthUserPrincipal(username, pwd);\n                    }\n                  };\n                  numAuthenticated.inc();\n                  filterChain.doFilter(wrapper, response);\n                  return true;\n                }\n              } else {\n                numErrors.mark();\n                authenticationFailure(response, isAjaxRequest, \"Invalid authentication token\");\n                return false;\n              }\n            } catch (UnsupportedEncodingException e) {\n              throw new Error(\"Couldn't retrieve authentication\", e);\n            }\n          } else {\n            numErrors.mark();\n            authenticationFailure(response, isAjaxRequest, \"Malformed Basic Auth header\");\n            return false;\n          }\n        }\n      }\n    }\n    \n    // No auth header OR header empty OR Authorization header not of type Basic, i.e. \"unknown\" user\n    if (blockUnknown) {\n      numMissingCredentials.inc();\n      authenticationFailure(response, isAjaxRequest, \"require authentication\");\n      return false;\n    } else {\n      numPassThrough.inc();\n      request.setAttribute(AuthenticationPlugin.class.getName(), authenticationProvider.getPromptHeaders());\n      filterChain.doFilter(request, response);\n      return true;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean doAuthenticate(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws Exception {\n\n    HttpServletRequest request = (HttpServletRequest) servletRequest;\n    HttpServletResponse response = (HttpServletResponse) servletResponse;\n\n    String authHeader = request.getHeader(\"Authorization\");\n    boolean isAjaxRequest = isAjaxRequest(request);\n    \n    if (authHeader != null) {\n      BasicAuthPlugin.authHeader.set(new BasicHeader(\"Authorization\", authHeader));\n      StringTokenizer st = new StringTokenizer(authHeader);\n      if (st.hasMoreTokens()) {\n        String basic = st.nextToken();\n        if (basic.equalsIgnoreCase(\"Basic\")) {\n          if (st.hasMoreTokens()) {\n            try {\n              String credentials = new String(Base64.decodeBase64(st.nextToken()), \"UTF-8\");\n              int p = credentials.indexOf(\":\");\n              if (p != -1) {\n                final String username = credentials.substring(0, p).trim();\n                String pwd = credentials.substring(p + 1).trim();\n                if (!authenticate(username, pwd)) {\n                  numWrongCredentials.inc();\n                  log.debug(\"Bad auth credentials supplied in Authorization header\");\n                  authenticationFailure(response, isAjaxRequest, \"Bad credentials\");\n                  return false;\n                } else {\n                  HttpServletRequestWrapper wrapper = new HttpServletRequestWrapper(request) {\n                    @Override\n                    public Principal getUserPrincipal() {\n                      return new BasicUserPrincipal(username);\n                    }\n                  };\n                  numAuthenticated.inc();\n                  filterChain.doFilter(wrapper, response);\n                  return true;\n                }\n              } else {\n                numErrors.mark();\n                authenticationFailure(response, isAjaxRequest, \"Invalid authentication token\");\n                return false;\n              }\n            } catch (UnsupportedEncodingException e) {\n              throw new Error(\"Couldn't retrieve authentication\", e);\n            }\n          } else {\n            numErrors.mark();\n            authenticationFailure(response, isAjaxRequest, \"Malformed Basic Auth header\");\n            return false;\n          }\n        }\n      }\n    }\n    \n    // No auth header OR header empty OR Authorization header not of type Basic, i.e. \"unknown\" user\n    if (blockUnknown) {\n      numMissingCredentials.inc();\n      authenticationFailure(response, isAjaxRequest, \"require authentication\");\n      return false;\n    } else {\n      numPassThrough.inc();\n      request.setAttribute(AuthenticationPlugin.class.getName(), authenticationProvider.getPromptHeaders());\n      filterChain.doFilter(request, response);\n      return true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27656822b6594fd0b598f7ff65d0fb3d13b8c9e5","date":1546862966,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/BasicAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/BasicAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"  @Override\n  public boolean doAuthenticate(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws Exception {\n\n    HttpServletRequest request = (HttpServletRequest) servletRequest;\n    HttpServletResponse response = (HttpServletResponse) servletResponse;\n\n    String authHeader = request.getHeader(\"Authorization\");\n    boolean isAjaxRequest = isAjaxRequest(request);\n    \n    if (authHeader != null) {\n      BasicAuthPlugin.authHeader.set(new BasicHeader(\"Authorization\", authHeader));\n      StringTokenizer st = new StringTokenizer(authHeader);\n      if (st.hasMoreTokens()) {\n        String basic = st.nextToken();\n        if (basic.equalsIgnoreCase(\"Basic\")) {\n          if (st.hasMoreTokens()) {\n            try {\n              String credentials = new String(Base64.decodeBase64(st.nextToken()), \"UTF-8\");\n              int p = credentials.indexOf(\":\");\n              if (p != -1) {\n                final String username = credentials.substring(0, p).trim();\n                String pwd = credentials.substring(p + 1).trim();\n                if (!authenticate(username, pwd)) {\n                  numWrongCredentials.inc();\n                  log.debug(\"Bad auth credentials supplied in Authorization header\");\n                  authenticationFailure(response, isAjaxRequest, \"Bad credentials\");\n                  return false;\n                } else {\n                  HttpServletRequestWrapper wrapper = new HttpServletRequestWrapper(request) {\n                    @Override\n                    public Principal getUserPrincipal() {\n                      return new BasicAuthUserPrincipal(username, pwd);\n                    }\n                  };\n                  numAuthenticated.inc();\n                  filterChain.doFilter(wrapper, response);\n                  return true;\n                }\n              } else {\n                numErrors.mark();\n                authenticationFailure(response, isAjaxRequest, \"Invalid authentication token\");\n                return false;\n              }\n            } catch (UnsupportedEncodingException e) {\n              throw new Error(\"Couldn't retrieve authentication\", e);\n            }\n          } else {\n            numErrors.mark();\n            authenticationFailure(response, isAjaxRequest, \"Malformed Basic Auth header\");\n            return false;\n          }\n        }\n      }\n    }\n    \n    // No auth header OR header empty OR Authorization header not of type Basic, i.e. \"unknown\" user\n    if (blockUnknown) {\n      numMissingCredentials.inc();\n      authenticationFailure(response, isAjaxRequest, \"require authentication\");\n      return false;\n    } else {\n      numPassThrough.inc();\n      request.setAttribute(AuthenticationPlugin.class.getName(), getPromptHeaders(isAjaxRequest));\n      filterChain.doFilter(request, response);\n      return true;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean doAuthenticate(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws Exception {\n\n    HttpServletRequest request = (HttpServletRequest) servletRequest;\n    HttpServletResponse response = (HttpServletResponse) servletResponse;\n\n    String authHeader = request.getHeader(\"Authorization\");\n    boolean isAjaxRequest = isAjaxRequest(request);\n    \n    if (authHeader != null) {\n      BasicAuthPlugin.authHeader.set(new BasicHeader(\"Authorization\", authHeader));\n      StringTokenizer st = new StringTokenizer(authHeader);\n      if (st.hasMoreTokens()) {\n        String basic = st.nextToken();\n        if (basic.equalsIgnoreCase(\"Basic\")) {\n          if (st.hasMoreTokens()) {\n            try {\n              String credentials = new String(Base64.decodeBase64(st.nextToken()), \"UTF-8\");\n              int p = credentials.indexOf(\":\");\n              if (p != -1) {\n                final String username = credentials.substring(0, p).trim();\n                String pwd = credentials.substring(p + 1).trim();\n                if (!authenticate(username, pwd)) {\n                  numWrongCredentials.inc();\n                  log.debug(\"Bad auth credentials supplied in Authorization header\");\n                  authenticationFailure(response, isAjaxRequest, \"Bad credentials\");\n                  return false;\n                } else {\n                  HttpServletRequestWrapper wrapper = new HttpServletRequestWrapper(request) {\n                    @Override\n                    public Principal getUserPrincipal() {\n                      return new BasicAuthUserPrincipal(username, pwd);\n                    }\n                  };\n                  numAuthenticated.inc();\n                  filterChain.doFilter(wrapper, response);\n                  return true;\n                }\n              } else {\n                numErrors.mark();\n                authenticationFailure(response, isAjaxRequest, \"Invalid authentication token\");\n                return false;\n              }\n            } catch (UnsupportedEncodingException e) {\n              throw new Error(\"Couldn't retrieve authentication\", e);\n            }\n          } else {\n            numErrors.mark();\n            authenticationFailure(response, isAjaxRequest, \"Malformed Basic Auth header\");\n            return false;\n          }\n        }\n      }\n    }\n    \n    // No auth header OR header empty OR Authorization header not of type Basic, i.e. \"unknown\" user\n    if (blockUnknown) {\n      numMissingCredentials.inc();\n      authenticationFailure(response, isAjaxRequest, \"require authentication\");\n      return false;\n    } else {\n      numPassThrough.inc();\n      request.setAttribute(AuthenticationPlugin.class.getName(), authenticationProvider.getPromptHeaders());\n      filterChain.doFilter(request, response);\n      return true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe214d6e09deed3001159c1ad5173f9c8fc4a7f5","date":1563597632,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/BasicAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/BasicAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"  @Override\n  public boolean doAuthenticate(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws Exception {\n\n    HttpServletRequest request = (HttpServletRequest) servletRequest;\n    HttpServletResponse response = (HttpServletResponse) servletResponse;\n\n    String authHeader = request.getHeader(\"Authorization\");\n    boolean isAjaxRequest = isAjaxRequest(request);\n    \n    if (authHeader != null) {\n      BasicAuthPlugin.authHeader.set(new BasicHeader(\"Authorization\", authHeader));\n      StringTokenizer st = new StringTokenizer(authHeader);\n      if (st.hasMoreTokens()) {\n        String basic = st.nextToken();\n        if (basic.equalsIgnoreCase(\"Basic\")) {\n          if (st.hasMoreTokens()) {\n            try {\n              String credentials = new String(Base64.decodeBase64(st.nextToken()), StandardCharsets.UTF_8);\n              int p = credentials.indexOf(\":\");\n              if (p != -1) {\n                final String username = credentials.substring(0, p).trim();\n                String pwd = credentials.substring(p + 1).trim();\n                if (!authenticate(username, pwd)) {\n                  numWrongCredentials.inc();\n                  log.debug(\"Bad auth credentials supplied in Authorization header\");\n                  authenticationFailure(response, isAjaxRequest, \"Bad credentials\");\n                  return false;\n                } else {\n                  HttpServletRequestWrapper wrapper = new HttpServletRequestWrapper(request) {\n                    @Override\n                    public Principal getUserPrincipal() {\n                      return new BasicAuthUserPrincipal(username, pwd);\n                    }\n                  };\n                  numAuthenticated.inc();\n                  filterChain.doFilter(wrapper, response);\n                  return true;\n                }\n              } else {\n                numErrors.mark();\n                authenticationFailure(response, isAjaxRequest, \"Invalid authentication token\");\n                return false;\n              }\n            } catch (UnsupportedEncodingException e) {\n              throw new Error(\"Couldn't retrieve authentication\", e);\n            }\n          } else {\n            numErrors.mark();\n            authenticationFailure(response, isAjaxRequest, \"Malformed Basic Auth header\");\n            return false;\n          }\n        }\n      }\n    }\n    \n    // No auth header OR header empty OR Authorization header not of type Basic, i.e. \"unknown\" user\n    if (blockUnknown) {\n      numMissingCredentials.inc();\n      authenticationFailure(response, isAjaxRequest, \"require authentication\");\n      return false;\n    } else {\n      numPassThrough.inc();\n      request.setAttribute(AuthenticationPlugin.class.getName(), getPromptHeaders(isAjaxRequest));\n      filterChain.doFilter(request, response);\n      return true;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean doAuthenticate(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws Exception {\n\n    HttpServletRequest request = (HttpServletRequest) servletRequest;\n    HttpServletResponse response = (HttpServletResponse) servletResponse;\n\n    String authHeader = request.getHeader(\"Authorization\");\n    boolean isAjaxRequest = isAjaxRequest(request);\n    \n    if (authHeader != null) {\n      BasicAuthPlugin.authHeader.set(new BasicHeader(\"Authorization\", authHeader));\n      StringTokenizer st = new StringTokenizer(authHeader);\n      if (st.hasMoreTokens()) {\n        String basic = st.nextToken();\n        if (basic.equalsIgnoreCase(\"Basic\")) {\n          if (st.hasMoreTokens()) {\n            try {\n              String credentials = new String(Base64.decodeBase64(st.nextToken()), \"UTF-8\");\n              int p = credentials.indexOf(\":\");\n              if (p != -1) {\n                final String username = credentials.substring(0, p).trim();\n                String pwd = credentials.substring(p + 1).trim();\n                if (!authenticate(username, pwd)) {\n                  numWrongCredentials.inc();\n                  log.debug(\"Bad auth credentials supplied in Authorization header\");\n                  authenticationFailure(response, isAjaxRequest, \"Bad credentials\");\n                  return false;\n                } else {\n                  HttpServletRequestWrapper wrapper = new HttpServletRequestWrapper(request) {\n                    @Override\n                    public Principal getUserPrincipal() {\n                      return new BasicAuthUserPrincipal(username, pwd);\n                    }\n                  };\n                  numAuthenticated.inc();\n                  filterChain.doFilter(wrapper, response);\n                  return true;\n                }\n              } else {\n                numErrors.mark();\n                authenticationFailure(response, isAjaxRequest, \"Invalid authentication token\");\n                return false;\n              }\n            } catch (UnsupportedEncodingException e) {\n              throw new Error(\"Couldn't retrieve authentication\", e);\n            }\n          } else {\n            numErrors.mark();\n            authenticationFailure(response, isAjaxRequest, \"Malformed Basic Auth header\");\n            return false;\n          }\n        }\n      }\n    }\n    \n    // No auth header OR header empty OR Authorization header not of type Basic, i.e. \"unknown\" user\n    if (blockUnknown) {\n      numMissingCredentials.inc();\n      authenticationFailure(response, isAjaxRequest, \"require authentication\");\n      return false;\n    } else {\n      numPassThrough.inc();\n      request.setAttribute(AuthenticationPlugin.class.getName(), getPromptHeaders(isAjaxRequest));\n      filterChain.doFilter(request, response);\n      return true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23b436ffee26b67f87efef6a3bab24697332b6b2","date":1587575178,"type":5,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/BasicAuthPlugin#doAuthenticate(HttpServletRequest,HttpServletResponse,FilterChain).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/BasicAuthPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"  @Override\n  public boolean doAuthenticate(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws Exception {\n    String authHeader = request.getHeader(\"Authorization\");\n    boolean isAjaxRequest = isAjaxRequest(request);\n    \n    if (authHeader != null) {\n      BasicAuthPlugin.authHeader.set(new BasicHeader(\"Authorization\", authHeader));\n      StringTokenizer st = new StringTokenizer(authHeader);\n      if (st.hasMoreTokens()) {\n        String basic = st.nextToken();\n        if (basic.equalsIgnoreCase(\"Basic\")) {\n          if (st.hasMoreTokens()) {\n            try {\n              String credentials = new String(Base64.decodeBase64(st.nextToken()), StandardCharsets.UTF_8);\n              int p = credentials.indexOf(\":\");\n              if (p != -1) {\n                final String username = credentials.substring(0, p).trim();\n                String pwd = credentials.substring(p + 1).trim();\n                if (!authenticate(username, pwd)) {\n                  numWrongCredentials.inc();\n                  log.debug(\"Bad auth credentials supplied in Authorization header\");\n                  authenticationFailure(response, isAjaxRequest, \"Bad credentials\");\n                  return false;\n                } else {\n                  Principal principal = new BasicAuthUserPrincipal(username, pwd);\n                  request = wrapWithPrincipal(request, principal);\n                  numAuthenticated.inc();\n                  filterChain.doFilter(request, response);\n                  return true;\n                }\n              } else {\n                numErrors.mark();\n                authenticationFailure(response, isAjaxRequest, \"Invalid authentication token\");\n                return false;\n              }\n            } catch (UnsupportedEncodingException e) {\n              throw new Error(\"Couldn't retrieve authentication\", e);\n            }\n          } else {\n            numErrors.mark();\n            authenticationFailure(response, isAjaxRequest, \"Malformed Basic Auth header\");\n            return false;\n          }\n        }\n      }\n    }\n    \n    // No auth header OR header empty OR Authorization header not of type Basic, i.e. \"unknown\" user\n    if (blockUnknown) {\n      numMissingCredentials.inc();\n      authenticationFailure(response, isAjaxRequest, \"require authentication\");\n      return false;\n    } else {\n      numPassThrough.inc();\n      request.setAttribute(AuthenticationPlugin.class.getName(), getPromptHeaders(isAjaxRequest));\n      filterChain.doFilter(request, response);\n      return true;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean doAuthenticate(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws Exception {\n\n    HttpServletRequest request = (HttpServletRequest) servletRequest;\n    HttpServletResponse response = (HttpServletResponse) servletResponse;\n\n    String authHeader = request.getHeader(\"Authorization\");\n    boolean isAjaxRequest = isAjaxRequest(request);\n    \n    if (authHeader != null) {\n      BasicAuthPlugin.authHeader.set(new BasicHeader(\"Authorization\", authHeader));\n      StringTokenizer st = new StringTokenizer(authHeader);\n      if (st.hasMoreTokens()) {\n        String basic = st.nextToken();\n        if (basic.equalsIgnoreCase(\"Basic\")) {\n          if (st.hasMoreTokens()) {\n            try {\n              String credentials = new String(Base64.decodeBase64(st.nextToken()), StandardCharsets.UTF_8);\n              int p = credentials.indexOf(\":\");\n              if (p != -1) {\n                final String username = credentials.substring(0, p).trim();\n                String pwd = credentials.substring(p + 1).trim();\n                if (!authenticate(username, pwd)) {\n                  numWrongCredentials.inc();\n                  log.debug(\"Bad auth credentials supplied in Authorization header\");\n                  authenticationFailure(response, isAjaxRequest, \"Bad credentials\");\n                  return false;\n                } else {\n                  HttpServletRequestWrapper wrapper = new HttpServletRequestWrapper(request) {\n                    @Override\n                    public Principal getUserPrincipal() {\n                      return new BasicAuthUserPrincipal(username, pwd);\n                    }\n                  };\n                  numAuthenticated.inc();\n                  filterChain.doFilter(wrapper, response);\n                  return true;\n                }\n              } else {\n                numErrors.mark();\n                authenticationFailure(response, isAjaxRequest, \"Invalid authentication token\");\n                return false;\n              }\n            } catch (UnsupportedEncodingException e) {\n              throw new Error(\"Couldn't retrieve authentication\", e);\n            }\n          } else {\n            numErrors.mark();\n            authenticationFailure(response, isAjaxRequest, \"Malformed Basic Auth header\");\n            return false;\n          }\n        }\n      }\n    }\n    \n    // No auth header OR header empty OR Authorization header not of type Basic, i.e. \"unknown\" user\n    if (blockUnknown) {\n      numMissingCredentials.inc();\n      authenticationFailure(response, isAjaxRequest, \"require authentication\");\n      return false;\n    } else {\n      numPassThrough.inc();\n      request.setAttribute(AuthenticationPlugin.class.getName(), getPromptHeaders(isAjaxRequest));\n      filterChain.doFilter(request, response);\n      return true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4bb519c79b76e52145e37b6681a7012525ed5f4b":["85397dd93927c17347c6bf89800cd0fc566c2d03"],"23b436ffee26b67f87efef6a3bab24697332b6b2":["fe214d6e09deed3001159c1ad5173f9c8fc4a7f5"],"3635776bfb39e459843cfe0a78c7f3f88602f8ea":["ccfb40e1834cac1619556a0becf198bb7bad5d63"],"7b6b27adfd0ae23a874c905f6003b09606641f5f":["20be168d828ac40d262f85364d02f15b491dd88b"],"ccfb40e1834cac1619556a0becf198bb7bad5d63":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"982956f030abe21ea20792c0869b3f78086d41c6":["7b6b27adfd0ae23a874c905f6003b09606641f5f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["3635776bfb39e459843cfe0a78c7f3f88602f8ea","20be168d828ac40d262f85364d02f15b491dd88b"],"5809ad14f6ea649a54ac2b8b8826ec0106bd2c3f":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","691f3fd725e13e6708491507e361eaecf91b59f6"],"fe214d6e09deed3001159c1ad5173f9c8fc4a7f5":["27656822b6594fd0b598f7ff65d0fb3d13b8c9e5"],"85397dd93927c17347c6bf89800cd0fc566c2d03":["4e5b14c1a3febf27d88acf3083b7551876933aa5"],"170ef9c82c0d27d4151feff316ba63fbedd91bbf":["20be168d828ac40d262f85364d02f15b491dd88b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b363b110592b02d7f488aff0dbe40a53d3ce81df"],"27656822b6594fd0b598f7ff65d0fb3d13b8c9e5":["4bb519c79b76e52145e37b6681a7012525ed5f4b"],"4e5b14c1a3febf27d88acf3083b7551876933aa5":["691f3fd725e13e6708491507e361eaecf91b59f6"],"b363b110592b02d7f488aff0dbe40a53d3ce81df":["20be168d828ac40d262f85364d02f15b491dd88b","170ef9c82c0d27d4151feff316ba63fbedd91bbf"],"691f3fd725e13e6708491507e361eaecf91b59f6":["b363b110592b02d7f488aff0dbe40a53d3ce81df"],"20be168d828ac40d262f85364d02f15b491dd88b":["3635776bfb39e459843cfe0a78c7f3f88602f8ea"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["3635776bfb39e459843cfe0a78c7f3f88602f8ea","20be168d828ac40d262f85364d02f15b491dd88b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23b436ffee26b67f87efef6a3bab24697332b6b2"]},"commit2Childs":{"4bb519c79b76e52145e37b6681a7012525ed5f4b":["27656822b6594fd0b598f7ff65d0fb3d13b8c9e5"],"23b436ffee26b67f87efef6a3bab24697332b6b2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3635776bfb39e459843cfe0a78c7f3f88602f8ea":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","20be168d828ac40d262f85364d02f15b491dd88b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"7b6b27adfd0ae23a874c905f6003b09606641f5f":["982956f030abe21ea20792c0869b3f78086d41c6"],"ccfb40e1834cac1619556a0becf198bb7bad5d63":["3635776bfb39e459843cfe0a78c7f3f88602f8ea"],"982956f030abe21ea20792c0869b3f78086d41c6":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"5809ad14f6ea649a54ac2b8b8826ec0106bd2c3f":[],"fe214d6e09deed3001159c1ad5173f9c8fc4a7f5":["23b436ffee26b67f87efef6a3bab24697332b6b2"],"85397dd93927c17347c6bf89800cd0fc566c2d03":["4bb519c79b76e52145e37b6681a7012525ed5f4b"],"170ef9c82c0d27d4151feff316ba63fbedd91bbf":["b363b110592b02d7f488aff0dbe40a53d3ce81df"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ccfb40e1834cac1619556a0becf198bb7bad5d63"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["5809ad14f6ea649a54ac2b8b8826ec0106bd2c3f"],"27656822b6594fd0b598f7ff65d0fb3d13b8c9e5":["fe214d6e09deed3001159c1ad5173f9c8fc4a7f5"],"4e5b14c1a3febf27d88acf3083b7551876933aa5":["85397dd93927c17347c6bf89800cd0fc566c2d03"],"b363b110592b02d7f488aff0dbe40a53d3ce81df":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","691f3fd725e13e6708491507e361eaecf91b59f6"],"691f3fd725e13e6708491507e361eaecf91b59f6":["5809ad14f6ea649a54ac2b8b8826ec0106bd2c3f","4e5b14c1a3febf27d88acf3083b7551876933aa5"],"20be168d828ac40d262f85364d02f15b491dd88b":["7b6b27adfd0ae23a874c905f6003b09606641f5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","170ef9c82c0d27d4151feff316ba63fbedd91bbf","b363b110592b02d7f488aff0dbe40a53d3ce81df","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["982956f030abe21ea20792c0869b3f78086d41c6","5809ad14f6ea649a54ac2b8b8826ec0106bd2c3f","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}