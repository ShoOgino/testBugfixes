{"path":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#collectShardCollations(SpellCheckMergeData,NamedList,int).mjava","commits":[{"id":"51338b5fe0f5d865f3d3ce9ed83d94ae4733a8c5","date":1320922486,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#collectShardCollations(SpellCheckMergeData,NamedList,int).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void collectShardCollations(SpellCheckMergeData mergeData, NamedList spellCheckResponse, int maxCollationTries) {\n    Map<String, SpellCheckCollation> collations = mergeData.collations;\n    NamedList suggestions = (NamedList) spellCheckResponse.get(\"suggestions\");\n    if(suggestions != null) {\n      List<Object> collationList = suggestions.getAll(\"collation\");\n      List<Object> collationRankList = suggestions.getAll(\"collationInternalRank\");\n      int i=0;\n      if(collationList != null) {\n        for(Object o : collationList)\n        {\n          if(o instanceof String)\n          {\n            SpellCheckCollation coll = new SpellCheckCollation();\n            coll.setCollationQuery((String) o);\n            if(collationRankList!= null && collationRankList.size()>0)\n            {\n              coll.setInternalRank((Integer) collationRankList.get(i));\n              i++;\n            }\n            SpellCheckCollation priorColl = collations.get(coll.getCollationQuery());\n            if(priorColl != null)\n            {\n              coll.setInternalRank(Math.max(coll.getInternalRank(),priorColl.getInternalRank()));\n            }\n            collations.put(coll.getCollationQuery(), coll);\n          } else\n          {\n            NamedList expandedCollation = (NamedList) o;                  \n            SpellCheckCollation coll = new SpellCheckCollation();\n            coll.setCollationQuery((String) expandedCollation.get(\"collationQuery\"));\n            coll.setHits((Integer) expandedCollation.get(\"hits\"));\n            if(maxCollationTries>0)\n            {\n              coll.setInternalRank((Integer) expandedCollation.get(\"collationInternalRank\"));\n            }\n            coll.setMisspellingsAndCorrections((NamedList) expandedCollation.get(\"misspellingsAndCorrections\"));\n            SpellCheckCollation priorColl = collations.get(coll.getCollationQuery());\n            if(priorColl != null)\n            {\n              coll.setHits(coll.getHits() + priorColl.getHits());\n              coll.setInternalRank(Math.max(coll.getInternalRank(),priorColl.getInternalRank()));\n            }\n            collations.put(coll.getCollationQuery(), coll);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"343d2d9477b299075fa3a19a46e654b6c3bf552b","date":1407872410,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#collectShardCollations(SpellCheckMergeData,NamedList,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#collectShardCollations(SpellCheckMergeData,NamedList,int).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void collectShardCollations(SpellCheckMergeData mergeData, NamedList spellCheckResponse, int maxCollationTries) {\n    Map<String, SpellCheckCollation> collations = mergeData.collations;\n    NamedList collationHolder = (NamedList) spellCheckResponse.get(\"collations\");\n    if(collationHolder != null) {\n      List<Object> collationList = collationHolder.getAll(\"collation\");\n      List<Object> collationRankList = collationHolder.getAll(\"collationInternalRank\");\n      int i=0;\n      if(collationList != null) {\n        for(Object o : collationList)\n        {\n          if(o instanceof String)\n          {\n            SpellCheckCollation coll = new SpellCheckCollation();\n            coll.setCollationQuery((String) o);\n            if(collationRankList!= null && collationRankList.size()>0)\n            {\n              coll.setInternalRank((Integer) collationRankList.get(i));\n              i++;\n            }\n            SpellCheckCollation priorColl = collations.get(coll.getCollationQuery());\n            if(priorColl != null)\n            {\n              coll.setInternalRank(Math.max(coll.getInternalRank(),priorColl.getInternalRank()));\n            }\n            collations.put(coll.getCollationQuery(), coll);\n          } else\n          {\n            NamedList expandedCollation = (NamedList) o;                  \n            SpellCheckCollation coll = new SpellCheckCollation();\n            coll.setCollationQuery((String) expandedCollation.get(\"collationQuery\"));\n            coll.setHits((Integer) expandedCollation.get(\"hits\"));\n            if(maxCollationTries>0)\n            {\n              coll.setInternalRank((Integer) expandedCollation.get(\"collationInternalRank\"));\n            }\n            coll.setMisspellingsAndCorrections((NamedList) expandedCollation.get(\"misspellingsAndCorrections\"));\n            SpellCheckCollation priorColl = collations.get(coll.getCollationQuery());\n            if(priorColl != null)\n            {\n              coll.setHits(coll.getHits() + priorColl.getHits());\n              coll.setInternalRank(Math.max(coll.getInternalRank(),priorColl.getInternalRank()));\n            }\n            collations.put(coll.getCollationQuery(), coll);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void collectShardCollations(SpellCheckMergeData mergeData, NamedList spellCheckResponse, int maxCollationTries) {\n    Map<String, SpellCheckCollation> collations = mergeData.collations;\n    NamedList suggestions = (NamedList) spellCheckResponse.get(\"suggestions\");\n    if(suggestions != null) {\n      List<Object> collationList = suggestions.getAll(\"collation\");\n      List<Object> collationRankList = suggestions.getAll(\"collationInternalRank\");\n      int i=0;\n      if(collationList != null) {\n        for(Object o : collationList)\n        {\n          if(o instanceof String)\n          {\n            SpellCheckCollation coll = new SpellCheckCollation();\n            coll.setCollationQuery((String) o);\n            if(collationRankList!= null && collationRankList.size()>0)\n            {\n              coll.setInternalRank((Integer) collationRankList.get(i));\n              i++;\n            }\n            SpellCheckCollation priorColl = collations.get(coll.getCollationQuery());\n            if(priorColl != null)\n            {\n              coll.setInternalRank(Math.max(coll.getInternalRank(),priorColl.getInternalRank()));\n            }\n            collations.put(coll.getCollationQuery(), coll);\n          } else\n          {\n            NamedList expandedCollation = (NamedList) o;                  \n            SpellCheckCollation coll = new SpellCheckCollation();\n            coll.setCollationQuery((String) expandedCollation.get(\"collationQuery\"));\n            coll.setHits((Integer) expandedCollation.get(\"hits\"));\n            if(maxCollationTries>0)\n            {\n              coll.setInternalRank((Integer) expandedCollation.get(\"collationInternalRank\"));\n            }\n            coll.setMisspellingsAndCorrections((NamedList) expandedCollation.get(\"misspellingsAndCorrections\"));\n            SpellCheckCollation priorColl = collations.get(coll.getCollationQuery());\n            if(priorColl != null)\n            {\n              coll.setHits(coll.getHits() + priorColl.getHits());\n              coll.setInternalRank(Math.max(coll.getInternalRank(),priorColl.getInternalRank()));\n            }\n            collations.put(coll.getCollationQuery(), coll);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ba46b57f67b4eb7246bdc86cfdeb15b78306b90","date":1443533495,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#collectShardCollations(SpellCheckMergeData,NamedList,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#collectShardCollations(SpellCheckMergeData,NamedList,int).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void collectShardCollations(SpellCheckMergeData mergeData, NamedList spellCheckResponse, int maxCollationTries) {\n    Map<String, SpellCheckCollation> collations = mergeData.collations;\n    NamedList collationHolder = (NamedList) spellCheckResponse.get(\"collations\");\n    if(collationHolder != null) {\n      List<Object> collationList = collationHolder.getAll(\"collation\");\n      List<Object> collationRankList = collationHolder.getAll(\"collationInternalRank\");\n      int i=0;\n      if(collationList != null) {\n        for(Object o : collationList)\n        {\n          if(o instanceof String)\n          {\n            SpellCheckCollation coll = new SpellCheckCollation();\n            coll.setCollationQuery((String) o);\n            if(collationRankList!= null && collationRankList.size()>0)\n            {\n              coll.setInternalRank((Integer) collationRankList.get(i));\n              i++;\n            }\n            SpellCheckCollation priorColl = collations.get(coll.getCollationQuery());\n            if(priorColl != null)\n            {\n              coll.setInternalRank(Math.max(coll.getInternalRank(),priorColl.getInternalRank()));\n            }\n            collations.put(coll.getCollationQuery(), coll);\n          } else\n          {\n            NamedList expandedCollation = (NamedList) o;\n            SpellCheckCollation coll = new SpellCheckCollation();\n            coll.setCollationQuery((String) expandedCollation.get(\"collationQuery\"));\n            coll.setHits((Integer) expandedCollation.get(\"hits\"));\n            if(maxCollationTries>0)\n            {\n              coll.setInternalRank((Integer) expandedCollation.get(\"collationInternalRank\"));\n            }\n            coll.setMisspellingsAndCorrections((NamedList) expandedCollation.get(\"misspellingsAndCorrections\"));\n            SpellCheckCollation priorColl = collations.get(coll.getCollationQuery());\n            if(priorColl != null)\n            {\n              coll.setHits(coll.getHits() + priorColl.getHits());\n              coll.setInternalRank(Math.max(coll.getInternalRank(),priorColl.getInternalRank()));\n            }\n            collations.put(coll.getCollationQuery(), coll);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void collectShardCollations(SpellCheckMergeData mergeData, NamedList spellCheckResponse, int maxCollationTries) {\n    Map<String, SpellCheckCollation> collations = mergeData.collations;\n    NamedList collationHolder = (NamedList) spellCheckResponse.get(\"collations\");\n    if(collationHolder != null) {\n      List<Object> collationList = collationHolder.getAll(\"collation\");\n      List<Object> collationRankList = collationHolder.getAll(\"collationInternalRank\");\n      int i=0;\n      if(collationList != null) {\n        for(Object o : collationList)\n        {\n          if(o instanceof String)\n          {\n            SpellCheckCollation coll = new SpellCheckCollation();\n            coll.setCollationQuery((String) o);\n            if(collationRankList!= null && collationRankList.size()>0)\n            {\n              coll.setInternalRank((Integer) collationRankList.get(i));\n              i++;\n            }\n            SpellCheckCollation priorColl = collations.get(coll.getCollationQuery());\n            if(priorColl != null)\n            {\n              coll.setInternalRank(Math.max(coll.getInternalRank(),priorColl.getInternalRank()));\n            }\n            collations.put(coll.getCollationQuery(), coll);\n          } else\n          {\n            NamedList expandedCollation = (NamedList) o;                  \n            SpellCheckCollation coll = new SpellCheckCollation();\n            coll.setCollationQuery((String) expandedCollation.get(\"collationQuery\"));\n            coll.setHits((Integer) expandedCollation.get(\"hits\"));\n            if(maxCollationTries>0)\n            {\n              coll.setInternalRank((Integer) expandedCollation.get(\"collationInternalRank\"));\n            }\n            coll.setMisspellingsAndCorrections((NamedList) expandedCollation.get(\"misspellingsAndCorrections\"));\n            SpellCheckCollation priorColl = collations.get(coll.getCollationQuery());\n            if(priorColl != null)\n            {\n              coll.setHits(coll.getHits() + priorColl.getHits());\n              coll.setInternalRank(Math.max(coll.getInternalRank(),priorColl.getInternalRank()));\n            }\n            collations.put(coll.getCollationQuery(), coll);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6","date":1498031702,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#collectShardCollations(SpellCheckMergeData,NamedList,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#collectShardCollations(SpellCheckMergeData,NamedList,int).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void collectShardCollations(SpellCheckMergeData mergeData, NamedList spellCheckResponse, int maxCollationTries) {\n    Map<String, SpellCheckCollation> collations = mergeData.collations;\n    NamedList collationHolder = (NamedList) spellCheckResponse.get(\"collations\");\n    if(collationHolder != null) {\n      List<Object> collationList = collationHolder.getAll(\"collation\");\n      List<Object> collationRankList = collationHolder.getAll(\"collationInternalRank\");\n      int i=0;\n      if(collationList != null) {\n        for(Object o : collationList)\n        {\n          if(o instanceof String)\n          {\n            SpellCheckCollation coll = new SpellCheckCollation();\n            coll.setCollationQuery((String) o);\n            if(collationRankList!= null && collationRankList.size()>0)\n            {\n              coll.setInternalRank((Integer) collationRankList.get(i));\n              i++;\n            }\n            SpellCheckCollation priorColl = collations.get(coll.getCollationQuery());\n            if(priorColl != null)\n            {\n              coll.setInternalRank(Math.max(coll.getInternalRank(),priorColl.getInternalRank()));\n            }\n            collations.put(coll.getCollationQuery(), coll);\n          } else\n          {\n            NamedList expandedCollation = (NamedList) o;\n            SpellCheckCollation coll = new SpellCheckCollation();\n            coll.setCollationQuery((String) expandedCollation.get(\"collationQuery\"));\n            coll.setHits(((Number) expandedCollation.get(\"hits\")).longValue());\n            if(maxCollationTries>0)\n            {\n              coll.setInternalRank((Integer) expandedCollation.get(\"collationInternalRank\"));\n            }\n            coll.setMisspellingsAndCorrections((NamedList) expandedCollation.get(\"misspellingsAndCorrections\"));\n            SpellCheckCollation priorColl = collations.get(coll.getCollationQuery());\n            if(priorColl != null)\n            {\n              coll.setHits(coll.getHits() + priorColl.getHits());\n              coll.setInternalRank(Math.max(coll.getInternalRank(),priorColl.getInternalRank()));\n            }\n            collations.put(coll.getCollationQuery(), coll);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void collectShardCollations(SpellCheckMergeData mergeData, NamedList spellCheckResponse, int maxCollationTries) {\n    Map<String, SpellCheckCollation> collations = mergeData.collations;\n    NamedList collationHolder = (NamedList) spellCheckResponse.get(\"collations\");\n    if(collationHolder != null) {\n      List<Object> collationList = collationHolder.getAll(\"collation\");\n      List<Object> collationRankList = collationHolder.getAll(\"collationInternalRank\");\n      int i=0;\n      if(collationList != null) {\n        for(Object o : collationList)\n        {\n          if(o instanceof String)\n          {\n            SpellCheckCollation coll = new SpellCheckCollation();\n            coll.setCollationQuery((String) o);\n            if(collationRankList!= null && collationRankList.size()>0)\n            {\n              coll.setInternalRank((Integer) collationRankList.get(i));\n              i++;\n            }\n            SpellCheckCollation priorColl = collations.get(coll.getCollationQuery());\n            if(priorColl != null)\n            {\n              coll.setInternalRank(Math.max(coll.getInternalRank(),priorColl.getInternalRank()));\n            }\n            collations.put(coll.getCollationQuery(), coll);\n          } else\n          {\n            NamedList expandedCollation = (NamedList) o;\n            SpellCheckCollation coll = new SpellCheckCollation();\n            coll.setCollationQuery((String) expandedCollation.get(\"collationQuery\"));\n            coll.setHits((Integer) expandedCollation.get(\"hits\"));\n            if(maxCollationTries>0)\n            {\n              coll.setInternalRank((Integer) expandedCollation.get(\"collationInternalRank\"));\n            }\n            coll.setMisspellingsAndCorrections((NamedList) expandedCollation.get(\"misspellingsAndCorrections\"));\n            SpellCheckCollation priorColl = collations.get(coll.getCollationQuery());\n            if(priorColl != null)\n            {\n              coll.setHits(coll.getHits() + priorColl.getHits());\n              coll.setInternalRank(Math.max(coll.getInternalRank(),priorColl.getInternalRank()));\n            }\n            collations.put(coll.getCollationQuery(), coll);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":["51338b5fe0f5d865f3d3ce9ed83d94ae4733a8c5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#collectShardCollations(SpellCheckMergeData,NamedList,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#collectShardCollations(SpellCheckMergeData,NamedList,int).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void collectShardCollations(SpellCheckMergeData mergeData, NamedList spellCheckResponse, int maxCollationTries) {\n    Map<String, SpellCheckCollation> collations = mergeData.collations;\n    NamedList collationHolder = (NamedList) spellCheckResponse.get(\"collations\");\n    if(collationHolder != null) {\n      List<Object> collationList = collationHolder.getAll(\"collation\");\n      List<Object> collationRankList = collationHolder.getAll(\"collationInternalRank\");\n      int i=0;\n      if(collationList != null) {\n        for(Object o : collationList)\n        {\n          if(o instanceof String)\n          {\n            SpellCheckCollation coll = new SpellCheckCollation();\n            coll.setCollationQuery((String) o);\n            if(collationRankList!= null && collationRankList.size()>0)\n            {\n              coll.setInternalRank((Integer) collationRankList.get(i));\n              i++;\n            }\n            SpellCheckCollation priorColl = collations.get(coll.getCollationQuery());\n            if(priorColl != null)\n            {\n              coll.setInternalRank(Math.max(coll.getInternalRank(),priorColl.getInternalRank()));\n            }\n            collations.put(coll.getCollationQuery(), coll);\n          } else\n          {\n            NamedList expandedCollation = (NamedList) o;\n            SpellCheckCollation coll = new SpellCheckCollation();\n            coll.setCollationQuery((String) expandedCollation.get(\"collationQuery\"));\n            coll.setHits(((Number) expandedCollation.get(\"hits\")).longValue());\n            if(maxCollationTries>0)\n            {\n              coll.setInternalRank((Integer) expandedCollation.get(\"collationInternalRank\"));\n            }\n            coll.setMisspellingsAndCorrections((NamedList) expandedCollation.get(\"misspellingsAndCorrections\"));\n            SpellCheckCollation priorColl = collations.get(coll.getCollationQuery());\n            if(priorColl != null)\n            {\n              coll.setHits(coll.getHits() + priorColl.getHits());\n              coll.setInternalRank(Math.max(coll.getInternalRank(),priorColl.getInternalRank()));\n            }\n            collations.put(coll.getCollationQuery(), coll);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void collectShardCollations(SpellCheckMergeData mergeData, NamedList spellCheckResponse, int maxCollationTries) {\n    Map<String, SpellCheckCollation> collations = mergeData.collations;\n    NamedList collationHolder = (NamedList) spellCheckResponse.get(\"collations\");\n    if(collationHolder != null) {\n      List<Object> collationList = collationHolder.getAll(\"collation\");\n      List<Object> collationRankList = collationHolder.getAll(\"collationInternalRank\");\n      int i=0;\n      if(collationList != null) {\n        for(Object o : collationList)\n        {\n          if(o instanceof String)\n          {\n            SpellCheckCollation coll = new SpellCheckCollation();\n            coll.setCollationQuery((String) o);\n            if(collationRankList!= null && collationRankList.size()>0)\n            {\n              coll.setInternalRank((Integer) collationRankList.get(i));\n              i++;\n            }\n            SpellCheckCollation priorColl = collations.get(coll.getCollationQuery());\n            if(priorColl != null)\n            {\n              coll.setInternalRank(Math.max(coll.getInternalRank(),priorColl.getInternalRank()));\n            }\n            collations.put(coll.getCollationQuery(), coll);\n          } else\n          {\n            NamedList expandedCollation = (NamedList) o;\n            SpellCheckCollation coll = new SpellCheckCollation();\n            coll.setCollationQuery((String) expandedCollation.get(\"collationQuery\"));\n            coll.setHits((Integer) expandedCollation.get(\"hits\"));\n            if(maxCollationTries>0)\n            {\n              coll.setInternalRank((Integer) expandedCollation.get(\"collationInternalRank\"));\n            }\n            coll.setMisspellingsAndCorrections((NamedList) expandedCollation.get(\"misspellingsAndCorrections\"));\n            SpellCheckCollation priorColl = collations.get(coll.getCollationQuery());\n            if(priorColl != null)\n            {\n              coll.setHits(coll.getHits() + priorColl.getHits());\n              coll.setInternalRank(Math.max(coll.getInternalRank(),priorColl.getInternalRank()));\n            }\n            collations.put(coll.getCollationQuery(), coll);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#collectShardCollations(SpellCheckMergeData,NamedList,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#collectShardCollations(SpellCheckMergeData,NamedList,int).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void collectShardCollations(SpellCheckMergeData mergeData, NamedList spellCheckResponse, int maxCollationTries) {\n    Map<String, SpellCheckCollation> collations = mergeData.collations;\n    NamedList collationHolder = (NamedList) spellCheckResponse.get(\"collations\");\n    if(collationHolder != null) {\n      List<Object> collationList = collationHolder.getAll(\"collation\");\n      List<Object> collationRankList = collationHolder.getAll(\"collationInternalRank\");\n      int i=0;\n      if(collationList != null) {\n        for(Object o : collationList)\n        {\n          if(o instanceof String)\n          {\n            SpellCheckCollation coll = new SpellCheckCollation();\n            coll.setCollationQuery((String) o);\n            if(collationRankList!= null && collationRankList.size()>0)\n            {\n              coll.setInternalRank((Integer) collationRankList.get(i));\n              i++;\n            }\n            SpellCheckCollation priorColl = collations.get(coll.getCollationQuery());\n            if(priorColl != null)\n            {\n              coll.setInternalRank(Math.max(coll.getInternalRank(),priorColl.getInternalRank()));\n            }\n            collations.put(coll.getCollationQuery(), coll);\n          } else\n          {\n            NamedList expandedCollation = (NamedList) o;\n            SpellCheckCollation coll = new SpellCheckCollation();\n            coll.setCollationQuery((String) expandedCollation.get(\"collationQuery\"));\n            coll.setHits(((Number) expandedCollation.get(\"hits\")).longValue());\n            if(maxCollationTries>0)\n            {\n              coll.setInternalRank((Integer) expandedCollation.get(\"collationInternalRank\"));\n            }\n            coll.setMisspellingsAndCorrections((NamedList) expandedCollation.get(\"misspellingsAndCorrections\"));\n            SpellCheckCollation priorColl = collations.get(coll.getCollationQuery());\n            if(priorColl != null)\n            {\n              coll.setHits(coll.getHits() + priorColl.getHits());\n              coll.setInternalRank(Math.max(coll.getInternalRank(),priorColl.getInternalRank()));\n            }\n            collations.put(coll.getCollationQuery(), coll);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void collectShardCollations(SpellCheckMergeData mergeData, NamedList spellCheckResponse, int maxCollationTries) {\n    Map<String, SpellCheckCollation> collations = mergeData.collations;\n    NamedList collationHolder = (NamedList) spellCheckResponse.get(\"collations\");\n    if(collationHolder != null) {\n      List<Object> collationList = collationHolder.getAll(\"collation\");\n      List<Object> collationRankList = collationHolder.getAll(\"collationInternalRank\");\n      int i=0;\n      if(collationList != null) {\n        for(Object o : collationList)\n        {\n          if(o instanceof String)\n          {\n            SpellCheckCollation coll = new SpellCheckCollation();\n            coll.setCollationQuery((String) o);\n            if(collationRankList!= null && collationRankList.size()>0)\n            {\n              coll.setInternalRank((Integer) collationRankList.get(i));\n              i++;\n            }\n            SpellCheckCollation priorColl = collations.get(coll.getCollationQuery());\n            if(priorColl != null)\n            {\n              coll.setInternalRank(Math.max(coll.getInternalRank(),priorColl.getInternalRank()));\n            }\n            collations.put(coll.getCollationQuery(), coll);\n          } else\n          {\n            NamedList expandedCollation = (NamedList) o;\n            SpellCheckCollation coll = new SpellCheckCollation();\n            coll.setCollationQuery((String) expandedCollation.get(\"collationQuery\"));\n            coll.setHits((Integer) expandedCollation.get(\"hits\"));\n            if(maxCollationTries>0)\n            {\n              coll.setInternalRank((Integer) expandedCollation.get(\"collationInternalRank\"));\n            }\n            coll.setMisspellingsAndCorrections((NamedList) expandedCollation.get(\"misspellingsAndCorrections\"));\n            SpellCheckCollation priorColl = collations.get(coll.getCollationQuery());\n            if(priorColl != null)\n            {\n              coll.setHits(coll.getHits() + priorColl.getHits());\n              coll.setInternalRank(Math.max(coll.getInternalRank(),priorColl.getInternalRank()));\n            }\n            collations.put(coll.getCollationQuery(), coll);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8582f07e9350eaeb33bf6c4617b8c9895d99c839","date":1591307386,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#collectShardCollations(SpellCheckMergeData,NamedList,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent#collectShardCollations(SpellCheckMergeData,NamedList,int).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void collectShardCollations(SpellCheckMergeData mergeData, @SuppressWarnings({\"rawtypes\"})NamedList spellCheckResponse, int maxCollationTries) {\n    Map<String, SpellCheckCollation> collations = mergeData.collations;\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList collationHolder = (NamedList) spellCheckResponse.get(\"collations\");\n    if(collationHolder != null) {\n      List<Object> collationList = collationHolder.getAll(\"collation\");\n      List<Object> collationRankList = collationHolder.getAll(\"collationInternalRank\");\n      int i=0;\n      if(collationList != null) {\n        for(Object o : collationList)\n        {\n          if(o instanceof String)\n          {\n            SpellCheckCollation coll = new SpellCheckCollation();\n            coll.setCollationQuery((String) o);\n            if(collationRankList!= null && collationRankList.size()>0)\n            {\n              coll.setInternalRank((Integer) collationRankList.get(i));\n              i++;\n            }\n            SpellCheckCollation priorColl = collations.get(coll.getCollationQuery());\n            if(priorColl != null)\n            {\n              coll.setInternalRank(Math.max(coll.getInternalRank(),priorColl.getInternalRank()));\n            }\n            collations.put(coll.getCollationQuery(), coll);\n          } else\n          {\n            @SuppressWarnings({\"rawtypes\"})\n            NamedList expandedCollation = (NamedList) o;\n            SpellCheckCollation coll = new SpellCheckCollation();\n            coll.setCollationQuery((String) expandedCollation.get(\"collationQuery\"));\n            coll.setHits(((Number) expandedCollation.get(\"hits\")).longValue());\n            if(maxCollationTries>0)\n            {\n              coll.setInternalRank((Integer) expandedCollation.get(\"collationInternalRank\"));\n            }\n            coll.setMisspellingsAndCorrections((NamedList) expandedCollation.get(\"misspellingsAndCorrections\"));\n            SpellCheckCollation priorColl = collations.get(coll.getCollationQuery());\n            if(priorColl != null)\n            {\n              coll.setHits(coll.getHits() + priorColl.getHits());\n              coll.setInternalRank(Math.max(coll.getInternalRank(),priorColl.getInternalRank()));\n            }\n            collations.put(coll.getCollationQuery(), coll);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void collectShardCollations(SpellCheckMergeData mergeData, NamedList spellCheckResponse, int maxCollationTries) {\n    Map<String, SpellCheckCollation> collations = mergeData.collations;\n    NamedList collationHolder = (NamedList) spellCheckResponse.get(\"collations\");\n    if(collationHolder != null) {\n      List<Object> collationList = collationHolder.getAll(\"collation\");\n      List<Object> collationRankList = collationHolder.getAll(\"collationInternalRank\");\n      int i=0;\n      if(collationList != null) {\n        for(Object o : collationList)\n        {\n          if(o instanceof String)\n          {\n            SpellCheckCollation coll = new SpellCheckCollation();\n            coll.setCollationQuery((String) o);\n            if(collationRankList!= null && collationRankList.size()>0)\n            {\n              coll.setInternalRank((Integer) collationRankList.get(i));\n              i++;\n            }\n            SpellCheckCollation priorColl = collations.get(coll.getCollationQuery());\n            if(priorColl != null)\n            {\n              coll.setInternalRank(Math.max(coll.getInternalRank(),priorColl.getInternalRank()));\n            }\n            collations.put(coll.getCollationQuery(), coll);\n          } else\n          {\n            NamedList expandedCollation = (NamedList) o;\n            SpellCheckCollation coll = new SpellCheckCollation();\n            coll.setCollationQuery((String) expandedCollation.get(\"collationQuery\"));\n            coll.setHits(((Number) expandedCollation.get(\"hits\")).longValue());\n            if(maxCollationTries>0)\n            {\n              coll.setInternalRank((Integer) expandedCollation.get(\"collationInternalRank\"));\n            }\n            coll.setMisspellingsAndCorrections((NamedList) expandedCollation.get(\"misspellingsAndCorrections\"));\n            SpellCheckCollation priorColl = collations.get(coll.getCollationQuery());\n            if(priorColl != null)\n            {\n              coll.setHits(coll.getHits() + priorColl.getHits());\n              coll.setInternalRank(Math.max(coll.getInternalRank(),priorColl.getInternalRank()));\n            }\n            collations.put(coll.getCollationQuery(), coll);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"343d2d9477b299075fa3a19a46e654b6c3bf552b":["51338b5fe0f5d865f3d3ce9ed83d94ae4733a8c5"],"f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6":["5ba46b57f67b4eb7246bdc86cfdeb15b78306b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"51338b5fe0f5d865f3d3ce9ed83d94ae4733a8c5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5ba46b57f67b4eb7246bdc86cfdeb15b78306b90":["343d2d9477b299075fa3a19a46e654b6c3bf552b"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["5ba46b57f67b4eb7246bdc86cfdeb15b78306b90","f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6"],"28288370235ed02234a64753cdbf0c6ec096304a":["5ba46b57f67b4eb7246bdc86cfdeb15b78306b90","f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"343d2d9477b299075fa3a19a46e654b6c3bf552b":["5ba46b57f67b4eb7246bdc86cfdeb15b78306b90"],"f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["51338b5fe0f5d865f3d3ce9ed83d94ae4733a8c5"],"51338b5fe0f5d865f3d3ce9ed83d94ae4733a8c5":["343d2d9477b299075fa3a19a46e654b6c3bf552b"],"5ba46b57f67b4eb7246bdc86cfdeb15b78306b90":["f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}