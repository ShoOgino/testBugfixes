{"path":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsWriter#finishDoc().mjava","commits":[{"id":"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df","date":1343686506,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsWriter#finishDoc().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void finishDoc() {\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e3359210474c12c0b79e6400450313e3d7ef2bb","date":1344347790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsWriter#finishDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsWriter#finishDoc().mjava","sourceNew":"  @Override\n  public void finishDoc() throws IOException {\n    // Have collected a block of docs, and get a new doc. \n    // Should write skip data as well as postings list for\n    // current block\n\n    if (lastBlockDocID != -1 && docBufferUpto == 1) {\n      // nocomit move to startDoc?  ie we can write skip\n      // data as soon as the next doc starts...\n      if (DEBUG) {\n        System.out.println(\"  bufferSkip at writeBlock: lastDocID=\" + lastBlockDocID + \" docCount=\" + (docCount-1));\n      }\n      skipWriter.bufferSkip(lastBlockDocID, docCount-1, lastBlockPosFP, lastBlockPayFP, lastBlockPosBufferUpto, lastBlockStartOffset, lastBlockPayloadByteUpto);\n    }\n\n    // Since we don't know df for current term, we had to buffer\n    // those skip data for each block, and when a new doc comes, \n    // write them to skip file.\n    if (docBufferUpto == BLOCK_SIZE) {\n      lastBlockDocID = lastDocID;\n      if (posOut != null) {\n        if (payOut != null) {\n          lastBlockPayFP = payOut.getFilePointer();\n        }\n        lastBlockPosFP = posOut.getFilePointer();\n        lastBlockPosBufferUpto = posBufferUpto;\n        lastBlockStartOffset = lastStartOffset;\n        lastBlockPayloadByteUpto = payloadByteUpto;\n      }\n      if (DEBUG) {\n        System.out.println(\"  docBufferUpto=\"+docBufferUpto+\" now get lastBlockDocID=\"+lastBlockDocID+\" lastBlockPosFP=\" + lastBlockPosFP + \" lastBlockPosBufferUpto=\" + lastBlockPosBufferUpto + \" lastBlockPayloadByteUpto=\" + lastBlockPayloadByteUpto);\n      }\n      docBufferUpto = 0;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void finishDoc() {\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6b41208259e8566cba0ecac7da6a331ea9732dd","date":1344551376,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/BlockPackedPostingsWriter#finishDoc().mjava","sourceNew":null,"sourceOld":"  @Override\n  public void finishDoc() throws IOException {\n    // Have collected a block of docs, and get a new doc. \n    // Should write skip data as well as postings list for\n    // current block\n\n    if (lastBlockDocID != -1 && docBufferUpto == 1) {\n      // nocomit move to startDoc?  ie we can write skip\n      // data as soon as the next doc starts...\n      if (DEBUG) {\n        System.out.println(\"  bufferSkip at writeBlock: lastDocID=\" + lastBlockDocID + \" docCount=\" + (docCount-1));\n      }\n      skipWriter.bufferSkip(lastBlockDocID, docCount-1, lastBlockPosFP, lastBlockPayFP, lastBlockPosBufferUpto, lastBlockStartOffset, lastBlockPayloadByteUpto);\n    }\n\n    // Since we don't know df for current term, we had to buffer\n    // those skip data for each block, and when a new doc comes, \n    // write them to skip file.\n    if (docBufferUpto == BLOCK_SIZE) {\n      lastBlockDocID = lastDocID;\n      if (posOut != null) {\n        if (payOut != null) {\n          lastBlockPayFP = payOut.getFilePointer();\n        }\n        lastBlockPosFP = posOut.getFilePointer();\n        lastBlockPosBufferUpto = posBufferUpto;\n        lastBlockStartOffset = lastStartOffset;\n        lastBlockPayloadByteUpto = payloadByteUpto;\n      }\n      if (DEBUG) {\n        System.out.println(\"  docBufferUpto=\"+docBufferUpto+\" now get lastBlockDocID=\"+lastBlockDocID+\" lastBlockPosFP=\" + lastBlockPosFP + \" lastBlockPosBufferUpto=\" + lastBlockPosBufferUpto + \" lastBlockPayloadByteUpto=\" + lastBlockPayloadByteUpto);\n      }\n      docBufferUpto = 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e3359210474c12c0b79e6400450313e3d7ef2bb":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e6b41208259e8566cba0ecac7da6a331ea9732dd":["0e3359210474c12c0b79e6400450313e3d7ef2bb"]},"commit2Childs":{"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df":["0e3359210474c12c0b79e6400450313e3d7ef2bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0e3359210474c12c0b79e6400450313e3d7ef2bb":["e6b41208259e8566cba0ecac7da6a331ea9732dd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e6b41208259e8566cba0ecac7da6a331ea9732dd":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","e6b41208259e8566cba0ecac7da6a331ea9732dd"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}