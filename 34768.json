{"path":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testInfiniteValues().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testInfiniteValues().mjava","pathOld":"src/test/org/apache/lucene/search/TestNumericRangeQuery32#testInfiniteValues().mjava","sourceNew":"  @Test\n  public void testInfiniteValues() throws Exception {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.NEGATIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MIN_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.POSITIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MAX_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(0.0f));\n    doc.add(new NumericField(\"int\").setIntValue(0));\n    writer.addDocument(doc);\n    writer.close();\n    \n    IndexSearcher s = new IndexSearcher(dir);\n    \n    Query q=NumericRangeQuery.newIntRange(\"int\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    s.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testInfiniteValues() throws Exception {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.NEGATIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MIN_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.POSITIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MAX_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(0.0f));\n    doc.add(new NumericField(\"int\").setIntValue(0));\n    writer.addDocument(doc);\n    writer.close();\n    \n    IndexSearcher s = new IndexSearcher(dir);\n    \n    Query q=NumericRangeQuery.newIntRange(\"int\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    s.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testInfiniteValues().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testInfiniteValues().mjava","sourceNew":"  @Test\n  public void testInfiniteValues() throws Exception {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.NEGATIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MIN_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.POSITIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MAX_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(0.0f));\n    doc.add(new NumericField(\"int\").setIntValue(0));\n    writer.addDocument(doc);\n    writer.close();\n    \n    IndexSearcher s = new IndexSearcher(dir);\n    \n    Query q=NumericRangeQuery.newIntRange(\"int\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    s.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testInfiniteValues() throws Exception {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.NEGATIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MIN_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.POSITIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MAX_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(0.0f));\n    doc.add(new NumericField(\"int\").setIntValue(0));\n    writer.addDocument(doc);\n    writer.close();\n    \n    IndexSearcher s = new IndexSearcher(dir);\n    \n    Query q=NumericRangeQuery.newIntRange(\"int\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    s.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testInfiniteValues().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testInfiniteValues().mjava","sourceNew":"  @Test\n  public void testInfiniteValues() throws Exception {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.NEGATIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MIN_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.POSITIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MAX_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(0.0f));\n    doc.add(new NumericField(\"int\").setIntValue(0));\n    writer.addDocument(doc);\n    writer.close();\n    \n    IndexSearcher s = new IndexSearcher(dir);\n    \n    Query q=NumericRangeQuery.newIntRange(\"int\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    s.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testInfiniteValues() throws Exception {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.NEGATIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MIN_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.POSITIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MAX_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(0.0f));\n    doc.add(new NumericField(\"int\").setIntValue(0));\n    writer.addDocument(doc);\n    writer.close();\n    \n    IndexSearcher s = new IndexSearcher(dir);\n    \n    Query q=NumericRangeQuery.newIntRange(\"int\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    s.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testInfiniteValues().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testInfiniteValues().mjava","sourceNew":"  @Test\n  public void testInfiniteValues() throws Exception {\n    MockRAMDirectory dir = newDirectory(random);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.NEGATIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MIN_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.POSITIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MAX_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(0.0f));\n    doc.add(new NumericField(\"int\").setIntValue(0));\n    writer.addDocument(doc);\n    writer.close();\n    \n    IndexSearcher s = new IndexSearcher(dir);\n    \n    Query q=NumericRangeQuery.newIntRange(\"int\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    s.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testInfiniteValues() throws Exception {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.NEGATIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MIN_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.POSITIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MAX_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(0.0f));\n    doc.add(new NumericField(\"int\").setIntValue(0));\n    writer.addDocument(doc);\n    writer.close();\n    \n    IndexSearcher s = new IndexSearcher(dir);\n    \n    Query q=NumericRangeQuery.newIntRange(\"int\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    s.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testInfiniteValues().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testInfiniteValues().mjava","sourceNew":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory(random);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.NEGATIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MIN_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.POSITIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MAX_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(0.0f));\n    doc.add(new NumericField(\"int\").setIntValue(0));\n    writer.addDocument(doc);\n    writer.close();\n    \n    IndexSearcher s = new IndexSearcher(dir);\n    \n    Query q=NumericRangeQuery.newIntRange(\"int\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    s.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testInfiniteValues() throws Exception {\n    MockRAMDirectory dir = newDirectory(random);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.NEGATIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MIN_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.POSITIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MAX_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(0.0f));\n    doc.add(new NumericField(\"int\").setIntValue(0));\n    writer.addDocument(doc);\n    writer.close();\n    \n    IndexSearcher s = new IndexSearcher(dir);\n    \n    Query q=NumericRangeQuery.newIntRange(\"int\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    s.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testInfiniteValues().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testInfiniteValues().mjava","sourceNew":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.NEGATIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MIN_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.POSITIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MAX_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(0.0f));\n    doc.add(new NumericField(\"int\").setIntValue(0));\n    writer.addDocument(doc);\n    writer.close();\n    \n    IndexSearcher s = new IndexSearcher(dir);\n    \n    Query q=NumericRangeQuery.newIntRange(\"int\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    s.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory(random);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.NEGATIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MIN_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.POSITIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MAX_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(0.0f));\n    doc.add(new NumericField(\"int\").setIntValue(0));\n    writer.addDocument(doc);\n    writer.close();\n    \n    IndexSearcher s = new IndexSearcher(dir);\n    \n    Query q=NumericRangeQuery.newIntRange(\"int\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    s.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testInfiniteValues().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testInfiniteValues().mjava","sourceNew":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.NEGATIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MIN_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.POSITIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MAX_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(0.0f));\n    doc.add(new NumericField(\"int\").setIntValue(0));\n    writer.addDocument(doc);\n    writer.close();\n    \n    IndexSearcher s = new IndexSearcher(dir);\n    \n    Query q=NumericRangeQuery.newIntRange(\"int\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    s.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testInfiniteValues() throws Exception {\n    RAMDirectory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.NEGATIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MIN_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.POSITIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MAX_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(0.0f));\n    doc.add(new NumericField(\"int\").setIntValue(0));\n    writer.addDocument(doc);\n    writer.close();\n    \n    IndexSearcher s = new IndexSearcher(dir);\n    \n    Query q=NumericRangeQuery.newIntRange(\"int\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    s.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testInfiniteValues().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testInfiniteValues().mjava","sourceNew":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.NEGATIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MIN_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.POSITIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MAX_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(0.0f));\n    doc.add(new NumericField(\"int\").setIntValue(0));\n    writer.addDocument(doc);\n    writer.close();\n    \n    IndexSearcher s = new IndexSearcher(dir);\n    \n    Query q=NumericRangeQuery.newIntRange(\"int\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    s.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.NEGATIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MIN_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.POSITIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MAX_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(0.0f));\n    doc.add(new NumericField(\"int\").setIntValue(0));\n    writer.addDocument(doc);\n    writer.close();\n    \n    IndexSearcher s = new IndexSearcher(dir);\n    \n    Query q=NumericRangeQuery.newIntRange(\"int\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    s.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testInfiniteValues().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testInfiniteValues().mjava","sourceNew":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.NEGATIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MIN_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.POSITIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MAX_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(0.0f));\n    doc.add(new NumericField(\"int\").setIntValue(0));\n    writer.addDocument(doc);\n    writer.close();\n    \n    IndexSearcher s = new IndexSearcher(dir);\n    \n    Query q=NumericRangeQuery.newIntRange(\"int\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    s.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.NEGATIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MIN_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.POSITIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MAX_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(0.0f));\n    doc.add(new NumericField(\"int\").setIntValue(0));\n    writer.addDocument(doc);\n    writer.close();\n    \n    IndexSearcher s = new IndexSearcher(dir);\n    \n    Query q=NumericRangeQuery.newIntRange(\"int\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    s.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testInfiniteValues().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testInfiniteValues().mjava","sourceNew":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.NEGATIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MIN_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.POSITIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MAX_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(0.0f));\n    doc.add(new NumericField(\"int\").setIntValue(0));\n    writer.addDocument(doc);\n    writer.close();\n    \n    IndexSearcher s = new IndexSearcher(dir);\n    \n    Query q=NumericRangeQuery.newIntRange(\"int\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    s.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.NEGATIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MIN_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.POSITIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MAX_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(0.0f));\n    doc.add(new NumericField(\"int\").setIntValue(0));\n    writer.addDocument(doc);\n    writer.close();\n    \n    IndexSearcher s = new IndexSearcher(dir);\n    \n    Query q=NumericRangeQuery.newIntRange(\"int\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    s.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testInfiniteValues().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testInfiniteValues().mjava","sourceNew":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.NEGATIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MIN_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.POSITIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MAX_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(0.0f));\n    doc.add(new NumericField(\"int\").setIntValue(0));\n    writer.addDocument(doc);\n    writer.close();\n    \n    IndexSearcher s = new IndexSearcher(dir);\n    \n    Query q=NumericRangeQuery.newIntRange(\"int\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    s.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.NEGATIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MIN_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.POSITIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MAX_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(0.0f));\n    doc.add(new NumericField(\"int\").setIntValue(0));\n    writer.addDocument(doc);\n    writer.close();\n    \n    IndexSearcher s = new IndexSearcher(dir);\n    \n    Query q=NumericRangeQuery.newIntRange(\"int\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    s.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3a0403b45dfe384fae4a1b6e96c3265d000c498","date":1321445981,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testInfiniteValues().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testInfiniteValues().mjava","sourceNew":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.NEGATIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MIN_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.POSITIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MAX_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(0.0f));\n    doc.add(new NumericField(\"int\").setIntValue(0));\n    writer.addDocument(doc);\n    writer.close();\n    \n    IndexReader r = IndexReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    \n    Query q=NumericRangeQuery.newIntRange(\"int\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    s.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.NEGATIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MIN_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.POSITIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MAX_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(0.0f));\n    doc.add(new NumericField(\"int\").setIntValue(0));\n    writer.addDocument(doc);\n    writer.close();\n    \n    IndexSearcher s = new IndexSearcher(dir);\n    \n    Query q=NumericRangeQuery.newIntRange(\"int\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    s.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7f1640a619bcb2540ce0703e0db764ce7327c1a5","date":1321704123,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testInfiniteValues().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testInfiniteValues().mjava","sourceNew":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n      newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.NEGATIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MIN_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.POSITIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MAX_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(0.0f));\n    doc.add(new NumericField(\"int\").setIntValue(0));\n    writer.addDocument(doc);\n    \n    for (float f : TestNumericUtils.FLOAT_NANs) {\n      doc = new Document();\n      doc.add(new NumericField(\"float\").setFloatValue(f));\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    \n    IndexReader r = IndexReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    \n    Query q=NumericRangeQuery.newIntRange(\"int\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", Float.NaN, Float.NaN, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", TestNumericUtils.FLOAT_NANs.length,  topDocs.scoreDocs.length );\n\n    s.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.NEGATIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MIN_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.POSITIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MAX_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(0.0f));\n    doc.add(new NumericField(\"int\").setIntValue(0));\n    writer.addDocument(doc);\n    writer.close();\n    \n    IndexReader r = IndexReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    \n    Query q=NumericRangeQuery.newIntRange(\"int\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    s.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["fa0f44f887719e97183771e977cfc4bfb485b766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testInfiniteValues().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testInfiniteValues().mjava","sourceNew":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n      newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.NEGATIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MIN_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.POSITIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MAX_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(0.0f));\n    doc.add(new NumericField(\"int\").setIntValue(0));\n    writer.addDocument(doc);\n    \n    for (float f : TestNumericUtils.FLOAT_NANs) {\n      doc = new Document();\n      doc.add(new NumericField(\"float\").setFloatValue(f));\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    \n    IndexReader r = IndexReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    \n    Query q=NumericRangeQuery.newIntRange(\"int\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", Float.NaN, Float.NaN, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", TestNumericUtils.FLOAT_NANs.length,  topDocs.scoreDocs.length );\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n      newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.NEGATIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MIN_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.POSITIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MAX_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(0.0f));\n    doc.add(new NumericField(\"int\").setIntValue(0));\n    writer.addDocument(doc);\n    \n    for (float f : TestNumericUtils.FLOAT_NANs) {\n      doc = new Document();\n      doc.add(new NumericField(\"float\").setFloatValue(f));\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    \n    IndexReader r = IndexReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    \n    Query q=NumericRangeQuery.newIntRange(\"int\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", Float.NaN, Float.NaN, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", TestNumericUtils.FLOAT_NANs.length,  topDocs.scoreDocs.length );\n\n    s.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testInfiniteValues().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testInfiniteValues().mjava","sourceNew":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n      newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.NEGATIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MIN_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.POSITIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MAX_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(0.0f));\n    doc.add(new NumericField(\"int\").setIntValue(0));\n    writer.addDocument(doc);\n    \n    for (float f : TestNumericUtils.FLOAT_NANs) {\n      doc = new Document();\n      doc.add(new NumericField(\"float\").setFloatValue(f));\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    \n    IndexReader r = IndexReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    \n    Query q=NumericRangeQuery.newIntRange(\"int\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", Float.NaN, Float.NaN, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", TestNumericUtils.FLOAT_NANs.length,  topDocs.scoreDocs.length );\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n      newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.NEGATIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MIN_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.POSITIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MAX_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(0.0f));\n    doc.add(new NumericField(\"int\").setIntValue(0));\n    writer.addDocument(doc);\n    \n    for (float f : TestNumericUtils.FLOAT_NANs) {\n      doc = new Document();\n      doc.add(new NumericField(\"float\").setFloatValue(f));\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    \n    IndexReader r = IndexReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    \n    Query q=NumericRangeQuery.newIntRange(\"int\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", Float.NaN, Float.NaN, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", TestNumericUtils.FLOAT_NANs.length,  topDocs.scoreDocs.length );\n\n    s.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa0f44f887719e97183771e977cfc4bfb485b766","date":1326668713,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testInfiniteValues().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testInfiniteValues().mjava","sourceNew":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n      newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(new NumericField(\"float\", Float.NEGATIVE_INFINITY));\n    doc.add(new NumericField(\"int\", Integer.MIN_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\", Float.POSITIVE_INFINITY));\n    doc.add(new NumericField(\"int\", Integer.MAX_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\", 0.0f));\n    doc.add(new NumericField(\"int\", 0));\n    writer.addDocument(doc);\n    \n    for (float f : TestNumericUtils.FLOAT_NANs) {\n      doc = new Document();\n      doc.add(new NumericField(\"float\", f));\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    \n    IndexReader r = IndexReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    \n    Query q=NumericRangeQuery.newIntRange(\"int\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", Float.NaN, Float.NaN, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", TestNumericUtils.FLOAT_NANs.length,  topDocs.scoreDocs.length );\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n      newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.NEGATIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MIN_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(Float.POSITIVE_INFINITY));\n    doc.add(new NumericField(\"int\").setIntValue(Integer.MAX_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\").setFloatValue(0.0f));\n    doc.add(new NumericField(\"int\").setIntValue(0));\n    writer.addDocument(doc);\n    \n    for (float f : TestNumericUtils.FLOAT_NANs) {\n      doc = new Document();\n      doc.add(new NumericField(\"float\").setFloatValue(f));\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    \n    IndexReader r = IndexReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    \n    Query q=NumericRangeQuery.newIntRange(\"int\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", Float.NaN, Float.NaN, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", TestNumericUtils.FLOAT_NANs.length,  topDocs.scoreDocs.length );\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":["4ba19267cba8a08940edd30c894796d6e7899530","7f1640a619bcb2540ce0703e0db764ce7327c1a5"],"bugIntro":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testInfiniteValues().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testInfiniteValues().mjava","sourceNew":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n      newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(new NumericField(\"float\", Float.NEGATIVE_INFINITY));\n    doc.add(new NumericField(\"int\", Integer.MIN_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\", Float.POSITIVE_INFINITY));\n    doc.add(new NumericField(\"int\", Integer.MAX_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\", 0.0f));\n    doc.add(new NumericField(\"int\", 0));\n    writer.addDocument(doc);\n    \n    for (float f : TestNumericUtils.FLOAT_NANs) {\n      doc = new Document();\n      doc.add(new NumericField(\"float\", f));\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    \n    IndexReader r = IndexReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    \n    Query q=NumericRangeQuery.newIntRange(\"int\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", Float.NaN, Float.NaN, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", TestNumericUtils.FLOAT_NANs.length,  topDocs.scoreDocs.length );\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testInfiniteValues() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir,\n      newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(new NumericField(\"float\", Float.NEGATIVE_INFINITY));\n    doc.add(new NumericField(\"int\", Integer.MIN_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\", Float.POSITIVE_INFINITY));\n    doc.add(new NumericField(\"int\", Integer.MAX_VALUE));\n    writer.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new NumericField(\"float\", 0.0f));\n    doc.add(new NumericField(\"int\", 0));\n    writer.addDocument(doc);\n    \n    for (float f : TestNumericUtils.FLOAT_NANs) {\n      doc = new Document();\n      doc.add(new NumericField(\"float\", f));\n      writer.addDocument(doc);\n    }\n    \n    writer.close();\n    \n    IndexReader r = IndexReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    \n    Query q=NumericRangeQuery.newIntRange(\"int\", null, null, true, true);\n    TopDocs topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n    \n    q=NumericRangeQuery.newIntRange(\"int\", Integer.MIN_VALUE, Integer.MAX_VALUE, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", null, null, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 3,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY, false, false);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", 1,  topDocs.scoreDocs.length );\n\n    q=NumericRangeQuery.newFloatRange(\"float\", Float.NaN, Float.NaN, true, true);\n    topDocs = s.search(q, 10);\n    assertEquals(\"Score doc count\", TestNumericUtils.FLOAT_NANs.length,  topDocs.scoreDocs.length );\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7f1640a619bcb2540ce0703e0db764ce7327c1a5":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fa0f44f887719e97183771e977cfc4bfb485b766"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["7f1640a619bcb2540ce0703e0db764ce7327c1a5","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["1f653cfcf159baeaafe5d01682a911e95bba4012","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","1f653cfcf159baeaafe5d01682a911e95bba4012"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["7f1640a619bcb2540ce0703e0db764ce7327c1a5"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"a3776dccca01c11e7046323cfad46a3b4a471233":["1f653cfcf159baeaafe5d01682a911e95bba4012","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["d572389229127c297dd1fa5ce4758e1cec41e799"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"fa0f44f887719e97183771e977cfc4bfb485b766":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7f1640a619bcb2540ce0703e0db764ce7327c1a5":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","fa0f44f887719e97183771e977cfc4bfb485b766"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["135621f3a0670a9394eb563224a3b76cc4dddc0f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["7f1640a619bcb2540ce0703e0db764ce7327c1a5"],"fa0f44f887719e97183771e977cfc4bfb485b766":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}