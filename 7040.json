{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40BlockTreeTermsWriter#Lucene40BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","commits":[{"id":"0628077afea69a2955260949478afabab8e500d8","date":1413915332,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40BlockTreeTermsWriter#Lucene40BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public Lucene40BlockTreeTermsWriter(\n      SegmentWriteState state,\n      PostingsWriterBase postingsWriter,\n      int minItemsInBlock,\n      int maxItemsInBlock)\n    throws IOException\n  {\n    if (minItemsInBlock <= 1) {\n      throw new IllegalArgumentException(\"minItemsInBlock must be >= 2; got \" + minItemsInBlock);\n    }\n    if (maxItemsInBlock <= 0) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= 1; got \" + maxItemsInBlock);\n    }\n    if (minItemsInBlock > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= minItemsInBlock; got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n    if (2*(minItemsInBlock-1) > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be at least 2*(minItemsInBlock-1); got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n\n    maxDoc = state.segmentInfo.getDocCount();\n\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.minItemsInBlock = minItemsInBlock;\n      this.maxItemsInBlock = maxItemsInBlock;\n      writeHeader(out);\n\n      //DEBUG = state.segmentName.equals(\"_4a\");\n\n      final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(termsIndexFileName, state.context);\n      writeIndexHeader(indexOut);\n\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentInfo.name;\n\n      // System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n      postingsWriter.init(out, state);                          // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out, indexOut);\n      }\n    }\n    this.indexOut = indexOut;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6d238816bcdf9bbe4ec886226d89bd93834eb7e","date":1413925889,"type":5,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/blocktree/Lucene40BlockTreeTermsWriter#Lucene40BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/blocktree/Lucene40BlockTreeTermsWriter#Lucene40BlockTreeTermsWriter(SegmentWriteState,PostingsWriterBase,int,int).mjava","sourceNew":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public Lucene40BlockTreeTermsWriter(\n      SegmentWriteState state,\n      PostingsWriterBase postingsWriter,\n      int minItemsInBlock,\n      int maxItemsInBlock)\n    throws IOException\n  {\n    if (minItemsInBlock <= 1) {\n      throw new IllegalArgumentException(\"minItemsInBlock must be >= 2; got \" + minItemsInBlock);\n    }\n    if (maxItemsInBlock <= 0) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= 1; got \" + maxItemsInBlock);\n    }\n    if (minItemsInBlock > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= minItemsInBlock; got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n    if (2*(minItemsInBlock-1) > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be at least 2*(minItemsInBlock-1); got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n\n    maxDoc = state.segmentInfo.getDocCount();\n\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene40BlockTreeTermsReader.TERMS_EXTENSION);\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.minItemsInBlock = minItemsInBlock;\n      this.maxItemsInBlock = maxItemsInBlock;\n      writeHeader(out);\n\n      //DEBUG = state.segmentName.equals(\"_4a\");\n\n      final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene40BlockTreeTermsReader.TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(termsIndexFileName, state.context);\n      writeIndexHeader(indexOut);\n\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentInfo.name;\n\n      // System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n      postingsWriter.init(out, state);                          // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out, indexOut);\n      }\n    }\n    this.indexOut = indexOut;\n  }\n\n","sourceOld":"  /** Create a new writer.  The number of items (terms or\n   *  sub-blocks) per block will aim to be between\n   *  minItemsPerBlock and maxItemsPerBlock, though in some\n   *  cases the blocks may be smaller than the min. */\n  public Lucene40BlockTreeTermsWriter(\n      SegmentWriteState state,\n      PostingsWriterBase postingsWriter,\n      int minItemsInBlock,\n      int maxItemsInBlock)\n    throws IOException\n  {\n    if (minItemsInBlock <= 1) {\n      throw new IllegalArgumentException(\"minItemsInBlock must be >= 2; got \" + minItemsInBlock);\n    }\n    if (maxItemsInBlock <= 0) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= 1; got \" + maxItemsInBlock);\n    }\n    if (minItemsInBlock > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be >= minItemsInBlock; got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n    if (2*(minItemsInBlock-1) > maxItemsInBlock) {\n      throw new IllegalArgumentException(\"maxItemsInBlock must be at least 2*(minItemsInBlock-1); got maxItemsInBlock=\" + maxItemsInBlock + \" minItemsInBlock=\" + minItemsInBlock);\n    }\n\n    maxDoc = state.segmentInfo.getDocCount();\n\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_EXTENSION);\n    out = state.directory.createOutput(termsFileName, state.context);\n    boolean success = false;\n    IndexOutput indexOut = null;\n    try {\n      fieldInfos = state.fieldInfos;\n      this.minItemsInBlock = minItemsInBlock;\n      this.maxItemsInBlock = maxItemsInBlock;\n      writeHeader(out);\n\n      //DEBUG = state.segmentName.equals(\"_4a\");\n\n      final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TERMS_INDEX_EXTENSION);\n      indexOut = state.directory.createOutput(termsIndexFileName, state.context);\n      writeIndexHeader(indexOut);\n\n      this.postingsWriter = postingsWriter;\n      // segment = state.segmentInfo.name;\n\n      // System.out.println(\"BTW.init seg=\" + state.segmentName);\n\n      postingsWriter.init(out, state);                          // have consumer write its format/header\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(out, indexOut);\n      }\n    }\n    this.indexOut = indexOut;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c6d238816bcdf9bbe4ec886226d89bd93834eb7e":["0628077afea69a2955260949478afabab8e500d8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0628077afea69a2955260949478afabab8e500d8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c6d238816bcdf9bbe4ec886226d89bd93834eb7e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0628077afea69a2955260949478afabab8e500d8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0628077afea69a2955260949478afabab8e500d8":["c6d238816bcdf9bbe4ec886226d89bd93834eb7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c6d238816bcdf9bbe4ec886226d89bd93834eb7e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}