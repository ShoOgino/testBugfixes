{"path":"lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/dict/UserDictionary#lookup(char[],int,int).mjava","commits":[{"id":"8493925b2e70246f0961df584c01a8c2e61ee52f","date":1523611602,"type":0,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/dict/UserDictionary#lookup(char[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Lookup words in text\n   * @param chars text\n   * @param off offset into text\n   * @param len length of text\n   * @return array of wordId\n   */\n  public List<Integer> lookup(char[] chars, int off, int len) throws IOException {\n    List<Integer> result = new ArrayList<>();\n    final FST.BytesReader fstReader = fst.getBytesReader();\n\n    FST.Arc<Long> arc = new FST.Arc<>();\n    int end = off + len;\n    for (int startOffset = off; startOffset < end; startOffset++) {\n      arc = fst.getFirstArc(arc);\n      int output = 0;\n      int remaining = end - startOffset;\n      for (int i = 0; i < remaining; i++) {\n        int ch = chars[startOffset+i];\n        if (fst.findTargetArc(ch, arc, arc, i == 0, fstReader) == null) {\n          break; // continue to next position\n        }\n        output += arc.output.intValue();\n        if (arc.isFinal()) {\n          final int finalOutput = output + arc.nextFinalOutput.intValue();\n          result.add(finalOutput);\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c6453827f947004a68ad9db7418781e9df2f660","date":1523626811,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/dict/UserDictionary#lookup(char[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Lookup words in text\n   * @param chars text\n   * @param off offset into text\n   * @param len length of text\n   * @return array of wordId\n   */\n  public List<Integer> lookup(char[] chars, int off, int len) throws IOException {\n    List<Integer> result = new ArrayList<>();\n    final FST.BytesReader fstReader = fst.getBytesReader();\n\n    FST.Arc<Long> arc = new FST.Arc<>();\n    int end = off + len;\n    for (int startOffset = off; startOffset < end; startOffset++) {\n      arc = fst.getFirstArc(arc);\n      int output = 0;\n      int remaining = end - startOffset;\n      for (int i = 0; i < remaining; i++) {\n        int ch = chars[startOffset+i];\n        if (fst.findTargetArc(ch, arc, arc, i == 0, fstReader) == null) {\n          break; // continue to next position\n        }\n        output += arc.output.intValue();\n        if (arc.isFinal()) {\n          final int finalOutput = output + arc.nextFinalOutput.intValue();\n          result.add(finalOutput);\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54204c8a3ca26aeafd273139fc29baf70d0f6786","date":1564170395,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/dict/UserDictionary#lookup(char[],int,int).mjava","pathOld":"lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/dict/UserDictionary#lookup(char[],int,int).mjava","sourceNew":"  /**\n   * Lookup words in text\n   * @param chars text\n   * @param off offset into text\n   * @param len length of text\n   * @return array of wordId\n   */\n  public List<Integer> lookup(char[] chars, int off, int len) throws IOException {\n    List<Integer> result = new ArrayList<>();\n    final FST.BytesReader fstReader = fst.getBytesReader();\n\n    FST.Arc<Long> arc = new FST.Arc<>();\n    int end = off + len;\n    for (int startOffset = off; startOffset < end; startOffset++) {\n      arc = fst.getFirstArc(arc);\n      int output = 0;\n      int remaining = end - startOffset;\n      for (int i = 0; i < remaining; i++) {\n        int ch = chars[startOffset+i];\n        if (fst.findTargetArc(ch, arc, arc, i == 0, fstReader) == null) {\n          break; // continue to next position\n        }\n        output += arc.output().intValue();\n        if (arc.isFinal()) {\n          final int finalOutput = output + arc.nextFinalOutput().intValue();\n          result.add(finalOutput);\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Lookup words in text\n   * @param chars text\n   * @param off offset into text\n   * @param len length of text\n   * @return array of wordId\n   */\n  public List<Integer> lookup(char[] chars, int off, int len) throws IOException {\n    List<Integer> result = new ArrayList<>();\n    final FST.BytesReader fstReader = fst.getBytesReader();\n\n    FST.Arc<Long> arc = new FST.Arc<>();\n    int end = off + len;\n    for (int startOffset = off; startOffset < end; startOffset++) {\n      arc = fst.getFirstArc(arc);\n      int output = 0;\n      int remaining = end - startOffset;\n      for (int i = 0; i < remaining; i++) {\n        int ch = chars[startOffset+i];\n        if (fst.findTargetArc(ch, arc, arc, i == 0, fstReader) == null) {\n          break; // continue to next position\n        }\n        output += arc.output.intValue();\n        if (arc.isFinal()) {\n          final int finalOutput = output + arc.nextFinalOutput.intValue();\n          result.add(finalOutput);\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/dict/UserDictionary#lookup(char[],int,int).mjava","pathOld":"lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/dict/UserDictionary#lookup(char[],int,int).mjava","sourceNew":"  /**\n   * Lookup words in text\n   * @param chars text\n   * @param off offset into text\n   * @param len length of text\n   * @return array of wordId\n   */\n  public List<Integer> lookup(char[] chars, int off, int len) throws IOException {\n    List<Integer> result = new ArrayList<>();\n    final FST.BytesReader fstReader = fst.getBytesReader();\n\n    FST.Arc<Long> arc = new FST.Arc<>();\n    int end = off + len;\n    for (int startOffset = off; startOffset < end; startOffset++) {\n      arc = fst.getFirstArc(arc);\n      int output = 0;\n      int remaining = end - startOffset;\n      for (int i = 0; i < remaining; i++) {\n        int ch = chars[startOffset+i];\n        if (fst.findTargetArc(ch, arc, arc, i == 0, fstReader) == null) {\n          break; // continue to next position\n        }\n        output += arc.output().intValue();\n        if (arc.isFinal()) {\n          final int finalOutput = output + arc.nextFinalOutput().intValue();\n          result.add(finalOutput);\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Lookup words in text\n   * @param chars text\n   * @param off offset into text\n   * @param len length of text\n   * @return array of wordId\n   */\n  public List<Integer> lookup(char[] chars, int off, int len) throws IOException {\n    List<Integer> result = new ArrayList<>();\n    final FST.BytesReader fstReader = fst.getBytesReader();\n\n    FST.Arc<Long> arc = new FST.Arc<>();\n    int end = off + len;\n    for (int startOffset = off; startOffset < end; startOffset++) {\n      arc = fst.getFirstArc(arc);\n      int output = 0;\n      int remaining = end - startOffset;\n      for (int i = 0; i < remaining; i++) {\n        int ch = chars[startOffset+i];\n        if (fst.findTargetArc(ch, arc, arc, i == 0, fstReader) == null) {\n          break; // continue to next position\n        }\n        output += arc.output.intValue();\n        if (arc.isFinal()) {\n          final int finalOutput = output + arc.nextFinalOutput.intValue();\n          result.add(finalOutput);\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["5c6453827f947004a68ad9db7418781e9df2f660"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8493925b2e70246f0961df584c01a8c2e61ee52f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8061ddd97f3352007d927dae445884a6f3d857b":["5c6453827f947004a68ad9db7418781e9df2f660","54204c8a3ca26aeafd273139fc29baf70d0f6786"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["54204c8a3ca26aeafd273139fc29baf70d0f6786"],"5c6453827f947004a68ad9db7418781e9df2f660":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8493925b2e70246f0961df584c01a8c2e61ee52f"]},"commit2Childs":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8493925b2e70246f0961df584c01a8c2e61ee52f","5c6453827f947004a68ad9db7418781e9df2f660"],"8493925b2e70246f0961df584c01a8c2e61ee52f":["5c6453827f947004a68ad9db7418781e9df2f660"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"5c6453827f947004a68ad9db7418781e9df2f660":["54204c8a3ca26aeafd273139fc29baf70d0f6786","f8061ddd97f3352007d927dae445884a6f3d857b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}