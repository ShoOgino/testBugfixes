{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#getHostAddress().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getHostAddress().mjava","pathOld":"solr/src/java/org/apache/solr/cloud/ZkController#getHostAddress().mjava","sourceNew":"  // TODO: consider how this is done\n  private String getHostAddress() throws IOException {\n\n    if (localHost == null) {\n      localHost = \"http://\" + InetAddress.getLocalHost().getHostName();\n    } else {\n      Matcher m = URL_PREFIX.matcher(localHost);\n      if (m.matches()) {\n        String prefix = m.group(1);\n        localHost = prefix + localHost;\n      } else {\n        localHost = \"http://\" + localHost;\n      }\n    }\n\n    return localHost;\n  }\n\n","sourceOld":"  // TODO: consider how this is done\n  private String getHostAddress() throws IOException {\n\n    if (localHost == null) {\n      localHost = \"http://\" + InetAddress.getLocalHost().getHostName();\n    } else {\n      Matcher m = URL_PREFIX.matcher(localHost);\n      if (m.matches()) {\n        String prefix = m.group(1);\n        localHost = prefix + localHost;\n      } else {\n        localHost = \"http://\" + localHost;\n      }\n    }\n\n    return localHost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getHostAddress().mjava","pathOld":"solr/src/java/org/apache/solr/cloud/ZkController#getHostAddress().mjava","sourceNew":"  // TODO: consider how this is done\n  private String getHostAddress() throws IOException {\n\n    if (localHost == null) {\n      localHost = \"http://\" + InetAddress.getLocalHost().getHostName();\n    } else {\n      Matcher m = URL_PREFIX.matcher(localHost);\n      if (m.matches()) {\n        String prefix = m.group(1);\n        localHost = prefix + localHost;\n      } else {\n        localHost = \"http://\" + localHost;\n      }\n    }\n\n    return localHost;\n  }\n\n","sourceOld":"  // TODO: consider how this is done\n  private String getHostAddress() throws IOException {\n\n    if (localHost == null) {\n      localHost = \"http://\" + InetAddress.getLocalHost().getHostName();\n    } else {\n      Matcher m = URL_PREFIX.matcher(localHost);\n      if (m.matches()) {\n        String prefix = m.group(1);\n        localHost = prefix + localHost;\n      } else {\n        localHost = \"http://\" + localHost;\n      }\n    }\n\n    return localHost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#getHostAddress().mjava","pathOld":"solr/src/java/org/apache/solr/cloud/ZkController#getHostAddress().mjava","sourceNew":"  // TODO: consider how this is done\n  private String getHostAddress() throws IOException {\n\n    if (localHost == null) {\n      localHost = \"http://\" + InetAddress.getLocalHost().getHostName();\n    } else {\n      Matcher m = URL_PREFIX.matcher(localHost);\n      if (m.matches()) {\n        String prefix = m.group(1);\n        localHost = prefix + localHost;\n      } else {\n        localHost = \"http://\" + localHost;\n      }\n    }\n\n    return localHost;\n  }\n\n","sourceOld":"  // TODO: consider how this is done\n  private String getHostAddress() throws IOException {\n\n    if (localHost == null) {\n      localHost = \"http://\" + InetAddress.getLocalHost().getHostName();\n    } else {\n      Matcher m = URL_PREFIX.matcher(localHost);\n      if (m.matches()) {\n        String prefix = m.group(1);\n        localHost = prefix + localHost;\n      } else {\n        localHost = \"http://\" + localHost;\n      }\n    }\n\n    return localHost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bec832dd3e463a3d19dd7ab614a84b1e719fc2b6","date":1330290166,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getHostAddress().mjava","sourceNew":null,"sourceOld":"  // TODO: consider how this is done\n  private String getHostAddress() throws IOException {\n\n    if (localHost == null) {\n      localHost = \"http://\" + InetAddress.getLocalHost().getHostName();\n    } else {\n      Matcher m = URL_PREFIX.matcher(localHost);\n      if (m.matches()) {\n        String prefix = m.group(1);\n        localHost = prefix + localHost;\n      } else {\n        localHost = \"http://\" + localHost;\n      }\n    }\n\n    return localHost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":4,"author":"Ryan McKinley","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getHostAddress().mjava","sourceNew":null,"sourceOld":"  // TODO: consider how this is done\n  private String getHostAddress() throws IOException {\n\n    if (localHost == null) {\n      localHost = \"http://\" + InetAddress.getLocalHost().getHostName();\n    } else {\n      Matcher m = URL_PREFIX.matcher(localHost);\n      if (m.matches()) {\n        String prefix = m.group(1);\n        localHost = prefix + localHost;\n      } else {\n        localHost = \"http://\" + localHost;\n      }\n    }\n\n    return localHost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["c26f00b574427b55127e869b935845554afde1fa","bec832dd3e463a3d19dd7ab614a84b1e719fc2b6"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bec832dd3e463a3d19dd7ab614a84b1e719fc2b6":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bec832dd3e463a3d19dd7ab614a84b1e719fc2b6"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","bec832dd3e463a3d19dd7ab614a84b1e719fc2b6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"bec832dd3e463a3d19dd7ab614a84b1e719fc2b6":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}