{"path":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#createCollection(CloudState,String,int).mjava","commits":[{"id":"84250b785753dee996ec3f88a1ea2e941ebe7cfb","date":1328840665,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#createCollection(CloudState,String,int).mjava","pathOld":"/dev/null","sourceNew":"      private CloudState createCollection(CloudState state, String collectionName, int numShards) {\n        Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String, Slice>>();\n        Map<String, Slice> newSlices = new LinkedHashMap<String,Slice>();\n        newStates.putAll(state.getCollectionStates());\n        for (int i = 0; i < numShards; i++) {\n          final String sliceName = \"shard\" + (i+1);\n          newSlices.put(sliceName, new Slice(sliceName, Collections.EMPTY_MAP));\n        }\n        newStates.put(collectionName, newSlices);\n        CloudState newCloudState = new CloudState(state.getLiveNodes(), newStates);\n        return newCloudState;\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#createCollection(ClusterState,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#createCollection(CloudState,String,int).mjava","sourceNew":"      private ClusterState createCollection(ClusterState state, String collectionName, int numShards) {\n        Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String, Slice>>();\n        Map<String, Slice> newSlices = new LinkedHashMap<String,Slice>();\n        newStates.putAll(state.getCollectionStates());\n        for (int i = 0; i < numShards; i++) {\n          final String sliceName = \"shard\" + (i+1);\n          newSlices.put(sliceName, new Slice(sliceName, Collections.EMPTY_MAP));\n        }\n        newStates.put(collectionName, newSlices);\n        ClusterState newClusterState = new ClusterState(state.getLiveNodes(), newStates);\n        return newClusterState;\n      }\n\n","sourceOld":"      private CloudState createCollection(CloudState state, String collectionName, int numShards) {\n        Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String, Slice>>();\n        Map<String, Slice> newSlices = new LinkedHashMap<String,Slice>();\n        newStates.putAll(state.getCollectionStates());\n        for (int i = 0; i < numShards; i++) {\n          final String sliceName = \"shard\" + (i+1);\n          newSlices.put(sliceName, new Slice(sliceName, Collections.EMPTY_MAP));\n        }\n        newStates.put(collectionName, newSlices);\n        CloudState newCloudState = new CloudState(state.getLiveNodes(), newStates);\n        return newCloudState;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#createCollection(ClusterState,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#createCollection(CloudState,String,int).mjava","sourceNew":"      private ClusterState createCollection(ClusterState state, String collectionName, int numShards) {\n        Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String, Slice>>();\n        Map<String, Slice> newSlices = new LinkedHashMap<String,Slice>();\n        newStates.putAll(state.getCollectionStates());\n        for (int i = 0; i < numShards; i++) {\n          final String sliceName = \"shard\" + (i+1);\n          newSlices.put(sliceName, new Slice(sliceName, Collections.EMPTY_MAP));\n        }\n        newStates.put(collectionName, newSlices);\n        ClusterState newClusterState = new ClusterState(state.getLiveNodes(), newStates);\n        return newClusterState;\n      }\n\n","sourceOld":"      private CloudState createCollection(CloudState state, String collectionName, int numShards) {\n        Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String, Slice>>();\n        Map<String, Slice> newSlices = new LinkedHashMap<String,Slice>();\n        newStates.putAll(state.getCollectionStates());\n        for (int i = 0; i < numShards; i++) {\n          final String sliceName = \"shard\" + (i+1);\n          newSlices.put(sliceName, new Slice(sliceName, Collections.EMPTY_MAP));\n        }\n        newStates.put(collectionName, newSlices);\n        CloudState newCloudState = new CloudState(state.getLiveNodes(), newStates);\n        return newCloudState;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#createCollection(CloudState,String,int).mjava","sourceNew":null,"sourceOld":"      private CloudState createCollection(CloudState state, String collectionName, int numShards) {\n        Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String, Slice>>();\n        Map<String, Slice> newSlices = new LinkedHashMap<String,Slice>();\n        newStates.putAll(state.getCollectionStates());\n        for (int i = 0; i < numShards; i++) {\n          final String sliceName = \"shard\" + (i+1);\n          newSlices.put(sliceName, new Slice(sliceName, Collections.EMPTY_MAP));\n        }\n        newStates.put(collectionName, newSlices);\n        CloudState newCloudState = new CloudState(state.getLiveNodes(), newStates);\n        return newCloudState;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f767f8c99eaedb984df754fe61f21c5de260f94":["84250b785753dee996ec3f88a1ea2e941ebe7cfb"],"84250b785753dee996ec3f88a1ea2e941ebe7cfb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["84250b785753dee996ec3f88a1ea2e941ebe7cfb","3f767f8c99eaedb984df754fe61f21c5de260f94"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["84250b785753dee996ec3f88a1ea2e941ebe7cfb","3f767f8c99eaedb984df754fe61f21c5de260f94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f767f8c99eaedb984df754fe61f21c5de260f94"]},"commit2Childs":{"3f767f8c99eaedb984df754fe61f21c5de260f94":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"84250b785753dee996ec3f88a1ea2e941ebe7cfb":["3f767f8c99eaedb984df754fe61f21c5de260f94","d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["84250b785753dee996ec3f88a1ea2e941ebe7cfb"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}