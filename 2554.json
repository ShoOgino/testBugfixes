{"path":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#handleKerberos(CommandLine).mjava","commits":[{"id":"6e12ffe0fc2f16d13edb8f82cd33da7cbedda264","date":1499421663,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#handleKerberos(CommandLine).mjava","pathOld":"/dev/null","sourceNew":"    private int handleKerberos(CommandLine cli) throws Exception {\n      String cmd = cli.getArgs()[0];\n      boolean updateIncludeFileOnly = Boolean.parseBoolean(cli.getOptionValue(\"updateIncludeFileOnly\", \"false\"));\n      String securityJson = \"{\" +\n                \"\\n  \\\"authentication\\\":{\" +\n                \"\\n   \\\"class\\\":\\\"solr.KerberosPlugin\\\"\" +\n                \"\\n  }\" +\n                \"\\n}\";\n\n\n      switch (cmd) {\n        case \"enable\":\n          String zkHost = null;\n          boolean zkInaccessible = false;\n\n          if (!updateIncludeFileOnly) {\n            try {\n              zkHost = getZkHost(cli);\n            } catch (Exception ex) {\n              System.out.println(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                    + securityJson + \"\\n\");\n              zkInaccessible = true;\n            }\n            if (zkHost == null) {\n              if (zkInaccessible == false) {\n                System.out.println(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                    + securityJson + \"\\n\");\n                zkInaccessible = true;\n              }\n            }\n\n            // check if security is already enabled or not\n            if (!zkInaccessible) {\n              try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n                if (zkClient.exists(\"/security.json\", true)) {\n                  byte oldSecurityBytes[] = zkClient.getData(\"/security.json\", null, null, true);\n                  if (!\"{}\".equals(new String(oldSecurityBytes, StandardCharsets.UTF_8).trim())) {\n                    System.out.println(\"Security is already enabled. You can disable it with 'bin/solr auth disable'. Existing security.json: \\n\"\n                        + new String(oldSecurityBytes, StandardCharsets.UTF_8));\n                    exit(1);\n                  }\n                }\n              } catch (Exception ex) {\n                if (zkInaccessible == false) {\n                  System.out.println(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                      + securityJson + \"\\n\");\n                  zkInaccessible = true;\n                }\n              }\n            }\n          }\n\n          if (!updateIncludeFileOnly) {\n            if (!zkInaccessible) {\n              System.out.println(\"Uploading following security.json: \" + securityJson);\n              try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n                zkClient.setData(\"/security.json\", securityJson.getBytes(StandardCharsets.UTF_8), true);\n              } catch (Exception ex) {\n                if (zkInaccessible == false) {\n                  System.out.println(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                      + securityJson);\n                  zkInaccessible = true;\n                }\n              }\n            }\n          }\n\n          String config = StrUtils.join(Arrays.asList(cli.getOptionValues(\"config\")), ' ');\n          // config is base64 encoded (to get around parsing problems), decode it\n          config = config.replaceAll(\" \", \"\");\n          config = new String(Base64.getDecoder().decode(config.getBytes(\"UTF-8\")), \"UTF-8\");\n          config = config.replaceAll(\"\\n\", \"\").replaceAll(\"\\r\", \"\");\n\n          String solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          File includeFile = new File(solrIncludeFilename);\n          if (includeFile.exists() == false || includeFile.canWrite() == false) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            printAuthEnablingInstructions(config);\n            System.exit(0);\n          }\n\n          // update the solr.in.sh file to contain the necessary authentication lines\n          updateIncludeFileEnableAuth(includeFile, null, config);\n          System.out.println(\"Please restart any running Solr nodes.\");\n          return 0;\n\n        case \"disable\":\n          if (!updateIncludeFileOnly) {\n            zkHost = getZkHost(cli);\n            if (zkHost == null) {\n              stdout.print(\"ZK Host not found. Solr should be running in cloud mode\");\n              exit(1);\n            }\n\n            System.out.println(\"Uploading following security.json: {}\");\n\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", \"{}\".getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          includeFile = new File(solrIncludeFilename);\n          if (!includeFile.exists() || !includeFile.canWrite()) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            System.out.println(\"Security has been disabled. Please remove any SOLR_AUTH_TYPE or SOLR_AUTHENTICATION_OPTS configuration from solr.in.sh/solr.in.cmd.\\n\");\n            System.exit(0);\n          }\n\n          // update the solr.in.sh file to comment out the necessary authentication lines\n          updateIncludeFileDisableAuth(includeFile);\n          return 0;\n\n        default:\n          System.out.println(\"Valid auth commands are: enable, disable\");\n          exit(1);\n      }\n\n      System.out.println(\"Options not understood.\");\n      new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n      return 1;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ee8fbffa595c312bc0437f2c9bb6376a29c1b427"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f9a989a32a073c55e3aef6f807a3474184bbcf49","date":1499930209,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#handleKerberos(CommandLine).mjava","pathOld":"/dev/null","sourceNew":"    private int handleKerberos(CommandLine cli) throws Exception {\n      String cmd = cli.getArgs()[0];\n      boolean updateIncludeFileOnly = Boolean.parseBoolean(cli.getOptionValue(\"updateIncludeFileOnly\", \"false\"));\n      String securityJson = \"{\" +\n                \"\\n  \\\"authentication\\\":{\" +\n                \"\\n   \\\"class\\\":\\\"solr.KerberosPlugin\\\"\" +\n                \"\\n  }\" +\n                \"\\n}\";\n\n\n      switch (cmd) {\n        case \"enable\":\n          String zkHost = null;\n          boolean zkInaccessible = false;\n\n          if (!updateIncludeFileOnly) {\n            try {\n              zkHost = getZkHost(cli);\n            } catch (Exception ex) {\n              System.out.println(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                    + securityJson + \"\\n\");\n              zkInaccessible = true;\n            }\n            if (zkHost == null) {\n              if (zkInaccessible == false) {\n                System.out.println(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                    + securityJson + \"\\n\");\n                zkInaccessible = true;\n              }\n            }\n\n            // check if security is already enabled or not\n            if (!zkInaccessible) {\n              try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n                if (zkClient.exists(\"/security.json\", true)) {\n                  byte oldSecurityBytes[] = zkClient.getData(\"/security.json\", null, null, true);\n                  if (!\"{}\".equals(new String(oldSecurityBytes, StandardCharsets.UTF_8).trim())) {\n                    System.out.println(\"Security is already enabled. You can disable it with 'bin/solr auth disable'. Existing security.json: \\n\"\n                        + new String(oldSecurityBytes, StandardCharsets.UTF_8));\n                    exit(1);\n                  }\n                }\n              } catch (Exception ex) {\n                if (zkInaccessible == false) {\n                  System.out.println(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                      + securityJson + \"\\n\");\n                  zkInaccessible = true;\n                }\n              }\n            }\n          }\n\n          if (!updateIncludeFileOnly) {\n            if (!zkInaccessible) {\n              System.out.println(\"Uploading following security.json: \" + securityJson);\n              try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n                zkClient.setData(\"/security.json\", securityJson.getBytes(StandardCharsets.UTF_8), true);\n              } catch (Exception ex) {\n                if (zkInaccessible == false) {\n                  System.out.println(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                      + securityJson);\n                  zkInaccessible = true;\n                }\n              }\n            }\n          }\n\n          String config = StrUtils.join(Arrays.asList(cli.getOptionValues(\"config\")), ' ');\n          // config is base64 encoded (to get around parsing problems), decode it\n          config = config.replaceAll(\" \", \"\");\n          config = new String(Base64.getDecoder().decode(config.getBytes(\"UTF-8\")), \"UTF-8\");\n          config = config.replaceAll(\"\\n\", \"\").replaceAll(\"\\r\", \"\");\n\n          String solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          File includeFile = new File(solrIncludeFilename);\n          if (includeFile.exists() == false || includeFile.canWrite() == false) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            printAuthEnablingInstructions(config);\n            System.exit(0);\n          }\n\n          // update the solr.in.sh file to contain the necessary authentication lines\n          updateIncludeFileEnableAuth(includeFile, null, config);\n          System.out.println(\"Please restart any running Solr nodes.\");\n          return 0;\n\n        case \"disable\":\n          if (!updateIncludeFileOnly) {\n            zkHost = getZkHost(cli);\n            if (zkHost == null) {\n              stdout.print(\"ZK Host not found. Solr should be running in cloud mode\");\n              exit(1);\n            }\n\n            System.out.println(\"Uploading following security.json: {}\");\n\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", \"{}\".getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          includeFile = new File(solrIncludeFilename);\n          if (!includeFile.exists() || !includeFile.canWrite()) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            System.out.println(\"Security has been disabled. Please remove any SOLR_AUTH_TYPE or SOLR_AUTHENTICATION_OPTS configuration from solr.in.sh/solr.in.cmd.\\n\");\n            System.exit(0);\n          }\n\n          // update the solr.in.sh file to comment out the necessary authentication lines\n          updateIncludeFileDisableAuth(includeFile);\n          return 0;\n\n        default:\n          System.out.println(\"Valid auth commands are: enable, disable\");\n          exit(1);\n      }\n\n      System.out.println(\"Options not understood.\");\n      new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n      return 1;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb569fd721c41eafc2a2d788499a7df490c7f1a5","date":1499930871,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#handleKerberos(CommandLine).mjava","pathOld":"/dev/null","sourceNew":"    private int handleKerberos(CommandLine cli) throws Exception {\n      String cmd = cli.getArgs()[0];\n      boolean updateIncludeFileOnly = Boolean.parseBoolean(cli.getOptionValue(\"updateIncludeFileOnly\", \"false\"));\n      String securityJson = \"{\" +\n                \"\\n  \\\"authentication\\\":{\" +\n                \"\\n   \\\"class\\\":\\\"solr.KerberosPlugin\\\"\" +\n                \"\\n  }\" +\n                \"\\n}\";\n\n\n      switch (cmd) {\n        case \"enable\":\n          String zkHost = null;\n          boolean zkInaccessible = false;\n\n          if (!updateIncludeFileOnly) {\n            try {\n              zkHost = getZkHost(cli);\n            } catch (Exception ex) {\n              System.out.println(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                    + securityJson + \"\\n\");\n              zkInaccessible = true;\n            }\n            if (zkHost == null) {\n              if (zkInaccessible == false) {\n                System.out.println(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                    + securityJson + \"\\n\");\n                zkInaccessible = true;\n              }\n            }\n\n            // check if security is already enabled or not\n            if (!zkInaccessible) {\n              try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n                if (zkClient.exists(\"/security.json\", true)) {\n                  byte oldSecurityBytes[] = zkClient.getData(\"/security.json\", null, null, true);\n                  if (!\"{}\".equals(new String(oldSecurityBytes, StandardCharsets.UTF_8).trim())) {\n                    System.out.println(\"Security is already enabled. You can disable it with 'bin/solr auth disable'. Existing security.json: \\n\"\n                        + new String(oldSecurityBytes, StandardCharsets.UTF_8));\n                    exit(1);\n                  }\n                }\n              } catch (Exception ex) {\n                if (zkInaccessible == false) {\n                  System.out.println(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                      + securityJson + \"\\n\");\n                  zkInaccessible = true;\n                }\n              }\n            }\n          }\n\n          if (!updateIncludeFileOnly) {\n            if (!zkInaccessible) {\n              System.out.println(\"Uploading following security.json: \" + securityJson);\n              try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n                zkClient.setData(\"/security.json\", securityJson.getBytes(StandardCharsets.UTF_8), true);\n              } catch (Exception ex) {\n                if (zkInaccessible == false) {\n                  System.out.println(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                      + securityJson);\n                  zkInaccessible = true;\n                }\n              }\n            }\n          }\n\n          String config = StrUtils.join(Arrays.asList(cli.getOptionValues(\"config\")), ' ');\n          // config is base64 encoded (to get around parsing problems), decode it\n          config = config.replaceAll(\" \", \"\");\n          config = new String(Base64.getDecoder().decode(config.getBytes(\"UTF-8\")), \"UTF-8\");\n          config = config.replaceAll(\"\\n\", \"\").replaceAll(\"\\r\", \"\");\n\n          String solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          File includeFile = new File(solrIncludeFilename);\n          if (includeFile.exists() == false || includeFile.canWrite() == false) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            printAuthEnablingInstructions(config);\n            System.exit(0);\n          }\n\n          // update the solr.in.sh file to contain the necessary authentication lines\n          updateIncludeFileEnableAuth(includeFile, null, config);\n          System.out.println(\"Please restart any running Solr nodes.\");\n          return 0;\n\n        case \"disable\":\n          if (!updateIncludeFileOnly) {\n            zkHost = getZkHost(cli);\n            if (zkHost == null) {\n              stdout.print(\"ZK Host not found. Solr should be running in cloud mode\");\n              exit(1);\n            }\n\n            System.out.println(\"Uploading following security.json: {}\");\n\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", \"{}\".getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          includeFile = new File(solrIncludeFilename);\n          if (!includeFile.exists() || !includeFile.canWrite()) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            System.out.println(\"Security has been disabled. Please remove any SOLR_AUTH_TYPE or SOLR_AUTHENTICATION_OPTS configuration from solr.in.sh/solr.in.cmd.\\n\");\n            System.exit(0);\n          }\n\n          // update the solr.in.sh file to comment out the necessary authentication lines\n          updateIncludeFileDisableAuth(includeFile);\n          return 0;\n\n        default:\n          System.out.println(\"Valid auth commands are: enable, disable\");\n          exit(1);\n      }\n\n      System.out.println(\"Options not understood.\");\n      new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n      return 1;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#handleKerberos(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#handleKerberos(CommandLine).mjava","sourceNew":"    private int handleKerberos(CommandLine cli) throws Exception {\n      String cmd = cli.getArgs()[0];\n      boolean updateIncludeFileOnly = Boolean.parseBoolean(cli.getOptionValue(\"updateIncludeFileOnly\", \"false\"));\n      String securityJson = \"{\" +\n                \"\\n  \\\"authentication\\\":{\" +\n                \"\\n   \\\"class\\\":\\\"solr.KerberosPlugin\\\"\" +\n                \"\\n  }\" +\n                \"\\n}\";\n\n\n      switch (cmd) {\n        case \"enable\":\n          String zkHost = null;\n          boolean zkInaccessible = false;\n\n          if (!updateIncludeFileOnly) {\n            try {\n              zkHost = getZkHost(cli);\n            } catch (Exception ex) {\n              System.out.println(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                    + securityJson + \"\\n\");\n              zkInaccessible = true;\n            }\n            if (zkHost == null) {\n              if (zkInaccessible == false) {\n                System.out.println(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                    + securityJson + \"\\n\");\n                zkInaccessible = true;\n              }\n            }\n\n            // check if security is already enabled or not\n            if (!zkInaccessible) {\n              try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n                if (zkClient.exists(\"/security.json\", true)) {\n                  byte oldSecurityBytes[] = zkClient.getData(\"/security.json\", null, null, true);\n                  if (!\"{}\".equals(new String(oldSecurityBytes, StandardCharsets.UTF_8).trim())) {\n                    System.out.println(\"Security is already enabled. You can disable it with 'bin/solr auth disable'. Existing security.json: \\n\"\n                        + new String(oldSecurityBytes, StandardCharsets.UTF_8));\n                    exit(1);\n                  }\n                }\n              } catch (Exception ex) {\n                if (zkInaccessible == false) {\n                  System.out.println(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                      + securityJson + \"\\n\");\n                  zkInaccessible = true;\n                }\n              }\n            }\n          }\n\n          if (!updateIncludeFileOnly) {\n            if (!zkInaccessible) {\n              echoIfVerbose(\"Uploading following security.json: \" + securityJson, cli);\n              try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n                zkClient.setData(\"/security.json\", securityJson.getBytes(StandardCharsets.UTF_8), true);\n              } catch (Exception ex) {\n                if (zkInaccessible == false) {\n                  System.out.println(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                      + securityJson);\n                  zkInaccessible = true;\n                }\n              }\n            }\n          }\n\n          String config = StrUtils.join(Arrays.asList(cli.getOptionValues(\"config\")), ' ');\n          // config is base64 encoded (to get around parsing problems), decode it\n          config = config.replaceAll(\" \", \"\");\n          config = new String(Base64.getDecoder().decode(config.getBytes(\"UTF-8\")), \"UTF-8\");\n          config = config.replaceAll(\"\\n\", \"\").replaceAll(\"\\r\", \"\");\n\n          String solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          File includeFile = new File(solrIncludeFilename);\n          if (includeFile.exists() == false || includeFile.canWrite() == false) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            printAuthEnablingInstructions(config);\n            System.exit(0);\n          }\n\n          // update the solr.in.sh file to contain the necessary authentication lines\n          updateIncludeFileEnableAuth(includeFile, null, config, cli);\n          echo(\"Successfully enabled Kerberos authentication; please restart any running Solr nodes.\");\n          return 0;\n\n        case \"disable\":\n          if (!updateIncludeFileOnly) {\n            zkHost = getZkHost(cli);\n            if (zkHost == null) {\n              stdout.print(\"ZK Host not found. Solr should be running in cloud mode\");\n              exit(1);\n            }\n\n            echoIfVerbose(\"Uploading following security.json: {}\", cli);\n\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", \"{}\".getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          includeFile = new File(solrIncludeFilename);\n          if (!includeFile.exists() || !includeFile.canWrite()) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            System.out.println(\"Security has been disabled. Please remove any SOLR_AUTH_TYPE or SOLR_AUTHENTICATION_OPTS configuration from solr.in.sh/solr.in.cmd.\\n\");\n            System.exit(0);\n          }\n\n          // update the solr.in.sh file to comment out the necessary authentication lines\n          updateIncludeFileDisableAuth(includeFile, cli);\n          return 0;\n\n        default:\n          System.out.println(\"Valid auth commands are: enable, disable\");\n          exit(1);\n      }\n\n      System.out.println(\"Options not understood.\");\n      new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n      return 1;\n    }\n\n","sourceOld":"    private int handleKerberos(CommandLine cli) throws Exception {\n      String cmd = cli.getArgs()[0];\n      boolean updateIncludeFileOnly = Boolean.parseBoolean(cli.getOptionValue(\"updateIncludeFileOnly\", \"false\"));\n      String securityJson = \"{\" +\n                \"\\n  \\\"authentication\\\":{\" +\n                \"\\n   \\\"class\\\":\\\"solr.KerberosPlugin\\\"\" +\n                \"\\n  }\" +\n                \"\\n}\";\n\n\n      switch (cmd) {\n        case \"enable\":\n          String zkHost = null;\n          boolean zkInaccessible = false;\n\n          if (!updateIncludeFileOnly) {\n            try {\n              zkHost = getZkHost(cli);\n            } catch (Exception ex) {\n              System.out.println(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                    + securityJson + \"\\n\");\n              zkInaccessible = true;\n            }\n            if (zkHost == null) {\n              if (zkInaccessible == false) {\n                System.out.println(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                    + securityJson + \"\\n\");\n                zkInaccessible = true;\n              }\n            }\n\n            // check if security is already enabled or not\n            if (!zkInaccessible) {\n              try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n                if (zkClient.exists(\"/security.json\", true)) {\n                  byte oldSecurityBytes[] = zkClient.getData(\"/security.json\", null, null, true);\n                  if (!\"{}\".equals(new String(oldSecurityBytes, StandardCharsets.UTF_8).trim())) {\n                    System.out.println(\"Security is already enabled. You can disable it with 'bin/solr auth disable'. Existing security.json: \\n\"\n                        + new String(oldSecurityBytes, StandardCharsets.UTF_8));\n                    exit(1);\n                  }\n                }\n              } catch (Exception ex) {\n                if (zkInaccessible == false) {\n                  System.out.println(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                      + securityJson + \"\\n\");\n                  zkInaccessible = true;\n                }\n              }\n            }\n          }\n\n          if (!updateIncludeFileOnly) {\n            if (!zkInaccessible) {\n              System.out.println(\"Uploading following security.json: \" + securityJson);\n              try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n                zkClient.setData(\"/security.json\", securityJson.getBytes(StandardCharsets.UTF_8), true);\n              } catch (Exception ex) {\n                if (zkInaccessible == false) {\n                  System.out.println(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                      + securityJson);\n                  zkInaccessible = true;\n                }\n              }\n            }\n          }\n\n          String config = StrUtils.join(Arrays.asList(cli.getOptionValues(\"config\")), ' ');\n          // config is base64 encoded (to get around parsing problems), decode it\n          config = config.replaceAll(\" \", \"\");\n          config = new String(Base64.getDecoder().decode(config.getBytes(\"UTF-8\")), \"UTF-8\");\n          config = config.replaceAll(\"\\n\", \"\").replaceAll(\"\\r\", \"\");\n\n          String solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          File includeFile = new File(solrIncludeFilename);\n          if (includeFile.exists() == false || includeFile.canWrite() == false) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            printAuthEnablingInstructions(config);\n            System.exit(0);\n          }\n\n          // update the solr.in.sh file to contain the necessary authentication lines\n          updateIncludeFileEnableAuth(includeFile, null, config);\n          System.out.println(\"Please restart any running Solr nodes.\");\n          return 0;\n\n        case \"disable\":\n          if (!updateIncludeFileOnly) {\n            zkHost = getZkHost(cli);\n            if (zkHost == null) {\n              stdout.print(\"ZK Host not found. Solr should be running in cloud mode\");\n              exit(1);\n            }\n\n            System.out.println(\"Uploading following security.json: {}\");\n\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", \"{}\".getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          includeFile = new File(solrIncludeFilename);\n          if (!includeFile.exists() || !includeFile.canWrite()) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            System.out.println(\"Security has been disabled. Please remove any SOLR_AUTH_TYPE or SOLR_AUTHENTICATION_OPTS configuration from solr.in.sh/solr.in.cmd.\\n\");\n            System.exit(0);\n          }\n\n          // update the solr.in.sh file to comment out the necessary authentication lines\n          updateIncludeFileDisableAuth(includeFile);\n          return 0;\n\n        default:\n          System.out.println(\"Valid auth commands are: enable, disable\");\n          exit(1);\n      }\n\n      System.out.println(\"Options not understood.\");\n      new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n      return 1;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b79a5db147a1c6f95d1625ddbc3561ef56955225","date":1528848080,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#handleKerberos(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#handleKerberos(CommandLine).mjava","sourceNew":"    private int handleKerberos(CommandLine cli) throws Exception {\n      String cmd = cli.getArgs()[0];\n      boolean updateIncludeFileOnly = Boolean.parseBoolean(cli.getOptionValue(\"updateIncludeFileOnly\", \"false\"));\n      String securityJson = \"{\" +\n                \"\\n  \\\"authentication\\\":{\" +\n                \"\\n   \\\"class\\\":\\\"solr.KerberosPlugin\\\"\" +\n                \"\\n  }\" +\n                \"\\n}\";\n\n\n      switch (cmd) {\n        case \"enable\":\n          String zkHost = null;\n          boolean zkInaccessible = false;\n\n          if (!updateIncludeFileOnly) {\n            try {\n              zkHost = getZkHost(cli);\n            } catch (Exception ex) {\n              System.out.println(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                    + securityJson + \"\\n\");\n              zkInaccessible = true;\n            }\n            if (zkHost == null) {\n              if (zkInaccessible == false) {\n                System.out.println(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                    + securityJson + \"\\n\");\n                zkInaccessible = true;\n              }\n            }\n\n            // check if security is already enabled or not\n            if (!zkInaccessible) {\n              try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n                if (zkClient.exists(\"/security.json\", true)) {\n                  byte oldSecurityBytes[] = zkClient.getData(\"/security.json\", null, null, true);\n                  if (!\"{}\".equals(new String(oldSecurityBytes, StandardCharsets.UTF_8).trim())) {\n                    System.out.println(\"Security is already enabled. You can disable it with 'bin/solr auth disable'. Existing security.json: \\n\"\n                        + new String(oldSecurityBytes, StandardCharsets.UTF_8));\n                    exit(1);\n                  }\n                }\n              } catch (Exception ex) {\n                if (zkInaccessible == false) {\n                  System.out.println(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                      + securityJson + \"\\n\");\n                  zkInaccessible = true;\n                }\n              }\n            }\n          }\n\n          if (!updateIncludeFileOnly) {\n            if (!zkInaccessible) {\n              echoIfVerbose(\"Uploading following security.json: \" + securityJson, cli);\n              try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n                zkClient.setData(\"/security.json\", securityJson.getBytes(StandardCharsets.UTF_8), true);\n              } catch (Exception ex) {\n                if (zkInaccessible == false) {\n                  System.out.println(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                      + securityJson);\n                  zkInaccessible = true;\n                }\n              }\n            }\n          }\n\n          String config = StrUtils.join(Arrays.asList(cli.getOptionValues(\"config\")), ' ');\n          // config is base64 encoded (to get around parsing problems), decode it\n          config = config.replaceAll(\" \", \"\");\n          config = new String(Base64.getDecoder().decode(config.getBytes(\"UTF-8\")), \"UTF-8\");\n          config = config.replaceAll(\"\\n\", \"\").replaceAll(\"\\r\", \"\");\n\n          String solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          File includeFile = new File(solrIncludeFilename);\n          if (includeFile.exists() == false || includeFile.canWrite() == false) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            printAuthEnablingInstructions(config);\n            System.exit(0);\n          }\n\n          // update the solr.in.sh file to contain the necessary authentication lines\n          updateIncludeFileEnableAuth(includeFile, null, config, cli);\n          echo(\"Successfully enabled Kerberos authentication; please restart any running Solr nodes.\");\n          return 0;\n\n        case \"disable\":\n          if (!updateIncludeFileOnly) {\n            zkHost = getZkHost(cli);\n            if (zkHost == null) {\n              stdout.print(\"ZK Host not found. Solr should be running in cloud mode\");\n              exit(1);\n            }\n\n            echoIfVerbose(\"Uploading following security.json: {}\", cli);\n\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", \"{}\".getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          includeFile = new File(solrIncludeFilename);\n          if (!includeFile.exists() || !includeFile.canWrite()) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            System.out.println(\"Security has been disabled. Please remove any SOLR_AUTH_TYPE or SOLR_AUTHENTICATION_OPTS configuration from solr.in.sh/solr.in.cmd.\\n\");\n            System.exit(0);\n          }\n\n          // update the solr.in.sh file to comment out the necessary authentication lines\n          updateIncludeFileDisableAuth(includeFile, cli);\n          return 0;\n\n        default:\n          System.out.println(\"Valid auth commands are: enable, disable\");\n          exit(1);\n      }\n\n      System.out.println(\"Options not understood.\");\n      new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n      return 1;\n    }\n\n","sourceOld":"    private int handleKerberos(CommandLine cli) throws Exception {\n      String cmd = cli.getArgs()[0];\n      boolean updateIncludeFileOnly = Boolean.parseBoolean(cli.getOptionValue(\"updateIncludeFileOnly\", \"false\"));\n      String securityJson = \"{\" +\n                \"\\n  \\\"authentication\\\":{\" +\n                \"\\n   \\\"class\\\":\\\"solr.KerberosPlugin\\\"\" +\n                \"\\n  }\" +\n                \"\\n}\";\n\n\n      switch (cmd) {\n        case \"enable\":\n          String zkHost = null;\n          boolean zkInaccessible = false;\n\n          if (!updateIncludeFileOnly) {\n            try {\n              zkHost = getZkHost(cli);\n            } catch (Exception ex) {\n              System.out.println(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                    + securityJson + \"\\n\");\n              zkInaccessible = true;\n            }\n            if (zkHost == null) {\n              if (zkInaccessible == false) {\n                System.out.println(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                    + securityJson + \"\\n\");\n                zkInaccessible = true;\n              }\n            }\n\n            // check if security is already enabled or not\n            if (!zkInaccessible) {\n              try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n                if (zkClient.exists(\"/security.json\", true)) {\n                  byte oldSecurityBytes[] = zkClient.getData(\"/security.json\", null, null, true);\n                  if (!\"{}\".equals(new String(oldSecurityBytes, StandardCharsets.UTF_8).trim())) {\n                    System.out.println(\"Security is already enabled. You can disable it with 'bin/solr auth disable'. Existing security.json: \\n\"\n                        + new String(oldSecurityBytes, StandardCharsets.UTF_8));\n                    exit(1);\n                  }\n                }\n              } catch (Exception ex) {\n                if (zkInaccessible == false) {\n                  System.out.println(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                      + securityJson + \"\\n\");\n                  zkInaccessible = true;\n                }\n              }\n            }\n          }\n\n          if (!updateIncludeFileOnly) {\n            if (!zkInaccessible) {\n              echoIfVerbose(\"Uploading following security.json: \" + securityJson, cli);\n              try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n                zkClient.setData(\"/security.json\", securityJson.getBytes(StandardCharsets.UTF_8), true);\n              } catch (Exception ex) {\n                if (zkInaccessible == false) {\n                  System.out.println(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                      + securityJson);\n                  zkInaccessible = true;\n                }\n              }\n            }\n          }\n\n          String config = StrUtils.join(Arrays.asList(cli.getOptionValues(\"config\")), ' ');\n          // config is base64 encoded (to get around parsing problems), decode it\n          config = config.replaceAll(\" \", \"\");\n          config = new String(Base64.getDecoder().decode(config.getBytes(\"UTF-8\")), \"UTF-8\");\n          config = config.replaceAll(\"\\n\", \"\").replaceAll(\"\\r\", \"\");\n\n          String solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          File includeFile = new File(solrIncludeFilename);\n          if (includeFile.exists() == false || includeFile.canWrite() == false) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            printAuthEnablingInstructions(config);\n            System.exit(0);\n          }\n\n          // update the solr.in.sh file to contain the necessary authentication lines\n          updateIncludeFileEnableAuth(includeFile, null, config, cli);\n          echo(\"Successfully enabled Kerberos authentication; please restart any running Solr nodes.\");\n          return 0;\n\n        case \"disable\":\n          if (!updateIncludeFileOnly) {\n            zkHost = getZkHost(cli);\n            if (zkHost == null) {\n              stdout.print(\"ZK Host not found. Solr should be running in cloud mode\");\n              exit(1);\n            }\n\n            echoIfVerbose(\"Uploading following security.json: {}\", cli);\n\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", \"{}\".getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          includeFile = new File(solrIncludeFilename);\n          if (!includeFile.exists() || !includeFile.canWrite()) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            System.out.println(\"Security has been disabled. Please remove any SOLR_AUTH_TYPE or SOLR_AUTHENTICATION_OPTS configuration from solr.in.sh/solr.in.cmd.\\n\");\n            System.exit(0);\n          }\n\n          // update the solr.in.sh file to comment out the necessary authentication lines\n          updateIncludeFileDisableAuth(includeFile, cli);\n          return 0;\n\n        default:\n          System.out.println(\"Valid auth commands are: enable, disable\");\n          exit(1);\n      }\n\n      System.out.println(\"Options not understood.\");\n      new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n      return 1;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#handleKerberos(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#handleKerberos(CommandLine).mjava","sourceNew":"    private int handleKerberos(CommandLine cli) throws Exception {\n      String cmd = cli.getArgs()[0];\n      boolean updateIncludeFileOnly = Boolean.parseBoolean(cli.getOptionValue(\"updateIncludeFileOnly\", \"false\"));\n      String securityJson = \"{\" +\n                \"\\n  \\\"authentication\\\":{\" +\n                \"\\n   \\\"class\\\":\\\"solr.KerberosPlugin\\\"\" +\n                \"\\n  }\" +\n                \"\\n}\";\n\n\n      switch (cmd) {\n        case \"enable\":\n          String zkHost = null;\n          boolean zkInaccessible = false;\n\n          if (!updateIncludeFileOnly) {\n            try {\n              zkHost = getZkHost(cli);\n            } catch (Exception ex) {\n              System.out.println(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                    + securityJson + \"\\n\");\n              zkInaccessible = true;\n            }\n            if (zkHost == null) {\n              if (zkInaccessible == false) {\n                System.out.println(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                    + securityJson + \"\\n\");\n                zkInaccessible = true;\n              }\n            }\n\n            // check if security is already enabled or not\n            if (!zkInaccessible) {\n              try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n                if (zkClient.exists(\"/security.json\", true)) {\n                  byte oldSecurityBytes[] = zkClient.getData(\"/security.json\", null, null, true);\n                  if (!\"{}\".equals(new String(oldSecurityBytes, StandardCharsets.UTF_8).trim())) {\n                    System.out.println(\"Security is already enabled. You can disable it with 'bin/solr auth disable'. Existing security.json: \\n\"\n                        + new String(oldSecurityBytes, StandardCharsets.UTF_8));\n                    exit(1);\n                  }\n                }\n              } catch (Exception ex) {\n                if (zkInaccessible == false) {\n                  System.out.println(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                      + securityJson + \"\\n\");\n                  zkInaccessible = true;\n                }\n              }\n            }\n          }\n\n          if (!updateIncludeFileOnly) {\n            if (!zkInaccessible) {\n              echoIfVerbose(\"Uploading following security.json: \" + securityJson, cli);\n              try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n                zkClient.setData(\"/security.json\", securityJson.getBytes(StandardCharsets.UTF_8), true);\n              } catch (Exception ex) {\n                if (zkInaccessible == false) {\n                  System.out.println(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                      + securityJson);\n                  zkInaccessible = true;\n                }\n              }\n            }\n          }\n\n          String config = StrUtils.join(Arrays.asList(cli.getOptionValues(\"config\")), ' ');\n          // config is base64 encoded (to get around parsing problems), decode it\n          config = config.replaceAll(\" \", \"\");\n          config = new String(Base64.getDecoder().decode(config.getBytes(\"UTF-8\")), \"UTF-8\");\n          config = config.replaceAll(\"\\n\", \"\").replaceAll(\"\\r\", \"\");\n\n          String solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          File includeFile = new File(solrIncludeFilename);\n          if (includeFile.exists() == false || includeFile.canWrite() == false) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            printAuthEnablingInstructions(config);\n            System.exit(0);\n          }\n\n          // update the solr.in.sh file to contain the necessary authentication lines\n          updateIncludeFileEnableAuth(includeFile, null, config, cli);\n          echo(\"Successfully enabled Kerberos authentication; please restart any running Solr nodes.\");\n          return 0;\n\n        case \"disable\":\n          if (!updateIncludeFileOnly) {\n            zkHost = getZkHost(cli);\n            if (zkHost == null) {\n              stdout.print(\"ZK Host not found. Solr should be running in cloud mode\");\n              exit(1);\n            }\n\n            echoIfVerbose(\"Uploading following security.json: {}\", cli);\n\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", \"{}\".getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          includeFile = new File(solrIncludeFilename);\n          if (!includeFile.exists() || !includeFile.canWrite()) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            System.out.println(\"Security has been disabled. Please remove any SOLR_AUTH_TYPE or SOLR_AUTHENTICATION_OPTS configuration from solr.in.sh/solr.in.cmd.\\n\");\n            System.exit(0);\n          }\n\n          // update the solr.in.sh file to comment out the necessary authentication lines\n          updateIncludeFileDisableAuth(includeFile, cli);\n          return 0;\n\n        default:\n          System.out.println(\"Valid auth commands are: enable, disable\");\n          exit(1);\n      }\n\n      System.out.println(\"Options not understood.\");\n      new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n      return 1;\n    }\n\n","sourceOld":"    private int handleKerberos(CommandLine cli) throws Exception {\n      String cmd = cli.getArgs()[0];\n      boolean updateIncludeFileOnly = Boolean.parseBoolean(cli.getOptionValue(\"updateIncludeFileOnly\", \"false\"));\n      String securityJson = \"{\" +\n                \"\\n  \\\"authentication\\\":{\" +\n                \"\\n   \\\"class\\\":\\\"solr.KerberosPlugin\\\"\" +\n                \"\\n  }\" +\n                \"\\n}\";\n\n\n      switch (cmd) {\n        case \"enable\":\n          String zkHost = null;\n          boolean zkInaccessible = false;\n\n          if (!updateIncludeFileOnly) {\n            try {\n              zkHost = getZkHost(cli);\n            } catch (Exception ex) {\n              System.out.println(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                    + securityJson + \"\\n\");\n              zkInaccessible = true;\n            }\n            if (zkHost == null) {\n              if (zkInaccessible == false) {\n                System.out.println(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                    + securityJson + \"\\n\");\n                zkInaccessible = true;\n              }\n            }\n\n            // check if security is already enabled or not\n            if (!zkInaccessible) {\n              try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n                if (zkClient.exists(\"/security.json\", true)) {\n                  byte oldSecurityBytes[] = zkClient.getData(\"/security.json\", null, null, true);\n                  if (!\"{}\".equals(new String(oldSecurityBytes, StandardCharsets.UTF_8).trim())) {\n                    System.out.println(\"Security is already enabled. You can disable it with 'bin/solr auth disable'. Existing security.json: \\n\"\n                        + new String(oldSecurityBytes, StandardCharsets.UTF_8));\n                    exit(1);\n                  }\n                }\n              } catch (Exception ex) {\n                if (zkInaccessible == false) {\n                  System.out.println(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                      + securityJson + \"\\n\");\n                  zkInaccessible = true;\n                }\n              }\n            }\n          }\n\n          if (!updateIncludeFileOnly) {\n            if (!zkInaccessible) {\n              echoIfVerbose(\"Uploading following security.json: \" + securityJson, cli);\n              try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n                zkClient.setData(\"/security.json\", securityJson.getBytes(StandardCharsets.UTF_8), true);\n              } catch (Exception ex) {\n                if (zkInaccessible == false) {\n                  System.out.println(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                      + securityJson);\n                  zkInaccessible = true;\n                }\n              }\n            }\n          }\n\n          String config = StrUtils.join(Arrays.asList(cli.getOptionValues(\"config\")), ' ');\n          // config is base64 encoded (to get around parsing problems), decode it\n          config = config.replaceAll(\" \", \"\");\n          config = new String(Base64.getDecoder().decode(config.getBytes(\"UTF-8\")), \"UTF-8\");\n          config = config.replaceAll(\"\\n\", \"\").replaceAll(\"\\r\", \"\");\n\n          String solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          File includeFile = new File(solrIncludeFilename);\n          if (includeFile.exists() == false || includeFile.canWrite() == false) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            printAuthEnablingInstructions(config);\n            System.exit(0);\n          }\n\n          // update the solr.in.sh file to contain the necessary authentication lines\n          updateIncludeFileEnableAuth(includeFile, null, config, cli);\n          echo(\"Successfully enabled Kerberos authentication; please restart any running Solr nodes.\");\n          return 0;\n\n        case \"disable\":\n          if (!updateIncludeFileOnly) {\n            zkHost = getZkHost(cli);\n            if (zkHost == null) {\n              stdout.print(\"ZK Host not found. Solr should be running in cloud mode\");\n              exit(1);\n            }\n\n            echoIfVerbose(\"Uploading following security.json: {}\", cli);\n\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", \"{}\".getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          includeFile = new File(solrIncludeFilename);\n          if (!includeFile.exists() || !includeFile.canWrite()) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            System.out.println(\"Security has been disabled. Please remove any SOLR_AUTH_TYPE or SOLR_AUTHENTICATION_OPTS configuration from solr.in.sh/solr.in.cmd.\\n\");\n            System.exit(0);\n          }\n\n          // update the solr.in.sh file to comment out the necessary authentication lines\n          updateIncludeFileDisableAuth(includeFile, cli);\n          return 0;\n\n        default:\n          System.out.println(\"Valid auth commands are: enable, disable\");\n          exit(1);\n      }\n\n      System.out.println(\"Options not understood.\");\n      new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n      return 1;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#handleKerberos(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#handleKerberos(CommandLine).mjava","sourceNew":"    private int handleKerberos(CommandLine cli) throws Exception {\n      String cmd = cli.getArgs()[0];\n      boolean updateIncludeFileOnly = Boolean.parseBoolean(cli.getOptionValue(\"updateIncludeFileOnly\", \"false\"));\n      String securityJson = \"{\" +\n                \"\\n  \\\"authentication\\\":{\" +\n                \"\\n   \\\"class\\\":\\\"solr.KerberosPlugin\\\"\" +\n                \"\\n  }\" +\n                \"\\n}\";\n\n\n      switch (cmd) {\n        case \"enable\":\n          String zkHost = null;\n          boolean zkInaccessible = false;\n\n          if (!updateIncludeFileOnly) {\n            try {\n              zkHost = getZkHost(cli);\n            } catch (Exception ex) {\n              System.out.println(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                    + securityJson + \"\\n\");\n              zkInaccessible = true;\n            }\n            if (zkHost == null) {\n              if (zkInaccessible == false) {\n                System.out.println(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                    + securityJson + \"\\n\");\n                zkInaccessible = true;\n              }\n            }\n\n            // check if security is already enabled or not\n            if (!zkInaccessible) {\n              try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n                if (zkClient.exists(\"/security.json\", true)) {\n                  byte oldSecurityBytes[] = zkClient.getData(\"/security.json\", null, null, true);\n                  if (!\"{}\".equals(new String(oldSecurityBytes, StandardCharsets.UTF_8).trim())) {\n                    System.out.println(\"Security is already enabled. You can disable it with 'bin/solr auth disable'. Existing security.json: \\n\"\n                        + new String(oldSecurityBytes, StandardCharsets.UTF_8));\n                    exit(1);\n                  }\n                }\n              } catch (Exception ex) {\n                if (zkInaccessible == false) {\n                  System.out.println(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                      + securityJson + \"\\n\");\n                  zkInaccessible = true;\n                }\n              }\n            }\n          }\n\n          if (!updateIncludeFileOnly) {\n            if (!zkInaccessible) {\n              echoIfVerbose(\"Uploading following security.json: \" + securityJson, cli);\n              try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n                zkClient.setData(\"/security.json\", securityJson.getBytes(StandardCharsets.UTF_8), true);\n              } catch (Exception ex) {\n                if (zkInaccessible == false) {\n                  System.out.println(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                      + securityJson);\n                  zkInaccessible = true;\n                }\n              }\n            }\n          }\n\n          String config = StrUtils.join(Arrays.asList(cli.getOptionValues(\"config\")), ' ');\n          // config is base64 encoded (to get around parsing problems), decode it\n          config = config.replaceAll(\" \", \"\");\n          config = new String(Base64.getDecoder().decode(config.getBytes(\"UTF-8\")), \"UTF-8\");\n          config = config.replaceAll(\"\\n\", \"\").replaceAll(\"\\r\", \"\");\n\n          String solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          File includeFile = new File(solrIncludeFilename);\n          if (includeFile.exists() == false || includeFile.canWrite() == false) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            printAuthEnablingInstructions(config);\n            System.exit(0);\n          }\n\n          // update the solr.in.sh file to contain the necessary authentication lines\n          updateIncludeFileEnableAuth(includeFile, null, config, cli);\n          echo(\"Successfully enabled Kerberos authentication; please restart any running Solr nodes.\");\n          return 0;\n\n        case \"disable\":\n          if (!updateIncludeFileOnly) {\n            zkHost = getZkHost(cli);\n            if (zkHost == null) {\n              stdout.print(\"ZK Host not found. Solr should be running in cloud mode\");\n              exit(1);\n            }\n\n            echoIfVerbose(\"Uploading following security.json: {}\", cli);\n\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", \"{}\".getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          includeFile = new File(solrIncludeFilename);\n          if (!includeFile.exists() || !includeFile.canWrite()) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            System.out.println(\"Security has been disabled. Please remove any SOLR_AUTH_TYPE or SOLR_AUTHENTICATION_OPTS configuration from solr.in.sh/solr.in.cmd.\\n\");\n            System.exit(0);\n          }\n\n          // update the solr.in.sh file to comment out the necessary authentication lines\n          updateIncludeFileDisableAuth(includeFile, cli);\n          return 0;\n\n        default:\n          System.out.println(\"Valid auth commands are: enable, disable\");\n          exit(1);\n      }\n\n      System.out.println(\"Options not understood.\");\n      new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n      return 1;\n    }\n\n","sourceOld":"    private int handleKerberos(CommandLine cli) throws Exception {\n      String cmd = cli.getArgs()[0];\n      boolean updateIncludeFileOnly = Boolean.parseBoolean(cli.getOptionValue(\"updateIncludeFileOnly\", \"false\"));\n      String securityJson = \"{\" +\n                \"\\n  \\\"authentication\\\":{\" +\n                \"\\n   \\\"class\\\":\\\"solr.KerberosPlugin\\\"\" +\n                \"\\n  }\" +\n                \"\\n}\";\n\n\n      switch (cmd) {\n        case \"enable\":\n          String zkHost = null;\n          boolean zkInaccessible = false;\n\n          if (!updateIncludeFileOnly) {\n            try {\n              zkHost = getZkHost(cli);\n            } catch (Exception ex) {\n              System.out.println(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                    + securityJson + \"\\n\");\n              zkInaccessible = true;\n            }\n            if (zkHost == null) {\n              if (zkInaccessible == false) {\n                System.out.println(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                    + securityJson + \"\\n\");\n                zkInaccessible = true;\n              }\n            }\n\n            // check if security is already enabled or not\n            if (!zkInaccessible) {\n              try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n                if (zkClient.exists(\"/security.json\", true)) {\n                  byte oldSecurityBytes[] = zkClient.getData(\"/security.json\", null, null, true);\n                  if (!\"{}\".equals(new String(oldSecurityBytes, StandardCharsets.UTF_8).trim())) {\n                    System.out.println(\"Security is already enabled. You can disable it with 'bin/solr auth disable'. Existing security.json: \\n\"\n                        + new String(oldSecurityBytes, StandardCharsets.UTF_8));\n                    exit(1);\n                  }\n                }\n              } catch (Exception ex) {\n                if (zkInaccessible == false) {\n                  System.out.println(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                      + securityJson + \"\\n\");\n                  zkInaccessible = true;\n                }\n              }\n            }\n          }\n\n          if (!updateIncludeFileOnly) {\n            if (!zkInaccessible) {\n              echoIfVerbose(\"Uploading following security.json: \" + securityJson, cli);\n              try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n                zkClient.setData(\"/security.json\", securityJson.getBytes(StandardCharsets.UTF_8), true);\n              } catch (Exception ex) {\n                if (zkInaccessible == false) {\n                  System.out.println(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                      + securityJson);\n                  zkInaccessible = true;\n                }\n              }\n            }\n          }\n\n          String config = StrUtils.join(Arrays.asList(cli.getOptionValues(\"config\")), ' ');\n          // config is base64 encoded (to get around parsing problems), decode it\n          config = config.replaceAll(\" \", \"\");\n          config = new String(Base64.getDecoder().decode(config.getBytes(\"UTF-8\")), \"UTF-8\");\n          config = config.replaceAll(\"\\n\", \"\").replaceAll(\"\\r\", \"\");\n\n          String solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          File includeFile = new File(solrIncludeFilename);\n          if (includeFile.exists() == false || includeFile.canWrite() == false) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            printAuthEnablingInstructions(config);\n            System.exit(0);\n          }\n\n          // update the solr.in.sh file to contain the necessary authentication lines\n          updateIncludeFileEnableAuth(includeFile, null, config, cli);\n          echo(\"Successfully enabled Kerberos authentication; please restart any running Solr nodes.\");\n          return 0;\n\n        case \"disable\":\n          if (!updateIncludeFileOnly) {\n            zkHost = getZkHost(cli);\n            if (zkHost == null) {\n              stdout.print(\"ZK Host not found. Solr should be running in cloud mode\");\n              exit(1);\n            }\n\n            echoIfVerbose(\"Uploading following security.json: {}\", cli);\n\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", \"{}\".getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          includeFile = new File(solrIncludeFilename);\n          if (!includeFile.exists() || !includeFile.canWrite()) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            System.out.println(\"Security has been disabled. Please remove any SOLR_AUTH_TYPE or SOLR_AUTHENTICATION_OPTS configuration from solr.in.sh/solr.in.cmd.\\n\");\n            System.exit(0);\n          }\n\n          // update the solr.in.sh file to comment out the necessary authentication lines\n          updateIncludeFileDisableAuth(includeFile, cli);\n          return 0;\n\n        default:\n          System.out.println(\"Valid auth commands are: enable, disable\");\n          exit(1);\n      }\n\n      System.out.println(\"Options not understood.\");\n      new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n      return 1;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#handleKerberos(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#handleKerberos(CommandLine).mjava","sourceNew":"    private int handleKerberos(CommandLine cli) throws Exception {\n      String cmd = cli.getArgs()[0];\n      boolean updateIncludeFileOnly = Boolean.parseBoolean(cli.getOptionValue(\"updateIncludeFileOnly\", \"false\"));\n      String securityJson = \"{\" +\n                \"\\n  \\\"authentication\\\":{\" +\n                \"\\n   \\\"class\\\":\\\"solr.KerberosPlugin\\\"\" +\n                \"\\n  }\" +\n                \"\\n}\";\n\n\n      switch (cmd) {\n        case \"enable\":\n          String zkHost = null;\n          boolean zkInaccessible = false;\n\n          if (!updateIncludeFileOnly) {\n            try {\n              zkHost = getZkHost(cli);\n            } catch (Exception ex) {\n              CLIO.out(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                    + securityJson + \"\\n\");\n              zkInaccessible = true;\n            }\n            if (zkHost == null) {\n              if (zkInaccessible == false) {\n                CLIO.out(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                    + securityJson + \"\\n\");\n                zkInaccessible = true;\n              }\n            }\n\n            // check if security is already enabled or not\n            if (!zkInaccessible) {\n              try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n                if (zkClient.exists(\"/security.json\", true)) {\n                  byte oldSecurityBytes[] = zkClient.getData(\"/security.json\", null, null, true);\n                  if (!\"{}\".equals(new String(oldSecurityBytes, StandardCharsets.UTF_8).trim())) {\n                    CLIO.out(\"Security is already enabled. You can disable it with 'bin/solr auth disable'. Existing security.json: \\n\"\n                        + new String(oldSecurityBytes, StandardCharsets.UTF_8));\n                    exit(1);\n                  }\n                }\n              } catch (Exception ex) {\n                if (zkInaccessible == false) {\n                  CLIO.out(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                      + securityJson + \"\\n\");\n                  zkInaccessible = true;\n                }\n              }\n            }\n          }\n\n          if (!updateIncludeFileOnly) {\n            if (!zkInaccessible) {\n              echoIfVerbose(\"Uploading following security.json: \" + securityJson, cli);\n              try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n                zkClient.setData(\"/security.json\", securityJson.getBytes(StandardCharsets.UTF_8), true);\n              } catch (Exception ex) {\n                if (zkInaccessible == false) {\n                  CLIO.out(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                      + securityJson);\n                  zkInaccessible = true;\n                }\n              }\n            }\n          }\n\n          String config = StrUtils.join(Arrays.asList(cli.getOptionValues(\"config\")), ' ');\n          // config is base64 encoded (to get around parsing problems), decode it\n          config = config.replaceAll(\" \", \"\");\n          config = new String(Base64.getDecoder().decode(config.getBytes(\"UTF-8\")), \"UTF-8\");\n          config = config.replaceAll(\"\\n\", \"\").replaceAll(\"\\r\", \"\");\n\n          String solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          File includeFile = new File(solrIncludeFilename);\n          if (includeFile.exists() == false || includeFile.canWrite() == false) {\n            CLIO.out(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            printAuthEnablingInstructions(config);\n            System.exit(0);\n          }\n\n          // update the solr.in.sh file to contain the necessary authentication lines\n          updateIncludeFileEnableAuth(includeFile, null, config, cli);\n          echo(\"Successfully enabled Kerberos authentication; please restart any running Solr nodes.\");\n          return 0;\n\n        case \"disable\":\n          if (!updateIncludeFileOnly) {\n            zkHost = getZkHost(cli);\n            if (zkHost == null) {\n              stdout.print(\"ZK Host not found. Solr should be running in cloud mode\");\n              exit(1);\n            }\n\n            echoIfVerbose(\"Uploading following security.json: {}\", cli);\n\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", \"{}\".getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          includeFile = new File(solrIncludeFilename);\n          if (!includeFile.exists() || !includeFile.canWrite()) {\n            CLIO.out(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            CLIO.out(\"Security has been disabled. Please remove any SOLR_AUTH_TYPE or SOLR_AUTHENTICATION_OPTS configuration from solr.in.sh/solr.in.cmd.\\n\");\n            System.exit(0);\n          }\n\n          // update the solr.in.sh file to comment out the necessary authentication lines\n          updateIncludeFileDisableAuth(includeFile, cli);\n          return 0;\n\n        default:\n          CLIO.out(\"Valid auth commands are: enable, disable\");\n          exit(1);\n      }\n\n      CLIO.out(\"Options not understood.\");\n      new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n      return 1;\n    }\n\n","sourceOld":"    private int handleKerberos(CommandLine cli) throws Exception {\n      String cmd = cli.getArgs()[0];\n      boolean updateIncludeFileOnly = Boolean.parseBoolean(cli.getOptionValue(\"updateIncludeFileOnly\", \"false\"));\n      String securityJson = \"{\" +\n                \"\\n  \\\"authentication\\\":{\" +\n                \"\\n   \\\"class\\\":\\\"solr.KerberosPlugin\\\"\" +\n                \"\\n  }\" +\n                \"\\n}\";\n\n\n      switch (cmd) {\n        case \"enable\":\n          String zkHost = null;\n          boolean zkInaccessible = false;\n\n          if (!updateIncludeFileOnly) {\n            try {\n              zkHost = getZkHost(cli);\n            } catch (Exception ex) {\n              System.out.println(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                    + securityJson + \"\\n\");\n              zkInaccessible = true;\n            }\n            if (zkHost == null) {\n              if (zkInaccessible == false) {\n                System.out.println(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                    + securityJson + \"\\n\");\n                zkInaccessible = true;\n              }\n            }\n\n            // check if security is already enabled or not\n            if (!zkInaccessible) {\n              try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n                if (zkClient.exists(\"/security.json\", true)) {\n                  byte oldSecurityBytes[] = zkClient.getData(\"/security.json\", null, null, true);\n                  if (!\"{}\".equals(new String(oldSecurityBytes, StandardCharsets.UTF_8).trim())) {\n                    System.out.println(\"Security is already enabled. You can disable it with 'bin/solr auth disable'. Existing security.json: \\n\"\n                        + new String(oldSecurityBytes, StandardCharsets.UTF_8));\n                    exit(1);\n                  }\n                }\n              } catch (Exception ex) {\n                if (zkInaccessible == false) {\n                  System.out.println(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                      + securityJson + \"\\n\");\n                  zkInaccessible = true;\n                }\n              }\n            }\n          }\n\n          if (!updateIncludeFileOnly) {\n            if (!zkInaccessible) {\n              echoIfVerbose(\"Uploading following security.json: \" + securityJson, cli);\n              try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n                zkClient.setData(\"/security.json\", securityJson.getBytes(StandardCharsets.UTF_8), true);\n              } catch (Exception ex) {\n                if (zkInaccessible == false) {\n                  System.out.println(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                      + securityJson);\n                  zkInaccessible = true;\n                }\n              }\n            }\n          }\n\n          String config = StrUtils.join(Arrays.asList(cli.getOptionValues(\"config\")), ' ');\n          // config is base64 encoded (to get around parsing problems), decode it\n          config = config.replaceAll(\" \", \"\");\n          config = new String(Base64.getDecoder().decode(config.getBytes(\"UTF-8\")), \"UTF-8\");\n          config = config.replaceAll(\"\\n\", \"\").replaceAll(\"\\r\", \"\");\n\n          String solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          File includeFile = new File(solrIncludeFilename);\n          if (includeFile.exists() == false || includeFile.canWrite() == false) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            printAuthEnablingInstructions(config);\n            System.exit(0);\n          }\n\n          // update the solr.in.sh file to contain the necessary authentication lines\n          updateIncludeFileEnableAuth(includeFile, null, config, cli);\n          echo(\"Successfully enabled Kerberos authentication; please restart any running Solr nodes.\");\n          return 0;\n\n        case \"disable\":\n          if (!updateIncludeFileOnly) {\n            zkHost = getZkHost(cli);\n            if (zkHost == null) {\n              stdout.print(\"ZK Host not found. Solr should be running in cloud mode\");\n              exit(1);\n            }\n\n            echoIfVerbose(\"Uploading following security.json: {}\", cli);\n\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", \"{}\".getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          includeFile = new File(solrIncludeFilename);\n          if (!includeFile.exists() || !includeFile.canWrite()) {\n            System.out.println(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            System.out.println(\"Security has been disabled. Please remove any SOLR_AUTH_TYPE or SOLR_AUTHENTICATION_OPTS configuration from solr.in.sh/solr.in.cmd.\\n\");\n            System.exit(0);\n          }\n\n          // update the solr.in.sh file to comment out the necessary authentication lines\n          updateIncludeFileDisableAuth(includeFile, cli);\n          return 0;\n\n        default:\n          System.out.println(\"Valid auth commands are: enable, disable\");\n          exit(1);\n      }\n\n      System.out.println(\"Options not understood.\");\n      new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n      return 1;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe214d6e09deed3001159c1ad5173f9c8fc4a7f5","date":1563597632,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#handleKerberos(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#handleKerberos(CommandLine).mjava","sourceNew":"    private int handleKerberos(CommandLine cli) throws Exception {\n      String cmd = cli.getArgs()[0];\n      boolean updateIncludeFileOnly = Boolean.parseBoolean(cli.getOptionValue(\"updateIncludeFileOnly\", \"false\"));\n      String securityJson = \"{\" +\n                \"\\n  \\\"authentication\\\":{\" +\n                \"\\n   \\\"class\\\":\\\"solr.KerberosPlugin\\\"\" +\n                \"\\n  }\" +\n                \"\\n}\";\n\n\n      switch (cmd) {\n        case \"enable\":\n          String zkHost = null;\n          boolean zkInaccessible = false;\n\n          if (!updateIncludeFileOnly) {\n            try {\n              zkHost = getZkHost(cli);\n            } catch (Exception ex) {\n              CLIO.out(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                    + securityJson + \"\\n\");\n              zkInaccessible = true;\n            }\n            if (zkHost == null) {\n              if (zkInaccessible == false) {\n                CLIO.out(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                    + securityJson + \"\\n\");\n                zkInaccessible = true;\n              }\n            }\n\n            // check if security is already enabled or not\n            if (!zkInaccessible) {\n              try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n                if (zkClient.exists(\"/security.json\", true)) {\n                  byte oldSecurityBytes[] = zkClient.getData(\"/security.json\", null, null, true);\n                  if (!\"{}\".equals(new String(oldSecurityBytes, StandardCharsets.UTF_8).trim())) {\n                    CLIO.out(\"Security is already enabled. You can disable it with 'bin/solr auth disable'. Existing security.json: \\n\"\n                        + new String(oldSecurityBytes, StandardCharsets.UTF_8));\n                    exit(1);\n                  }\n                }\n              } catch (Exception ex) {\n                if (zkInaccessible == false) {\n                  CLIO.out(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                      + securityJson + \"\\n\");\n                  zkInaccessible = true;\n                }\n              }\n            }\n          }\n\n          if (!updateIncludeFileOnly) {\n            if (!zkInaccessible) {\n              echoIfVerbose(\"Uploading following security.json: \" + securityJson, cli);\n              try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n                zkClient.setData(\"/security.json\", securityJson.getBytes(StandardCharsets.UTF_8), true);\n              } catch (Exception ex) {\n                if (zkInaccessible == false) {\n                  CLIO.out(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                      + securityJson);\n                  zkInaccessible = true;\n                }\n              }\n            }\n          }\n\n          String config = StrUtils.join(Arrays.asList(cli.getOptionValues(\"config\")), ' ');\n          // config is base64 encoded (to get around parsing problems), decode it\n          config = config.replaceAll(\" \", \"\");\n          config = new String(Base64.getDecoder()\n              .decode(config.getBytes(StandardCharsets.UTF_8)), StandardCharsets.UTF_8);\n          config = config.replaceAll(\"\\n\", \"\").replaceAll(\"\\r\", \"\");\n\n          String solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          File includeFile = new File(solrIncludeFilename);\n          if (includeFile.exists() == false || includeFile.canWrite() == false) {\n            CLIO.out(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            printAuthEnablingInstructions(config);\n            System.exit(0);\n          }\n\n          // update the solr.in.sh file to contain the necessary authentication lines\n          updateIncludeFileEnableAuth(includeFile, null, config, cli);\n          echo(\"Successfully enabled Kerberos authentication; please restart any running Solr nodes.\");\n          return 0;\n\n        case \"disable\":\n          if (!updateIncludeFileOnly) {\n            zkHost = getZkHost(cli);\n            if (zkHost == null) {\n              stdout.print(\"ZK Host not found. Solr should be running in cloud mode\");\n              exit(1);\n            }\n\n            echoIfVerbose(\"Uploading following security.json: {}\", cli);\n\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", \"{}\".getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          includeFile = new File(solrIncludeFilename);\n          if (!includeFile.exists() || !includeFile.canWrite()) {\n            CLIO.out(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            CLIO.out(\"Security has been disabled. Please remove any SOLR_AUTH_TYPE or SOLR_AUTHENTICATION_OPTS configuration from solr.in.sh/solr.in.cmd.\\n\");\n            System.exit(0);\n          }\n\n          // update the solr.in.sh file to comment out the necessary authentication lines\n          updateIncludeFileDisableAuth(includeFile, cli);\n          return 0;\n\n        default:\n          CLIO.out(\"Valid auth commands are: enable, disable\");\n          exit(1);\n      }\n\n      CLIO.out(\"Options not understood.\");\n      new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n      return 1;\n    }\n\n","sourceOld":"    private int handleKerberos(CommandLine cli) throws Exception {\n      String cmd = cli.getArgs()[0];\n      boolean updateIncludeFileOnly = Boolean.parseBoolean(cli.getOptionValue(\"updateIncludeFileOnly\", \"false\"));\n      String securityJson = \"{\" +\n                \"\\n  \\\"authentication\\\":{\" +\n                \"\\n   \\\"class\\\":\\\"solr.KerberosPlugin\\\"\" +\n                \"\\n  }\" +\n                \"\\n}\";\n\n\n      switch (cmd) {\n        case \"enable\":\n          String zkHost = null;\n          boolean zkInaccessible = false;\n\n          if (!updateIncludeFileOnly) {\n            try {\n              zkHost = getZkHost(cli);\n            } catch (Exception ex) {\n              CLIO.out(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                    + securityJson + \"\\n\");\n              zkInaccessible = true;\n            }\n            if (zkHost == null) {\n              if (zkInaccessible == false) {\n                CLIO.out(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                    + securityJson + \"\\n\");\n                zkInaccessible = true;\n              }\n            }\n\n            // check if security is already enabled or not\n            if (!zkInaccessible) {\n              try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n                if (zkClient.exists(\"/security.json\", true)) {\n                  byte oldSecurityBytes[] = zkClient.getData(\"/security.json\", null, null, true);\n                  if (!\"{}\".equals(new String(oldSecurityBytes, StandardCharsets.UTF_8).trim())) {\n                    CLIO.out(\"Security is already enabled. You can disable it with 'bin/solr auth disable'. Existing security.json: \\n\"\n                        + new String(oldSecurityBytes, StandardCharsets.UTF_8));\n                    exit(1);\n                  }\n                }\n              } catch (Exception ex) {\n                if (zkInaccessible == false) {\n                  CLIO.out(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                      + securityJson + \"\\n\");\n                  zkInaccessible = true;\n                }\n              }\n            }\n          }\n\n          if (!updateIncludeFileOnly) {\n            if (!zkInaccessible) {\n              echoIfVerbose(\"Uploading following security.json: \" + securityJson, cli);\n              try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n                zkClient.setData(\"/security.json\", securityJson.getBytes(StandardCharsets.UTF_8), true);\n              } catch (Exception ex) {\n                if (zkInaccessible == false) {\n                  CLIO.out(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                      + securityJson);\n                  zkInaccessible = true;\n                }\n              }\n            }\n          }\n\n          String config = StrUtils.join(Arrays.asList(cli.getOptionValues(\"config\")), ' ');\n          // config is base64 encoded (to get around parsing problems), decode it\n          config = config.replaceAll(\" \", \"\");\n          config = new String(Base64.getDecoder().decode(config.getBytes(\"UTF-8\")), \"UTF-8\");\n          config = config.replaceAll(\"\\n\", \"\").replaceAll(\"\\r\", \"\");\n\n          String solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          File includeFile = new File(solrIncludeFilename);\n          if (includeFile.exists() == false || includeFile.canWrite() == false) {\n            CLIO.out(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            printAuthEnablingInstructions(config);\n            System.exit(0);\n          }\n\n          // update the solr.in.sh file to contain the necessary authentication lines\n          updateIncludeFileEnableAuth(includeFile, null, config, cli);\n          echo(\"Successfully enabled Kerberos authentication; please restart any running Solr nodes.\");\n          return 0;\n\n        case \"disable\":\n          if (!updateIncludeFileOnly) {\n            zkHost = getZkHost(cli);\n            if (zkHost == null) {\n              stdout.print(\"ZK Host not found. Solr should be running in cloud mode\");\n              exit(1);\n            }\n\n            echoIfVerbose(\"Uploading following security.json: {}\", cli);\n\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", \"{}\".getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          includeFile = new File(solrIncludeFilename);\n          if (!includeFile.exists() || !includeFile.canWrite()) {\n            CLIO.out(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            CLIO.out(\"Security has been disabled. Please remove any SOLR_AUTH_TYPE or SOLR_AUTHENTICATION_OPTS configuration from solr.in.sh/solr.in.cmd.\\n\");\n            System.exit(0);\n          }\n\n          // update the solr.in.sh file to comment out the necessary authentication lines\n          updateIncludeFileDisableAuth(includeFile, cli);\n          return 0;\n\n        default:\n          CLIO.out(\"Valid auth commands are: enable, disable\");\n          exit(1);\n      }\n\n      CLIO.out(\"Options not understood.\");\n      new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n      return 1;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ee8fbffa595c312bc0437f2c9bb6376a29c1b427","date":1589412657,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#handleKerberos(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.AuthTool#handleKerberos(CommandLine).mjava","sourceNew":"    private int handleKerberos(CommandLine cli) throws Exception {\n      String cmd = cli.getArgs()[0];\n      boolean updateIncludeFileOnly = Boolean.parseBoolean(cli.getOptionValue(\"updateIncludeFileOnly\", \"false\"));\n      String securityJson = \"{\" +\n          \"\\n  \\\"authentication\\\":{\" +\n          \"\\n   \\\"class\\\":\\\"solr.KerberosPlugin\\\"\" +\n          \"\\n  }\" +\n          \"\\n}\";\n\n\n      switch (cmd) {\n        case \"enable\":\n          String zkHost = null;\n          boolean zkInaccessible = false;\n\n          if (!updateIncludeFileOnly) {\n            try {\n              zkHost = getZkHost(cli);\n            } catch (Exception ex) {\n              CLIO.out(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                  + securityJson + \"\\n\");\n              zkInaccessible = true;\n            }\n            if (zkHost == null) {\n              if (zkInaccessible == false) {\n                CLIO.out(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                    + securityJson + \"\\n\");\n                zkInaccessible = true;\n              }\n            }\n\n            // check if security is already enabled or not\n            if (!zkInaccessible) {\n              try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n                if (zkClient.exists(\"/security.json\", true)) {\n                  byte oldSecurityBytes[] = zkClient.getData(\"/security.json\", null, null, true);\n                  if (!\"{}\".equals(new String(oldSecurityBytes, StandardCharsets.UTF_8).trim())) {\n                    CLIO.out(\"Security is already enabled. You can disable it with 'bin/solr auth disable'. Existing security.json: \\n\"\n                        + new String(oldSecurityBytes, StandardCharsets.UTF_8));\n                    exit(1);\n                  }\n                }\n              } catch (Exception ex) {\n                if (zkInaccessible == false) {\n                  CLIO.out(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                      + securityJson + \"\\n\");\n                  zkInaccessible = true;\n                }\n              }\n            }\n          }\n\n          if (!updateIncludeFileOnly) {\n            if (!zkInaccessible) {\n              echoIfVerbose(\"Uploading following security.json: \" + securityJson, cli);\n              try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n                zkClient.setData(\"/security.json\", securityJson.getBytes(StandardCharsets.UTF_8), true);\n              } catch (Exception ex) {\n                if (zkInaccessible == false) {\n                  CLIO.out(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                      + securityJson);\n                  zkInaccessible = true;\n                }\n              }\n            }\n          }\n\n          String config = StrUtils.join(Arrays.asList(cli.getOptionValues(\"config\")), ' ');\n          // config is base64 encoded (to get around parsing problems), decode it\n          config = config.replaceAll(\" \", \"\");\n          config = new String(Base64.getDecoder()\n              .decode(config.getBytes(StandardCharsets.UTF_8)), StandardCharsets.UTF_8);\n          config = config.replaceAll(\"\\n\", \"\").replaceAll(\"\\r\", \"\");\n\n          String solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          File includeFile = new File(solrIncludeFilename);\n          if (includeFile.exists() == false || includeFile.canWrite() == false) {\n            CLIO.out(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            printAuthEnablingInstructions(config);\n            System.exit(0);\n          }\n\n          // update the solr.in.sh file to contain the necessary authentication lines\n          updateIncludeFileEnableAuth(includeFile, null, config, cli);\n          echo(\"Successfully enabled Kerberos authentication; please restart any running Solr nodes.\");\n          return 0;\n\n        case \"disable\":\n          if (!updateIncludeFileOnly) {\n            zkHost = getZkHost(cli);\n            if (zkHost == null) {\n              stdout.print(\"ZK Host not found. Solr should be running in cloud mode\");\n              exit(1);\n            }\n\n            echoIfVerbose(\"Uploading following security.json: {}\", cli);\n\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", \"{}\".getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          includeFile = new File(solrIncludeFilename);\n          if (!includeFile.exists() || !includeFile.canWrite()) {\n            CLIO.out(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            CLIO.out(\"Security has been disabled. Please remove any SOLR_AUTH_TYPE or SOLR_AUTHENTICATION_OPTS configuration from solr.in.sh/solr.in.cmd.\\n\");\n            System.exit(0);\n          }\n\n          // update the solr.in.sh file to comment out the necessary authentication lines\n          updateIncludeFileDisableAuth(includeFile, cli);\n          return 0;\n\n        default:\n          CLIO.out(\"Valid auth commands are: enable, disable\");\n          exit(1);\n      }\n\n      CLIO.out(\"Options not understood.\");\n      new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n      return 1;\n    }\n\n","sourceOld":"    private int handleKerberos(CommandLine cli) throws Exception {\n      String cmd = cli.getArgs()[0];\n      boolean updateIncludeFileOnly = Boolean.parseBoolean(cli.getOptionValue(\"updateIncludeFileOnly\", \"false\"));\n      String securityJson = \"{\" +\n                \"\\n  \\\"authentication\\\":{\" +\n                \"\\n   \\\"class\\\":\\\"solr.KerberosPlugin\\\"\" +\n                \"\\n  }\" +\n                \"\\n}\";\n\n\n      switch (cmd) {\n        case \"enable\":\n          String zkHost = null;\n          boolean zkInaccessible = false;\n\n          if (!updateIncludeFileOnly) {\n            try {\n              zkHost = getZkHost(cli);\n            } catch (Exception ex) {\n              CLIO.out(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                    + securityJson + \"\\n\");\n              zkInaccessible = true;\n            }\n            if (zkHost == null) {\n              if (zkInaccessible == false) {\n                CLIO.out(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                    + securityJson + \"\\n\");\n                zkInaccessible = true;\n              }\n            }\n\n            // check if security is already enabled or not\n            if (!zkInaccessible) {\n              try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n                if (zkClient.exists(\"/security.json\", true)) {\n                  byte oldSecurityBytes[] = zkClient.getData(\"/security.json\", null, null, true);\n                  if (!\"{}\".equals(new String(oldSecurityBytes, StandardCharsets.UTF_8).trim())) {\n                    CLIO.out(\"Security is already enabled. You can disable it with 'bin/solr auth disable'. Existing security.json: \\n\"\n                        + new String(oldSecurityBytes, StandardCharsets.UTF_8));\n                    exit(1);\n                  }\n                }\n              } catch (Exception ex) {\n                if (zkInaccessible == false) {\n                  CLIO.out(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                      + securityJson + \"\\n\");\n                  zkInaccessible = true;\n                }\n              }\n            }\n          }\n\n          if (!updateIncludeFileOnly) {\n            if (!zkInaccessible) {\n              echoIfVerbose(\"Uploading following security.json: \" + securityJson, cli);\n              try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n                zkClient.setData(\"/security.json\", securityJson.getBytes(StandardCharsets.UTF_8), true);\n              } catch (Exception ex) {\n                if (zkInaccessible == false) {\n                  CLIO.out(\"Unable to access ZooKeeper. Please add the following security.json to ZooKeeper (in case of SolrCloud):\\n\"\n                      + securityJson);\n                  zkInaccessible = true;\n                }\n              }\n            }\n          }\n\n          String config = StrUtils.join(Arrays.asList(cli.getOptionValues(\"config\")), ' ');\n          // config is base64 encoded (to get around parsing problems), decode it\n          config = config.replaceAll(\" \", \"\");\n          config = new String(Base64.getDecoder()\n              .decode(config.getBytes(StandardCharsets.UTF_8)), StandardCharsets.UTF_8);\n          config = config.replaceAll(\"\\n\", \"\").replaceAll(\"\\r\", \"\");\n\n          String solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          File includeFile = new File(solrIncludeFilename);\n          if (includeFile.exists() == false || includeFile.canWrite() == false) {\n            CLIO.out(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            printAuthEnablingInstructions(config);\n            System.exit(0);\n          }\n\n          // update the solr.in.sh file to contain the necessary authentication lines\n          updateIncludeFileEnableAuth(includeFile, null, config, cli);\n          echo(\"Successfully enabled Kerberos authentication; please restart any running Solr nodes.\");\n          return 0;\n\n        case \"disable\":\n          if (!updateIncludeFileOnly) {\n            zkHost = getZkHost(cli);\n            if (zkHost == null) {\n              stdout.print(\"ZK Host not found. Solr should be running in cloud mode\");\n              exit(1);\n            }\n\n            echoIfVerbose(\"Uploading following security.json: {}\", cli);\n\n            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {\n              zkClient.setData(\"/security.json\", \"{}\".getBytes(StandardCharsets.UTF_8), true);\n            }\n          }\n\n          solrIncludeFilename = cli.getOptionValue(\"solrIncludeFile\");\n          includeFile = new File(solrIncludeFilename);\n          if (!includeFile.exists() || !includeFile.canWrite()) {\n            CLIO.out(\"Solr include file \" + solrIncludeFilename + \" doesn't exist or is not writeable.\");\n            CLIO.out(\"Security has been disabled. Please remove any SOLR_AUTH_TYPE or SOLR_AUTHENTICATION_OPTS configuration from solr.in.sh/solr.in.cmd.\\n\");\n            System.exit(0);\n          }\n\n          // update the solr.in.sh file to comment out the necessary authentication lines\n          updateIncludeFileDisableAuth(includeFile, cli);\n          return 0;\n\n        default:\n          CLIO.out(\"Valid auth commands are: enable, disable\");\n          exit(1);\n      }\n\n      CLIO.out(\"Options not understood.\");\n      new HelpFormatter().printHelp(\"bin/solr auth <enable|disable> [OPTIONS]\", getToolOptions(this));\n      return 1;\n    }\n\n","bugFix":["6e12ffe0fc2f16d13edb8f82cd33da7cbedda264"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["6e12ffe0fc2f16d13edb8f82cd33da7cbedda264","b79a5db147a1c6f95d1625ddbc3561ef56955225"],"fe214d6e09deed3001159c1ad5173f9c8fc4a7f5":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["fb569fd721c41eafc2a2d788499a7df490c7f1a5","6e12ffe0fc2f16d13edb8f82cd33da7cbedda264"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fb569fd721c41eafc2a2d788499a7df490c7f1a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f9a989a32a073c55e3aef6f807a3474184bbcf49"],"ee8fbffa595c312bc0437f2c9bb6376a29c1b427":["fe214d6e09deed3001159c1ad5173f9c8fc4a7f5"],"6e12ffe0fc2f16d13edb8f82cd33da7cbedda264":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["b79a5db147a1c6f95d1625ddbc3561ef56955225"],"f9a989a32a073c55e3aef6f807a3474184bbcf49":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6e12ffe0fc2f16d13edb8f82cd33da7cbedda264"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ee8fbffa595c312bc0437f2c9bb6376a29c1b427"],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["6e12ffe0fc2f16d13edb8f82cd33da7cbedda264"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["6e12ffe0fc2f16d13edb8f82cd33da7cbedda264","b79a5db147a1c6f95d1625ddbc3561ef56955225"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"fe214d6e09deed3001159c1ad5173f9c8fc4a7f5":["ee8fbffa595c312bc0437f2c9bb6376a29c1b427"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"fb569fd721c41eafc2a2d788499a7df490c7f1a5":["3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb569fd721c41eafc2a2d788499a7df490c7f1a5","6e12ffe0fc2f16d13edb8f82cd33da7cbedda264","f9a989a32a073c55e3aef6f807a3474184bbcf49"],"6e12ffe0fc2f16d13edb8f82cd33da7cbedda264":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","3a7809d1d753b67f48b1a706e17034bf8b624ea3","f9a989a32a073c55e3aef6f807a3474184bbcf49","b79a5db147a1c6f95d1625ddbc3561ef56955225","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"ee8fbffa595c312bc0437f2c9bb6376a29c1b427":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["fe214d6e09deed3001159c1ad5173f9c8fc4a7f5"],"f9a989a32a073c55e3aef6f807a3474184bbcf49":["fb569fd721c41eafc2a2d788499a7df490c7f1a5"],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}