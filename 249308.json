{"path":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testTermVectors(CodecReader,PrintStream,boolean,boolean,boolean).mjava","commits":[{"id":"8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6","date":1425345513,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testTermVectors(CodecReader,PrintStream,boolean,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test term vectors.\n   * @lucene.experimental\n   */\n  public static Status.TermVectorStatus testTermVectors(CodecReader reader, PrintStream infoStream, boolean verbose, boolean crossCheckTermVectors, boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.TermVectorStatus status = new Status.TermVectorStatus();\n    final FieldInfos fieldInfos = reader.getFieldInfos();\n    final Bits onlyDocIsDeleted = new FixedBitSet(1);\n    \n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: term vectors........\");\n      }\n\n      PostingsEnum docs = null;\n      PostingsEnum postings = null;\n\n      // Only used if crossCheckTermVectors is true:\n      PostingsEnum postingsDocs = null;\n      PostingsEnum postingsPostings = null;\n\n      final Bits liveDocs = reader.getLiveDocs();\n\n      final Fields postingsFields;\n      // TODO: testTermsIndex\n      if (crossCheckTermVectors) {\n        postingsFields = reader.getPostingsReader().getMergeInstance();\n      } else {\n        postingsFields = null;\n      }\n\n      TermsEnum termsEnum = null;\n      TermsEnum postingsTermsEnum = null;\n      \n      TermVectorsReader vectorsReader = reader.getTermVectorsReader();\n\n      if (vectorsReader != null) {\n        vectorsReader = vectorsReader.getMergeInstance();\n        for (int j = 0; j < reader.maxDoc(); ++j) {\n          // Intentionally pull/visit (but don't count in\n          // stats) deleted documents to make sure they too\n          // are not corrupt:\n          Fields tfv = vectorsReader.get(j);\n          \n          // TODO: can we make a IS(FIR) that searches just\n          // this term vector... to pass for searcher?\n          \n          if (tfv != null) {\n            // First run with no deletions:\n            checkFields(tfv, null, 1, fieldInfos, false, true, infoStream, verbose);\n            \n            if (j == 0) {\n              // Also test with the 1 doc deleted; we only do this for first doc because this really is just looking for a [slightly] buggy\n              // TermVectors impl that fails to respect the incoming live docs:\n              checkFields(tfv, onlyDocIsDeleted, 1, fieldInfos, false, true, infoStream, verbose);\n            }\n            \n            // Only agg stats if the doc is live:\n            final boolean doStats = liveDocs == null || liveDocs.get(j);\n            \n            if (doStats) {\n              status.docCount++;\n            }\n            \n            for(String field : tfv) {\n              if (doStats) {\n                status.totVectors++;\n              }\n              \n              // Make sure FieldInfo thinks this field is vector'd:\n              final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n              if (!fieldInfo.hasVectors()) {\n                throw new RuntimeException(\"docID=\" + j + \" has term vectors for field=\" + field + \" but FieldInfo has storeTermVector=false\");\n              }\n              \n              if (crossCheckTermVectors) {\n                Terms terms = tfv.terms(field);\n                termsEnum = terms.iterator(termsEnum);\n                final boolean postingsHasFreq = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n                final boolean postingsHasPayload = fieldInfo.hasPayloads();\n                final boolean vectorsHasPayload = terms.hasPayloads();\n                \n                Terms postingsTerms = postingsFields.terms(field);\n                if (postingsTerms == null) {\n                  throw new RuntimeException(\"vector field=\" + field + \" does not exist in postings; doc=\" + j);\n                }\n                postingsTermsEnum = postingsTerms.iterator(postingsTermsEnum);\n                \n                final boolean hasProx = terms.hasOffsets() || terms.hasPositions();\n                BytesRef term = null;\n                while ((term = termsEnum.next()) != null) {\n                  \n                  if (hasProx) {\n                    postings = termsEnum.postings(null, postings, PostingsEnum.ALL);\n                    assert postings != null;\n                    docs = null;\n                  } else {\n                    docs = termsEnum.postings(null, docs);\n                    assert docs != null;\n                    postings = null;\n                  }\n                  \n                  final PostingsEnum docs2;\n                  if (hasProx) {\n                    assert postings != null;\n                    docs2 = postings;\n                  } else {\n                    assert docs != null;\n                    docs2 = docs;\n                  }\n                  \n                  final PostingsEnum postingsDocs2;\n                  if (!postingsTermsEnum.seekExact(term)) {\n                    throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" does not exist in postings; doc=\" + j);\n                  }\n                  postingsPostings = postingsTermsEnum.postings(null, postingsPostings, PostingsEnum.ALL);\n                  if (postingsPostings == null) {\n                    // Term vectors were indexed w/ pos but postings were not\n                    postingsDocs = postingsTermsEnum.postings(null, postingsDocs);\n                    if (postingsDocs == null) {\n                      throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" does not exist in postings; doc=\" + j);\n                    }\n                  }\n                  \n                  if (postingsPostings != null) {\n                    postingsDocs2 = postingsPostings;\n                  } else {\n                    postingsDocs2 = postingsDocs;\n                  }\n                  \n                  final int advanceDoc = postingsDocs2.advance(j);\n                  if (advanceDoc != j) {\n                    throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \": doc=\" + j + \" was not found in postings (got: \" + advanceDoc + \")\");\n                  }\n                  \n                  final int doc = docs2.nextDoc();\n                  \n                  if (doc != 0) {\n                    throw new RuntimeException(\"vector for doc \" + j + \" didn't return docID=0: got docID=\" + doc);\n                  }\n                  \n                  if (postingsHasFreq) {\n                    final int tf = docs2.freq();\n                    if (postingsHasFreq && postingsDocs2.freq() != tf) {\n                      throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": freq=\" + tf + \" differs from postings freq=\" + postingsDocs2.freq());\n                    }\n                    \n                    if (hasProx) {\n                      for (int i = 0; i < tf; i++) {\n                        int pos = postings.nextPosition();\n                        if (postingsPostings != null) {\n                          int postingsPos = postingsPostings.nextPosition();\n                          if (terms.hasPositions() && pos != postingsPos) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": pos=\" + pos + \" differs from postings pos=\" + postingsPos);\n                          }\n                        }\n                        \n                        // Call the methods to at least make\n                        // sure they don't throw exc:\n                        final int startOffset = postings.startOffset();\n                        final int endOffset = postings.endOffset();\n                        // TODO: these are too anal...?\n                        /*\n                        if (endOffset < startOffset) {\n                        throw new RuntimeException(\"vector startOffset=\" + startOffset + \" is > endOffset=\" + endOffset);\n                        }\n                        if (startOffset < lastStartOffset) {\n                        throw new RuntimeException(\"vector startOffset=\" + startOffset + \" is < prior startOffset=\" + lastStartOffset);\n                        }\n                        lastStartOffset = startOffset;\n                         */\n                        \n                        if (postingsPostings != null) {\n                          final int postingsStartOffset = postingsPostings.startOffset();\n                          \n                          final int postingsEndOffset = postingsPostings.endOffset();\n                          if (startOffset != -1 && postingsStartOffset != -1 && startOffset != postingsStartOffset) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": startOffset=\" + startOffset + \" differs from postings startOffset=\" + postingsStartOffset);\n                          }\n                          if (endOffset != -1 && postingsEndOffset != -1 && endOffset != postingsEndOffset) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": endOffset=\" + endOffset + \" differs from postings endOffset=\" + postingsEndOffset);\n                          }\n                        }\n                        \n                        BytesRef payload = postings.getPayload();\n                        \n                        if (payload != null) {\n                          assert vectorsHasPayload;\n                        }\n                        \n                        if (postingsHasPayload && vectorsHasPayload) {\n                          assert postingsPostings != null;\n                          \n                          if (payload == null) {\n                            // we have payloads, but not at this position. \n                            // postings has payloads too, it should not have one at this position\n                            if (postingsPostings.getPayload() != null) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has no payload but postings does: \" + postingsPostings.getPayload());\n                            }\n                          } else {\n                            // we have payloads, and one at this position\n                            // postings should also have one at this position, with the same bytes.\n                            if (postingsPostings.getPayload() == null) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has payload=\" + payload + \" but postings does not.\");\n                            }\n                            BytesRef postingsPayload = postingsPostings.getPayload();\n                            if (!payload.equals(postingsPayload)) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has payload=\" + payload + \" but differs from postings payload=\" + postingsPayload);\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      float vectorAvg = status.docCount == 0 ? 0 : status.totVectors / (float)status.docCount;\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d total term vector count; avg %.1f term/freq vector fields per doc] [took %.3f sec]\",\n                                    status.totVectors, vectorAvg, nsToSec(System.nanoTime() - startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    \n    return status;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testTermVectors(CodecReader,PrintStream,boolean,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test term vectors.\n   * @lucene.experimental\n   */\n  public static Status.TermVectorStatus testTermVectors(CodecReader reader, PrintStream infoStream, boolean verbose, boolean crossCheckTermVectors, boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.TermVectorStatus status = new Status.TermVectorStatus();\n    final FieldInfos fieldInfos = reader.getFieldInfos();\n    final Bits onlyDocIsDeleted = new FixedBitSet(1);\n    \n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: term vectors........\");\n      }\n\n      PostingsEnum docs = null;\n      PostingsEnum postings = null;\n\n      // Only used if crossCheckTermVectors is true:\n      PostingsEnum postingsDocs = null;\n      PostingsEnum postingsPostings = null;\n\n      final Bits liveDocs = reader.getLiveDocs();\n\n      final Fields postingsFields;\n      // TODO: testTermsIndex\n      if (crossCheckTermVectors) {\n        postingsFields = reader.getPostingsReader().getMergeInstance();\n      } else {\n        postingsFields = null;\n      }\n\n      TermsEnum termsEnum = null;\n      TermsEnum postingsTermsEnum = null;\n      \n      TermVectorsReader vectorsReader = reader.getTermVectorsReader();\n\n      if (vectorsReader != null) {\n        vectorsReader = vectorsReader.getMergeInstance();\n        for (int j = 0; j < reader.maxDoc(); ++j) {\n          // Intentionally pull/visit (but don't count in\n          // stats) deleted documents to make sure they too\n          // are not corrupt:\n          Fields tfv = vectorsReader.get(j);\n          \n          // TODO: can we make a IS(FIR) that searches just\n          // this term vector... to pass for searcher?\n          \n          if (tfv != null) {\n            // First run with no deletions:\n            checkFields(tfv, null, 1, fieldInfos, false, true, infoStream, verbose);\n            \n            if (j == 0) {\n              // Also test with the 1 doc deleted; we only do this for first doc because this really is just looking for a [slightly] buggy\n              // TermVectors impl that fails to respect the incoming live docs:\n              checkFields(tfv, onlyDocIsDeleted, 1, fieldInfos, false, true, infoStream, verbose);\n            }\n            \n            // Only agg stats if the doc is live:\n            final boolean doStats = liveDocs == null || liveDocs.get(j);\n            \n            if (doStats) {\n              status.docCount++;\n            }\n            \n            for(String field : tfv) {\n              if (doStats) {\n                status.totVectors++;\n              }\n              \n              // Make sure FieldInfo thinks this field is vector'd:\n              final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n              if (!fieldInfo.hasVectors()) {\n                throw new RuntimeException(\"docID=\" + j + \" has term vectors for field=\" + field + \" but FieldInfo has storeTermVector=false\");\n              }\n              \n              if (crossCheckTermVectors) {\n                Terms terms = tfv.terms(field);\n                termsEnum = terms.iterator(termsEnum);\n                final boolean postingsHasFreq = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n                final boolean postingsHasPayload = fieldInfo.hasPayloads();\n                final boolean vectorsHasPayload = terms.hasPayloads();\n                \n                Terms postingsTerms = postingsFields.terms(field);\n                if (postingsTerms == null) {\n                  throw new RuntimeException(\"vector field=\" + field + \" does not exist in postings; doc=\" + j);\n                }\n                postingsTermsEnum = postingsTerms.iterator(postingsTermsEnum);\n                \n                final boolean hasProx = terms.hasOffsets() || terms.hasPositions();\n                BytesRef term = null;\n                while ((term = termsEnum.next()) != null) {\n                  \n                  if (hasProx) {\n                    postings = termsEnum.postings(null, postings, PostingsEnum.ALL);\n                    assert postings != null;\n                    docs = null;\n                  } else {\n                    docs = termsEnum.postings(null, docs);\n                    assert docs != null;\n                    postings = null;\n                  }\n                  \n                  final PostingsEnum docs2;\n                  if (hasProx) {\n                    assert postings != null;\n                    docs2 = postings;\n                  } else {\n                    assert docs != null;\n                    docs2 = docs;\n                  }\n                  \n                  final PostingsEnum postingsDocs2;\n                  if (!postingsTermsEnum.seekExact(term)) {\n                    throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" does not exist in postings; doc=\" + j);\n                  }\n                  postingsPostings = postingsTermsEnum.postings(null, postingsPostings, PostingsEnum.ALL);\n                  if (postingsPostings == null) {\n                    // Term vectors were indexed w/ pos but postings were not\n                    postingsDocs = postingsTermsEnum.postings(null, postingsDocs);\n                    if (postingsDocs == null) {\n                      throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" does not exist in postings; doc=\" + j);\n                    }\n                  }\n                  \n                  if (postingsPostings != null) {\n                    postingsDocs2 = postingsPostings;\n                  } else {\n                    postingsDocs2 = postingsDocs;\n                  }\n                  \n                  final int advanceDoc = postingsDocs2.advance(j);\n                  if (advanceDoc != j) {\n                    throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \": doc=\" + j + \" was not found in postings (got: \" + advanceDoc + \")\");\n                  }\n                  \n                  final int doc = docs2.nextDoc();\n                  \n                  if (doc != 0) {\n                    throw new RuntimeException(\"vector for doc \" + j + \" didn't return docID=0: got docID=\" + doc);\n                  }\n                  \n                  if (postingsHasFreq) {\n                    final int tf = docs2.freq();\n                    if (postingsHasFreq && postingsDocs2.freq() != tf) {\n                      throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": freq=\" + tf + \" differs from postings freq=\" + postingsDocs2.freq());\n                    }\n                    \n                    if (hasProx) {\n                      for (int i = 0; i < tf; i++) {\n                        int pos = postings.nextPosition();\n                        if (postingsPostings != null) {\n                          int postingsPos = postingsPostings.nextPosition();\n                          if (terms.hasPositions() && pos != postingsPos) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": pos=\" + pos + \" differs from postings pos=\" + postingsPos);\n                          }\n                        }\n                        \n                        // Call the methods to at least make\n                        // sure they don't throw exc:\n                        final int startOffset = postings.startOffset();\n                        final int endOffset = postings.endOffset();\n                        // TODO: these are too anal...?\n                        /*\n                        if (endOffset < startOffset) {\n                        throw new RuntimeException(\"vector startOffset=\" + startOffset + \" is > endOffset=\" + endOffset);\n                        }\n                        if (startOffset < lastStartOffset) {\n                        throw new RuntimeException(\"vector startOffset=\" + startOffset + \" is < prior startOffset=\" + lastStartOffset);\n                        }\n                        lastStartOffset = startOffset;\n                         */\n                        \n                        if (postingsPostings != null) {\n                          final int postingsStartOffset = postingsPostings.startOffset();\n                          \n                          final int postingsEndOffset = postingsPostings.endOffset();\n                          if (startOffset != -1 && postingsStartOffset != -1 && startOffset != postingsStartOffset) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": startOffset=\" + startOffset + \" differs from postings startOffset=\" + postingsStartOffset);\n                          }\n                          if (endOffset != -1 && postingsEndOffset != -1 && endOffset != postingsEndOffset) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": endOffset=\" + endOffset + \" differs from postings endOffset=\" + postingsEndOffset);\n                          }\n                        }\n                        \n                        BytesRef payload = postings.getPayload();\n                        \n                        if (payload != null) {\n                          assert vectorsHasPayload;\n                        }\n                        \n                        if (postingsHasPayload && vectorsHasPayload) {\n                          assert postingsPostings != null;\n                          \n                          if (payload == null) {\n                            // we have payloads, but not at this position. \n                            // postings has payloads too, it should not have one at this position\n                            if (postingsPostings.getPayload() != null) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has no payload but postings does: \" + postingsPostings.getPayload());\n                            }\n                          } else {\n                            // we have payloads, and one at this position\n                            // postings should also have one at this position, with the same bytes.\n                            if (postingsPostings.getPayload() == null) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has payload=\" + payload + \" but postings does not.\");\n                            }\n                            BytesRef postingsPayload = postingsPostings.getPayload();\n                            if (!payload.equals(postingsPayload)) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has payload=\" + payload + \" but differs from postings payload=\" + postingsPayload);\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      float vectorAvg = status.docCount == 0 ? 0 : status.totVectors / (float)status.docCount;\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d total term vector count; avg %.1f term/freq vector fields per doc] [took %.3f sec]\",\n                                    status.totVectors, vectorAvg, nsToSec(System.nanoTime() - startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    \n    return status;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ed71f1a1881e9cb41ad3a1a7d5bff22021f1b6d","date":1427830834,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testTermVectors(CodecReader,PrintStream,boolean,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testTermVectors(CodecReader,PrintStream,boolean,boolean,boolean).mjava","sourceNew":"  /**\n   * Test term vectors.\n   * @lucene.experimental\n   */\n  public static Status.TermVectorStatus testTermVectors(CodecReader reader, PrintStream infoStream, boolean verbose, boolean crossCheckTermVectors, boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.TermVectorStatus status = new Status.TermVectorStatus();\n    final FieldInfos fieldInfos = reader.getFieldInfos();\n    final Bits onlyDocIsDeleted = new FixedBitSet(1);\n    \n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: term vectors........\");\n      }\n\n      PostingsEnum postings = null;\n\n      // Only used if crossCheckTermVectors is true:\n      PostingsEnum postingsDocs = null;\n      PostingsEnum postingsDocs2 = null;\n\n      final Bits liveDocs = reader.getLiveDocs();\n\n      final Fields postingsFields;\n      // TODO: testTermsIndex\n      if (crossCheckTermVectors) {\n        postingsFields = reader.getPostingsReader().getMergeInstance();\n      } else {\n        postingsFields = null;\n      }\n\n      TermsEnum termsEnum = null;\n      TermsEnum postingsTermsEnum = null;\n      \n      TermVectorsReader vectorsReader = reader.getTermVectorsReader();\n\n      if (vectorsReader != null) {\n        vectorsReader = vectorsReader.getMergeInstance();\n        for (int j = 0; j < reader.maxDoc(); ++j) {\n          // Intentionally pull/visit (but don't count in\n          // stats) deleted documents to make sure they too\n          // are not corrupt:\n          Fields tfv = vectorsReader.get(j);\n          \n          // TODO: can we make a IS(FIR) that searches just\n          // this term vector... to pass for searcher?\n          \n          if (tfv != null) {\n            // First run with no deletions:\n            checkFields(tfv, null, 1, fieldInfos, false, true, infoStream, verbose);\n            \n            if (j == 0) {\n              // Also test with the 1 doc deleted; we only do this for first doc because this really is just looking for a [slightly] buggy\n              // TermVectors impl that fails to respect the incoming live docs:\n              checkFields(tfv, onlyDocIsDeleted, 1, fieldInfos, false, true, infoStream, verbose);\n            }\n            \n            // Only agg stats if the doc is live:\n            final boolean doStats = liveDocs == null || liveDocs.get(j);\n            \n            if (doStats) {\n              status.docCount++;\n            }\n            \n            for(String field : tfv) {\n              if (doStats) {\n                status.totVectors++;\n              }\n              \n              // Make sure FieldInfo thinks this field is vector'd:\n              final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n              if (!fieldInfo.hasVectors()) {\n                throw new RuntimeException(\"docID=\" + j + \" has term vectors for field=\" + field + \" but FieldInfo has storeTermVector=false\");\n              }\n              \n              if (crossCheckTermVectors) {\n                Terms terms = tfv.terms(field);\n                termsEnum = terms.iterator(termsEnum);\n                final boolean postingsHasFreq = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n                final boolean postingsHasPayload = fieldInfo.hasPayloads();\n                final boolean vectorsHasPayload = terms.hasPayloads();\n                \n                Terms postingsTerms = postingsFields.terms(field);\n                if (postingsTerms == null) {\n                  throw new RuntimeException(\"vector field=\" + field + \" does not exist in postings; doc=\" + j);\n                }\n                postingsTermsEnum = postingsTerms.iterator(postingsTermsEnum);\n                \n                final boolean hasProx = terms.hasOffsets() || terms.hasPositions();\n                BytesRef term = null;\n                while ((term = termsEnum.next()) != null) {\n\n                  postings = termsEnum.postings(null, postings, PostingsEnum.ALL);\n                  assert postings != null;\n\n                  if (!postingsTermsEnum.seekExact(term)) {\n                    throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" does not exist in postings; doc=\" + j);\n                  }\n                  postingsDocs2 = postingsTermsEnum.postings(null, postingsDocs2, PostingsEnum.ALL);\n                  assert postingsDocs2 != null;\n\n                  \n                  final int advanceDoc = postingsDocs2.advance(j);\n                  if (advanceDoc != j) {\n                    throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \": doc=\" + j + \" was not found in postings (got: \" + advanceDoc + \")\");\n                  }\n                  \n                  final int doc = postings.nextDoc();\n                  \n                  if (doc != 0) {\n                    throw new RuntimeException(\"vector for doc \" + j + \" didn't return docID=0: got docID=\" + doc);\n                  }\n                  \n                  if (postingsHasFreq) {\n                    final int tf = postings.freq();\n                    if (postingsHasFreq && postingsDocs2.freq() != tf) {\n                      throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": freq=\" + tf + \" differs from postings freq=\" + postingsDocs2.freq());\n                    }\n                    \n                    if (hasProx) {\n                      for (int i = 0; i < tf; i++) {\n                        int pos = postings.nextPosition();\n                        if (postingsTerms.hasPositions()) {\n                          int postingsPos = postingsDocs2.nextPosition();\n                          if (terms.hasPositions() && pos != postingsPos) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": pos=\" + pos + \" differs from postings pos=\" + postingsPos);\n                          }\n                        }\n                        \n                        // Call the methods to at least make\n                        // sure they don't throw exc:\n                        final int startOffset = postings.startOffset();\n                        final int endOffset = postings.endOffset();\n                        // TODO: these are too anal...?\n                        /*\n                        if (endOffset < startOffset) {\n                        throw new RuntimeException(\"vector startOffset=\" + startOffset + \" is > endOffset=\" + endOffset);\n                        }\n                        if (startOffset < lastStartOffset) {\n                        throw new RuntimeException(\"vector startOffset=\" + startOffset + \" is < prior startOffset=\" + lastStartOffset);\n                        }\n                        lastStartOffset = startOffset;\n                         */\n\n                        final int postingsStartOffset = postingsDocs2.startOffset();\n                        final int postingsEndOffset = postingsDocs2.endOffset();\n                        if (startOffset != -1 && postingsStartOffset != -1 && startOffset != postingsStartOffset) {\n                          throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": startOffset=\" + startOffset + \" differs from postings startOffset=\" + postingsStartOffset);\n                        }\n                        if (endOffset != -1 && postingsEndOffset != -1 && endOffset != postingsEndOffset) {\n                          throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": endOffset=\" + endOffset + \" differs from postings endOffset=\" + postingsEndOffset);\n                        }\n                        \n                        BytesRef payload = postings.getPayload();\n                        \n                        if (payload != null) {\n                          assert vectorsHasPayload;\n                        }\n                        \n                        if (postingsHasPayload && vectorsHasPayload) {\n                          \n                          if (payload == null) {\n                            // we have payloads, but not at this position. \n                            // postings has payloads too, it should not have one at this position\n                            if (postingsDocs2.getPayload() != null) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has no payload but postings does: \" + postingsDocs2.getPayload());\n                            }\n                          } else {\n                            // we have payloads, and one at this position\n                            // postings should also have one at this position, with the same bytes.\n                            if (postingsDocs2.getPayload() == null) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has payload=\" + payload + \" but postings does not.\");\n                            }\n                            BytesRef postingsPayload = postingsDocs2.getPayload();\n                            if (!payload.equals(postingsPayload)) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has payload=\" + payload + \" but differs from postings payload=\" + postingsPayload);\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      float vectorAvg = status.docCount == 0 ? 0 : status.totVectors / (float)status.docCount;\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d total term vector count; avg %.1f term/freq vector fields per doc] [took %.3f sec]\",\n                                    status.totVectors, vectorAvg, nsToSec(System.nanoTime() - startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    \n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test term vectors.\n   * @lucene.experimental\n   */\n  public static Status.TermVectorStatus testTermVectors(CodecReader reader, PrintStream infoStream, boolean verbose, boolean crossCheckTermVectors, boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.TermVectorStatus status = new Status.TermVectorStatus();\n    final FieldInfos fieldInfos = reader.getFieldInfos();\n    final Bits onlyDocIsDeleted = new FixedBitSet(1);\n    \n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: term vectors........\");\n      }\n\n      PostingsEnum docs = null;\n      PostingsEnum postings = null;\n\n      // Only used if crossCheckTermVectors is true:\n      PostingsEnum postingsDocs = null;\n      PostingsEnum postingsPostings = null;\n\n      final Bits liveDocs = reader.getLiveDocs();\n\n      final Fields postingsFields;\n      // TODO: testTermsIndex\n      if (crossCheckTermVectors) {\n        postingsFields = reader.getPostingsReader().getMergeInstance();\n      } else {\n        postingsFields = null;\n      }\n\n      TermsEnum termsEnum = null;\n      TermsEnum postingsTermsEnum = null;\n      \n      TermVectorsReader vectorsReader = reader.getTermVectorsReader();\n\n      if (vectorsReader != null) {\n        vectorsReader = vectorsReader.getMergeInstance();\n        for (int j = 0; j < reader.maxDoc(); ++j) {\n          // Intentionally pull/visit (but don't count in\n          // stats) deleted documents to make sure they too\n          // are not corrupt:\n          Fields tfv = vectorsReader.get(j);\n          \n          // TODO: can we make a IS(FIR) that searches just\n          // this term vector... to pass for searcher?\n          \n          if (tfv != null) {\n            // First run with no deletions:\n            checkFields(tfv, null, 1, fieldInfos, false, true, infoStream, verbose);\n            \n            if (j == 0) {\n              // Also test with the 1 doc deleted; we only do this for first doc because this really is just looking for a [slightly] buggy\n              // TermVectors impl that fails to respect the incoming live docs:\n              checkFields(tfv, onlyDocIsDeleted, 1, fieldInfos, false, true, infoStream, verbose);\n            }\n            \n            // Only agg stats if the doc is live:\n            final boolean doStats = liveDocs == null || liveDocs.get(j);\n            \n            if (doStats) {\n              status.docCount++;\n            }\n            \n            for(String field : tfv) {\n              if (doStats) {\n                status.totVectors++;\n              }\n              \n              // Make sure FieldInfo thinks this field is vector'd:\n              final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n              if (!fieldInfo.hasVectors()) {\n                throw new RuntimeException(\"docID=\" + j + \" has term vectors for field=\" + field + \" but FieldInfo has storeTermVector=false\");\n              }\n              \n              if (crossCheckTermVectors) {\n                Terms terms = tfv.terms(field);\n                termsEnum = terms.iterator(termsEnum);\n                final boolean postingsHasFreq = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n                final boolean postingsHasPayload = fieldInfo.hasPayloads();\n                final boolean vectorsHasPayload = terms.hasPayloads();\n                \n                Terms postingsTerms = postingsFields.terms(field);\n                if (postingsTerms == null) {\n                  throw new RuntimeException(\"vector field=\" + field + \" does not exist in postings; doc=\" + j);\n                }\n                postingsTermsEnum = postingsTerms.iterator(postingsTermsEnum);\n                \n                final boolean hasProx = terms.hasOffsets() || terms.hasPositions();\n                BytesRef term = null;\n                while ((term = termsEnum.next()) != null) {\n                  \n                  if (hasProx) {\n                    postings = termsEnum.postings(null, postings, PostingsEnum.ALL);\n                    assert postings != null;\n                    docs = null;\n                  } else {\n                    docs = termsEnum.postings(null, docs);\n                    assert docs != null;\n                    postings = null;\n                  }\n                  \n                  final PostingsEnum docs2;\n                  if (hasProx) {\n                    assert postings != null;\n                    docs2 = postings;\n                  } else {\n                    assert docs != null;\n                    docs2 = docs;\n                  }\n                  \n                  final PostingsEnum postingsDocs2;\n                  if (!postingsTermsEnum.seekExact(term)) {\n                    throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" does not exist in postings; doc=\" + j);\n                  }\n                  postingsPostings = postingsTermsEnum.postings(null, postingsPostings, PostingsEnum.ALL);\n                  if (postingsPostings == null) {\n                    // Term vectors were indexed w/ pos but postings were not\n                    postingsDocs = postingsTermsEnum.postings(null, postingsDocs);\n                    if (postingsDocs == null) {\n                      throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" does not exist in postings; doc=\" + j);\n                    }\n                  }\n                  \n                  if (postingsPostings != null) {\n                    postingsDocs2 = postingsPostings;\n                  } else {\n                    postingsDocs2 = postingsDocs;\n                  }\n                  \n                  final int advanceDoc = postingsDocs2.advance(j);\n                  if (advanceDoc != j) {\n                    throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \": doc=\" + j + \" was not found in postings (got: \" + advanceDoc + \")\");\n                  }\n                  \n                  final int doc = docs2.nextDoc();\n                  \n                  if (doc != 0) {\n                    throw new RuntimeException(\"vector for doc \" + j + \" didn't return docID=0: got docID=\" + doc);\n                  }\n                  \n                  if (postingsHasFreq) {\n                    final int tf = docs2.freq();\n                    if (postingsHasFreq && postingsDocs2.freq() != tf) {\n                      throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": freq=\" + tf + \" differs from postings freq=\" + postingsDocs2.freq());\n                    }\n                    \n                    if (hasProx) {\n                      for (int i = 0; i < tf; i++) {\n                        int pos = postings.nextPosition();\n                        if (postingsPostings != null) {\n                          int postingsPos = postingsPostings.nextPosition();\n                          if (terms.hasPositions() && pos != postingsPos) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": pos=\" + pos + \" differs from postings pos=\" + postingsPos);\n                          }\n                        }\n                        \n                        // Call the methods to at least make\n                        // sure they don't throw exc:\n                        final int startOffset = postings.startOffset();\n                        final int endOffset = postings.endOffset();\n                        // TODO: these are too anal...?\n                        /*\n                        if (endOffset < startOffset) {\n                        throw new RuntimeException(\"vector startOffset=\" + startOffset + \" is > endOffset=\" + endOffset);\n                        }\n                        if (startOffset < lastStartOffset) {\n                        throw new RuntimeException(\"vector startOffset=\" + startOffset + \" is < prior startOffset=\" + lastStartOffset);\n                        }\n                        lastStartOffset = startOffset;\n                         */\n                        \n                        if (postingsPostings != null) {\n                          final int postingsStartOffset = postingsPostings.startOffset();\n                          \n                          final int postingsEndOffset = postingsPostings.endOffset();\n                          if (startOffset != -1 && postingsStartOffset != -1 && startOffset != postingsStartOffset) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": startOffset=\" + startOffset + \" differs from postings startOffset=\" + postingsStartOffset);\n                          }\n                          if (endOffset != -1 && postingsEndOffset != -1 && endOffset != postingsEndOffset) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": endOffset=\" + endOffset + \" differs from postings endOffset=\" + postingsEndOffset);\n                          }\n                        }\n                        \n                        BytesRef payload = postings.getPayload();\n                        \n                        if (payload != null) {\n                          assert vectorsHasPayload;\n                        }\n                        \n                        if (postingsHasPayload && vectorsHasPayload) {\n                          assert postingsPostings != null;\n                          \n                          if (payload == null) {\n                            // we have payloads, but not at this position. \n                            // postings has payloads too, it should not have one at this position\n                            if (postingsPostings.getPayload() != null) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has no payload but postings does: \" + postingsPostings.getPayload());\n                            }\n                          } else {\n                            // we have payloads, and one at this position\n                            // postings should also have one at this position, with the same bytes.\n                            if (postingsPostings.getPayload() == null) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has payload=\" + payload + \" but postings does not.\");\n                            }\n                            BytesRef postingsPayload = postingsPostings.getPayload();\n                            if (!payload.equals(postingsPayload)) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has payload=\" + payload + \" but differs from postings payload=\" + postingsPayload);\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      float vectorAvg = status.docCount == 0 ? 0 : status.totVectors / (float)status.docCount;\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d total term vector count; avg %.1f term/freq vector fields per doc] [took %.3f sec]\",\n                                    status.totVectors, vectorAvg, nsToSec(System.nanoTime() - startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    \n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d32215025934646ba86125e3adcb9b467f4a07ed","date":1427839762,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testTermVectors(CodecReader,PrintStream,boolean,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testTermVectors(CodecReader,PrintStream,boolean,boolean,boolean).mjava","sourceNew":"  /**\n   * Test term vectors.\n   * @lucene.experimental\n   */\n  public static Status.TermVectorStatus testTermVectors(CodecReader reader, PrintStream infoStream, boolean verbose, boolean crossCheckTermVectors, boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.TermVectorStatus status = new Status.TermVectorStatus();\n    final FieldInfos fieldInfos = reader.getFieldInfos();\n    final Bits onlyDocIsDeleted = new FixedBitSet(1);\n    \n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: term vectors........\");\n      }\n\n      PostingsEnum postings = null;\n\n      // Only used if crossCheckTermVectors is true:\n      PostingsEnum postingsDocs = null;\n      PostingsEnum postingsDocs2 = null;\n\n      final Bits liveDocs = reader.getLiveDocs();\n\n      final Fields postingsFields;\n      // TODO: testTermsIndex\n      if (crossCheckTermVectors) {\n        postingsFields = reader.getPostingsReader().getMergeInstance();\n      } else {\n        postingsFields = null;\n      }\n\n      TermsEnum termsEnum = null;\n      TermsEnum postingsTermsEnum = null;\n      \n      TermVectorsReader vectorsReader = reader.getTermVectorsReader();\n\n      if (vectorsReader != null) {\n        vectorsReader = vectorsReader.getMergeInstance();\n        for (int j = 0; j < reader.maxDoc(); ++j) {\n          // Intentionally pull/visit (but don't count in\n          // stats) deleted documents to make sure they too\n          // are not corrupt:\n          Fields tfv = vectorsReader.get(j);\n          \n          // TODO: can we make a IS(FIR) that searches just\n          // this term vector... to pass for searcher?\n          \n          if (tfv != null) {\n            // First run with no deletions:\n            checkFields(tfv, null, 1, fieldInfos, false, true, infoStream, verbose);\n            \n            if (j == 0) {\n              // Also test with the 1 doc deleted; we only do this for first doc because this really is just looking for a [slightly] buggy\n              // TermVectors impl that fails to respect the incoming live docs:\n              checkFields(tfv, onlyDocIsDeleted, 1, fieldInfos, false, true, infoStream, verbose);\n            }\n            \n            // Only agg stats if the doc is live:\n            final boolean doStats = liveDocs == null || liveDocs.get(j);\n            \n            if (doStats) {\n              status.docCount++;\n            }\n            \n            for(String field : tfv) {\n              if (doStats) {\n                status.totVectors++;\n              }\n              \n              // Make sure FieldInfo thinks this field is vector'd:\n              final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n              if (!fieldInfo.hasVectors()) {\n                throw new RuntimeException(\"docID=\" + j + \" has term vectors for field=\" + field + \" but FieldInfo has storeTermVector=false\");\n              }\n              \n              if (crossCheckTermVectors) {\n                Terms terms = tfv.terms(field);\n                termsEnum = terms.iterator(termsEnum);\n                final boolean postingsHasFreq = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n                final boolean postingsHasPayload = fieldInfo.hasPayloads();\n                final boolean vectorsHasPayload = terms.hasPayloads();\n                \n                Terms postingsTerms = postingsFields.terms(field);\n                if (postingsTerms == null) {\n                  throw new RuntimeException(\"vector field=\" + field + \" does not exist in postings; doc=\" + j);\n                }\n                postingsTermsEnum = postingsTerms.iterator(postingsTermsEnum);\n                \n                final boolean hasProx = terms.hasOffsets() || terms.hasPositions();\n                BytesRef term = null;\n                while ((term = termsEnum.next()) != null) {\n\n                  // This is the term vectors:\n                  postings = termsEnum.postings(null, postings, PostingsEnum.ALL);\n                  assert postings != null;\n\n                  if (!postingsTermsEnum.seekExact(term)) {\n                    throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" does not exist in postings; doc=\" + j);\n                  }\n\n                  // This is the inverted index (\"real\" postings):\n                  postingsDocs2 = postingsTermsEnum.postings(null, postingsDocs2, PostingsEnum.ALL);\n                  assert postingsDocs2 != null;\n\n                  \n                  final int advanceDoc = postingsDocs2.advance(j);\n                  if (advanceDoc != j) {\n                    throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \": doc=\" + j + \" was not found in postings (got: \" + advanceDoc + \")\");\n                  }\n                  \n                  final int doc = postings.nextDoc();\n                  \n                  if (doc != 0) {\n                    throw new RuntimeException(\"vector for doc \" + j + \" didn't return docID=0: got docID=\" + doc);\n                  }\n                  \n                  if (postingsHasFreq) {\n                    final int tf = postings.freq();\n                    if (postingsHasFreq && postingsDocs2.freq() != tf) {\n                      throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": freq=\" + tf + \" differs from postings freq=\" + postingsDocs2.freq());\n                    }\n\n                    // Term vectors has prox?\n                    if (hasProx) {\n                      for (int i = 0; i < tf; i++) {\n                        int pos = postings.nextPosition();\n                        if (postingsTerms.hasPositions()) {\n                          int postingsPos = postingsDocs2.nextPosition();\n                          if (terms.hasPositions() && pos != postingsPos) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": pos=\" + pos + \" differs from postings pos=\" + postingsPos);\n                          }\n                        }\n                        \n                        // Call the methods to at least make\n                        // sure they don't throw exc:\n                        final int startOffset = postings.startOffset();\n                        final int endOffset = postings.endOffset();\n                        // TODO: these are too anal...?\n                        /*\n                        if (endOffset < startOffset) {\n                        throw new RuntimeException(\"vector startOffset=\" + startOffset + \" is > endOffset=\" + endOffset);\n                        }\n                        if (startOffset < lastStartOffset) {\n                        throw new RuntimeException(\"vector startOffset=\" + startOffset + \" is < prior startOffset=\" + lastStartOffset);\n                        }\n                        lastStartOffset = startOffset;\n                         */\n\n                        if (startOffset != -1 && endOffset != -1 && postingsTerms.hasOffsets()) {\n                          int postingsStartOffset = postingsDocs2.startOffset();\n                          int postingsEndOffset = postingsDocs2.endOffset();\n                          if (startOffset != postingsStartOffset) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": startOffset=\" + startOffset + \" differs from postings startOffset=\" + postingsStartOffset);\n                          }\n                          if (endOffset != postingsEndOffset) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": endOffset=\" + endOffset + \" differs from postings endOffset=\" + postingsEndOffset);\n                          }\n                        }\n\n                        BytesRef payload = postings.getPayload();\n                        \n                        if (payload != null) {\n                          assert vectorsHasPayload;\n                        }\n                        \n                        if (postingsHasPayload && vectorsHasPayload) {\n                          \n                          if (payload == null) {\n                            // we have payloads, but not at this position. \n                            // postings has payloads too, it should not have one at this position\n                            if (postingsDocs2.getPayload() != null) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has no payload but postings does: \" + postingsDocs2.getPayload());\n                            }\n                          } else {\n                            // we have payloads, and one at this position\n                            // postings should also have one at this position, with the same bytes.\n                            if (postingsDocs2.getPayload() == null) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has payload=\" + payload + \" but postings does not.\");\n                            }\n                            BytesRef postingsPayload = postingsDocs2.getPayload();\n                            if (!payload.equals(postingsPayload)) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has payload=\" + payload + \" but differs from postings payload=\" + postingsPayload);\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      float vectorAvg = status.docCount == 0 ? 0 : status.totVectors / (float)status.docCount;\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d total term vector count; avg %.1f term/freq vector fields per doc] [took %.3f sec]\",\n                                    status.totVectors, vectorAvg, nsToSec(System.nanoTime() - startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    \n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test term vectors.\n   * @lucene.experimental\n   */\n  public static Status.TermVectorStatus testTermVectors(CodecReader reader, PrintStream infoStream, boolean verbose, boolean crossCheckTermVectors, boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.TermVectorStatus status = new Status.TermVectorStatus();\n    final FieldInfos fieldInfos = reader.getFieldInfos();\n    final Bits onlyDocIsDeleted = new FixedBitSet(1);\n    \n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: term vectors........\");\n      }\n\n      PostingsEnum postings = null;\n\n      // Only used if crossCheckTermVectors is true:\n      PostingsEnum postingsDocs = null;\n      PostingsEnum postingsDocs2 = null;\n\n      final Bits liveDocs = reader.getLiveDocs();\n\n      final Fields postingsFields;\n      // TODO: testTermsIndex\n      if (crossCheckTermVectors) {\n        postingsFields = reader.getPostingsReader().getMergeInstance();\n      } else {\n        postingsFields = null;\n      }\n\n      TermsEnum termsEnum = null;\n      TermsEnum postingsTermsEnum = null;\n      \n      TermVectorsReader vectorsReader = reader.getTermVectorsReader();\n\n      if (vectorsReader != null) {\n        vectorsReader = vectorsReader.getMergeInstance();\n        for (int j = 0; j < reader.maxDoc(); ++j) {\n          // Intentionally pull/visit (but don't count in\n          // stats) deleted documents to make sure they too\n          // are not corrupt:\n          Fields tfv = vectorsReader.get(j);\n          \n          // TODO: can we make a IS(FIR) that searches just\n          // this term vector... to pass for searcher?\n          \n          if (tfv != null) {\n            // First run with no deletions:\n            checkFields(tfv, null, 1, fieldInfos, false, true, infoStream, verbose);\n            \n            if (j == 0) {\n              // Also test with the 1 doc deleted; we only do this for first doc because this really is just looking for a [slightly] buggy\n              // TermVectors impl that fails to respect the incoming live docs:\n              checkFields(tfv, onlyDocIsDeleted, 1, fieldInfos, false, true, infoStream, verbose);\n            }\n            \n            // Only agg stats if the doc is live:\n            final boolean doStats = liveDocs == null || liveDocs.get(j);\n            \n            if (doStats) {\n              status.docCount++;\n            }\n            \n            for(String field : tfv) {\n              if (doStats) {\n                status.totVectors++;\n              }\n              \n              // Make sure FieldInfo thinks this field is vector'd:\n              final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n              if (!fieldInfo.hasVectors()) {\n                throw new RuntimeException(\"docID=\" + j + \" has term vectors for field=\" + field + \" but FieldInfo has storeTermVector=false\");\n              }\n              \n              if (crossCheckTermVectors) {\n                Terms terms = tfv.terms(field);\n                termsEnum = terms.iterator(termsEnum);\n                final boolean postingsHasFreq = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n                final boolean postingsHasPayload = fieldInfo.hasPayloads();\n                final boolean vectorsHasPayload = terms.hasPayloads();\n                \n                Terms postingsTerms = postingsFields.terms(field);\n                if (postingsTerms == null) {\n                  throw new RuntimeException(\"vector field=\" + field + \" does not exist in postings; doc=\" + j);\n                }\n                postingsTermsEnum = postingsTerms.iterator(postingsTermsEnum);\n                \n                final boolean hasProx = terms.hasOffsets() || terms.hasPositions();\n                BytesRef term = null;\n                while ((term = termsEnum.next()) != null) {\n\n                  postings = termsEnum.postings(null, postings, PostingsEnum.ALL);\n                  assert postings != null;\n\n                  if (!postingsTermsEnum.seekExact(term)) {\n                    throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" does not exist in postings; doc=\" + j);\n                  }\n                  postingsDocs2 = postingsTermsEnum.postings(null, postingsDocs2, PostingsEnum.ALL);\n                  assert postingsDocs2 != null;\n\n                  \n                  final int advanceDoc = postingsDocs2.advance(j);\n                  if (advanceDoc != j) {\n                    throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \": doc=\" + j + \" was not found in postings (got: \" + advanceDoc + \")\");\n                  }\n                  \n                  final int doc = postings.nextDoc();\n                  \n                  if (doc != 0) {\n                    throw new RuntimeException(\"vector for doc \" + j + \" didn't return docID=0: got docID=\" + doc);\n                  }\n                  \n                  if (postingsHasFreq) {\n                    final int tf = postings.freq();\n                    if (postingsHasFreq && postingsDocs2.freq() != tf) {\n                      throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": freq=\" + tf + \" differs from postings freq=\" + postingsDocs2.freq());\n                    }\n                    \n                    if (hasProx) {\n                      for (int i = 0; i < tf; i++) {\n                        int pos = postings.nextPosition();\n                        if (postingsTerms.hasPositions()) {\n                          int postingsPos = postingsDocs2.nextPosition();\n                          if (terms.hasPositions() && pos != postingsPos) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": pos=\" + pos + \" differs from postings pos=\" + postingsPos);\n                          }\n                        }\n                        \n                        // Call the methods to at least make\n                        // sure they don't throw exc:\n                        final int startOffset = postings.startOffset();\n                        final int endOffset = postings.endOffset();\n                        // TODO: these are too anal...?\n                        /*\n                        if (endOffset < startOffset) {\n                        throw new RuntimeException(\"vector startOffset=\" + startOffset + \" is > endOffset=\" + endOffset);\n                        }\n                        if (startOffset < lastStartOffset) {\n                        throw new RuntimeException(\"vector startOffset=\" + startOffset + \" is < prior startOffset=\" + lastStartOffset);\n                        }\n                        lastStartOffset = startOffset;\n                         */\n\n                        final int postingsStartOffset = postingsDocs2.startOffset();\n                        final int postingsEndOffset = postingsDocs2.endOffset();\n                        if (startOffset != -1 && postingsStartOffset != -1 && startOffset != postingsStartOffset) {\n                          throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": startOffset=\" + startOffset + \" differs from postings startOffset=\" + postingsStartOffset);\n                        }\n                        if (endOffset != -1 && postingsEndOffset != -1 && endOffset != postingsEndOffset) {\n                          throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": endOffset=\" + endOffset + \" differs from postings endOffset=\" + postingsEndOffset);\n                        }\n                        \n                        BytesRef payload = postings.getPayload();\n                        \n                        if (payload != null) {\n                          assert vectorsHasPayload;\n                        }\n                        \n                        if (postingsHasPayload && vectorsHasPayload) {\n                          \n                          if (payload == null) {\n                            // we have payloads, but not at this position. \n                            // postings has payloads too, it should not have one at this position\n                            if (postingsDocs2.getPayload() != null) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has no payload but postings does: \" + postingsDocs2.getPayload());\n                            }\n                          } else {\n                            // we have payloads, and one at this position\n                            // postings should also have one at this position, with the same bytes.\n                            if (postingsDocs2.getPayload() == null) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has payload=\" + payload + \" but postings does not.\");\n                            }\n                            BytesRef postingsPayload = postingsDocs2.getPayload();\n                            if (!payload.equals(postingsPayload)) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has payload=\" + payload + \" but differs from postings payload=\" + postingsPayload);\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      float vectorAvg = status.docCount == 0 ? 0 : status.totVectors / (float)status.docCount;\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d total term vector count; avg %.1f term/freq vector fields per doc] [took %.3f sec]\",\n                                    status.totVectors, vectorAvg, nsToSec(System.nanoTime() - startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    \n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b4e3cd382d0d075a0f1725649c084bb6510c483","date":1428096423,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testTermVectors(CodecReader,PrintStream,boolean,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testTermVectors(CodecReader,PrintStream,boolean,boolean,boolean).mjava","sourceNew":"  /**\n   * Test term vectors.\n   * @lucene.experimental\n   */\n  public static Status.TermVectorStatus testTermVectors(CodecReader reader, PrintStream infoStream, boolean verbose, boolean crossCheckTermVectors, boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.TermVectorStatus status = new Status.TermVectorStatus();\n    final FieldInfos fieldInfos = reader.getFieldInfos();\n    final Bits onlyDocIsDeleted = new FixedBitSet(1);\n    \n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: term vectors........\");\n      }\n\n      PostingsEnum postings = null;\n\n      // Only used if crossCheckTermVectors is true:\n      PostingsEnum postingsDocs = null;\n      PostingsEnum postingsDocs2 = null;\n\n      final Bits liveDocs = reader.getLiveDocs();\n\n      final Fields postingsFields;\n      // TODO: testTermsIndex\n      if (crossCheckTermVectors) {\n        postingsFields = reader.getPostingsReader().getMergeInstance();\n      } else {\n        postingsFields = null;\n      }\n\n      TermsEnum termsEnum = null;\n      TermsEnum postingsTermsEnum = null;\n      \n      TermVectorsReader vectorsReader = reader.getTermVectorsReader();\n\n      if (vectorsReader != null) {\n        vectorsReader = vectorsReader.getMergeInstance();\n        for (int j = 0; j < reader.maxDoc(); ++j) {\n          // Intentionally pull/visit (but don't count in\n          // stats) deleted documents to make sure they too\n          // are not corrupt:\n          Fields tfv = vectorsReader.get(j);\n          \n          // TODO: can we make a IS(FIR) that searches just\n          // this term vector... to pass for searcher?\n          \n          if (tfv != null) {\n            // First run with no deletions:\n            checkFields(tfv, null, 1, fieldInfos, false, true, infoStream, verbose);\n            \n            if (j == 0) {\n              // Also test with the 1 doc deleted; we only do this for first doc because this really is just looking for a [slightly] buggy\n              // TermVectors impl that fails to respect the incoming live docs:\n              checkFields(tfv, onlyDocIsDeleted, 1, fieldInfos, false, true, infoStream, verbose);\n            }\n            \n            // Only agg stats if the doc is live:\n            final boolean doStats = liveDocs == null || liveDocs.get(j);\n            \n            if (doStats) {\n              status.docCount++;\n            }\n            \n            for(String field : tfv) {\n              if (doStats) {\n                status.totVectors++;\n              }\n              \n              // Make sure FieldInfo thinks this field is vector'd:\n              final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n              if (!fieldInfo.hasVectors()) {\n                throw new RuntimeException(\"docID=\" + j + \" has term vectors for field=\" + field + \" but FieldInfo has storeTermVector=false\");\n              }\n              \n              if (crossCheckTermVectors) {\n                Terms terms = tfv.terms(field);\n                termsEnum = terms.iterator(termsEnum);\n                final boolean postingsHasFreq = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n                final boolean postingsHasPayload = fieldInfo.hasPayloads();\n                final boolean vectorsHasPayload = terms.hasPayloads();\n                \n                Terms postingsTerms = postingsFields.terms(field);\n                if (postingsTerms == null) {\n                  throw new RuntimeException(\"vector field=\" + field + \" does not exist in postings; doc=\" + j);\n                }\n                postingsTermsEnum = postingsTerms.iterator(postingsTermsEnum);\n                \n                final boolean hasProx = terms.hasOffsets() || terms.hasPositions();\n                BytesRef term = null;\n                while ((term = termsEnum.next()) != null) {\n\n                  // This is the term vectors:\n                  postings = termsEnum.postings(null, postings, PostingsEnum.ALL);\n                  assert postings != null;\n\n                  if (!postingsTermsEnum.seekExact(term)) {\n                    throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" does not exist in postings; doc=\" + j);\n                  }\n\n                  // This is the inverted index (\"real\" postings):\n                  postingsDocs2 = postingsTermsEnum.postings(null, postingsDocs2, PostingsEnum.ALL);\n                  assert postingsDocs2 != null;\n\n                  \n                  final int advanceDoc = postingsDocs2.advance(j);\n                  if (advanceDoc != j) {\n                    throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \": doc=\" + j + \" was not found in postings (got: \" + advanceDoc + \")\");\n                  }\n                  \n                  final int doc = postings.nextDoc();\n                  \n                  if (doc != 0) {\n                    throw new RuntimeException(\"vector for doc \" + j + \" didn't return docID=0: got docID=\" + doc);\n                  }\n                  \n                  if (postingsHasFreq) {\n                    final int tf = postings.freq();\n                    if (postingsHasFreq && postingsDocs2.freq() != tf) {\n                      throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": freq=\" + tf + \" differs from postings freq=\" + postingsDocs2.freq());\n                    }\n\n                    // Term vectors has prox?\n                    if (hasProx) {\n                      for (int i = 0; i < tf; i++) {\n                        int pos = postings.nextPosition();\n                        if (postingsTerms.hasPositions()) {\n                          int postingsPos = postingsDocs2.nextPosition();\n                          if (terms.hasPositions() && pos != postingsPos) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": pos=\" + pos + \" differs from postings pos=\" + postingsPos);\n                          }\n                        }\n                        \n                        // Call the methods to at least make\n                        // sure they don't throw exc:\n                        final int startOffset = postings.startOffset();\n                        final int endOffset = postings.endOffset();\n                        // TODO: these are too anal...?\n                        /*\n                        if (endOffset < startOffset) {\n                        throw new RuntimeException(\"vector startOffset=\" + startOffset + \" is > endOffset=\" + endOffset);\n                        }\n                        if (startOffset < lastStartOffset) {\n                        throw new RuntimeException(\"vector startOffset=\" + startOffset + \" is < prior startOffset=\" + lastStartOffset);\n                        }\n                        lastStartOffset = startOffset;\n                         */\n\n                        if (startOffset != -1 && endOffset != -1 && postingsTerms.hasOffsets()) {\n                          int postingsStartOffset = postingsDocs2.startOffset();\n                          int postingsEndOffset = postingsDocs2.endOffset();\n                          if (startOffset != postingsStartOffset) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": startOffset=\" + startOffset + \" differs from postings startOffset=\" + postingsStartOffset);\n                          }\n                          if (endOffset != postingsEndOffset) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": endOffset=\" + endOffset + \" differs from postings endOffset=\" + postingsEndOffset);\n                          }\n                        }\n\n                        BytesRef payload = postings.getPayload();\n                        \n                        if (payload != null) {\n                          assert vectorsHasPayload;\n                        }\n                        \n                        if (postingsHasPayload && vectorsHasPayload) {\n                          \n                          if (payload == null) {\n                            // we have payloads, but not at this position. \n                            // postings has payloads too, it should not have one at this position\n                            if (postingsDocs2.getPayload() != null) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has no payload but postings does: \" + postingsDocs2.getPayload());\n                            }\n                          } else {\n                            // we have payloads, and one at this position\n                            // postings should also have one at this position, with the same bytes.\n                            if (postingsDocs2.getPayload() == null) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has payload=\" + payload + \" but postings does not.\");\n                            }\n                            BytesRef postingsPayload = postingsDocs2.getPayload();\n                            if (!payload.equals(postingsPayload)) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has payload=\" + payload + \" but differs from postings payload=\" + postingsPayload);\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      float vectorAvg = status.docCount == 0 ? 0 : status.totVectors / (float)status.docCount;\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d total term vector count; avg %.1f term/freq vector fields per doc] [took %.3f sec]\",\n                                    status.totVectors, vectorAvg, nsToSec(System.nanoTime() - startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    \n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test term vectors.\n   * @lucene.experimental\n   */\n  public static Status.TermVectorStatus testTermVectors(CodecReader reader, PrintStream infoStream, boolean verbose, boolean crossCheckTermVectors, boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.TermVectorStatus status = new Status.TermVectorStatus();\n    final FieldInfos fieldInfos = reader.getFieldInfos();\n    final Bits onlyDocIsDeleted = new FixedBitSet(1);\n    \n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: term vectors........\");\n      }\n\n      PostingsEnum docs = null;\n      PostingsEnum postings = null;\n\n      // Only used if crossCheckTermVectors is true:\n      PostingsEnum postingsDocs = null;\n      PostingsEnum postingsPostings = null;\n\n      final Bits liveDocs = reader.getLiveDocs();\n\n      final Fields postingsFields;\n      // TODO: testTermsIndex\n      if (crossCheckTermVectors) {\n        postingsFields = reader.getPostingsReader().getMergeInstance();\n      } else {\n        postingsFields = null;\n      }\n\n      TermsEnum termsEnum = null;\n      TermsEnum postingsTermsEnum = null;\n      \n      TermVectorsReader vectorsReader = reader.getTermVectorsReader();\n\n      if (vectorsReader != null) {\n        vectorsReader = vectorsReader.getMergeInstance();\n        for (int j = 0; j < reader.maxDoc(); ++j) {\n          // Intentionally pull/visit (but don't count in\n          // stats) deleted documents to make sure they too\n          // are not corrupt:\n          Fields tfv = vectorsReader.get(j);\n          \n          // TODO: can we make a IS(FIR) that searches just\n          // this term vector... to pass for searcher?\n          \n          if (tfv != null) {\n            // First run with no deletions:\n            checkFields(tfv, null, 1, fieldInfos, false, true, infoStream, verbose);\n            \n            if (j == 0) {\n              // Also test with the 1 doc deleted; we only do this for first doc because this really is just looking for a [slightly] buggy\n              // TermVectors impl that fails to respect the incoming live docs:\n              checkFields(tfv, onlyDocIsDeleted, 1, fieldInfos, false, true, infoStream, verbose);\n            }\n            \n            // Only agg stats if the doc is live:\n            final boolean doStats = liveDocs == null || liveDocs.get(j);\n            \n            if (doStats) {\n              status.docCount++;\n            }\n            \n            for(String field : tfv) {\n              if (doStats) {\n                status.totVectors++;\n              }\n              \n              // Make sure FieldInfo thinks this field is vector'd:\n              final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n              if (!fieldInfo.hasVectors()) {\n                throw new RuntimeException(\"docID=\" + j + \" has term vectors for field=\" + field + \" but FieldInfo has storeTermVector=false\");\n              }\n              \n              if (crossCheckTermVectors) {\n                Terms terms = tfv.terms(field);\n                termsEnum = terms.iterator(termsEnum);\n                final boolean postingsHasFreq = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n                final boolean postingsHasPayload = fieldInfo.hasPayloads();\n                final boolean vectorsHasPayload = terms.hasPayloads();\n                \n                Terms postingsTerms = postingsFields.terms(field);\n                if (postingsTerms == null) {\n                  throw new RuntimeException(\"vector field=\" + field + \" does not exist in postings; doc=\" + j);\n                }\n                postingsTermsEnum = postingsTerms.iterator(postingsTermsEnum);\n                \n                final boolean hasProx = terms.hasOffsets() || terms.hasPositions();\n                BytesRef term = null;\n                while ((term = termsEnum.next()) != null) {\n                  \n                  if (hasProx) {\n                    postings = termsEnum.postings(null, postings, PostingsEnum.ALL);\n                    assert postings != null;\n                    docs = null;\n                  } else {\n                    docs = termsEnum.postings(null, docs);\n                    assert docs != null;\n                    postings = null;\n                  }\n                  \n                  final PostingsEnum docs2;\n                  if (hasProx) {\n                    assert postings != null;\n                    docs2 = postings;\n                  } else {\n                    assert docs != null;\n                    docs2 = docs;\n                  }\n                  \n                  final PostingsEnum postingsDocs2;\n                  if (!postingsTermsEnum.seekExact(term)) {\n                    throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" does not exist in postings; doc=\" + j);\n                  }\n                  postingsPostings = postingsTermsEnum.postings(null, postingsPostings, PostingsEnum.ALL);\n                  if (postingsPostings == null) {\n                    // Term vectors were indexed w/ pos but postings were not\n                    postingsDocs = postingsTermsEnum.postings(null, postingsDocs);\n                    if (postingsDocs == null) {\n                      throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" does not exist in postings; doc=\" + j);\n                    }\n                  }\n                  \n                  if (postingsPostings != null) {\n                    postingsDocs2 = postingsPostings;\n                  } else {\n                    postingsDocs2 = postingsDocs;\n                  }\n                  \n                  final int advanceDoc = postingsDocs2.advance(j);\n                  if (advanceDoc != j) {\n                    throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \": doc=\" + j + \" was not found in postings (got: \" + advanceDoc + \")\");\n                  }\n                  \n                  final int doc = docs2.nextDoc();\n                  \n                  if (doc != 0) {\n                    throw new RuntimeException(\"vector for doc \" + j + \" didn't return docID=0: got docID=\" + doc);\n                  }\n                  \n                  if (postingsHasFreq) {\n                    final int tf = docs2.freq();\n                    if (postingsHasFreq && postingsDocs2.freq() != tf) {\n                      throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": freq=\" + tf + \" differs from postings freq=\" + postingsDocs2.freq());\n                    }\n                    \n                    if (hasProx) {\n                      for (int i = 0; i < tf; i++) {\n                        int pos = postings.nextPosition();\n                        if (postingsPostings != null) {\n                          int postingsPos = postingsPostings.nextPosition();\n                          if (terms.hasPositions() && pos != postingsPos) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": pos=\" + pos + \" differs from postings pos=\" + postingsPos);\n                          }\n                        }\n                        \n                        // Call the methods to at least make\n                        // sure they don't throw exc:\n                        final int startOffset = postings.startOffset();\n                        final int endOffset = postings.endOffset();\n                        // TODO: these are too anal...?\n                        /*\n                        if (endOffset < startOffset) {\n                        throw new RuntimeException(\"vector startOffset=\" + startOffset + \" is > endOffset=\" + endOffset);\n                        }\n                        if (startOffset < lastStartOffset) {\n                        throw new RuntimeException(\"vector startOffset=\" + startOffset + \" is < prior startOffset=\" + lastStartOffset);\n                        }\n                        lastStartOffset = startOffset;\n                         */\n                        \n                        if (postingsPostings != null) {\n                          final int postingsStartOffset = postingsPostings.startOffset();\n                          \n                          final int postingsEndOffset = postingsPostings.endOffset();\n                          if (startOffset != -1 && postingsStartOffset != -1 && startOffset != postingsStartOffset) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": startOffset=\" + startOffset + \" differs from postings startOffset=\" + postingsStartOffset);\n                          }\n                          if (endOffset != -1 && postingsEndOffset != -1 && endOffset != postingsEndOffset) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": endOffset=\" + endOffset + \" differs from postings endOffset=\" + postingsEndOffset);\n                          }\n                        }\n                        \n                        BytesRef payload = postings.getPayload();\n                        \n                        if (payload != null) {\n                          assert vectorsHasPayload;\n                        }\n                        \n                        if (postingsHasPayload && vectorsHasPayload) {\n                          assert postingsPostings != null;\n                          \n                          if (payload == null) {\n                            // we have payloads, but not at this position. \n                            // postings has payloads too, it should not have one at this position\n                            if (postingsPostings.getPayload() != null) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has no payload but postings does: \" + postingsPostings.getPayload());\n                            }\n                          } else {\n                            // we have payloads, and one at this position\n                            // postings should also have one at this position, with the same bytes.\n                            if (postingsPostings.getPayload() == null) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has payload=\" + payload + \" but postings does not.\");\n                            }\n                            BytesRef postingsPayload = postingsPostings.getPayload();\n                            if (!payload.equals(postingsPayload)) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has payload=\" + payload + \" but differs from postings payload=\" + postingsPayload);\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      float vectorAvg = status.docCount == 0 ? 0 : status.totVectors / (float)status.docCount;\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d total term vector count; avg %.1f term/freq vector fields per doc] [took %.3f sec]\",\n                                    status.totVectors, vectorAvg, nsToSec(System.nanoTime() - startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    \n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testTermVectors(CodecReader,PrintStream,boolean,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testTermVectors(CodecReader,PrintStream,boolean,boolean,boolean).mjava","sourceNew":"  /**\n   * Test term vectors.\n   * @lucene.experimental\n   */\n  public static Status.TermVectorStatus testTermVectors(CodecReader reader, PrintStream infoStream, boolean verbose, boolean crossCheckTermVectors, boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.TermVectorStatus status = new Status.TermVectorStatus();\n    final FieldInfos fieldInfos = reader.getFieldInfos();\n    final Bits onlyDocIsDeleted = new FixedBitSet(1);\n    \n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: term vectors........\");\n      }\n\n      PostingsEnum postings = null;\n\n      // Only used if crossCheckTermVectors is true:\n      PostingsEnum postingsDocs = null;\n      PostingsEnum postingsDocs2 = null;\n\n      final Bits liveDocs = reader.getLiveDocs();\n\n      final Fields postingsFields;\n      // TODO: testTermsIndex\n      if (crossCheckTermVectors) {\n        postingsFields = reader.getPostingsReader().getMergeInstance();\n      } else {\n        postingsFields = null;\n      }\n\n      TermVectorsReader vectorsReader = reader.getTermVectorsReader();\n\n      if (vectorsReader != null) {\n        vectorsReader = vectorsReader.getMergeInstance();\n        for (int j = 0; j < reader.maxDoc(); ++j) {\n          // Intentionally pull/visit (but don't count in\n          // stats) deleted documents to make sure they too\n          // are not corrupt:\n          Fields tfv = vectorsReader.get(j);\n          \n          // TODO: can we make a IS(FIR) that searches just\n          // this term vector... to pass for searcher?\n          \n          if (tfv != null) {\n            // First run with no deletions:\n            checkFields(tfv, null, 1, fieldInfos, false, true, infoStream, verbose);\n            \n            if (j == 0) {\n              // Also test with the 1 doc deleted; we only do this for first doc because this really is just looking for a [slightly] buggy\n              // TermVectors impl that fails to respect the incoming live docs:\n              checkFields(tfv, onlyDocIsDeleted, 1, fieldInfos, false, true, infoStream, verbose);\n            }\n            \n            // Only agg stats if the doc is live:\n            final boolean doStats = liveDocs == null || liveDocs.get(j);\n            \n            if (doStats) {\n              status.docCount++;\n            }\n            \n            for(String field : tfv) {\n              if (doStats) {\n                status.totVectors++;\n              }\n              \n              // Make sure FieldInfo thinks this field is vector'd:\n              final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n              if (!fieldInfo.hasVectors()) {\n                throw new RuntimeException(\"docID=\" + j + \" has term vectors for field=\" + field + \" but FieldInfo has storeTermVector=false\");\n              }\n              \n              if (crossCheckTermVectors) {\n                Terms terms = tfv.terms(field);\n                TermsEnum termsEnum = terms.iterator();\n                final boolean postingsHasFreq = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n                final boolean postingsHasPayload = fieldInfo.hasPayloads();\n                final boolean vectorsHasPayload = terms.hasPayloads();\n                \n                Terms postingsTerms = postingsFields.terms(field);\n                if (postingsTerms == null) {\n                  throw new RuntimeException(\"vector field=\" + field + \" does not exist in postings; doc=\" + j);\n                }\n                TermsEnum postingsTermsEnum = postingsTerms.iterator();\n                \n                final boolean hasProx = terms.hasOffsets() || terms.hasPositions();\n                BytesRef term = null;\n                while ((term = termsEnum.next()) != null) {\n\n                  // This is the term vectors:\n                  postings = termsEnum.postings(null, postings, PostingsEnum.ALL);\n                  assert postings != null;\n\n                  if (!postingsTermsEnum.seekExact(term)) {\n                    throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" does not exist in postings; doc=\" + j);\n                  }\n\n                  // This is the inverted index (\"real\" postings):\n                  postingsDocs2 = postingsTermsEnum.postings(null, postingsDocs2, PostingsEnum.ALL);\n                  assert postingsDocs2 != null;\n\n                  \n                  final int advanceDoc = postingsDocs2.advance(j);\n                  if (advanceDoc != j) {\n                    throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \": doc=\" + j + \" was not found in postings (got: \" + advanceDoc + \")\");\n                  }\n                  \n                  final int doc = postings.nextDoc();\n                  \n                  if (doc != 0) {\n                    throw new RuntimeException(\"vector for doc \" + j + \" didn't return docID=0: got docID=\" + doc);\n                  }\n                  \n                  if (postingsHasFreq) {\n                    final int tf = postings.freq();\n                    if (postingsHasFreq && postingsDocs2.freq() != tf) {\n                      throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": freq=\" + tf + \" differs from postings freq=\" + postingsDocs2.freq());\n                    }\n\n                    // Term vectors has prox?\n                    if (hasProx) {\n                      for (int i = 0; i < tf; i++) {\n                        int pos = postings.nextPosition();\n                        if (postingsTerms.hasPositions()) {\n                          int postingsPos = postingsDocs2.nextPosition();\n                          if (terms.hasPositions() && pos != postingsPos) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": pos=\" + pos + \" differs from postings pos=\" + postingsPos);\n                          }\n                        }\n                        \n                        // Call the methods to at least make\n                        // sure they don't throw exc:\n                        final int startOffset = postings.startOffset();\n                        final int endOffset = postings.endOffset();\n                        // TODO: these are too anal...?\n                        /*\n                        if (endOffset < startOffset) {\n                        throw new RuntimeException(\"vector startOffset=\" + startOffset + \" is > endOffset=\" + endOffset);\n                        }\n                        if (startOffset < lastStartOffset) {\n                        throw new RuntimeException(\"vector startOffset=\" + startOffset + \" is < prior startOffset=\" + lastStartOffset);\n                        }\n                        lastStartOffset = startOffset;\n                         */\n\n                        if (startOffset != -1 && endOffset != -1 && postingsTerms.hasOffsets()) {\n                          int postingsStartOffset = postingsDocs2.startOffset();\n                          int postingsEndOffset = postingsDocs2.endOffset();\n                          if (startOffset != postingsStartOffset) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": startOffset=\" + startOffset + \" differs from postings startOffset=\" + postingsStartOffset);\n                          }\n                          if (endOffset != postingsEndOffset) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": endOffset=\" + endOffset + \" differs from postings endOffset=\" + postingsEndOffset);\n                          }\n                        }\n\n                        BytesRef payload = postings.getPayload();\n                        \n                        if (payload != null) {\n                          assert vectorsHasPayload;\n                        }\n                        \n                        if (postingsHasPayload && vectorsHasPayload) {\n                          \n                          if (payload == null) {\n                            // we have payloads, but not at this position. \n                            // postings has payloads too, it should not have one at this position\n                            if (postingsDocs2.getPayload() != null) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has no payload but postings does: \" + postingsDocs2.getPayload());\n                            }\n                          } else {\n                            // we have payloads, and one at this position\n                            // postings should also have one at this position, with the same bytes.\n                            if (postingsDocs2.getPayload() == null) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has payload=\" + payload + \" but postings does not.\");\n                            }\n                            BytesRef postingsPayload = postingsDocs2.getPayload();\n                            if (!payload.equals(postingsPayload)) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has payload=\" + payload + \" but differs from postings payload=\" + postingsPayload);\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      float vectorAvg = status.docCount == 0 ? 0 : status.totVectors / (float)status.docCount;\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d total term vector count; avg %.1f term/freq vector fields per doc] [took %.3f sec]\",\n                                    status.totVectors, vectorAvg, nsToSec(System.nanoTime() - startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    \n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test term vectors.\n   * @lucene.experimental\n   */\n  public static Status.TermVectorStatus testTermVectors(CodecReader reader, PrintStream infoStream, boolean verbose, boolean crossCheckTermVectors, boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.TermVectorStatus status = new Status.TermVectorStatus();\n    final FieldInfos fieldInfos = reader.getFieldInfos();\n    final Bits onlyDocIsDeleted = new FixedBitSet(1);\n    \n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: term vectors........\");\n      }\n\n      PostingsEnum postings = null;\n\n      // Only used if crossCheckTermVectors is true:\n      PostingsEnum postingsDocs = null;\n      PostingsEnum postingsDocs2 = null;\n\n      final Bits liveDocs = reader.getLiveDocs();\n\n      final Fields postingsFields;\n      // TODO: testTermsIndex\n      if (crossCheckTermVectors) {\n        postingsFields = reader.getPostingsReader().getMergeInstance();\n      } else {\n        postingsFields = null;\n      }\n\n      TermsEnum termsEnum = null;\n      TermsEnum postingsTermsEnum = null;\n      \n      TermVectorsReader vectorsReader = reader.getTermVectorsReader();\n\n      if (vectorsReader != null) {\n        vectorsReader = vectorsReader.getMergeInstance();\n        for (int j = 0; j < reader.maxDoc(); ++j) {\n          // Intentionally pull/visit (but don't count in\n          // stats) deleted documents to make sure they too\n          // are not corrupt:\n          Fields tfv = vectorsReader.get(j);\n          \n          // TODO: can we make a IS(FIR) that searches just\n          // this term vector... to pass for searcher?\n          \n          if (tfv != null) {\n            // First run with no deletions:\n            checkFields(tfv, null, 1, fieldInfos, false, true, infoStream, verbose);\n            \n            if (j == 0) {\n              // Also test with the 1 doc deleted; we only do this for first doc because this really is just looking for a [slightly] buggy\n              // TermVectors impl that fails to respect the incoming live docs:\n              checkFields(tfv, onlyDocIsDeleted, 1, fieldInfos, false, true, infoStream, verbose);\n            }\n            \n            // Only agg stats if the doc is live:\n            final boolean doStats = liveDocs == null || liveDocs.get(j);\n            \n            if (doStats) {\n              status.docCount++;\n            }\n            \n            for(String field : tfv) {\n              if (doStats) {\n                status.totVectors++;\n              }\n              \n              // Make sure FieldInfo thinks this field is vector'd:\n              final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n              if (!fieldInfo.hasVectors()) {\n                throw new RuntimeException(\"docID=\" + j + \" has term vectors for field=\" + field + \" but FieldInfo has storeTermVector=false\");\n              }\n              \n              if (crossCheckTermVectors) {\n                Terms terms = tfv.terms(field);\n                termsEnum = terms.iterator(termsEnum);\n                final boolean postingsHasFreq = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n                final boolean postingsHasPayload = fieldInfo.hasPayloads();\n                final boolean vectorsHasPayload = terms.hasPayloads();\n                \n                Terms postingsTerms = postingsFields.terms(field);\n                if (postingsTerms == null) {\n                  throw new RuntimeException(\"vector field=\" + field + \" does not exist in postings; doc=\" + j);\n                }\n                postingsTermsEnum = postingsTerms.iterator(postingsTermsEnum);\n                \n                final boolean hasProx = terms.hasOffsets() || terms.hasPositions();\n                BytesRef term = null;\n                while ((term = termsEnum.next()) != null) {\n\n                  // This is the term vectors:\n                  postings = termsEnum.postings(null, postings, PostingsEnum.ALL);\n                  assert postings != null;\n\n                  if (!postingsTermsEnum.seekExact(term)) {\n                    throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" does not exist in postings; doc=\" + j);\n                  }\n\n                  // This is the inverted index (\"real\" postings):\n                  postingsDocs2 = postingsTermsEnum.postings(null, postingsDocs2, PostingsEnum.ALL);\n                  assert postingsDocs2 != null;\n\n                  \n                  final int advanceDoc = postingsDocs2.advance(j);\n                  if (advanceDoc != j) {\n                    throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \": doc=\" + j + \" was not found in postings (got: \" + advanceDoc + \")\");\n                  }\n                  \n                  final int doc = postings.nextDoc();\n                  \n                  if (doc != 0) {\n                    throw new RuntimeException(\"vector for doc \" + j + \" didn't return docID=0: got docID=\" + doc);\n                  }\n                  \n                  if (postingsHasFreq) {\n                    final int tf = postings.freq();\n                    if (postingsHasFreq && postingsDocs2.freq() != tf) {\n                      throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": freq=\" + tf + \" differs from postings freq=\" + postingsDocs2.freq());\n                    }\n\n                    // Term vectors has prox?\n                    if (hasProx) {\n                      for (int i = 0; i < tf; i++) {\n                        int pos = postings.nextPosition();\n                        if (postingsTerms.hasPositions()) {\n                          int postingsPos = postingsDocs2.nextPosition();\n                          if (terms.hasPositions() && pos != postingsPos) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": pos=\" + pos + \" differs from postings pos=\" + postingsPos);\n                          }\n                        }\n                        \n                        // Call the methods to at least make\n                        // sure they don't throw exc:\n                        final int startOffset = postings.startOffset();\n                        final int endOffset = postings.endOffset();\n                        // TODO: these are too anal...?\n                        /*\n                        if (endOffset < startOffset) {\n                        throw new RuntimeException(\"vector startOffset=\" + startOffset + \" is > endOffset=\" + endOffset);\n                        }\n                        if (startOffset < lastStartOffset) {\n                        throw new RuntimeException(\"vector startOffset=\" + startOffset + \" is < prior startOffset=\" + lastStartOffset);\n                        }\n                        lastStartOffset = startOffset;\n                         */\n\n                        if (startOffset != -1 && endOffset != -1 && postingsTerms.hasOffsets()) {\n                          int postingsStartOffset = postingsDocs2.startOffset();\n                          int postingsEndOffset = postingsDocs2.endOffset();\n                          if (startOffset != postingsStartOffset) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": startOffset=\" + startOffset + \" differs from postings startOffset=\" + postingsStartOffset);\n                          }\n                          if (endOffset != postingsEndOffset) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": endOffset=\" + endOffset + \" differs from postings endOffset=\" + postingsEndOffset);\n                          }\n                        }\n\n                        BytesRef payload = postings.getPayload();\n                        \n                        if (payload != null) {\n                          assert vectorsHasPayload;\n                        }\n                        \n                        if (postingsHasPayload && vectorsHasPayload) {\n                          \n                          if (payload == null) {\n                            // we have payloads, but not at this position. \n                            // postings has payloads too, it should not have one at this position\n                            if (postingsDocs2.getPayload() != null) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has no payload but postings does: \" + postingsDocs2.getPayload());\n                            }\n                          } else {\n                            // we have payloads, and one at this position\n                            // postings should also have one at this position, with the same bytes.\n                            if (postingsDocs2.getPayload() == null) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has payload=\" + payload + \" but postings does not.\");\n                            }\n                            BytesRef postingsPayload = postingsDocs2.getPayload();\n                            if (!payload.equals(postingsPayload)) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has payload=\" + payload + \" but differs from postings payload=\" + postingsPayload);\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      float vectorAvg = status.docCount == 0 ? 0 : status.totVectors / (float)status.docCount;\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d total term vector count; avg %.1f term/freq vector fields per doc] [took %.3f sec]\",\n                                    status.totVectors, vectorAvg, nsToSec(System.nanoTime() - startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    \n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testTermVectors(CodecReader,PrintStream,boolean,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testTermVectors(CodecReader,PrintStream,boolean,boolean,boolean).mjava","sourceNew":"  /**\n   * Test term vectors.\n   * @lucene.experimental\n   */\n  public static Status.TermVectorStatus testTermVectors(CodecReader reader, PrintStream infoStream, boolean verbose, boolean crossCheckTermVectors, boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.TermVectorStatus status = new Status.TermVectorStatus();\n    final FieldInfos fieldInfos = reader.getFieldInfos();\n    \n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: term vectors........\");\n      }\n\n      PostingsEnum postings = null;\n\n      // Only used if crossCheckTermVectors is true:\n      PostingsEnum postingsDocs = null;\n\n      final Bits liveDocs = reader.getLiveDocs();\n\n      final Fields postingsFields;\n      // TODO: testTermsIndex\n      if (crossCheckTermVectors) {\n        postingsFields = reader.getPostingsReader().getMergeInstance();\n      } else {\n        postingsFields = null;\n      }\n\n      TermVectorsReader vectorsReader = reader.getTermVectorsReader();\n\n      if (vectorsReader != null) {\n        vectorsReader = vectorsReader.getMergeInstance();\n        for (int j = 0; j < reader.maxDoc(); ++j) {\n          // Intentionally pull/visit (but don't count in\n          // stats) deleted documents to make sure they too\n          // are not corrupt:\n          Fields tfv = vectorsReader.get(j);\n          \n          // TODO: can we make a IS(FIR) that searches just\n          // this term vector... to pass for searcher?\n          \n          if (tfv != null) {\n            // First run with no deletions:\n            checkFields(tfv, null, 1, fieldInfos, false, true, infoStream, verbose);\n            \n            // Only agg stats if the doc is live:\n            final boolean doStats = liveDocs == null || liveDocs.get(j);\n            \n            if (doStats) {\n              status.docCount++;\n            }\n            \n            for(String field : tfv) {\n              if (doStats) {\n                status.totVectors++;\n              }\n              \n              // Make sure FieldInfo thinks this field is vector'd:\n              final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n              if (!fieldInfo.hasVectors()) {\n                throw new RuntimeException(\"docID=\" + j + \" has term vectors for field=\" + field + \" but FieldInfo has storeTermVector=false\");\n              }\n              \n              if (crossCheckTermVectors) {\n                Terms terms = tfv.terms(field);\n                TermsEnum termsEnum = terms.iterator();\n                final boolean postingsHasFreq = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n                final boolean postingsHasPayload = fieldInfo.hasPayloads();\n                final boolean vectorsHasPayload = terms.hasPayloads();\n                \n                Terms postingsTerms = postingsFields.terms(field);\n                if (postingsTerms == null) {\n                  throw new RuntimeException(\"vector field=\" + field + \" does not exist in postings; doc=\" + j);\n                }\n                TermsEnum postingsTermsEnum = postingsTerms.iterator();\n                \n                final boolean hasProx = terms.hasOffsets() || terms.hasPositions();\n                BytesRef term = null;\n                while ((term = termsEnum.next()) != null) {\n\n                  // This is the term vectors:\n                  postings = termsEnum.postings(postings, PostingsEnum.ALL);\n                  assert postings != null;\n\n                  if (!postingsTermsEnum.seekExact(term)) {\n                    throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" does not exist in postings; doc=\" + j);\n                  }\n\n                  // This is the inverted index (\"real\" postings):\n                  postingsDocs = postingsTermsEnum.postings(postingsDocs, PostingsEnum.ALL);\n                  assert postingsDocs != null;\n\n                  \n                  final int advanceDoc = postingsDocs.advance(j);\n                  if (advanceDoc != j) {\n                    throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \": doc=\" + j + \" was not found in postings (got: \" + advanceDoc + \")\");\n                  }\n                  \n                  final int doc = postings.nextDoc();\n                  \n                  if (doc != 0) {\n                    throw new RuntimeException(\"vector for doc \" + j + \" didn't return docID=0: got docID=\" + doc);\n                  }\n                  \n                  if (postingsHasFreq) {\n                    final int tf = postings.freq();\n                    if (postingsHasFreq && postingsDocs.freq() != tf) {\n                      throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": freq=\" + tf + \" differs from postings freq=\" + postingsDocs.freq());\n                    }\n\n                    // Term vectors has prox?\n                    if (hasProx) {\n                      for (int i = 0; i < tf; i++) {\n                        int pos = postings.nextPosition();\n                        if (postingsTerms.hasPositions()) {\n                          int postingsPos = postingsDocs.nextPosition();\n                          if (terms.hasPositions() && pos != postingsPos) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": pos=\" + pos + \" differs from postings pos=\" + postingsPos);\n                          }\n                        }\n                        \n                        // Call the methods to at least make\n                        // sure they don't throw exc:\n                        final int startOffset = postings.startOffset();\n                        final int endOffset = postings.endOffset();\n                        // TODO: these are too anal...?\n                        /*\n                        if (endOffset < startOffset) {\n                        throw new RuntimeException(\"vector startOffset=\" + startOffset + \" is > endOffset=\" + endOffset);\n                        }\n                        if (startOffset < lastStartOffset) {\n                        throw new RuntimeException(\"vector startOffset=\" + startOffset + \" is < prior startOffset=\" + lastStartOffset);\n                        }\n                        lastStartOffset = startOffset;\n                         */\n\n                        if (startOffset != -1 && endOffset != -1 && postingsTerms.hasOffsets()) {\n                          int postingsStartOffset = postingsDocs.startOffset();\n                          int postingsEndOffset = postingsDocs.endOffset();\n                          if (startOffset != postingsStartOffset) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": startOffset=\" + startOffset + \" differs from postings startOffset=\" + postingsStartOffset);\n                          }\n                          if (endOffset != postingsEndOffset) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": endOffset=\" + endOffset + \" differs from postings endOffset=\" + postingsEndOffset);\n                          }\n                        }\n\n                        BytesRef payload = postings.getPayload();\n                        \n                        if (payload != null) {\n                          assert vectorsHasPayload;\n                        }\n                        \n                        if (postingsHasPayload && vectorsHasPayload) {\n                          \n                          if (payload == null) {\n                            // we have payloads, but not at this position. \n                            // postings has payloads too, it should not have one at this position\n                            if (postingsDocs.getPayload() != null) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has no payload but postings does: \" + postingsDocs.getPayload());\n                            }\n                          } else {\n                            // we have payloads, and one at this position\n                            // postings should also have one at this position, with the same bytes.\n                            if (postingsDocs.getPayload() == null) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has payload=\" + payload + \" but postings does not.\");\n                            }\n                            BytesRef postingsPayload = postingsDocs.getPayload();\n                            if (!payload.equals(postingsPayload)) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has payload=\" + payload + \" but differs from postings payload=\" + postingsPayload);\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      float vectorAvg = status.docCount == 0 ? 0 : status.totVectors / (float)status.docCount;\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d total term vector count; avg %.1f term/freq vector fields per doc] [took %.3f sec]\",\n                                    status.totVectors, vectorAvg, nsToSec(System.nanoTime() - startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    \n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test term vectors.\n   * @lucene.experimental\n   */\n  public static Status.TermVectorStatus testTermVectors(CodecReader reader, PrintStream infoStream, boolean verbose, boolean crossCheckTermVectors, boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.TermVectorStatus status = new Status.TermVectorStatus();\n    final FieldInfos fieldInfos = reader.getFieldInfos();\n    final Bits onlyDocIsDeleted = new FixedBitSet(1);\n    \n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: term vectors........\");\n      }\n\n      PostingsEnum postings = null;\n\n      // Only used if crossCheckTermVectors is true:\n      PostingsEnum postingsDocs = null;\n      PostingsEnum postingsDocs2 = null;\n\n      final Bits liveDocs = reader.getLiveDocs();\n\n      final Fields postingsFields;\n      // TODO: testTermsIndex\n      if (crossCheckTermVectors) {\n        postingsFields = reader.getPostingsReader().getMergeInstance();\n      } else {\n        postingsFields = null;\n      }\n\n      TermVectorsReader vectorsReader = reader.getTermVectorsReader();\n\n      if (vectorsReader != null) {\n        vectorsReader = vectorsReader.getMergeInstance();\n        for (int j = 0; j < reader.maxDoc(); ++j) {\n          // Intentionally pull/visit (but don't count in\n          // stats) deleted documents to make sure they too\n          // are not corrupt:\n          Fields tfv = vectorsReader.get(j);\n          \n          // TODO: can we make a IS(FIR) that searches just\n          // this term vector... to pass for searcher?\n          \n          if (tfv != null) {\n            // First run with no deletions:\n            checkFields(tfv, null, 1, fieldInfos, false, true, infoStream, verbose);\n            \n            if (j == 0) {\n              // Also test with the 1 doc deleted; we only do this for first doc because this really is just looking for a [slightly] buggy\n              // TermVectors impl that fails to respect the incoming live docs:\n              checkFields(tfv, onlyDocIsDeleted, 1, fieldInfos, false, true, infoStream, verbose);\n            }\n            \n            // Only agg stats if the doc is live:\n            final boolean doStats = liveDocs == null || liveDocs.get(j);\n            \n            if (doStats) {\n              status.docCount++;\n            }\n            \n            for(String field : tfv) {\n              if (doStats) {\n                status.totVectors++;\n              }\n              \n              // Make sure FieldInfo thinks this field is vector'd:\n              final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n              if (!fieldInfo.hasVectors()) {\n                throw new RuntimeException(\"docID=\" + j + \" has term vectors for field=\" + field + \" but FieldInfo has storeTermVector=false\");\n              }\n              \n              if (crossCheckTermVectors) {\n                Terms terms = tfv.terms(field);\n                TermsEnum termsEnum = terms.iterator();\n                final boolean postingsHasFreq = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n                final boolean postingsHasPayload = fieldInfo.hasPayloads();\n                final boolean vectorsHasPayload = terms.hasPayloads();\n                \n                Terms postingsTerms = postingsFields.terms(field);\n                if (postingsTerms == null) {\n                  throw new RuntimeException(\"vector field=\" + field + \" does not exist in postings; doc=\" + j);\n                }\n                TermsEnum postingsTermsEnum = postingsTerms.iterator();\n                \n                final boolean hasProx = terms.hasOffsets() || terms.hasPositions();\n                BytesRef term = null;\n                while ((term = termsEnum.next()) != null) {\n\n                  // This is the term vectors:\n                  postings = termsEnum.postings(null, postings, PostingsEnum.ALL);\n                  assert postings != null;\n\n                  if (!postingsTermsEnum.seekExact(term)) {\n                    throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" does not exist in postings; doc=\" + j);\n                  }\n\n                  // This is the inverted index (\"real\" postings):\n                  postingsDocs2 = postingsTermsEnum.postings(null, postingsDocs2, PostingsEnum.ALL);\n                  assert postingsDocs2 != null;\n\n                  \n                  final int advanceDoc = postingsDocs2.advance(j);\n                  if (advanceDoc != j) {\n                    throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \": doc=\" + j + \" was not found in postings (got: \" + advanceDoc + \")\");\n                  }\n                  \n                  final int doc = postings.nextDoc();\n                  \n                  if (doc != 0) {\n                    throw new RuntimeException(\"vector for doc \" + j + \" didn't return docID=0: got docID=\" + doc);\n                  }\n                  \n                  if (postingsHasFreq) {\n                    final int tf = postings.freq();\n                    if (postingsHasFreq && postingsDocs2.freq() != tf) {\n                      throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": freq=\" + tf + \" differs from postings freq=\" + postingsDocs2.freq());\n                    }\n\n                    // Term vectors has prox?\n                    if (hasProx) {\n                      for (int i = 0; i < tf; i++) {\n                        int pos = postings.nextPosition();\n                        if (postingsTerms.hasPositions()) {\n                          int postingsPos = postingsDocs2.nextPosition();\n                          if (terms.hasPositions() && pos != postingsPos) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": pos=\" + pos + \" differs from postings pos=\" + postingsPos);\n                          }\n                        }\n                        \n                        // Call the methods to at least make\n                        // sure they don't throw exc:\n                        final int startOffset = postings.startOffset();\n                        final int endOffset = postings.endOffset();\n                        // TODO: these are too anal...?\n                        /*\n                        if (endOffset < startOffset) {\n                        throw new RuntimeException(\"vector startOffset=\" + startOffset + \" is > endOffset=\" + endOffset);\n                        }\n                        if (startOffset < lastStartOffset) {\n                        throw new RuntimeException(\"vector startOffset=\" + startOffset + \" is < prior startOffset=\" + lastStartOffset);\n                        }\n                        lastStartOffset = startOffset;\n                         */\n\n                        if (startOffset != -1 && endOffset != -1 && postingsTerms.hasOffsets()) {\n                          int postingsStartOffset = postingsDocs2.startOffset();\n                          int postingsEndOffset = postingsDocs2.endOffset();\n                          if (startOffset != postingsStartOffset) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": startOffset=\" + startOffset + \" differs from postings startOffset=\" + postingsStartOffset);\n                          }\n                          if (endOffset != postingsEndOffset) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": endOffset=\" + endOffset + \" differs from postings endOffset=\" + postingsEndOffset);\n                          }\n                        }\n\n                        BytesRef payload = postings.getPayload();\n                        \n                        if (payload != null) {\n                          assert vectorsHasPayload;\n                        }\n                        \n                        if (postingsHasPayload && vectorsHasPayload) {\n                          \n                          if (payload == null) {\n                            // we have payloads, but not at this position. \n                            // postings has payloads too, it should not have one at this position\n                            if (postingsDocs2.getPayload() != null) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has no payload but postings does: \" + postingsDocs2.getPayload());\n                            }\n                          } else {\n                            // we have payloads, and one at this position\n                            // postings should also have one at this position, with the same bytes.\n                            if (postingsDocs2.getPayload() == null) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has payload=\" + payload + \" but postings does not.\");\n                            }\n                            BytesRef postingsPayload = postingsDocs2.getPayload();\n                            if (!payload.equals(postingsPayload)) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has payload=\" + payload + \" but differs from postings payload=\" + postingsPayload);\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      float vectorAvg = status.docCount == 0 ? 0 : status.totVectors / (float)status.docCount;\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d total term vector count; avg %.1f term/freq vector fields per doc] [took %.3f sec]\",\n                                    status.totVectors, vectorAvg, nsToSec(System.nanoTime() - startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    \n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"762c80e29fe0c3bb83aabe2e64af6379273cec7b","date":1484347562,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testTermVectors(CodecReader,PrintStream,boolean,boolean,boolean,Version).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testTermVectors(CodecReader,PrintStream,boolean,boolean,boolean).mjava","sourceNew":"  /**\n   * Test term vectors.\n   * @lucene.experimental\n   */\n  public static Status.TermVectorStatus testTermVectors(CodecReader reader, PrintStream infoStream, boolean verbose, boolean crossCheckTermVectors, boolean failFast, Version version) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.TermVectorStatus status = new Status.TermVectorStatus();\n    final FieldInfos fieldInfos = reader.getFieldInfos();\n    \n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: term vectors........\");\n      }\n\n      PostingsEnum postings = null;\n\n      // Only used if crossCheckTermVectors is true:\n      PostingsEnum postingsDocs = null;\n\n      final Bits liveDocs = reader.getLiveDocs();\n\n      final Fields postingsFields;\n      // TODO: testTermsIndex\n      if (crossCheckTermVectors) {\n        postingsFields = reader.getPostingsReader().getMergeInstance();\n      } else {\n        postingsFields = null;\n      }\n\n      TermVectorsReader vectorsReader = reader.getTermVectorsReader();\n\n      if (vectorsReader != null) {\n        vectorsReader = vectorsReader.getMergeInstance();\n        for (int j = 0; j < reader.maxDoc(); ++j) {\n          // Intentionally pull/visit (but don't count in\n          // stats) deleted documents to make sure they too\n          // are not corrupt:\n          Fields tfv = vectorsReader.get(j);\n          \n          // TODO: can we make a IS(FIR) that searches just\n          // this term vector... to pass for searcher?\n          \n          if (tfv != null) {\n            // First run with no deletions:\n            checkFields(tfv, null, 1, fieldInfos, false, true, infoStream, verbose, version);\n            \n            // Only agg stats if the doc is live:\n            final boolean doStats = liveDocs == null || liveDocs.get(j);\n            \n            if (doStats) {\n              status.docCount++;\n            }\n            \n            for(String field : tfv) {\n              if (doStats) {\n                status.totVectors++;\n              }\n              \n              // Make sure FieldInfo thinks this field is vector'd:\n              final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n              if (!fieldInfo.hasVectors()) {\n                throw new RuntimeException(\"docID=\" + j + \" has term vectors for field=\" + field + \" but FieldInfo has storeTermVector=false\");\n              }\n              \n              if (crossCheckTermVectors) {\n                Terms terms = tfv.terms(field);\n                TermsEnum termsEnum = terms.iterator();\n                final boolean postingsHasFreq = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n                final boolean postingsHasPayload = fieldInfo.hasPayloads();\n                final boolean vectorsHasPayload = terms.hasPayloads();\n                \n                Terms postingsTerms = postingsFields.terms(field);\n                if (postingsTerms == null) {\n                  throw new RuntimeException(\"vector field=\" + field + \" does not exist in postings; doc=\" + j);\n                }\n                TermsEnum postingsTermsEnum = postingsTerms.iterator();\n                \n                final boolean hasProx = terms.hasOffsets() || terms.hasPositions();\n                BytesRef term = null;\n                while ((term = termsEnum.next()) != null) {\n\n                  // This is the term vectors:\n                  postings = termsEnum.postings(postings, PostingsEnum.ALL);\n                  assert postings != null;\n\n                  if (!postingsTermsEnum.seekExact(term)) {\n                    throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" does not exist in postings; doc=\" + j);\n                  }\n\n                  // This is the inverted index (\"real\" postings):\n                  postingsDocs = postingsTermsEnum.postings(postingsDocs, PostingsEnum.ALL);\n                  assert postingsDocs != null;\n\n                  \n                  final int advanceDoc = postingsDocs.advance(j);\n                  if (advanceDoc != j) {\n                    throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \": doc=\" + j + \" was not found in postings (got: \" + advanceDoc + \")\");\n                  }\n                  \n                  final int doc = postings.nextDoc();\n                  \n                  if (doc != 0) {\n                    throw new RuntimeException(\"vector for doc \" + j + \" didn't return docID=0: got docID=\" + doc);\n                  }\n                  \n                  if (postingsHasFreq) {\n                    final int tf = postings.freq();\n                    if (postingsHasFreq && postingsDocs.freq() != tf) {\n                      throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": freq=\" + tf + \" differs from postings freq=\" + postingsDocs.freq());\n                    }\n\n                    // Term vectors has prox?\n                    if (hasProx) {\n                      for (int i = 0; i < tf; i++) {\n                        int pos = postings.nextPosition();\n                        if (postingsTerms.hasPositions()) {\n                          int postingsPos = postingsDocs.nextPosition();\n                          if (terms.hasPositions() && pos != postingsPos) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": pos=\" + pos + \" differs from postings pos=\" + postingsPos);\n                          }\n                        }\n                        \n                        // Call the methods to at least make\n                        // sure they don't throw exc:\n                        final int startOffset = postings.startOffset();\n                        final int endOffset = postings.endOffset();\n                        // TODO: these are too anal...?\n                        /*\n                        if (endOffset < startOffset) {\n                        throw new RuntimeException(\"vector startOffset=\" + startOffset + \" is > endOffset=\" + endOffset);\n                        }\n                        if (startOffset < lastStartOffset) {\n                        throw new RuntimeException(\"vector startOffset=\" + startOffset + \" is < prior startOffset=\" + lastStartOffset);\n                        }\n                        lastStartOffset = startOffset;\n                         */\n\n                        if (startOffset != -1 && endOffset != -1 && postingsTerms.hasOffsets()) {\n                          int postingsStartOffset = postingsDocs.startOffset();\n                          int postingsEndOffset = postingsDocs.endOffset();\n                          if (startOffset != postingsStartOffset) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": startOffset=\" + startOffset + \" differs from postings startOffset=\" + postingsStartOffset);\n                          }\n                          if (endOffset != postingsEndOffset) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": endOffset=\" + endOffset + \" differs from postings endOffset=\" + postingsEndOffset);\n                          }\n                        }\n\n                        BytesRef payload = postings.getPayload();\n                        \n                        if (payload != null) {\n                          assert vectorsHasPayload;\n                        }\n                        \n                        if (postingsHasPayload && vectorsHasPayload) {\n                          \n                          if (payload == null) {\n                            // we have payloads, but not at this position. \n                            // postings has payloads too, it should not have one at this position\n                            if (postingsDocs.getPayload() != null) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has no payload but postings does: \" + postingsDocs.getPayload());\n                            }\n                          } else {\n                            // we have payloads, and one at this position\n                            // postings should also have one at this position, with the same bytes.\n                            if (postingsDocs.getPayload() == null) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has payload=\" + payload + \" but postings does not.\");\n                            }\n                            BytesRef postingsPayload = postingsDocs.getPayload();\n                            if (!payload.equals(postingsPayload)) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has payload=\" + payload + \" but differs from postings payload=\" + postingsPayload);\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      float vectorAvg = status.docCount == 0 ? 0 : status.totVectors / (float)status.docCount;\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d total term vector count; avg %.1f term/freq vector fields per doc] [took %.3f sec]\",\n                                    status.totVectors, vectorAvg, nsToSec(System.nanoTime() - startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    \n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test term vectors.\n   * @lucene.experimental\n   */\n  public static Status.TermVectorStatus testTermVectors(CodecReader reader, PrintStream infoStream, boolean verbose, boolean crossCheckTermVectors, boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.TermVectorStatus status = new Status.TermVectorStatus();\n    final FieldInfos fieldInfos = reader.getFieldInfos();\n    \n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: term vectors........\");\n      }\n\n      PostingsEnum postings = null;\n\n      // Only used if crossCheckTermVectors is true:\n      PostingsEnum postingsDocs = null;\n\n      final Bits liveDocs = reader.getLiveDocs();\n\n      final Fields postingsFields;\n      // TODO: testTermsIndex\n      if (crossCheckTermVectors) {\n        postingsFields = reader.getPostingsReader().getMergeInstance();\n      } else {\n        postingsFields = null;\n      }\n\n      TermVectorsReader vectorsReader = reader.getTermVectorsReader();\n\n      if (vectorsReader != null) {\n        vectorsReader = vectorsReader.getMergeInstance();\n        for (int j = 0; j < reader.maxDoc(); ++j) {\n          // Intentionally pull/visit (but don't count in\n          // stats) deleted documents to make sure they too\n          // are not corrupt:\n          Fields tfv = vectorsReader.get(j);\n          \n          // TODO: can we make a IS(FIR) that searches just\n          // this term vector... to pass for searcher?\n          \n          if (tfv != null) {\n            // First run with no deletions:\n            checkFields(tfv, null, 1, fieldInfos, false, true, infoStream, verbose);\n            \n            // Only agg stats if the doc is live:\n            final boolean doStats = liveDocs == null || liveDocs.get(j);\n            \n            if (doStats) {\n              status.docCount++;\n            }\n            \n            for(String field : tfv) {\n              if (doStats) {\n                status.totVectors++;\n              }\n              \n              // Make sure FieldInfo thinks this field is vector'd:\n              final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n              if (!fieldInfo.hasVectors()) {\n                throw new RuntimeException(\"docID=\" + j + \" has term vectors for field=\" + field + \" but FieldInfo has storeTermVector=false\");\n              }\n              \n              if (crossCheckTermVectors) {\n                Terms terms = tfv.terms(field);\n                TermsEnum termsEnum = terms.iterator();\n                final boolean postingsHasFreq = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n                final boolean postingsHasPayload = fieldInfo.hasPayloads();\n                final boolean vectorsHasPayload = terms.hasPayloads();\n                \n                Terms postingsTerms = postingsFields.terms(field);\n                if (postingsTerms == null) {\n                  throw new RuntimeException(\"vector field=\" + field + \" does not exist in postings; doc=\" + j);\n                }\n                TermsEnum postingsTermsEnum = postingsTerms.iterator();\n                \n                final boolean hasProx = terms.hasOffsets() || terms.hasPositions();\n                BytesRef term = null;\n                while ((term = termsEnum.next()) != null) {\n\n                  // This is the term vectors:\n                  postings = termsEnum.postings(postings, PostingsEnum.ALL);\n                  assert postings != null;\n\n                  if (!postingsTermsEnum.seekExact(term)) {\n                    throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" does not exist in postings; doc=\" + j);\n                  }\n\n                  // This is the inverted index (\"real\" postings):\n                  postingsDocs = postingsTermsEnum.postings(postingsDocs, PostingsEnum.ALL);\n                  assert postingsDocs != null;\n\n                  \n                  final int advanceDoc = postingsDocs.advance(j);\n                  if (advanceDoc != j) {\n                    throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \": doc=\" + j + \" was not found in postings (got: \" + advanceDoc + \")\");\n                  }\n                  \n                  final int doc = postings.nextDoc();\n                  \n                  if (doc != 0) {\n                    throw new RuntimeException(\"vector for doc \" + j + \" didn't return docID=0: got docID=\" + doc);\n                  }\n                  \n                  if (postingsHasFreq) {\n                    final int tf = postings.freq();\n                    if (postingsHasFreq && postingsDocs.freq() != tf) {\n                      throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": freq=\" + tf + \" differs from postings freq=\" + postingsDocs.freq());\n                    }\n\n                    // Term vectors has prox?\n                    if (hasProx) {\n                      for (int i = 0; i < tf; i++) {\n                        int pos = postings.nextPosition();\n                        if (postingsTerms.hasPositions()) {\n                          int postingsPos = postingsDocs.nextPosition();\n                          if (terms.hasPositions() && pos != postingsPos) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": pos=\" + pos + \" differs from postings pos=\" + postingsPos);\n                          }\n                        }\n                        \n                        // Call the methods to at least make\n                        // sure they don't throw exc:\n                        final int startOffset = postings.startOffset();\n                        final int endOffset = postings.endOffset();\n                        // TODO: these are too anal...?\n                        /*\n                        if (endOffset < startOffset) {\n                        throw new RuntimeException(\"vector startOffset=\" + startOffset + \" is > endOffset=\" + endOffset);\n                        }\n                        if (startOffset < lastStartOffset) {\n                        throw new RuntimeException(\"vector startOffset=\" + startOffset + \" is < prior startOffset=\" + lastStartOffset);\n                        }\n                        lastStartOffset = startOffset;\n                         */\n\n                        if (startOffset != -1 && endOffset != -1 && postingsTerms.hasOffsets()) {\n                          int postingsStartOffset = postingsDocs.startOffset();\n                          int postingsEndOffset = postingsDocs.endOffset();\n                          if (startOffset != postingsStartOffset) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": startOffset=\" + startOffset + \" differs from postings startOffset=\" + postingsStartOffset);\n                          }\n                          if (endOffset != postingsEndOffset) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": endOffset=\" + endOffset + \" differs from postings endOffset=\" + postingsEndOffset);\n                          }\n                        }\n\n                        BytesRef payload = postings.getPayload();\n                        \n                        if (payload != null) {\n                          assert vectorsHasPayload;\n                        }\n                        \n                        if (postingsHasPayload && vectorsHasPayload) {\n                          \n                          if (payload == null) {\n                            // we have payloads, but not at this position. \n                            // postings has payloads too, it should not have one at this position\n                            if (postingsDocs.getPayload() != null) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has no payload but postings does: \" + postingsDocs.getPayload());\n                            }\n                          } else {\n                            // we have payloads, and one at this position\n                            // postings should also have one at this position, with the same bytes.\n                            if (postingsDocs.getPayload() == null) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has payload=\" + payload + \" but postings does not.\");\n                            }\n                            BytesRef postingsPayload = postingsDocs.getPayload();\n                            if (!payload.equals(postingsPayload)) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has payload=\" + payload + \" but differs from postings payload=\" + postingsPayload);\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      float vectorAvg = status.docCount == 0 ? 0 : status.totVectors / (float)status.docCount;\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d total term vector count; avg %.1f term/freq vector fields per doc] [took %.3f sec]\",\n                                    status.totVectors, vectorAvg, nsToSec(System.nanoTime() - startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    \n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"507e7decdf00981d09a74632ea30299a4ce6ba72","date":1484600874,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testTermVectors(CodecReader,PrintStream,boolean,boolean,boolean,Version).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testTermVectors(CodecReader,PrintStream,boolean,boolean,boolean).mjava","sourceNew":"  /**\n   * Test term vectors.\n   * @lucene.experimental\n   */\n  public static Status.TermVectorStatus testTermVectors(CodecReader reader, PrintStream infoStream, boolean verbose, boolean crossCheckTermVectors, boolean failFast, Version version) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.TermVectorStatus status = new Status.TermVectorStatus();\n    final FieldInfos fieldInfos = reader.getFieldInfos();\n    \n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: term vectors........\");\n      }\n\n      PostingsEnum postings = null;\n\n      // Only used if crossCheckTermVectors is true:\n      PostingsEnum postingsDocs = null;\n\n      final Bits liveDocs = reader.getLiveDocs();\n\n      final Fields postingsFields;\n      // TODO: testTermsIndex\n      if (crossCheckTermVectors) {\n        postingsFields = reader.getPostingsReader().getMergeInstance();\n      } else {\n        postingsFields = null;\n      }\n\n      TermVectorsReader vectorsReader = reader.getTermVectorsReader();\n\n      if (vectorsReader != null) {\n        vectorsReader = vectorsReader.getMergeInstance();\n        for (int j = 0; j < reader.maxDoc(); ++j) {\n          // Intentionally pull/visit (but don't count in\n          // stats) deleted documents to make sure they too\n          // are not corrupt:\n          Fields tfv = vectorsReader.get(j);\n          \n          // TODO: can we make a IS(FIR) that searches just\n          // this term vector... to pass for searcher?\n          \n          if (tfv != null) {\n            // First run with no deletions:\n            checkFields(tfv, null, 1, fieldInfos, false, true, infoStream, verbose, version);\n            \n            // Only agg stats if the doc is live:\n            final boolean doStats = liveDocs == null || liveDocs.get(j);\n            \n            if (doStats) {\n              status.docCount++;\n            }\n            \n            for(String field : tfv) {\n              if (doStats) {\n                status.totVectors++;\n              }\n              \n              // Make sure FieldInfo thinks this field is vector'd:\n              final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n              if (!fieldInfo.hasVectors()) {\n                throw new RuntimeException(\"docID=\" + j + \" has term vectors for field=\" + field + \" but FieldInfo has storeTermVector=false\");\n              }\n              \n              if (crossCheckTermVectors) {\n                Terms terms = tfv.terms(field);\n                TermsEnum termsEnum = terms.iterator();\n                final boolean postingsHasFreq = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n                final boolean postingsHasPayload = fieldInfo.hasPayloads();\n                final boolean vectorsHasPayload = terms.hasPayloads();\n                \n                Terms postingsTerms = postingsFields.terms(field);\n                if (postingsTerms == null) {\n                  throw new RuntimeException(\"vector field=\" + field + \" does not exist in postings; doc=\" + j);\n                }\n                TermsEnum postingsTermsEnum = postingsTerms.iterator();\n                \n                final boolean hasProx = terms.hasOffsets() || terms.hasPositions();\n                BytesRef term = null;\n                while ((term = termsEnum.next()) != null) {\n\n                  // This is the term vectors:\n                  postings = termsEnum.postings(postings, PostingsEnum.ALL);\n                  assert postings != null;\n\n                  if (!postingsTermsEnum.seekExact(term)) {\n                    throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" does not exist in postings; doc=\" + j);\n                  }\n\n                  // This is the inverted index (\"real\" postings):\n                  postingsDocs = postingsTermsEnum.postings(postingsDocs, PostingsEnum.ALL);\n                  assert postingsDocs != null;\n\n                  \n                  final int advanceDoc = postingsDocs.advance(j);\n                  if (advanceDoc != j) {\n                    throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \": doc=\" + j + \" was not found in postings (got: \" + advanceDoc + \")\");\n                  }\n                  \n                  final int doc = postings.nextDoc();\n                  \n                  if (doc != 0) {\n                    throw new RuntimeException(\"vector for doc \" + j + \" didn't return docID=0: got docID=\" + doc);\n                  }\n                  \n                  if (postingsHasFreq) {\n                    final int tf = postings.freq();\n                    if (postingsHasFreq && postingsDocs.freq() != tf) {\n                      throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": freq=\" + tf + \" differs from postings freq=\" + postingsDocs.freq());\n                    }\n\n                    // Term vectors has prox?\n                    if (hasProx) {\n                      for (int i = 0; i < tf; i++) {\n                        int pos = postings.nextPosition();\n                        if (postingsTerms.hasPositions()) {\n                          int postingsPos = postingsDocs.nextPosition();\n                          if (terms.hasPositions() && pos != postingsPos) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": pos=\" + pos + \" differs from postings pos=\" + postingsPos);\n                          }\n                        }\n                        \n                        // Call the methods to at least make\n                        // sure they don't throw exc:\n                        final int startOffset = postings.startOffset();\n                        final int endOffset = postings.endOffset();\n                        // TODO: these are too anal...?\n                        /*\n                        if (endOffset < startOffset) {\n                        throw new RuntimeException(\"vector startOffset=\" + startOffset + \" is > endOffset=\" + endOffset);\n                        }\n                        if (startOffset < lastStartOffset) {\n                        throw new RuntimeException(\"vector startOffset=\" + startOffset + \" is < prior startOffset=\" + lastStartOffset);\n                        }\n                        lastStartOffset = startOffset;\n                         */\n\n                        if (startOffset != -1 && endOffset != -1 && postingsTerms.hasOffsets()) {\n                          int postingsStartOffset = postingsDocs.startOffset();\n                          int postingsEndOffset = postingsDocs.endOffset();\n                          if (startOffset != postingsStartOffset) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": startOffset=\" + startOffset + \" differs from postings startOffset=\" + postingsStartOffset);\n                          }\n                          if (endOffset != postingsEndOffset) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": endOffset=\" + endOffset + \" differs from postings endOffset=\" + postingsEndOffset);\n                          }\n                        }\n\n                        BytesRef payload = postings.getPayload();\n                        \n                        if (payload != null) {\n                          assert vectorsHasPayload;\n                        }\n                        \n                        if (postingsHasPayload && vectorsHasPayload) {\n                          \n                          if (payload == null) {\n                            // we have payloads, but not at this position. \n                            // postings has payloads too, it should not have one at this position\n                            if (postingsDocs.getPayload() != null) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has no payload but postings does: \" + postingsDocs.getPayload());\n                            }\n                          } else {\n                            // we have payloads, and one at this position\n                            // postings should also have one at this position, with the same bytes.\n                            if (postingsDocs.getPayload() == null) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has payload=\" + payload + \" but postings does not.\");\n                            }\n                            BytesRef postingsPayload = postingsDocs.getPayload();\n                            if (!payload.equals(postingsPayload)) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has payload=\" + payload + \" but differs from postings payload=\" + postingsPayload);\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      float vectorAvg = status.docCount == 0 ? 0 : status.totVectors / (float)status.docCount;\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d total term vector count; avg %.1f term/freq vector fields per doc] [took %.3f sec]\",\n                                    status.totVectors, vectorAvg, nsToSec(System.nanoTime() - startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    \n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test term vectors.\n   * @lucene.experimental\n   */\n  public static Status.TermVectorStatus testTermVectors(CodecReader reader, PrintStream infoStream, boolean verbose, boolean crossCheckTermVectors, boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.TermVectorStatus status = new Status.TermVectorStatus();\n    final FieldInfos fieldInfos = reader.getFieldInfos();\n    \n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: term vectors........\");\n      }\n\n      PostingsEnum postings = null;\n\n      // Only used if crossCheckTermVectors is true:\n      PostingsEnum postingsDocs = null;\n\n      final Bits liveDocs = reader.getLiveDocs();\n\n      final Fields postingsFields;\n      // TODO: testTermsIndex\n      if (crossCheckTermVectors) {\n        postingsFields = reader.getPostingsReader().getMergeInstance();\n      } else {\n        postingsFields = null;\n      }\n\n      TermVectorsReader vectorsReader = reader.getTermVectorsReader();\n\n      if (vectorsReader != null) {\n        vectorsReader = vectorsReader.getMergeInstance();\n        for (int j = 0; j < reader.maxDoc(); ++j) {\n          // Intentionally pull/visit (but don't count in\n          // stats) deleted documents to make sure they too\n          // are not corrupt:\n          Fields tfv = vectorsReader.get(j);\n          \n          // TODO: can we make a IS(FIR) that searches just\n          // this term vector... to pass for searcher?\n          \n          if (tfv != null) {\n            // First run with no deletions:\n            checkFields(tfv, null, 1, fieldInfos, false, true, infoStream, verbose);\n            \n            // Only agg stats if the doc is live:\n            final boolean doStats = liveDocs == null || liveDocs.get(j);\n            \n            if (doStats) {\n              status.docCount++;\n            }\n            \n            for(String field : tfv) {\n              if (doStats) {\n                status.totVectors++;\n              }\n              \n              // Make sure FieldInfo thinks this field is vector'd:\n              final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n              if (!fieldInfo.hasVectors()) {\n                throw new RuntimeException(\"docID=\" + j + \" has term vectors for field=\" + field + \" but FieldInfo has storeTermVector=false\");\n              }\n              \n              if (crossCheckTermVectors) {\n                Terms terms = tfv.terms(field);\n                TermsEnum termsEnum = terms.iterator();\n                final boolean postingsHasFreq = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n                final boolean postingsHasPayload = fieldInfo.hasPayloads();\n                final boolean vectorsHasPayload = terms.hasPayloads();\n                \n                Terms postingsTerms = postingsFields.terms(field);\n                if (postingsTerms == null) {\n                  throw new RuntimeException(\"vector field=\" + field + \" does not exist in postings; doc=\" + j);\n                }\n                TermsEnum postingsTermsEnum = postingsTerms.iterator();\n                \n                final boolean hasProx = terms.hasOffsets() || terms.hasPositions();\n                BytesRef term = null;\n                while ((term = termsEnum.next()) != null) {\n\n                  // This is the term vectors:\n                  postings = termsEnum.postings(postings, PostingsEnum.ALL);\n                  assert postings != null;\n\n                  if (!postingsTermsEnum.seekExact(term)) {\n                    throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" does not exist in postings; doc=\" + j);\n                  }\n\n                  // This is the inverted index (\"real\" postings):\n                  postingsDocs = postingsTermsEnum.postings(postingsDocs, PostingsEnum.ALL);\n                  assert postingsDocs != null;\n\n                  \n                  final int advanceDoc = postingsDocs.advance(j);\n                  if (advanceDoc != j) {\n                    throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \": doc=\" + j + \" was not found in postings (got: \" + advanceDoc + \")\");\n                  }\n                  \n                  final int doc = postings.nextDoc();\n                  \n                  if (doc != 0) {\n                    throw new RuntimeException(\"vector for doc \" + j + \" didn't return docID=0: got docID=\" + doc);\n                  }\n                  \n                  if (postingsHasFreq) {\n                    final int tf = postings.freq();\n                    if (postingsHasFreq && postingsDocs.freq() != tf) {\n                      throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": freq=\" + tf + \" differs from postings freq=\" + postingsDocs.freq());\n                    }\n\n                    // Term vectors has prox?\n                    if (hasProx) {\n                      for (int i = 0; i < tf; i++) {\n                        int pos = postings.nextPosition();\n                        if (postingsTerms.hasPositions()) {\n                          int postingsPos = postingsDocs.nextPosition();\n                          if (terms.hasPositions() && pos != postingsPos) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": pos=\" + pos + \" differs from postings pos=\" + postingsPos);\n                          }\n                        }\n                        \n                        // Call the methods to at least make\n                        // sure they don't throw exc:\n                        final int startOffset = postings.startOffset();\n                        final int endOffset = postings.endOffset();\n                        // TODO: these are too anal...?\n                        /*\n                        if (endOffset < startOffset) {\n                        throw new RuntimeException(\"vector startOffset=\" + startOffset + \" is > endOffset=\" + endOffset);\n                        }\n                        if (startOffset < lastStartOffset) {\n                        throw new RuntimeException(\"vector startOffset=\" + startOffset + \" is < prior startOffset=\" + lastStartOffset);\n                        }\n                        lastStartOffset = startOffset;\n                         */\n\n                        if (startOffset != -1 && endOffset != -1 && postingsTerms.hasOffsets()) {\n                          int postingsStartOffset = postingsDocs.startOffset();\n                          int postingsEndOffset = postingsDocs.endOffset();\n                          if (startOffset != postingsStartOffset) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": startOffset=\" + startOffset + \" differs from postings startOffset=\" + postingsStartOffset);\n                          }\n                          if (endOffset != postingsEndOffset) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": endOffset=\" + endOffset + \" differs from postings endOffset=\" + postingsEndOffset);\n                          }\n                        }\n\n                        BytesRef payload = postings.getPayload();\n                        \n                        if (payload != null) {\n                          assert vectorsHasPayload;\n                        }\n                        \n                        if (postingsHasPayload && vectorsHasPayload) {\n                          \n                          if (payload == null) {\n                            // we have payloads, but not at this position. \n                            // postings has payloads too, it should not have one at this position\n                            if (postingsDocs.getPayload() != null) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has no payload but postings does: \" + postingsDocs.getPayload());\n                            }\n                          } else {\n                            // we have payloads, and one at this position\n                            // postings should also have one at this position, with the same bytes.\n                            if (postingsDocs.getPayload() == null) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has payload=\" + payload + \" but postings does not.\");\n                            }\n                            BytesRef postingsPayload = postingsDocs.getPayload();\n                            if (!payload.equals(postingsPayload)) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has payload=\" + payload + \" but differs from postings payload=\" + postingsPayload);\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      float vectorAvg = status.docCount == 0 ? 0 : status.totVectors / (float)status.docCount;\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d total term vector count; avg %.1f term/freq vector fields per doc] [took %.3f sec]\",\n                                    status.totVectors, vectorAvg, nsToSec(System.nanoTime() - startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    \n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd7538cbbd9c304bc5396980e9802cd3a5bcf8e4","date":1499084229,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testTermVectors(CodecReader,PrintStream,boolean,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testTermVectors(CodecReader,PrintStream,boolean,boolean,boolean,Version).mjava","sourceNew":"  /**\n   * Test term vectors.\n   * @lucene.experimental\n   */\n  public static Status.TermVectorStatus testTermVectors(CodecReader reader, PrintStream infoStream, boolean verbose, boolean crossCheckTermVectors, boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.TermVectorStatus status = new Status.TermVectorStatus();\n    final FieldInfos fieldInfos = reader.getFieldInfos();\n    \n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: term vectors........\");\n      }\n\n      PostingsEnum postings = null;\n\n      // Only used if crossCheckTermVectors is true:\n      PostingsEnum postingsDocs = null;\n\n      final Bits liveDocs = reader.getLiveDocs();\n\n      final Fields postingsFields;\n      // TODO: testTermsIndex\n      if (crossCheckTermVectors) {\n        postingsFields = reader.getPostingsReader().getMergeInstance();\n      } else {\n        postingsFields = null;\n      }\n\n      TermVectorsReader vectorsReader = reader.getTermVectorsReader();\n\n      if (vectorsReader != null) {\n        vectorsReader = vectorsReader.getMergeInstance();\n        for (int j = 0; j < reader.maxDoc(); ++j) {\n          // Intentionally pull/visit (but don't count in\n          // stats) deleted documents to make sure they too\n          // are not corrupt:\n          Fields tfv = vectorsReader.get(j);\n          \n          // TODO: can we make a IS(FIR) that searches just\n          // this term vector... to pass for searcher?\n          \n          if (tfv != null) {\n            // First run with no deletions:\n            checkFields(tfv, null, 1, fieldInfos, false, true, infoStream, verbose);\n            \n            // Only agg stats if the doc is live:\n            final boolean doStats = liveDocs == null || liveDocs.get(j);\n            \n            if (doStats) {\n              status.docCount++;\n            }\n            \n            for(String field : tfv) {\n              if (doStats) {\n                status.totVectors++;\n              }\n              \n              // Make sure FieldInfo thinks this field is vector'd:\n              final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n              if (!fieldInfo.hasVectors()) {\n                throw new RuntimeException(\"docID=\" + j + \" has term vectors for field=\" + field + \" but FieldInfo has storeTermVector=false\");\n              }\n              \n              if (crossCheckTermVectors) {\n                Terms terms = tfv.terms(field);\n                TermsEnum termsEnum = terms.iterator();\n                final boolean postingsHasFreq = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n                final boolean postingsHasPayload = fieldInfo.hasPayloads();\n                final boolean vectorsHasPayload = terms.hasPayloads();\n                \n                Terms postingsTerms = postingsFields.terms(field);\n                if (postingsTerms == null) {\n                  throw new RuntimeException(\"vector field=\" + field + \" does not exist in postings; doc=\" + j);\n                }\n                TermsEnum postingsTermsEnum = postingsTerms.iterator();\n                \n                final boolean hasProx = terms.hasOffsets() || terms.hasPositions();\n                BytesRef term = null;\n                while ((term = termsEnum.next()) != null) {\n\n                  // This is the term vectors:\n                  postings = termsEnum.postings(postings, PostingsEnum.ALL);\n                  assert postings != null;\n\n                  if (!postingsTermsEnum.seekExact(term)) {\n                    throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" does not exist in postings; doc=\" + j);\n                  }\n\n                  // This is the inverted index (\"real\" postings):\n                  postingsDocs = postingsTermsEnum.postings(postingsDocs, PostingsEnum.ALL);\n                  assert postingsDocs != null;\n\n                  \n                  final int advanceDoc = postingsDocs.advance(j);\n                  if (advanceDoc != j) {\n                    throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \": doc=\" + j + \" was not found in postings (got: \" + advanceDoc + \")\");\n                  }\n                  \n                  final int doc = postings.nextDoc();\n                  \n                  if (doc != 0) {\n                    throw new RuntimeException(\"vector for doc \" + j + \" didn't return docID=0: got docID=\" + doc);\n                  }\n                  \n                  if (postingsHasFreq) {\n                    final int tf = postings.freq();\n                    if (postingsHasFreq && postingsDocs.freq() != tf) {\n                      throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": freq=\" + tf + \" differs from postings freq=\" + postingsDocs.freq());\n                    }\n\n                    // Term vectors has prox?\n                    if (hasProx) {\n                      for (int i = 0; i < tf; i++) {\n                        int pos = postings.nextPosition();\n                        if (postingsTerms.hasPositions()) {\n                          int postingsPos = postingsDocs.nextPosition();\n                          if (terms.hasPositions() && pos != postingsPos) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": pos=\" + pos + \" differs from postings pos=\" + postingsPos);\n                          }\n                        }\n                        \n                        // Call the methods to at least make\n                        // sure they don't throw exc:\n                        final int startOffset = postings.startOffset();\n                        final int endOffset = postings.endOffset();\n                        // TODO: these are too anal...?\n                        /*\n                        if (endOffset < startOffset) {\n                        throw new RuntimeException(\"vector startOffset=\" + startOffset + \" is > endOffset=\" + endOffset);\n                        }\n                        if (startOffset < lastStartOffset) {\n                        throw new RuntimeException(\"vector startOffset=\" + startOffset + \" is < prior startOffset=\" + lastStartOffset);\n                        }\n                        lastStartOffset = startOffset;\n                         */\n\n                        if (startOffset != -1 && endOffset != -1 && postingsTerms.hasOffsets()) {\n                          int postingsStartOffset = postingsDocs.startOffset();\n                          int postingsEndOffset = postingsDocs.endOffset();\n                          if (startOffset != postingsStartOffset) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": startOffset=\" + startOffset + \" differs from postings startOffset=\" + postingsStartOffset);\n                          }\n                          if (endOffset != postingsEndOffset) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": endOffset=\" + endOffset + \" differs from postings endOffset=\" + postingsEndOffset);\n                          }\n                        }\n\n                        BytesRef payload = postings.getPayload();\n                        \n                        if (payload != null) {\n                          assert vectorsHasPayload;\n                        }\n                        \n                        if (postingsHasPayload && vectorsHasPayload) {\n                          \n                          if (payload == null) {\n                            // we have payloads, but not at this position. \n                            // postings has payloads too, it should not have one at this position\n                            if (postingsDocs.getPayload() != null) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has no payload but postings does: \" + postingsDocs.getPayload());\n                            }\n                          } else {\n                            // we have payloads, and one at this position\n                            // postings should also have one at this position, with the same bytes.\n                            if (postingsDocs.getPayload() == null) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has payload=\" + payload + \" but postings does not.\");\n                            }\n                            BytesRef postingsPayload = postingsDocs.getPayload();\n                            if (!payload.equals(postingsPayload)) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has payload=\" + payload + \" but differs from postings payload=\" + postingsPayload);\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      float vectorAvg = status.docCount == 0 ? 0 : status.totVectors / (float)status.docCount;\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d total term vector count; avg %.1f term/freq vector fields per doc] [took %.3f sec]\",\n                                    status.totVectors, vectorAvg, nsToSec(System.nanoTime() - startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        throw IOUtils.rethrowAlways(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    \n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test term vectors.\n   * @lucene.experimental\n   */\n  public static Status.TermVectorStatus testTermVectors(CodecReader reader, PrintStream infoStream, boolean verbose, boolean crossCheckTermVectors, boolean failFast, Version version) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.TermVectorStatus status = new Status.TermVectorStatus();\n    final FieldInfos fieldInfos = reader.getFieldInfos();\n    \n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: term vectors........\");\n      }\n\n      PostingsEnum postings = null;\n\n      // Only used if crossCheckTermVectors is true:\n      PostingsEnum postingsDocs = null;\n\n      final Bits liveDocs = reader.getLiveDocs();\n\n      final Fields postingsFields;\n      // TODO: testTermsIndex\n      if (crossCheckTermVectors) {\n        postingsFields = reader.getPostingsReader().getMergeInstance();\n      } else {\n        postingsFields = null;\n      }\n\n      TermVectorsReader vectorsReader = reader.getTermVectorsReader();\n\n      if (vectorsReader != null) {\n        vectorsReader = vectorsReader.getMergeInstance();\n        for (int j = 0; j < reader.maxDoc(); ++j) {\n          // Intentionally pull/visit (but don't count in\n          // stats) deleted documents to make sure they too\n          // are not corrupt:\n          Fields tfv = vectorsReader.get(j);\n          \n          // TODO: can we make a IS(FIR) that searches just\n          // this term vector... to pass for searcher?\n          \n          if (tfv != null) {\n            // First run with no deletions:\n            checkFields(tfv, null, 1, fieldInfos, false, true, infoStream, verbose, version);\n            \n            // Only agg stats if the doc is live:\n            final boolean doStats = liveDocs == null || liveDocs.get(j);\n            \n            if (doStats) {\n              status.docCount++;\n            }\n            \n            for(String field : tfv) {\n              if (doStats) {\n                status.totVectors++;\n              }\n              \n              // Make sure FieldInfo thinks this field is vector'd:\n              final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n              if (!fieldInfo.hasVectors()) {\n                throw new RuntimeException(\"docID=\" + j + \" has term vectors for field=\" + field + \" but FieldInfo has storeTermVector=false\");\n              }\n              \n              if (crossCheckTermVectors) {\n                Terms terms = tfv.terms(field);\n                TermsEnum termsEnum = terms.iterator();\n                final boolean postingsHasFreq = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n                final boolean postingsHasPayload = fieldInfo.hasPayloads();\n                final boolean vectorsHasPayload = terms.hasPayloads();\n                \n                Terms postingsTerms = postingsFields.terms(field);\n                if (postingsTerms == null) {\n                  throw new RuntimeException(\"vector field=\" + field + \" does not exist in postings; doc=\" + j);\n                }\n                TermsEnum postingsTermsEnum = postingsTerms.iterator();\n                \n                final boolean hasProx = terms.hasOffsets() || terms.hasPositions();\n                BytesRef term = null;\n                while ((term = termsEnum.next()) != null) {\n\n                  // This is the term vectors:\n                  postings = termsEnum.postings(postings, PostingsEnum.ALL);\n                  assert postings != null;\n\n                  if (!postingsTermsEnum.seekExact(term)) {\n                    throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" does not exist in postings; doc=\" + j);\n                  }\n\n                  // This is the inverted index (\"real\" postings):\n                  postingsDocs = postingsTermsEnum.postings(postingsDocs, PostingsEnum.ALL);\n                  assert postingsDocs != null;\n\n                  \n                  final int advanceDoc = postingsDocs.advance(j);\n                  if (advanceDoc != j) {\n                    throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \": doc=\" + j + \" was not found in postings (got: \" + advanceDoc + \")\");\n                  }\n                  \n                  final int doc = postings.nextDoc();\n                  \n                  if (doc != 0) {\n                    throw new RuntimeException(\"vector for doc \" + j + \" didn't return docID=0: got docID=\" + doc);\n                  }\n                  \n                  if (postingsHasFreq) {\n                    final int tf = postings.freq();\n                    if (postingsHasFreq && postingsDocs.freq() != tf) {\n                      throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": freq=\" + tf + \" differs from postings freq=\" + postingsDocs.freq());\n                    }\n\n                    // Term vectors has prox?\n                    if (hasProx) {\n                      for (int i = 0; i < tf; i++) {\n                        int pos = postings.nextPosition();\n                        if (postingsTerms.hasPositions()) {\n                          int postingsPos = postingsDocs.nextPosition();\n                          if (terms.hasPositions() && pos != postingsPos) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": pos=\" + pos + \" differs from postings pos=\" + postingsPos);\n                          }\n                        }\n                        \n                        // Call the methods to at least make\n                        // sure they don't throw exc:\n                        final int startOffset = postings.startOffset();\n                        final int endOffset = postings.endOffset();\n                        // TODO: these are too anal...?\n                        /*\n                        if (endOffset < startOffset) {\n                        throw new RuntimeException(\"vector startOffset=\" + startOffset + \" is > endOffset=\" + endOffset);\n                        }\n                        if (startOffset < lastStartOffset) {\n                        throw new RuntimeException(\"vector startOffset=\" + startOffset + \" is < prior startOffset=\" + lastStartOffset);\n                        }\n                        lastStartOffset = startOffset;\n                         */\n\n                        if (startOffset != -1 && endOffset != -1 && postingsTerms.hasOffsets()) {\n                          int postingsStartOffset = postingsDocs.startOffset();\n                          int postingsEndOffset = postingsDocs.endOffset();\n                          if (startOffset != postingsStartOffset) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": startOffset=\" + startOffset + \" differs from postings startOffset=\" + postingsStartOffset);\n                          }\n                          if (endOffset != postingsEndOffset) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": endOffset=\" + endOffset + \" differs from postings endOffset=\" + postingsEndOffset);\n                          }\n                        }\n\n                        BytesRef payload = postings.getPayload();\n                        \n                        if (payload != null) {\n                          assert vectorsHasPayload;\n                        }\n                        \n                        if (postingsHasPayload && vectorsHasPayload) {\n                          \n                          if (payload == null) {\n                            // we have payloads, but not at this position. \n                            // postings has payloads too, it should not have one at this position\n                            if (postingsDocs.getPayload() != null) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has no payload but postings does: \" + postingsDocs.getPayload());\n                            }\n                          } else {\n                            // we have payloads, and one at this position\n                            // postings should also have one at this position, with the same bytes.\n                            if (postingsDocs.getPayload() == null) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has payload=\" + payload + \" but postings does not.\");\n                            }\n                            BytesRef postingsPayload = postingsDocs.getPayload();\n                            if (!payload.equals(postingsPayload)) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has payload=\" + payload + \" but differs from postings payload=\" + postingsPayload);\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      float vectorAvg = status.docCount == 0 ? 0 : status.totVectors / (float)status.docCount;\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d total term vector count; avg %.1f term/freq vector fields per doc] [took %.3f sec]\",\n                                    status.totVectors, vectorAvg, nsToSec(System.nanoTime() - startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        throw IOUtils.rethrowAlways(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    \n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc018b79379c67835b40b1259cd3dc931df60944","date":1499109112,"type":1,"author":"Anshum Gupta","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testTermVectors(CodecReader,PrintStream,boolean,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testTermVectors(CodecReader,PrintStream,boolean,boolean,boolean,Version).mjava","sourceNew":"  /**\n   * Test term vectors.\n   * @lucene.experimental\n   */\n  public static Status.TermVectorStatus testTermVectors(CodecReader reader, PrintStream infoStream, boolean verbose, boolean crossCheckTermVectors, boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.TermVectorStatus status = new Status.TermVectorStatus();\n    final FieldInfos fieldInfos = reader.getFieldInfos();\n    \n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: term vectors........\");\n      }\n\n      PostingsEnum postings = null;\n\n      // Only used if crossCheckTermVectors is true:\n      PostingsEnum postingsDocs = null;\n\n      final Bits liveDocs = reader.getLiveDocs();\n\n      final Fields postingsFields;\n      // TODO: testTermsIndex\n      if (crossCheckTermVectors) {\n        postingsFields = reader.getPostingsReader().getMergeInstance();\n      } else {\n        postingsFields = null;\n      }\n\n      TermVectorsReader vectorsReader = reader.getTermVectorsReader();\n\n      if (vectorsReader != null) {\n        vectorsReader = vectorsReader.getMergeInstance();\n        for (int j = 0; j < reader.maxDoc(); ++j) {\n          // Intentionally pull/visit (but don't count in\n          // stats) deleted documents to make sure they too\n          // are not corrupt:\n          Fields tfv = vectorsReader.get(j);\n          \n          // TODO: can we make a IS(FIR) that searches just\n          // this term vector... to pass for searcher?\n          \n          if (tfv != null) {\n            // First run with no deletions:\n            checkFields(tfv, null, 1, fieldInfos, false, true, infoStream, verbose);\n            \n            // Only agg stats if the doc is live:\n            final boolean doStats = liveDocs == null || liveDocs.get(j);\n            \n            if (doStats) {\n              status.docCount++;\n            }\n            \n            for(String field : tfv) {\n              if (doStats) {\n                status.totVectors++;\n              }\n              \n              // Make sure FieldInfo thinks this field is vector'd:\n              final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n              if (!fieldInfo.hasVectors()) {\n                throw new RuntimeException(\"docID=\" + j + \" has term vectors for field=\" + field + \" but FieldInfo has storeTermVector=false\");\n              }\n              \n              if (crossCheckTermVectors) {\n                Terms terms = tfv.terms(field);\n                TermsEnum termsEnum = terms.iterator();\n                final boolean postingsHasFreq = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n                final boolean postingsHasPayload = fieldInfo.hasPayloads();\n                final boolean vectorsHasPayload = terms.hasPayloads();\n                \n                Terms postingsTerms = postingsFields.terms(field);\n                if (postingsTerms == null) {\n                  throw new RuntimeException(\"vector field=\" + field + \" does not exist in postings; doc=\" + j);\n                }\n                TermsEnum postingsTermsEnum = postingsTerms.iterator();\n                \n                final boolean hasProx = terms.hasOffsets() || terms.hasPositions();\n                BytesRef term = null;\n                while ((term = termsEnum.next()) != null) {\n\n                  // This is the term vectors:\n                  postings = termsEnum.postings(postings, PostingsEnum.ALL);\n                  assert postings != null;\n\n                  if (!postingsTermsEnum.seekExact(term)) {\n                    throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" does not exist in postings; doc=\" + j);\n                  }\n\n                  // This is the inverted index (\"real\" postings):\n                  postingsDocs = postingsTermsEnum.postings(postingsDocs, PostingsEnum.ALL);\n                  assert postingsDocs != null;\n\n                  \n                  final int advanceDoc = postingsDocs.advance(j);\n                  if (advanceDoc != j) {\n                    throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \": doc=\" + j + \" was not found in postings (got: \" + advanceDoc + \")\");\n                  }\n                  \n                  final int doc = postings.nextDoc();\n                  \n                  if (doc != 0) {\n                    throw new RuntimeException(\"vector for doc \" + j + \" didn't return docID=0: got docID=\" + doc);\n                  }\n                  \n                  if (postingsHasFreq) {\n                    final int tf = postings.freq();\n                    if (postingsHasFreq && postingsDocs.freq() != tf) {\n                      throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": freq=\" + tf + \" differs from postings freq=\" + postingsDocs.freq());\n                    }\n\n                    // Term vectors has prox?\n                    if (hasProx) {\n                      for (int i = 0; i < tf; i++) {\n                        int pos = postings.nextPosition();\n                        if (postingsTerms.hasPositions()) {\n                          int postingsPos = postingsDocs.nextPosition();\n                          if (terms.hasPositions() && pos != postingsPos) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": pos=\" + pos + \" differs from postings pos=\" + postingsPos);\n                          }\n                        }\n                        \n                        // Call the methods to at least make\n                        // sure they don't throw exc:\n                        final int startOffset = postings.startOffset();\n                        final int endOffset = postings.endOffset();\n                        // TODO: these are too anal...?\n                        /*\n                        if (endOffset < startOffset) {\n                        throw new RuntimeException(\"vector startOffset=\" + startOffset + \" is > endOffset=\" + endOffset);\n                        }\n                        if (startOffset < lastStartOffset) {\n                        throw new RuntimeException(\"vector startOffset=\" + startOffset + \" is < prior startOffset=\" + lastStartOffset);\n                        }\n                        lastStartOffset = startOffset;\n                         */\n\n                        if (startOffset != -1 && endOffset != -1 && postingsTerms.hasOffsets()) {\n                          int postingsStartOffset = postingsDocs.startOffset();\n                          int postingsEndOffset = postingsDocs.endOffset();\n                          if (startOffset != postingsStartOffset) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": startOffset=\" + startOffset + \" differs from postings startOffset=\" + postingsStartOffset);\n                          }\n                          if (endOffset != postingsEndOffset) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": endOffset=\" + endOffset + \" differs from postings endOffset=\" + postingsEndOffset);\n                          }\n                        }\n\n                        BytesRef payload = postings.getPayload();\n                        \n                        if (payload != null) {\n                          assert vectorsHasPayload;\n                        }\n                        \n                        if (postingsHasPayload && vectorsHasPayload) {\n                          \n                          if (payload == null) {\n                            // we have payloads, but not at this position. \n                            // postings has payloads too, it should not have one at this position\n                            if (postingsDocs.getPayload() != null) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has no payload but postings does: \" + postingsDocs.getPayload());\n                            }\n                          } else {\n                            // we have payloads, and one at this position\n                            // postings should also have one at this position, with the same bytes.\n                            if (postingsDocs.getPayload() == null) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has payload=\" + payload + \" but postings does not.\");\n                            }\n                            BytesRef postingsPayload = postingsDocs.getPayload();\n                            if (!payload.equals(postingsPayload)) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has payload=\" + payload + \" but differs from postings payload=\" + postingsPayload);\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      float vectorAvg = status.docCount == 0 ? 0 : status.totVectors / (float)status.docCount;\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d total term vector count; avg %.1f term/freq vector fields per doc] [took %.3f sec]\",\n                                    status.totVectors, vectorAvg, nsToSec(System.nanoTime() - startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        throw IOUtils.rethrowAlways(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    \n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test term vectors.\n   * @lucene.experimental\n   */\n  public static Status.TermVectorStatus testTermVectors(CodecReader reader, PrintStream infoStream, boolean verbose, boolean crossCheckTermVectors, boolean failFast, Version version) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.TermVectorStatus status = new Status.TermVectorStatus();\n    final FieldInfos fieldInfos = reader.getFieldInfos();\n    \n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: term vectors........\");\n      }\n\n      PostingsEnum postings = null;\n\n      // Only used if crossCheckTermVectors is true:\n      PostingsEnum postingsDocs = null;\n\n      final Bits liveDocs = reader.getLiveDocs();\n\n      final Fields postingsFields;\n      // TODO: testTermsIndex\n      if (crossCheckTermVectors) {\n        postingsFields = reader.getPostingsReader().getMergeInstance();\n      } else {\n        postingsFields = null;\n      }\n\n      TermVectorsReader vectorsReader = reader.getTermVectorsReader();\n\n      if (vectorsReader != null) {\n        vectorsReader = vectorsReader.getMergeInstance();\n        for (int j = 0; j < reader.maxDoc(); ++j) {\n          // Intentionally pull/visit (but don't count in\n          // stats) deleted documents to make sure they too\n          // are not corrupt:\n          Fields tfv = vectorsReader.get(j);\n          \n          // TODO: can we make a IS(FIR) that searches just\n          // this term vector... to pass for searcher?\n          \n          if (tfv != null) {\n            // First run with no deletions:\n            checkFields(tfv, null, 1, fieldInfos, false, true, infoStream, verbose, version);\n            \n            // Only agg stats if the doc is live:\n            final boolean doStats = liveDocs == null || liveDocs.get(j);\n            \n            if (doStats) {\n              status.docCount++;\n            }\n            \n            for(String field : tfv) {\n              if (doStats) {\n                status.totVectors++;\n              }\n              \n              // Make sure FieldInfo thinks this field is vector'd:\n              final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n              if (!fieldInfo.hasVectors()) {\n                throw new RuntimeException(\"docID=\" + j + \" has term vectors for field=\" + field + \" but FieldInfo has storeTermVector=false\");\n              }\n              \n              if (crossCheckTermVectors) {\n                Terms terms = tfv.terms(field);\n                TermsEnum termsEnum = terms.iterator();\n                final boolean postingsHasFreq = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n                final boolean postingsHasPayload = fieldInfo.hasPayloads();\n                final boolean vectorsHasPayload = terms.hasPayloads();\n                \n                Terms postingsTerms = postingsFields.terms(field);\n                if (postingsTerms == null) {\n                  throw new RuntimeException(\"vector field=\" + field + \" does not exist in postings; doc=\" + j);\n                }\n                TermsEnum postingsTermsEnum = postingsTerms.iterator();\n                \n                final boolean hasProx = terms.hasOffsets() || terms.hasPositions();\n                BytesRef term = null;\n                while ((term = termsEnum.next()) != null) {\n\n                  // This is the term vectors:\n                  postings = termsEnum.postings(postings, PostingsEnum.ALL);\n                  assert postings != null;\n\n                  if (!postingsTermsEnum.seekExact(term)) {\n                    throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" does not exist in postings; doc=\" + j);\n                  }\n\n                  // This is the inverted index (\"real\" postings):\n                  postingsDocs = postingsTermsEnum.postings(postingsDocs, PostingsEnum.ALL);\n                  assert postingsDocs != null;\n\n                  \n                  final int advanceDoc = postingsDocs.advance(j);\n                  if (advanceDoc != j) {\n                    throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \": doc=\" + j + \" was not found in postings (got: \" + advanceDoc + \")\");\n                  }\n                  \n                  final int doc = postings.nextDoc();\n                  \n                  if (doc != 0) {\n                    throw new RuntimeException(\"vector for doc \" + j + \" didn't return docID=0: got docID=\" + doc);\n                  }\n                  \n                  if (postingsHasFreq) {\n                    final int tf = postings.freq();\n                    if (postingsHasFreq && postingsDocs.freq() != tf) {\n                      throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": freq=\" + tf + \" differs from postings freq=\" + postingsDocs.freq());\n                    }\n\n                    // Term vectors has prox?\n                    if (hasProx) {\n                      for (int i = 0; i < tf; i++) {\n                        int pos = postings.nextPosition();\n                        if (postingsTerms.hasPositions()) {\n                          int postingsPos = postingsDocs.nextPosition();\n                          if (terms.hasPositions() && pos != postingsPos) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": pos=\" + pos + \" differs from postings pos=\" + postingsPos);\n                          }\n                        }\n                        \n                        // Call the methods to at least make\n                        // sure they don't throw exc:\n                        final int startOffset = postings.startOffset();\n                        final int endOffset = postings.endOffset();\n                        // TODO: these are too anal...?\n                        /*\n                        if (endOffset < startOffset) {\n                        throw new RuntimeException(\"vector startOffset=\" + startOffset + \" is > endOffset=\" + endOffset);\n                        }\n                        if (startOffset < lastStartOffset) {\n                        throw new RuntimeException(\"vector startOffset=\" + startOffset + \" is < prior startOffset=\" + lastStartOffset);\n                        }\n                        lastStartOffset = startOffset;\n                         */\n\n                        if (startOffset != -1 && endOffset != -1 && postingsTerms.hasOffsets()) {\n                          int postingsStartOffset = postingsDocs.startOffset();\n                          int postingsEndOffset = postingsDocs.endOffset();\n                          if (startOffset != postingsStartOffset) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": startOffset=\" + startOffset + \" differs from postings startOffset=\" + postingsStartOffset);\n                          }\n                          if (endOffset != postingsEndOffset) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": endOffset=\" + endOffset + \" differs from postings endOffset=\" + postingsEndOffset);\n                          }\n                        }\n\n                        BytesRef payload = postings.getPayload();\n                        \n                        if (payload != null) {\n                          assert vectorsHasPayload;\n                        }\n                        \n                        if (postingsHasPayload && vectorsHasPayload) {\n                          \n                          if (payload == null) {\n                            // we have payloads, but not at this position. \n                            // postings has payloads too, it should not have one at this position\n                            if (postingsDocs.getPayload() != null) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has no payload but postings does: \" + postingsDocs.getPayload());\n                            }\n                          } else {\n                            // we have payloads, and one at this position\n                            // postings should also have one at this position, with the same bytes.\n                            if (postingsDocs.getPayload() == null) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has payload=\" + payload + \" but postings does not.\");\n                            }\n                            BytesRef postingsPayload = postingsDocs.getPayload();\n                            if (!payload.equals(postingsPayload)) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has payload=\" + payload + \" but differs from postings payload=\" + postingsPayload);\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      float vectorAvg = status.docCount == 0 ? 0 : status.totVectors / (float)status.docCount;\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d total term vector count; avg %.1f term/freq vector fields per doc] [took %.3f sec]\",\n                                    status.totVectors, vectorAvg, nsToSec(System.nanoTime() - startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        throw IOUtils.rethrowAlways(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    \n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testTermVectors(CodecReader,PrintStream,boolean,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test term vectors.\n   * @lucene.experimental\n   */\n  public static Status.TermVectorStatus testTermVectors(CodecReader reader, PrintStream infoStream, boolean verbose, boolean crossCheckTermVectors, boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.TermVectorStatus status = new Status.TermVectorStatus();\n    final FieldInfos fieldInfos = reader.getFieldInfos();\n    \n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: term vectors........\");\n      }\n\n      PostingsEnum postings = null;\n\n      // Only used if crossCheckTermVectors is true:\n      PostingsEnum postingsDocs = null;\n\n      final Bits liveDocs = reader.getLiveDocs();\n\n      final Fields postingsFields;\n      // TODO: testTermsIndex\n      if (crossCheckTermVectors) {\n        postingsFields = reader.getPostingsReader().getMergeInstance();\n      } else {\n        postingsFields = null;\n      }\n\n      TermVectorsReader vectorsReader = reader.getTermVectorsReader();\n\n      if (vectorsReader != null) {\n        vectorsReader = vectorsReader.getMergeInstance();\n        for (int j = 0; j < reader.maxDoc(); ++j) {\n          // Intentionally pull/visit (but don't count in\n          // stats) deleted documents to make sure they too\n          // are not corrupt:\n          Fields tfv = vectorsReader.get(j);\n          \n          // TODO: can we make a IS(FIR) that searches just\n          // this term vector... to pass for searcher?\n          \n          if (tfv != null) {\n            // First run with no deletions:\n            checkFields(tfv, null, 1, fieldInfos, false, true, infoStream, verbose);\n            \n            // Only agg stats if the doc is live:\n            final boolean doStats = liveDocs == null || liveDocs.get(j);\n            \n            if (doStats) {\n              status.docCount++;\n            }\n            \n            for(String field : tfv) {\n              if (doStats) {\n                status.totVectors++;\n              }\n              \n              // Make sure FieldInfo thinks this field is vector'd:\n              final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n              if (!fieldInfo.hasVectors()) {\n                throw new RuntimeException(\"docID=\" + j + \" has term vectors for field=\" + field + \" but FieldInfo has storeTermVector=false\");\n              }\n              \n              if (crossCheckTermVectors) {\n                Terms terms = tfv.terms(field);\n                TermsEnum termsEnum = terms.iterator();\n                final boolean postingsHasFreq = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n                final boolean postingsHasPayload = fieldInfo.hasPayloads();\n                final boolean vectorsHasPayload = terms.hasPayloads();\n                \n                Terms postingsTerms = postingsFields.terms(field);\n                if (postingsTerms == null) {\n                  throw new RuntimeException(\"vector field=\" + field + \" does not exist in postings; doc=\" + j);\n                }\n                TermsEnum postingsTermsEnum = postingsTerms.iterator();\n                \n                final boolean hasProx = terms.hasOffsets() || terms.hasPositions();\n                BytesRef term = null;\n                while ((term = termsEnum.next()) != null) {\n\n                  // This is the term vectors:\n                  postings = termsEnum.postings(postings, PostingsEnum.ALL);\n                  assert postings != null;\n\n                  if (!postingsTermsEnum.seekExact(term)) {\n                    throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" does not exist in postings; doc=\" + j);\n                  }\n\n                  // This is the inverted index (\"real\" postings):\n                  postingsDocs = postingsTermsEnum.postings(postingsDocs, PostingsEnum.ALL);\n                  assert postingsDocs != null;\n\n                  \n                  final int advanceDoc = postingsDocs.advance(j);\n                  if (advanceDoc != j) {\n                    throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \": doc=\" + j + \" was not found in postings (got: \" + advanceDoc + \")\");\n                  }\n                  \n                  final int doc = postings.nextDoc();\n                  \n                  if (doc != 0) {\n                    throw new RuntimeException(\"vector for doc \" + j + \" didn't return docID=0: got docID=\" + doc);\n                  }\n                  \n                  if (postingsHasFreq) {\n                    final int tf = postings.freq();\n                    if (postingsHasFreq && postingsDocs.freq() != tf) {\n                      throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": freq=\" + tf + \" differs from postings freq=\" + postingsDocs.freq());\n                    }\n\n                    // Term vectors has prox?\n                    if (hasProx) {\n                      for (int i = 0; i < tf; i++) {\n                        int pos = postings.nextPosition();\n                        if (postingsTerms.hasPositions()) {\n                          int postingsPos = postingsDocs.nextPosition();\n                          if (terms.hasPositions() && pos != postingsPos) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": pos=\" + pos + \" differs from postings pos=\" + postingsPos);\n                          }\n                        }\n                        \n                        // Call the methods to at least make\n                        // sure they don't throw exc:\n                        final int startOffset = postings.startOffset();\n                        final int endOffset = postings.endOffset();\n                        // TODO: these are too anal...?\n                        /*\n                        if (endOffset < startOffset) {\n                        throw new RuntimeException(\"vector startOffset=\" + startOffset + \" is > endOffset=\" + endOffset);\n                        }\n                        if (startOffset < lastStartOffset) {\n                        throw new RuntimeException(\"vector startOffset=\" + startOffset + \" is < prior startOffset=\" + lastStartOffset);\n                        }\n                        lastStartOffset = startOffset;\n                         */\n\n                        if (startOffset != -1 && endOffset != -1 && postingsTerms.hasOffsets()) {\n                          int postingsStartOffset = postingsDocs.startOffset();\n                          int postingsEndOffset = postingsDocs.endOffset();\n                          if (startOffset != postingsStartOffset) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": startOffset=\" + startOffset + \" differs from postings startOffset=\" + postingsStartOffset);\n                          }\n                          if (endOffset != postingsEndOffset) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": endOffset=\" + endOffset + \" differs from postings endOffset=\" + postingsEndOffset);\n                          }\n                        }\n\n                        BytesRef payload = postings.getPayload();\n                        \n                        if (payload != null) {\n                          assert vectorsHasPayload;\n                        }\n                        \n                        if (postingsHasPayload && vectorsHasPayload) {\n                          \n                          if (payload == null) {\n                            // we have payloads, but not at this position. \n                            // postings has payloads too, it should not have one at this position\n                            if (postingsDocs.getPayload() != null) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has no payload but postings does: \" + postingsDocs.getPayload());\n                            }\n                          } else {\n                            // we have payloads, and one at this position\n                            // postings should also have one at this position, with the same bytes.\n                            if (postingsDocs.getPayload() == null) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has payload=\" + payload + \" but postings does not.\");\n                            }\n                            BytesRef postingsPayload = postingsDocs.getPayload();\n                            if (!payload.equals(postingsPayload)) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has payload=\" + payload + \" but differs from postings payload=\" + postingsPayload);\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      float vectorAvg = status.docCount == 0 ? 0 : status.totVectors / (float)status.docCount;\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d total term vector count; avg %.1f term/freq vector fields per doc] [took %.3f sec]\",\n                                    status.totVectors, vectorAvg, nsToSec(System.nanoTime() - startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        throw IOUtils.rethrowAlways(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    \n    return status;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a0e5953a07337cd41bcde610503024c07073b26","date":1519143251,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testTermVectors(CodecReader,PrintStream,boolean,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testTermVectors(CodecReader,PrintStream,boolean,boolean,boolean).mjava","sourceNew":"  /**\n   * Test term vectors.\n   * @lucene.experimental\n   */\n  public static Status.TermVectorStatus testTermVectors(CodecReader reader, PrintStream infoStream, boolean verbose, boolean doSlowChecks, boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.TermVectorStatus status = new Status.TermVectorStatus();\n    final FieldInfos fieldInfos = reader.getFieldInfos();\n    \n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: term vectors........\");\n      }\n\n      PostingsEnum postings = null;\n\n      // Only used if doSlowChecks is true:\n      PostingsEnum postingsDocs = null;\n\n      final Bits liveDocs = reader.getLiveDocs();\n\n      final Fields postingsFields;\n      // TODO: testTermsIndex\n      if (doSlowChecks) {\n        postingsFields = reader.getPostingsReader().getMergeInstance();\n      } else {\n        postingsFields = null;\n      }\n\n      TermVectorsReader vectorsReader = reader.getTermVectorsReader();\n\n      if (vectorsReader != null) {\n        vectorsReader = vectorsReader.getMergeInstance();\n        for (int j = 0; j < reader.maxDoc(); ++j) {\n          // Intentionally pull/visit (but don't count in\n          // stats) deleted documents to make sure they too\n          // are not corrupt:\n          Fields tfv = vectorsReader.get(j);\n          \n          // TODO: can we make a IS(FIR) that searches just\n          // this term vector... to pass for searcher?\n          \n          if (tfv != null) {\n            // First run with no deletions:\n            checkFields(tfv, null, 1, fieldInfos, false, true, infoStream, verbose, doSlowChecks);\n            \n            // Only agg stats if the doc is live:\n            final boolean doStats = liveDocs == null || liveDocs.get(j);\n            \n            if (doStats) {\n              status.docCount++;\n            }\n            \n            for(String field : tfv) {\n              if (doStats) {\n                status.totVectors++;\n              }\n              \n              // Make sure FieldInfo thinks this field is vector'd:\n              final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n              if (!fieldInfo.hasVectors()) {\n                throw new RuntimeException(\"docID=\" + j + \" has term vectors for field=\" + field + \" but FieldInfo has storeTermVector=false\");\n              }\n              \n              if (doSlowChecks) {\n                Terms terms = tfv.terms(field);\n                TermsEnum termsEnum = terms.iterator();\n                final boolean postingsHasFreq = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n                final boolean postingsHasPayload = fieldInfo.hasPayloads();\n                final boolean vectorsHasPayload = terms.hasPayloads();\n                \n                Terms postingsTerms = postingsFields.terms(field);\n                if (postingsTerms == null) {\n                  throw new RuntimeException(\"vector field=\" + field + \" does not exist in postings; doc=\" + j);\n                }\n                TermsEnum postingsTermsEnum = postingsTerms.iterator();\n                \n                final boolean hasProx = terms.hasOffsets() || terms.hasPositions();\n                BytesRef term = null;\n                while ((term = termsEnum.next()) != null) {\n\n                  // This is the term vectors:\n                  postings = termsEnum.postings(postings, PostingsEnum.ALL);\n                  assert postings != null;\n\n                  if (!postingsTermsEnum.seekExact(term)) {\n                    throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" does not exist in postings; doc=\" + j);\n                  }\n\n                  // This is the inverted index (\"real\" postings):\n                  postingsDocs = postingsTermsEnum.postings(postingsDocs, PostingsEnum.ALL);\n                  assert postingsDocs != null;\n\n                  \n                  final int advanceDoc = postingsDocs.advance(j);\n                  if (advanceDoc != j) {\n                    throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \": doc=\" + j + \" was not found in postings (got: \" + advanceDoc + \")\");\n                  }\n                  \n                  final int doc = postings.nextDoc();\n                  \n                  if (doc != 0) {\n                    throw new RuntimeException(\"vector for doc \" + j + \" didn't return docID=0: got docID=\" + doc);\n                  }\n                  \n                  if (postingsHasFreq) {\n                    final int tf = postings.freq();\n                    if (postingsHasFreq && postingsDocs.freq() != tf) {\n                      throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": freq=\" + tf + \" differs from postings freq=\" + postingsDocs.freq());\n                    }\n\n                    // Term vectors has prox?\n                    if (hasProx) {\n                      for (int i = 0; i < tf; i++) {\n                        int pos = postings.nextPosition();\n                        if (postingsTerms.hasPositions()) {\n                          int postingsPos = postingsDocs.nextPosition();\n                          if (terms.hasPositions() && pos != postingsPos) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": pos=\" + pos + \" differs from postings pos=\" + postingsPos);\n                          }\n                        }\n                        \n                        // Call the methods to at least make\n                        // sure they don't throw exc:\n                        final int startOffset = postings.startOffset();\n                        final int endOffset = postings.endOffset();\n                        // TODO: these are too anal...?\n                        /*\n                        if (endOffset < startOffset) {\n                        throw new RuntimeException(\"vector startOffset=\" + startOffset + \" is > endOffset=\" + endOffset);\n                        }\n                        if (startOffset < lastStartOffset) {\n                        throw new RuntimeException(\"vector startOffset=\" + startOffset + \" is < prior startOffset=\" + lastStartOffset);\n                        }\n                        lastStartOffset = startOffset;\n                         */\n\n                        if (startOffset != -1 && endOffset != -1 && postingsTerms.hasOffsets()) {\n                          int postingsStartOffset = postingsDocs.startOffset();\n                          int postingsEndOffset = postingsDocs.endOffset();\n                          if (startOffset != postingsStartOffset) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": startOffset=\" + startOffset + \" differs from postings startOffset=\" + postingsStartOffset);\n                          }\n                          if (endOffset != postingsEndOffset) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": endOffset=\" + endOffset + \" differs from postings endOffset=\" + postingsEndOffset);\n                          }\n                        }\n\n                        BytesRef payload = postings.getPayload();\n                        \n                        if (payload != null) {\n                          assert vectorsHasPayload;\n                        }\n                        \n                        if (postingsHasPayload && vectorsHasPayload) {\n                          \n                          if (payload == null) {\n                            // we have payloads, but not at this position. \n                            // postings has payloads too, it should not have one at this position\n                            if (postingsDocs.getPayload() != null) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has no payload but postings does: \" + postingsDocs.getPayload());\n                            }\n                          } else {\n                            // we have payloads, and one at this position\n                            // postings should also have one at this position, with the same bytes.\n                            if (postingsDocs.getPayload() == null) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has payload=\" + payload + \" but postings does not.\");\n                            }\n                            BytesRef postingsPayload = postingsDocs.getPayload();\n                            if (!payload.equals(postingsPayload)) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has payload=\" + payload + \" but differs from postings payload=\" + postingsPayload);\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      float vectorAvg = status.docCount == 0 ? 0 : status.totVectors / (float)status.docCount;\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d total term vector count; avg %.1f term/freq vector fields per doc] [took %.3f sec]\",\n                                    status.totVectors, vectorAvg, nsToSec(System.nanoTime() - startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        throw IOUtils.rethrowAlways(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    \n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test term vectors.\n   * @lucene.experimental\n   */\n  public static Status.TermVectorStatus testTermVectors(CodecReader reader, PrintStream infoStream, boolean verbose, boolean crossCheckTermVectors, boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.TermVectorStatus status = new Status.TermVectorStatus();\n    final FieldInfos fieldInfos = reader.getFieldInfos();\n    \n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: term vectors........\");\n      }\n\n      PostingsEnum postings = null;\n\n      // Only used if crossCheckTermVectors is true:\n      PostingsEnum postingsDocs = null;\n\n      final Bits liveDocs = reader.getLiveDocs();\n\n      final Fields postingsFields;\n      // TODO: testTermsIndex\n      if (crossCheckTermVectors) {\n        postingsFields = reader.getPostingsReader().getMergeInstance();\n      } else {\n        postingsFields = null;\n      }\n\n      TermVectorsReader vectorsReader = reader.getTermVectorsReader();\n\n      if (vectorsReader != null) {\n        vectorsReader = vectorsReader.getMergeInstance();\n        for (int j = 0; j < reader.maxDoc(); ++j) {\n          // Intentionally pull/visit (but don't count in\n          // stats) deleted documents to make sure they too\n          // are not corrupt:\n          Fields tfv = vectorsReader.get(j);\n          \n          // TODO: can we make a IS(FIR) that searches just\n          // this term vector... to pass for searcher?\n          \n          if (tfv != null) {\n            // First run with no deletions:\n            checkFields(tfv, null, 1, fieldInfos, false, true, infoStream, verbose);\n            \n            // Only agg stats if the doc is live:\n            final boolean doStats = liveDocs == null || liveDocs.get(j);\n            \n            if (doStats) {\n              status.docCount++;\n            }\n            \n            for(String field : tfv) {\n              if (doStats) {\n                status.totVectors++;\n              }\n              \n              // Make sure FieldInfo thinks this field is vector'd:\n              final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n              if (!fieldInfo.hasVectors()) {\n                throw new RuntimeException(\"docID=\" + j + \" has term vectors for field=\" + field + \" but FieldInfo has storeTermVector=false\");\n              }\n              \n              if (crossCheckTermVectors) {\n                Terms terms = tfv.terms(field);\n                TermsEnum termsEnum = terms.iterator();\n                final boolean postingsHasFreq = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n                final boolean postingsHasPayload = fieldInfo.hasPayloads();\n                final boolean vectorsHasPayload = terms.hasPayloads();\n                \n                Terms postingsTerms = postingsFields.terms(field);\n                if (postingsTerms == null) {\n                  throw new RuntimeException(\"vector field=\" + field + \" does not exist in postings; doc=\" + j);\n                }\n                TermsEnum postingsTermsEnum = postingsTerms.iterator();\n                \n                final boolean hasProx = terms.hasOffsets() || terms.hasPositions();\n                BytesRef term = null;\n                while ((term = termsEnum.next()) != null) {\n\n                  // This is the term vectors:\n                  postings = termsEnum.postings(postings, PostingsEnum.ALL);\n                  assert postings != null;\n\n                  if (!postingsTermsEnum.seekExact(term)) {\n                    throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" does not exist in postings; doc=\" + j);\n                  }\n\n                  // This is the inverted index (\"real\" postings):\n                  postingsDocs = postingsTermsEnum.postings(postingsDocs, PostingsEnum.ALL);\n                  assert postingsDocs != null;\n\n                  \n                  final int advanceDoc = postingsDocs.advance(j);\n                  if (advanceDoc != j) {\n                    throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \": doc=\" + j + \" was not found in postings (got: \" + advanceDoc + \")\");\n                  }\n                  \n                  final int doc = postings.nextDoc();\n                  \n                  if (doc != 0) {\n                    throw new RuntimeException(\"vector for doc \" + j + \" didn't return docID=0: got docID=\" + doc);\n                  }\n                  \n                  if (postingsHasFreq) {\n                    final int tf = postings.freq();\n                    if (postingsHasFreq && postingsDocs.freq() != tf) {\n                      throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": freq=\" + tf + \" differs from postings freq=\" + postingsDocs.freq());\n                    }\n\n                    // Term vectors has prox?\n                    if (hasProx) {\n                      for (int i = 0; i < tf; i++) {\n                        int pos = postings.nextPosition();\n                        if (postingsTerms.hasPositions()) {\n                          int postingsPos = postingsDocs.nextPosition();\n                          if (terms.hasPositions() && pos != postingsPos) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": pos=\" + pos + \" differs from postings pos=\" + postingsPos);\n                          }\n                        }\n                        \n                        // Call the methods to at least make\n                        // sure they don't throw exc:\n                        final int startOffset = postings.startOffset();\n                        final int endOffset = postings.endOffset();\n                        // TODO: these are too anal...?\n                        /*\n                        if (endOffset < startOffset) {\n                        throw new RuntimeException(\"vector startOffset=\" + startOffset + \" is > endOffset=\" + endOffset);\n                        }\n                        if (startOffset < lastStartOffset) {\n                        throw new RuntimeException(\"vector startOffset=\" + startOffset + \" is < prior startOffset=\" + lastStartOffset);\n                        }\n                        lastStartOffset = startOffset;\n                         */\n\n                        if (startOffset != -1 && endOffset != -1 && postingsTerms.hasOffsets()) {\n                          int postingsStartOffset = postingsDocs.startOffset();\n                          int postingsEndOffset = postingsDocs.endOffset();\n                          if (startOffset != postingsStartOffset) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": startOffset=\" + startOffset + \" differs from postings startOffset=\" + postingsStartOffset);\n                          }\n                          if (endOffset != postingsEndOffset) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": endOffset=\" + endOffset + \" differs from postings endOffset=\" + postingsEndOffset);\n                          }\n                        }\n\n                        BytesRef payload = postings.getPayload();\n                        \n                        if (payload != null) {\n                          assert vectorsHasPayload;\n                        }\n                        \n                        if (postingsHasPayload && vectorsHasPayload) {\n                          \n                          if (payload == null) {\n                            // we have payloads, but not at this position. \n                            // postings has payloads too, it should not have one at this position\n                            if (postingsDocs.getPayload() != null) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has no payload but postings does: \" + postingsDocs.getPayload());\n                            }\n                          } else {\n                            // we have payloads, and one at this position\n                            // postings should also have one at this position, with the same bytes.\n                            if (postingsDocs.getPayload() == null) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has payload=\" + payload + \" but postings does not.\");\n                            }\n                            BytesRef postingsPayload = postingsDocs.getPayload();\n                            if (!payload.equals(postingsPayload)) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has payload=\" + payload + \" but differs from postings payload=\" + postingsPayload);\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      float vectorAvg = status.docCount == 0 ? 0 : status.totVectors / (float)status.docCount;\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d total term vector count; avg %.1f term/freq vector fields per doc] [took %.3f sec]\",\n                                    status.totVectors, vectorAvg, nsToSec(System.nanoTime() - startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        throw IOUtils.rethrowAlways(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    \n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"071935ce120b55517dcd86b9f985dbda028ba94e","date":1525265372,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testTermVectors(CodecReader,PrintStream,boolean,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testTermVectors(CodecReader,PrintStream,boolean,boolean,boolean).mjava","sourceNew":"  /**\n   * Test term vectors.\n   * @lucene.experimental\n   */\n  public static Status.TermVectorStatus testTermVectors(CodecReader reader, PrintStream infoStream, boolean verbose, boolean doSlowChecks, boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.TermVectorStatus status = new Status.TermVectorStatus();\n    final FieldInfos fieldInfos = reader.getFieldInfos();\n    \n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: term vectors........\");\n      }\n\n      PostingsEnum postings = null;\n\n      // Only used if doSlowChecks is true:\n      PostingsEnum postingsDocs = null;\n\n      final Bits liveDocs = reader.getLiveDocs();\n\n      final Fields postingsFields;\n      // TODO: testTermsIndex\n      if (doSlowChecks) {\n        postingsFields = reader.getPostingsReader().getMergeInstance();\n      } else {\n        postingsFields = null;\n      }\n\n      TermVectorsReader vectorsReader = reader.getTermVectorsReader();\n\n      if (vectorsReader != null) {\n        vectorsReader = vectorsReader.getMergeInstance();\n        for (int j = 0; j < reader.maxDoc(); ++j) {\n          // Intentionally pull/visit (but don't count in\n          // stats) deleted documents to make sure they too\n          // are not corrupt:\n          Fields tfv = vectorsReader.get(j);\n          \n          // TODO: can we make a IS(FIR) that searches just\n          // this term vector... to pass for searcher?\n          \n          if (tfv != null) {\n            // First run with no deletions:\n            checkFields(tfv, null, 1, fieldInfos, null, false, true, infoStream, verbose, doSlowChecks);\n            \n            // Only agg stats if the doc is live:\n            final boolean doStats = liveDocs == null || liveDocs.get(j);\n            \n            if (doStats) {\n              status.docCount++;\n            }\n            \n            for(String field : tfv) {\n              if (doStats) {\n                status.totVectors++;\n              }\n              \n              // Make sure FieldInfo thinks this field is vector'd:\n              final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n              if (!fieldInfo.hasVectors()) {\n                throw new RuntimeException(\"docID=\" + j + \" has term vectors for field=\" + field + \" but FieldInfo has storeTermVector=false\");\n              }\n              \n              if (doSlowChecks) {\n                Terms terms = tfv.terms(field);\n                TermsEnum termsEnum = terms.iterator();\n                final boolean postingsHasFreq = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n                final boolean postingsHasPayload = fieldInfo.hasPayloads();\n                final boolean vectorsHasPayload = terms.hasPayloads();\n                \n                Terms postingsTerms = postingsFields.terms(field);\n                if (postingsTerms == null) {\n                  throw new RuntimeException(\"vector field=\" + field + \" does not exist in postings; doc=\" + j);\n                }\n                TermsEnum postingsTermsEnum = postingsTerms.iterator();\n                \n                final boolean hasProx = terms.hasOffsets() || terms.hasPositions();\n                BytesRef term = null;\n                while ((term = termsEnum.next()) != null) {\n\n                  // This is the term vectors:\n                  postings = termsEnum.postings(postings, PostingsEnum.ALL);\n                  assert postings != null;\n\n                  if (!postingsTermsEnum.seekExact(term)) {\n                    throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" does not exist in postings; doc=\" + j);\n                  }\n\n                  // This is the inverted index (\"real\" postings):\n                  postingsDocs = postingsTermsEnum.postings(postingsDocs, PostingsEnum.ALL);\n                  assert postingsDocs != null;\n\n                  \n                  final int advanceDoc = postingsDocs.advance(j);\n                  if (advanceDoc != j) {\n                    throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \": doc=\" + j + \" was not found in postings (got: \" + advanceDoc + \")\");\n                  }\n                  \n                  final int doc = postings.nextDoc();\n                  \n                  if (doc != 0) {\n                    throw new RuntimeException(\"vector for doc \" + j + \" didn't return docID=0: got docID=\" + doc);\n                  }\n                  \n                  if (postingsHasFreq) {\n                    final int tf = postings.freq();\n                    if (postingsHasFreq && postingsDocs.freq() != tf) {\n                      throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": freq=\" + tf + \" differs from postings freq=\" + postingsDocs.freq());\n                    }\n\n                    // Term vectors has prox?\n                    if (hasProx) {\n                      for (int i = 0; i < tf; i++) {\n                        int pos = postings.nextPosition();\n                        if (postingsTerms.hasPositions()) {\n                          int postingsPos = postingsDocs.nextPosition();\n                          if (terms.hasPositions() && pos != postingsPos) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": pos=\" + pos + \" differs from postings pos=\" + postingsPos);\n                          }\n                        }\n                        \n                        // Call the methods to at least make\n                        // sure they don't throw exc:\n                        final int startOffset = postings.startOffset();\n                        final int endOffset = postings.endOffset();\n                        // TODO: these are too anal...?\n                        /*\n                        if (endOffset < startOffset) {\n                        throw new RuntimeException(\"vector startOffset=\" + startOffset + \" is > endOffset=\" + endOffset);\n                        }\n                        if (startOffset < lastStartOffset) {\n                        throw new RuntimeException(\"vector startOffset=\" + startOffset + \" is < prior startOffset=\" + lastStartOffset);\n                        }\n                        lastStartOffset = startOffset;\n                         */\n\n                        if (startOffset != -1 && endOffset != -1 && postingsTerms.hasOffsets()) {\n                          int postingsStartOffset = postingsDocs.startOffset();\n                          int postingsEndOffset = postingsDocs.endOffset();\n                          if (startOffset != postingsStartOffset) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": startOffset=\" + startOffset + \" differs from postings startOffset=\" + postingsStartOffset);\n                          }\n                          if (endOffset != postingsEndOffset) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": endOffset=\" + endOffset + \" differs from postings endOffset=\" + postingsEndOffset);\n                          }\n                        }\n\n                        BytesRef payload = postings.getPayload();\n                        \n                        if (payload != null) {\n                          assert vectorsHasPayload;\n                        }\n                        \n                        if (postingsHasPayload && vectorsHasPayload) {\n                          \n                          if (payload == null) {\n                            // we have payloads, but not at this position. \n                            // postings has payloads too, it should not have one at this position\n                            if (postingsDocs.getPayload() != null) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has no payload but postings does: \" + postingsDocs.getPayload());\n                            }\n                          } else {\n                            // we have payloads, and one at this position\n                            // postings should also have one at this position, with the same bytes.\n                            if (postingsDocs.getPayload() == null) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has payload=\" + payload + \" but postings does not.\");\n                            }\n                            BytesRef postingsPayload = postingsDocs.getPayload();\n                            if (!payload.equals(postingsPayload)) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has payload=\" + payload + \" but differs from postings payload=\" + postingsPayload);\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      float vectorAvg = status.docCount == 0 ? 0 : status.totVectors / (float)status.docCount;\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d total term vector count; avg %.1f term/freq vector fields per doc] [took %.3f sec]\",\n                                    status.totVectors, vectorAvg, nsToSec(System.nanoTime() - startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        throw IOUtils.rethrowAlways(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    \n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test term vectors.\n   * @lucene.experimental\n   */\n  public static Status.TermVectorStatus testTermVectors(CodecReader reader, PrintStream infoStream, boolean verbose, boolean doSlowChecks, boolean failFast) throws IOException {\n    long startNS = System.nanoTime();\n    final Status.TermVectorStatus status = new Status.TermVectorStatus();\n    final FieldInfos fieldInfos = reader.getFieldInfos();\n    \n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: term vectors........\");\n      }\n\n      PostingsEnum postings = null;\n\n      // Only used if doSlowChecks is true:\n      PostingsEnum postingsDocs = null;\n\n      final Bits liveDocs = reader.getLiveDocs();\n\n      final Fields postingsFields;\n      // TODO: testTermsIndex\n      if (doSlowChecks) {\n        postingsFields = reader.getPostingsReader().getMergeInstance();\n      } else {\n        postingsFields = null;\n      }\n\n      TermVectorsReader vectorsReader = reader.getTermVectorsReader();\n\n      if (vectorsReader != null) {\n        vectorsReader = vectorsReader.getMergeInstance();\n        for (int j = 0; j < reader.maxDoc(); ++j) {\n          // Intentionally pull/visit (but don't count in\n          // stats) deleted documents to make sure they too\n          // are not corrupt:\n          Fields tfv = vectorsReader.get(j);\n          \n          // TODO: can we make a IS(FIR) that searches just\n          // this term vector... to pass for searcher?\n          \n          if (tfv != null) {\n            // First run with no deletions:\n            checkFields(tfv, null, 1, fieldInfos, false, true, infoStream, verbose, doSlowChecks);\n            \n            // Only agg stats if the doc is live:\n            final boolean doStats = liveDocs == null || liveDocs.get(j);\n            \n            if (doStats) {\n              status.docCount++;\n            }\n            \n            for(String field : tfv) {\n              if (doStats) {\n                status.totVectors++;\n              }\n              \n              // Make sure FieldInfo thinks this field is vector'd:\n              final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n              if (!fieldInfo.hasVectors()) {\n                throw new RuntimeException(\"docID=\" + j + \" has term vectors for field=\" + field + \" but FieldInfo has storeTermVector=false\");\n              }\n              \n              if (doSlowChecks) {\n                Terms terms = tfv.terms(field);\n                TermsEnum termsEnum = terms.iterator();\n                final boolean postingsHasFreq = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n                final boolean postingsHasPayload = fieldInfo.hasPayloads();\n                final boolean vectorsHasPayload = terms.hasPayloads();\n                \n                Terms postingsTerms = postingsFields.terms(field);\n                if (postingsTerms == null) {\n                  throw new RuntimeException(\"vector field=\" + field + \" does not exist in postings; doc=\" + j);\n                }\n                TermsEnum postingsTermsEnum = postingsTerms.iterator();\n                \n                final boolean hasProx = terms.hasOffsets() || terms.hasPositions();\n                BytesRef term = null;\n                while ((term = termsEnum.next()) != null) {\n\n                  // This is the term vectors:\n                  postings = termsEnum.postings(postings, PostingsEnum.ALL);\n                  assert postings != null;\n\n                  if (!postingsTermsEnum.seekExact(term)) {\n                    throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" does not exist in postings; doc=\" + j);\n                  }\n\n                  // This is the inverted index (\"real\" postings):\n                  postingsDocs = postingsTermsEnum.postings(postingsDocs, PostingsEnum.ALL);\n                  assert postingsDocs != null;\n\n                  \n                  final int advanceDoc = postingsDocs.advance(j);\n                  if (advanceDoc != j) {\n                    throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \": doc=\" + j + \" was not found in postings (got: \" + advanceDoc + \")\");\n                  }\n                  \n                  final int doc = postings.nextDoc();\n                  \n                  if (doc != 0) {\n                    throw new RuntimeException(\"vector for doc \" + j + \" didn't return docID=0: got docID=\" + doc);\n                  }\n                  \n                  if (postingsHasFreq) {\n                    final int tf = postings.freq();\n                    if (postingsHasFreq && postingsDocs.freq() != tf) {\n                      throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": freq=\" + tf + \" differs from postings freq=\" + postingsDocs.freq());\n                    }\n\n                    // Term vectors has prox?\n                    if (hasProx) {\n                      for (int i = 0; i < tf; i++) {\n                        int pos = postings.nextPosition();\n                        if (postingsTerms.hasPositions()) {\n                          int postingsPos = postingsDocs.nextPosition();\n                          if (terms.hasPositions() && pos != postingsPos) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": pos=\" + pos + \" differs from postings pos=\" + postingsPos);\n                          }\n                        }\n                        \n                        // Call the methods to at least make\n                        // sure they don't throw exc:\n                        final int startOffset = postings.startOffset();\n                        final int endOffset = postings.endOffset();\n                        // TODO: these are too anal...?\n                        /*\n                        if (endOffset < startOffset) {\n                        throw new RuntimeException(\"vector startOffset=\" + startOffset + \" is > endOffset=\" + endOffset);\n                        }\n                        if (startOffset < lastStartOffset) {\n                        throw new RuntimeException(\"vector startOffset=\" + startOffset + \" is < prior startOffset=\" + lastStartOffset);\n                        }\n                        lastStartOffset = startOffset;\n                         */\n\n                        if (startOffset != -1 && endOffset != -1 && postingsTerms.hasOffsets()) {\n                          int postingsStartOffset = postingsDocs.startOffset();\n                          int postingsEndOffset = postingsDocs.endOffset();\n                          if (startOffset != postingsStartOffset) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": startOffset=\" + startOffset + \" differs from postings startOffset=\" + postingsStartOffset);\n                          }\n                          if (endOffset != postingsEndOffset) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": endOffset=\" + endOffset + \" differs from postings endOffset=\" + postingsEndOffset);\n                          }\n                        }\n\n                        BytesRef payload = postings.getPayload();\n                        \n                        if (payload != null) {\n                          assert vectorsHasPayload;\n                        }\n                        \n                        if (postingsHasPayload && vectorsHasPayload) {\n                          \n                          if (payload == null) {\n                            // we have payloads, but not at this position. \n                            // postings has payloads too, it should not have one at this position\n                            if (postingsDocs.getPayload() != null) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has no payload but postings does: \" + postingsDocs.getPayload());\n                            }\n                          } else {\n                            // we have payloads, and one at this position\n                            // postings should also have one at this position, with the same bytes.\n                            if (postingsDocs.getPayload() == null) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has payload=\" + payload + \" but postings does not.\");\n                            }\n                            BytesRef postingsPayload = postingsDocs.getPayload();\n                            if (!payload.equals(postingsPayload)) {\n                              throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has payload=\" + payload + \" but differs from postings payload=\" + postingsPayload);\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      float vectorAvg = status.docCount == 0 ? 0 : status.totVectors / (float)status.docCount;\n      msg(infoStream, String.format(Locale.ROOT, \"OK [%d total term vector count; avg %.1f term/freq vector fields per doc] [took %.3f sec]\",\n                                    status.totVectors, vectorAvg, nsToSec(System.nanoTime() - startNS)));\n    } catch (Throwable e) {\n      if (failFast) {\n        throw IOUtils.rethrowAlways(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    \n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["6b4e3cd382d0d075a0f1725649c084bb6510c483"],"3ed71f1a1881e9cb41ad3a1a7d5bff22021f1b6d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"071935ce120b55517dcd86b9f985dbda028ba94e":["9a0e5953a07337cd41bcde610503024c07073b26"],"30c8e5574b55d57947e989443dfde611646530ee":["762c80e29fe0c3bb83aabe2e64af6379273cec7b","cc018b79379c67835b40b1259cd3dc931df60944"],"507e7decdf00981d09a74632ea30299a4ce6ba72":["0f4464508ee83288c8c4585b533f9faaa93aa314","762c80e29fe0c3bb83aabe2e64af6379273cec7b"],"cd7538cbbd9c304bc5396980e9802cd3a5bcf8e4":["762c80e29fe0c3bb83aabe2e64af6379273cec7b"],"8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"762c80e29fe0c3bb83aabe2e64af6379273cec7b":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"6b4e3cd382d0d075a0f1725649c084bb6510c483":["8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6","d32215025934646ba86125e3adcb9b467f4a07ed"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cc018b79379c67835b40b1259cd3dc931df60944":["762c80e29fe0c3bb83aabe2e64af6379273cec7b","cd7538cbbd9c304bc5396980e9802cd3a5bcf8e4"],"9a0e5953a07337cd41bcde610503024c07073b26":["cc018b79379c67835b40b1259cd3dc931df60944"],"d32215025934646ba86125e3adcb9b467f4a07ed":["3ed71f1a1881e9cb41ad3a1a7d5bff22021f1b6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["071935ce120b55517dcd86b9f985dbda028ba94e"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"3ed71f1a1881e9cb41ad3a1a7d5bff22021f1b6d":["d32215025934646ba86125e3adcb9b467f4a07ed"],"071935ce120b55517dcd86b9f985dbda028ba94e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"30c8e5574b55d57947e989443dfde611646530ee":[],"507e7decdf00981d09a74632ea30299a4ce6ba72":[],"cd7538cbbd9c304bc5396980e9802cd3a5bcf8e4":["cc018b79379c67835b40b1259cd3dc931df60944"],"8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","6b4e3cd382d0d075a0f1725649c084bb6510c483"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["3ed71f1a1881e9cb41ad3a1a7d5bff22021f1b6d"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["507e7decdf00981d09a74632ea30299a4ce6ba72","762c80e29fe0c3bb83aabe2e64af6379273cec7b"],"6b4e3cd382d0d075a0f1725649c084bb6510c483":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"762c80e29fe0c3bb83aabe2e64af6379273cec7b":["30c8e5574b55d57947e989443dfde611646530ee","507e7decdf00981d09a74632ea30299a4ce6ba72","cd7538cbbd9c304bc5396980e9802cd3a5bcf8e4","cc018b79379c67835b40b1259cd3dc931df60944"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8eb2b2b0fce1c4d4ca3b6c6eaa30498066be47d6","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"cc018b79379c67835b40b1259cd3dc931df60944":["30c8e5574b55d57947e989443dfde611646530ee","9a0e5953a07337cd41bcde610503024c07073b26"],"9a0e5953a07337cd41bcde610503024c07073b26":["071935ce120b55517dcd86b9f985dbda028ba94e"],"d32215025934646ba86125e3adcb9b467f4a07ed":["6b4e3cd382d0d075a0f1725649c084bb6510c483"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","507e7decdf00981d09a74632ea30299a4ce6ba72","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}