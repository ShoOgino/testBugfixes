{"path":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#printDocs(DirectoryReader).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#printDocs(DirectoryReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#printDocs(DirectoryReader).mjava","sourceNew":"  private static void printDocs(DirectoryReader r) throws Throwable {\n    IndexReader[] subs = r.getSequentialSubReaders();\n    for(IndexReader sub : subs) {\n      // TODO: improve this\n      Bits liveDocs = ((AtomicReader)sub).getLiveDocs();\n      System.out.println(\"  \" + ((SegmentReader) sub).getSegmentInfo());\n      for(int docID=0;docID<sub.maxDoc();docID++) {\n        Document doc = sub.document(docID);\n        if (liveDocs == null || liveDocs.get(docID)) {\n          System.out.println(\"    docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        } else {\n          System.out.println(\"    DEL docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private static void printDocs(DirectoryReader r) throws Throwable {\n    IndexReader[] subs = r.getSequentialSubReaders();\n    for(IndexReader sub : subs) {\n      // TODO: improve this\n      Bits liveDocs = ((AtomicReader)sub).getLiveDocs();\n      System.out.println(\"  \" + ((SegmentReader) sub).getSegmentInfo());\n      for(int docID=0;docID<sub.maxDoc();docID++) {\n        Document doc = sub.document(docID);\n        if (liveDocs == null || liveDocs.get(docID)) {\n          System.out.println(\"    docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        } else {\n          System.out.println(\"    DEL docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","date":1340090669,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#printDocs(DirectoryReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#printDocs(DirectoryReader).mjava","sourceNew":"  private static void printDocs(DirectoryReader r) throws Throwable {\n    List<? extends AtomicReader> subs = r.getSequentialSubReaders();\n    for(IndexReader sub : subs) {\n      // TODO: improve this\n      Bits liveDocs = ((AtomicReader)sub).getLiveDocs();\n      System.out.println(\"  \" + ((SegmentReader) sub).getSegmentInfo());\n      for(int docID=0;docID<sub.maxDoc();docID++) {\n        Document doc = sub.document(docID);\n        if (liveDocs == null || liveDocs.get(docID)) {\n          System.out.println(\"    docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        } else {\n          System.out.println(\"    DEL docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private static void printDocs(DirectoryReader r) throws Throwable {\n    IndexReader[] subs = r.getSequentialSubReaders();\n    for(IndexReader sub : subs) {\n      // TODO: improve this\n      Bits liveDocs = ((AtomicReader)sub).getLiveDocs();\n      System.out.println(\"  \" + ((SegmentReader) sub).getSegmentInfo());\n      for(int docID=0;docID<sub.maxDoc();docID++) {\n        Document doc = sub.document(docID);\n        if (liveDocs == null || liveDocs.get(docID)) {\n          System.out.println(\"    docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        } else {\n          System.out.println(\"    DEL docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","date":1341839195,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#printDocs(DirectoryReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#printDocs(DirectoryReader).mjava","sourceNew":"  private static void printDocs(DirectoryReader r) throws Throwable {\n    List<? extends AtomicReader> subs = r.getSequentialSubReaders();\n    for(IndexReader sub : subs) {\n      // TODO: improve this\n      Bits liveDocs = ((AtomicReader)sub).getLiveDocs();\n      System.out.println(\"  \" + ((SegmentReader) sub).getSegmentInfo());\n      for(int docID=0;docID<sub.maxDoc();docID++) {\n        StoredDocument doc = sub.document(docID);\n        if (liveDocs == null || liveDocs.get(docID)) {\n          System.out.println(\"    docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        } else {\n          System.out.println(\"    DEL docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private static void printDocs(DirectoryReader r) throws Throwable {\n    List<? extends AtomicReader> subs = r.getSequentialSubReaders();\n    for(IndexReader sub : subs) {\n      // TODO: improve this\n      Bits liveDocs = ((AtomicReader)sub).getLiveDocs();\n      System.out.println(\"  \" + ((SegmentReader) sub).getSegmentInfo());\n      for(int docID=0;docID<sub.maxDoc();docID++) {\n        Document doc = sub.document(docID);\n        if (liveDocs == null || liveDocs.get(docID)) {\n          System.out.println(\"    docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        } else {\n          System.out.println(\"    DEL docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ced66195b26fdb1f77ee00e2a77ec6918dedd766","date":1344948886,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#printDocs(DirectoryReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#printDocs(DirectoryReader).mjava","sourceNew":"  private static void printDocs(DirectoryReader r) throws Throwable {\n    for(AtomicReaderContext ctx : r.leaves()) {\n      // TODO: improve this\n      AtomicReader sub = ctx.reader();\n      Bits liveDocs = sub.getLiveDocs();\n      System.out.println(\"  \" + ((SegmentReader) sub).getSegmentInfo());\n      for(int docID=0;docID<sub.maxDoc();docID++) {\n        Document doc = sub.document(docID);\n        if (liveDocs == null || liveDocs.get(docID)) {\n          System.out.println(\"    docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        } else {\n          System.out.println(\"    DEL docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private static void printDocs(DirectoryReader r) throws Throwable {\n    List<? extends AtomicReader> subs = r.getSequentialSubReaders();\n    for(IndexReader sub : subs) {\n      // TODO: improve this\n      Bits liveDocs = ((AtomicReader)sub).getLiveDocs();\n      System.out.println(\"  \" + ((SegmentReader) sub).getSegmentInfo());\n      for(int docID=0;docID<sub.maxDoc();docID++) {\n        Document doc = sub.document(docID);\n        if (liveDocs == null || liveDocs.get(docID)) {\n          System.out.println(\"    docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        } else {\n          System.out.println(\"    DEL docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        }\n      }\n    }\n  }\n\n","bugFix":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff","da6d5ac19a80d65b1e864251f155d30960353b7e","4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#printDocs(DirectoryReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#printDocs(DirectoryReader).mjava","sourceNew":"  private static void printDocs(DirectoryReader r) throws Throwable {\n    for(AtomicReaderContext ctx : r.leaves()) {\n      // TODO: improve this\n      AtomicReader sub = ctx.reader();\n      Bits liveDocs = sub.getLiveDocs();\n      System.out.println(\"  \" + ((SegmentReader) sub).getSegmentInfo());\n      for(int docID=0;docID<sub.maxDoc();docID++) {\n        StoredDocument doc = sub.document(docID);\n        if (liveDocs == null || liveDocs.get(docID)) {\n          System.out.println(\"    docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        } else {\n          System.out.println(\"    DEL docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private static void printDocs(DirectoryReader r) throws Throwable {\n    List<? extends AtomicReader> subs = r.getSequentialSubReaders();\n    for(IndexReader sub : subs) {\n      // TODO: improve this\n      Bits liveDocs = ((AtomicReader)sub).getLiveDocs();\n      System.out.println(\"  \" + ((SegmentReader) sub).getSegmentInfo());\n      for(int docID=0;docID<sub.maxDoc();docID++) {\n        StoredDocument doc = sub.document(docID);\n        if (liveDocs == null || liveDocs.get(docID)) {\n          System.out.println(\"    docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        } else {\n          System.out.println(\"    DEL docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c188105a9aae04f56c24996f98f8333fc825d2e","date":1345031914,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#printDocs(DirectoryReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#printDocs(DirectoryReader).mjava","sourceNew":"  private static void printDocs(DirectoryReader r) throws Throwable {\n    for(AtomicReaderContext ctx : r.leaves()) {\n      // TODO: improve this\n      AtomicReader sub = ctx.reader();\n      Bits liveDocs = sub.getLiveDocs();\n      System.out.println(\"  \" + ((SegmentReader) sub).getSegmentInfo());\n      for(int docID=0;docID<sub.maxDoc();docID++) {\n        Document doc = sub.document(docID);\n        if (liveDocs == null || liveDocs.get(docID)) {\n          System.out.println(\"    docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        } else {\n          System.out.println(\"    DEL docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private static void printDocs(DirectoryReader r) throws Throwable {\n    List<? extends AtomicReader> subs = r.getSequentialSubReaders();\n    for(IndexReader sub : subs) {\n      // TODO: improve this\n      Bits liveDocs = ((AtomicReader)sub).getLiveDocs();\n      System.out.println(\"  \" + ((SegmentReader) sub).getSegmentInfo());\n      for(int docID=0;docID<sub.maxDoc();docID++) {\n        Document doc = sub.document(docID);\n        if (liveDocs == null || liveDocs.get(docID)) {\n          System.out.println(\"    docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        } else {\n          System.out.println(\"    DEL docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c93396a1df03720cb20e2c2f513a6fa59b21e4c","date":1345032673,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#printDocs(DirectoryReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#printDocs(DirectoryReader).mjava","sourceNew":"  private static void printDocs(DirectoryReader r) throws Throwable {\n    List<? extends AtomicReader> subs = r.getSequentialSubReaders();\n    for(IndexReader sub : subs) {\n      // TODO: improve this\n      Bits liveDocs = ((AtomicReader)sub).getLiveDocs();\n      System.out.println(\"  \" + ((SegmentReader) sub).getSegmentInfo());\n      for(int docID=0;docID<sub.maxDoc();docID++) {\n        Document doc = sub.document(docID);\n        if (liveDocs == null || liveDocs.get(docID)) {\n          System.out.println(\"    docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        } else {\n          System.out.println(\"    DEL docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private static void printDocs(DirectoryReader r) throws Throwable {\n    for(AtomicReaderContext ctx : r.leaves()) {\n      // TODO: improve this\n      AtomicReader sub = ctx.reader();\n      Bits liveDocs = sub.getLiveDocs();\n      System.out.println(\"  \" + ((SegmentReader) sub).getSegmentInfo());\n      for(int docID=0;docID<sub.maxDoc();docID++) {\n        Document doc = sub.document(docID);\n        if (liveDocs == null || liveDocs.get(docID)) {\n          System.out.println(\"    docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        } else {\n          System.out.println(\"    DEL docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#printDocs(DirectoryReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#printDocs(DirectoryReader).mjava","sourceNew":"  private static void printDocs(DirectoryReader r) throws Throwable {\n    for(AtomicReaderContext ctx : r.leaves()) {\n      // TODO: improve this\n      AtomicReader sub = ctx.reader();\n      Bits liveDocs = sub.getLiveDocs();\n      System.out.println(\"  \" + ((SegmentReader) sub).getSegmentInfo());\n      for(int docID=0;docID<sub.maxDoc();docID++) {\n        Document doc = sub.document(docID);\n        if (liveDocs == null || liveDocs.get(docID)) {\n          System.out.println(\"    docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        } else {\n          System.out.println(\"    DEL docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private static void printDocs(DirectoryReader r) throws Throwable {\n    List<? extends AtomicReader> subs = r.getSequentialSubReaders();\n    for(IndexReader sub : subs) {\n      // TODO: improve this\n      Bits liveDocs = ((AtomicReader)sub).getLiveDocs();\n      System.out.println(\"  \" + ((SegmentReader) sub).getSegmentInfo());\n      for(int docID=0;docID<sub.maxDoc();docID++) {\n        Document doc = sub.document(docID);\n        if (liveDocs == null || liveDocs.get(docID)) {\n          System.out.println(\"    docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        } else {\n          System.out.println(\"    DEL docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#printDocs(DirectoryReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#printDocs(DirectoryReader).mjava","sourceNew":"  private static void printDocs(DirectoryReader r) throws Throwable {\n    for(AtomicReaderContext ctx : r.leaves()) {\n      // TODO: improve this\n      AtomicReader sub = ctx.reader();\n      Bits liveDocs = sub.getLiveDocs();\n      System.out.println(\"  \" + ((SegmentReader) sub).getSegmentInfo());\n      for(int docID=0;docID<sub.maxDoc();docID++) {\n        StoredDocument doc = sub.document(docID);\n        if (liveDocs == null || liveDocs.get(docID)) {\n          System.out.println(\"    docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        } else {\n          System.out.println(\"    DEL docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private static void printDocs(DirectoryReader r) throws Throwable {\n    for(AtomicReaderContext ctx : r.leaves()) {\n      // TODO: improve this\n      AtomicReader sub = ctx.reader();\n      Bits liveDocs = sub.getLiveDocs();\n      System.out.println(\"  \" + ((SegmentReader) sub).getSegmentInfo());\n      for(int docID=0;docID<sub.maxDoc();docID++) {\n        Document doc = sub.document(docID);\n        if (liveDocs == null || liveDocs.get(docID)) {\n          System.out.println(\"    docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        } else {\n          System.out.println(\"    DEL docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#printDocs(DirectoryReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#printDocs(DirectoryReader).mjava","sourceNew":"  private static void printDocs(DirectoryReader r) throws Throwable {\n    for(LeafReaderContext ctx : r.leaves()) {\n      // TODO: improve this\n      LeafReader sub = ctx.reader();\n      Bits liveDocs = sub.getLiveDocs();\n      System.out.println(\"  \" + ((SegmentReader) sub).getSegmentInfo());\n      for(int docID=0;docID<sub.maxDoc();docID++) {\n        StoredDocument doc = sub.document(docID);\n        if (liveDocs == null || liveDocs.get(docID)) {\n          System.out.println(\"    docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        } else {\n          System.out.println(\"    DEL docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private static void printDocs(DirectoryReader r) throws Throwable {\n    for(AtomicReaderContext ctx : r.leaves()) {\n      // TODO: improve this\n      AtomicReader sub = ctx.reader();\n      Bits liveDocs = sub.getLiveDocs();\n      System.out.println(\"  \" + ((SegmentReader) sub).getSegmentInfo());\n      for(int docID=0;docID<sub.maxDoc();docID++) {\n        StoredDocument doc = sub.document(docID);\n        if (liveDocs == null || liveDocs.get(docID)) {\n          System.out.println(\"    docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        } else {\n          System.out.println(\"    DEL docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#printDocs(DirectoryReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#printDocs(DirectoryReader).mjava","sourceNew":"  private static void printDocs(DirectoryReader r) throws Throwable {\n    for(LeafReaderContext ctx : r.leaves()) {\n      // TODO: improve this\n      LeafReader sub = ctx.reader();\n      Bits liveDocs = sub.getLiveDocs();\n      System.out.println(\"  \" + ((SegmentReader) sub).getSegmentInfo());\n      for(int docID=0;docID<sub.maxDoc();docID++) {\n        Document doc = sub.document(docID);\n        if (liveDocs == null || liveDocs.get(docID)) {\n          System.out.println(\"    docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        } else {\n          System.out.println(\"    DEL docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private static void printDocs(DirectoryReader r) throws Throwable {\n    for(LeafReaderContext ctx : r.leaves()) {\n      // TODO: improve this\n      LeafReader sub = ctx.reader();\n      Bits liveDocs = sub.getLiveDocs();\n      System.out.println(\"  \" + ((SegmentReader) sub).getSegmentInfo());\n      for(int docID=0;docID<sub.maxDoc();docID++) {\n        StoredDocument doc = sub.document(docID);\n        if (liveDocs == null || liveDocs.get(docID)) {\n          System.out.println(\"    docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        } else {\n          System.out.println(\"    DEL docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["3c188105a9aae04f56c24996f98f8333fc825d2e"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["1d028314cced5858683a1bb4741423d0f934257b"],"1d028314cced5858683a1bb4741423d0f934257b":["ced66195b26fdb1f77ee00e2a77ec6918dedd766","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ced66195b26fdb1f77ee00e2a77ec6918dedd766":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","3c188105a9aae04f56c24996f98f8333fc825d2e","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["1d028314cced5858683a1bb4741423d0f934257b"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"1d028314cced5858683a1bb4741423d0f934257b":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ced66195b26fdb1f77ee00e2a77ec6918dedd766":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","1d028314cced5858683a1bb4741423d0f934257b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}