{"path":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets#testOverrequest().mjava","commits":[{"id":"ef4a533291df0f49b21c53ee04a10879555634ff","date":1477521309,"type":0,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets#testOverrequest().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testOverrequest() throws Exception {\n    initServers();\n    Client client = servers.getClient(random().nextInt());\n    client.queryDefaults().set( \"shards\", servers.getShards(), \"debugQuery\", Boolean.toString(random().nextBoolean()) );\n\n    List<SolrClient> clients = client.getClientProvider().all();\n    assertTrue(clients.size() >= 3);\n\n    client.deleteByQuery(\"*:*\", null);\n\n    ModifiableSolrParams p = params(\"cat_s\", \"cat_s\");\n    String cat_s = p.get(\"cat_s\");\n\n    clients.get(0).add( sdoc(\"id\", \"1\", cat_s, \"A\") ); // A will win tiebreak\n    clients.get(0).add( sdoc(\"id\", \"2\", cat_s, \"B\") );\n\n    clients.get(1).add( sdoc(\"id\", \"3\", cat_s, \"B\") );\n    clients.get(1).add( sdoc(\"id\", \"4\", cat_s, \"A\") ); // A will win tiebreak\n\n    clients.get(2).add( sdoc(\"id\", \"5\", cat_s, \"B\") );\n    clients.get(2).add( sdoc(\"id\", \"6\", cat_s, \"B\") );\n\n    client.commit();\n\n    // Shard responses should be A=1, A=1, B=2, merged should be \"A=2, B=2\" hence A wins tiebreak\n\n    client.testJQ(params(p, \"q\", \"*:*\",\n        \"json.facet\", \"{\" +\n            \"cat0:{type:terms, field:${cat_s}, sort:'count desc', limit:1, overrequest:0}\" +\n            \",cat1:{type:terms, field:${cat_s}, sort:'count desc', limit:1, overrequest:1}\" +\n            \",catDef:{type:terms, field:${cat_s}, sort:'count desc', limit:1, overrequest:-1}\" +  // -1 is default overrequest\n            \",catBig:{type:terms, field:${cat_s}, sort:'count desc', offset:1, limit:2147483647, overrequest:2147483647}\" +  // make sure overflows don't mess us up\n            \"}\"\n        )\n        , \"facets=={ count:6\" +\n            \", cat0:{ buckets:[ {val:A,count:2} ] }\" +  // with no overrequest, we incorrectly conclude that A is the top bucket\n            \", cat1:{ buckets:[ {val:B,count:4} ] }\" +\n            \", catDef:{ buckets:[ {val:B,count:4} ] }\" +\n            \", catBig:{ buckets:[ {val:A,count:2} ] }\" +\n            \"}\"\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets#testOverrequest().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testOverrequest() throws Exception {\n    initServers();\n    Client client = servers.getClient(random().nextInt());\n    client.queryDefaults().set( \"shards\", servers.getShards(), \"debugQuery\", Boolean.toString(random().nextBoolean()) );\n\n    List<SolrClient> clients = client.getClientProvider().all();\n    assertTrue(clients.size() >= 3);\n\n    client.deleteByQuery(\"*:*\", null);\n\n    ModifiableSolrParams p = params(\"cat_s\", \"cat_s\");\n    String cat_s = p.get(\"cat_s\");\n\n    clients.get(0).add( sdoc(\"id\", \"1\", cat_s, \"A\") ); // A will win tiebreak\n    clients.get(0).add( sdoc(\"id\", \"2\", cat_s, \"B\") );\n\n    clients.get(1).add( sdoc(\"id\", \"3\", cat_s, \"B\") );\n    clients.get(1).add( sdoc(\"id\", \"4\", cat_s, \"A\") ); // A will win tiebreak\n\n    clients.get(2).add( sdoc(\"id\", \"5\", cat_s, \"B\") );\n    clients.get(2).add( sdoc(\"id\", \"6\", cat_s, \"B\") );\n\n    client.commit();\n\n    // Shard responses should be A=1, A=1, B=2, merged should be \"A=2, B=2\" hence A wins tiebreak\n\n    client.testJQ(params(p, \"q\", \"*:*\",\n        \"json.facet\", \"{\" +\n            \"cat0:{type:terms, field:${cat_s}, sort:'count desc', limit:1, overrequest:0}\" +\n            \",cat1:{type:terms, field:${cat_s}, sort:'count desc', limit:1, overrequest:1}\" +\n            \",catDef:{type:terms, field:${cat_s}, sort:'count desc', limit:1, overrequest:-1}\" +  // -1 is default overrequest\n            \",catBig:{type:terms, field:${cat_s}, sort:'count desc', offset:1, limit:2147483647, overrequest:2147483647}\" +  // make sure overflows don't mess us up\n            \"}\"\n        )\n        , \"facets=={ count:6\" +\n            \", cat0:{ buckets:[ {val:A,count:2} ] }\" +  // with no overrequest, we incorrectly conclude that A is the top bucket\n            \", cat1:{ buckets:[ {val:B,count:4} ] }\" +\n            \", catDef:{ buckets:[ {val:B,count:4} ] }\" +\n            \", catBig:{ buckets:[ {val:A,count:2} ] }\" +\n            \"}\"\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ef4a533291df0f49b21c53ee04a10879555634ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ef4a533291df0f49b21c53ee04a10879555634ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ef4a533291df0f49b21c53ee04a10879555634ff"]},"commit2Childs":{"ef4a533291df0f49b21c53ee04a10879555634ff":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ef4a533291df0f49b21c53ee04a10879555634ff","80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}