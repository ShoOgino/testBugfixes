{"path":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#testForwarding().mjava","commits":[{"id":"cc3d73ce4049cb1520abaaae57fe8267639bda1d","date":1470181330,"type":0,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#testForwarding().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testForwarding() throws Exception {\n    String collectionName = \"forwardingCollection\";\n    File configDir = getFile(\"solr\").toPath().resolve(\"collection1/conf\").toFile();\n    miniCluster.uploadConfigDir(configDir, \"conf1\");\n    create1ShardCollection(collectionName, \"conf1\", miniCluster);\n\n    // try a command to each node, one of them must be forwarded\n    for (JettySolrRunner jetty : miniCluster.getJettySolrRunners()) {\n      HttpSolrClient client =\n          new HttpSolrClient.Builder(jetty.getBaseUrl().toString() + \"/\" + collectionName).build();\n      try {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(\"q\", \"*:*\");\n        params.set(USER_PARAM, \"user\");\n        client.query(params);\n      } finally {\n        client.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#testForwarding().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testForwarding() throws Exception {\n    String collectionName = \"forwardingCollection\";\n    File configDir = getFile(\"solr\").toPath().resolve(\"collection1/conf\").toFile();\n    miniCluster.uploadConfigDir(configDir, \"conf1\");\n    create1ShardCollection(collectionName, \"conf1\", miniCluster);\n\n    // try a command to each node, one of them must be forwarded\n    for (JettySolrRunner jetty : miniCluster.getJettySolrRunners()) {\n      HttpSolrClient client =\n          new HttpSolrClient.Builder(jetty.getBaseUrl().toString() + \"/\" + collectionName).build();\n      try {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(\"q\", \"*:*\");\n        params.set(USER_PARAM, \"user\");\n        client.query(params);\n      } finally {\n        client.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e89a32cc825033ebae8bb9e1c6877c2d9d76749e","date":1476790453,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#testForwarding().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#testForwarding().mjava","sourceNew":"  @Test\n  public void testForwarding() throws Exception {\n    String collectionName = \"forwardingCollection\";\n    miniCluster.uploadConfigSet(TEST_PATH().resolve(\"collection1/conf\"), \"conf1\");\n    create1ShardCollection(collectionName, \"conf1\", miniCluster);\n\n    // try a command to each node, one of them must be forwarded\n    for (JettySolrRunner jetty : miniCluster.getJettySolrRunners()) {\n      HttpSolrClient client =\n          new HttpSolrClient.Builder(jetty.getBaseUrl().toString() + \"/\" + collectionName).build();\n      try {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(\"q\", \"*:*\");\n        params.set(USER_PARAM, \"user\");\n        client.query(params);\n      } finally {\n        client.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testForwarding() throws Exception {\n    String collectionName = \"forwardingCollection\";\n    File configDir = getFile(\"solr\").toPath().resolve(\"collection1/conf\").toFile();\n    miniCluster.uploadConfigDir(configDir, \"conf1\");\n    create1ShardCollection(collectionName, \"conf1\", miniCluster);\n\n    // try a command to each node, one of them must be forwarded\n    for (JettySolrRunner jetty : miniCluster.getJettySolrRunners()) {\n      HttpSolrClient client =\n          new HttpSolrClient.Builder(jetty.getBaseUrl().toString() + \"/\" + collectionName).build();\n      try {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(\"q\", \"*:*\");\n        params.set(USER_PARAM, \"user\");\n        client.query(params);\n      } finally {\n        client.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#testForwarding().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testForwarding() throws Exception {\n    String collectionName = \"forwardingCollection\";\n    miniCluster.uploadConfigSet(TEST_PATH().resolve(\"collection1/conf\"), \"conf1\");\n    create1ShardCollection(collectionName, \"conf1\", miniCluster);\n\n    // try a command to each node, one of them must be forwarded\n    for (JettySolrRunner jetty : miniCluster.getJettySolrRunners()) {\n      HttpSolrClient client =\n          new HttpSolrClient.Builder(jetty.getBaseUrl().toString() + \"/\" + collectionName).build();\n      try {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(\"q\", \"*:*\");\n        params.set(USER_PARAM, \"user\");\n        client.query(params);\n      } finally {\n        client.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a10d4a0423ccdc7c84efa89beeef9a56c01d0e1","date":1546418643,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#testForwarding().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#testForwarding().mjava","sourceNew":"  @Test\n  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-13098\")\n  public void testForwarding() throws Exception {\n    String collectionName = \"forwardingCollection\";\n    miniCluster.uploadConfigSet(TEST_PATH().resolve(\"collection1/conf\"), \"conf1\");\n    create1ShardCollection(collectionName, \"conf1\", miniCluster);\n\n    // try a command to each node, one of them must be forwarded\n    for (JettySolrRunner jetty : miniCluster.getJettySolrRunners()) {\n      HttpSolrClient client =\n          new HttpSolrClient.Builder(jetty.getBaseUrl().toString() + \"/\" + collectionName).build();\n      try {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(\"q\", \"*:*\");\n        params.set(USER_PARAM, \"user\");\n        client.query(params);\n      } finally {\n        client.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testForwarding() throws Exception {\n    String collectionName = \"forwardingCollection\";\n    miniCluster.uploadConfigSet(TEST_PATH().resolve(\"collection1/conf\"), \"conf1\");\n    create1ShardCollection(collectionName, \"conf1\", miniCluster);\n\n    // try a command to each node, one of them must be forwarded\n    for (JettySolrRunner jetty : miniCluster.getJettySolrRunners()) {\n      HttpSolrClient client =\n          new HttpSolrClient.Builder(jetty.getBaseUrl().toString() + \"/\" + collectionName).build();\n      try {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(\"q\", \"*:*\");\n        params.set(USER_PARAM, \"user\");\n        client.query(params);\n      } finally {\n        client.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["16a1bbda4a49d74d4c9df2eba45b180565fffeab"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"16a1bbda4a49d74d4c9df2eba45b180565fffeab","date":1546677088,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#testForwarding().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#testForwarding().mjava","sourceNew":"  @Test\n  public void testForwarding() throws Exception {\n    String collectionName = \"forwardingCollection\";\n    miniCluster.uploadConfigSet(TEST_PATH().resolve(\"collection1/conf\"), \"conf1\");\n    create1ShardCollection(collectionName, \"conf1\", miniCluster);\n\n    // try a command to each node, one of them must be forwarded\n    for (JettySolrRunner jetty : miniCluster.getJettySolrRunners()) {\n      HttpSolrClient client =\n          new HttpSolrClient.Builder(jetty.getBaseUrl().toString() + \"/\" + collectionName).build();\n      try {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(\"q\", \"*:*\");\n        params.set(USER_PARAM, \"user\");\n        client.query(params);\n      } finally {\n        client.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/SOLR-13098\")\n  public void testForwarding() throws Exception {\n    String collectionName = \"forwardingCollection\";\n    miniCluster.uploadConfigSet(TEST_PATH().resolve(\"collection1/conf\"), \"conf1\");\n    create1ShardCollection(collectionName, \"conf1\", miniCluster);\n\n    // try a command to each node, one of them must be forwarded\n    for (JettySolrRunner jetty : miniCluster.getJettySolrRunners()) {\n      HttpSolrClient client =\n          new HttpSolrClient.Builder(jetty.getBaseUrl().toString() + \"/\" + collectionName).build();\n      try {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(\"q\", \"*:*\");\n        params.set(USER_PARAM, \"user\");\n        client.query(params);\n      } finally {\n        client.close();\n      }\n    }\n  }\n\n","bugFix":["5a10d4a0423ccdc7c84efa89beeef9a56c01d0e1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e614eceb81b081076e753ed62268c93c8a2a28e","date":1576119727,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#testForwarding().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#testForwarding().mjava","sourceNew":"  @Test\n  public void testForwarding() throws Exception {\n    String collectionName = \"forwardingCollection\";\n    miniCluster.uploadConfigSet(TEST_PATH().resolve(\"collection1/conf\"), \"conf1\");\n    create1ShardCollection(collectionName, \"conf1\", miniCluster);\n\n    // try a command to each node, one of them must be forwarded\n    for (JettySolrRunner jetty : miniCluster.getJettySolrRunners()) {\n      try (HttpSolrClient client = new HttpSolrClient.Builder(\n          jetty.getBaseUrl().toString() + \"/\" + collectionName).build()) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(\"q\", \"*:*\");\n        params.set(USER_PARAM, \"user\");\n        client.query(params);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testForwarding() throws Exception {\n    String collectionName = \"forwardingCollection\";\n    miniCluster.uploadConfigSet(TEST_PATH().resolve(\"collection1/conf\"), \"conf1\");\n    create1ShardCollection(collectionName, \"conf1\", miniCluster);\n\n    // try a command to each node, one of them must be forwarded\n    for (JettySolrRunner jetty : miniCluster.getJettySolrRunners()) {\n      HttpSolrClient client =\n          new HttpSolrClient.Builder(jetty.getBaseUrl().toString() + \"/\" + collectionName).build();\n      try {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(\"q\", \"*:*\");\n        params.set(USER_PARAM, \"user\");\n        client.query(params);\n      } finally {\n        client.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df724d84dab24a0cc54bec95a8680867adc7f171","date":1576156608,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#testForwarding().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithSecureImpersonation#testForwarding().mjava","sourceNew":"  @Test\n  public void testForwarding() throws Exception {\n    String collectionName = \"forwardingCollection\";\n    miniCluster.uploadConfigSet(TEST_PATH().resolve(\"collection1/conf\"), \"conf1\");\n    create1ShardCollection(collectionName, \"conf1\", miniCluster);\n\n    // try a command to each node, one of them must be forwarded\n    for (JettySolrRunner jetty : miniCluster.getJettySolrRunners()) {\n      try (HttpSolrClient client = new HttpSolrClient.Builder(\n          jetty.getBaseUrl().toString() + \"/\" + collectionName).build()) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(\"q\", \"*:*\");\n        params.set(USER_PARAM, \"user\");\n        client.query(params);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testForwarding() throws Exception {\n    String collectionName = \"forwardingCollection\";\n    miniCluster.uploadConfigSet(TEST_PATH().resolve(\"collection1/conf\"), \"conf1\");\n    create1ShardCollection(collectionName, \"conf1\", miniCluster);\n\n    // try a command to each node, one of them must be forwarded\n    for (JettySolrRunner jetty : miniCluster.getJettySolrRunners()) {\n      HttpSolrClient client =\n          new HttpSolrClient.Builder(jetty.getBaseUrl().toString() + \"/\" + collectionName).build();\n      try {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(\"q\", \"*:*\");\n        params.set(USER_PARAM, \"user\");\n        client.query(params);\n      } finally {\n        client.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df724d84dab24a0cc54bec95a8680867adc7f171":["16a1bbda4a49d74d4c9df2eba45b180565fffeab","7e614eceb81b081076e753ed62268c93c8a2a28e"],"7e614eceb81b081076e753ed62268c93c8a2a28e":["16a1bbda4a49d74d4c9df2eba45b180565fffeab"],"16a1bbda4a49d74d4c9df2eba45b180565fffeab":["5a10d4a0423ccdc7c84efa89beeef9a56c01d0e1"],"e89a32cc825033ebae8bb9e1c6877c2d9d76749e":["cc3d73ce4049cb1520abaaae57fe8267639bda1d"],"cc3d73ce4049cb1520abaaae57fe8267639bda1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5a10d4a0423ccdc7c84efa89beeef9a56c01d0e1":["e89a32cc825033ebae8bb9e1c6877c2d9d76749e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e89a32cc825033ebae8bb9e1c6877c2d9d76749e"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cc3d73ce4049cb1520abaaae57fe8267639bda1d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7e614eceb81b081076e753ed62268c93c8a2a28e"]},"commit2Childs":{"df724d84dab24a0cc54bec95a8680867adc7f171":[],"16a1bbda4a49d74d4c9df2eba45b180565fffeab":["df724d84dab24a0cc54bec95a8680867adc7f171","7e614eceb81b081076e753ed62268c93c8a2a28e"],"7e614eceb81b081076e753ed62268c93c8a2a28e":["df724d84dab24a0cc54bec95a8680867adc7f171","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e89a32cc825033ebae8bb9e1c6877c2d9d76749e":["5a10d4a0423ccdc7c84efa89beeef9a56c01d0e1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cc3d73ce4049cb1520abaaae57fe8267639bda1d":["e89a32cc825033ebae8bb9e1c6877c2d9d76749e","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cc3d73ce4049cb1520abaaae57fe8267639bda1d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"5a10d4a0423ccdc7c84efa89beeef9a56c01d0e1":["16a1bbda4a49d74d4c9df2eba45b180565fffeab"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["df724d84dab24a0cc54bec95a8680867adc7f171","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}