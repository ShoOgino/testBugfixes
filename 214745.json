{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#getNode(CharSequence,TSTNode).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#getNode(CharSequence,TSTNode).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie#getNode(CharSequence,TSTNode).mjava","sourceNew":"  /**\n   * Returns the node indexed by key, or <code>null</code> if that node doesn't\n   * exist. The search begins at root node.\n   * \n   *@param key\n   *          A <code>String</code> that indexes the node that is returned.\n   *@param startNode\n   *          The top node defining the subtrie to be searched.\n   *@return The node object indexed by key. This object is an instance of an\n   *         inner class named <code>TernarySearchTrie.TSTNode</code>.\n   */\n  protected TSTNode getNode(CharSequence key, TSTNode startNode) {\n    if (key == null || startNode == null || key.length() == 0) {\n      return null;\n    }\n    TSTNode currentNode = startNode;\n    int charIndex = 0;\n    while (true) {\n      if (currentNode == null) {\n        return null;\n      }\n      int charComp = compareCharsAlphabetically(key.charAt(charIndex),\n              currentNode.splitchar);\n      if (charComp == 0) {\n        charIndex++;\n        if (charIndex == key.length()) {\n          return currentNode;\n        }\n        currentNode = currentNode.relatives[TSTNode.EQKID];\n      } else if (charComp < 0) {\n        currentNode = currentNode.relatives[TSTNode.LOKID];\n      } else {\n        currentNode = currentNode.relatives[TSTNode.HIKID];\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the node indexed by key, or <code>null</code> if that node doesn't\n   * exist. The search begins at root node.\n   * \n   *@param key\n   *          A <code>String</code> that indexes the node that is returned.\n   *@param startNode\n   *          The top node defining the subtrie to be searched.\n   *@return The node object indexed by key. This object is an instance of an\n   *         inner class named <code>TernarySearchTrie.TSTNode</code>.\n   */\n  protected TSTNode getNode(CharSequence key, TSTNode startNode) {\n    if (key == null || startNode == null || key.length() == 0) {\n      return null;\n    }\n    TSTNode currentNode = startNode;\n    int charIndex = 0;\n    while (true) {\n      if (currentNode == null) {\n        return null;\n      }\n      int charComp = compareCharsAlphabetically(key.charAt(charIndex),\n              currentNode.splitchar);\n      if (charComp == 0) {\n        charIndex++;\n        if (charIndex == key.length()) {\n          return currentNode;\n        }\n        currentNode = currentNode.relatives[TSTNode.EQKID];\n      } else if (charComp < 0) {\n        currentNode = currentNode.relatives[TSTNode.LOKID];\n      } else {\n        currentNode = currentNode.relatives[TSTNode.HIKID];\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}