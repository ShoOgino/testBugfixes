{"path":"solr/core/src/java/org/apache/solr/cloud/overseer/NodeMutator#downNode(ClusterState,ZkNodeProps).mjava","commits":[{"id":"4820e7931c05e4eb25ac34917774fbacab59c3a3","date":1454991883,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/NodeMutator#downNode(ClusterState,ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"  public List<ZkWriteCommand> downNode(ClusterState clusterState, ZkNodeProps message) {\n    List<ZkWriteCommand> zkWriteCommands = new ArrayList<ZkWriteCommand>();\n    String nodeName = message.getStr(ZkStateReader.NODE_NAME_PROP);\n\n    log.info(\"DownNode state invoked for node: \" + nodeName);\n\n    Set<String> collections = clusterState.getCollections();\n    for (String collection : collections) {\n\n      Map<String,Slice> slicesCopy = new LinkedHashMap<>(clusterState.getSlicesMap(collection));\n\n      Set<Entry<String,Slice>> entries = slicesCopy.entrySet();\n      for (Entry<String,Slice> entry : entries) {\n        Slice slice = clusterState.getSlice(collection, entry.getKey());\n        Map<String,Replica> newReplicas = new HashMap<String,Replica>();\n\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          Map<String,Object> props = replica.shallowCopy();\n          String rNodeName = replica.getNodeName();\n          if (rNodeName.equals(nodeName)) {\n            log.info(\"Update replica state for \" + replica + \" to \" + Replica.State.DOWN.toString());\n            props.put(ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n          }\n\n          Replica newReplica = new Replica(replica.getName(), props);\n          newReplicas.put(replica.getName(), newReplica);\n        }\n\n        Slice newSlice = new Slice(slice.getName(), newReplicas, slice.shallowCopy());\n        slicesCopy.put(slice.getName(), newSlice);\n\n      }\n\n      zkWriteCommands.add(new ZkWriteCommand(collection, clusterState.getCollection(collection).copyWithSlices(slicesCopy)));\n    }\n\n    return zkWriteCommands;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f7e7599efe704cd8a873a909e546525ace4b5502"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04c8df3f10a676c3de5dbf390f17a2de2d45cacd","date":1461615626,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/NodeMutator#downNode(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/NodeMutator#downNode(ClusterState,ZkNodeProps).mjava","sourceNew":"  public List<ZkWriteCommand> downNode(ClusterState clusterState, ZkNodeProps message) {\n    List<ZkWriteCommand> zkWriteCommands = new ArrayList<ZkWriteCommand>();\n    String nodeName = message.getStr(ZkStateReader.NODE_NAME_PROP);\n\n    log.info(\"DownNode state invoked for node: \" + nodeName);\n\n    Set<String> collections = clusterState.getCollections();\n    for (String collection : collections) {\n      DocCollection docCollection = clusterState.getCollection(collection);\n      Map<String,Slice> slicesCopy = new LinkedHashMap<>(docCollection.getSlicesMap());\n\n      Set<Entry<String,Slice>> entries = slicesCopy.entrySet();\n      for (Entry<String,Slice> entry : entries) {\n        Slice slice = docCollection.getSlice(entry.getKey());\n        Map<String,Replica> newReplicas = new HashMap<String,Replica>();\n\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          Map<String,Object> props = replica.shallowCopy();\n          String rNodeName = replica.getNodeName();\n          if (rNodeName.equals(nodeName)) {\n            log.info(\"Update replica state for \" + replica + \" to \" + Replica.State.DOWN.toString());\n            props.put(ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n          }\n\n          Replica newReplica = new Replica(replica.getName(), props);\n          newReplicas.put(replica.getName(), newReplica);\n        }\n\n        Slice newSlice = new Slice(slice.getName(), newReplicas, slice.shallowCopy());\n        slicesCopy.put(slice.getName(), newSlice);\n\n      }\n\n      zkWriteCommands.add(new ZkWriteCommand(collection, docCollection.copyWithSlices(slicesCopy)));\n    }\n\n    return zkWriteCommands;\n  }\n\n","sourceOld":"  public List<ZkWriteCommand> downNode(ClusterState clusterState, ZkNodeProps message) {\n    List<ZkWriteCommand> zkWriteCommands = new ArrayList<ZkWriteCommand>();\n    String nodeName = message.getStr(ZkStateReader.NODE_NAME_PROP);\n\n    log.info(\"DownNode state invoked for node: \" + nodeName);\n\n    Set<String> collections = clusterState.getCollections();\n    for (String collection : collections) {\n\n      Map<String,Slice> slicesCopy = new LinkedHashMap<>(clusterState.getSlicesMap(collection));\n\n      Set<Entry<String,Slice>> entries = slicesCopy.entrySet();\n      for (Entry<String,Slice> entry : entries) {\n        Slice slice = clusterState.getSlice(collection, entry.getKey());\n        Map<String,Replica> newReplicas = new HashMap<String,Replica>();\n\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          Map<String,Object> props = replica.shallowCopy();\n          String rNodeName = replica.getNodeName();\n          if (rNodeName.equals(nodeName)) {\n            log.info(\"Update replica state for \" + replica + \" to \" + Replica.State.DOWN.toString());\n            props.put(ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n          }\n\n          Replica newReplica = new Replica(replica.getName(), props);\n          newReplicas.put(replica.getName(), newReplica);\n        }\n\n        Slice newSlice = new Slice(slice.getName(), newReplicas, slice.shallowCopy());\n        slicesCopy.put(slice.getName(), newSlice);\n\n      }\n\n      zkWriteCommands.add(new ZkWriteCommand(collection, clusterState.getCollection(collection).copyWithSlices(slicesCopy)));\n    }\n\n    return zkWriteCommands;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/NodeMutator#downNode(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/NodeMutator#downNode(ClusterState,ZkNodeProps).mjava","sourceNew":"  public List<ZkWriteCommand> downNode(ClusterState clusterState, ZkNodeProps message) {\n    List<ZkWriteCommand> zkWriteCommands = new ArrayList<ZkWriteCommand>();\n    String nodeName = message.getStr(ZkStateReader.NODE_NAME_PROP);\n\n    log.info(\"DownNode state invoked for node: \" + nodeName);\n\n    Set<String> collections = clusterState.getCollections();\n    for (String collection : collections) {\n      DocCollection docCollection = clusterState.getCollection(collection);\n      Map<String,Slice> slicesCopy = new LinkedHashMap<>(docCollection.getSlicesMap());\n\n      Set<Entry<String,Slice>> entries = slicesCopy.entrySet();\n      for (Entry<String,Slice> entry : entries) {\n        Slice slice = docCollection.getSlice(entry.getKey());\n        Map<String,Replica> newReplicas = new HashMap<String,Replica>();\n\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          Map<String,Object> props = replica.shallowCopy();\n          String rNodeName = replica.getNodeName();\n          if (rNodeName.equals(nodeName)) {\n            log.info(\"Update replica state for \" + replica + \" to \" + Replica.State.DOWN.toString());\n            props.put(ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n          }\n\n          Replica newReplica = new Replica(replica.getName(), props);\n          newReplicas.put(replica.getName(), newReplica);\n        }\n\n        Slice newSlice = new Slice(slice.getName(), newReplicas, slice.shallowCopy());\n        slicesCopy.put(slice.getName(), newSlice);\n\n      }\n\n      zkWriteCommands.add(new ZkWriteCommand(collection, docCollection.copyWithSlices(slicesCopy)));\n    }\n\n    return zkWriteCommands;\n  }\n\n","sourceOld":"  public List<ZkWriteCommand> downNode(ClusterState clusterState, ZkNodeProps message) {\n    List<ZkWriteCommand> zkWriteCommands = new ArrayList<ZkWriteCommand>();\n    String nodeName = message.getStr(ZkStateReader.NODE_NAME_PROP);\n\n    log.info(\"DownNode state invoked for node: \" + nodeName);\n\n    Set<String> collections = clusterState.getCollections();\n    for (String collection : collections) {\n\n      Map<String,Slice> slicesCopy = new LinkedHashMap<>(clusterState.getSlicesMap(collection));\n\n      Set<Entry<String,Slice>> entries = slicesCopy.entrySet();\n      for (Entry<String,Slice> entry : entries) {\n        Slice slice = clusterState.getSlice(collection, entry.getKey());\n        Map<String,Replica> newReplicas = new HashMap<String,Replica>();\n\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          Map<String,Object> props = replica.shallowCopy();\n          String rNodeName = replica.getNodeName();\n          if (rNodeName.equals(nodeName)) {\n            log.info(\"Update replica state for \" + replica + \" to \" + Replica.State.DOWN.toString());\n            props.put(ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n          }\n\n          Replica newReplica = new Replica(replica.getName(), props);\n          newReplicas.put(replica.getName(), newReplica);\n        }\n\n        Slice newSlice = new Slice(slice.getName(), newReplicas, slice.shallowCopy());\n        slicesCopy.put(slice.getName(), newSlice);\n\n      }\n\n      zkWriteCommands.add(new ZkWriteCommand(collection, clusterState.getCollection(collection).copyWithSlices(slicesCopy)));\n    }\n\n    return zkWriteCommands;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9974f61802aea1d15849a1053f88f5e89fc32b4","date":1462405923,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/NodeMutator#downNode(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/NodeMutator#downNode(ClusterState,ZkNodeProps).mjava","sourceNew":"  public List<ZkWriteCommand> downNode(ClusterState clusterState, ZkNodeProps message) {\n    List<ZkWriteCommand> zkWriteCommands = new ArrayList<ZkWriteCommand>();\n    String nodeName = message.getStr(ZkStateReader.NODE_NAME_PROP);\n\n    log.info(\"DownNode state invoked for node: \" + nodeName);\n\n    Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n    for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n      DocCollection docCollection = entry.getValue();\n      Map<String,Slice> slicesCopy = new LinkedHashMap<>(docCollection.getSlicesMap());\n\n      for (Entry<String,Slice> sliceEntry : slicesCopy.entrySet()) {\n        Slice slice = docCollection.getSlice(sliceEntry.getKey());\n        Map<String,Replica> newReplicas = new HashMap<String,Replica>();\n\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          Map<String,Object> props = replica.shallowCopy();\n          String rNodeName = replica.getNodeName();\n          if (rNodeName.equals(nodeName)) {\n            log.info(\"Update replica state for \" + replica + \" to \" + Replica.State.DOWN.toString());\n            props.put(ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n          }\n\n          Replica newReplica = new Replica(replica.getName(), props);\n          newReplicas.put(replica.getName(), newReplica);\n        }\n\n        Slice newSlice = new Slice(slice.getName(), newReplicas, slice.shallowCopy());\n        slicesCopy.put(slice.getName(), newSlice);\n\n      }\n\n      zkWriteCommands.add(new ZkWriteCommand(entry.getKey(), docCollection.copyWithSlices(slicesCopy)));\n    }\n\n    return zkWriteCommands;\n  }\n\n","sourceOld":"  public List<ZkWriteCommand> downNode(ClusterState clusterState, ZkNodeProps message) {\n    List<ZkWriteCommand> zkWriteCommands = new ArrayList<ZkWriteCommand>();\n    String nodeName = message.getStr(ZkStateReader.NODE_NAME_PROP);\n\n    log.info(\"DownNode state invoked for node: \" + nodeName);\n\n    Set<String> collections = clusterState.getCollections();\n    for (String collection : collections) {\n      DocCollection docCollection = clusterState.getCollection(collection);\n      Map<String,Slice> slicesCopy = new LinkedHashMap<>(docCollection.getSlicesMap());\n\n      Set<Entry<String,Slice>> entries = slicesCopy.entrySet();\n      for (Entry<String,Slice> entry : entries) {\n        Slice slice = docCollection.getSlice(entry.getKey());\n        Map<String,Replica> newReplicas = new HashMap<String,Replica>();\n\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          Map<String,Object> props = replica.shallowCopy();\n          String rNodeName = replica.getNodeName();\n          if (rNodeName.equals(nodeName)) {\n            log.info(\"Update replica state for \" + replica + \" to \" + Replica.State.DOWN.toString());\n            props.put(ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n          }\n\n          Replica newReplica = new Replica(replica.getName(), props);\n          newReplicas.put(replica.getName(), newReplica);\n        }\n\n        Slice newSlice = new Slice(slice.getName(), newReplicas, slice.shallowCopy());\n        slicesCopy.put(slice.getName(), newSlice);\n\n      }\n\n      zkWriteCommands.add(new ZkWriteCommand(collection, docCollection.copyWithSlices(slicesCopy)));\n    }\n\n    return zkWriteCommands;\n  }\n\n","bugFix":null,"bugIntro":["f7e7599efe704cd8a873a909e546525ace4b5502"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/NodeMutator#downNode(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/NodeMutator#downNode(ClusterState,ZkNodeProps).mjava","sourceNew":"  public List<ZkWriteCommand> downNode(ClusterState clusterState, ZkNodeProps message) {\n    List<ZkWriteCommand> zkWriteCommands = new ArrayList<ZkWriteCommand>();\n    String nodeName = message.getStr(ZkStateReader.NODE_NAME_PROP);\n\n    log.info(\"DownNode state invoked for node: \" + nodeName);\n\n    Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n    for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n      DocCollection docCollection = entry.getValue();\n      Map<String,Slice> slicesCopy = new LinkedHashMap<>(docCollection.getSlicesMap());\n\n      for (Entry<String,Slice> sliceEntry : slicesCopy.entrySet()) {\n        Slice slice = docCollection.getSlice(sliceEntry.getKey());\n        Map<String,Replica> newReplicas = new HashMap<String,Replica>();\n\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          Map<String,Object> props = replica.shallowCopy();\n          String rNodeName = replica.getNodeName();\n          if (rNodeName.equals(nodeName)) {\n            log.info(\"Update replica state for \" + replica + \" to \" + Replica.State.DOWN.toString());\n            props.put(ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n          }\n\n          Replica newReplica = new Replica(replica.getName(), props);\n          newReplicas.put(replica.getName(), newReplica);\n        }\n\n        Slice newSlice = new Slice(slice.getName(), newReplicas, slice.shallowCopy());\n        slicesCopy.put(slice.getName(), newSlice);\n\n      }\n\n      zkWriteCommands.add(new ZkWriteCommand(entry.getKey(), docCollection.copyWithSlices(slicesCopy)));\n    }\n\n    return zkWriteCommands;\n  }\n\n","sourceOld":"  public List<ZkWriteCommand> downNode(ClusterState clusterState, ZkNodeProps message) {\n    List<ZkWriteCommand> zkWriteCommands = new ArrayList<ZkWriteCommand>();\n    String nodeName = message.getStr(ZkStateReader.NODE_NAME_PROP);\n\n    log.info(\"DownNode state invoked for node: \" + nodeName);\n\n    Set<String> collections = clusterState.getCollections();\n    for (String collection : collections) {\n      DocCollection docCollection = clusterState.getCollection(collection);\n      Map<String,Slice> slicesCopy = new LinkedHashMap<>(docCollection.getSlicesMap());\n\n      Set<Entry<String,Slice>> entries = slicesCopy.entrySet();\n      for (Entry<String,Slice> entry : entries) {\n        Slice slice = docCollection.getSlice(entry.getKey());\n        Map<String,Replica> newReplicas = new HashMap<String,Replica>();\n\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          Map<String,Object> props = replica.shallowCopy();\n          String rNodeName = replica.getNodeName();\n          if (rNodeName.equals(nodeName)) {\n            log.info(\"Update replica state for \" + replica + \" to \" + Replica.State.DOWN.toString());\n            props.put(ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n          }\n\n          Replica newReplica = new Replica(replica.getName(), props);\n          newReplicas.put(replica.getName(), newReplica);\n        }\n\n        Slice newSlice = new Slice(slice.getName(), newReplicas, slice.shallowCopy());\n        slicesCopy.put(slice.getName(), newSlice);\n\n      }\n\n      zkWriteCommands.add(new ZkWriteCommand(collection, docCollection.copyWithSlices(slicesCopy)));\n    }\n\n    return zkWriteCommands;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc08f02757dd10637b16a5c65eaaef839a91a9a","date":1462455462,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/NodeMutator#downNode(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/NodeMutator#downNode(ClusterState,ZkNodeProps).mjava","sourceNew":"  public List<ZkWriteCommand> downNode(ClusterState clusterState, ZkNodeProps message) {\n    List<ZkWriteCommand> zkWriteCommands = new ArrayList<ZkWriteCommand>();\n    String nodeName = message.getStr(ZkStateReader.NODE_NAME_PROP);\n\n    log.info(\"DownNode state invoked for node: \" + nodeName);\n\n    Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n    for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n      DocCollection docCollection = entry.getValue();\n      Map<String,Slice> slicesCopy = new LinkedHashMap<>(docCollection.getSlicesMap());\n\n      for (Entry<String,Slice> sliceEntry : slicesCopy.entrySet()) {\n        Slice slice = docCollection.getSlice(sliceEntry.getKey());\n        Map<String,Replica> newReplicas = new HashMap<String,Replica>();\n\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          Map<String,Object> props = replica.shallowCopy();\n          String rNodeName = replica.getNodeName();\n          if (rNodeName.equals(nodeName)) {\n            log.info(\"Update replica state for \" + replica + \" to \" + Replica.State.DOWN.toString());\n            props.put(ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n          }\n\n          Replica newReplica = new Replica(replica.getName(), props);\n          newReplicas.put(replica.getName(), newReplica);\n        }\n\n        Slice newSlice = new Slice(slice.getName(), newReplicas, slice.shallowCopy());\n        slicesCopy.put(slice.getName(), newSlice);\n\n      }\n\n      zkWriteCommands.add(new ZkWriteCommand(entry.getKey(), docCollection.copyWithSlices(slicesCopy)));\n    }\n\n    return zkWriteCommands;\n  }\n\n","sourceOld":"  public List<ZkWriteCommand> downNode(ClusterState clusterState, ZkNodeProps message) {\n    List<ZkWriteCommand> zkWriteCommands = new ArrayList<ZkWriteCommand>();\n    String nodeName = message.getStr(ZkStateReader.NODE_NAME_PROP);\n\n    log.info(\"DownNode state invoked for node: \" + nodeName);\n\n    Set<String> collections = clusterState.getCollections();\n    for (String collection : collections) {\n      DocCollection docCollection = clusterState.getCollection(collection);\n      Map<String,Slice> slicesCopy = new LinkedHashMap<>(docCollection.getSlicesMap());\n\n      Set<Entry<String,Slice>> entries = slicesCopy.entrySet();\n      for (Entry<String,Slice> entry : entries) {\n        Slice slice = docCollection.getSlice(entry.getKey());\n        Map<String,Replica> newReplicas = new HashMap<String,Replica>();\n\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          Map<String,Object> props = replica.shallowCopy();\n          String rNodeName = replica.getNodeName();\n          if (rNodeName.equals(nodeName)) {\n            log.info(\"Update replica state for \" + replica + \" to \" + Replica.State.DOWN.toString());\n            props.put(ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n          }\n\n          Replica newReplica = new Replica(replica.getName(), props);\n          newReplicas.put(replica.getName(), newReplica);\n        }\n\n        Slice newSlice = new Slice(slice.getName(), newReplicas, slice.shallowCopy());\n        slicesCopy.put(slice.getName(), newSlice);\n\n      }\n\n      zkWriteCommands.add(new ZkWriteCommand(collection, docCollection.copyWithSlices(slicesCopy)));\n    }\n\n    return zkWriteCommands;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/NodeMutator#downNode(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/NodeMutator#downNode(ClusterState,ZkNodeProps).mjava","sourceNew":"  public List<ZkWriteCommand> downNode(ClusterState clusterState, ZkNodeProps message) {\n    List<ZkWriteCommand> zkWriteCommands = new ArrayList<ZkWriteCommand>();\n    String nodeName = message.getStr(ZkStateReader.NODE_NAME_PROP);\n\n    log.info(\"DownNode state invoked for node: \" + nodeName);\n\n    Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n    for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n      DocCollection docCollection = entry.getValue();\n      Map<String,Slice> slicesCopy = new LinkedHashMap<>(docCollection.getSlicesMap());\n\n      for (Entry<String,Slice> sliceEntry : slicesCopy.entrySet()) {\n        Slice slice = docCollection.getSlice(sliceEntry.getKey());\n        Map<String,Replica> newReplicas = new HashMap<String,Replica>();\n\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          Map<String,Object> props = replica.shallowCopy();\n          String rNodeName = replica.getNodeName();\n          if (rNodeName.equals(nodeName)) {\n            log.info(\"Update replica state for \" + replica + \" to \" + Replica.State.DOWN.toString());\n            props.put(ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n          }\n\n          Replica newReplica = new Replica(replica.getName(), props);\n          newReplicas.put(replica.getName(), newReplica);\n        }\n\n        Slice newSlice = new Slice(slice.getName(), newReplicas, slice.shallowCopy());\n        slicesCopy.put(slice.getName(), newSlice);\n\n      }\n\n      zkWriteCommands.add(new ZkWriteCommand(entry.getKey(), docCollection.copyWithSlices(slicesCopy)));\n    }\n\n    return zkWriteCommands;\n  }\n\n","sourceOld":"  public List<ZkWriteCommand> downNode(ClusterState clusterState, ZkNodeProps message) {\n    List<ZkWriteCommand> zkWriteCommands = new ArrayList<ZkWriteCommand>();\n    String nodeName = message.getStr(ZkStateReader.NODE_NAME_PROP);\n\n    log.info(\"DownNode state invoked for node: \" + nodeName);\n\n    Set<String> collections = clusterState.getCollections();\n    for (String collection : collections) {\n      DocCollection docCollection = clusterState.getCollection(collection);\n      Map<String,Slice> slicesCopy = new LinkedHashMap<>(docCollection.getSlicesMap());\n\n      Set<Entry<String,Slice>> entries = slicesCopy.entrySet();\n      for (Entry<String,Slice> entry : entries) {\n        Slice slice = docCollection.getSlice(entry.getKey());\n        Map<String,Replica> newReplicas = new HashMap<String,Replica>();\n\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          Map<String,Object> props = replica.shallowCopy();\n          String rNodeName = replica.getNodeName();\n          if (rNodeName.equals(nodeName)) {\n            log.info(\"Update replica state for \" + replica + \" to \" + Replica.State.DOWN.toString());\n            props.put(ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n          }\n\n          Replica newReplica = new Replica(replica.getName(), props);\n          newReplicas.put(replica.getName(), newReplica);\n        }\n\n        Slice newSlice = new Slice(slice.getName(), newReplicas, slice.shallowCopy());\n        slicesCopy.put(slice.getName(), newSlice);\n\n      }\n\n      zkWriteCommands.add(new ZkWriteCommand(collection, docCollection.copyWithSlices(slicesCopy)));\n    }\n\n    return zkWriteCommands;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5d615d62cd8aff3690943d765e46942551f98b6","date":1474881754,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/NodeMutator#downNode(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/NodeMutator#downNode(ClusterState,ZkNodeProps).mjava","sourceNew":"  public List<ZkWriteCommand> downNode(ClusterState clusterState, ZkNodeProps message) {\n    List<ZkWriteCommand> zkWriteCommands = new ArrayList<ZkWriteCommand>();\n    String nodeName = message.getStr(ZkStateReader.NODE_NAME_PROP);\n\n    log.debug(\"DownNode state invoked for node: \" + nodeName);\n\n    Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n    for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n      DocCollection docCollection = entry.getValue();\n      Map<String,Slice> slicesCopy = new LinkedHashMap<>(docCollection.getSlicesMap());\n\n      for (Entry<String,Slice> sliceEntry : slicesCopy.entrySet()) {\n        Slice slice = docCollection.getSlice(sliceEntry.getKey());\n        Map<String,Replica> newReplicas = new HashMap<String,Replica>();\n\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          Map<String,Object> props = replica.shallowCopy();\n          String rNodeName = replica.getNodeName();\n          if (rNodeName.equals(nodeName)) {\n            log.debug(\"Update replica state for \" + replica + \" to \" + Replica.State.DOWN.toString());\n            props.put(ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n          }\n\n          Replica newReplica = new Replica(replica.getName(), props);\n          newReplicas.put(replica.getName(), newReplica);\n        }\n\n        Slice newSlice = new Slice(slice.getName(), newReplicas, slice.shallowCopy());\n        slicesCopy.put(slice.getName(), newSlice);\n\n      }\n\n      zkWriteCommands.add(new ZkWriteCommand(entry.getKey(), docCollection.copyWithSlices(slicesCopy)));\n    }\n\n    return zkWriteCommands;\n  }\n\n","sourceOld":"  public List<ZkWriteCommand> downNode(ClusterState clusterState, ZkNodeProps message) {\n    List<ZkWriteCommand> zkWriteCommands = new ArrayList<ZkWriteCommand>();\n    String nodeName = message.getStr(ZkStateReader.NODE_NAME_PROP);\n\n    log.info(\"DownNode state invoked for node: \" + nodeName);\n\n    Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n    for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n      DocCollection docCollection = entry.getValue();\n      Map<String,Slice> slicesCopy = new LinkedHashMap<>(docCollection.getSlicesMap());\n\n      for (Entry<String,Slice> sliceEntry : slicesCopy.entrySet()) {\n        Slice slice = docCollection.getSlice(sliceEntry.getKey());\n        Map<String,Replica> newReplicas = new HashMap<String,Replica>();\n\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          Map<String,Object> props = replica.shallowCopy();\n          String rNodeName = replica.getNodeName();\n          if (rNodeName.equals(nodeName)) {\n            log.info(\"Update replica state for \" + replica + \" to \" + Replica.State.DOWN.toString());\n            props.put(ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n          }\n\n          Replica newReplica = new Replica(replica.getName(), props);\n          newReplicas.put(replica.getName(), newReplica);\n        }\n\n        Slice newSlice = new Slice(slice.getName(), newReplicas, slice.shallowCopy());\n        slicesCopy.put(slice.getName(), newSlice);\n\n      }\n\n      zkWriteCommands.add(new ZkWriteCommand(entry.getKey(), docCollection.copyWithSlices(slicesCopy)));\n    }\n\n    return zkWriteCommands;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/NodeMutator#downNode(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/NodeMutator#downNode(ClusterState,ZkNodeProps).mjava","sourceNew":"  public List<ZkWriteCommand> downNode(ClusterState clusterState, ZkNodeProps message) {\n    List<ZkWriteCommand> zkWriteCommands = new ArrayList<ZkWriteCommand>();\n    String nodeName = message.getStr(ZkStateReader.NODE_NAME_PROP);\n\n    log.debug(\"DownNode state invoked for node: \" + nodeName);\n\n    Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n    for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n      DocCollection docCollection = entry.getValue();\n      Map<String,Slice> slicesCopy = new LinkedHashMap<>(docCollection.getSlicesMap());\n\n      for (Entry<String,Slice> sliceEntry : slicesCopy.entrySet()) {\n        Slice slice = docCollection.getSlice(sliceEntry.getKey());\n        Map<String,Replica> newReplicas = new HashMap<String,Replica>();\n\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          Map<String,Object> props = replica.shallowCopy();\n          String rNodeName = replica.getNodeName();\n          if (rNodeName.equals(nodeName)) {\n            log.debug(\"Update replica state for \" + replica + \" to \" + Replica.State.DOWN.toString());\n            props.put(ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n          }\n\n          Replica newReplica = new Replica(replica.getName(), props);\n          newReplicas.put(replica.getName(), newReplica);\n        }\n\n        Slice newSlice = new Slice(slice.getName(), newReplicas, slice.shallowCopy());\n        slicesCopy.put(slice.getName(), newSlice);\n\n      }\n\n      zkWriteCommands.add(new ZkWriteCommand(entry.getKey(), docCollection.copyWithSlices(slicesCopy)));\n    }\n\n    return zkWriteCommands;\n  }\n\n","sourceOld":"  public List<ZkWriteCommand> downNode(ClusterState clusterState, ZkNodeProps message) {\n    List<ZkWriteCommand> zkWriteCommands = new ArrayList<ZkWriteCommand>();\n    String nodeName = message.getStr(ZkStateReader.NODE_NAME_PROP);\n\n    log.info(\"DownNode state invoked for node: \" + nodeName);\n\n    Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n    for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n      DocCollection docCollection = entry.getValue();\n      Map<String,Slice> slicesCopy = new LinkedHashMap<>(docCollection.getSlicesMap());\n\n      for (Entry<String,Slice> sliceEntry : slicesCopy.entrySet()) {\n        Slice slice = docCollection.getSlice(sliceEntry.getKey());\n        Map<String,Replica> newReplicas = new HashMap<String,Replica>();\n\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          Map<String,Object> props = replica.shallowCopy();\n          String rNodeName = replica.getNodeName();\n          if (rNodeName.equals(nodeName)) {\n            log.info(\"Update replica state for \" + replica + \" to \" + Replica.State.DOWN.toString());\n            props.put(ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n          }\n\n          Replica newReplica = new Replica(replica.getName(), props);\n          newReplicas.put(replica.getName(), newReplica);\n        }\n\n        Slice newSlice = new Slice(slice.getName(), newReplicas, slice.shallowCopy());\n        slicesCopy.put(slice.getName(), newSlice);\n\n      }\n\n      zkWriteCommands.add(new ZkWriteCommand(entry.getKey(), docCollection.copyWithSlices(slicesCopy)));\n    }\n\n    return zkWriteCommands;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/NodeMutator#downNode(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/NodeMutator#downNode(ClusterState,ZkNodeProps).mjava","sourceNew":"  public List<ZkWriteCommand> downNode(ClusterState clusterState, ZkNodeProps message) {\n    List<ZkWriteCommand> zkWriteCommands = new ArrayList<ZkWriteCommand>();\n    String nodeName = message.getStr(ZkStateReader.NODE_NAME_PROP);\n\n    log.debug(\"DownNode state invoked for node: \" + nodeName);\n\n    Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n    for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n      DocCollection docCollection = entry.getValue();\n      Map<String,Slice> slicesCopy = new LinkedHashMap<>(docCollection.getSlicesMap());\n\n      for (Entry<String,Slice> sliceEntry : slicesCopy.entrySet()) {\n        Slice slice = docCollection.getSlice(sliceEntry.getKey());\n        Map<String,Replica> newReplicas = new HashMap<String,Replica>();\n\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          Map<String,Object> props = replica.shallowCopy();\n          String rNodeName = replica.getNodeName();\n          if (rNodeName.equals(nodeName)) {\n            log.debug(\"Update replica state for \" + replica + \" to \" + Replica.State.DOWN.toString());\n            props.put(ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n          }\n\n          Replica newReplica = new Replica(replica.getName(), props);\n          newReplicas.put(replica.getName(), newReplica);\n        }\n\n        Slice newSlice = new Slice(slice.getName(), newReplicas, slice.shallowCopy());\n        slicesCopy.put(slice.getName(), newSlice);\n\n      }\n\n      zkWriteCommands.add(new ZkWriteCommand(entry.getKey(), docCollection.copyWithSlices(slicesCopy)));\n    }\n\n    return zkWriteCommands;\n  }\n\n","sourceOld":"  public List<ZkWriteCommand> downNode(ClusterState clusterState, ZkNodeProps message) {\n    List<ZkWriteCommand> zkWriteCommands = new ArrayList<ZkWriteCommand>();\n    String nodeName = message.getStr(ZkStateReader.NODE_NAME_PROP);\n\n    log.info(\"DownNode state invoked for node: \" + nodeName);\n\n    Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n    for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n      DocCollection docCollection = entry.getValue();\n      Map<String,Slice> slicesCopy = new LinkedHashMap<>(docCollection.getSlicesMap());\n\n      for (Entry<String,Slice> sliceEntry : slicesCopy.entrySet()) {\n        Slice slice = docCollection.getSlice(sliceEntry.getKey());\n        Map<String,Replica> newReplicas = new HashMap<String,Replica>();\n\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          Map<String,Object> props = replica.shallowCopy();\n          String rNodeName = replica.getNodeName();\n          if (rNodeName.equals(nodeName)) {\n            log.info(\"Update replica state for \" + replica + \" to \" + Replica.State.DOWN.toString());\n            props.put(ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n          }\n\n          Replica newReplica = new Replica(replica.getName(), props);\n          newReplicas.put(replica.getName(), newReplica);\n        }\n\n        Slice newSlice = new Slice(slice.getName(), newReplicas, slice.shallowCopy());\n        slicesCopy.put(slice.getName(), newSlice);\n\n      }\n\n      zkWriteCommands.add(new ZkWriteCommand(entry.getKey(), docCollection.copyWithSlices(slicesCopy)));\n    }\n\n    return zkWriteCommands;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7e7599efe704cd8a873a909e546525ace4b5502","date":1491388304,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/NodeMutator#downNode(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/NodeMutator#downNode(ClusterState,ZkNodeProps).mjava","sourceNew":"  public List<ZkWriteCommand> downNode(ClusterState clusterState, ZkNodeProps message) {\n    List<ZkWriteCommand> zkWriteCommands = new ArrayList<>();\n    String nodeName = message.getStr(ZkStateReader.NODE_NAME_PROP);\n\n    log.debug(\"DownNode state invoked for node: \" + nodeName);\n\n    Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n    for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n      String collection = entry.getKey();\n      DocCollection docCollection = entry.getValue();\n\n      Map<String,Slice> slicesCopy = new LinkedHashMap<>(docCollection.getSlicesMap());\n\n      boolean needToUpdateCollection = false;\n      for (Entry<String, Slice> sliceEntry : slicesCopy.entrySet()) {\n        Slice slice = sliceEntry.getValue();\n        Map<String, Replica> newReplicas = slice.getReplicasCopy();\n\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          String rNodeName = replica.getNodeName();\n          if (rNodeName.equals(nodeName)) {\n            log.debug(\"Update replica state for \" + replica + \" to \" + Replica.State.DOWN.toString());\n            Map<String, Object> props = replica.shallowCopy();\n            props.put(ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n            Replica newReplica = new Replica(replica.getName(), props);\n            newReplicas.put(replica.getName(), newReplica);\n            needToUpdateCollection = true;\n          }\n        }\n\n        Slice newSlice = new Slice(slice.getName(), newReplicas, slice.shallowCopy());\n        slicesCopy.put(slice.getName(), newSlice);\n      }\n\n      if (needToUpdateCollection) {\n        zkWriteCommands.add(new ZkWriteCommand(collection, docCollection.copyWithSlices(slicesCopy)));\n      }\n    }\n\n    return zkWriteCommands;\n  }\n\n","sourceOld":"  public List<ZkWriteCommand> downNode(ClusterState clusterState, ZkNodeProps message) {\n    List<ZkWriteCommand> zkWriteCommands = new ArrayList<ZkWriteCommand>();\n    String nodeName = message.getStr(ZkStateReader.NODE_NAME_PROP);\n\n    log.debug(\"DownNode state invoked for node: \" + nodeName);\n\n    Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n    for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n      DocCollection docCollection = entry.getValue();\n      Map<String,Slice> slicesCopy = new LinkedHashMap<>(docCollection.getSlicesMap());\n\n      for (Entry<String,Slice> sliceEntry : slicesCopy.entrySet()) {\n        Slice slice = docCollection.getSlice(sliceEntry.getKey());\n        Map<String,Replica> newReplicas = new HashMap<String,Replica>();\n\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          Map<String,Object> props = replica.shallowCopy();\n          String rNodeName = replica.getNodeName();\n          if (rNodeName.equals(nodeName)) {\n            log.debug(\"Update replica state for \" + replica + \" to \" + Replica.State.DOWN.toString());\n            props.put(ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n          }\n\n          Replica newReplica = new Replica(replica.getName(), props);\n          newReplicas.put(replica.getName(), newReplica);\n        }\n\n        Slice newSlice = new Slice(slice.getName(), newReplicas, slice.shallowCopy());\n        slicesCopy.put(slice.getName(), newSlice);\n\n      }\n\n      zkWriteCommands.add(new ZkWriteCommand(entry.getKey(), docCollection.copyWithSlices(slicesCopy)));\n    }\n\n    return zkWriteCommands;\n  }\n\n","bugFix":["e9974f61802aea1d15849a1053f88f5e89fc32b4","4820e7931c05e4eb25ac34917774fbacab59c3a3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/NodeMutator#downNode(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/NodeMutator#downNode(ClusterState,ZkNodeProps).mjava","sourceNew":"  public List<ZkWriteCommand> downNode(ClusterState clusterState, ZkNodeProps message) {\n    List<ZkWriteCommand> zkWriteCommands = new ArrayList<>();\n    String nodeName = message.getStr(ZkStateReader.NODE_NAME_PROP);\n\n    log.debug(\"DownNode state invoked for node: \" + nodeName);\n\n    Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n    for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n      String collection = entry.getKey();\n      DocCollection docCollection = entry.getValue();\n\n      Map<String,Slice> slicesCopy = new LinkedHashMap<>(docCollection.getSlicesMap());\n\n      boolean needToUpdateCollection = false;\n      for (Entry<String, Slice> sliceEntry : slicesCopy.entrySet()) {\n        Slice slice = sliceEntry.getValue();\n        Map<String, Replica> newReplicas = slice.getReplicasCopy();\n\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          String rNodeName = replica.getNodeName();\n          if (rNodeName.equals(nodeName)) {\n            log.debug(\"Update replica state for \" + replica + \" to \" + Replica.State.DOWN.toString());\n            Map<String, Object> props = replica.shallowCopy();\n            props.put(ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n            Replica newReplica = new Replica(replica.getName(), props);\n            newReplicas.put(replica.getName(), newReplica);\n            needToUpdateCollection = true;\n          }\n        }\n\n        Slice newSlice = new Slice(slice.getName(), newReplicas, slice.shallowCopy());\n        slicesCopy.put(slice.getName(), newSlice);\n      }\n\n      if (needToUpdateCollection) {\n        zkWriteCommands.add(new ZkWriteCommand(collection, docCollection.copyWithSlices(slicesCopy)));\n      }\n    }\n\n    return zkWriteCommands;\n  }\n\n","sourceOld":"  public List<ZkWriteCommand> downNode(ClusterState clusterState, ZkNodeProps message) {\n    List<ZkWriteCommand> zkWriteCommands = new ArrayList<ZkWriteCommand>();\n    String nodeName = message.getStr(ZkStateReader.NODE_NAME_PROP);\n\n    log.debug(\"DownNode state invoked for node: \" + nodeName);\n\n    Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n    for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n      DocCollection docCollection = entry.getValue();\n      Map<String,Slice> slicesCopy = new LinkedHashMap<>(docCollection.getSlicesMap());\n\n      for (Entry<String,Slice> sliceEntry : slicesCopy.entrySet()) {\n        Slice slice = docCollection.getSlice(sliceEntry.getKey());\n        Map<String,Replica> newReplicas = new HashMap<String,Replica>();\n\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          Map<String,Object> props = replica.shallowCopy();\n          String rNodeName = replica.getNodeName();\n          if (rNodeName.equals(nodeName)) {\n            log.debug(\"Update replica state for \" + replica + \" to \" + Replica.State.DOWN.toString());\n            props.put(ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n          }\n\n          Replica newReplica = new Replica(replica.getName(), props);\n          newReplicas.put(replica.getName(), newReplica);\n        }\n\n        Slice newSlice = new Slice(slice.getName(), newReplicas, slice.shallowCopy());\n        slicesCopy.put(slice.getName(), newSlice);\n\n      }\n\n      zkWriteCommands.add(new ZkWriteCommand(entry.getKey(), docCollection.copyWithSlices(slicesCopy)));\n    }\n\n    return zkWriteCommands;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/NodeMutator#downNode(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/NodeMutator#downNode(ClusterState,ZkNodeProps).mjava","sourceNew":"  public List<ZkWriteCommand> downNode(ClusterState clusterState, ZkNodeProps message) {\n    List<ZkWriteCommand> zkWriteCommands = new ArrayList<>();\n    String nodeName = message.getStr(ZkStateReader.NODE_NAME_PROP);\n\n    log.debug(\"DownNode state invoked for node: \" + nodeName);\n\n    Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n    for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n      String collection = entry.getKey();\n      DocCollection docCollection = entry.getValue();\n\n      Map<String,Slice> slicesCopy = new LinkedHashMap<>(docCollection.getSlicesMap());\n\n      boolean needToUpdateCollection = false;\n      for (Entry<String, Slice> sliceEntry : slicesCopy.entrySet()) {\n        Slice slice = sliceEntry.getValue();\n        Map<String, Replica> newReplicas = slice.getReplicasCopy();\n\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          String rNodeName = replica.getNodeName();\n          if (rNodeName == null) {\n            throw new RuntimeException(\"Replica without node name! \" + replica);\n          }\n          if (rNodeName.equals(nodeName)) {\n            log.debug(\"Update replica state for \" + replica + \" to \" + Replica.State.DOWN.toString());\n            Map<String, Object> props = replica.shallowCopy();\n            props.put(ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n            Replica newReplica = new Replica(replica.getName(), props);\n            newReplicas.put(replica.getName(), newReplica);\n            needToUpdateCollection = true;\n          }\n        }\n\n        Slice newSlice = new Slice(slice.getName(), newReplicas, slice.shallowCopy());\n        slicesCopy.put(slice.getName(), newSlice);\n      }\n\n      if (needToUpdateCollection) {\n        zkWriteCommands.add(new ZkWriteCommand(collection, docCollection.copyWithSlices(slicesCopy)));\n      }\n    }\n\n    return zkWriteCommands;\n  }\n\n","sourceOld":"  public List<ZkWriteCommand> downNode(ClusterState clusterState, ZkNodeProps message) {\n    List<ZkWriteCommand> zkWriteCommands = new ArrayList<>();\n    String nodeName = message.getStr(ZkStateReader.NODE_NAME_PROP);\n\n    log.debug(\"DownNode state invoked for node: \" + nodeName);\n\n    Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n    for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n      String collection = entry.getKey();\n      DocCollection docCollection = entry.getValue();\n\n      Map<String,Slice> slicesCopy = new LinkedHashMap<>(docCollection.getSlicesMap());\n\n      boolean needToUpdateCollection = false;\n      for (Entry<String, Slice> sliceEntry : slicesCopy.entrySet()) {\n        Slice slice = sliceEntry.getValue();\n        Map<String, Replica> newReplicas = slice.getReplicasCopy();\n\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          String rNodeName = replica.getNodeName();\n          if (rNodeName.equals(nodeName)) {\n            log.debug(\"Update replica state for \" + replica + \" to \" + Replica.State.DOWN.toString());\n            Map<String, Object> props = replica.shallowCopy();\n            props.put(ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n            Replica newReplica = new Replica(replica.getName(), props);\n            newReplicas.put(replica.getName(), newReplica);\n            needToUpdateCollection = true;\n          }\n        }\n\n        Slice newSlice = new Slice(slice.getName(), newReplicas, slice.shallowCopy());\n        slicesCopy.put(slice.getName(), newSlice);\n      }\n\n      if (needToUpdateCollection) {\n        zkWriteCommands.add(new ZkWriteCommand(collection, docCollection.copyWithSlices(slicesCopy)));\n      }\n    }\n\n    return zkWriteCommands;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6681d02f2302c363be938426e68f8dfd090cc1bf","date":1575339019,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/NodeMutator#downNode(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/NodeMutator#downNode(ClusterState,ZkNodeProps).mjava","sourceNew":"  public List<ZkWriteCommand> downNode(ClusterState clusterState, ZkNodeProps message) {\n    List<ZkWriteCommand> zkWriteCommands = new ArrayList<>();\n    String nodeName = message.getStr(ZkStateReader.NODE_NAME_PROP);\n\n    log.debug(\"DownNode state invoked for node: \" + nodeName);\n\n    Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n    for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n      String collection = entry.getKey();\n      DocCollection docCollection = entry.getValue();\n\n      Map<String,Slice> slicesCopy = new LinkedHashMap<>(docCollection.getSlicesMap());\n\n      boolean needToUpdateCollection = false;\n      for (Entry<String, Slice> sliceEntry : slicesCopy.entrySet()) {\n        Slice slice = sliceEntry.getValue();\n        Map<String, Replica> newReplicas = slice.getReplicasCopy();\n\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          String rNodeName = replica.getNodeName();\n          if (rNodeName == null) {\n            throw new RuntimeException(\"Replica without node name! \" + replica);\n          }\n          if (rNodeName.equals(nodeName)) {\n            log.debug(\"Update replica state for \" + replica + \" to \" + Replica.State.DOWN.toString());\n            Map<String, Object> props = replica.shallowCopy();\n            props.put(ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n            Replica newReplica = new Replica(replica.getName(), props, collection, slice.getName());\n            newReplicas.put(replica.getName(), newReplica);\n            needToUpdateCollection = true;\n          }\n        }\n\n        Slice newSlice = new Slice(slice.getName(), newReplicas, slice.shallowCopy(),collection);\n        slicesCopy.put(slice.getName(), newSlice);\n      }\n\n      if (needToUpdateCollection) {\n        zkWriteCommands.add(new ZkWriteCommand(collection, docCollection.copyWithSlices(slicesCopy)));\n      }\n    }\n\n    return zkWriteCommands;\n  }\n\n","sourceOld":"  public List<ZkWriteCommand> downNode(ClusterState clusterState, ZkNodeProps message) {\n    List<ZkWriteCommand> zkWriteCommands = new ArrayList<>();\n    String nodeName = message.getStr(ZkStateReader.NODE_NAME_PROP);\n\n    log.debug(\"DownNode state invoked for node: \" + nodeName);\n\n    Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n    for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n      String collection = entry.getKey();\n      DocCollection docCollection = entry.getValue();\n\n      Map<String,Slice> slicesCopy = new LinkedHashMap<>(docCollection.getSlicesMap());\n\n      boolean needToUpdateCollection = false;\n      for (Entry<String, Slice> sliceEntry : slicesCopy.entrySet()) {\n        Slice slice = sliceEntry.getValue();\n        Map<String, Replica> newReplicas = slice.getReplicasCopy();\n\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          String rNodeName = replica.getNodeName();\n          if (rNodeName == null) {\n            throw new RuntimeException(\"Replica without node name! \" + replica);\n          }\n          if (rNodeName.equals(nodeName)) {\n            log.debug(\"Update replica state for \" + replica + \" to \" + Replica.State.DOWN.toString());\n            Map<String, Object> props = replica.shallowCopy();\n            props.put(ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n            Replica newReplica = new Replica(replica.getName(), props);\n            newReplicas.put(replica.getName(), newReplica);\n            needToUpdateCollection = true;\n          }\n        }\n\n        Slice newSlice = new Slice(slice.getName(), newReplicas, slice.shallowCopy());\n        slicesCopy.put(slice.getName(), newSlice);\n      }\n\n      if (needToUpdateCollection) {\n        zkWriteCommands.add(new ZkWriteCommand(collection, docCollection.copyWithSlices(slicesCopy)));\n      }\n    }\n\n    return zkWriteCommands;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3aa683bba99315838c968fefedf3d74f44aa993","date":1575395112,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/NodeMutator#downNode(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/NodeMutator#downNode(ClusterState,ZkNodeProps).mjava","sourceNew":"  public List<ZkWriteCommand> downNode(ClusterState clusterState, ZkNodeProps message) {\n    List<ZkWriteCommand> zkWriteCommands = new ArrayList<>();\n    String nodeName = message.getStr(ZkStateReader.NODE_NAME_PROP);\n\n    log.debug(\"DownNode state invoked for node: \" + nodeName);\n\n    Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n    for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n      String collection = entry.getKey();\n      DocCollection docCollection = entry.getValue();\n\n      Map<String,Slice> slicesCopy = new LinkedHashMap<>(docCollection.getSlicesMap());\n\n      boolean needToUpdateCollection = false;\n      for (Entry<String, Slice> sliceEntry : slicesCopy.entrySet()) {\n        Slice slice = sliceEntry.getValue();\n        Map<String, Replica> newReplicas = slice.getReplicasCopy();\n\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          String rNodeName = replica.getNodeName();\n          if (rNodeName == null) {\n            throw new RuntimeException(\"Replica without node name! \" + replica);\n          }\n          if (rNodeName.equals(nodeName)) {\n            log.debug(\"Update replica state for \" + replica + \" to \" + Replica.State.DOWN.toString());\n            Map<String, Object> props = replica.shallowCopy();\n            props.put(ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n            Replica newReplica = new Replica(replica.getName(), props, collection, slice.getName());\n            newReplicas.put(replica.getName(), newReplica);\n            needToUpdateCollection = true;\n          }\n        }\n\n        Slice newSlice = new Slice(slice.getName(), newReplicas, slice.shallowCopy(),collection);\n        slicesCopy.put(slice.getName(), newSlice);\n      }\n\n      if (needToUpdateCollection) {\n        zkWriteCommands.add(new ZkWriteCommand(collection, docCollection.copyWithSlices(slicesCopy)));\n      }\n    }\n\n    return zkWriteCommands;\n  }\n\n","sourceOld":"  public List<ZkWriteCommand> downNode(ClusterState clusterState, ZkNodeProps message) {\n    List<ZkWriteCommand> zkWriteCommands = new ArrayList<>();\n    String nodeName = message.getStr(ZkStateReader.NODE_NAME_PROP);\n\n    log.debug(\"DownNode state invoked for node: \" + nodeName);\n\n    Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n    for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n      String collection = entry.getKey();\n      DocCollection docCollection = entry.getValue();\n\n      Map<String,Slice> slicesCopy = new LinkedHashMap<>(docCollection.getSlicesMap());\n\n      boolean needToUpdateCollection = false;\n      for (Entry<String, Slice> sliceEntry : slicesCopy.entrySet()) {\n        Slice slice = sliceEntry.getValue();\n        Map<String, Replica> newReplicas = slice.getReplicasCopy();\n\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          String rNodeName = replica.getNodeName();\n          if (rNodeName == null) {\n            throw new RuntimeException(\"Replica without node name! \" + replica);\n          }\n          if (rNodeName.equals(nodeName)) {\n            log.debug(\"Update replica state for \" + replica + \" to \" + Replica.State.DOWN.toString());\n            Map<String, Object> props = replica.shallowCopy();\n            props.put(ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n            Replica newReplica = new Replica(replica.getName(), props);\n            newReplicas.put(replica.getName(), newReplica);\n            needToUpdateCollection = true;\n          }\n        }\n\n        Slice newSlice = new Slice(slice.getName(), newReplicas, slice.shallowCopy());\n        slicesCopy.put(slice.getName(), newSlice);\n      }\n\n      if (needToUpdateCollection) {\n        zkWriteCommands.add(new ZkWriteCommand(collection, docCollection.copyWithSlices(slicesCopy)));\n      }\n    }\n\n    return zkWriteCommands;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4abf821a41a2fdca2a1dea148999931d22e20529","date":1587749643,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/NodeMutator#downNode(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/NodeMutator#downNode(ClusterState,ZkNodeProps).mjava","sourceNew":"  public List<ZkWriteCommand> downNode(ClusterState clusterState, ZkNodeProps message) {\n    List<ZkWriteCommand> zkWriteCommands = new ArrayList<>();\n    String nodeName = message.getStr(ZkStateReader.NODE_NAME_PROP);\n\n    log.debug(\"DownNode state invoked for node: {}\", nodeName);\n\n    Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n    for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n      String collection = entry.getKey();\n      DocCollection docCollection = entry.getValue();\n\n      Map<String,Slice> slicesCopy = new LinkedHashMap<>(docCollection.getSlicesMap());\n\n      boolean needToUpdateCollection = false;\n      for (Entry<String, Slice> sliceEntry : slicesCopy.entrySet()) {\n        Slice slice = sliceEntry.getValue();\n        Map<String, Replica> newReplicas = slice.getReplicasCopy();\n\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          String rNodeName = replica.getNodeName();\n          if (rNodeName == null) {\n            throw new RuntimeException(\"Replica without node name! \" + replica);\n          }\n          if (rNodeName.equals(nodeName)) {\n            log.debug(\"Update replica state for {} to {}\", replica, Replica.State.DOWN);\n            Map<String, Object> props = replica.shallowCopy();\n            props.put(ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n            Replica newReplica = new Replica(replica.getName(), props, collection, slice.getName());\n            newReplicas.put(replica.getName(), newReplica);\n            needToUpdateCollection = true;\n          }\n        }\n\n        Slice newSlice = new Slice(slice.getName(), newReplicas, slice.shallowCopy(),collection);\n        slicesCopy.put(slice.getName(), newSlice);\n      }\n\n      if (needToUpdateCollection) {\n        zkWriteCommands.add(new ZkWriteCommand(collection, docCollection.copyWithSlices(slicesCopy)));\n      }\n    }\n\n    return zkWriteCommands;\n  }\n\n","sourceOld":"  public List<ZkWriteCommand> downNode(ClusterState clusterState, ZkNodeProps message) {\n    List<ZkWriteCommand> zkWriteCommands = new ArrayList<>();\n    String nodeName = message.getStr(ZkStateReader.NODE_NAME_PROP);\n\n    log.debug(\"DownNode state invoked for node: \" + nodeName);\n\n    Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n    for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n      String collection = entry.getKey();\n      DocCollection docCollection = entry.getValue();\n\n      Map<String,Slice> slicesCopy = new LinkedHashMap<>(docCollection.getSlicesMap());\n\n      boolean needToUpdateCollection = false;\n      for (Entry<String, Slice> sliceEntry : slicesCopy.entrySet()) {\n        Slice slice = sliceEntry.getValue();\n        Map<String, Replica> newReplicas = slice.getReplicasCopy();\n\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          String rNodeName = replica.getNodeName();\n          if (rNodeName == null) {\n            throw new RuntimeException(\"Replica without node name! \" + replica);\n          }\n          if (rNodeName.equals(nodeName)) {\n            log.debug(\"Update replica state for \" + replica + \" to \" + Replica.State.DOWN.toString());\n            Map<String, Object> props = replica.shallowCopy();\n            props.put(ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n            Replica newReplica = new Replica(replica.getName(), props, collection, slice.getName());\n            newReplicas.put(replica.getName(), newReplica);\n            needToUpdateCollection = true;\n          }\n        }\n\n        Slice newSlice = new Slice(slice.getName(), newReplicas, slice.shallowCopy(),collection);\n        slicesCopy.put(slice.getName(), newSlice);\n      }\n\n      if (needToUpdateCollection) {\n        zkWriteCommands.add(new ZkWriteCommand(collection, docCollection.copyWithSlices(slicesCopy)));\n      }\n    }\n\n    return zkWriteCommands;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd","date":1594731683,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/NodeMutator#downNode(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/NodeMutator#downNode(ClusterState,ZkNodeProps).mjava","sourceNew":"  public List<ZkWriteCommand> downNode(ClusterState clusterState, ZkNodeProps message) {\n    List<ZkWriteCommand> zkWriteCommands = new ArrayList<>();\n    String nodeName = message.getStr(ZkStateReader.NODE_NAME_PROP);\n\n    log.debug(\"DownNode state invoked for node: {}\", nodeName);\n\n    Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n    for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n      String collection = entry.getKey();\n      DocCollection docCollection = entry.getValue();\n\n      Map<String,Slice> slicesCopy = new LinkedHashMap<>(docCollection.getSlicesMap());\n\n      boolean needToUpdateCollection = false;\n      for (Entry<String, Slice> sliceEntry : slicesCopy.entrySet()) {\n        Slice slice = sliceEntry.getValue();\n        Map<String, Replica> newReplicas = slice.getReplicasCopy();\n\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          String rNodeName = replica.getNodeName();\n          if (rNodeName == null) {\n            throw new RuntimeException(\"Replica without node name! \" + replica);\n          }\n          if (rNodeName.equals(nodeName)) {\n            log.debug(\"Update replica state for {} to {}\", replica, Replica.State.DOWN);\n            Map<String, Object> props = replica.shallowCopy();\n            Replica newReplica = new Replica(replica.getName(), replica.node, replica.collection, slice.getName(), replica.core,\n                Replica.State.DOWN, replica.type, props);\n            newReplicas.put(replica.getName(), newReplica);\n            needToUpdateCollection = true;\n          }\n        }\n\n        Slice newSlice = new Slice(slice.getName(), newReplicas, slice.shallowCopy(),collection);\n        slicesCopy.put(slice.getName(), newSlice);\n      }\n\n      if (needToUpdateCollection) {\n        zkWriteCommands.add(new ZkWriteCommand(collection, docCollection.copyWithSlices(slicesCopy)));\n      }\n    }\n\n    return zkWriteCommands;\n  }\n\n","sourceOld":"  public List<ZkWriteCommand> downNode(ClusterState clusterState, ZkNodeProps message) {\n    List<ZkWriteCommand> zkWriteCommands = new ArrayList<>();\n    String nodeName = message.getStr(ZkStateReader.NODE_NAME_PROP);\n\n    log.debug(\"DownNode state invoked for node: {}\", nodeName);\n\n    Map<String, DocCollection> collections = clusterState.getCollectionsMap();\n    for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n      String collection = entry.getKey();\n      DocCollection docCollection = entry.getValue();\n\n      Map<String,Slice> slicesCopy = new LinkedHashMap<>(docCollection.getSlicesMap());\n\n      boolean needToUpdateCollection = false;\n      for (Entry<String, Slice> sliceEntry : slicesCopy.entrySet()) {\n        Slice slice = sliceEntry.getValue();\n        Map<String, Replica> newReplicas = slice.getReplicasCopy();\n\n        Collection<Replica> replicas = slice.getReplicas();\n        for (Replica replica : replicas) {\n          String rNodeName = replica.getNodeName();\n          if (rNodeName == null) {\n            throw new RuntimeException(\"Replica without node name! \" + replica);\n          }\n          if (rNodeName.equals(nodeName)) {\n            log.debug(\"Update replica state for {} to {}\", replica, Replica.State.DOWN);\n            Map<String, Object> props = replica.shallowCopy();\n            props.put(ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n            Replica newReplica = new Replica(replica.getName(), props, collection, slice.getName());\n            newReplicas.put(replica.getName(), newReplica);\n            needToUpdateCollection = true;\n          }\n        }\n\n        Slice newSlice = new Slice(slice.getName(), newReplicas, slice.shallowCopy(),collection);\n        slicesCopy.put(slice.getName(), newSlice);\n      }\n\n      if (needToUpdateCollection) {\n        zkWriteCommands.add(new ZkWriteCommand(collection, docCollection.copyWithSlices(slicesCopy)));\n      }\n    }\n\n    return zkWriteCommands;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3aa683bba99315838c968fefedf3d74f44aa993":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8","6681d02f2302c363be938426e68f8dfd090cc1bf"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"73450c0955930295d34703e7ddbfc6973b7a121a":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","e9974f61802aea1d15849a1053f88f5e89fc32b4"],"7dc08f02757dd10637b16a5c65eaaef839a91a9a":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","73450c0955930295d34703e7ddbfc6973b7a121a"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["4820e7931c05e4eb25ac34917774fbacab59c3a3","04c8df3f10a676c3de5dbf390f17a2de2d45cacd"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["f7e7599efe704cd8a873a909e546525ace4b5502"],"4820e7931c05e4eb25ac34917774fbacab59c3a3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"04c8df3f10a676c3de5dbf390f17a2de2d45cacd":["4820e7931c05e4eb25ac34917774fbacab59c3a3"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7dc08f02757dd10637b16a5c65eaaef839a91a9a","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"6681d02f2302c363be938426e68f8dfd090cc1bf":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"a5d615d62cd8aff3690943d765e46942551f98b6":["73450c0955930295d34703e7ddbfc6973b7a121a"],"4abf821a41a2fdca2a1dea148999931d22e20529":["6681d02f2302c363be938426e68f8dfd090cc1bf"],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["4abf821a41a2fdca2a1dea148999931d22e20529"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","73450c0955930295d34703e7ddbfc6973b7a121a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["73450c0955930295d34703e7ddbfc6973b7a121a","a5d615d62cd8aff3690943d765e46942551f98b6"],"e9974f61802aea1d15849a1053f88f5e89fc32b4":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"f7e7599efe704cd8a873a909e546525ace4b5502":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"d3aa683bba99315838c968fefedf3d74f44aa993":[],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"73450c0955930295d34703e7ddbfc6973b7a121a":["7dc08f02757dd10637b16a5c65eaaef839a91a9a","a5d615d62cd8aff3690943d765e46942551f98b6","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"7dc08f02757dd10637b16a5c65eaaef839a91a9a":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["73450c0955930295d34703e7ddbfc6973b7a121a","7dc08f02757dd10637b16a5c65eaaef839a91a9a","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","e9974f61802aea1d15849a1053f88f5e89fc32b4"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["d3aa683bba99315838c968fefedf3d74f44aa993","6681d02f2302c363be938426e68f8dfd090cc1bf"],"4820e7931c05e4eb25ac34917774fbacab59c3a3":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","04c8df3f10a676c3de5dbf390f17a2de2d45cacd"],"04c8df3f10a676c3de5dbf390f17a2de2d45cacd":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"6681d02f2302c363be938426e68f8dfd090cc1bf":["d3aa683bba99315838c968fefedf3d74f44aa993","4abf821a41a2fdca2a1dea148999931d22e20529"],"a5d615d62cd8aff3690943d765e46942551f98b6":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4abf821a41a2fdca2a1dea148999931d22e20529":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","f7e7599efe704cd8a873a909e546525ace4b5502"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4820e7931c05e4eb25ac34917774fbacab59c3a3"],"e9974f61802aea1d15849a1053f88f5e89fc32b4":["73450c0955930295d34703e7ddbfc6973b7a121a"],"f7e7599efe704cd8a873a909e546525ace4b5502":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3aa683bba99315838c968fefedf3d74f44aa993","54ca69905c5d9d1529286f06ab1d12c68f6c13cb","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}