{"path":"lucene/sandbox/src/java/org/apache/lucene/document/NearestNeighbor.NearestVisitor#visit(int,byte[]).mjava","commits":[{"id":"b01431682e11036a1a7d757a3fa7c1f903fb2c45","date":1460646145,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/NearestNeighbor.NearestVisitor#visit(int,byte[]).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void visit(int docID, byte[] packedValue) {\n      //System.out.println(\"visit docID=\" + docID + \" liveDocs=\" + curLiveDocs);\n\n      if (curLiveDocs != null && curLiveDocs.get(docID) == false) {\n        return;\n      }\n\n      // TODO: work in int space, use haversinSortKey\n\n      double docLatitude = decodeLatitude(packedValue, 0);\n      double docLongitude = decodeLongitude(packedValue, Integer.BYTES);\n\n      // test bounding box\n      if (docLatitude < minLat || docLatitude > maxLat) {\n        return;\n      }\n      if ((docLongitude < minLon || docLongitude > maxLon) && (docLongitude < minLon2)) {\n        return;\n      }\n\n      pointCheckCount++;\n\n      double distanceMeters = SloppyMath.haversinMeters(pointLat, pointLon, docLatitude, docLongitude);\n\n      //System.out.println(\"    visit docID=\" + docID + \" distanceMeters=\" + distanceMeters + \" docLat=\" + docLatitude + \" docLon=\" + docLongitude);\n\n      int fullDocID = curDocBase + docID;\n\n      if (hitQueue.size() == topN) {\n        // queue already full\n        NearestHit hit = hitQueue.peek();\n        //System.out.println(\"      bottom distanceMeters=\" + hit.distanceMeters);\n        // we don't collect docs in order here, so we must also test the tie-break case ourselves:\n        if (distanceMeters < hit.distanceMeters || (distanceMeters == hit.distanceMeters && fullDocID < hit.docID)) {\n          hitQueue.poll();\n          hit.docID = fullDocID;\n          hit.distanceMeters = distanceMeters;\n          hitQueue.offer(hit);\n          //System.out.println(\"      ** keep2, now bottom=\" + hit);\n          maybeUpdateBBox();\n        }\n        \n      } else {\n        NearestHit hit = new NearestHit();\n        hit.docID = fullDocID;\n        hit.distanceMeters = distanceMeters;\n        hitQueue.offer(hit);\n        //System.out.println(\"      ** keep1, now bottom=\" + hit);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c728c2c4e564b70110b013139d764abe136033f2","date":1460649910,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/NearestNeighbor.NearestVisitor#visit(int,byte[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/NearestNeighbor.NearestVisitor#visit(int,byte[]).mjava","sourceNew":"    @Override\n    public void visit(int docID, byte[] packedValue) {\n      //System.out.println(\"visit docID=\" + docID + \" liveDocs=\" + curLiveDocs);\n\n      if (curLiveDocs != null && curLiveDocs.get(docID) == false) {\n        return;\n      }\n\n      // TODO: work in int space, use haversinSortKey\n\n      double docLatitude = decodeLatitude(packedValue, 0);\n      double docLongitude = decodeLongitude(packedValue, Integer.BYTES);\n\n      // test bounding box\n      if (docLatitude < minLat || docLatitude > maxLat) {\n        return;\n      }\n      if ((docLongitude < minLon || docLongitude > maxLon) && (docLongitude < minLon2)) {\n        return;\n      }\n\n      double distanceMeters = SloppyMath.haversinMeters(pointLat, pointLon, docLatitude, docLongitude);\n\n      //System.out.println(\"    visit docID=\" + docID + \" distanceMeters=\" + distanceMeters + \" docLat=\" + docLatitude + \" docLon=\" + docLongitude);\n\n      int fullDocID = curDocBase + docID;\n\n      if (hitQueue.size() == topN) {\n        // queue already full\n        NearestHit hit = hitQueue.peek();\n        //System.out.println(\"      bottom distanceMeters=\" + hit.distanceMeters);\n        // we don't collect docs in order here, so we must also test the tie-break case ourselves:\n        if (distanceMeters < hit.distanceMeters || (distanceMeters == hit.distanceMeters && fullDocID < hit.docID)) {\n          hitQueue.poll();\n          hit.docID = fullDocID;\n          hit.distanceMeters = distanceMeters;\n          hitQueue.offer(hit);\n          //System.out.println(\"      ** keep2, now bottom=\" + hit);\n          maybeUpdateBBox();\n        }\n        \n      } else {\n        NearestHit hit = new NearestHit();\n        hit.docID = fullDocID;\n        hit.distanceMeters = distanceMeters;\n        hitQueue.offer(hit);\n        //System.out.println(\"      ** keep1, now bottom=\" + hit);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void visit(int docID, byte[] packedValue) {\n      //System.out.println(\"visit docID=\" + docID + \" liveDocs=\" + curLiveDocs);\n\n      if (curLiveDocs != null && curLiveDocs.get(docID) == false) {\n        return;\n      }\n\n      // TODO: work in int space, use haversinSortKey\n\n      double docLatitude = decodeLatitude(packedValue, 0);\n      double docLongitude = decodeLongitude(packedValue, Integer.BYTES);\n\n      // test bounding box\n      if (docLatitude < minLat || docLatitude > maxLat) {\n        return;\n      }\n      if ((docLongitude < minLon || docLongitude > maxLon) && (docLongitude < minLon2)) {\n        return;\n      }\n\n      pointCheckCount++;\n\n      double distanceMeters = SloppyMath.haversinMeters(pointLat, pointLon, docLatitude, docLongitude);\n\n      //System.out.println(\"    visit docID=\" + docID + \" distanceMeters=\" + distanceMeters + \" docLat=\" + docLatitude + \" docLon=\" + docLongitude);\n\n      int fullDocID = curDocBase + docID;\n\n      if (hitQueue.size() == topN) {\n        // queue already full\n        NearestHit hit = hitQueue.peek();\n        //System.out.println(\"      bottom distanceMeters=\" + hit.distanceMeters);\n        // we don't collect docs in order here, so we must also test the tie-break case ourselves:\n        if (distanceMeters < hit.distanceMeters || (distanceMeters == hit.distanceMeters && fullDocID < hit.docID)) {\n          hitQueue.poll();\n          hit.docID = fullDocID;\n          hit.distanceMeters = distanceMeters;\n          hitQueue.offer(hit);\n          //System.out.println(\"      ** keep2, now bottom=\" + hit);\n          maybeUpdateBBox();\n        }\n        \n      } else {\n        NearestHit hit = new NearestHit();\n        hit.docID = fullDocID;\n        hit.distanceMeters = distanceMeters;\n        hitQueue.offer(hit);\n        //System.out.println(\"      ** keep1, now bottom=\" + hit);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"88b0212386fe531136816706dc37dc49b9dbf7dc","date":1532560226,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/NearestNeighbor.NearestVisitor#visit(int,byte[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/NearestNeighbor.NearestVisitor#visit(int,byte[]).mjava","sourceNew":"    @Override\n    public void visit(int docID, byte[] packedValue) {\n      //System.out.println(\"visit docID=\" + docID + \" liveDocs=\" + curLiveDocs);\n\n      if (curLiveDocs != null && curLiveDocs.get(docID) == false) {\n        return;\n      }\n\n      // TODO: work in int space, use haversinSortKey\n\n      double docLatitude = decodeLatitude(packedValue, 0);\n      double docLongitude = decodeLongitude(packedValue, Integer.BYTES);\n\n      // test bounding box\n      if (docLatitude < minLat || docLatitude > maxLat) {\n        return;\n      }\n      if ((docLongitude < minLon || docLongitude > maxLon) && (docLongitude < minLon2)) {\n        return;\n      }\n\n      double distanceMeters = SloppyMath.haversinMeters(pointLat, pointLon, docLatitude, docLongitude);\n\n      //System.out.println(\"    visit docID=\" + docID + \" distanceMeters=\" + distanceMeters + \" docLat=\" + docLatitude + \" docLon=\" + docLongitude);\n\n      int fullDocID = curDocBase + docID;\n\n      if (hitQueue.size() == topN) {\n        // queue already full\n        NearestHit hit = hitQueue.peek();\n        //System.out.println(\"      bottom distanceMeters=\" + hit.distanceMeters);\n        // we don't collect docs in order here, so we must also test the tie-break case ourselves:\n        if (distanceMeters < hit.distanceMeters || (distanceMeters == hit.distanceMeters && fullDocID < hit.docID)) {\n          hitQueue.poll();\n          hit.docID = fullDocID;\n          hit.distanceMeters = distanceMeters;\n          hitQueue.offer(hit);\n          //System.out.println(\"      ** keep2, now bottom=\" + hit);\n          maybeUpdateBBox();\n        }\n        \n      } else {\n        NearestHit hit = new NearestHit();\n        hit.docID = fullDocID;\n        hit.distanceMeters = distanceMeters;\n        hitQueue.offer(hit);\n        //System.out.println(\"      ** keep1, now bottom=\" + hit);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void visit(int docID, byte[] packedValue) {\n      //System.out.println(\"visit docID=\" + docID + \" liveDocs=\" + curLiveDocs);\n\n      if (curLiveDocs != null && curLiveDocs.get(docID) == false) {\n        return;\n      }\n\n      // TODO: work in int space, use haversinSortKey\n\n      double docLatitude = decodeLatitude(packedValue, 0);\n      double docLongitude = decodeLongitude(packedValue, Integer.BYTES);\n\n      // test bounding box\n      if (docLatitude < minLat || docLatitude > maxLat) {\n        return;\n      }\n      if ((docLongitude < minLon || docLongitude > maxLon) && (docLongitude < minLon2)) {\n        return;\n      }\n\n      double distanceMeters = SloppyMath.haversinMeters(pointLat, pointLon, docLatitude, docLongitude);\n\n      //System.out.println(\"    visit docID=\" + docID + \" distanceMeters=\" + distanceMeters + \" docLat=\" + docLatitude + \" docLon=\" + docLongitude);\n\n      int fullDocID = curDocBase + docID;\n\n      if (hitQueue.size() == topN) {\n        // queue already full\n        NearestHit hit = hitQueue.peek();\n        //System.out.println(\"      bottom distanceMeters=\" + hit.distanceMeters);\n        // we don't collect docs in order here, so we must also test the tie-break case ourselves:\n        if (distanceMeters < hit.distanceMeters || (distanceMeters == hit.distanceMeters && fullDocID < hit.docID)) {\n          hitQueue.poll();\n          hit.docID = fullDocID;\n          hit.distanceMeters = distanceMeters;\n          hitQueue.offer(hit);\n          //System.out.println(\"      ** keep2, now bottom=\" + hit);\n          maybeUpdateBBox();\n        }\n        \n      } else {\n        NearestHit hit = new NearestHit();\n        hit.docID = fullDocID;\n        hit.distanceMeters = distanceMeters;\n        hitQueue.offer(hit);\n        //System.out.println(\"      ** keep1, now bottom=\" + hit);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b01431682e11036a1a7d757a3fa7c1f903fb2c45":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"88b0212386fe531136816706dc37dc49b9dbf7dc":["c728c2c4e564b70110b013139d764abe136033f2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c728c2c4e564b70110b013139d764abe136033f2":["b01431682e11036a1a7d757a3fa7c1f903fb2c45"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["88b0212386fe531136816706dc37dc49b9dbf7dc"]},"commit2Childs":{"b01431682e11036a1a7d757a3fa7c1f903fb2c45":["c728c2c4e564b70110b013139d764abe136033f2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b01431682e11036a1a7d757a3fa7c1f903fb2c45"],"88b0212386fe531136816706dc37dc49b9dbf7dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c728c2c4e564b70110b013139d764abe136033f2":["88b0212386fe531136816706dc37dc49b9dbf7dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}