{"path":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#duellReaders(CompositeReader,LeafReader).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#duellReaders(CompositeReader,LeafReader).mjava","pathOld":"/dev/null","sourceNew":"  private void duellReaders(CompositeReader other, LeafReader memIndexReader)\n      throws IOException {\n    LeafReader competitor = SlowCompositeReaderWrapper.wrap(other);\n    Fields memFields = memIndexReader.fields();\n    for (String field : competitor.fields()) {\n      Terms memTerms = memFields.terms(field);\n      Terms iwTerms = memIndexReader.terms(field);\n      if (iwTerms == null) {\n        assertNull(memTerms);\n      } else {\n        NumericDocValues normValues = competitor.getNormValues(field);\n        NumericDocValues memNormValues = memIndexReader.getNormValues(field);\n        if (normValues != null) {\n          // mem idx always computes norms on the fly\n          assertNotNull(memNormValues);\n          assertEquals(normValues.get(0), memNormValues.get(0));\n        }\n          \n        assertNotNull(memTerms);\n        assertEquals(iwTerms.getDocCount(), memTerms.getDocCount());\n        assertEquals(iwTerms.getSumDocFreq(), memTerms.getSumDocFreq());\n        assertEquals(iwTerms.getSumTotalTermFreq(), memTerms.getSumTotalTermFreq());\n        TermsEnum iwTermsIter = iwTerms.iterator(null);\n        TermsEnum memTermsIter = memTerms.iterator(null);\n        if (iwTerms.hasPositions()) {\n          final boolean offsets = iwTerms.hasOffsets() && memTerms.hasOffsets();\n         \n          while(iwTermsIter.next() != null) {\n            assertNotNull(memTermsIter.next());\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            DocsAndPositionsEnum iwDocsAndPos = iwTermsIter.docsAndPositions(null, null);\n            DocsAndPositionsEnum memDocsAndPos = memTermsIter.docsAndPositions(null, null);\n            while(iwDocsAndPos.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n              for (int i = 0; i < iwDocsAndPos.freq(); i++) {\n                assertEquals(\"term: \" + iwTermsIter.term().utf8ToString(), iwDocsAndPos.nextPosition(), memDocsAndPos.nextPosition());\n                if (offsets) {\n                  assertEquals(iwDocsAndPos.startOffset(), memDocsAndPos.startOffset());\n                  assertEquals(iwDocsAndPos.endOffset(), memDocsAndPos.endOffset());\n                }\n              }\n              \n            }\n            \n          }\n        } else {\n          while(iwTermsIter.next() != null) {\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            DocsEnum iwDocsAndPos = iwTermsIter.docs(null, null);\n            DocsEnum memDocsAndPos = memTermsIter.docs(null, null);\n            while(iwDocsAndPos.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n            }\n          }\n        }\n      }\n      \n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"761333d77c7f29123c00c93b107b743f32f012e6","date":1411986072,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#duellReaders(CompositeReader,LeafReader).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#duellReaders(CompositeReader,LeafReader).mjava","sourceNew":"  private void duellReaders(CompositeReader other, LeafReader memIndexReader)\n      throws IOException {\n    LeafReader competitor = SlowCompositeReaderWrapper.wrap(other);\n    Fields memFields = memIndexReader.fields();\n    for (String field : competitor.fields()) {\n      Terms memTerms = memFields.terms(field);\n      Terms iwTerms = memIndexReader.terms(field);\n      if (iwTerms == null) {\n        assertNull(memTerms);\n      } else {\n        NumericDocValues normValues = competitor.getNormValues(field);\n        NumericDocValues memNormValues = memIndexReader.getNormValues(field);\n        if (normValues != null) {\n          // mem idx always computes norms on the fly\n          assertNotNull(memNormValues);\n          assertEquals(normValues.get(0), memNormValues.get(0));\n        }\n          \n        assertNotNull(memTerms);\n        assertEquals(iwTerms.getDocCount(), memTerms.getDocCount());\n        assertEquals(iwTerms.getSumDocFreq(), memTerms.getSumDocFreq());\n        assertEquals(iwTerms.getSumTotalTermFreq(), memTerms.getSumTotalTermFreq());\n        TermsEnum iwTermsIter = iwTerms.iterator(null);\n        TermsEnum memTermsIter = memTerms.iterator(null);\n        if (iwTerms.hasPositions()) {\n          final boolean offsets = iwTerms.hasOffsets() && memTerms.hasOffsets();\n         \n          while(iwTermsIter.next() != null) {\n            assertNotNull(memTermsIter.next());\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            DocsAndPositionsEnum iwDocsAndPos = iwTermsIter.docsAndPositions(null, null);\n            DocsAndPositionsEnum memDocsAndPos = memTermsIter.docsAndPositions(null, null);\n            while(iwDocsAndPos.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n              for (int i = 0; i < iwDocsAndPos.freq(); i++) {\n                assertEquals(\"term: \" + iwTermsIter.term().utf8ToString(), iwDocsAndPos.nextPosition(), memDocsAndPos.nextPosition());\n                if (offsets) {\n                  assertEquals(iwDocsAndPos.startOffset(), memDocsAndPos.startOffset());\n                  assertEquals(iwDocsAndPos.endOffset(), memDocsAndPos.endOffset());\n                }\n              }\n              \n            }\n            \n          }\n        } else {\n          while(iwTermsIter.next() != null) {\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            DocsEnum iwDocsAndPos = iwTermsIter.docs(null, null);\n            DocsEnum memDocsAndPos = memTermsIter.docs(null, null);\n            while(iwDocsAndPos.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n            }\n          }\n        }\n      }\n      \n    }\n  }\n\n","sourceOld":"  private void duellReaders(CompositeReader other, LeafReader memIndexReader)\n      throws IOException {\n    LeafReader competitor = SlowCompositeReaderWrapper.wrap(other);\n    Fields memFields = memIndexReader.fields();\n    for (String field : competitor.fields()) {\n      Terms memTerms = memFields.terms(field);\n      Terms iwTerms = memIndexReader.terms(field);\n      if (iwTerms == null) {\n        assertNull(memTerms);\n      } else {\n        NumericDocValues normValues = competitor.getNormValues(field);\n        NumericDocValues memNormValues = memIndexReader.getNormValues(field);\n        if (normValues != null) {\n          // mem idx always computes norms on the fly\n          assertNotNull(memNormValues);\n          assertEquals(normValues.get(0), memNormValues.get(0));\n        }\n          \n        assertNotNull(memTerms);\n        assertEquals(iwTerms.getDocCount(), memTerms.getDocCount());\n        assertEquals(iwTerms.getSumDocFreq(), memTerms.getSumDocFreq());\n        assertEquals(iwTerms.getSumTotalTermFreq(), memTerms.getSumTotalTermFreq());\n        TermsEnum iwTermsIter = iwTerms.iterator(null);\n        TermsEnum memTermsIter = memTerms.iterator(null);\n        if (iwTerms.hasPositions()) {\n          final boolean offsets = iwTerms.hasOffsets() && memTerms.hasOffsets();\n         \n          while(iwTermsIter.next() != null) {\n            assertNotNull(memTermsIter.next());\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            DocsAndPositionsEnum iwDocsAndPos = iwTermsIter.docsAndPositions(null, null);\n            DocsAndPositionsEnum memDocsAndPos = memTermsIter.docsAndPositions(null, null);\n            while(iwDocsAndPos.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n              for (int i = 0; i < iwDocsAndPos.freq(); i++) {\n                assertEquals(\"term: \" + iwTermsIter.term().utf8ToString(), iwDocsAndPos.nextPosition(), memDocsAndPos.nextPosition());\n                if (offsets) {\n                  assertEquals(iwDocsAndPos.startOffset(), memDocsAndPos.startOffset());\n                  assertEquals(iwDocsAndPos.endOffset(), memDocsAndPos.endOffset());\n                }\n              }\n              \n            }\n            \n          }\n        } else {\n          while(iwTermsIter.next() != null) {\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            DocsEnum iwDocsAndPos = iwTermsIter.docs(null, null);\n            DocsEnum memDocsAndPos = memTermsIter.docs(null, null);\n            while(iwDocsAndPos.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n            }\n          }\n        }\n      }\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#duellReaders(CompositeReader,LeafReader).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#duellReaders(CompositeReader,LeafReader).mjava","sourceNew":"  private void duellReaders(CompositeReader other, LeafReader memIndexReader)\n      throws IOException {\n    LeafReader competitor = SlowCompositeReaderWrapper.wrap(other);\n    Fields memFields = memIndexReader.fields();\n    for (String field : competitor.fields()) {\n      Terms memTerms = memFields.terms(field);\n      Terms iwTerms = memIndexReader.terms(field);\n      if (iwTerms == null) {\n        assertNull(memTerms);\n      } else {\n        NumericDocValues normValues = competitor.getNormValues(field);\n        NumericDocValues memNormValues = memIndexReader.getNormValues(field);\n        if (normValues != null) {\n          // mem idx always computes norms on the fly\n          assertNotNull(memNormValues);\n          assertEquals(normValues.get(0), memNormValues.get(0));\n        }\n          \n        assertNotNull(memTerms);\n        assertEquals(iwTerms.getDocCount(), memTerms.getDocCount());\n        assertEquals(iwTerms.getSumDocFreq(), memTerms.getSumDocFreq());\n        assertEquals(iwTerms.getSumTotalTermFreq(), memTerms.getSumTotalTermFreq());\n        TermsEnum iwTermsIter = iwTerms.iterator(null);\n        TermsEnum memTermsIter = memTerms.iterator(null);\n        if (iwTerms.hasPositions()) {\n          final boolean offsets = iwTerms.hasOffsets() && memTerms.hasOffsets();\n         \n          while(iwTermsIter.next() != null) {\n            assertNotNull(memTermsIter.next());\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            DocsAndPositionsEnum iwDocsAndPos = iwTermsIter.docsAndPositions(null, null);\n            DocsAndPositionsEnum memDocsAndPos = memTermsIter.docsAndPositions(null, null);\n            while(iwDocsAndPos.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n              for (int i = 0; i < iwDocsAndPos.freq(); i++) {\n                assertEquals(\"term: \" + iwTermsIter.term().utf8ToString(), iwDocsAndPos.nextPosition(), memDocsAndPos.nextPosition());\n                if (offsets) {\n                  assertEquals(iwDocsAndPos.startOffset(), memDocsAndPos.startOffset());\n                  assertEquals(iwDocsAndPos.endOffset(), memDocsAndPos.endOffset());\n                }\n              }\n              \n            }\n            \n          }\n        } else {\n          while(iwTermsIter.next() != null) {\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            DocsEnum iwDocsAndPos = iwTermsIter.docs(null, null);\n            DocsEnum memDocsAndPos = memTermsIter.docs(null, null);\n            while(iwDocsAndPos.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n            }\n          }\n        }\n      }\n      \n    }\n  }\n\n","sourceOld":"  private void duellReaders(CompositeReader other, LeafReader memIndexReader)\n      throws IOException {\n    LeafReader competitor = SlowCompositeReaderWrapper.wrap(other);\n    Fields memFields = memIndexReader.fields();\n    for (String field : competitor.fields()) {\n      Terms memTerms = memFields.terms(field);\n      Terms iwTerms = memIndexReader.terms(field);\n      if (iwTerms == null) {\n        assertNull(memTerms);\n      } else {\n        NumericDocValues normValues = competitor.getNormValues(field);\n        NumericDocValues memNormValues = memIndexReader.getNormValues(field);\n        if (normValues != null) {\n          // mem idx always computes norms on the fly\n          assertNotNull(memNormValues);\n          assertEquals(normValues.get(0), memNormValues.get(0));\n        }\n          \n        assertNotNull(memTerms);\n        assertEquals(iwTerms.getDocCount(), memTerms.getDocCount());\n        assertEquals(iwTerms.getSumDocFreq(), memTerms.getSumDocFreq());\n        assertEquals(iwTerms.getSumTotalTermFreq(), memTerms.getSumTotalTermFreq());\n        TermsEnum iwTermsIter = iwTerms.iterator(null);\n        TermsEnum memTermsIter = memTerms.iterator(null);\n        if (iwTerms.hasPositions()) {\n          final boolean offsets = iwTerms.hasOffsets() && memTerms.hasOffsets();\n         \n          while(iwTermsIter.next() != null) {\n            assertNotNull(memTermsIter.next());\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            DocsAndPositionsEnum iwDocsAndPos = iwTermsIter.docsAndPositions(null, null);\n            DocsAndPositionsEnum memDocsAndPos = memTermsIter.docsAndPositions(null, null);\n            while(iwDocsAndPos.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n              for (int i = 0; i < iwDocsAndPos.freq(); i++) {\n                assertEquals(\"term: \" + iwTermsIter.term().utf8ToString(), iwDocsAndPos.nextPosition(), memDocsAndPos.nextPosition());\n                if (offsets) {\n                  assertEquals(iwDocsAndPos.startOffset(), memDocsAndPos.startOffset());\n                  assertEquals(iwDocsAndPos.endOffset(), memDocsAndPos.endOffset());\n                }\n              }\n              \n            }\n            \n          }\n        } else {\n          while(iwTermsIter.next() != null) {\n            assertEquals(iwTermsIter.term(), memTermsIter.term());\n            DocsEnum iwDocsAndPos = iwTermsIter.docs(null, null);\n            DocsEnum memDocsAndPos = memTermsIter.docs(null, null);\n            while(iwDocsAndPos.nextDoc() != DocsAndPositionsEnum.NO_MORE_DOCS) {\n              assertEquals(iwDocsAndPos.docID(), memDocsAndPos.nextDoc());\n              assertEquals(iwDocsAndPos.freq(), memDocsAndPos.freq());\n            }\n          }\n        }\n      }\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["c9fb5f46e264daf5ba3860defe623a89d202dd87","761333d77c7f29123c00c93b107b743f32f012e6"],"761333d77c7f29123c00c93b107b743f32f012e6":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["761333d77c7f29123c00c93b107b743f32f012e6"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d9a47902d6207303f5ed3e7aaca62ca33433af66","761333d77c7f29123c00c93b107b743f32f012e6"],"761333d77c7f29123c00c93b107b743f32f012e6":["d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}