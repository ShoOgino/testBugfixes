{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#sortHeapPointWriter(HeapPointWriter,int).mjava","commits":[{"id":"9fc0d60683b47b5d922124c31f57c8b34734f9e6","date":1480846684,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#sortHeapPointWriter(HeapPointWriter,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Sort the heap writer by the specified dim */\n  private void sortHeapPointWriter(final HeapPointWriter writer, int dim) {\n    final int pointCount = Math.toIntExact(this.pointCount);\n    // Tie-break by docID:\n\n    // No need to tie break on ord, for the case where the same doc has the same value in a given dimension indexed more than once: it\n    // can't matter at search time since we don't write ords into the index:\n    new MSBRadixSorter(bytesPerDim + Integer.BYTES) {\n\n      @Override\n      protected int byteAt(int i, int k) {\n        assert k >= 0;\n        if (k < bytesPerDim) {\n          // dim bytes\n          int block = i / writer.valuesPerBlock;\n          int index = i % writer.valuesPerBlock;\n          return writer.blocks.get(block)[index * packedBytesLength + dim * bytesPerDim + k] & 0xff;\n        } else {\n          // doc id\n          int s = 3 - (k - bytesPerDim);\n          return (writer.docIDs[i] >>> (s * 8)) & 0xff;\n        }\n      }\n\n      @Override\n      protected void swap(int i, int j) {\n        int docID = writer.docIDs[i];\n        writer.docIDs[i] = writer.docIDs[j];\n        writer.docIDs[j] = docID;\n\n        if (singleValuePerDoc == false) {\n          if (longOrds) {\n            long ord = writer.ordsLong[i];\n            writer.ordsLong[i] = writer.ordsLong[j];\n            writer.ordsLong[j] = ord;\n          } else {\n            int ord = writer.ords[i];\n            writer.ords[i] = writer.ords[j];\n            writer.ords[j] = ord;\n          }\n        }\n\n        byte[] blockI = writer.blocks.get(i / writer.valuesPerBlock);\n        int indexI = (i % writer.valuesPerBlock) * packedBytesLength;\n        byte[] blockJ = writer.blocks.get(j / writer.valuesPerBlock);\n        int indexJ = (j % writer.valuesPerBlock) * packedBytesLength;\n\n        // scratch1 = values[i]\n        System.arraycopy(blockI, indexI, scratch1, 0, packedBytesLength);\n        // values[i] = values[j]\n        System.arraycopy(blockJ, indexJ, blockI, indexI, packedBytesLength);\n        // values[j] = scratch1\n        System.arraycopy(scratch1, 0, blockJ, indexJ, packedBytesLength);\n      }\n\n    }.sort(0, pointCount);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#sortHeapPointWriter(HeapPointWriter,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Sort the heap writer by the specified dim */\n  private void sortHeapPointWriter(final HeapPointWriter writer, int dim) {\n    final int pointCount = Math.toIntExact(this.pointCount);\n    // Tie-break by docID:\n\n    // No need to tie break on ord, for the case where the same doc has the same value in a given dimension indexed more than once: it\n    // can't matter at search time since we don't write ords into the index:\n    new MSBRadixSorter(bytesPerDim + Integer.BYTES) {\n\n      @Override\n      protected int byteAt(int i, int k) {\n        assert k >= 0;\n        if (k < bytesPerDim) {\n          // dim bytes\n          int block = i / writer.valuesPerBlock;\n          int index = i % writer.valuesPerBlock;\n          return writer.blocks.get(block)[index * packedBytesLength + dim * bytesPerDim + k] & 0xff;\n        } else {\n          // doc id\n          int s = 3 - (k - bytesPerDim);\n          return (writer.docIDs[i] >>> (s * 8)) & 0xff;\n        }\n      }\n\n      @Override\n      protected void swap(int i, int j) {\n        int docID = writer.docIDs[i];\n        writer.docIDs[i] = writer.docIDs[j];\n        writer.docIDs[j] = docID;\n\n        if (singleValuePerDoc == false) {\n          if (longOrds) {\n            long ord = writer.ordsLong[i];\n            writer.ordsLong[i] = writer.ordsLong[j];\n            writer.ordsLong[j] = ord;\n          } else {\n            int ord = writer.ords[i];\n            writer.ords[i] = writer.ords[j];\n            writer.ords[j] = ord;\n          }\n        }\n\n        byte[] blockI = writer.blocks.get(i / writer.valuesPerBlock);\n        int indexI = (i % writer.valuesPerBlock) * packedBytesLength;\n        byte[] blockJ = writer.blocks.get(j / writer.valuesPerBlock);\n        int indexJ = (j % writer.valuesPerBlock) * packedBytesLength;\n\n        // scratch1 = values[i]\n        System.arraycopy(blockI, indexI, scratch1, 0, packedBytesLength);\n        // values[i] = values[j]\n        System.arraycopy(blockJ, indexJ, blockI, indexI, packedBytesLength);\n        // values[j] = scratch1\n        System.arraycopy(scratch1, 0, blockJ, indexJ, packedBytesLength);\n      }\n\n    }.sort(0, pointCount);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78bdc7d6906146edb12a1a6c1f765ba680ed5124","date":1549523533,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#sortHeapPointWriter(HeapPointWriter,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#sortHeapPointWriter(HeapPointWriter,int).mjava","sourceNew":"  /** Sort the heap writer by the specified dim */\n  private void sortHeapPointWriter(final HeapPointWriter writer, int dim) {\n    final int pointCount = Math.toIntExact(writer.count());\n    // Tie-break by docID:\n\n    // No need to tie break on ord, for the case where the same doc has the same value in a given dimension indexed more than once: it\n    // can't matter at search time since we don't write ords into the index:\n    new MSBRadixSorter(bytesPerDim + Integer.BYTES) {\n\n      @Override\n      protected int byteAt(int i, int k) {\n        assert k >= 0;\n        if (k < bytesPerDim) {\n          // dim bytes\n          int block = i / writer.valuesPerBlock;\n          int index = i % writer.valuesPerBlock;\n          return writer.blocks.get(block)[index * packedBytesLength + dim * bytesPerDim + k] & 0xff;\n        } else {\n          // doc id\n          int s = 3 - (k - bytesPerDim);\n          return (writer.docIDs[i] >>> (s * 8)) & 0xff;\n        }\n      }\n\n      @Override\n      protected void swap(int i, int j) {\n        writer.swap(i, j);\n      }\n\n    }.sort(0, pointCount);\n  }\n\n","sourceOld":"  /** Sort the heap writer by the specified dim */\n  private void sortHeapPointWriter(final HeapPointWriter writer, int dim) {\n    final int pointCount = Math.toIntExact(this.pointCount);\n    // Tie-break by docID:\n\n    // No need to tie break on ord, for the case where the same doc has the same value in a given dimension indexed more than once: it\n    // can't matter at search time since we don't write ords into the index:\n    new MSBRadixSorter(bytesPerDim + Integer.BYTES) {\n\n      @Override\n      protected int byteAt(int i, int k) {\n        assert k >= 0;\n        if (k < bytesPerDim) {\n          // dim bytes\n          int block = i / writer.valuesPerBlock;\n          int index = i % writer.valuesPerBlock;\n          return writer.blocks.get(block)[index * packedBytesLength + dim * bytesPerDim + k] & 0xff;\n        } else {\n          // doc id\n          int s = 3 - (k - bytesPerDim);\n          return (writer.docIDs[i] >>> (s * 8)) & 0xff;\n        }\n      }\n\n      @Override\n      protected void swap(int i, int j) {\n        int docID = writer.docIDs[i];\n        writer.docIDs[i] = writer.docIDs[j];\n        writer.docIDs[j] = docID;\n\n        if (singleValuePerDoc == false) {\n          if (longOrds) {\n            long ord = writer.ordsLong[i];\n            writer.ordsLong[i] = writer.ordsLong[j];\n            writer.ordsLong[j] = ord;\n          } else {\n            int ord = writer.ords[i];\n            writer.ords[i] = writer.ords[j];\n            writer.ords[j] = ord;\n          }\n        }\n\n        byte[] blockI = writer.blocks.get(i / writer.valuesPerBlock);\n        int indexI = (i % writer.valuesPerBlock) * packedBytesLength;\n        byte[] blockJ = writer.blocks.get(j / writer.valuesPerBlock);\n        int indexJ = (j % writer.valuesPerBlock) * packedBytesLength;\n\n        // scratch1 = values[i]\n        System.arraycopy(blockI, indexI, scratch1, 0, packedBytesLength);\n        // values[i] = values[j]\n        System.arraycopy(blockJ, indexJ, blockI, indexI, packedBytesLength);\n        // values[j] = scratch1\n        System.arraycopy(scratch1, 0, blockJ, indexJ, packedBytesLength);\n      }\n\n    }.sort(0, pointCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a69ebf290ab26d026cc224e517e0d93d931ac87b","date":1549869083,"type":4,"author":"iverase","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#sortHeapPointWriter(HeapPointWriter,int).mjava","sourceNew":null,"sourceOld":"  /** Sort the heap writer by the specified dim */\n  private void sortHeapPointWriter(final HeapPointWriter writer, int dim) {\n    final int pointCount = Math.toIntExact(writer.count());\n    // Tie-break by docID:\n\n    // No need to tie break on ord, for the case where the same doc has the same value in a given dimension indexed more than once: it\n    // can't matter at search time since we don't write ords into the index:\n    new MSBRadixSorter(bytesPerDim + Integer.BYTES) {\n\n      @Override\n      protected int byteAt(int i, int k) {\n        assert k >= 0;\n        if (k < bytesPerDim) {\n          // dim bytes\n          int block = i / writer.valuesPerBlock;\n          int index = i % writer.valuesPerBlock;\n          return writer.blocks.get(block)[index * packedBytesLength + dim * bytesPerDim + k] & 0xff;\n        } else {\n          // doc id\n          int s = 3 - (k - bytesPerDim);\n          return (writer.docIDs[i] >>> (s * 8)) & 0xff;\n        }\n      }\n\n      @Override\n      protected void swap(int i, int j) {\n        writer.swap(i, j);\n      }\n\n    }.sort(0, pointCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"a69ebf290ab26d026cc224e517e0d93d931ac87b":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"],"9856095f7afb5a607bf5e65077615ed91273508c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a69ebf290ab26d026cc224e517e0d93d931ac87b"]},"commit2Childs":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["78bdc7d6906146edb12a1a6c1f765ba680ed5124","9856095f7afb5a607bf5e65077615ed91273508c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc0d60683b47b5d922124c31f57c8b34734f9e6","9856095f7afb5a607bf5e65077615ed91273508c"],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["a69ebf290ab26d026cc224e517e0d93d931ac87b"],"a69ebf290ab26d026cc224e517e0d93d931ac87b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}