{"path":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#doReloadTest(String).mjava","commits":[{"id":"dc6e48afbb50ae0a22fa76e226f04fd585532938","date":1371429211,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#doReloadTest(String).mjava","pathOld":"/dev/null","sourceNew":"  private void doReloadTest(String which) throws Exception {\n\n    CoreContainer cc = init(SOLR_XML_LOTS_SYSVARS, \"SystemVars1\", \"SystemVars2\");\n    try {\n      final CoreAdminHandler admin = new CoreAdminHandler(cc);\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.RELOAD.toString(),\n              CoreAdminParams.CORE, which),\n              resp);\n      assertNull(\"Exception on reload\", resp.getException());\n\n      origMatchesPersist(cc, new File(solrHomeDirectory, \"reload1.solr.xml\"));\n\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2eea68c999cd25f09e15e71eb2fd57b17f5eca59","date":1371837918,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#doReloadTest(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#doReloadTest(String).mjava","sourceNew":"  private void doReloadTest(String which) throws Exception {\n\n    CoreContainer cc = init(SOLR_XML_LOTS_SYSVARS, \"SystemVars1\", \"SystemVars2\");\n    try {\n      final CoreAdminHandler admin = new CoreAdminHandler(cc);\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.RELOAD.toString(),\n              CoreAdminParams.CORE, which),\n              resp);\n      assertNull(\"Exception on reload\", resp.getException());\n\n      persistContainedInOrig(cc, new File(solrHomeDirectory, \"reload1.solr.xml\"));\n\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n    }\n\n  }\n\n","sourceOld":"  private void doReloadTest(String which) throws Exception {\n\n    CoreContainer cc = init(SOLR_XML_LOTS_SYSVARS, \"SystemVars1\", \"SystemVars2\");\n    try {\n      final CoreAdminHandler admin = new CoreAdminHandler(cc);\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.RELOAD.toString(),\n              CoreAdminParams.CORE, which),\n              resp);\n      assertNull(\"Exception on reload\", resp.getException());\n\n      origMatchesPersist(cc, new File(solrHomeDirectory, \"reload1.solr.xml\"));\n\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e764e9a107f93be9fa3c922bc6a197b3eec387e","date":1373560501,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#doReloadTest(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#doReloadTest(String).mjava","sourceNew":"  private void doReloadTest(String which) throws Exception {\n\n    CoreContainer cc = init(SOLR_XML_LOTS_SYSVARS, \"SystemVars1\", \"SystemVars2\");\n    try {\n      final CoreAdminHandler admin = new CoreAdminHandler(cc);\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.RELOAD.toString(),\n              CoreAdminParams.CORE, which),\n              resp);\n      assertNull(\"Exception on reload\", resp.getException());\n\n      origMatchesPersist(cc, SOLR_XML_LOTS_SYSVARS);\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n    }\n\n  }\n\n","sourceOld":"  private void doReloadTest(String which) throws Exception {\n\n    CoreContainer cc = init(SOLR_XML_LOTS_SYSVARS, \"SystemVars1\", \"SystemVars2\");\n    try {\n      final CoreAdminHandler admin = new CoreAdminHandler(cc);\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.RELOAD.toString(),\n              CoreAdminParams.CORE, which),\n              resp);\n      assertNull(\"Exception on reload\", resp.getException());\n\n      persistContainedInOrig(cc, new File(solrHomeDirectory, \"reload1.solr.xml\"));\n\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#doReloadTest(String).mjava","pathOld":"/dev/null","sourceNew":"  private void doReloadTest(String which) throws Exception {\n\n    CoreContainer cc = init(SOLR_XML_LOTS_SYSVARS, \"SystemVars1\", \"SystemVars2\");\n    try {\n      final CoreAdminHandler admin = new CoreAdminHandler(cc);\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.RELOAD.toString(),\n              CoreAdminParams.CORE, which),\n              resp);\n      assertNull(\"Exception on reload\", resp.getException());\n\n      origMatchesPersist(cc, SOLR_XML_LOTS_SYSVARS);\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd44bec977a26a118d9e809e2de6f7edb5ca0f39","date":1421673929,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence#doReloadTest(String).mjava","sourceNew":null,"sourceOld":"  private void doReloadTest(String which) throws Exception {\n\n    CoreContainer cc = init(SOLR_XML_LOTS_SYSVARS, \"SystemVars1\", \"SystemVars2\");\n    try {\n      final CoreAdminHandler admin = new CoreAdminHandler(cc);\n      SolrQueryResponse resp = new SolrQueryResponse();\n      admin.handleRequestBody\n          (req(CoreAdminParams.ACTION,\n              CoreAdminParams.CoreAdminAction.RELOAD.toString(),\n              CoreAdminParams.CORE, which),\n              resp);\n      assertNull(\"Exception on reload\", resp.getException());\n\n      origMatchesPersist(cc, SOLR_XML_LOTS_SYSVARS);\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dc6e48afbb50ae0a22fa76e226f04fd585532938":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["2eea68c999cd25f09e15e71eb2fd57b17f5eca59"],"2eea68c999cd25f09e15e71eb2fd57b17f5eca59":["dc6e48afbb50ae0a22fa76e226f04fd585532938"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"]},"commit2Childs":{"dc6e48afbb50ae0a22fa76e226f04fd585532938":["2eea68c999cd25f09e15e71eb2fd57b17f5eca59"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dc6e48afbb50ae0a22fa76e226f04fd585532938","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["37a0f60745e53927c4c876cfe5b5a58170f0646c","fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"2eea68c999cd25f09e15e71eb2fd57b17f5eca59":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}