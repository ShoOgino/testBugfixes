{"path":"lucene/core/src/java/org/apache/lucene/search/MultiCollector#wrap(Collector...).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiCollector#wrap(Collector...).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiCollector#wrap(Collector...).mjava","sourceNew":"  /**\n   * Wraps a list of {@link Collector}s with a {@link MultiCollector}. This\n   * method works as follows:\n   * <ul>\n   * <li>Filters out the <code>null</code> collectors, so they are not used\n   * during search time.\n   * <li>If the input contains 1 real collector (i.e. non-<code>null</code> ),\n   * it is returned.\n   * <li>Otherwise the method returns a {@link MultiCollector} which wraps the\n   * non-<code>null</code> ones.\n   * </ul>\n   * \n   * @throws IllegalArgumentException\n   *           if either 0 collectors were input, or all collectors are\n   *           <code>null</code>.\n   */\n  public static Collector wrap(Collector... collectors) {\n    // For the user's convenience, we allow null collectors to be passed.\n    // However, to improve performance, these null collectors are found\n    // and dropped from the array we save for actual collection time.\n    int n = 0;\n    for (Collector c : collectors) {\n      if (c != null) {\n        n++;\n      }\n    }\n\n    if (n == 0) {\n      throw new IllegalArgumentException(\"At least 1 collector must not be null\");\n    } else if (n == 1) {\n      // only 1 Collector - return it.\n      Collector col = null;\n      for (Collector c : collectors) {\n        if (c != null) {\n          col = c;\n          break;\n        }\n      }\n      return col;\n    } else if (n == collectors.length) {\n      return new MultiCollector(collectors);\n    } else {\n      Collector[] colls = new Collector[n];\n      n = 0;\n      for (Collector c : collectors) {\n        if (c != null) {\n          colls[n++] = c;\n        }\n      }\n      return new MultiCollector(colls);\n    }\n  }\n\n","sourceOld":"  /**\n   * Wraps a list of {@link Collector}s with a {@link MultiCollector}. This\n   * method works as follows:\n   * <ul>\n   * <li>Filters out the <code>null</code> collectors, so they are not used\n   * during search time.\n   * <li>If the input contains 1 real collector (i.e. non-<code>null</code> ),\n   * it is returned.\n   * <li>Otherwise the method returns a {@link MultiCollector} which wraps the\n   * non-<code>null</code> ones.\n   * </ul>\n   * \n   * @throws IllegalArgumentException\n   *           if either 0 collectors were input, or all collectors are\n   *           <code>null</code>.\n   */\n  public static Collector wrap(Collector... collectors) {\n    // For the user's convenience, we allow null collectors to be passed.\n    // However, to improve performance, these null collectors are found\n    // and dropped from the array we save for actual collection time.\n    int n = 0;\n    for (Collector c : collectors) {\n      if (c != null) {\n        n++;\n      }\n    }\n\n    if (n == 0) {\n      throw new IllegalArgumentException(\"At least 1 collector must not be null\");\n    } else if (n == 1) {\n      // only 1 Collector - return it.\n      Collector col = null;\n      for (Collector c : collectors) {\n        if (c != null) {\n          col = c;\n          break;\n        }\n      }\n      return col;\n    } else if (n == collectors.length) {\n      return new MultiCollector(collectors);\n    } else {\n      Collector[] colls = new Collector[n];\n      n = 0;\n      for (Collector c : collectors) {\n        if (c != null) {\n          colls[n++] = c;\n        }\n      }\n      return new MultiCollector(colls);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae73da626f97850c922c42736f808d0378e165f0","date":1396625460,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiCollector#wrap(Collector...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiCollector#wrap(Collector...).mjava","sourceNew":"  /** See {@link #wrap(Iterable)}. */\n  public static Collector wrap(Collector... collectors) {\n    return wrap(Arrays.asList(collectors));\n  }\n\n","sourceOld":"  /**\n   * Wraps a list of {@link Collector}s with a {@link MultiCollector}. This\n   * method works as follows:\n   * <ul>\n   * <li>Filters out the <code>null</code> collectors, so they are not used\n   * during search time.\n   * <li>If the input contains 1 real collector (i.e. non-<code>null</code> ),\n   * it is returned.\n   * <li>Otherwise the method returns a {@link MultiCollector} which wraps the\n   * non-<code>null</code> ones.\n   * </ul>\n   * \n   * @throws IllegalArgumentException\n   *           if either 0 collectors were input, or all collectors are\n   *           <code>null</code>.\n   */\n  public static Collector wrap(Collector... collectors) {\n    // For the user's convenience, we allow null collectors to be passed.\n    // However, to improve performance, these null collectors are found\n    // and dropped from the array we save for actual collection time.\n    int n = 0;\n    for (Collector c : collectors) {\n      if (c != null) {\n        n++;\n      }\n    }\n\n    if (n == 0) {\n      throw new IllegalArgumentException(\"At least 1 collector must not be null\");\n    } else if (n == 1) {\n      // only 1 Collector - return it.\n      Collector col = null;\n      for (Collector c : collectors) {\n        if (c != null) {\n          col = c;\n          break;\n        }\n      }\n      return col;\n    } else if (n == collectors.length) {\n      return new MultiCollector(collectors);\n    } else {\n      Collector[] colls = new Collector[n];\n      n = 0;\n      for (Collector c : collectors) {\n        if (c != null) {\n          colls[n++] = c;\n        }\n      }\n      return new MultiCollector(colls);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiCollector#wrap(Collector...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiCollector#wrap(Collector...).mjava","sourceNew":"  /** See {@link #wrap(Iterable)}. */\n  public static Collector wrap(Collector... collectors) {\n    return wrap(Arrays.asList(collectors));\n  }\n\n","sourceOld":"  /**\n   * Wraps a list of {@link Collector}s with a {@link MultiCollector}. This\n   * method works as follows:\n   * <ul>\n   * <li>Filters out the <code>null</code> collectors, so they are not used\n   * during search time.\n   * <li>If the input contains 1 real collector (i.e. non-<code>null</code> ),\n   * it is returned.\n   * <li>Otherwise the method returns a {@link MultiCollector} which wraps the\n   * non-<code>null</code> ones.\n   * </ul>\n   * \n   * @throws IllegalArgumentException\n   *           if either 0 collectors were input, or all collectors are\n   *           <code>null</code>.\n   */\n  public static Collector wrap(Collector... collectors) {\n    // For the user's convenience, we allow null collectors to be passed.\n    // However, to improve performance, these null collectors are found\n    // and dropped from the array we save for actual collection time.\n    int n = 0;\n    for (Collector c : collectors) {\n      if (c != null) {\n        n++;\n      }\n    }\n\n    if (n == 0) {\n      throw new IllegalArgumentException(\"At least 1 collector must not be null\");\n    } else if (n == 1) {\n      // only 1 Collector - return it.\n      Collector col = null;\n      for (Collector c : collectors) {\n        if (c != null) {\n          col = c;\n          break;\n        }\n      }\n      return col;\n    } else if (n == collectors.length) {\n      return new MultiCollector(collectors);\n    } else {\n      Collector[] colls = new Collector[n];\n      n = 0;\n      for (Collector c : collectors) {\n        if (c != null) {\n          colls[n++] = c;\n        }\n      }\n      return new MultiCollector(colls);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","ae73da626f97850c922c42736f808d0378e165f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae73da626f97850c922c42736f808d0378e165f0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ae73da626f97850c922c42736f808d0378e165f0"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","ae73da626f97850c922c42736f808d0378e165f0"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ae73da626f97850c922c42736f808d0378e165f0":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}