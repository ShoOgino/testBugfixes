{"path":"src/java/org/apache/solr/common/util/DOMUtil#substituteSystemProperties(Node).mjava","commits":[{"id":"3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb","date":1181791578,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/common/util/DOMUtil#substituteSystemProperties(Node).mjava","pathOld":"src/java/org/apache/solr/util/DOMUtil#substituteSystemProperties(Node).mjava","sourceNew":"  /**\n   * Replaces ${system.property[:default value]} references in all attributes\n   * and text nodes of supplied node.  If the system property is not defined and no\n   * default value is provided, a runtime exception is thrown.\n   *\n   * @param node DOM node to walk for substitutions\n   */\n  public static void substituteSystemProperties(Node node) {\n    // loop through child nodes\n    Node child;\n    Node next = node.getFirstChild();\n    while ((child = next) != null) {\n\n      // set next before we change anything\n      next = child.getNextSibling();\n\n      // handle child by node type\n      if (child.getNodeType() == Node.TEXT_NODE) {\n        child.setNodeValue(substituteSystemProperty(child.getNodeValue()));\n      } else if (child.getNodeType() == Node.ELEMENT_NODE) {\n        // handle child elements with recursive call\n        NamedNodeMap attributes = child.getAttributes();\n        for (int i = 0; i < attributes.getLength(); i++) {\n          Node attribute = attributes.item(i);\n          attribute.setNodeValue(substituteSystemProperty(attribute.getNodeValue()));\n        }\n        substituteSystemProperties(child);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Replaces ${system.property[:default value]} references in all attributes\n   * and text nodes of supplied node.  If the system property is not defined and no\n   * default value is provided, a runtime exception is thrown.\n   *\n   * @param node DOM node to walk for substitutions\n   */\n  public static void substituteSystemProperties(Node node) {\n    // loop through child nodes\n    Node child;\n    Node next = node.getFirstChild();\n    while ((child = next) != null) {\n\n      // set next before we change anything\n      next = child.getNextSibling();\n\n      // handle child by node type\n      if (child.getNodeType() == Node.TEXT_NODE) {\n        child.setNodeValue(substituteSystemProperty(child.getNodeValue()));\n      } else if (child.getNodeType() == Node.ELEMENT_NODE) {\n        // handle child elements with recursive call\n        NamedNodeMap attributes = child.getAttributes();\n        for (int i = 0; i < attributes.getLength(); i++) {\n          Node attribute = attributes.item(i);\n          attribute.setNodeValue(substituteSystemProperty(attribute.getNodeValue()));\n        }\n        substituteSystemProperties(child);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ddc2fd411184c85d1baed1e8d24840a151d6ba1","date":1219508719,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/common/util/DOMUtil#substituteSystemProperties(Node).mjava","pathOld":"src/java/org/apache/solr/common/util/DOMUtil#substituteSystemProperties(Node).mjava","sourceNew":"  /**\n   * Replaces ${system.property[:default value]} references in all attributes\n   * and text nodes of supplied node.  If the system property is not defined and no\n   * default value is provided, a runtime exception is thrown.\n   *\n   * @param node DOM node to walk for substitutions\n   */\n  public static void substituteSystemProperties(Node node) {\n    substituteProperties(node, null);\n  }\n\n","sourceOld":"  /**\n   * Replaces ${system.property[:default value]} references in all attributes\n   * and text nodes of supplied node.  If the system property is not defined and no\n   * default value is provided, a runtime exception is thrown.\n   *\n   * @param node DOM node to walk for substitutions\n   */\n  public static void substituteSystemProperties(Node node) {\n    // loop through child nodes\n    Node child;\n    Node next = node.getFirstChild();\n    while ((child = next) != null) {\n\n      // set next before we change anything\n      next = child.getNextSibling();\n\n      // handle child by node type\n      if (child.getNodeType() == Node.TEXT_NODE) {\n        child.setNodeValue(substituteSystemProperty(child.getNodeValue()));\n      } else if (child.getNodeType() == Node.ELEMENT_NODE) {\n        // handle child elements with recursive call\n        NamedNodeMap attributes = child.getAttributes();\n        for (int i = 0; i < attributes.getLength(); i++) {\n          Node attribute = attributes.item(i);\n          attribute.setNodeValue(substituteSystemProperty(attribute.getNodeValue()));\n        }\n        substituteSystemProperties(child);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/common/org/apache/solr/common/util/DOMUtil#substituteSystemProperties(Node).mjava","pathOld":"src/java/org/apache/solr/common/util/DOMUtil#substituteSystemProperties(Node).mjava","sourceNew":"  /**\n   * Replaces ${system.property[:default value]} references in all attributes\n   * and text nodes of supplied node.  If the system property is not defined and no\n   * default value is provided, a runtime exception is thrown.\n   *\n   * @param node DOM node to walk for substitutions\n   */\n  public static void substituteSystemProperties(Node node) {\n    substituteProperties(node, null);\n  }\n\n","sourceOld":"  /**\n   * Replaces ${system.property[:default value]} references in all attributes\n   * and text nodes of supplied node.  If the system property is not defined and no\n   * default value is provided, a runtime exception is thrown.\n   *\n   * @param node DOM node to walk for substitutions\n   */\n  public static void substituteSystemProperties(Node node) {\n    substituteProperties(node, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["1ddc2fd411184c85d1baed1e8d24840a151d6ba1"],"3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"1ddc2fd411184c85d1baed1e8d24840a151d6ba1":["3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":[],"3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb":["1ddc2fd411184c85d1baed1e8d24840a151d6ba1"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["3abdd666f12a1d3197de9c612ea8e83cfbb6e7bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1ddc2fd411184c85d1baed1e8d24840a151d6ba1":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e3602d5eab954caecc726ab136ad580ac1ceb917","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}