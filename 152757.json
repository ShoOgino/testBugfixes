{"path":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor.RequestReplicationTracker#trackRequestResult(Node,boolean,Integer).mjava","commits":[{"id":"9d22d0f5940f155267b250876fa797ff69e8e6e7","date":1400540695,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor.RequestReplicationTracker#trackRequestResult(Node,boolean,Integer).mjava","pathOld":"/dev/null","sourceNew":"    public void trackRequestResult(Node node, boolean success, Integer rf) {\n      String shardId = node.getShardId();      \n\n      if (log.isDebugEnabled())\n        log.debug(\"trackRequestResult(\"+node+\"): success? \"+success+\" rf=\"+rf+\n            \", shardId=\"+shardId+\" onLeaderShardId=\"+onLeaderShardId);\n      \n      if (onLeaderShardId == null || !onLeaderShardId.equals(shardId)) {\n        // result from another leader that we forwarded to\n        synchronized (otherLeaderRf) {\n          otherLeaderRf.put(shardId, rf != null ? rf : new Integer(1));\n        }\n        return;\n      }\n      \n      if (onLeaderShardId != null) {\n        // track result for this leader\n        String nodeUrl = node.getUrl();\n        AtomicInteger nodeErrors = null;\n        // potentially many results flooding into this method from multiple nodes concurrently\n        synchronized (nodeErrorTracker) {        \n          nodeErrors = nodeErrorTracker.get(nodeUrl);\n          if (nodeErrors == null) {\n            nodeErrors = new AtomicInteger(0);\n            nodeErrorTracker.put(nodeUrl, nodeErrors);      \n          }\n        }  \n        \n        if (!success)\n          nodeErrors.incrementAndGet();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor.RequestReplicationTracker#trackRequestResult(Node,boolean,Integer).mjava","pathOld":"/dev/null","sourceNew":"    public void trackRequestResult(Node node, boolean success, Integer rf) {\n      String shardId = node.getShardId();      \n\n      if (log.isDebugEnabled())\n        log.debug(\"trackRequestResult(\"+node+\"): success? \"+success+\" rf=\"+rf+\n            \", shardId=\"+shardId+\" onLeaderShardId=\"+onLeaderShardId);\n      \n      if (onLeaderShardId == null || !onLeaderShardId.equals(shardId)) {\n        // result from another leader that we forwarded to\n        synchronized (otherLeaderRf) {\n          otherLeaderRf.put(shardId, rf != null ? rf : new Integer(1));\n        }\n        return;\n      }\n      \n      if (onLeaderShardId != null) {\n        // track result for this leader\n        String nodeUrl = node.getUrl();\n        AtomicInteger nodeErrors = null;\n        // potentially many results flooding into this method from multiple nodes concurrently\n        synchronized (nodeErrorTracker) {        \n          nodeErrors = nodeErrorTracker.get(nodeUrl);\n          if (nodeErrors == null) {\n            nodeErrors = new AtomicInteger(0);\n            nodeErrorTracker.put(nodeUrl, nodeErrors);      \n          }\n        }  \n        \n        if (!success)\n          nodeErrors.incrementAndGet();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"601f914e4448cab7640fecfb5d15f8f2e2af0bf6","date":1508947828,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor.RequestReplicationTracker#trackRequestResult(Node,boolean,Integer).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor.RequestReplicationTracker#trackRequestResult(Node,boolean,Integer).mjava","sourceNew":"    public void trackRequestResult(Node node, boolean success, Integer rf) {\n      String shardId = node.getShardId();      \n\n      if (log.isDebugEnabled())\n        log.debug(\"trackRequestResult(\"+node+\"): success? \"+success+\" rf=\"+rf+\n            \", shardId=\"+shardId+\" onLeaderShardId=\"+onLeaderShardId);\n      \n      if (!Objects.equals(onLeaderShardId, shardId)) {\n        // result from another leader that we forwarded to\n        synchronized (otherLeaderRf) {\n          otherLeaderRf.put(shardId, rf != null ? rf : new Integer(1));\n        }\n        return;\n      }\n      \n      if (onLeaderShardId != null) {\n        // track result for this leader\n        String nodeUrl = node.getUrl();\n        AtomicInteger nodeErrors = null;\n        // potentially many results flooding into this method from multiple nodes concurrently\n        synchronized (nodeErrorTracker) {        \n          nodeErrors = nodeErrorTracker.get(nodeUrl);\n          if (nodeErrors == null) {\n            nodeErrors = new AtomicInteger(0);\n            nodeErrorTracker.put(nodeUrl, nodeErrors);      \n          }\n        }  \n        \n        if (!success)\n          nodeErrors.incrementAndGet();\n      }\n    }\n\n","sourceOld":"    public void trackRequestResult(Node node, boolean success, Integer rf) {\n      String shardId = node.getShardId();      \n\n      if (log.isDebugEnabled())\n        log.debug(\"trackRequestResult(\"+node+\"): success? \"+success+\" rf=\"+rf+\n            \", shardId=\"+shardId+\" onLeaderShardId=\"+onLeaderShardId);\n      \n      if (onLeaderShardId == null || !onLeaderShardId.equals(shardId)) {\n        // result from another leader that we forwarded to\n        synchronized (otherLeaderRf) {\n          otherLeaderRf.put(shardId, rf != null ? rf : new Integer(1));\n        }\n        return;\n      }\n      \n      if (onLeaderShardId != null) {\n        // track result for this leader\n        String nodeUrl = node.getUrl();\n        AtomicInteger nodeErrors = null;\n        // potentially many results flooding into this method from multiple nodes concurrently\n        synchronized (nodeErrorTracker) {        \n          nodeErrors = nodeErrorTracker.get(nodeUrl);\n          if (nodeErrors == null) {\n            nodeErrors = new AtomicInteger(0);\n            nodeErrorTracker.put(nodeUrl, nodeErrors);      \n          }\n        }  \n        \n        if (!success)\n          nodeErrors.incrementAndGet();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615bf5b56d95ed8c9bf06a402db6c817d6bff21a","date":1509492118,"type":4,"author":"Erick Erickson","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor.RequestReplicationTracker#trackRequestResult(Node,boolean,Integer).mjava","sourceNew":null,"sourceOld":"    public void trackRequestResult(Node node, boolean success, Integer rf) {\n      String shardId = node.getShardId();      \n\n      if (log.isDebugEnabled())\n        log.debug(\"trackRequestResult(\"+node+\"): success? \"+success+\" rf=\"+rf+\n            \", shardId=\"+shardId+\" onLeaderShardId=\"+onLeaderShardId);\n      \n      if (!Objects.equals(onLeaderShardId, shardId)) {\n        // result from another leader that we forwarded to\n        synchronized (otherLeaderRf) {\n          otherLeaderRf.put(shardId, rf != null ? rf : new Integer(1));\n        }\n        return;\n      }\n      \n      if (onLeaderShardId != null) {\n        // track result for this leader\n        String nodeUrl = node.getUrl();\n        AtomicInteger nodeErrors = null;\n        // potentially many results flooding into this method from multiple nodes concurrently\n        synchronized (nodeErrorTracker) {        \n          nodeErrors = nodeErrorTracker.get(nodeUrl);\n          if (nodeErrors == null) {\n            nodeErrors = new AtomicInteger(0);\n            nodeErrorTracker.put(nodeUrl, nodeErrors);      \n          }\n        }  \n        \n        if (!success)\n          nodeErrors.incrementAndGet();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9d22d0f5940f155267b250876fa797ff69e8e6e7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"601f914e4448cab7640fecfb5d15f8f2e2af0bf6":["9d22d0f5940f155267b250876fa797ff69e8e6e7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"615bf5b56d95ed8c9bf06a402db6c817d6bff21a":["601f914e4448cab7640fecfb5d15f8f2e2af0bf6"],"b7605579001505896d48b07160075a5c8b8e128e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9d22d0f5940f155267b250876fa797ff69e8e6e7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["615bf5b56d95ed8c9bf06a402db6c817d6bff21a"]},"commit2Childs":{"9d22d0f5940f155267b250876fa797ff69e8e6e7":["601f914e4448cab7640fecfb5d15f8f2e2af0bf6","b7605579001505896d48b07160075a5c8b8e128e"],"601f914e4448cab7640fecfb5d15f8f2e2af0bf6":["615bf5b56d95ed8c9bf06a402db6c817d6bff21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9d22d0f5940f155267b250876fa797ff69e8e6e7","b7605579001505896d48b07160075a5c8b8e128e"],"615bf5b56d95ed8c9bf06a402db6c817d6bff21a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b7605579001505896d48b07160075a5c8b8e128e":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}