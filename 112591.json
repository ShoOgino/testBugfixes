{"path":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.BaseTermsEnum#seekExact(long).mjava","commits":[{"id":"050ba1ba249733cac50c2612418b7179591d2df9","date":1374633633,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.BaseTermsEnum#seekExact(long).mjava","pathOld":"/dev/null","sourceNew":"      // nocommit: do we need this? for SegmentTermsEnum, we can maintain\n      // a stack to record how current term is constructed on FST, (and ord on each alphabet)\n      // so that during seek we don't have to start from the first arc.\n      // however, we'll be implementing a new fstEnum instead of wrapping current one.\n      @Override\n      public void seekExact(long ord) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d7b1c6dfde5c14fc13ffb78626073d55020636fe","date":1374636171,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.BaseTermsEnum#seekExact(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.BaseTermsEnum#seekExact(long).mjava","sourceNew":"      // nocommit: do we need this? for SegmentTermsEnum, we can maintain\n      // a stack to record how current term is constructed on FST, (and ord on each alphabet)\n      // so that during seek we don't have to start from the first arc.\n      // however, we'll be implementing a new fstEnum instead of wrapping current one.\n      //\n      // nocommit: this can also be achieved by making use of Util.getByOutput()\n      @Override\n      public void seekExact(long ord) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n","sourceOld":"      // nocommit: do we need this? for SegmentTermsEnum, we can maintain\n      // a stack to record how current term is constructed on FST, (and ord on each alphabet)\n      // so that during seek we don't have to start from the first arc.\n      // however, we'll be implementing a new fstEnum instead of wrapping current one.\n      @Override\n      public void seekExact(long ord) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.BaseTermsEnum#seekExact(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.BaseTermsEnum#seekExact(long).mjava","sourceNew":"      // nocommit: do we need this? for SegmentTermsEnum, we can maintain\n      // a stack to record how current term is constructed on FST, (and ord on each alphabet)\n      // so that during seek we don't have to start from the first arc.\n      // however, we'll be implementing a new fstEnum instead of wrapping current one.\n      //\n      // nocommit: this can also be achieved by making use of Util.getByOutput()\n      @Override\n      public void seekExact(long ord) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n","sourceOld":"      // nocommit: do we need this? for SegmentTermsEnum, we can maintain\n      // a stack to record how current term is constructed on FST, (and ord on each alphabet)\n      // so that during seek we don't have to start from the first arc.\n      // however, we'll be implementing a new fstEnum instead of wrapping current one.\n      //\n      // nocommit: this can also be achieved by making use of Util.getByOutput()\n      @Override\n      public void seekExact(long ord) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["d7b1c6dfde5c14fc13ffb78626073d55020636fe"],"d7b1c6dfde5c14fc13ffb78626073d55020636fe":["050ba1ba249733cac50c2612418b7179591d2df9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"050ba1ba249733cac50c2612418b7179591d2df9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817","050ba1ba249733cac50c2612418b7179591d2df9"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":[],"d7b1c6dfde5c14fc13ffb78626073d55020636fe":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"050ba1ba249733cac50c2612418b7179591d2df9":["d7b1c6dfde5c14fc13ffb78626073d55020636fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}