{"path":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#setup(ElectionContext).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#setup(ElectionContext).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Set up any ZooKeeper nodes needed for leader election.\n   * \n   * @param shardId\n   * @param collection\n   * @throws InterruptedException\n   * @throws KeeperException\n   */\n  public void setup(final ElectionContext context) throws InterruptedException,\n      KeeperException {\n    String electZKPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    zkCmdExecutor.ensureExists(electZKPath, zkClient);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#setup(ElectionContext).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Set up any ZooKeeper nodes needed for leader election.\n   * \n   * @param shardId\n   * @param collection\n   * @throws InterruptedException\n   * @throws KeeperException\n   */\n  public void setup(final ElectionContext context) throws InterruptedException,\n      KeeperException {\n    String electZKPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    zkCmdExecutor.ensureExists(electZKPath, zkClient);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#setup(ElectionContext).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Set up any ZooKeeper nodes needed for leader election.\n   * \n   * @param shardId\n   * @param collection\n   * @throws InterruptedException\n   * @throws KeeperException\n   */\n  public void setup(final ElectionContext context) throws InterruptedException,\n      KeeperException {\n    String electZKPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    zkCmdExecutor.ensureExists(electZKPath, zkClient);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f97bf7e60e8b1531f7e992482be43dd563dde04e","date":1327594643,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#setup(ElectionContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#setup(ElectionContext).mjava","sourceNew":"  /**\n   * Set up any ZooKeeper nodes needed for leader election.\n   * \n   * @param context\n   * @throws InterruptedException\n   * @throws KeeperException\n   */\n  public void setup(final ElectionContext context) throws InterruptedException,\n      KeeperException {\n    String electZKPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    zkCmdExecutor.ensureExists(electZKPath, zkClient);\n  }\n\n","sourceOld":"  /**\n   * Set up any ZooKeeper nodes needed for leader election.\n   * \n   * @param shardId\n   * @param collection\n   * @throws InterruptedException\n   * @throws KeeperException\n   */\n  public void setup(final ElectionContext context) throws InterruptedException,\n      KeeperException {\n    String electZKPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    zkCmdExecutor.ensureExists(electZKPath, zkClient);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"78a55f24d9b493c2a1cecf79f1d78279062b545b","date":1327688152,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#setup(ElectionContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#setup(ElectionContext).mjava","sourceNew":"  /**\n   * Set up any ZooKeeper nodes needed for leader election.\n   * \n   * @param context\n   * @throws InterruptedException\n   * @throws KeeperException\n   */\n  public void setup(final ElectionContext context) throws InterruptedException,\n      KeeperException {\n    String electZKPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    zkCmdExecutor.ensureExists(electZKPath, zkClient);\n  }\n\n","sourceOld":"  /**\n   * Set up any ZooKeeper nodes needed for leader election.\n   * \n   * @param shardId\n   * @param collection\n   * @throws InterruptedException\n   * @throws KeeperException\n   */\n  public void setup(final ElectionContext context) throws InterruptedException,\n      KeeperException {\n    String electZKPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    zkCmdExecutor.ensureExists(electZKPath, zkClient);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#setup(ElectionContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#setup(ElectionContext).mjava","sourceNew":"  /**\n   * Set up any ZooKeeper nodes needed for leader election.\n   * \n   * @param context\n   * @throws InterruptedException\n   * @throws KeeperException\n   */\n  public void setup(final ElectionContext context) throws InterruptedException,\n      KeeperException {\n    String electZKPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    zkCmdExecutor.ensureExists(electZKPath, zkClient);\n  }\n\n","sourceOld":"  /**\n   * Set up any ZooKeeper nodes needed for leader election.\n   * \n   * @param shardId\n   * @param collection\n   * @throws InterruptedException\n   * @throws KeeperException\n   */\n  public void setup(final ElectionContext context) throws InterruptedException,\n      KeeperException {\n    String electZKPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    zkCmdExecutor.ensureExists(electZKPath, zkClient);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#setup(ElectionContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#setup(ElectionContext).mjava","sourceNew":"  /**\n   * Set up any ZooKeeper nodes needed for leader election.\n   */\n  public void setup(final ElectionContext context) throws InterruptedException,\n      KeeperException {\n    String electZKPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    zkCmdExecutor.ensureExists(electZKPath, zkClient);\n  }\n\n","sourceOld":"  /**\n   * Set up any ZooKeeper nodes needed for leader election.\n   * \n   * @param context\n   * @throws InterruptedException\n   * @throws KeeperException\n   */\n  public void setup(final ElectionContext context) throws InterruptedException,\n      KeeperException {\n    String electZKPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    zkCmdExecutor.ensureExists(electZKPath, zkClient);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d5c24895cc40015d3ec6e42b234fe0953de6ebc3","date":1385000683,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#setup(ElectionContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#setup(ElectionContext).mjava","sourceNew":"  /**\n   * Set up any ZooKeeper nodes needed for leader election.\n   */\n  public void setup(final ElectionContext context) throws InterruptedException,\n      KeeperException {\n    this.context = context;\n    String electZKPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    zkCmdExecutor.ensureExists(electZKPath, zkClient);\n  }\n\n","sourceOld":"  /**\n   * Set up any ZooKeeper nodes needed for leader election.\n   */\n  public void setup(final ElectionContext context) throws InterruptedException,\n      KeeperException {\n    String electZKPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    zkCmdExecutor.ensureExists(electZKPath, zkClient);\n  }\n\n","bugFix":null,"bugIntro":["52bb40d1a8459a88868fb810f6c90378004fa285"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#setup(ElectionContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#setup(ElectionContext).mjava","sourceNew":"  /**\n   * Set up any ZooKeeper nodes needed for leader election.\n   */\n  public void setup(final ElectionContext context) throws InterruptedException,\n      KeeperException {\n    this.context = context;\n    String electZKPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    zkCmdExecutor.ensureExists(electZKPath, zkClient);\n  }\n\n","sourceOld":"  /**\n   * Set up any ZooKeeper nodes needed for leader election.\n   */\n  public void setup(final ElectionContext context) throws InterruptedException,\n      KeeperException {\n    String electZKPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    zkCmdExecutor.ensureExists(electZKPath, zkClient);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52bb40d1a8459a88868fb810f6c90378004fa285","date":1404198004,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#setup(ElectionContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#setup(ElectionContext).mjava","sourceNew":"  /**\n   * Set up any ZooKeeper nodes needed for leader election.\n   */\n  public void setup(final ElectionContext context) throws InterruptedException,\n      KeeperException {\n    String electZKPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    zkCmdExecutor.ensureExists(electZKPath, zkClient);\n    this.context = context;\n  }\n\n","sourceOld":"  /**\n   * Set up any ZooKeeper nodes needed for leader election.\n   */\n  public void setup(final ElectionContext context) throws InterruptedException,\n      KeeperException {\n    this.context = context;\n    String electZKPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    zkCmdExecutor.ensureExists(electZKPath, zkClient);\n  }\n\n","bugFix":["d5c24895cc40015d3ec6e42b234fe0953de6ebc3"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f291d2d430e8149d24fdd06b0bcdab0941ec9144","date":1481216635,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#setup(ElectionContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#setup(ElectionContext).mjava","sourceNew":"  /**\n   * Set up any ZooKeeper nodes needed for leader election.\n   */\n  public void setup(final ElectionContext context) throws InterruptedException,\n      KeeperException {\n    String electZKPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    if (context instanceof OverseerElectionContext) {\n      zkCmdExecutor.ensureExists(electZKPath, zkClient);\n    } else {\n      // we use 2 param so that replica won't create /collection/{collection} if it doesn't exist\n      zkCmdExecutor.ensureExists(electZKPath, (byte[])null, CreateMode.PERSISTENT, zkClient, 2);\n    }\n\n    this.context = context;\n  }\n\n","sourceOld":"  /**\n   * Set up any ZooKeeper nodes needed for leader election.\n   */\n  public void setup(final ElectionContext context) throws InterruptedException,\n      KeeperException {\n    String electZKPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    zkCmdExecutor.ensureExists(electZKPath, zkClient);\n    this.context = context;\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#setup(ElectionContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/LeaderElector#setup(ElectionContext).mjava","sourceNew":"  /**\n   * Set up any ZooKeeper nodes needed for leader election.\n   */\n  public void setup(final ElectionContext context) throws InterruptedException,\n      KeeperException {\n    String electZKPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    if (context instanceof OverseerElectionContext) {\n      zkCmdExecutor.ensureExists(electZKPath, zkClient);\n    } else {\n      // we use 2 param so that replica won't create /collection/{collection} if it doesn't exist\n      zkCmdExecutor.ensureExists(electZKPath, (byte[])null, CreateMode.PERSISTENT, zkClient, 2);\n    }\n\n    this.context = context;\n  }\n\n","sourceOld":"  /**\n   * Set up any ZooKeeper nodes needed for leader election.\n   */\n  public void setup(final ElectionContext context) throws InterruptedException,\n      KeeperException {\n    String electZKPath = context.electionPath + LeaderElector.ELECTION_NODE;\n    \n    zkCmdExecutor.ensureExists(electZKPath, zkClient);\n    this.context = context;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["f97bf7e60e8b1531f7e992482be43dd563dde04e"],"78a55f24d9b493c2a1cecf79f1d78279062b545b":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","f97bf7e60e8b1531f7e992482be43dd563dde04e"],"f97bf7e60e8b1531f7e992482be43dd563dde04e":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["0d22ac6a4146774c1bc8400160fc0b6150294e92","f97bf7e60e8b1531f7e992482be43dd563dde04e"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"52bb40d1a8459a88868fb810f6c90378004fa285":["d5c24895cc40015d3ec6e42b234fe0953de6ebc3"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"f291d2d430e8149d24fdd06b0bcdab0941ec9144":["52bb40d1a8459a88868fb810f6c90378004fa285"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d5c24895cc40015d3ec6e42b234fe0953de6ebc3":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","d5c24895cc40015d3ec6e42b234fe0953de6ebc3"],"9856095f7afb5a607bf5e65077615ed91273508c":["52bb40d1a8459a88868fb810f6c90378004fa285","f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f291d2d430e8149d24fdd06b0bcdab0941ec9144"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["d5c24895cc40015d3ec6e42b234fe0953de6ebc3","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"78a55f24d9b493c2a1cecf79f1d78279062b545b":[],"f97bf7e60e8b1531f7e992482be43dd563dde04e":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","78a55f24d9b493c2a1cecf79f1d78279062b545b","fd92b8bcc88e969302510acf77bd6970da3994c4"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["78a55f24d9b493c2a1cecf79f1d78279062b545b"],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"52bb40d1a8459a88868fb810f6c90378004fa285":["f291d2d430e8149d24fdd06b0bcdab0941ec9144","9856095f7afb5a607bf5e65077615ed91273508c"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["fd92b8bcc88e969302510acf77bd6970da3994c4"],"f291d2d430e8149d24fdd06b0bcdab0941ec9144":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["f97bf7e60e8b1531f7e992482be43dd563dde04e","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92"],"d5c24895cc40015d3ec6e42b234fe0953de6ebc3":["52bb40d1a8459a88868fb810f6c90378004fa285","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"9856095f7afb5a607bf5e65077615ed91273508c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["78a55f24d9b493c2a1cecf79f1d78279062b545b","fd92b8bcc88e969302510acf77bd6970da3994c4","74f45af4339b0daf7a95c820ab88c1aea74fbce0","9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}