{"path":"solr/core/src/test/org/apache/solr/core/BlobRepositoryMockingTest#testCachedAlready().mjava","commits":[{"id":"5fab1d180f47e9924e0e56501b42034b3476f2b1","date":1460974879,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/BlobRepositoryMockingTest#testCachedAlready().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testCachedAlready() {\n    expect(mockContainer.isZooKeeperAware()).andReturn(true);\n    expect(mapMock.get(\"foo!\")).andReturn(new BlobRepository.BlobContent<BlobRepository>(\"foo!\", blobData));\n    EasyMock.replay(mocks);\n    BlobRepository.BlobContentRef ref = repository.getBlobIncRef(\"foo!\");\n    assertEquals(\"\",blobKey);\n    assertFalse(blobFetched);\n    assertNotNull(ref.blob);\n    assertEquals(blobData, ref.blob.get());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"713122036535651642e6d4fe57ce12b449e18473","date":1461000510,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/BlobRepositoryMockingTest#testCachedAlready().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testCachedAlready() {\n    expect(mockContainer.isZooKeeperAware()).andReturn(true);\n    expect(mapMock.get(\"foo!\")).andReturn(new BlobRepository.BlobContent<BlobRepository>(\"foo!\", blobData));\n    EasyMock.replay(mocks);\n    BlobRepository.BlobContentRef ref = repository.getBlobIncRef(\"foo!\");\n    assertEquals(\"\",blobKey);\n    assertFalse(blobFetched);\n    assertNotNull(ref.blob);\n    assertEquals(blobData, ref.blob.get());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e","date":1487462440,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/BlobRepositoryMockingTest#testCachedAlready().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/BlobRepositoryMockingTest#testCachedAlready().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testCachedAlready() {\n    when(mockContainer.isZooKeeperAware()).thenReturn(true);\n    when(mapMock.get(\"foo!\")).thenReturn(new BlobRepository.BlobContent<BlobRepository>(\"foo!\", blobData));\n    BlobRepository.BlobContentRef ref = repository.getBlobIncRef(\"foo!\");\n    assertEquals(\"\",blobKey);\n    assertFalse(blobFetched);\n    assertNotNull(ref.blob);\n    assertEquals(blobData, ref.blob.get());\n    verify(mockContainer).isZooKeeperAware();\n    verify(mapMock).get(\"foo!\");\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testCachedAlready() {\n    expect(mockContainer.isZooKeeperAware()).andReturn(true);\n    expect(mapMock.get(\"foo!\")).andReturn(new BlobRepository.BlobContent<BlobRepository>(\"foo!\", blobData));\n    EasyMock.replay(mocks);\n    BlobRepository.BlobContentRef ref = repository.getBlobIncRef(\"foo!\");\n    assertEquals(\"\",blobKey);\n    assertFalse(blobFetched);\n    assertNotNull(ref.blob);\n    assertEquals(blobData, ref.blob.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/BlobRepositoryMockingTest#testCachedAlready().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/BlobRepositoryMockingTest#testCachedAlready().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testCachedAlready() {\n    when(mockContainer.isZooKeeperAware()).thenReturn(true);\n    when(mapMock.get(\"foo!\")).thenReturn(new BlobRepository.BlobContent<BlobRepository>(\"foo!\", blobData));\n    @SuppressWarnings({\"rawtypes\"})\n    BlobRepository.BlobContentRef ref = repository.getBlobIncRef(\"foo!\");\n    assertEquals(\"\",blobKey);\n    assertFalse(blobFetched);\n    assertNotNull(ref.blob);\n    assertEquals(blobData, ref.blob.get());\n    verify(mockContainer).isZooKeeperAware();\n    verify(mapMock).get(\"foo!\");\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testCachedAlready() {\n    when(mockContainer.isZooKeeperAware()).thenReturn(true);\n    when(mapMock.get(\"foo!\")).thenReturn(new BlobRepository.BlobContent<BlobRepository>(\"foo!\", blobData));\n    BlobRepository.BlobContentRef ref = repository.getBlobIncRef(\"foo!\");\n    assertEquals(\"\",blobKey);\n    assertFalse(blobFetched);\n    assertNotNull(ref.blob);\n    assertEquals(blobData, ref.blob.get());\n    verify(mockContainer).isZooKeeperAware();\n    verify(mapMock).get(\"foo!\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"713122036535651642e6d4fe57ce12b449e18473":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5fab1d180f47e9924e0e56501b42034b3476f2b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5fab1d180f47e9924e0e56501b42034b3476f2b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e":["713122036535651642e6d4fe57ce12b449e18473"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e"]},"commit2Childs":{"713122036535651642e6d4fe57ce12b449e18473":["f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["713122036535651642e6d4fe57ce12b449e18473","5fab1d180f47e9924e0e56501b42034b3476f2b1"],"5fab1d180f47e9924e0e56501b42034b3476f2b1":["713122036535651642e6d4fe57ce12b449e18473"],"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e":["e98520789adb1d5ad05afb4956eca0944a929688"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}