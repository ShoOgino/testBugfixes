{"path":"lucene/facet/src/java/org/apache/lucene/facet/util/ResultSortUtils#createSuitableHeap(FacetRequest).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/util/ResultSortUtils#createSuitableHeap(FacetRequest).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/util/ResultSortUtils#createSuitableHeap(FacetRequest).mjava","sourceNew":"  /**\n   * Create a suitable heap according to facet request being served. \n   * @return heap for maintaining results for specified request.\n   * @throws IllegalArgumentException is provided facet request is not supported \n   */\n  public static Heap<FacetResultNode> createSuitableHeap(FacetRequest facetRequest) {\n    int nresults = facetRequest.getNumResults();\n    boolean accending = (facetRequest.getSortOrder() == SortOrder.ASCENDING);\n\n    if (nresults == Integer.MAX_VALUE) {\n      return new AllValueHeap(accending);\n    }\n\n    if (accending) {\n      switch (facetRequest.getSortBy()) {\n        case VALUE:\n          return new MaxValueHeap(nresults);\n        case ORDINAL:\n          return new MaxOrdinalHeap(nresults);\n      }\n    } else {\n      switch (facetRequest.getSortBy()) {\n        case VALUE:\n          return new MinValueHeap(nresults);\n        case ORDINAL:\n          return new MinOrdinalHeap(nresults);\n      }\n    }\n    throw new IllegalArgumentException(\"none supported facet request: \"+facetRequest);\n  }\n\n","sourceOld":"  /**\n   * Create a suitable heap according to facet request being served. \n   * @return heap for maintaining results for specified request.\n   * @throws IllegalArgumentException is provided facet request is not supported \n   */\n  public static Heap<FacetResultNode> createSuitableHeap(FacetRequest facetRequest) {\n    int nresults = facetRequest.getNumResults();\n    boolean accending = (facetRequest.getSortOrder() == SortOrder.ASCENDING);\n\n    if (nresults == Integer.MAX_VALUE) {\n      return new AllValueHeap(accending);\n    }\n\n    if (accending) {\n      switch (facetRequest.getSortBy()) {\n        case VALUE:\n          return new MaxValueHeap(nresults);\n        case ORDINAL:\n          return new MaxOrdinalHeap(nresults);\n      }\n    } else {\n      switch (facetRequest.getSortBy()) {\n        case VALUE:\n          return new MinValueHeap(nresults);\n        case ORDINAL:\n          return new MinOrdinalHeap(nresults);\n      }\n    }\n    throw new IllegalArgumentException(\"none supported facet request: \"+facetRequest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"571abba77e55fea386a38c0024f72ffa5b37a9ad","date":1360272747,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/util/ResultSortUtils#createSuitableHeap(FacetRequest).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/util/ResultSortUtils#createSuitableHeap(FacetRequest).mjava","sourceNew":"  /**\n   * Create a suitable heap according to facet request being served. \n   * @return heap for maintaining results for specified request.\n   * @throws IllegalArgumentException is provided facet request is not supported \n   */\n  public static Heap<FacetResultNode> createSuitableHeap(FacetRequest facetRequest) {\n    int nresults = facetRequest.numResults;\n    boolean accending = (facetRequest.getSortOrder() == SortOrder.ASCENDING);\n\n    if (nresults == Integer.MAX_VALUE) {\n      return new AllValueHeap(accending);\n    }\n\n    if (accending) {\n      switch (facetRequest.getSortBy()) {\n        case VALUE:\n          return new MaxValueHeap(nresults);\n        case ORDINAL:\n          return new MaxOrdinalHeap(nresults);\n      }\n    } else {\n      switch (facetRequest.getSortBy()) {\n        case VALUE:\n          return new MinValueHeap(nresults);\n        case ORDINAL:\n          return new MinOrdinalHeap(nresults);\n      }\n    }\n    throw new IllegalArgumentException(\"none supported facet request: \"+facetRequest);\n  }\n\n","sourceOld":"  /**\n   * Create a suitable heap according to facet request being served. \n   * @return heap for maintaining results for specified request.\n   * @throws IllegalArgumentException is provided facet request is not supported \n   */\n  public static Heap<FacetResultNode> createSuitableHeap(FacetRequest facetRequest) {\n    int nresults = facetRequest.getNumResults();\n    boolean accending = (facetRequest.getSortOrder() == SortOrder.ASCENDING);\n\n    if (nresults == Integer.MAX_VALUE) {\n      return new AllValueHeap(accending);\n    }\n\n    if (accending) {\n      switch (facetRequest.getSortBy()) {\n        case VALUE:\n          return new MaxValueHeap(nresults);\n        case ORDINAL:\n          return new MaxOrdinalHeap(nresults);\n      }\n    } else {\n      switch (facetRequest.getSortBy()) {\n        case VALUE:\n          return new MinValueHeap(nresults);\n        case ORDINAL:\n          return new MinOrdinalHeap(nresults);\n      }\n    }\n    throw new IllegalArgumentException(\"none supported facet request: \"+facetRequest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b5bf344a83eee6236fef469ee1a169e3b9994e4","date":1360485356,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/util/ResultSortUtils#createSuitableHeap(FacetRequest).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/util/ResultSortUtils#createSuitableHeap(FacetRequest).mjava","sourceNew":"  /**\n   * Create a suitable heap according to facet request being served. \n   * @return heap for maintaining results for specified request.\n   * @throws IllegalArgumentException is provided facet request is not supported \n   */\n  public static Heap<FacetResultNode> createSuitableHeap(FacetRequest facetRequest) {\n    int nresults = facetRequest.numResults;\n    boolean accending = (facetRequest.getSortOrder() == SortOrder.ASCENDING);\n\n    if (nresults == Integer.MAX_VALUE) {\n      return new AllValueHeap(accending);\n    }\n\n    if (accending) {\n      return new MaxValueHeap(nresults);\n    } else {\n      return new MinValueHeap(nresults);\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a suitable heap according to facet request being served. \n   * @return heap for maintaining results for specified request.\n   * @throws IllegalArgumentException is provided facet request is not supported \n   */\n  public static Heap<FacetResultNode> createSuitableHeap(FacetRequest facetRequest) {\n    int nresults = facetRequest.numResults;\n    boolean accending = (facetRequest.getSortOrder() == SortOrder.ASCENDING);\n\n    if (nresults == Integer.MAX_VALUE) {\n      return new AllValueHeap(accending);\n    }\n\n    if (accending) {\n      switch (facetRequest.getSortBy()) {\n        case VALUE:\n          return new MaxValueHeap(nresults);\n        case ORDINAL:\n          return new MaxOrdinalHeap(nresults);\n      }\n    } else {\n      switch (facetRequest.getSortBy()) {\n        case VALUE:\n          return new MinValueHeap(nresults);\n        case ORDINAL:\n          return new MinOrdinalHeap(nresults);\n      }\n    }\n    throw new IllegalArgumentException(\"none supported facet request: \"+facetRequest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/util/ResultSortUtils#createSuitableHeap(FacetRequest).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create a suitable heap according to facet request being served. \n   * @return heap for maintaining results for specified request.\n   * @throws IllegalArgumentException is provided facet request is not supported \n   */\n  public static Heap<FacetResultNode> createSuitableHeap(FacetRequest facetRequest) {\n    int nresults = facetRequest.numResults;\n    boolean accending = (facetRequest.getSortOrder() == SortOrder.ASCENDING);\n\n    if (nresults == Integer.MAX_VALUE) {\n      return new AllValueHeap(accending);\n    }\n\n    if (accending) {\n      return new MaxValueHeap(nresults);\n    } else {\n      return new MinValueHeap(nresults);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/util/ResultSortUtils#createSuitableHeap(FacetRequest).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create a suitable heap according to facet request being served. \n   * @return heap for maintaining results for specified request.\n   * @throws IllegalArgumentException is provided facet request is not supported \n   */\n  public static Heap<FacetResultNode> createSuitableHeap(FacetRequest facetRequest) {\n    int nresults = facetRequest.numResults;\n    boolean accending = (facetRequest.getSortOrder() == SortOrder.ASCENDING);\n\n    if (nresults == Integer.MAX_VALUE) {\n      return new AllValueHeap(accending);\n    }\n\n    if (accending) {\n      return new MaxValueHeap(nresults);\n    } else {\n      return new MinValueHeap(nresults);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["1b5bf344a83eee6236fef469ee1a169e3b9994e4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1b5bf344a83eee6236fef469ee1a169e3b9994e4":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["1b5bf344a83eee6236fef469ee1a169e3b9994e4","d33e19a97046248623a7591aeaa6547233fd15e2"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"1b5bf344a83eee6236fef469ee1a169e3b9994e4":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["1b5bf344a83eee6236fef469ee1a169e3b9994e4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}