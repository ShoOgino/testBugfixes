{"path":"src/java/org/apache/lucene/search/RangeQuery#RangeQuery(String,String,String,boolean,boolean).mjava","commits":[{"id":"6f7a11eba51d213f09b96054111cf56a1e5796a3","date":1226364000,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/RangeQuery#RangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Constructs a query selecting all terms greater/equal than <code>lowerTerm</code>\n   * but less/equal than <code>upperTerm</code>. \n   * \n   * <p>\n   * If an endpoint is null, it is said \n   * to be \"open\". Either or both endpoints may be open.  Open endpoints may not \n   * be exclusive (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * \n   * @param field The field that holds both lower and upper terms.\n   * @param lowerTerm\n   *          The term text at the lower end of the range\n   * @param upperTerm\n   *          The term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is\n   *          included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is\n   *          included in the range.\n   */\n  public RangeQuery(String field, String lowerTerm, String upperTerm, boolean includeLower, boolean includeUpper) {\n    init(new Term(field, lowerTerm), new Term(field, upperTerm), includeLower, includeUpper, null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f612096ab5275c4821d05f126bf45a89f4782b8","date":1246738452,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/TermRangeQuery#TermRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/RangeQuery#RangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Constructs a query selecting all terms greater/equal than <code>lowerTerm</code>\n   * but less/equal than <code>upperTerm</code>. \n   * \n   * <p>\n   * If an endpoint is null, it is said \n   * to be \"open\". Either or both endpoints may be open.  Open endpoints may not \n   * be exclusive (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * \n   * @param field The field that holds both lower and upper terms.\n   * @param lowerTerm\n   *          The term text at the lower end of the range\n   * @param upperTerm\n   *          The term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is\n   *          included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is\n   *          included in the range.\n   */\n  public TermRangeQuery(String field, String lowerTerm, String upperTerm, boolean includeLower, boolean includeUpper) {\n    this(field, lowerTerm, upperTerm, includeLower, includeUpper, null);\n  }\n\n","sourceOld":"  /**\n   * Constructs a query selecting all terms greater/equal than <code>lowerTerm</code>\n   * but less/equal than <code>upperTerm</code>. \n   * \n   * <p>\n   * If an endpoint is null, it is said \n   * to be \"open\". Either or both endpoints may be open.  Open endpoints may not \n   * be exclusive (you can't select all but the first or last term without \n   * explicitly specifying the term to exclude.)\n   * \n   * @param field The field that holds both lower and upper terms.\n   * @param lowerTerm\n   *          The term text at the lower end of the range\n   * @param upperTerm\n   *          The term text at the upper end of the range\n   * @param includeLower\n   *          If true, the <code>lowerTerm</code> is\n   *          included in the range.\n   * @param includeUpper\n   *          If true, the <code>upperTerm</code> is\n   *          included in the range.\n   */\n  public RangeQuery(String field, String lowerTerm, String upperTerm, boolean includeLower, boolean includeUpper) {\n    init(new Term(field, lowerTerm), new Term(field, upperTerm), includeLower, includeUpper, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f612096ab5275c4821d05f126bf45a89f4782b8":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0f612096ab5275c4821d05f126bf45a89f4782b8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}