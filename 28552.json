{"path":"lucene/core/src/java/org/apache/lucene/index/MultiDocValues#getDocsWithField(IndexReader,String).mjava","commits":[{"id":"9faa42f41b6adb98daf009cf99a4ee239189e469","date":1376648738,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiDocValues#getDocsWithField(IndexReader,String).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns a Bits for a reader's docsWithField (potentially merging on-the-fly) \n   * <p>\n   * This is a slow way to access this bitset. Instead, access them per-segment\n   * with {@link AtomicReader#getDocsWithField(String)}\n   * </p> \n   * */\n  public static Bits getDocsWithField(final IndexReader r, final String field) throws IOException {\n    final List<AtomicReaderContext> leaves = r.leaves();\n    final int size = leaves.size();\n    if (size == 0) {\n      return null;\n    } else if (size == 1) {\n      return leaves.get(0).reader().getDocsWithField(field);\n    }\n\n    boolean anyReal = false;\n    boolean anyMissing = false;\n    final Bits[] values = new Bits[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      AtomicReaderContext context = leaves.get(i);\n      Bits v = context.reader().getDocsWithField(field);\n      if (v == null) {\n        v = new Bits.MatchNoBits(context.reader().maxDoc());\n        anyMissing = true;\n      } else {\n        anyReal = true;\n        if (v instanceof Bits.MatchAllBits == false) {\n          anyMissing = true;\n        }\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = r.maxDoc();\n\n    if (!anyReal) {\n      return null;\n    } else if (!anyMissing) {\n      return new Bits.MatchAllBits(r.maxDoc());\n    } else {\n      return new MultiBits(values, starts, false);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiDocValues#getDocsWithField(IndexReader,String).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns a Bits for a reader's docsWithField (potentially merging on-the-fly) \n   * <p>\n   * This is a slow way to access this bitset. Instead, access them per-segment\n   * with {@link AtomicReader#getDocsWithField(String)}\n   * </p> \n   * */\n  public static Bits getDocsWithField(final IndexReader r, final String field) throws IOException {\n    final List<AtomicReaderContext> leaves = r.leaves();\n    final int size = leaves.size();\n    if (size == 0) {\n      return null;\n    } else if (size == 1) {\n      return leaves.get(0).reader().getDocsWithField(field);\n    }\n\n    boolean anyReal = false;\n    boolean anyMissing = false;\n    final Bits[] values = new Bits[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      AtomicReaderContext context = leaves.get(i);\n      Bits v = context.reader().getDocsWithField(field);\n      if (v == null) {\n        v = new Bits.MatchNoBits(context.reader().maxDoc());\n        anyMissing = true;\n      } else {\n        anyReal = true;\n        if (v instanceof Bits.MatchAllBits == false) {\n          anyMissing = true;\n        }\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = r.maxDoc();\n\n    if (!anyReal) {\n      return null;\n    } else if (!anyMissing) {\n      return new Bits.MatchAllBits(r.maxDoc());\n    } else {\n      return new MultiBits(values, starts, false);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiDocValues#getDocsWithField(IndexReader,String).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns a Bits for a reader's docsWithField (potentially merging on-the-fly) \n   * <p>\n   * This is a slow way to access this bitset. Instead, access them per-segment\n   * with {@link AtomicReader#getDocsWithField(String)}\n   * </p> \n   * */\n  public static Bits getDocsWithField(final IndexReader r, final String field) throws IOException {\n    final List<AtomicReaderContext> leaves = r.leaves();\n    final int size = leaves.size();\n    if (size == 0) {\n      return null;\n    } else if (size == 1) {\n      return leaves.get(0).reader().getDocsWithField(field);\n    }\n\n    boolean anyReal = false;\n    boolean anyMissing = false;\n    final Bits[] values = new Bits[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      AtomicReaderContext context = leaves.get(i);\n      Bits v = context.reader().getDocsWithField(field);\n      if (v == null) {\n        v = new Bits.MatchNoBits(context.reader().maxDoc());\n        anyMissing = true;\n      } else {\n        anyReal = true;\n        if (v instanceof Bits.MatchAllBits == false) {\n          anyMissing = true;\n        }\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = r.maxDoc();\n\n    if (!anyReal) {\n      return null;\n    } else if (!anyMissing) {\n      return new Bits.MatchAllBits(r.maxDoc());\n    } else {\n      return new MultiBits(values, starts, false);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiDocValues#getDocsWithField(IndexReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiDocValues#getDocsWithField(IndexReader,String).mjava","sourceNew":"  /** Returns a Bits for a reader's docsWithField (potentially merging on-the-fly) \n   * <p>\n   * This is a slow way to access this bitset. Instead, access them per-segment\n   * with {@link LeafReader#getDocsWithField(String)}\n   * </p> \n   * */\n  public static Bits getDocsWithField(final IndexReader r, final String field) throws IOException {\n    final List<LeafReaderContext> leaves = r.leaves();\n    final int size = leaves.size();\n    if (size == 0) {\n      return null;\n    } else if (size == 1) {\n      return leaves.get(0).reader().getDocsWithField(field);\n    }\n\n    boolean anyReal = false;\n    boolean anyMissing = false;\n    final Bits[] values = new Bits[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = leaves.get(i);\n      Bits v = context.reader().getDocsWithField(field);\n      if (v == null) {\n        v = new Bits.MatchNoBits(context.reader().maxDoc());\n        anyMissing = true;\n      } else {\n        anyReal = true;\n        if (v instanceof Bits.MatchAllBits == false) {\n          anyMissing = true;\n        }\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = r.maxDoc();\n\n    if (!anyReal) {\n      return null;\n    } else if (!anyMissing) {\n      return new Bits.MatchAllBits(r.maxDoc());\n    } else {\n      return new MultiBits(values, starts, false);\n    }\n  }\n\n","sourceOld":"  /** Returns a Bits for a reader's docsWithField (potentially merging on-the-fly) \n   * <p>\n   * This is a slow way to access this bitset. Instead, access them per-segment\n   * with {@link AtomicReader#getDocsWithField(String)}\n   * </p> \n   * */\n  public static Bits getDocsWithField(final IndexReader r, final String field) throws IOException {\n    final List<AtomicReaderContext> leaves = r.leaves();\n    final int size = leaves.size();\n    if (size == 0) {\n      return null;\n    } else if (size == 1) {\n      return leaves.get(0).reader().getDocsWithField(field);\n    }\n\n    boolean anyReal = false;\n    boolean anyMissing = false;\n    final Bits[] values = new Bits[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      AtomicReaderContext context = leaves.get(i);\n      Bits v = context.reader().getDocsWithField(field);\n      if (v == null) {\n        v = new Bits.MatchNoBits(context.reader().maxDoc());\n        anyMissing = true;\n      } else {\n        anyReal = true;\n        if (v instanceof Bits.MatchAllBits == false) {\n          anyMissing = true;\n        }\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = r.maxDoc();\n\n    if (!anyReal) {\n      return null;\n    } else if (!anyMissing) {\n      return new Bits.MatchAllBits(r.maxDoc());\n    } else {\n      return new MultiBits(values, starts, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22aab7a3b640b0dba26cc5e9416bc7af93614b46","date":1462575761,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiDocValues#getDocsWithField(IndexReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiDocValues#getDocsWithField(IndexReader,String).mjava","sourceNew":"  /** Returns a Bits for a reader's docsWithField (potentially merging on-the-fly) \n   * <p>\n   * This is a slow way to access this bitset. Instead, access them per-segment\n   * with {@link LeafReader#getDocsWithField(String)}\n   * </p> \n   * */\n  public static Bits getDocsWithField(final IndexReader r, final String field) throws IOException {\n    final List<LeafReaderContext> leaves = r.leaves();\n    final int size = leaves.size();\n    if (size == 0) {\n      return null;\n    } else if (size == 1) {\n      return leaves.get(0).reader().getDocsWithField(field);\n    }\n\n    boolean anyReal = false;\n    boolean anyMissing = false;\n    final Bits[] values = new Bits[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = leaves.get(i);\n      if (context.reader().getIndexSort() != null) {\n        throw new IllegalArgumentException(\"cannot handle index sort: reader=\" + context.reader());\n      }\n      Bits v = context.reader().getDocsWithField(field);\n      if (v == null) {\n        v = new Bits.MatchNoBits(context.reader().maxDoc());\n        anyMissing = true;\n      } else {\n        anyReal = true;\n        if (v instanceof Bits.MatchAllBits == false) {\n          anyMissing = true;\n        }\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = r.maxDoc();\n\n    if (!anyReal) {\n      return null;\n    } else if (!anyMissing) {\n      return new Bits.MatchAllBits(r.maxDoc());\n    } else {\n      return new MultiBits(values, starts, false);\n    }\n  }\n\n","sourceOld":"  /** Returns a Bits for a reader's docsWithField (potentially merging on-the-fly) \n   * <p>\n   * This is a slow way to access this bitset. Instead, access them per-segment\n   * with {@link LeafReader#getDocsWithField(String)}\n   * </p> \n   * */\n  public static Bits getDocsWithField(final IndexReader r, final String field) throws IOException {\n    final List<LeafReaderContext> leaves = r.leaves();\n    final int size = leaves.size();\n    if (size == 0) {\n      return null;\n    } else if (size == 1) {\n      return leaves.get(0).reader().getDocsWithField(field);\n    }\n\n    boolean anyReal = false;\n    boolean anyMissing = false;\n    final Bits[] values = new Bits[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = leaves.get(i);\n      Bits v = context.reader().getDocsWithField(field);\n      if (v == null) {\n        v = new Bits.MatchNoBits(context.reader().maxDoc());\n        anyMissing = true;\n      } else {\n        anyReal = true;\n        if (v instanceof Bits.MatchAllBits == false) {\n          anyMissing = true;\n        }\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = r.maxDoc();\n\n    if (!anyReal) {\n      return null;\n    } else if (!anyMissing) {\n      return new Bits.MatchAllBits(r.maxDoc());\n    } else {\n      return new MultiBits(values, starts, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"815972da4a13279b8e975d2e32ca450649d6c295","date":1462635959,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiDocValues#getDocsWithField(IndexReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiDocValues#getDocsWithField(IndexReader,String).mjava","sourceNew":"  /** Returns a Bits for a reader's docsWithField (potentially merging on-the-fly) \n   * <p>\n   * This is a slow way to access this bitset. Instead, access them per-segment\n   * with {@link LeafReader#getDocsWithField(String)}\n   * </p> \n   * */\n  public static Bits getDocsWithField(final IndexReader r, final String field) throws IOException {\n    final List<LeafReaderContext> leaves = r.leaves();\n    final int size = leaves.size();\n    if (size == 0) {\n      return null;\n    } else if (size == 1) {\n      return leaves.get(0).reader().getDocsWithField(field);\n    }\n\n    boolean anyReal = false;\n    boolean anyMissing = false;\n    final Bits[] values = new Bits[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = leaves.get(i);\n      Bits v = context.reader().getDocsWithField(field);\n      if (v == null) {\n        v = new Bits.MatchNoBits(context.reader().maxDoc());\n        anyMissing = true;\n      } else {\n        anyReal = true;\n        if (v instanceof Bits.MatchAllBits == false) {\n          anyMissing = true;\n        }\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = r.maxDoc();\n\n    if (!anyReal) {\n      return null;\n    } else if (!anyMissing) {\n      return new Bits.MatchAllBits(r.maxDoc());\n    } else {\n      return new MultiBits(values, starts, false);\n    }\n  }\n\n","sourceOld":"  /** Returns a Bits for a reader's docsWithField (potentially merging on-the-fly) \n   * <p>\n   * This is a slow way to access this bitset. Instead, access them per-segment\n   * with {@link LeafReader#getDocsWithField(String)}\n   * </p> \n   * */\n  public static Bits getDocsWithField(final IndexReader r, final String field) throws IOException {\n    final List<LeafReaderContext> leaves = r.leaves();\n    final int size = leaves.size();\n    if (size == 0) {\n      return null;\n    } else if (size == 1) {\n      return leaves.get(0).reader().getDocsWithField(field);\n    }\n\n    boolean anyReal = false;\n    boolean anyMissing = false;\n    final Bits[] values = new Bits[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = leaves.get(i);\n      if (context.reader().getIndexSort() != null) {\n        throw new IllegalArgumentException(\"cannot handle index sort: reader=\" + context.reader());\n      }\n      Bits v = context.reader().getDocsWithField(field);\n      if (v == null) {\n        v = new Bits.MatchNoBits(context.reader().maxDoc());\n        anyMissing = true;\n      } else {\n        anyReal = true;\n        if (v instanceof Bits.MatchAllBits == false) {\n          anyMissing = true;\n        }\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = r.maxDoc();\n\n    if (!anyReal) {\n      return null;\n    } else if (!anyMissing) {\n      return new Bits.MatchAllBits(r.maxDoc());\n    } else {\n      return new MultiBits(values, starts, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiDocValues#getDocsWithField(IndexReader,String).mjava","sourceNew":null,"sourceOld":"  /** Returns a Bits for a reader's docsWithField (potentially merging on-the-fly) \n   * <p>\n   * This is a slow way to access this bitset. Instead, access them per-segment\n   * with {@link LeafReader#getDocsWithField(String)}\n   * </p> \n   * */\n  public static Bits getDocsWithField(final IndexReader r, final String field) throws IOException {\n    final List<LeafReaderContext> leaves = r.leaves();\n    final int size = leaves.size();\n    if (size == 0) {\n      return null;\n    } else if (size == 1) {\n      return leaves.get(0).reader().getDocsWithField(field);\n    }\n\n    boolean anyReal = false;\n    boolean anyMissing = false;\n    final Bits[] values = new Bits[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = leaves.get(i);\n      Bits v = context.reader().getDocsWithField(field);\n      if (v == null) {\n        v = new Bits.MatchNoBits(context.reader().maxDoc());\n        anyMissing = true;\n      } else {\n        anyReal = true;\n        if (v instanceof Bits.MatchAllBits == false) {\n          anyMissing = true;\n        }\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = r.maxDoc();\n\n    if (!anyReal) {\n      return null;\n    } else if (!anyMissing) {\n      return new Bits.MatchAllBits(r.maxDoc());\n    } else {\n      return new MultiBits(values, starts, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiDocValues#getDocsWithField(IndexReader,String).mjava","sourceNew":null,"sourceOld":"  /** Returns a Bits for a reader's docsWithField (potentially merging on-the-fly) \n   * <p>\n   * This is a slow way to access this bitset. Instead, access them per-segment\n   * with {@link LeafReader#getDocsWithField(String)}\n   * </p> \n   * */\n  public static Bits getDocsWithField(final IndexReader r, final String field) throws IOException {\n    final List<LeafReaderContext> leaves = r.leaves();\n    final int size = leaves.size();\n    if (size == 0) {\n      return null;\n    } else if (size == 1) {\n      return leaves.get(0).reader().getDocsWithField(field);\n    }\n\n    boolean anyReal = false;\n    boolean anyMissing = false;\n    final Bits[] values = new Bits[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = leaves.get(i);\n      Bits v = context.reader().getDocsWithField(field);\n      if (v == null) {\n        v = new Bits.MatchNoBits(context.reader().maxDoc());\n        anyMissing = true;\n      } else {\n        anyReal = true;\n        if (v instanceof Bits.MatchAllBits == false) {\n          anyMissing = true;\n        }\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = r.maxDoc();\n\n    if (!anyReal) {\n      return null;\n    } else if (!anyMissing) {\n      return new Bits.MatchAllBits(r.maxDoc());\n    } else {\n      return new MultiBits(values, starts, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiDocValues#getDocsWithField(IndexReader,String).mjava","sourceNew":null,"sourceOld":"  /** Returns a Bits for a reader's docsWithField (potentially merging on-the-fly) \n   * <p>\n   * This is a slow way to access this bitset. Instead, access them per-segment\n   * with {@link LeafReader#getDocsWithField(String)}\n   * </p> \n   * */\n  public static Bits getDocsWithField(final IndexReader r, final String field) throws IOException {\n    final List<LeafReaderContext> leaves = r.leaves();\n    final int size = leaves.size();\n    if (size == 0) {\n      return null;\n    } else if (size == 1) {\n      return leaves.get(0).reader().getDocsWithField(field);\n    }\n\n    boolean anyReal = false;\n    boolean anyMissing = false;\n    final Bits[] values = new Bits[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = leaves.get(i);\n      Bits v = context.reader().getDocsWithField(field);\n      if (v == null) {\n        v = new Bits.MatchNoBits(context.reader().maxDoc());\n        anyMissing = true;\n      } else {\n        anyReal = true;\n        if (v instanceof Bits.MatchAllBits == false) {\n          anyMissing = true;\n        }\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = r.maxDoc();\n\n    if (!anyReal) {\n      return null;\n    } else if (!anyMissing) {\n      return new Bits.MatchAllBits(r.maxDoc());\n    } else {\n      return new MultiBits(values, starts, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9faa42f41b6adb98daf009cf99a4ee239189e469":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["c9fb5f46e264daf5ba3860defe623a89d202dd87","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9faa42f41b6adb98daf009cf99a4ee239189e469"],"815972da4a13279b8e975d2e32ca450649d6c295":["22aab7a3b640b0dba26cc5e9416bc7af93614b46"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c9fb5f46e264daf5ba3860defe623a89d202dd87","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"22aab7a3b640b0dba26cc5e9416bc7af93614b46":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"9faa42f41b6adb98daf009cf99a4ee239189e469":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9faa42f41b6adb98daf009cf99a4ee239189e469","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"815972da4a13279b8e975d2e32ca450649d6c295":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","22aab7a3b640b0dba26cc5e9416bc7af93614b46"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"22aab7a3b640b0dba26cc5e9416bc7af93614b46":["815972da4a13279b8e975d2e32ca450649d6c295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","815972da4a13279b8e975d2e32ca450649d6c295","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}