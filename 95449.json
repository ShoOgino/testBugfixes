{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestFactories#doTestTokenizer(String).mjava","commits":[{"id":"3d3e0b5069dbacda34baa90adceb47cb5c9f3e65","date":1343184871,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestFactories#doTestTokenizer(String).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestTokenizer(String tokenizer) throws IOException {\n    TokenizerFactory factory = TokenizerFactory.forName(tokenizer);\n    if (initialize(factory)) {\n      // we managed to fully create an instance. check a few more things:\n      \n      // if it implements MultiTermAware, sanity check its impl\n      if (factory instanceof MultiTermAwareComponent) {\n        AbstractAnalysisFactory mtc = ((MultiTermAwareComponent) factory).getMultiTermComponent();\n        assertNotNull(mtc);\n        // its not ok to return e.g. a charfilter here: but a tokenizer could wrap a filter around it\n        assertFalse(mtc instanceof CharFilterFactory);\n      }\n      \n      // beast it just a little, it shouldnt throw exceptions:\n      // (it should have thrown them in initialize)\n      checkRandomData(random(), new FactoryAnalyzer(factory, null, null), 100, 20, false, false);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestFactories#doTestTokenizer(String).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestTokenizer(String tokenizer) throws IOException {\n    TokenizerFactory factory = TokenizerFactory.forName(tokenizer);\n    if (initialize(factory)) {\n      // we managed to fully create an instance. check a few more things:\n      \n      // if it implements MultiTermAware, sanity check its impl\n      if (factory instanceof MultiTermAwareComponent) {\n        AbstractAnalysisFactory mtc = ((MultiTermAwareComponent) factory).getMultiTermComponent();\n        assertNotNull(mtc);\n        // its not ok to return e.g. a charfilter here: but a tokenizer could wrap a filter around it\n        assertFalse(mtc instanceof CharFilterFactory);\n      }\n      \n      // beast it just a little, it shouldnt throw exceptions:\n      // (it should have thrown them in initialize)\n      checkRandomData(random(), new FactoryAnalyzer(factory, null, null), 100, 20, false, false);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestFactories#doTestTokenizer(String).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestTokenizer(String tokenizer) throws IOException {\n    TokenizerFactory factory = TokenizerFactory.forName(tokenizer);\n    if (initialize(factory)) {\n      // we managed to fully create an instance. check a few more things:\n      \n      // if it implements MultiTermAware, sanity check its impl\n      if (factory instanceof MultiTermAwareComponent) {\n        AbstractAnalysisFactory mtc = ((MultiTermAwareComponent) factory).getMultiTermComponent();\n        assertNotNull(mtc);\n        // its not ok to return e.g. a charfilter here: but a tokenizer could wrap a filter around it\n        assertFalse(mtc instanceof CharFilterFactory);\n      }\n      \n      // beast it just a little, it shouldnt throw exceptions:\n      // (it should have thrown them in initialize)\n      checkRandomData(random(), new FactoryAnalyzer(factory, null, null), 100, 20, false, false);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestFactories#doTestTokenizer(String).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestTokenizer(String tokenizer) throws IOException {\n    TokenizerFactory factory = TokenizerFactory.forName(tokenizer);\n    if (initialize(factory)) {\n      // we managed to fully create an instance. check a few more things:\n      \n      // if it implements MultiTermAware, sanity check its impl\n      if (factory instanceof MultiTermAwareComponent) {\n        AbstractAnalysisFactory mtc = ((MultiTermAwareComponent) factory).getMultiTermComponent();\n        assertNotNull(mtc);\n        // its not ok to return e.g. a charfilter here: but a tokenizer could wrap a filter around it\n        assertFalse(mtc instanceof CharFilterFactory);\n      }\n      \n      // beast it just a little, it shouldnt throw exceptions:\n      // (it should have thrown them in initialize)\n      checkRandomData(random(), new FactoryAnalyzer(factory, null, null), 100, 20, false, false);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestFactories#doTestTokenizer(String).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestFactories#doTestTokenizer(String).mjava","sourceNew":"  private void doTestTokenizer(String tokenizer) throws IOException {\n    Class<? extends TokenizerFactory> factoryClazz = TokenizerFactory.lookupClass(tokenizer);\n    TokenizerFactory factory = (TokenizerFactory) initialize(factoryClazz);\n    if (factory != null) {\n      // we managed to fully create an instance. check a few more things:\n      \n      // if it implements MultiTermAware, sanity check its impl\n      if (factory instanceof MultiTermAwareComponent) {\n        AbstractAnalysisFactory mtc = ((MultiTermAwareComponent) factory).getMultiTermComponent();\n        assertNotNull(mtc);\n        // its not ok to return e.g. a charfilter here: but a tokenizer could wrap a filter around it\n        assertFalse(mtc instanceof CharFilterFactory);\n      }\n      \n      // beast it just a little, it shouldnt throw exceptions:\n      // (it should have thrown them in initialize)\n      checkRandomData(random(), new FactoryAnalyzer(factory, null, null), 100, 20, false, false);\n    }\n  }\n\n","sourceOld":"  private void doTestTokenizer(String tokenizer) throws IOException {\n    TokenizerFactory factory = TokenizerFactory.forName(tokenizer);\n    if (initialize(factory)) {\n      // we managed to fully create an instance. check a few more things:\n      \n      // if it implements MultiTermAware, sanity check its impl\n      if (factory instanceof MultiTermAwareComponent) {\n        AbstractAnalysisFactory mtc = ((MultiTermAwareComponent) factory).getMultiTermComponent();\n        assertNotNull(mtc);\n        // its not ok to return e.g. a charfilter here: but a tokenizer could wrap a filter around it\n        assertFalse(mtc instanceof CharFilterFactory);\n      }\n      \n      // beast it just a little, it shouldnt throw exceptions:\n      // (it should have thrown them in initialize)\n      checkRandomData(random(), new FactoryAnalyzer(factory, null, null), 100, 20, false, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e902c08baf3b883b738211276f135b9db68b4530","date":1417054381,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestFactories#doTestTokenizer(String).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestFactories#doTestTokenizer(String).mjava","sourceNew":"  private void doTestTokenizer(String tokenizer) throws IOException {\n    Class<? extends TokenizerFactory> factoryClazz = TokenizerFactory.lookupClass(tokenizer);\n    TokenizerFactory factory = (TokenizerFactory) initialize(factoryClazz);\n    if (factory != null) {\n      // we managed to fully create an instance. check a few more things:\n      \n      // if it implements MultiTermAware, sanity check its impl\n      if (factory instanceof MultiTermAwareComponent) {\n        AbstractAnalysisFactory mtc = ((MultiTermAwareComponent) factory).getMultiTermComponent();\n        assertNotNull(mtc);\n        // its not ok to return e.g. a charfilter here: but a tokenizer could wrap a filter around it\n        assertFalse(mtc instanceof CharFilterFactory);\n      }\n      \n      // beast it just a little, it shouldnt throw exceptions:\n      // (it should have thrown them in initialize)\n      checkRandomData(random(), new FactoryAnalyzer(factory, null, null), 20, 20, false, false);\n    }\n  }\n\n","sourceOld":"  private void doTestTokenizer(String tokenizer) throws IOException {\n    Class<? extends TokenizerFactory> factoryClazz = TokenizerFactory.lookupClass(tokenizer);\n    TokenizerFactory factory = (TokenizerFactory) initialize(factoryClazz);\n    if (factory != null) {\n      // we managed to fully create an instance. check a few more things:\n      \n      // if it implements MultiTermAware, sanity check its impl\n      if (factory instanceof MultiTermAwareComponent) {\n        AbstractAnalysisFactory mtc = ((MultiTermAwareComponent) factory).getMultiTermComponent();\n        assertNotNull(mtc);\n        // its not ok to return e.g. a charfilter here: but a tokenizer could wrap a filter around it\n        assertFalse(mtc instanceof CharFilterFactory);\n      }\n      \n      // beast it just a little, it shouldnt throw exceptions:\n      // (it should have thrown them in initialize)\n      checkRandomData(random(), new FactoryAnalyzer(factory, null, null), 100, 20, false, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestFactories#doTestTokenizer(String).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestFactories#doTestTokenizer(String).mjava","sourceNew":"  private void doTestTokenizer(String tokenizer) throws IOException {\n    Class<? extends TokenizerFactory> factoryClazz = TokenizerFactory.lookupClass(tokenizer);\n    TokenizerFactory factory = (TokenizerFactory) initialize(factoryClazz);\n    if (factory != null) {\n      // we managed to fully create an instance. check a few more things:\n      \n      // if it implements MultiTermAware, sanity check its impl\n      if (factory instanceof MultiTermAwareComponent) {\n        AbstractAnalysisFactory mtc = ((MultiTermAwareComponent) factory).getMultiTermComponent();\n        assertNotNull(mtc);\n        // it's not ok to return e.g. a charfilter here: but a tokenizer could wrap a filter around it\n        assertFalse(mtc instanceof CharFilterFactory);\n      }\n      \n      // beast it just a little, it shouldnt throw exceptions:\n      // (it should have thrown them in initialize)\n      checkRandomData(random(), new FactoryAnalyzer(factory, null, null), 20, 20, false, false);\n    }\n  }\n\n","sourceOld":"  private void doTestTokenizer(String tokenizer) throws IOException {\n    Class<? extends TokenizerFactory> factoryClazz = TokenizerFactory.lookupClass(tokenizer);\n    TokenizerFactory factory = (TokenizerFactory) initialize(factoryClazz);\n    if (factory != null) {\n      // we managed to fully create an instance. check a few more things:\n      \n      // if it implements MultiTermAware, sanity check its impl\n      if (factory instanceof MultiTermAwareComponent) {\n        AbstractAnalysisFactory mtc = ((MultiTermAwareComponent) factory).getMultiTermComponent();\n        assertNotNull(mtc);\n        // its not ok to return e.g. a charfilter here: but a tokenizer could wrap a filter around it\n        assertFalse(mtc instanceof CharFilterFactory);\n      }\n      \n      // beast it just a little, it shouldnt throw exceptions:\n      // (it should have thrown them in initialize)\n      checkRandomData(random(), new FactoryAnalyzer(factory, null, null), 20, 20, false, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestFactories#doTestTokenizer(String).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestFactories#doTestTokenizer(String).mjava","sourceNew":"  private void doTestTokenizer(String tokenizer) throws IOException {\n    Class<? extends TokenizerFactory> factoryClazz = TokenizerFactory.lookupClass(tokenizer);\n    TokenizerFactory factory = (TokenizerFactory) initialize(factoryClazz);\n    if (factory != null) {\n      // we managed to fully create an instance. check a few more things:\n      \n      // if it implements MultiTermAware, sanity check its impl\n      if (factory instanceof MultiTermAwareComponent) {\n        AbstractAnalysisFactory mtc = ((MultiTermAwareComponent) factory).getMultiTermComponent();\n        assertNotNull(mtc);\n        // it's not ok to return e.g. a charfilter here: but a tokenizer could wrap a filter around it\n        assertFalse(mtc instanceof CharFilterFactory);\n      }\n      \n      // beast it just a little, it shouldnt throw exceptions:\n      // (it should have thrown them in initialize)\n      Analyzer a = new FactoryAnalyzer(factory, null, null);\n      checkRandomData(random(), a, 20, 20, false, false);\n      a.close();\n    }\n  }\n\n","sourceOld":"  private void doTestTokenizer(String tokenizer) throws IOException {\n    Class<? extends TokenizerFactory> factoryClazz = TokenizerFactory.lookupClass(tokenizer);\n    TokenizerFactory factory = (TokenizerFactory) initialize(factoryClazz);\n    if (factory != null) {\n      // we managed to fully create an instance. check a few more things:\n      \n      // if it implements MultiTermAware, sanity check its impl\n      if (factory instanceof MultiTermAwareComponent) {\n        AbstractAnalysisFactory mtc = ((MultiTermAwareComponent) factory).getMultiTermComponent();\n        assertNotNull(mtc);\n        // it's not ok to return e.g. a charfilter here: but a tokenizer could wrap a filter around it\n        assertFalse(mtc instanceof CharFilterFactory);\n      }\n      \n      // beast it just a little, it shouldnt throw exceptions:\n      // (it should have thrown them in initialize)\n      checkRandomData(random(), new FactoryAnalyzer(factory, null, null), 20, 20, false, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestFactories#doTestTokenizer(String).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestFactories#doTestTokenizer(String).mjava","sourceNew":"  private void doTestTokenizer(String tokenizer) throws IOException {\n    Class<? extends TokenizerFactory> factoryClazz = TokenizerFactory.lookupClass(tokenizer);\n    TokenizerFactory factory = (TokenizerFactory) initialize(factoryClazz);\n    if (factory != null) {\n      // we managed to fully create an instance. check a few more things:\n      \n      // if it implements MultiTermAware, sanity check its impl\n      if (factory instanceof MultiTermAwareComponent) {\n        AbstractAnalysisFactory mtc = ((MultiTermAwareComponent) factory).getMultiTermComponent();\n        assertNotNull(mtc);\n        // it's not ok to return e.g. a charfilter here: but a tokenizer could wrap a filter around it\n        assertFalse(mtc instanceof CharFilterFactory);\n      }\n      \n      // beast it just a little, it shouldnt throw exceptions:\n      // (it should have thrown them in initialize)\n      Analyzer a = new FactoryAnalyzer(factory, null, null);\n      checkRandomData(random(), a, 20, 20, false, false);\n      a.close();\n    }\n  }\n\n","sourceOld":"  private void doTestTokenizer(String tokenizer) throws IOException {\n    Class<? extends TokenizerFactory> factoryClazz = TokenizerFactory.lookupClass(tokenizer);\n    TokenizerFactory factory = (TokenizerFactory) initialize(factoryClazz);\n    if (factory != null) {\n      // we managed to fully create an instance. check a few more things:\n      \n      // if it implements MultiTermAware, sanity check its impl\n      if (factory instanceof MultiTermAwareComponent) {\n        AbstractAnalysisFactory mtc = ((MultiTermAwareComponent) factory).getMultiTermComponent();\n        assertNotNull(mtc);\n        // it's not ok to return e.g. a charfilter here: but a tokenizer could wrap a filter around it\n        assertFalse(mtc instanceof CharFilterFactory);\n      }\n      \n      // beast it just a little, it shouldnt throw exceptions:\n      // (it should have thrown them in initialize)\n      checkRandomData(random(), new FactoryAnalyzer(factory, null, null), 20, 20, false, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ca3859782f72b942db70f56f213e110fc35cc98","date":1497083454,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestFactories#doTestTokenizer(String).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestFactories#doTestTokenizer(String).mjava","sourceNew":"  private void doTestTokenizer(String tokenizer) throws IOException {\n    Class<? extends TokenizerFactory> factoryClazz = TokenizerFactory.lookupClass(tokenizer);\n    TokenizerFactory factory = (TokenizerFactory) initialize(factoryClazz);\n    if (factory != null) {\n      // we managed to fully create an instance. check a few more things:\n      \n      // if it implements MultiTermAware, sanity check its impl\n      if (factory instanceof MultiTermAwareComponent) {\n        AbstractAnalysisFactory mtc = ((MultiTermAwareComponent) factory).getMultiTermComponent();\n        assertNotNull(mtc);\n        // it's not ok to return e.g. a charfilter here: but a tokenizer could wrap a filter around it\n        assertFalse(mtc instanceof CharFilterFactory);\n      }\n      \n      if (!EXCLUDE_FACTORIES_RANDOM_DATA.contains(factory.getClass())) {\n        // beast it just a little, it shouldnt throw exceptions:\n        // (it should have thrown them in initialize)\n        Analyzer a = new FactoryAnalyzer(factory, null, null);\n        checkRandomData(random(), a, 20, 20, false, false);\n        a.close();\n      }\n    }\n  }\n\n","sourceOld":"  private void doTestTokenizer(String tokenizer) throws IOException {\n    Class<? extends TokenizerFactory> factoryClazz = TokenizerFactory.lookupClass(tokenizer);\n    TokenizerFactory factory = (TokenizerFactory) initialize(factoryClazz);\n    if (factory != null) {\n      // we managed to fully create an instance. check a few more things:\n      \n      // if it implements MultiTermAware, sanity check its impl\n      if (factory instanceof MultiTermAwareComponent) {\n        AbstractAnalysisFactory mtc = ((MultiTermAwareComponent) factory).getMultiTermComponent();\n        assertNotNull(mtc);\n        // it's not ok to return e.g. a charfilter here: but a tokenizer could wrap a filter around it\n        assertFalse(mtc instanceof CharFilterFactory);\n      }\n      \n      // beast it just a little, it shouldnt throw exceptions:\n      // (it should have thrown them in initialize)\n      Analyzer a = new FactoryAnalyzer(factory, null, null);\n      checkRandomData(random(), a, 20, 20, false, false);\n      a.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestFactories#doTestTokenizer(String).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestFactories#doTestTokenizer(String).mjava","sourceNew":"  private void doTestTokenizer(String tokenizer) throws IOException {\n    Class<? extends TokenizerFactory> factoryClazz = TokenizerFactory.lookupClass(tokenizer);\n    TokenizerFactory factory = (TokenizerFactory) initialize(factoryClazz);\n    if (factory != null) {\n      // we managed to fully create an instance. check a few more things:\n      \n      // if it implements MultiTermAware, sanity check its impl\n      if (factory instanceof MultiTermAwareComponent) {\n        AbstractAnalysisFactory mtc = ((MultiTermAwareComponent) factory).getMultiTermComponent();\n        assertNotNull(mtc);\n        // it's not ok to return e.g. a charfilter here: but a tokenizer could wrap a filter around it\n        assertFalse(mtc instanceof CharFilterFactory);\n      }\n      \n      if (!EXCLUDE_FACTORIES_RANDOM_DATA.contains(factory.getClass())) {\n        // beast it just a little, it shouldnt throw exceptions:\n        // (it should have thrown them in initialize)\n        Analyzer a = new FactoryAnalyzer(factory, null, null);\n        checkRandomData(random(), a, 20, 20, false, false);\n        a.close();\n      }\n    }\n  }\n\n","sourceOld":"  private void doTestTokenizer(String tokenizer) throws IOException {\n    Class<? extends TokenizerFactory> factoryClazz = TokenizerFactory.lookupClass(tokenizer);\n    TokenizerFactory factory = (TokenizerFactory) initialize(factoryClazz);\n    if (factory != null) {\n      // we managed to fully create an instance. check a few more things:\n      \n      // if it implements MultiTermAware, sanity check its impl\n      if (factory instanceof MultiTermAwareComponent) {\n        AbstractAnalysisFactory mtc = ((MultiTermAwareComponent) factory).getMultiTermComponent();\n        assertNotNull(mtc);\n        // it's not ok to return e.g. a charfilter here: but a tokenizer could wrap a filter around it\n        assertFalse(mtc instanceof CharFilterFactory);\n      }\n      \n      // beast it just a little, it shouldnt throw exceptions:\n      // (it should have thrown them in initialize)\n      Analyzer a = new FactoryAnalyzer(factory, null, null);\n      checkRandomData(random(), a, 20, 20, false, false);\n      a.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestFactories#doTestTokenizer(String).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestFactories#doTestTokenizer(String).mjava","sourceNew":"  private void doTestTokenizer(String tokenizer) throws IOException {\n    Class<? extends TokenizerFactory> factoryClazz = TokenizerFactory.lookupClass(tokenizer);\n    TokenizerFactory factory = (TokenizerFactory) initialize(factoryClazz);\n    if (factory != null) {\n      // we managed to fully create an instance. check a few more things:\n      \n      // if it implements MultiTermAware, sanity check its impl\n      if (factory instanceof MultiTermAwareComponent) {\n        AbstractAnalysisFactory mtc = ((MultiTermAwareComponent) factory).getMultiTermComponent();\n        assertNotNull(mtc);\n        // it's not ok to return e.g. a charfilter here: but a tokenizer could wrap a filter around it\n        assertFalse(mtc instanceof CharFilterFactory);\n      }\n      \n      if (!EXCLUDE_FACTORIES_RANDOM_DATA.contains(factory.getClass())) {\n        // beast it just a little, it shouldnt throw exceptions:\n        // (it should have thrown them in initialize)\n        Analyzer a = new FactoryAnalyzer(factory, null, null);\n        checkRandomData(random(), a, 20, 20, false, false);\n        a.close();\n      }\n    }\n  }\n\n","sourceOld":"  private void doTestTokenizer(String tokenizer) throws IOException {\n    Class<? extends TokenizerFactory> factoryClazz = TokenizerFactory.lookupClass(tokenizer);\n    TokenizerFactory factory = (TokenizerFactory) initialize(factoryClazz);\n    if (factory != null) {\n      // we managed to fully create an instance. check a few more things:\n      \n      // if it implements MultiTermAware, sanity check its impl\n      if (factory instanceof MultiTermAwareComponent) {\n        AbstractAnalysisFactory mtc = ((MultiTermAwareComponent) factory).getMultiTermComponent();\n        assertNotNull(mtc);\n        // it's not ok to return e.g. a charfilter here: but a tokenizer could wrap a filter around it\n        assertFalse(mtc instanceof CharFilterFactory);\n      }\n      \n      // beast it just a little, it shouldnt throw exceptions:\n      // (it should have thrown them in initialize)\n      Analyzer a = new FactoryAnalyzer(factory, null, null);\n      checkRandomData(random(), a, 20, 20, false, false);\n      a.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e322d5186d76764c8638aa79f72fd42a5aed70ef","date":1542622177,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestFactories#doTestTokenizer(String).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestFactories#doTestTokenizer(String).mjava","sourceNew":"  private void doTestTokenizer(String tokenizer) throws IOException {\n    Class<? extends TokenizerFactory> factoryClazz = TokenizerFactory.lookupClass(tokenizer);\n    TokenizerFactory factory = (TokenizerFactory) initialize(factoryClazz);\n    if (factory != null) {\n      // we managed to fully create an instance. check a few more things:\n      if (!EXCLUDE_FACTORIES_RANDOM_DATA.contains(factory.getClass())) {\n        // beast it just a little, it shouldnt throw exceptions:\n        // (it should have thrown them in initialize)\n        Analyzer a = new FactoryAnalyzer(factory, null, null);\n        checkRandomData(random(), a, 20, 20, false, false);\n        a.close();\n      }\n    }\n  }\n\n","sourceOld":"  private void doTestTokenizer(String tokenizer) throws IOException {\n    Class<? extends TokenizerFactory> factoryClazz = TokenizerFactory.lookupClass(tokenizer);\n    TokenizerFactory factory = (TokenizerFactory) initialize(factoryClazz);\n    if (factory != null) {\n      // we managed to fully create an instance. check a few more things:\n      \n      // if it implements MultiTermAware, sanity check its impl\n      if (factory instanceof MultiTermAwareComponent) {\n        AbstractAnalysisFactory mtc = ((MultiTermAwareComponent) factory).getMultiTermComponent();\n        assertNotNull(mtc);\n        // it's not ok to return e.g. a charfilter here: but a tokenizer could wrap a filter around it\n        assertFalse(mtc instanceof CharFilterFactory);\n      }\n      \n      if (!EXCLUDE_FACTORIES_RANDOM_DATA.contains(factory.getClass())) {\n        // beast it just a little, it shouldnt throw exceptions:\n        // (it should have thrown them in initialize)\n        Analyzer a = new FactoryAnalyzer(factory, null, null);\n        checkRandomData(random(), a, 20, 20, false, false);\n        a.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f","date":1579652839,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestFactories#doTestTokenizer(String).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestFactories#doTestTokenizer(String).mjava","sourceNew":"  private void doTestTokenizer(String tokenizer) throws IOException {\n    Class<? extends TokenizerFactory> factoryClazz = TokenizerFactory.lookupClass(tokenizer);\n    TokenizerFactory factory = (TokenizerFactory) initialize(factoryClazz);\n    if (factory != null) {\n      // we managed to fully create an instance. check a few more things:\n      if (!EXCLUDE_FACTORIES_RANDOM_DATA.contains(factory.getClass())) {\n        // beast it just a little, it shouldnt throw exceptions:\n        // (it should have thrown them in initialize)\n        Analyzer a = new FactoryAnalyzer(factory, null, null);\n        checkRandomData(random(), a, 3, 20, false, false);\n        a.close();\n      }\n    }\n  }\n\n","sourceOld":"  private void doTestTokenizer(String tokenizer) throws IOException {\n    Class<? extends TokenizerFactory> factoryClazz = TokenizerFactory.lookupClass(tokenizer);\n    TokenizerFactory factory = (TokenizerFactory) initialize(factoryClazz);\n    if (factory != null) {\n      // we managed to fully create an instance. check a few more things:\n      if (!EXCLUDE_FACTORIES_RANDOM_DATA.contains(factory.getClass())) {\n        // beast it just a little, it shouldnt throw exceptions:\n        // (it should have thrown them in initialize)\n        Analyzer a = new FactoryAnalyzer(factory, null, null);\n        checkRandomData(random(), a, 20, 20, false, false);\n        a.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e322d5186d76764c8638aa79f72fd42a5aed70ef":["28288370235ed02234a64753cdbf0c6ec096304a"],"e902c08baf3b883b738211276f135b9db68b4530":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["e322d5186d76764c8638aa79f72fd42a5aed70ef"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3d3e0b5069dbacda34baa90adceb47cb5c9f3e65"],"28288370235ed02234a64753cdbf0c6ec096304a":["a56958d7f71a28824f20031ffbb2e13502a0274e","7ca3859782f72b942db70f56f213e110fc35cc98"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","a56958d7f71a28824f20031ffbb2e13502a0274e"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["e902c08baf3b883b738211276f135b9db68b4530"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a1a22b1ad88b436661458df567f3fdb446392a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a1a22b1ad88b436661458df567f3fdb446392a4"],"3d3e0b5069dbacda34baa90adceb47cb5c9f3e65":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7ca3859782f72b942db70f56f213e110fc35cc98":["a56958d7f71a28824f20031ffbb2e13502a0274e"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["a56958d7f71a28824f20031ffbb2e13502a0274e","7ca3859782f72b942db70f56f213e110fc35cc98"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"]},"commit2Childs":{"e322d5186d76764c8638aa79f72fd42a5aed70ef":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"],"e902c08baf3b883b738211276f135b9db68b4530":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["e902c08baf3b883b738211276f135b9db68b4530"],"28288370235ed02234a64753cdbf0c6ec096304a":["e322d5186d76764c8638aa79f72fd42a5aed70ef"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5a1a22b1ad88b436661458df567f3fdb446392a4","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","3d3e0b5069dbacda34baa90adceb47cb5c9f3e65"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"3d3e0b5069dbacda34baa90adceb47cb5c9f3e65":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"7ca3859782f72b942db70f56f213e110fc35cc98":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["28288370235ed02234a64753cdbf0c6ec096304a","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7ca3859782f72b942db70f56f213e110fc35cc98","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}