{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/TemporalEvaluatorsTest#testInvalidExpression().mjava","commits":[{"id":"64ff6b743fd4051da7ebb3d397d1ef80833a741a","date":1492023891,"type":1,"author":"Gethin James","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/TemporalEvaluatorsTest#testInvalidExpression().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/DatePartEvaluatorTest#testInvalidExpression().mjava","sourceNew":"  @Test\n  public void testInvalidExpression() throws Exception {\n\n    StreamEvaluator evaluator;\n\n    try {\n      evaluator = factory.constructEvaluator(\"nope(a)\");\n      evaluator.evaluate(new Tuple(null));\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"Invalid date expression nope\"));\n      assertTrue(e.getCause().getCause().getMessage().contains(\"expecting one of [year, month, day\"));\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"week()\");\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"Invalid expression week()\"));\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"week(a, b)\");\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"expecting one value but found 2\"));\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"Week()\");\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getMessage().contains(\"Invalid evaluator expression Week() - function 'Week' is unknown\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testInvalidExpression() throws Exception {\n\n    StreamEvaluator evaluator;\n\n    try {\n      evaluator = factory.constructEvaluator(\"nope(a)\");\n      evaluator.evaluate(new Tuple(null));\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"Invalid date expression nope\"));\n      assertTrue(e.getCause().getCause().getMessage().contains(\"expecting one of [year, month, day\"));\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"week()\");\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"Invalid expression week()\"));\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"week(a, b)\");\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"expecting one value but found 2\"));\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"Week()\");\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getMessage().contains(\"Invalid evaluator expression Week() - function 'Week' is unknown\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c513d69b21508db62cccf741d0cdd9e0171ae1a5","date":1492023892,"type":3,"author":"Gethin James","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/TemporalEvaluatorsTest#testInvalidExpression().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/TemporalEvaluatorsTest#testInvalidExpression().mjava","sourceNew":"  @Test\n  public void testInvalidExpression() throws Exception {\n\n    StreamEvaluator evaluator;\n\n    try {\n      evaluator = factory.constructEvaluator(\"week()\");\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"Invalid expression week()\"));\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"week(a, b)\");\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"expecting one value but found 2\"));\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"Week()\");\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getMessage().contains(\"Invalid evaluator expression Week() - function 'Week' is unknown\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testInvalidExpression() throws Exception {\n\n    StreamEvaluator evaluator;\n\n    try {\n      evaluator = factory.constructEvaluator(\"nope(a)\");\n      evaluator.evaluate(new Tuple(null));\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"Invalid date expression nope\"));\n      assertTrue(e.getCause().getCause().getMessage().contains(\"expecting one of [year, month, day\"));\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"week()\");\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"Invalid expression week()\"));\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"week(a, b)\");\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"expecting one value but found 2\"));\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"Week()\");\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getMessage().contains(\"Invalid evaluator expression Week() - function 'Week' is unknown\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56ebde9c21d35a39c07989c178372e901ad377da","date":1492023892,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/TemporalEvaluatorsTest#testInvalidExpression().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/TemporalEvaluatorsTest#testInvalidExpression().mjava","sourceNew":"  @Test\n  public void testInvalidExpression() throws Exception {\n\n    StreamEvaluator evaluator;\n\n    try {\n      evaluator = factory.constructEvaluator(\"week()\");\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"Invalid expression week()\"));\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"week(a, b)\");\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"expecting one value but found 2\"));\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"Week()\");\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getMessage().contains(\"Invalid evaluator expression Week() - function 'Week' is unknown\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testInvalidExpression() throws Exception {\n\n    StreamEvaluator evaluator;\n\n    try {\n      evaluator = factory.constructEvaluator(\"week()\");\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"Invalid expression week()\"));\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"week(a, b)\");\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"expecting one value but found 2\"));\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"Week()\");\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getMessage().contains(\"Invalid evaluator expression Week() - function 'Week' is unknown\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/TemporalEvaluatorsTest#testInvalidExpression().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testInvalidExpression() throws Exception {\n\n    StreamEvaluator evaluator;\n\n    try {\n      evaluator = factory.constructEvaluator(\"week()\");\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"Invalid expression week()\"));\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"week(a, b)\");\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getCause().getCause().getMessage().contains(\"expecting one value but found 2\"));\n    }\n\n    try {\n      evaluator = factory.constructEvaluator(\"Week()\");\n      StreamContext streamContext = new StreamContext();\n      evaluator.setStreamContext(streamContext);\n      assertTrue(false);\n    } catch (IOException e) {\n      assertTrue(e.getMessage().contains(\"Invalid evaluator expression Week() - function 'Week' is unknown\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"56ebde9c21d35a39c07989c178372e901ad377da":["c513d69b21508db62cccf741d0cdd9e0171ae1a5"],"c513d69b21508db62cccf741d0cdd9e0171ae1a5":["64ff6b743fd4051da7ebb3d397d1ef80833a741a"],"64ff6b743fd4051da7ebb3d397d1ef80833a741a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["56ebde9c21d35a39c07989c178372e901ad377da"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"56ebde9c21d35a39c07989c178372e901ad377da":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c513d69b21508db62cccf741d0cdd9e0171ae1a5":["56ebde9c21d35a39c07989c178372e901ad377da"],"64ff6b743fd4051da7ebb3d397d1ef80833a741a":["c513d69b21508db62cccf741d0cdd9e0171ae1a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","64ff6b743fd4051da7ebb3d397d1ef80833a741a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}