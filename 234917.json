{"path":"solr/core/src/test/org/apache/solr/search/TestSolrCoreParser#checkChooseOneWordQuery(boolean,Query,String,String...).mjava","commits":[{"id":"8adbe9599e1f40415314d303714aa799ccedcbfa","date":1485884320,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrCoreParser#checkChooseOneWordQuery(boolean,Query,String,String...).mjava","pathOld":"/dev/null","sourceNew":"  private static void checkChooseOneWordQuery(boolean span, Query query, String fieldName, String ... expectedTermTexts) {\n    final Term term;\n    if (span) {\n      assertTrue(query instanceof SpanTermQuery);\n      final SpanTermQuery stq = (SpanTermQuery)query;\n      term = stq.getTerm();\n    } else {\n      assertTrue(query instanceof TermQuery);\n      final TermQuery tq = (TermQuery)query;\n      term = tq.getTerm();\n    }\n    final String text = term.text();\n    boolean foundExpected = false;\n    for (String expected : expectedTermTexts) {\n      foundExpected |= expected.equals(text);\n    }\n    assertEquals(fieldName, term.field());\n    assertTrue(\"expected term text (\"+text+\") not found in (\"+expectedTermTexts+\")\", foundExpected);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrCoreParser#checkChooseOneWordQuery(boolean,Query,String,String...).mjava","pathOld":"/dev/null","sourceNew":"  private static void checkChooseOneWordQuery(boolean span, Query query, String fieldName, String ... expectedTermTexts) {\n    final Term term;\n    if (span) {\n      assertTrue(query instanceof SpanTermQuery);\n      final SpanTermQuery stq = (SpanTermQuery)query;\n      term = stq.getTerm();\n    } else {\n      assertTrue(query instanceof TermQuery);\n      final TermQuery tq = (TermQuery)query;\n      term = tq.getTerm();\n    }\n    final String text = term.text();\n    boolean foundExpected = false;\n    for (String expected : expectedTermTexts) {\n      foundExpected |= expected.equals(text);\n    }\n    assertEquals(fieldName, term.field());\n    assertTrue(\"expected term text (\"+text+\") not found in (\"+expectedTermTexts+\")\", foundExpected);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8adbe9599e1f40415314d303714aa799ccedcbfa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8adbe9599e1f40415314d303714aa799ccedcbfa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8adbe9599e1f40415314d303714aa799ccedcbfa"]},"commit2Childs":{"8adbe9599e1f40415314d303714aa799ccedcbfa":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8adbe9599e1f40415314d303714aa799ccedcbfa","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}