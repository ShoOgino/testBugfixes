{"path":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","sourceNew":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    File path = _TestUtil.getTempDir(\"testDirectInstantiation\");\n\n    int sz = 3;\n    Directory[] dirs = new Directory[sz];\n\n    dirs[0] = new SimpleFSDirectory(path, null);\n    dirs[1] = new NIOFSDirectory(path, null);\n    dirs[2] = new MMapDirectory(path, null);\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, newIOContext(random));\n      out.writeByte((byte)i);\n      out.close();\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(d2.fileExists(fname));\n        assertEquals(1, d2.fileLength(fname));\n\n        // don't test read on MMapDirectory, since it can't really be\n        // closed and will cause a failure to delete the file.\n        if (d2 instanceof MMapDirectory) continue;\n        \n        IndexInput input = d2.openInput(fname, newIOContext(random));\n        assertEquals((byte)i, input.readByte());\n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%sz].deleteFile(fname);\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        assertFalse(d2.fileExists(fname));\n      }\n\n      Lock lock = dir.makeLock(lockname);\n      assertTrue(lock.obtain());\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        Lock lock2 = d2.makeLock(lockname);\n        try {\n          assertFalse(lock2.obtain(1));\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.release();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%sz].makeLock(lockname);\n      assertTrue(lock.obtain());\n      lock.release();\n    }\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n    \n    _TestUtil.rmDir(path);\n  }\n\n","sourceOld":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    File path = _TestUtil.getTempDir(\"testDirectInstantiation\");\n\n    int sz = 3;\n    Directory[] dirs = new Directory[sz];\n\n    dirs[0] = new SimpleFSDirectory(path, null);\n    dirs[1] = new NIOFSDirectory(path, null);\n    dirs[2] = new MMapDirectory(path, null);\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, newIOContext(random));\n      out.writeByte((byte)i);\n      out.close();\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(d2.fileExists(fname));\n        assertEquals(1, d2.fileLength(fname));\n\n        // don't test read on MMapDirectory, since it can't really be\n        // closed and will cause a failure to delete the file.\n        if (d2 instanceof MMapDirectory) continue;\n        \n        IndexInput input = d2.openInput(fname, newIOContext(random));\n        assertEquals((byte)i, input.readByte());\n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%sz].deleteFile(fname);\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        assertFalse(d2.fileExists(fname));\n      }\n\n      Lock lock = dir.makeLock(lockname);\n      assertTrue(lock.obtain());\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        Lock lock2 = d2.makeLock(lockname);\n        try {\n          assertFalse(lock2.obtain(1));\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.release();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%sz].makeLock(lockname);\n      assertTrue(lock.obtain());\n      lock.release();\n    }\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n    \n    _TestUtil.rmDir(path);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","sourceNew":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    File path = _TestUtil.getTempDir(\"testDirectInstantiation\");\n\n    int sz = 3;\n    Directory[] dirs = new Directory[sz];\n\n    dirs[0] = new SimpleFSDirectory(path, null);\n    dirs[1] = new NIOFSDirectory(path, null);\n    dirs[2] = new MMapDirectory(path, null);\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, newIOContext(random()));\n      out.writeByte((byte)i);\n      out.close();\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(d2.fileExists(fname));\n        assertEquals(1, d2.fileLength(fname));\n\n        // don't test read on MMapDirectory, since it can't really be\n        // closed and will cause a failure to delete the file.\n        if (d2 instanceof MMapDirectory) continue;\n        \n        IndexInput input = d2.openInput(fname, newIOContext(random()));\n        assertEquals((byte)i, input.readByte());\n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%sz].deleteFile(fname);\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        assertFalse(d2.fileExists(fname));\n      }\n\n      Lock lock = dir.makeLock(lockname);\n      assertTrue(lock.obtain());\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        Lock lock2 = d2.makeLock(lockname);\n        try {\n          assertFalse(lock2.obtain(1));\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.release();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%sz].makeLock(lockname);\n      assertTrue(lock.obtain());\n      lock.release();\n    }\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n    \n    _TestUtil.rmDir(path);\n  }\n\n","sourceOld":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    File path = _TestUtil.getTempDir(\"testDirectInstantiation\");\n\n    int sz = 3;\n    Directory[] dirs = new Directory[sz];\n\n    dirs[0] = new SimpleFSDirectory(path, null);\n    dirs[1] = new NIOFSDirectory(path, null);\n    dirs[2] = new MMapDirectory(path, null);\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, newIOContext(random));\n      out.writeByte((byte)i);\n      out.close();\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(d2.fileExists(fname));\n        assertEquals(1, d2.fileLength(fname));\n\n        // don't test read on MMapDirectory, since it can't really be\n        // closed and will cause a failure to delete the file.\n        if (d2 instanceof MMapDirectory) continue;\n        \n        IndexInput input = d2.openInput(fname, newIOContext(random));\n        assertEquals((byte)i, input.readByte());\n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%sz].deleteFile(fname);\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        assertFalse(d2.fileExists(fname));\n      }\n\n      Lock lock = dir.makeLock(lockname);\n      assertTrue(lock.obtain());\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        Lock lock2 = d2.makeLock(lockname);\n        try {\n          assertFalse(lock2.obtain(1));\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.release();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%sz].makeLock(lockname);\n      assertTrue(lock.obtain());\n      lock.release();\n    }\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n    \n    _TestUtil.rmDir(path);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0dcf83b1542b01ad5cddb41b01dc51f751215919","date":1376231222,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","sourceNew":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    final File path = _TestUtil.getTempDir(\"testDirectInstantiation\");\n    \n    final byte[] largeBuffer = new byte[random().nextInt(256*1024)], largeReadBuffer = new byte[largeBuffer.length];\n    for (int i = 0; i < largeBuffer.length; i++) {\n      largeBuffer[i] = (byte) i; // automatically loops with modulo\n    }\n\n    final FSDirectory[] dirs = new FSDirectory[] {\n      new SimpleFSDirectory(path, null),\n      new NIOFSDirectory(path, null),\n      new MMapDirectory(path, null)\n    };\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, newIOContext(random()));\n      out.writeByte((byte)i);\n      out.writeBytes(largeBuffer, largeBuffer.length);\n      out.close();\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(d2.fileExists(fname));\n        assertEquals(1 + largeBuffer.length, d2.fileLength(fname));\n\n        // don't do read tests if unmapping is not supported!\n        if (d2 instanceof MMapDirectory && !((MMapDirectory) d2).getUseUnmap())\n          continue;\n        \n        IndexInput input = d2.openInput(fname, newIOContext(random()));\n        assertEquals((byte)i, input.readByte());\n        // read array with buffering enabled\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, true);\n        assertArrayEquals(largeBuffer, largeReadBuffer);\n        // read again without using buffer\n        input.seek(1L);\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, false);\n        assertArrayEquals(largeBuffer, largeReadBuffer);        \n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%dirs.length].deleteFile(fname);\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        assertFalse(d2.fileExists(fname));\n      }\n\n      Lock lock = dir.makeLock(lockname);\n      assertTrue(lock.obtain());\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        Lock lock2 = d2.makeLock(lockname);\n        try {\n          assertFalse(lock2.obtain(1));\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.release();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%dirs.length].makeLock(lockname);\n      assertTrue(lock.obtain());\n      lock.release();\n    }\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n    \n    _TestUtil.rmDir(path);\n  }\n\n","sourceOld":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    File path = _TestUtil.getTempDir(\"testDirectInstantiation\");\n\n    int sz = 3;\n    Directory[] dirs = new Directory[sz];\n\n    dirs[0] = new SimpleFSDirectory(path, null);\n    dirs[1] = new NIOFSDirectory(path, null);\n    dirs[2] = new MMapDirectory(path, null);\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, newIOContext(random()));\n      out.writeByte((byte)i);\n      out.close();\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(d2.fileExists(fname));\n        assertEquals(1, d2.fileLength(fname));\n\n        // don't test read on MMapDirectory, since it can't really be\n        // closed and will cause a failure to delete the file.\n        if (d2 instanceof MMapDirectory) continue;\n        \n        IndexInput input = d2.openInput(fname, newIOContext(random()));\n        assertEquals((byte)i, input.readByte());\n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%sz].deleteFile(fname);\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        assertFalse(d2.fileExists(fname));\n      }\n\n      Lock lock = dir.makeLock(lockname);\n      assertTrue(lock.obtain());\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        Lock lock2 = d2.makeLock(lockname);\n        try {\n          assertFalse(lock2.obtain(1));\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.release();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%sz].makeLock(lockname);\n      assertTrue(lock.obtain());\n      lock.release();\n    }\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n    \n    _TestUtil.rmDir(path);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","sourceNew":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    final File path = _TestUtil.getTempDir(\"testDirectInstantiation\");\n    \n    final byte[] largeBuffer = new byte[random().nextInt(256*1024)], largeReadBuffer = new byte[largeBuffer.length];\n    for (int i = 0; i < largeBuffer.length; i++) {\n      largeBuffer[i] = (byte) i; // automatically loops with modulo\n    }\n\n    final FSDirectory[] dirs = new FSDirectory[] {\n      new SimpleFSDirectory(path, null),\n      new NIOFSDirectory(path, null),\n      new MMapDirectory(path, null)\n    };\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, newIOContext(random()));\n      out.writeByte((byte)i);\n      out.writeBytes(largeBuffer, largeBuffer.length);\n      out.close();\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(d2.fileExists(fname));\n        assertEquals(1 + largeBuffer.length, d2.fileLength(fname));\n\n        // don't do read tests if unmapping is not supported!\n        if (d2 instanceof MMapDirectory && !((MMapDirectory) d2).getUseUnmap())\n          continue;\n        \n        IndexInput input = d2.openInput(fname, newIOContext(random()));\n        assertEquals((byte)i, input.readByte());\n        // read array with buffering enabled\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, true);\n        assertArrayEquals(largeBuffer, largeReadBuffer);\n        // read again without using buffer\n        input.seek(1L);\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, false);\n        assertArrayEquals(largeBuffer, largeReadBuffer);        \n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%dirs.length].deleteFile(fname);\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        assertFalse(d2.fileExists(fname));\n      }\n\n      Lock lock = dir.makeLock(lockname);\n      assertTrue(lock.obtain());\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        Lock lock2 = d2.makeLock(lockname);\n        try {\n          assertFalse(lock2.obtain(1));\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.release();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%dirs.length].makeLock(lockname);\n      assertTrue(lock.obtain());\n      lock.release();\n    }\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n    \n    _TestUtil.rmDir(path);\n  }\n\n","sourceOld":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    File path = _TestUtil.getTempDir(\"testDirectInstantiation\");\n\n    int sz = 3;\n    Directory[] dirs = new Directory[sz];\n\n    dirs[0] = new SimpleFSDirectory(path, null);\n    dirs[1] = new NIOFSDirectory(path, null);\n    dirs[2] = new MMapDirectory(path, null);\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, newIOContext(random()));\n      out.writeByte((byte)i);\n      out.close();\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(d2.fileExists(fname));\n        assertEquals(1, d2.fileLength(fname));\n\n        // don't test read on MMapDirectory, since it can't really be\n        // closed and will cause a failure to delete the file.\n        if (d2 instanceof MMapDirectory) continue;\n        \n        IndexInput input = d2.openInput(fname, newIOContext(random()));\n        assertEquals((byte)i, input.readByte());\n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%sz].deleteFile(fname);\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        assertFalse(d2.fileExists(fname));\n      }\n\n      Lock lock = dir.makeLock(lockname);\n      assertTrue(lock.obtain());\n\n      for (int j=0; j<sz; j++) {\n        Directory d2 = dirs[j];\n        Lock lock2 = d2.makeLock(lockname);\n        try {\n          assertFalse(lock2.obtain(1));\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.release();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%sz].makeLock(lockname);\n      assertTrue(lock.obtain());\n      lock.release();\n    }\n\n    for (int i=0; i<sz; i++) {\n      Directory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n    \n    _TestUtil.rmDir(path);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0fcdcf196523675146a4df3193e91413533857ab","date":1390686560,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","sourceNew":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    final File path = _TestUtil.getTempDir(\"testDirectInstantiation\");\n    \n    final byte[] largeBuffer = new byte[random().nextInt(256*1024)], largeReadBuffer = new byte[largeBuffer.length];\n    for (int i = 0; i < largeBuffer.length; i++) {\n      largeBuffer[i] = (byte) i; // automatically loops with modulo\n    }\n\n    final FSDirectory[] dirs = new FSDirectory[] {\n      new SimpleFSDirectory(path, null),\n      new NIOFSDirectory(path, null),\n      new MMapDirectory(path, null)\n    };\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, newIOContext(random()));\n      out.writeByte((byte)i);\n      out.writeBytes(largeBuffer, largeBuffer.length);\n      out.close();\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(d2.fileExists(fname));\n        assertEquals(1 + largeBuffer.length, d2.fileLength(fname));\n\n        // don't do read tests if unmapping is not supported!\n        if (d2 instanceof MMapDirectory && !((MMapDirectory) d2).getUseUnmap())\n          continue;\n        \n        IndexInput input = d2.openInput(fname, newIOContext(random()));\n        assertEquals((byte)i, input.readByte());\n        // read array with buffering enabled\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, true);\n        assertArrayEquals(largeBuffer, largeReadBuffer);\n        // read again without using buffer\n        input.seek(1L);\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, false);\n        assertArrayEquals(largeBuffer, largeReadBuffer);        \n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%dirs.length].deleteFile(fname);\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        assertFalse(d2.fileExists(fname));\n      }\n\n      Lock lock = dir.makeLock(lockname);\n      assertTrue(lock.obtain());\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        Lock lock2 = d2.makeLock(lockname);\n        try {\n          assertFalse(lock2.obtain(1));\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.close();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%dirs.length].makeLock(lockname);\n      assertTrue(lock.obtain());\n      lock.close();\n    }\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n    \n    _TestUtil.rmDir(path);\n  }\n\n","sourceOld":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    final File path = _TestUtil.getTempDir(\"testDirectInstantiation\");\n    \n    final byte[] largeBuffer = new byte[random().nextInt(256*1024)], largeReadBuffer = new byte[largeBuffer.length];\n    for (int i = 0; i < largeBuffer.length; i++) {\n      largeBuffer[i] = (byte) i; // automatically loops with modulo\n    }\n\n    final FSDirectory[] dirs = new FSDirectory[] {\n      new SimpleFSDirectory(path, null),\n      new NIOFSDirectory(path, null),\n      new MMapDirectory(path, null)\n    };\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, newIOContext(random()));\n      out.writeByte((byte)i);\n      out.writeBytes(largeBuffer, largeBuffer.length);\n      out.close();\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(d2.fileExists(fname));\n        assertEquals(1 + largeBuffer.length, d2.fileLength(fname));\n\n        // don't do read tests if unmapping is not supported!\n        if (d2 instanceof MMapDirectory && !((MMapDirectory) d2).getUseUnmap())\n          continue;\n        \n        IndexInput input = d2.openInput(fname, newIOContext(random()));\n        assertEquals((byte)i, input.readByte());\n        // read array with buffering enabled\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, true);\n        assertArrayEquals(largeBuffer, largeReadBuffer);\n        // read again without using buffer\n        input.seek(1L);\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, false);\n        assertArrayEquals(largeBuffer, largeReadBuffer);        \n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%dirs.length].deleteFile(fname);\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        assertFalse(d2.fileExists(fname));\n      }\n\n      Lock lock = dir.makeLock(lockname);\n      assertTrue(lock.obtain());\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        Lock lock2 = d2.makeLock(lockname);\n        try {\n          assertFalse(lock2.obtain(1));\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.release();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%dirs.length].makeLock(lockname);\n      assertTrue(lock.obtain());\n      lock.release();\n    }\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n    \n    _TestUtil.rmDir(path);\n  }\n\n","bugFix":["89b8a0757fe4354bdc64c82f90886a9284b57833"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","sourceNew":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    final File path = TestUtil.getTempDir(\"testDirectInstantiation\");\n    \n    final byte[] largeBuffer = new byte[random().nextInt(256*1024)], largeReadBuffer = new byte[largeBuffer.length];\n    for (int i = 0; i < largeBuffer.length; i++) {\n      largeBuffer[i] = (byte) i; // automatically loops with modulo\n    }\n\n    final FSDirectory[] dirs = new FSDirectory[] {\n      new SimpleFSDirectory(path, null),\n      new NIOFSDirectory(path, null),\n      new MMapDirectory(path, null)\n    };\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, newIOContext(random()));\n      out.writeByte((byte)i);\n      out.writeBytes(largeBuffer, largeBuffer.length);\n      out.close();\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(d2.fileExists(fname));\n        assertEquals(1 + largeBuffer.length, d2.fileLength(fname));\n\n        // don't do read tests if unmapping is not supported!\n        if (d2 instanceof MMapDirectory && !((MMapDirectory) d2).getUseUnmap())\n          continue;\n        \n        IndexInput input = d2.openInput(fname, newIOContext(random()));\n        assertEquals((byte)i, input.readByte());\n        // read array with buffering enabled\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, true);\n        assertArrayEquals(largeBuffer, largeReadBuffer);\n        // read again without using buffer\n        input.seek(1L);\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, false);\n        assertArrayEquals(largeBuffer, largeReadBuffer);        \n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%dirs.length].deleteFile(fname);\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        assertFalse(d2.fileExists(fname));\n      }\n\n      Lock lock = dir.makeLock(lockname);\n      assertTrue(lock.obtain());\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        Lock lock2 = d2.makeLock(lockname);\n        try {\n          assertFalse(lock2.obtain(1));\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.close();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%dirs.length].makeLock(lockname);\n      assertTrue(lock.obtain());\n      lock.close();\n    }\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n    \n    TestUtil.rmDir(path);\n  }\n\n","sourceOld":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    final File path = _TestUtil.getTempDir(\"testDirectInstantiation\");\n    \n    final byte[] largeBuffer = new byte[random().nextInt(256*1024)], largeReadBuffer = new byte[largeBuffer.length];\n    for (int i = 0; i < largeBuffer.length; i++) {\n      largeBuffer[i] = (byte) i; // automatically loops with modulo\n    }\n\n    final FSDirectory[] dirs = new FSDirectory[] {\n      new SimpleFSDirectory(path, null),\n      new NIOFSDirectory(path, null),\n      new MMapDirectory(path, null)\n    };\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, newIOContext(random()));\n      out.writeByte((byte)i);\n      out.writeBytes(largeBuffer, largeBuffer.length);\n      out.close();\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(d2.fileExists(fname));\n        assertEquals(1 + largeBuffer.length, d2.fileLength(fname));\n\n        // don't do read tests if unmapping is not supported!\n        if (d2 instanceof MMapDirectory && !((MMapDirectory) d2).getUseUnmap())\n          continue;\n        \n        IndexInput input = d2.openInput(fname, newIOContext(random()));\n        assertEquals((byte)i, input.readByte());\n        // read array with buffering enabled\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, true);\n        assertArrayEquals(largeBuffer, largeReadBuffer);\n        // read again without using buffer\n        input.seek(1L);\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, false);\n        assertArrayEquals(largeBuffer, largeReadBuffer);        \n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%dirs.length].deleteFile(fname);\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        assertFalse(d2.fileExists(fname));\n      }\n\n      Lock lock = dir.makeLock(lockname);\n      assertTrue(lock.obtain());\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        Lock lock2 = d2.makeLock(lockname);\n        try {\n          assertFalse(lock2.obtain(1));\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.close();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%dirs.length].makeLock(lockname);\n      assertTrue(lock.obtain());\n      lock.close();\n    }\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n    \n    _TestUtil.rmDir(path);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cd4e13d997cf4fb810398a20a299c2c5a9f6b796","date":1395594336,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","sourceNew":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    final File path = TestUtil.getTempDir(\"testDirectInstantiation\");\n    \n    final byte[] largeBuffer = new byte[random().nextInt(256*1024)], largeReadBuffer = new byte[largeBuffer.length];\n    for (int i = 0; i < largeBuffer.length; i++) {\n      largeBuffer[i] = (byte) i; // automatically loops with modulo\n    }\n\n    final FSDirectory[] dirs = new FSDirectory[] {\n      new SimpleFSDirectory(path, null),\n      new NIOFSDirectory(path, null),\n      new MMapDirectory(path, null)\n    };\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, newIOContext(random()));\n      out.writeByte((byte)i);\n      out.writeBytes(largeBuffer, largeBuffer.length);\n      out.close();\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(slowFileExists(d2, fname));\n        assertEquals(1 + largeBuffer.length, d2.fileLength(fname));\n\n        // don't do read tests if unmapping is not supported!\n        if (d2 instanceof MMapDirectory && !((MMapDirectory) d2).getUseUnmap())\n          continue;\n        \n        IndexInput input = d2.openInput(fname, newIOContext(random()));\n        assertEquals((byte)i, input.readByte());\n        // read array with buffering enabled\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, true);\n        assertArrayEquals(largeBuffer, largeReadBuffer);\n        // read again without using buffer\n        input.seek(1L);\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, false);\n        assertArrayEquals(largeBuffer, largeReadBuffer);        \n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%dirs.length].deleteFile(fname);\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        assertFalse(slowFileExists(d2, fname));\n      }\n\n      Lock lock = dir.makeLock(lockname);\n      assertTrue(lock.obtain());\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        Lock lock2 = d2.makeLock(lockname);\n        try {\n          assertFalse(lock2.obtain(1));\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.close();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%dirs.length].makeLock(lockname);\n      assertTrue(lock.obtain());\n      lock.close();\n    }\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n    \n    TestUtil.rmDir(path);\n  }\n\n","sourceOld":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    final File path = TestUtil.getTempDir(\"testDirectInstantiation\");\n    \n    final byte[] largeBuffer = new byte[random().nextInt(256*1024)], largeReadBuffer = new byte[largeBuffer.length];\n    for (int i = 0; i < largeBuffer.length; i++) {\n      largeBuffer[i] = (byte) i; // automatically loops with modulo\n    }\n\n    final FSDirectory[] dirs = new FSDirectory[] {\n      new SimpleFSDirectory(path, null),\n      new NIOFSDirectory(path, null),\n      new MMapDirectory(path, null)\n    };\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, newIOContext(random()));\n      out.writeByte((byte)i);\n      out.writeBytes(largeBuffer, largeBuffer.length);\n      out.close();\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(d2.fileExists(fname));\n        assertEquals(1 + largeBuffer.length, d2.fileLength(fname));\n\n        // don't do read tests if unmapping is not supported!\n        if (d2 instanceof MMapDirectory && !((MMapDirectory) d2).getUseUnmap())\n          continue;\n        \n        IndexInput input = d2.openInput(fname, newIOContext(random()));\n        assertEquals((byte)i, input.readByte());\n        // read array with buffering enabled\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, true);\n        assertArrayEquals(largeBuffer, largeReadBuffer);\n        // read again without using buffer\n        input.seek(1L);\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, false);\n        assertArrayEquals(largeBuffer, largeReadBuffer);        \n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%dirs.length].deleteFile(fname);\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        assertFalse(d2.fileExists(fname));\n      }\n\n      Lock lock = dir.makeLock(lockname);\n      assertTrue(lock.obtain());\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        Lock lock2 = d2.makeLock(lockname);\n        try {\n          assertFalse(lock2.obtain(1));\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.close();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%dirs.length].makeLock(lockname);\n      assertTrue(lock.obtain());\n      lock.close();\n    }\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n    \n    TestUtil.rmDir(path);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","sourceNew":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    final File path = TestUtil.createTempDir(\"testDirectInstantiation\");\n    \n    final byte[] largeBuffer = new byte[random().nextInt(256*1024)], largeReadBuffer = new byte[largeBuffer.length];\n    for (int i = 0; i < largeBuffer.length; i++) {\n      largeBuffer[i] = (byte) i; // automatically loops with modulo\n    }\n\n    final FSDirectory[] dirs = new FSDirectory[] {\n      new SimpleFSDirectory(path, null),\n      new NIOFSDirectory(path, null),\n      new MMapDirectory(path, null)\n    };\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, newIOContext(random()));\n      out.writeByte((byte)i);\n      out.writeBytes(largeBuffer, largeBuffer.length);\n      out.close();\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(slowFileExists(d2, fname));\n        assertEquals(1 + largeBuffer.length, d2.fileLength(fname));\n\n        // don't do read tests if unmapping is not supported!\n        if (d2 instanceof MMapDirectory && !((MMapDirectory) d2).getUseUnmap())\n          continue;\n        \n        IndexInput input = d2.openInput(fname, newIOContext(random()));\n        assertEquals((byte)i, input.readByte());\n        // read array with buffering enabled\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, true);\n        assertArrayEquals(largeBuffer, largeReadBuffer);\n        // read again without using buffer\n        input.seek(1L);\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, false);\n        assertArrayEquals(largeBuffer, largeReadBuffer);        \n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%dirs.length].deleteFile(fname);\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        assertFalse(slowFileExists(d2, fname));\n      }\n\n      Lock lock = dir.makeLock(lockname);\n      assertTrue(lock.obtain());\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        Lock lock2 = d2.makeLock(lockname);\n        try {\n          assertFalse(lock2.obtain(1));\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.close();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%dirs.length].makeLock(lockname);\n      assertTrue(lock.obtain());\n      lock.close();\n    }\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n    \n    TestUtil.rmDir(path);\n  }\n\n","sourceOld":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    final File path = TestUtil.getTempDir(\"testDirectInstantiation\");\n    \n    final byte[] largeBuffer = new byte[random().nextInt(256*1024)], largeReadBuffer = new byte[largeBuffer.length];\n    for (int i = 0; i < largeBuffer.length; i++) {\n      largeBuffer[i] = (byte) i; // automatically loops with modulo\n    }\n\n    final FSDirectory[] dirs = new FSDirectory[] {\n      new SimpleFSDirectory(path, null),\n      new NIOFSDirectory(path, null),\n      new MMapDirectory(path, null)\n    };\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, newIOContext(random()));\n      out.writeByte((byte)i);\n      out.writeBytes(largeBuffer, largeBuffer.length);\n      out.close();\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(slowFileExists(d2, fname));\n        assertEquals(1 + largeBuffer.length, d2.fileLength(fname));\n\n        // don't do read tests if unmapping is not supported!\n        if (d2 instanceof MMapDirectory && !((MMapDirectory) d2).getUseUnmap())\n          continue;\n        \n        IndexInput input = d2.openInput(fname, newIOContext(random()));\n        assertEquals((byte)i, input.readByte());\n        // read array with buffering enabled\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, true);\n        assertArrayEquals(largeBuffer, largeReadBuffer);\n        // read again without using buffer\n        input.seek(1L);\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, false);\n        assertArrayEquals(largeBuffer, largeReadBuffer);        \n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%dirs.length].deleteFile(fname);\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        assertFalse(slowFileExists(d2, fname));\n      }\n\n      Lock lock = dir.makeLock(lockname);\n      assertTrue(lock.obtain());\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        Lock lock2 = d2.makeLock(lockname);\n        try {\n          assertFalse(lock2.obtain(1));\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.close();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%dirs.length].makeLock(lockname);\n      assertTrue(lock.obtain());\n      lock.close();\n    }\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n    \n    TestUtil.rmDir(path);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"be04a7534a8a0679382542b62556ea5fba6cfb7f","date":1396613089,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","sourceNew":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    final File path = TestUtil.createTempDir(\"testDirectInstantiation\");\n    \n    final byte[] largeBuffer = new byte[random().nextInt(256*1024)], largeReadBuffer = new byte[largeBuffer.length];\n    for (int i = 0; i < largeBuffer.length; i++) {\n      largeBuffer[i] = (byte) i; // automatically loops with modulo\n    }\n\n    final FSDirectory[] dirs = new FSDirectory[] {\n      new SimpleFSDirectory(path, null),\n      new NIOFSDirectory(path, null),\n      new MMapDirectory(path, null)\n    };\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, newIOContext(random()));\n      out.writeByte((byte)i);\n      out.writeBytes(largeBuffer, largeBuffer.length);\n      out.close();\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(slowFileExists(d2, fname));\n        assertEquals(1 + largeBuffer.length, d2.fileLength(fname));\n\n        // don't do read tests if unmapping is not supported!\n        if (d2 instanceof MMapDirectory && !((MMapDirectory) d2).getUseUnmap())\n          continue;\n        \n        IndexInput input = d2.openInput(fname, newIOContext(random()));\n        assertEquals((byte)i, input.readByte());\n        // read array with buffering enabled\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, true);\n        assertArrayEquals(largeBuffer, largeReadBuffer);\n        // read again without using buffer\n        input.seek(1L);\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, false);\n        assertArrayEquals(largeBuffer, largeReadBuffer);        \n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%dirs.length].deleteFile(fname);\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        assertFalse(slowFileExists(d2, fname));\n      }\n\n      Lock lock = dir.makeLock(lockname);\n      assertTrue(lock.obtain());\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        Lock lock2 = d2.makeLock(lockname);\n        try {\n          assertFalse(lock2.obtain(1));\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.close();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%dirs.length].makeLock(lockname);\n      assertTrue(lock.obtain());\n      lock.close();\n    }\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n    \n    TestUtil.rm(path);\n  }\n\n","sourceOld":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    final File path = TestUtil.createTempDir(\"testDirectInstantiation\");\n    \n    final byte[] largeBuffer = new byte[random().nextInt(256*1024)], largeReadBuffer = new byte[largeBuffer.length];\n    for (int i = 0; i < largeBuffer.length; i++) {\n      largeBuffer[i] = (byte) i; // automatically loops with modulo\n    }\n\n    final FSDirectory[] dirs = new FSDirectory[] {\n      new SimpleFSDirectory(path, null),\n      new NIOFSDirectory(path, null),\n      new MMapDirectory(path, null)\n    };\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, newIOContext(random()));\n      out.writeByte((byte)i);\n      out.writeBytes(largeBuffer, largeBuffer.length);\n      out.close();\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(slowFileExists(d2, fname));\n        assertEquals(1 + largeBuffer.length, d2.fileLength(fname));\n\n        // don't do read tests if unmapping is not supported!\n        if (d2 instanceof MMapDirectory && !((MMapDirectory) d2).getUseUnmap())\n          continue;\n        \n        IndexInput input = d2.openInput(fname, newIOContext(random()));\n        assertEquals((byte)i, input.readByte());\n        // read array with buffering enabled\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, true);\n        assertArrayEquals(largeBuffer, largeReadBuffer);\n        // read again without using buffer\n        input.seek(1L);\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, false);\n        assertArrayEquals(largeBuffer, largeReadBuffer);        \n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%dirs.length].deleteFile(fname);\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        assertFalse(slowFileExists(d2, fname));\n      }\n\n      Lock lock = dir.makeLock(lockname);\n      assertTrue(lock.obtain());\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        Lock lock2 = d2.makeLock(lockname);\n        try {\n          assertFalse(lock2.obtain(1));\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.close();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%dirs.length].makeLock(lockname);\n      assertTrue(lock.obtain());\n      lock.close();\n    }\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n    \n    TestUtil.rmDir(path);\n  }\n\n","bugFix":null,"bugIntro":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c","date":1396633078,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","sourceNew":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    final File path = createTempDir(\"testDirectInstantiation\");\n    \n    final byte[] largeBuffer = new byte[random().nextInt(256*1024)], largeReadBuffer = new byte[largeBuffer.length];\n    for (int i = 0; i < largeBuffer.length; i++) {\n      largeBuffer[i] = (byte) i; // automatically loops with modulo\n    }\n\n    final FSDirectory[] dirs = new FSDirectory[] {\n      new SimpleFSDirectory(path, null),\n      new NIOFSDirectory(path, null),\n      new MMapDirectory(path, null)\n    };\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, newIOContext(random()));\n      out.writeByte((byte)i);\n      out.writeBytes(largeBuffer, largeBuffer.length);\n      out.close();\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(slowFileExists(d2, fname));\n        assertEquals(1 + largeBuffer.length, d2.fileLength(fname));\n\n        // don't do read tests if unmapping is not supported!\n        if (d2 instanceof MMapDirectory && !((MMapDirectory) d2).getUseUnmap())\n          continue;\n        \n        IndexInput input = d2.openInput(fname, newIOContext(random()));\n        assertEquals((byte)i, input.readByte());\n        // read array with buffering enabled\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, true);\n        assertArrayEquals(largeBuffer, largeReadBuffer);\n        // read again without using buffer\n        input.seek(1L);\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, false);\n        assertArrayEquals(largeBuffer, largeReadBuffer);        \n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%dirs.length].deleteFile(fname);\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        assertFalse(slowFileExists(d2, fname));\n      }\n\n      Lock lock = dir.makeLock(lockname);\n      assertTrue(lock.obtain());\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        Lock lock2 = d2.makeLock(lockname);\n        try {\n          assertFalse(lock2.obtain(1));\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.close();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%dirs.length].makeLock(lockname);\n      assertTrue(lock.obtain());\n      lock.close();\n    }\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n    \n    TestUtil.rm(path);\n  }\n\n","sourceOld":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    final File path = TestUtil.createTempDir(\"testDirectInstantiation\");\n    \n    final byte[] largeBuffer = new byte[random().nextInt(256*1024)], largeReadBuffer = new byte[largeBuffer.length];\n    for (int i = 0; i < largeBuffer.length; i++) {\n      largeBuffer[i] = (byte) i; // automatically loops with modulo\n    }\n\n    final FSDirectory[] dirs = new FSDirectory[] {\n      new SimpleFSDirectory(path, null),\n      new NIOFSDirectory(path, null),\n      new MMapDirectory(path, null)\n    };\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, newIOContext(random()));\n      out.writeByte((byte)i);\n      out.writeBytes(largeBuffer, largeBuffer.length);\n      out.close();\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(slowFileExists(d2, fname));\n        assertEquals(1 + largeBuffer.length, d2.fileLength(fname));\n\n        // don't do read tests if unmapping is not supported!\n        if (d2 instanceof MMapDirectory && !((MMapDirectory) d2).getUseUnmap())\n          continue;\n        \n        IndexInput input = d2.openInput(fname, newIOContext(random()));\n        assertEquals((byte)i, input.readByte());\n        // read array with buffering enabled\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, true);\n        assertArrayEquals(largeBuffer, largeReadBuffer);\n        // read again without using buffer\n        input.seek(1L);\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, false);\n        assertArrayEquals(largeBuffer, largeReadBuffer);        \n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%dirs.length].deleteFile(fname);\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        assertFalse(slowFileExists(d2, fname));\n      }\n\n      Lock lock = dir.makeLock(lockname);\n      assertTrue(lock.obtain());\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        Lock lock2 = d2.makeLock(lockname);\n        try {\n          assertFalse(lock2.obtain(1));\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.close();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%dirs.length].makeLock(lockname);\n      assertTrue(lock.obtain());\n      lock.close();\n    }\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n    \n    TestUtil.rm(path);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","sourceNew":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    final File path = createTempDir(\"testDirectInstantiation\");\n    \n    final byte[] largeBuffer = new byte[random().nextInt(256*1024)], largeReadBuffer = new byte[largeBuffer.length];\n    for (int i = 0; i < largeBuffer.length; i++) {\n      largeBuffer[i] = (byte) i; // automatically loops with modulo\n    }\n\n    final FSDirectory[] dirs = new FSDirectory[] {\n      new SimpleFSDirectory(path, null),\n      new NIOFSDirectory(path, null),\n      new MMapDirectory(path, null)\n    };\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, newIOContext(random()));\n      out.writeByte((byte)i);\n      out.writeBytes(largeBuffer, largeBuffer.length);\n      out.close();\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(slowFileExists(d2, fname));\n        assertEquals(1 + largeBuffer.length, d2.fileLength(fname));\n\n        // don't do read tests if unmapping is not supported!\n        if (d2 instanceof MMapDirectory && !((MMapDirectory) d2).getUseUnmap())\n          continue;\n        \n        IndexInput input = d2.openInput(fname, newIOContext(random()));\n        assertEquals((byte)i, input.readByte());\n        // read array with buffering enabled\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, true);\n        assertArrayEquals(largeBuffer, largeReadBuffer);\n        // read again without using buffer\n        input.seek(1L);\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, false);\n        assertArrayEquals(largeBuffer, largeReadBuffer);        \n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%dirs.length].deleteFile(fname);\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        assertFalse(slowFileExists(d2, fname));\n      }\n\n      Lock lock = dir.makeLock(lockname);\n      assertTrue(lock.obtain());\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        Lock lock2 = d2.makeLock(lockname);\n        try {\n          assertFalse(lock2.obtain(1));\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.close();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%dirs.length].makeLock(lockname);\n      assertTrue(lock.obtain());\n      lock.close();\n    }\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n    \n    TestUtil.rm(path);\n  }\n\n","sourceOld":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    final File path = TestUtil.getTempDir(\"testDirectInstantiation\");\n    \n    final byte[] largeBuffer = new byte[random().nextInt(256*1024)], largeReadBuffer = new byte[largeBuffer.length];\n    for (int i = 0; i < largeBuffer.length; i++) {\n      largeBuffer[i] = (byte) i; // automatically loops with modulo\n    }\n\n    final FSDirectory[] dirs = new FSDirectory[] {\n      new SimpleFSDirectory(path, null),\n      new NIOFSDirectory(path, null),\n      new MMapDirectory(path, null)\n    };\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, newIOContext(random()));\n      out.writeByte((byte)i);\n      out.writeBytes(largeBuffer, largeBuffer.length);\n      out.close();\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(slowFileExists(d2, fname));\n        assertEquals(1 + largeBuffer.length, d2.fileLength(fname));\n\n        // don't do read tests if unmapping is not supported!\n        if (d2 instanceof MMapDirectory && !((MMapDirectory) d2).getUseUnmap())\n          continue;\n        \n        IndexInput input = d2.openInput(fname, newIOContext(random()));\n        assertEquals((byte)i, input.readByte());\n        // read array with buffering enabled\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, true);\n        assertArrayEquals(largeBuffer, largeReadBuffer);\n        // read again without using buffer\n        input.seek(1L);\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, false);\n        assertArrayEquals(largeBuffer, largeReadBuffer);        \n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%dirs.length].deleteFile(fname);\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        assertFalse(slowFileExists(d2, fname));\n      }\n\n      Lock lock = dir.makeLock(lockname);\n      assertTrue(lock.obtain());\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        Lock lock2 = d2.makeLock(lockname);\n        try {\n          assertFalse(lock2.obtain(1));\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.close();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%dirs.length].makeLock(lockname);\n      assertTrue(lock.obtain());\n      lock.close();\n    }\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n    \n    TestUtil.rmDir(path);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cbc3688252d4a8045d69a164236b2cf87b721f17","date":1409846185,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","sourceNew":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    final File path = createTempDir(\"testDirectInstantiation\");\n    \n    final byte[] largeBuffer = new byte[random().nextInt(256*1024)], largeReadBuffer = new byte[largeBuffer.length];\n    for (int i = 0; i < largeBuffer.length; i++) {\n      largeBuffer[i] = (byte) i; // automatically loops with modulo\n    }\n\n    final FSDirectory[] dirs = new FSDirectory[] {\n      new SimpleFSDirectory(path, null),\n      new NIOFSDirectory(path, null),\n      new MMapDirectory(path, null)\n    };\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, newIOContext(random()));\n      out.writeByte((byte)i);\n      out.writeBytes(largeBuffer, largeBuffer.length);\n      out.close();\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(slowFileExists(d2, fname));\n        assertEquals(1 + largeBuffer.length, d2.fileLength(fname));\n\n        // don't do read tests if unmapping is not supported!\n        if (d2 instanceof MMapDirectory && !((MMapDirectory) d2).getUseUnmap())\n          continue;\n        \n        IndexInput input = d2.openInput(fname, newIOContext(random()));\n        assertEquals((byte)i, input.readByte());\n        // read array with buffering enabled\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, true);\n        assertArrayEquals(largeBuffer, largeReadBuffer);\n        // read again without using buffer\n        input.seek(1L);\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, false);\n        assertArrayEquals(largeBuffer, largeReadBuffer);        \n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%dirs.length].deleteFile(fname);\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        assertFalse(slowFileExists(d2, fname));\n      }\n\n      Lock lock = dir.makeLock(lockname);\n      assertTrue(lock.obtain());\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        Lock lock2 = d2.makeLock(lockname);\n        try {\n          assertFalse(lock2.obtain(1));\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.close();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%dirs.length].makeLock(lockname);\n      assertTrue(lock.obtain());\n      lock.close();\n    }\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n    \n    IOUtils.rm(path);\n  }\n\n","sourceOld":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    final File path = createTempDir(\"testDirectInstantiation\");\n    \n    final byte[] largeBuffer = new byte[random().nextInt(256*1024)], largeReadBuffer = new byte[largeBuffer.length];\n    for (int i = 0; i < largeBuffer.length; i++) {\n      largeBuffer[i] = (byte) i; // automatically loops with modulo\n    }\n\n    final FSDirectory[] dirs = new FSDirectory[] {\n      new SimpleFSDirectory(path, null),\n      new NIOFSDirectory(path, null),\n      new MMapDirectory(path, null)\n    };\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, newIOContext(random()));\n      out.writeByte((byte)i);\n      out.writeBytes(largeBuffer, largeBuffer.length);\n      out.close();\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(slowFileExists(d2, fname));\n        assertEquals(1 + largeBuffer.length, d2.fileLength(fname));\n\n        // don't do read tests if unmapping is not supported!\n        if (d2 instanceof MMapDirectory && !((MMapDirectory) d2).getUseUnmap())\n          continue;\n        \n        IndexInput input = d2.openInput(fname, newIOContext(random()));\n        assertEquals((byte)i, input.readByte());\n        // read array with buffering enabled\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, true);\n        assertArrayEquals(largeBuffer, largeReadBuffer);\n        // read again without using buffer\n        input.seek(1L);\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, false);\n        assertArrayEquals(largeBuffer, largeReadBuffer);        \n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%dirs.length].deleteFile(fname);\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        assertFalse(slowFileExists(d2, fname));\n      }\n\n      Lock lock = dir.makeLock(lockname);\n      assertTrue(lock.obtain());\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        Lock lock2 = d2.makeLock(lockname);\n        try {\n          assertFalse(lock2.obtain(1));\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.close();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%dirs.length].makeLock(lockname);\n      assertTrue(lock.obtain());\n      lock.close();\n    }\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n    \n    TestUtil.rm(path);\n  }\n\n","bugFix":["be04a7534a8a0679382542b62556ea5fba6cfb7f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","sourceNew":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    final Path path = createTempDir(\"testDirectInstantiation\");\n    \n    final byte[] largeBuffer = new byte[random().nextInt(256*1024)], largeReadBuffer = new byte[largeBuffer.length];\n    for (int i = 0; i < largeBuffer.length; i++) {\n      largeBuffer[i] = (byte) i; // automatically loops with modulo\n    }\n\n    final FSDirectory[] dirs = new FSDirectory[] {\n      new SimpleFSDirectory(path, null),\n      new NIOFSDirectory(path, null),\n      new MMapDirectory(path, null)\n    };\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, newIOContext(random()));\n      out.writeByte((byte)i);\n      out.writeBytes(largeBuffer, largeBuffer.length);\n      out.close();\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(slowFileExists(d2, fname));\n        assertEquals(1 + largeBuffer.length, d2.fileLength(fname));\n\n        // don't do read tests if unmapping is not supported!\n        if (d2 instanceof MMapDirectory && !((MMapDirectory) d2).getUseUnmap())\n          continue;\n        \n        IndexInput input = d2.openInput(fname, newIOContext(random()));\n        assertEquals((byte)i, input.readByte());\n        // read array with buffering enabled\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, true);\n        assertArrayEquals(largeBuffer, largeReadBuffer);\n        // read again without using buffer\n        input.seek(1L);\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, false);\n        assertArrayEquals(largeBuffer, largeReadBuffer);        \n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%dirs.length].deleteFile(fname);\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        assertFalse(slowFileExists(d2, fname));\n      }\n\n      Lock lock = dir.makeLock(lockname);\n      assertTrue(lock.obtain());\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        Lock lock2 = d2.makeLock(lockname);\n        try {\n          assertFalse(lock2.obtain(1));\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.close();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%dirs.length].makeLock(lockname);\n      assertTrue(lock.obtain());\n      lock.close();\n    }\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n    \n    IOUtils.rm(path);\n  }\n\n","sourceOld":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    final File path = createTempDir(\"testDirectInstantiation\");\n    \n    final byte[] largeBuffer = new byte[random().nextInt(256*1024)], largeReadBuffer = new byte[largeBuffer.length];\n    for (int i = 0; i < largeBuffer.length; i++) {\n      largeBuffer[i] = (byte) i; // automatically loops with modulo\n    }\n\n    final FSDirectory[] dirs = new FSDirectory[] {\n      new SimpleFSDirectory(path, null),\n      new NIOFSDirectory(path, null),\n      new MMapDirectory(path, null)\n    };\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, newIOContext(random()));\n      out.writeByte((byte)i);\n      out.writeBytes(largeBuffer, largeBuffer.length);\n      out.close();\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(slowFileExists(d2, fname));\n        assertEquals(1 + largeBuffer.length, d2.fileLength(fname));\n\n        // don't do read tests if unmapping is not supported!\n        if (d2 instanceof MMapDirectory && !((MMapDirectory) d2).getUseUnmap())\n          continue;\n        \n        IndexInput input = d2.openInput(fname, newIOContext(random()));\n        assertEquals((byte)i, input.readByte());\n        // read array with buffering enabled\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, true);\n        assertArrayEquals(largeBuffer, largeReadBuffer);\n        // read again without using buffer\n        input.seek(1L);\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, false);\n        assertArrayEquals(largeBuffer, largeReadBuffer);        \n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%dirs.length].deleteFile(fname);\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        assertFalse(slowFileExists(d2, fname));\n      }\n\n      Lock lock = dir.makeLock(lockname);\n      assertTrue(lock.obtain());\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        Lock lock2 = d2.makeLock(lockname);\n        try {\n          assertFalse(lock2.obtain(1));\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.close();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%dirs.length].makeLock(lockname);\n      assertTrue(lock.obtain());\n      lock.close();\n    }\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n    \n    IOUtils.rm(path);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"285cdc737de75b7cc7c284a156b20214deb67bca","date":1415535483,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","sourceNew":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    final Path path = createTempDir(\"testDirectInstantiation\");\n    \n    final byte[] largeBuffer = new byte[random().nextInt(256*1024)], largeReadBuffer = new byte[largeBuffer.length];\n    for (int i = 0; i < largeBuffer.length; i++) {\n      largeBuffer[i] = (byte) i; // automatically loops with modulo\n    }\n\n    final FSDirectory[] dirs = new FSDirectory[] {\n      new SimpleFSDirectory(path),\n      new NIOFSDirectory(path),\n      new MMapDirectory(path)\n    };\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, newIOContext(random()));\n      out.writeByte((byte)i);\n      out.writeBytes(largeBuffer, largeBuffer.length);\n      out.close();\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(slowFileExists(d2, fname));\n        assertEquals(1 + largeBuffer.length, d2.fileLength(fname));\n\n        // don't do read tests if unmapping is not supported!\n        if (d2 instanceof MMapDirectory && !((MMapDirectory) d2).getUseUnmap())\n          continue;\n        \n        IndexInput input = d2.openInput(fname, newIOContext(random()));\n        assertEquals((byte)i, input.readByte());\n        // read array with buffering enabled\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, true);\n        assertArrayEquals(largeBuffer, largeReadBuffer);\n        // read again without using buffer\n        input.seek(1L);\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, false);\n        assertArrayEquals(largeBuffer, largeReadBuffer);        \n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%dirs.length].deleteFile(fname);\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        assertFalse(slowFileExists(d2, fname));\n      }\n\n      Lock lock = dir.makeLock(lockname);\n      assertTrue(lock.obtain());\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        Lock lock2 = d2.makeLock(lockname);\n        try {\n          assertFalse(lock2.obtain(1));\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.close();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%dirs.length].makeLock(lockname);\n      assertTrue(lock.obtain());\n      lock.close();\n    }\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n    \n    IOUtils.rm(path);\n  }\n\n","sourceOld":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    final Path path = createTempDir(\"testDirectInstantiation\");\n    \n    final byte[] largeBuffer = new byte[random().nextInt(256*1024)], largeReadBuffer = new byte[largeBuffer.length];\n    for (int i = 0; i < largeBuffer.length; i++) {\n      largeBuffer[i] = (byte) i; // automatically loops with modulo\n    }\n\n    final FSDirectory[] dirs = new FSDirectory[] {\n      new SimpleFSDirectory(path, null),\n      new NIOFSDirectory(path, null),\n      new MMapDirectory(path, null)\n    };\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, newIOContext(random()));\n      out.writeByte((byte)i);\n      out.writeBytes(largeBuffer, largeBuffer.length);\n      out.close();\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(slowFileExists(d2, fname));\n        assertEquals(1 + largeBuffer.length, d2.fileLength(fname));\n\n        // don't do read tests if unmapping is not supported!\n        if (d2 instanceof MMapDirectory && !((MMapDirectory) d2).getUseUnmap())\n          continue;\n        \n        IndexInput input = d2.openInput(fname, newIOContext(random()));\n        assertEquals((byte)i, input.readByte());\n        // read array with buffering enabled\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, true);\n        assertArrayEquals(largeBuffer, largeReadBuffer);\n        // read again without using buffer\n        input.seek(1L);\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, false);\n        assertArrayEquals(largeBuffer, largeReadBuffer);        \n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%dirs.length].deleteFile(fname);\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        assertFalse(slowFileExists(d2, fname));\n      }\n\n      Lock lock = dir.makeLock(lockname);\n      assertTrue(lock.obtain());\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        Lock lock2 = d2.makeLock(lockname);\n        try {\n          assertFalse(lock2.obtain(1));\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.close();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%dirs.length].makeLock(lockname);\n      assertTrue(lock.obtain());\n      lock.close();\n    }\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n    \n    IOUtils.rm(path);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"618635065f043788c9e034f96ca5cd5cea1b4592","date":1433442044,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","sourceNew":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    final Path path = createTempDir(\"testDirectInstantiation\");\n    \n    final byte[] largeBuffer = new byte[random().nextInt(256*1024)], largeReadBuffer = new byte[largeBuffer.length];\n    for (int i = 0; i < largeBuffer.length; i++) {\n      largeBuffer[i] = (byte) i; // automatically loops with modulo\n    }\n\n    final FSDirectory[] dirs = new FSDirectory[] {\n      new SimpleFSDirectory(path),\n      new NIOFSDirectory(path),\n      new MMapDirectory(path)\n    };\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, newIOContext(random()));\n      out.writeByte((byte)i);\n      out.writeBytes(largeBuffer, largeBuffer.length);\n      out.close();\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(slowFileExists(d2, fname));\n        assertEquals(1 + largeBuffer.length, d2.fileLength(fname));\n\n        // don't do read tests if unmapping is not supported!\n        if (d2 instanceof MMapDirectory && !((MMapDirectory) d2).getUseUnmap())\n          continue;\n        \n        IndexInput input = d2.openInput(fname, newIOContext(random()));\n        assertEquals((byte)i, input.readByte());\n        // read array with buffering enabled\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, true);\n        assertArrayEquals(largeBuffer, largeReadBuffer);\n        // read again without using buffer\n        input.seek(1L);\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, false);\n        assertArrayEquals(largeBuffer, largeReadBuffer);        \n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%dirs.length].deleteFile(fname);\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        assertFalse(slowFileExists(d2, fname));\n      }\n\n      Lock lock = dir.obtainLock(lockname);\n\n      for (Directory other : dirs) {\n        try {\n          other.obtainLock(lockname);\n          fail(\"didnt get exception\");\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.close();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%dirs.length].obtainLock(lockname);\n      lock.close();\n    }\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n    \n    IOUtils.rm(path);\n  }\n\n","sourceOld":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    final Path path = createTempDir(\"testDirectInstantiation\");\n    \n    final byte[] largeBuffer = new byte[random().nextInt(256*1024)], largeReadBuffer = new byte[largeBuffer.length];\n    for (int i = 0; i < largeBuffer.length; i++) {\n      largeBuffer[i] = (byte) i; // automatically loops with modulo\n    }\n\n    final FSDirectory[] dirs = new FSDirectory[] {\n      new SimpleFSDirectory(path),\n      new NIOFSDirectory(path),\n      new MMapDirectory(path)\n    };\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, newIOContext(random()));\n      out.writeByte((byte)i);\n      out.writeBytes(largeBuffer, largeBuffer.length);\n      out.close();\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(slowFileExists(d2, fname));\n        assertEquals(1 + largeBuffer.length, d2.fileLength(fname));\n\n        // don't do read tests if unmapping is not supported!\n        if (d2 instanceof MMapDirectory && !((MMapDirectory) d2).getUseUnmap())\n          continue;\n        \n        IndexInput input = d2.openInput(fname, newIOContext(random()));\n        assertEquals((byte)i, input.readByte());\n        // read array with buffering enabled\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, true);\n        assertArrayEquals(largeBuffer, largeReadBuffer);\n        // read again without using buffer\n        input.seek(1L);\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, false);\n        assertArrayEquals(largeBuffer, largeReadBuffer);        \n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%dirs.length].deleteFile(fname);\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        assertFalse(slowFileExists(d2, fname));\n      }\n\n      Lock lock = dir.makeLock(lockname);\n      assertTrue(lock.obtain());\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        Lock lock2 = d2.makeLock(lockname);\n        try {\n          assertFalse(lock2.obtain(1));\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.close();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%dirs.length].makeLock(lockname);\n      assertTrue(lock.obtain());\n      lock.close();\n    }\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n    \n    IOUtils.rm(path);\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","sourceNew":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    final Path path = createTempDir(\"testDirectInstantiation\");\n    assumeFalse(\"test deletes files through different FSDir instances\", TestUtil.hasVirusChecker(path));\n    \n    final byte[] largeBuffer = new byte[random().nextInt(256*1024)], largeReadBuffer = new byte[largeBuffer.length];\n    for (int i = 0; i < largeBuffer.length; i++) {\n      largeBuffer[i] = (byte) i; // automatically loops with modulo\n    }\n\n    final FSDirectory[] dirs = new FSDirectory[] {\n      new SimpleFSDirectory(path),\n      new NIOFSDirectory(path),\n      new MMapDirectory(path)\n    };\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, newIOContext(random()));\n      out.writeByte((byte)i);\n      out.writeBytes(largeBuffer, largeBuffer.length);\n      out.close();\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(slowFileExists(d2, fname));\n        assertEquals(1 + largeBuffer.length, d2.fileLength(fname));\n\n        // don't do read tests if unmapping is not supported!\n        if (d2 instanceof MMapDirectory && !((MMapDirectory) d2).getUseUnmap())\n          continue;\n        \n        IndexInput input = d2.openInput(fname, newIOContext(random()));\n        assertEquals((byte)i, input.readByte());\n        // read array with buffering enabled\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, true);\n        assertArrayEquals(largeBuffer, largeReadBuffer);\n        // read again without using buffer\n        input.seek(1L);\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, false);\n        assertArrayEquals(largeBuffer, largeReadBuffer);        \n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%dirs.length].deleteFiles(Collections.singleton(fname));\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        assertFalse(slowFileExists(d2, fname));\n      }\n\n      Lock lock = dir.obtainLock(lockname);\n\n      for (Directory other : dirs) {\n        try {\n          other.obtainLock(lockname);\n          fail(\"didnt get exception\");\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.close();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%dirs.length].obtainLock(lockname);\n      lock.close();\n    }\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n  }\n\n","sourceOld":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    final Path path = createTempDir(\"testDirectInstantiation\");\n    \n    final byte[] largeBuffer = new byte[random().nextInt(256*1024)], largeReadBuffer = new byte[largeBuffer.length];\n    for (int i = 0; i < largeBuffer.length; i++) {\n      largeBuffer[i] = (byte) i; // automatically loops with modulo\n    }\n\n    final FSDirectory[] dirs = new FSDirectory[] {\n      new SimpleFSDirectory(path),\n      new NIOFSDirectory(path),\n      new MMapDirectory(path)\n    };\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, newIOContext(random()));\n      out.writeByte((byte)i);\n      out.writeBytes(largeBuffer, largeBuffer.length);\n      out.close();\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(slowFileExists(d2, fname));\n        assertEquals(1 + largeBuffer.length, d2.fileLength(fname));\n\n        // don't do read tests if unmapping is not supported!\n        if (d2 instanceof MMapDirectory && !((MMapDirectory) d2).getUseUnmap())\n          continue;\n        \n        IndexInput input = d2.openInput(fname, newIOContext(random()));\n        assertEquals((byte)i, input.readByte());\n        // read array with buffering enabled\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, true);\n        assertArrayEquals(largeBuffer, largeReadBuffer);\n        // read again without using buffer\n        input.seek(1L);\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, false);\n        assertArrayEquals(largeBuffer, largeReadBuffer);        \n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%dirs.length].deleteFile(fname);\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        assertFalse(slowFileExists(d2, fname));\n      }\n\n      Lock lock = dir.obtainLock(lockname);\n\n      for (Directory other : dirs) {\n        try {\n          other.obtainLock(lockname);\n          fail(\"didnt get exception\");\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.close();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%dirs.length].obtainLock(lockname);\n      lock.close();\n    }\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n    \n    IOUtils.rm(path);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1","date":1454513757,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","sourceNew":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    final Path path = createTempDir(\"testDirectInstantiation\");\n    assumeFalse(\"test deletes files through different FSDir instances\", TestUtil.hasVirusChecker(path));\n    \n    final byte[] largeBuffer = new byte[random().nextInt(256*1024)], largeReadBuffer = new byte[largeBuffer.length];\n    for (int i = 0; i < largeBuffer.length; i++) {\n      largeBuffer[i] = (byte) i; // automatically loops with modulo\n    }\n\n    final FSDirectory[] dirs = new FSDirectory[] {\n      new SimpleFSDirectory(path),\n      new NIOFSDirectory(path),\n      new MMapDirectory(path)\n    };\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, newIOContext(random()));\n      out.writeByte((byte)i);\n      out.writeBytes(largeBuffer, largeBuffer.length);\n      out.close();\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(slowFileExists(d2, fname));\n        assertEquals(1 + largeBuffer.length, d2.fileLength(fname));\n\n        // don't do read tests if unmapping is not supported!\n        if (d2 instanceof MMapDirectory && !((MMapDirectory) d2).getUseUnmap())\n          continue;\n        \n        IndexInput input = d2.openInput(fname, newIOContext(random()));\n        assertEquals((byte)i, input.readByte());\n        // read array with buffering enabled\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, true);\n        assertArrayEquals(largeBuffer, largeReadBuffer);\n        // read again without using buffer\n        input.seek(1L);\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, false);\n        assertArrayEquals(largeBuffer, largeReadBuffer);        \n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%dirs.length].deleteFile(fname);\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        assertFalse(slowFileExists(d2, fname));\n      }\n\n      Lock lock = dir.obtainLock(lockname);\n\n      for (Directory other : dirs) {\n        try {\n          other.obtainLock(lockname);\n          fail(\"didnt get exception\");\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.close();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%dirs.length].obtainLock(lockname);\n      lock.close();\n    }\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n  }\n\n","sourceOld":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    final Path path = createTempDir(\"testDirectInstantiation\");\n    assumeFalse(\"test deletes files through different FSDir instances\", TestUtil.hasVirusChecker(path));\n    \n    final byte[] largeBuffer = new byte[random().nextInt(256*1024)], largeReadBuffer = new byte[largeBuffer.length];\n    for (int i = 0; i < largeBuffer.length; i++) {\n      largeBuffer[i] = (byte) i; // automatically loops with modulo\n    }\n\n    final FSDirectory[] dirs = new FSDirectory[] {\n      new SimpleFSDirectory(path),\n      new NIOFSDirectory(path),\n      new MMapDirectory(path)\n    };\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, newIOContext(random()));\n      out.writeByte((byte)i);\n      out.writeBytes(largeBuffer, largeBuffer.length);\n      out.close();\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(slowFileExists(d2, fname));\n        assertEquals(1 + largeBuffer.length, d2.fileLength(fname));\n\n        // don't do read tests if unmapping is not supported!\n        if (d2 instanceof MMapDirectory && !((MMapDirectory) d2).getUseUnmap())\n          continue;\n        \n        IndexInput input = d2.openInput(fname, newIOContext(random()));\n        assertEquals((byte)i, input.readByte());\n        // read array with buffering enabled\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, true);\n        assertArrayEquals(largeBuffer, largeReadBuffer);\n        // read again without using buffer\n        input.seek(1L);\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, false);\n        assertArrayEquals(largeBuffer, largeReadBuffer);        \n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%dirs.length].deleteFiles(Collections.singleton(fname));\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        assertFalse(slowFileExists(d2, fname));\n      }\n\n      Lock lock = dir.obtainLock(lockname);\n\n      for (Directory other : dirs) {\n        try {\n          other.obtainLock(lockname);\n          fail(\"didnt get exception\");\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.close();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%dirs.length].obtainLock(lockname);\n      lock.close();\n    }\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"34d6426cef006e0c3625cabe7a7ec1c2b08bc501","date":1454683374,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","sourceNew":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    final Path path = createTempDir(\"testDirectInstantiation\");\n    \n    final byte[] largeBuffer = new byte[random().nextInt(256*1024)], largeReadBuffer = new byte[largeBuffer.length];\n    for (int i = 0; i < largeBuffer.length; i++) {\n      largeBuffer[i] = (byte) i; // automatically loops with modulo\n    }\n\n    final FSDirectory[] dirs = new FSDirectory[] {\n      new SimpleFSDirectory(path),\n      new NIOFSDirectory(path),\n      new MMapDirectory(path)\n    };\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, newIOContext(random()));\n      out.writeByte((byte)i);\n      out.writeBytes(largeBuffer, largeBuffer.length);\n      out.close();\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(slowFileExists(d2, fname));\n        assertEquals(1 + largeBuffer.length, d2.fileLength(fname));\n\n        // don't do read tests if unmapping is not supported!\n        if (d2 instanceof MMapDirectory && !((MMapDirectory) d2).getUseUnmap())\n          continue;\n        \n        IndexInput input = d2.openInput(fname, newIOContext(random()));\n        assertEquals((byte)i, input.readByte());\n        // read array with buffering enabled\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, true);\n        assertArrayEquals(largeBuffer, largeReadBuffer);\n        // read again without using buffer\n        input.seek(1L);\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, false);\n        assertArrayEquals(largeBuffer, largeReadBuffer);        \n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%dirs.length].deleteFile(fname);\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        assertFalse(slowFileExists(d2, fname));\n      }\n\n      Lock lock = dir.obtainLock(lockname);\n\n      for (Directory other : dirs) {\n        try {\n          other.obtainLock(lockname);\n          fail(\"didnt get exception\");\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.close();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%dirs.length].obtainLock(lockname);\n      lock.close();\n    }\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n  }\n\n","sourceOld":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    final Path path = createTempDir(\"testDirectInstantiation\");\n    assumeFalse(\"test deletes files through different FSDir instances\", TestUtil.hasVirusChecker(path));\n    \n    final byte[] largeBuffer = new byte[random().nextInt(256*1024)], largeReadBuffer = new byte[largeBuffer.length];\n    for (int i = 0; i < largeBuffer.length; i++) {\n      largeBuffer[i] = (byte) i; // automatically loops with modulo\n    }\n\n    final FSDirectory[] dirs = new FSDirectory[] {\n      new SimpleFSDirectory(path),\n      new NIOFSDirectory(path),\n      new MMapDirectory(path)\n    };\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, newIOContext(random()));\n      out.writeByte((byte)i);\n      out.writeBytes(largeBuffer, largeBuffer.length);\n      out.close();\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(slowFileExists(d2, fname));\n        assertEquals(1 + largeBuffer.length, d2.fileLength(fname));\n\n        // don't do read tests if unmapping is not supported!\n        if (d2 instanceof MMapDirectory && !((MMapDirectory) d2).getUseUnmap())\n          continue;\n        \n        IndexInput input = d2.openInput(fname, newIOContext(random()));\n        assertEquals((byte)i, input.readByte());\n        // read array with buffering enabled\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, true);\n        assertArrayEquals(largeBuffer, largeReadBuffer);\n        // read again without using buffer\n        input.seek(1L);\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, false);\n        assertArrayEquals(largeBuffer, largeReadBuffer);        \n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%dirs.length].deleteFile(fname);\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        assertFalse(slowFileExists(d2, fname));\n      }\n\n      Lock lock = dir.obtainLock(lockname);\n\n      for (Directory other : dirs) {\n        try {\n          other.obtainLock(lockname);\n          fail(\"didnt get exception\");\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.close();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%dirs.length].obtainLock(lockname);\n      lock.close();\n    }\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","sourceNew":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    final Path path = createTempDir(\"testDirectInstantiation\");\n    \n    final byte[] largeBuffer = new byte[random().nextInt(256*1024)], largeReadBuffer = new byte[largeBuffer.length];\n    for (int i = 0; i < largeBuffer.length; i++) {\n      largeBuffer[i] = (byte) i; // automatically loops with modulo\n    }\n\n    final FSDirectory[] dirs = new FSDirectory[] {\n      new SimpleFSDirectory(path),\n      new NIOFSDirectory(path),\n      new MMapDirectory(path)\n    };\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, newIOContext(random()));\n      out.writeByte((byte)i);\n      out.writeBytes(largeBuffer, largeBuffer.length);\n      out.close();\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(slowFileExists(d2, fname));\n        assertEquals(1 + largeBuffer.length, d2.fileLength(fname));\n\n        // don't do read tests if unmapping is not supported!\n        if (d2 instanceof MMapDirectory && !((MMapDirectory) d2).getUseUnmap())\n          continue;\n        \n        IndexInput input = d2.openInput(fname, newIOContext(random()));\n        assertEquals((byte)i, input.readByte());\n        // read array with buffering enabled\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, true);\n        assertArrayEquals(largeBuffer, largeReadBuffer);\n        // read again without using buffer\n        input.seek(1L);\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, false);\n        assertArrayEquals(largeBuffer, largeReadBuffer);        \n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%dirs.length].deleteFile(fname);\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        assertFalse(slowFileExists(d2, fname));\n      }\n\n      Lock lock = dir.obtainLock(lockname);\n\n      for (Directory other : dirs) {\n        try {\n          other.obtainLock(lockname);\n          fail(\"didnt get exception\");\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.close();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%dirs.length].obtainLock(lockname);\n      lock.close();\n    }\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n  }\n\n","sourceOld":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    final Path path = createTempDir(\"testDirectInstantiation\");\n    \n    final byte[] largeBuffer = new byte[random().nextInt(256*1024)], largeReadBuffer = new byte[largeBuffer.length];\n    for (int i = 0; i < largeBuffer.length; i++) {\n      largeBuffer[i] = (byte) i; // automatically loops with modulo\n    }\n\n    final FSDirectory[] dirs = new FSDirectory[] {\n      new SimpleFSDirectory(path),\n      new NIOFSDirectory(path),\n      new MMapDirectory(path)\n    };\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, newIOContext(random()));\n      out.writeByte((byte)i);\n      out.writeBytes(largeBuffer, largeBuffer.length);\n      out.close();\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(slowFileExists(d2, fname));\n        assertEquals(1 + largeBuffer.length, d2.fileLength(fname));\n\n        // don't do read tests if unmapping is not supported!\n        if (d2 instanceof MMapDirectory && !((MMapDirectory) d2).getUseUnmap())\n          continue;\n        \n        IndexInput input = d2.openInput(fname, newIOContext(random()));\n        assertEquals((byte)i, input.readByte());\n        // read array with buffering enabled\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, true);\n        assertArrayEquals(largeBuffer, largeReadBuffer);\n        // read again without using buffer\n        input.seek(1L);\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, false);\n        assertArrayEquals(largeBuffer, largeReadBuffer);        \n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%dirs.length].deleteFile(fname);\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        assertFalse(slowFileExists(d2, fname));\n      }\n\n      Lock lock = dir.obtainLock(lockname);\n\n      for (Directory other : dirs) {\n        try {\n          other.obtainLock(lockname);\n          fail(\"didnt get exception\");\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.close();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%dirs.length].obtainLock(lockname);\n      lock.close();\n    }\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n    \n    IOUtils.rm(path);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","sourceNew":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    final Path path = createTempDir(\"testDirectInstantiation\");\n    \n    final byte[] largeBuffer = new byte[random().nextInt(256*1024)], largeReadBuffer = new byte[largeBuffer.length];\n    for (int i = 0; i < largeBuffer.length; i++) {\n      largeBuffer[i] = (byte) i; // automatically loops with modulo\n    }\n\n    final FSDirectory[] dirs = new FSDirectory[] {\n      new SimpleFSDirectory(path),\n      new NIOFSDirectory(path),\n      new MMapDirectory(path)\n    };\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, newIOContext(random()));\n      out.writeByte((byte)i);\n      out.writeBytes(largeBuffer, largeBuffer.length);\n      out.close();\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(slowFileExists(d2, fname));\n        assertEquals(1 + largeBuffer.length, d2.fileLength(fname));\n\n        // don't do read tests if unmapping is not supported!\n        if (d2 instanceof MMapDirectory && !((MMapDirectory) d2).getUseUnmap())\n          continue;\n        \n        IndexInput input = d2.openInput(fname, newIOContext(random()));\n        assertEquals((byte)i, input.readByte());\n        // read array with buffering enabled\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, true);\n        assertArrayEquals(largeBuffer, largeReadBuffer);\n        // read again without using buffer\n        input.seek(1L);\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, false);\n        assertArrayEquals(largeBuffer, largeReadBuffer);        \n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%dirs.length].deleteFile(fname);\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        assertFalse(slowFileExists(d2, fname));\n      }\n\n      Lock lock = dir.obtainLock(lockname);\n\n      for (Directory other : dirs) {\n        try {\n          other.obtainLock(lockname);\n          fail(\"didnt get exception\");\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.close();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%dirs.length].obtainLock(lockname);\n      lock.close();\n    }\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n  }\n\n","sourceOld":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    final Path path = createTempDir(\"testDirectInstantiation\");\n    \n    final byte[] largeBuffer = new byte[random().nextInt(256*1024)], largeReadBuffer = new byte[largeBuffer.length];\n    for (int i = 0; i < largeBuffer.length; i++) {\n      largeBuffer[i] = (byte) i; // automatically loops with modulo\n    }\n\n    final FSDirectory[] dirs = new FSDirectory[] {\n      new SimpleFSDirectory(path),\n      new NIOFSDirectory(path),\n      new MMapDirectory(path)\n    };\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, newIOContext(random()));\n      out.writeByte((byte)i);\n      out.writeBytes(largeBuffer, largeBuffer.length);\n      out.close();\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(slowFileExists(d2, fname));\n        assertEquals(1 + largeBuffer.length, d2.fileLength(fname));\n\n        // don't do read tests if unmapping is not supported!\n        if (d2 instanceof MMapDirectory && !((MMapDirectory) d2).getUseUnmap())\n          continue;\n        \n        IndexInput input = d2.openInput(fname, newIOContext(random()));\n        assertEquals((byte)i, input.readByte());\n        // read array with buffering enabled\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, true);\n        assertArrayEquals(largeBuffer, largeReadBuffer);\n        // read again without using buffer\n        input.seek(1L);\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, false);\n        assertArrayEquals(largeBuffer, largeReadBuffer);        \n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%dirs.length].deleteFile(fname);\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        assertFalse(slowFileExists(d2, fname));\n      }\n\n      Lock lock = dir.obtainLock(lockname);\n\n      for (Directory other : dirs) {\n        try {\n          other.obtainLock(lockname);\n          fail(\"didnt get exception\");\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.close();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%dirs.length].obtainLock(lockname);\n      lock.close();\n    }\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n    \n    IOUtils.rm(path);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","sourceNew":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    final Path path = createTempDir(\"testDirectInstantiation\");\n    \n    final byte[] largeBuffer = new byte[random().nextInt(256*1024)], largeReadBuffer = new byte[largeBuffer.length];\n    for (int i = 0; i < largeBuffer.length; i++) {\n      largeBuffer[i] = (byte) i; // automatically loops with modulo\n    }\n\n    final FSDirectory[] dirs = new FSDirectory[] {\n      new SimpleFSDirectory(path),\n      new NIOFSDirectory(path),\n      new MMapDirectory(path)\n    };\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, newIOContext(random()));\n      out.writeByte((byte)i);\n      out.writeBytes(largeBuffer, largeBuffer.length);\n      out.close();\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(slowFileExists(d2, fname));\n        assertEquals(1 + largeBuffer.length, d2.fileLength(fname));\n\n        // don't do read tests if unmapping is not supported!\n        if (d2 instanceof MMapDirectory && !((MMapDirectory) d2).getUseUnmap())\n          continue;\n        \n        IndexInput input = d2.openInput(fname, newIOContext(random()));\n        assertEquals((byte)i, input.readByte());\n        // read array with buffering enabled\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, true);\n        assertArrayEquals(largeBuffer, largeReadBuffer);\n        // read again without using buffer\n        input.seek(1L);\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, false);\n        assertArrayEquals(largeBuffer, largeReadBuffer);        \n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%dirs.length].deleteFile(fname);\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        assertFalse(slowFileExists(d2, fname));\n      }\n\n      Lock lock = dir.obtainLock(lockname);\n\n      for (Directory other : dirs) {\n        try {\n          other.obtainLock(lockname);\n          fail(\"didnt get exception\");\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.close();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%dirs.length].obtainLock(lockname);\n      lock.close();\n    }\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n  }\n\n","sourceOld":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    final Path path = createTempDir(\"testDirectInstantiation\");\n    \n    final byte[] largeBuffer = new byte[random().nextInt(256*1024)], largeReadBuffer = new byte[largeBuffer.length];\n    for (int i = 0; i < largeBuffer.length; i++) {\n      largeBuffer[i] = (byte) i; // automatically loops with modulo\n    }\n\n    final FSDirectory[] dirs = new FSDirectory[] {\n      new SimpleFSDirectory(path),\n      new NIOFSDirectory(path),\n      new MMapDirectory(path)\n    };\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, newIOContext(random()));\n      out.writeByte((byte)i);\n      out.writeBytes(largeBuffer, largeBuffer.length);\n      out.close();\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(slowFileExists(d2, fname));\n        assertEquals(1 + largeBuffer.length, d2.fileLength(fname));\n\n        // don't do read tests if unmapping is not supported!\n        if (d2 instanceof MMapDirectory && !((MMapDirectory) d2).getUseUnmap())\n          continue;\n        \n        IndexInput input = d2.openInput(fname, newIOContext(random()));\n        assertEquals((byte)i, input.readByte());\n        // read array with buffering enabled\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, true);\n        assertArrayEquals(largeBuffer, largeReadBuffer);\n        // read again without using buffer\n        input.seek(1L);\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, false);\n        assertArrayEquals(largeBuffer, largeReadBuffer);        \n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%dirs.length].deleteFile(fname);\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        assertFalse(slowFileExists(d2, fname));\n      }\n\n      Lock lock = dir.obtainLock(lockname);\n\n      for (Directory other : dirs) {\n        try {\n          other.obtainLock(lockname);\n          fail(\"didnt get exception\");\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.close();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%dirs.length].obtainLock(lockname);\n      lock.close();\n    }\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n    \n    IOUtils.rm(path);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","sourceNew":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    final Path path = createTempDir(\"testDirectInstantiation\");\n    \n    final byte[] largeBuffer = new byte[random().nextInt(256*1024)], largeReadBuffer = new byte[largeBuffer.length];\n    for (int i = 0; i < largeBuffer.length; i++) {\n      largeBuffer[i] = (byte) i; // automatically loops with modulo\n    }\n\n    final FSDirectory[] dirs = new FSDirectory[] {\n      new SimpleFSDirectory(path),\n      new NIOFSDirectory(path),\n      new MMapDirectory(path)\n    };\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, newIOContext(random()));\n      out.writeByte((byte)i);\n      out.writeBytes(largeBuffer, largeBuffer.length);\n      out.close();\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(slowFileExists(d2, fname));\n        assertEquals(1 + largeBuffer.length, d2.fileLength(fname));\n\n        // don't do read tests if unmapping is not supported!\n        if (d2 instanceof MMapDirectory && !((MMapDirectory) d2).getUseUnmap())\n          continue;\n        \n        IndexInput input = d2.openInput(fname, newIOContext(random()));\n        assertEquals((byte)i, input.readByte());\n        // read array with buffering enabled\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, true);\n        assertArrayEquals(largeBuffer, largeReadBuffer);\n        // read again without using buffer\n        input.seek(1L);\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, false);\n        assertArrayEquals(largeBuffer, largeReadBuffer);        \n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%dirs.length].deleteFile(fname);\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        assertFalse(slowFileExists(d2, fname));\n      }\n\n      Lock lock = dir.obtainLock(lockname);\n\n      for (Directory other : dirs) {\n        expectThrows(LockObtainFailedException.class, () -> {\n          other.obtainLock(lockname);\n        });\n      }\n\n      lock.close();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%dirs.length].obtainLock(lockname);\n      lock.close();\n    }\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n  }\n\n","sourceOld":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    final Path path = createTempDir(\"testDirectInstantiation\");\n    \n    final byte[] largeBuffer = new byte[random().nextInt(256*1024)], largeReadBuffer = new byte[largeBuffer.length];\n    for (int i = 0; i < largeBuffer.length; i++) {\n      largeBuffer[i] = (byte) i; // automatically loops with modulo\n    }\n\n    final FSDirectory[] dirs = new FSDirectory[] {\n      new SimpleFSDirectory(path),\n      new NIOFSDirectory(path),\n      new MMapDirectory(path)\n    };\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, newIOContext(random()));\n      out.writeByte((byte)i);\n      out.writeBytes(largeBuffer, largeBuffer.length);\n      out.close();\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(slowFileExists(d2, fname));\n        assertEquals(1 + largeBuffer.length, d2.fileLength(fname));\n\n        // don't do read tests if unmapping is not supported!\n        if (d2 instanceof MMapDirectory && !((MMapDirectory) d2).getUseUnmap())\n          continue;\n        \n        IndexInput input = d2.openInput(fname, newIOContext(random()));\n        assertEquals((byte)i, input.readByte());\n        // read array with buffering enabled\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, true);\n        assertArrayEquals(largeBuffer, largeReadBuffer);\n        // read again without using buffer\n        input.seek(1L);\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, false);\n        assertArrayEquals(largeBuffer, largeReadBuffer);        \n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%dirs.length].deleteFile(fname);\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        assertFalse(slowFileExists(d2, fname));\n      }\n\n      Lock lock = dir.obtainLock(lockname);\n\n      for (Directory other : dirs) {\n        try {\n          other.obtainLock(lockname);\n          fail(\"didnt get exception\");\n        } catch (LockObtainFailedException e) {\n          // OK\n        }\n      }\n\n      lock.close();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%dirs.length].obtainLock(lockname);\n      lock.close();\n    }\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n  }\n\n","bugFix":["618635065f043788c9e034f96ca5cd5cea1b4592","89b8a0757fe4354bdc64c82f90886a9284b57833"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"336a0bd816238e31c31e191e1b046e974f7ae5fe","date":1482358070,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","sourceNew":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    final Path path = createTempDir(\"testDirectInstantiation\");\n    \n    final byte[] largeBuffer = new byte[random().nextInt(256*1024)], largeReadBuffer = new byte[largeBuffer.length];\n    for (int i = 0; i < largeBuffer.length; i++) {\n      largeBuffer[i] = (byte) i; // automatically loops with modulo\n    }\n\n    final List<FSDirectory> dirs0 = new ArrayList<>();\n    dirs0.add(new SimpleFSDirectory(path));\n    dirs0.add(new NIOFSDirectory(path));\n    if (hasWorkingMMapOnWindows()) {\n      dirs0.add(new MMapDirectory(path));\n    }\n    final FSDirectory[] dirs = dirs0.stream().toArray(FSDirectory[]::new);\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, newIOContext(random()));\n      out.writeByte((byte)i);\n      out.writeBytes(largeBuffer, largeBuffer.length);\n      out.close();\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(slowFileExists(d2, fname));\n        assertEquals(1 + largeBuffer.length, d2.fileLength(fname));\n\n        // don't do read tests if unmapping is not supported!\n        if (d2 instanceof MMapDirectory && !((MMapDirectory) d2).getUseUnmap())\n          continue;\n        \n        IndexInput input = d2.openInput(fname, newIOContext(random()));\n        assertEquals((byte)i, input.readByte());\n        // read array with buffering enabled\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, true);\n        assertArrayEquals(largeBuffer, largeReadBuffer);\n        // read again without using buffer\n        input.seek(1L);\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, false);\n        assertArrayEquals(largeBuffer, largeReadBuffer);        \n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%dirs.length].deleteFile(fname);\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        assertFalse(slowFileExists(d2, fname));\n      }\n\n      Lock lock = dir.obtainLock(lockname);\n\n      for (Directory other : dirs) {\n        expectThrows(LockObtainFailedException.class, () -> {\n          other.obtainLock(lockname);\n        });\n      }\n\n      lock.close();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%dirs.length].obtainLock(lockname);\n      lock.close();\n    }\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n  }\n\n","sourceOld":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    final Path path = createTempDir(\"testDirectInstantiation\");\n    \n    final byte[] largeBuffer = new byte[random().nextInt(256*1024)], largeReadBuffer = new byte[largeBuffer.length];\n    for (int i = 0; i < largeBuffer.length; i++) {\n      largeBuffer[i] = (byte) i; // automatically loops with modulo\n    }\n\n    final FSDirectory[] dirs = new FSDirectory[] {\n      new SimpleFSDirectory(path),\n      new NIOFSDirectory(path),\n      new MMapDirectory(path)\n    };\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, newIOContext(random()));\n      out.writeByte((byte)i);\n      out.writeBytes(largeBuffer, largeBuffer.length);\n      out.close();\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(slowFileExists(d2, fname));\n        assertEquals(1 + largeBuffer.length, d2.fileLength(fname));\n\n        // don't do read tests if unmapping is not supported!\n        if (d2 instanceof MMapDirectory && !((MMapDirectory) d2).getUseUnmap())\n          continue;\n        \n        IndexInput input = d2.openInput(fname, newIOContext(random()));\n        assertEquals((byte)i, input.readByte());\n        // read array with buffering enabled\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, true);\n        assertArrayEquals(largeBuffer, largeReadBuffer);\n        // read again without using buffer\n        input.seek(1L);\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, false);\n        assertArrayEquals(largeBuffer, largeReadBuffer);        \n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%dirs.length].deleteFile(fname);\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        assertFalse(slowFileExists(d2, fname));\n      }\n\n      Lock lock = dir.obtainLock(lockname);\n\n      for (Directory other : dirs) {\n        expectThrows(LockObtainFailedException.class, () -> {\n          other.obtainLock(lockname);\n        });\n      }\n\n      lock.close();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%dirs.length].obtainLock(lockname);\n      lock.close();\n    }\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","sourceNew":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    final Path path = createTempDir(\"testDirectInstantiation\");\n    \n    final byte[] largeBuffer = new byte[random().nextInt(256*1024)], largeReadBuffer = new byte[largeBuffer.length];\n    for (int i = 0; i < largeBuffer.length; i++) {\n      largeBuffer[i] = (byte) i; // automatically loops with modulo\n    }\n\n    final List<FSDirectory> dirs0 = new ArrayList<>();\n    dirs0.add(new SimpleFSDirectory(path));\n    dirs0.add(new NIOFSDirectory(path));\n    if (hasWorkingMMapOnWindows()) {\n      dirs0.add(new MMapDirectory(path));\n    }\n    final FSDirectory[] dirs = dirs0.stream().toArray(FSDirectory[]::new);\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, newIOContext(random()));\n      out.writeByte((byte)i);\n      out.writeBytes(largeBuffer, largeBuffer.length);\n      out.close();\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(slowFileExists(d2, fname));\n        assertEquals(1 + largeBuffer.length, d2.fileLength(fname));\n\n        // don't do read tests if unmapping is not supported!\n        if (d2 instanceof MMapDirectory && !((MMapDirectory) d2).getUseUnmap())\n          continue;\n        \n        IndexInput input = d2.openInput(fname, newIOContext(random()));\n        assertEquals((byte)i, input.readByte());\n        // read array with buffering enabled\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, true);\n        assertArrayEquals(largeBuffer, largeReadBuffer);\n        // read again without using buffer\n        input.seek(1L);\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, false);\n        assertArrayEquals(largeBuffer, largeReadBuffer);        \n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%dirs.length].deleteFile(fname);\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        assertFalse(slowFileExists(d2, fname));\n      }\n\n      Lock lock = dir.obtainLock(lockname);\n\n      for (Directory other : dirs) {\n        expectThrows(LockObtainFailedException.class, () -> {\n          other.obtainLock(lockname);\n        });\n      }\n\n      lock.close();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%dirs.length].obtainLock(lockname);\n      lock.close();\n    }\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n  }\n\n","sourceOld":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    final Path path = createTempDir(\"testDirectInstantiation\");\n    \n    final byte[] largeBuffer = new byte[random().nextInt(256*1024)], largeReadBuffer = new byte[largeBuffer.length];\n    for (int i = 0; i < largeBuffer.length; i++) {\n      largeBuffer[i] = (byte) i; // automatically loops with modulo\n    }\n\n    final FSDirectory[] dirs = new FSDirectory[] {\n      new SimpleFSDirectory(path),\n      new NIOFSDirectory(path),\n      new MMapDirectory(path)\n    };\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, newIOContext(random()));\n      out.writeByte((byte)i);\n      out.writeBytes(largeBuffer, largeBuffer.length);\n      out.close();\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(slowFileExists(d2, fname));\n        assertEquals(1 + largeBuffer.length, d2.fileLength(fname));\n\n        // don't do read tests if unmapping is not supported!\n        if (d2 instanceof MMapDirectory && !((MMapDirectory) d2).getUseUnmap())\n          continue;\n        \n        IndexInput input = d2.openInput(fname, newIOContext(random()));\n        assertEquals((byte)i, input.readByte());\n        // read array with buffering enabled\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, true);\n        assertArrayEquals(largeBuffer, largeReadBuffer);\n        // read again without using buffer\n        input.seek(1L);\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, false);\n        assertArrayEquals(largeBuffer, largeReadBuffer);        \n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%dirs.length].deleteFile(fname);\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        assertFalse(slowFileExists(d2, fname));\n      }\n\n      Lock lock = dir.obtainLock(lockname);\n\n      for (Directory other : dirs) {\n        expectThrows(LockObtainFailedException.class, () -> {\n          other.obtainLock(lockname);\n        });\n      }\n\n      lock.close();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%dirs.length].obtainLock(lockname);\n      lock.close();\n    }\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ae13d58e10d8dc818c75db483ed8b53c725f1d","date":1583449465,"type":3,"author":"Yannick Welsch","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","sourceNew":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    final Path path = createTempDir(\"testDirectInstantiation\");\n    \n    final byte[] largeBuffer = new byte[random().nextInt(256*1024)], largeReadBuffer = new byte[largeBuffer.length];\n    for (int i = 0; i < largeBuffer.length; i++) {\n      largeBuffer[i] = (byte) i; // automatically loops with modulo\n    }\n\n    final List<FSDirectory> dirs0 = new ArrayList<>();\n    dirs0.add(new NIOFSDirectory(path));\n    if (hasWorkingMMapOnWindows()) {\n      dirs0.add(new MMapDirectory(path));\n    }\n    final FSDirectory[] dirs = dirs0.stream().toArray(FSDirectory[]::new);\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, newIOContext(random()));\n      out.writeByte((byte)i);\n      out.writeBytes(largeBuffer, largeBuffer.length);\n      out.close();\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(slowFileExists(d2, fname));\n        assertEquals(1 + largeBuffer.length, d2.fileLength(fname));\n\n        // don't do read tests if unmapping is not supported!\n        if (d2 instanceof MMapDirectory && !((MMapDirectory) d2).getUseUnmap())\n          continue;\n        \n        IndexInput input = d2.openInput(fname, newIOContext(random()));\n        assertEquals((byte)i, input.readByte());\n        // read array with buffering enabled\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, true);\n        assertArrayEquals(largeBuffer, largeReadBuffer);\n        // read again without using buffer\n        input.seek(1L);\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, false);\n        assertArrayEquals(largeBuffer, largeReadBuffer);        \n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%dirs.length].deleteFile(fname);\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        assertFalse(slowFileExists(d2, fname));\n      }\n\n      Lock lock = dir.obtainLock(lockname);\n\n      for (Directory other : dirs) {\n        expectThrows(LockObtainFailedException.class, () -> {\n          other.obtainLock(lockname);\n        });\n      }\n\n      lock.close();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%dirs.length].obtainLock(lockname);\n      lock.close();\n    }\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n  }\n\n","sourceOld":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    final Path path = createTempDir(\"testDirectInstantiation\");\n    \n    final byte[] largeBuffer = new byte[random().nextInt(256*1024)], largeReadBuffer = new byte[largeBuffer.length];\n    for (int i = 0; i < largeBuffer.length; i++) {\n      largeBuffer[i] = (byte) i; // automatically loops with modulo\n    }\n\n    final List<FSDirectory> dirs0 = new ArrayList<>();\n    dirs0.add(new SimpleFSDirectory(path));\n    dirs0.add(new NIOFSDirectory(path));\n    if (hasWorkingMMapOnWindows()) {\n      dirs0.add(new MMapDirectory(path));\n    }\n    final FSDirectory[] dirs = dirs0.stream().toArray(FSDirectory[]::new);\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, newIOContext(random()));\n      out.writeByte((byte)i);\n      out.writeBytes(largeBuffer, largeBuffer.length);\n      out.close();\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(slowFileExists(d2, fname));\n        assertEquals(1 + largeBuffer.length, d2.fileLength(fname));\n\n        // don't do read tests if unmapping is not supported!\n        if (d2 instanceof MMapDirectory && !((MMapDirectory) d2).getUseUnmap())\n          continue;\n        \n        IndexInput input = d2.openInput(fname, newIOContext(random()));\n        assertEquals((byte)i, input.readByte());\n        // read array with buffering enabled\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, true);\n        assertArrayEquals(largeBuffer, largeReadBuffer);\n        // read again without using buffer\n        input.seek(1L);\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, false);\n        assertArrayEquals(largeBuffer, largeReadBuffer);        \n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%dirs.length].deleteFile(fname);\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        assertFalse(slowFileExists(d2, fname));\n      }\n\n      Lock lock = dir.obtainLock(lockname);\n\n      for (Directory other : dirs) {\n        expectThrows(LockObtainFailedException.class, () -> {\n          other.obtainLock(lockname);\n        });\n      }\n\n      lock.close();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%dirs.length].obtainLock(lockname);\n      lock.close();\n    }\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ca2a57dbb0665332572cf1a0dffa67234089615","date":1583491342,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testDirectInstantiation().mjava","sourceNew":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    final Path path = createTempDir(\"testDirectInstantiation\");\n    \n    final byte[] largeBuffer = new byte[random().nextInt(256*1024)], largeReadBuffer = new byte[largeBuffer.length];\n    for (int i = 0; i < largeBuffer.length; i++) {\n      largeBuffer[i] = (byte) i; // automatically loops with modulo\n    }\n\n    final List<FSDirectory> dirs0 = new ArrayList<>();\n    dirs0.add(new NIOFSDirectory(path));\n    if (hasWorkingMMapOnWindows()) {\n      dirs0.add(new MMapDirectory(path));\n    }\n    final FSDirectory[] dirs = dirs0.stream().toArray(FSDirectory[]::new);\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, newIOContext(random()));\n      out.writeByte((byte)i);\n      out.writeBytes(largeBuffer, largeBuffer.length);\n      out.close();\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(slowFileExists(d2, fname));\n        assertEquals(1 + largeBuffer.length, d2.fileLength(fname));\n\n        // don't do read tests if unmapping is not supported!\n        if (d2 instanceof MMapDirectory && !((MMapDirectory) d2).getUseUnmap())\n          continue;\n        \n        IndexInput input = d2.openInput(fname, newIOContext(random()));\n        assertEquals((byte)i, input.readByte());\n        // read array with buffering enabled\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, true);\n        assertArrayEquals(largeBuffer, largeReadBuffer);\n        // read again without using buffer\n        input.seek(1L);\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, false);\n        assertArrayEquals(largeBuffer, largeReadBuffer);        \n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%dirs.length].deleteFile(fname);\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        assertFalse(slowFileExists(d2, fname));\n      }\n\n      Lock lock = dir.obtainLock(lockname);\n\n      for (Directory other : dirs) {\n        expectThrows(LockObtainFailedException.class, () -> {\n          other.obtainLock(lockname);\n        });\n      }\n\n      lock.close();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%dirs.length].obtainLock(lockname);\n      lock.close();\n    }\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n  }\n\n","sourceOld":"  // Test that different instances of FSDirectory can coexist on the same\n  // path, can read, write, and lock files.\n  public void testDirectInstantiation() throws Exception {\n    final Path path = createTempDir(\"testDirectInstantiation\");\n    \n    final byte[] largeBuffer = new byte[random().nextInt(256*1024)], largeReadBuffer = new byte[largeBuffer.length];\n    for (int i = 0; i < largeBuffer.length; i++) {\n      largeBuffer[i] = (byte) i; // automatically loops with modulo\n    }\n\n    final List<FSDirectory> dirs0 = new ArrayList<>();\n    dirs0.add(new SimpleFSDirectory(path));\n    dirs0.add(new NIOFSDirectory(path));\n    if (hasWorkingMMapOnWindows()) {\n      dirs0.add(new MMapDirectory(path));\n    }\n    final FSDirectory[] dirs = dirs0.stream().toArray(FSDirectory[]::new);\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      String fname = \"foo.\" + i;\n      String lockname = \"foo\" + i + \".lck\";\n      IndexOutput out = dir.createOutput(fname, newIOContext(random()));\n      out.writeByte((byte)i);\n      out.writeBytes(largeBuffer, largeBuffer.length);\n      out.close();\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        d2.ensureOpen();\n        assertTrue(slowFileExists(d2, fname));\n        assertEquals(1 + largeBuffer.length, d2.fileLength(fname));\n\n        // don't do read tests if unmapping is not supported!\n        if (d2 instanceof MMapDirectory && !((MMapDirectory) d2).getUseUnmap())\n          continue;\n        \n        IndexInput input = d2.openInput(fname, newIOContext(random()));\n        assertEquals((byte)i, input.readByte());\n        // read array with buffering enabled\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, true);\n        assertArrayEquals(largeBuffer, largeReadBuffer);\n        // read again without using buffer\n        input.seek(1L);\n        Arrays.fill(largeReadBuffer, (byte)0);\n        input.readBytes(largeReadBuffer, 0, largeReadBuffer.length, false);\n        assertArrayEquals(largeBuffer, largeReadBuffer);        \n        input.close();\n      }\n\n      // delete with a different dir\n      dirs[(i+1)%dirs.length].deleteFile(fname);\n\n      for (int j=0; j<dirs.length; j++) {\n        FSDirectory d2 = dirs[j];\n        assertFalse(slowFileExists(d2, fname));\n      }\n\n      Lock lock = dir.obtainLock(lockname);\n\n      for (Directory other : dirs) {\n        expectThrows(LockObtainFailedException.class, () -> {\n          other.obtainLock(lockname);\n        });\n      }\n\n      lock.close();\n      \n      // now lock with different dir\n      lock = dirs[(i+1)%dirs.length].obtainLock(lockname);\n      lock.close();\n    }\n\n    for (int i=0; i<dirs.length; i++) {\n      FSDirectory dir = dirs[i];\n      dir.ensureOpen();\n      dir.close();\n      assertFalse(dir.isOpen);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ca2a57dbb0665332572cf1a0dffa67234089615":["336a0bd816238e31c31e191e1b046e974f7ae5fe","09ae13d58e10d8dc818c75db483ed8b53c725f1d"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["cd4e13d997cf4fb810398a20a299c2c5a9f6b796","a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a207d19eac354d649c3f0e2cce070017c78125e":["618635065f043788c9e034f96ca5cd5cea1b4592","b470f36a9372c97283360b1304eacbde22df6c0d"],"05fe562aa248790944d43cdd478f512572835ba0":["5a207d19eac354d649c3f0e2cce070017c78125e"],"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1":["6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"0dcf83b1542b01ad5cddb41b01dc51f751215919":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["618635065f043788c9e034f96ca5cd5cea1b4592"],"336a0bd816238e31c31e191e1b046e974f7ae5fe":["05fe562aa248790944d43cdd478f512572835ba0"],"34d6426cef006e0c3625cabe7a7ec1c2b08bc501":["8f4e2dcb5e470991d83a63c264bfe20880d3b3c1"],"cd4e13d997cf4fb810398a20a299c2c5a9f6b796":["6613659748fe4411a7dcf85266e55db1f95f7315"],"09ae13d58e10d8dc818c75db483ed8b53c725f1d":["336a0bd816238e31c31e191e1b046e974f7ae5fe"],"6613659748fe4411a7dcf85266e55db1f95f7315":["0fcdcf196523675146a4df3193e91413533857ab"],"285cdc737de75b7cc7c284a156b20214deb67bca":["f4abec28b874149a7223e32cc7a01704c27790de"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["618635065f043788c9e034f96ca5cd5cea1b4592","b470f36a9372c97283360b1304eacbde22df6c0d"],"f4abec28b874149a7223e32cc7a01704c27790de":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"d0d579490a72f2e6297eaa648940611234c57cf1":["cd4e13d997cf4fb810398a20a299c2c5a9f6b796"],"be04a7534a8a0679382542b62556ea5fba6cfb7f":["d0d579490a72f2e6297eaa648940611234c57cf1"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["05fe562aa248790944d43cdd478f512572835ba0","336a0bd816238e31c31e191e1b046e974f7ae5fe"],"618635065f043788c9e034f96ca5cd5cea1b4592":["285cdc737de75b7cc7c284a156b20214deb67bca"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["be04a7534a8a0679382542b62556ea5fba6cfb7f"],"b470f36a9372c97283360b1304eacbde22df6c0d":["618635065f043788c9e034f96ca5cd5cea1b4592","34d6426cef006e0c3625cabe7a7ec1c2b08bc501"],"0fcdcf196523675146a4df3193e91413533857ab":["0dcf83b1542b01ad5cddb41b01dc51f751215919"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ca2a57dbb0665332572cf1a0dffa67234089615"]},"commit2Childs":{"9ca2a57dbb0665332572cf1a0dffa67234089615":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"5a207d19eac354d649c3f0e2cce070017c78125e":["05fe562aa248790944d43cdd478f512572835ba0"],"05fe562aa248790944d43cdd478f512572835ba0":["336a0bd816238e31c31e191e1b046e974f7ae5fe","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"8f4e2dcb5e470991d83a63c264bfe20880d3b3c1":["34d6426cef006e0c3625cabe7a7ec1c2b08bc501"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["8f4e2dcb5e470991d83a63c264bfe20880d3b3c1"],"0dcf83b1542b01ad5cddb41b01dc51f751215919":["0fcdcf196523675146a4df3193e91413533857ab"],"336a0bd816238e31c31e191e1b046e974f7ae5fe":["9ca2a57dbb0665332572cf1a0dffa67234089615","09ae13d58e10d8dc818c75db483ed8b53c725f1d","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"34d6426cef006e0c3625cabe7a7ec1c2b08bc501":["b470f36a9372c97283360b1304eacbde22df6c0d"],"09ae13d58e10d8dc818c75db483ed8b53c725f1d":["9ca2a57dbb0665332572cf1a0dffa67234089615"],"cd4e13d997cf4fb810398a20a299c2c5a9f6b796":["2a0f5bb79c600763ffe7b8141df59a3169d31e48","d0d579490a72f2e6297eaa648940611234c57cf1"],"6613659748fe4411a7dcf85266e55db1f95f7315":["cd4e13d997cf4fb810398a20a299c2c5a9f6b796"],"285cdc737de75b7cc7c284a156b20214deb67bca":["618635065f043788c9e034f96ca5cd5cea1b4592"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"f4abec28b874149a7223e32cc7a01704c27790de":["285cdc737de75b7cc7c284a156b20214deb67bca"],"d0d579490a72f2e6297eaa648940611234c57cf1":["be04a7534a8a0679382542b62556ea5fba6cfb7f"],"be04a7534a8a0679382542b62556ea5fba6cfb7f":["a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[],"618635065f043788c9e034f96ca5cd5cea1b4592":["5a207d19eac354d649c3f0e2cce070017c78125e","6bfe104fc023fadc9e709f8d17403d2cc61133fe","1e6acbaae7af722f17204ceccf0f7db5753eccf3","b470f36a9372c97283360b1304eacbde22df6c0d"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["f4abec28b874149a7223e32cc7a01704c27790de"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"0fcdcf196523675146a4df3193e91413533857ab":["6613659748fe4411a7dcf85266e55db1f95f7315"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","0dcf83b1542b01ad5cddb41b01dc51f751215919"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","1e6acbaae7af722f17204ceccf0f7db5753eccf3","f03e4bed5023ec3ef93a771b8888cae991cf448d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}