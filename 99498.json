{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#checkMapArray(List,Map[String,Object]).mjava","commits":[{"id":"a7194afdfe9b45ca331c1cd5001cd9766688688b","date":1560867417,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#checkMapArray(List,Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  private boolean checkMapArray(List l, Map<String, Object> m) {\n    List<Map> maps = null;\n    for (Object o : l) {\n      if (o instanceof Map) {\n        if (maps == null) maps = new ArrayList<>();\n        maps.add((Map) o);\n      }\n    }\n    String key = null;\n    if (maps != null) {\n      if (maps.size() != l.size()) throwExp(m, \"all elements of nodeset must be Objects\");\n      List<Condition> tags = new ArrayList<>(maps.size());\n      for (Map map : maps) {\n        String s = validateObjectInNodeset(m, map);\n        if(key == null) key = s;\n        if(!Objects.equals(key, s)){\n          throwExp(m, \"all element must have same key\");\n        }\n        tags.add(parse(s, m));\n      }\n      if(this.put == Put.ON_EACH) throwExp(m, \"cannot use put: ''on-each-node''  with an array value in nodeset \");\n      this.tag = new Condition(key, tags,Operand.IN, null,this);\n      return true;\n    }\n    return false;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"527adea7ce767368d7317339023e18e39702132e","date":1592163810,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#checkMapArray(List,Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#checkMapArray(List,Map[String,Object]).mjava","sourceNew":"  private boolean checkMapArray(@SuppressWarnings({\"rawtypes\"})List l, Map<String, Object> m) {\n    @SuppressWarnings({\"rawtypes\"})\n    List<Map> maps = null;\n    for (Object o : l) {\n      if (o instanceof Map) {\n        if (maps == null) maps = new ArrayList<>();\n        maps.add((Map) o);\n      }\n    }\n    String key = null;\n    if (maps != null) {\n      if (maps.size() != l.size()) throwExp(m, \"all elements of nodeset must be Objects\");\n      List<Condition> tags = new ArrayList<>(maps.size());\n      for (@SuppressWarnings({\"rawtypes\"})Map map : maps) {\n        String s = validateObjectInNodeset(m, map);\n        if(key == null) key = s;\n        if(!Objects.equals(key, s)){\n          throwExp(m, \"all element must have same key\");\n        }\n        tags.add(parse(s, m));\n      }\n      if(this.put == Put.ON_EACH) throwExp(m, \"cannot use put: ''on-each-node''  with an array value in nodeset \");\n      this.tag = new Condition(key, tags,Operand.IN, null,this);\n      return true;\n    }\n    return false;\n\n  }\n\n","sourceOld":"  private boolean checkMapArray(List l, Map<String, Object> m) {\n    List<Map> maps = null;\n    for (Object o : l) {\n      if (o instanceof Map) {\n        if (maps == null) maps = new ArrayList<>();\n        maps.add((Map) o);\n      }\n    }\n    String key = null;\n    if (maps != null) {\n      if (maps.size() != l.size()) throwExp(m, \"all elements of nodeset must be Objects\");\n      List<Condition> tags = new ArrayList<>(maps.size());\n      for (Map map : maps) {\n        String s = validateObjectInNodeset(m, map);\n        if(key == null) key = s;\n        if(!Objects.equals(key, s)){\n          throwExp(m, \"all element must have same key\");\n        }\n        tags.add(parse(s, m));\n      }\n      if(this.put == Put.ON_EACH) throwExp(m, \"cannot use put: ''on-each-node''  with an array value in nodeset \");\n      this.tag = new Condition(key, tags,Operand.IN, null,this);\n      return true;\n    }\n    return false;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#checkMapArray(List,Map[String,Object]).mjava","sourceNew":null,"sourceOld":"  private boolean checkMapArray(@SuppressWarnings({\"rawtypes\"})List l, Map<String, Object> m) {\n    @SuppressWarnings({\"rawtypes\"})\n    List<Map> maps = null;\n    for (Object o : l) {\n      if (o instanceof Map) {\n        if (maps == null) maps = new ArrayList<>();\n        maps.add((Map) o);\n      }\n    }\n    String key = null;\n    if (maps != null) {\n      if (maps.size() != l.size()) throwExp(m, \"all elements of nodeset must be Objects\");\n      List<Condition> tags = new ArrayList<>(maps.size());\n      for (@SuppressWarnings({\"rawtypes\"})Map map : maps) {\n        String s = validateObjectInNodeset(m, map);\n        if(key == null) key = s;\n        if(!Objects.equals(key, s)){\n          throwExp(m, \"all element must have same key\");\n        }\n        tags.add(parse(s, m));\n      }\n      if(this.put == Put.ON_EACH) throwExp(m, \"cannot use put: ''on-each-node''  with an array value in nodeset \");\n      this.tag = new Condition(key, tags,Operand.IN, null,this);\n      return true;\n    }\n    return false;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a7194afdfe9b45ca331c1cd5001cd9766688688b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["527adea7ce767368d7317339023e18e39702132e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"527adea7ce767368d7317339023e18e39702132e":["a7194afdfe9b45ca331c1cd5001cd9766688688b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"a7194afdfe9b45ca331c1cd5001cd9766688688b":["527adea7ce767368d7317339023e18e39702132e"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a7194afdfe9b45ca331c1cd5001cd9766688688b"],"527adea7ce767368d7317339023e18e39702132e":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}