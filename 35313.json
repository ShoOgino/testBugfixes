{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KolmogorovSmirnovEvaluator#evaluate(Tuple).mjava","commits":[{"id":"40f06aec8ac912d126c71c7e9d6065ed70aa9c65","date":1501530021,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KolmogorovSmirnovEvaluator#evaluate(Tuple).mjava","pathOld":"/dev/null","sourceNew":"  public Tuple evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator se1 = subEvaluators.get(0);\n    StreamEvaluator se2 = subEvaluators.get(1);\n\n    KolmogorovSmirnovTest ks = new KolmogorovSmirnovTest();\n    List<Number> sample = (List<Number>)se2.evaluate(tuple);\n    double[] data = new double[sample.size()];\n\n    for(int i=0; i<data.length; i++) {\n      data[i] = sample.get(i).doubleValue();\n    }\n\n    Object o = se1.evaluate(tuple);\n\n    if(o instanceof RealDistribution) {\n      RealDistribution realDistribution = (RealDistribution)o;\n      double d = ks.kolmogorovSmirnovStatistic(realDistribution, data);\n      double p = ks.kolmogorovSmirnovTest(realDistribution, data);\n\n\n      Map m = new HashMap();\n      m.put(\"p-value\", p);\n      m.put(\"d-statistic\", d);\n      return new Tuple(m);\n    } else {\n      List<Number> sample2 = (List<Number>)o;\n      double[] data2 = new double[sample2.size()];\n      for(int i=0; i<data2.length; i++) {\n        data2[i] = sample2.get(i).doubleValue();\n      }\n\n      double d = ks.kolmogorovSmirnovStatistic(data, data2);\n      //double p = ks.(data, data2);\n      Map m = new HashMap();\n      //m.put(\"p-value\", p);\n      m.put(\"d-statistic\", d);\n      return new Tuple(m);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KolmogorovSmirnovEvaluator#evaluate(Tuple).mjava","pathOld":"/dev/null","sourceNew":"  public Tuple evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator se1 = subEvaluators.get(0);\n    StreamEvaluator se2 = subEvaluators.get(1);\n\n    KolmogorovSmirnovTest ks = new KolmogorovSmirnovTest();\n    List<Number> sample = (List<Number>)se2.evaluate(tuple);\n    double[] data = new double[sample.size()];\n\n    for(int i=0; i<data.length; i++) {\n      data[i] = sample.get(i).doubleValue();\n    }\n\n    Object o = se1.evaluate(tuple);\n\n    if(o instanceof RealDistribution) {\n      RealDistribution realDistribution = (RealDistribution)o;\n      double d = ks.kolmogorovSmirnovStatistic(realDistribution, data);\n      double p = ks.kolmogorovSmirnovTest(realDistribution, data);\n\n\n      Map m = new HashMap();\n      m.put(\"p-value\", p);\n      m.put(\"d-statistic\", d);\n      return new Tuple(m);\n    } else {\n      List<Number> sample2 = (List<Number>)o;\n      double[] data2 = new double[sample2.size()];\n      for(int i=0; i<data2.length; i++) {\n        data2[i] = sample2.get(i).doubleValue();\n      }\n\n      double d = ks.kolmogorovSmirnovStatistic(data, data2);\n      //double p = ks.(data, data2);\n      Map m = new HashMap();\n      //m.put(\"p-value\", p);\n      m.put(\"d-statistic\", d);\n      return new Tuple(m);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1e7de64990e3928b90142a52fb92eeff556475","date":1503713257,"type":4,"author":"Dennis Gove","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KolmogorovSmirnovEvaluator#evaluate(Tuple).mjava","sourceNew":null,"sourceOld":"  public Tuple evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator se1 = subEvaluators.get(0);\n    StreamEvaluator se2 = subEvaluators.get(1);\n\n    KolmogorovSmirnovTest ks = new KolmogorovSmirnovTest();\n    List<Number> sample = (List<Number>)se2.evaluate(tuple);\n    double[] data = new double[sample.size()];\n\n    for(int i=0; i<data.length; i++) {\n      data[i] = sample.get(i).doubleValue();\n    }\n\n    Object o = se1.evaluate(tuple);\n\n    if(o instanceof RealDistribution) {\n      RealDistribution realDistribution = (RealDistribution)o;\n      double d = ks.kolmogorovSmirnovStatistic(realDistribution, data);\n      double p = ks.kolmogorovSmirnovTest(realDistribution, data);\n\n\n      Map m = new HashMap();\n      m.put(\"p-value\", p);\n      m.put(\"d-statistic\", d);\n      return new Tuple(m);\n    } else {\n      List<Number> sample2 = (List<Number>)o;\n      double[] data2 = new double[sample2.size()];\n      for(int i=0; i<data2.length; i++) {\n        data2[i] = sample2.get(i).doubleValue();\n      }\n\n      double d = ks.kolmogorovSmirnovStatistic(data, data2);\n      //double p = ks.(data, data2);\n      Map m = new HashMap();\n      //m.put(\"p-value\", p);\n      m.put(\"d-statistic\", d);\n      return new Tuple(m);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45c28dbb559366e1f4ef8077346552bfb3f7ecf6","date":1503738439,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KolmogorovSmirnovEvaluator#evaluate(Tuple).mjava","sourceNew":null,"sourceOld":"  public Tuple evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator se1 = subEvaluators.get(0);\n    StreamEvaluator se2 = subEvaluators.get(1);\n\n    KolmogorovSmirnovTest ks = new KolmogorovSmirnovTest();\n    List<Number> sample = (List<Number>)se2.evaluate(tuple);\n    double[] data = new double[sample.size()];\n\n    for(int i=0; i<data.length; i++) {\n      data[i] = sample.get(i).doubleValue();\n    }\n\n    Object o = se1.evaluate(tuple);\n\n    if(o instanceof RealDistribution) {\n      RealDistribution realDistribution = (RealDistribution)o;\n      double d = ks.kolmogorovSmirnovStatistic(realDistribution, data);\n      double p = ks.kolmogorovSmirnovTest(realDistribution, data);\n\n\n      Map m = new HashMap();\n      m.put(\"p-value\", p);\n      m.put(\"d-statistic\", d);\n      return new Tuple(m);\n    } else {\n      List<Number> sample2 = (List<Number>)o;\n      double[] data2 = new double[sample2.size()];\n      for(int i=0; i<data2.length; i++) {\n        data2[i] = sample2.get(i).doubleValue();\n      }\n\n      double d = ks.kolmogorovSmirnovStatistic(data, data2);\n      //double p = ks.(data, data2);\n      Map m = new HashMap();\n      //m.put(\"p-value\", p);\n      m.put(\"d-statistic\", d);\n      return new Tuple(m);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/KolmogorovSmirnovEvaluator#evaluate(Tuple).mjava","sourceNew":null,"sourceOld":"  public Tuple evaluate(Tuple tuple) throws IOException {\n\n    StreamEvaluator se1 = subEvaluators.get(0);\n    StreamEvaluator se2 = subEvaluators.get(1);\n\n    KolmogorovSmirnovTest ks = new KolmogorovSmirnovTest();\n    List<Number> sample = (List<Number>)se2.evaluate(tuple);\n    double[] data = new double[sample.size()];\n\n    for(int i=0; i<data.length; i++) {\n      data[i] = sample.get(i).doubleValue();\n    }\n\n    Object o = se1.evaluate(tuple);\n\n    if(o instanceof RealDistribution) {\n      RealDistribution realDistribution = (RealDistribution)o;\n      double d = ks.kolmogorovSmirnovStatistic(realDistribution, data);\n      double p = ks.kolmogorovSmirnovTest(realDistribution, data);\n\n\n      Map m = new HashMap();\n      m.put(\"p-value\", p);\n      m.put(\"d-statistic\", d);\n      return new Tuple(m);\n    } else {\n      List<Number> sample2 = (List<Number>)o;\n      double[] data2 = new double[sample2.size()];\n      for(int i=0; i<data2.length; i++) {\n        data2[i] = sample2.get(i).doubleValue();\n      }\n\n      double d = ks.kolmogorovSmirnovStatistic(data, data2);\n      //double p = ks.(data, data2);\n      Map m = new HashMap();\n      //m.put(\"p-value\", p);\n      m.put(\"d-statistic\", d);\n      return new Tuple(m);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","40f06aec8ac912d126c71c7e9d6065ed70aa9c65"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["40f06aec8ac912d126c71c7e9d6065ed70aa9c65","ba1e7de64990e3928b90142a52fb92eeff556475"],"ba1e7de64990e3928b90142a52fb92eeff556475":["40f06aec8ac912d126c71c7e9d6065ed70aa9c65"],"40f06aec8ac912d126c71c7e9d6065ed70aa9c65":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"]},"commit2Childs":{"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","40f06aec8ac912d126c71c7e9d6065ed70aa9c65"],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ba1e7de64990e3928b90142a52fb92eeff556475":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"40f06aec8ac912d126c71c7e9d6065ed70aa9c65":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","45c28dbb559366e1f4ef8077346552bfb3f7ecf6","ba1e7de64990e3928b90142a52fb92eeff556475"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}