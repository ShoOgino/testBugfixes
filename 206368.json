{"path":"lucene/core/src/java/org/apache/lucene/util/fst/Util.TopNSearcher#addStartPaths(FST.Arc[T],T,boolean,IntsRefBuilder,float,CharSequence,int).mjava","commits":[{"id":"902a92b60648a8925bfd9bb53a78669cd2ea98fd","date":1487797466,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Util.TopNSearcher#addStartPaths(FST.Arc[T],T,boolean,IntsRefBuilder,float,CharSequence,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/Util.TopNSearcher#addStartPaths(FST.Arc[T],T,boolean,IntsRefBuilder,float,CharSequence).mjava","sourceNew":"    /** Adds all leaving arcs, including 'finished' arc, if\n     *  the node is final, from this node into the queue.  */\n    public void addStartPaths(FST.Arc<T> node, T startOutput, boolean allowEmptyString, IntsRefBuilder input,\n                              float boost, CharSequence context, int payload) throws IOException {\n\n      // De-dup NO_OUTPUT since it must be a singleton:\n      if (startOutput.equals(fst.outputs.getNoOutput())) {\n        startOutput = fst.outputs.getNoOutput();\n      }\n\n      FSTPath<T> path = new FSTPath<>(startOutput, node, input, boost, context, payload);\n      fst.readFirstTargetArc(node, path.arc, bytesReader);\n\n      // Bootstrap: find the min starting arc\n      while (true) {\n        if (allowEmptyString || path.arc.label != FST.END_LABEL) {\n          addIfCompetitive(path);\n        }\n        if (path.arc.isLast()) {\n          break;\n        }\n        fst.readNextArc(path.arc, bytesReader);\n      }\n    }\n\n","sourceOld":"    /** Adds all leaving arcs, including 'finished' arc, if\n     *  the node is final, from this node into the queue.  */\n    public void addStartPaths(FST.Arc<T> node, T startOutput, boolean allowEmptyString, IntsRefBuilder input,\n                              float boost, CharSequence context) throws IOException {\n\n      // De-dup NO_OUTPUT since it must be a singleton:\n      if (startOutput.equals(fst.outputs.getNoOutput())) {\n        startOutput = fst.outputs.getNoOutput();\n      }\n\n      FSTPath<T> path = new FSTPath<>(startOutput, node, input, boost, context);\n      fst.readFirstTargetArc(node, path.arc, bytesReader);\n\n      //System.out.println(\"add start paths\");\n\n      // Bootstrap: find the min starting arc\n      while (true) {\n        if (allowEmptyString || path.arc.label != FST.END_LABEL) {\n          addIfCompetitive(path);\n        }\n        if (path.arc.isLast()) {\n          break;\n        }\n        fst.readNextArc(path.arc, bytesReader);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54204c8a3ca26aeafd273139fc29baf70d0f6786","date":1564170395,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Util.TopNSearcher#addStartPaths(FST.Arc[T],T,boolean,IntsRefBuilder,float,CharSequence,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/Util.TopNSearcher#addStartPaths(FST.Arc[T],T,boolean,IntsRefBuilder,float,CharSequence,int).mjava","sourceNew":"    /** Adds all leaving arcs, including 'finished' arc, if\n     *  the node is final, from this node into the queue.  */\n    public void addStartPaths(FST.Arc<T> node, T startOutput, boolean allowEmptyString, IntsRefBuilder input,\n                              float boost, CharSequence context, int payload) throws IOException {\n\n      // De-dup NO_OUTPUT since it must be a singleton:\n      if (startOutput.equals(fst.outputs.getNoOutput())) {\n        startOutput = fst.outputs.getNoOutput();\n      }\n\n      FSTPath<T> path = new FSTPath<>(startOutput, node, input, boost, context, payload);\n      fst.readFirstTargetArc(node, path.arc, bytesReader);\n\n      // Bootstrap: find the min starting arc\n      while (true) {\n        if (allowEmptyString || path.arc.label() != FST.END_LABEL) {\n          addIfCompetitive(path);\n        }\n        if (path.arc.isLast()) {\n          break;\n        }\n        fst.readNextArc(path.arc, bytesReader);\n      }\n    }\n\n","sourceOld":"    /** Adds all leaving arcs, including 'finished' arc, if\n     *  the node is final, from this node into the queue.  */\n    public void addStartPaths(FST.Arc<T> node, T startOutput, boolean allowEmptyString, IntsRefBuilder input,\n                              float boost, CharSequence context, int payload) throws IOException {\n\n      // De-dup NO_OUTPUT since it must be a singleton:\n      if (startOutput.equals(fst.outputs.getNoOutput())) {\n        startOutput = fst.outputs.getNoOutput();\n      }\n\n      FSTPath<T> path = new FSTPath<>(startOutput, node, input, boost, context, payload);\n      fst.readFirstTargetArc(node, path.arc, bytesReader);\n\n      // Bootstrap: find the min starting arc\n      while (true) {\n        if (allowEmptyString || path.arc.label != FST.END_LABEL) {\n          addIfCompetitive(path);\n        }\n        if (path.arc.isLast()) {\n          break;\n        }\n        fst.readNextArc(path.arc, bytesReader);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Util.TopNSearcher#addStartPaths(FST.Arc[T],T,boolean,IntsRefBuilder,float,CharSequence,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/Util.TopNSearcher#addStartPaths(FST.Arc[T],T,boolean,IntsRefBuilder,float,CharSequence,int).mjava","sourceNew":"    /** Adds all leaving arcs, including 'finished' arc, if\n     *  the node is final, from this node into the queue.  */\n    public void addStartPaths(FST.Arc<T> node, T startOutput, boolean allowEmptyString, IntsRefBuilder input,\n                              float boost, CharSequence context, int payload) throws IOException {\n\n      // De-dup NO_OUTPUT since it must be a singleton:\n      if (startOutput.equals(fst.outputs.getNoOutput())) {\n        startOutput = fst.outputs.getNoOutput();\n      }\n\n      FSTPath<T> path = new FSTPath<>(startOutput, node, input, boost, context, payload);\n      fst.readFirstTargetArc(node, path.arc, bytesReader);\n\n      // Bootstrap: find the min starting arc\n      while (true) {\n        if (allowEmptyString || path.arc.label() != FST.END_LABEL) {\n          addIfCompetitive(path);\n        }\n        if (path.arc.isLast()) {\n          break;\n        }\n        fst.readNextArc(path.arc, bytesReader);\n      }\n    }\n\n","sourceOld":"    /** Adds all leaving arcs, including 'finished' arc, if\n     *  the node is final, from this node into the queue.  */\n    public void addStartPaths(FST.Arc<T> node, T startOutput, boolean allowEmptyString, IntsRefBuilder input,\n                              float boost, CharSequence context, int payload) throws IOException {\n\n      // De-dup NO_OUTPUT since it must be a singleton:\n      if (startOutput.equals(fst.outputs.getNoOutput())) {\n        startOutput = fst.outputs.getNoOutput();\n      }\n\n      FSTPath<T> path = new FSTPath<>(startOutput, node, input, boost, context, payload);\n      fst.readFirstTargetArc(node, path.arc, bytesReader);\n\n      // Bootstrap: find the min starting arc\n      while (true) {\n        if (allowEmptyString || path.arc.label != FST.END_LABEL) {\n          addIfCompetitive(path);\n        }\n        if (path.arc.isLast()) {\n          break;\n        }\n        fst.readNextArc(path.arc, bytesReader);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["902a92b60648a8925bfd9bb53a78669cd2ea98fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"902a92b60648a8925bfd9bb53a78669cd2ea98fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8061ddd97f3352007d927dae445884a6f3d857b":["902a92b60648a8925bfd9bb53a78669cd2ea98fd","54204c8a3ca26aeafd273139fc29baf70d0f6786"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["54204c8a3ca26aeafd273139fc29baf70d0f6786"]},"commit2Childs":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["902a92b60648a8925bfd9bb53a78669cd2ea98fd"],"902a92b60648a8925bfd9bb53a78669cd2ea98fd":["54204c8a3ca26aeafd273139fc29baf70d0f6786","f8061ddd97f3352007d927dae445884a6f3d857b"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}