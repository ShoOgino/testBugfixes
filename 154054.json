{"path":"solr/core/src/test/org/apache/solr/schema/DateRangeFieldTest#test().mjava","commits":[{"id":"786d9c8e83bf53721b9f883a9a85aa365020430f","date":1401933927,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DateRangeFieldTest#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() {\n    assertU(adoc(\"id\", \"0\", \"dateRange\", \"[* TO *]\"));\n    assertU(adoc(\"id\", \"1\", \"dateRange\", \"2014-05-21T12:00:00.000Z\"));\n    assertU(adoc(\"id\", \"2\", \"dateRange\", \"[2000 TO 2014-05-21]\"));\n    assertU(commit());\n\n    //ensure stored value is the same (not toString of Shape)\n    assertQ(req(\"q\", \"id:1\", \"fl\", \"dateRange\"), \"//result/doc/str[.='2014-05-21T12:00:00.000Z']\");\n\n    String[] commonParams = {\"q\", \"{!field f=dateRange op=$op v=$qq}\", \"sort\", \"id asc\"};\n    assertQ(req(commonParams, \"qq\", \"[* TO *]\"), xpathMatches(0, 1, 2));\n    assertQ(req(commonParams, \"qq\", \"2012\"), xpathMatches(0, 2));\n    assertQ(req(commonParams, \"qq\", \"2013\", \"op\", \"Contains\"), xpathMatches(0, 2));\n    assertQ(req(commonParams, \"qq\", \"2014\", \"op\", \"Contains\"), xpathMatches(0));\n    assertQ(req(commonParams, \"qq\", \"[1999 TO 2001]\", \"op\", \"IsWithin\"), xpathMatches());\n    assertQ(req(commonParams, \"qq\", \"2014-05\", \"op\", \"IsWithin\"), xpathMatches(1));\n\n    //show without local-params\n    assertQ(req(\"q\", \"dateRange:\\\"2014-05-21T12:00:00.000Z\\\"\"), xpathMatches(0, 1, 2));\n    assertQ(req(\"q\", \"dateRange:[1999 TO 2001]\"), xpathMatches(0, 2));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8cc041a5200818c3e7a1b3b4feb0f649c595f8ef","date":1407258295,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DateRangeFieldTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DateRangeFieldTest#test().mjava","sourceNew":"  public void test() {\n    assertU(delQ(\"*:*\"));\n    assertU(adoc(\"id\", \"0\", \"dateRange\", \"[* TO *]\"));\n    assertU(adoc(\"id\", \"1\", \"dateRange\", \"2014-05-21T12:00:00.000Z\"));\n    assertU(adoc(\"id\", \"2\", \"dateRange\", \"[2000 TO 2014-05-21]\"));\n    assertU(commit());\n\n    //ensure stored value is the same (not toString of Shape)\n    assertQ(req(\"q\", \"id:1\", \"fl\", \"dateRange\"), \"//result/doc/arr[@name='dateRange']/str[.='2014-05-21T12:00:00.000Z']\");\n\n    String[] commonParams = {\"q\", \"{!field f=dateRange op=$op v=$qq}\", \"sort\", \"id asc\"};\n    assertQ(req(commonParams, \"qq\", \"[* TO *]\"), xpathMatches(0, 1, 2));\n    assertQ(req(commonParams, \"qq\", \"2012\"), xpathMatches(0, 2));\n    assertQ(req(commonParams, \"qq\", \"2013\", \"op\", \"Contains\"), xpathMatches(0, 2));\n    assertQ(req(commonParams, \"qq\", \"2014\", \"op\", \"Contains\"), xpathMatches(0));\n    assertQ(req(commonParams, \"qq\", \"[1999 TO 2001]\", \"op\", \"IsWithin\"), xpathMatches());\n    assertQ(req(commonParams, \"qq\", \"2014-05\", \"op\", \"IsWithin\"), xpathMatches(1));\n\n    //show without local-params\n    assertQ(req(\"q\", \"dateRange:\\\"2014-05-21T12:00:00.000Z\\\"\"), xpathMatches(0, 1, 2));\n    assertQ(req(\"q\", \"dateRange:[1999 TO 2001]\"), xpathMatches(0, 2));\n  }\n\n","sourceOld":"  public void test() {\n    assertU(adoc(\"id\", \"0\", \"dateRange\", \"[* TO *]\"));\n    assertU(adoc(\"id\", \"1\", \"dateRange\", \"2014-05-21T12:00:00.000Z\"));\n    assertU(adoc(\"id\", \"2\", \"dateRange\", \"[2000 TO 2014-05-21]\"));\n    assertU(commit());\n\n    //ensure stored value is the same (not toString of Shape)\n    assertQ(req(\"q\", \"id:1\", \"fl\", \"dateRange\"), \"//result/doc/str[.='2014-05-21T12:00:00.000Z']\");\n\n    String[] commonParams = {\"q\", \"{!field f=dateRange op=$op v=$qq}\", \"sort\", \"id asc\"};\n    assertQ(req(commonParams, \"qq\", \"[* TO *]\"), xpathMatches(0, 1, 2));\n    assertQ(req(commonParams, \"qq\", \"2012\"), xpathMatches(0, 2));\n    assertQ(req(commonParams, \"qq\", \"2013\", \"op\", \"Contains\"), xpathMatches(0, 2));\n    assertQ(req(commonParams, \"qq\", \"2014\", \"op\", \"Contains\"), xpathMatches(0));\n    assertQ(req(commonParams, \"qq\", \"[1999 TO 2001]\", \"op\", \"IsWithin\"), xpathMatches());\n    assertQ(req(commonParams, \"qq\", \"2014-05\", \"op\", \"IsWithin\"), xpathMatches(1));\n\n    //show without local-params\n    assertQ(req(\"q\", \"dateRange:\\\"2014-05-21T12:00:00.000Z\\\"\"), xpathMatches(0, 1, 2));\n    assertQ(req(\"q\", \"dateRange:[1999 TO 2001]\"), xpathMatches(0, 2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03298305b51c91a6b0221a7b134ba26578934d39","date":1418532926,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DateRangeFieldTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DateRangeFieldTest#test().mjava","sourceNew":"  public void test() {\n    assertU(delQ(\"*:*\"));\n    assertU(adoc(\"id\", \"0\", \"dateRange\", \"[* TO *]\"));\n    assertU(adoc(\"id\", \"1\", \"dateRange\", \"2014-05-21T12:00:00.000Z\"));\n    assertU(adoc(\"id\", \"2\", \"dateRange\", \"[2000 TO 2014-05-21]\"));\n    assertU(adoc(\"id\", \"3\", \"dateRange\", \"2020-05-21T12:00:00.000Z/DAY\"));//DateMath syntax\n    assertU(commit());\n\n    //ensure stored value resolves datemath\n    assertQ(req(\"q\", \"id:1\", \"fl\", \"dateRange\"), \"//result/doc/arr[@name='dateRange']/str[.='2014-05-21T12:00:00Z']\");//no 000 ms\n    assertQ(req(\"q\", \"id:2\", \"fl\", \"dateRange\"), \"//result/doc/arr[@name='dateRange']/str[.='[2000 TO 2014-05-21]']\");//a range; same\n    assertQ(req(\"q\", \"id:3\", \"fl\", \"dateRange\"), \"//result/doc/arr[@name='dateRange']/str[.='2020-05-21T00:00:00Z']\");//resolve datemath\n\n    String[] commonParams = {\"q\", \"{!field f=dateRange op=$op v=$qq}\", \"sort\", \"id asc\"};\n    assertQ(req(commonParams, \"qq\", \"[* TO *]\"), xpathMatches(0, 1, 2, 3));\n    assertQ(req(commonParams, \"qq\", \"2012\"), xpathMatches(0, 2));\n    assertQ(req(commonParams, \"qq\", \"2013\", \"op\", \"Contains\"), xpathMatches(0, 2));\n    assertQ(req(commonParams, \"qq\", \"2014\", \"op\", \"Contains\"), xpathMatches(0));\n    assertQ(req(commonParams, \"qq\", \"[1999 TO 2001]\", \"op\", \"IsWithin\"), xpathMatches());\n    assertQ(req(commonParams, \"qq\", \"2014-05\", \"op\", \"IsWithin\"), xpathMatches(1));\n\n    assertQ(req(\"q\", \"dateRange:[1998 TO 2000}\"), xpathMatches(0));//exclusive end, so we barely miss one doc\n\n    //show without local-params\n    assertQ(req(\"q\", \"dateRange:\\\"2014-05-21T12:00:00.000Z\\\"\"), xpathMatches(0, 1, 2));\n    assertQ(req(\"q\", \"dateRange:[1999 TO 2001]\"), xpathMatches(0, 2));\n  }\n\n","sourceOld":"  public void test() {\n    assertU(delQ(\"*:*\"));\n    assertU(adoc(\"id\", \"0\", \"dateRange\", \"[* TO *]\"));\n    assertU(adoc(\"id\", \"1\", \"dateRange\", \"2014-05-21T12:00:00.000Z\"));\n    assertU(adoc(\"id\", \"2\", \"dateRange\", \"[2000 TO 2014-05-21]\"));\n    assertU(commit());\n\n    //ensure stored value is the same (not toString of Shape)\n    assertQ(req(\"q\", \"id:1\", \"fl\", \"dateRange\"), \"//result/doc/arr[@name='dateRange']/str[.='2014-05-21T12:00:00.000Z']\");\n\n    String[] commonParams = {\"q\", \"{!field f=dateRange op=$op v=$qq}\", \"sort\", \"id asc\"};\n    assertQ(req(commonParams, \"qq\", \"[* TO *]\"), xpathMatches(0, 1, 2));\n    assertQ(req(commonParams, \"qq\", \"2012\"), xpathMatches(0, 2));\n    assertQ(req(commonParams, \"qq\", \"2013\", \"op\", \"Contains\"), xpathMatches(0, 2));\n    assertQ(req(commonParams, \"qq\", \"2014\", \"op\", \"Contains\"), xpathMatches(0));\n    assertQ(req(commonParams, \"qq\", \"[1999 TO 2001]\", \"op\", \"IsWithin\"), xpathMatches());\n    assertQ(req(commonParams, \"qq\", \"2014-05\", \"op\", \"IsWithin\"), xpathMatches(1));\n\n    //show without local-params\n    assertQ(req(\"q\", \"dateRange:\\\"2014-05-21T12:00:00.000Z\\\"\"), xpathMatches(0, 1, 2));\n    assertQ(req(\"q\", \"dateRange:[1999 TO 2001]\"), xpathMatches(0, 2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6023012e4b24619ad41b644a479b6ad4ad2a90c8","date":1600707428,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DateRangeFieldTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DateRangeFieldTest#test().mjava","sourceNew":"  public void test() {\n    assertU(delQ(\"*:*\"));\n    assertU(adoc(\"id\", \"0\", \"dateRange\", \"[* TO *]\"));\n    assertU(adoc(\"id\", \"1\", \"dateRange\", \"2014-05-21T12:00:00.000Z\"));\n    assertU(adoc(\"id\", \"2\", \"dateRange\", \"[2000 TO 2014-05-21]\"));\n    assertU(adoc(\"id\", \"3\", \"dateRange\", \"2020-05-21T12:00:00.000Z/DAY\"));//DateMath syntax\n    assertU(commit());\n\n\n    //ensure stored value resolves datemath\n    assertQ(req(\"q\", \"id:1\", \"fl\", \"dateRange\"), \"//result/doc/arr[@name='dateRange']/str[.='2014-05-21T12:00:00Z']\");//no 000 ms\n    assertQ(req(\"q\", \"id:2\", \"fl\", \"dateRange\"), \"//result/doc/arr[@name='dateRange']/str[.='[2000 TO 2014-05-21]']\");//a range; same\n    assertQ(req(\"q\", \"id:3\", \"fl\", \"dateRange\"), \"//result/doc/arr[@name='dateRange']/str[.='2020-05-21T00:00:00Z']\");//resolve datemath\n\n    String[] commonParams = {\"q\", \"{!field f=dateRange op=$op v=$qq}\", \"sort\", \"id asc\"};\n    assertQ(req(commonParams, \"qq\", \"[* TO *]\"), xpathMatches(0, 1, 2, 3));\n    assertQ(req(commonParams, \"qq\", \"2012\"), xpathMatches(0, 2));\n    assertQ(req(commonParams, \"qq\", \"2013\", \"op\", \"Contains\"), xpathMatches(0, 2));\n    assertQ(req(commonParams, \"qq\", \"2014\", \"op\", \"Contains\"), xpathMatches(0));\n    assertQ(req(commonParams, \"qq\", \"[1999 TO 2001]\", \"op\", \"IsWithin\"), xpathMatches());\n    assertQ(req(commonParams, \"qq\", \"2014-05\", \"op\", \"IsWithin\"), xpathMatches(1));\n\n    assertQ(req(\"q\", \"dateRange:[1998 TO 2000}\"), xpathMatches(0));//exclusive end, so we barely miss one doc\n\n\n    //show without local-params\n    assertQ(req(\"q\", \"dateRange:[* TO *]\"), xpathMatches(0, 1, 2, 3));\n    assertQ(req(\"q\", \"dateRange:*\"), xpathMatches(0, 1, 2, 3));\n    assertQ(req(\"q\", \"dateRange:\\\"2014-05-21T12:00:00.000Z\\\"\"), xpathMatches(0, 1, 2));\n    assertQ(req(\"q\", \"dateRange:[1999 TO 2001]\"), xpathMatches(0, 2));\n  }\n\n","sourceOld":"  public void test() {\n    assertU(delQ(\"*:*\"));\n    assertU(adoc(\"id\", \"0\", \"dateRange\", \"[* TO *]\"));\n    assertU(adoc(\"id\", \"1\", \"dateRange\", \"2014-05-21T12:00:00.000Z\"));\n    assertU(adoc(\"id\", \"2\", \"dateRange\", \"[2000 TO 2014-05-21]\"));\n    assertU(adoc(\"id\", \"3\", \"dateRange\", \"2020-05-21T12:00:00.000Z/DAY\"));//DateMath syntax\n    assertU(commit());\n\n    //ensure stored value resolves datemath\n    assertQ(req(\"q\", \"id:1\", \"fl\", \"dateRange\"), \"//result/doc/arr[@name='dateRange']/str[.='2014-05-21T12:00:00Z']\");//no 000 ms\n    assertQ(req(\"q\", \"id:2\", \"fl\", \"dateRange\"), \"//result/doc/arr[@name='dateRange']/str[.='[2000 TO 2014-05-21]']\");//a range; same\n    assertQ(req(\"q\", \"id:3\", \"fl\", \"dateRange\"), \"//result/doc/arr[@name='dateRange']/str[.='2020-05-21T00:00:00Z']\");//resolve datemath\n\n    String[] commonParams = {\"q\", \"{!field f=dateRange op=$op v=$qq}\", \"sort\", \"id asc\"};\n    assertQ(req(commonParams, \"qq\", \"[* TO *]\"), xpathMatches(0, 1, 2, 3));\n    assertQ(req(commonParams, \"qq\", \"2012\"), xpathMatches(0, 2));\n    assertQ(req(commonParams, \"qq\", \"2013\", \"op\", \"Contains\"), xpathMatches(0, 2));\n    assertQ(req(commonParams, \"qq\", \"2014\", \"op\", \"Contains\"), xpathMatches(0));\n    assertQ(req(commonParams, \"qq\", \"[1999 TO 2001]\", \"op\", \"IsWithin\"), xpathMatches());\n    assertQ(req(commonParams, \"qq\", \"2014-05\", \"op\", \"IsWithin\"), xpathMatches(1));\n\n    assertQ(req(\"q\", \"dateRange:[1998 TO 2000}\"), xpathMatches(0));//exclusive end, so we barely miss one doc\n\n    //show without local-params\n    assertQ(req(\"q\", \"dateRange:\\\"2014-05-21T12:00:00.000Z\\\"\"), xpathMatches(0, 1, 2));\n    assertQ(req(\"q\", \"dateRange:[1999 TO 2001]\"), xpathMatches(0, 2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6023012e4b24619ad41b644a479b6ad4ad2a90c8":["03298305b51c91a6b0221a7b134ba26578934d39"],"03298305b51c91a6b0221a7b134ba26578934d39":["8cc041a5200818c3e7a1b3b4feb0f649c595f8ef"],"8cc041a5200818c3e7a1b3b4feb0f649c595f8ef":["786d9c8e83bf53721b9f883a9a85aa365020430f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"786d9c8e83bf53721b9f883a9a85aa365020430f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6023012e4b24619ad41b644a479b6ad4ad2a90c8"]},"commit2Childs":{"6023012e4b24619ad41b644a479b6ad4ad2a90c8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"03298305b51c91a6b0221a7b134ba26578934d39":["6023012e4b24619ad41b644a479b6ad4ad2a90c8"],"8cc041a5200818c3e7a1b3b4feb0f649c595f8ef":["03298305b51c91a6b0221a7b134ba26578934d39"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["786d9c8e83bf53721b9f883a9a85aa365020430f"],"786d9c8e83bf53721b9f883a9a85aa365020430f":["8cc041a5200818c3e7a1b3b4feb0f649c595f8ef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}