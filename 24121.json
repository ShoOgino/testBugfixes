{"path":"contrib/gdata-server/src/core/src/java/org/apache/lucene/gdata/search/index/GDataIndexWriter#GDataIndexWriter(Directory,boolean,IndexSchema).mjava","commits":[{"id":"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe","date":1166036663,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/src/java/org/apache/lucene/gdata/search/index/GDataIndexWriter#GDataIndexWriter(Directory,boolean,IndexSchema).mjava","pathOld":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/search/index/GDataIndexWriter#GDataIndexWriter(Directory,boolean,IndexSchema).mjava","sourceNew":"    /**\n     * Creates and configures a new GdataIndexWriter\n     * \n     * @param arg0 -\n     *            the index directory\n     * @param arg1 -\n     *            create index\n     * @param arg2 -\n     *            the index schema configuration including all parameter to set\n     *            up the index writer\n     * @throws IOException\n     *             -if the directory cannot be read/written to, or if it does\n     *             not exist, and <code>create</code> is <code>false</code>\n     */\n    protected GDataIndexWriter(Directory arg0, boolean arg1, IndexSchema arg2)\n            throws IOException {\n        /*\n         * Use Schema Analyzer rather than service analyzer. \n         * Schema analyzer returns either the service analyzer or a per field analyzer if configured.\n         */\n        super(arg0, (arg2 == null ? new StandardAnalyzer() : arg2.getSchemaAnalyzer()), arg1);\n        if (arg2 == null) {\n            /*\n             * if no schema throw exception - schema is mandatory for the index writer.\n             */\n            try {\n                this.close();\n            } catch (IOException e) {\n                //\n            }\n            throw new IllegalArgumentException(\"configuration must not be null\");\n\n        }\n        this.initialize(arg2);\n    }\n\n","sourceOld":"    /**\n     * Creates and configures a new GdataIndexWriter\n     * \n     * @param arg0 -\n     *            the index directory\n     * @param arg1 -\n     *            create index\n     * @param arg2 -\n     *            the index schema configuration including all parameter to set\n     *            up the index writer\n     * @throws IOException\n     *             -if the directory cannot be read/written to, or if it does\n     *             not exist, and <code>create</code> is <code>false</code>\n     */\n    protected GDataIndexWriter(Directory arg0, boolean arg1, IndexSchema arg2)\n            throws IOException {\n        /*\n         * Use Schema Analyzer rather than service analyzer. \n         * Schema analyzer returns either the service analyzer or a per field analyzer if configured.\n         */\n        super(arg0, (arg2 == null ? new StandardAnalyzer() : arg2.getSchemaAnalyzer()), arg1);\n        if (arg2 == null) {\n            /*\n             * if no schema throw exception - schema is mandatory for the index writer.\n             */\n            try {\n                this.close();\n            } catch (IOException e) {\n                //\n            }\n            throw new IllegalArgumentException(\"configuration must not be null\");\n\n        }\n        this.initialize(arg2);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe","date":1195519587,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/gdata-server/src/core/src/java/org/apache/lucene/gdata/search/index/GDataIndexWriter#GDataIndexWriter(Directory,boolean,IndexSchema).mjava","sourceNew":null,"sourceOld":"    /**\n     * Creates and configures a new GdataIndexWriter\n     * \n     * @param arg0 -\n     *            the index directory\n     * @param arg1 -\n     *            create index\n     * @param arg2 -\n     *            the index schema configuration including all parameter to set\n     *            up the index writer\n     * @throws IOException\n     *             -if the directory cannot be read/written to, or if it does\n     *             not exist, and <code>create</code> is <code>false</code>\n     */\n    protected GDataIndexWriter(Directory arg0, boolean arg1, IndexSchema arg2)\n            throws IOException {\n        /*\n         * Use Schema Analyzer rather than service analyzer. \n         * Schema analyzer returns either the service analyzer or a per field analyzer if configured.\n         */\n        super(arg0, (arg2 == null ? new StandardAnalyzer() : arg2.getSchemaAnalyzer()), arg1);\n        if (arg2 == null) {\n            /*\n             * if no schema throw exception - schema is mandatory for the index writer.\n             */\n            try {\n                this.close();\n            } catch (IOException e) {\n                //\n            }\n            throw new IllegalArgumentException(\"configuration must not be null\");\n\n        }\n        this.initialize(arg2);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["353a38bbb8d8067d74d6039986c7ce44c2f6cdbe"]},"commit2Childs":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["353a38bbb8d8067d74d6039986c7ce44c2f6cdbe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}