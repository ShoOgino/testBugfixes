{"path":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"531fe719c7218235a679452eb3d137bfd8fc6af1","date":1415191086,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n\n    setWt(req, \"json\");\n    String httpMethod = (String) req.getContext().get(\"httpMethod\");\n    Command command = new Command(req, rsp, httpMethod);\n    if(\"POST\".equals(httpMethod)){\n      if(configEditing_disabled) throw new SolrException(SolrException.ErrorCode.FORBIDDEN,\" solrconfig editing is not enabled\");\n      command.handlePOST();\n    }  else {\n      command.handleGET();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be214850f18c80408bcfafd463ec155ab0515aee","date":1423651203,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n\n    setWt(req, \"json\");\n    String httpMethod = (String) req.getContext().get(\"httpMethod\");\n    Command command = new Command(req, rsp, httpMethod);\n    if (\"POST\".equals(httpMethod)) {\n      if (configEditing_disabled)\n        throw new SolrException(SolrException.ErrorCode.FORBIDDEN, \" solrconfig editing is not enabled\");\n      command.handlePOST();\n    } else {\n      command.handleGET();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n\n    setWt(req, \"json\");\n    String httpMethod = (String) req.getContext().get(\"httpMethod\");\n    Command command = new Command(req, rsp, httpMethod);\n    if(\"POST\".equals(httpMethod)){\n      if(configEditing_disabled) throw new SolrException(SolrException.ErrorCode.FORBIDDEN,\" solrconfig editing is not enabled\");\n      command.handlePOST();\n    }  else {\n      command.handleGET();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5da69d834fe035a64a0edb3884749ba5f174edb8","date":1427420348,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n\n    setWt(req, \"json\");\n    String httpMethod = (String) req.getContext().get(\"httpMethod\");\n    Command command = new Command(req, rsp, httpMethod);\n    if (\"POST\".equals(httpMethod)) {\n      if (configEditing_disabled)\n        throw new SolrException(SolrException.ErrorCode.FORBIDDEN, \" solrconfig editing is not enabled\");\n      try {\n        command.handlePOST();\n      } finally {\n        RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n      }\n    } else {\n      command.handleGET();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n\n    setWt(req, \"json\");\n    String httpMethod = (String) req.getContext().get(\"httpMethod\");\n    Command command = new Command(req, rsp, httpMethod);\n    if (\"POST\".equals(httpMethod)) {\n      if (configEditing_disabled)\n        throw new SolrException(SolrException.ErrorCode.FORBIDDEN, \" solrconfig editing is not enabled\");\n      command.handlePOST();\n    } else {\n      command.handleGET();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n\n    setWt(req, \"json\");\n    String httpMethod = (String) req.getContext().get(\"httpMethod\");\n    Command command = new Command(req, rsp, httpMethod);\n    if (\"POST\".equals(httpMethod)) {\n      if (configEditing_disabled)\n        throw new SolrException(SolrException.ErrorCode.FORBIDDEN, \" solrconfig editing is not enabled\");\n      try {\n        command.handlePOST();\n      } finally {\n        RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n      }\n    } else {\n      command.handleGET();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n\n    setWt(req, \"json\");\n    String httpMethod = (String) req.getContext().get(\"httpMethod\");\n    Command command = new Command(req, rsp, httpMethod);\n    if (\"POST\".equals(httpMethod)) {\n      if (configEditing_disabled)\n        throw new SolrException(SolrException.ErrorCode.FORBIDDEN, \" solrconfig editing is not enabled\");\n      command.handlePOST();\n    } else {\n      command.handleGET();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1390137e395d2f07f9ba5b8c43d293befe84d563","date":1427947685,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n\n    setWt(req, CommonParams.JSON);\n    String httpMethod = (String) req.getContext().get(\"httpMethod\");\n    Command command = new Command(req, rsp, httpMethod);\n    if (\"POST\".equals(httpMethod)) {\n      if (configEditing_disabled)\n        throw new SolrException(SolrException.ErrorCode.FORBIDDEN, \" solrconfig editing is not enabled\");\n      try {\n        command.handlePOST();\n      } finally {\n        RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n      }\n    } else {\n      command.handleGET();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n\n    setWt(req, \"json\");\n    String httpMethod = (String) req.getContext().get(\"httpMethod\");\n    Command command = new Command(req, rsp, httpMethod);\n    if (\"POST\".equals(httpMethod)) {\n      if (configEditing_disabled)\n        throw new SolrException(SolrException.ErrorCode.FORBIDDEN, \" solrconfig editing is not enabled\");\n      try {\n        command.handlePOST();\n      } finally {\n        RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n      }\n    } else {\n      command.handleGET();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n\n    setWt(req, CommonParams.JSON);\n    String httpMethod = (String) req.getContext().get(\"httpMethod\");\n    Command command = new Command(req, rsp, httpMethod);\n    if (\"POST\".equals(httpMethod)) {\n      if (configEditing_disabled)\n        throw new SolrException(SolrException.ErrorCode.FORBIDDEN, \" solrconfig editing is not enabled\");\n      try {\n        command.handlePOST();\n      } finally {\n        RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n      }\n    } else {\n      command.handleGET();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n\n    setWt(req, \"json\");\n    String httpMethod = (String) req.getContext().get(\"httpMethod\");\n    Command command = new Command(req, rsp, httpMethod);\n    if (\"POST\".equals(httpMethod)) {\n      if (configEditing_disabled)\n        throw new SolrException(SolrException.ErrorCode.FORBIDDEN, \" solrconfig editing is not enabled\");\n      try {\n        command.handlePOST();\n      } finally {\n        RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n      }\n    } else {\n      command.handleGET();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6466e433d7f5218e77c8115ed28176855fc3c143","date":1436824910,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n\n    setWt(req, CommonParams.JSON);\n    String httpMethod = (String) req.getContext().get(\"httpMethod\");\n    Command command = new Command(req, rsp, httpMethod);\n    if (\"POST\".equals(httpMethod)) {\n      if (configEditing_disabled || isImmutableConfigSet) {\n        final String reason = configEditing_disabled ? \"due to \" + CONFIGSET_EDITING_DISABLED_ARG : \"because ConfigSet is immutable\";\n        throw new SolrException(SolrException.ErrorCode.FORBIDDEN, \" solrconfig editing is not enabled \" + reason);\n      }\n      try {\n        command.handlePOST();\n      } finally {\n        RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n      }\n    } else {\n      command.handleGET();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n\n    setWt(req, CommonParams.JSON);\n    String httpMethod = (String) req.getContext().get(\"httpMethod\");\n    Command command = new Command(req, rsp, httpMethod);\n    if (\"POST\".equals(httpMethod)) {\n      if (configEditing_disabled)\n        throw new SolrException(SolrException.ErrorCode.FORBIDDEN, \" solrconfig editing is not enabled\");\n      try {\n        command.handlePOST();\n      } finally {\n        RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n      }\n    } else {\n      command.handleGET();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8c611a68829ce670498db444c39975f66888dfd","date":1494922075,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n\n    RequestHandlerUtils.setWt(req, CommonParams.JSON);\n    String httpMethod = (String) req.getContext().get(\"httpMethod\");\n    Command command = new Command(req, rsp, httpMethod);\n    if (\"POST\".equals(httpMethod)) {\n      if (configEditing_disabled || isImmutableConfigSet) {\n        final String reason = configEditing_disabled ? \"due to \" + CONFIGSET_EDITING_DISABLED_ARG : \"because ConfigSet is immutable\";\n        throw new SolrException(SolrException.ErrorCode.FORBIDDEN, \" solrconfig editing is not enabled \" + reason);\n      }\n      try {\n        command.handlePOST();\n      } finally {\n        RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n      }\n    } else {\n      command.handleGET();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n\n    setWt(req, CommonParams.JSON);\n    String httpMethod = (String) req.getContext().get(\"httpMethod\");\n    Command command = new Command(req, rsp, httpMethod);\n    if (\"POST\".equals(httpMethod)) {\n      if (configEditing_disabled || isImmutableConfigSet) {\n        final String reason = configEditing_disabled ? \"due to \" + CONFIGSET_EDITING_DISABLED_ARG : \"because ConfigSet is immutable\";\n        throw new SolrException(SolrException.ErrorCode.FORBIDDEN, \" solrconfig editing is not enabled \" + reason);\n      }\n      try {\n        command.handlePOST();\n      } finally {\n        RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n      }\n    } else {\n      command.handleGET();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n\n    RequestHandlerUtils.setWt(req, CommonParams.JSON);\n    String httpMethod = (String) req.getContext().get(\"httpMethod\");\n    Command command = new Command(req, rsp, httpMethod);\n    if (\"POST\".equals(httpMethod)) {\n      if (configEditing_disabled || isImmutableConfigSet) {\n        final String reason = configEditing_disabled ? \"due to \" + CONFIGSET_EDITING_DISABLED_ARG : \"because ConfigSet is immutable\";\n        throw new SolrException(SolrException.ErrorCode.FORBIDDEN, \" solrconfig editing is not enabled \" + reason);\n      }\n      try {\n        command.handlePOST();\n      } finally {\n        RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n      }\n    } else {\n      command.handleGET();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n\n    setWt(req, CommonParams.JSON);\n    String httpMethod = (String) req.getContext().get(\"httpMethod\");\n    Command command = new Command(req, rsp, httpMethod);\n    if (\"POST\".equals(httpMethod)) {\n      if (configEditing_disabled || isImmutableConfigSet) {\n        final String reason = configEditing_disabled ? \"due to \" + CONFIGSET_EDITING_DISABLED_ARG : \"because ConfigSet is immutable\";\n        throw new SolrException(SolrException.ErrorCode.FORBIDDEN, \" solrconfig editing is not enabled \" + reason);\n      }\n      try {\n        command.handlePOST();\n      } finally {\n        RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n      }\n    } else {\n      command.handleGET();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n\n    RequestHandlerUtils.setWt(req, CommonParams.JSON);\n    String httpMethod = (String) req.getContext().get(\"httpMethod\");\n    Command command = new Command(req, rsp, httpMethod);\n    if (\"POST\".equals(httpMethod)) {\n      if (configEditing_disabled || isImmutableConfigSet) {\n        final String reason = configEditing_disabled ? \"due to \" + CONFIGSET_EDITING_DISABLED_ARG : \"because ConfigSet is immutable\";\n        throw new SolrException(SolrException.ErrorCode.FORBIDDEN, \" solrconfig editing is not enabled \" + reason);\n      }\n      try {\n        command.handlePOST();\n      } finally {\n        RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n      }\n    } else {\n      command.handleGET();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n\n    setWt(req, CommonParams.JSON);\n    String httpMethod = (String) req.getContext().get(\"httpMethod\");\n    Command command = new Command(req, rsp, httpMethod);\n    if (\"POST\".equals(httpMethod)) {\n      if (configEditing_disabled || isImmutableConfigSet) {\n        final String reason = configEditing_disabled ? \"due to \" + CONFIGSET_EDITING_DISABLED_ARG : \"because ConfigSet is immutable\";\n        throw new SolrException(SolrException.ErrorCode.FORBIDDEN, \" solrconfig editing is not enabled \" + reason);\n      }\n      try {\n        command.handlePOST();\n      } finally {\n        RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n      }\n    } else {\n      command.handleGET();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n\n    RequestHandlerUtils.setWt(req, CommonParams.JSON);\n    String httpMethod = (String) req.getContext().get(\"httpMethod\");\n    Command command = new Command(req, rsp, httpMethod);\n    if (\"POST\".equals(httpMethod)) {\n      if (configEditing_disabled || isImmutableConfigSet) {\n        final String reason = configEditing_disabled ? \"due to \" + CONFIGSET_EDITING_DISABLED_ARG : \"because ConfigSet is immutable\";\n        throw new SolrException(SolrException.ErrorCode.FORBIDDEN, \" solrconfig editing is not enabled \" + reason);\n      }\n      try {\n        command.handlePOST();\n      } finally {\n        RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n      }\n    } else {\n      command.handleGET();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n\n    setWt(req, CommonParams.JSON);\n    String httpMethod = (String) req.getContext().get(\"httpMethod\");\n    Command command = new Command(req, rsp, httpMethod);\n    if (\"POST\".equals(httpMethod)) {\n      if (configEditing_disabled || isImmutableConfigSet) {\n        final String reason = configEditing_disabled ? \"due to \" + CONFIGSET_EDITING_DISABLED_ARG : \"because ConfigSet is immutable\";\n        throw new SolrException(SolrException.ErrorCode.FORBIDDEN, \" solrconfig editing is not enabled \" + reason);\n      }\n      try {\n        command.handlePOST();\n      } finally {\n        RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n      }\n    } else {\n      command.handleGET();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6466e433d7f5218e77c8115ed28176855fc3c143":["1390137e395d2f07f9ba5b8c43d293befe84d563"],"531fe719c7218235a679452eb3d137bfd8fc6af1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"be214850f18c80408bcfafd463ec155ab0515aee":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"28288370235ed02234a64753cdbf0c6ec096304a":["6466e433d7f5218e77c8115ed28176855fc3c143","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["be214850f18c80408bcfafd463ec155ab0515aee","5da69d834fe035a64a0edb3884749ba5f174edb8"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["6466e433d7f5218e77c8115ed28176855fc3c143","a513b6a92751e54c76fb5447948c9e7d437163a7"],"a8c611a68829ce670498db444c39975f66888dfd":["6466e433d7f5218e77c8115ed28176855fc3c143"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["5da69d834fe035a64a0edb3884749ba5f174edb8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a513b6a92751e54c76fb5447948c9e7d437163a7":["6466e433d7f5218e77c8115ed28176855fc3c143"],"d2638f781be724518ff6c2263d14a48cf6e68017":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","1390137e395d2f07f9ba5b8c43d293befe84d563"],"5da69d834fe035a64a0edb3884749ba5f174edb8":["be214850f18c80408bcfafd463ec155ab0515aee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"6466e433d7f5218e77c8115ed28176855fc3c143":["28288370235ed02234a64753cdbf0c6ec096304a","74aea047dff7f7c38a2d766827bd20d356f98c6a","a8c611a68829ce670498db444c39975f66888dfd","a513b6a92751e54c76fb5447948c9e7d437163a7"],"531fe719c7218235a679452eb3d137bfd8fc6af1":["be214850f18c80408bcfafd463ec155ab0515aee"],"be214850f18c80408bcfafd463ec155ab0515aee":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","5da69d834fe035a64a0edb3884749ba5f174edb8"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["d2638f781be724518ff6c2263d14a48cf6e68017"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["28288370235ed02234a64753cdbf0c6ec096304a"],"a8c611a68829ce670498db444c39975f66888dfd":[],"1390137e395d2f07f9ba5b8c43d293befe84d563":["6466e433d7f5218e77c8115ed28176855fc3c143","d2638f781be724518ff6c2263d14a48cf6e68017"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"5da69d834fe035a64a0edb3884749ba5f174edb8":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","1390137e395d2f07f9ba5b8c43d293befe84d563"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a8c611a68829ce670498db444c39975f66888dfd","d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}