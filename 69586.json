{"path":"lucene/src/java/org/apache/lucene/index/FieldsWriter#writeField(int,Fieldable).mjava","commits":[{"id":"833a7987bc1c94455fde83e3311f72bddedcfb93","date":1279951470,"type":1,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldsWriter#writeField(int,Fieldable).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldsWriter#writeField(FieldInfo,Fieldable).mjava","sourceNew":"    final void writeField(int fieldNumber, Fieldable field) throws IOException {\n      fieldsStream.writeVInt(fieldNumber);\n      byte bits = 0;\n      if (field.isTokenized())\n        bits |= FieldsWriter.FIELD_IS_TOKENIZED;\n      if (field.isBinary())\n        bits |= FieldsWriter.FIELD_IS_BINARY;\n                \n      fieldsStream.writeByte(bits);\n                \n      if (field.isBinary()) {\n        final byte[] data;\n        final int len;\n        final int offset;\n        data = field.getBinaryValue();\n        len = field.getBinaryLength();\n        offset =  field.getBinaryOffset();\n\n        fieldsStream.writeVInt(len);\n        fieldsStream.writeBytes(data, offset, len);\n      }\n      else {\n        fieldsStream.writeString(field.stringValue());\n      }\n    }\n\n","sourceOld":"    final void writeField(FieldInfo fi, Fieldable field) throws IOException {\n      fieldsStream.writeVInt(fi.number);\n      byte bits = 0;\n      if (field.isTokenized())\n        bits |= FieldsWriter.FIELD_IS_TOKENIZED;\n      if (field.isBinary())\n        bits |= FieldsWriter.FIELD_IS_BINARY;\n                \n      fieldsStream.writeByte(bits);\n                \n      if (field.isBinary()) {\n        final byte[] data;\n        final int len;\n        final int offset;\n        data = field.getBinaryValue();\n        len = field.getBinaryLength();\n        offset =  field.getBinaryOffset();\n\n        fieldsStream.writeVInt(len);\n        fieldsStream.writeBytes(data, offset, len);\n      }\n      else {\n        fieldsStream.writeString(field.stringValue());\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldsWriter#writeField(int,Fieldable).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldsWriter#writeField(int,Fieldable).mjava","sourceNew":"  final void writeField(int fieldNumber, Fieldable field) throws IOException {\n    fieldsStream.writeVInt(fieldNumber);\n    byte bits = 0;\n    if (field.isTokenized())\n      bits |= FieldsWriter.FIELD_IS_TOKENIZED;\n    if (field.isBinary())\n      bits |= FieldsWriter.FIELD_IS_BINARY;\n\n    fieldsStream.writeByte(bits);\n\n    if (field.isBinary()) {\n      final byte[] data;\n      final int len;\n      final int offset;\n      data = field.getBinaryValue();\n      len = field.getBinaryLength();\n      offset =  field.getBinaryOffset();\n\n      fieldsStream.writeVInt(len);\n      fieldsStream.writeBytes(data, offset, len);\n    }\n    else {\n      fieldsStream.writeString(field.stringValue());\n    }\n  }\n\n","sourceOld":"    final void writeField(int fieldNumber, Fieldable field) throws IOException {\n      fieldsStream.writeVInt(fieldNumber);\n      byte bits = 0;\n      if (field.isTokenized())\n        bits |= FieldsWriter.FIELD_IS_TOKENIZED;\n      if (field.isBinary())\n        bits |= FieldsWriter.FIELD_IS_BINARY;\n                \n      fieldsStream.writeByte(bits);\n                \n      if (field.isBinary()) {\n        final byte[] data;\n        final int len;\n        final int offset;\n        data = field.getBinaryValue();\n        len = field.getBinaryLength();\n        offset =  field.getBinaryOffset();\n\n        fieldsStream.writeVInt(len);\n        fieldsStream.writeBytes(data, offset, len);\n      }\n      else {\n        fieldsStream.writeString(field.stringValue());\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldsWriter#writeField(int,Fieldable).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldsWriter#writeField(FieldInfo,Fieldable).mjava","sourceNew":"  final void writeField(int fieldNumber, Fieldable field) throws IOException {\n    fieldsStream.writeVInt(fieldNumber);\n    byte bits = 0;\n    if (field.isTokenized())\n      bits |= FieldsWriter.FIELD_IS_TOKENIZED;\n    if (field.isBinary())\n      bits |= FieldsWriter.FIELD_IS_BINARY;\n\n    fieldsStream.writeByte(bits);\n\n    if (field.isBinary()) {\n      final byte[] data;\n      final int len;\n      final int offset;\n      data = field.getBinaryValue();\n      len = field.getBinaryLength();\n      offset =  field.getBinaryOffset();\n\n      fieldsStream.writeVInt(len);\n      fieldsStream.writeBytes(data, offset, len);\n    }\n    else {\n      fieldsStream.writeString(field.stringValue());\n    }\n  }\n\n","sourceOld":"  final void writeField(FieldInfo fi, Fieldable field) throws IOException {\n    fieldsStream.writeVInt(fi.number);\n    byte bits = 0;\n    if (field.isTokenized())\n      bits |= FieldsWriter.FIELD_IS_TOKENIZED;\n    if (field.isBinary())\n      bits |= FieldsWriter.FIELD_IS_BINARY;\n\n    fieldsStream.writeByte(bits);\n\n    if (field.isBinary()) {\n      final byte[] data;\n      final int len;\n      final int offset;\n      data = field.getBinaryValue();\n      len = field.getBinaryLength();\n      offset =  field.getBinaryOffset();\n\n      fieldsStream.writeVInt(len);\n      fieldsStream.writeBytes(data, offset, len);\n    }\n    else {\n      fieldsStream.writeString(field.stringValue());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldsWriter#writeField(int,Fieldable).mjava","pathOld":"/dev/null","sourceNew":"  final void writeField(int fieldNumber, Fieldable field) throws IOException {\n    fieldsStream.writeVInt(fieldNumber);\n    byte bits = 0;\n    if (field.isTokenized())\n      bits |= FieldsWriter.FIELD_IS_TOKENIZED;\n    if (field.isBinary())\n      bits |= FieldsWriter.FIELD_IS_BINARY;\n\n    fieldsStream.writeByte(bits);\n\n    if (field.isBinary()) {\n      final byte[] data;\n      final int len;\n      final int offset;\n      data = field.getBinaryValue();\n      len = field.getBinaryLength();\n      offset =  field.getBinaryOffset();\n\n      fieldsStream.writeVInt(len);\n      fieldsStream.writeBytes(data, offset, len);\n    }\n    else {\n      fieldsStream.writeString(field.stringValue());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab0e9f7ce724e6aea1fea746dded19e76d231cf8","date":1304774078,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldsWriter#writeField(int,Fieldable).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldsWriter#writeField(int,Fieldable).mjava","sourceNew":"  final void writeField(int fieldNumber, Fieldable field) throws IOException {\n    fieldsStream.writeVInt(fieldNumber);\n    int bits = 0;\n    if (field.isTokenized())\n      bits |= FIELD_IS_TOKENIZED;\n    if (field.isBinary())\n      bits |= FIELD_IS_BINARY;\n    if (field instanceof NumericField) {\n      switch (((NumericField) field).getDataType()) {\n        case INT:\n          bits |= FIELD_IS_NUMERIC_INT; break;\n        case LONG:\n          bits |= FIELD_IS_NUMERIC_LONG; break;\n        case FLOAT:\n          bits |= FIELD_IS_NUMERIC_FLOAT; break;\n        case DOUBLE:\n          bits |= FIELD_IS_NUMERIC_DOUBLE; break;\n        default:\n          assert false : \"Should never get here\";\n      }\n    }\n    fieldsStream.writeByte((byte) bits);\n\n    if (field.isBinary()) {\n      final byte[] data;\n      final int len;\n      final int offset;\n      data = field.getBinaryValue();\n      len = field.getBinaryLength();\n      offset =  field.getBinaryOffset();\n\n      fieldsStream.writeVInt(len);\n      fieldsStream.writeBytes(data, offset, len);\n    } else if (field instanceof NumericField) {\n      final NumericField nf = (NumericField) field;\n      final Number n = nf.getNumericValue();\n      switch (nf.getDataType()) {\n        case INT:\n          fieldsStream.writeInt(n.intValue()); break;\n        case LONG:\n          fieldsStream.writeLong(n.longValue()); break;\n        case FLOAT:\n          fieldsStream.writeInt(Float.floatToIntBits(n.floatValue())); break;\n        case DOUBLE:\n          fieldsStream.writeLong(Double.doubleToLongBits(n.doubleValue())); break;\n        default:\n          assert false : \"Should never get here\";\n      }\n    } else {\n      fieldsStream.writeString(field.stringValue());\n    }\n  }\n\n","sourceOld":"  final void writeField(int fieldNumber, Fieldable field) throws IOException {\n    fieldsStream.writeVInt(fieldNumber);\n    byte bits = 0;\n    if (field.isTokenized())\n      bits |= FieldsWriter.FIELD_IS_TOKENIZED;\n    if (field.isBinary())\n      bits |= FieldsWriter.FIELD_IS_BINARY;\n\n    fieldsStream.writeByte(bits);\n\n    if (field.isBinary()) {\n      final byte[] data;\n      final int len;\n      final int offset;\n      data = field.getBinaryValue();\n      len = field.getBinaryLength();\n      offset =  field.getBinaryOffset();\n\n      fieldsStream.writeVInt(len);\n      fieldsStream.writeBytes(data, offset, len);\n    }\n    else {\n      fieldsStream.writeString(field.stringValue());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldsWriter#writeField(int,Fieldable).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldsWriter#writeField(int,Fieldable).mjava","sourceNew":"  final void writeField(int fieldNumber, Fieldable field) throws IOException {\n    fieldsStream.writeVInt(fieldNumber);\n    int bits = 0;\n    if (field.isTokenized())\n      bits |= FIELD_IS_TOKENIZED;\n    if (field.isBinary())\n      bits |= FIELD_IS_BINARY;\n    if (field instanceof NumericField) {\n      switch (((NumericField) field).getDataType()) {\n        case INT:\n          bits |= FIELD_IS_NUMERIC_INT; break;\n        case LONG:\n          bits |= FIELD_IS_NUMERIC_LONG; break;\n        case FLOAT:\n          bits |= FIELD_IS_NUMERIC_FLOAT; break;\n        case DOUBLE:\n          bits |= FIELD_IS_NUMERIC_DOUBLE; break;\n        default:\n          assert false : \"Should never get here\";\n      }\n    }\n    fieldsStream.writeByte((byte) bits);\n\n    if (field.isBinary()) {\n      final byte[] data;\n      final int len;\n      final int offset;\n      data = field.getBinaryValue();\n      len = field.getBinaryLength();\n      offset =  field.getBinaryOffset();\n\n      fieldsStream.writeVInt(len);\n      fieldsStream.writeBytes(data, offset, len);\n    } else if (field instanceof NumericField) {\n      final NumericField nf = (NumericField) field;\n      final Number n = nf.getNumericValue();\n      switch (nf.getDataType()) {\n        case INT:\n          fieldsStream.writeInt(n.intValue()); break;\n        case LONG:\n          fieldsStream.writeLong(n.longValue()); break;\n        case FLOAT:\n          fieldsStream.writeInt(Float.floatToIntBits(n.floatValue())); break;\n        case DOUBLE:\n          fieldsStream.writeLong(Double.doubleToLongBits(n.doubleValue())); break;\n        default:\n          assert false : \"Should never get here\";\n      }\n    } else {\n      fieldsStream.writeString(field.stringValue());\n    }\n  }\n\n","sourceOld":"  final void writeField(int fieldNumber, Fieldable field) throws IOException {\n    fieldsStream.writeVInt(fieldNumber);\n    byte bits = 0;\n    if (field.isTokenized())\n      bits |= FieldsWriter.FIELD_IS_TOKENIZED;\n    if (field.isBinary())\n      bits |= FieldsWriter.FIELD_IS_BINARY;\n\n    fieldsStream.writeByte(bits);\n\n    if (field.isBinary()) {\n      final byte[] data;\n      final int len;\n      final int offset;\n      data = field.getBinaryValue();\n      len = field.getBinaryLength();\n      offset =  field.getBinaryOffset();\n\n      fieldsStream.writeVInt(len);\n      fieldsStream.writeBytes(data, offset, len);\n    }\n    else {\n      fieldsStream.writeString(field.stringValue());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldsWriter#writeField(int,Fieldable).mjava","pathOld":"/dev/null","sourceNew":"  final void writeField(int fieldNumber, Fieldable field) throws IOException {\n    fieldsStream.writeVInt(fieldNumber);\n    int bits = 0;\n    if (field.isTokenized())\n      bits |= FIELD_IS_TOKENIZED;\n    if (field.isBinary())\n      bits |= FIELD_IS_BINARY;\n    if (field instanceof NumericField) {\n      switch (((NumericField) field).getDataType()) {\n        case INT:\n          bits |= FIELD_IS_NUMERIC_INT; break;\n        case LONG:\n          bits |= FIELD_IS_NUMERIC_LONG; break;\n        case FLOAT:\n          bits |= FIELD_IS_NUMERIC_FLOAT; break;\n        case DOUBLE:\n          bits |= FIELD_IS_NUMERIC_DOUBLE; break;\n        default:\n          assert false : \"Should never get here\";\n      }\n    }\n    fieldsStream.writeByte((byte) bits);\n\n    if (field.isBinary()) {\n      final byte[] data;\n      final int len;\n      final int offset;\n      data = field.getBinaryValue();\n      len = field.getBinaryLength();\n      offset =  field.getBinaryOffset();\n\n      fieldsStream.writeVInt(len);\n      fieldsStream.writeBytes(data, offset, len);\n    } else if (field instanceof NumericField) {\n      final NumericField nf = (NumericField) field;\n      final Number n = nf.getNumericValue();\n      switch (nf.getDataType()) {\n        case INT:\n          fieldsStream.writeInt(n.intValue()); break;\n        case LONG:\n          fieldsStream.writeLong(n.longValue()); break;\n        case FLOAT:\n          fieldsStream.writeInt(Float.floatToIntBits(n.floatValue())); break;\n        case DOUBLE:\n          fieldsStream.writeLong(Double.doubleToLongBits(n.doubleValue())); break;\n        default:\n          assert false : \"Should never get here\";\n      }\n    } else {\n      fieldsStream.writeString(field.stringValue());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldsWriter#writeField(int,IndexableField).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldsWriter#writeField(int,Fieldable).mjava","sourceNew":"  final void writeField(int fieldNumber, IndexableField field) throws IOException {\n    fieldsStream.writeVInt(fieldNumber);\n    int bits = 0;\n    final BytesRef bytes;\n    final String string;\n    // TODO: maybe a field should serialize itself?\n    // this way we don't bake into indexer all these\n    // specific encodings for different fields?  and apps\n    // can customize...\n    if (field.numeric()) {\n      switch (field.numericDataType()) {\n        case INT:\n          bits |= FIELD_IS_NUMERIC_INT; break;\n        case LONG:\n          bits |= FIELD_IS_NUMERIC_LONG; break;\n        case FLOAT:\n          bits |= FIELD_IS_NUMERIC_FLOAT; break;\n        case DOUBLE:\n          bits |= FIELD_IS_NUMERIC_DOUBLE; break;\n        default:\n          assert false : \"Should never get here\";\n      }\n      string = null;\n      bytes = null;\n    } else {\n      bytes = field.binaryValue();\n      if (bytes != null) {\n        bits |= FIELD_IS_BINARY;\n        string = null;\n      } else {\n        string = field.stringValue();\n      }\n    }\n\n    fieldsStream.writeByte((byte) bits);\n\n    if (bytes != null) {\n      fieldsStream.writeVInt(bytes.length);\n      fieldsStream.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n    } else if (string != null) {\n      fieldsStream.writeString(field.stringValue());\n    } else {\n      final Number n = field.numericValue();\n      if (n == null) {\n        throw new IllegalArgumentException(\"field \" + field.name() + \" is stored but does not have binaryValue, stringValue nor numericValue\");\n      }\n      switch (field.numericDataType()) {\n        case INT:\n          fieldsStream.writeInt(n.intValue()); break;\n        case LONG:\n          fieldsStream.writeLong(n.longValue()); break;\n        case FLOAT:\n          fieldsStream.writeInt(Float.floatToIntBits(n.floatValue())); break;\n        case DOUBLE:\n          fieldsStream.writeLong(Double.doubleToLongBits(n.doubleValue())); break;\n        default:\n          assert false : \"Should never get here\";\n      }\n    }\n  }\n\n","sourceOld":"  final void writeField(int fieldNumber, Fieldable field) throws IOException {\n    fieldsStream.writeVInt(fieldNumber);\n    int bits = 0;\n    if (field.isTokenized())\n      bits |= FIELD_IS_TOKENIZED;\n    if (field.isBinary())\n      bits |= FIELD_IS_BINARY;\n    if (field instanceof NumericField) {\n      switch (((NumericField) field).getDataType()) {\n        case INT:\n          bits |= FIELD_IS_NUMERIC_INT; break;\n        case LONG:\n          bits |= FIELD_IS_NUMERIC_LONG; break;\n        case FLOAT:\n          bits |= FIELD_IS_NUMERIC_FLOAT; break;\n        case DOUBLE:\n          bits |= FIELD_IS_NUMERIC_DOUBLE; break;\n        default:\n          assert false : \"Should never get here\";\n      }\n    }\n    fieldsStream.writeByte((byte) bits);\n\n    if (field.isBinary()) {\n      final byte[] data;\n      final int len;\n      final int offset;\n      data = field.getBinaryValue();\n      len = field.getBinaryLength();\n      offset =  field.getBinaryOffset();\n\n      fieldsStream.writeVInt(len);\n      fieldsStream.writeBytes(data, offset, len);\n    } else if (field instanceof NumericField) {\n      final NumericField nf = (NumericField) field;\n      final Number n = nf.getNumericValue();\n      switch (nf.getDataType()) {\n        case INT:\n          fieldsStream.writeInt(n.intValue()); break;\n        case LONG:\n          fieldsStream.writeLong(n.longValue()); break;\n        case FLOAT:\n          fieldsStream.writeInt(Float.floatToIntBits(n.floatValue())); break;\n        case DOUBLE:\n          fieldsStream.writeLong(Double.doubleToLongBits(n.doubleValue())); break;\n        default:\n          assert false : \"Should never get here\";\n      }\n    } else {\n      fieldsStream.writeString(field.stringValue());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab0e9f7ce724e6aea1fea746dded19e76d231cf8":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ab0e9f7ce724e6aea1fea746dded19e76d231cf8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["135621f3a0670a9394eb563224a3b76cc4dddc0f","ab0e9f7ce724e6aea1fea746dded19e76d231cf8"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["ab0e9f7ce724e6aea1fea746dded19e76d231cf8"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["833a7987bc1c94455fde83e3311f72bddedcfb93","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"833a7987bc1c94455fde83e3311f72bddedcfb93":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ab0e9f7ce724e6aea1fea746dded19e76d231cf8":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","833a7987bc1c94455fde83e3311f72bddedcfb93"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["ab0e9f7ce724e6aea1fea746dded19e76d231cf8","135621f3a0670a9394eb563224a3b76cc4dddc0f"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"833a7987bc1c94455fde83e3311f72bddedcfb93":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}