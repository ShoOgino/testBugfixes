{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter[DocRouter]#shardHash(String,SolrInputDocument,SolrParams).mjava","commits":[{"id":"c5a558d54519c651068ddb202f03befefb1514a7","date":1354382006,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter[DocRouter]#shardHash(String,SolrInputDocument,SolrParams).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public int shardHash(String id, SolrInputDocument doc, SolrParams params) {\n    int idx = id.indexOf(separator);\n    if (idx < 0) {\n      return Hash.murmurhash3_x86_32(id, 0, id.length(), 0);\n    }\n\n    int m1 = mask1;\n    int m2 = mask2;\n\n    String part1 = id.substring(0,idx);\n    int commaIdx = part1.indexOf(',');\n    if (commaIdx > 0) {\n      int firstBits = getBits(part1, commaIdx);\n      if (firstBits >= 0) {\n        m1 = -1 << (32-firstBits);\n        m2 = -1 >>> firstBits;\n        part1 = part1.substring(0, commaIdx);  // actually, this isn't strictly necessary\n      }\n    }\n\n    String part2 = id.substring(idx+1);\n\n    int hash1 = Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n    int hash2 = Hash.murmurhash3_x86_32(part2, 0, part2.length(), 0);\n    return (hash1 & m1) | (hash2 & m2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89f828d954597b98a28942874636f35c719b8a5d","date":1354471211,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter[DocRouter]#shardHash(String,SolrInputDocument,SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter[DocRouter]#shardHash(String,SolrInputDocument,SolrParams).mjava","sourceNew":"  @Override\n  protected int shardHash(String id, SolrInputDocument doc, SolrParams params) {\n    int idx = id.indexOf(separator);\n    if (idx < 0) {\n      return Hash.murmurhash3_x86_32(id, 0, id.length(), 0);\n    }\n\n    int m1 = mask1;\n    int m2 = mask2;\n\n    String part1 = id.substring(0,idx);\n    int commaIdx = part1.indexOf(',');\n    if (commaIdx > 0) {\n      int firstBits = getBits(part1, commaIdx);\n      if (firstBits >= 0) {\n        m1 = -1 << (32-firstBits);\n        m2 = -1 >>> firstBits;\n        part1 = part1.substring(0, commaIdx);  // actually, this isn't strictly necessary\n      }\n    }\n\n    String part2 = id.substring(idx+1);\n\n    int hash1 = Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n    int hash2 = Hash.murmurhash3_x86_32(part2, 0, part2.length(), 0);\n    return (hash1 & m1) | (hash2 & m2);\n  }\n\n","sourceOld":"  @Override\n  public int shardHash(String id, SolrInputDocument doc, SolrParams params) {\n    int idx = id.indexOf(separator);\n    if (idx < 0) {\n      return Hash.murmurhash3_x86_32(id, 0, id.length(), 0);\n    }\n\n    int m1 = mask1;\n    int m2 = mask2;\n\n    String part1 = id.substring(0,idx);\n    int commaIdx = part1.indexOf(',');\n    if (commaIdx > 0) {\n      int firstBits = getBits(part1, commaIdx);\n      if (firstBits >= 0) {\n        m1 = -1 << (32-firstBits);\n        m2 = -1 >>> firstBits;\n        part1 = part1.substring(0, commaIdx);  // actually, this isn't strictly necessary\n      }\n    }\n\n    String part2 = id.substring(idx+1);\n\n    int hash1 = Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n    int hash2 = Hash.murmurhash3_x86_32(part2, 0, part2.length(), 0);\n    return (hash1 & m1) | (hash2 & m2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7754464847b06ced605515bd48219280ede29e9","date":1354586462,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter[DocRouter]#sliceHash(String,SolrInputDocument,SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CompositeIdRouter[DocRouter]#shardHash(String,SolrInputDocument,SolrParams).mjava","sourceNew":"  @Override\n  protected int sliceHash(String id, SolrInputDocument doc, SolrParams params) {\n    int idx = id.indexOf(separator);\n    if (idx < 0) {\n      return Hash.murmurhash3_x86_32(id, 0, id.length(), 0);\n    }\n\n    int m1 = mask1;\n    int m2 = mask2;\n\n    String part1 = id.substring(0,idx);\n    int commaIdx = part1.indexOf(bitsSepartor);\n    if (commaIdx > 0) {\n      int firstBits = getBits(part1, commaIdx);\n      if (firstBits >= 0) {\n        m1 = -1 << (32-firstBits);\n        m2 = -1 >>> firstBits;\n        part1 = part1.substring(0, commaIdx);\n      }\n    }\n\n    String part2 = id.substring(idx+1);\n\n    int hash1 = Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n    int hash2 = Hash.murmurhash3_x86_32(part2, 0, part2.length(), 0);\n    return (hash1 & m1) | (hash2 & m2);\n  }\n\n","sourceOld":"  @Override\n  protected int shardHash(String id, SolrInputDocument doc, SolrParams params) {\n    int idx = id.indexOf(separator);\n    if (idx < 0) {\n      return Hash.murmurhash3_x86_32(id, 0, id.length(), 0);\n    }\n\n    int m1 = mask1;\n    int m2 = mask2;\n\n    String part1 = id.substring(0,idx);\n    int commaIdx = part1.indexOf(',');\n    if (commaIdx > 0) {\n      int firstBits = getBits(part1, commaIdx);\n      if (firstBits >= 0) {\n        m1 = -1 << (32-firstBits);\n        m2 = -1 >>> firstBits;\n        part1 = part1.substring(0, commaIdx);  // actually, this isn't strictly necessary\n      }\n    }\n\n    String part2 = id.substring(idx+1);\n\n    int hash1 = Hash.murmurhash3_x86_32(part1, 0, part1.length(), 0);\n    int hash2 = Hash.murmurhash3_x86_32(part2, 0, part2.length(), 0);\n    return (hash1 & m1) | (hash2 & m2);\n  }\n\n","bugFix":null,"bugIntro":["a5cd9341c578f132de886964218bbefe52bdcd83"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e7754464847b06ced605515bd48219280ede29e9":["89f828d954597b98a28942874636f35c719b8a5d"],"89f828d954597b98a28942874636f35c719b8a5d":["c5a558d54519c651068ddb202f03befefb1514a7"],"c5a558d54519c651068ddb202f03befefb1514a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7754464847b06ced605515bd48219280ede29e9"]},"commit2Childs":{"e7754464847b06ced605515bd48219280ede29e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"89f828d954597b98a28942874636f35c719b8a5d":["e7754464847b06ced605515bd48219280ede29e9"],"c5a558d54519c651068ddb202f03befefb1514a7":["89f828d954597b98a28942874636f35c719b8a5d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c5a558d54519c651068ddb202f03befefb1514a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}