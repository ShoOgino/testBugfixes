{"path":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#assertQuery(Term,Directory,int,CodecProvider).mjava","commits":[{"id":"a493e6d0c3ad86bd55c0a1360d110142e948f2bd","date":1289406991,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#assertQuery(Term,Directory,int,CodecProvider).mjava","pathOld":"/dev/null","sourceNew":"  public void assertQuery(Term t, Directory dir, int num, CodecProvider codecs)\n      throws CorruptIndexException, IOException {\n    IndexReader reader = IndexReader.open(dir, null, true,\n        IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, codecs);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(t), num + 10);\n    assertEquals(num, search.totalHits);\n    searcher.close();\n    reader.close();\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#assertQuery(Term,Directory,int,CodecProvider).mjava","pathOld":"/dev/null","sourceNew":"  public void assertQuery(Term t, Directory dir, int num, CodecProvider codecs)\n      throws CorruptIndexException, IOException {\n    IndexReader reader = IndexReader.open(dir, null, true,\n        IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, codecs);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(t), num + 10);\n    assertEquals(num, search.totalHits);\n    searcher.close();\n    reader.close();\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#assertQuery(Term,Directory,int,CodecProvider).mjava","pathOld":"/dev/null","sourceNew":"  public void assertQuery(Term t, Directory dir, int num, CodecProvider codecs)\n      throws CorruptIndexException, IOException {\n    IndexReader reader = IndexReader.open(dir, null, true,\n        IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, codecs);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(t), num + 10);\n    assertEquals(num, search.totalHits);\n    searcher.close();\n    reader.close();\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56da903869515527852ee21ea7ef7bfe414cd40d","date":1294224724,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#assertQuery(Term,Directory,int,CodecProvider).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#assertQuery(Term,Directory,int,CodecProvider).mjava","sourceNew":"  public void assertQuery(Term t, Directory dir, int num, CodecProvider codecs)\n      throws CorruptIndexException, IOException {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: assertQuery \" + t);\n    }\n    IndexReader reader = IndexReader.open(dir, null, true,\n        IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, codecs);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(t), num + 10);\n    assertEquals(num, search.totalHits);\n    searcher.close();\n    reader.close();\n\n  }\n\n","sourceOld":"  public void assertQuery(Term t, Directory dir, int num, CodecProvider codecs)\n      throws CorruptIndexException, IOException {\n    IndexReader reader = IndexReader.open(dir, null, true,\n        IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, codecs);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(t), num + 10);\n    assertEquals(num, search.totalHits);\n    searcher.close();\n    reader.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#assertQuery(Term,Directory,int,CodecProvider).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#assertQuery(Term,Directory,int,CodecProvider).mjava","sourceNew":"  public void assertQuery(Term t, Directory dir, int num, CodecProvider codecs)\n      throws CorruptIndexException, IOException {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: assertQuery \" + t);\n    }\n    IndexReader reader = IndexReader.open(dir, null, true,\n        IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, codecs);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(t), num + 10);\n    assertEquals(num, search.totalHits);\n    searcher.close();\n    reader.close();\n\n  }\n\n","sourceOld":"  public void assertQuery(Term t, Directory dir, int num, CodecProvider codecs)\n      throws CorruptIndexException, IOException {\n    IndexReader reader = IndexReader.open(dir, null, true,\n        IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, codecs);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(t), num + 10);\n    assertEquals(num, search.totalHits);\n    searcher.close();\n    reader.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#assertQuery(Term,Directory,int,CodecProvider).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#assertQuery(Term,Directory,int,CodecProvider).mjava","sourceNew":"  public void assertQuery(Term t, Directory dir, int num, CodecProvider codecs)\n      throws CorruptIndexException, IOException {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: assertQuery \" + t);\n    }\n    IndexReader reader = IndexReader.open(dir, null, true,\n        IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, codecs);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(t), num + 10);\n    assertEquals(num, search.totalHits);\n    searcher.close();\n    reader.close();\n\n  }\n\n","sourceOld":"  public void assertQuery(Term t, Directory dir, int num, CodecProvider codecs)\n      throws CorruptIndexException, IOException {\n    IndexReader reader = IndexReader.open(dir, null, true,\n        IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, codecs);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(t), num + 10);\n    assertEquals(num, search.totalHits);\n    searcher.close();\n    reader.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#assertQuery(Term,Directory,int,CodecProvider).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#assertQuery(Term,Directory,int,CodecProvider).mjava","sourceNew":"  public void assertQuery(Term t, Directory dir, int num, CodecProvider codecs)\n      throws CorruptIndexException, IOException {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: assertQuery \" + t);\n    }\n    IndexReader reader = IndexReader.open(dir, null, true,\n        IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, codecs);\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(t), num + 10);\n    assertEquals(num, search.totalHits);\n    searcher.close();\n    reader.close();\n\n  }\n\n","sourceOld":"  public void assertQuery(Term t, Directory dir, int num, CodecProvider codecs)\n      throws CorruptIndexException, IOException {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: assertQuery \" + t);\n    }\n    IndexReader reader = IndexReader.open(dir, null, true,\n        IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, codecs);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(t), num + 10);\n    assertEquals(num, search.totalHits);\n    searcher.close();\n    reader.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#assertQuery(Term,Directory,int,CodecProvider).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#assertQuery(Term,Directory,int,CodecProvider).mjava","sourceNew":"  public void assertQuery(Term t, Directory dir, int num, CodecProvider codecs)\n      throws CorruptIndexException, IOException {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: assertQuery \" + t);\n    }\n    IndexReader reader = IndexReader.open(dir, null, true,\n        IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, codecs);\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(t), num + 10);\n    assertEquals(num, search.totalHits);\n    searcher.close();\n    reader.close();\n\n  }\n\n","sourceOld":"  public void assertQuery(Term t, Directory dir, int num, CodecProvider codecs)\n      throws CorruptIndexException, IOException {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: assertQuery \" + t);\n    }\n    IndexReader reader = IndexReader.open(dir, null, true,\n        IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, codecs);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(t), num + 10);\n    assertEquals(num, search.totalHits);\n    searcher.close();\n    reader.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#assertQuery(Term,Directory,int,CodecProvider).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#assertQuery(Term,Directory,int,CodecProvider).mjava","sourceNew":"  public void assertQuery(Term t, Directory dir, int num, CodecProvider codecs)\n      throws CorruptIndexException, IOException {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: assertQuery \" + t);\n    }\n    IndexReader reader = IndexReader.open(dir, null, true,\n        IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, codecs);\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(t), num + 10);\n    assertEquals(num, search.totalHits);\n    searcher.close();\n    reader.close();\n\n  }\n\n","sourceOld":"  public void assertQuery(Term t, Directory dir, int num, CodecProvider codecs)\n      throws CorruptIndexException, IOException {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: assertQuery \" + t);\n    }\n    IndexReader reader = IndexReader.open(dir, null, true,\n        IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, codecs);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(t), num + 10);\n    assertEquals(num, search.totalHits);\n    searcher.close();\n    reader.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/perfield/TestPerFieldPostingsFormat#assertQuery(Term,Directory,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#assertQuery(Term,Directory,int,CodecProvider).mjava","sourceNew":"  public void assertQuery(Term t, Directory dir, int num)\n      throws CorruptIndexException, IOException {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: assertQuery \" + t);\n    }\n    IndexReader reader = IndexReader.open(dir, null, true, 1);\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(t), num + 10);\n    assertEquals(num, search.totalHits);\n    searcher.close();\n    reader.close();\n\n  }\n\n","sourceOld":"  public void assertQuery(Term t, Directory dir, int num, CodecProvider codecs)\n      throws CorruptIndexException, IOException {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: assertQuery \" + t);\n    }\n    IndexReader reader = IndexReader.open(dir, null, true,\n        IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, codecs);\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(t), num + 10);\n    assertEquals(num, search.totalHits);\n    searcher.close();\n    reader.close();\n\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"790e1fde4caa765b3faaad3fbcd25c6973450336":["56da903869515527852ee21ea7ef7bfe414cd40d"],"7b91922b55d15444d554721b352861d028eb8278":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"70ad682703b8585f5d0a637efec044d57ec05efb":["85a883878c0af761245ab048babc63d099f835f3","56da903869515527852ee21ea7ef7bfe414cd40d"],"56da903869515527852ee21ea7ef7bfe414cd40d":["a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","790e1fde4caa765b3faaad3fbcd25c6973450336"],"a493e6d0c3ad86bd55c0a1360d110142e948f2bd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85a883878c0af761245ab048babc63d099f835f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","56da903869515527852ee21ea7ef7bfe414cd40d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","790e1fde4caa765b3faaad3fbcd25c6973450336"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"790e1fde4caa765b3faaad3fbcd25c6973450336":["7b91922b55d15444d554721b352861d028eb8278","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"56da903869515527852ee21ea7ef7bfe414cd40d":["790e1fde4caa765b3faaad3fbcd25c6973450336","70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"85a883878c0af761245ab048babc63d099f835f3":["70ad682703b8585f5d0a637efec044d57ec05efb"],"a493e6d0c3ad86bd55c0a1360d110142e948f2bd":["56da903869515527852ee21ea7ef7bfe414cd40d","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a493e6d0c3ad86bd55c0a1360d110142e948f2bd","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}