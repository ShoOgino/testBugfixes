{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions2#testSimple().mjava","commits":[{"id":"4e8947bb335882c059bedf21cdadc06a26c922b0","date":1398950361,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions2#testSimple().mjava","pathOld":"/dev/null","sourceNew":"  // just one thread, serial merge policy, hopefully debuggable\n  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    \n    // log all exceptions we hit, in case we fail (for debugging)\n    ByteArrayOutputStream exceptionLog = new ByteArrayOutputStream();\n    PrintStream exceptionStream = new PrintStream(exceptionLog, true, \"UTF-8\");\n    \n    // create lots of non-aborting exceptions with a broken analyzer\n    final long analyzerSeed = random().nextLong();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        MockTokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, false);\n        tokenizer.setEnableChecks(false); // TODO: can we turn this on? our filter is probably too evil\n        TokenStream stream = new CrankyTokenFilter(tokenizer, new Random(analyzerSeed));\n        return new TokenStreamComponents(tokenizer, stream);\n      }\n    };\n    \n    // create lots of aborting exceptions with a broken codec\n    Codec codec = new CrankyCodec(Codec.getDefault(), new Random(random().nextLong()));\n    \n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    // just for now, try to keep this test reproducible\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    conf.setCodec(codec);\n    \n    // TODO: too much?\n    int numDocs = RANDOM_MULTIPLIER * 1000;\n    \n    IndexWriter iw = new IndexWriter(dir, conf);\n    try {\n      for (int i = 0; i < numDocs; i++) {\n        // TODO: add crankyDocValuesFields, etc\n        Document doc = new Document();\n        doc.add(newStringField(\"id\", Integer.toString(i), Field.Store.NO));\n        doc.add(new NumericDocValuesField(\"dv\", i));\n        doc.add(newTextField(\"text1\", TestUtil.randomAnalysisString(random(), 20, true), Field.Store.NO));\n        // TODO: sometimes update dv\n        try {\n          iw.addDocument(doc);\n        } catch (Exception e) {\n          if (e.getMessage() != null && e.getMessage().startsWith(\"Fake IOException\")) {\n            e.printStackTrace(exceptionStream);\n          } else {\n            Rethrow.rethrow(e);\n          }\n        }\n        if (random().nextInt(10) == 0) {\n          // trigger flush: TODO: sometimes reopen\n          try {\n            iw.commit();\n            if (DirectoryReader.indexExists(dir)) {\n              TestUtil.checkIndex(dir);\n            }\n          } catch (Exception e) {\n            if (e.getMessage() != null && e.getMessage().startsWith(\"Fake IOException\")) {\n              e.printStackTrace(exceptionStream);\n            } else {\n              Rethrow.rethrow(e);\n            }\n          }\n        }\n      }\n      \n      iw.close();\n      dir.close();\n    } catch (Throwable t) {\n      System.out.println(\"Unexpected exception: dumping fake-exception-log:...\");\n      exceptionStream.flush();\n      System.out.println(exceptionLog.toString(\"UTF-8\"));\n      System.out.flush();\n      Rethrow.rethrow(t);\n    }\n    \n    if (VERBOSE) {\n      System.out.println(\"TEST PASSED: dumping fake-exception-log:...\");\n      System.out.println(exceptionLog.toString(\"UTF-8\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0e80cc3f88baf8f24df62207787944c7df9b75b9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0df8dc2b1b5d46ee1c50df0d9402e8512b46d14e","date":1398951176,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions2#testSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions2#testSimple().mjava","sourceNew":"  // just one thread, serial merge policy, hopefully debuggable\n  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    \n    // log all exceptions we hit, in case we fail (for debugging)\n    ByteArrayOutputStream exceptionLog = new ByteArrayOutputStream();\n    PrintStream exceptionStream = new PrintStream(exceptionLog, true, \"UTF-8\");\n    \n    // create lots of non-aborting exceptions with a broken analyzer\n    final long analyzerSeed = random().nextLong();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        MockTokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, false);\n        tokenizer.setEnableChecks(false); // TODO: can we turn this on? our filter is probably too evil\n        TokenStream stream = new CrankyTokenFilter(tokenizer, new Random(analyzerSeed));\n        return new TokenStreamComponents(tokenizer, stream);\n      }\n    };\n    \n    // create lots of aborting exceptions with a broken codec\n    Codec codec = new CrankyCodec(Codec.getDefault(), new Random(random().nextLong()));\n    \n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    // just for now, try to keep this test reproducible\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    conf.setCodec(codec);\n    \n    // TODO: too much?\n    int numDocs = RANDOM_MULTIPLIER * 1000;\n    \n    IndexWriter iw = new IndexWriter(dir, conf);\n    try {\n      for (int i = 0; i < numDocs; i++) {\n        // TODO: add crankyDocValuesFields, etc\n        Document doc = new Document();\n        doc.add(newStringField(\"id\", Integer.toString(i), Field.Store.NO));\n        doc.add(new NumericDocValuesField(\"dv\", i));\n        doc.add(newTextField(\"text1\", TestUtil.randomAnalysisString(random(), 20, true), Field.Store.NO));\n        // TODO: sometimes update dv\n        try {\n          iw.addDocument(doc);\n        } catch (Exception e) {\n          if (e.getMessage() != null && e.getMessage().startsWith(\"Fake IOException\")) {\n            System.out.println(\"\\nTEST: got expected fake exc:\");\n            e.printStackTrace(exceptionStream);\n          } else {\n            Rethrow.rethrow(e);\n          }\n        }\n        if (random().nextInt(10) == 0) {\n          // trigger flush: TODO: sometimes reopen\n          try {\n            iw.commit();\n            if (DirectoryReader.indexExists(dir)) {\n              TestUtil.checkIndex(dir);\n            }\n          } catch (Exception e) {\n            if (e.getMessage() != null && e.getMessage().startsWith(\"Fake IOException\")) {\n              System.out.println(\"\\nTEST: got expected fake exc:\");\n              e.printStackTrace(exceptionStream);\n            } else {\n              Rethrow.rethrow(e);\n            }\n          }\n        }\n      }\n      \n      iw.close();\n      dir.close();\n    } catch (Throwable t) {\n      System.out.println(\"Unexpected exception: dumping fake-exception-log:...\");\n      exceptionStream.flush();\n      System.out.println(exceptionLog.toString(\"UTF-8\"));\n      System.out.flush();\n      Rethrow.rethrow(t);\n    }\n    \n    if (VERBOSE) {\n      System.out.println(\"TEST PASSED: dumping fake-exception-log:...\");\n      System.out.println(exceptionLog.toString(\"UTF-8\"));\n    }\n  }\n\n","sourceOld":"  // just one thread, serial merge policy, hopefully debuggable\n  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    \n    // log all exceptions we hit, in case we fail (for debugging)\n    ByteArrayOutputStream exceptionLog = new ByteArrayOutputStream();\n    PrintStream exceptionStream = new PrintStream(exceptionLog, true, \"UTF-8\");\n    \n    // create lots of non-aborting exceptions with a broken analyzer\n    final long analyzerSeed = random().nextLong();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        MockTokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, false);\n        tokenizer.setEnableChecks(false); // TODO: can we turn this on? our filter is probably too evil\n        TokenStream stream = new CrankyTokenFilter(tokenizer, new Random(analyzerSeed));\n        return new TokenStreamComponents(tokenizer, stream);\n      }\n    };\n    \n    // create lots of aborting exceptions with a broken codec\n    Codec codec = new CrankyCodec(Codec.getDefault(), new Random(random().nextLong()));\n    \n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    // just for now, try to keep this test reproducible\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    conf.setCodec(codec);\n    \n    // TODO: too much?\n    int numDocs = RANDOM_MULTIPLIER * 1000;\n    \n    IndexWriter iw = new IndexWriter(dir, conf);\n    try {\n      for (int i = 0; i < numDocs; i++) {\n        // TODO: add crankyDocValuesFields, etc\n        Document doc = new Document();\n        doc.add(newStringField(\"id\", Integer.toString(i), Field.Store.NO));\n        doc.add(new NumericDocValuesField(\"dv\", i));\n        doc.add(newTextField(\"text1\", TestUtil.randomAnalysisString(random(), 20, true), Field.Store.NO));\n        // TODO: sometimes update dv\n        try {\n          iw.addDocument(doc);\n        } catch (Exception e) {\n          if (e.getMessage() != null && e.getMessage().startsWith(\"Fake IOException\")) {\n            e.printStackTrace(exceptionStream);\n          } else {\n            Rethrow.rethrow(e);\n          }\n        }\n        if (random().nextInt(10) == 0) {\n          // trigger flush: TODO: sometimes reopen\n          try {\n            iw.commit();\n            if (DirectoryReader.indexExists(dir)) {\n              TestUtil.checkIndex(dir);\n            }\n          } catch (Exception e) {\n            if (e.getMessage() != null && e.getMessage().startsWith(\"Fake IOException\")) {\n              e.printStackTrace(exceptionStream);\n            } else {\n              Rethrow.rethrow(e);\n            }\n          }\n        }\n      }\n      \n      iw.close();\n      dir.close();\n    } catch (Throwable t) {\n      System.out.println(\"Unexpected exception: dumping fake-exception-log:...\");\n      exceptionStream.flush();\n      System.out.println(exceptionLog.toString(\"UTF-8\"));\n      System.out.flush();\n      Rethrow.rethrow(t);\n    }\n    \n    if (VERBOSE) {\n      System.out.println(\"TEST PASSED: dumping fake-exception-log:...\");\n      System.out.println(exceptionLog.toString(\"UTF-8\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cad80ff24d95dbb71faba82e66567438ceccc70b","date":1398951413,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions2#testSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions2#testSimple().mjava","sourceNew":"  // just one thread, serial merge policy, hopefully debuggable\n  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    \n    // log all exceptions we hit, in case we fail (for debugging)\n    ByteArrayOutputStream exceptionLog = new ByteArrayOutputStream();\n    PrintStream exceptionStream = new PrintStream(exceptionLog, true, \"UTF-8\");\n    \n    // create lots of non-aborting exceptions with a broken analyzer\n    final long analyzerSeed = random().nextLong();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        MockTokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, false);\n        tokenizer.setEnableChecks(false); // TODO: can we turn this on? our filter is probably too evil\n        TokenStream stream = new CrankyTokenFilter(tokenizer, new Random(analyzerSeed));\n        return new TokenStreamComponents(tokenizer, stream);\n      }\n    };\n    \n    // create lots of aborting exceptions with a broken codec\n    Codec codec = new CrankyCodec(Codec.getDefault(), new Random(random().nextLong()));\n    \n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    // just for now, try to keep this test reproducible\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    conf.setCodec(codec);\n    \n    // TODO: too much?\n    int numDocs = RANDOM_MULTIPLIER * 1000;\n    \n    IndexWriter iw = new IndexWriter(dir, conf);\n    try {\n      for (int i = 0; i < numDocs; i++) {\n        // TODO: add crankyDocValuesFields, etc\n        Document doc = new Document();\n        doc.add(newStringField(\"id\", Integer.toString(i), Field.Store.NO));\n        doc.add(new NumericDocValuesField(\"dv\", i));\n        doc.add(newTextField(\"text1\", TestUtil.randomAnalysisString(random(), 20, true), Field.Store.NO));\n        // TODO: sometimes update dv\n        try {\n          iw.addDocument(doc);\n        } catch (Exception e) {\n          if (e.getMessage() != null && e.getMessage().startsWith(\"Fake IOException\")) {\n            System.out.println(\"\\nTEST: got expected fake exc:\" + e.getMessage());\n            e.printStackTrace(exceptionStream);\n          } else {\n            Rethrow.rethrow(e);\n          }\n        }\n        if (random().nextInt(10) == 0) {\n          // trigger flush: TODO: sometimes reopen\n          try {\n            iw.commit();\n            if (DirectoryReader.indexExists(dir)) {\n              TestUtil.checkIndex(dir);\n            }\n          } catch (Exception e) {\n            if (e.getMessage() != null && e.getMessage().startsWith(\"Fake IOException\")) {\n              System.out.println(\"\\nTEST: got expected fake exc:\" + e.getMessage());\n              e.printStackTrace(exceptionStream);\n            } else {\n              Rethrow.rethrow(e);\n            }\n          }\n        }\n      }\n      \n      iw.close();\n      dir.close();\n    } catch (Throwable t) {\n      System.out.println(\"Unexpected exception: dumping fake-exception-log:...\");\n      exceptionStream.flush();\n      System.out.println(exceptionLog.toString(\"UTF-8\"));\n      System.out.flush();\n      Rethrow.rethrow(t);\n    }\n    \n    if (VERBOSE) {\n      System.out.println(\"TEST PASSED: dumping fake-exception-log:...\");\n      System.out.println(exceptionLog.toString(\"UTF-8\"));\n    }\n  }\n\n","sourceOld":"  // just one thread, serial merge policy, hopefully debuggable\n  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    \n    // log all exceptions we hit, in case we fail (for debugging)\n    ByteArrayOutputStream exceptionLog = new ByteArrayOutputStream();\n    PrintStream exceptionStream = new PrintStream(exceptionLog, true, \"UTF-8\");\n    \n    // create lots of non-aborting exceptions with a broken analyzer\n    final long analyzerSeed = random().nextLong();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        MockTokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, false);\n        tokenizer.setEnableChecks(false); // TODO: can we turn this on? our filter is probably too evil\n        TokenStream stream = new CrankyTokenFilter(tokenizer, new Random(analyzerSeed));\n        return new TokenStreamComponents(tokenizer, stream);\n      }\n    };\n    \n    // create lots of aborting exceptions with a broken codec\n    Codec codec = new CrankyCodec(Codec.getDefault(), new Random(random().nextLong()));\n    \n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    // just for now, try to keep this test reproducible\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    conf.setCodec(codec);\n    \n    // TODO: too much?\n    int numDocs = RANDOM_MULTIPLIER * 1000;\n    \n    IndexWriter iw = new IndexWriter(dir, conf);\n    try {\n      for (int i = 0; i < numDocs; i++) {\n        // TODO: add crankyDocValuesFields, etc\n        Document doc = new Document();\n        doc.add(newStringField(\"id\", Integer.toString(i), Field.Store.NO));\n        doc.add(new NumericDocValuesField(\"dv\", i));\n        doc.add(newTextField(\"text1\", TestUtil.randomAnalysisString(random(), 20, true), Field.Store.NO));\n        // TODO: sometimes update dv\n        try {\n          iw.addDocument(doc);\n        } catch (Exception e) {\n          if (e.getMessage() != null && e.getMessage().startsWith(\"Fake IOException\")) {\n            System.out.println(\"\\nTEST: got expected fake exc:\");\n            e.printStackTrace(exceptionStream);\n          } else {\n            Rethrow.rethrow(e);\n          }\n        }\n        if (random().nextInt(10) == 0) {\n          // trigger flush: TODO: sometimes reopen\n          try {\n            iw.commit();\n            if (DirectoryReader.indexExists(dir)) {\n              TestUtil.checkIndex(dir);\n            }\n          } catch (Exception e) {\n            if (e.getMessage() != null && e.getMessage().startsWith(\"Fake IOException\")) {\n              System.out.println(\"\\nTEST: got expected fake exc:\");\n              e.printStackTrace(exceptionStream);\n            } else {\n              Rethrow.rethrow(e);\n            }\n          }\n        }\n      }\n      \n      iw.close();\n      dir.close();\n    } catch (Throwable t) {\n      System.out.println(\"Unexpected exception: dumping fake-exception-log:...\");\n      exceptionStream.flush();\n      System.out.println(exceptionLog.toString(\"UTF-8\"));\n      System.out.flush();\n      Rethrow.rethrow(t);\n    }\n    \n    if (VERBOSE) {\n      System.out.println(\"TEST PASSED: dumping fake-exception-log:...\");\n      System.out.println(exceptionLog.toString(\"UTF-8\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9faf389ab9d81c698230fe7440282ed1a2972a8e","date":1398952146,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions2#testSimple().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions2#testSimple().mjava","sourceNew":"  // just one thread, serial merge policy, hopefully debuggable\n  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    \n    // log all exceptions we hit, in case we fail (for debugging)\n    ByteArrayOutputStream exceptionLog = new ByteArrayOutputStream();\n    PrintStream exceptionStream = new PrintStream(exceptionLog, true, \"UTF-8\");\n    \n    // create lots of non-aborting exceptions with a broken analyzer\n    final long analyzerSeed = random().nextLong();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        MockTokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, false);\n        tokenizer.setEnableChecks(false); // TODO: can we turn this on? our filter is probably too evil\n        TokenStream stream = new CrankyTokenFilter(tokenizer, new Random(analyzerSeed));\n        return new TokenStreamComponents(tokenizer, stream);\n      }\n    };\n    \n    // create lots of aborting exceptions with a broken codec\n    Codec codec = new CrankyCodec(Codec.getDefault(), new Random(random().nextLong()));\n    \n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    // just for now, try to keep this test reproducible\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    conf.setCodec(codec);\n    \n    // TODO: too much?\n    int numDocs = RANDOM_MULTIPLIER * 1000;\n    \n    IndexWriter iw = new IndexWriter(dir, conf);\n    try {\n      for (int i = 0; i < numDocs; i++) {\n        // TODO: add crankyDocValuesFields, etc\n        Document doc = new Document();\n        doc.add(newStringField(\"id\", Integer.toString(i), Field.Store.NO));\n        doc.add(new NumericDocValuesField(\"dv\", i));\n        doc.add(newTextField(\"text1\", TestUtil.randomAnalysisString(random(), 20, true), Field.Store.NO));\n        // TODO: sometimes update dv\n        try {\n          iw.addDocument(doc);\n        } catch (Exception e) {\n          if (e.getMessage() != null && e.getMessage().startsWith(\"Fake IOException\")) {\n            System.out.println(\"\\nTEST: got expected fake exc:\" + e.getMessage());\n            e.printStackTrace(exceptionStream);\n          } else {\n            Rethrow.rethrow(e);\n          }\n        }\n        if (random().nextInt(10) == 0) {\n          // trigger flush: TODO: sometimes reopen\n          try {\n            iw.commit();\n            if (DirectoryReader.indexExists(dir)) {\n              TestUtil.checkIndex(dir);\n            }\n          } catch (Exception e) {\n            if (e.getMessage() != null && e.getMessage().startsWith(\"Fake IOException\")) {\n              System.out.println(\"\\nTEST: got expected fake exc:\" + e.getMessage());\n              e.printStackTrace(exceptionStream);\n            } else {\n              Rethrow.rethrow(e);\n            }\n          }\n        }\n      }\n      \n      try {\n        iw.shutdown();\n      } catch (Exception e) {\n        if (e.getMessage() != null && e.getMessage().startsWith(\"Fake IOException\")) {\n          System.out.println(\"\\nTEST: got expected fake exc:\" + e.getMessage());\n          e.printStackTrace(exceptionStream);\n          try {\n            iw.rollback();\n          } catch (Throwable t) {}\n        } else {\n          Rethrow.rethrow(e);\n        }\n      }\n      dir.close();\n    } catch (Throwable t) {\n      System.out.println(\"Unexpected exception: dumping fake-exception-log:...\");\n      exceptionStream.flush();\n      System.out.println(exceptionLog.toString(\"UTF-8\"));\n      System.out.flush();\n      Rethrow.rethrow(t);\n    }\n    \n    if (VERBOSE) {\n      System.out.println(\"TEST PASSED: dumping fake-exception-log:...\");\n      System.out.println(exceptionLog.toString(\"UTF-8\"));\n    }\n  }\n\n","sourceOld":"  // just one thread, serial merge policy, hopefully debuggable\n  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    \n    // log all exceptions we hit, in case we fail (for debugging)\n    ByteArrayOutputStream exceptionLog = new ByteArrayOutputStream();\n    PrintStream exceptionStream = new PrintStream(exceptionLog, true, \"UTF-8\");\n    \n    // create lots of non-aborting exceptions with a broken analyzer\n    final long analyzerSeed = random().nextLong();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        MockTokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, false);\n        tokenizer.setEnableChecks(false); // TODO: can we turn this on? our filter is probably too evil\n        TokenStream stream = new CrankyTokenFilter(tokenizer, new Random(analyzerSeed));\n        return new TokenStreamComponents(tokenizer, stream);\n      }\n    };\n    \n    // create lots of aborting exceptions with a broken codec\n    Codec codec = new CrankyCodec(Codec.getDefault(), new Random(random().nextLong()));\n    \n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    // just for now, try to keep this test reproducible\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    conf.setCodec(codec);\n    \n    // TODO: too much?\n    int numDocs = RANDOM_MULTIPLIER * 1000;\n    \n    IndexWriter iw = new IndexWriter(dir, conf);\n    try {\n      for (int i = 0; i < numDocs; i++) {\n        // TODO: add crankyDocValuesFields, etc\n        Document doc = new Document();\n        doc.add(newStringField(\"id\", Integer.toString(i), Field.Store.NO));\n        doc.add(new NumericDocValuesField(\"dv\", i));\n        doc.add(newTextField(\"text1\", TestUtil.randomAnalysisString(random(), 20, true), Field.Store.NO));\n        // TODO: sometimes update dv\n        try {\n          iw.addDocument(doc);\n        } catch (Exception e) {\n          if (e.getMessage() != null && e.getMessage().startsWith(\"Fake IOException\")) {\n            System.out.println(\"\\nTEST: got expected fake exc:\" + e.getMessage());\n            e.printStackTrace(exceptionStream);\n          } else {\n            Rethrow.rethrow(e);\n          }\n        }\n        if (random().nextInt(10) == 0) {\n          // trigger flush: TODO: sometimes reopen\n          try {\n            iw.commit();\n            if (DirectoryReader.indexExists(dir)) {\n              TestUtil.checkIndex(dir);\n            }\n          } catch (Exception e) {\n            if (e.getMessage() != null && e.getMessage().startsWith(\"Fake IOException\")) {\n              System.out.println(\"\\nTEST: got expected fake exc:\" + e.getMessage());\n              e.printStackTrace(exceptionStream);\n            } else {\n              Rethrow.rethrow(e);\n            }\n          }\n        }\n      }\n      \n      iw.close();\n      dir.close();\n    } catch (Throwable t) {\n      System.out.println(\"Unexpected exception: dumping fake-exception-log:...\");\n      exceptionStream.flush();\n      System.out.println(exceptionLog.toString(\"UTF-8\"));\n      System.out.flush();\n      Rethrow.rethrow(t);\n    }\n    \n    if (VERBOSE) {\n      System.out.println(\"TEST PASSED: dumping fake-exception-log:...\");\n      System.out.println(exceptionLog.toString(\"UTF-8\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7afb64ff3a701f68b2689cafff6c5bdeb4f67f63","date":1398957288,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions2#testBasics().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions2#testSimple().mjava","sourceNew":"  // just one thread, serial merge policy, hopefully debuggable\n  public void testBasics() throws Exception {\n    Directory dir = newDirectory();\n    \n    // log all exceptions we hit, in case we fail (for debugging)\n    ByteArrayOutputStream exceptionLog = new ByteArrayOutputStream();\n    PrintStream exceptionStream = new PrintStream(exceptionLog, true, \"UTF-8\");\n    //PrintStream exceptionStream = System.out;\n    \n    // create lots of non-aborting exceptions with a broken analyzer\n    final long analyzerSeed = random().nextLong();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        MockTokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, false);\n        tokenizer.setEnableChecks(false); // TODO: can we turn this on? our filter is probably too evil\n        TokenStream stream = new CrankyTokenFilter(tokenizer, new Random(analyzerSeed));\n        return new TokenStreamComponents(tokenizer, stream);\n      }\n    };\n    \n    // create lots of aborting exceptions with a broken codec\n    Codec codec = new CrankyCodec(Codec.getDefault(), new Random(random().nextLong()));\n    \n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    // just for now, try to keep this test reproducible\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    conf.setCodec(codec);\n    \n    // TODO: too much?\n    int numDocs = RANDOM_MULTIPLIER * 1000;\n    \n    IndexWriter iw = new IndexWriter(dir, conf);\n    try {\n      for (int i = 0; i < numDocs; i++) {\n        // TODO: add crankyDocValuesFields, etc\n        Document doc = new Document();\n        doc.add(newStringField(\"id\", Integer.toString(i), Field.Store.NO));\n        doc.add(new NumericDocValuesField(\"dv\", i));\n        doc.add(newTextField(\"text1\", TestUtil.randomAnalysisString(random(), 20, true), Field.Store.NO));\n        // TODO: sometimes update dv\n        try {\n          iw.addDocument(doc);\n        } catch (Exception e) {\n          if (e.getMessage() != null && e.getMessage().startsWith(\"Fake IOException\")) {\n            exceptionStream.println(\"\\nTEST: got expected fake exc:\" + e.getMessage());\n            e.printStackTrace(exceptionStream);\n          } else {\n            Rethrow.rethrow(e);\n          }\n        }\n        if (random().nextInt(10) == 0) {\n          // trigger flush: TODO: sometimes reopen\n          try {\n            iw.commit();\n            if (DirectoryReader.indexExists(dir)) {\n              TestUtil.checkIndex(dir);\n            }\n          } catch (Exception e) {\n            if (e.getMessage() != null && e.getMessage().startsWith(\"Fake IOException\")) {\n              exceptionStream.println(\"\\nTEST: got expected fake exc:\" + e.getMessage());\n              e.printStackTrace(exceptionStream);\n            } else {\n              Rethrow.rethrow(e);\n            }\n          }\n        }\n      }\n      \n      try {\n        iw.shutdown();\n      } catch (Exception e) {\n        if (e.getMessage() != null && e.getMessage().startsWith(\"Fake IOException\")) {\n          System.out.println(\"\\nTEST: got expected fake exc:\" + e.getMessage());\n          e.printStackTrace(exceptionStream);\n          try {\n            iw.rollback();\n          } catch (Throwable t) {}\n        } else {\n          Rethrow.rethrow(e);\n        }\n      }\n      dir.close();\n    } catch (Throwable t) {\n      System.out.println(\"Unexpected exception: dumping fake-exception-log:...\");\n      exceptionStream.flush();\n      System.out.println(exceptionLog.toString(\"UTF-8\"));\n      System.out.flush();\n      Rethrow.rethrow(t);\n    }\n    \n    if (VERBOSE) {\n      System.out.println(\"TEST PASSED: dumping fake-exception-log:...\");\n      System.out.println(exceptionLog.toString(\"UTF-8\"));\n    }\n  }\n\n","sourceOld":"  // just one thread, serial merge policy, hopefully debuggable\n  public void testSimple() throws Exception {\n    Directory dir = newDirectory();\n    \n    // log all exceptions we hit, in case we fail (for debugging)\n    ByteArrayOutputStream exceptionLog = new ByteArrayOutputStream();\n    PrintStream exceptionStream = new PrintStream(exceptionLog, true, \"UTF-8\");\n    \n    // create lots of non-aborting exceptions with a broken analyzer\n    final long analyzerSeed = random().nextLong();\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        MockTokenizer tokenizer = new MockTokenizer(MockTokenizer.SIMPLE, false);\n        tokenizer.setEnableChecks(false); // TODO: can we turn this on? our filter is probably too evil\n        TokenStream stream = new CrankyTokenFilter(tokenizer, new Random(analyzerSeed));\n        return new TokenStreamComponents(tokenizer, stream);\n      }\n    };\n    \n    // create lots of aborting exceptions with a broken codec\n    Codec codec = new CrankyCodec(Codec.getDefault(), new Random(random().nextLong()));\n    \n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    // just for now, try to keep this test reproducible\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    conf.setCodec(codec);\n    \n    // TODO: too much?\n    int numDocs = RANDOM_MULTIPLIER * 1000;\n    \n    IndexWriter iw = new IndexWriter(dir, conf);\n    try {\n      for (int i = 0; i < numDocs; i++) {\n        // TODO: add crankyDocValuesFields, etc\n        Document doc = new Document();\n        doc.add(newStringField(\"id\", Integer.toString(i), Field.Store.NO));\n        doc.add(new NumericDocValuesField(\"dv\", i));\n        doc.add(newTextField(\"text1\", TestUtil.randomAnalysisString(random(), 20, true), Field.Store.NO));\n        // TODO: sometimes update dv\n        try {\n          iw.addDocument(doc);\n        } catch (Exception e) {\n          if (e.getMessage() != null && e.getMessage().startsWith(\"Fake IOException\")) {\n            System.out.println(\"\\nTEST: got expected fake exc:\" + e.getMessage());\n            e.printStackTrace(exceptionStream);\n          } else {\n            Rethrow.rethrow(e);\n          }\n        }\n        if (random().nextInt(10) == 0) {\n          // trigger flush: TODO: sometimes reopen\n          try {\n            iw.commit();\n            if (DirectoryReader.indexExists(dir)) {\n              TestUtil.checkIndex(dir);\n            }\n          } catch (Exception e) {\n            if (e.getMessage() != null && e.getMessage().startsWith(\"Fake IOException\")) {\n              System.out.println(\"\\nTEST: got expected fake exc:\" + e.getMessage());\n              e.printStackTrace(exceptionStream);\n            } else {\n              Rethrow.rethrow(e);\n            }\n          }\n        }\n      }\n      \n      try {\n        iw.shutdown();\n      } catch (Exception e) {\n        if (e.getMessage() != null && e.getMessage().startsWith(\"Fake IOException\")) {\n          System.out.println(\"\\nTEST: got expected fake exc:\" + e.getMessage());\n          e.printStackTrace(exceptionStream);\n          try {\n            iw.rollback();\n          } catch (Throwable t) {}\n        } else {\n          Rethrow.rethrow(e);\n        }\n      }\n      dir.close();\n    } catch (Throwable t) {\n      System.out.println(\"Unexpected exception: dumping fake-exception-log:...\");\n      exceptionStream.flush();\n      System.out.println(exceptionLog.toString(\"UTF-8\"));\n      System.out.flush();\n      Rethrow.rethrow(t);\n    }\n    \n    if (VERBOSE) {\n      System.out.println(\"TEST PASSED: dumping fake-exception-log:...\");\n      System.out.println(exceptionLog.toString(\"UTF-8\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7afb64ff3a701f68b2689cafff6c5bdeb4f67f63":["9faf389ab9d81c698230fe7440282ed1a2972a8e"],"cad80ff24d95dbb71faba82e66567438ceccc70b":["0df8dc2b1b5d46ee1c50df0d9402e8512b46d14e"],"0df8dc2b1b5d46ee1c50df0d9402e8512b46d14e":["4e8947bb335882c059bedf21cdadc06a26c922b0"],"4e8947bb335882c059bedf21cdadc06a26c922b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9faf389ab9d81c698230fe7440282ed1a2972a8e":["cad80ff24d95dbb71faba82e66567438ceccc70b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7afb64ff3a701f68b2689cafff6c5bdeb4f67f63"]},"commit2Childs":{"7afb64ff3a701f68b2689cafff6c5bdeb4f67f63":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cad80ff24d95dbb71faba82e66567438ceccc70b":["9faf389ab9d81c698230fe7440282ed1a2972a8e"],"0df8dc2b1b5d46ee1c50df0d9402e8512b46d14e":["cad80ff24d95dbb71faba82e66567438ceccc70b"],"4e8947bb335882c059bedf21cdadc06a26c922b0":["0df8dc2b1b5d46ee1c50df0d9402e8512b46d14e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4e8947bb335882c059bedf21cdadc06a26c922b0"],"9faf389ab9d81c698230fe7440282ed1a2972a8e":["7afb64ff3a701f68b2689cafff6c5bdeb4f67f63"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}