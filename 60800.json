{"path":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetsStatsParsing#testEquality().mjava","commits":[{"id":"d3baf591292785743bfb1fdd65256a3fe5feab71","date":1532454229,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetsStatsParsing#testEquality().mjava","pathOld":"/dev/null","sourceNew":"  public void testEquality() throws IOException {\n    try (SolrQueryRequest req = req(\"custom_req_param\",\"foo_i\",\n                                    \"overridden_param\",\"xxxxx_i\")) {\n      \n      // NOTE: we don't bother trying to test 'min(foo_i)' because of SOLR-12559\n      // ...once that bug is fixed, several assertions below will need to change\n      final FacetRequest fr = FacetRequest.parse\n        (req, (Map<String,Object>) ObjectBuilder.fromJSON\n         (\"{ \" +\n          \"  s1:'min(field(\\\"foo_i\\\"))', \" +\n          \"  s2:'min($custom_req_param)', \" +\n          \"  s3:'min(field($custom_req_param))', \" +\n          \"  s4:{ func:'min($custom_req_param)' }, \" +\n          \"  s5:{ type:func, func:'min($custom_req_param)' }, \" +\n          \"  s6:{ type:func, func:'min($custom_local_param)', custom_local_param:foo_i }, \" +\n          \"  s7:{ type:func, func:'min($overridden_param)', overridden_param:foo_i }, \" +\n          // test the test...\n          \"  diff:'min(field(\\\"bar_i\\\"))',\" +\n          \"}\"));\n         \n      final Map<String, AggValueSource> stats = fr.getFacetStats();\n      assertEquals(8, stats.size());\n      \n      for (Map.Entry<String,AggValueSource> entry : stats.entrySet()) {\n        final String key = entry.getKey();\n        final AggValueSource agg = entry.getValue();\n        \n        assertEquals(\"name of \" + key, \"min\", agg.name());\n        assertThat(\"type of \" + key, agg, instanceOf(SimpleAggValueSource.class));\n        SimpleAggValueSource sagg = (SimpleAggValueSource) agg;\n        assertThat(\"vs of \" + key, sagg.getArg(), instanceOf(IntFieldSource.class));\n        \n        if (\"diff\".equals(key)) {\n          assertEquals(\"field of \" + key, \"bar_i\", ((IntFieldSource)sagg.getArg()).getField());\n          assertFalse(\"diff.equals(s1) ?!?!\", agg.equals(stats.get(\"s1\")));\n          \n        } else {\n          assertEquals(\"field of \" + key, \"foo_i\", ((IntFieldSource)sagg.getArg()).getField());\n          \n          assertEquals(key + \".equals(s1)\", agg, stats.get(\"s1\"));\n          assertEquals(\"s1.equals(\"+key+\")\", stats.get(\"s1\"), agg);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3714bcf66a68a1600e9dd11442fc1b33b62ef088","date":1556832005,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetsStatsParsing#testEquality().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetsStatsParsing#testEquality().mjava","sourceNew":"  public void testEquality() throws IOException {\n    try (SolrQueryRequest req = req(\"custom_req_param\",\"foo_i\",\n                                    \"overridden_param\",\"xxxxx_i\")) {\n      \n      // NOTE: we don't bother trying to test 'min(foo_i)' because of SOLR-12559\n      // ...once that bug is fixed, several assertions below will need to change\n      final FacetRequest fr = FacetRequest.parse\n        (req, (Map<String,Object>) Utils.fromJSONString\n         (\"{ \" +\n          \"  s1:'min(field(\\\"foo_i\\\"))', \" +\n          \"  s2:'min($custom_req_param)', \" +\n          \"  s3:'min(field($custom_req_param))', \" +\n          \"  s4:{ func:'min($custom_req_param)' }, \" +\n          \"  s5:{ type:func, func:'min($custom_req_param)' }, \" +\n          \"  s6:{ type:func, func:'min($custom_local_param)', custom_local_param:foo_i }, \" +\n          \"  s7:{ type:func, func:'min($overridden_param)', overridden_param:foo_i }, \" +\n          // test the test...\n          \"  diff:'min(field(\\\"bar_i\\\"))',\" +\n          \"}\"));\n         \n      final Map<String, AggValueSource> stats = fr.getFacetStats();\n      assertEquals(8, stats.size());\n      \n      for (Map.Entry<String,AggValueSource> entry : stats.entrySet()) {\n        final String key = entry.getKey();\n        final AggValueSource agg = entry.getValue();\n        \n        assertEquals(\"name of \" + key, \"min\", agg.name());\n        assertThat(\"type of \" + key, agg, instanceOf(SimpleAggValueSource.class));\n        SimpleAggValueSource sagg = (SimpleAggValueSource) agg;\n        assertThat(\"vs of \" + key, sagg.getArg(), instanceOf(IntFieldSource.class));\n        \n        if (\"diff\".equals(key)) {\n          assertEquals(\"field of \" + key, \"bar_i\", ((IntFieldSource)sagg.getArg()).getField());\n          assertFalse(\"diff.equals(s1) ?!?!\", agg.equals(stats.get(\"s1\")));\n          \n        } else {\n          assertEquals(\"field of \" + key, \"foo_i\", ((IntFieldSource)sagg.getArg()).getField());\n          \n          assertEquals(key + \".equals(s1)\", agg, stats.get(\"s1\"));\n          assertEquals(\"s1.equals(\"+key+\")\", stats.get(\"s1\"), agg);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testEquality() throws IOException {\n    try (SolrQueryRequest req = req(\"custom_req_param\",\"foo_i\",\n                                    \"overridden_param\",\"xxxxx_i\")) {\n      \n      // NOTE: we don't bother trying to test 'min(foo_i)' because of SOLR-12559\n      // ...once that bug is fixed, several assertions below will need to change\n      final FacetRequest fr = FacetRequest.parse\n        (req, (Map<String,Object>) ObjectBuilder.fromJSON\n         (\"{ \" +\n          \"  s1:'min(field(\\\"foo_i\\\"))', \" +\n          \"  s2:'min($custom_req_param)', \" +\n          \"  s3:'min(field($custom_req_param))', \" +\n          \"  s4:{ func:'min($custom_req_param)' }, \" +\n          \"  s5:{ type:func, func:'min($custom_req_param)' }, \" +\n          \"  s6:{ type:func, func:'min($custom_local_param)', custom_local_param:foo_i }, \" +\n          \"  s7:{ type:func, func:'min($overridden_param)', overridden_param:foo_i }, \" +\n          // test the test...\n          \"  diff:'min(field(\\\"bar_i\\\"))',\" +\n          \"}\"));\n         \n      final Map<String, AggValueSource> stats = fr.getFacetStats();\n      assertEquals(8, stats.size());\n      \n      for (Map.Entry<String,AggValueSource> entry : stats.entrySet()) {\n        final String key = entry.getKey();\n        final AggValueSource agg = entry.getValue();\n        \n        assertEquals(\"name of \" + key, \"min\", agg.name());\n        assertThat(\"type of \" + key, agg, instanceOf(SimpleAggValueSource.class));\n        SimpleAggValueSource sagg = (SimpleAggValueSource) agg;\n        assertThat(\"vs of \" + key, sagg.getArg(), instanceOf(IntFieldSource.class));\n        \n        if (\"diff\".equals(key)) {\n          assertEquals(\"field of \" + key, \"bar_i\", ((IntFieldSource)sagg.getArg()).getField());\n          assertFalse(\"diff.equals(s1) ?!?!\", agg.equals(stats.get(\"s1\")));\n          \n        } else {\n          assertEquals(\"field of \" + key, \"foo_i\", ((IntFieldSource)sagg.getArg()).getField());\n          \n          assertEquals(key + \".equals(s1)\", agg, stats.get(\"s1\"));\n          assertEquals(\"s1.equals(\"+key+\")\", stats.get(\"s1\"), agg);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetsStatsParsing#testEquality().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetsStatsParsing#testEquality().mjava","sourceNew":"  public void testEquality() throws IOException {\n    try (SolrQueryRequest req = req(\"custom_req_param\",\"foo_i\",\n                                    \"overridden_param\",\"xxxxx_i\")) {\n      \n      // NOTE: we don't bother trying to test 'min(foo_i)' because of SOLR-12559\n      // ...once that bug is fixed, several assertions below will need to change\n      @SuppressWarnings({\"unchecked\"})\n      final FacetRequest fr = FacetRequest.parse\n        (req, (Map<String,Object>) Utils.fromJSONString\n         (\"{ \" +\n          \"  s1:'min(field(\\\"foo_i\\\"))', \" +\n          \"  s2:'min($custom_req_param)', \" +\n          \"  s3:'min(field($custom_req_param))', \" +\n          \"  s4:{ func:'min($custom_req_param)' }, \" +\n          \"  s5:{ type:func, func:'min($custom_req_param)' }, \" +\n          \"  s6:{ type:func, func:'min($custom_local_param)', custom_local_param:foo_i }, \" +\n          \"  s7:{ type:func, func:'min($overridden_param)', overridden_param:foo_i }, \" +\n          // test the test...\n          \"  diff:'min(field(\\\"bar_i\\\"))',\" +\n          \"}\"));\n         \n      final Map<String, AggValueSource> stats = fr.getFacetStats();\n      assertEquals(8, stats.size());\n      \n      for (Map.Entry<String,AggValueSource> entry : stats.entrySet()) {\n        final String key = entry.getKey();\n        final AggValueSource agg = entry.getValue();\n        \n        assertEquals(\"name of \" + key, \"min\", agg.name());\n        assertThat(\"type of \" + key, agg, instanceOf(SimpleAggValueSource.class));\n        SimpleAggValueSource sagg = (SimpleAggValueSource) agg;\n        assertThat(\"vs of \" + key, sagg.getArg(), instanceOf(IntFieldSource.class));\n        \n        if (\"diff\".equals(key)) {\n          assertEquals(\"field of \" + key, \"bar_i\", ((IntFieldSource)sagg.getArg()).getField());\n          assertFalse(\"diff.equals(s1) ?!?!\", agg.equals(stats.get(\"s1\")));\n          \n        } else {\n          assertEquals(\"field of \" + key, \"foo_i\", ((IntFieldSource)sagg.getArg()).getField());\n          \n          assertEquals(key + \".equals(s1)\", agg, stats.get(\"s1\"));\n          assertEquals(\"s1.equals(\"+key+\")\", stats.get(\"s1\"), agg);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testEquality() throws IOException {\n    try (SolrQueryRequest req = req(\"custom_req_param\",\"foo_i\",\n                                    \"overridden_param\",\"xxxxx_i\")) {\n      \n      // NOTE: we don't bother trying to test 'min(foo_i)' because of SOLR-12559\n      // ...once that bug is fixed, several assertions below will need to change\n      final FacetRequest fr = FacetRequest.parse\n        (req, (Map<String,Object>) Utils.fromJSONString\n         (\"{ \" +\n          \"  s1:'min(field(\\\"foo_i\\\"))', \" +\n          \"  s2:'min($custom_req_param)', \" +\n          \"  s3:'min(field($custom_req_param))', \" +\n          \"  s4:{ func:'min($custom_req_param)' }, \" +\n          \"  s5:{ type:func, func:'min($custom_req_param)' }, \" +\n          \"  s6:{ type:func, func:'min($custom_local_param)', custom_local_param:foo_i }, \" +\n          \"  s7:{ type:func, func:'min($overridden_param)', overridden_param:foo_i }, \" +\n          // test the test...\n          \"  diff:'min(field(\\\"bar_i\\\"))',\" +\n          \"}\"));\n         \n      final Map<String, AggValueSource> stats = fr.getFacetStats();\n      assertEquals(8, stats.size());\n      \n      for (Map.Entry<String,AggValueSource> entry : stats.entrySet()) {\n        final String key = entry.getKey();\n        final AggValueSource agg = entry.getValue();\n        \n        assertEquals(\"name of \" + key, \"min\", agg.name());\n        assertThat(\"type of \" + key, agg, instanceOf(SimpleAggValueSource.class));\n        SimpleAggValueSource sagg = (SimpleAggValueSource) agg;\n        assertThat(\"vs of \" + key, sagg.getArg(), instanceOf(IntFieldSource.class));\n        \n        if (\"diff\".equals(key)) {\n          assertEquals(\"field of \" + key, \"bar_i\", ((IntFieldSource)sagg.getArg()).getField());\n          assertFalse(\"diff.equals(s1) ?!?!\", agg.equals(stats.get(\"s1\")));\n          \n        } else {\n          assertEquals(\"field of \" + key, \"foo_i\", ((IntFieldSource)sagg.getArg()).getField());\n          \n          assertEquals(key + \".equals(s1)\", agg, stats.get(\"s1\"));\n          assertEquals(\"s1.equals(\"+key+\")\", stats.get(\"s1\"), agg);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d3baf591292785743bfb1fdd65256a3fe5feab71":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["d3baf591292785743bfb1fdd65256a3fe5feab71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3baf591292785743bfb1fdd65256a3fe5feab71"],"d3baf591292785743bfb1fdd65256a3fe5feab71":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["e98520789adb1d5ad05afb4956eca0944a929688"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}