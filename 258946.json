{"path":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms.MyTokenStream#incrementToken().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms.MyTokenStream#incrementToken().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/Test2BTerms.MyTokenStream#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() {\n      if (tokenCount >= tokensPerDoc) {\n        return false;\n      }\n      random.nextBytes(bytes.bytes);\n      tokenCount++;\n      if (--nextSave == 0) {\n        savedTerms.add(BytesRef.deepCopyOf(bytes));\n        System.out.println(\"TEST: save term=\" + bytes);\n        nextSave = _TestUtil.nextInt(random, 500000, 1000000);\n      }\n      return true;\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() {\n      if (tokenCount >= tokensPerDoc) {\n        return false;\n      }\n      random.nextBytes(bytes.bytes);\n      tokenCount++;\n      if (--nextSave == 0) {\n        savedTerms.add(BytesRef.deepCopyOf(bytes));\n        System.out.println(\"TEST: save term=\" + bytes);\n        nextSave = _TestUtil.nextInt(random, 500000, 1000000);\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms.MyTokenStream#incrementToken().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms.MyTokenStream#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() {\n      if (tokenCount >= tokensPerDoc) {\n        return false;\n      }\n      random.nextBytes(bytes.bytes);\n      tokenCount++;\n      if (--nextSave == 0) {\n        savedTerms.add(BytesRef.deepCopyOf(bytes));\n        System.out.println(\"TEST: save term=\" + bytes);\n        nextSave = TestUtil.nextInt(random, 500000, 1000000);\n      }\n      return true;\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() {\n      if (tokenCount >= tokensPerDoc) {\n        return false;\n      }\n      random.nextBytes(bytes.bytes);\n      tokenCount++;\n      if (--nextSave == 0) {\n        savedTerms.add(BytesRef.deepCopyOf(bytes));\n        System.out.println(\"TEST: save term=\" + bytes);\n        nextSave = _TestUtil.nextInt(random, 500000, 1000000);\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a442c93371e04bc15f485fa6db34ad61fd854fc","date":1397588144,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms.MyTokenStream#incrementToken().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BTerms.MyTokenStream#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() {\n      clearAttributes();\n      if (tokenCount >= tokensPerDoc) {\n        return false;\n      }\n      int shift = 32;\n      for(int i=0;i<5;i++) {\n        bytes.bytes[i] = (byte) ((termCounter >> shift) & 0xFF);\n        shift -= 8;\n      }\n      termCounter++;\n      tokenCount++;\n      if (--nextSave == 0) {\n        savedTerms.add(BytesRef.deepCopyOf(bytes));\n        System.out.println(\"TEST: save term=\" + bytes);\n        nextSave = TestUtil.nextInt(random, 500000, 1000000);\n      }\n      return true;\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() {\n      if (tokenCount >= tokensPerDoc) {\n        return false;\n      }\n      random.nextBytes(bytes.bytes);\n      tokenCount++;\n      if (--nextSave == 0) {\n        savedTerms.add(BytesRef.deepCopyOf(bytes));\n        System.out.println(\"TEST: save term=\" + bytes);\n        nextSave = TestUtil.nextInt(random, 500000, 1000000);\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9a442c93371e04bc15f485fa6db34ad61fd854fc":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9a442c93371e04bc15f485fa6db34ad61fd854fc"]},"commit2Childs":{"9a442c93371e04bc15f485fa6db34ad61fd854fc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6613659748fe4411a7dcf85266e55db1f95f7315":["9a442c93371e04bc15f485fa6db34ad61fd854fc"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["6613659748fe4411a7dcf85266e55db1f95f7315"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}