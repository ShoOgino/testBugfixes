{"path":"solr/contrib/ltr/src/java/org/apache/solr/ltr/LTRThreadModule#extractThreadModuleParams(NamedList).mjava","commits":[{"id":"58c36d634c9789cb739fbd175c1a8d50b3303f6b","date":1478022614,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/LTRThreadModule#extractThreadModuleParams(NamedList).mjava","pathOld":"/dev/null","sourceNew":"  private static NamedList extractThreadModuleParams(NamedList args) {\n\n    // gather the thread module args from amongst the general args\n    final NamedList extractedArgs = new NamedList();\n    for (Iterator<Map.Entry<String,Object>> it = args.iterator();\n        it.hasNext(); ) {\n      final Map.Entry<String,Object> entry = it.next();\n      final String key = entry.getKey();\n      if (key.startsWith(CONFIG_PREFIX)) {\n        extractedArgs.add(key.substring(CONFIG_PREFIX.length()), entry.getValue());\n      }\n    }\n\n    // remove consumed keys only once iteration is complete\n    // since NamedList iterator does not support 'remove'\n    for (Object key : extractedArgs.asShallowMap().keySet()) {\n      args.remove(CONFIG_PREFIX+key);\n    }\n\n    return extractedArgs;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9720b151fde2073f4e401450f4574e5f31c2d0ff","date":1478184029,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/LTRThreadModule#extractThreadModuleParams(NamedList).mjava","pathOld":"/dev/null","sourceNew":"  private static NamedList extractThreadModuleParams(NamedList args) {\n\n    // gather the thread module args from amongst the general args\n    final NamedList extractedArgs = new NamedList();\n    for (Iterator<Map.Entry<String,Object>> it = args.iterator();\n        it.hasNext(); ) {\n      final Map.Entry<String,Object> entry = it.next();\n      final String key = entry.getKey();\n      if (key.startsWith(CONFIG_PREFIX)) {\n        extractedArgs.add(key.substring(CONFIG_PREFIX.length()), entry.getValue());\n      }\n    }\n\n    // remove consumed keys only once iteration is complete\n    // since NamedList iterator does not support 'remove'\n    for (Object key : extractedArgs.asShallowMap().keySet()) {\n      args.remove(CONFIG_PREFIX+key);\n    }\n\n    return extractedArgs;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19eeb5bbd032a02cb82a253c4c9ae35863ea2dc","date":1591973782,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/LTRThreadModule#extractThreadModuleParams(NamedList).mjava","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/ltr/LTRThreadModule#extractThreadModuleParams(NamedList).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private static NamedList extractThreadModuleParams(NamedList args) {\n\n    // gather the thread module args from amongst the general args\n    final NamedList extractedArgs = new NamedList();\n    for (Iterator<Map.Entry<String,Object>> it = args.iterator();\n        it.hasNext(); ) {\n      final Map.Entry<String,Object> entry = it.next();\n      final String key = entry.getKey();\n      if (key.startsWith(CONFIG_PREFIX)) {\n        extractedArgs.add(key.substring(CONFIG_PREFIX.length()), entry.getValue());\n      }\n    }\n\n    // remove consumed keys only once iteration is complete\n    // since NamedList iterator does not support 'remove'\n    for (Object key : extractedArgs.asShallowMap().keySet()) {\n      args.remove(CONFIG_PREFIX+key);\n    }\n\n    return extractedArgs;\n  }\n\n","sourceOld":"  private static NamedList extractThreadModuleParams(NamedList args) {\n\n    // gather the thread module args from amongst the general args\n    final NamedList extractedArgs = new NamedList();\n    for (Iterator<Map.Entry<String,Object>> it = args.iterator();\n        it.hasNext(); ) {\n      final Map.Entry<String,Object> entry = it.next();\n      final String key = entry.getKey();\n      if (key.startsWith(CONFIG_PREFIX)) {\n        extractedArgs.add(key.substring(CONFIG_PREFIX.length()), entry.getValue());\n      }\n    }\n\n    // remove consumed keys only once iteration is complete\n    // since NamedList iterator does not support 'remove'\n    for (Object key : extractedArgs.asShallowMap().keySet()) {\n      args.remove(CONFIG_PREFIX+key);\n    }\n\n    return extractedArgs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c19eeb5bbd032a02cb82a253c4c9ae35863ea2dc":["58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c19eeb5bbd032a02cb82a253c4c9ae35863ea2dc"]},"commit2Childs":{"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["9720b151fde2073f4e401450f4574e5f31c2d0ff","c19eeb5bbd032a02cb82a253c4c9ae35863ea2dc"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58c36d634c9789cb739fbd175c1a8d50b3303f6b","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"c19eeb5bbd032a02cb82a253c4c9ae35863ea2dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9720b151fde2073f4e401450f4574e5f31c2d0ff","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}