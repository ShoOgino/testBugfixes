{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/XdYdZSolid#XdYdZSolid(PlanetModel,double,double,double,double).mjava","commits":[{"id":"b4e444678504caf66a8060b1d514383aa4feac0c","date":1457399659,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/XdYdZSolid#XdYdZSolid(PlanetModel,double,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/XdYdZSolid#XdYdZSolid(PlanetModel,double,double,double,double).mjava","sourceNew":"  /**\n   * Sole constructor\n   *\n   *@param planetModel is the planet model.\n   *@param minX is the minimum X value.\n   *@param maxX is the maximum X value.\n   *@param Y is the Y value.\n   *@param Z is the Z value.\n   */\n  public XdYdZSolid(final PlanetModel planetModel,\n    final double minX,\n    final double maxX,\n    final double Y,\n    final double Z) {\n    super(planetModel);\n    // Argument checking\n    if (maxX - minX < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"X values in wrong order or identical\");\n\n    // Build the planes and intersect them.\n    final Plane yPlane = new Plane(yUnitVector,-Y);\n    final Plane zPlane = new Plane(zUnitVector,-Z);\n    final SidedPlane minXPlane = new SidedPlane(maxX,0.0,0.0,xUnitVector,-minX);\n    final SidedPlane maxXPlane = new SidedPlane(minX,0.0,0.0,xUnitVector,-maxX);\n    surfacePoints = yPlane.findIntersections(planetModel,zPlane,minXPlane,maxXPlane);\n  }\n\n","sourceOld":"  /**\n   * Sole constructor\n   *\n   *@param planetModel is the planet model.\n   *@param minX is the minimum X value.\n   *@param maxX is the maximum X value.\n   *@param Y is the Y value.\n   *@param Z is the Z value.\n   */\n  public XdYdZSolid(final PlanetModel planetModel,\n    final double minX,\n    final double maxX,\n    final double Y,\n    final double Z) {\n    super(planetModel);\n    // Argument checking\n    if (maxX - minX < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"X values in wrong order or identical\");\n\n    // Build the planes and intersect them.\n    final Plane yPlane = new Plane(yUnitVector,-Y);\n    final Plane zPlane = new Plane(zUnitVector,-Z);\n    final SidedPlane minXPlane = new SidedPlane(maxX,0.0,0.0,xUnitVector,-minX);\n    final SidedPlane maxXPlane = new SidedPlane(minX,0.0,0.0,xUnitVector,-maxX);\n    surfacePoints = yPlane.findIntersections(planetModel,zPlane,minXPlane,maxXPlane);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25f722af2eac1e9065821e525111924b171ab724","date":1503596482,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/XdYdZSolid#XdYdZSolid(PlanetModel,double,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/XdYdZSolid#XdYdZSolid(PlanetModel,double,double,double,double).mjava","sourceNew":"  /**\n   * Sole constructor\n   *\n   *@param planetModel is the planet model.\n   *@param minX is the minimum X value.\n   *@param maxX is the maximum X value.\n   *@param Y is the Y value.\n   *@param Z is the Z value.\n   */\n  public XdYdZSolid(final PlanetModel planetModel,\n    final double minX,\n    final double maxX,\n    final double Y,\n    final double Z) {\n    super(planetModel);\n    // Argument checking\n    if (maxX - minX < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"X values in wrong order or identical\");\n\n    this.minX = minX;\n    this.maxX = maxX;\n    this.Y = Y;\n    this.Z = Z;\n\n    // Build the planes and intersect them.\n    final Plane yPlane = new Plane(yUnitVector,-Y);\n    final Plane zPlane = new Plane(zUnitVector,-Z);\n    final SidedPlane minXPlane = new SidedPlane(maxX,0.0,0.0,xUnitVector,-minX);\n    final SidedPlane maxXPlane = new SidedPlane(minX,0.0,0.0,xUnitVector,-maxX);\n    surfacePoints = yPlane.findIntersections(planetModel,zPlane,minXPlane,maxXPlane);\n  }\n\n","sourceOld":"  /**\n   * Sole constructor\n   *\n   *@param planetModel is the planet model.\n   *@param minX is the minimum X value.\n   *@param maxX is the maximum X value.\n   *@param Y is the Y value.\n   *@param Z is the Z value.\n   */\n  public XdYdZSolid(final PlanetModel planetModel,\n    final double minX,\n    final double maxX,\n    final double Y,\n    final double Z) {\n    super(planetModel);\n    // Argument checking\n    if (maxX - minX < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"X values in wrong order or identical\");\n\n    // Build the planes and intersect them.\n    final Plane yPlane = new Plane(yUnitVector,-Y);\n    final Plane zPlane = new Plane(zUnitVector,-Z);\n    final SidedPlane minXPlane = new SidedPlane(maxX,0.0,0.0,xUnitVector,-minX);\n    final SidedPlane maxXPlane = new SidedPlane(minX,0.0,0.0,xUnitVector,-maxX);\n    surfacePoints = yPlane.findIntersections(planetModel,zPlane,minXPlane,maxXPlane);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/XdYdZSolid#XdYdZSolid(PlanetModel,double,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/XdYdZSolid#XdYdZSolid(PlanetModel,double,double,double,double).mjava","sourceNew":"  /**\n   * Sole constructor\n   *\n   *@param planetModel is the planet model.\n   *@param minX is the minimum X value.\n   *@param maxX is the maximum X value.\n   *@param Y is the Y value.\n   *@param Z is the Z value.\n   */\n  public XdYdZSolid(final PlanetModel planetModel,\n    final double minX,\n    final double maxX,\n    final double Y,\n    final double Z) {\n    super(planetModel);\n    // Argument checking\n    if (maxX - minX < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"X values in wrong order or identical\");\n\n    this.minX = minX;\n    this.maxX = maxX;\n    this.Y = Y;\n    this.Z = Z;\n\n    // Build the planes and intersect them.\n    final Plane yPlane = new Plane(yUnitVector,-Y);\n    final Plane zPlane = new Plane(zUnitVector,-Z);\n    final SidedPlane minXPlane = new SidedPlane(maxX,0.0,0.0,xUnitVector,-minX);\n    final SidedPlane maxXPlane = new SidedPlane(minX,0.0,0.0,xUnitVector,-maxX);\n    surfacePoints = yPlane.findIntersections(planetModel,zPlane,minXPlane,maxXPlane);\n  }\n\n","sourceOld":"  /**\n   * Sole constructor\n   *\n   *@param planetModel is the planet model.\n   *@param minX is the minimum X value.\n   *@param maxX is the maximum X value.\n   *@param Y is the Y value.\n   *@param Z is the Z value.\n   */\n  public XdYdZSolid(final PlanetModel planetModel,\n    final double minX,\n    final double maxX,\n    final double Y,\n    final double Z) {\n    super(planetModel);\n    // Argument checking\n    if (maxX - minX < Vector.MINIMUM_RESOLUTION)\n      throw new IllegalArgumentException(\"X values in wrong order or identical\");\n\n    // Build the planes and intersect them.\n    final Plane yPlane = new Plane(yUnitVector,-Y);\n    final Plane zPlane = new Plane(zUnitVector,-Z);\n    final SidedPlane minXPlane = new SidedPlane(maxX,0.0,0.0,xUnitVector,-minX);\n    final SidedPlane maxXPlane = new SidedPlane(minX,0.0,0.0,xUnitVector,-maxX);\n    surfacePoints = yPlane.findIntersections(planetModel,zPlane,minXPlane,maxXPlane);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"25f722af2eac1e9065821e525111924b171ab724":["b4e444678504caf66a8060b1d514383aa4feac0c"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["b4e444678504caf66a8060b1d514383aa4feac0c","25f722af2eac1e9065821e525111924b171ab724"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b4e444678504caf66a8060b1d514383aa4feac0c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["25f722af2eac1e9065821e525111924b171ab724"]},"commit2Childs":{"25f722af2eac1e9065821e525111924b171ab724":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b4e444678504caf66a8060b1d514383aa4feac0c"],"b4e444678504caf66a8060b1d514383aa4feac0c":["25f722af2eac1e9065821e525111924b171ab724","3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}