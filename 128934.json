{"path":"contrib/analyzers/src/test/org/apache/lucene/analysis/TestISOLatin1AccentFilter#testU().mjava","commits":[{"id":"3189596607eeebf13c7bac2cb4a396c6fbc9eb8d","date":1112605805,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/analyzers/src/test/org/apache/lucene/analysis/TestISOLatin1AccentFilter#testU().mjava","pathOld":"/dev/null","sourceNew":"  public void testU() throws Exception {\n    TokenStream stream = new WhitespaceTokenizer(new StringReader(\"ü\"));\n    ISOLatin1AccentFilter filter = new ISOLatin1AccentFilter(stream);\n    Token token = filter.next();\n    assertEquals(\"u\", token.termText);\n\n    assertNull(filter.next());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cee9f493670676d753c7ed1066657c45325499f","date":1112609797,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/analyzers/src/test/org/apache/lucene/analysis/TestISOLatin1AccentFilter#testU().mjava","pathOld":"contrib/analyzers/src/test/org/apache/lucene/analysis/TestISOLatin1AccentFilter#testU().mjava","sourceNew":"  public void testU() throws Exception {\n    TokenStream stream = new WhitespaceTokenizer(new StringReader(\"\\u00FC\"));\n    ISOLatin1AccentFilter filter = new ISOLatin1AccentFilter(stream);\n    Token token = filter.next();\n    assertEquals(\"u\", token.termText);\n\n    assertNull(filter.next());\n  }\n\n","sourceOld":"  public void testU() throws Exception {\n    TokenStream stream = new WhitespaceTokenizer(new StringReader(\"ü\"));\n    ISOLatin1AccentFilter filter = new ISOLatin1AccentFilter(stream);\n    Token token = filter.next();\n    assertEquals(\"u\", token.termText);\n\n    assertNull(filter.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f873ce616f521a9e0a4664a4d3563e50b3573b2","date":1112617516,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/analyzers/src/test/org/apache/lucene/analysis/TestISOLatin1AccentFilter#testU().mjava","pathOld":"contrib/analyzers/src/test/org/apache/lucene/analysis/TestISOLatin1AccentFilter#testU().mjava","sourceNew":"  public void testU() throws Exception {\n    TokenStream stream = new WhitespaceTokenizer(new StringReader(\"Des mot clés À LA CHAÎNE À Á Â Ã Ä Å Æ Ç È É Ê Ë Ì Í Î Ï Ð Ñ Ò Ó Ô Õ Ö Ø Œ Þ Ù Ú Û Ü Ý Ÿ à á â ã ä å æ ç è é ê ë ì í î ï ð ñ ò ó ô õ ö ø œ ß þ ù ú û ü ý ÿ\"));\n    ISOLatin1AccentFilter filter = new ISOLatin1AccentFilter(stream);\n    assertEquals(\"Des\", filter.next().termText());\n    assertEquals(\"mot\", filter.next().termText());\n    assertEquals(\"cles\", filter.next().termText());\n    assertEquals(\"A\", filter.next().termText());\n    assertEquals(\"LA\", filter.next().termText());\n    assertEquals(\"CHAINE\", filter.next().termText());\n    assertEquals(\"A\", filter.next().termText());\n    assertEquals(\"A\", filter.next().termText());\n    assertEquals(\"A\", filter.next().termText());\n    assertEquals(\"A\", filter.next().termText());\n    assertEquals(\"A\", filter.next().termText());\n    assertEquals(\"A\", filter.next().termText());\n    assertEquals(\"AE\", filter.next().termText());\n    assertEquals(\"C\", filter.next().termText());\n    assertEquals(\"E\", filter.next().termText());\n    assertEquals(\"E\", filter.next().termText());\n    assertEquals(\"E\", filter.next().termText());\n    assertEquals(\"E\", filter.next().termText());\n    assertEquals(\"I\", filter.next().termText());\n    assertEquals(\"I\", filter.next().termText());\n    assertEquals(\"I\", filter.next().termText());\n    assertEquals(\"I\", filter.next().termText());\n    assertEquals(\"D\", filter.next().termText());\n    assertEquals(\"N\", filter.next().termText());\n    assertEquals(\"O\", filter.next().termText());\n    assertEquals(\"O\", filter.next().termText());\n    assertEquals(\"O\", filter.next().termText());\n    assertEquals(\"O\", filter.next().termText());\n    assertEquals(\"O\", filter.next().termText());\n    assertEquals(\"O\", filter.next().termText());\n    assertEquals(\"OE\", filter.next().termText());\n    assertEquals(\"TH\", filter.next().termText());\n    assertEquals(\"U\", filter.next().termText());\n    assertEquals(\"U\", filter.next().termText());\n    assertEquals(\"U\", filter.next().termText());\n    assertEquals(\"U\", filter.next().termText());\n    assertEquals(\"Y\", filter.next().termText());\n    assertEquals(\"Y\", filter.next().termText());\n    assertEquals(\"a\", filter.next().termText());\n    assertEquals(\"a\", filter.next().termText());\n    assertEquals(\"a\", filter.next().termText());\n    assertEquals(\"a\", filter.next().termText());\n    assertEquals(\"a\", filter.next().termText());\n    assertEquals(\"a\", filter.next().termText());\n    assertEquals(\"ae\", filter.next().termText());\n    assertEquals(\"c\", filter.next().termText());\n    assertEquals(\"e\", filter.next().termText());\n    assertEquals(\"e\", filter.next().termText());\n    assertEquals(\"e\", filter.next().termText());\n    assertEquals(\"e\", filter.next().termText());\n    assertEquals(\"i\", filter.next().termText());\n    assertEquals(\"i\", filter.next().termText());\n    assertEquals(\"i\", filter.next().termText());\n    assertEquals(\"i\", filter.next().termText());\n    assertEquals(\"d\", filter.next().termText());\n    assertEquals(\"n\", filter.next().termText());\n    assertEquals(\"o\", filter.next().termText());\n    assertEquals(\"o\", filter.next().termText());\n    assertEquals(\"o\", filter.next().termText());\n    assertEquals(\"o\", filter.next().termText());\n    assertEquals(\"o\", filter.next().termText());\n    assertEquals(\"o\", filter.next().termText());\n    assertEquals(\"oe\", filter.next().termText());\n    assertEquals(\"ss\", filter.next().termText());\n    assertEquals(\"th\", filter.next().termText());\n    assertEquals(\"u\", filter.next().termText());\n    assertEquals(\"u\", filter.next().termText());\n    assertEquals(\"u\", filter.next().termText());\n    assertEquals(\"u\", filter.next().termText());\n    assertEquals(\"y\", filter.next().termText());\n    assertEquals(\"y\", filter.next().termText());\n    assertNull(filter.next());\n  }\n\n","sourceOld":"  public void testU() throws Exception {\n    TokenStream stream = new WhitespaceTokenizer(new StringReader(\"\\u00FC\"));\n    ISOLatin1AccentFilter filter = new ISOLatin1AccentFilter(stream);\n    Token token = filter.next();\n    assertEquals(\"u\", token.termText);\n\n    assertNull(filter.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d678d05c645583cb2ee5c2d5565fba91462466ed","date":1132608924,"type":5,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestISOLatin1AccentFilter#testU().mjava","pathOld":"contrib/analyzers/src/test/org/apache/lucene/analysis/TestISOLatin1AccentFilter#testU().mjava","sourceNew":"  public void testU() throws Exception {\n    TokenStream stream = new WhitespaceTokenizer(new StringReader(\"Des mot clés À LA CHAÎNE À Á Â Ã Ä Å Æ Ç È É Ê Ë Ì Í Î Ï Ð Ñ Ò Ó Ô Õ Ö Ø Œ Þ Ù Ú Û Ü Ý Ÿ à á â ã ä å æ ç è é ê ë ì í î ï ð ñ ò ó ô õ ö ø œ ß þ ù ú û ü ý ÿ\"));\n    ISOLatin1AccentFilter filter = new ISOLatin1AccentFilter(stream);\n    assertEquals(\"Des\", filter.next().termText());\n    assertEquals(\"mot\", filter.next().termText());\n    assertEquals(\"cles\", filter.next().termText());\n    assertEquals(\"A\", filter.next().termText());\n    assertEquals(\"LA\", filter.next().termText());\n    assertEquals(\"CHAINE\", filter.next().termText());\n    assertEquals(\"A\", filter.next().termText());\n    assertEquals(\"A\", filter.next().termText());\n    assertEquals(\"A\", filter.next().termText());\n    assertEquals(\"A\", filter.next().termText());\n    assertEquals(\"A\", filter.next().termText());\n    assertEquals(\"A\", filter.next().termText());\n    assertEquals(\"AE\", filter.next().termText());\n    assertEquals(\"C\", filter.next().termText());\n    assertEquals(\"E\", filter.next().termText());\n    assertEquals(\"E\", filter.next().termText());\n    assertEquals(\"E\", filter.next().termText());\n    assertEquals(\"E\", filter.next().termText());\n    assertEquals(\"I\", filter.next().termText());\n    assertEquals(\"I\", filter.next().termText());\n    assertEquals(\"I\", filter.next().termText());\n    assertEquals(\"I\", filter.next().termText());\n    assertEquals(\"D\", filter.next().termText());\n    assertEquals(\"N\", filter.next().termText());\n    assertEquals(\"O\", filter.next().termText());\n    assertEquals(\"O\", filter.next().termText());\n    assertEquals(\"O\", filter.next().termText());\n    assertEquals(\"O\", filter.next().termText());\n    assertEquals(\"O\", filter.next().termText());\n    assertEquals(\"O\", filter.next().termText());\n    assertEquals(\"OE\", filter.next().termText());\n    assertEquals(\"TH\", filter.next().termText());\n    assertEquals(\"U\", filter.next().termText());\n    assertEquals(\"U\", filter.next().termText());\n    assertEquals(\"U\", filter.next().termText());\n    assertEquals(\"U\", filter.next().termText());\n    assertEquals(\"Y\", filter.next().termText());\n    assertEquals(\"Y\", filter.next().termText());\n    assertEquals(\"a\", filter.next().termText());\n    assertEquals(\"a\", filter.next().termText());\n    assertEquals(\"a\", filter.next().termText());\n    assertEquals(\"a\", filter.next().termText());\n    assertEquals(\"a\", filter.next().termText());\n    assertEquals(\"a\", filter.next().termText());\n    assertEquals(\"ae\", filter.next().termText());\n    assertEquals(\"c\", filter.next().termText());\n    assertEquals(\"e\", filter.next().termText());\n    assertEquals(\"e\", filter.next().termText());\n    assertEquals(\"e\", filter.next().termText());\n    assertEquals(\"e\", filter.next().termText());\n    assertEquals(\"i\", filter.next().termText());\n    assertEquals(\"i\", filter.next().termText());\n    assertEquals(\"i\", filter.next().termText());\n    assertEquals(\"i\", filter.next().termText());\n    assertEquals(\"d\", filter.next().termText());\n    assertEquals(\"n\", filter.next().termText());\n    assertEquals(\"o\", filter.next().termText());\n    assertEquals(\"o\", filter.next().termText());\n    assertEquals(\"o\", filter.next().termText());\n    assertEquals(\"o\", filter.next().termText());\n    assertEquals(\"o\", filter.next().termText());\n    assertEquals(\"o\", filter.next().termText());\n    assertEquals(\"oe\", filter.next().termText());\n    assertEquals(\"ss\", filter.next().termText());\n    assertEquals(\"th\", filter.next().termText());\n    assertEquals(\"u\", filter.next().termText());\n    assertEquals(\"u\", filter.next().termText());\n    assertEquals(\"u\", filter.next().termText());\n    assertEquals(\"u\", filter.next().termText());\n    assertEquals(\"y\", filter.next().termText());\n    assertEquals(\"y\", filter.next().termText());\n    assertNull(filter.next());\n  }\n\n","sourceOld":"  public void testU() throws Exception {\n    TokenStream stream = new WhitespaceTokenizer(new StringReader(\"Des mot clés À LA CHAÎNE À Á Â Ã Ä Å Æ Ç È É Ê Ë Ì Í Î Ï Ð Ñ Ò Ó Ô Õ Ö Ø Œ Þ Ù Ú Û Ü Ý Ÿ à á â ã ä å æ ç è é ê ë ì í î ï ð ñ ò ó ô õ ö ø œ ß þ ù ú û ü ý ÿ\"));\n    ISOLatin1AccentFilter filter = new ISOLatin1AccentFilter(stream);\n    assertEquals(\"Des\", filter.next().termText());\n    assertEquals(\"mot\", filter.next().termText());\n    assertEquals(\"cles\", filter.next().termText());\n    assertEquals(\"A\", filter.next().termText());\n    assertEquals(\"LA\", filter.next().termText());\n    assertEquals(\"CHAINE\", filter.next().termText());\n    assertEquals(\"A\", filter.next().termText());\n    assertEquals(\"A\", filter.next().termText());\n    assertEquals(\"A\", filter.next().termText());\n    assertEquals(\"A\", filter.next().termText());\n    assertEquals(\"A\", filter.next().termText());\n    assertEquals(\"A\", filter.next().termText());\n    assertEquals(\"AE\", filter.next().termText());\n    assertEquals(\"C\", filter.next().termText());\n    assertEquals(\"E\", filter.next().termText());\n    assertEquals(\"E\", filter.next().termText());\n    assertEquals(\"E\", filter.next().termText());\n    assertEquals(\"E\", filter.next().termText());\n    assertEquals(\"I\", filter.next().termText());\n    assertEquals(\"I\", filter.next().termText());\n    assertEquals(\"I\", filter.next().termText());\n    assertEquals(\"I\", filter.next().termText());\n    assertEquals(\"D\", filter.next().termText());\n    assertEquals(\"N\", filter.next().termText());\n    assertEquals(\"O\", filter.next().termText());\n    assertEquals(\"O\", filter.next().termText());\n    assertEquals(\"O\", filter.next().termText());\n    assertEquals(\"O\", filter.next().termText());\n    assertEquals(\"O\", filter.next().termText());\n    assertEquals(\"O\", filter.next().termText());\n    assertEquals(\"OE\", filter.next().termText());\n    assertEquals(\"TH\", filter.next().termText());\n    assertEquals(\"U\", filter.next().termText());\n    assertEquals(\"U\", filter.next().termText());\n    assertEquals(\"U\", filter.next().termText());\n    assertEquals(\"U\", filter.next().termText());\n    assertEquals(\"Y\", filter.next().termText());\n    assertEquals(\"Y\", filter.next().termText());\n    assertEquals(\"a\", filter.next().termText());\n    assertEquals(\"a\", filter.next().termText());\n    assertEquals(\"a\", filter.next().termText());\n    assertEquals(\"a\", filter.next().termText());\n    assertEquals(\"a\", filter.next().termText());\n    assertEquals(\"a\", filter.next().termText());\n    assertEquals(\"ae\", filter.next().termText());\n    assertEquals(\"c\", filter.next().termText());\n    assertEquals(\"e\", filter.next().termText());\n    assertEquals(\"e\", filter.next().termText());\n    assertEquals(\"e\", filter.next().termText());\n    assertEquals(\"e\", filter.next().termText());\n    assertEquals(\"i\", filter.next().termText());\n    assertEquals(\"i\", filter.next().termText());\n    assertEquals(\"i\", filter.next().termText());\n    assertEquals(\"i\", filter.next().termText());\n    assertEquals(\"d\", filter.next().termText());\n    assertEquals(\"n\", filter.next().termText());\n    assertEquals(\"o\", filter.next().termText());\n    assertEquals(\"o\", filter.next().termText());\n    assertEquals(\"o\", filter.next().termText());\n    assertEquals(\"o\", filter.next().termText());\n    assertEquals(\"o\", filter.next().termText());\n    assertEquals(\"o\", filter.next().termText());\n    assertEquals(\"oe\", filter.next().termText());\n    assertEquals(\"ss\", filter.next().termText());\n    assertEquals(\"th\", filter.next().termText());\n    assertEquals(\"u\", filter.next().termText());\n    assertEquals(\"u\", filter.next().termText());\n    assertEquals(\"u\", filter.next().termText());\n    assertEquals(\"u\", filter.next().termText());\n    assertEquals(\"y\", filter.next().termText());\n    assertEquals(\"y\", filter.next().termText());\n    assertNull(filter.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cee9f493670676d753c7ed1066657c45325499f":["3189596607eeebf13c7bac2cb4a396c6fbc9eb8d"],"3189596607eeebf13c7bac2cb4a396c6fbc9eb8d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f873ce616f521a9e0a4664a4d3563e50b3573b2":["4cee9f493670676d753c7ed1066657c45325499f"],"d678d05c645583cb2ee5c2d5565fba91462466ed":["0f873ce616f521a9e0a4664a4d3563e50b3573b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d678d05c645583cb2ee5c2d5565fba91462466ed"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3189596607eeebf13c7bac2cb4a396c6fbc9eb8d"],"4cee9f493670676d753c7ed1066657c45325499f":["0f873ce616f521a9e0a4664a4d3563e50b3573b2"],"3189596607eeebf13c7bac2cb4a396c6fbc9eb8d":["4cee9f493670676d753c7ed1066657c45325499f"],"0f873ce616f521a9e0a4664a4d3563e50b3573b2":["d678d05c645583cb2ee5c2d5565fba91462466ed"],"d678d05c645583cb2ee5c2d5565fba91462466ed":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}