{"path":"solr/core/src/test/org/apache/solr/cloud/TestTolerantUpdateProcessorCloud#testVariousDeletes(SolrClient).mjava","commits":[{"id":"f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef","date":1458928975,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestTolerantUpdateProcessorCloud#testVariousDeletes(SolrClient).mjava","pathOld":"/dev/null","sourceNew":"  protected static void testVariousDeletes(SolrClient client) throws Exception {\n    assertNotNull(\"client not initialized\", client);\n\n    // 2 docs, one on each shard\n    final String docId1 = S_ONE_PRE + \"42\";\n    final String docId2 = S_TWO_PRE + \"666\";\n    \n    UpdateResponse rsp = null;\n    \n    // add 1 doc to each shard\n    rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                        \"commit\", \"true\"),\n                 doc(f(\"id\", docId1), f(\"foo_i\", \"2001\")),\n                 doc(f(\"id\", docId2), f(\"foo_i\", \"1976\"))).process(client);\n    assertEquals(0, rsp.getStatus());\n\n    // attempt to delete individual doc id(s) that should fail because of oportunistic concurrency constraints\n    for (String id : new String[] { docId1, docId2 }) {\n      rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                          \"commit\", \"true\")).deleteById(id, -1L).process(client);\n      assertEquals(0, rsp.getStatus());\n      assertUpdateTolerantErrors(\"failed oportunistic concurrent delId=\"+id, rsp,\n                                 delIErr(id));\n    }\n    \n    // multiple failed deletes from the same shard (via oportunistic concurrent w/ bogus ids)\n    rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                        \"commit\", \"true\")\n                 ).deleteById(S_ONE_PRE + \"X\", +1L).deleteById(S_ONE_PRE + \"Y\", +1L).process(client);\n    assertEquals(0, rsp.getStatus());\n    assertUpdateTolerantErrors(\"failed oportunistic concurrent delete by id for 2 bogus docs\", rsp,\n                               delIErr(S_ONE_PRE + \"X\"), delIErr(S_ONE_PRE + \"Y\"));\n    assertQueryDocIds(client, true, docId1, docId2);\n    \n    // multiple failed deletes from the diff shards due to oportunistic concurrency constraints\n    rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                        \"commit\", \"true\")).deleteById(docId2, -1L).deleteById(docId1, -1L).process(client);\n    assertEquals(0, rsp.getStatus());\n    assertUpdateTolerantErrors(\"failed oportunistic concurrent delete by id for 2 docs\", rsp,\n                               delIErr(docId1), delIErr(docId2));\n    assertQueryDocIds(client, true, docId1, docId2);\n\n    // deleteByQuery using malformed query (fail)\n    rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                        \"commit\", \"true\")).deleteByQuery(\"bogus_field:foo\").process(client);\n    assertEquals(0, rsp.getStatus());\n    assertUpdateTolerantErrors(\"failed oportunistic concurrent delete by query\", rsp,\n                               delQErr(\"bogus_field:foo\"));\n    assertQueryDocIds(client, true, docId1, docId2);\n\n    // mix 2 deleteByQuery, one malformed (fail), one that doesn't match anything (ok)\n    rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                        \"commit\", \"true\")\n                 ).deleteByQuery(\"bogus_field:foo\").deleteByQuery(\"foo_i:23\").process(client);\n    assertEquals(0, rsp.getStatus());\n    assertUpdateTolerantErrors(\"failed oportunistic concurrent delete by query\", rsp,\n                               delQErr(\"bogus_field:foo\"));\n    assertQueryDocIds(client, true, docId1, docId2);\n    \n    // mix 2 deleteById using _version_=-1, one for real doc1 (fail), one for bogus id (ok)\n    rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                        \"commit\", \"true\")\n                 ).deleteById(docId1, -1L).deleteById(\"bogus\", -1L).process(client);\n    assertEquals(0, rsp.getStatus());\n    assertUpdateTolerantErrors(\"failed oportunistic concurrent delete by id: exists\", rsp,\n                               delIErr(docId1));\n    assertQueryDocIds(client, true, docId1, docId2);\n    \n    // mix 2 deleteById using _version_=1, one for real doc1 (ok, deleted), one for bogus id (fail)\n    rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                        \"commit\", \"true\")\n                 ).deleteById(docId1, +1L).deleteById(\"bogusId\", +1L).process(client);\n    assertEquals(0, rsp.getStatus());\n    assertUpdateTolerantErrors(\"failed oportunistic concurrent delete by id: bogus\", rsp,\n                               delIErr(\"bogusId\"));\n    assertQueryDocIds(client, false, docId1);\n    assertQueryDocIds(client, true, docId2);\n    \n    // mix 2 deleteByQuery, one malformed (fail), one that alctaully removes some docs (ok)\n    assertQueryDocIds(client, true, docId2);\n    rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                        \"commit\", \"true\")\n                 ).deleteByQuery(\"bogus_field:foo\").deleteByQuery(\"foo_i:1976\").process(client);\n    assertEquals(0, rsp.getStatus());\n    assertUpdateTolerantErrors(\"failed oportunistic concurrent delete by query\", rsp,\n                               delQErr(\"bogus_field:foo\"));\n    assertQueryDocIds(client, false, docId2);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0158ced21948b6626f733c1c42c1e18d94449789","date":1462994341,"type":3,"author":"Bartosz Krasi≈Ñski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestTolerantUpdateProcessorCloud#testVariousDeletes(SolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestTolerantUpdateProcessorCloud#testVariousDeletes(SolrClient).mjava","sourceNew":"  protected static void testVariousDeletes(SolrClient client) throws Exception {\n    assertNotNull(\"client not initialized\", client);\n\n    // 2 docs, one on each shard\n    final String docId1 = S_ONE_PRE + \"42\";\n    final String docId2 = S_TWO_PRE + \"666\";\n    \n    UpdateResponse rsp = null;\n    \n    // add 1 doc to each shard\n    rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                        \"commit\", \"true\"),\n                 doc(f(\"id\", docId1), f(\"foo_i\", \"2001\")),\n                 doc(f(\"id\", docId2), f(\"foo_i\", \"1976\"))).process(client);\n    assertEquals(0, rsp.getStatus());\n\n    // attempt to delete individual doc id(s) that should fail because of opportunistic concurrency constraints\n    for (String id : new String[] { docId1, docId2 }) {\n      rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                          \"commit\", \"true\")).deleteById(id, -1L).process(client);\n      assertEquals(0, rsp.getStatus());\n      assertUpdateTolerantErrors(\"failed opportunistic concurrent delId=\"+id, rsp,\n                                 delIErr(id));\n    }\n    \n    // multiple failed deletes from the same shard (via opportunistic concurrent w/ bogus ids)\n    rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                        \"commit\", \"true\")\n                 ).deleteById(S_ONE_PRE + \"X\", +1L).deleteById(S_ONE_PRE + \"Y\", +1L).process(client);\n    assertEquals(0, rsp.getStatus());\n    assertUpdateTolerantErrors(\"failed opportunistic concurrent delete by id for 2 bogus docs\", rsp,\n                               delIErr(S_ONE_PRE + \"X\"), delIErr(S_ONE_PRE + \"Y\"));\n    assertQueryDocIds(client, true, docId1, docId2);\n    \n    // multiple failed deletes from the diff shards due to opportunistic concurrency constraints\n    rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                        \"commit\", \"true\")).deleteById(docId2, -1L).deleteById(docId1, -1L).process(client);\n    assertEquals(0, rsp.getStatus());\n    assertUpdateTolerantErrors(\"failed opportunistic concurrent delete by id for 2 docs\", rsp,\n                               delIErr(docId1), delIErr(docId2));\n    assertQueryDocIds(client, true, docId1, docId2);\n\n    // deleteByQuery using malformed query (fail)\n    rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                        \"commit\", \"true\")).deleteByQuery(\"bogus_field:foo\").process(client);\n    assertEquals(0, rsp.getStatus());\n    assertUpdateTolerantErrors(\"failed opportunistic concurrent delete by query\", rsp,\n                               delQErr(\"bogus_field:foo\"));\n    assertQueryDocIds(client, true, docId1, docId2);\n\n    // mix 2 deleteByQuery, one malformed (fail), one that doesn't match anything (ok)\n    rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                        \"commit\", \"true\")\n                 ).deleteByQuery(\"bogus_field:foo\").deleteByQuery(\"foo_i:23\").process(client);\n    assertEquals(0, rsp.getStatus());\n    assertUpdateTolerantErrors(\"failed opportunistic concurrent delete by query\", rsp,\n                               delQErr(\"bogus_field:foo\"));\n    assertQueryDocIds(client, true, docId1, docId2);\n    \n    // mix 2 deleteById using _version_=-1, one for real doc1 (fail), one for bogus id (ok)\n    rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                        \"commit\", \"true\")\n                 ).deleteById(docId1, -1L).deleteById(\"bogus\", -1L).process(client);\n    assertEquals(0, rsp.getStatus());\n    assertUpdateTolerantErrors(\"failed opportunistic concurrent delete by id: exists\", rsp,\n                               delIErr(docId1));\n    assertQueryDocIds(client, true, docId1, docId2);\n    \n    // mix 2 deleteById using _version_=1, one for real doc1 (ok, deleted), one for bogus id (fail)\n    rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                        \"commit\", \"true\")\n                 ).deleteById(docId1, +1L).deleteById(\"bogusId\", +1L).process(client);\n    assertEquals(0, rsp.getStatus());\n    assertUpdateTolerantErrors(\"failed opportunistic concurrent delete by id: bogus\", rsp,\n                               delIErr(\"bogusId\"));\n    assertQueryDocIds(client, false, docId1);\n    assertQueryDocIds(client, true, docId2);\n    \n    // mix 2 deleteByQuery, one malformed (fail), one that alctaully removes some docs (ok)\n    assertQueryDocIds(client, true, docId2);\n    rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                        \"commit\", \"true\")\n                 ).deleteByQuery(\"bogus_field:foo\").deleteByQuery(\"foo_i:1976\").process(client);\n    assertEquals(0, rsp.getStatus());\n    assertUpdateTolerantErrors(\"failed opportunistic concurrent delete by query\", rsp,\n                               delQErr(\"bogus_field:foo\"));\n    assertQueryDocIds(client, false, docId2);\n\n  }\n\n","sourceOld":"  protected static void testVariousDeletes(SolrClient client) throws Exception {\n    assertNotNull(\"client not initialized\", client);\n\n    // 2 docs, one on each shard\n    final String docId1 = S_ONE_PRE + \"42\";\n    final String docId2 = S_TWO_PRE + \"666\";\n    \n    UpdateResponse rsp = null;\n    \n    // add 1 doc to each shard\n    rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                        \"commit\", \"true\"),\n                 doc(f(\"id\", docId1), f(\"foo_i\", \"2001\")),\n                 doc(f(\"id\", docId2), f(\"foo_i\", \"1976\"))).process(client);\n    assertEquals(0, rsp.getStatus());\n\n    // attempt to delete individual doc id(s) that should fail because of oportunistic concurrency constraints\n    for (String id : new String[] { docId1, docId2 }) {\n      rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                          \"commit\", \"true\")).deleteById(id, -1L).process(client);\n      assertEquals(0, rsp.getStatus());\n      assertUpdateTolerantErrors(\"failed oportunistic concurrent delId=\"+id, rsp,\n                                 delIErr(id));\n    }\n    \n    // multiple failed deletes from the same shard (via oportunistic concurrent w/ bogus ids)\n    rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                        \"commit\", \"true\")\n                 ).deleteById(S_ONE_PRE + \"X\", +1L).deleteById(S_ONE_PRE + \"Y\", +1L).process(client);\n    assertEquals(0, rsp.getStatus());\n    assertUpdateTolerantErrors(\"failed oportunistic concurrent delete by id for 2 bogus docs\", rsp,\n                               delIErr(S_ONE_PRE + \"X\"), delIErr(S_ONE_PRE + \"Y\"));\n    assertQueryDocIds(client, true, docId1, docId2);\n    \n    // multiple failed deletes from the diff shards due to oportunistic concurrency constraints\n    rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                        \"commit\", \"true\")).deleteById(docId2, -1L).deleteById(docId1, -1L).process(client);\n    assertEquals(0, rsp.getStatus());\n    assertUpdateTolerantErrors(\"failed oportunistic concurrent delete by id for 2 docs\", rsp,\n                               delIErr(docId1), delIErr(docId2));\n    assertQueryDocIds(client, true, docId1, docId2);\n\n    // deleteByQuery using malformed query (fail)\n    rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                        \"commit\", \"true\")).deleteByQuery(\"bogus_field:foo\").process(client);\n    assertEquals(0, rsp.getStatus());\n    assertUpdateTolerantErrors(\"failed oportunistic concurrent delete by query\", rsp,\n                               delQErr(\"bogus_field:foo\"));\n    assertQueryDocIds(client, true, docId1, docId2);\n\n    // mix 2 deleteByQuery, one malformed (fail), one that doesn't match anything (ok)\n    rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                        \"commit\", \"true\")\n                 ).deleteByQuery(\"bogus_field:foo\").deleteByQuery(\"foo_i:23\").process(client);\n    assertEquals(0, rsp.getStatus());\n    assertUpdateTolerantErrors(\"failed oportunistic concurrent delete by query\", rsp,\n                               delQErr(\"bogus_field:foo\"));\n    assertQueryDocIds(client, true, docId1, docId2);\n    \n    // mix 2 deleteById using _version_=-1, one for real doc1 (fail), one for bogus id (ok)\n    rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                        \"commit\", \"true\")\n                 ).deleteById(docId1, -1L).deleteById(\"bogus\", -1L).process(client);\n    assertEquals(0, rsp.getStatus());\n    assertUpdateTolerantErrors(\"failed oportunistic concurrent delete by id: exists\", rsp,\n                               delIErr(docId1));\n    assertQueryDocIds(client, true, docId1, docId2);\n    \n    // mix 2 deleteById using _version_=1, one for real doc1 (ok, deleted), one for bogus id (fail)\n    rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                        \"commit\", \"true\")\n                 ).deleteById(docId1, +1L).deleteById(\"bogusId\", +1L).process(client);\n    assertEquals(0, rsp.getStatus());\n    assertUpdateTolerantErrors(\"failed oportunistic concurrent delete by id: bogus\", rsp,\n                               delIErr(\"bogusId\"));\n    assertQueryDocIds(client, false, docId1);\n    assertQueryDocIds(client, true, docId2);\n    \n    // mix 2 deleteByQuery, one malformed (fail), one that alctaully removes some docs (ok)\n    assertQueryDocIds(client, true, docId2);\n    rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                        \"commit\", \"true\")\n                 ).deleteByQuery(\"bogus_field:foo\").deleteByQuery(\"foo_i:1976\").process(client);\n    assertEquals(0, rsp.getStatus());\n    assertUpdateTolerantErrors(\"failed oportunistic concurrent delete by query\", rsp,\n                               delQErr(\"bogus_field:foo\"));\n    assertQueryDocIds(client, false, docId2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestTolerantUpdateProcessorCloud#testVariousDeletes(SolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestTolerantUpdateProcessorCloud#testVariousDeletes(SolrClient).mjava","sourceNew":"  protected static void testVariousDeletes(SolrClient client) throws Exception {\n    assertNotNull(\"client not initialized\", client);\n\n    // 2 docs, one on each shard\n    final String docId1 = S_ONE_PRE + \"42\";\n    final String docId2 = S_TWO_PRE + \"666\";\n    \n    UpdateResponse rsp = null;\n    \n    // add 1 doc to each shard\n    rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                        \"commit\", \"true\"),\n                 doc(f(\"id\", docId1), f(\"foo_i\", \"2001\")),\n                 doc(f(\"id\", docId2), f(\"foo_i\", \"1976\"))).process(client);\n    assertEquals(0, rsp.getStatus());\n\n    // attempt to delete individual doc id(s) that should fail because of opportunistic concurrency constraints\n    for (String id : new String[] { docId1, docId2 }) {\n      rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                          \"commit\", \"true\")).deleteById(id, -1L).process(client);\n      assertEquals(0, rsp.getStatus());\n      assertUpdateTolerantErrors(\"failed opportunistic concurrent delId=\"+id, rsp,\n                                 delIErr(id));\n    }\n    \n    // multiple failed deletes from the same shard (via opportunistic concurrent w/ bogus ids)\n    rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                        \"commit\", \"true\")\n                 ).deleteById(S_ONE_PRE + \"X\", +1L).deleteById(S_ONE_PRE + \"Y\", +1L).process(client);\n    assertEquals(0, rsp.getStatus());\n    assertUpdateTolerantErrors(\"failed opportunistic concurrent delete by id for 2 bogus docs\", rsp,\n                               delIErr(S_ONE_PRE + \"X\"), delIErr(S_ONE_PRE + \"Y\"));\n    assertQueryDocIds(client, true, docId1, docId2);\n    \n    // multiple failed deletes from the diff shards due to opportunistic concurrency constraints\n    rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                        \"commit\", \"true\")).deleteById(docId2, -1L).deleteById(docId1, -1L).process(client);\n    assertEquals(0, rsp.getStatus());\n    assertUpdateTolerantErrors(\"failed opportunistic concurrent delete by id for 2 docs\", rsp,\n                               delIErr(docId1), delIErr(docId2));\n    assertQueryDocIds(client, true, docId1, docId2);\n\n    // deleteByQuery using malformed query (fail)\n    rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                        \"commit\", \"true\")).deleteByQuery(\"bogus_field:foo\").process(client);\n    assertEquals(0, rsp.getStatus());\n    assertUpdateTolerantErrors(\"failed opportunistic concurrent delete by query\", rsp,\n                               delQErr(\"bogus_field:foo\"));\n    assertQueryDocIds(client, true, docId1, docId2);\n\n    // mix 2 deleteByQuery, one malformed (fail), one that doesn't match anything (ok)\n    rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                        \"commit\", \"true\")\n                 ).deleteByQuery(\"bogus_field:foo\").deleteByQuery(\"foo_i:23\").process(client);\n    assertEquals(0, rsp.getStatus());\n    assertUpdateTolerantErrors(\"failed opportunistic concurrent delete by query\", rsp,\n                               delQErr(\"bogus_field:foo\"));\n    assertQueryDocIds(client, true, docId1, docId2);\n    \n    // mix 2 deleteById using _version_=-1, one for real doc1 (fail), one for bogus id (ok)\n    rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                        \"commit\", \"true\")\n                 ).deleteById(docId1, -1L).deleteById(\"bogus\", -1L).process(client);\n    assertEquals(0, rsp.getStatus());\n    assertUpdateTolerantErrors(\"failed opportunistic concurrent delete by id: exists\", rsp,\n                               delIErr(docId1));\n    assertQueryDocIds(client, true, docId1, docId2);\n    \n    // mix 2 deleteById using _version_=1, one for real doc1 (ok, deleted), one for bogus id (fail)\n    rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                        \"commit\", \"true\")\n                 ).deleteById(docId1, +1L).deleteById(\"bogusId\", +1L).process(client);\n    assertEquals(0, rsp.getStatus());\n    assertUpdateTolerantErrors(\"failed opportunistic concurrent delete by id: bogus\", rsp,\n                               delIErr(\"bogusId\"));\n    assertQueryDocIds(client, false, docId1);\n    assertQueryDocIds(client, true, docId2);\n    \n    // mix 2 deleteByQuery, one malformed (fail), one that alctaully removes some docs (ok)\n    assertQueryDocIds(client, true, docId2);\n    rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                        \"commit\", \"true\")\n                 ).deleteByQuery(\"bogus_field:foo\").deleteByQuery(\"foo_i:1976\").process(client);\n    assertEquals(0, rsp.getStatus());\n    assertUpdateTolerantErrors(\"failed opportunistic concurrent delete by query\", rsp,\n                               delQErr(\"bogus_field:foo\"));\n    assertQueryDocIds(client, false, docId2);\n\n  }\n\n","sourceOld":"  protected static void testVariousDeletes(SolrClient client) throws Exception {\n    assertNotNull(\"client not initialized\", client);\n\n    // 2 docs, one on each shard\n    final String docId1 = S_ONE_PRE + \"42\";\n    final String docId2 = S_TWO_PRE + \"666\";\n    \n    UpdateResponse rsp = null;\n    \n    // add 1 doc to each shard\n    rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                        \"commit\", \"true\"),\n                 doc(f(\"id\", docId1), f(\"foo_i\", \"2001\")),\n                 doc(f(\"id\", docId2), f(\"foo_i\", \"1976\"))).process(client);\n    assertEquals(0, rsp.getStatus());\n\n    // attempt to delete individual doc id(s) that should fail because of oportunistic concurrency constraints\n    for (String id : new String[] { docId1, docId2 }) {\n      rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                          \"commit\", \"true\")).deleteById(id, -1L).process(client);\n      assertEquals(0, rsp.getStatus());\n      assertUpdateTolerantErrors(\"failed oportunistic concurrent delId=\"+id, rsp,\n                                 delIErr(id));\n    }\n    \n    // multiple failed deletes from the same shard (via oportunistic concurrent w/ bogus ids)\n    rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                        \"commit\", \"true\")\n                 ).deleteById(S_ONE_PRE + \"X\", +1L).deleteById(S_ONE_PRE + \"Y\", +1L).process(client);\n    assertEquals(0, rsp.getStatus());\n    assertUpdateTolerantErrors(\"failed oportunistic concurrent delete by id for 2 bogus docs\", rsp,\n                               delIErr(S_ONE_PRE + \"X\"), delIErr(S_ONE_PRE + \"Y\"));\n    assertQueryDocIds(client, true, docId1, docId2);\n    \n    // multiple failed deletes from the diff shards due to oportunistic concurrency constraints\n    rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                        \"commit\", \"true\")).deleteById(docId2, -1L).deleteById(docId1, -1L).process(client);\n    assertEquals(0, rsp.getStatus());\n    assertUpdateTolerantErrors(\"failed oportunistic concurrent delete by id for 2 docs\", rsp,\n                               delIErr(docId1), delIErr(docId2));\n    assertQueryDocIds(client, true, docId1, docId2);\n\n    // deleteByQuery using malformed query (fail)\n    rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                        \"commit\", \"true\")).deleteByQuery(\"bogus_field:foo\").process(client);\n    assertEquals(0, rsp.getStatus());\n    assertUpdateTolerantErrors(\"failed oportunistic concurrent delete by query\", rsp,\n                               delQErr(\"bogus_field:foo\"));\n    assertQueryDocIds(client, true, docId1, docId2);\n\n    // mix 2 deleteByQuery, one malformed (fail), one that doesn't match anything (ok)\n    rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                        \"commit\", \"true\")\n                 ).deleteByQuery(\"bogus_field:foo\").deleteByQuery(\"foo_i:23\").process(client);\n    assertEquals(0, rsp.getStatus());\n    assertUpdateTolerantErrors(\"failed oportunistic concurrent delete by query\", rsp,\n                               delQErr(\"bogus_field:foo\"));\n    assertQueryDocIds(client, true, docId1, docId2);\n    \n    // mix 2 deleteById using _version_=-1, one for real doc1 (fail), one for bogus id (ok)\n    rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                        \"commit\", \"true\")\n                 ).deleteById(docId1, -1L).deleteById(\"bogus\", -1L).process(client);\n    assertEquals(0, rsp.getStatus());\n    assertUpdateTolerantErrors(\"failed oportunistic concurrent delete by id: exists\", rsp,\n                               delIErr(docId1));\n    assertQueryDocIds(client, true, docId1, docId2);\n    \n    // mix 2 deleteById using _version_=1, one for real doc1 (ok, deleted), one for bogus id (fail)\n    rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                        \"commit\", \"true\")\n                 ).deleteById(docId1, +1L).deleteById(\"bogusId\", +1L).process(client);\n    assertEquals(0, rsp.getStatus());\n    assertUpdateTolerantErrors(\"failed oportunistic concurrent delete by id: bogus\", rsp,\n                               delIErr(\"bogusId\"));\n    assertQueryDocIds(client, false, docId1);\n    assertQueryDocIds(client, true, docId2);\n    \n    // mix 2 deleteByQuery, one malformed (fail), one that alctaully removes some docs (ok)\n    assertQueryDocIds(client, true, docId2);\n    rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                        \"commit\", \"true\")\n                 ).deleteByQuery(\"bogus_field:foo\").deleteByQuery(\"foo_i:1976\").process(client);\n    assertEquals(0, rsp.getStatus());\n    assertUpdateTolerantErrors(\"failed oportunistic concurrent delete by query\", rsp,\n                               delQErr(\"bogus_field:foo\"));\n    assertQueryDocIds(client, false, docId2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestTolerantUpdateProcessorCloud#testVariousDeletes(SolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestTolerantUpdateProcessorCloud#testVariousDeletes(SolrClient).mjava","sourceNew":"  protected static void testVariousDeletes(SolrClient client) throws Exception {\n    assertNotNull(\"client not initialized\", client);\n\n    // 2 docs, one on each shard\n    final String docId1 = S_ONE_PRE + \"42\";\n    final String docId2 = S_TWO_PRE + \"666\";\n    \n    UpdateResponse rsp = null;\n    \n    // add 1 doc to each shard\n    rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                        \"commit\", \"true\"),\n                 doc(f(\"id\", docId1), f(\"foo_i\", \"2001\")),\n                 doc(f(\"id\", docId2), f(\"foo_i\", \"1976\"))).process(client);\n    assertEquals(0, rsp.getStatus());\n\n    // attempt to delete individual doc id(s) that should fail because of opportunistic concurrency constraints\n    for (String id : new String[] { docId1, docId2 }) {\n      rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                          \"commit\", \"true\")).deleteById(id, -1L).process(client);\n      assertEquals(0, rsp.getStatus());\n      assertUpdateTolerantErrors(\"failed opportunistic concurrent delId=\"+id, rsp,\n                                 delIErr(id));\n    }\n    \n    // multiple failed deletes from the same shard (via opportunistic concurrent w/ bogus ids)\n    rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                        \"commit\", \"true\")\n                 ).deleteById(S_ONE_PRE + \"X\", +1L).deleteById(S_ONE_PRE + \"Y\", +1L).process(client);\n    assertEquals(0, rsp.getStatus());\n    assertUpdateTolerantErrors(\"failed opportunistic concurrent delete by id for 2 bogus docs\", rsp,\n                               delIErr(S_ONE_PRE + \"X\"), delIErr(S_ONE_PRE + \"Y\"));\n    assertQueryDocIds(client, true, docId1, docId2);\n    \n    // multiple failed deletes from the diff shards due to opportunistic concurrency constraints\n    rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                        \"commit\", \"true\")).deleteById(docId2, -1L).deleteById(docId1, -1L).process(client);\n    assertEquals(0, rsp.getStatus());\n    assertUpdateTolerantErrors(\"failed opportunistic concurrent delete by id for 2 docs\", rsp,\n                               delIErr(docId1), delIErr(docId2));\n    assertQueryDocIds(client, true, docId1, docId2);\n\n    // deleteByQuery using malformed query (fail)\n    rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                        \"commit\", \"true\")).deleteByQuery(\"bogus_field:foo\").process(client);\n    assertEquals(0, rsp.getStatus());\n    assertUpdateTolerantErrors(\"failed opportunistic concurrent delete by query\", rsp,\n                               delQErr(\"bogus_field:foo\"));\n    assertQueryDocIds(client, true, docId1, docId2);\n\n    // mix 2 deleteByQuery, one malformed (fail), one that doesn't match anything (ok)\n    rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                        \"commit\", \"true\")\n                 ).deleteByQuery(\"bogus_field:foo\").deleteByQuery(\"foo_i:23\").process(client);\n    assertEquals(0, rsp.getStatus());\n    assertUpdateTolerantErrors(\"failed opportunistic concurrent delete by query\", rsp,\n                               delQErr(\"bogus_field:foo\"));\n    assertQueryDocIds(client, true, docId1, docId2);\n    \n    // mix 2 deleteById using _version_=-1, one for real doc1 (fail), one for bogus id (ok)\n    rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                        \"commit\", \"true\")\n                 ).deleteById(docId1, -1L).deleteById(\"bogus\", -1L).process(client);\n    assertEquals(0, rsp.getStatus());\n    assertUpdateTolerantErrors(\"failed opportunistic concurrent delete by id: exists\", rsp,\n                               delIErr(docId1));\n    assertQueryDocIds(client, true, docId1, docId2);\n    \n    // mix 2 deleteById using _version_=1, one for real doc1 (ok, deleted), one for bogus id (fail)\n    rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                        \"commit\", \"true\")\n                 ).deleteById(docId1, +1L).deleteById(\"bogusId\", +1L).process(client);\n    assertEquals(0, rsp.getStatus());\n    assertUpdateTolerantErrors(\"failed opportunistic concurrent delete by id: bogus\", rsp,\n                               delIErr(\"bogusId\"));\n    assertQueryDocIds(client, false, docId1);\n    assertQueryDocIds(client, true, docId2);\n    \n    // mix 2 deleteByQuery, one malformed (fail), one that alctaully removes some docs (ok)\n    assertQueryDocIds(client, true, docId2);\n    rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                        \"commit\", \"true\")\n                 ).deleteByQuery(\"bogus_field:foo\").deleteByQuery(\"foo_i:1976\").process(client);\n    assertEquals(0, rsp.getStatus());\n    assertUpdateTolerantErrors(\"failed opportunistic concurrent delete by query\", rsp,\n                               delQErr(\"bogus_field:foo\"));\n    assertQueryDocIds(client, false, docId2);\n\n  }\n\n","sourceOld":"  protected static void testVariousDeletes(SolrClient client) throws Exception {\n    assertNotNull(\"client not initialized\", client);\n\n    // 2 docs, one on each shard\n    final String docId1 = S_ONE_PRE + \"42\";\n    final String docId2 = S_TWO_PRE + \"666\";\n    \n    UpdateResponse rsp = null;\n    \n    // add 1 doc to each shard\n    rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                        \"commit\", \"true\"),\n                 doc(f(\"id\", docId1), f(\"foo_i\", \"2001\")),\n                 doc(f(\"id\", docId2), f(\"foo_i\", \"1976\"))).process(client);\n    assertEquals(0, rsp.getStatus());\n\n    // attempt to delete individual doc id(s) that should fail because of oportunistic concurrency constraints\n    for (String id : new String[] { docId1, docId2 }) {\n      rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                          \"commit\", \"true\")).deleteById(id, -1L).process(client);\n      assertEquals(0, rsp.getStatus());\n      assertUpdateTolerantErrors(\"failed oportunistic concurrent delId=\"+id, rsp,\n                                 delIErr(id));\n    }\n    \n    // multiple failed deletes from the same shard (via oportunistic concurrent w/ bogus ids)\n    rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                        \"commit\", \"true\")\n                 ).deleteById(S_ONE_PRE + \"X\", +1L).deleteById(S_ONE_PRE + \"Y\", +1L).process(client);\n    assertEquals(0, rsp.getStatus());\n    assertUpdateTolerantErrors(\"failed oportunistic concurrent delete by id for 2 bogus docs\", rsp,\n                               delIErr(S_ONE_PRE + \"X\"), delIErr(S_ONE_PRE + \"Y\"));\n    assertQueryDocIds(client, true, docId1, docId2);\n    \n    // multiple failed deletes from the diff shards due to oportunistic concurrency constraints\n    rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                        \"commit\", \"true\")).deleteById(docId2, -1L).deleteById(docId1, -1L).process(client);\n    assertEquals(0, rsp.getStatus());\n    assertUpdateTolerantErrors(\"failed oportunistic concurrent delete by id for 2 docs\", rsp,\n                               delIErr(docId1), delIErr(docId2));\n    assertQueryDocIds(client, true, docId1, docId2);\n\n    // deleteByQuery using malformed query (fail)\n    rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                        \"commit\", \"true\")).deleteByQuery(\"bogus_field:foo\").process(client);\n    assertEquals(0, rsp.getStatus());\n    assertUpdateTolerantErrors(\"failed oportunistic concurrent delete by query\", rsp,\n                               delQErr(\"bogus_field:foo\"));\n    assertQueryDocIds(client, true, docId1, docId2);\n\n    // mix 2 deleteByQuery, one malformed (fail), one that doesn't match anything (ok)\n    rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                        \"commit\", \"true\")\n                 ).deleteByQuery(\"bogus_field:foo\").deleteByQuery(\"foo_i:23\").process(client);\n    assertEquals(0, rsp.getStatus());\n    assertUpdateTolerantErrors(\"failed oportunistic concurrent delete by query\", rsp,\n                               delQErr(\"bogus_field:foo\"));\n    assertQueryDocIds(client, true, docId1, docId2);\n    \n    // mix 2 deleteById using _version_=-1, one for real doc1 (fail), one for bogus id (ok)\n    rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                        \"commit\", \"true\")\n                 ).deleteById(docId1, -1L).deleteById(\"bogus\", -1L).process(client);\n    assertEquals(0, rsp.getStatus());\n    assertUpdateTolerantErrors(\"failed oportunistic concurrent delete by id: exists\", rsp,\n                               delIErr(docId1));\n    assertQueryDocIds(client, true, docId1, docId2);\n    \n    // mix 2 deleteById using _version_=1, one for real doc1 (ok, deleted), one for bogus id (fail)\n    rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                        \"commit\", \"true\")\n                 ).deleteById(docId1, +1L).deleteById(\"bogusId\", +1L).process(client);\n    assertEquals(0, rsp.getStatus());\n    assertUpdateTolerantErrors(\"failed oportunistic concurrent delete by id: bogus\", rsp,\n                               delIErr(\"bogusId\"));\n    assertQueryDocIds(client, false, docId1);\n    assertQueryDocIds(client, true, docId2);\n    \n    // mix 2 deleteByQuery, one malformed (fail), one that alctaully removes some docs (ok)\n    assertQueryDocIds(client, true, docId2);\n    rsp = update(params(\"update.chain\", \"tolerant-chain-max-errors-10\",\n                        \"commit\", \"true\")\n                 ).deleteByQuery(\"bogus_field:foo\").deleteByQuery(\"foo_i:1976\").process(client);\n    assertEquals(0, rsp.getStatus());\n    assertUpdateTolerantErrors(\"failed oportunistic concurrent delete by query\", rsp,\n                               delQErr(\"bogus_field:foo\"));\n    assertQueryDocIds(client, false, docId2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef","0158ced21948b6626f733c1c42c1e18d94449789"],"0158ced21948b6626f733c1c42c1e18d94449789":["f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef"],"f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","0158ced21948b6626f733c1c42c1e18d94449789"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0158ced21948b6626f733c1c42c1e18d94449789":["d470c8182e92b264680e34081b75e70a9f2b3c89"]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}