{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterGraphFilterFactory#parseTypes(List[String]).mjava","commits":[{"id":"098528909bb70948871fd7ed865fafb87ed73964","date":1484667487,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterGraphFilterFactory#parseTypes(List[String]).mjava","pathOld":"/dev/null","sourceNew":"  // parses a list of MappingCharFilter style rules into a custom byte[] type table\n  private byte[] parseTypes(List<String> rules) {\n    SortedMap<Character,Byte> typeMap = new TreeMap<>();\n    for( String rule : rules ){\n      Matcher m = typePattern.matcher(rule);\n      if( !m.find() )\n        throw new IllegalArgumentException(\"Invalid Mapping Rule : [\" + rule + \"]\");\n      String lhs = parseString(m.group(1).trim());\n      Byte rhs = parseType(m.group(2).trim());\n      if (lhs.length() != 1)\n        throw new IllegalArgumentException(\"Invalid Mapping Rule : [\" + rule + \"]. Only a single character is allowed.\");\n      if (rhs == null)\n        throw new IllegalArgumentException(\"Invalid Mapping Rule : [\" + rule + \"]. Illegal type.\");\n      typeMap.put(lhs.charAt(0), rhs);\n    }\n    \n    // ensure the table is always at least as big as DEFAULT_WORD_DELIM_TABLE for performance\n    byte types[] = new byte[Math.max(typeMap.lastKey()+1, WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE.length)];\n    for (int i = 0; i < types.length; i++)\n      types[i] = WordDelimiterIterator.getType(i);\n    for (Map.Entry<Character,Byte> mapping : typeMap.entrySet())\n      types[mapping.getKey()] = mapping.getValue();\n    return types;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"302d34f2c66e8d489ee13078305c330cbf67b226","date":1484754357,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterGraphFilterFactory#parseTypes(List[String]).mjava","pathOld":"/dev/null","sourceNew":"  // parses a list of MappingCharFilter style rules into a custom byte[] type table\n  private byte[] parseTypes(List<String> rules) {\n    SortedMap<Character,Byte> typeMap = new TreeMap<>();\n    for( String rule : rules ){\n      Matcher m = typePattern.matcher(rule);\n      if( !m.find() )\n        throw new IllegalArgumentException(\"Invalid Mapping Rule : [\" + rule + \"]\");\n      String lhs = parseString(m.group(1).trim());\n      Byte rhs = parseType(m.group(2).trim());\n      if (lhs.length() != 1)\n        throw new IllegalArgumentException(\"Invalid Mapping Rule : [\" + rule + \"]. Only a single character is allowed.\");\n      if (rhs == null)\n        throw new IllegalArgumentException(\"Invalid Mapping Rule : [\" + rule + \"]. Illegal type.\");\n      typeMap.put(lhs.charAt(0), rhs);\n    }\n    \n    // ensure the table is always at least as big as DEFAULT_WORD_DELIM_TABLE for performance\n    byte types[] = new byte[Math.max(typeMap.lastKey()+1, WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE.length)];\n    for (int i = 0; i < types.length; i++)\n      types[i] = WordDelimiterIterator.getType(i);\n    for (Map.Entry<Character,Byte> mapping : typeMap.entrySet())\n      types[mapping.getKey()] = mapping.getValue();\n    return types;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"098528909bb70948871fd7ed865fafb87ed73964":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["098528909bb70948871fd7ed865fafb87ed73964"],"302d34f2c66e8d489ee13078305c330cbf67b226":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","098528909bb70948871fd7ed865fafb87ed73964"]},"commit2Childs":{"098528909bb70948871fd7ed865fafb87ed73964":["cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["098528909bb70948871fd7ed865fafb87ed73964","302d34f2c66e8d489ee13078305c330cbf67b226"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"302d34f2c66e8d489ee13078305c330cbf67b226":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}