{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/SpatialOpRecursivePrefixTreeTest#testWithinLeafApproxRule().mjava","commits":[{"id":"3702440de9629167be64098f307cea70809df488","date":1365439741,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/SpatialOpRecursivePrefixTreeTest#testWithinLeafApproxRule().mjava","pathOld":"/dev/null","sourceNew":"  @Test /** LUCENE-4916 */\n  public void testWithinLeafApproxRule() throws IOException {\n    mySetup(2);//4x4 grid\n    //indexed shape will simplify to entire right half (2 top cells)\n    adoc(\"0\", ctx.makeRectangle(192, 204, -128, 128));\n    commit();\n\n    ((RecursivePrefixTreeStrategy) strategy).setPrefixGridScanLevel(randomInt(2));\n\n    //query does NOT contain it; both indexed cells are leaves to the query, and\n    // when expanded to the full grid cells, the top one's top row is disjoint\n    // from the query and thus not a match.\n    assertTrue(executeQuery(strategy.makeQuery(\n        new SpatialArgs(SpatialOperation.IsWithin, ctx.makeRectangle(38, 192, -72, 56))\n    ), 1).numFound==0);//no-match\n\n    //this time the rect is a little bigger and is considered a match. It's a\n    // an acceptable false-positive because of the grid approximation.\n    assertTrue(executeQuery(strategy.makeQuery(\n        new SpatialArgs(SpatialOperation.IsWithin, ctx.makeRectangle(38, 192, -72, 80))\n    ), 1).numFound==1);//match\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f54c29b684839e16d0a7ffd41ee8a1e93e905184","date":1395120410,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/SpatialOpRecursivePrefixTreeTest#testWithinLeafApproxRule().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/SpatialOpRecursivePrefixTreeTest#testWithinLeafApproxRule().mjava","sourceNew":"  @Test /** LUCENE-4916 */\n  public void testWithinLeafApproxRule() throws IOException {\n    setupQuadGrid(2);//4x4 grid\n    //indexed shape will simplify to entire right half (2 top cells)\n    adoc(\"0\", ctx.makeRectangle(192, 204, -128, 128));\n    commit();\n\n    ((RecursivePrefixTreeStrategy) strategy).setPrefixGridScanLevel(randomInt(2));\n\n    //query does NOT contain it; both indexed cells are leaves to the query, and\n    // when expanded to the full grid cells, the top one's top row is disjoint\n    // from the query and thus not a match.\n    assertTrue(executeQuery(strategy.makeQuery(\n        new SpatialArgs(SpatialOperation.IsWithin, ctx.makeRectangle(38, 192, -72, 56))\n    ), 1).numFound==0);//no-match\n\n    //this time the rect is a little bigger and is considered a match. It's a\n    // an acceptable false-positive because of the grid approximation.\n    assertTrue(executeQuery(strategy.makeQuery(\n        new SpatialArgs(SpatialOperation.IsWithin, ctx.makeRectangle(38, 192, -72, 80))\n    ), 1).numFound==1);//match\n  }\n\n","sourceOld":"  @Test /** LUCENE-4916 */\n  public void testWithinLeafApproxRule() throws IOException {\n    mySetup(2);//4x4 grid\n    //indexed shape will simplify to entire right half (2 top cells)\n    adoc(\"0\", ctx.makeRectangle(192, 204, -128, 128));\n    commit();\n\n    ((RecursivePrefixTreeStrategy) strategy).setPrefixGridScanLevel(randomInt(2));\n\n    //query does NOT contain it; both indexed cells are leaves to the query, and\n    // when expanded to the full grid cells, the top one's top row is disjoint\n    // from the query and thus not a match.\n    assertTrue(executeQuery(strategy.makeQuery(\n        new SpatialArgs(SpatialOperation.IsWithin, ctx.makeRectangle(38, 192, -72, 56))\n    ), 1).numFound==0);//no-match\n\n    //this time the rect is a little bigger and is considered a match. It's a\n    // an acceptable false-positive because of the grid approximation.\n    assertTrue(executeQuery(strategy.makeQuery(\n        new SpatialArgs(SpatialOperation.IsWithin, ctx.makeRectangle(38, 192, -72, 80))\n    ), 1).numFound==1);//match\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0521546db127e358ced1772a9d696dbdd255b203","date":1403202289,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest#testWithinLeafApproxRule().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/SpatialOpRecursivePrefixTreeTest#testWithinLeafApproxRule().mjava","sourceNew":"  @Test /** LUCENE-4916 */\n  public void testWithinLeafApproxRule() throws IOException {\n    setupQuadGrid(2);//4x4 grid\n    //indexed shape will simplify to entire right half (2 top cells)\n    adoc(\"0\", ctx.makeRectangle(192, 204, -128, 128));\n    commit();\n\n    ((RecursivePrefixTreeStrategy) strategy).setPrefixGridScanLevel(randomInt(2));\n\n    //query does NOT contain it; both indexed cells are leaves to the query, and\n    // when expanded to the full grid cells, the top one's top row is disjoint\n    // from the query and thus not a match.\n    assertTrue(executeQuery(strategy.makeQuery(\n        new SpatialArgs(SpatialOperation.IsWithin, ctx.makeRectangle(38, 192, -72, 56))\n    ), 1).numFound==0);//no-match\n\n    //this time the rect is a little bigger and is considered a match. It's a\n    // an acceptable false-positive because of the grid approximation.\n    assertTrue(executeQuery(strategy.makeQuery(\n        new SpatialArgs(SpatialOperation.IsWithin, ctx.makeRectangle(38, 192, -72, 80))\n    ), 1).numFound==1);//match\n  }\n\n","sourceOld":"  @Test /** LUCENE-4916 */\n  public void testWithinLeafApproxRule() throws IOException {\n    setupQuadGrid(2);//4x4 grid\n    //indexed shape will simplify to entire right half (2 top cells)\n    adoc(\"0\", ctx.makeRectangle(192, 204, -128, 128));\n    commit();\n\n    ((RecursivePrefixTreeStrategy) strategy).setPrefixGridScanLevel(randomInt(2));\n\n    //query does NOT contain it; both indexed cells are leaves to the query, and\n    // when expanded to the full grid cells, the top one's top row is disjoint\n    // from the query and thus not a match.\n    assertTrue(executeQuery(strategy.makeQuery(\n        new SpatialArgs(SpatialOperation.IsWithin, ctx.makeRectangle(38, 192, -72, 56))\n    ), 1).numFound==0);//no-match\n\n    //this time the rect is a little bigger and is considered a match. It's a\n    // an acceptable false-positive because of the grid approximation.\n    assertTrue(executeQuery(strategy.makeQuery(\n        new SpatialArgs(SpatialOperation.IsWithin, ctx.makeRectangle(38, 192, -72, 80))\n    ), 1).numFound==1);//match\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f54c29b684839e16d0a7ffd41ee8a1e93e905184":["3702440de9629167be64098f307cea70809df488"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3702440de9629167be64098f307cea70809df488":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0521546db127e358ced1772a9d696dbdd255b203":["f54c29b684839e16d0a7ffd41ee8a1e93e905184"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0521546db127e358ced1772a9d696dbdd255b203"]},"commit2Childs":{"f54c29b684839e16d0a7ffd41ee8a1e93e905184":["0521546db127e358ced1772a9d696dbdd255b203"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3702440de9629167be64098f307cea70809df488"],"3702440de9629167be64098f307cea70809df488":["f54c29b684839e16d0a7ffd41ee8a1e93e905184"],"0521546db127e358ced1772a9d696dbdd255b203":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}