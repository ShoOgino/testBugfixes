{"path":"src/test/org/apache/lucene/analysis/TestCharArrayMap#testToString().mjava","commits":[{"id":"3c09067bd60a59f680992d62794689898c0148ac","date":1265200673,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestCharArrayMap#testToString().mjava","pathOld":"/dev/null","sourceNew":"  public void testToString() {\n    CharArrayMap<Integer> cm = new CharArrayMap<Integer>(Version.LUCENE_CURRENT, Collections.singletonMap(\"test\",1), false);\n    assertEquals(\"[test]\",cm.keySet().toString());\n    assertEquals(\"[1]\",cm.values().toString());\n    assertEquals(\"[test=1]\",cm.entrySet().toString());\n    assertEquals(\"{test=1}\",cm.toString());\n    cm.put(\"test2\", 2);\n    assertTrue(cm.keySet().toString().contains(\", \"));\n    assertTrue(cm.values().toString().contains(\", \"));\n    assertTrue(cm.entrySet().toString().contains(\", \"));\n    assertTrue(cm.toString().contains(\", \"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestCharArrayMap#testToString().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestCharArrayMap#testToString().mjava","sourceNew":"  public void testToString() {\n    CharArrayMap<Integer> cm = new CharArrayMap<Integer>(TEST_VERSION_CURRENT, Collections.singletonMap(\"test\",1), false);\n    assertEquals(\"[test]\",cm.keySet().toString());\n    assertEquals(\"[1]\",cm.values().toString());\n    assertEquals(\"[test=1]\",cm.entrySet().toString());\n    assertEquals(\"{test=1}\",cm.toString());\n    cm.put(\"test2\", 2);\n    assertTrue(cm.keySet().toString().contains(\", \"));\n    assertTrue(cm.values().toString().contains(\", \"));\n    assertTrue(cm.entrySet().toString().contains(\", \"));\n    assertTrue(cm.toString().contains(\", \"));\n  }\n\n","sourceOld":"  public void testToString() {\n    CharArrayMap<Integer> cm = new CharArrayMap<Integer>(Version.LUCENE_CURRENT, Collections.singletonMap(\"test\",1), false);\n    assertEquals(\"[test]\",cm.keySet().toString());\n    assertEquals(\"[1]\",cm.values().toString());\n    assertEquals(\"[test=1]\",cm.entrySet().toString());\n    assertEquals(\"{test=1}\",cm.toString());\n    cm.put(\"test2\", 2);\n    assertTrue(cm.keySet().toString().contains(\", \"));\n    assertTrue(cm.values().toString().contains(\", \"));\n    assertTrue(cm.entrySet().toString().contains(\", \"));\n    assertTrue(cm.toString().contains(\", \"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestCharArrayMap#testToString().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestCharArrayMap#testToString().mjava","sourceNew":"  public void testToString() {\n    CharArrayMap<Integer> cm = new CharArrayMap<Integer>(TEST_VERSION_CURRENT, Collections.singletonMap(\"test\",1), false);\n    assertEquals(\"[test]\",cm.keySet().toString());\n    assertEquals(\"[1]\",cm.values().toString());\n    assertEquals(\"[test=1]\",cm.entrySet().toString());\n    assertEquals(\"{test=1}\",cm.toString());\n    cm.put(\"test2\", 2);\n    assertTrue(cm.keySet().toString().contains(\", \"));\n    assertTrue(cm.values().toString().contains(\", \"));\n    assertTrue(cm.entrySet().toString().contains(\", \"));\n    assertTrue(cm.toString().contains(\", \"));\n  }\n\n","sourceOld":"  public void testToString() {\n    CharArrayMap<Integer> cm = new CharArrayMap<Integer>(TEST_VERSION_CURRENT, Collections.singletonMap(\"test\",1), false);\n    assertEquals(\"[test]\",cm.keySet().toString());\n    assertEquals(\"[1]\",cm.values().toString());\n    assertEquals(\"[test=1]\",cm.entrySet().toString());\n    assertEquals(\"{test=1}\",cm.toString());\n    cm.put(\"test2\", 2);\n    assertTrue(cm.keySet().toString().contains(\", \"));\n    assertTrue(cm.values().toString().contains(\", \"));\n    assertTrue(cm.entrySet().toString().contains(\", \"));\n    assertTrue(cm.toString().contains(\", \"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3c09067bd60a59f680992d62794689898c0148ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["3c09067bd60a59f680992d62794689898c0148ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"]},"commit2Childs":{"3c09067bd60a59f680992d62794689898c0148ac":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3c09067bd60a59f680992d62794689898c0148ac"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}