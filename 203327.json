{"path":"src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","commits":[{"id":"53df68381fe22c8eaf758533d0d5e1db43b925ac","date":1071529482,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","pathOld":"/dev/null","sourceNew":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.  The norm represents the product of the field's {@link\n   * Field#setBoost(float) boost} and its {@link Similarity#lengthNorm(String,\n   * int) length normalization}.  Thus, to preserve the length normalization\n   * values when resetting this, one should base the new value upon the old.\n   *\n   * @see #norms(String)\n   * @see Similarity#decodeNorm(byte)\n   */\n  public abstract void setNorm(int doc, String field, byte value)\n    throws IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770281b8a8459cafcdd2354b6a06078fea2d83c9","date":1077308096,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","sourceNew":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.  The norm represents the product of the field's {@link\n   * Field#setBoost(float) boost} and its {@link Similarity#lengthNorm(String,\n          * int) length normalization}.  Thus, to preserve the length normalization\n   * values when resetting this, one should base the new value upon the old.\n   *\n   * @see #norms(String)\n   * @see Similarity#decodeNorm(byte)\n   */\n  public abstract void setNorm(int doc, String field, byte value)\n          throws IOException;\n\n","sourceOld":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.  The norm represents the product of the field's {@link\n   * Field#setBoost(float) boost} and its {@link Similarity#lengthNorm(String,\n   * int) length normalization}.  Thus, to preserve the length normalization\n   * values when resetting this, one should base the new value upon the old.\n   *\n   * @see #norms(String)\n   * @see Similarity#decodeNorm(byte)\n   */\n  public abstract void setNorm(int doc, String field, byte value)\n    throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f653aecb322b74d99e6ecdb93765e453a3d7aa71","date":1082107025,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","sourceNew":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.  The norm represents the product of the field's {@link\n   * Field#setBoost(float) boost} and its {@link Similarity#lengthNorm(String,\n          * int) length normalization}.  Thus, to preserve the length normalization\n   * values when resetting this, one should base the new value upon the old.\n   *\n   * @see #norms(String)\n   * @see Similarity#decodeNorm(byte)\n   */\n  public final synchronized  void setNorm(int doc, String field, byte value)\n          throws IOException{\n    if(directoryOwner)\n      aquireWriteLock();\n    doSetNorm(doc, field, value);\n    hasChanges = true;\n  }\n\n","sourceOld":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.  The norm represents the product of the field's {@link\n   * Field#setBoost(float) boost} and its {@link Similarity#lengthNorm(String,\n          * int) length normalization}.  Thus, to preserve the length normalization\n   * values when resetting this, one should base the new value upon the old.\n   *\n   * @see #norms(String)\n   * @see Similarity#decodeNorm(byte)\n   */\n  public abstract void setNorm(int doc, String field, byte value)\n          throws IOException;\n\n","bugFix":null,"bugIntro":["1b54a9bc667895a2095a886184bf69a3179e63df","696c7f6195b9683173ed379ce507833cf983ae95"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b8cdfcb1011da40bd2e4a6606337b8aeef65004c","date":1092602970,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","sourceNew":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.  The norm represents the product of the field's {@link\n   * Field#setBoost(float) boost} and its {@link Similarity#lengthNorm(String,\n   * int) length normalization}.  Thus, to preserve the length normalization\n   * values when resetting this, one should base the new value upon the old.\n   *\n   * @see #norms(String)\n   * @see Similarity#decodeNorm(byte)\n   */\n  public final synchronized  void setNorm(int doc, String field, byte value)\n          throws IOException{\n    if(directoryOwner)\n      aquireWriteLock();\n    doSetNorm(doc, field, value);\n    hasChanges = true;\n  }\n\n","sourceOld":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.  The norm represents the product of the field's {@link\n   * Field#setBoost(float) boost} and its {@link Similarity#lengthNorm(String,\n          * int) length normalization}.  Thus, to preserve the length normalization\n   * values when resetting this, one should base the new value upon the old.\n   *\n   * @see #norms(String)\n   * @see Similarity#decodeNorm(byte)\n   */\n  public final synchronized  void setNorm(int doc, String field, byte value)\n          throws IOException{\n    if(directoryOwner)\n      aquireWriteLock();\n    doSetNorm(doc, field, value);\n    hasChanges = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"12d40284fd9481f79444bc63bc5d13847caddd3d","date":1149902602,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","sourceNew":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.  The norm represents the product of the field's {@link\n   * Fieldable#setBoost(float) boost} and its {@link Similarity#lengthNorm(String,\n   * int) length normalization}.  Thus, to preserve the length normalization\n   * values when resetting this, one should base the new value upon the old.\n   *\n   * @see #norms(String)\n   * @see Similarity#decodeNorm(byte)\n   */\n  public final synchronized  void setNorm(int doc, String field, byte value)\n          throws IOException{\n    if(directoryOwner)\n      aquireWriteLock();\n    doSetNorm(doc, field, value);\n    hasChanges = true;\n  }\n\n","sourceOld":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.  The norm represents the product of the field's {@link\n   * Field#setBoost(float) boost} and its {@link Similarity#lengthNorm(String,\n   * int) length normalization}.  Thus, to preserve the length normalization\n   * values when resetting this, one should base the new value upon the old.\n   *\n   * @see #norms(String)\n   * @see Similarity#decodeNorm(byte)\n   */\n  public final synchronized  void setNorm(int doc, String field, byte value)\n          throws IOException{\n    if(directoryOwner)\n      aquireWriteLock();\n    doSetNorm(doc, field, value);\n    hasChanges = true;\n  }\n\n","bugFix":null,"bugIntro":["1b54a9bc667895a2095a886184bf69a3179e63df"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"696c7f6195b9683173ed379ce507833cf983ae95","date":1168362837,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","sourceNew":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.  The norm represents the product of the field's {@link\n   * Fieldable#setBoost(float) boost} and its {@link Similarity#lengthNorm(String,\n   * int) length normalization}.  Thus, to preserve the length normalization\n   * values when resetting this, one should base the new value upon the old.\n   *\n   * @see #norms(String)\n   * @see Similarity#decodeNorm(byte)\n   */\n  public final synchronized  void setNorm(int doc, String field, byte value)\n          throws IOException{\n    if(directoryOwner)\n      aquireWriteLock();\n    hasChanges = true;\n    doSetNorm(doc, field, value);\n  }\n\n","sourceOld":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.  The norm represents the product of the field's {@link\n   * Fieldable#setBoost(float) boost} and its {@link Similarity#lengthNorm(String,\n   * int) length normalization}.  Thus, to preserve the length normalization\n   * values when resetting this, one should base the new value upon the old.\n   *\n   * @see #norms(String)\n   * @see Similarity#decodeNorm(byte)\n   */\n  public final synchronized  void setNorm(int doc, String field, byte value)\n          throws IOException{\n    if(directoryOwner)\n      aquireWriteLock();\n    doSetNorm(doc, field, value);\n    hasChanges = true;\n  }\n\n","bugFix":["f653aecb322b74d99e6ecdb93765e453a3d7aa71"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1b54a9bc667895a2095a886184bf69a3179e63df","date":1172088096,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","sourceNew":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.  The norm represents the product of the field's {@link\n   * org.apache.lucene.document.Fieldable#setBoost(float) boost} and its {@link Similarity#lengthNorm(String,\n   * int) length normalization}.  Thus, to preserve the length normalization\n   * values when resetting this, one should base the new value upon the old.\n   *\n   * @see #norms(String)\n   * @see Similarity#decodeNorm(byte)\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if this reader was closed already\n   *  or there is a low-level IO error\n   */\n  public final synchronized  void setNorm(int doc, String field, byte value)\n          throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    if(directoryOwner)\n      acquireWriteLock();\n    hasChanges = true;\n    doSetNorm(doc, field, value);\n  }\n\n","sourceOld":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.  The norm represents the product of the field's {@link\n   * Fieldable#setBoost(float) boost} and its {@link Similarity#lengthNorm(String,\n   * int) length normalization}.  Thus, to preserve the length normalization\n   * values when resetting this, one should base the new value upon the old.\n   *\n   * @see #norms(String)\n   * @see Similarity#decodeNorm(byte)\n   */\n  public final synchronized  void setNorm(int doc, String field, byte value)\n          throws IOException{\n    if(directoryOwner)\n      aquireWriteLock();\n    hasChanges = true;\n    doSetNorm(doc, field, value);\n  }\n\n","bugFix":["f653aecb322b74d99e6ecdb93765e453a3d7aa71","12d40284fd9481f79444bc63bc5d13847caddd3d"],"bugIntro":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"328c1568e471f0c6eaa49ec00334ca59e573710f","date":1173897963,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","sourceNew":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.  The norm represents the product of the field's {@link\n   * org.apache.lucene.document.Fieldable#setBoost(float) boost} and its {@link Similarity#lengthNorm(String,\n   * int) length normalization}.  Thus, to preserve the length normalization\n   * values when resetting this, one should base the new value upon the old.\n   *\n   * @see #norms(String)\n   * @see Similarity#decodeNorm(byte)\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public final synchronized  void setNorm(int doc, String field, byte value)\n          throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    if(directoryOwner)\n      acquireWriteLock();\n    hasChanges = true;\n    doSetNorm(doc, field, value);\n  }\n\n","sourceOld":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.  The norm represents the product of the field's {@link\n   * org.apache.lucene.document.Fieldable#setBoost(float) boost} and its {@link Similarity#lengthNorm(String,\n   * int) length normalization}.  Thus, to preserve the length normalization\n   * values when resetting this, one should base the new value upon the old.\n   *\n   * @see #norms(String)\n   * @see Similarity#decodeNorm(byte)\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if this reader was closed already\n   *  or there is a low-level IO error\n   */\n  public final synchronized  void setNorm(int doc, String field, byte value)\n          throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    if(directoryOwner)\n      acquireWriteLock();\n    hasChanges = true;\n    doSetNorm(doc, field, value);\n  }\n\n","bugFix":["1b54a9bc667895a2095a886184bf69a3179e63df"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"125b5699f11b58d9be0820c6ce8b1648812902e8","date":1190273227,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","sourceNew":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.  The norm represents the product of the field's {@link\n   * org.apache.lucene.document.Fieldable#setBoost(float) boost} and its {@link Similarity#lengthNorm(String,\n   * int) length normalization}.  Thus, to preserve the length normalization\n   * values when resetting this, one should base the new value upon the old.\n   *\n   * @see #norms(String)\n   * @see Similarity#decodeNorm(byte)\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public final synchronized  void setNorm(int doc, String field, byte value)\n          throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doSetNorm(doc, field, value);\n  }\n\n","sourceOld":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.  The norm represents the product of the field's {@link\n   * org.apache.lucene.document.Fieldable#setBoost(float) boost} and its {@link Similarity#lengthNorm(String,\n   * int) length normalization}.  Thus, to preserve the length normalization\n   * values when resetting this, one should base the new value upon the old.\n   *\n   * @see #norms(String)\n   * @see Similarity#decodeNorm(byte)\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public final synchronized  void setNorm(int doc, String field, byte value)\n          throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    if(directoryOwner)\n      acquireWriteLock();\n    hasChanges = true;\n    doSetNorm(doc, field, value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5712975970a595c28f1988efd007e1b8a617a92f","date":1219499238,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","sourceNew":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.  The norm represents the product of the field's {@link\n   * org.apache.lucene.document.Fieldable#setBoost(float) boost} and its {@link Similarity#lengthNorm(String,\n   * int) length normalization}.  Thus, to preserve the length normalization\n   * values when resetting this, one should base the new value upon the old.\n   *\n   * @see #norms(String)\n   * @see Similarity#decodeNorm(byte)\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized  void setNorm(int doc, String field, byte value)\n          throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doSetNorm(doc, field, value);\n  }\n\n","sourceOld":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.  The norm represents the product of the field's {@link\n   * org.apache.lucene.document.Fieldable#setBoost(float) boost} and its {@link Similarity#lengthNorm(String,\n   * int) length normalization}.  Thus, to preserve the length normalization\n   * values when resetting this, one should base the new value upon the old.\n   *\n   * @see #norms(String)\n   * @see Similarity#decodeNorm(byte)\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public final synchronized  void setNorm(int doc, String field, byte value)\n          throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doSetNorm(doc, field, value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a","date":1240951127,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","sourceNew":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.  The norm represents the product of the field's {@link\n   * org.apache.lucene.document.Fieldable#setBoost(float) boost} and its {@link Similarity#lengthNorm(String,\n   * int) length normalization}.  Thus, to preserve the length normalization\n   * values when resetting this, one should base the new value upon the old.\n   *\n   * <b>NOTE:</b> If this field does not store norms, then\n   * this method call will silently do nothing.\n   *\n   * @see #norms(String)\n   * @see Similarity#decodeNorm(byte)\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized  void setNorm(int doc, String field, byte value)\n          throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doSetNorm(doc, field, value);\n  }\n\n","sourceOld":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.  The norm represents the product of the field's {@link\n   * org.apache.lucene.document.Fieldable#setBoost(float) boost} and its {@link Similarity#lengthNorm(String,\n   * int) length normalization}.  Thus, to preserve the length normalization\n   * values when resetting this, one should base the new value upon the old.\n   *\n   * @see #norms(String)\n   * @see Similarity#decodeNorm(byte)\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized  void setNorm(int doc, String field, byte value)\n          throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doSetNorm(doc, field, value);\n  }\n\n","bugFix":null,"bugIntro":["0e7f1e9c48dcf5351850e841f712bf65196dcf74"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b0eb5b0b5b98c777dad412afbfb347d2c0889327","date":1259094367,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","sourceNew":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.  The norm represents the product of the field's {@link\n   * org.apache.lucene.document.Fieldable#setBoost(float) boost} and its {@link Similarity#lengthNorm(String,\n   * int) length normalization}.  Thus, to preserve the length normalization\n   * values when resetting this, one should base the new value upon the old.\n   *\n   * <b>NOTE:</b> If this field does not store norms, then\n   * this method call will silently do nothing.\n   *\n   * @see #norms(String)\n   * @see Similarity#decodeNormValue(byte)\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized  void setNorm(int doc, String field, byte value)\n          throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doSetNorm(doc, field, value);\n  }\n\n","sourceOld":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.  The norm represents the product of the field's {@link\n   * org.apache.lucene.document.Fieldable#setBoost(float) boost} and its {@link Similarity#lengthNorm(String,\n   * int) length normalization}.  Thus, to preserve the length normalization\n   * values when resetting this, one should base the new value upon the old.\n   *\n   * <b>NOTE:</b> If this field does not store norms, then\n   * this method call will silently do nothing.\n   *\n   * @see #norms(String)\n   * @see Similarity#decodeNorm(byte)\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized  void setNorm(int doc, String field, byte value)\n          throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doSetNorm(doc, field, value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#setNorm(int,String,byte).mjava","sourceNew":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.  The norm represents the product of the field's {@link\n   * org.apache.lucene.document.Fieldable#setBoost(float) boost} and its {@link Similarity#lengthNorm(String,\n   * int) length normalization}.  Thus, to preserve the length normalization\n   * values when resetting this, one should base the new value upon the old.\n   *\n   * <b>NOTE:</b> If this field does not store norms, then\n   * this method call will silently do nothing.\n   *\n   * @see #norms(String)\n   * @see Similarity#decodeNormValue(byte)\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized  void setNorm(int doc, String field, byte value)\n          throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doSetNorm(doc, field, value);\n  }\n\n","sourceOld":"  /** Expert: Resets the normalization factor for the named field of the named\n   * document.  The norm represents the product of the field's {@link\n   * org.apache.lucene.document.Fieldable#setBoost(float) boost} and its {@link Similarity#lengthNorm(String,\n   * int) length normalization}.  Thus, to preserve the length normalization\n   * values when resetting this, one should base the new value upon the old.\n   *\n   * <b>NOTE:</b> If this field does not store norms, then\n   * this method call will silently do nothing.\n   *\n   * @see #norms(String)\n   * @see Similarity#decodeNormValue(byte)\n   * @throws StaleReaderException if the index has changed\n   *  since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if there is a low-level IO error\n   */\n  public synchronized  void setNorm(int doc, String field, byte value)\n          throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n    ensureOpen();\n    acquireWriteLock();\n    hasChanges = true;\n    doSetNorm(doc, field, value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"125b5699f11b58d9be0820c6ce8b1648812902e8":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"328c1568e471f0c6eaa49ec00334ca59e573710f":["1b54a9bc667895a2095a886184bf69a3179e63df"],"20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a":["5712975970a595c28f1988efd007e1b8a617a92f"],"5712975970a595c28f1988efd007e1b8a617a92f":["125b5699f11b58d9be0820c6ce8b1648812902e8"],"b8cdfcb1011da40bd2e4a6606337b8aeef65004c":["f653aecb322b74d99e6ecdb93765e453a3d7aa71"],"1b54a9bc667895a2095a886184bf69a3179e63df":["696c7f6195b9683173ed379ce507833cf983ae95"],"53df68381fe22c8eaf758533d0d5e1db43b925ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b0eb5b0b5b98c777dad412afbfb347d2c0889327":["20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a"],"f653aecb322b74d99e6ecdb93765e453a3d7aa71":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["b8cdfcb1011da40bd2e4a6606337b8aeef65004c"],"770281b8a8459cafcdd2354b6a06078fea2d83c9":["53df68381fe22c8eaf758533d0d5e1db43b925ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"696c7f6195b9683173ed379ce507833cf983ae95":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b0eb5b0b5b98c777dad412afbfb347d2c0889327"]},"commit2Childs":{"125b5699f11b58d9be0820c6ce8b1648812902e8":["5712975970a595c28f1988efd007e1b8a617a92f"],"328c1568e471f0c6eaa49ec00334ca59e573710f":["125b5699f11b58d9be0820c6ce8b1648812902e8"],"20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a":["b0eb5b0b5b98c777dad412afbfb347d2c0889327"],"5712975970a595c28f1988efd007e1b8a617a92f":["20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a"],"b8cdfcb1011da40bd2e4a6606337b8aeef65004c":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"1b54a9bc667895a2095a886184bf69a3179e63df":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"53df68381fe22c8eaf758533d0d5e1db43b925ac":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"f653aecb322b74d99e6ecdb93765e453a3d7aa71":["b8cdfcb1011da40bd2e4a6606337b8aeef65004c"],"b0eb5b0b5b98c777dad412afbfb347d2c0889327":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["696c7f6195b9683173ed379ce507833cf983ae95"],"770281b8a8459cafcdd2354b6a06078fea2d83c9":["f653aecb322b74d99e6ecdb93765e453a3d7aa71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["53df68381fe22c8eaf758533d0d5e1db43b925ac"],"696c7f6195b9683173ed379ce507833cf983ae95":["1b54a9bc667895a2095a886184bf69a3179e63df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}