{"path":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#parseCalendar(String).mjava","commits":[{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#parseCalendar(String).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#parseCalendar(String).mjava","sourceNew":"  /** Calendar utility method:\n   * The reverse of {@link #toString(java.util.Calendar)}. It will only set the fields found, leaving\n   * the remainder in an un-set state. A leading '-' or '+' is optional (positive assumed), and a\n   * trailing 'Z' is also optional.\n   * @param str not null and not empty\n   * @return not null\n   */\n  public Calendar parseCalendar(String str) throws ParseException {\n    // example: +2014-10-23T21:22:33.159Z\n    if (str == null || str.isEmpty())\n      throw new IllegalArgumentException(\"str is null or blank\");\n    Calendar cal = newCal();\n    if (str.equals(\"*\"))\n      return cal;\n    int offset = 0;//a pointer\n    try {\n      //year & era:\n      int lastOffset = str.charAt(str.length()-1) == 'Z' ? str.length() - 1 : str.length();\n      int hyphenIdx = str.indexOf('-', 1);//look past possible leading hyphen\n      if (hyphenIdx < 0)\n        hyphenIdx = lastOffset;\n      int year = Integer.parseInt(str.substring(offset, hyphenIdx));\n      cal.set(Calendar.ERA, year <= 0 ? 0 : 1);\n      cal.set(Calendar.YEAR, year <= 0 ? -1*year + 1 : year);\n      offset = hyphenIdx + 1;\n      if (lastOffset < offset)\n        return cal;\n\n      //NOTE: We aren't validating separator chars, and we unintentionally accept leading +/-.\n      // The str.substring()'s hopefully get optimized to be stack-allocated.\n\n      //month:\n      cal.set(Calendar.MONTH, Integer.parseInt(str.substring(offset, offset+2)) - 1);//starts at 0\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      //day:\n      cal.set(Calendar.DAY_OF_MONTH, Integer.parseInt(str.substring(offset, offset+2)));\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      //hour:\n      cal.set(Calendar.HOUR_OF_DAY, Integer.parseInt(str.substring(offset, offset+2)));\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      //minute:\n      cal.set(Calendar.MINUTE, Integer.parseInt(str.substring(offset, offset+2)));\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      //second:\n      cal.set(Calendar.SECOND, Integer.parseInt(str.substring(offset, offset+2)));\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      //ms:\n      cal.set(Calendar.MILLISECOND, Integer.parseInt(str.substring(offset, offset+3)));\n      offset += 3;//last one, move to next char\n      if (lastOffset == offset)\n        return cal;\n    } catch (Exception e) {\n      ParseException pe = new ParseException(\"Improperly formatted date: \"+str, offset);\n      pe.initCause(e);\n      throw pe;\n    }\n    throw new ParseException(\"Improperly formatted date: \"+str, offset);\n  }\n\n","sourceOld":"  /** Calendar utility method:\n   * The reverse of {@link #toString(java.util.Calendar)}. It will only set the fields found, leaving\n   * the remainder in an un-set state. A leading '-' or '+' is optional (positive assumed), and a\n   * trailing 'Z' is also optional.\n   * @param str not null and not empty\n   * @return not null\n   */\n  public Calendar parseCalendar(String str) throws ParseException {\n    // example: +2014-10-23T21:22:33.159Z\n    if (str == null || str.isEmpty())\n      throw new IllegalArgumentException(\"str is null or blank\");\n    Calendar cal = newCal();\n    if (str.equals(\"*\"))\n      return cal;\n    int offset = 0;//a pointer\n    try {\n      //year & era:\n      int lastOffset = str.charAt(str.length()-1) == 'Z' ? str.length() - 1 : str.length();\n      int hyphenIdx = str.indexOf('-', 1);//look past possible leading hyphen\n      if (hyphenIdx < 0)\n        hyphenIdx = lastOffset;\n      int year = Integer.parseInt(str.substring(offset, hyphenIdx));\n      cal.set(Calendar.ERA, year <= 0 ? 0 : 1);\n      cal.set(Calendar.YEAR, year <= 0 ? -1*year + 1 : year);\n      offset = hyphenIdx + 1;\n      if (lastOffset < offset)\n        return cal;\n\n      //NOTE: We aren't validating separator chars, and we unintentionally accept leading +/-.\n      // The str.substring()'s hopefully get optimized to be stack-allocated.\n\n      //month:\n      cal.set(Calendar.MONTH, Integer.parseInt(str.substring(offset, offset+2)) - 1);//starts at 0\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      //day:\n      cal.set(Calendar.DAY_OF_MONTH, Integer.parseInt(str.substring(offset, offset+2)));\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      //hour:\n      cal.set(Calendar.HOUR_OF_DAY, Integer.parseInt(str.substring(offset, offset+2)));\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      //minute:\n      cal.set(Calendar.MINUTE, Integer.parseInt(str.substring(offset, offset+2)));\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      //second:\n      cal.set(Calendar.SECOND, Integer.parseInt(str.substring(offset, offset+2)));\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      //ms:\n      cal.set(Calendar.MILLISECOND, Integer.parseInt(str.substring(offset, offset+3)));\n      offset += 3;//last one, move to next char\n      if (lastOffset == offset)\n        return cal;\n    } catch (Exception e) {\n      ParseException pe = new ParseException(\"Improperly formatted date: \"+str, offset);\n      pe.initCause(e);\n      throw pe;\n    }\n    throw new ParseException(\"Improperly formatted date: \"+str, offset);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#parseCalendar(String).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#parseCalendar(String).mjava","sourceNew":"  /** Calendar utility method:\n   * The reverse of {@link #toString(java.util.Calendar)}. It will only set the fields found, leaving\n   * the remainder in an un-set state. A leading '-' or '+' is optional (positive assumed), and a\n   * trailing 'Z' is also optional.\n   * @param str not null and not empty\n   * @return not null\n   */\n  public Calendar parseCalendar(String str) throws ParseException {\n    // example: +2014-10-23T21:22:33.159Z\n    if (str == null || str.isEmpty())\n      throw new IllegalArgumentException(\"str is null or blank\");\n    Calendar cal = newCal();\n    if (str.equals(\"*\"))\n      return cal;\n    int offset = 0;//a pointer\n    try {\n      //year & era:\n      int lastOffset = str.charAt(str.length()-1) == 'Z' ? str.length() - 1 : str.length();\n      int hyphenIdx = str.indexOf('-', 1);//look past possible leading hyphen\n      if (hyphenIdx < 0)\n        hyphenIdx = lastOffset;\n      int year = Integer.parseInt(str.substring(offset, hyphenIdx));\n      cal.set(Calendar.ERA, year <= 0 ? 0 : 1);\n      cal.set(Calendar.YEAR, year <= 0 ? -1*year + 1 : year);\n      offset = hyphenIdx + 1;\n      if (lastOffset < offset)\n        return cal;\n\n      //NOTE: We aren't validating separator chars, and we unintentionally accept leading +/-.\n      // The str.substring()'s hopefully get optimized to be stack-allocated.\n\n      //month:\n      cal.set(Calendar.MONTH, Integer.parseInt(str.substring(offset, offset+2)) - 1);//starts at 0\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      //day:\n      cal.set(Calendar.DAY_OF_MONTH, Integer.parseInt(str.substring(offset, offset+2)));\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      //hour:\n      cal.set(Calendar.HOUR_OF_DAY, Integer.parseInt(str.substring(offset, offset+2)));\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      //minute:\n      cal.set(Calendar.MINUTE, Integer.parseInt(str.substring(offset, offset+2)));\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      //second:\n      cal.set(Calendar.SECOND, Integer.parseInt(str.substring(offset, offset+2)));\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      //ms:\n      cal.set(Calendar.MILLISECOND, Integer.parseInt(str.substring(offset, offset+3)));\n      offset += 3;//last one, move to next char\n      if (lastOffset == offset)\n        return cal;\n    } catch (Exception e) {\n      ParseException pe = new ParseException(\"Improperly formatted date: \"+str, offset);\n      pe.initCause(e);\n      throw pe;\n    }\n    throw new ParseException(\"Improperly formatted date: \"+str, offset);\n  }\n\n","sourceOld":"  /** Calendar utility method:\n   * The reverse of {@link #toString(java.util.Calendar)}. It will only set the fields found, leaving\n   * the remainder in an un-set state. A leading '-' or '+' is optional (positive assumed), and a\n   * trailing 'Z' is also optional.\n   * @param str not null and not empty\n   * @return not null\n   */\n  public Calendar parseCalendar(String str) throws ParseException {\n    // example: +2014-10-23T21:22:33.159Z\n    if (str == null || str.isEmpty())\n      throw new IllegalArgumentException(\"str is null or blank\");\n    Calendar cal = newCal();\n    if (str.equals(\"*\"))\n      return cal;\n    int offset = 0;//a pointer\n    try {\n      //year & era:\n      int lastOffset = str.charAt(str.length()-1) == 'Z' ? str.length() - 1 : str.length();\n      int hyphenIdx = str.indexOf('-', 1);//look past possible leading hyphen\n      if (hyphenIdx < 0)\n        hyphenIdx = lastOffset;\n      int year = Integer.parseInt(str.substring(offset, hyphenIdx));\n      cal.set(Calendar.ERA, year <= 0 ? 0 : 1);\n      cal.set(Calendar.YEAR, year <= 0 ? -1*year + 1 : year);\n      offset = hyphenIdx + 1;\n      if (lastOffset < offset)\n        return cal;\n\n      //NOTE: We aren't validating separator chars, and we unintentionally accept leading +/-.\n      // The str.substring()'s hopefully get optimized to be stack-allocated.\n\n      //month:\n      cal.set(Calendar.MONTH, Integer.parseInt(str.substring(offset, offset+2)) - 1);//starts at 0\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      //day:\n      cal.set(Calendar.DAY_OF_MONTH, Integer.parseInt(str.substring(offset, offset+2)));\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      //hour:\n      cal.set(Calendar.HOUR_OF_DAY, Integer.parseInt(str.substring(offset, offset+2)));\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      //minute:\n      cal.set(Calendar.MINUTE, Integer.parseInt(str.substring(offset, offset+2)));\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      //second:\n      cal.set(Calendar.SECOND, Integer.parseInt(str.substring(offset, offset+2)));\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      //ms:\n      cal.set(Calendar.MILLISECOND, Integer.parseInt(str.substring(offset, offset+3)));\n      offset += 3;//last one, move to next char\n      if (lastOffset == offset)\n        return cal;\n    } catch (Exception e) {\n      ParseException pe = new ParseException(\"Improperly formatted date: \"+str, offset);\n      pe.initCause(e);\n      throw pe;\n    }\n    throw new ParseException(\"Improperly formatted date: \"+str, offset);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cea86be0df3af191454c4312a9255681b0b80673","date":1548614728,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#parseCalendar(String).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#parseCalendar(String).mjava","sourceNew":"  /** Calendar utility method:\n   * The reverse of {@link #toString(java.util.Calendar)}. It will only set the fields found, leaving\n   * the remainder in an un-set state. A leading '-' or '+' is optional (positive assumed), and a\n   * trailing 'Z' is also optional.\n   * @param str not null and not empty\n   * @return not null\n   */\n  public Calendar parseCalendar(String str) throws ParseException {\n    // example: +2014-10-23T21:22:33.159Z\n    if (str == null || str.isEmpty())\n      throw new IllegalArgumentException(\"str is null or blank\");\n    Calendar cal = newCal();\n    if (str.equals(\"*\"))\n      return cal;\n    int offset = 0;//a pointer\n    int parsedVal = 0;\n    try {\n      //year & era:\n      int lastOffset = str.charAt(str.length()-1) == 'Z' ? str.length() - 1 : str.length();\n      int hyphenIdx = str.indexOf('-', 1);//look past possible leading hyphen\n      if (hyphenIdx < 0)\n        hyphenIdx = lastOffset;\n      int year = Integer.parseInt(str.substring(offset, hyphenIdx));\n      cal.set(Calendar.ERA, year <= 0 ? 0 : 1);\n      cal.set(Calendar.YEAR, year <= 0 ? -1*year + 1 : year);\n      offset = hyphenIdx + 1;\n      if (lastOffset < offset)\n        return cal;\n\n      //NOTE: We aren't validating separator chars, and we unintentionally accept leading +/-.\n      // The str.substring()'s hopefully get optimized to be stack-allocated.\n\n      //month:\n      parsedVal = parseAndCheck( str, offset, 1, 12);\n      cal.set(Calendar.MONTH, parsedVal - 1);//starts at 0\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      //day:\n      checkDelimeter(str, offset-1, '-');\n\n      parsedVal = parseAndCheck( str, offset, 1, 31);\n      cal.set(Calendar.DAY_OF_MONTH, parsedVal);\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      checkDelimeter(str, offset-1, 'T');\n      //hour:\n\n      parsedVal = parseAndCheck( str, offset, 0, 24);\n      cal.set(Calendar.HOUR_OF_DAY, parsedVal);\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      checkDelimeter(str, offset-1, ':');\n      //minute:\n\n      parsedVal = parseAndCheck( str, offset, 1, 60);\n      cal.set(Calendar.MINUTE, parsedVal);\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      checkDelimeter(str, offset-1, ':');\n      //second:\n\n      parsedVal = parseAndCheck( str, offset, 1, 60);\n      cal.set(Calendar.SECOND, parsedVal);\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      checkDelimeter(str, offset-1, '.');\n      //ms:\n\n      cal.set(Calendar.MILLISECOND, Integer.parseInt(str.substring(offset, offset+3)));\n      offset += 3;//last one, move to next char\n      if (lastOffset == offset)\n        return cal;\n    } catch (Exception e) {\n      ParseException pe = new ParseException(\"Improperly formatted datetime: \"+str, offset);\n      pe.initCause(e);\n      throw pe;\n    }\n    throw new ParseException(\"Improperly formatted datetime: \"+str, offset);\n  }\n\n","sourceOld":"  /** Calendar utility method:\n   * The reverse of {@link #toString(java.util.Calendar)}. It will only set the fields found, leaving\n   * the remainder in an un-set state. A leading '-' or '+' is optional (positive assumed), and a\n   * trailing 'Z' is also optional.\n   * @param str not null and not empty\n   * @return not null\n   */\n  public Calendar parseCalendar(String str) throws ParseException {\n    // example: +2014-10-23T21:22:33.159Z\n    if (str == null || str.isEmpty())\n      throw new IllegalArgumentException(\"str is null or blank\");\n    Calendar cal = newCal();\n    if (str.equals(\"*\"))\n      return cal;\n    int offset = 0;//a pointer\n    try {\n      //year & era:\n      int lastOffset = str.charAt(str.length()-1) == 'Z' ? str.length() - 1 : str.length();\n      int hyphenIdx = str.indexOf('-', 1);//look past possible leading hyphen\n      if (hyphenIdx < 0)\n        hyphenIdx = lastOffset;\n      int year = Integer.parseInt(str.substring(offset, hyphenIdx));\n      cal.set(Calendar.ERA, year <= 0 ? 0 : 1);\n      cal.set(Calendar.YEAR, year <= 0 ? -1*year + 1 : year);\n      offset = hyphenIdx + 1;\n      if (lastOffset < offset)\n        return cal;\n\n      //NOTE: We aren't validating separator chars, and we unintentionally accept leading +/-.\n      // The str.substring()'s hopefully get optimized to be stack-allocated.\n\n      //month:\n      cal.set(Calendar.MONTH, Integer.parseInt(str.substring(offset, offset+2)) - 1);//starts at 0\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      //day:\n      cal.set(Calendar.DAY_OF_MONTH, Integer.parseInt(str.substring(offset, offset+2)));\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      //hour:\n      cal.set(Calendar.HOUR_OF_DAY, Integer.parseInt(str.substring(offset, offset+2)));\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      //minute:\n      cal.set(Calendar.MINUTE, Integer.parseInt(str.substring(offset, offset+2)));\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      //second:\n      cal.set(Calendar.SECOND, Integer.parseInt(str.substring(offset, offset+2)));\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      //ms:\n      cal.set(Calendar.MILLISECOND, Integer.parseInt(str.substring(offset, offset+3)));\n      offset += 3;//last one, move to next char\n      if (lastOffset == offset)\n        return cal;\n    } catch (Exception e) {\n      ParseException pe = new ParseException(\"Improperly formatted date: \"+str, offset);\n      pe.initCause(e);\n      throw pe;\n    }\n    throw new ParseException(\"Improperly formatted date: \"+str, offset);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50aeb34a24c3517f5c50aa5020590923e82f584e","date":1548663274,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#parseCalendar(String).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#parseCalendar(String).mjava","sourceNew":"  /** Calendar utility method:\n   * The reverse of {@link #toString(java.util.Calendar)}. It will only set the fields found, leaving\n   * the remainder in an un-set state. A leading '-' or '+' is optional (positive assumed), and a\n   * trailing 'Z' is also optional.\n   * @param str not null and not empty\n   * @return not null\n   */\n  public Calendar parseCalendar(String str) throws ParseException {\n    // example: +2014-10-23T21:22:33.159Z\n    if (str == null || str.isEmpty())\n      throw new IllegalArgumentException(\"str is null or blank\");\n    Calendar cal = newCal();\n    if (str.equals(\"*\"))\n      return cal;\n    int offset = 0;//a pointer\n    int parsedVal = 0;\n    try {\n      //year & era:\n      int lastOffset = str.charAt(str.length()-1) == 'Z' ? str.length() - 1 : str.length();\n      int hyphenIdx = str.indexOf('-', 1);//look past possible leading hyphen\n      if (hyphenIdx < 0)\n        hyphenIdx = lastOffset;\n      int year = Integer.parseInt(str.substring(offset, hyphenIdx));\n      cal.set(Calendar.ERA, year <= 0 ? 0 : 1);\n      cal.set(Calendar.YEAR, year <= 0 ? -1*year + 1 : year);\n      offset = hyphenIdx + 1;\n      if (lastOffset < offset)\n        return cal;\n\n      //NOTE: We aren't validating separator chars, and we unintentionally accept leading +/-.\n      // The str.substring()'s hopefully get optimized to be stack-allocated.\n\n      //month:\n      parsedVal = parseAndCheck( str, offset, 1, 12);\n      cal.set(Calendar.MONTH, parsedVal - 1);//starts at 0\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      //day:\n      checkDelimeter(str, offset-1, '-');\n\n      parsedVal = parseAndCheck( str, offset, 1, 31);\n      cal.set(Calendar.DAY_OF_MONTH, parsedVal);\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      checkDelimeter(str, offset-1, 'T');\n      //hour:\n\n      parsedVal = parseAndCheck( str, offset, 0, 24);\n      cal.set(Calendar.HOUR_OF_DAY, parsedVal);\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      checkDelimeter(str, offset-1, ':');\n      //minute:\n\n      parsedVal = parseAndCheck( str, offset, 0, 59);\n      cal.set(Calendar.MINUTE, parsedVal);\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      checkDelimeter(str, offset-1, ':');\n      //second:\n\n      parsedVal = parseAndCheck( str, offset, 0, 59);\n      cal.set(Calendar.SECOND, parsedVal);\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      checkDelimeter(str, offset-1, '.');\n      //ms:\n\n      cal.set(Calendar.MILLISECOND, Integer.parseInt(str.substring(offset, offset+3)));\n      offset += 3;//last one, move to next char\n      if (lastOffset == offset)\n        return cal;\n    } catch (Exception e) {\n      ParseException pe = new ParseException(\"Improperly formatted datetime: \"+str, offset);\n      pe.initCause(e);\n      throw pe;\n    }\n    throw new ParseException(\"Improperly formatted datetime: \"+str, offset);\n  }\n\n","sourceOld":"  /** Calendar utility method:\n   * The reverse of {@link #toString(java.util.Calendar)}. It will only set the fields found, leaving\n   * the remainder in an un-set state. A leading '-' or '+' is optional (positive assumed), and a\n   * trailing 'Z' is also optional.\n   * @param str not null and not empty\n   * @return not null\n   */\n  public Calendar parseCalendar(String str) throws ParseException {\n    // example: +2014-10-23T21:22:33.159Z\n    if (str == null || str.isEmpty())\n      throw new IllegalArgumentException(\"str is null or blank\");\n    Calendar cal = newCal();\n    if (str.equals(\"*\"))\n      return cal;\n    int offset = 0;//a pointer\n    int parsedVal = 0;\n    try {\n      //year & era:\n      int lastOffset = str.charAt(str.length()-1) == 'Z' ? str.length() - 1 : str.length();\n      int hyphenIdx = str.indexOf('-', 1);//look past possible leading hyphen\n      if (hyphenIdx < 0)\n        hyphenIdx = lastOffset;\n      int year = Integer.parseInt(str.substring(offset, hyphenIdx));\n      cal.set(Calendar.ERA, year <= 0 ? 0 : 1);\n      cal.set(Calendar.YEAR, year <= 0 ? -1*year + 1 : year);\n      offset = hyphenIdx + 1;\n      if (lastOffset < offset)\n        return cal;\n\n      //NOTE: We aren't validating separator chars, and we unintentionally accept leading +/-.\n      // The str.substring()'s hopefully get optimized to be stack-allocated.\n\n      //month:\n      parsedVal = parseAndCheck( str, offset, 1, 12);\n      cal.set(Calendar.MONTH, parsedVal - 1);//starts at 0\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      //day:\n      checkDelimeter(str, offset-1, '-');\n\n      parsedVal = parseAndCheck( str, offset, 1, 31);\n      cal.set(Calendar.DAY_OF_MONTH, parsedVal);\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      checkDelimeter(str, offset-1, 'T');\n      //hour:\n\n      parsedVal = parseAndCheck( str, offset, 0, 24);\n      cal.set(Calendar.HOUR_OF_DAY, parsedVal);\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      checkDelimeter(str, offset-1, ':');\n      //minute:\n\n      parsedVal = parseAndCheck( str, offset, 1, 60);\n      cal.set(Calendar.MINUTE, parsedVal);\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      checkDelimeter(str, offset-1, ':');\n      //second:\n\n      parsedVal = parseAndCheck( str, offset, 1, 60);\n      cal.set(Calendar.SECOND, parsedVal);\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      checkDelimeter(str, offset-1, '.');\n      //ms:\n\n      cal.set(Calendar.MILLISECOND, Integer.parseInt(str.substring(offset, offset+3)));\n      offset += 3;//last one, move to next char\n      if (lastOffset == offset)\n        return cal;\n    } catch (Exception e) {\n      ParseException pe = new ParseException(\"Improperly formatted datetime: \"+str, offset);\n      pe.initCause(e);\n      throw pe;\n    }\n    throw new ParseException(\"Improperly formatted datetime: \"+str, offset);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e5b3d1ec8b5f671731ced50c3f94a717677c09f","date":1556685139,"type":3,"author":"Thomas Lemmé","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#parseCalendar(String).mjava","pathOld":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/DateRangePrefixTree#parseCalendar(String).mjava","sourceNew":"  /** Calendar utility method:\n   * The reverse of {@link #toString(java.util.Calendar)}. It will only set the fields found, leaving\n   * the remainder in an un-set state. A leading '-' or '+' is optional (positive assumed), and a\n   * trailing 'Z' is also optional.\n   * @param str not null and not empty\n   * @return not null\n   */\n  public Calendar parseCalendar(String str) throws ParseException {\n    // example: +2014-10-23T21:22:33.159Z\n    if (str == null || str.isEmpty())\n      throw new IllegalArgumentException(\"str is null or blank\");\n    Calendar cal = newCal();\n    if (str.equals(\"*\"))\n      return cal;\n    int offset = 0;//a pointer\n    int parsedVal = 0;\n    try {\n      //year & era:\n      int lastOffset = str.charAt(str.length()-1) == 'Z' ? str.length() - 1 : str.length();\n      int hyphenIdx = str.indexOf('-', 1);//look past possible leading hyphen\n      if (hyphenIdx < 0)\n        hyphenIdx = lastOffset;\n      int year = Integer.parseInt(str.substring(offset, hyphenIdx));\n      cal.set(Calendar.ERA, year <= 0 ? 0 : 1);\n      cal.set(Calendar.YEAR, year <= 0 ? -1*year + 1 : year);\n      offset = hyphenIdx + 1;\n      if (lastOffset < offset)\n        return cal;\n\n      //NOTE: We aren't validating separator chars, and we unintentionally accept leading +/-.\n      // The str.substring()'s hopefully get optimized to be stack-allocated.\n\n      //month:\n      parsedVal = parseAndCheck( str, offset, 1, 12);\n      cal.set(Calendar.MONTH, parsedVal - 1);//starts at 0\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      //day:\n      checkDelimeter(str, offset-1, '-');\n\n      parsedVal = parseAndCheck( str, offset, 1, 31);\n      cal.set(Calendar.DAY_OF_MONTH, parsedVal);\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      checkDelimeter(str, offset-1, 'T');\n      //hour:\n\n      parsedVal = parseAndCheck( str, offset, 0, 24);\n      cal.set(Calendar.HOUR_OF_DAY, parsedVal);\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      checkDelimeter(str, offset-1, ':');\n      //minute:\n\n      parsedVal = parseAndCheck( str, offset, 0, 59);\n      cal.set(Calendar.MINUTE, parsedVal);\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      checkDelimeter(str, offset-1, ':');\n      //second:\n\n      parsedVal = parseAndCheck( str, offset, 0, 59);\n      cal.set(Calendar.SECOND, parsedVal);\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      checkDelimeter(str, offset-1, '.');\n      //ms:\n\n      int maxOffset = lastOffset - offset; // assume remaining is all digits to compute milliseconds\n      // we truncate off > millisecond precision (3 digits only)\n      int millis = (int) (Integer.parseInt(str.substring(offset, offset + maxOffset)) / Math.pow(10, maxOffset - 3));\n      cal.set(Calendar.MILLISECOND, millis);\n      return cal;\n    } catch (Exception e) {\n      ParseException pe = new ParseException(\"Improperly formatted datetime: \"+str, offset);\n      pe.initCause(e);\n      throw pe;\n    }\n  }\n\n","sourceOld":"  /** Calendar utility method:\n   * The reverse of {@link #toString(java.util.Calendar)}. It will only set the fields found, leaving\n   * the remainder in an un-set state. A leading '-' or '+' is optional (positive assumed), and a\n   * trailing 'Z' is also optional.\n   * @param str not null and not empty\n   * @return not null\n   */\n  public Calendar parseCalendar(String str) throws ParseException {\n    // example: +2014-10-23T21:22:33.159Z\n    if (str == null || str.isEmpty())\n      throw new IllegalArgumentException(\"str is null or blank\");\n    Calendar cal = newCal();\n    if (str.equals(\"*\"))\n      return cal;\n    int offset = 0;//a pointer\n    int parsedVal = 0;\n    try {\n      //year & era:\n      int lastOffset = str.charAt(str.length()-1) == 'Z' ? str.length() - 1 : str.length();\n      int hyphenIdx = str.indexOf('-', 1);//look past possible leading hyphen\n      if (hyphenIdx < 0)\n        hyphenIdx = lastOffset;\n      int year = Integer.parseInt(str.substring(offset, hyphenIdx));\n      cal.set(Calendar.ERA, year <= 0 ? 0 : 1);\n      cal.set(Calendar.YEAR, year <= 0 ? -1*year + 1 : year);\n      offset = hyphenIdx + 1;\n      if (lastOffset < offset)\n        return cal;\n\n      //NOTE: We aren't validating separator chars, and we unintentionally accept leading +/-.\n      // The str.substring()'s hopefully get optimized to be stack-allocated.\n\n      //month:\n      parsedVal = parseAndCheck( str, offset, 1, 12);\n      cal.set(Calendar.MONTH, parsedVal - 1);//starts at 0\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      //day:\n      checkDelimeter(str, offset-1, '-');\n\n      parsedVal = parseAndCheck( str, offset, 1, 31);\n      cal.set(Calendar.DAY_OF_MONTH, parsedVal);\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      checkDelimeter(str, offset-1, 'T');\n      //hour:\n\n      parsedVal = parseAndCheck( str, offset, 0, 24);\n      cal.set(Calendar.HOUR_OF_DAY, parsedVal);\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      checkDelimeter(str, offset-1, ':');\n      //minute:\n\n      parsedVal = parseAndCheck( str, offset, 0, 59);\n      cal.set(Calendar.MINUTE, parsedVal);\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      checkDelimeter(str, offset-1, ':');\n      //second:\n\n      parsedVal = parseAndCheck( str, offset, 0, 59);\n      cal.set(Calendar.SECOND, parsedVal);\n      offset += 3;\n      if (lastOffset < offset)\n        return cal;\n      checkDelimeter(str, offset-1, '.');\n      //ms:\n\n      cal.set(Calendar.MILLISECOND, Integer.parseInt(str.substring(offset, offset+3)));\n      offset += 3;//last one, move to next char\n      if (lastOffset == offset)\n        return cal;\n    } catch (Exception e) {\n      ParseException pe = new ParseException(\"Improperly formatted datetime: \"+str, offset);\n      pe.initCause(e);\n      throw pe;\n    }\n    throw new ParseException(\"Improperly formatted datetime: \"+str, offset);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cea86be0df3af191454c4312a9255681b0b80673":["af2638813028b254a88b418ebeafb541afb49653"],"af2638813028b254a88b418ebeafb541afb49653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","112d77ac8d3e10a362516ad834c9a11d35c94234"],"50aeb34a24c3517f5c50aa5020590923e82f584e":["cea86be0df3af191454c4312a9255681b0b80673"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5e5b3d1ec8b5f671731ced50c3f94a717677c09f":["50aeb34a24c3517f5c50aa5020590923e82f584e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5e5b3d1ec8b5f671731ced50c3f94a717677c09f"]},"commit2Childs":{"cea86be0df3af191454c4312a9255681b0b80673":["50aeb34a24c3517f5c50aa5020590923e82f584e"],"af2638813028b254a88b418ebeafb541afb49653":["cea86be0df3af191454c4312a9255681b0b80673"],"50aeb34a24c3517f5c50aa5020590923e82f584e":["5e5b3d1ec8b5f671731ced50c3f94a717677c09f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"5e5b3d1ec8b5f671731ced50c3f94a717677c09f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}