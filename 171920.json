{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#testEmptyTerm().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#testEmptyTerm().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#testEmptyTerm().mjava","sourceNew":"  public void testEmptyTerm() throws IOException {\n    Random random = random();\n    for (int i = 0; i < 512; i++) {\n      final int flags = i;\n      final CharArraySet protectedWords;\n      if (random.nextBoolean()) {\n        protectedWords = new CharArraySet(TEST_VERSION_CURRENT, new HashSet<String>(Arrays.asList(\"a\", \"b\", \"cd\")), false);\n      } else {\n        protectedWords = null;\n      }\n    \n      Analyzer a = new Analyzer() { \n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new KeywordTokenizer(reader);\n          return new TokenStreamComponents(tokenizer, new WordDelimiterFilter(tokenizer, flags, protectedWords));\n        }\n      };\n      // depending upon options, this thing may or may not preserve the empty term\n      checkAnalysisConsistency(random, a, random.nextBoolean(), \"\");\n    }\n  }\n\n","sourceOld":"  public void testEmptyTerm() throws IOException {\n    Random random = random();\n    for (int i = 0; i < 512; i++) {\n      final int flags = i;\n      final CharArraySet protectedWords;\n      if (random.nextBoolean()) {\n        protectedWords = new CharArraySet(TEST_VERSION_CURRENT, new HashSet<String>(Arrays.asList(\"a\", \"b\", \"cd\")), false);\n      } else {\n        protectedWords = null;\n      }\n    \n      Analyzer a = new Analyzer() { \n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new KeywordTokenizer(reader);\n          return new TokenStreamComponents(tokenizer, new WordDelimiterFilter(tokenizer, flags, protectedWords));\n        }\n      };\n      // depending upon options, this thing may or may not preserve the empty term\n      checkAnalysisConsistency(random, a, random.nextBoolean(), \"\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#testEmptyTerm().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#testEmptyTerm().mjava","sourceNew":"  public void testEmptyTerm() throws IOException {\n    Random random = random();\n    for (int i = 0; i < 512; i++) {\n      final int flags = i;\n      final CharArraySet protectedWords;\n      if (random.nextBoolean()) {\n        protectedWords = new CharArraySet(TEST_VERSION_CURRENT, new HashSet<String>(Arrays.asList(\"a\", \"b\", \"cd\")), false);\n      } else {\n        protectedWords = null;\n      }\n    \n      Analyzer a = new Analyzer() { \n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new KeywordTokenizer();\n          return new TokenStreamComponents(tokenizer, new WordDelimiterFilter(tokenizer, flags, protectedWords));\n        }\n      };\n      // depending upon options, this thing may or may not preserve the empty term\n      checkAnalysisConsistency(random, a, random.nextBoolean(), \"\");\n    }\n  }\n\n","sourceOld":"  public void testEmptyTerm() throws IOException {\n    Random random = random();\n    for (int i = 0; i < 512; i++) {\n      final int flags = i;\n      final CharArraySet protectedWords;\n      if (random.nextBoolean()) {\n        protectedWords = new CharArraySet(TEST_VERSION_CURRENT, new HashSet<String>(Arrays.asList(\"a\", \"b\", \"cd\")), false);\n      } else {\n        protectedWords = null;\n      }\n    \n      Analyzer a = new Analyzer() { \n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new KeywordTokenizer(reader);\n          return new TokenStreamComponents(tokenizer, new WordDelimiterFilter(tokenizer, flags, protectedWords));\n        }\n      };\n      // depending upon options, this thing may or may not preserve the empty term\n      checkAnalysisConsistency(random, a, random.nextBoolean(), \"\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#testEmptyTerm().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#testEmptyTerm().mjava","sourceNew":"  public void testEmptyTerm() throws IOException {\n    Random random = random();\n    for (int i = 0; i < 512; i++) {\n      final int flags = i;\n      final CharArraySet protectedWords;\n      if (random.nextBoolean()) {\n        protectedWords = new CharArraySet(TEST_VERSION_CURRENT, new HashSet<>(Arrays.asList(\"a\", \"b\", \"cd\")), false);\n      } else {\n        protectedWords = null;\n      }\n    \n      Analyzer a = new Analyzer() { \n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new KeywordTokenizer();\n          return new TokenStreamComponents(tokenizer, new WordDelimiterFilter(tokenizer, flags, protectedWords));\n        }\n      };\n      // depending upon options, this thing may or may not preserve the empty term\n      checkAnalysisConsistency(random, a, random.nextBoolean(), \"\");\n    }\n  }\n\n","sourceOld":"  public void testEmptyTerm() throws IOException {\n    Random random = random();\n    for (int i = 0; i < 512; i++) {\n      final int flags = i;\n      final CharArraySet protectedWords;\n      if (random.nextBoolean()) {\n        protectedWords = new CharArraySet(TEST_VERSION_CURRENT, new HashSet<String>(Arrays.asList(\"a\", \"b\", \"cd\")), false);\n      } else {\n        protectedWords = null;\n      }\n    \n      Analyzer a = new Analyzer() { \n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new KeywordTokenizer();\n          return new TokenStreamComponents(tokenizer, new WordDelimiterFilter(tokenizer, flags, protectedWords));\n        }\n      };\n      // depending upon options, this thing may or may not preserve the empty term\n      checkAnalysisConsistency(random, a, random.nextBoolean(), \"\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c85fa43e6918808743daa7847ba0264373af687f","date":1395166336,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#testEmptyTerm().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#testEmptyTerm().mjava","sourceNew":"  public void testEmptyTerm() throws IOException {\n    Random random = random();\n    for (int i = 0; i < 512; i++) {\n      final int flags = i;\n      final CharArraySet protectedWords;\n      if (random.nextBoolean()) {\n        protectedWords = new CharArraySet(TEST_VERSION_CURRENT, new HashSet<>(Arrays.asList(\"a\", \"b\", \"cd\")), false);\n      } else {\n        protectedWords = null;\n      }\n    \n      Analyzer a = new Analyzer() { \n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new KeywordTokenizer();\n          return new TokenStreamComponents(tokenizer, new WordDelimiterFilter(TEST_VERSION_CURRENT, tokenizer, flags, protectedWords));\n        }\n      };\n      // depending upon options, this thing may or may not preserve the empty term\n      checkAnalysisConsistency(random, a, random.nextBoolean(), \"\");\n    }\n  }\n\n","sourceOld":"  public void testEmptyTerm() throws IOException {\n    Random random = random();\n    for (int i = 0; i < 512; i++) {\n      final int flags = i;\n      final CharArraySet protectedWords;\n      if (random.nextBoolean()) {\n        protectedWords = new CharArraySet(TEST_VERSION_CURRENT, new HashSet<>(Arrays.asList(\"a\", \"b\", \"cd\")), false);\n      } else {\n        protectedWords = null;\n      }\n    \n      Analyzer a = new Analyzer() { \n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new KeywordTokenizer();\n          return new TokenStreamComponents(tokenizer, new WordDelimiterFilter(tokenizer, flags, protectedWords));\n        }\n      };\n      // depending upon options, this thing may or may not preserve the empty term\n      checkAnalysisConsistency(random, a, random.nextBoolean(), \"\");\n    }\n  }\n\n","bugFix":["c02a88c5281d230b9318dc19e6971dfd21778227"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#testEmptyTerm().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#testEmptyTerm().mjava","sourceNew":"  public void testEmptyTerm() throws IOException {\n    Random random = random();\n    for (int i = 0; i < 512; i++) {\n      final int flags = i;\n      final CharArraySet protectedWords;\n      if (random.nextBoolean()) {\n        protectedWords = new CharArraySet(new HashSet<>(Arrays.asList(\"a\", \"b\", \"cd\")), false);\n      } else {\n        protectedWords = null;\n      }\n    \n      Analyzer a = new Analyzer() { \n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new KeywordTokenizer();\n          return new TokenStreamComponents(tokenizer, new WordDelimiterFilter(TEST_VERSION_CURRENT, tokenizer, flags, protectedWords));\n        }\n      };\n      // depending upon options, this thing may or may not preserve the empty term\n      checkAnalysisConsistency(random, a, random.nextBoolean(), \"\");\n    }\n  }\n\n","sourceOld":"  public void testEmptyTerm() throws IOException {\n    Random random = random();\n    for (int i = 0; i < 512; i++) {\n      final int flags = i;\n      final CharArraySet protectedWords;\n      if (random.nextBoolean()) {\n        protectedWords = new CharArraySet(TEST_VERSION_CURRENT, new HashSet<>(Arrays.asList(\"a\", \"b\", \"cd\")), false);\n      } else {\n        protectedWords = null;\n      }\n    \n      Analyzer a = new Analyzer() { \n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new KeywordTokenizer();\n          return new TokenStreamComponents(tokenizer, new WordDelimiterFilter(TEST_VERSION_CURRENT, tokenizer, flags, protectedWords));\n        }\n      };\n      // depending upon options, this thing may or may not preserve the empty term\n      checkAnalysisConsistency(random, a, random.nextBoolean(), \"\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#testEmptyTerm().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#testEmptyTerm().mjava","sourceNew":"  public void testEmptyTerm() throws IOException {\n    Random random = random();\n    for (int i = 0; i < 512; i++) {\n      final int flags = i;\n      final CharArraySet protectedWords;\n      if (random.nextBoolean()) {\n        protectedWords = new CharArraySet(TEST_VERSION_CURRENT, new HashSet<>(Arrays.asList(\"a\", \"b\", \"cd\")), false);\n      } else {\n        protectedWords = null;\n      }\n    \n      Analyzer a = new Analyzer() { \n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new KeywordTokenizer();\n          return new TokenStreamComponents(tokenizer, new WordDelimiterFilter(TEST_VERSION_CURRENT, tokenizer, flags, protectedWords));\n        }\n      };\n      // depending upon options, this thing may or may not preserve the empty term\n      checkAnalysisConsistency(random, a, random.nextBoolean(), \"\");\n    }\n  }\n\n","sourceOld":"  public void testEmptyTerm() throws IOException {\n    Random random = random();\n    for (int i = 0; i < 512; i++) {\n      final int flags = i;\n      final CharArraySet protectedWords;\n      if (random.nextBoolean()) {\n        protectedWords = new CharArraySet(new HashSet<>(Arrays.asList(\"a\", \"b\", \"cd\")), false);\n      } else {\n        protectedWords = null;\n      }\n    \n      Analyzer a = new Analyzer() { \n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new KeywordTokenizer();\n          return new TokenStreamComponents(tokenizer, new WordDelimiterFilter(TEST_VERSION_CURRENT, tokenizer, flags, protectedWords));\n        }\n      };\n      // depending upon options, this thing may or may not preserve the empty term\n      checkAnalysisConsistency(random, a, random.nextBoolean(), \"\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#testEmptyTerm().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#testEmptyTerm().mjava","sourceNew":"  public void testEmptyTerm() throws IOException {\n    Random random = random();\n    for (int i = 0; i < 512; i++) {\n      final int flags = i;\n      final CharArraySet protectedWords;\n      if (random.nextBoolean()) {\n        protectedWords = new CharArraySet(new HashSet<>(Arrays.asList(\"a\", \"b\", \"cd\")), false);\n      } else {\n        protectedWords = null;\n      }\n    \n      Analyzer a = new Analyzer() { \n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new KeywordTokenizer();\n          return new TokenStreamComponents(tokenizer, new WordDelimiterFilter(tokenizer, flags, protectedWords));\n        }\n      };\n      // depending upon options, this thing may or may not preserve the empty term\n      checkAnalysisConsistency(random, a, random.nextBoolean(), \"\");\n    }\n  }\n\n","sourceOld":"  public void testEmptyTerm() throws IOException {\n    Random random = random();\n    for (int i = 0; i < 512; i++) {\n      final int flags = i;\n      final CharArraySet protectedWords;\n      if (random.nextBoolean()) {\n        protectedWords = new CharArraySet(TEST_VERSION_CURRENT, new HashSet<>(Arrays.asList(\"a\", \"b\", \"cd\")), false);\n      } else {\n        protectedWords = null;\n      }\n    \n      Analyzer a = new Analyzer() { \n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new KeywordTokenizer();\n          return new TokenStreamComponents(tokenizer, new WordDelimiterFilter(TEST_VERSION_CURRENT, tokenizer, flags, protectedWords));\n        }\n      };\n      // depending upon options, this thing may or may not preserve the empty term\n      checkAnalysisConsistency(random, a, random.nextBoolean(), \"\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#testEmptyTerm().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#testEmptyTerm().mjava","sourceNew":"  public void testEmptyTerm() throws IOException {\n    Random random = random();\n    for (int i = 0; i < 512; i++) {\n      final int flags = i;\n      final CharArraySet protectedWords;\n      if (random.nextBoolean()) {\n        protectedWords = new CharArraySet(new HashSet<>(Arrays.asList(\"a\", \"b\", \"cd\")), false);\n      } else {\n        protectedWords = null;\n      }\n    \n      Analyzer a = new Analyzer() { \n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new KeywordTokenizer();\n          return new TokenStreamComponents(tokenizer, new WordDelimiterFilter(tokenizer, flags, protectedWords));\n        }\n      };\n      // depending upon options, this thing may or may not preserve the empty term\n      checkAnalysisConsistency(random, a, random.nextBoolean(), \"\");\n      a.close();\n    }\n  }\n\n","sourceOld":"  public void testEmptyTerm() throws IOException {\n    Random random = random();\n    for (int i = 0; i < 512; i++) {\n      final int flags = i;\n      final CharArraySet protectedWords;\n      if (random.nextBoolean()) {\n        protectedWords = new CharArraySet(new HashSet<>(Arrays.asList(\"a\", \"b\", \"cd\")), false);\n      } else {\n        protectedWords = null;\n      }\n    \n      Analyzer a = new Analyzer() { \n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new KeywordTokenizer();\n          return new TokenStreamComponents(tokenizer, new WordDelimiterFilter(tokenizer, flags, protectedWords));\n        }\n      };\n      // depending upon options, this thing may or may not preserve the empty term\n      checkAnalysisConsistency(random, a, random.nextBoolean(), \"\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#testEmptyTerm().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterFilter#testEmptyTerm().mjava","sourceNew":"  public void testEmptyTerm() throws IOException {\n    Random random = random();\n    for (int i = 0; i < 512; i++) {\n      final int flags = i;\n      final CharArraySet protectedWords;\n      if (random.nextBoolean()) {\n        protectedWords = new CharArraySet(new HashSet<>(Arrays.asList(\"a\", \"b\", \"cd\")), false);\n      } else {\n        protectedWords = null;\n      }\n    \n      Analyzer a = new Analyzer() { \n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new KeywordTokenizer();\n          return new TokenStreamComponents(tokenizer, new WordDelimiterFilter(tokenizer, flags, protectedWords));\n        }\n      };\n      // depending upon options, this thing may or may not preserve the empty term\n      checkAnalysisConsistency(random, a, random.nextBoolean(), \"\");\n      a.close();\n    }\n  }\n\n","sourceOld":"  public void testEmptyTerm() throws IOException {\n    Random random = random();\n    for (int i = 0; i < 512; i++) {\n      final int flags = i;\n      final CharArraySet protectedWords;\n      if (random.nextBoolean()) {\n        protectedWords = new CharArraySet(new HashSet<>(Arrays.asList(\"a\", \"b\", \"cd\")), false);\n      } else {\n        protectedWords = null;\n      }\n    \n      Analyzer a = new Analyzer() { \n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new KeywordTokenizer();\n          return new TokenStreamComponents(tokenizer, new WordDelimiterFilter(tokenizer, flags, protectedWords));\n        }\n      };\n      // depending upon options, this thing may or may not preserve the empty term\n      checkAnalysisConsistency(random, a, random.nextBoolean(), \"\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["c85fa43e6918808743daa7847ba0264373af687f"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["379db3ad24c4f0214f30a122265a6d6be003a99d","a56958d7f71a28824f20031ffbb2e13502a0274e"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a56958d7f71a28824f20031ffbb2e13502a0274e":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"c85fa43e6918808743daa7847ba0264373af687f":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56958d7f71a28824f20031ffbb2e13502a0274e"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c85fa43e6918808743daa7847ba0264373af687f"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"c85fa43e6918808743daa7847ba0264373af687f":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}