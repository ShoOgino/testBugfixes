{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/LightAutomaton#step(int,int).mjava","commits":[{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/LightAutomaton#step(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Performs lookup in transitions, assuming determinism.\n   * \n   * @param c codepoint to look up\n   * @return destination state, -1 if no matching outgoing transition\n   * @see #step(int, Collection)\n   */\n  public int step(int state, int label) {\n    assert state >= 0;\n    assert label >= 0;\n    int trans = states[2*state];\n    int limit = trans + 3*states[2*state+1];\n    // nocommit we could do bin search; transitions are sorted\n    // System.out.println(\"la.step state=\" + state + \" label=\" + label + \"  trans=\" + trans + \" limit=\" + limit);\n    while (trans < limit) {\n      int dest = transitions[trans];\n      int min = transitions[trans+1];\n      int max = transitions[trans+2];\n      if (min <= label && label <= max) {\n        //System.out.println(\"  ret dest=\" + dest);\n        return dest;\n      }\n      trans += 3;\n    }\n\n    return -1;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9","date":1402946522,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/LightAutomaton#step(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/LightAutomaton#step(int,int).mjava","sourceNew":"  /**\n   * Performs lookup in transitions, assuming determinism.\n   * \n   * @param c codepoint to look up\n   * @return destination state, -1 if no matching outgoing transition\n   * @see #step(int, Collection)\n   */\n  public int step(int state, int label) {\n    assert state >= 0;\n    assert label >= 0;\n    int trans = states[2*state];\n    int limit = trans + 3*states[2*state+1];\n    // TODO: we could do bin search; transitions are sorted\n    while (trans < limit) {\n      int dest = transitions[trans];\n      int min = transitions[trans+1];\n      int max = transitions[trans+2];\n      if (min <= label && label <= max) {\n        return dest;\n      }\n      trans += 3;\n    }\n\n    return -1;\n  }\n\n","sourceOld":"  /**\n   * Performs lookup in transitions, assuming determinism.\n   * \n   * @param c codepoint to look up\n   * @return destination state, -1 if no matching outgoing transition\n   * @see #step(int, Collection)\n   */\n  public int step(int state, int label) {\n    assert state >= 0;\n    assert label >= 0;\n    int trans = states[2*state];\n    int limit = trans + 3*states[2*state+1];\n    // nocommit we could do bin search; transitions are sorted\n    // System.out.println(\"la.step state=\" + state + \" label=\" + label + \"  trans=\" + trans + \" limit=\" + limit);\n    while (trans < limit) {\n      int dest = transitions[trans];\n      int min = transitions[trans+1];\n      int max = transitions[trans+2];\n      if (min <= label && label <= max) {\n        //System.out.println(\"  ret dest=\" + dest);\n        return dest;\n      }\n      trans += 3;\n    }\n\n    return -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#step(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/LightAutomaton#step(int,int).mjava","sourceNew":"  /**\n   * Performs lookup in transitions, assuming determinism.\n   * \n   * @param c codepoint to look up\n   * @return destination state, -1 if no matching outgoing transition\n   * @see #step(int, Collection)\n   */\n  public int step(int state, int label) {\n    assert state >= 0;\n    assert label >= 0;\n    int trans = states[2*state];\n    int limit = trans + 3*states[2*state+1];\n    // TODO: we could do bin search; transitions are sorted\n    while (trans < limit) {\n      int dest = transitions[trans];\n      int min = transitions[trans+1];\n      int max = transitions[trans+2];\n      if (min <= label && label <= max) {\n        return dest;\n      }\n      trans += 3;\n    }\n\n    return -1;\n  }\n\n","sourceOld":"  /**\n   * Performs lookup in transitions, assuming determinism.\n   * \n   * @param c codepoint to look up\n   * @return destination state, -1 if no matching outgoing transition\n   * @see #step(int, Collection)\n   */\n  public int step(int state, int label) {\n    assert state >= 0;\n    assert label >= 0;\n    int trans = states[2*state];\n    int limit = trans + 3*states[2*state+1];\n    // TODO: we could do bin search; transitions are sorted\n    while (trans < limit) {\n      int dest = transitions[trans];\n      int min = transitions[trans+1];\n      int max = transitions[trans+2];\n      if (min <= label && label <= max) {\n        return dest;\n      }\n      trans += 3;\n    }\n\n    return -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ac34f0c5bb9274821fb0cb18075234e02002e9bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}