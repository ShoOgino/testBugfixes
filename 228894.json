{"path":"backwards/src/test/org/apache/lucene/util/TestSmallFloat#testFloatToByte().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/util/TestSmallFloat#testFloatToByte().mjava","pathOld":"/dev/null","sourceNew":"  public void testFloatToByte() {\n    Random rand = newRandom();\n    // up iterations for more exhaustive test after changing something\n    for (int i=0; i<100000; i++) {\n      float f = Float.intBitsToFloat(rand.nextInt());\n      if (f!=f) continue;    // skip NaN\n      byte b1 = orig_floatToByte(f);\n      byte b2 = SmallFloat.floatToByte(f,3,15);\n      byte b3 = SmallFloat.floatToByte315(f);\n      assertEquals(b1,b2);\n      assertEquals(b2,b3);\n\n      byte b4 = SmallFloat.floatToByte(f,5,2);\n      byte b5 = SmallFloat.floatToByte52(f);\n      assertEquals(b4,b5);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/util/TestSmallFloat#testFloatToByte().mjava","pathOld":"backwards/src/test/org/apache/lucene/util/TestSmallFloat#testFloatToByte().mjava","sourceNew":"  public void testFloatToByte() {\n    Random rand = newRandom();\n    // up iterations for more exhaustive test after changing something\n    for (int i=0; i<100000; i++) {\n      float f = Float.intBitsToFloat(rand.nextInt());\n      if (f!=f) continue;    // skip NaN\n      byte b1 = orig_floatToByte(f);\n      byte b2 = SmallFloat.floatToByte(f,3,15);\n      byte b3 = SmallFloat.floatToByte315(f);\n      assertEquals(b1,b2);\n      assertEquals(b2,b3);\n\n      byte b4 = SmallFloat.floatToByte(f,5,2);\n      byte b5 = SmallFloat.floatToByte52(f);\n      assertEquals(b4,b5);\n    }\n  }\n\n","sourceOld":"  public void testFloatToByte() {\n    Random rand = newRandom();\n    // up iterations for more exhaustive test after changing something\n    for (int i=0; i<100000; i++) {\n      float f = Float.intBitsToFloat(rand.nextInt());\n      if (f!=f) continue;    // skip NaN\n      byte b1 = orig_floatToByte(f);\n      byte b2 = SmallFloat.floatToByte(f,3,15);\n      byte b3 = SmallFloat.floatToByte315(f);\n      assertEquals(b1,b2);\n      assertEquals(b2,b3);\n\n      byte b4 = SmallFloat.floatToByte(f,5,2);\n      byte b5 = SmallFloat.floatToByte52(f);\n      assertEquals(b4,b5);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}