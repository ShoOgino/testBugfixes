{"path":"lucene/src/java/org/apache/lucene/search/TermRangeQuery#toString(String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermRangeQuery#toString(String).mjava","pathOld":"src/java/org/apache/lucene/search/TermRangeQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String field) {\n      StringBuilder buffer = new StringBuilder();\n      if (!getField().equals(field)) {\n          buffer.append(getField());\n          buffer.append(\":\");\n      }\n      buffer.append(includeLower ? '[' : '{');\n      buffer.append(lowerTerm != null ? lowerTerm : \"*\");\n      buffer.append(\" TO \");\n      buffer.append(upperTerm != null ? upperTerm : \"*\");\n      buffer.append(includeUpper ? ']' : '}');\n      buffer.append(ToStringUtils.boost(getBoost()));\n      return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String field) {\n      StringBuilder buffer = new StringBuilder();\n      if (!getField().equals(field)) {\n          buffer.append(getField());\n          buffer.append(\":\");\n      }\n      buffer.append(includeLower ? '[' : '{');\n      buffer.append(lowerTerm != null ? lowerTerm : \"*\");\n      buffer.append(\" TO \");\n      buffer.append(upperTerm != null ? upperTerm : \"*\");\n      buffer.append(includeUpper ? ']' : '}');\n      buffer.append(ToStringUtils.boost(getBoost()));\n      return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65e2e921993a78565715c17f099593272b4a92bd","date":1287833451,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermRangeQuery#toString(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermRangeQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String field) {\n      StringBuilder buffer = new StringBuilder();\n      if (!getField().equals(field)) {\n          buffer.append(getField());\n          buffer.append(\":\");\n      }\n      buffer.append(includeLower ? '[' : '{');\n      buffer.append(lowerTerm != null ? (\"*\".equals(lowerTerm) ? \"\\\\*\" : lowerTerm)  : \"*\");\n      buffer.append(\" TO \");\n      buffer.append(upperTerm != null ? (\"*\".equals(upperTerm) ? \"\\\\*\" : upperTerm) : \"*\");\n      buffer.append(includeUpper ? ']' : '}');\n      buffer.append(ToStringUtils.boost(getBoost()));\n      return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String field) {\n      StringBuilder buffer = new StringBuilder();\n      if (!getField().equals(field)) {\n          buffer.append(getField());\n          buffer.append(\":\");\n      }\n      buffer.append(includeLower ? '[' : '{');\n      buffer.append(lowerTerm != null ? lowerTerm : \"*\");\n      buffer.append(\" TO \");\n      buffer.append(upperTerm != null ? upperTerm : \"*\");\n      buffer.append(includeUpper ? ']' : '}');\n      buffer.append(ToStringUtils.boost(getBoost()));\n      return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b12d3e81e0f95a4527b5703953c503f71120ffcc","date":1288080933,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/TermRangeQuery#toString(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermRangeQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String field) {\n      StringBuilder buffer = new StringBuilder();\n      if (!getField().equals(field)) {\n          buffer.append(getField());\n          buffer.append(\":\");\n      }\n      buffer.append(includeLower ? '[' : '{');\n      buffer.append(lowerTerm != null ? (\"*\".equals(lowerTerm) ? \"\\\\*\" : lowerTerm)  : \"*\");\n      buffer.append(\" TO \");\n      buffer.append(upperTerm != null ? (\"*\".equals(upperTerm) ? \"\\\\*\" : upperTerm) : \"*\");\n      buffer.append(includeUpper ? ']' : '}');\n      buffer.append(ToStringUtils.boost(getBoost()));\n      return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String field) {\n      StringBuilder buffer = new StringBuilder();\n      if (!getField().equals(field)) {\n          buffer.append(getField());\n          buffer.append(\":\");\n      }\n      buffer.append(includeLower ? '[' : '{');\n      buffer.append(lowerTerm != null ? lowerTerm : \"*\");\n      buffer.append(\" TO \");\n      buffer.append(upperTerm != null ? upperTerm : \"*\");\n      buffer.append(includeUpper ? ']' : '}');\n      buffer.append(ToStringUtils.boost(getBoost()));\n      return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/TermRangeQuery#toString(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermRangeQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String field) {\n      StringBuilder buffer = new StringBuilder();\n      if (!getField().equals(field)) {\n          buffer.append(getField());\n          buffer.append(\":\");\n      }\n      buffer.append(includeLower ? '[' : '{');\n      buffer.append(lowerTerm != null ? (\"*\".equals(lowerTerm) ? \"\\\\*\" : lowerTerm)  : \"*\");\n      buffer.append(\" TO \");\n      buffer.append(upperTerm != null ? (\"*\".equals(upperTerm) ? \"\\\\*\" : upperTerm) : \"*\");\n      buffer.append(includeUpper ? ']' : '}');\n      buffer.append(ToStringUtils.boost(getBoost()));\n      return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String field) {\n      StringBuilder buffer = new StringBuilder();\n      if (!getField().equals(field)) {\n          buffer.append(getField());\n          buffer.append(\":\");\n      }\n      buffer.append(includeLower ? '[' : '{');\n      buffer.append(lowerTerm != null ? lowerTerm : \"*\");\n      buffer.append(\" TO \");\n      buffer.append(upperTerm != null ? upperTerm : \"*\");\n      buffer.append(includeUpper ? ']' : '}');\n      buffer.append(ToStringUtils.boost(getBoost()));\n      return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e492fb0f2bb0b4b47208286f9331ff55963c656","date":1298870150,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermRangeQuery#toString(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermRangeQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String field) {\n      StringBuilder buffer = new StringBuilder();\n      if (!getField().equals(field)) {\n          buffer.append(getField());\n          buffer.append(\":\");\n      }\n      buffer.append(includeLower ? '[' : '{');\n      // TODO: all these toStrings for queries should just output the bytes, it might not be UTF-8!\n      buffer.append(lowerTerm != null ? (\"*\".equals(lowerTerm.utf8ToString()) ? \"\\\\*\" : lowerTerm.utf8ToString())  : \"*\");\n      buffer.append(\" TO \");\n      buffer.append(upperTerm != null ? (\"*\".equals(upperTerm.utf8ToString()) ? \"\\\\*\" : upperTerm.utf8ToString()) : \"*\");\n      buffer.append(includeUpper ? ']' : '}');\n      buffer.append(ToStringUtils.boost(getBoost()));\n      return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String field) {\n      StringBuilder buffer = new StringBuilder();\n      if (!getField().equals(field)) {\n          buffer.append(getField());\n          buffer.append(\":\");\n      }\n      buffer.append(includeLower ? '[' : '{');\n      buffer.append(lowerTerm != null ? (\"*\".equals(lowerTerm) ? \"\\\\*\" : lowerTerm)  : \"*\");\n      buffer.append(\" TO \");\n      buffer.append(upperTerm != null ? (\"*\".equals(upperTerm) ? \"\\\\*\" : upperTerm) : \"*\");\n      buffer.append(includeUpper ? ']' : '}');\n      buffer.append(ToStringUtils.boost(getBoost()));\n      return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/TermRangeQuery#toString(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermRangeQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String field) {\n      StringBuilder buffer = new StringBuilder();\n      if (!getField().equals(field)) {\n          buffer.append(getField());\n          buffer.append(\":\");\n      }\n      buffer.append(includeLower ? '[' : '{');\n      // TODO: all these toStrings for queries should just output the bytes, it might not be UTF-8!\n      buffer.append(lowerTerm != null ? (\"*\".equals(lowerTerm.utf8ToString()) ? \"\\\\*\" : lowerTerm.utf8ToString())  : \"*\");\n      buffer.append(\" TO \");\n      buffer.append(upperTerm != null ? (\"*\".equals(upperTerm.utf8ToString()) ? \"\\\\*\" : upperTerm.utf8ToString()) : \"*\");\n      buffer.append(includeUpper ? ']' : '}');\n      buffer.append(ToStringUtils.boost(getBoost()));\n      return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String field) {\n      StringBuilder buffer = new StringBuilder();\n      if (!getField().equals(field)) {\n          buffer.append(getField());\n          buffer.append(\":\");\n      }\n      buffer.append(includeLower ? '[' : '{');\n      buffer.append(lowerTerm != null ? (\"*\".equals(lowerTerm) ? \"\\\\*\" : lowerTerm)  : \"*\");\n      buffer.append(\" TO \");\n      buffer.append(upperTerm != null ? (\"*\".equals(upperTerm) ? \"\\\\*\" : upperTerm) : \"*\");\n      buffer.append(includeUpper ? ']' : '}');\n      buffer.append(ToStringUtils.boost(getBoost()));\n      return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/TermRangeQuery#toString(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermRangeQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String field) {\n      StringBuilder buffer = new StringBuilder();\n      if (!getField().equals(field)) {\n          buffer.append(getField());\n          buffer.append(\":\");\n      }\n      buffer.append(includeLower ? '[' : '{');\n      // TODO: all these toStrings for queries should just output the bytes, it might not be UTF-8!\n      buffer.append(lowerTerm != null ? (\"*\".equals(lowerTerm.utf8ToString()) ? \"\\\\*\" : lowerTerm.utf8ToString())  : \"*\");\n      buffer.append(\" TO \");\n      buffer.append(upperTerm != null ? (\"*\".equals(upperTerm.utf8ToString()) ? \"\\\\*\" : upperTerm.utf8ToString()) : \"*\");\n      buffer.append(includeUpper ? ']' : '}');\n      buffer.append(ToStringUtils.boost(getBoost()));\n      return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String field) {\n      StringBuilder buffer = new StringBuilder();\n      if (!getField().equals(field)) {\n          buffer.append(getField());\n          buffer.append(\":\");\n      }\n      buffer.append(includeLower ? '[' : '{');\n      buffer.append(lowerTerm != null ? (\"*\".equals(lowerTerm) ? \"\\\\*\" : lowerTerm)  : \"*\");\n      buffer.append(\" TO \");\n      buffer.append(upperTerm != null ? (\"*\".equals(upperTerm) ? \"\\\\*\" : upperTerm) : \"*\");\n      buffer.append(includeUpper ? ']' : '}');\n      buffer.append(ToStringUtils.boost(getBoost()));\n      return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermRangeQuery#toString(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermRangeQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String field) {\n      StringBuilder buffer = new StringBuilder();\n      if (!getField().equals(field)) {\n          buffer.append(getField());\n          buffer.append(\":\");\n      }\n      buffer.append(includeLower ? '[' : '{');\n      // TODO: all these toStrings for queries should just output the bytes, it might not be UTF-8!\n      buffer.append(lowerTerm != null ? (\"*\".equals(lowerTerm.utf8ToString()) ? \"\\\\*\" : lowerTerm.utf8ToString())  : \"*\");\n      buffer.append(\" TO \");\n      buffer.append(upperTerm != null ? (\"*\".equals(upperTerm.utf8ToString()) ? \"\\\\*\" : upperTerm.utf8ToString()) : \"*\");\n      buffer.append(includeUpper ? ']' : '}');\n      buffer.append(ToStringUtils.boost(getBoost()));\n      return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String field) {\n      StringBuilder buffer = new StringBuilder();\n      if (!getField().equals(field)) {\n          buffer.append(getField());\n          buffer.append(\":\");\n      }\n      buffer.append(includeLower ? '[' : '{');\n      // TODO: all these toStrings for queries should just output the bytes, it might not be UTF-8!\n      buffer.append(lowerTerm != null ? (\"*\".equals(lowerTerm.utf8ToString()) ? \"\\\\*\" : lowerTerm.utf8ToString())  : \"*\");\n      buffer.append(\" TO \");\n      buffer.append(upperTerm != null ? (\"*\".equals(upperTerm.utf8ToString()) ? \"\\\\*\" : upperTerm.utf8ToString()) : \"*\");\n      buffer.append(includeUpper ? ']' : '}');\n      buffer.append(ToStringUtils.boost(getBoost()));\n      return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["b12d3e81e0f95a4527b5703953c503f71120ffcc","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3e492fb0f2bb0b4b47208286f9331ff55963c656"],"65e2e921993a78565715c17f099593272b4a92bd":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["9454a6510e2db155fb01faa5c049b06ece95fab9","65e2e921993a78565715c17f099593272b4a92bd"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["65e2e921993a78565715c17f099593272b4a92bd"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","65e2e921993a78565715c17f099593272b4a92bd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"65e2e921993a78565715c17f099593272b4a92bd":["b12d3e81e0f95a4527b5703953c503f71120ffcc","3e492fb0f2bb0b4b47208286f9331ff55963c656","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["65e2e921993a78565715c17f099593272b4a92bd","b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}