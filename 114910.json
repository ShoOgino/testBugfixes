{"path":"lucene/core/src/java/org/apache/lucene/util/StringHelper#startsWith(byte[],BytesRef).mjava","commits":[{"id":"f838187609fee3a1afa5f162f93c796046242c84","date":1406216791,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/StringHelper#startsWith(byte[],BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns <code>true</code> iff the ref starts with the given prefix.\n   * Otherwise <code>false</code>.\n   * \n   * @param ref\n   *         the {@code byte[]} to test\n   * @param prefix\n   *         the expected prefix\n   * @return Returns <code>true</code> iff the ref starts with the given prefix.\n   *         Otherwise <code>false</code>.\n   */\n  public static boolean startsWith(byte[] ref, BytesRef prefix) {\n    if (ref.length < prefix.length) {\n      return false;\n    }\n\n    for(int i=0;i<prefix.length;i++) {\n      if (ref[i] != prefix.bytes[prefix.offset+i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"456d7e7092cb043c740b4674301660ee8abc26fe","date":1517645879,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/StringHelper#startsWith(byte[],BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/StringHelper#startsWith(byte[],BytesRef).mjava","sourceNew":"  /**\n   * Returns <code>true</code> iff the ref starts with the given prefix.\n   * Otherwise <code>false</code>.\n   * \n   * @param ref\n   *         the {@code byte[]} to test\n   * @param prefix\n   *         the expected prefix\n   * @return Returns <code>true</code> iff the ref starts with the given prefix.\n   *         Otherwise <code>false</code>.\n   */\n  public static boolean startsWith(byte[] ref, BytesRef prefix) {\n    // not long enough to start with the prefix\n    if (ref.length < prefix.length) {\n      return false;\n    }\n    return FutureArrays.equals(ref, 0, prefix.length,\n                               prefix.bytes, prefix.offset, prefix.offset + prefix.length);\n  }\n\n","sourceOld":"  /**\n   * Returns <code>true</code> iff the ref starts with the given prefix.\n   * Otherwise <code>false</code>.\n   * \n   * @param ref\n   *         the {@code byte[]} to test\n   * @param prefix\n   *         the expected prefix\n   * @return Returns <code>true</code> iff the ref starts with the given prefix.\n   *         Otherwise <code>false</code>.\n   */\n  public static boolean startsWith(byte[] ref, BytesRef prefix) {\n    if (ref.length < prefix.length) {\n      return false;\n    }\n\n    for(int i=0;i<prefix.length;i++) {\n      if (ref[i] != prefix.bytes[prefix.offset+i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/StringHelper#startsWith(byte[],BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/StringHelper#startsWith(byte[],BytesRef).mjava","sourceNew":"  /**\n   * Returns <code>true</code> iff the ref starts with the given prefix.\n   * Otherwise <code>false</code>.\n   * \n   * @param ref\n   *         the {@code byte[]} to test\n   * @param prefix\n   *         the expected prefix\n   * @return Returns <code>true</code> iff the ref starts with the given prefix.\n   *         Otherwise <code>false</code>.\n   */\n  public static boolean startsWith(byte[] ref, BytesRef prefix) {\n    // not long enough to start with the prefix\n    if (ref.length < prefix.length) {\n      return false;\n    }\n    return Arrays.equals(ref, 0, prefix.length,\n                               prefix.bytes, prefix.offset, prefix.offset + prefix.length);\n  }\n\n","sourceOld":"  /**\n   * Returns <code>true</code> iff the ref starts with the given prefix.\n   * Otherwise <code>false</code>.\n   * \n   * @param ref\n   *         the {@code byte[]} to test\n   * @param prefix\n   *         the expected prefix\n   * @return Returns <code>true</code> iff the ref starts with the given prefix.\n   *         Otherwise <code>false</code>.\n   */\n  public static boolean startsWith(byte[] ref, BytesRef prefix) {\n    // not long enough to start with the prefix\n    if (ref.length < prefix.length) {\n      return false;\n    }\n    return FutureArrays.equals(ref, 0, prefix.length,\n                               prefix.bytes, prefix.offset, prefix.offset + prefix.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["456d7e7092cb043c740b4674301660ee8abc26fe"],"456d7e7092cb043c740b4674301660ee8abc26fe":["f838187609fee3a1afa5f162f93c796046242c84"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f838187609fee3a1afa5f162f93c796046242c84":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b88a121b875f9ae2ac50f85cf46dcb680f126357"]},"commit2Childs":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"456d7e7092cb043c740b4674301660ee8abc26fe":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f838187609fee3a1afa5f162f93c796046242c84"],"f838187609fee3a1afa5f162f93c796046242c84":["456d7e7092cb043c740b4674301660ee8abc26fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}