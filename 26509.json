{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream#TimeSeriesStream(StreamExpression,StreamFactory).mjava","commits":[{"id":"c35d3c01114129fff707f0777080210fa9deb2a7","date":1493219863,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream#TimeSeriesStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public TimeSeriesStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter startExpression = factory.getNamedOperand(expression, \"start\");\n    StreamExpressionNamedParameter endExpression = factory.getNamedOperand(expression, \"end\");\n    StreamExpressionNamedParameter fieldExpression = factory.getNamedOperand(expression, \"field\");\n    StreamExpressionNamedParameter gapExpression = factory.getNamedOperand(expression, \"gap\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n\n    String start = null;\n    if(startExpression != null) {\n      start = ((StreamExpressionValue)startExpression.getParameter()).getValue();\n    }\n\n    String end = null;\n    if(startExpression != null) {\n      end = ((StreamExpressionValue)endExpression.getParameter()).getValue();\n    }\n\n    String gap = null;\n    if(startExpression != null) {\n      gap = ((StreamExpressionValue)gapExpression.getParameter()).getValue();\n    }\n\n    String field = null;\n    if(startExpression != null) {\n      field = ((StreamExpressionValue)fieldExpression.getParameter()).getValue();\n    }\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    // Construct the metrics\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n\n    if(0 == metrics.length){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one metric expected.\",expression,collectionName));\n    }\n\n    // pull out known named params\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"start\") && !namedParam.getName().equals(\"end\") && !namedParam.getName().equals(\"gap\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    // We've got all the required items\n    init(collectionName, params, field, metrics, start, end, gap , zkHost);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a7ae4c63b6f91419e3d461e884eab037192eb38","date":1493654760,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream#TimeSeriesStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream#TimeSeriesStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public TimeSeriesStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter startExpression = factory.getNamedOperand(expression, \"start\");\n    StreamExpressionNamedParameter endExpression = factory.getNamedOperand(expression, \"end\");\n    StreamExpressionNamedParameter fieldExpression = factory.getNamedOperand(expression, \"field\");\n    StreamExpressionNamedParameter gapExpression = factory.getNamedOperand(expression, \"gap\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n\n    String start = null;\n    if(startExpression != null) {\n      start = ((StreamExpressionValue)startExpression.getParameter()).getValue();\n    }\n\n    String end = null;\n    if(endExpression != null) {\n      end = ((StreamExpressionValue)endExpression.getParameter()).getValue();\n    }\n\n    String gap = null;\n    if(gapExpression != null) {\n      gap = ((StreamExpressionValue)gapExpression.getParameter()).getValue();\n    }\n\n    String field = null;\n    if(fieldExpression != null) {\n      field = ((StreamExpressionValue)fieldExpression.getParameter()).getValue();\n    }\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    // Construct the metrics\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n\n    if(0 == metrics.length){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one metric expected.\",expression,collectionName));\n    }\n\n    // pull out known named params\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"start\") && !namedParam.getName().equals(\"end\") && !namedParam.getName().equals(\"gap\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    // We've got all the required items\n    init(collectionName, params, field, metrics, start, end, gap , zkHost);\n  }\n\n","sourceOld":"  public TimeSeriesStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter startExpression = factory.getNamedOperand(expression, \"start\");\n    StreamExpressionNamedParameter endExpression = factory.getNamedOperand(expression, \"end\");\n    StreamExpressionNamedParameter fieldExpression = factory.getNamedOperand(expression, \"field\");\n    StreamExpressionNamedParameter gapExpression = factory.getNamedOperand(expression, \"gap\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n\n    String start = null;\n    if(startExpression != null) {\n      start = ((StreamExpressionValue)startExpression.getParameter()).getValue();\n    }\n\n    String end = null;\n    if(startExpression != null) {\n      end = ((StreamExpressionValue)endExpression.getParameter()).getValue();\n    }\n\n    String gap = null;\n    if(startExpression != null) {\n      gap = ((StreamExpressionValue)gapExpression.getParameter()).getValue();\n    }\n\n    String field = null;\n    if(startExpression != null) {\n      field = ((StreamExpressionValue)fieldExpression.getParameter()).getValue();\n    }\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    // Construct the metrics\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n\n    if(0 == metrics.length){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one metric expected.\",expression,collectionName));\n    }\n\n    // pull out known named params\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"start\") && !namedParam.getName().equals(\"end\") && !namedParam.getName().equals(\"gap\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    // We've got all the required items\n    init(collectionName, params, field, metrics, start, end, gap , zkHost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"18255ef03f6449839fece69b2dbad04f214e55eb","date":1496169578,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream#TimeSeriesStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream#TimeSeriesStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public TimeSeriesStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter startExpression = factory.getNamedOperand(expression, \"start\");\n    StreamExpressionNamedParameter endExpression = factory.getNamedOperand(expression, \"end\");\n    StreamExpressionNamedParameter fieldExpression = factory.getNamedOperand(expression, \"field\");\n    StreamExpressionNamedParameter gapExpression = factory.getNamedOperand(expression, \"gap\");\n    StreamExpressionNamedParameter formatExpression = factory.getNamedOperand(expression, \"format\");\n    StreamExpressionNamedParameter qExpression = factory.getNamedOperand(expression, \"q\");\n\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n\n\n    if(qExpression == null) {\n      throw new IOException(\"The timeseries expression requires the q parameter\");\n    }\n\n    String start = null;\n    if(startExpression != null) {\n      start = ((StreamExpressionValue)startExpression.getParameter()).getValue();\n    }\n\n    String end = null;\n    if(endExpression != null) {\n      end = ((StreamExpressionValue)endExpression.getParameter()).getValue();\n    }\n\n    String gap = null;\n    if(gapExpression != null) {\n      gap = ((StreamExpressionValue)gapExpression.getParameter()).getValue();\n    }\n\n    String field = null;\n    if(fieldExpression != null) {\n      field = ((StreamExpressionValue)fieldExpression.getParameter()).getValue();\n    }\n\n    String format = null;\n    if(formatExpression != null) {\n      format = ((StreamExpressionValue)formatExpression.getParameter()).getValue();\n    }\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    // Construct the metrics\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n\n    if(0 == metrics.length){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one metric expected.\",expression,collectionName));\n    }\n\n    // pull out known named params\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"start\") && !namedParam.getName().equals(\"end\") && !namedParam.getName().equals(\"gap\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    // We've got all the required items\n    init(collectionName, params, field, metrics, start, end, gap, format, zkHost);\n  }\n\n","sourceOld":"  public TimeSeriesStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter startExpression = factory.getNamedOperand(expression, \"start\");\n    StreamExpressionNamedParameter endExpression = factory.getNamedOperand(expression, \"end\");\n    StreamExpressionNamedParameter fieldExpression = factory.getNamedOperand(expression, \"field\");\n    StreamExpressionNamedParameter gapExpression = factory.getNamedOperand(expression, \"gap\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n\n    String start = null;\n    if(startExpression != null) {\n      start = ((StreamExpressionValue)startExpression.getParameter()).getValue();\n    }\n\n    String end = null;\n    if(endExpression != null) {\n      end = ((StreamExpressionValue)endExpression.getParameter()).getValue();\n    }\n\n    String gap = null;\n    if(gapExpression != null) {\n      gap = ((StreamExpressionValue)gapExpression.getParameter()).getValue();\n    }\n\n    String field = null;\n    if(fieldExpression != null) {\n      field = ((StreamExpressionValue)fieldExpression.getParameter()).getValue();\n    }\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    // Construct the metrics\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n\n    if(0 == metrics.length){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one metric expected.\",expression,collectionName));\n    }\n\n    // pull out known named params\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"start\") && !namedParam.getName().equals(\"end\") && !namedParam.getName().equals(\"gap\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    // We've got all the required items\n    init(collectionName, params, field, metrics, start, end, gap , zkHost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream#TimeSeriesStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream#TimeSeriesStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public TimeSeriesStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter startExpression = factory.getNamedOperand(expression, \"start\");\n    StreamExpressionNamedParameter endExpression = factory.getNamedOperand(expression, \"end\");\n    StreamExpressionNamedParameter fieldExpression = factory.getNamedOperand(expression, \"field\");\n    StreamExpressionNamedParameter gapExpression = factory.getNamedOperand(expression, \"gap\");\n    StreamExpressionNamedParameter formatExpression = factory.getNamedOperand(expression, \"format\");\n    StreamExpressionNamedParameter qExpression = factory.getNamedOperand(expression, \"q\");\n\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n\n\n    if(qExpression == null) {\n      throw new IOException(\"The timeseries expression requires the q parameter\");\n    }\n\n    String start = null;\n    if(startExpression != null) {\n      start = ((StreamExpressionValue)startExpression.getParameter()).getValue();\n    }\n\n    String end = null;\n    if(endExpression != null) {\n      end = ((StreamExpressionValue)endExpression.getParameter()).getValue();\n    }\n\n    String gap = null;\n    if(gapExpression != null) {\n      gap = ((StreamExpressionValue)gapExpression.getParameter()).getValue();\n    }\n\n    String field = null;\n    if(fieldExpression != null) {\n      field = ((StreamExpressionValue)fieldExpression.getParameter()).getValue();\n    }\n\n    String format = null;\n    if(formatExpression != null) {\n      format = ((StreamExpressionValue)formatExpression.getParameter()).getValue();\n    }\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    // Construct the metrics\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n\n    if(0 == metrics.length){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one metric expected.\",expression,collectionName));\n    }\n\n    // pull out known named params\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"start\") && !namedParam.getName().equals(\"end\") && !namedParam.getName().equals(\"gap\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    // We've got all the required items\n    init(collectionName, params, field, metrics, start, end, gap, format, zkHost);\n  }\n\n","sourceOld":"  public TimeSeriesStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter startExpression = factory.getNamedOperand(expression, \"start\");\n    StreamExpressionNamedParameter endExpression = factory.getNamedOperand(expression, \"end\");\n    StreamExpressionNamedParameter fieldExpression = factory.getNamedOperand(expression, \"field\");\n    StreamExpressionNamedParameter gapExpression = factory.getNamedOperand(expression, \"gap\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n\n    String start = null;\n    if(startExpression != null) {\n      start = ((StreamExpressionValue)startExpression.getParameter()).getValue();\n    }\n\n    String end = null;\n    if(endExpression != null) {\n      end = ((StreamExpressionValue)endExpression.getParameter()).getValue();\n    }\n\n    String gap = null;\n    if(gapExpression != null) {\n      gap = ((StreamExpressionValue)gapExpression.getParameter()).getValue();\n    }\n\n    String field = null;\n    if(fieldExpression != null) {\n      field = ((StreamExpressionValue)fieldExpression.getParameter()).getValue();\n    }\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    // Construct the metrics\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n\n    if(0 == metrics.length){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one metric expected.\",expression,collectionName));\n    }\n\n    // pull out known named params\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"start\") && !namedParam.getName().equals(\"end\") && !namedParam.getName().equals(\"gap\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    // We've got all the required items\n    init(collectionName, params, field, metrics, start, end, gap , zkHost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44b289ba5434fa10782118c697fa706d6cf231df","date":1496249545,"type":3,"author":"Chris Hostetter","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream#TimeSeriesStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream#TimeSeriesStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public TimeSeriesStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter startExpression = factory.getNamedOperand(expression, \"start\");\n    StreamExpressionNamedParameter endExpression = factory.getNamedOperand(expression, \"end\");\n    StreamExpressionNamedParameter fieldExpression = factory.getNamedOperand(expression, \"field\");\n    StreamExpressionNamedParameter gapExpression = factory.getNamedOperand(expression, \"gap\");\n    StreamExpressionNamedParameter formatExpression = factory.getNamedOperand(expression, \"format\");\n    StreamExpressionNamedParameter qExpression = factory.getNamedOperand(expression, \"q\");\n\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n\n\n    if(qExpression == null) {\n      throw new IOException(\"The timeseries expression requires the q parameter\");\n    }\n\n    String start = null;\n    if(startExpression != null) {\n      start = ((StreamExpressionValue)startExpression.getParameter()).getValue();\n    }\n\n    String end = null;\n    if(endExpression != null) {\n      end = ((StreamExpressionValue)endExpression.getParameter()).getValue();\n    }\n\n    String gap = null;\n    if(gapExpression != null) {\n      gap = ((StreamExpressionValue)gapExpression.getParameter()).getValue();\n    }\n\n    String field = null;\n    if(fieldExpression != null) {\n      field = ((StreamExpressionValue)fieldExpression.getParameter()).getValue();\n    }\n\n    String format = null;\n    if(formatExpression != null) {\n      format = ((StreamExpressionValue)formatExpression.getParameter()).getValue();\n    }\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    // Construct the metrics\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n\n    if(0 == metrics.length){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one metric expected.\",expression,collectionName));\n    }\n\n    // pull out known named params\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"start\") && !namedParam.getName().equals(\"end\") && !namedParam.getName().equals(\"gap\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    // We've got all the required items\n    init(collectionName, params, field, metrics, start, end, gap, format, zkHost);\n  }\n\n","sourceOld":"  public TimeSeriesStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter startExpression = factory.getNamedOperand(expression, \"start\");\n    StreamExpressionNamedParameter endExpression = factory.getNamedOperand(expression, \"end\");\n    StreamExpressionNamedParameter fieldExpression = factory.getNamedOperand(expression, \"field\");\n    StreamExpressionNamedParameter gapExpression = factory.getNamedOperand(expression, \"gap\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n\n    String start = null;\n    if(startExpression != null) {\n      start = ((StreamExpressionValue)startExpression.getParameter()).getValue();\n    }\n\n    String end = null;\n    if(endExpression != null) {\n      end = ((StreamExpressionValue)endExpression.getParameter()).getValue();\n    }\n\n    String gap = null;\n    if(gapExpression != null) {\n      gap = ((StreamExpressionValue)gapExpression.getParameter()).getValue();\n    }\n\n    String field = null;\n    if(fieldExpression != null) {\n      field = ((StreamExpressionValue)fieldExpression.getParameter()).getValue();\n    }\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    // Construct the metrics\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n\n    if(0 == metrics.length){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one metric expected.\",expression,collectionName));\n    }\n\n    // pull out known named params\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"start\") && !namedParam.getName().equals(\"end\") && !namedParam.getName().equals(\"gap\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    // We've got all the required items\n    init(collectionName, params, field, metrics, start, end, gap , zkHost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream#TimeSeriesStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public TimeSeriesStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter startExpression = factory.getNamedOperand(expression, \"start\");\n    StreamExpressionNamedParameter endExpression = factory.getNamedOperand(expression, \"end\");\n    StreamExpressionNamedParameter fieldExpression = factory.getNamedOperand(expression, \"field\");\n    StreamExpressionNamedParameter gapExpression = factory.getNamedOperand(expression, \"gap\");\n    StreamExpressionNamedParameter formatExpression = factory.getNamedOperand(expression, \"format\");\n    StreamExpressionNamedParameter qExpression = factory.getNamedOperand(expression, \"q\");\n\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n\n\n    if(qExpression == null) {\n      throw new IOException(\"The timeseries expression requires the q parameter\");\n    }\n\n    String start = null;\n    if(startExpression != null) {\n      start = ((StreamExpressionValue)startExpression.getParameter()).getValue();\n    }\n\n    String end = null;\n    if(endExpression != null) {\n      end = ((StreamExpressionValue)endExpression.getParameter()).getValue();\n    }\n\n    String gap = null;\n    if(gapExpression != null) {\n      gap = ((StreamExpressionValue)gapExpression.getParameter()).getValue();\n    }\n\n    String field = null;\n    if(fieldExpression != null) {\n      field = ((StreamExpressionValue)fieldExpression.getParameter()).getValue();\n    }\n\n    String format = null;\n    if(formatExpression != null) {\n      format = ((StreamExpressionValue)formatExpression.getParameter()).getValue();\n    }\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    // Construct the metrics\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n\n    if(0 == metrics.length){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one metric expected.\",expression,collectionName));\n    }\n\n    // pull out known named params\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"start\") && !namedParam.getName().equals(\"end\") && !namedParam.getName().equals(\"gap\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    // We've got all the required items\n    init(collectionName, params, field, metrics, start, end, gap, format, zkHost);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a209db4770770843a101e5dfe46086a63507fd3","date":1544624168,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream#TimeSeriesStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream#TimeSeriesStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public TimeSeriesStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n\n    if(collectionName.indexOf('\"') > -1) {\n      collectionName = collectionName.replaceAll(\"\\\"\", \"\").replaceAll(\" \", \"\");\n    }\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter startExpression = factory.getNamedOperand(expression, \"start\");\n    StreamExpressionNamedParameter endExpression = factory.getNamedOperand(expression, \"end\");\n    StreamExpressionNamedParameter fieldExpression = factory.getNamedOperand(expression, \"field\");\n    StreamExpressionNamedParameter gapExpression = factory.getNamedOperand(expression, \"gap\");\n    StreamExpressionNamedParameter formatExpression = factory.getNamedOperand(expression, \"format\");\n    StreamExpressionNamedParameter qExpression = factory.getNamedOperand(expression, \"q\");\n\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n\n\n    if(qExpression == null) {\n      throw new IOException(\"The timeseries expression requires the q parameter\");\n    }\n\n    String start = null;\n    if(startExpression != null) {\n      start = ((StreamExpressionValue)startExpression.getParameter()).getValue();\n    }\n\n    String end = null;\n    if(endExpression != null) {\n      end = ((StreamExpressionValue)endExpression.getParameter()).getValue();\n    }\n\n    String gap = null;\n    if(gapExpression != null) {\n      gap = ((StreamExpressionValue)gapExpression.getParameter()).getValue();\n    }\n\n    String field = null;\n    if(fieldExpression != null) {\n      field = ((StreamExpressionValue)fieldExpression.getParameter()).getValue();\n    }\n\n    String format = null;\n    if(formatExpression != null) {\n      format = ((StreamExpressionValue)formatExpression.getParameter()).getValue();\n    }\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    // Construct the metrics\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n\n    if(0 == metrics.length){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one metric expected.\",expression,collectionName));\n    }\n\n    // pull out known named params\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"start\") && !namedParam.getName().equals(\"end\") && !namedParam.getName().equals(\"gap\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    // We've got all the required items\n    init(collectionName, params, field, metrics, start, end, gap, format, zkHost);\n  }\n\n","sourceOld":"  public TimeSeriesStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter startExpression = factory.getNamedOperand(expression, \"start\");\n    StreamExpressionNamedParameter endExpression = factory.getNamedOperand(expression, \"end\");\n    StreamExpressionNamedParameter fieldExpression = factory.getNamedOperand(expression, \"field\");\n    StreamExpressionNamedParameter gapExpression = factory.getNamedOperand(expression, \"gap\");\n    StreamExpressionNamedParameter formatExpression = factory.getNamedOperand(expression, \"format\");\n    StreamExpressionNamedParameter qExpression = factory.getNamedOperand(expression, \"q\");\n\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n\n\n    if(qExpression == null) {\n      throw new IOException(\"The timeseries expression requires the q parameter\");\n    }\n\n    String start = null;\n    if(startExpression != null) {\n      start = ((StreamExpressionValue)startExpression.getParameter()).getValue();\n    }\n\n    String end = null;\n    if(endExpression != null) {\n      end = ((StreamExpressionValue)endExpression.getParameter()).getValue();\n    }\n\n    String gap = null;\n    if(gapExpression != null) {\n      gap = ((StreamExpressionValue)gapExpression.getParameter()).getValue();\n    }\n\n    String field = null;\n    if(fieldExpression != null) {\n      field = ((StreamExpressionValue)fieldExpression.getParameter()).getValue();\n    }\n\n    String format = null;\n    if(formatExpression != null) {\n      format = ((StreamExpressionValue)formatExpression.getParameter()).getValue();\n    }\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    // Construct the metrics\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n\n    if(0 == metrics.length){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one metric expected.\",expression,collectionName));\n    }\n\n    // pull out known named params\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"start\") && !namedParam.getName().equals(\"end\") && !namedParam.getName().equals(\"gap\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    // We've got all the required items\n    init(collectionName, params, field, metrics, start, end, gap, format, zkHost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90","date":1575925443,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream#TimeSeriesStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream#TimeSeriesStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public TimeSeriesStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n\n    if(collectionName.indexOf('\"') > -1) {\n      collectionName = collectionName.replaceAll(\"\\\"\", \"\").replaceAll(\" \", \"\");\n    }\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter startExpression = factory.getNamedOperand(expression, \"start\");\n    StreamExpressionNamedParameter endExpression = factory.getNamedOperand(expression, \"end\");\n    StreamExpressionNamedParameter fieldExpression = factory.getNamedOperand(expression, \"field\");\n    StreamExpressionNamedParameter gapExpression = factory.getNamedOperand(expression, \"gap\");\n    StreamExpressionNamedParameter formatExpression = factory.getNamedOperand(expression, \"format\");\n\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n\n    String start = null;\n    if(startExpression != null) {\n      start = ((StreamExpressionValue)startExpression.getParameter()).getValue();\n    } else {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - start parameter is required\",expression));\n    }\n\n    String end = null;\n    if(endExpression != null) {\n      end = ((StreamExpressionValue)endExpression.getParameter()).getValue();\n    }  else {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - end parameter is required\",expression));\n    }\n\n    String gap = null;\n    if(gapExpression != null) {\n      gap = ((StreamExpressionValue)gapExpression.getParameter()).getValue();\n    } else {\n    throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - gap parameter is required\",expression));\n  }\n\n    String field = null;\n    if(fieldExpression != null) {\n      field = ((StreamExpressionValue)fieldExpression.getParameter()).getValue();\n    } else {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - field parameter is required\",expression));\n    }\n\n    String format = null;\n    if(formatExpression != null) {\n      format = ((StreamExpressionValue)formatExpression.getParameter()).getValue();\n    }\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    // Construct the metrics\n    Metric[] metrics = null;\n    if(metricExpressions.size() > 0) {\n      metrics = new Metric[metricExpressions.size()];\n      for(int idx = 0; idx < metricExpressions.size(); ++idx){\n        metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n      }\n    } else {\n      metrics = new Metric[1];\n      metrics[0] = new CountMetric();\n    }\n\n    // pull out known named params\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"start\") && !namedParam.getName().equals(\"end\") && !namedParam.getName().equals(\"gap\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    if(params.get(\"q\") == null) {\n      params.set(\"q\", \"*:*\");\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    // We've got all the required items\n    init(collectionName, params, field, metrics, start, end, gap, format, zkHost);\n  }\n\n","sourceOld":"  public TimeSeriesStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n\n    if(collectionName.indexOf('\"') > -1) {\n      collectionName = collectionName.replaceAll(\"\\\"\", \"\").replaceAll(\" \", \"\");\n    }\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter startExpression = factory.getNamedOperand(expression, \"start\");\n    StreamExpressionNamedParameter endExpression = factory.getNamedOperand(expression, \"end\");\n    StreamExpressionNamedParameter fieldExpression = factory.getNamedOperand(expression, \"field\");\n    StreamExpressionNamedParameter gapExpression = factory.getNamedOperand(expression, \"gap\");\n    StreamExpressionNamedParameter formatExpression = factory.getNamedOperand(expression, \"format\");\n    StreamExpressionNamedParameter qExpression = factory.getNamedOperand(expression, \"q\");\n\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n\n\n    if(qExpression == null) {\n      throw new IOException(\"The timeseries expression requires the q parameter\");\n    }\n\n    String start = null;\n    if(startExpression != null) {\n      start = ((StreamExpressionValue)startExpression.getParameter()).getValue();\n    }\n\n    String end = null;\n    if(endExpression != null) {\n      end = ((StreamExpressionValue)endExpression.getParameter()).getValue();\n    }\n\n    String gap = null;\n    if(gapExpression != null) {\n      gap = ((StreamExpressionValue)gapExpression.getParameter()).getValue();\n    }\n\n    String field = null;\n    if(fieldExpression != null) {\n      field = ((StreamExpressionValue)fieldExpression.getParameter()).getValue();\n    }\n\n    String format = null;\n    if(formatExpression != null) {\n      format = ((StreamExpressionValue)formatExpression.getParameter()).getValue();\n    }\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    // Construct the metrics\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n\n    if(0 == metrics.length){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one metric expected.\",expression,collectionName));\n    }\n\n    // pull out known named params\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"start\") && !namedParam.getName().equals(\"end\") && !namedParam.getName().equals(\"gap\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    // We've got all the required items\n    init(collectionName, params, field, metrics, start, end, gap, format, zkHost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7107555998ea86d6f61e2ad770687d674fa8e012","date":1575927428,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream#TimeSeriesStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream#TimeSeriesStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public TimeSeriesStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n\n    if(collectionName.indexOf('\"') > -1) {\n      collectionName = collectionName.replaceAll(\"\\\"\", \"\").replaceAll(\" \", \"\");\n    }\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter startExpression = factory.getNamedOperand(expression, \"start\");\n    StreamExpressionNamedParameter endExpression = factory.getNamedOperand(expression, \"end\");\n    StreamExpressionNamedParameter fieldExpression = factory.getNamedOperand(expression, \"field\");\n    StreamExpressionNamedParameter gapExpression = factory.getNamedOperand(expression, \"gap\");\n    StreamExpressionNamedParameter formatExpression = factory.getNamedOperand(expression, \"format\");\n\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n\n    String start = null;\n    if(startExpression != null) {\n      start = ((StreamExpressionValue)startExpression.getParameter()).getValue();\n    } else {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - start parameter is required\",expression));\n    }\n\n    String end = null;\n    if(endExpression != null) {\n      end = ((StreamExpressionValue)endExpression.getParameter()).getValue();\n    }  else {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - end parameter is required\",expression));\n    }\n\n    String gap = null;\n    if(gapExpression != null) {\n      gap = ((StreamExpressionValue)gapExpression.getParameter()).getValue();\n    } else {\n    throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - gap parameter is required\",expression));\n  }\n\n    String field = null;\n    if(fieldExpression != null) {\n      field = ((StreamExpressionValue)fieldExpression.getParameter()).getValue();\n    } else {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - field parameter is required\",expression));\n    }\n\n    String format = null;\n    if(formatExpression != null) {\n      format = ((StreamExpressionValue)formatExpression.getParameter()).getValue();\n    }\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    // Construct the metrics\n    Metric[] metrics = null;\n    if(metricExpressions.size() > 0) {\n      metrics = new Metric[metricExpressions.size()];\n      for(int idx = 0; idx < metricExpressions.size(); ++idx){\n        metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n      }\n    } else {\n      metrics = new Metric[1];\n      metrics[0] = new CountMetric();\n    }\n\n    // pull out known named params\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"start\") && !namedParam.getName().equals(\"end\") && !namedParam.getName().equals(\"gap\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    if(params.get(\"q\") == null) {\n      params.set(\"q\", \"*:*\");\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    // We've got all the required items\n    init(collectionName, params, field, metrics, start, end, gap, format, zkHost);\n  }\n\n","sourceOld":"  public TimeSeriesStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n\n    if(collectionName.indexOf('\"') > -1) {\n      collectionName = collectionName.replaceAll(\"\\\"\", \"\").replaceAll(\" \", \"\");\n    }\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter startExpression = factory.getNamedOperand(expression, \"start\");\n    StreamExpressionNamedParameter endExpression = factory.getNamedOperand(expression, \"end\");\n    StreamExpressionNamedParameter fieldExpression = factory.getNamedOperand(expression, \"field\");\n    StreamExpressionNamedParameter gapExpression = factory.getNamedOperand(expression, \"gap\");\n    StreamExpressionNamedParameter formatExpression = factory.getNamedOperand(expression, \"format\");\n    StreamExpressionNamedParameter qExpression = factory.getNamedOperand(expression, \"q\");\n\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n\n\n    if(qExpression == null) {\n      throw new IOException(\"The timeseries expression requires the q parameter\");\n    }\n\n    String start = null;\n    if(startExpression != null) {\n      start = ((StreamExpressionValue)startExpression.getParameter()).getValue();\n    }\n\n    String end = null;\n    if(endExpression != null) {\n      end = ((StreamExpressionValue)endExpression.getParameter()).getValue();\n    }\n\n    String gap = null;\n    if(gapExpression != null) {\n      gap = ((StreamExpressionValue)gapExpression.getParameter()).getValue();\n    }\n\n    String field = null;\n    if(fieldExpression != null) {\n      field = ((StreamExpressionValue)fieldExpression.getParameter()).getValue();\n    }\n\n    String format = null;\n    if(formatExpression != null) {\n      format = ((StreamExpressionValue)formatExpression.getParameter()).getValue();\n    }\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    // Construct the metrics\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n\n    if(0 == metrics.length){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one metric expected.\",expression,collectionName));\n    }\n\n    // pull out known named params\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"start\") && !namedParam.getName().equals(\"end\") && !namedParam.getName().equals(\"gap\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    // We've got all the required items\n    init(collectionName, params, field, metrics, start, end, gap, format, zkHost);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","18255ef03f6449839fece69b2dbad04f214e55eb"],"c35d3c01114129fff707f0777080210fa9deb2a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1a7ae4c63b6f91419e3d461e884eab037192eb38":["c35d3c01114129fff707f0777080210fa9deb2a7"],"76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90":["5a209db4770770843a101e5dfe46086a63507fd3"],"7107555998ea86d6f61e2ad770687d674fa8e012":["5a209db4770770843a101e5dfe46086a63507fd3","76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"18255ef03f6449839fece69b2dbad04f214e55eb":["1a7ae4c63b6f91419e3d461e884eab037192eb38"],"44b289ba5434fa10782118c697fa706d6cf231df":["1a7ae4c63b6f91419e3d461e884eab037192eb38","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"5a209db4770770843a101e5dfe46086a63507fd3":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["1a7ae4c63b6f91419e3d461e884eab037192eb38","18255ef03f6449839fece69b2dbad04f214e55eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"c35d3c01114129fff707f0777080210fa9deb2a7":["1a7ae4c63b6f91419e3d461e884eab037192eb38"],"1a7ae4c63b6f91419e3d461e884eab037192eb38":["18255ef03f6449839fece69b2dbad04f214e55eb","44b289ba5434fa10782118c697fa706d6cf231df","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90":["7107555998ea86d6f61e2ad770687d674fa8e012","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7107555998ea86d6f61e2ad770687d674fa8e012":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","c35d3c01114129fff707f0777080210fa9deb2a7"],"18255ef03f6449839fece69b2dbad04f214e55eb":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"44b289ba5434fa10782118c697fa706d6cf231df":[],"5a209db4770770843a101e5dfe46086a63507fd3":["76aa3a2da9bcf0e6545dbed66c8bb8d12ee0cf90","7107555998ea86d6f61e2ad770687d674fa8e012"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["44b289ba5434fa10782118c697fa706d6cf231df","5a209db4770770843a101e5dfe46086a63507fd3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","7107555998ea86d6f61e2ad770687d674fa8e012","44b289ba5434fa10782118c697fa706d6cf231df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}