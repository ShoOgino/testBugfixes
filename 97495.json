{"path":"lucene/contrib/misc/src/java/org/apache/lucene/store/DirectIOLinuxDirectory.DirectIOLinuxIndexInput#DirectIOLinuxIndexInput(File,int).mjava","commits":[{"id":"95ddefb56022771b5d4a53dc1baa806d2a14cfa9","date":1277381661,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/store/DirectIOLinuxDirectory.DirectIOLinuxIndexInput#DirectIOLinuxIndexInput(File,int).mjava","pathOld":"/dev/null","sourceNew":"    public DirectIOLinuxIndexInput(File path, int bufferSize) throws IOException {\n      bufferSize = 1024*1024;\n      FileDescriptor fd = NativePosixUtil.open_direct(path.toString(), true);\n      fis = new FileInputStream(fd);\n      channel = fis.getChannel();\n      this.bufferSize = bufferSize;\n      buffer = ByteBuffer.allocateDirect(bufferSize);\n      isOpen = true;\n      isClone = false;\n      filePos = -bufferSize;\n      bufferPos = bufferSize;\n      //System.out.println(\"D open \" + path + \" this=\" + this);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a82de09f9a74dac24b12b1aa09017628cd46e73a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/store/DirectIOLinuxDirectory.DirectIOLinuxIndexInput#DirectIOLinuxIndexInput(File,int).mjava","pathOld":"/dev/null","sourceNew":"    public DirectIOLinuxIndexInput(File path, int bufferSize) throws IOException {\n      bufferSize = 1024*1024;\n      FileDescriptor fd = NativePosixUtil.open_direct(path.toString(), true);\n      fis = new FileInputStream(fd);\n      channel = fis.getChannel();\n      this.bufferSize = bufferSize;\n      buffer = ByteBuffer.allocateDirect(bufferSize);\n      isOpen = true;\n      isClone = false;\n      filePos = -bufferSize;\n      bufferPos = bufferSize;\n      //System.out.println(\"D open \" + path + \" this=\" + this);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a82de09f9a74dac24b12b1aa09017628cd46e73a","date":1282647375,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/store/DirectIOLinuxDirectory.DirectIOLinuxIndexInput#DirectIOLinuxIndexInput(File,int).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/store/DirectIOLinuxDirectory.DirectIOLinuxIndexInput#DirectIOLinuxIndexInput(File,int).mjava","sourceNew":"    public DirectIOLinuxIndexInput(File path, int bufferSize) throws IOException {\n      FileDescriptor fd = NativePosixUtil.open_direct(path.toString(), true);\n      fis = new FileInputStream(fd);\n      channel = fis.getChannel();\n      this.bufferSize = bufferSize;\n      buffer = ByteBuffer.allocateDirect(bufferSize);\n      isOpen = true;\n      isClone = false;\n      filePos = -bufferSize;\n      bufferPos = bufferSize;\n      //System.out.println(\"D open \" + path + \" this=\" + this);\n    }\n\n","sourceOld":"    public DirectIOLinuxIndexInput(File path, int bufferSize) throws IOException {\n      bufferSize = 1024*1024;\n      FileDescriptor fd = NativePosixUtil.open_direct(path.toString(), true);\n      fis = new FileInputStream(fd);\n      channel = fis.getChannel();\n      this.bufferSize = bufferSize;\n      buffer = ByteBuffer.allocateDirect(bufferSize);\n      isOpen = true;\n      isClone = false;\n      filePos = -bufferSize;\n      bufferPos = bufferSize;\n      //System.out.println(\"D open \" + path + \" this=\" + this);\n    }\n\n","bugFix":["95ddefb56022771b5d4a53dc1baa806d2a14cfa9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/store/DirectIOLinuxDirectory.DirectIOLinuxIndexInput#DirectIOLinuxIndexInput(File,int).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/store/DirectIOLinuxDirectory.DirectIOLinuxIndexInput#DirectIOLinuxIndexInput(File,int).mjava","sourceNew":"    public DirectIOLinuxIndexInput(File path, int bufferSize) throws IOException {\n      FileDescriptor fd = NativePosixUtil.open_direct(path.toString(), true);\n      fis = new FileInputStream(fd);\n      channel = fis.getChannel();\n      this.bufferSize = bufferSize;\n      buffer = ByteBuffer.allocateDirect(bufferSize);\n      isOpen = true;\n      isClone = false;\n      filePos = -bufferSize;\n      bufferPos = bufferSize;\n      //System.out.println(\"D open \" + path + \" this=\" + this);\n    }\n\n","sourceOld":"    public DirectIOLinuxIndexInput(File path, int bufferSize) throws IOException {\n      bufferSize = 1024*1024;\n      FileDescriptor fd = NativePosixUtil.open_direct(path.toString(), true);\n      fis = new FileInputStream(fd);\n      channel = fis.getChannel();\n      this.bufferSize = bufferSize;\n      buffer = ByteBuffer.allocateDirect(bufferSize);\n      isOpen = true;\n      isClone = false;\n      filePos = -bufferSize;\n      bufferPos = bufferSize;\n      //System.out.println(\"D open \" + path + \" this=\" + this);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c162b4b9ef005383c38e0912c16267584dc40de5","date":1310021443,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/store/DirectIOLinuxDirectory.DirectIOLinuxIndexInput#DirectIOLinuxIndexInput(File,int).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/store/DirectIOLinuxDirectory.DirectIOLinuxIndexInput#DirectIOLinuxIndexInput(File,int).mjava","sourceNew":"    public DirectIOLinuxIndexInput(File path, int bufferSize) throws IOException {\n      // TODO make use of IOContext\n      FileDescriptor fd = NativePosixUtil.open_direct(path.toString(), true);\n      fis = new FileInputStream(fd);\n      channel = fis.getChannel();\n      this.bufferSize = bufferSize;\n      buffer = ByteBuffer.allocateDirect(bufferSize);\n      isOpen = true;\n      isClone = false;\n      filePos = -bufferSize;\n      bufferPos = bufferSize;\n      //System.out.println(\"D open \" + path + \" this=\" + this);\n    }\n\n","sourceOld":"    public DirectIOLinuxIndexInput(File path, int bufferSize) throws IOException {\n      FileDescriptor fd = NativePosixUtil.open_direct(path.toString(), true);\n      fis = new FileInputStream(fd);\n      channel = fis.getChannel();\n      this.bufferSize = bufferSize;\n      buffer = ByteBuffer.allocateDirect(bufferSize);\n      isOpen = true;\n      isClone = false;\n      filePos = -bufferSize;\n      bufferPos = bufferSize;\n      //System.out.println(\"D open \" + path + \" this=\" + this);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/store/DirectIOLinuxDirectory.DirectIOLinuxIndexInput#DirectIOLinuxIndexInput(File,int).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/store/DirectIOLinuxDirectory.DirectIOLinuxIndexInput#DirectIOLinuxIndexInput(File,int).mjava","sourceNew":"    public DirectIOLinuxIndexInput(File path, int bufferSize) throws IOException {\n      // TODO make use of IOContext\n      FileDescriptor fd = NativePosixUtil.open_direct(path.toString(), true);\n      fis = new FileInputStream(fd);\n      channel = fis.getChannel();\n      this.bufferSize = bufferSize;\n      buffer = ByteBuffer.allocateDirect(bufferSize);\n      isOpen = true;\n      isClone = false;\n      filePos = -bufferSize;\n      bufferPos = bufferSize;\n      //System.out.println(\"D open \" + path + \" this=\" + this);\n    }\n\n","sourceOld":"    public DirectIOLinuxIndexInput(File path, int bufferSize) throws IOException {\n      FileDescriptor fd = NativePosixUtil.open_direct(path.toString(), true);\n      fis = new FileInputStream(fd);\n      channel = fis.getChannel();\n      this.bufferSize = bufferSize;\n      buffer = ByteBuffer.allocateDirect(bufferSize);\n      isOpen = true;\n      isClone = false;\n      filePos = -bufferSize;\n      bufferPos = bufferSize;\n      //System.out.println(\"D open \" + path + \" this=\" + this);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/store/DirectIOLinuxDirectory.DirectIOLinuxIndexInput#DirectIOLinuxIndexInput(File,int).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/store/DirectIOLinuxDirectory.DirectIOLinuxIndexInput#DirectIOLinuxIndexInput(File,int).mjava","sourceNew":"    public DirectIOLinuxIndexInput(File path, int bufferSize) throws IOException {\n      // TODO make use of IOContext\n      FileDescriptor fd = NativePosixUtil.open_direct(path.toString(), true);\n      fis = new FileInputStream(fd);\n      channel = fis.getChannel();\n      this.bufferSize = bufferSize;\n      buffer = ByteBuffer.allocateDirect(bufferSize);\n      isOpen = true;\n      isClone = false;\n      filePos = -bufferSize;\n      bufferPos = bufferSize;\n      //System.out.println(\"D open \" + path + \" this=\" + this);\n    }\n\n","sourceOld":"    public DirectIOLinuxIndexInput(File path, int bufferSize) throws IOException {\n      FileDescriptor fd = NativePosixUtil.open_direct(path.toString(), true);\n      fis = new FileInputStream(fd);\n      channel = fis.getChannel();\n      this.bufferSize = bufferSize;\n      buffer = ByteBuffer.allocateDirect(bufferSize);\n      isOpen = true;\n      isClone = false;\n      filePos = -bufferSize;\n      bufferPos = bufferSize;\n      //System.out.println(\"D open \" + path + \" this=\" + this);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1efe3edca215dd9891cb42af283fed96f792ca0","date":1320428891,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/store/DirectIOLinuxDirectory.DirectIOLinuxIndexInput#DirectIOLinuxIndexInput(File,int).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/store/DirectIOLinuxDirectory.DirectIOLinuxIndexInput#DirectIOLinuxIndexInput(File,int).mjava","sourceNew":"    public DirectIOLinuxIndexInput(File path, int bufferSize) throws IOException {\n      // TODO make use of IOContext\n      super(\"DirectIOLinuxIndexInput(path=\\\"\" + path.getPath() + \"\\\")\");\n      FileDescriptor fd = NativePosixUtil.open_direct(path.toString(), true);\n      fis = new FileInputStream(fd);\n      channel = fis.getChannel();\n      this.bufferSize = bufferSize;\n      buffer = ByteBuffer.allocateDirect(bufferSize);\n      isOpen = true;\n      isClone = false;\n      filePos = -bufferSize;\n      bufferPos = bufferSize;\n      //System.out.println(\"D open \" + path + \" this=\" + this);\n    }\n\n","sourceOld":"    public DirectIOLinuxIndexInput(File path, int bufferSize) throws IOException {\n      // TODO make use of IOContext\n      FileDescriptor fd = NativePosixUtil.open_direct(path.toString(), true);\n      fis = new FileInputStream(fd);\n      channel = fis.getChannel();\n      this.bufferSize = bufferSize;\n      buffer = ByteBuffer.allocateDirect(bufferSize);\n      isOpen = true;\n      isClone = false;\n      filePos = -bufferSize;\n      bufferPos = bufferSize;\n      //System.out.println(\"D open \" + path + \" this=\" + this);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5243f2425292adfa2c094097311654ae59588bc","date":1327855765,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/store/NativeUnixDirectory.NativeUnixIndexInput#NativeUnixIndexInput(File,int).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/store/DirectIOLinuxDirectory.DirectIOLinuxIndexInput#DirectIOLinuxIndexInput(File,int).mjava","sourceNew":"    public NativeUnixIndexInput(File path, int bufferSize) throws IOException {\n      super(\"NativeUnixIndexInput(path=\\\"\" + path.getPath() + \"\\\")\");\n      final FileDescriptor fd = NativePosixUtil.open_direct(path.toString(), true);\n      fis = new FileInputStream(fd);\n      channel = fis.getChannel();\n      this.bufferSize = bufferSize;\n      buffer = ByteBuffer.allocateDirect(bufferSize);\n      isOpen = true;\n      isClone = false;\n      filePos = -bufferSize;\n      bufferPos = bufferSize;\n      //System.out.println(\"D open \" + path + \" this=\" + this);\n    }\n\n","sourceOld":"    public DirectIOLinuxIndexInput(File path, int bufferSize) throws IOException {\n      // TODO make use of IOContext\n      super(\"DirectIOLinuxIndexInput(path=\\\"\" + path.getPath() + \"\\\")\");\n      FileDescriptor fd = NativePosixUtil.open_direct(path.toString(), true);\n      fis = new FileInputStream(fd);\n      channel = fis.getChannel();\n      this.bufferSize = bufferSize;\n      buffer = ByteBuffer.allocateDirect(bufferSize);\n      isOpen = true;\n      isClone = false;\n      filePos = -bufferSize;\n      bufferPos = bufferSize;\n      //System.out.println(\"D open \" + path + \" this=\" + this);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817882884229bace7dc5d1b75f6b0e4aa1e47122","date":1327879145,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/store/NativeUnixDirectory.NativeUnixIndexInput#NativeUnixIndexInput(File,int).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/store/DirectIOLinuxDirectory.DirectIOLinuxIndexInput#DirectIOLinuxIndexInput(File,int).mjava","sourceNew":"    public NativeUnixIndexInput(File path, int bufferSize) throws IOException {\n      super(\"NativeUnixIndexInput(path=\\\"\" + path.getPath() + \"\\\")\");\n      final FileDescriptor fd = NativePosixUtil.open_direct(path.toString(), true);\n      fis = new FileInputStream(fd);\n      channel = fis.getChannel();\n      this.bufferSize = bufferSize;\n      buffer = ByteBuffer.allocateDirect(bufferSize);\n      isOpen = true;\n      isClone = false;\n      filePos = -bufferSize;\n      bufferPos = bufferSize;\n      //System.out.println(\"D open \" + path + \" this=\" + this);\n    }\n\n","sourceOld":"    public DirectIOLinuxIndexInput(File path, int bufferSize) throws IOException {\n      // TODO make use of IOContext\n      super(\"DirectIOLinuxIndexInput(path=\\\"\" + path.getPath() + \"\\\")\");\n      FileDescriptor fd = NativePosixUtil.open_direct(path.toString(), true);\n      fis = new FileInputStream(fd);\n      channel = fis.getChannel();\n      this.bufferSize = bufferSize;\n      buffer = ByteBuffer.allocateDirect(bufferSize);\n      isOpen = true;\n      isClone = false;\n      filePos = -bufferSize;\n      bufferPos = bufferSize;\n      //System.out.println(\"D open \" + path + \" this=\" + this);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/store/NativeUnixDirectory.NativeUnixIndexInput#NativeUnixIndexInput(File,int).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/store/DirectIOLinuxDirectory.DirectIOLinuxIndexInput#DirectIOLinuxIndexInput(File,int).mjava","sourceNew":"    public NativeUnixIndexInput(File path, int bufferSize) throws IOException {\n      super(\"NativeUnixIndexInput(path=\\\"\" + path.getPath() + \"\\\")\");\n      final FileDescriptor fd = NativePosixUtil.open_direct(path.toString(), true);\n      fis = new FileInputStream(fd);\n      channel = fis.getChannel();\n      this.bufferSize = bufferSize;\n      buffer = ByteBuffer.allocateDirect(bufferSize);\n      isOpen = true;\n      isClone = false;\n      filePos = -bufferSize;\n      bufferPos = bufferSize;\n      //System.out.println(\"D open \" + path + \" this=\" + this);\n    }\n\n","sourceOld":"    public DirectIOLinuxIndexInput(File path, int bufferSize) throws IOException {\n      // TODO make use of IOContext\n      super(\"DirectIOLinuxIndexInput(path=\\\"\" + path.getPath() + \"\\\")\");\n      FileDescriptor fd = NativePosixUtil.open_direct(path.toString(), true);\n      fis = new FileInputStream(fd);\n      channel = fis.getChannel();\n      this.bufferSize = bufferSize;\n      buffer = ByteBuffer.allocateDirect(bufferSize);\n      isOpen = true;\n      isClone = false;\n      filePos = -bufferSize;\n      bufferPos = bufferSize;\n      //System.out.println(\"D open \" + path + \" this=\" + this);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f1efe3edca215dd9891cb42af283fed96f792ca0":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"d5243f2425292adfa2c094097311654ae59588bc":["f1efe3edca215dd9891cb42af283fed96f792ca0"],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","95ddefb56022771b5d4a53dc1baa806d2a14cfa9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","a82de09f9a74dac24b12b1aa09017628cd46e73a"],"a82de09f9a74dac24b12b1aa09017628cd46e73a":["95ddefb56022771b5d4a53dc1baa806d2a14cfa9"],"c162b4b9ef005383c38e0912c16267584dc40de5":["a82de09f9a74dac24b12b1aa09017628cd46e73a"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":["f1efe3edca215dd9891cb42af283fed96f792ca0","d5243f2425292adfa2c094097311654ae59588bc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b6fdfce35d0adb18836cf8711abe487a934df33":["f1efe3edca215dd9891cb42af283fed96f792ca0","d5243f2425292adfa2c094097311654ae59588bc"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["a82de09f9a74dac24b12b1aa09017628cd46e73a","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["a82de09f9a74dac24b12b1aa09017628cd46e73a","c162b4b9ef005383c38e0912c16267584dc40de5"],"95ddefb56022771b5d4a53dc1baa806d2a14cfa9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d5243f2425292adfa2c094097311654ae59588bc"]},"commit2Childs":{"f1efe3edca215dd9891cb42af283fed96f792ca0":["d5243f2425292adfa2c094097311654ae59588bc","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33"],"d5243f2425292adfa2c094097311654ae59588bc":["817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"a82de09f9a74dac24b12b1aa09017628cd46e73a":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c162b4b9ef005383c38e0912c16267584dc40de5","5d004d0e0b3f65bb40da76d476d659d7888270e8","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"c162b4b9ef005383c38e0912c16267584dc40de5":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5f4e87790277826a2aea119328600dfb07761f32","95ddefb56022771b5d4a53dc1baa806d2a14cfa9"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["f1efe3edca215dd9891cb42af283fed96f792ca0","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"95ddefb56022771b5d4a53dc1baa806d2a14cfa9":["5f4e87790277826a2aea119328600dfb07761f32","a82de09f9a74dac24b12b1aa09017628cd46e73a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33","5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}