{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#verify(Directory).mjava","commits":[{"id":"cf8086c7e11dc41303ef1b8050bd355ddfaee76d","date":1350007219,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#verify(Directory).mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/block/TestBlockPostingsFormat3#verify(Directory).mjava","sourceNew":"  private void verify(Directory dir) throws Exception {\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext leaf : ir.leaves()) {\n      AtomicReader leafReader = leaf.reader();\n      assertTerms(leafReader.terms(\"field1bare\"), leafReader.terms(\"field2offsets\"), true);\n      assertTerms(leafReader.terms(\"field2offsets\"), leafReader.terms(\"field3payloadsFixed\"), true);\n      assertTerms(leafReader.terms(\"field3payloadsFixed\"), leafReader.terms(\"field4payloadsVariable\"), true);\n      assertTerms(leafReader.terms(\"field4payloadsVariable\"), leafReader.terms(\"field5payloadsFixedOffsets\"), true);\n      assertTerms(leafReader.terms(\"field5payloadsFixedOffsets\"), leafReader.terms(\"field6payloadsVariableOffsets\"), true);\n    }\n    ir.close();\n  }\n\n","sourceOld":"  private void verify(Directory dir) throws Exception {\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext leaf : ir.leaves()) {\n      AtomicReader leafReader = leaf.reader();\n      assertTerms(leafReader.terms(\"field1bare\"), leafReader.terms(\"field2offsets\"), true);\n      assertTerms(leafReader.terms(\"field2offsets\"), leafReader.terms(\"field3payloadsFixed\"), true);\n      assertTerms(leafReader.terms(\"field3payloadsFixed\"), leafReader.terms(\"field4payloadsVariable\"), true);\n      assertTerms(leafReader.terms(\"field4payloadsVariable\"), leafReader.terms(\"field5payloadsFixedOffsets\"), true);\n      assertTerms(leafReader.terms(\"field5payloadsFixedOffsets\"), leafReader.terms(\"field6payloadsVariableOffsets\"), true);\n    }\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#verify(Directory).mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/block/TestBlockPostingsFormat3#verify(Directory).mjava","sourceNew":"  private void verify(Directory dir) throws Exception {\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext leaf : ir.leaves()) {\n      AtomicReader leafReader = leaf.reader();\n      assertTerms(leafReader.terms(\"field1bare\"), leafReader.terms(\"field2offsets\"), true);\n      assertTerms(leafReader.terms(\"field2offsets\"), leafReader.terms(\"field3payloadsFixed\"), true);\n      assertTerms(leafReader.terms(\"field3payloadsFixed\"), leafReader.terms(\"field4payloadsVariable\"), true);\n      assertTerms(leafReader.terms(\"field4payloadsVariable\"), leafReader.terms(\"field5payloadsFixedOffsets\"), true);\n      assertTerms(leafReader.terms(\"field5payloadsFixedOffsets\"), leafReader.terms(\"field6payloadsVariableOffsets\"), true);\n    }\n    ir.close();\n  }\n\n","sourceOld":"  private void verify(Directory dir) throws Exception {\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext leaf : ir.leaves()) {\n      AtomicReader leafReader = leaf.reader();\n      assertTerms(leafReader.terms(\"field1bare\"), leafReader.terms(\"field2offsets\"), true);\n      assertTerms(leafReader.terms(\"field2offsets\"), leafReader.terms(\"field3payloadsFixed\"), true);\n      assertTerms(leafReader.terms(\"field3payloadsFixed\"), leafReader.terms(\"field4payloadsVariable\"), true);\n      assertTerms(leafReader.terms(\"field4payloadsVariable\"), leafReader.terms(\"field5payloadsFixedOffsets\"), true);\n      assertTerms(leafReader.terms(\"field5payloadsFixedOffsets\"), leafReader.terms(\"field6payloadsVariableOffsets\"), true);\n    }\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#verify(Directory).mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/block/TestBlockPostingsFormat3#verify(Directory).mjava","sourceNew":"  private void verify(Directory dir) throws Exception {\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext leaf : ir.leaves()) {\n      AtomicReader leafReader = leaf.reader();\n      assertTerms(leafReader.terms(\"field1bare\"), leafReader.terms(\"field2offsets\"), true);\n      assertTerms(leafReader.terms(\"field2offsets\"), leafReader.terms(\"field3payloadsFixed\"), true);\n      assertTerms(leafReader.terms(\"field3payloadsFixed\"), leafReader.terms(\"field4payloadsVariable\"), true);\n      assertTerms(leafReader.terms(\"field4payloadsVariable\"), leafReader.terms(\"field5payloadsFixedOffsets\"), true);\n      assertTerms(leafReader.terms(\"field5payloadsFixedOffsets\"), leafReader.terms(\"field6payloadsVariableOffsets\"), true);\n    }\n    ir.close();\n  }\n\n","sourceOld":"  private void verify(Directory dir) throws Exception {\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext leaf : ir.leaves()) {\n      AtomicReader leafReader = leaf.reader();\n      assertTerms(leafReader.terms(\"field1bare\"), leafReader.terms(\"field2offsets\"), true);\n      assertTerms(leafReader.terms(\"field2offsets\"), leafReader.terms(\"field3payloadsFixed\"), true);\n      assertTerms(leafReader.terms(\"field3payloadsFixed\"), leafReader.terms(\"field4payloadsVariable\"), true);\n      assertTerms(leafReader.terms(\"field4payloadsVariable\"), leafReader.terms(\"field5payloadsFixedOffsets\"), true);\n      assertTerms(leafReader.terms(\"field5payloadsFixedOffsets\"), leafReader.terms(\"field6payloadsVariableOffsets\"), true);\n    }\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2989b58779e186266a5d5ab0c6fc46096e68b848","date":1350919624,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#verify(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#verify(Directory).mjava","sourceNew":"  private void verify(Directory dir) throws Exception {\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext leaf : ir.leaves()) {\n      AtomicReader leafReader = leaf.reader();\n      assertTerms(leafReader.terms(\"field1docs\"), leafReader.terms(\"field2freqs\"), true);\n      assertTerms(leafReader.terms(\"field3positions\"), leafReader.terms(\"field4offsets\"), true);\n      assertTerms(leafReader.terms(\"field4offsets\"), leafReader.terms(\"field5payloadsFixed\"), true);\n      assertTerms(leafReader.terms(\"field5payloadsFixed\"), leafReader.terms(\"field6payloadsVariable\"), true);\n      assertTerms(leafReader.terms(\"field6payloadsVariable\"), leafReader.terms(\"field7payloadsFixedOffsets\"), true);\n      assertTerms(leafReader.terms(\"field7payloadsFixedOffsets\"), leafReader.terms(\"field8payloadsVariableOffsets\"), true);\n    }\n    ir.close();\n  }\n\n","sourceOld":"  private void verify(Directory dir) throws Exception {\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext leaf : ir.leaves()) {\n      AtomicReader leafReader = leaf.reader();\n      assertTerms(leafReader.terms(\"field1bare\"), leafReader.terms(\"field2offsets\"), true);\n      assertTerms(leafReader.terms(\"field2offsets\"), leafReader.terms(\"field3payloadsFixed\"), true);\n      assertTerms(leafReader.terms(\"field3payloadsFixed\"), leafReader.terms(\"field4payloadsVariable\"), true);\n      assertTerms(leafReader.terms(\"field4payloadsVariable\"), leafReader.terms(\"field5payloadsFixedOffsets\"), true);\n      assertTerms(leafReader.terms(\"field5payloadsFixedOffsets\"), leafReader.terms(\"field6payloadsVariableOffsets\"), true);\n    }\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62e52115b56781006682fd92c6938efaf174304d","date":1351014780,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#verify(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#verify(Directory).mjava","sourceNew":"  private void verify(Directory dir) throws Exception {\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext leaf : ir.leaves()) {\n      AtomicReader leafReader = leaf.reader();\n      assertTerms(leafReader.terms(\"field1docs\"), leafReader.terms(\"field2freqs\"), true);\n      assertTerms(leafReader.terms(\"field3positions\"), leafReader.terms(\"field4offsets\"), true);\n      assertTerms(leafReader.terms(\"field4offsets\"), leafReader.terms(\"field5payloadsFixed\"), true);\n      assertTerms(leafReader.terms(\"field5payloadsFixed\"), leafReader.terms(\"field6payloadsVariable\"), true);\n      assertTerms(leafReader.terms(\"field6payloadsVariable\"), leafReader.terms(\"field7payloadsFixedOffsets\"), true);\n      assertTerms(leafReader.terms(\"field7payloadsFixedOffsets\"), leafReader.terms(\"field8payloadsVariableOffsets\"), true);\n    }\n    ir.close();\n  }\n\n","sourceOld":"  private void verify(Directory dir) throws Exception {\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext leaf : ir.leaves()) {\n      AtomicReader leafReader = leaf.reader();\n      assertTerms(leafReader.terms(\"field1bare\"), leafReader.terms(\"field2offsets\"), true);\n      assertTerms(leafReader.terms(\"field2offsets\"), leafReader.terms(\"field3payloadsFixed\"), true);\n      assertTerms(leafReader.terms(\"field3payloadsFixed\"), leafReader.terms(\"field4payloadsVariable\"), true);\n      assertTerms(leafReader.terms(\"field4payloadsVariable\"), leafReader.terms(\"field5payloadsFixedOffsets\"), true);\n      assertTerms(leafReader.terms(\"field5payloadsFixedOffsets\"), leafReader.terms(\"field6payloadsVariableOffsets\"), true);\n    }\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#verify(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#verify(Directory).mjava","sourceNew":"  private void verify(Directory dir) throws Exception {\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (LeafReaderContext leaf : ir.leaves()) {\n      LeafReader leafReader = leaf.reader();\n      assertTerms(leafReader.terms(\"field1docs\"), leafReader.terms(\"field2freqs\"), true);\n      assertTerms(leafReader.terms(\"field3positions\"), leafReader.terms(\"field4offsets\"), true);\n      assertTerms(leafReader.terms(\"field4offsets\"), leafReader.terms(\"field5payloadsFixed\"), true);\n      assertTerms(leafReader.terms(\"field5payloadsFixed\"), leafReader.terms(\"field6payloadsVariable\"), true);\n      assertTerms(leafReader.terms(\"field6payloadsVariable\"), leafReader.terms(\"field7payloadsFixedOffsets\"), true);\n      assertTerms(leafReader.terms(\"field7payloadsFixedOffsets\"), leafReader.terms(\"field8payloadsVariableOffsets\"), true);\n    }\n    ir.close();\n  }\n\n","sourceOld":"  private void verify(Directory dir) throws Exception {\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext leaf : ir.leaves()) {\n      AtomicReader leafReader = leaf.reader();\n      assertTerms(leafReader.terms(\"field1docs\"), leafReader.terms(\"field2freqs\"), true);\n      assertTerms(leafReader.terms(\"field3positions\"), leafReader.terms(\"field4offsets\"), true);\n      assertTerms(leafReader.terms(\"field4offsets\"), leafReader.terms(\"field5payloadsFixed\"), true);\n      assertTerms(leafReader.terms(\"field5payloadsFixed\"), leafReader.terms(\"field6payloadsVariable\"), true);\n      assertTerms(leafReader.terms(\"field6payloadsVariable\"), leafReader.terms(\"field7payloadsFixedOffsets\"), true);\n      assertTerms(leafReader.terms(\"field7payloadsFixedOffsets\"), leafReader.terms(\"field8payloadsVariableOffsets\"), true);\n    }\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":6,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene41/TestLucene41PostingsFormat3#verify(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#verify(Directory).mjava","sourceNew":"  private void verify(Directory dir) throws Exception {\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (LeafReaderContext leaf : ir.leaves()) {\n      LeafReader leafReader = leaf.reader();\n      assertTerms(leafReader.terms(\"field1docs\"), leafReader.terms(\"field2freqs\"), true);\n      assertTerms(leafReader.terms(\"field3positions\"), leafReader.terms(\"field4offsets\"), true);\n      assertTerms(leafReader.terms(\"field4offsets\"), leafReader.terms(\"field5payloadsFixed\"), true);\n      assertTerms(leafReader.terms(\"field5payloadsFixed\"), leafReader.terms(\"field6payloadsVariable\"), true);\n      assertTerms(leafReader.terms(\"field6payloadsVariable\"), leafReader.terms(\"field7payloadsFixedOffsets\"), true);\n      assertTerms(leafReader.terms(\"field7payloadsFixedOffsets\"), leafReader.terms(\"field8payloadsVariableOffsets\"), true);\n    }\n    ir.close();\n  }\n\n","sourceOld":"  private void verify(Directory dir) throws Exception {\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (LeafReaderContext leaf : ir.leaves()) {\n      LeafReader leafReader = leaf.reader();\n      assertTerms(leafReader.terms(\"field1docs\"), leafReader.terms(\"field2freqs\"), true);\n      assertTerms(leafReader.terms(\"field3positions\"), leafReader.terms(\"field4offsets\"), true);\n      assertTerms(leafReader.terms(\"field4offsets\"), leafReader.terms(\"field5payloadsFixed\"), true);\n      assertTerms(leafReader.terms(\"field5payloadsFixed\"), leafReader.terms(\"field6payloadsVariable\"), true);\n      assertTerms(leafReader.terms(\"field6payloadsVariable\"), leafReader.terms(\"field7payloadsFixedOffsets\"), true);\n      assertTerms(leafReader.terms(\"field7payloadsFixedOffsets\"), leafReader.terms(\"field8payloadsVariableOffsets\"), true);\n    }\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#verify(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#verify(Directory).mjava","sourceNew":"  private void verify(Directory dir) throws Exception {\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (LeafReaderContext leaf : ir.leaves()) {\n      LeafReader leafReader = leaf.reader();\n      assertTerms(leafReader.terms(\"field1docs\"), leafReader.terms(\"field2freqs\"), true);\n      assertTerms(leafReader.terms(\"field3positions\"), leafReader.terms(\"field4offsets\"), true);\n      assertTerms(leafReader.terms(\"field4offsets\"), leafReader.terms(\"field5payloadsFixed\"), true);\n      assertTerms(leafReader.terms(\"field5payloadsFixed\"), leafReader.terms(\"field6payloadsVariable\"), true);\n      assertTerms(leafReader.terms(\"field6payloadsVariable\"), leafReader.terms(\"field7payloadsFixedOffsets\"), true);\n      assertTerms(leafReader.terms(\"field7payloadsFixedOffsets\"), leafReader.terms(\"field8payloadsVariableOffsets\"), true);\n    }\n    ir.close();\n  }\n\n","sourceOld":"  private void verify(Directory dir) throws Exception {\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (LeafReaderContext leaf : ir.leaves()) {\n      LeafReader leafReader = leaf.reader();\n      assertTerms(leafReader.terms(\"field1docs\"), leafReader.terms(\"field2freqs\"), true);\n      assertTerms(leafReader.terms(\"field3positions\"), leafReader.terms(\"field4offsets\"), true);\n      assertTerms(leafReader.terms(\"field4offsets\"), leafReader.terms(\"field5payloadsFixed\"), true);\n      assertTerms(leafReader.terms(\"field5payloadsFixed\"), leafReader.terms(\"field6payloadsVariable\"), true);\n      assertTerms(leafReader.terms(\"field6payloadsVariable\"), leafReader.terms(\"field7payloadsFixedOffsets\"), true);\n      assertTerms(leafReader.terms(\"field7payloadsFixedOffsets\"), leafReader.terms(\"field8payloadsVariableOffsets\"), true);\n    }\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":6,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene41/TestLucene41PostingsFormat3#verify(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#verify(Directory).mjava","sourceNew":"  private void verify(Directory dir) throws Exception {\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (LeafReaderContext leaf : ir.leaves()) {\n      LeafReader leafReader = leaf.reader();\n      assertTerms(leafReader.terms(\"field1docs\"), leafReader.terms(\"field2freqs\"), true);\n      assertTerms(leafReader.terms(\"field3positions\"), leafReader.terms(\"field4offsets\"), true);\n      assertTerms(leafReader.terms(\"field4offsets\"), leafReader.terms(\"field5payloadsFixed\"), true);\n      assertTerms(leafReader.terms(\"field5payloadsFixed\"), leafReader.terms(\"field6payloadsVariable\"), true);\n      assertTerms(leafReader.terms(\"field6payloadsVariable\"), leafReader.terms(\"field7payloadsFixedOffsets\"), true);\n      assertTerms(leafReader.terms(\"field7payloadsFixedOffsets\"), leafReader.terms(\"field8payloadsVariableOffsets\"), true);\n    }\n    ir.close();\n  }\n\n","sourceOld":"  private void verify(Directory dir) throws Exception {\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (LeafReaderContext leaf : ir.leaves()) {\n      LeafReader leafReader = leaf.reader();\n      assertTerms(leafReader.terms(\"field1docs\"), leafReader.terms(\"field2freqs\"), true);\n      assertTerms(leafReader.terms(\"field3positions\"), leafReader.terms(\"field4offsets\"), true);\n      assertTerms(leafReader.terms(\"field4offsets\"), leafReader.terms(\"field5payloadsFixed\"), true);\n      assertTerms(leafReader.terms(\"field5payloadsFixed\"), leafReader.terms(\"field6payloadsVariable\"), true);\n      assertTerms(leafReader.terms(\"field6payloadsVariable\"), leafReader.terms(\"field7payloadsFixedOffsets\"), true);\n      assertTerms(leafReader.terms(\"field7payloadsFixedOffsets\"), leafReader.terms(\"field8payloadsVariableOffsets\"), true);\n    }\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#verify(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#verify(Directory).mjava","sourceNew":"  private void verify(Directory dir) throws Exception {\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (LeafReaderContext leaf : ir.leaves()) {\n      LeafReader leafReader = leaf.reader();\n      assertTerms(leafReader.terms(\"field1docs\"), leafReader.terms(\"field2freqs\"), true);\n      assertTerms(leafReader.terms(\"field3positions\"), leafReader.terms(\"field4offsets\"), true);\n      assertTerms(leafReader.terms(\"field4offsets\"), leafReader.terms(\"field5payloadsFixed\"), true);\n      assertTerms(leafReader.terms(\"field5payloadsFixed\"), leafReader.terms(\"field6payloadsVariable\"), true);\n      assertTerms(leafReader.terms(\"field6payloadsVariable\"), leafReader.terms(\"field7payloadsFixedOffsets\"), true);\n      assertTerms(leafReader.terms(\"field7payloadsFixedOffsets\"), leafReader.terms(\"field8payloadsVariableOffsets\"), true);\n    }\n    ir.close();\n  }\n\n","sourceOld":"  private void verify(Directory dir) throws Exception {\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (LeafReaderContext leaf : ir.leaves()) {\n      LeafReader leafReader = leaf.reader();\n      assertTerms(leafReader.terms(\"field1docs\"), leafReader.terms(\"field2freqs\"), true);\n      assertTerms(leafReader.terms(\"field3positions\"), leafReader.terms(\"field4offsets\"), true);\n      assertTerms(leafReader.terms(\"field4offsets\"), leafReader.terms(\"field5payloadsFixed\"), true);\n      assertTerms(leafReader.terms(\"field5payloadsFixed\"), leafReader.terms(\"field6payloadsVariable\"), true);\n      assertTerms(leafReader.terms(\"field6payloadsVariable\"), leafReader.terms(\"field7payloadsFixedOffsets\"), true);\n      assertTerms(leafReader.terms(\"field7payloadsFixedOffsets\"), leafReader.terms(\"field8payloadsVariableOffsets\"), true);\n    }\n    ir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cf8086c7e11dc41303ef1b8050bd355ddfaee76d"],"99eb4a732d1a908f4636ace52928876136bf1896":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"62e52115b56781006682fd92c6938efaf174304d":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","2989b58779e186266a5d5ab0c6fc46096e68b848"],"2989b58779e186266a5d5ab0c6fc46096e68b848":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["c9fb5f46e264daf5ba3860defe623a89d202dd87","99eb4a732d1a908f4636ace52928876136bf1896"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["2989b58779e186266a5d5ab0c6fc46096e68b848"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"]},"commit2Childs":{"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["2989b58779e186266a5d5ab0c6fc46096e68b848","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"99eb4a732d1a908f4636ace52928876136bf1896":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"62e52115b56781006682fd92c6938efaf174304d":[],"2989b58779e186266a5d5ab0c6fc46096e68b848":["62e52115b56781006682fd92c6938efaf174304d","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7492bcb52be51e55d596134b95b2e53cc4ffb91","cf8086c7e11dc41303ef1b8050bd355ddfaee76d","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["62e52115b56781006682fd92c6938efaf174304d"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["99eb4a732d1a908f4636ace52928876136bf1896","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["62e52115b56781006682fd92c6938efaf174304d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}