{"path":"solr/src/common/org/apache/solr/common/util/FileUtils#sync(File).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/common/org/apache/solr/common/util/FileUtils#sync(File).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Copied from Lucene's {@link org.apache.lucene.store.FSDirectory#sync(String)}\n   *\n   * @see org.apache.lucene.store.FSDirectory#sync(String)\n   *\n   * @param fullFile the File to be synced to disk\n   * @throws IOException if the file could not be synced\n   */\n  public static void sync(File fullFile) throws IOException  {\n    if (fullFile == null || !fullFile.exists())\n      throw new FileNotFoundException(\"File does not exist \" + fullFile);\n\n    boolean success = false;\n    int retryCount = 0;\n    IOException exc = null;\n    while(!success && retryCount < 5) {\n      retryCount++;\n      RandomAccessFile file = null;\n      try {\n        try {\n          file = new RandomAccessFile(fullFile, \"rw\");\n          file.getFD().sync();\n          success = true;\n        } finally {\n          if (file != null)\n            file.close();\n        }\n      } catch (IOException ioe) {\n        if (exc == null)\n          exc = ioe;\n        try {\n          // Pause 5 msec\n          Thread.sleep(5);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    if (!success)\n      // Throw original exception\n      throw exc;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/common/org/apache/solr/common/util/FileUtils#sync(File).mjava","sourceNew":null,"sourceOld":"  /**\n   * Copied from Lucene's {@link org.apache.lucene.store.FSDirectory#sync(String)}\n   *\n   * @see org.apache.lucene.store.FSDirectory#sync(String)\n   *\n   * @param fullFile the File to be synced to disk\n   * @throws IOException if the file could not be synced\n   */\n  public static void sync(File fullFile) throws IOException  {\n    if (fullFile == null || !fullFile.exists())\n      throw new FileNotFoundException(\"File does not exist \" + fullFile);\n\n    boolean success = false;\n    int retryCount = 0;\n    IOException exc = null;\n    while(!success && retryCount < 5) {\n      retryCount++;\n      RandomAccessFile file = null;\n      try {\n        try {\n          file = new RandomAccessFile(fullFile, \"rw\");\n          file.getFD().sync();\n          success = true;\n        } finally {\n          if (file != null)\n            file.close();\n        }\n      } catch (IOException ioe) {\n        if (exc == null)\n          exc = ioe;\n        try {\n          // Pause 5 msec\n          Thread.sleep(5);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    if (!success)\n      // Throw original exception\n      throw exc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/common/org/apache/solr/common/util/FileUtils#sync(File).mjava","pathOld":"src/common/org/apache/solr/common/util/FileUtils#sync(File).mjava","sourceNew":"  /**\n   * Copied from Lucene's {@link org.apache.lucene.store.FSDirectory#sync(String)}\n   *\n   * @see org.apache.lucene.store.FSDirectory#sync(String)\n   *\n   * @param fullFile the File to be synced to disk\n   * @throws IOException if the file could not be synced\n   */\n  public static void sync(File fullFile) throws IOException  {\n    if (fullFile == null || !fullFile.exists())\n      throw new FileNotFoundException(\"File does not exist \" + fullFile);\n\n    boolean success = false;\n    int retryCount = 0;\n    IOException exc = null;\n    while(!success && retryCount < 5) {\n      retryCount++;\n      RandomAccessFile file = null;\n      try {\n        try {\n          file = new RandomAccessFile(fullFile, \"rw\");\n          file.getFD().sync();\n          success = true;\n        } finally {\n          if (file != null)\n            file.close();\n        }\n      } catch (IOException ioe) {\n        if (exc == null)\n          exc = ioe;\n        try {\n          // Pause 5 msec\n          Thread.sleep(5);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    if (!success)\n      // Throw original exception\n      throw exc;\n  }\n\n","sourceOld":"  /**\n   * Copied from Lucene's {@link org.apache.lucene.store.FSDirectory#sync(String)}\n   *\n   * @see org.apache.lucene.store.FSDirectory#sync(String)\n   *\n   * @param fullFile the File to be synced to disk\n   * @throws IOException if the file could not be synced\n   */\n  public static void sync(File fullFile) throws IOException  {\n    if (fullFile == null || !fullFile.exists())\n      throw new FileNotFoundException(\"File does not exist \" + fullFile);\n\n    boolean success = false;\n    int retryCount = 0;\n    IOException exc = null;\n    while(!success && retryCount < 5) {\n      retryCount++;\n      RandomAccessFile file = null;\n      try {\n        try {\n          file = new RandomAccessFile(fullFile, \"rw\");\n          file.getFD().sync();\n          success = true;\n        } finally {\n          if (file != null)\n            file.close();\n        }\n      } catch (IOException ioe) {\n        if (exc == null)\n          exc = ioe;\n        try {\n          // Pause 5 msec\n          Thread.sleep(5);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    if (!success)\n      // Throw original exception\n      throw exc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/common/org/apache/solr/common/util/FileUtils#sync(File).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Copied from Lucene's {@link org.apache.lucene.store.FSDirectory#sync(String)}\n   *\n   * @see org.apache.lucene.store.FSDirectory#sync(String)\n   *\n   * @param fullFile the File to be synced to disk\n   * @throws IOException if the file could not be synced\n   */\n  public static void sync(File fullFile) throws IOException  {\n    if (fullFile == null || !fullFile.exists())\n      throw new FileNotFoundException(\"File does not exist \" + fullFile);\n\n    boolean success = false;\n    int retryCount = 0;\n    IOException exc = null;\n    while(!success && retryCount < 5) {\n      retryCount++;\n      RandomAccessFile file = null;\n      try {\n        try {\n          file = new RandomAccessFile(fullFile, \"rw\");\n          file.getFD().sync();\n          success = true;\n        } finally {\n          if (file != null)\n            file.close();\n        }\n      } catch (IOException ioe) {\n        if (exc == null)\n          exc = ioe;\n        try {\n          // Pause 5 msec\n          Thread.sleep(5);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    if (!success)\n      // Throw original exception\n      throw exc;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af3d833cd7d10d0017f6f1e189ef9b72e25b4a51","date":1300499489,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/common/org/apache/solr/common/util/FileUtils#sync(File).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/FileUtils#sync(File).mjava","sourceNew":"  /**\n   * Copied from Lucene's FSDirectory.sync(String) <!-- protected -->\n   *\n   * @param fullFile the File to be synced to disk\n   * @throws IOException if the file could not be synced\n   */\n  public static void sync(File fullFile) throws IOException  {\n    if (fullFile == null || !fullFile.exists())\n      throw new FileNotFoundException(\"File does not exist \" + fullFile);\n\n    boolean success = false;\n    int retryCount = 0;\n    IOException exc = null;\n    while(!success && retryCount < 5) {\n      retryCount++;\n      RandomAccessFile file = null;\n      try {\n        try {\n          file = new RandomAccessFile(fullFile, \"rw\");\n          file.getFD().sync();\n          success = true;\n        } finally {\n          if (file != null)\n            file.close();\n        }\n      } catch (IOException ioe) {\n        if (exc == null)\n          exc = ioe;\n        try {\n          // Pause 5 msec\n          Thread.sleep(5);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    if (!success)\n      // Throw original exception\n      throw exc;\n  }\n\n","sourceOld":"  /**\n   * Copied from Lucene's {@link org.apache.lucene.store.FSDirectory#sync(String)}\n   *\n   * @see org.apache.lucene.store.FSDirectory#sync(String)\n   *\n   * @param fullFile the File to be synced to disk\n   * @throws IOException if the file could not be synced\n   */\n  public static void sync(File fullFile) throws IOException  {\n    if (fullFile == null || !fullFile.exists())\n      throw new FileNotFoundException(\"File does not exist \" + fullFile);\n\n    boolean success = false;\n    int retryCount = 0;\n    IOException exc = null;\n    while(!success && retryCount < 5) {\n      retryCount++;\n      RandomAccessFile file = null;\n      try {\n        try {\n          file = new RandomAccessFile(fullFile, \"rw\");\n          file.getFD().sync();\n          success = true;\n        } finally {\n          if (file != null)\n            file.close();\n        }\n      } catch (IOException ioe) {\n        if (exc == null)\n          exc = ioe;\n        try {\n          // Pause 5 msec\n          Thread.sleep(5);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    if (!success)\n      // Throw original exception\n      throw exc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/common/org/apache/solr/common/util/FileUtils#sync(File).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/FileUtils#sync(File).mjava","sourceNew":"  /**\n   * Copied from Lucene's FSDirectory.sync(String) <!-- protected -->\n   *\n   * @param fullFile the File to be synced to disk\n   * @throws IOException if the file could not be synced\n   */\n  public static void sync(File fullFile) throws IOException  {\n    if (fullFile == null || !fullFile.exists())\n      throw new FileNotFoundException(\"File does not exist \" + fullFile);\n\n    boolean success = false;\n    int retryCount = 0;\n    IOException exc = null;\n    while(!success && retryCount < 5) {\n      retryCount++;\n      RandomAccessFile file = null;\n      try {\n        try {\n          file = new RandomAccessFile(fullFile, \"rw\");\n          file.getFD().sync();\n          success = true;\n        } finally {\n          if (file != null)\n            file.close();\n        }\n      } catch (IOException ioe) {\n        if (exc == null)\n          exc = ioe;\n        try {\n          // Pause 5 msec\n          Thread.sleep(5);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    if (!success)\n      // Throw original exception\n      throw exc;\n  }\n\n","sourceOld":"  /**\n   * Copied from Lucene's {@link org.apache.lucene.store.FSDirectory#sync(String)}\n   *\n   * @see org.apache.lucene.store.FSDirectory#sync(String)\n   *\n   * @param fullFile the File to be synced to disk\n   * @throws IOException if the file could not be synced\n   */\n  public static void sync(File fullFile) throws IOException  {\n    if (fullFile == null || !fullFile.exists())\n      throw new FileNotFoundException(\"File does not exist \" + fullFile);\n\n    boolean success = false;\n    int retryCount = 0;\n    IOException exc = null;\n    while(!success && retryCount < 5) {\n      retryCount++;\n      RandomAccessFile file = null;\n      try {\n        try {\n          file = new RandomAccessFile(fullFile, \"rw\");\n          file.getFD().sync();\n          success = true;\n        } finally {\n          if (file != null)\n            file.close();\n        }\n      } catch (IOException ioe) {\n        if (exc == null)\n          exc = ioe;\n        try {\n          // Pause 5 msec\n          Thread.sleep(5);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    if (!success)\n      // Throw original exception\n      throw exc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/common/org/apache/solr/common/util/FileUtils#sync(File).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/FileUtils#sync(File).mjava","sourceNew":"  /**\n   * Copied from Lucene's FSDirectory.sync(String) <!-- protected -->\n   *\n   * @param fullFile the File to be synced to disk\n   * @throws IOException if the file could not be synced\n   */\n  public static void sync(File fullFile) throws IOException  {\n    if (fullFile == null || !fullFile.exists())\n      throw new FileNotFoundException(\"File does not exist \" + fullFile);\n\n    boolean success = false;\n    int retryCount = 0;\n    IOException exc = null;\n    while(!success && retryCount < 5) {\n      retryCount++;\n      RandomAccessFile file = null;\n      try {\n        try {\n          file = new RandomAccessFile(fullFile, \"rw\");\n          file.getFD().sync();\n          success = true;\n        } finally {\n          if (file != null)\n            file.close();\n        }\n      } catch (IOException ioe) {\n        if (exc == null)\n          exc = ioe;\n        try {\n          // Pause 5 msec\n          Thread.sleep(5);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    if (!success)\n      // Throw original exception\n      throw exc;\n  }\n\n","sourceOld":"  /**\n   * Copied from Lucene's {@link org.apache.lucene.store.FSDirectory#sync(String)}\n   *\n   * @see org.apache.lucene.store.FSDirectory#sync(String)\n   *\n   * @param fullFile the File to be synced to disk\n   * @throws IOException if the file could not be synced\n   */\n  public static void sync(File fullFile) throws IOException  {\n    if (fullFile == null || !fullFile.exists())\n      throw new FileNotFoundException(\"File does not exist \" + fullFile);\n\n    boolean success = false;\n    int retryCount = 0;\n    IOException exc = null;\n    while(!success && retryCount < 5) {\n      retryCount++;\n      RandomAccessFile file = null;\n      try {\n        try {\n          file = new RandomAccessFile(fullFile, \"rw\");\n          file.getFD().sync();\n          success = true;\n        } finally {\n          if (file != null)\n            file.close();\n        }\n      } catch (IOException ioe) {\n        if (exc == null)\n          exc = ioe;\n        try {\n          // Pause 5 msec\n          Thread.sleep(5);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    if (!success)\n      // Throw original exception\n      throw exc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82e4aa5343beea2bfb246b56e948973bf1c96128","date":1306493289,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/src/common/org/apache/solr/common/util/FileUtils#sync(File).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/FileUtils#sync(File).mjava","sourceNew":"  /**\n   * Copied from Lucene's FSDirectory.fsync(String) <!-- protected -->\n   *\n   * @param fullFile the File to be synced to disk\n   * @throws IOException if the file could not be synced\n   */\n  public static void sync(File fullFile) throws IOException  {\n    if (fullFile == null || !fullFile.exists())\n      throw new FileNotFoundException(\"File does not exist \" + fullFile);\n\n    boolean success = false;\n    int retryCount = 0;\n    IOException exc = null;\n    while(!success && retryCount < 5) {\n      retryCount++;\n      RandomAccessFile file = null;\n      try {\n        try {\n          file = new RandomAccessFile(fullFile, \"rw\");\n          file.getFD().sync();\n          success = true;\n        } finally {\n          if (file != null)\n            file.close();\n        }\n      } catch (IOException ioe) {\n        if (exc == null)\n          exc = ioe;\n        try {\n          // Pause 5 msec\n          Thread.sleep(5);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    if (!success)\n      // Throw original exception\n      throw exc;\n  }\n\n","sourceOld":"  /**\n   * Copied from Lucene's FSDirectory.sync(String) <!-- protected -->\n   *\n   * @param fullFile the File to be synced to disk\n   * @throws IOException if the file could not be synced\n   */\n  public static void sync(File fullFile) throws IOException  {\n    if (fullFile == null || !fullFile.exists())\n      throw new FileNotFoundException(\"File does not exist \" + fullFile);\n\n    boolean success = false;\n    int retryCount = 0;\n    IOException exc = null;\n    while(!success && retryCount < 5) {\n      retryCount++;\n      RandomAccessFile file = null;\n      try {\n        try {\n          file = new RandomAccessFile(fullFile, \"rw\");\n          file.getFD().sync();\n          success = true;\n        } finally {\n          if (file != null)\n            file.close();\n        }\n      } catch (IOException ioe) {\n        if (exc == null)\n          exc = ioe;\n        try {\n          // Pause 5 msec\n          Thread.sleep(5);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    if (!success)\n      // Throw original exception\n      throw exc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/common/org/apache/solr/common/util/FileUtils#sync(File).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/FileUtils#sync(File).mjava","sourceNew":"  /**\n   * Copied from Lucene's FSDirectory.fsync(String) <!-- protected -->\n   *\n   * @param fullFile the File to be synced to disk\n   * @throws IOException if the file could not be synced\n   */\n  public static void sync(File fullFile) throws IOException  {\n    if (fullFile == null || !fullFile.exists())\n      throw new FileNotFoundException(\"File does not exist \" + fullFile);\n\n    boolean success = false;\n    int retryCount = 0;\n    IOException exc = null;\n    while(!success && retryCount < 5) {\n      retryCount++;\n      RandomAccessFile file = null;\n      try {\n        try {\n          file = new RandomAccessFile(fullFile, \"rw\");\n          file.getFD().sync();\n          success = true;\n        } finally {\n          if (file != null)\n            file.close();\n        }\n      } catch (IOException ioe) {\n        if (exc == null)\n          exc = ioe;\n        try {\n          // Pause 5 msec\n          Thread.sleep(5);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    if (!success)\n      // Throw original exception\n      throw exc;\n  }\n\n","sourceOld":"  /**\n   * Copied from Lucene's FSDirectory.sync(String) <!-- protected -->\n   *\n   * @param fullFile the File to be synced to disk\n   * @throws IOException if the file could not be synced\n   */\n  public static void sync(File fullFile) throws IOException  {\n    if (fullFile == null || !fullFile.exists())\n      throw new FileNotFoundException(\"File does not exist \" + fullFile);\n\n    boolean success = false;\n    int retryCount = 0;\n    IOException exc = null;\n    while(!success && retryCount < 5) {\n      retryCount++;\n      RandomAccessFile file = null;\n      try {\n        try {\n          file = new RandomAccessFile(fullFile, \"rw\");\n          file.getFD().sync();\n          success = true;\n        } finally {\n          if (file != null)\n            file.close();\n        }\n      } catch (IOException ioe) {\n        if (exc == null)\n          exc = ioe;\n        try {\n          // Pause 5 msec\n          Thread.sleep(5);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    if (!success)\n      // Throw original exception\n      throw exc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/common/org/apache/solr/common/util/FileUtils#sync(File).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/FileUtils#sync(File).mjava","sourceNew":"  /**\n   * Copied from Lucene's FSDirectory.fsync(String) <!-- protected -->\n   *\n   * @param fullFile the File to be synced to disk\n   * @throws IOException if the file could not be synced\n   */\n  public static void sync(File fullFile) throws IOException  {\n    if (fullFile == null || !fullFile.exists())\n      throw new FileNotFoundException(\"File does not exist \" + fullFile);\n\n    boolean success = false;\n    int retryCount = 0;\n    IOException exc = null;\n    while(!success && retryCount < 5) {\n      retryCount++;\n      RandomAccessFile file = null;\n      try {\n        try {\n          file = new RandomAccessFile(fullFile, \"rw\");\n          file.getFD().sync();\n          success = true;\n        } finally {\n          if (file != null)\n            file.close();\n        }\n      } catch (IOException ioe) {\n        if (exc == null)\n          exc = ioe;\n        try {\n          // Pause 5 msec\n          Thread.sleep(5);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    if (!success)\n      // Throw original exception\n      throw exc;\n  }\n\n","sourceOld":"  /**\n   * Copied from Lucene's FSDirectory.sync(String) <!-- protected -->\n   *\n   * @param fullFile the File to be synced to disk\n   * @throws IOException if the file could not be synced\n   */\n  public static void sync(File fullFile) throws IOException  {\n    if (fullFile == null || !fullFile.exists())\n      throw new FileNotFoundException(\"File does not exist \" + fullFile);\n\n    boolean success = false;\n    int retryCount = 0;\n    IOException exc = null;\n    while(!success && retryCount < 5) {\n      retryCount++;\n      RandomAccessFile file = null;\n      try {\n        try {\n          file = new RandomAccessFile(fullFile, \"rw\");\n          file.getFD().sync();\n          success = true;\n        } finally {\n          if (file != null)\n            file.close();\n        }\n      } catch (IOException ioe) {\n        if (exc == null)\n          exc = ioe;\n        try {\n          // Pause 5 msec\n          Thread.sleep(5);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    if (!success)\n      // Throw original exception\n      throw exc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/FileUtils#sync(File).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/FileUtils#sync(File).mjava","sourceNew":"  /**\n   * Copied from Lucene's FSDirectory.fsync(String) <!-- protected -->\n   *\n   * @param fullFile the File to be synced to disk\n   * @throws IOException if the file could not be synced\n   */\n  public static void sync(File fullFile) throws IOException  {\n    if (fullFile == null || !fullFile.exists())\n      throw new FileNotFoundException(\"File does not exist \" + fullFile);\n\n    boolean success = false;\n    int retryCount = 0;\n    IOException exc = null;\n    while(!success && retryCount < 5) {\n      retryCount++;\n      RandomAccessFile file = null;\n      try {\n        try {\n          file = new RandomAccessFile(fullFile, \"rw\");\n          file.getFD().sync();\n          success = true;\n        } finally {\n          if (file != null)\n            file.close();\n        }\n      } catch (IOException ioe) {\n        if (exc == null)\n          exc = ioe;\n        try {\n          // Pause 5 msec\n          Thread.sleep(5);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    if (!success)\n      // Throw original exception\n      throw exc;\n  }\n\n","sourceOld":"  /**\n   * Copied from Lucene's FSDirectory.fsync(String) <!-- protected -->\n   *\n   * @param fullFile the File to be synced to disk\n   * @throws IOException if the file could not be synced\n   */\n  public static void sync(File fullFile) throws IOException  {\n    if (fullFile == null || !fullFile.exists())\n      throw new FileNotFoundException(\"File does not exist \" + fullFile);\n\n    boolean success = false;\n    int retryCount = 0;\n    IOException exc = null;\n    while(!success && retryCount < 5) {\n      retryCount++;\n      RandomAccessFile file = null;\n      try {\n        try {\n          file = new RandomAccessFile(fullFile, \"rw\");\n          file.getFD().sync();\n          success = true;\n        } finally {\n          if (file != null)\n            file.close();\n        }\n      } catch (IOException ioe) {\n        if (exc == null)\n          exc = ioe;\n        try {\n          // Pause 5 msec\n          Thread.sleep(5);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    if (!success)\n      // Throw original exception\n      throw exc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/FileUtils#sync(File).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/FileUtils#sync(File).mjava","sourceNew":"  /**\n   * Copied from Lucene's FSDirectory.fsync(String) <!-- protected -->\n   *\n   * @param fullFile the File to be synced to disk\n   * @throws IOException if the file could not be synced\n   */\n  public static void sync(File fullFile) throws IOException  {\n    if (fullFile == null || !fullFile.exists())\n      throw new FileNotFoundException(\"File does not exist \" + fullFile);\n\n    boolean success = false;\n    int retryCount = 0;\n    IOException exc = null;\n    while(!success && retryCount < 5) {\n      retryCount++;\n      RandomAccessFile file = null;\n      try {\n        try {\n          file = new RandomAccessFile(fullFile, \"rw\");\n          file.getFD().sync();\n          success = true;\n        } finally {\n          if (file != null)\n            file.close();\n        }\n      } catch (IOException ioe) {\n        if (exc == null)\n          exc = ioe;\n        try {\n          // Pause 5 msec\n          Thread.sleep(5);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    if (!success)\n      // Throw original exception\n      throw exc;\n  }\n\n","sourceOld":"  /**\n   * Copied from Lucene's FSDirectory.fsync(String) <!-- protected -->\n   *\n   * @param fullFile the File to be synced to disk\n   * @throws IOException if the file could not be synced\n   */\n  public static void sync(File fullFile) throws IOException  {\n    if (fullFile == null || !fullFile.exists())\n      throw new FileNotFoundException(\"File does not exist \" + fullFile);\n\n    boolean success = false;\n    int retryCount = 0;\n    IOException exc = null;\n    while(!success && retryCount < 5) {\n      retryCount++;\n      RandomAccessFile file = null;\n      try {\n        try {\n          file = new RandomAccessFile(fullFile, \"rw\");\n          file.getFD().sync();\n          success = true;\n        } finally {\n          if (file != null)\n            file.close();\n        }\n      } catch (IOException ioe) {\n        if (exc == null)\n          exc = ioe;\n        try {\n          // Pause 5 msec\n          Thread.sleep(5);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    if (!success)\n      // Throw original exception\n      throw exc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/FileUtils#sync(File).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/FileUtils#sync(File).mjava","sourceNew":"  /**\n   * Copied from Lucene's FSDirectory.fsync(String) <!-- protected -->\n   *\n   * @param fullFile the File to be synced to disk\n   * @throws IOException if the file could not be synced\n   */\n  public static void sync(File fullFile) throws IOException  {\n    if (fullFile == null || !fullFile.exists())\n      throw new FileNotFoundException(\"File does not exist \" + fullFile);\n\n    boolean success = false;\n    int retryCount = 0;\n    IOException exc = null;\n    while(!success && retryCount < 5) {\n      retryCount++;\n      RandomAccessFile file = null;\n      try {\n        try {\n          file = new RandomAccessFile(fullFile, \"rw\");\n          file.getFD().sync();\n          success = true;\n        } finally {\n          if (file != null)\n            file.close();\n        }\n      } catch (IOException ioe) {\n        if (exc == null)\n          exc = ioe;\n        try {\n          // Pause 5 msec\n          Thread.sleep(5);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    if (!success)\n      // Throw original exception\n      throw exc;\n  }\n\n","sourceOld":"  /**\n   * Copied from Lucene's FSDirectory.fsync(String) <!-- protected -->\n   *\n   * @param fullFile the File to be synced to disk\n   * @throws IOException if the file could not be synced\n   */\n  public static void sync(File fullFile) throws IOException  {\n    if (fullFile == null || !fullFile.exists())\n      throw new FileNotFoundException(\"File does not exist \" + fullFile);\n\n    boolean success = false;\n    int retryCount = 0;\n    IOException exc = null;\n    while(!success && retryCount < 5) {\n      retryCount++;\n      RandomAccessFile file = null;\n      try {\n        try {\n          file = new RandomAccessFile(fullFile, \"rw\");\n          file.getFD().sync();\n          success = true;\n        } finally {\n          if (file != null)\n            file.close();\n        }\n      } catch (IOException ioe) {\n        if (exc == null)\n          exc = ioe;\n        try {\n          // Pause 5 msec\n          Thread.sleep(5);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n        }\n      }\n    }\n    if (!success)\n      // Throw original exception\n      throw exc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"82e4aa5343beea2bfb246b56e948973bf1c96128":["af3d833cd7d10d0017f6f1e189ef9b72e25b4a51"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["82e4aa5343beea2bfb246b56e948973bf1c96128","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"af3d833cd7d10d0017f6f1e189ef9b72e25b4a51":["1da8d55113b689b06716246649de6f62430f15c0"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["1da8d55113b689b06716246649de6f62430f15c0","af3d833cd7d10d0017f6f1e189ef9b72e25b4a51"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["af3d833cd7d10d0017f6f1e189ef9b72e25b4a51","82e4aa5343beea2bfb246b56e948973bf1c96128"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["1da8d55113b689b06716246649de6f62430f15c0","af3d833cd7d10d0017f6f1e189ef9b72e25b4a51"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["82e4aa5343beea2bfb246b56e948973bf1c96128"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["d619839baa8ce5503e496b94a9e42ad6f079293f","82e4aa5343beea2bfb246b56e948973bf1c96128"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"82e4aa5343beea2bfb246b56e948973bf1c96128":["c26f00b574427b55127e869b935845554afde1fa","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","a258fbb26824fd104ed795e5d9033d2d040049ee","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"af3d833cd7d10d0017f6f1e189ef9b72e25b4a51":["82e4aa5343beea2bfb246b56e948973bf1c96128","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","d619839baa8ce5503e496b94a9e42ad6f079293f"],"1da8d55113b689b06716246649de6f62430f15c0":["af3d833cd7d10d0017f6f1e189ef9b72e25b4a51","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}