{"path":"modules/join/src/java/org/apache/lucene/search/join/BlockJoinCollector#getTopGroups(BlockJoinQuery,Sort,int,int,int,boolean).mjava","commits":[{"id":"97e30c53fd81463c6ccd52402c91a6548cf42acb","date":1309296018,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/join/src/java/org/apache/lucene/search/join/BlockJoinCollector#getTopGroups(BlockJoinQuery,Sort,int,int,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Return the TopGroups for the specified\n   *  BlockJoinQuery.  The groupValue of each GroupDocs will\n   *  be the parent docID for that group.  Note that the\n   *  {@link GroupDocs#totalHits}, which would be the\n   *  total number of child documents matching that parent,\n   *  is not computed (will always be 0).  Returns null if\n   *  no groups matched. */\n  @SuppressWarnings(\"unchecked\")\n  public TopGroups<Integer> getTopGroups(BlockJoinQuery query, Sort withinGroupSort, int offset, int maxDocsPerGroup, int withinGroupOffset, boolean fillSortFields) \n\n    throws IOException {\n\n    final Integer _slot = joinQueryID.get(query);\n    if (_slot == null) {\n      if (totalHitCount == 0) {\n        return null;\n      } else {\n        throw new IllegalArgumentException(\"the Query did not contain the provided BlockJoinQuery\");\n      }\n    }\n\n    // unbox once\n    final int slot = _slot;\n\n    if (offset >= queue.size()) {\n      return null;\n    }\n    int totalGroupedHitCount = 0;\n\n    if (sortedGroups == null) {\n      sortQueue();\n    }\n\n    final FakeScorer fakeScorer = new FakeScorer();\n\n    final GroupDocs<Integer>[] groups = new GroupDocs[sortedGroups.length - offset];\n\n    for(int groupIDX=offset;groupIDX<sortedGroups.length;groupIDX++) {\n      final OneGroup og = sortedGroups[groupIDX];\n\n      // At this point we hold all docs w/ in each group,\n      // unsorted; we now sort them:\n      final TopDocsCollector collector;\n      if (withinGroupSort == null) {\n        // Sort by score\n        if (!trackScores) {\n          throw new IllegalArgumentException(\"cannot sort by relevance within group: trackScores=false\");\n        }\n        collector = TopScoreDocCollector.create(maxDocsPerGroup, true);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, maxDocsPerGroup, fillSortFields, trackScores, trackMaxScore, true);\n      }\n\n      collector.setScorer(fakeScorer);\n      collector.setNextReader(og.readerContext);\n      final int numChildDocs = og.counts[slot];\n      for(int docIDX=0;docIDX<numChildDocs;docIDX++) {\n        final int doc = og.docs[slot][docIDX];\n        fakeScorer.doc = doc;\n        if (trackScores) {\n          fakeScorer.score = og.scores[slot][docIDX];\n        }\n        collector.collect(doc);\n      }\n      totalGroupedHitCount += numChildDocs;\n\n      final Object[] groupSortValues;\n\n      if (fillSortFields) {\n        groupSortValues = new Object[comparators.length];\n        for(int sortFieldIDX=0;sortFieldIDX<comparators.length;sortFieldIDX++) {\n          groupSortValues[sortFieldIDX] = comparators[sortFieldIDX].value(og.slot);\n        }\n      } else {\n        groupSortValues = null;\n      }\n\n      final TopDocs topDocs = collector.topDocs(withinGroupOffset, maxDocsPerGroup);\n\n      groups[groupIDX-offset] = new GroupDocs<Integer>(topDocs.getMaxScore(),\n                                                       og.counts[slot],\n                                                       topDocs.scoreDocs,\n                                                       og.doc,\n                                                       groupSortValues);\n    }\n\n    return new TopGroups<Integer>(new TopGroups<Integer>(sort.getSort(),\n                                                         withinGroupSort == null ? null : withinGroupSort.getSort(),\n                                                         0, totalGroupedHitCount, groups),\n                                  totalHitCount);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["85d41890f2bad879e6a04c6dd7d2cf276f973994","ab5548b8f3ccb00ab6a8702dfc85a949d2a05a11","fe663f89b453e38563a3fd52686e7edf7b4c82a7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/join/src/java/org/apache/lucene/search/join/BlockJoinCollector#getTopGroups(BlockJoinQuery,Sort,int,int,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Return the TopGroups for the specified\n   *  BlockJoinQuery.  The groupValue of each GroupDocs will\n   *  be the parent docID for that group.  Note that the\n   *  {@link GroupDocs#totalHits}, which would be the\n   *  total number of child documents matching that parent,\n   *  is not computed (will always be 0).  Returns null if\n   *  no groups matched. */\n  @SuppressWarnings(\"unchecked\")\n  public TopGroups<Integer> getTopGroups(BlockJoinQuery query, Sort withinGroupSort, int offset, int maxDocsPerGroup, int withinGroupOffset, boolean fillSortFields) \n\n    throws IOException {\n\n    final Integer _slot = joinQueryID.get(query);\n    if (_slot == null) {\n      if (totalHitCount == 0) {\n        return null;\n      } else {\n        throw new IllegalArgumentException(\"the Query did not contain the provided BlockJoinQuery\");\n      }\n    }\n\n    // unbox once\n    final int slot = _slot;\n\n    if (offset >= queue.size()) {\n      return null;\n    }\n    int totalGroupedHitCount = 0;\n\n    if (sortedGroups == null) {\n      sortQueue();\n    }\n\n    final FakeScorer fakeScorer = new FakeScorer();\n\n    final GroupDocs<Integer>[] groups = new GroupDocs[sortedGroups.length - offset];\n\n    for(int groupIDX=offset;groupIDX<sortedGroups.length;groupIDX++) {\n      final OneGroup og = sortedGroups[groupIDX];\n\n      // At this point we hold all docs w/ in each group,\n      // unsorted; we now sort them:\n      final TopDocsCollector collector;\n      if (withinGroupSort == null) {\n        // Sort by score\n        if (!trackScores) {\n          throw new IllegalArgumentException(\"cannot sort by relevance within group: trackScores=false\");\n        }\n        collector = TopScoreDocCollector.create(maxDocsPerGroup, true);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, maxDocsPerGroup, fillSortFields, trackScores, trackMaxScore, true);\n      }\n\n      collector.setScorer(fakeScorer);\n      collector.setNextReader(og.readerContext);\n      final int numChildDocs = og.counts[slot];\n      for(int docIDX=0;docIDX<numChildDocs;docIDX++) {\n        final int doc = og.docs[slot][docIDX];\n        fakeScorer.doc = doc;\n        if (trackScores) {\n          fakeScorer.score = og.scores[slot][docIDX];\n        }\n        collector.collect(doc);\n      }\n      totalGroupedHitCount += numChildDocs;\n\n      final Object[] groupSortValues;\n\n      if (fillSortFields) {\n        groupSortValues = new Object[comparators.length];\n        for(int sortFieldIDX=0;sortFieldIDX<comparators.length;sortFieldIDX++) {\n          groupSortValues[sortFieldIDX] = comparators[sortFieldIDX].value(og.slot);\n        }\n      } else {\n        groupSortValues = null;\n      }\n\n      final TopDocs topDocs = collector.topDocs(withinGroupOffset, maxDocsPerGroup);\n\n      groups[groupIDX-offset] = new GroupDocs<Integer>(topDocs.getMaxScore(),\n                                                       og.counts[slot],\n                                                       topDocs.scoreDocs,\n                                                       og.doc,\n                                                       groupSortValues);\n    }\n\n    return new TopGroups<Integer>(new TopGroups<Integer>(sort.getSort(),\n                                                         withinGroupSort == null ? null : withinGroupSort.getSort(),\n                                                         0, totalGroupedHitCount, groups),\n                                  totalHitCount);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/join/src/java/org/apache/lucene/search/join/BlockJoinCollector#getTopGroups(BlockJoinQuery,Sort,int,int,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Return the TopGroups for the specified\n   *  BlockJoinQuery.  The groupValue of each GroupDocs will\n   *  be the parent docID for that group.  Note that the\n   *  {@link GroupDocs#totalHits}, which would be the\n   *  total number of child documents matching that parent,\n   *  is not computed (will always be 0).  Returns null if\n   *  no groups matched. */\n  @SuppressWarnings(\"unchecked\")\n  public TopGroups<Integer> getTopGroups(BlockJoinQuery query, Sort withinGroupSort, int offset, int maxDocsPerGroup, int withinGroupOffset, boolean fillSortFields) \n\n    throws IOException {\n\n    final Integer _slot = joinQueryID.get(query);\n    if (_slot == null) {\n      if (totalHitCount == 0) {\n        return null;\n      } else {\n        throw new IllegalArgumentException(\"the Query did not contain the provided BlockJoinQuery\");\n      }\n    }\n\n    // unbox once\n    final int slot = _slot;\n\n    if (offset >= queue.size()) {\n      return null;\n    }\n    int totalGroupedHitCount = 0;\n\n    if (sortedGroups == null) {\n      sortQueue();\n    }\n\n    final FakeScorer fakeScorer = new FakeScorer();\n\n    final GroupDocs<Integer>[] groups = new GroupDocs[sortedGroups.length - offset];\n\n    for(int groupIDX=offset;groupIDX<sortedGroups.length;groupIDX++) {\n      final OneGroup og = sortedGroups[groupIDX];\n\n      // At this point we hold all docs w/ in each group,\n      // unsorted; we now sort them:\n      final TopDocsCollector collector;\n      if (withinGroupSort == null) {\n        // Sort by score\n        if (!trackScores) {\n          throw new IllegalArgumentException(\"cannot sort by relevance within group: trackScores=false\");\n        }\n        collector = TopScoreDocCollector.create(maxDocsPerGroup, true);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, maxDocsPerGroup, fillSortFields, trackScores, trackMaxScore, true);\n      }\n\n      collector.setScorer(fakeScorer);\n      collector.setNextReader(og.readerContext);\n      final int numChildDocs = og.counts[slot];\n      for(int docIDX=0;docIDX<numChildDocs;docIDX++) {\n        final int doc = og.docs[slot][docIDX];\n        fakeScorer.doc = doc;\n        if (trackScores) {\n          fakeScorer.score = og.scores[slot][docIDX];\n        }\n        collector.collect(doc);\n      }\n      totalGroupedHitCount += numChildDocs;\n\n      final Object[] groupSortValues;\n\n      if (fillSortFields) {\n        groupSortValues = new Object[comparators.length];\n        for(int sortFieldIDX=0;sortFieldIDX<comparators.length;sortFieldIDX++) {\n          groupSortValues[sortFieldIDX] = comparators[sortFieldIDX].value(og.slot);\n        }\n      } else {\n        groupSortValues = null;\n      }\n\n      final TopDocs topDocs = collector.topDocs(withinGroupOffset, maxDocsPerGroup);\n\n      groups[groupIDX-offset] = new GroupDocs<Integer>(topDocs.getMaxScore(),\n                                                       og.counts[slot],\n                                                       topDocs.scoreDocs,\n                                                       og.doc,\n                                                       groupSortValues);\n    }\n\n    return new TopGroups<Integer>(new TopGroups<Integer>(sort.getSort(),\n                                                         withinGroupSort == null ? null : withinGroupSort.getSort(),\n                                                         0, totalGroupedHitCount, groups),\n                                  totalHitCount);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe663f89b453e38563a3fd52686e7edf7b4c82a7","date":1318617285,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/join/src/java/org/apache/lucene/search/join/BlockJoinCollector#getTopGroups(BlockJoinQuery,Sort,int,int,int,boolean).mjava","pathOld":"modules/join/src/java/org/apache/lucene/search/join/BlockJoinCollector#getTopGroups(BlockJoinQuery,Sort,int,int,int,boolean).mjava","sourceNew":"  /** Return the TopGroups for the specified\n   *  BlockJoinQuery.  The groupValue of each GroupDocs will\n   *  be the parent docID for that group.  Note that the\n   *  {@link GroupDocs#totalHits}, which would be the\n   *  total number of child documents matching that parent,\n   *  is not computed (will always be 0).  Returns null if\n   *  no groups matched. */\n  @SuppressWarnings(\"unchecked\")\n  public TopGroups<Integer> getTopGroups(BlockJoinQuery query, Sort withinGroupSort, int offset, int maxDocsPerGroup, int withinGroupOffset, boolean fillSortFields) \n\n    throws IOException {\n\n    final Integer _slot = joinQueryID.get(query);\n    if (_slot == null) {\n      if (totalHitCount == 0) {\n        return null;\n      } else {\n        throw new IllegalArgumentException(\"the Query did not contain the provided BlockJoinQuery\");\n      }\n    }\n\n    // unbox once\n    final int slot = _slot;\n\n    if (sortedGroups == null) {\n      if (offset >= queue.size()) {\n        return null;\n      }\n      sortQueue();\n    } else if (offset > sortedGroups.length) {\n      return null;\n    }\n\n    int totalGroupedHitCount = 0;\n\n    final FakeScorer fakeScorer = new FakeScorer();\n\n    final GroupDocs<Integer>[] groups = new GroupDocs[sortedGroups.length - offset];\n\n    for(int groupIDX=offset;groupIDX<sortedGroups.length;groupIDX++) {\n      final OneGroup og = sortedGroups[groupIDX];\n\n      // At this point we hold all docs w/ in each group,\n      // unsorted; we now sort them:\n      final TopDocsCollector collector;\n      if (withinGroupSort == null) {\n        // Sort by score\n        if (!trackScores) {\n          throw new IllegalArgumentException(\"cannot sort by relevance within group: trackScores=false\");\n        }\n        collector = TopScoreDocCollector.create(maxDocsPerGroup, true);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, maxDocsPerGroup, fillSortFields, trackScores, trackMaxScore, true);\n      }\n\n      collector.setScorer(fakeScorer);\n      collector.setNextReader(og.readerContext);\n      final int numChildDocs = og.counts[slot];\n      for(int docIDX=0;docIDX<numChildDocs;docIDX++) {\n        final int doc = og.docs[slot][docIDX];\n        fakeScorer.doc = doc;\n        if (trackScores) {\n          fakeScorer.score = og.scores[slot][docIDX];\n        }\n        collector.collect(doc);\n      }\n      totalGroupedHitCount += numChildDocs;\n\n      final Object[] groupSortValues;\n\n      if (fillSortFields) {\n        groupSortValues = new Object[comparators.length];\n        for(int sortFieldIDX=0;sortFieldIDX<comparators.length;sortFieldIDX++) {\n          groupSortValues[sortFieldIDX] = comparators[sortFieldIDX].value(og.slot);\n        }\n      } else {\n        groupSortValues = null;\n      }\n\n      final TopDocs topDocs = collector.topDocs(withinGroupOffset, maxDocsPerGroup);\n\n      groups[groupIDX-offset] = new GroupDocs<Integer>(topDocs.getMaxScore(),\n                                                       og.counts[slot],\n                                                       topDocs.scoreDocs,\n                                                       og.doc,\n                                                       groupSortValues);\n    }\n\n    return new TopGroups<Integer>(new TopGroups<Integer>(sort.getSort(),\n                                                         withinGroupSort == null ? null : withinGroupSort.getSort(),\n                                                         0, totalGroupedHitCount, groups),\n                                  totalHitCount);\n  }\n\n","sourceOld":"  /** Return the TopGroups for the specified\n   *  BlockJoinQuery.  The groupValue of each GroupDocs will\n   *  be the parent docID for that group.  Note that the\n   *  {@link GroupDocs#totalHits}, which would be the\n   *  total number of child documents matching that parent,\n   *  is not computed (will always be 0).  Returns null if\n   *  no groups matched. */\n  @SuppressWarnings(\"unchecked\")\n  public TopGroups<Integer> getTopGroups(BlockJoinQuery query, Sort withinGroupSort, int offset, int maxDocsPerGroup, int withinGroupOffset, boolean fillSortFields) \n\n    throws IOException {\n\n    final Integer _slot = joinQueryID.get(query);\n    if (_slot == null) {\n      if (totalHitCount == 0) {\n        return null;\n      } else {\n        throw new IllegalArgumentException(\"the Query did not contain the provided BlockJoinQuery\");\n      }\n    }\n\n    // unbox once\n    final int slot = _slot;\n\n    if (offset >= queue.size()) {\n      return null;\n    }\n    int totalGroupedHitCount = 0;\n\n    if (sortedGroups == null) {\n      sortQueue();\n    }\n\n    final FakeScorer fakeScorer = new FakeScorer();\n\n    final GroupDocs<Integer>[] groups = new GroupDocs[sortedGroups.length - offset];\n\n    for(int groupIDX=offset;groupIDX<sortedGroups.length;groupIDX++) {\n      final OneGroup og = sortedGroups[groupIDX];\n\n      // At this point we hold all docs w/ in each group,\n      // unsorted; we now sort them:\n      final TopDocsCollector collector;\n      if (withinGroupSort == null) {\n        // Sort by score\n        if (!trackScores) {\n          throw new IllegalArgumentException(\"cannot sort by relevance within group: trackScores=false\");\n        }\n        collector = TopScoreDocCollector.create(maxDocsPerGroup, true);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, maxDocsPerGroup, fillSortFields, trackScores, trackMaxScore, true);\n      }\n\n      collector.setScorer(fakeScorer);\n      collector.setNextReader(og.readerContext);\n      final int numChildDocs = og.counts[slot];\n      for(int docIDX=0;docIDX<numChildDocs;docIDX++) {\n        final int doc = og.docs[slot][docIDX];\n        fakeScorer.doc = doc;\n        if (trackScores) {\n          fakeScorer.score = og.scores[slot][docIDX];\n        }\n        collector.collect(doc);\n      }\n      totalGroupedHitCount += numChildDocs;\n\n      final Object[] groupSortValues;\n\n      if (fillSortFields) {\n        groupSortValues = new Object[comparators.length];\n        for(int sortFieldIDX=0;sortFieldIDX<comparators.length;sortFieldIDX++) {\n          groupSortValues[sortFieldIDX] = comparators[sortFieldIDX].value(og.slot);\n        }\n      } else {\n        groupSortValues = null;\n      }\n\n      final TopDocs topDocs = collector.topDocs(withinGroupOffset, maxDocsPerGroup);\n\n      groups[groupIDX-offset] = new GroupDocs<Integer>(topDocs.getMaxScore(),\n                                                       og.counts[slot],\n                                                       topDocs.scoreDocs,\n                                                       og.doc,\n                                                       groupSortValues);\n    }\n\n    return new TopGroups<Integer>(new TopGroups<Integer>(sort.getSort(),\n                                                         withinGroupSort == null ? null : withinGroupSort.getSort(),\n                                                         0, totalGroupedHitCount, groups),\n                                  totalHitCount);\n  }\n\n","bugFix":["97e30c53fd81463c6ccd52402c91a6548cf42acb"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6bd4a7478aca8c3880512b730b28bf3239340635","date":1326554224,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#getTopGroups(ToParentBlockJoinQuery,Sort,int,int,int,boolean).mjava","pathOld":"modules/join/src/java/org/apache/lucene/search/join/BlockJoinCollector#getTopGroups(BlockJoinQuery,Sort,int,int,int,boolean).mjava","sourceNew":"  /** Return the TopGroups for the specified\n   *  BlockJoinQuery.  The groupValue of each GroupDocs will\n   *  be the parent docID for that group.  Note that the\n   *  {@link GroupDocs#totalHits}, which would be the\n   *  total number of child documents matching that parent,\n   *  is not computed (will always be 0).  Returns null if\n   *  no groups matched. */\n  @SuppressWarnings(\"unchecked\")\n  public TopGroups<Integer> getTopGroups(ToParentBlockJoinQuery query, Sort withinGroupSort, int offset, int maxDocsPerGroup, int withinGroupOffset, boolean fillSortFields) \n\n    throws IOException {\n\n    final Integer _slot = joinQueryID.get(query);\n    if (_slot == null) {\n      if (totalHitCount == 0) {\n        return null;\n      } else {\n        throw new IllegalArgumentException(\"the Query did not contain the provided BlockJoinQuery\");\n      }\n    }\n\n    // unbox once\n    final int slot = _slot;\n\n    if (sortedGroups == null) {\n      if (offset >= queue.size()) {\n        return null;\n      }\n      sortQueue();\n    } else if (offset > sortedGroups.length) {\n      return null;\n    }\n\n    int totalGroupedHitCount = 0;\n\n    final FakeScorer fakeScorer = new FakeScorer();\n\n    final GroupDocs<Integer>[] groups = new GroupDocs[sortedGroups.length - offset];\n\n    for(int groupIDX=offset;groupIDX<sortedGroups.length;groupIDX++) {\n      final OneGroup og = sortedGroups[groupIDX];\n\n      // At this point we hold all docs w/ in each group,\n      // unsorted; we now sort them:\n      final TopDocsCollector collector;\n      if (withinGroupSort == null) {\n        // Sort by score\n        if (!trackScores) {\n          throw new IllegalArgumentException(\"cannot sort by relevance within group: trackScores=false\");\n        }\n        collector = TopScoreDocCollector.create(maxDocsPerGroup, true);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, maxDocsPerGroup, fillSortFields, trackScores, trackMaxScore, true);\n      }\n\n      collector.setScorer(fakeScorer);\n      collector.setNextReader(og.readerContext);\n      final int numChildDocs = og.counts[slot];\n      for(int docIDX=0;docIDX<numChildDocs;docIDX++) {\n        final int doc = og.docs[slot][docIDX];\n        fakeScorer.doc = doc;\n        if (trackScores) {\n          fakeScorer.score = og.scores[slot][docIDX];\n        }\n        collector.collect(doc);\n      }\n      totalGroupedHitCount += numChildDocs;\n\n      final Object[] groupSortValues;\n\n      if (fillSortFields) {\n        groupSortValues = new Object[comparators.length];\n        for(int sortFieldIDX=0;sortFieldIDX<comparators.length;sortFieldIDX++) {\n          groupSortValues[sortFieldIDX] = comparators[sortFieldIDX].value(og.slot);\n        }\n      } else {\n        groupSortValues = null;\n      }\n\n      final TopDocs topDocs = collector.topDocs(withinGroupOffset, maxDocsPerGroup);\n\n      groups[groupIDX-offset] = new GroupDocs<Integer>(topDocs.getMaxScore(),\n                                                       og.counts[slot],\n                                                       topDocs.scoreDocs,\n                                                       og.doc,\n                                                       groupSortValues);\n    }\n\n    return new TopGroups<Integer>(new TopGroups<Integer>(sort.getSort(),\n                                                         withinGroupSort == null ? null : withinGroupSort.getSort(),\n                                                         0, totalGroupedHitCount, groups),\n                                  totalHitCount);\n  }\n\n","sourceOld":"  /** Return the TopGroups for the specified\n   *  BlockJoinQuery.  The groupValue of each GroupDocs will\n   *  be the parent docID for that group.  Note that the\n   *  {@link GroupDocs#totalHits}, which would be the\n   *  total number of child documents matching that parent,\n   *  is not computed (will always be 0).  Returns null if\n   *  no groups matched. */\n  @SuppressWarnings(\"unchecked\")\n  public TopGroups<Integer> getTopGroups(BlockJoinQuery query, Sort withinGroupSort, int offset, int maxDocsPerGroup, int withinGroupOffset, boolean fillSortFields) \n\n    throws IOException {\n\n    final Integer _slot = joinQueryID.get(query);\n    if (_slot == null) {\n      if (totalHitCount == 0) {\n        return null;\n      } else {\n        throw new IllegalArgumentException(\"the Query did not contain the provided BlockJoinQuery\");\n      }\n    }\n\n    // unbox once\n    final int slot = _slot;\n\n    if (sortedGroups == null) {\n      if (offset >= queue.size()) {\n        return null;\n      }\n      sortQueue();\n    } else if (offset > sortedGroups.length) {\n      return null;\n    }\n\n    int totalGroupedHitCount = 0;\n\n    final FakeScorer fakeScorer = new FakeScorer();\n\n    final GroupDocs<Integer>[] groups = new GroupDocs[sortedGroups.length - offset];\n\n    for(int groupIDX=offset;groupIDX<sortedGroups.length;groupIDX++) {\n      final OneGroup og = sortedGroups[groupIDX];\n\n      // At this point we hold all docs w/ in each group,\n      // unsorted; we now sort them:\n      final TopDocsCollector collector;\n      if (withinGroupSort == null) {\n        // Sort by score\n        if (!trackScores) {\n          throw new IllegalArgumentException(\"cannot sort by relevance within group: trackScores=false\");\n        }\n        collector = TopScoreDocCollector.create(maxDocsPerGroup, true);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, maxDocsPerGroup, fillSortFields, trackScores, trackMaxScore, true);\n      }\n\n      collector.setScorer(fakeScorer);\n      collector.setNextReader(og.readerContext);\n      final int numChildDocs = og.counts[slot];\n      for(int docIDX=0;docIDX<numChildDocs;docIDX++) {\n        final int doc = og.docs[slot][docIDX];\n        fakeScorer.doc = doc;\n        if (trackScores) {\n          fakeScorer.score = og.scores[slot][docIDX];\n        }\n        collector.collect(doc);\n      }\n      totalGroupedHitCount += numChildDocs;\n\n      final Object[] groupSortValues;\n\n      if (fillSortFields) {\n        groupSortValues = new Object[comparators.length];\n        for(int sortFieldIDX=0;sortFieldIDX<comparators.length;sortFieldIDX++) {\n          groupSortValues[sortFieldIDX] = comparators[sortFieldIDX].value(og.slot);\n        }\n      } else {\n        groupSortValues = null;\n      }\n\n      final TopDocs topDocs = collector.topDocs(withinGroupOffset, maxDocsPerGroup);\n\n      groups[groupIDX-offset] = new GroupDocs<Integer>(topDocs.getMaxScore(),\n                                                       og.counts[slot],\n                                                       topDocs.scoreDocs,\n                                                       og.doc,\n                                                       groupSortValues);\n    }\n\n    return new TopGroups<Integer>(new TopGroups<Integer>(sort.getSort(),\n                                                         withinGroupSort == null ? null : withinGroupSort.getSort(),\n                                                         0, totalGroupedHitCount, groups),\n                                  totalHitCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6bd4a7478aca8c3880512b730b28bf3239340635":["fe663f89b453e38563a3fd52686e7edf7b4c82a7"],"97e30c53fd81463c6ccd52402c91a6548cf42acb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe663f89b453e38563a3fd52686e7edf7b4c82a7":["97e30c53fd81463c6ccd52402c91a6548cf42acb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","97e30c53fd81463c6ccd52402c91a6548cf42acb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","97e30c53fd81463c6ccd52402c91a6548cf42acb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6bd4a7478aca8c3880512b730b28bf3239340635"]},"commit2Childs":{"6bd4a7478aca8c3880512b730b28bf3239340635":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"97e30c53fd81463c6ccd52402c91a6548cf42acb":["fe663f89b453e38563a3fd52686e7edf7b4c82a7","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"fe663f89b453e38563a3fd52686e7edf7b4c82a7":["6bd4a7478aca8c3880512b730b28bf3239340635"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["97e30c53fd81463c6ccd52402c91a6548cf42acb","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}