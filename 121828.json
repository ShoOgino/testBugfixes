{"path":"lucene/src/java/org/apache/lucene/search/spans/SpanPositionCheckQuery#acceptSkipTo(Spans).mjava","commits":[{"id":"498e168d849b4dbc097ac7b31f6db170d6f55725","date":1286807836,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanPositionCheckQuery#acceptSkipTo(Spans).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Implementing classes are required to return whether the position at the target is someplace that\n   * can be skipped to.  For instance, the {@link org.apache.lucene.search.spans.SpanFirstQuery} returns\n   * false if the target position is beyond the maximum position allowed or if {@link Spans#next()} is true.\n   * <p/>\n   * Note, this method is only called if the underlying match {@link org.apache.lucene.search.spans.SpanQuery} can\n   * skip to the target.\n   * <p/>\n   * It is safe to assume that the passed in {@link org.apache.lucene.search.spans.Spans} object for the underlying {@link org.apache.lucene.search.spans.SpanQuery} is\n   * positioned at the target.\n   * <p/>\n   * The default implementation is to return true if either {@link #acceptPosition(Spans)} or {@link org.apache.lucene.search.spans.Spans#next()} is true for the\n   * passed in instance of Spans.\n   *<p/>\n   * @param spans The {@link org.apache.lucene.search.spans.Spans} to check\n   * @return true if the instance can skip to this position\n   *\n   * @see Spans#skipTo(int)\n   * @throws java.io.IOException if there is a low-level IO error\n   */\n  protected boolean acceptSkipTo(Spans spans) throws IOException{\n    return acceptPosition(spans) || spans.next();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c925a1f2801303835dcd229e7f21bcd280746332","date":1289846486,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanPositionCheckQuery#acceptSkipTo(Spans).mjava","sourceNew":null,"sourceOld":"  /**\n   * Implementing classes are required to return whether the position at the target is someplace that\n   * can be skipped to.  For instance, the {@link org.apache.lucene.search.spans.SpanFirstQuery} returns\n   * false if the target position is beyond the maximum position allowed or if {@link Spans#next()} is true.\n   * <p/>\n   * Note, this method is only called if the underlying match {@link org.apache.lucene.search.spans.SpanQuery} can\n   * skip to the target.\n   * <p/>\n   * It is safe to assume that the passed in {@link org.apache.lucene.search.spans.Spans} object for the underlying {@link org.apache.lucene.search.spans.SpanQuery} is\n   * positioned at the target.\n   * <p/>\n   * The default implementation is to return true if either {@link #acceptPosition(Spans)} or {@link org.apache.lucene.search.spans.Spans#next()} is true for the\n   * passed in instance of Spans.\n   *<p/>\n   * @param spans The {@link org.apache.lucene.search.spans.Spans} to check\n   * @return true if the instance can skip to this position\n   *\n   * @see Spans#skipTo(int)\n   * @throws java.io.IOException if there is a low-level IO error\n   */\n  protected boolean acceptSkipTo(Spans spans) throws IOException{\n    return acceptPosition(spans) || spans.next();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanPositionCheckQuery#acceptSkipTo(Spans).mjava","sourceNew":null,"sourceOld":"  /**\n   * Implementing classes are required to return whether the position at the target is someplace that\n   * can be skipped to.  For instance, the {@link org.apache.lucene.search.spans.SpanFirstQuery} returns\n   * false if the target position is beyond the maximum position allowed or if {@link Spans#next()} is true.\n   * <p/>\n   * Note, this method is only called if the underlying match {@link org.apache.lucene.search.spans.SpanQuery} can\n   * skip to the target.\n   * <p/>\n   * It is safe to assume that the passed in {@link org.apache.lucene.search.spans.Spans} object for the underlying {@link org.apache.lucene.search.spans.SpanQuery} is\n   * positioned at the target.\n   * <p/>\n   * The default implementation is to return true if either {@link #acceptPosition(Spans)} or {@link org.apache.lucene.search.spans.Spans#next()} is true for the\n   * passed in instance of Spans.\n   *<p/>\n   * @param spans The {@link org.apache.lucene.search.spans.Spans} to check\n   * @return true if the instance can skip to this position\n   *\n   * @see Spans#skipTo(int)\n   * @throws java.io.IOException if there is a low-level IO error\n   */\n  protected boolean acceptSkipTo(Spans spans) throws IOException{\n    return acceptPosition(spans) || spans.next();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c925a1f2801303835dcd229e7f21bcd280746332":["498e168d849b4dbc097ac7b31f6db170d6f55725"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["498e168d849b4dbc097ac7b31f6db170d6f55725","c925a1f2801303835dcd229e7f21bcd280746332"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"498e168d849b4dbc097ac7b31f6db170d6f55725":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c925a1f2801303835dcd229e7f21bcd280746332"]},"commit2Childs":{"c925a1f2801303835dcd229e7f21bcd280746332":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["498e168d849b4dbc097ac7b31f6db170d6f55725"],"498e168d849b4dbc097ac7b31f6db170d6f55725":["c925a1f2801303835dcd229e7f21bcd280746332","9ab1f5591dc05f1f2b5407d809c9699f75554a32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}