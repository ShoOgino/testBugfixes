{"path":"lucene/contrib/misc/src/java/org/apache/lucene/queryParser/precedence/TokenMgrError#LexicalError(boolean,int,int,int,String,char).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/queryParser/precedence/TokenMgrError#LexicalError(boolean,int,int,int,String,char).mjava","pathOld":"contrib/misc/src/java/org/apache/lucene/queryParser/precedence/TokenMgrError#LexicalError(boolean,int,int,int,String,char).mjava","sourceNew":"   /**\n    * Returns a detailed message for the Error when it is thrown by the\n    * token manager to indicate a lexical error.\n    * Parameters :\n    *    EOFSeen     : indicates if EOF caused the lexical error\n    *    curLexState : lexical state in which this error occurred\n    *    errorLine   : line number when the error occurred\n    *    errorColumn : column number when the error occurred\n    *    errorAfter  : prefix that was seen before this error occurred\n    *    curchar     : the offending character\n    * Note: You can customize the lexical error message by modifying this method.\n    */\n   protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n      return(\"Lexical error at line \" +\n           errorLine + \", column \" +\n           errorColumn + \".  Encountered: \" +\n           (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int)curChar + \"), \") +\n           \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n   }\n\n","sourceOld":"   /**\n    * Returns a detailed message for the Error when it is thrown by the\n    * token manager to indicate a lexical error.\n    * Parameters :\n    *    EOFSeen     : indicates if EOF caused the lexical error\n    *    curLexState : lexical state in which this error occurred\n    *    errorLine   : line number when the error occurred\n    *    errorColumn : column number when the error occurred\n    *    errorAfter  : prefix that was seen before this error occurred\n    *    curchar     : the offending character\n    * Note: You can customize the lexical error message by modifying this method.\n    */\n   protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n      return(\"Lexical error at line \" +\n           errorLine + \", column \" +\n           errorColumn + \".  Encountered: \" +\n           (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int)curChar + \"), \") +\n           \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36f91bf9cfc9d0c3155edab43359e7670ea8a5af","date":1269580873,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/TokenMgrError#LexicalError(boolean,int,int,int,String,char).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/queryParser/precedence/TokenMgrError#LexicalError(boolean,int,int,int,String,char).mjava","sourceNew":"   /**\n    * Returns a detailed message for the Error when it is thrown by the\n    * token manager to indicate a lexical error.\n    * Parameters :\n    *    EOFSeen     : indicates if EOF caused the lexical error\n    *    curLexState : lexical state in which this error occurred\n    *    errorLine   : line number when the error occurred\n    *    errorColumn : column number when the error occurred\n    *    errorAfter  : prefix that was seen before this error occurred\n    *    curchar     : the offending character\n    * Note: You can customize the lexical error message by modifying this method.\n    */\n   protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n      return(\"Lexical error at line \" +\n           errorLine + \", column \" +\n           errorColumn + \".  Encountered: \" +\n           (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int)curChar + \"), \") +\n           \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n   }\n\n","sourceOld":"   /**\n    * Returns a detailed message for the Error when it is thrown by the\n    * token manager to indicate a lexical error.\n    * Parameters :\n    *    EOFSeen     : indicates if EOF caused the lexical error\n    *    curLexState : lexical state in which this error occurred\n    *    errorLine   : line number when the error occurred\n    *    errorColumn : column number when the error occurred\n    *    errorAfter  : prefix that was seen before this error occurred\n    *    curchar     : the offending character\n    * Note: You can customize the lexical error message by modifying this method.\n    */\n   protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n      return(\"Lexical error at line \" +\n           errorLine + \", column \" +\n           errorColumn + \".  Encountered: \" +\n           (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int)curChar + \"), \") +\n           \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}