{"path":"lucene/test-framework/src/java/org/apache/lucene/index/RandomDocumentsWriterPerThreadPool#getAndLock(Thread,DocumentsWriter).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomDocumentsWriterPerThreadPool#getAndLock(Thread,DocumentsWriter).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/index/RandomDocumentsWriterPerThreadPool#getAndLock(Thread,DocumentsWriter).mjava","sourceNew":"  @Override\n  public ThreadState getAndLock(Thread requestingThread,\n      DocumentsWriter documentsWriter) {\n    ThreadState threadState = null;\n    if (getActiveThreadState() == 0) {\n      synchronized (this) {\n        if (getActiveThreadState() == 0) {\n          threadState = states[0] = newThreadState();\n          return threadState;\n        }\n      }\n    }\n    assert getActiveThreadState() > 0;\n    for (int i = 0; i < maxRetry; i++) {\n      int ord = random.nextInt(getActiveThreadState());\n      synchronized (this) {\n        threadState = states[ord];\n        assert threadState != null;\n      }\n\n      if (threadState.tryLock()) {\n        return threadState;\n      }\n      if (random.nextInt(20) == 0) {\n        break;\n      }\n    }\n    /*\n     * only try to create a new threadstate if we can not lock the randomly\n     * selected state. this is important since some tests rely on a single\n     * threadstate in the single threaded case. Eventually it would be nice if\n     * we would not have this limitation but for now we just make sure we only\n     * allocate one threadstate if indexing is single threaded\n     */\n\n    synchronized (this) {\n      ThreadState newThreadState = newThreadState();\n      if (newThreadState != null) { // did we get a new state?\n        threadState = states[getActiveThreadState() - 1] = newThreadState;\n        assert threadState.isHeldByCurrentThread();\n        return threadState;\n      }\n      // if no new state is available lock the random one\n    }\n    assert threadState != null;\n    threadState.lock();\n    return threadState;\n  }\n\n","sourceOld":"  @Override\n  public ThreadState getAndLock(Thread requestingThread,\n      DocumentsWriter documentsWriter) {\n    ThreadState threadState = null;\n    if (getActiveThreadState() == 0) {\n      synchronized (this) {\n        if (getActiveThreadState() == 0) {\n          threadState = states[0] = newThreadState();\n          return threadState;\n        }\n      }\n    }\n    assert getActiveThreadState() > 0;\n    for (int i = 0; i < maxRetry; i++) {\n      int ord = random.nextInt(getActiveThreadState());\n      synchronized (this) {\n        threadState = states[ord];\n        assert threadState != null;\n      }\n\n      if (threadState.tryLock()) {\n        return threadState;\n      }\n      if (random.nextInt(20) == 0) {\n        break;\n      }\n    }\n    /*\n     * only try to create a new threadstate if we can not lock the randomly\n     * selected state. this is important since some tests rely on a single\n     * threadstate in the single threaded case. Eventually it would be nice if\n     * we would not have this limitation but for now we just make sure we only\n     * allocate one threadstate if indexing is single threaded\n     */\n\n    synchronized (this) {\n      ThreadState newThreadState = newThreadState();\n      if (newThreadState != null) { // did we get a new state?\n        threadState = states[getActiveThreadState() - 1] = newThreadState;\n        assert threadState.isHeldByCurrentThread();\n        return threadState;\n      }\n      // if no new state is available lock the random one\n    }\n    assert threadState != null;\n    threadState.lock();\n    return threadState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94b3b94bf2ad869ca54992ccbf5ca4f6c525c46f","date":1335146295,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomDocumentsWriterPerThreadPool#getAndLock(Thread,DocumentsWriter).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/RandomDocumentsWriterPerThreadPool#getAndLock(Thread,DocumentsWriter).mjava","sourceNew":"  @Override\n  ThreadState getAndLock(Thread requestingThread,\n      DocumentsWriter documentsWriter) {\n    ThreadState threadState = null;\n    if (getActiveThreadState() == 0) {\n      synchronized (this) {\n        if (getActiveThreadState() == 0) {\n          threadState = states[0] = newThreadState();\n          return threadState;\n        }\n      }\n    }\n    assert getActiveThreadState() > 0;\n    for (int i = 0; i < maxRetry; i++) {\n      int ord = random.nextInt(getActiveThreadState());\n      synchronized (this) {\n        threadState = states[ord];\n        assert threadState != null;\n      }\n\n      if (threadState.tryLock()) {\n        return threadState;\n      }\n      if (random.nextInt(20) == 0) {\n        break;\n      }\n    }\n    /*\n     * only try to create a new threadstate if we can not lock the randomly\n     * selected state. this is important since some tests rely on a single\n     * threadstate in the single threaded case. Eventually it would be nice if\n     * we would not have this limitation but for now we just make sure we only\n     * allocate one threadstate if indexing is single threaded\n     */\n\n    synchronized (this) {\n      ThreadState newThreadState = newThreadState();\n      if (newThreadState != null) { // did we get a new state?\n        threadState = states[getActiveThreadState() - 1] = newThreadState;\n        assert threadState.isHeldByCurrentThread();\n        return threadState;\n      }\n      // if no new state is available lock the random one\n    }\n    assert threadState != null;\n    threadState.lock();\n    return threadState;\n  }\n\n","sourceOld":"  @Override\n  public ThreadState getAndLock(Thread requestingThread,\n      DocumentsWriter documentsWriter) {\n    ThreadState threadState = null;\n    if (getActiveThreadState() == 0) {\n      synchronized (this) {\n        if (getActiveThreadState() == 0) {\n          threadState = states[0] = newThreadState();\n          return threadState;\n        }\n      }\n    }\n    assert getActiveThreadState() > 0;\n    for (int i = 0; i < maxRetry; i++) {\n      int ord = random.nextInt(getActiveThreadState());\n      synchronized (this) {\n        threadState = states[ord];\n        assert threadState != null;\n      }\n\n      if (threadState.tryLock()) {\n        return threadState;\n      }\n      if (random.nextInt(20) == 0) {\n        break;\n      }\n    }\n    /*\n     * only try to create a new threadstate if we can not lock the randomly\n     * selected state. this is important since some tests rely on a single\n     * threadstate in the single threaded case. Eventually it would be nice if\n     * we would not have this limitation but for now we just make sure we only\n     * allocate one threadstate if indexing is single threaded\n     */\n\n    synchronized (this) {\n      ThreadState newThreadState = newThreadState();\n      if (newThreadState != null) { // did we get a new state?\n        threadState = states[getActiveThreadState() - 1] = newThreadState;\n        assert threadState.isHeldByCurrentThread();\n        return threadState;\n      }\n      // if no new state is available lock the random one\n    }\n    assert threadState != null;\n    threadState.lock();\n    return threadState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"839ca1793cd9a8eb5bd7c7c62918192d47972f73","date":1399544004,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/RandomDocumentsWriterPerThreadPool#getAndLock(Thread,DocumentsWriter).mjava","sourceNew":null,"sourceOld":"  @Override\n  ThreadState getAndLock(Thread requestingThread,\n      DocumentsWriter documentsWriter) {\n    ThreadState threadState = null;\n    if (getActiveThreadState() == 0) {\n      synchronized (this) {\n        if (getActiveThreadState() == 0) {\n          threadState = states[0] = newThreadState();\n          return threadState;\n        }\n      }\n    }\n    assert getActiveThreadState() > 0;\n    for (int i = 0; i < maxRetry; i++) {\n      int ord = random.nextInt(getActiveThreadState());\n      synchronized (this) {\n        threadState = states[ord];\n        assert threadState != null;\n      }\n\n      if (threadState.tryLock()) {\n        return threadState;\n      }\n      if (random.nextInt(20) == 0) {\n        break;\n      }\n    }\n    /*\n     * only try to create a new threadstate if we can not lock the randomly\n     * selected state. this is important since some tests rely on a single\n     * threadstate in the single threaded case. Eventually it would be nice if\n     * we would not have this limitation but for now we just make sure we only\n     * allocate one threadstate if indexing is single threaded\n     */\n\n    synchronized (this) {\n      ThreadState newThreadState = newThreadState();\n      if (newThreadState != null) { // did we get a new state?\n        threadState = states[getActiveThreadState() - 1] = newThreadState;\n        assert threadState.isHeldByCurrentThread();\n        return threadState;\n      }\n      // if no new state is available lock the random one\n    }\n    assert threadState != null;\n    threadState.lock();\n    return threadState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"839ca1793cd9a8eb5bd7c7c62918192d47972f73":["94b3b94bf2ad869ca54992ccbf5ca4f6c525c46f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"94b3b94bf2ad869ca54992ccbf5ca4f6c525c46f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["839ca1793cd9a8eb5bd7c7c62918192d47972f73"]},"commit2Childs":{"839ca1793cd9a8eb5bd7c7c62918192d47972f73":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["94b3b94bf2ad869ca54992ccbf5ca4f6c525c46f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"94b3b94bf2ad869ca54992ccbf5ca4f6c525c46f":["839ca1793cd9a8eb5bd7c7c62918192d47972f73"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}