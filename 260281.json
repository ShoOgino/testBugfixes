{"path":"lucene/backwards/src/java/org/apache/lucene/search/spans/SpanNotQuery#getSpans(IndexReader).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/spans/SpanNotQuery#getSpans(IndexReader).mjava","pathOld":"backwards/src/java/org/apache/lucene/search/spans/SpanNotQuery#getSpans(IndexReader).mjava","sourceNew":"  @Override\n  public Spans getSpans(final IndexReader reader) throws IOException {\n    return new Spans() {\n        private Spans includeSpans = include.getSpans(reader);\n        private boolean moreInclude = true;\n\n        private Spans excludeSpans = exclude.getSpans(reader);\n        private boolean moreExclude = excludeSpans.next();\n\n        @Override\n        public boolean next() throws IOException {\n          if (moreInclude)                        // move to next include\n            moreInclude = includeSpans.next();\n\n          while (moreInclude && moreExclude) {\n\n            if (includeSpans.doc() > excludeSpans.doc()) // skip exclude\n              moreExclude = excludeSpans.skipTo(includeSpans.doc());\n\n            while (moreExclude                    // while exclude is before\n                   && includeSpans.doc() == excludeSpans.doc()\n                   && excludeSpans.end() <= includeSpans.start()) {\n              moreExclude = excludeSpans.next();  // increment exclude\n            }\n\n            if (!moreExclude                      // if no intersection\n                || includeSpans.doc() != excludeSpans.doc()\n                || includeSpans.end() <= excludeSpans.start())\n              break;                              // we found a match\n\n            moreInclude = includeSpans.next();    // intersected: keep scanning\n          }\n          return moreInclude;\n        }\n\n        @Override\n        public boolean skipTo(int target) throws IOException {\n          if (moreInclude)                        // skip include\n            moreInclude = includeSpans.skipTo(target);\n\n          if (!moreInclude)\n            return false;\n\n          if (moreExclude                         // skip exclude\n              && includeSpans.doc() > excludeSpans.doc())\n            moreExclude = excludeSpans.skipTo(includeSpans.doc());\n\n          while (moreExclude                      // while exclude is before\n                 && includeSpans.doc() == excludeSpans.doc()\n                 && excludeSpans.end() <= includeSpans.start()) {\n            moreExclude = excludeSpans.next();    // increment exclude\n          }\n\n          if (!moreExclude                      // if no intersection\n                || includeSpans.doc() != excludeSpans.doc()\n                || includeSpans.end() <= excludeSpans.start())\n            return true;                          // we found a match\n\n          return next();                          // scan to next match\n        }\n\n        @Override\n        public int doc() { return includeSpans.doc(); }\n        @Override\n        public int start() { return includeSpans.start(); }\n        @Override\n        public int end() { return includeSpans.end(); }\n\n      // TODO: Remove warning after API has been finalized\n      @Override\n      public Collection<byte[]> getPayload() throws IOException {\n        ArrayList<byte[]> result = null;\n        if (includeSpans.isPayloadAvailable()) {\n          result = new ArrayList<byte[]>(includeSpans.getPayload());\n        }\n        return result;\n      }\n\n      // TODO: Remove warning after API has been finalized\n      @Override\n      public boolean isPayloadAvailable() {\n        return includeSpans.isPayloadAvailable();\n      }\n\n      @Override\n      public String toString() {\n          return \"spans(\" + SpanNotQuery.this.toString() + \")\";\n        }\n\n      };\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final IndexReader reader) throws IOException {\n    return new Spans() {\n        private Spans includeSpans = include.getSpans(reader);\n        private boolean moreInclude = true;\n\n        private Spans excludeSpans = exclude.getSpans(reader);\n        private boolean moreExclude = excludeSpans.next();\n\n        @Override\n        public boolean next() throws IOException {\n          if (moreInclude)                        // move to next include\n            moreInclude = includeSpans.next();\n\n          while (moreInclude && moreExclude) {\n\n            if (includeSpans.doc() > excludeSpans.doc()) // skip exclude\n              moreExclude = excludeSpans.skipTo(includeSpans.doc());\n\n            while (moreExclude                    // while exclude is before\n                   && includeSpans.doc() == excludeSpans.doc()\n                   && excludeSpans.end() <= includeSpans.start()) {\n              moreExclude = excludeSpans.next();  // increment exclude\n            }\n\n            if (!moreExclude                      // if no intersection\n                || includeSpans.doc() != excludeSpans.doc()\n                || includeSpans.end() <= excludeSpans.start())\n              break;                              // we found a match\n\n            moreInclude = includeSpans.next();    // intersected: keep scanning\n          }\n          return moreInclude;\n        }\n\n        @Override\n        public boolean skipTo(int target) throws IOException {\n          if (moreInclude)                        // skip include\n            moreInclude = includeSpans.skipTo(target);\n\n          if (!moreInclude)\n            return false;\n\n          if (moreExclude                         // skip exclude\n              && includeSpans.doc() > excludeSpans.doc())\n            moreExclude = excludeSpans.skipTo(includeSpans.doc());\n\n          while (moreExclude                      // while exclude is before\n                 && includeSpans.doc() == excludeSpans.doc()\n                 && excludeSpans.end() <= includeSpans.start()) {\n            moreExclude = excludeSpans.next();    // increment exclude\n          }\n\n          if (!moreExclude                      // if no intersection\n                || includeSpans.doc() != excludeSpans.doc()\n                || includeSpans.end() <= excludeSpans.start())\n            return true;                          // we found a match\n\n          return next();                          // scan to next match\n        }\n\n        @Override\n        public int doc() { return includeSpans.doc(); }\n        @Override\n        public int start() { return includeSpans.start(); }\n        @Override\n        public int end() { return includeSpans.end(); }\n\n      // TODO: Remove warning after API has been finalized\n      @Override\n      public Collection<byte[]> getPayload() throws IOException {\n        ArrayList<byte[]> result = null;\n        if (includeSpans.isPayloadAvailable()) {\n          result = new ArrayList<byte[]>(includeSpans.getPayload());\n        }\n        return result;\n      }\n\n      // TODO: Remove warning after API has been finalized\n      @Override\n      public boolean isPayloadAvailable() {\n        return includeSpans.isPayloadAvailable();\n      }\n\n      @Override\n      public String toString() {\n          return \"spans(\" + SpanNotQuery.this.toString() + \")\";\n        }\n\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/search/spans/SpanNotQuery#getSpans(IndexReader).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Spans getSpans(final IndexReader reader) throws IOException {\n    return new Spans() {\n        private Spans includeSpans = include.getSpans(reader);\n        private boolean moreInclude = true;\n\n        private Spans excludeSpans = exclude.getSpans(reader);\n        private boolean moreExclude = excludeSpans.next();\n\n        @Override\n        public boolean next() throws IOException {\n          if (moreInclude)                        // move to next include\n            moreInclude = includeSpans.next();\n\n          while (moreInclude && moreExclude) {\n\n            if (includeSpans.doc() > excludeSpans.doc()) // skip exclude\n              moreExclude = excludeSpans.skipTo(includeSpans.doc());\n\n            while (moreExclude                    // while exclude is before\n                   && includeSpans.doc() == excludeSpans.doc()\n                   && excludeSpans.end() <= includeSpans.start()) {\n              moreExclude = excludeSpans.next();  // increment exclude\n            }\n\n            if (!moreExclude                      // if no intersection\n                || includeSpans.doc() != excludeSpans.doc()\n                || includeSpans.end() <= excludeSpans.start())\n              break;                              // we found a match\n\n            moreInclude = includeSpans.next();    // intersected: keep scanning\n          }\n          return moreInclude;\n        }\n\n        @Override\n        public boolean skipTo(int target) throws IOException {\n          if (moreInclude)                        // skip include\n            moreInclude = includeSpans.skipTo(target);\n\n          if (!moreInclude)\n            return false;\n\n          if (moreExclude                         // skip exclude\n              && includeSpans.doc() > excludeSpans.doc())\n            moreExclude = excludeSpans.skipTo(includeSpans.doc());\n\n          while (moreExclude                      // while exclude is before\n                 && includeSpans.doc() == excludeSpans.doc()\n                 && excludeSpans.end() <= includeSpans.start()) {\n            moreExclude = excludeSpans.next();    // increment exclude\n          }\n\n          if (!moreExclude                      // if no intersection\n                || includeSpans.doc() != excludeSpans.doc()\n                || includeSpans.end() <= excludeSpans.start())\n            return true;                          // we found a match\n\n          return next();                          // scan to next match\n        }\n\n        @Override\n        public int doc() { return includeSpans.doc(); }\n        @Override\n        public int start() { return includeSpans.start(); }\n        @Override\n        public int end() { return includeSpans.end(); }\n\n      // TODO: Remove warning after API has been finalized\n      @Override\n      public Collection<byte[]> getPayload() throws IOException {\n        ArrayList<byte[]> result = null;\n        if (includeSpans.isPayloadAvailable()) {\n          result = new ArrayList<byte[]>(includeSpans.getPayload());\n        }\n        return result;\n      }\n\n      // TODO: Remove warning after API has been finalized\n      @Override\n      public boolean isPayloadAvailable() {\n        return includeSpans.isPayloadAvailable();\n      }\n\n      @Override\n      public String toString() {\n          return \"spans(\" + SpanNotQuery.this.toString() + \")\";\n        }\n\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}