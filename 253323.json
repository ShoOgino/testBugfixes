{"path":"src/java/org/apache/lucene/index/MultiTermDocs[MultiReader]#read(int[],int[]).mjava","commits":[{"id":"9ad07cf326135fbb108f766a0798c8ee00b17dcb","date":1077215339,"type":1,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiTermDocs[MultiReader]#read(int[],int[]).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentsTermDocs[SegmentsReader]#read(int[],int[]).mjava","sourceNew":"  /** Optimized implementation. */\n  public int read(final int[] docs, final int[] freqs)\n      throws IOException {\n    while (true) {\n      while (current == null) {\n\tif (pointer < readers.length) {\t\t  // try next segment\n\t  base = starts[pointer];\n\t  current = termDocs(pointer++);\n\t} else {\n\t  return 0;\n\t}\n      }\n      int end = current.read(docs, freqs);\n      if (end == 0) {\t\t\t\t  // none left in segment\n\tcurrent = null;\n      } else {\t\t\t\t\t  // got some\n\tfinal int b = base;\t\t\t  // adjust doc numbers\n\tfor (int i = 0; i < end; i++)\n\t  docs[i] += b;\n\treturn end;\n      }\n    }\n  }\n\n","sourceOld":"  /** Optimized implementation. */\n  public final int read(final int[] docs, final int[] freqs)\n      throws IOException {\n    while (true) {\n      while (current == null) {\n\tif (pointer < readers.length) {\t\t  // try next segment\n\t  base = starts[pointer];\n\t  current = termDocs(pointer++);\n\t} else {\n\t  return 0;\n\t}\n      }\n      int end = current.read(docs, freqs);\n      if (end == 0) {\t\t\t\t  // none left in segment\n\tcurrent = null;\n      } else {\t\t\t\t\t  // got some\n\tfinal int b = base;\t\t\t  // adjust doc numbers\n\tfor (int i = 0; i < end; i++)\n\t  docs[i] += b;\n\treturn end;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddbe196f6406e5d96f401c346389b069dc7fd0e1","date":1084538986,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiTermDocs[MultiReader]#read(int[],int[]).mjava","pathOld":"src/java/org/apache/lucene/index/MultiTermDocs[MultiReader]#read(int[],int[]).mjava","sourceNew":"  /** Optimized implementation. */\n  public int read(final int[] docs, final int[] freqs) throws IOException {\n    while (true) {\n      while (current == null) {\n        if (pointer < readers.length) {      // try next segment\n          base = starts[pointer];\n          current = termDocs(pointer++);\n        } else {\n          return 0;\n        }\n      }\n      int end = current.read(docs, freqs);\n      if (end == 0) {          // none left in segment\n        current = null;\n      } else {            // got some\n        final int b = base;        // adjust doc numbers\n        for (int i = 0; i < end; i++)\n         docs[i] += b;\n        return end;\n      }\n    }\n  }\n\n","sourceOld":"  /** Optimized implementation. */\n  public int read(final int[] docs, final int[] freqs)\n      throws IOException {\n    while (true) {\n      while (current == null) {\n\tif (pointer < readers.length) {\t\t  // try next segment\n\t  base = starts[pointer];\n\t  current = termDocs(pointer++);\n\t} else {\n\t  return 0;\n\t}\n      }\n      int end = current.read(docs, freqs);\n      if (end == 0) {\t\t\t\t  // none left in segment\n\tcurrent = null;\n      } else {\t\t\t\t\t  // got some\n\tfinal int b = base;\t\t\t  // adjust doc numbers\n\tfor (int i = 0; i < end; i++)\n\t  docs[i] += b;\n\treturn end;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f2552b9f13037c62acd400d263d1e9262d6e4e","date":1185490328,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/MultiTermDocs[MultiReader]#read(int[],int[]).mjava","sourceNew":null,"sourceOld":"  /** Optimized implementation. */\n  public int read(final int[] docs, final int[] freqs) throws IOException {\n    while (true) {\n      while (current == null) {\n        if (pointer < readers.length) {      // try next segment\n          base = starts[pointer];\n          current = termDocs(pointer++);\n        } else {\n          return 0;\n        }\n      }\n      int end = current.read(docs, freqs);\n      if (end == 0) {          // none left in segment\n        current = null;\n      } else {            // got some\n        final int b = base;        // adjust doc numbers\n        for (int i = 0; i < end; i++)\n         docs[i] += b;\n        return end;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ddbe196f6406e5d96f401c346389b069dc7fd0e1":["9ad07cf326135fbb108f766a0798c8ee00b17dcb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f2552b9f13037c62acd400d263d1e9262d6e4e":["ddbe196f6406e5d96f401c346389b069dc7fd0e1"],"9ad07cf326135fbb108f766a0798c8ee00b17dcb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f7f2552b9f13037c62acd400d263d1e9262d6e4e"]},"commit2Childs":{"ddbe196f6406e5d96f401c346389b069dc7fd0e1":["f7f2552b9f13037c62acd400d263d1e9262d6e4e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ad07cf326135fbb108f766a0798c8ee00b17dcb"],"9ad07cf326135fbb108f766a0798c8ee00b17dcb":["ddbe196f6406e5d96f401c346389b069dc7fd0e1"],"f7f2552b9f13037c62acd400d263d1e9262d6e4e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}