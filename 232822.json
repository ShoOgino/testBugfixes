{"path":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosReader#read(Directory,String,IOContext).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40FieldInfosReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", Lucene40FieldInfosWriter.FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n\n    boolean hasVectors = false;\n    boolean hasFreq = false;\n    boolean hasProx = false;\n    \n    try {\n      final int format = input.readVInt();\n\n      if (format > FORMAT_MINIMUM) {\n        throw new IndexFormatTooOldException(input, format, FORMAT_MINIMUM, Lucene40FieldInfosWriter.FORMAT_CURRENT);\n      }\n      if (format < Lucene40FieldInfosWriter.FORMAT_CURRENT) {\n        throw new IndexFormatTooNewException(input, format, FORMAT_MINIMUM, Lucene40FieldInfosWriter.FORMAT_CURRENT);\n      }\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = format <= Lucene40FieldInfosWriter.FORMAT_FLEX? input.readInt():i;\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & Lucene40FieldInfosWriter.IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & Lucene40FieldInfosWriter.STORE_TERMVECTOR) != 0;\n        boolean storePositionsWithTermVector = (bits & Lucene40FieldInfosWriter.STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n        boolean storeOffsetWithTermVector = (bits & Lucene40FieldInfosWriter.STORE_OFFSET_WITH_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & Lucene40FieldInfosWriter.OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & Lucene40FieldInfosWriter.STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if ((bits & Lucene40FieldInfosWriter.OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & Lucene40FieldInfosWriter.OMIT_POSITIONS) != 0) {\n          if (format <= Lucene40FieldInfosWriter.FORMAT_OMIT_POSITIONS) {\n            indexOptions = IndexOptions.DOCS_AND_FREQS;\n          } else {\n            throw new CorruptIndexException(\"Corrupt fieldinfos, OMIT_POSITIONS set but format=\" + format + \" (resource: \" + input + \")\");\n          }\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // LUCENE-3027: past indices were able to write\n        // storePayloads=true when omitTFAP is also true,\n        // which is invalid.  We correct that, here:\n        if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          storePayloads = false;\n        }\n        hasVectors |= storeTermVector;\n        hasProx |= isIndexed && indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n        DocValues.Type docValuesType = null;\n        if (format <= Lucene40FieldInfosWriter.FORMAT_FLEX) {\n          final byte b = input.readByte();\n          switch(b) {\n            case 0:\n              docValuesType = null;\n              break;\n            case 1:\n              docValuesType = DocValues.Type.VAR_INTS;\n              break;\n            case 2:\n              docValuesType = DocValues.Type.FLOAT_32;\n              break;\n            case 3:\n              docValuesType = DocValues.Type.FLOAT_64;\n              break;\n            case 4:\n              docValuesType = DocValues.Type.BYTES_FIXED_STRAIGHT;\n              break;\n            case 5:\n              docValuesType = DocValues.Type.BYTES_FIXED_DEREF;\n              break;\n            case 6:\n              docValuesType = DocValues.Type.BYTES_VAR_STRAIGHT;\n              break;\n            case 7:\n              docValuesType = DocValues.Type.BYTES_VAR_DEREF;\n              break;\n            case 8:\n              docValuesType = DocValues.Type.FIXED_INTS_16;\n              break;\n            case 9:\n              docValuesType = DocValues.Type.FIXED_INTS_32;\n              break;\n            case 10:\n              docValuesType = DocValues.Type.FIXED_INTS_64;\n              break;\n            case 11:\n              docValuesType = DocValues.Type.FIXED_INTS_8;\n              break;\n            case 12:\n              docValuesType = DocValues.Type.BYTES_FIXED_SORTED;\n              break;\n            case 13:\n              docValuesType = DocValues.Type.BYTES_VAR_SORTED;\n              break;\n        \n            default:\n              throw new IllegalStateException(\"unhandled indexValues type \" + b);\n          }\n        }\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          storePositionsWithTermVector, storeOffsetWithTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      \n      return new FieldInfos(infos, hasFreq, hasProx, hasVectors);\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", Lucene40FieldInfosWriter.FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n\n    boolean hasVectors = false;\n    boolean hasFreq = false;\n    boolean hasProx = false;\n    \n    try {\n      final int format = input.readVInt();\n\n      if (format > FORMAT_MINIMUM) {\n        throw new IndexFormatTooOldException(input, format, FORMAT_MINIMUM, Lucene40FieldInfosWriter.FORMAT_CURRENT);\n      }\n      if (format < Lucene40FieldInfosWriter.FORMAT_CURRENT) {\n        throw new IndexFormatTooNewException(input, format, FORMAT_MINIMUM, Lucene40FieldInfosWriter.FORMAT_CURRENT);\n      }\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = format <= Lucene40FieldInfosWriter.FORMAT_FLEX? input.readInt():i;\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & Lucene40FieldInfosWriter.IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & Lucene40FieldInfosWriter.STORE_TERMVECTOR) != 0;\n        boolean storePositionsWithTermVector = (bits & Lucene40FieldInfosWriter.STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n        boolean storeOffsetWithTermVector = (bits & Lucene40FieldInfosWriter.STORE_OFFSET_WITH_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & Lucene40FieldInfosWriter.OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & Lucene40FieldInfosWriter.STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if ((bits & Lucene40FieldInfosWriter.OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & Lucene40FieldInfosWriter.OMIT_POSITIONS) != 0) {\n          if (format <= Lucene40FieldInfosWriter.FORMAT_OMIT_POSITIONS) {\n            indexOptions = IndexOptions.DOCS_AND_FREQS;\n          } else {\n            throw new CorruptIndexException(\"Corrupt fieldinfos, OMIT_POSITIONS set but format=\" + format + \" (resource: \" + input + \")\");\n          }\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // LUCENE-3027: past indices were able to write\n        // storePayloads=true when omitTFAP is also true,\n        // which is invalid.  We correct that, here:\n        if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          storePayloads = false;\n        }\n        hasVectors |= storeTermVector;\n        hasProx |= isIndexed && indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n        DocValues.Type docValuesType = null;\n        if (format <= Lucene40FieldInfosWriter.FORMAT_FLEX) {\n          final byte b = input.readByte();\n          switch(b) {\n            case 0:\n              docValuesType = null;\n              break;\n            case 1:\n              docValuesType = DocValues.Type.VAR_INTS;\n              break;\n            case 2:\n              docValuesType = DocValues.Type.FLOAT_32;\n              break;\n            case 3:\n              docValuesType = DocValues.Type.FLOAT_64;\n              break;\n            case 4:\n              docValuesType = DocValues.Type.BYTES_FIXED_STRAIGHT;\n              break;\n            case 5:\n              docValuesType = DocValues.Type.BYTES_FIXED_DEREF;\n              break;\n            case 6:\n              docValuesType = DocValues.Type.BYTES_VAR_STRAIGHT;\n              break;\n            case 7:\n              docValuesType = DocValues.Type.BYTES_VAR_DEREF;\n              break;\n            case 8:\n              docValuesType = DocValues.Type.FIXED_INTS_16;\n              break;\n            case 9:\n              docValuesType = DocValues.Type.FIXED_INTS_32;\n              break;\n            case 10:\n              docValuesType = DocValues.Type.FIXED_INTS_64;\n              break;\n            case 11:\n              docValuesType = DocValues.Type.FIXED_INTS_8;\n              break;\n            case 12:\n              docValuesType = DocValues.Type.BYTES_FIXED_SORTED;\n              break;\n            case 13:\n              docValuesType = DocValues.Type.BYTES_VAR_SORTED;\n              break;\n        \n            default:\n              throw new IllegalStateException(\"unhandled indexValues type \" + b);\n          }\n        }\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          storePositionsWithTermVector, storeOffsetWithTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      \n      return new FieldInfos(infos, hasFreq, hasProx, hasVectors);\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06","date":1326148180,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", Lucene40FieldInfosWriter.FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n\n    boolean hasVectors = false;\n    boolean hasFreq = false;\n    boolean hasProx = false;\n    \n    try {\n      final int format = input.readVInt();\n\n      if (format > FORMAT_MINIMUM) {\n        throw new IndexFormatTooOldException(input, format, FORMAT_MINIMUM, Lucene40FieldInfosWriter.FORMAT_CURRENT);\n      }\n      if (format < Lucene40FieldInfosWriter.FORMAT_CURRENT) {\n        throw new IndexFormatTooNewException(input, format, FORMAT_MINIMUM, Lucene40FieldInfosWriter.FORMAT_CURRENT);\n      }\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = format <= Lucene40FieldInfosWriter.FORMAT_FLEX? input.readInt():i;\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & Lucene40FieldInfosWriter.IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & Lucene40FieldInfosWriter.STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & Lucene40FieldInfosWriter.OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & Lucene40FieldInfosWriter.STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if ((bits & Lucene40FieldInfosWriter.OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & Lucene40FieldInfosWriter.OMIT_POSITIONS) != 0) {\n          if (format <= Lucene40FieldInfosWriter.FORMAT_OMIT_POSITIONS) {\n            indexOptions = IndexOptions.DOCS_AND_FREQS;\n          } else {\n            throw new CorruptIndexException(\"Corrupt fieldinfos, OMIT_POSITIONS set but format=\" + format + \" (resource: \" + input + \")\");\n          }\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // LUCENE-3027: past indices were able to write\n        // storePayloads=true when omitTFAP is also true,\n        // which is invalid.  We correct that, here:\n        if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          storePayloads = false;\n        }\n        hasVectors |= storeTermVector;\n        hasProx |= isIndexed && indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n        DocValues.Type docValuesType = null;\n        if (format <= Lucene40FieldInfosWriter.FORMAT_FLEX) {\n          final byte b = input.readByte();\n          switch(b) {\n            case 0:\n              docValuesType = null;\n              break;\n            case 1:\n              docValuesType = DocValues.Type.VAR_INTS;\n              break;\n            case 2:\n              docValuesType = DocValues.Type.FLOAT_32;\n              break;\n            case 3:\n              docValuesType = DocValues.Type.FLOAT_64;\n              break;\n            case 4:\n              docValuesType = DocValues.Type.BYTES_FIXED_STRAIGHT;\n              break;\n            case 5:\n              docValuesType = DocValues.Type.BYTES_FIXED_DEREF;\n              break;\n            case 6:\n              docValuesType = DocValues.Type.BYTES_VAR_STRAIGHT;\n              break;\n            case 7:\n              docValuesType = DocValues.Type.BYTES_VAR_DEREF;\n              break;\n            case 8:\n              docValuesType = DocValues.Type.FIXED_INTS_16;\n              break;\n            case 9:\n              docValuesType = DocValues.Type.FIXED_INTS_32;\n              break;\n            case 10:\n              docValuesType = DocValues.Type.FIXED_INTS_64;\n              break;\n            case 11:\n              docValuesType = DocValues.Type.FIXED_INTS_8;\n              break;\n            case 12:\n              docValuesType = DocValues.Type.BYTES_FIXED_SORTED;\n              break;\n            case 13:\n              docValuesType = DocValues.Type.BYTES_VAR_SORTED;\n              break;\n        \n            default:\n              throw new IllegalStateException(\"unhandled indexValues type \" + b);\n          }\n        }\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      \n      return new FieldInfos(infos, hasFreq, hasProx, hasVectors);\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", Lucene40FieldInfosWriter.FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n\n    boolean hasVectors = false;\n    boolean hasFreq = false;\n    boolean hasProx = false;\n    \n    try {\n      final int format = input.readVInt();\n\n      if (format > FORMAT_MINIMUM) {\n        throw new IndexFormatTooOldException(input, format, FORMAT_MINIMUM, Lucene40FieldInfosWriter.FORMAT_CURRENT);\n      }\n      if (format < Lucene40FieldInfosWriter.FORMAT_CURRENT) {\n        throw new IndexFormatTooNewException(input, format, FORMAT_MINIMUM, Lucene40FieldInfosWriter.FORMAT_CURRENT);\n      }\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = format <= Lucene40FieldInfosWriter.FORMAT_FLEX? input.readInt():i;\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & Lucene40FieldInfosWriter.IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & Lucene40FieldInfosWriter.STORE_TERMVECTOR) != 0;\n        boolean storePositionsWithTermVector = (bits & Lucene40FieldInfosWriter.STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n        boolean storeOffsetWithTermVector = (bits & Lucene40FieldInfosWriter.STORE_OFFSET_WITH_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & Lucene40FieldInfosWriter.OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & Lucene40FieldInfosWriter.STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if ((bits & Lucene40FieldInfosWriter.OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & Lucene40FieldInfosWriter.OMIT_POSITIONS) != 0) {\n          if (format <= Lucene40FieldInfosWriter.FORMAT_OMIT_POSITIONS) {\n            indexOptions = IndexOptions.DOCS_AND_FREQS;\n          } else {\n            throw new CorruptIndexException(\"Corrupt fieldinfos, OMIT_POSITIONS set but format=\" + format + \" (resource: \" + input + \")\");\n          }\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // LUCENE-3027: past indices were able to write\n        // storePayloads=true when omitTFAP is also true,\n        // which is invalid.  We correct that, here:\n        if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          storePayloads = false;\n        }\n        hasVectors |= storeTermVector;\n        hasProx |= isIndexed && indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n        DocValues.Type docValuesType = null;\n        if (format <= Lucene40FieldInfosWriter.FORMAT_FLEX) {\n          final byte b = input.readByte();\n          switch(b) {\n            case 0:\n              docValuesType = null;\n              break;\n            case 1:\n              docValuesType = DocValues.Type.VAR_INTS;\n              break;\n            case 2:\n              docValuesType = DocValues.Type.FLOAT_32;\n              break;\n            case 3:\n              docValuesType = DocValues.Type.FLOAT_64;\n              break;\n            case 4:\n              docValuesType = DocValues.Type.BYTES_FIXED_STRAIGHT;\n              break;\n            case 5:\n              docValuesType = DocValues.Type.BYTES_FIXED_DEREF;\n              break;\n            case 6:\n              docValuesType = DocValues.Type.BYTES_VAR_STRAIGHT;\n              break;\n            case 7:\n              docValuesType = DocValues.Type.BYTES_VAR_DEREF;\n              break;\n            case 8:\n              docValuesType = DocValues.Type.FIXED_INTS_16;\n              break;\n            case 9:\n              docValuesType = DocValues.Type.FIXED_INTS_32;\n              break;\n            case 10:\n              docValuesType = DocValues.Type.FIXED_INTS_64;\n              break;\n            case 11:\n              docValuesType = DocValues.Type.FIXED_INTS_8;\n              break;\n            case 12:\n              docValuesType = DocValues.Type.BYTES_FIXED_SORTED;\n              break;\n            case 13:\n              docValuesType = DocValues.Type.BYTES_VAR_SORTED;\n              break;\n        \n            default:\n              throw new IllegalStateException(\"unhandled indexValues type \" + b);\n          }\n        }\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          storePositionsWithTermVector, storeOffsetWithTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      \n      return new FieldInfos(infos, hasFreq, hasProx, hasVectors);\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"31f025ae60076ae95274433f3fe8e6ace2857a87","date":1326669465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", Lucene40FieldInfosWriter.FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n\n    boolean hasVectors = false;\n    boolean hasFreq = false;\n    boolean hasProx = false;\n    \n    try {\n      final int format = input.readVInt();\n\n      if (format > FORMAT_MINIMUM) {\n        throw new IndexFormatTooOldException(input, format, FORMAT_MINIMUM, Lucene40FieldInfosWriter.FORMAT_CURRENT);\n      }\n      if (format < Lucene40FieldInfosWriter.FORMAT_CURRENT) {\n        throw new IndexFormatTooNewException(input, format, FORMAT_MINIMUM, Lucene40FieldInfosWriter.FORMAT_CURRENT);\n      }\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = format <= Lucene40FieldInfosWriter.FORMAT_FLEX? input.readInt():i;\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & Lucene40FieldInfosWriter.IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & Lucene40FieldInfosWriter.STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & Lucene40FieldInfosWriter.OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & Lucene40FieldInfosWriter.STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if ((bits & Lucene40FieldInfosWriter.OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & Lucene40FieldInfosWriter.OMIT_POSITIONS) != 0) {\n          if (format <= Lucene40FieldInfosWriter.FORMAT_OMIT_POSITIONS) {\n            indexOptions = IndexOptions.DOCS_AND_FREQS;\n          } else {\n            throw new CorruptIndexException(\"Corrupt fieldinfos, OMIT_POSITIONS set but format=\" + format + \" (resource: \" + input + \")\");\n          }\n        } else if (format <= Lucene40FieldInfosWriter.FORMAT_FLEX && (bits & Lucene40FieldInfosWriter.STORE_OFFSETS_IN_POSTINGS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // LUCENE-3027: past indices were able to write\n        // storePayloads=true when omitTFAP is also true,\n        // which is invalid.  We correct that, here:\n        if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          storePayloads = false;\n        }\n        hasVectors |= storeTermVector;\n        hasProx |= isIndexed && indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n        DocValues.Type docValuesType = null;\n        if (format <= Lucene40FieldInfosWriter.FORMAT_FLEX) {\n          final byte b = input.readByte();\n          switch(b) {\n            case 0:\n              docValuesType = null;\n              break;\n            case 1:\n              docValuesType = DocValues.Type.VAR_INTS;\n              break;\n            case 2:\n              docValuesType = DocValues.Type.FLOAT_32;\n              break;\n            case 3:\n              docValuesType = DocValues.Type.FLOAT_64;\n              break;\n            case 4:\n              docValuesType = DocValues.Type.BYTES_FIXED_STRAIGHT;\n              break;\n            case 5:\n              docValuesType = DocValues.Type.BYTES_FIXED_DEREF;\n              break;\n            case 6:\n              docValuesType = DocValues.Type.BYTES_VAR_STRAIGHT;\n              break;\n            case 7:\n              docValuesType = DocValues.Type.BYTES_VAR_DEREF;\n              break;\n            case 8:\n              docValuesType = DocValues.Type.FIXED_INTS_16;\n              break;\n            case 9:\n              docValuesType = DocValues.Type.FIXED_INTS_32;\n              break;\n            case 10:\n              docValuesType = DocValues.Type.FIXED_INTS_64;\n              break;\n            case 11:\n              docValuesType = DocValues.Type.FIXED_INTS_8;\n              break;\n            case 12:\n              docValuesType = DocValues.Type.BYTES_FIXED_SORTED;\n              break;\n            case 13:\n              docValuesType = DocValues.Type.BYTES_VAR_SORTED;\n              break;\n        \n            default:\n              throw new IllegalStateException(\"unhandled indexValues type \" + b);\n          }\n        }\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      \n      return new FieldInfos(infos, hasFreq, hasProx, hasVectors);\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", Lucene40FieldInfosWriter.FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n\n    boolean hasVectors = false;\n    boolean hasFreq = false;\n    boolean hasProx = false;\n    \n    try {\n      final int format = input.readVInt();\n\n      if (format > FORMAT_MINIMUM) {\n        throw new IndexFormatTooOldException(input, format, FORMAT_MINIMUM, Lucene40FieldInfosWriter.FORMAT_CURRENT);\n      }\n      if (format < Lucene40FieldInfosWriter.FORMAT_CURRENT) {\n        throw new IndexFormatTooNewException(input, format, FORMAT_MINIMUM, Lucene40FieldInfosWriter.FORMAT_CURRENT);\n      }\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = format <= Lucene40FieldInfosWriter.FORMAT_FLEX? input.readInt():i;\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & Lucene40FieldInfosWriter.IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & Lucene40FieldInfosWriter.STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & Lucene40FieldInfosWriter.OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & Lucene40FieldInfosWriter.STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if ((bits & Lucene40FieldInfosWriter.OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & Lucene40FieldInfosWriter.OMIT_POSITIONS) != 0) {\n          if (format <= Lucene40FieldInfosWriter.FORMAT_OMIT_POSITIONS) {\n            indexOptions = IndexOptions.DOCS_AND_FREQS;\n          } else {\n            throw new CorruptIndexException(\"Corrupt fieldinfos, OMIT_POSITIONS set but format=\" + format + \" (resource: \" + input + \")\");\n          }\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // LUCENE-3027: past indices were able to write\n        // storePayloads=true when omitTFAP is also true,\n        // which is invalid.  We correct that, here:\n        if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          storePayloads = false;\n        }\n        hasVectors |= storeTermVector;\n        hasProx |= isIndexed && indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n        DocValues.Type docValuesType = null;\n        if (format <= Lucene40FieldInfosWriter.FORMAT_FLEX) {\n          final byte b = input.readByte();\n          switch(b) {\n            case 0:\n              docValuesType = null;\n              break;\n            case 1:\n              docValuesType = DocValues.Type.VAR_INTS;\n              break;\n            case 2:\n              docValuesType = DocValues.Type.FLOAT_32;\n              break;\n            case 3:\n              docValuesType = DocValues.Type.FLOAT_64;\n              break;\n            case 4:\n              docValuesType = DocValues.Type.BYTES_FIXED_STRAIGHT;\n              break;\n            case 5:\n              docValuesType = DocValues.Type.BYTES_FIXED_DEREF;\n              break;\n            case 6:\n              docValuesType = DocValues.Type.BYTES_VAR_STRAIGHT;\n              break;\n            case 7:\n              docValuesType = DocValues.Type.BYTES_VAR_DEREF;\n              break;\n            case 8:\n              docValuesType = DocValues.Type.FIXED_INTS_16;\n              break;\n            case 9:\n              docValuesType = DocValues.Type.FIXED_INTS_32;\n              break;\n            case 10:\n              docValuesType = DocValues.Type.FIXED_INTS_64;\n              break;\n            case 11:\n              docValuesType = DocValues.Type.FIXED_INTS_8;\n              break;\n            case 12:\n              docValuesType = DocValues.Type.BYTES_FIXED_SORTED;\n              break;\n            case 13:\n              docValuesType = DocValues.Type.BYTES_VAR_SORTED;\n              break;\n        \n            default:\n              throw new IllegalStateException(\"unhandled indexValues type \" + b);\n          }\n        }\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      \n      return new FieldInfos(infos, hasFreq, hasProx, hasVectors);\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9e8d5a6ffbfa3405d234a87c833741eabed98d13","date":1326725835,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", Lucene40FieldInfosWriter.FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n\n    boolean hasVectors = false;\n    boolean hasFreq = false;\n    boolean hasProx = false;\n    \n    try {\n      final int format = input.readVInt();\n\n      if (format > FORMAT_MINIMUM) {\n        throw new IndexFormatTooOldException(input, format, FORMAT_MINIMUM, Lucene40FieldInfosWriter.FORMAT_CURRENT);\n      }\n      if (format < Lucene40FieldInfosWriter.FORMAT_CURRENT) {\n        throw new IndexFormatTooNewException(input, format, FORMAT_MINIMUM, Lucene40FieldInfosWriter.FORMAT_CURRENT);\n      }\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = input.readInt();\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & Lucene40FieldInfosWriter.IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & Lucene40FieldInfosWriter.STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & Lucene40FieldInfosWriter.OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & Lucene40FieldInfosWriter.STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if ((bits & Lucene40FieldInfosWriter.OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & Lucene40FieldInfosWriter.OMIT_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS;\n        } else if ((bits & Lucene40FieldInfosWriter.STORE_OFFSETS_IN_POSTINGS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // LUCENE-3027: past indices were able to write\n        // storePayloads=true when omitTFAP is also true,\n        // which is invalid.  We correct that, here:\n        if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          storePayloads = false;\n        }\n        hasVectors |= storeTermVector;\n        hasProx |= isIndexed && indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n        // DV Types are packed in one byte\n        byte val = input.readByte();\n        final DocValues.Type docValuesType = getDocValuesType((byte) (val & 0x0F));\n        final DocValues.Type normsType = getDocValuesType((byte) ((val >>> 4) & 0x0F));\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      \n      return new FieldInfos(infos, hasFreq, hasProx, hasVectors);\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", Lucene40FieldInfosWriter.FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n\n    boolean hasVectors = false;\n    boolean hasFreq = false;\n    boolean hasProx = false;\n    \n    try {\n      final int format = input.readVInt();\n\n      if (format > FORMAT_MINIMUM) {\n        throw new IndexFormatTooOldException(input, format, FORMAT_MINIMUM, Lucene40FieldInfosWriter.FORMAT_CURRENT);\n      }\n      if (format < Lucene40FieldInfosWriter.FORMAT_CURRENT) {\n        throw new IndexFormatTooNewException(input, format, FORMAT_MINIMUM, Lucene40FieldInfosWriter.FORMAT_CURRENT);\n      }\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = format <= Lucene40FieldInfosWriter.FORMAT_FLEX? input.readInt():i;\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & Lucene40FieldInfosWriter.IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & Lucene40FieldInfosWriter.STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & Lucene40FieldInfosWriter.OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & Lucene40FieldInfosWriter.STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if ((bits & Lucene40FieldInfosWriter.OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & Lucene40FieldInfosWriter.OMIT_POSITIONS) != 0) {\n          if (format <= Lucene40FieldInfosWriter.FORMAT_OMIT_POSITIONS) {\n            indexOptions = IndexOptions.DOCS_AND_FREQS;\n          } else {\n            throw new CorruptIndexException(\"Corrupt fieldinfos, OMIT_POSITIONS set but format=\" + format + \" (resource: \" + input + \")\");\n          }\n        } else if (format <= Lucene40FieldInfosWriter.FORMAT_FLEX && (bits & Lucene40FieldInfosWriter.STORE_OFFSETS_IN_POSTINGS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // LUCENE-3027: past indices were able to write\n        // storePayloads=true when omitTFAP is also true,\n        // which is invalid.  We correct that, here:\n        if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          storePayloads = false;\n        }\n        hasVectors |= storeTermVector;\n        hasProx |= isIndexed && indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n        DocValues.Type docValuesType = null;\n        if (format <= Lucene40FieldInfosWriter.FORMAT_FLEX) {\n          final byte b = input.readByte();\n          switch(b) {\n            case 0:\n              docValuesType = null;\n              break;\n            case 1:\n              docValuesType = DocValues.Type.VAR_INTS;\n              break;\n            case 2:\n              docValuesType = DocValues.Type.FLOAT_32;\n              break;\n            case 3:\n              docValuesType = DocValues.Type.FLOAT_64;\n              break;\n            case 4:\n              docValuesType = DocValues.Type.BYTES_FIXED_STRAIGHT;\n              break;\n            case 5:\n              docValuesType = DocValues.Type.BYTES_FIXED_DEREF;\n              break;\n            case 6:\n              docValuesType = DocValues.Type.BYTES_VAR_STRAIGHT;\n              break;\n            case 7:\n              docValuesType = DocValues.Type.BYTES_VAR_DEREF;\n              break;\n            case 8:\n              docValuesType = DocValues.Type.FIXED_INTS_16;\n              break;\n            case 9:\n              docValuesType = DocValues.Type.FIXED_INTS_32;\n              break;\n            case 10:\n              docValuesType = DocValues.Type.FIXED_INTS_64;\n              break;\n            case 11:\n              docValuesType = DocValues.Type.FIXED_INTS_8;\n              break;\n            case 12:\n              docValuesType = DocValues.Type.BYTES_FIXED_SORTED;\n              break;\n            case 13:\n              docValuesType = DocValues.Type.BYTES_VAR_SORTED;\n              break;\n        \n            default:\n              throw new IllegalStateException(\"unhandled indexValues type \" + b);\n          }\n        }\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      \n      return new FieldInfos(infos, hasFreq, hasProx, hasVectors);\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a44b232879361a7ace3520b5b313094a9a35e044","date":1327356188,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", Lucene40FieldInfosWriter.FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n\n    boolean hasVectors = false;\n    boolean hasFreq = false;\n    boolean hasProx = false;\n    \n    try {\n      final int format = input.readVInt();\n\n      if (format > FORMAT_MINIMUM) {\n        throw new IndexFormatTooOldException(input, format, FORMAT_MINIMUM, Lucene40FieldInfosWriter.FORMAT_CURRENT);\n      }\n      if (format < Lucene40FieldInfosWriter.FORMAT_CURRENT) {\n        throw new IndexFormatTooNewException(input, format, FORMAT_MINIMUM, Lucene40FieldInfosWriter.FORMAT_CURRENT);\n      }\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = input.readInt();\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & Lucene40FieldInfosWriter.IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & Lucene40FieldInfosWriter.STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & Lucene40FieldInfosWriter.OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & Lucene40FieldInfosWriter.STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if ((bits & Lucene40FieldInfosWriter.OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & Lucene40FieldInfosWriter.OMIT_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS;\n        } else if ((bits & Lucene40FieldInfosWriter.STORE_OFFSETS_IN_POSTINGS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // LUCENE-3027: past indices were able to write\n        // storePayloads=true when omitTFAP is also true,\n        // which is invalid.  We correct that, here:\n        if (indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n          storePayloads = false;\n        }\n        hasVectors |= storeTermVector;\n        hasProx |= isIndexed && indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n        // DV Types are packed in one byte\n        byte val = input.readByte();\n        final DocValues.Type docValuesType = getDocValuesType((byte) (val & 0x0F));\n        final DocValues.Type normsType = getDocValuesType((byte) ((val >>> 4) & 0x0F));\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      \n      return new FieldInfos(infos, hasFreq, hasProx, hasVectors);\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", Lucene40FieldInfosWriter.FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n\n    boolean hasVectors = false;\n    boolean hasFreq = false;\n    boolean hasProx = false;\n    \n    try {\n      final int format = input.readVInt();\n\n      if (format > FORMAT_MINIMUM) {\n        throw new IndexFormatTooOldException(input, format, FORMAT_MINIMUM, Lucene40FieldInfosWriter.FORMAT_CURRENT);\n      }\n      if (format < Lucene40FieldInfosWriter.FORMAT_CURRENT) {\n        throw new IndexFormatTooNewException(input, format, FORMAT_MINIMUM, Lucene40FieldInfosWriter.FORMAT_CURRENT);\n      }\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = input.readInt();\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & Lucene40FieldInfosWriter.IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & Lucene40FieldInfosWriter.STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & Lucene40FieldInfosWriter.OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & Lucene40FieldInfosWriter.STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if ((bits & Lucene40FieldInfosWriter.OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & Lucene40FieldInfosWriter.OMIT_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS;\n        } else if ((bits & Lucene40FieldInfosWriter.STORE_OFFSETS_IN_POSTINGS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // LUCENE-3027: past indices were able to write\n        // storePayloads=true when omitTFAP is also true,\n        // which is invalid.  We correct that, here:\n        if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          storePayloads = false;\n        }\n        hasVectors |= storeTermVector;\n        hasProx |= isIndexed && indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n        // DV Types are packed in one byte\n        byte val = input.readByte();\n        final DocValues.Type docValuesType = getDocValuesType((byte) (val & 0x0F));\n        final DocValues.Type normsType = getDocValuesType((byte) ((val >>> 4) & 0x0F));\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      \n      return new FieldInfos(infos, hasFreq, hasProx, hasVectors);\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["83ede60c0b5bb96ad193414bbd663193b56689b3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5a89676536a5d3e2e875a9eed6b3f22a63cca643","date":1327356915,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", Lucene40FieldInfosWriter.FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n\n    boolean hasVectors = false;\n    boolean hasFreq = false;\n    boolean hasProx = false;\n    \n    try {\n      final int format = input.readVInt();\n\n      if (format > FORMAT_MINIMUM) {\n        throw new IndexFormatTooOldException(input, format, FORMAT_MINIMUM, Lucene40FieldInfosWriter.FORMAT_CURRENT);\n      }\n      if (format < Lucene40FieldInfosWriter.FORMAT_CURRENT) {\n        throw new IndexFormatTooNewException(input, format, FORMAT_MINIMUM, Lucene40FieldInfosWriter.FORMAT_CURRENT);\n      }\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = input.readInt();\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & Lucene40FieldInfosWriter.IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & Lucene40FieldInfosWriter.STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & Lucene40FieldInfosWriter.OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & Lucene40FieldInfosWriter.STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if ((bits & Lucene40FieldInfosWriter.OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & Lucene40FieldInfosWriter.OMIT_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS;\n        } else if ((bits & Lucene40FieldInfosWriter.STORE_OFFSETS_IN_POSTINGS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // LUCENE-3027: past indices were able to write\n        // storePayloads=true when omitTFAP is also true,\n        // which is invalid.  We correct that, here:\n        if (indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n          storePayloads = false;\n        }\n        hasVectors |= storeTermVector;\n        hasProx |= isIndexed && indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n        // DV Types are packed in one byte\n        byte val = input.readByte();\n        final DocValues.Type docValuesType = getDocValuesType((byte) (val & 0x0F));\n        final DocValues.Type normsType = getDocValuesType((byte) ((val >>> 4) & 0x0F));\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      \n      return new FieldInfos(infos, hasFreq, hasProx, hasVectors);\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", Lucene40FieldInfosWriter.FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n\n    boolean hasVectors = false;\n    boolean hasFreq = false;\n    boolean hasProx = false;\n    \n    try {\n      final int format = input.readVInt();\n\n      if (format > FORMAT_MINIMUM) {\n        throw new IndexFormatTooOldException(input, format, FORMAT_MINIMUM, Lucene40FieldInfosWriter.FORMAT_CURRENT);\n      }\n      if (format < Lucene40FieldInfosWriter.FORMAT_CURRENT) {\n        throw new IndexFormatTooNewException(input, format, FORMAT_MINIMUM, Lucene40FieldInfosWriter.FORMAT_CURRENT);\n      }\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = input.readInt();\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & Lucene40FieldInfosWriter.IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & Lucene40FieldInfosWriter.STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & Lucene40FieldInfosWriter.OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & Lucene40FieldInfosWriter.STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if ((bits & Lucene40FieldInfosWriter.OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & Lucene40FieldInfosWriter.OMIT_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS;\n        } else if ((bits & Lucene40FieldInfosWriter.STORE_OFFSETS_IN_POSTINGS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // LUCENE-3027: past indices were able to write\n        // storePayloads=true when omitTFAP is also true,\n        // which is invalid.  We correct that, here:\n        if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          storePayloads = false;\n        }\n        hasVectors |= storeTermVector;\n        hasProx |= isIndexed && indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n        // DV Types are packed in one byte\n        byte val = input.readByte();\n        final DocValues.Type docValuesType = getDocValuesType((byte) (val & 0x0F));\n        final DocValues.Type normsType = getDocValuesType((byte) ((val >>> 4) & 0x0F));\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      \n      return new FieldInfos(infos, hasFreq, hasProx, hasVectors);\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", Lucene40FieldInfosWriter.FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n\n    boolean hasVectors = false;\n    boolean hasFreq = false;\n    boolean hasProx = false;\n    \n    try {\n      final int format = input.readVInt();\n\n      if (format > FORMAT_MINIMUM) {\n        throw new IndexFormatTooOldException(input, format, FORMAT_MINIMUM, Lucene40FieldInfosWriter.FORMAT_CURRENT);\n      }\n      if (format < Lucene40FieldInfosWriter.FORMAT_CURRENT) {\n        throw new IndexFormatTooNewException(input, format, FORMAT_MINIMUM, Lucene40FieldInfosWriter.FORMAT_CURRENT);\n      }\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = input.readInt();\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & Lucene40FieldInfosWriter.IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & Lucene40FieldInfosWriter.STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & Lucene40FieldInfosWriter.OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & Lucene40FieldInfosWriter.STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if ((bits & Lucene40FieldInfosWriter.OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & Lucene40FieldInfosWriter.OMIT_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS;\n        } else if ((bits & Lucene40FieldInfosWriter.STORE_OFFSETS_IN_POSTINGS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // LUCENE-3027: past indices were able to write\n        // storePayloads=true when omitTFAP is also true,\n        // which is invalid.  We correct that, here:\n        if (indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n          storePayloads = false;\n        }\n        hasVectors |= storeTermVector;\n        hasProx |= isIndexed && indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n        // DV Types are packed in one byte\n        byte val = input.readByte();\n        final DocValues.Type docValuesType = getDocValuesType((byte) (val & 0x0F));\n        final DocValues.Type normsType = getDocValuesType((byte) ((val >>> 4) & 0x0F));\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      \n      return new FieldInfos(infos, hasFreq, hasProx, hasVectors);\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", Lucene40FieldInfosWriter.FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n\n    boolean hasVectors = false;\n    boolean hasFreq = false;\n    boolean hasProx = false;\n    \n    try {\n      final int format = input.readVInt();\n\n      if (format > FORMAT_MINIMUM) {\n        throw new IndexFormatTooOldException(input, format, FORMAT_MINIMUM, Lucene40FieldInfosWriter.FORMAT_CURRENT);\n      }\n      if (format < Lucene40FieldInfosWriter.FORMAT_CURRENT) {\n        throw new IndexFormatTooNewException(input, format, FORMAT_MINIMUM, Lucene40FieldInfosWriter.FORMAT_CURRENT);\n      }\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = input.readInt();\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & Lucene40FieldInfosWriter.IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & Lucene40FieldInfosWriter.STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & Lucene40FieldInfosWriter.OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & Lucene40FieldInfosWriter.STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if ((bits & Lucene40FieldInfosWriter.OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & Lucene40FieldInfosWriter.OMIT_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS;\n        } else if ((bits & Lucene40FieldInfosWriter.STORE_OFFSETS_IN_POSTINGS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // LUCENE-3027: past indices were able to write\n        // storePayloads=true when omitTFAP is also true,\n        // which is invalid.  We correct that, here:\n        if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          storePayloads = false;\n        }\n        hasVectors |= storeTermVector;\n        hasProx |= isIndexed && indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n        // DV Types are packed in one byte\n        byte val = input.readByte();\n        final DocValues.Type docValuesType = getDocValuesType((byte) (val & 0x0F));\n        final DocValues.Type normsType = getDocValuesType((byte) ((val >>> 4) & 0x0F));\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      \n      return new FieldInfos(infos, hasFreq, hasProx, hasVectors);\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40FieldInfosReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", Lucene40FieldInfosWriter.FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n\n    boolean hasVectors = false;\n    boolean hasFreq = false;\n    boolean hasProx = false;\n    \n    try {\n      final int format = input.readVInt();\n\n      if (format > FORMAT_MINIMUM) {\n        throw new IndexFormatTooOldException(input, format, FORMAT_MINIMUM, Lucene40FieldInfosWriter.FORMAT_CURRENT);\n      }\n      if (format < Lucene40FieldInfosWriter.FORMAT_CURRENT) {\n        throw new IndexFormatTooNewException(input, format, FORMAT_MINIMUM, Lucene40FieldInfosWriter.FORMAT_CURRENT);\n      }\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = input.readInt();\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & Lucene40FieldInfosWriter.IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & Lucene40FieldInfosWriter.STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & Lucene40FieldInfosWriter.OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & Lucene40FieldInfosWriter.STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if ((bits & Lucene40FieldInfosWriter.OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & Lucene40FieldInfosWriter.OMIT_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS;\n        } else if ((bits & Lucene40FieldInfosWriter.STORE_OFFSETS_IN_POSTINGS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // LUCENE-3027: past indices were able to write\n        // storePayloads=true when omitTFAP is also true,\n        // which is invalid.  We correct that, here:\n        if (indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n          storePayloads = false;\n        }\n        hasVectors |= storeTermVector;\n        hasProx |= isIndexed && indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n        // DV Types are packed in one byte\n        byte val = input.readByte();\n        final DocValues.Type docValuesType = getDocValuesType((byte) (val & 0x0F));\n        final DocValues.Type normsType = getDocValuesType((byte) ((val >>> 4) & 0x0F));\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      \n      return new FieldInfos(infos, hasFreq, hasProx, hasVectors);\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", Lucene40FieldInfosWriter.FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n\n    boolean hasVectors = false;\n    boolean hasFreq = false;\n    boolean hasProx = false;\n    \n    try {\n      final int format = input.readVInt();\n\n      if (format > FORMAT_MINIMUM) {\n        throw new IndexFormatTooOldException(input, format, FORMAT_MINIMUM, Lucene40FieldInfosWriter.FORMAT_CURRENT);\n      }\n      if (format < Lucene40FieldInfosWriter.FORMAT_CURRENT) {\n        throw new IndexFormatTooNewException(input, format, FORMAT_MINIMUM, Lucene40FieldInfosWriter.FORMAT_CURRENT);\n      }\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = input.readInt();\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & Lucene40FieldInfosWriter.IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & Lucene40FieldInfosWriter.STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & Lucene40FieldInfosWriter.OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & Lucene40FieldInfosWriter.STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if ((bits & Lucene40FieldInfosWriter.OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & Lucene40FieldInfosWriter.OMIT_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS;\n        } else if ((bits & Lucene40FieldInfosWriter.STORE_OFFSETS_IN_POSTINGS) != 0) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // LUCENE-3027: past indices were able to write\n        // storePayloads=true when omitTFAP is also true,\n        // which is invalid.  We correct that, here:\n        if (indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n          storePayloads = false;\n        }\n        hasVectors |= storeTermVector;\n        hasProx |= isIndexed && indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n        // DV Types are packed in one byte\n        byte val = input.readByte();\n        final DocValues.Type docValuesType = getDocValuesType((byte) (val & 0x0F));\n        final DocValues.Type normsType = getDocValuesType((byte) ((val >>> 4) & 0x0F));\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      \n      return new FieldInfos(infos, hasFreq, hasProx, hasVectors);\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"5a89676536a5d3e2e875a9eed6b3f22a63cca643":["9e8d5a6ffbfa3405d234a87c833741eabed98d13","a44b232879361a7ace3520b5b313094a9a35e044"],"9e8d5a6ffbfa3405d234a87c833741eabed98d13":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a44b232879361a7ace3520b5b313094a9a35e044"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["9e8d5a6ffbfa3405d234a87c833741eabed98d13","a44b232879361a7ace3520b5b313094a9a35e044"],"a44b232879361a7ace3520b5b313094a9a35e044":["9e8d5a6ffbfa3405d234a87c833741eabed98d13"],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"]},"commit2Childs":{"5a89676536a5d3e2e875a9eed6b3f22a63cca643":[],"9e8d5a6ffbfa3405d234a87c833741eabed98d13":["5a89676536a5d3e2e875a9eed6b3f22a63cca643","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","a44b232879361a7ace3520b5b313094a9a35e044"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"a44b232879361a7ace3520b5b313094a9a35e044":["5a89676536a5d3e2e875a9eed6b3f22a63cca643","3a119bbc8703c10faa329ec201c654b3a35a1e3e","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["9e8d5a6ffbfa3405d234a87c833741eabed98d13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5a89676536a5d3e2e875a9eed6b3f22a63cca643","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}