{"path":"lucene/src/java/org/apache/lucene/util/automaton/Automaton#getNumberedStates().mjava","commits":[{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/Automaton#getNumberedStates().mjava","pathOld":"/dev/null","sourceNew":"  public State[] getNumberedStates() {\n    if (numberedStates == null) {\n      expandSingleton();\n      final Set<State> visited = new HashSet<State>();\n      final LinkedList<State> worklist = new LinkedList<State>();\n      numberedStates = new State[4];\n      int upto = 0;\n      worklist.add(initial);\n      visited.add(initial);\n      initial.number = upto;\n      numberedStates[upto] = initial;\n      upto++;\n      while (worklist.size() > 0) {\n        State s = worklist.removeFirst();\n        for (int i=0;i<s.numTransitions;i++) {\n          final Transition t = s.transitionsArray[i];\n          if (!visited.contains(t.to)) {\n            visited.add(t.to);\n            worklist.add(t.to);\n            t.to.number = upto;\n            if (upto == numberedStates.length) {\n              final State[] newArray = new State[ArrayUtil.oversize(1+upto, RamUsageEstimator.NUM_BYTES_OBJ_REF)];\n              System.arraycopy(numberedStates, 0, newArray, 0, upto);\n              numberedStates = newArray;\n            }\n            numberedStates[upto] = t.to;\n            upto++;\n          }\n        }\n      }\n      if (numberedStates.length != upto) {\n        final State[] newArray = new State[upto];\n        System.arraycopy(numberedStates, 0, newArray, 0, upto);\n        numberedStates = newArray;\n      }\n    }\n\n    return numberedStates;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7f04837a83ac5990603e49463c653672a3a31af0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4769bdea5a853f1841c485bc1fd9d79cb7022fc","date":1292168168,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/Automaton#getNumberedStates().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/Automaton#getNumberedStates().mjava","sourceNew":"  public State[] getNumberedStates() {\n    if (numberedStates == null) {\n      expandSingleton();\n      final Set<State> visited = new HashSet<State>();\n      final LinkedList<State> worklist = new LinkedList<State>();\n      numberedStates = new State[4];\n      int upto = 0;\n      worklist.add(initial);\n      visited.add(initial);\n      initial.number = upto;\n      numberedStates[upto] = initial;\n      upto++;\n      while (worklist.size() > 0) {\n        State s = worklist.removeFirst();\n        for (int i=0;i<s.numTransitions;i++) {\n          final Transition t = s.transitionsArray[i];\n          if (!visited.contains(t.to)) {\n            visited.add(t.to);\n            worklist.add(t.to);\n            t.to.number = upto;\n            if (upto == numberedStates.length) {\n              numberedStates = ArrayUtil.grow(numberedStates);\n            }\n            numberedStates[upto] = t.to;\n            upto++;\n          }\n        }\n      }\n      if (numberedStates.length != upto) {\n        final State[] newArray = new State[upto];\n        System.arraycopy(numberedStates, 0, newArray, 0, upto);\n        numberedStates = newArray;\n      }\n    }\n\n    return numberedStates;\n  }\n\n","sourceOld":"  public State[] getNumberedStates() {\n    if (numberedStates == null) {\n      expandSingleton();\n      final Set<State> visited = new HashSet<State>();\n      final LinkedList<State> worklist = new LinkedList<State>();\n      numberedStates = new State[4];\n      int upto = 0;\n      worklist.add(initial);\n      visited.add(initial);\n      initial.number = upto;\n      numberedStates[upto] = initial;\n      upto++;\n      while (worklist.size() > 0) {\n        State s = worklist.removeFirst();\n        for (int i=0;i<s.numTransitions;i++) {\n          final Transition t = s.transitionsArray[i];\n          if (!visited.contains(t.to)) {\n            visited.add(t.to);\n            worklist.add(t.to);\n            t.to.number = upto;\n            if (upto == numberedStates.length) {\n              final State[] newArray = new State[ArrayUtil.oversize(1+upto, RamUsageEstimator.NUM_BYTES_OBJ_REF)];\n              System.arraycopy(numberedStates, 0, newArray, 0, upto);\n              numberedStates = newArray;\n            }\n            numberedStates[upto] = t.to;\n            upto++;\n          }\n        }\n      }\n      if (numberedStates.length != upto) {\n        final State[] newArray = new State[upto];\n        System.arraycopy(numberedStates, 0, newArray, 0, upto);\n        numberedStates = newArray;\n      }\n    }\n\n    return numberedStates;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4fc28d227571aea72029cf9096fcf7d3865a6b40","date":1292211129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/Automaton#getNumberedStates().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/Automaton#getNumberedStates().mjava","sourceNew":"  public State[] getNumberedStates() {\n    if (numberedStates == null) {\n      expandSingleton();\n      final Set<State> visited = new HashSet<State>();\n      final LinkedList<State> worklist = new LinkedList<State>();\n      numberedStates = new State[4];\n      int upto = 0;\n      worklist.add(initial);\n      visited.add(initial);\n      initial.number = upto;\n      numberedStates[upto] = initial;\n      upto++;\n      while (worklist.size() > 0) {\n        State s = worklist.removeFirst();\n        for (int i=0;i<s.numTransitions;i++) {\n          final Transition t = s.transitionsArray[i];\n          if (!visited.contains(t.to)) {\n            visited.add(t.to);\n            worklist.add(t.to);\n            t.to.number = upto;\n            if (upto == numberedStates.length) {\n              final State[] newArray = new State[ArrayUtil.oversize(1+upto, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n              System.arraycopy(numberedStates, 0, newArray, 0, upto);\n              numberedStates = newArray;\n            }\n            numberedStates[upto] = t.to;\n            upto++;\n          }\n        }\n      }\n      if (numberedStates.length != upto) {\n        final State[] newArray = new State[upto];\n        System.arraycopy(numberedStates, 0, newArray, 0, upto);\n        numberedStates = newArray;\n      }\n    }\n\n    return numberedStates;\n  }\n\n","sourceOld":"  public State[] getNumberedStates() {\n    if (numberedStates == null) {\n      expandSingleton();\n      final Set<State> visited = new HashSet<State>();\n      final LinkedList<State> worklist = new LinkedList<State>();\n      numberedStates = new State[4];\n      int upto = 0;\n      worklist.add(initial);\n      visited.add(initial);\n      initial.number = upto;\n      numberedStates[upto] = initial;\n      upto++;\n      while (worklist.size() > 0) {\n        State s = worklist.removeFirst();\n        for (int i=0;i<s.numTransitions;i++) {\n          final Transition t = s.transitionsArray[i];\n          if (!visited.contains(t.to)) {\n            visited.add(t.to);\n            worklist.add(t.to);\n            t.to.number = upto;\n            if (upto == numberedStates.length) {\n              numberedStates = ArrayUtil.grow(numberedStates);\n            }\n            numberedStates[upto] = t.to;\n            upto++;\n          }\n        }\n      }\n      if (numberedStates.length != upto) {\n        final State[] newArray = new State[upto];\n        System.arraycopy(numberedStates, 0, newArray, 0, upto);\n        numberedStates = newArray;\n      }\n    }\n\n    return numberedStates;\n  }\n\n","bugFix":null,"bugIntro":["7f04837a83ac5990603e49463c653672a3a31af0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/Automaton#getNumberedStates().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/Automaton#getNumberedStates().mjava","sourceNew":"  public State[] getNumberedStates() {\n    if (numberedStates == null) {\n      expandSingleton();\n      final Set<State> visited = new HashSet<State>();\n      final LinkedList<State> worklist = new LinkedList<State>();\n      numberedStates = new State[4];\n      int upto = 0;\n      worklist.add(initial);\n      visited.add(initial);\n      initial.number = upto;\n      numberedStates[upto] = initial;\n      upto++;\n      while (worklist.size() > 0) {\n        State s = worklist.removeFirst();\n        for (int i=0;i<s.numTransitions;i++) {\n          final Transition t = s.transitionsArray[i];\n          if (!visited.contains(t.to)) {\n            visited.add(t.to);\n            worklist.add(t.to);\n            t.to.number = upto;\n            if (upto == numberedStates.length) {\n              final State[] newArray = new State[ArrayUtil.oversize(1+upto, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n              System.arraycopy(numberedStates, 0, newArray, 0, upto);\n              numberedStates = newArray;\n            }\n            numberedStates[upto] = t.to;\n            upto++;\n          }\n        }\n      }\n      if (numberedStates.length != upto) {\n        final State[] newArray = new State[upto];\n        System.arraycopy(numberedStates, 0, newArray, 0, upto);\n        numberedStates = newArray;\n      }\n    }\n\n    return numberedStates;\n  }\n\n","sourceOld":"  public State[] getNumberedStates() {\n    if (numberedStates == null) {\n      expandSingleton();\n      final Set<State> visited = new HashSet<State>();\n      final LinkedList<State> worklist = new LinkedList<State>();\n      numberedStates = new State[4];\n      int upto = 0;\n      worklist.add(initial);\n      visited.add(initial);\n      initial.number = upto;\n      numberedStates[upto] = initial;\n      upto++;\n      while (worklist.size() > 0) {\n        State s = worklist.removeFirst();\n        for (int i=0;i<s.numTransitions;i++) {\n          final Transition t = s.transitionsArray[i];\n          if (!visited.contains(t.to)) {\n            visited.add(t.to);\n            worklist.add(t.to);\n            t.to.number = upto;\n            if (upto == numberedStates.length) {\n              final State[] newArray = new State[ArrayUtil.oversize(1+upto, RamUsageEstimator.NUM_BYTES_OBJ_REF)];\n              System.arraycopy(numberedStates, 0, newArray, 0, upto);\n              numberedStates = newArray;\n            }\n            numberedStates[upto] = t.to;\n            upto++;\n          }\n        }\n      }\n      if (numberedStates.length != upto) {\n        final State[] newArray = new State[upto];\n        System.arraycopy(numberedStates, 0, newArray, 0, upto);\n        numberedStates = newArray;\n      }\n    }\n\n    return numberedStates;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/Automaton#getNumberedStates().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/Automaton#getNumberedStates().mjava","sourceNew":"  public State[] getNumberedStates() {\n    if (numberedStates == null) {\n      expandSingleton();\n      final Set<State> visited = new HashSet<State>();\n      final LinkedList<State> worklist = new LinkedList<State>();\n      numberedStates = new State[4];\n      int upto = 0;\n      worklist.add(initial);\n      visited.add(initial);\n      initial.number = upto;\n      numberedStates[upto] = initial;\n      upto++;\n      while (worklist.size() > 0) {\n        State s = worklist.removeFirst();\n        for (int i=0;i<s.numTransitions;i++) {\n          final Transition t = s.transitionsArray[i];\n          if (!visited.contains(t.to)) {\n            visited.add(t.to);\n            worklist.add(t.to);\n            t.to.number = upto;\n            if (upto == numberedStates.length) {\n              final State[] newArray = new State[ArrayUtil.oversize(1+upto, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n              System.arraycopy(numberedStates, 0, newArray, 0, upto);\n              numberedStates = newArray;\n            }\n            numberedStates[upto] = t.to;\n            upto++;\n          }\n        }\n      }\n      if (numberedStates.length != upto) {\n        final State[] newArray = new State[upto];\n        System.arraycopy(numberedStates, 0, newArray, 0, upto);\n        numberedStates = newArray;\n      }\n    }\n\n    return numberedStates;\n  }\n\n","sourceOld":"  public State[] getNumberedStates() {\n    if (numberedStates == null) {\n      expandSingleton();\n      final Set<State> visited = new HashSet<State>();\n      final LinkedList<State> worklist = new LinkedList<State>();\n      numberedStates = new State[4];\n      int upto = 0;\n      worklist.add(initial);\n      visited.add(initial);\n      initial.number = upto;\n      numberedStates[upto] = initial;\n      upto++;\n      while (worklist.size() > 0) {\n        State s = worklist.removeFirst();\n        for (int i=0;i<s.numTransitions;i++) {\n          final Transition t = s.transitionsArray[i];\n          if (!visited.contains(t.to)) {\n            visited.add(t.to);\n            worklist.add(t.to);\n            t.to.number = upto;\n            if (upto == numberedStates.length) {\n              final State[] newArray = new State[ArrayUtil.oversize(1+upto, RamUsageEstimator.NUM_BYTES_OBJ_REF)];\n              System.arraycopy(numberedStates, 0, newArray, 0, upto);\n              numberedStates = newArray;\n            }\n            numberedStates[upto] = t.to;\n            upto++;\n          }\n        }\n      }\n      if (numberedStates.length != upto) {\n        final State[] newArray = new State[upto];\n        System.arraycopy(numberedStates, 0, newArray, 0, upto);\n        numberedStates = newArray;\n      }\n    }\n\n    return numberedStates;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getNumberedStates().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/Automaton#getNumberedStates().mjava","sourceNew":"  public State[] getNumberedStates() {\n    if (numberedStates == null) {\n      expandSingleton();\n      final Set<State> visited = new HashSet<State>();\n      final LinkedList<State> worklist = new LinkedList<State>();\n      numberedStates = new State[4];\n      int upto = 0;\n      worklist.add(initial);\n      visited.add(initial);\n      initial.number = upto;\n      numberedStates[upto] = initial;\n      upto++;\n      while (worklist.size() > 0) {\n        State s = worklist.removeFirst();\n        for (int i=0;i<s.numTransitions;i++) {\n          final Transition t = s.transitionsArray[i];\n          if (!visited.contains(t.to)) {\n            visited.add(t.to);\n            worklist.add(t.to);\n            t.to.number = upto;\n            if (upto == numberedStates.length) {\n              final State[] newArray = new State[ArrayUtil.oversize(1+upto, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n              System.arraycopy(numberedStates, 0, newArray, 0, upto);\n              numberedStates = newArray;\n            }\n            numberedStates[upto] = t.to;\n            upto++;\n          }\n        }\n      }\n      if (numberedStates.length != upto) {\n        final State[] newArray = new State[upto];\n        System.arraycopy(numberedStates, 0, newArray, 0, upto);\n        numberedStates = newArray;\n      }\n    }\n\n    return numberedStates;\n  }\n\n","sourceOld":"  public State[] getNumberedStates() {\n    if (numberedStates == null) {\n      expandSingleton();\n      final Set<State> visited = new HashSet<State>();\n      final LinkedList<State> worklist = new LinkedList<State>();\n      numberedStates = new State[4];\n      int upto = 0;\n      worklist.add(initial);\n      visited.add(initial);\n      initial.number = upto;\n      numberedStates[upto] = initial;\n      upto++;\n      while (worklist.size() > 0) {\n        State s = worklist.removeFirst();\n        for (int i=0;i<s.numTransitions;i++) {\n          final Transition t = s.transitionsArray[i];\n          if (!visited.contains(t.to)) {\n            visited.add(t.to);\n            worklist.add(t.to);\n            t.to.number = upto;\n            if (upto == numberedStates.length) {\n              final State[] newArray = new State[ArrayUtil.oversize(1+upto, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n              System.arraycopy(numberedStates, 0, newArray, 0, upto);\n              numberedStates = newArray;\n            }\n            numberedStates[upto] = t.to;\n            upto++;\n          }\n        }\n      }\n      if (numberedStates.length != upto) {\n        final State[] newArray = new State[upto];\n        System.arraycopy(numberedStates, 0, newArray, 0, upto);\n        numberedStates = newArray;\n      }\n    }\n\n    return numberedStates;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4fc28d227571aea72029cf9096fcf7d3865a6b40"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["5acb0ee59cc50caf85402e92d148fdb2af61bc19","4fc28d227571aea72029cf9096fcf7d3865a6b40"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5acb0ee59cc50caf85402e92d148fdb2af61bc19","4fc28d227571aea72029cf9096fcf7d3865a6b40"],"d4769bdea5a853f1841c485bc1fd9d79cb7022fc":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4fc28d227571aea72029cf9096fcf7d3865a6b40":["d4769bdea5a853f1841c485bc1fd9d79cb7022fc"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"d4769bdea5a853f1841c485bc1fd9d79cb7022fc":["4fc28d227571aea72029cf9096fcf7d3865a6b40"],"4fc28d227571aea72029cf9096fcf7d3865a6b40":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}