{"path":"src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","commits":[{"id":"b1405362241b561f5590ff4a87d5d6e173bcd9cf","date":1190107634,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n    try {\n\n      flush(true, true);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n\n      mergeScheduler.close();\n\n      if (commitPending) {\n        boolean success = false;\n        try {\n          segmentInfos.write(directory);         // now commit changes\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception committing segments file during close\");\n            deletePartialSegmentsFile();\n          }\n        }\n        if (infoStream != null)\n          message(\"close: wrote segments file \\\"\" + segmentInfos.getCurrentSegmentFileName() + \"\\\"\");\n        synchronized(this) {\n          deleter.checkpoint(segmentInfos, true);\n        }\n        commitPending = false;\n        rollbackSegmentInfos = null;\n      }\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      closed = true;\n      docWriter = null;\n\n      synchronized(this) {\n        deleter.close();\n      }\n      \n      if (closeDir)\n        directory.close();\n    } finally {\n      synchronized(this) {\n        if (!closed)\n          closing = false;\n        notifyAll();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ae695f21c50b03702b5d0fa2543d5af844bb7cd3","346d5897e4c4e77ed5dbd31f7730ff30973d5971","c619aff1490fbcbfb8aee81049da5e5120a986d6","c507fbcc682939239c013568bca7ca40ea6bd844"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2e0d75d47683f1bcf4a7c6de9d79ac3b91de51c4","date":1190750527,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","sourceNew":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n    try {\n\n      flush(true, true);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n\n      mergeScheduler.close();\n\n      if (commitPending) {\n        boolean success = false;\n        try {\n          segmentInfos.write(directory);         // now commit changes\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception committing segments file during close\");\n            deletePartialSegmentsFile();\n          }\n        }\n        if (infoStream != null)\n          message(\"close: wrote segments file \\\"\" + segmentInfos.getCurrentSegmentFileName() + \"\\\"\");\n        synchronized(this) {\n          deleter.checkpoint(segmentInfos, true);\n        }\n        commitPending = false;\n        rollbackSegmentInfos = null;\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      closed = true;\n      docWriter = null;\n\n      synchronized(this) {\n        deleter.close();\n      }\n      \n      if (closeDir)\n        directory.close();\n    } finally {\n      synchronized(this) {\n        if (!closed)\n          closing = false;\n        notifyAll();\n      }\n    }\n  }\n\n","sourceOld":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n    try {\n\n      flush(true, true);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n\n      mergeScheduler.close();\n\n      if (commitPending) {\n        boolean success = false;\n        try {\n          segmentInfos.write(directory);         // now commit changes\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception committing segments file during close\");\n            deletePartialSegmentsFile();\n          }\n        }\n        if (infoStream != null)\n          message(\"close: wrote segments file \\\"\" + segmentInfos.getCurrentSegmentFileName() + \"\\\"\");\n        synchronized(this) {\n          deleter.checkpoint(segmentInfos, true);\n        }\n        commitPending = false;\n        rollbackSegmentInfos = null;\n      }\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      closed = true;\n      docWriter = null;\n\n      synchronized(this) {\n        deleter.close();\n      }\n      \n      if (closeDir)\n        directory.close();\n    } finally {\n      synchronized(this) {\n        if (!closed)\n          closing = false;\n        notifyAll();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["346d5897e4c4e77ed5dbd31f7730ff30973d5971"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"67006a60923e2124212d3baa0d29b444bcbd8373","date":1191425052,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","sourceNew":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      flush(true, true);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n\n      mergeScheduler.close();\n\n      if (commitPending) {\n        boolean success = false;\n        try {\n          segmentInfos.write(directory);         // now commit changes\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception committing segments file during close\");\n            deletePartialSegmentsFile();\n          }\n        }\n        if (infoStream != null)\n          message(\"close: wrote segments file \\\"\" + segmentInfos.getCurrentSegmentFileName() + \"\\\"\");\n        synchronized(this) {\n          deleter.checkpoint(segmentInfos, true);\n        }\n        commitPending = false;\n        rollbackSegmentInfos = null;\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      closed = true;\n      docWriter = null;\n\n      synchronized(this) {\n        deleter.close();\n      }\n      \n      if (closeDir)\n        directory.close();\n    } finally {\n      synchronized(this) {\n        if (!closed)\n          closing = false;\n        notifyAll();\n      }\n    }\n  }\n\n","sourceOld":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n    try {\n\n      flush(true, true);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n\n      mergeScheduler.close();\n\n      if (commitPending) {\n        boolean success = false;\n        try {\n          segmentInfos.write(directory);         // now commit changes\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception committing segments file during close\");\n            deletePartialSegmentsFile();\n          }\n        }\n        if (infoStream != null)\n          message(\"close: wrote segments file \\\"\" + segmentInfos.getCurrentSegmentFileName() + \"\\\"\");\n        synchronized(this) {\n          deleter.checkpoint(segmentInfos, true);\n        }\n        commitPending = false;\n        rollbackSegmentInfos = null;\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      closed = true;\n      docWriter = null;\n\n      synchronized(this) {\n        deleter.close();\n      }\n      \n      if (closeDir)\n        directory.close();\n    } finally {\n      synchronized(this) {\n        if (!closed)\n          closing = false;\n        notifyAll();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c507fbcc682939239c013568bca7ca40ea6bd844","date":1191683563,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","sourceNew":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      flush(waitForMerges, true);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n\n      mergeScheduler.close();\n\n      if (commitPending) {\n        boolean success = false;\n        try {\n          segmentInfos.write(directory);         // now commit changes\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception committing segments file during close\");\n            deletePartialSegmentsFile();\n          }\n        }\n        if (infoStream != null)\n          message(\"close: wrote segments file \\\"\" + segmentInfos.getCurrentSegmentFileName() + \"\\\"\");\n        synchronized(this) {\n          deleter.checkpoint(segmentInfos, true);\n        }\n        commitPending = false;\n        rollbackSegmentInfos = null;\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      closed = true;\n      docWriter = null;\n\n      synchronized(this) {\n        deleter.close();\n      }\n      \n      if (closeDir)\n        directory.close();\n    } finally {\n      synchronized(this) {\n        if (!closed)\n          closing = false;\n        notifyAll();\n      }\n    }\n  }\n\n","sourceOld":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      flush(true, true);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n\n      mergeScheduler.close();\n\n      if (commitPending) {\n        boolean success = false;\n        try {\n          segmentInfos.write(directory);         // now commit changes\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception committing segments file during close\");\n            deletePartialSegmentsFile();\n          }\n        }\n        if (infoStream != null)\n          message(\"close: wrote segments file \\\"\" + segmentInfos.getCurrentSegmentFileName() + \"\\\"\");\n        synchronized(this) {\n          deleter.checkpoint(segmentInfos, true);\n        }\n        commitPending = false;\n        rollbackSegmentInfos = null;\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      closed = true;\n      docWriter = null;\n\n      synchronized(this) {\n        deleter.close();\n      }\n      \n      if (closeDir)\n        directory.close();\n    } finally {\n      synchronized(this) {\n        if (!closed)\n          closing = false;\n        notifyAll();\n      }\n    }\n  }\n\n","bugFix":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2cf040795587947011604327cf9538e12d298d8b","date":1195159374,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","sourceNew":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      flush(waitForMerges, true);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n\n      mergeScheduler.close();\n\n      if (commitPending) {\n        boolean success = false;\n        try {\n          segmentInfos.write(directory);         // now commit changes\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception committing segments file during close\");\n            deletePartialSegmentsFile();\n          }\n        }\n        if (infoStream != null)\n          message(\"close: wrote segments file \\\"\" + segmentInfos.getCurrentSegmentFileName() + \"\\\"\");\n        synchronized(this) {\n          deleter.checkpoint(segmentInfos, true);\n        }\n        commitPending = false;\n        rollbackSegmentInfos = null;\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      docWriter = null;\n\n      synchronized(this) {\n        deleter.close();\n      }\n      \n      if (closeDir)\n        directory.close();\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      closed = true;\n\n    } finally {\n      synchronized(this) {\n        if (!closed)\n          closing = false;\n        notifyAll();\n      }\n    }\n  }\n\n","sourceOld":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      flush(waitForMerges, true);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n\n      mergeScheduler.close();\n\n      if (commitPending) {\n        boolean success = false;\n        try {\n          segmentInfos.write(directory);         // now commit changes\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception committing segments file during close\");\n            deletePartialSegmentsFile();\n          }\n        }\n        if (infoStream != null)\n          message(\"close: wrote segments file \\\"\" + segmentInfos.getCurrentSegmentFileName() + \"\\\"\");\n        synchronized(this) {\n          deleter.checkpoint(segmentInfos, true);\n        }\n        commitPending = false;\n        rollbackSegmentInfos = null;\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      closed = true;\n      docWriter = null;\n\n      synchronized(this) {\n        deleter.close();\n      }\n      \n      if (closeDir)\n        directory.close();\n    } finally {\n      synchronized(this) {\n        if (!closed)\n          closing = false;\n        notifyAll();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["0fcdcf196523675146a4df3193e91413533857ab"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"346d5897e4c4e77ed5dbd31f7730ff30973d5971","date":1198317988,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","sourceNew":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      flush(waitForMerges, true);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n\n      mergeScheduler.close();\n\n      synchronized(this) {\n        if (commitPending) {\n          boolean success = false;\n          try {\n            segmentInfos.write(directory);         // now commit changes\n            success = true;\n          } finally {\n            if (!success) {\n              if (infoStream != null)\n                message(\"hit exception committing segments file during close\");\n              deletePartialSegmentsFile();\n            }\n          }\n          if (infoStream != null)\n            message(\"close: wrote segments file \\\"\" + segmentInfos.getCurrentSegmentFileName() + \"\\\"\");\n\n          deleter.checkpoint(segmentInfos, true);\n\n          commitPending = false;\n          rollbackSegmentInfos = null;\n        }\n\n        if (infoStream != null)\n          message(\"at close: \" + segString());\n\n        docWriter = null;\n\n        deleter.close();\n      }\n      \n      if (closeDir)\n        directory.close();\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      closed = true;\n\n    } finally {\n      synchronized(this) {\n        if (!closed)\n          closing = false;\n        notifyAll();\n      }\n    }\n  }\n\n","sourceOld":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      flush(waitForMerges, true);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n\n      mergeScheduler.close();\n\n      if (commitPending) {\n        boolean success = false;\n        try {\n          segmentInfos.write(directory);         // now commit changes\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception committing segments file during close\");\n            deletePartialSegmentsFile();\n          }\n        }\n        if (infoStream != null)\n          message(\"close: wrote segments file \\\"\" + segmentInfos.getCurrentSegmentFileName() + \"\\\"\");\n        synchronized(this) {\n          deleter.checkpoint(segmentInfos, true);\n        }\n        commitPending = false;\n        rollbackSegmentInfos = null;\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      docWriter = null;\n\n      synchronized(this) {\n        deleter.close();\n      }\n      \n      if (closeDir)\n        directory.close();\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      closed = true;\n\n    } finally {\n      synchronized(this) {\n        if (!closed)\n          closing = false;\n        notifyAll();\n      }\n    }\n  }\n\n","bugFix":["b1405362241b561f5590ff4a87d5d6e173bcd9cf","2e0d75d47683f1bcf4a7c6de9d79ac3b91de51c4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e82780afe6097066eb5befb86e9432f077667e3d","date":1202756169,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","sourceNew":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      flush(waitForMerges, true);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final sync()\");\n\n      sync(true, 0);\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (closeDir)\n        directory.close();\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n\n    } finally {\n      synchronized(this) {\n        if (!closed)\n          closing = false;\n        notifyAll();\n      }\n    }\n  }\n\n","sourceOld":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      flush(waitForMerges, true);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n\n      mergeScheduler.close();\n\n      synchronized(this) {\n        if (commitPending) {\n          boolean success = false;\n          try {\n            segmentInfos.write(directory);         // now commit changes\n            success = true;\n          } finally {\n            if (!success) {\n              if (infoStream != null)\n                message(\"hit exception committing segments file during close\");\n              deletePartialSegmentsFile();\n            }\n          }\n          if (infoStream != null)\n            message(\"close: wrote segments file \\\"\" + segmentInfos.getCurrentSegmentFileName() + \"\\\"\");\n\n          deleter.checkpoint(segmentInfos, true);\n\n          commitPending = false;\n          rollbackSegmentInfos = null;\n        }\n\n        if (infoStream != null)\n          message(\"at close: \" + segString());\n\n        docWriter = null;\n\n        deleter.close();\n      }\n      \n      if (closeDir)\n        directory.close();\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      closed = true;\n\n    } finally {\n      synchronized(this) {\n        if (!closed)\n          closing = false;\n        notifyAll();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["03805a62fcc9481b8a440bacb644519a7035c2d8","c619aff1490fbcbfb8aee81049da5e5120a986d6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"01deb9e9fb9dbd5fddce32a5fcd952bbb611fe63","date":1204234542,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","sourceNew":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      flush(waitForMerges, true);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final sync()\");\n\n      sync(true, 0);\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (closeDir)\n        directory.close();\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      hitOOM = true;\n      throw oom;\n    } finally {\n      synchronized(this) {\n        if (!closed)\n          closing = false;\n        notifyAll();\n      }\n    }\n  }\n\n","sourceOld":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      flush(waitForMerges, true);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final sync()\");\n\n      sync(true, 0);\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (closeDir)\n        directory.close();\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n\n    } finally {\n      synchronized(this) {\n        if (!closed)\n          closing = false;\n        notifyAll();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["cd488f50316362b01a7f67b11a96796b9652e3e5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be","date":1204801324,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","sourceNew":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      flush(waitForMerges, true, true);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n\n      commit(true, 0);\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (closeDir)\n        directory.close();\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      hitOOM = true;\n      throw oom;\n    } finally {\n      synchronized(this) {\n        if (!closed)\n          closing = false;\n        notifyAll();\n      }\n    }\n  }\n\n","sourceOld":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      flush(waitForMerges, true);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final sync()\");\n\n      sync(true, 0);\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (closeDir)\n        directory.close();\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      hitOOM = true;\n      throw oom;\n    } finally {\n      synchronized(this) {\n        if (!closed)\n          closing = false;\n        notifyAll();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["cd488f50316362b01a7f67b11a96796b9652e3e5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f51cb06175d6fae01dc608dd7ab884973354e4bf","date":1207240926,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","sourceNew":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      flush(waitForMerges, true, true);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n\n      commit(true, 0);\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (closeDir)\n        directory.close();\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      hitOOM = true;\n      throw oom;\n    } finally {\n      synchronized(this) {\n        if (!closed) {\n          closing = false;\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n        notifyAll();\n      }\n    }\n  }\n\n","sourceOld":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      flush(waitForMerges, true, true);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n\n      commit(true, 0);\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (closeDir)\n        directory.close();\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      hitOOM = true;\n      throw oom;\n    } finally {\n      synchronized(this) {\n        if (!closed)\n          closing = false;\n        notifyAll();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["c619aff1490fbcbfb8aee81049da5e5120a986d6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"56454c8024f29ab494bb7c6b9934104c4a2c7b55","date":1208979441,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","sourceNew":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      flush(waitForMerges, true, true);\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n\n      commit(true, 0);\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (closeDir)\n        directory.close();\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      hitOOM = true;\n      throw oom;\n    } finally {\n      synchronized(this) {\n        if (!closed) {\n          closing = false;\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n        notifyAll();\n      }\n    }\n  }\n\n","sourceOld":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      flush(waitForMerges, true, true);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n\n      commit(true, 0);\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (closeDir)\n        directory.close();\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      hitOOM = true;\n      throw oom;\n    } finally {\n      synchronized(this) {\n        if (!closed) {\n          closing = false;\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n        notifyAll();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"455aeff4fef915340c5b19d71d5e147034e83093","date":1210099270,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","sourceNew":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      flush(waitForMerges, true, true);\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n\n      commit(0);\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (closeDir)\n        directory.close();\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      hitOOM = true;\n      throw oom;\n    } finally {\n      synchronized(this) {\n        if (!closed) {\n          closing = false;\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n        notifyAll();\n      }\n    }\n  }\n\n","sourceOld":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      flush(waitForMerges, true, true);\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n\n      commit(true, 0);\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (closeDir)\n        directory.close();\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      hitOOM = true;\n      throw oom;\n    } finally {\n      synchronized(this) {\n        if (!closed) {\n          closing = false;\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n        notifyAll();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["cd488f50316362b01a7f67b11a96796b9652e3e5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c619aff1490fbcbfb8aee81049da5e5120a986d6","date":1217432296,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","sourceNew":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      flush(waitForMerges, true, true);\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n      \n      commit(0);\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (closeDir)\n        directory.close();\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      hitOOM = true;\n      throw oom;\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed && infoStream != null)\n          message(\"hit exception while closing\");\n      }\n    }\n  }\n\n","sourceOld":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      flush(waitForMerges, true, true);\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n\n      commit(0);\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (closeDir)\n        directory.close();\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      hitOOM = true;\n      throw oom;\n    } finally {\n      synchronized(this) {\n        if (!closed) {\n          closing = false;\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n        notifyAll();\n      }\n    }\n  }\n\n","bugFix":["b1405362241b561f5590ff4a87d5d6e173bcd9cf","f51cb06175d6fae01dc608dd7ab884973354e4bf","e82780afe6097066eb5befb86e9432f077667e3d"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2586f96f60332eb97ecd2934b0763791462568b2","date":1220116589,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","sourceNew":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    docWriter.pauseAllThreads();\n\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      flush(waitForMerges, true, true);\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n      \n      commit(0);\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (closeDir)\n        directory.close();\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      hitOOM = true;\n      throw oom;\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (docWriter != null)\n            docWriter.resumeAllThreads();\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      flush(waitForMerges, true, true);\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n      \n      commit(0);\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (closeDir)\n        directory.close();\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      hitOOM = true;\n      throw oom;\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed && infoStream != null)\n          message(\"hit exception while closing\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c4ff8864209d2e972cb4393600c26082f9a6533d","date":1239297466,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","sourceNew":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    docWriter.pauseAllThreads();\n\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      flush(waitForMerges, true, true);\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n      \n      commit(0);\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (closeDir)\n        directory.close();\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      hitOOM = true;\n      throw oom;\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (docWriter != null)\n            docWriter.resumeAllThreads();\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    docWriter.pauseAllThreads();\n\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      flush(waitForMerges, true, true);\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n      \n      commit(0);\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (closeDir)\n        directory.close();\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      hitOOM = true;\n      throw oom;\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (docWriter != null)\n            docWriter.resumeAllThreads();\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cd488f50316362b01a7f67b11a96796b9652e3e5","date":1241121034,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","sourceNew":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    docWriter.pauseAllThreads();\n\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n      \n      if (!hitOOM) {\n        commit(0);\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (closeDir)\n        directory.close();\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (docWriter != null)\n            docWriter.resumeAllThreads();\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    docWriter.pauseAllThreads();\n\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      flush(waitForMerges, true, true);\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n      \n      commit(0);\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (closeDir)\n        directory.close();\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      hitOOM = true;\n      throw oom;\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (docWriter != null)\n            docWriter.resumeAllThreads();\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","bugFix":["01deb9e9fb9dbd5fddce32a5fcd952bbb611fe63","a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be","455aeff4fef915340c5b19d71d5e147034e83093"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"188b5f262500725c098aef66ca1a2abcd71ae8af","date":1242856475,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","sourceNew":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    docWriter.pauseAllThreads();\n\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n      stopMerges = true;\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n      \n      if (!hitOOM) {\n        commit(0);\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (closeDir)\n        directory.close();\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (docWriter != null)\n            docWriter.resumeAllThreads();\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    docWriter.pauseAllThreads();\n\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n      \n      if (!hitOOM) {\n        commit(0);\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (closeDir)\n        directory.close();\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (docWriter != null)\n            docWriter.resumeAllThreads();\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"eaea03be31988a41275d45a429ac71ff0ad740fb","date":1254612554,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","sourceNew":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    docWriter.pauseAllThreads();\n\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n      stopMerges = true;\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n      \n      if (!hitOOM) {\n        commit(0);\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (docWriter != null)\n            docWriter.resumeAllThreads();\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    docWriter.pauseAllThreads();\n\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n      stopMerges = true;\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n      \n      if (!hitOOM) {\n        commit(0);\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (closeDir)\n        directory.close();\n\n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (docWriter != null)\n            docWriter.resumeAllThreads();\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#closeInternal(boolean).mjava","sourceNew":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    docWriter.pauseAllThreads();\n\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n      stopMerges = true;\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n      \n      if (!hitOOM) {\n        commit(0);\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (docWriter != null)\n            docWriter.resumeAllThreads();\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void closeInternal(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    docWriter.pauseAllThreads();\n\n    try {\n      if (infoStream != null)\n        message(\"now flush at close\");\n\n      docWriter.close();\n\n      // Only allow a new merge to be triggered if we are\n      // going to wait for merges:\n      if (!hitOOM) {\n        flush(waitForMerges, true, true);\n      }\n\n      if (waitForMerges)\n        // Give merge scheduler last chance to run, in case\n        // any pending merges are waiting:\n        mergeScheduler.merge(this);\n\n      mergePolicy.close();\n\n      finishMerges(waitForMerges);\n      stopMerges = true;\n\n      mergeScheduler.close();\n\n      if (infoStream != null)\n        message(\"now call final commit()\");\n      \n      if (!hitOOM) {\n        commit(0);\n      }\n\n      if (infoStream != null)\n        message(\"at close: \" + segString());\n\n      synchronized(this) {\n        readerPool.close();\n        docWriter = null;\n        deleter.close();\n      }\n      \n      if (writeLock != null) {\n        writeLock.release();                          // release write lock\n        writeLock = null;\n      }\n      synchronized(this) {\n        closed = true;\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"closeInternal\");\n    } finally {\n      synchronized(this) {\n        closing = false;\n        notifyAll();\n        if (!closed) {\n          if (docWriter != null)\n            docWriter.resumeAllThreads();\n          if (infoStream != null)\n            message(\"hit exception while closing\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"eaea03be31988a41275d45a429ac71ff0ad740fb":["188b5f262500725c098aef66ca1a2abcd71ae8af"],"56454c8024f29ab494bb7c6b9934104c4a2c7b55":["f51cb06175d6fae01dc608dd7ab884973354e4bf"],"346d5897e4c4e77ed5dbd31f7730ff30973d5971":["2cf040795587947011604327cf9538e12d298d8b"],"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"455aeff4fef915340c5b19d71d5e147034e83093":["56454c8024f29ab494bb7c6b9934104c4a2c7b55"],"67006a60923e2124212d3baa0d29b444bcbd8373":["2e0d75d47683f1bcf4a7c6de9d79ac3b91de51c4"],"c4ff8864209d2e972cb4393600c26082f9a6533d":["2586f96f60332eb97ecd2934b0763791462568b2"],"f51cb06175d6fae01dc608dd7ab884973354e4bf":["a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be"],"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be":["01deb9e9fb9dbd5fddce32a5fcd952bbb611fe63"],"c507fbcc682939239c013568bca7ca40ea6bd844":["67006a60923e2124212d3baa0d29b444bcbd8373"],"188b5f262500725c098aef66ca1a2abcd71ae8af":["cd488f50316362b01a7f67b11a96796b9652e3e5"],"2e0d75d47683f1bcf4a7c6de9d79ac3b91de51c4":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"cd488f50316362b01a7f67b11a96796b9652e3e5":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"c619aff1490fbcbfb8aee81049da5e5120a986d6":["455aeff4fef915340c5b19d71d5e147034e83093"],"01deb9e9fb9dbd5fddce32a5fcd952bbb611fe63":["e82780afe6097066eb5befb86e9432f077667e3d"],"2cf040795587947011604327cf9538e12d298d8b":["c507fbcc682939239c013568bca7ca40ea6bd844"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e82780afe6097066eb5befb86e9432f077667e3d":["346d5897e4c4e77ed5dbd31f7730ff30973d5971"],"2586f96f60332eb97ecd2934b0763791462568b2":["c619aff1490fbcbfb8aee81049da5e5120a986d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["eaea03be31988a41275d45a429ac71ff0ad740fb"]},"commit2Childs":{"eaea03be31988a41275d45a429ac71ff0ad740fb":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"56454c8024f29ab494bb7c6b9934104c4a2c7b55":["455aeff4fef915340c5b19d71d5e147034e83093"],"346d5897e4c4e77ed5dbd31f7730ff30973d5971":["e82780afe6097066eb5befb86e9432f077667e3d"],"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["2e0d75d47683f1bcf4a7c6de9d79ac3b91de51c4"],"455aeff4fef915340c5b19d71d5e147034e83093":["c619aff1490fbcbfb8aee81049da5e5120a986d6"],"67006a60923e2124212d3baa0d29b444bcbd8373":["c507fbcc682939239c013568bca7ca40ea6bd844"],"c4ff8864209d2e972cb4393600c26082f9a6533d":["cd488f50316362b01a7f67b11a96796b9652e3e5"],"f51cb06175d6fae01dc608dd7ab884973354e4bf":["56454c8024f29ab494bb7c6b9934104c4a2c7b55"],"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be":["f51cb06175d6fae01dc608dd7ab884973354e4bf"],"c507fbcc682939239c013568bca7ca40ea6bd844":["2cf040795587947011604327cf9538e12d298d8b"],"188b5f262500725c098aef66ca1a2abcd71ae8af":["eaea03be31988a41275d45a429ac71ff0ad740fb"],"2e0d75d47683f1bcf4a7c6de9d79ac3b91de51c4":["67006a60923e2124212d3baa0d29b444bcbd8373"],"01deb9e9fb9dbd5fddce32a5fcd952bbb611fe63":["a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be"],"cd488f50316362b01a7f67b11a96796b9652e3e5":["188b5f262500725c098aef66ca1a2abcd71ae8af"],"c619aff1490fbcbfb8aee81049da5e5120a986d6":["2586f96f60332eb97ecd2934b0763791462568b2"],"2cf040795587947011604327cf9538e12d298d8b":["346d5897e4c4e77ed5dbd31f7730ff30973d5971"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"e82780afe6097066eb5befb86e9432f077667e3d":["01deb9e9fb9dbd5fddce32a5fcd952bbb611fe63"],"2586f96f60332eb97ecd2934b0763791462568b2":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}