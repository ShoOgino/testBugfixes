{"path":"lucene/core/src/test/org/apache/lucene/document/TestLatLonLineShapeQueries#randomQueryLine(Object...).mjava","commits":[{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestLatLonLineShapeQueries#randomQueryLine(Object...).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonLineShapeQueries#randomQueryLine(Object...).mjava","sourceNew":"  @Override\n  protected Line randomQueryLine(Object... shapes) {\n    if (random().nextInt(100) == 42) {\n      // we want to ensure some cross, so randomly generate lines that share vertices with the indexed point set\n      int maxBound = (int)Math.floor(shapes.length * 0.1d);\n      if (maxBound < 2) {\n        maxBound = shapes.length;\n      }\n      double[] lats = new double[RandomNumbers.randomIntBetween(random(), 2, maxBound)];\n      double[] lons = new double[lats.length];\n      for (int i = 0, j = 0; j < lats.length && i < shapes.length; ++i, ++j) {\n        Line l = (Line) (shapes[i]);\n        if (random().nextBoolean() && l != null) {\n          int v = random().nextInt(l.numPoints() - 1);\n          lats[j] = l.getLat(v);\n          lons[j] = l.getLon(v);\n        } else {\n          lats[j] = GeoTestUtil.nextLatitude();\n          lons[j] = GeoTestUtil.nextLongitude();\n        }\n      }\n      return new Line(lats, lons);\n    }\n    return nextLine();\n  }\n\n","sourceOld":"  @Override\n  protected Line randomQueryLine(Object... shapes) {\n    if (random().nextInt(100) == 42) {\n      // we want to ensure some cross, so randomly generate lines that share vertices with the indexed point set\n      int maxBound = (int)Math.floor(shapes.length * 0.1d);\n      if (maxBound < 2) {\n        maxBound = shapes.length;\n      }\n      double[] lats = new double[RandomNumbers.randomIntBetween(random(), 2, maxBound)];\n      double[] lons = new double[lats.length];\n      for (int i = 0, j = 0; j < lats.length && i < shapes.length; ++i, ++j) {\n        Line l = (Line) (shapes[i]);\n        if (random().nextBoolean() && l != null) {\n          int v = random().nextInt(l.numPoints() - 1);\n          lats[j] = l.getLat(v);\n          lons[j] = l.getLon(v);\n        } else {\n          lats[j] = GeoTestUtil.nextLatitude();\n          lons[j] = GeoTestUtil.nextLongitude();\n        }\n      }\n      return new Line(lats, lons);\n    }\n    return nextLine();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}