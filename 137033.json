{"path":"lucene/sandbox/src/test/org/apache/lucene/document/BaseLatLonShapeTestCase#testBoxQueryEqualsAndHashcode().mjava","commits":[{"id":"3ce123a3a72bdb4247b2598c6fc27090bda46577","date":1559743030,"type":0,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/BaseLatLonShapeTestCase#testBoxQueryEqualsAndHashcode().mjava","pathOld":"/dev/null","sourceNew":"  public void testBoxQueryEqualsAndHashcode() {\n    Rectangle rectangle = GeoTestUtil.nextBox();\n    QueryRelation queryRelation = RandomPicks.randomFrom(random(), QueryRelation.values());\n    String fieldName = \"foo\";\n    Query q1 = newRectQuery(fieldName, queryRelation, rectangle.minLat, rectangle.maxLat, rectangle.minLon, rectangle.maxLon);\n    Query q2 = newRectQuery(fieldName, queryRelation, rectangle.minLat, rectangle.maxLat, rectangle.minLon, rectangle.maxLon);\n    QueryUtils.checkEqual(q1, q2);\n    //different field name\n    Query q3 = newRectQuery(\"bar\", queryRelation, rectangle.minLat, rectangle.maxLat, rectangle.minLon, rectangle.maxLon);\n    QueryUtils.checkUnequal(q1, q3);\n    //different query relation\n    QueryRelation newQueryRelation = RandomPicks.randomFrom(random(), QueryRelation.values());\n    Query q4 = newRectQuery(fieldName, newQueryRelation, rectangle.minLat, rectangle.maxLat, rectangle.minLon, rectangle.maxLon);\n    if (queryRelation == newQueryRelation) {\n      QueryUtils.checkEqual(q1, q4);\n    } else {\n      QueryUtils.checkUnequal(q1, q4);\n    }\n    //different shape\n    Rectangle newRectangle = GeoTestUtil.nextBox();;\n    Query q5 = newRectQuery(fieldName, queryRelation, newRectangle.minLat, newRectangle.maxLat, newRectangle.minLon, newRectangle.maxLon);\n    if (rectangle.equals(newRectangle)) {\n      QueryUtils.checkEqual(q1, q5);\n    } else {\n      QueryUtils.checkUnequal(q1, q5);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c286b0d8c507a88b289407e2fe161effa275c6b0","date":1562615977,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/BaseLatLonShapeTestCase#testBoxQueryEqualsAndHashcode().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/BaseLatLonShapeTestCase#testBoxQueryEqualsAndHashcode().mjava","sourceNew":"  public void testBoxQueryEqualsAndHashcode() {\n    Rectangle rectangle = GeoTestUtil.nextBox();\n    QueryRelation queryRelation = RandomPicks.randomFrom(random(), QueryRelation.values());\n    String fieldName = \"foo\";\n    Query q1 = newRectQuery(fieldName, queryRelation, rectangle.minLon, rectangle.maxLon, rectangle.minLat, rectangle.maxLat);\n    Query q2 = newRectQuery(fieldName, queryRelation, rectangle.minLon, rectangle.maxLon, rectangle.minLat, rectangle.maxLat);\n    QueryUtils.checkEqual(q1, q2);\n    //different field name\n    Query q3 = newRectQuery(\"bar\", queryRelation, rectangle.minLon, rectangle.maxLon, rectangle.minLat, rectangle.maxLat);\n    QueryUtils.checkUnequal(q1, q3);\n    //different query relation\n    QueryRelation newQueryRelation = RandomPicks.randomFrom(random(), QueryRelation.values());\n    Query q4 = newRectQuery(fieldName, newQueryRelation, rectangle.minLon, rectangle.maxLon, rectangle.minLat, rectangle.maxLat);\n    if (queryRelation == newQueryRelation) {\n      QueryUtils.checkEqual(q1, q4);\n    } else {\n      QueryUtils.checkUnequal(q1, q4);\n    }\n    //different shape\n    Rectangle newRectangle = GeoTestUtil.nextBox();\n    Query q5 = newRectQuery(fieldName, queryRelation, rectangle.minLon, rectangle.maxLon, newRectangle.minLat, newRectangle.maxLat);\n    if (rectangle.equals(newRectangle)) {\n      QueryUtils.checkEqual(q1, q5);\n    } else {\n      QueryUtils.checkUnequal(q1, q5);\n    }\n  }\n\n","sourceOld":"  public void testBoxQueryEqualsAndHashcode() {\n    Rectangle rectangle = GeoTestUtil.nextBox();\n    QueryRelation queryRelation = RandomPicks.randomFrom(random(), QueryRelation.values());\n    String fieldName = \"foo\";\n    Query q1 = newRectQuery(fieldName, queryRelation, rectangle.minLat, rectangle.maxLat, rectangle.minLon, rectangle.maxLon);\n    Query q2 = newRectQuery(fieldName, queryRelation, rectangle.minLat, rectangle.maxLat, rectangle.minLon, rectangle.maxLon);\n    QueryUtils.checkEqual(q1, q2);\n    //different field name\n    Query q3 = newRectQuery(\"bar\", queryRelation, rectangle.minLat, rectangle.maxLat, rectangle.minLon, rectangle.maxLon);\n    QueryUtils.checkUnequal(q1, q3);\n    //different query relation\n    QueryRelation newQueryRelation = RandomPicks.randomFrom(random(), QueryRelation.values());\n    Query q4 = newRectQuery(fieldName, newQueryRelation, rectangle.minLat, rectangle.maxLat, rectangle.minLon, rectangle.maxLon);\n    if (queryRelation == newQueryRelation) {\n      QueryUtils.checkEqual(q1, q4);\n    } else {\n      QueryUtils.checkUnequal(q1, q4);\n    }\n    //different shape\n    Rectangle newRectangle = GeoTestUtil.nextBox();;\n    Query q5 = newRectQuery(fieldName, queryRelation, newRectangle.minLat, newRectangle.maxLat, newRectangle.minLon, newRectangle.maxLon);\n    if (rectangle.equals(newRectangle)) {\n      QueryUtils.checkEqual(q1, q5);\n    } else {\n      QueryUtils.checkUnequal(q1, q5);\n    }\n  }\n\n","bugFix":null,"bugIntro":["166c4f221bd306bd90af100d1bb794d8708e603f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"166c4f221bd306bd90af100d1bb794d8708e603f","date":1563427251,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/BaseLatLonShapeTestCase#testBoxQueryEqualsAndHashcode().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/BaseLatLonShapeTestCase#testBoxQueryEqualsAndHashcode().mjava","sourceNew":"  public void testBoxQueryEqualsAndHashcode() {\n    Rectangle rectangle = GeoTestUtil.nextBox();\n    QueryRelation queryRelation = RandomPicks.randomFrom(random(), QueryRelation.values());\n    String fieldName = \"foo\";\n    Query q1 = newRectQuery(fieldName, queryRelation, rectangle.minLon, rectangle.maxLon, rectangle.minLat, rectangle.maxLat);\n    Query q2 = newRectQuery(fieldName, queryRelation, rectangle.minLon, rectangle.maxLon, rectangle.minLat, rectangle.maxLat);\n    QueryUtils.checkEqual(q1, q2);\n    //different field name\n    Query q3 = newRectQuery(\"bar\", queryRelation, rectangle.minLon, rectangle.maxLon, rectangle.minLat, rectangle.maxLat);\n    QueryUtils.checkUnequal(q1, q3);\n    //different query relation\n    QueryRelation newQueryRelation = RandomPicks.randomFrom(random(), QueryRelation.values());\n    Query q4 = newRectQuery(fieldName, newQueryRelation, rectangle.minLon, rectangle.maxLon, rectangle.minLat, rectangle.maxLat);\n    if (queryRelation == newQueryRelation) {\n      QueryUtils.checkEqual(q1, q4);\n    } else {\n      QueryUtils.checkUnequal(q1, q4);\n    }\n    //different shape\n    Rectangle newRectangle = GeoTestUtil.nextBox();\n    Query q5 = newRectQuery(fieldName, queryRelation, newRectangle.minLon, newRectangle.maxLon, newRectangle.minLat, newRectangle.maxLat);\n    if (rectangle.equals(newRectangle)) {\n      QueryUtils.checkEqual(q1, q5);\n    } else {\n      QueryUtils.checkUnequal(q1, q5);\n    }\n  }\n\n","sourceOld":"  public void testBoxQueryEqualsAndHashcode() {\n    Rectangle rectangle = GeoTestUtil.nextBox();\n    QueryRelation queryRelation = RandomPicks.randomFrom(random(), QueryRelation.values());\n    String fieldName = \"foo\";\n    Query q1 = newRectQuery(fieldName, queryRelation, rectangle.minLon, rectangle.maxLon, rectangle.minLat, rectangle.maxLat);\n    Query q2 = newRectQuery(fieldName, queryRelation, rectangle.minLon, rectangle.maxLon, rectangle.minLat, rectangle.maxLat);\n    QueryUtils.checkEqual(q1, q2);\n    //different field name\n    Query q3 = newRectQuery(\"bar\", queryRelation, rectangle.minLon, rectangle.maxLon, rectangle.minLat, rectangle.maxLat);\n    QueryUtils.checkUnequal(q1, q3);\n    //different query relation\n    QueryRelation newQueryRelation = RandomPicks.randomFrom(random(), QueryRelation.values());\n    Query q4 = newRectQuery(fieldName, newQueryRelation, rectangle.minLon, rectangle.maxLon, rectangle.minLat, rectangle.maxLat);\n    if (queryRelation == newQueryRelation) {\n      QueryUtils.checkEqual(q1, q4);\n    } else {\n      QueryUtils.checkUnequal(q1, q4);\n    }\n    //different shape\n    Rectangle newRectangle = GeoTestUtil.nextBox();\n    Query q5 = newRectQuery(fieldName, queryRelation, rectangle.minLon, rectangle.maxLon, newRectangle.minLat, newRectangle.maxLat);\n    if (rectangle.equals(newRectangle)) {\n      QueryUtils.checkEqual(q1, q5);\n    } else {\n      QueryUtils.checkUnequal(q1, q5);\n    }\n  }\n\n","bugFix":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/BaseLatLonShapeTestCase#testBoxQueryEqualsAndHashcode().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/BaseLatLonShapeTestCase#testBoxQueryEqualsAndHashcode().mjava","sourceNew":"  public void testBoxQueryEqualsAndHashcode() {\n    Rectangle rectangle = GeoTestUtil.nextBox();\n    QueryRelation queryRelation = RandomPicks.randomFrom(random(), QueryRelation.values());\n    String fieldName = \"foo\";\n    Query q1 = newRectQuery(fieldName, queryRelation, rectangle.minLon, rectangle.maxLon, rectangle.minLat, rectangle.maxLat);\n    Query q2 = newRectQuery(fieldName, queryRelation, rectangle.minLon, rectangle.maxLon, rectangle.minLat, rectangle.maxLat);\n    QueryUtils.checkEqual(q1, q2);\n    //different field name\n    Query q3 = newRectQuery(\"bar\", queryRelation, rectangle.minLon, rectangle.maxLon, rectangle.minLat, rectangle.maxLat);\n    QueryUtils.checkUnequal(q1, q3);\n    //different query relation\n    QueryRelation newQueryRelation = RandomPicks.randomFrom(random(), QueryRelation.values());\n    Query q4 = newRectQuery(fieldName, newQueryRelation, rectangle.minLon, rectangle.maxLon, rectangle.minLat, rectangle.maxLat);\n    if (queryRelation == newQueryRelation) {\n      QueryUtils.checkEqual(q1, q4);\n    } else {\n      QueryUtils.checkUnequal(q1, q4);\n    }\n    //different shape\n    Rectangle newRectangle = GeoTestUtil.nextBox();\n    Query q5 = newRectQuery(fieldName, queryRelation, newRectangle.minLon, newRectangle.maxLon, newRectangle.minLat, newRectangle.maxLat);\n    if (rectangle.equals(newRectangle)) {\n      QueryUtils.checkEqual(q1, q5);\n    } else {\n      QueryUtils.checkUnequal(q1, q5);\n    }\n  }\n\n","sourceOld":"  public void testBoxQueryEqualsAndHashcode() {\n    Rectangle rectangle = GeoTestUtil.nextBox();\n    QueryRelation queryRelation = RandomPicks.randomFrom(random(), QueryRelation.values());\n    String fieldName = \"foo\";\n    Query q1 = newRectQuery(fieldName, queryRelation, rectangle.minLon, rectangle.maxLon, rectangle.minLat, rectangle.maxLat);\n    Query q2 = newRectQuery(fieldName, queryRelation, rectangle.minLon, rectangle.maxLon, rectangle.minLat, rectangle.maxLat);\n    QueryUtils.checkEqual(q1, q2);\n    //different field name\n    Query q3 = newRectQuery(\"bar\", queryRelation, rectangle.minLon, rectangle.maxLon, rectangle.minLat, rectangle.maxLat);\n    QueryUtils.checkUnequal(q1, q3);\n    //different query relation\n    QueryRelation newQueryRelation = RandomPicks.randomFrom(random(), QueryRelation.values());\n    Query q4 = newRectQuery(fieldName, newQueryRelation, rectangle.minLon, rectangle.maxLon, rectangle.minLat, rectangle.maxLat);\n    if (queryRelation == newQueryRelation) {\n      QueryUtils.checkEqual(q1, q4);\n    } else {\n      QueryUtils.checkUnequal(q1, q4);\n    }\n    //different shape\n    Rectangle newRectangle = GeoTestUtil.nextBox();\n    Query q5 = newRectQuery(fieldName, queryRelation, newRectangle.minLon, newRectangle.maxLon, newRectangle.minLat, newRectangle.maxLat);\n    if (rectangle.equals(newRectangle)) {\n      QueryUtils.checkEqual(q1, q5);\n    } else {\n      QueryUtils.checkUnequal(q1, q5);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3ce123a3a72bdb4247b2598c6fc27090bda46577":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["166c4f221bd306bd90af100d1bb794d8708e603f"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["3ce123a3a72bdb4247b2598c6fc27090bda46577"],"166c4f221bd306bd90af100d1bb794d8708e603f":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"]},"commit2Childs":{"3ce123a3a72bdb4247b2598c6fc27090bda46577":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3ce123a3a72bdb4247b2598c6fc27090bda46577"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["166c4f221bd306bd90af100d1bb794d8708e603f"],"166c4f221bd306bd90af100d1bb794d8708e603f":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}