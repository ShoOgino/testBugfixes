{"path":"lucene/core/src/test/org/apache/lucene/search/TermInSetQueryTest#testHashCodeAndEquals().mjava","commits":[{"id":"8d73510b39df24d6b65de48e56f8dccb136b9d01","date":1483971905,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TermInSetQueryTest#testHashCodeAndEquals().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsQueryTest#testHashCodeAndEquals().mjava","sourceNew":"  public void testHashCodeAndEquals() {\n    int num = atLeast(100);\n    final boolean singleField = random().nextBoolean();\n    List<Term> terms = new ArrayList<>();\n    Set<Term> uniqueTerms = new HashSet<>();\n    for (int i = 0; i < num; i++) {\n      String field = \"field\" + (singleField ? \"1\" : random().nextInt(100));\n      String string = TestUtil.randomRealisticUnicodeString(random());\n      terms.add(new Term(field, string));\n      uniqueTerms.add(new Term(field, string));\n      TermInSetQuery left = termsQuery(singleField ? random().nextBoolean() : false, uniqueTerms);\n      Collections.shuffle(terms, random());\n      TermInSetQuery right = termsQuery(singleField ? random().nextBoolean() : false, terms);\n      assertEquals(right, left);\n      assertEquals(right.hashCode(), left.hashCode());\n      if (uniqueTerms.size() > 1) {\n        List<Term> asList = new ArrayList<>(uniqueTerms);\n        asList.remove(0);\n        TermInSetQuery notEqual = termsQuery(singleField ? random().nextBoolean() : false, asList);\n        assertFalse(left.equals(notEqual));\n        assertFalse(right.equals(notEqual));\n      }\n    }\n\n    TermInSetQuery tq1 = new TermInSetQuery(new Term(\"thing\", \"apple\"));\n    TermInSetQuery tq2 = new TermInSetQuery(new Term(\"thing\", \"orange\"));\n    assertFalse(tq1.hashCode() == tq2.hashCode());\n\n    // different fields with the same term should have differing hashcodes\n    tq1 = new TermInSetQuery(new Term(\"thing1\", \"apple\"));\n    tq2 = new TermInSetQuery(new Term(\"thing2\", \"apple\"));\n    assertFalse(tq1.hashCode() == tq2.hashCode());\n  }\n\n","sourceOld":"  public void testHashCodeAndEquals() {\n    int num = atLeast(100);\n    final boolean singleField = random().nextBoolean();\n    List<Term> terms = new ArrayList<>();\n    Set<Term> uniqueTerms = new HashSet<>();\n    for (int i = 0; i < num; i++) {\n      String field = \"field\" + (singleField ? \"1\" : random().nextInt(100));\n      String string = TestUtil.randomRealisticUnicodeString(random());\n      terms.add(new Term(field, string));\n      uniqueTerms.add(new Term(field, string));\n      TermsQuery left = termsQuery(singleField ? random().nextBoolean() : false, uniqueTerms);\n      Collections.shuffle(terms, random());\n      TermsQuery right = termsQuery(singleField ? random().nextBoolean() : false, terms);\n      assertEquals(right, left);\n      assertEquals(right.hashCode(), left.hashCode());\n      if (uniqueTerms.size() > 1) {\n        List<Term> asList = new ArrayList<>(uniqueTerms);\n        asList.remove(0);\n        TermsQuery notEqual = termsQuery(singleField ? random().nextBoolean() : false, asList);\n        assertFalse(left.equals(notEqual));\n        assertFalse(right.equals(notEqual));\n      }\n    }\n\n    TermsQuery tq1 = new TermsQuery(new Term(\"thing\", \"apple\"));\n    TermsQuery tq2 = new TermsQuery(new Term(\"thing\", \"orange\"));\n    assertFalse(tq1.hashCode() == tq2.hashCode());\n\n    // different fields with the same term should have differing hashcodes\n    tq1 = new TermsQuery(new Term(\"thing1\", \"apple\"));\n    tq2 = new TermsQuery(new Term(\"thing2\", \"apple\"));\n    assertFalse(tq1.hashCode() == tq2.hashCode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TermInSetQueryTest#testHashCodeAndEquals().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsQueryTest#testHashCodeAndEquals().mjava","sourceNew":"  public void testHashCodeAndEquals() {\n    int num = atLeast(100);\n    final boolean singleField = random().nextBoolean();\n    List<Term> terms = new ArrayList<>();\n    Set<Term> uniqueTerms = new HashSet<>();\n    for (int i = 0; i < num; i++) {\n      String field = \"field\" + (singleField ? \"1\" : random().nextInt(100));\n      String string = TestUtil.randomRealisticUnicodeString(random());\n      terms.add(new Term(field, string));\n      uniqueTerms.add(new Term(field, string));\n      TermInSetQuery left = termsQuery(singleField ? random().nextBoolean() : false, uniqueTerms);\n      Collections.shuffle(terms, random());\n      TermInSetQuery right = termsQuery(singleField ? random().nextBoolean() : false, terms);\n      assertEquals(right, left);\n      assertEquals(right.hashCode(), left.hashCode());\n      if (uniqueTerms.size() > 1) {\n        List<Term> asList = new ArrayList<>(uniqueTerms);\n        asList.remove(0);\n        TermInSetQuery notEqual = termsQuery(singleField ? random().nextBoolean() : false, asList);\n        assertFalse(left.equals(notEqual));\n        assertFalse(right.equals(notEqual));\n      }\n    }\n\n    TermInSetQuery tq1 = new TermInSetQuery(new Term(\"thing\", \"apple\"));\n    TermInSetQuery tq2 = new TermInSetQuery(new Term(\"thing\", \"orange\"));\n    assertFalse(tq1.hashCode() == tq2.hashCode());\n\n    // different fields with the same term should have differing hashcodes\n    tq1 = new TermInSetQuery(new Term(\"thing1\", \"apple\"));\n    tq2 = new TermInSetQuery(new Term(\"thing2\", \"apple\"));\n    assertFalse(tq1.hashCode() == tq2.hashCode());\n  }\n\n","sourceOld":"  public void testHashCodeAndEquals() {\n    int num = atLeast(100);\n    final boolean singleField = random().nextBoolean();\n    List<Term> terms = new ArrayList<>();\n    Set<Term> uniqueTerms = new HashSet<>();\n    for (int i = 0; i < num; i++) {\n      String field = \"field\" + (singleField ? \"1\" : random().nextInt(100));\n      String string = TestUtil.randomRealisticUnicodeString(random());\n      terms.add(new Term(field, string));\n      uniqueTerms.add(new Term(field, string));\n      TermsQuery left = termsQuery(singleField ? random().nextBoolean() : false, uniqueTerms);\n      Collections.shuffle(terms, random());\n      TermsQuery right = termsQuery(singleField ? random().nextBoolean() : false, terms);\n      assertEquals(right, left);\n      assertEquals(right.hashCode(), left.hashCode());\n      if (uniqueTerms.size() > 1) {\n        List<Term> asList = new ArrayList<>(uniqueTerms);\n        asList.remove(0);\n        TermsQuery notEqual = termsQuery(singleField ? random().nextBoolean() : false, asList);\n        assertFalse(left.equals(notEqual));\n        assertFalse(right.equals(notEqual));\n      }\n    }\n\n    TermsQuery tq1 = new TermsQuery(new Term(\"thing\", \"apple\"));\n    TermsQuery tq2 = new TermsQuery(new Term(\"thing\", \"orange\"));\n    assertFalse(tq1.hashCode() == tq2.hashCode());\n\n    // different fields with the same term should have differing hashcodes\n    tq1 = new TermsQuery(new Term(\"thing1\", \"apple\"));\n    tq2 = new TermsQuery(new Term(\"thing2\", \"apple\"));\n    assertFalse(tq1.hashCode() == tq2.hashCode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"830a7b9be2f498e249b346796921c94cdd39d98f","date":1484639518,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TermInSetQueryTest#testHashCodeAndEquals().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TermInSetQueryTest#testHashCodeAndEquals().mjava","sourceNew":"  public void testHashCodeAndEquals() {\n    int num = atLeast(100);\n    List<BytesRef> terms = new ArrayList<>();\n    Set<BytesRef> uniqueTerms = new HashSet<>();\n    for (int i = 0; i < num; i++) {\n      String string = TestUtil.randomRealisticUnicodeString(random());\n      terms.add(new BytesRef(string));\n      uniqueTerms.add(new BytesRef(string));\n      TermInSetQuery left = new TermInSetQuery(\"field\", uniqueTerms);\n      Collections.shuffle(terms, random());\n      TermInSetQuery right = new TermInSetQuery(\"field\", terms);\n      assertEquals(right, left);\n      assertEquals(right.hashCode(), left.hashCode());\n      if (uniqueTerms.size() > 1) {\n        List<BytesRef> asList = new ArrayList<>(uniqueTerms);\n        asList.remove(0);\n        TermInSetQuery notEqual = new TermInSetQuery(\"field\", asList);\n        assertFalse(left.equals(notEqual));\n        assertFalse(right.equals(notEqual));\n      }\n    }\n\n    TermInSetQuery tq1 = new TermInSetQuery(\"thing\", new BytesRef(\"apple\"));\n    TermInSetQuery tq2 = new TermInSetQuery(\"thing\", new BytesRef(\"orange\"));\n    assertFalse(tq1.hashCode() == tq2.hashCode());\n\n    // different fields with the same term should have differing hashcodes\n    tq1 = new TermInSetQuery(\"thing\", new BytesRef(\"apple\"));\n    tq2 = new TermInSetQuery(\"thing2\", new BytesRef(\"apple\"));\n    assertFalse(tq1.hashCode() == tq2.hashCode());\n  }\n\n","sourceOld":"  public void testHashCodeAndEquals() {\n    int num = atLeast(100);\n    final boolean singleField = random().nextBoolean();\n    List<Term> terms = new ArrayList<>();\n    Set<Term> uniqueTerms = new HashSet<>();\n    for (int i = 0; i < num; i++) {\n      String field = \"field\" + (singleField ? \"1\" : random().nextInt(100));\n      String string = TestUtil.randomRealisticUnicodeString(random());\n      terms.add(new Term(field, string));\n      uniqueTerms.add(new Term(field, string));\n      TermInSetQuery left = termsQuery(singleField ? random().nextBoolean() : false, uniqueTerms);\n      Collections.shuffle(terms, random());\n      TermInSetQuery right = termsQuery(singleField ? random().nextBoolean() : false, terms);\n      assertEquals(right, left);\n      assertEquals(right.hashCode(), left.hashCode());\n      if (uniqueTerms.size() > 1) {\n        List<Term> asList = new ArrayList<>(uniqueTerms);\n        asList.remove(0);\n        TermInSetQuery notEqual = termsQuery(singleField ? random().nextBoolean() : false, asList);\n        assertFalse(left.equals(notEqual));\n        assertFalse(right.equals(notEqual));\n      }\n    }\n\n    TermInSetQuery tq1 = new TermInSetQuery(new Term(\"thing\", \"apple\"));\n    TermInSetQuery tq2 = new TermInSetQuery(new Term(\"thing\", \"orange\"));\n    assertFalse(tq1.hashCode() == tq2.hashCode());\n\n    // different fields with the same term should have differing hashcodes\n    tq1 = new TermInSetQuery(new Term(\"thing1\", \"apple\"));\n    tq2 = new TermInSetQuery(new Term(\"thing2\", \"apple\"));\n    assertFalse(tq1.hashCode() == tq2.hashCode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"302d34f2c66e8d489ee13078305c330cbf67b226","date":1484754357,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TermInSetQueryTest#testHashCodeAndEquals().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TermInSetQueryTest#testHashCodeAndEquals().mjava","sourceNew":"  public void testHashCodeAndEquals() {\n    int num = atLeast(100);\n    List<BytesRef> terms = new ArrayList<>();\n    Set<BytesRef> uniqueTerms = new HashSet<>();\n    for (int i = 0; i < num; i++) {\n      String string = TestUtil.randomRealisticUnicodeString(random());\n      terms.add(new BytesRef(string));\n      uniqueTerms.add(new BytesRef(string));\n      TermInSetQuery left = new TermInSetQuery(\"field\", uniqueTerms);\n      Collections.shuffle(terms, random());\n      TermInSetQuery right = new TermInSetQuery(\"field\", terms);\n      assertEquals(right, left);\n      assertEquals(right.hashCode(), left.hashCode());\n      if (uniqueTerms.size() > 1) {\n        List<BytesRef> asList = new ArrayList<>(uniqueTerms);\n        asList.remove(0);\n        TermInSetQuery notEqual = new TermInSetQuery(\"field\", asList);\n        assertFalse(left.equals(notEqual));\n        assertFalse(right.equals(notEqual));\n      }\n    }\n\n    TermInSetQuery tq1 = new TermInSetQuery(\"thing\", new BytesRef(\"apple\"));\n    TermInSetQuery tq2 = new TermInSetQuery(\"thing\", new BytesRef(\"orange\"));\n    assertFalse(tq1.hashCode() == tq2.hashCode());\n\n    // different fields with the same term should have differing hashcodes\n    tq1 = new TermInSetQuery(\"thing\", new BytesRef(\"apple\"));\n    tq2 = new TermInSetQuery(\"thing2\", new BytesRef(\"apple\"));\n    assertFalse(tq1.hashCode() == tq2.hashCode());\n  }\n\n","sourceOld":"  public void testHashCodeAndEquals() {\n    int num = atLeast(100);\n    final boolean singleField = random().nextBoolean();\n    List<Term> terms = new ArrayList<>();\n    Set<Term> uniqueTerms = new HashSet<>();\n    for (int i = 0; i < num; i++) {\n      String field = \"field\" + (singleField ? \"1\" : random().nextInt(100));\n      String string = TestUtil.randomRealisticUnicodeString(random());\n      terms.add(new Term(field, string));\n      uniqueTerms.add(new Term(field, string));\n      TermInSetQuery left = termsQuery(singleField ? random().nextBoolean() : false, uniqueTerms);\n      Collections.shuffle(terms, random());\n      TermInSetQuery right = termsQuery(singleField ? random().nextBoolean() : false, terms);\n      assertEquals(right, left);\n      assertEquals(right.hashCode(), left.hashCode());\n      if (uniqueTerms.size() > 1) {\n        List<Term> asList = new ArrayList<>(uniqueTerms);\n        asList.remove(0);\n        TermInSetQuery notEqual = termsQuery(singleField ? random().nextBoolean() : false, asList);\n        assertFalse(left.equals(notEqual));\n        assertFalse(right.equals(notEqual));\n      }\n    }\n\n    TermInSetQuery tq1 = new TermInSetQuery(new Term(\"thing\", \"apple\"));\n    TermInSetQuery tq2 = new TermInSetQuery(new Term(\"thing\", \"orange\"));\n    assertFalse(tq1.hashCode() == tq2.hashCode());\n\n    // different fields with the same term should have differing hashcodes\n    tq1 = new TermInSetQuery(new Term(\"thing1\", \"apple\"));\n    tq2 = new TermInSetQuery(new Term(\"thing2\", \"apple\"));\n    assertFalse(tq1.hashCode() == tq2.hashCode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"830a7b9be2f498e249b346796921c94cdd39d98f":["8d73510b39df24d6b65de48e56f8dccb136b9d01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8d73510b39df24d6b65de48e56f8dccb136b9d01":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8d73510b39df24d6b65de48e56f8dccb136b9d01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["830a7b9be2f498e249b346796921c94cdd39d98f"],"302d34f2c66e8d489ee13078305c330cbf67b226":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","830a7b9be2f498e249b346796921c94cdd39d98f"]},"commit2Childs":{"830a7b9be2f498e249b346796921c94cdd39d98f":["cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8d73510b39df24d6b65de48e56f8dccb136b9d01","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"8d73510b39df24d6b65de48e56f8dccb136b9d01":["830a7b9be2f498e249b346796921c94cdd39d98f","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["302d34f2c66e8d489ee13078305c330cbf67b226"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"302d34f2c66e8d489ee13078305c330cbf67b226":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}