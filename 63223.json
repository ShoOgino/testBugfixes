{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexReader.IndexEnum#seek(BytesRef).mjava","commits":[{"id":"038e2a9b07e2f8ae58336613cea227bf8b973484","date":1346850972,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexReader.IndexEnum#seek(BytesRef).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/FixedGapTermsIndexReader.IndexEnum#seek(BytesRef).mjava","sourceNew":"    @Override\n    public long seek(BytesRef target) {\n      int lo = 0;\t\t\t\t  // binary search\n      int hi = fieldIndex.numIndexTerms - 1;\n      assert totalIndexInterval > 0 : \"totalIndexInterval=\" + totalIndexInterval;\n\n      while (hi >= lo) {\n        int mid = (lo + hi) >>> 1;\n\n        final long offset = fieldIndex.termOffsets.get(mid);\n        final int length = (int) (fieldIndex.termOffsets.get(1+mid) - offset);\n        termBytesReader.fillSlice(term, fieldIndex.termBytesStart + offset, length);\n\n        int delta = termComp.compare(target, term);\n        if (delta < 0) {\n          hi = mid - 1;\n        } else if (delta > 0) {\n          lo = mid + 1;\n        } else {\n          assert mid >= 0;\n          ord = mid*totalIndexInterval;\n          return fieldIndex.termsStart + fieldIndex.termsDictOffsets.get(mid);\n        }\n      }\n\n      if (hi < 0) {\n        assert hi == -1;\n        hi = 0;\n      }\n\n      final long offset = fieldIndex.termOffsets.get(hi);\n      final int length = (int) (fieldIndex.termOffsets.get(1+hi) - offset);\n      termBytesReader.fillSlice(term, fieldIndex.termBytesStart + offset, length);\n\n      ord = hi*totalIndexInterval;\n      return fieldIndex.termsStart + fieldIndex.termsDictOffsets.get(hi);\n    }\n\n","sourceOld":"    @Override\n    public long seek(BytesRef target) {\n      int lo = 0;\t\t\t\t  // binary search\n      int hi = fieldIndex.numIndexTerms - 1;\n      assert totalIndexInterval > 0 : \"totalIndexInterval=\" + totalIndexInterval;\n\n      while (hi >= lo) {\n        int mid = (lo + hi) >>> 1;\n\n        final long offset = fieldIndex.termOffsets.get(mid);\n        final int length = (int) (fieldIndex.termOffsets.get(1+mid) - offset);\n        termBytesReader.fillSlice(term, fieldIndex.termBytesStart + offset, length);\n\n        int delta = termComp.compare(target, term);\n        if (delta < 0) {\n          hi = mid - 1;\n        } else if (delta > 0) {\n          lo = mid + 1;\n        } else {\n          assert mid >= 0;\n          ord = mid*totalIndexInterval;\n          return fieldIndex.termsStart + fieldIndex.termsDictOffsets.get(mid);\n        }\n      }\n\n      if (hi < 0) {\n        assert hi == -1;\n        hi = 0;\n      }\n\n      final long offset = fieldIndex.termOffsets.get(hi);\n      final int length = (int) (fieldIndex.termOffsets.get(1+hi) - offset);\n      termBytesReader.fillSlice(term, fieldIndex.termBytesStart + offset, length);\n\n      ord = hi*totalIndexInterval;\n      return fieldIndex.termsStart + fieldIndex.termsDictOffsets.get(hi);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexReader.IndexEnum#seek(BytesRef).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexReader.IndexEnum#seek(BytesRef).mjava","sourceNew":"    @Override\n    public long seek(BytesRef target) {\n      int lo = 0;          // binary search\n      int hi = fieldIndex.numIndexTerms - 1;\n      assert totalIndexInterval > 0 : \"totalIndexInterval=\" + totalIndexInterval;\n\n      while (hi >= lo) {\n        int mid = (lo + hi) >>> 1;\n\n        final long offset = fieldIndex.termOffsets.get(mid);\n        final int length = (int) (fieldIndex.termOffsets.get(1+mid) - offset);\n        termBytesReader.fillSlice(term, fieldIndex.termBytesStart + offset, length);\n\n        int delta = termComp.compare(target, term);\n        if (delta < 0) {\n          hi = mid - 1;\n        } else if (delta > 0) {\n          lo = mid + 1;\n        } else {\n          assert mid >= 0;\n          ord = mid*totalIndexInterval;\n          return fieldIndex.termsStart + fieldIndex.termsDictOffsets.get(mid);\n        }\n      }\n\n      if (hi < 0) {\n        assert hi == -1;\n        hi = 0;\n      }\n\n      final long offset = fieldIndex.termOffsets.get(hi);\n      final int length = (int) (fieldIndex.termOffsets.get(1+hi) - offset);\n      termBytesReader.fillSlice(term, fieldIndex.termBytesStart + offset, length);\n\n      ord = hi*totalIndexInterval;\n      return fieldIndex.termsStart + fieldIndex.termsDictOffsets.get(hi);\n    }\n\n","sourceOld":"    @Override\n    public long seek(BytesRef target) {\n      int lo = 0;\t\t\t\t  // binary search\n      int hi = fieldIndex.numIndexTerms - 1;\n      assert totalIndexInterval > 0 : \"totalIndexInterval=\" + totalIndexInterval;\n\n      while (hi >= lo) {\n        int mid = (lo + hi) >>> 1;\n\n        final long offset = fieldIndex.termOffsets.get(mid);\n        final int length = (int) (fieldIndex.termOffsets.get(1+mid) - offset);\n        termBytesReader.fillSlice(term, fieldIndex.termBytesStart + offset, length);\n\n        int delta = termComp.compare(target, term);\n        if (delta < 0) {\n          hi = mid - 1;\n        } else if (delta > 0) {\n          lo = mid + 1;\n        } else {\n          assert mid >= 0;\n          ord = mid*totalIndexInterval;\n          return fieldIndex.termsStart + fieldIndex.termsDictOffsets.get(mid);\n        }\n      }\n\n      if (hi < 0) {\n        assert hi == -1;\n        hi = 0;\n      }\n\n      final long offset = fieldIndex.termOffsets.get(hi);\n      final int length = (int) (fieldIndex.termOffsets.get(1+hi) - offset);\n      termBytesReader.fillSlice(term, fieldIndex.termBytesStart + offset, length);\n\n      ord = hi*totalIndexInterval;\n      return fieldIndex.termsStart + fieldIndex.termsDictOffsets.get(hi);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a45bec74b98f6fc05f52770cfb425739e6563960","date":1375119292,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexReader.IndexEnum#seek(BytesRef).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexReader.IndexEnum#seek(BytesRef).mjava","sourceNew":"    @Override\n    public long seek(BytesRef target) {\n      long lo = 0;          // binary search\n      long hi = fieldIndex.numIndexTerms - 1;\n\n      while (hi >= lo) {\n        long mid = (lo + hi) >>> 1;\n\n        final long offset = fieldIndex.termOffsets.get(mid);\n        final int length = (int) (fieldIndex.termOffsets.get(1+mid) - offset);\n        termBytesReader.fillSlice(term, fieldIndex.termBytesStart + offset, length);\n\n        int delta = termComp.compare(target, term);\n        if (delta < 0) {\n          hi = mid - 1;\n        } else if (delta > 0) {\n          lo = mid + 1;\n        } else {\n          assert mid >= 0;\n          ord = mid*indexInterval;\n          return fieldIndex.termsStart + fieldIndex.termsDictOffsets.get(mid);\n        }\n      }\n\n      if (hi < 0) {\n        assert hi == -1;\n        hi = 0;\n      }\n\n      final long offset = fieldIndex.termOffsets.get(hi);\n      final int length = (int) (fieldIndex.termOffsets.get(1+hi) - offset);\n      termBytesReader.fillSlice(term, fieldIndex.termBytesStart + offset, length);\n\n      ord = hi*indexInterval;\n      return fieldIndex.termsStart + fieldIndex.termsDictOffsets.get(hi);\n    }\n\n","sourceOld":"    @Override\n    public long seek(BytesRef target) {\n      int lo = 0;          // binary search\n      int hi = fieldIndex.numIndexTerms - 1;\n      assert totalIndexInterval > 0 : \"totalIndexInterval=\" + totalIndexInterval;\n\n      while (hi >= lo) {\n        int mid = (lo + hi) >>> 1;\n\n        final long offset = fieldIndex.termOffsets.get(mid);\n        final int length = (int) (fieldIndex.termOffsets.get(1+mid) - offset);\n        termBytesReader.fillSlice(term, fieldIndex.termBytesStart + offset, length);\n\n        int delta = termComp.compare(target, term);\n        if (delta < 0) {\n          hi = mid - 1;\n        } else if (delta > 0) {\n          lo = mid + 1;\n        } else {\n          assert mid >= 0;\n          ord = mid*totalIndexInterval;\n          return fieldIndex.termsStart + fieldIndex.termsDictOffsets.get(mid);\n        }\n      }\n\n      if (hi < 0) {\n        assert hi == -1;\n        hi = 0;\n      }\n\n      final long offset = fieldIndex.termOffsets.get(hi);\n      final int length = (int) (fieldIndex.termOffsets.get(1+hi) - offset);\n      termBytesReader.fillSlice(term, fieldIndex.termBytesStart + offset, length);\n\n      ord = hi*totalIndexInterval;\n      return fieldIndex.termsStart + fieldIndex.termsDictOffsets.get(hi);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexReader.IndexEnum#seek(BytesRef).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexReader.IndexEnum#seek(BytesRef).mjava","sourceNew":"    @Override\n    public long seek(BytesRef target) {\n      long lo = 0;          // binary search\n      long hi = fieldIndex.numIndexTerms - 1;\n\n      while (hi >= lo) {\n        long mid = (lo + hi) >>> 1;\n\n        final long offset = fieldIndex.termOffsets.get(mid);\n        final int length = (int) (fieldIndex.termOffsets.get(1+mid) - offset);\n        termBytesReader.fillSlice(term, fieldIndex.termBytesStart + offset, length);\n\n        int delta = termComp.compare(target, term);\n        if (delta < 0) {\n          hi = mid - 1;\n        } else if (delta > 0) {\n          lo = mid + 1;\n        } else {\n          assert mid >= 0;\n          ord = mid*indexInterval;\n          return fieldIndex.termsStart + fieldIndex.termsDictOffsets.get(mid);\n        }\n      }\n\n      if (hi < 0) {\n        assert hi == -1;\n        hi = 0;\n      }\n\n      final long offset = fieldIndex.termOffsets.get(hi);\n      final int length = (int) (fieldIndex.termOffsets.get(1+hi) - offset);\n      termBytesReader.fillSlice(term, fieldIndex.termBytesStart + offset, length);\n\n      ord = hi*indexInterval;\n      return fieldIndex.termsStart + fieldIndex.termsDictOffsets.get(hi);\n    }\n\n","sourceOld":"    @Override\n    public long seek(BytesRef target) {\n      int lo = 0;          // binary search\n      int hi = fieldIndex.numIndexTerms - 1;\n      assert totalIndexInterval > 0 : \"totalIndexInterval=\" + totalIndexInterval;\n\n      while (hi >= lo) {\n        int mid = (lo + hi) >>> 1;\n\n        final long offset = fieldIndex.termOffsets.get(mid);\n        final int length = (int) (fieldIndex.termOffsets.get(1+mid) - offset);\n        termBytesReader.fillSlice(term, fieldIndex.termBytesStart + offset, length);\n\n        int delta = termComp.compare(target, term);\n        if (delta < 0) {\n          hi = mid - 1;\n        } else if (delta > 0) {\n          lo = mid + 1;\n        } else {\n          assert mid >= 0;\n          ord = mid*totalIndexInterval;\n          return fieldIndex.termsStart + fieldIndex.termsDictOffsets.get(mid);\n        }\n      }\n\n      if (hi < 0) {\n        assert hi == -1;\n        hi = 0;\n      }\n\n      final long offset = fieldIndex.termOffsets.get(hi);\n      final int length = (int) (fieldIndex.termOffsets.get(1+hi) - offset);\n      termBytesReader.fillSlice(term, fieldIndex.termBytesStart + offset, length);\n\n      ord = hi*totalIndexInterval;\n      return fieldIndex.termsStart + fieldIndex.termsDictOffsets.get(hi);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6f7d3244902a0689d3acc83eaa8d8a4e8504de1","date":1412165020,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexReader.IndexEnum#seek(BytesRef).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexReader.IndexEnum#seek(BytesRef).mjava","sourceNew":"    @Override\n    public long seek(BytesRef target) {\n      long lo = 0;          // binary search\n      long hi = fieldIndex.numIndexTerms - 1;\n\n      while (hi >= lo) {\n        long mid = (lo + hi) >>> 1;\n\n        final long offset = fieldIndex.termOffsets.get(mid);\n        final int length = (int) (fieldIndex.termOffsets.get(1+mid) - offset);\n        termBytesReader.fillSlice(term, fieldIndex.termBytesStart + offset, length);\n\n        int delta = target.compareTo(term);\n        if (delta < 0) {\n          hi = mid - 1;\n        } else if (delta > 0) {\n          lo = mid + 1;\n        } else {\n          assert mid >= 0;\n          ord = mid*indexInterval;\n          return fieldIndex.termsStart + fieldIndex.termsDictOffsets.get(mid);\n        }\n      }\n\n      if (hi < 0) {\n        assert hi == -1;\n        hi = 0;\n      }\n\n      final long offset = fieldIndex.termOffsets.get(hi);\n      final int length = (int) (fieldIndex.termOffsets.get(1+hi) - offset);\n      termBytesReader.fillSlice(term, fieldIndex.termBytesStart + offset, length);\n\n      ord = hi*indexInterval;\n      return fieldIndex.termsStart + fieldIndex.termsDictOffsets.get(hi);\n    }\n\n","sourceOld":"    @Override\n    public long seek(BytesRef target) {\n      long lo = 0;          // binary search\n      long hi = fieldIndex.numIndexTerms - 1;\n\n      while (hi >= lo) {\n        long mid = (lo + hi) >>> 1;\n\n        final long offset = fieldIndex.termOffsets.get(mid);\n        final int length = (int) (fieldIndex.termOffsets.get(1+mid) - offset);\n        termBytesReader.fillSlice(term, fieldIndex.termBytesStart + offset, length);\n\n        int delta = termComp.compare(target, term);\n        if (delta < 0) {\n          hi = mid - 1;\n        } else if (delta > 0) {\n          lo = mid + 1;\n        } else {\n          assert mid >= 0;\n          ord = mid*indexInterval;\n          return fieldIndex.termsStart + fieldIndex.termsDictOffsets.get(mid);\n        }\n      }\n\n      if (hi < 0) {\n        assert hi == -1;\n        hi = 0;\n      }\n\n      final long offset = fieldIndex.termOffsets.get(hi);\n      final int length = (int) (fieldIndex.termOffsets.get(1+hi) - offset);\n      termBytesReader.fillSlice(term, fieldIndex.termBytesStart + offset, length);\n\n      ord = hi*indexInterval;\n      return fieldIndex.termsStart + fieldIndex.termsDictOffsets.get(hi);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexReader.IndexEnum#seek(BytesRef).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/FixedGapTermsIndexReader.IndexEnum#seek(BytesRef).mjava","sourceNew":"    @Override\n    public long seek(BytesRef target) {\n      long lo = 0;          // binary search\n      long hi = fieldIndex.numIndexTerms - 1;\n\n      while (hi >= lo) {\n        long mid = (lo + hi) >>> 1;\n\n        final long offset = fieldIndex.termOffsets.get(mid);\n        final int length = (int) (fieldIndex.termOffsets.get(1+mid) - offset);\n        termBytesReader.fillSlice(term, fieldIndex.termBytesStart + offset, length);\n\n        int delta = target.compareTo(term);\n        if (delta < 0) {\n          hi = mid - 1;\n        } else if (delta > 0) {\n          lo = mid + 1;\n        } else {\n          assert mid >= 0;\n          ord = mid*indexInterval;\n          return fieldIndex.termsStart + fieldIndex.termsDictOffsets.get(mid);\n        }\n      }\n\n      if (hi < 0) {\n        assert hi == -1;\n        hi = 0;\n      }\n\n      final long offset = fieldIndex.termOffsets.get(hi);\n      final int length = (int) (fieldIndex.termOffsets.get(1+hi) - offset);\n      termBytesReader.fillSlice(term, fieldIndex.termBytesStart + offset, length);\n\n      ord = hi*indexInterval;\n      return fieldIndex.termsStart + fieldIndex.termsDictOffsets.get(hi);\n    }\n\n","sourceOld":"    @Override\n    public long seek(BytesRef target) {\n      long lo = 0;          // binary search\n      long hi = fieldIndex.numIndexTerms - 1;\n\n      while (hi >= lo) {\n        long mid = (lo + hi) >>> 1;\n\n        final long offset = fieldIndex.termOffsets.get(mid);\n        final int length = (int) (fieldIndex.termOffsets.get(1+mid) - offset);\n        termBytesReader.fillSlice(term, fieldIndex.termBytesStart + offset, length);\n\n        int delta = termComp.compare(target, term);\n        if (delta < 0) {\n          hi = mid - 1;\n        } else if (delta > 0) {\n          lo = mid + 1;\n        } else {\n          assert mid >= 0;\n          ord = mid*indexInterval;\n          return fieldIndex.termsStart + fieldIndex.termsDictOffsets.get(mid);\n        }\n      }\n\n      if (hi < 0) {\n        assert hi == -1;\n        hi = 0;\n      }\n\n      final long offset = fieldIndex.termOffsets.get(hi);\n      final int length = (int) (fieldIndex.termOffsets.get(1+hi) - offset);\n      termBytesReader.fillSlice(term, fieldIndex.termBytesStart + offset, length);\n\n      ord = hi*indexInterval;\n      return fieldIndex.termsStart + fieldIndex.termsDictOffsets.get(hi);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e6f7d3244902a0689d3acc83eaa8d8a4e8504de1":["a45bec74b98f6fc05f52770cfb425739e6563960"],"a45bec74b98f6fc05f52770cfb425739e6563960":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"9bb9a29a5e71a90295f175df8919802993142c9a":["a45bec74b98f6fc05f52770cfb425739e6563960","e6f7d3244902a0689d3acc83eaa8d8a4e8504de1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9bb9a29a5e71a90295f175df8919802993142c9a"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["038e2a9b07e2f8ae58336613cea227bf8b973484"],"038e2a9b07e2f8ae58336613cea227bf8b973484":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e6f7d3244902a0689d3acc83eaa8d8a4e8504de1":["9bb9a29a5e71a90295f175df8919802993142c9a"],"a45bec74b98f6fc05f52770cfb425739e6563960":["e6f7d3244902a0689d3acc83eaa8d8a4e8504de1","9bb9a29a5e71a90295f175df8919802993142c9a"],"9bb9a29a5e71a90295f175df8919802993142c9a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["038e2a9b07e2f8ae58336613cea227bf8b973484"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["a45bec74b98f6fc05f52770cfb425739e6563960","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"038e2a9b07e2f8ae58336613cea227bf8b973484":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}