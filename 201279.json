{"path":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#createBackupSegmentInfos(boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#createBackupSegmentInfos(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#createBackupSegmentInfos(boolean).mjava","sourceNew":"  List<SegmentInfo> createBackupSegmentInfos(boolean cloneChildren) {\n    if (cloneChildren) {\n      final List<SegmentInfo> list = new ArrayList<SegmentInfo>(size());\n      for(final SegmentInfo info : this) {\n        assert info.getCodec() != null;\n        list.add((SegmentInfo) info.clone());\n      }\n      return list;\n    } else {\n      return new ArrayList<SegmentInfo>(segments);\n    }\n  }\n\n","sourceOld":"  List<SegmentInfo> createBackupSegmentInfos(boolean cloneChildren) {\n    if (cloneChildren) {\n      final List<SegmentInfo> list = new ArrayList<SegmentInfo>(size());\n      for(final SegmentInfo info : this) {\n        assert info.getCodec() != null;\n        list.add((SegmentInfo) info.clone());\n      }\n      return list;\n    } else {\n      return new ArrayList<SegmentInfo>(segments);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"399d5903979ca52514d2bc7e3a362e1c45885c94","date":1333042474,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#createBackupSegmentInfos(boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#createBackupSegmentInfos(boolean).mjava","sourceNew":"  List<SegmentInfo> createBackupSegmentInfos(boolean cloneChildren) {\n    if (cloneChildren) {\n      final List<SegmentInfo> list = new ArrayList<SegmentInfo>(size());\n      for(final SegmentInfo info : this) {\n        assert info.getCodec() != null;\n        list.add(info.clone());\n      }\n      return list;\n    } else {\n      return new ArrayList<SegmentInfo>(segments);\n    }\n  }\n\n","sourceOld":"  List<SegmentInfo> createBackupSegmentInfos(boolean cloneChildren) {\n    if (cloneChildren) {\n      final List<SegmentInfo> list = new ArrayList<SegmentInfo>(size());\n      for(final SegmentInfo info : this) {\n        assert info.getCodec() != null;\n        list.add((SegmentInfo) info.clone());\n      }\n      return list;\n    } else {\n      return new ArrayList<SegmentInfo>(segments);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#createBackupSegmentInfos(boolean).mjava","sourceNew":null,"sourceOld":"  List<SegmentInfo> createBackupSegmentInfos(boolean cloneChildren) {\n    if (cloneChildren) {\n      final List<SegmentInfo> list = new ArrayList<SegmentInfo>(size());\n      for(final SegmentInfo info : this) {\n        assert info.getCodec() != null;\n        list.add(info.clone());\n      }\n      return list;\n    } else {\n      return new ArrayList<SegmentInfo>(segments);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#createBackupSegmentInfos(boolean).mjava","sourceNew":null,"sourceOld":"  List<SegmentInfo> createBackupSegmentInfos(boolean cloneChildren) {\n    if (cloneChildren) {\n      final List<SegmentInfo> list = new ArrayList<SegmentInfo>(size());\n      for(final SegmentInfo info : this) {\n        assert info.getCodec() != null;\n        list.add(info.clone());\n      }\n      return list;\n    } else {\n      return new ArrayList<SegmentInfo>(segments);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["399d5903979ca52514d2bc7e3a362e1c45885c94","9d153abcf92dc5329d98571a8c3035df9bd80648"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d153abcf92dc5329d98571a8c3035df9bd80648":["399d5903979ca52514d2bc7e3a362e1c45885c94"],"399d5903979ca52514d2bc7e3a362e1c45885c94":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"]},"commit2Childs":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["399d5903979ca52514d2bc7e3a362e1c45885c94"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"399d5903979ca52514d2bc7e3a362e1c45885c94":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","9d153abcf92dc5329d98571a8c3035df9bd80648"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}