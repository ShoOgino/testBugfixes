{"path":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsWriter#finish(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsWriter#finish(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsWriter#finish(int).mjava","sourceNew":"  @Override\n  public void finish(int numDocs) throws IOException {\n    if (numDocsWritten != numDocs) {\n      throw new RuntimeException(\"mergeVectors produced an invalid result: mergedDocs is \" + numDocs + \" but vec numDocs is \" + numDocsWritten + \" file=\" + out.toString() + \"; now aborting this merge to prevent index corruption\");\n    }\n    write(END);\n    newLine();\n  }\n\n","sourceOld":"  @Override\n  public void finish(int numDocs) throws IOException {\n    if (numDocsWritten != numDocs) {\n      throw new RuntimeException(\"mergeVectors produced an invalid result: mergedDocs is \" + numDocs + \" but vec numDocs is \" + numDocsWritten + \" file=\" + out.toString() + \"; now aborting this merge to prevent index corruption\");\n    }\n    write(END);\n    newLine();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8febb56d1ed9f3314d35d075599fd9aff857be3c","date":1337729003,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsWriter#finish(FieldInfos,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsWriter#finish(int).mjava","sourceNew":"  @Override\n  public void finish(FieldInfos fis, int numDocs) throws IOException {\n    if (numDocsWritten != numDocs) {\n      throw new RuntimeException(\"mergeVectors produced an invalid result: mergedDocs is \" + numDocs + \" but vec numDocs is \" + numDocsWritten + \" file=\" + out.toString() + \"; now aborting this merge to prevent index corruption\");\n    }\n    write(END);\n    newLine();\n  }\n\n","sourceOld":"  @Override\n  public void finish(int numDocs) throws IOException {\n    if (numDocsWritten != numDocs) {\n      throw new RuntimeException(\"mergeVectors produced an invalid result: mergedDocs is \" + numDocs + \" but vec numDocs is \" + numDocsWritten + \" file=\" + out.toString() + \"; now aborting this merge to prevent index corruption\");\n    }\n    write(END);\n    newLine();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsWriter#finish(FieldInfos,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsWriter#finish(int).mjava","sourceNew":"  @Override\n  public void finish(FieldInfos fis, int numDocs) throws IOException {\n    if (numDocsWritten != numDocs) {\n      throw new RuntimeException(\"mergeVectors produced an invalid result: mergedDocs is \" + numDocs + \" but vec numDocs is \" + numDocsWritten + \" file=\" + out.toString() + \"; now aborting this merge to prevent index corruption\");\n    }\n    write(END);\n    newLine();\n  }\n\n","sourceOld":"  @Override\n  public void finish(int numDocs) throws IOException {\n    if (numDocsWritten != numDocs) {\n      throw new RuntimeException(\"mergeVectors produced an invalid result: mergedDocs is \" + numDocs + \" but vec numDocs is \" + numDocsWritten + \" file=\" + out.toString() + \"; now aborting this merge to prevent index corruption\");\n    }\n    write(END);\n    newLine();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8febb56d1ed9f3314d35d075599fd9aff857be3c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","8febb56d1ed9f3314d35d075599fd9aff857be3c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"]},"commit2Childs":{"8febb56d1ed9f3314d35d075599fd9aff857be3c":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8febb56d1ed9f3314d35d075599fd9aff857be3c","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}