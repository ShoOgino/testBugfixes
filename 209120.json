{"path":"solr/core/src/java/org/apache/solr/core/BlobRepository#decrementBlobRefCount(BlobContentRef).mjava","commits":[{"id":"0f46a888512a86ee1f37a7682bac9b2f4b38bb5a","date":1456224289,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/BlobRepository#decrementBlobRefCount(BlobContentRef).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JarRepository#decrementJarRefCount(JarContentRef).mjava","sourceNew":"  /**\n   * This is to decrement a ref count\n   *\n   * @param ref The reference that is already there. Doing multiple calls with same ref will not matter\n   */\n  public void decrementBlobRefCount(BlobContentRef ref) {\n    if (ref == null) return;\n    synchronized (ref.blob.references) {\n      if (!ref.blob.references.remove(ref)) {\n        log.error(\"Multiple releases for the same reference\");\n      }\n      if (ref.blob.references.isEmpty()) {\n        blobs.remove(ref.blob.key);\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * This is to decrement a ref count\n   *\n   * @param ref The reference that is already there. Doing multiple calls with same ref will not matter\n   */\n  public void decrementJarRefCount(JarContentRef ref) {\n    if (ref == null) return;\n    synchronized (ref.jar.references) {\n      if (!ref.jar.references.remove(ref)) {\n        log.error(\"Multiple releases for the same reference\");\n      }\n      if (ref.jar.references.isEmpty()) {\n        jars.remove(ref.jar.key);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5296efc4b319f5647b606629c093a94b23692c6","date":1456267155,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/BlobRepository#decrementBlobRefCount(BlobContentRef).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JarRepository#decrementJarRefCount(JarContentRef).mjava","sourceNew":"  /**\n   * This is to decrement a ref count\n   *\n   * @param ref The reference that is already there. Doing multiple calls with same ref will not matter\n   */\n  public void decrementBlobRefCount(BlobContentRef ref) {\n    if (ref == null) return;\n    synchronized (ref.blob.references) {\n      if (!ref.blob.references.remove(ref)) {\n        log.error(\"Multiple releases for the same reference\");\n      }\n      if (ref.blob.references.isEmpty()) {\n        blobs.remove(ref.blob.key);\n      }\n    }\n\n  }\n\n","sourceOld":"  /**\n   * This is to decrement a ref count\n   *\n   * @param ref The reference that is already there. Doing multiple calls with same ref will not matter\n   */\n  public void decrementJarRefCount(JarContentRef ref) {\n    if (ref == null) return;\n    synchronized (ref.jar.references) {\n      if (!ref.jar.references.remove(ref)) {\n        log.error(\"Multiple releases for the same reference\");\n      }\n      if (ref.jar.references.isEmpty()) {\n        jars.remove(ref.jar.key);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5fab1d180f47e9924e0e56501b42034b3476f2b1","date":1460974879,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/BlobRepository#decrementBlobRefCount(BlobContentRef).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/BlobRepository#decrementBlobRefCount(BlobContentRef).mjava","sourceNew":"  /**\n   * This is to decrement a ref count\n   *\n   * @param ref The reference that is already there. Doing multiple calls with same ref will not matter\n   */\n  public void decrementBlobRefCount(BlobContentRef ref) {\n    if (ref == null) return;\n    synchronized (ref.blob.references) {\n      if (!ref.blob.references.remove(ref)) {\n        log.error(\"Multiple releases for the same reference\");\n      }\n      if (ref.blob.references.isEmpty()) {\n        blobs.remove(ref.blob.key);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * This is to decrement a ref count\n   *\n   * @param ref The reference that is already there. Doing multiple calls with same ref will not matter\n   */\n  public void decrementBlobRefCount(BlobContentRef ref) {\n    if (ref == null) return;\n    synchronized (ref.blob.references) {\n      if (!ref.blob.references.remove(ref)) {\n        log.error(\"Multiple releases for the same reference\");\n      }\n      if (ref.blob.references.isEmpty()) {\n        blobs.remove(ref.blob.key);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"713122036535651642e6d4fe57ce12b449e18473","date":1461000510,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/BlobRepository#decrementBlobRefCount(BlobContentRef).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/BlobRepository#decrementBlobRefCount(BlobContentRef).mjava","sourceNew":"  /**\n   * This is to decrement a ref count\n   *\n   * @param ref The reference that is already there. Doing multiple calls with same ref will not matter\n   */\n  public void decrementBlobRefCount(BlobContentRef ref) {\n    if (ref == null) return;\n    synchronized (ref.blob.references) {\n      if (!ref.blob.references.remove(ref)) {\n        log.error(\"Multiple releases for the same reference\");\n      }\n      if (ref.blob.references.isEmpty()) {\n        blobs.remove(ref.blob.key);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * This is to decrement a ref count\n   *\n   * @param ref The reference that is already there. Doing multiple calls with same ref will not matter\n   */\n  public void decrementBlobRefCount(BlobContentRef ref) {\n    if (ref == null) return;\n    synchronized (ref.blob.references) {\n      if (!ref.blob.references.remove(ref)) {\n        log.error(\"Multiple releases for the same reference\");\n      }\n      if (ref.blob.references.isEmpty()) {\n        blobs.remove(ref.blob.key);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75237075d8425856bf4bbf52a6be4f9162b8187d","date":1591103291,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/BlobRepository#decrementBlobRefCount(BlobContentRef).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/BlobRepository#decrementBlobRefCount(BlobContentRef).mjava","sourceNew":"  /**\n   * This is to decrement a ref count\n   *\n   * @param ref The reference that is already there. Doing multiple calls with same ref will not matter\n   */\n  public void decrementBlobRefCount(@SuppressWarnings({\"rawtypes\"})BlobContentRef ref) {\n    if (ref == null) return;\n    synchronized (ref.blob.references) {\n      if (!ref.blob.references.remove(ref)) {\n        log.error(\"Multiple releases for the same reference\");\n      }\n      if (ref.blob.references.isEmpty()) {\n        blobs.remove(ref.blob.key);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * This is to decrement a ref count\n   *\n   * @param ref The reference that is already there. Doing multiple calls with same ref will not matter\n   */\n  public void decrementBlobRefCount(BlobContentRef ref) {\n    if (ref == null) return;\n    synchronized (ref.blob.references) {\n      if (!ref.blob.references.remove(ref)) {\n        log.error(\"Multiple releases for the same reference\");\n      }\n      if (ref.blob.references.isEmpty()) {\n        blobs.remove(ref.blob.key);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f46a888512a86ee1f37a7682bac9b2f4b38bb5a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"75237075d8425856bf4bbf52a6be4f9162b8187d":["713122036535651642e6d4fe57ce12b449e18473"],"713122036535651642e6d4fe57ce12b449e18473":["0f46a888512a86ee1f37a7682bac9b2f4b38bb5a","5fab1d180f47e9924e0e56501b42034b3476f2b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5fab1d180f47e9924e0e56501b42034b3476f2b1":["0f46a888512a86ee1f37a7682bac9b2f4b38bb5a"],"a5296efc4b319f5647b606629c093a94b23692c6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0f46a888512a86ee1f37a7682bac9b2f4b38bb5a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["75237075d8425856bf4bbf52a6be4f9162b8187d"]},"commit2Childs":{"0f46a888512a86ee1f37a7682bac9b2f4b38bb5a":["713122036535651642e6d4fe57ce12b449e18473","5fab1d180f47e9924e0e56501b42034b3476f2b1","a5296efc4b319f5647b606629c093a94b23692c6"],"75237075d8425856bf4bbf52a6be4f9162b8187d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"713122036535651642e6d4fe57ce12b449e18473":["75237075d8425856bf4bbf52a6be4f9162b8187d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f46a888512a86ee1f37a7682bac9b2f4b38bb5a","a5296efc4b319f5647b606629c093a94b23692c6"],"5fab1d180f47e9924e0e56501b42034b3476f2b1":["713122036535651642e6d4fe57ce12b449e18473"],"a5296efc4b319f5647b606629c093a94b23692c6":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a5296efc4b319f5647b606629c093a94b23692c6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}