{"path":"lucene/src/java/org/apache/lucene/index/MultiReader#norms(String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#norms(String).mjava","pathOld":"src/java/org/apache/lucene/index/MultiReader#norms(String).mjava","sourceNew":"  @Override\n  public synchronized byte[] norms(String field) throws IOException {\n    ensureOpen();\n    byte[] bytes = normsCache.get(field);\n    if (bytes != null)\n      return bytes;          // cache hit\n    if (!hasNorms(field))\n      return null;\n\n    bytes = new byte[maxDoc()];\n    for (int i = 0; i < subReaders.length; i++)\n      subReaders[i].norms(field, bytes, starts[i]);\n    normsCache.put(field, bytes);      // update cache\n    return bytes;\n  }\n\n","sourceOld":"  @Override\n  public synchronized byte[] norms(String field) throws IOException {\n    ensureOpen();\n    byte[] bytes = normsCache.get(field);\n    if (bytes != null)\n      return bytes;          // cache hit\n    if (!hasNorms(field))\n      return null;\n\n    bytes = new byte[maxDoc()];\n    for (int i = 0; i < subReaders.length; i++)\n      subReaders[i].norms(field, bytes, starts[i]);\n    normsCache.put(field, bytes);      // update cache\n    return bytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0d06946f61921459f43309f86ed621ebe67eebe","date":1294182697,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#norms(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiReader#norms(String).mjava","sourceNew":"  @Override\n  public synchronized byte[] norms(String field) throws IOException {\n    throw new UnsupportedOperationException(\"please use MultiNorms.norms, or wrap your IndexReader with SlowMultiReaderWrapper, if you really need a top level norms\");\n  }\n\n","sourceOld":"  @Override\n  public synchronized byte[] norms(String field) throws IOException {\n    ensureOpen();\n    byte[] bytes = normsCache.get(field);\n    if (bytes != null)\n      return bytes;          // cache hit\n    if (!hasNorms(field))\n      return null;\n\n    bytes = new byte[maxDoc()];\n    for (int i = 0; i < subReaders.length; i++)\n      subReaders[i].norms(field, bytes, starts[i]);\n    normsCache.put(field, bytes);      // update cache\n    return bytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#norms(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiReader#norms(String).mjava","sourceNew":"  @Override\n  public synchronized byte[] norms(String field) throws IOException {\n    throw new UnsupportedOperationException(\"please use MultiNorms.norms, or wrap your IndexReader with SlowMultiReaderWrapper, if you really need a top level norms\");\n  }\n\n","sourceOld":"  @Override\n  public synchronized byte[] norms(String field) throws IOException {\n    ensureOpen();\n    byte[] bytes = normsCache.get(field);\n    if (bytes != null)\n      return bytes;          // cache hit\n    if (!hasNorms(field))\n      return null;\n\n    bytes = new byte[maxDoc()];\n    for (int i = 0; i < subReaders.length; i++)\n      subReaders[i].norms(field, bytes, starts[i]);\n    normsCache.put(field, bytes);      // update cache\n    return bytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#norms(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiReader#norms(String).mjava","sourceNew":"  @Override\n  public synchronized byte[] norms(String field) throws IOException {\n    throw new UnsupportedOperationException(\"please use MultiNorms.norms, or wrap your IndexReader with SlowMultiReaderWrapper, if you really need a top level norms\");\n  }\n\n","sourceOld":"  @Override\n  public synchronized byte[] norms(String field) throws IOException {\n    ensureOpen();\n    byte[] bytes = normsCache.get(field);\n    if (bytes != null)\n      return bytes;          // cache hit\n    if (!hasNorms(field))\n      return null;\n\n    bytes = new byte[maxDoc()];\n    for (int i = 0; i < subReaders.length; i++)\n      subReaders[i].norms(field, bytes, starts[i]);\n    normsCache.put(field, bytes);      // update cache\n    return bytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4","date":1323543613,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/BaseMultiReader#norms(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiReader#norms(String).mjava","sourceNew":"  @Override\n  public synchronized byte[] norms(String field) throws IOException {\n    throw new UnsupportedOperationException(\"please use MultiNorms.norms, or wrap your IndexReader with SlowMultiReaderWrapper, if you really need a top level norms\");\n  }\n\n","sourceOld":"  @Override\n  public synchronized byte[] norms(String field) throws IOException {\n    throw new UnsupportedOperationException(\"please use MultiNorms.norms, or wrap your IndexReader with SlowMultiReaderWrapper, if you really need a top level norms\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/BaseMultiReader#norms(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiReader#norms(String).mjava","sourceNew":"  @Override\n  public synchronized byte[] norms(String field) throws IOException {\n    throw new UnsupportedOperationException(\"please use MultiNorms.norms, or wrap your IndexReader with SlowMultiReaderWrapper, if you really need a top level norms\");\n  }\n\n","sourceOld":"  @Override\n  public synchronized byte[] norms(String field) throws IOException {\n    throw new UnsupportedOperationException(\"please use MultiNorms.norms, or wrap your IndexReader with SlowMultiReaderWrapper, if you really need a top level norms\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["9454a6510e2db155fb01faa5c049b06ece95fab9","b0d06946f61921459f43309f86ed621ebe67eebe"],"6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4":["b0d06946f61921459f43309f86ed621ebe67eebe"],"b0d06946f61921459f43309f86ed621ebe67eebe":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["b0d06946f61921459f43309f86ed621ebe67eebe","6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["9454a6510e2db155fb01faa5c049b06ece95fab9","b0d06946f61921459f43309f86ed621ebe67eebe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b0d06946f61921459f43309f86ed621ebe67eebe":["70ad682703b8585f5d0a637efec044d57ec05efb","6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","868da859b43505d9d2a023bfeae6dd0c795f5295"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["70ad682703b8585f5d0a637efec044d57ec05efb","b0d06946f61921459f43309f86ed621ebe67eebe","868da859b43505d9d2a023bfeae6dd0c795f5295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}