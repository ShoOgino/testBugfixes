{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","sourceNew":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n\n    // create a 2nd index\n    Directory dir2 = new MockRAMDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer2.setInfoStream(infoStream);\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexesNoOptimize(new Directory[] { dir2 });\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertTrue(r1.isCurrent());\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n  }\n\n","sourceOld":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n\n    // create a 2nd index\n    Directory dir2 = new MockRAMDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer2.setInfoStream(infoStream);\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexesNoOptimize(new Directory[] { dir2 });\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertTrue(r1.isCurrent());\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","sourceNew":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n\n    // create a 2nd index\n    Directory dir2 = new MockRAMDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer2.setInfoStream(infoStream);\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    writer.addIndexesNoOptimize(new Directory[] { dir2 });\n\n    IndexReader r1 = writer.getReader();\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n  }\n\n","sourceOld":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n\n    // create a 2nd index\n    Directory dir2 = new MockRAMDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer2.setInfoStream(infoStream);\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexesNoOptimize(new Directory[] { dir2 });\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertTrue(r1.isCurrent());\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db610e9e698f94982d7a1af15a21d6a30ef96b9d","date":1270586294,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","sourceNew":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n\n    // create a 2nd index\n    Directory dir2 = new MockRAMDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer2.setInfoStream(infoStream);\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexesNoOptimize(new Directory[] { dir2 });\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertTrue(r1.isCurrent());\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n  }\n\n","sourceOld":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n\n    // create a 2nd index\n    Directory dir2 = new MockRAMDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer2.setInfoStream(infoStream);\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    writer.addIndexesNoOptimize(new Directory[] { dir2 });\n\n    IndexReader r1 = writer.getReader();\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":["300334dcd665e74e45788a3884e5989d4b4bab15"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","sourceNew":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n\n    // create a 2nd index\n    Directory dir2 = new MockRAMDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer2.setInfoStream(infoStream);\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexesNoOptimize(new Directory[] { dir2 });\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertTrue(r1.isCurrent());\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n  }\n\n","sourceOld":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n\n    // create a 2nd index\n    Directory dir2 = new MockRAMDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer2.setInfoStream(infoStream);\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexesNoOptimize(new Directory[] { dir2 });\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertTrue(r1.isCurrent());\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fb10b6bcde550b87d8f10e5f010bd8f3021023b6","date":1274974592,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","sourceNew":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n\n    // create a 2nd index\n    Directory dir2 = new MockRAMDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer2.setInfoStream(infoStream);\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexes(new Directory[] { dir2 });\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertTrue(r1.isCurrent());\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n  }\n\n","sourceOld":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n\n    // create a 2nd index\n    Directory dir2 = new MockRAMDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer2.setInfoStream(infoStream);\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexesNoOptimize(new Directory[] { dir2 });\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertTrue(r1.isCurrent());\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"833a7987bc1c94455fde83e3311f72bddedcfb93","date":1279951470,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","sourceNew":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true);\n\n    // create a 2nd index\n    Directory dir2 = new MockRAMDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer2.setInfoStream(infoStream);\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexes(new Directory[] { dir2 });\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertTrue(r1.isCurrent());\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n  }\n\n","sourceOld":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n\n    // create a 2nd index\n    Directory dir2 = new MockRAMDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer2.setInfoStream(infoStream);\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexes(new Directory[] { dir2 });\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertTrue(r1.isCurrent());\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","sourceNew":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n\n    // create a 2nd index\n    Directory dir2 = new MockRAMDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer2.setInfoStream(infoStream);\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexes(new Directory[] { dir2 });\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertTrue(r1.isCurrent());\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n  }\n\n","sourceOld":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n\n    // create a 2nd index\n    Directory dir2 = new MockRAMDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer2.setInfoStream(infoStream);\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexes(new Directory[] { dir2 });\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertTrue(r1.isCurrent());\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","sourceNew":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = newDirectory(random);\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n\n    // create a 2nd index\n    Directory dir2 = newDirectory(random);\n    IndexWriter writer2 = new IndexWriter(dir2, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer2.setInfoStream(infoStream);\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexes(new Directory[] { dir2 });\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertTrue(r1.isCurrent());\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n\n    // create a 2nd index\n    Directory dir2 = new MockRAMDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer2.setInfoStream(infoStream);\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexes(new Directory[] { dir2 });\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertTrue(r1.isCurrent());\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"300334dcd665e74e45788a3884e5989d4b4bab15","date":1283942659,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","sourceNew":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = newDirectory(random);\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n\n    // create a 2nd index\n    Directory dir2 = newDirectory(random);\n    IndexWriter writer2 = new IndexWriter(dir2, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer2.setInfoStream(infoStream);\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexes(new Directory[] { dir2 });\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertFalse(r1.isCurrent());\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = newDirectory(random);\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n\n    // create a 2nd index\n    Directory dir2 = newDirectory(random);\n    IndexWriter writer2 = new IndexWriter(dir2, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer2.setInfoStream(infoStream);\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexes(new Directory[] { dir2 });\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertTrue(r1.isCurrent());\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":["db610e9e698f94982d7a1af15a21d6a30ef96b9d"],"bugIntro":["c5947ccd7ba3770dcba5a0713dbd5496678256d9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","sourceNew":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n\n    // create a 2nd index\n    Directory dir2 = newDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer2.setInfoStream(infoStream);\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexes(new Directory[] { dir2 });\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertFalse(r1.isCurrent());\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = newDirectory(random);\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n\n    // create a 2nd index\n    Directory dir2 = newDirectory(random);\n    IndexWriter writer2 = new IndexWriter(dir2, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer2.setInfoStream(infoStream);\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexes(new Directory[] { dir2 });\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertFalse(r1.isCurrent());\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":["8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5","527cc14542789f47d75da436cb4287d1ab887e34"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74d2234fd7d0d450692c63abbbae7956a058f728","date":1289732488,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","sourceNew":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    // test relies on no merges happening below:\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n\n    // create a 2nd index\n    Directory dir2 = newDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer2.setInfoStream(infoStream);\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexes(new Directory[] { dir2 });\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertFalse(r1.isCurrent());\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n\n    // create a 2nd index\n    Directory dir2 = newDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer2.setInfoStream(infoStream);\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexes(new Directory[] { dir2 });\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertFalse(r1.isCurrent());\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":["8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","sourceNew":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    // test relies on no merges happening below:\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n\n    // create a 2nd index\n    Directory dir2 = newDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer2.setInfoStream(infoStream);\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexes(new Directory[] { dir2 });\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertFalse(r1.isCurrent());\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n\n    // create a 2nd index\n    Directory dir2 = newDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer2.setInfoStream(infoStream);\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexes(new Directory[] { dir2 });\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertFalse(r1.isCurrent());\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5","date":1290247889,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","sourceNew":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n\n    // create a 2nd index\n    Directory dir2 = newDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer2.setInfoStream(infoStream);\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexes(new Directory[] { dir2 });\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertFalse(r1.isCurrent());\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    // test relies on no merges happening below:\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n\n    // create a 2nd index\n    Directory dir2 = newDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer2.setInfoStream(infoStream);\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexes(new Directory[] { dir2 });\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertFalse(r1.isCurrent());\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":["74d2234fd7d0d450692c63abbbae7956a058f728","1f653cfcf159baeaafe5d01682a911e95bba4012"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","sourceNew":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n\n    // create a 2nd index\n    Directory dir2 = newDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer2.setInfoStream(infoStream);\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexes(dir2);\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertFalse(r1.isCurrent());\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n\n    // create a 2nd index\n    Directory dir2 = newDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer2.setInfoStream(infoStream);\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexes(new Directory[] { dir2 });\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertFalse(r1.isCurrent());\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","sourceNew":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n\n    // create a 2nd index\n    Directory dir2 = newDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer2.setInfoStream(infoStream);\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexes(dir2);\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertFalse(r1.isCurrent());\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    // test relies on no merges happening below:\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n\n    // create a 2nd index\n    Directory dir2 = newDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer2.setInfoStream(infoStream);\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexes(new Directory[] { dir2 });\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertFalse(r1.isCurrent());\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c5947ccd7ba3770dcba5a0713dbd5496678256d9","date":1291744634,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","sourceNew":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n\n    // create a 2nd index\n    Directory dir2 = newDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer2.setInfoStream(infoStream);\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexes(dir2);\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertTrue(r1.isCurrent()); // we have seen all changes - no change after opening the NRT reader\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n\n    // create a 2nd index\n    Directory dir2 = newDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer2.setInfoStream(infoStream);\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexes(dir2);\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertFalse(r1.isCurrent());\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":["300334dcd665e74e45788a3884e5989d4b4bab15"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4bd5d0a5ac72666f0bcbd50b535d2cc70dbf584b","date":1291778725,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","sourceNew":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n\n    // create a 2nd index\n    Directory dir2 = newDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer2.setInfoStream(infoStream);\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexes(dir2);\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertTrue(r1.isCurrent()); // we have seen all changes - no change after opening the NRT reader\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n\n    // create a 2nd index\n    Directory dir2 = newDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer2.setInfoStream(infoStream);\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexes(dir2);\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertFalse(r1.isCurrent());\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","date":1292695408,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","sourceNew":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true);\n\n    // create a 2nd index\n    Directory dir2 = newDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer2.setInfoStream(infoStream);\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexes(dir2);\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertTrue(r1.isCurrent()); // we have seen all changes - no change after opening the NRT reader\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n\n    // create a 2nd index\n    Directory dir2 = newDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer2.setInfoStream(infoStream);\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexes(dir2);\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertTrue(r1.isCurrent()); // we have seen all changes - no change after opening the NRT reader\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","sourceNew":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true);\n\n    // create a 2nd index\n    Directory dir2 = newDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer2.setInfoStream(infoStream);\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexes(dir2);\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertTrue(r1.isCurrent()); // we have seen all changes - no change after opening the NRT reader\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n\n    // create a 2nd index\n    Directory dir2 = newDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer2.setInfoStream(infoStream);\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexes(dir2);\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertTrue(r1.isCurrent()); // we have seen all changes - no change after opening the NRT reader\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","sourceNew":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true);\n\n    // create a 2nd index\n    Directory dir2 = newDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer2.setInfoStream(infoStream);\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexes(dir2);\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertTrue(r1.isCurrent()); // we have seen all changes - no change after opening the NRT reader\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true);\n\n    // create a 2nd index\n    Directory dir2 = new MockRAMDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer2.setInfoStream(infoStream);\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexes(new Directory[] { dir2 });\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertTrue(r1.isCurrent());\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","sourceNew":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true);\n\n    // create a 2nd index\n    Directory dir2 = newDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer2.setInfoStream(infoStream);\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexes(dir2);\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertTrue(r1.isCurrent()); // we have seen all changes - no change after opening the NRT reader\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true);\n\n    // create a 2nd index\n    Directory dir2 = newDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer2.setInfoStream(infoStream);\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexes(dir2);\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertTrue(r1.isCurrent()); // we have seen all changes - no change after opening the NRT reader\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","sourceNew":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true);\n\n    // create a 2nd index\n    Directory dir2 = newDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer2.setInfoStream(infoStream);\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexes(dir2);\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertTrue(r1.isCurrent()); // we have seen all changes - no change after opening the NRT reader\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true);\n\n    // create a 2nd index\n    Directory dir2 = newDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer2.setInfoStream(infoStream);\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexes(dir2);\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertTrue(r1.isCurrent()); // we have seen all changes - no change after opening the NRT reader\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","sourceNew":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true);\n\n    // create a 2nd index\n    Directory dir2 = newDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer2.setInfoStream(infoStream);\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexes(dir2);\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertTrue(r1.isCurrent()); // we have seen all changes - no change after opening the NRT reader\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true);\n\n    // create a 2nd index\n    Directory dir2 = newDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer2.setInfoStream(infoStream);\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexes(dir2);\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertTrue(r1.isCurrent()); // we have seen all changes - no change after opening the NRT reader\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","sourceNew":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true);\n\n    // create a 2nd index\n    Directory dir2 = newDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer2.setInfoStream(infoStream);\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexes(dir2);\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertTrue(r1.isCurrent()); // we have seen all changes - no change after opening the NRT reader\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true);\n\n    // create a 2nd index\n    Directory dir2 = newDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer2.setInfoStream(infoStream);\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexes(dir2);\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertTrue(r1.isCurrent()); // we have seen all changes - no change after opening the NRT reader\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","sourceNew":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true);\n\n    // create a 2nd index\n    Directory dir2 = newDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexes(dir2);\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertTrue(r1.isCurrent()); // we have seen all changes - no change after opening the NRT reader\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true);\n\n    // create a 2nd index\n    Directory dir2 = newDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer2.setInfoStream(infoStream);\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexes(dir2);\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertTrue(r1.isCurrent()); // we have seen all changes - no change after opening the NRT reader\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","sourceNew":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean doFullMerge = false;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n    writer.flush(false, true);\n\n    // create a 2nd index\n    Directory dir2 = newDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    createIndexNoClose(!doFullMerge, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexes(dir2);\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertTrue(r1.isCurrent()); // we have seen all changes - no change after opening the NRT reader\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true);\n\n    // create a 2nd index\n    Directory dir2 = newDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexes(dir2);\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertTrue(r1.isCurrent()); // we have seen all changes - no change after opening the NRT reader\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55c2bb1bcc0edd142e63b9230976dfc3e500dbe8","date":1327857288,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","sourceNew":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean doFullMerge = false;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n    writer.flush(false, true);\n\n    // create a 2nd index\n    Directory dir2 = newDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    createIndexNoClose(!doFullMerge, \"index2\", writer2);\n    writer2.close();\n\n    DirectoryReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexes(dir2);\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    DirectoryReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertTrue(r1.isCurrent()); // we have seen all changes - no change after opening the NRT reader\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean doFullMerge = false;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n    writer.flush(false, true);\n\n    // create a 2nd index\n    Directory dir2 = newDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    createIndexNoClose(!doFullMerge, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexes(dir2);\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertTrue(r1.isCurrent()); // we have seen all changes - no change after opening the NRT reader\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","sourceNew":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean doFullMerge = false;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n    writer.flush(false, true);\n\n    // create a 2nd index\n    Directory dir2 = newDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    createIndexNoClose(!doFullMerge, \"index2\", writer2);\n    writer2.close();\n\n    DirectoryReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexes(dir2);\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    DirectoryReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertTrue(r1.isCurrent()); // we have seen all changes - no change after opening the NRT reader\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean doFullMerge = false;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n    writer.flush(false, true);\n\n    // create a 2nd index\n    Directory dir2 = newDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    createIndexNoClose(!doFullMerge, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexes(dir2);\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertTrue(r1.isCurrent()); // we have seen all changes - no change after opening the NRT reader\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","sourceNew":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean doFullMerge = false;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n    writer.flush(false, true);\n\n    // create a 2nd index\n    Directory dir2 = newDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    createIndexNoClose(!doFullMerge, \"index2\", writer2);\n    writer2.close();\n\n    DirectoryReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexes(dir2);\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    DirectoryReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertTrue(r1.isCurrent()); // we have seen all changes - no change after opening the NRT reader\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","sourceOld":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean doFullMerge = false;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n    writer.flush(false, true);\n\n    // create a 2nd index\n    Directory dir2 = newDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    createIndexNoClose(!doFullMerge, \"index2\", writer2);\n    writer2.close();\n\n    DirectoryReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexes(dir2);\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    DirectoryReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertTrue(r1.isCurrent()); // we have seen all changes - no change after opening the NRT reader\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n    dir2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5":["74d2234fd7d0d450692c63abbbae7956a058f728"],"55c2bb1bcc0edd142e63b9230976dfc3e500dbe8":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["06584e6e98d592b34e1329b384182f368d2025e8"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["833a7987bc1c94455fde83e3311f72bddedcfb93","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"4bd5d0a5ac72666f0bcbd50b535d2cc70dbf584b":["3bb13258feba31ab676502787ab2e1779f129b7a"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["300334dcd665e74e45788a3884e5989d4b4bab15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["c5947ccd7ba3770dcba5a0713dbd5496678256d9"],"74d2234fd7d0d450692c63abbbae7956a058f728":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"833a7987bc1c94455fde83e3311f72bddedcfb93":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"c5947ccd7ba3770dcba5a0713dbd5496678256d9":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["1f653cfcf159baeaafe5d01682a911e95bba4012","74d2234fd7d0d450692c63abbbae7956a058f728"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"06584e6e98d592b34e1329b384182f368d2025e8":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["db610e9e698f94982d7a1af15a21d6a30ef96b9d"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["4bd5d0a5ac72666f0bcbd50b535d2cc70dbf584b","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","55c2bb1bcc0edd142e63b9230976dfc3e500dbe8"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["d572389229127c297dd1fa5ce4758e1cec41e799"],"300334dcd665e74e45788a3884e5989d4b4bab15":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a3776dccca01c11e7046323cfad46a3b4a471233":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"db610e9e698f94982d7a1af15a21d6a30ef96b9d":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"3bb13258feba31ab676502787ab2e1779f129b7a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"55c2bb1bcc0edd142e63b9230976dfc3e500dbe8":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["db610e9e698f94982d7a1af15a21d6a30ef96b9d"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["55c2bb1bcc0edd142e63b9230976dfc3e500dbe8","5cab9a86bd67202d20b6adc463008c8e982b070a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["06584e6e98d592b34e1329b384182f368d2025e8","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"4bd5d0a5ac72666f0bcbd50b535d2cc70dbf584b":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["74d2234fd7d0d450692c63abbbae7956a058f728","9ab1f5591dc05f1f2b5407d809c9699f75554a32"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"74d2234fd7d0d450692c63abbbae7956a058f728":["8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5","9ab1f5591dc05f1f2b5407d809c9699f75554a32"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","ab5cb6a74aefb78aa0569857970b9151dfe2e787","a3776dccca01c11e7046323cfad46a3b4a471233"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"833a7987bc1c94455fde83e3311f72bddedcfb93":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"c5947ccd7ba3770dcba5a0713dbd5496678256d9":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["3bb13258feba31ab676502787ab2e1779f129b7a"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["300334dcd665e74e45788a3884e5989d4b4bab15"],"06584e6e98d592b34e1329b384182f368d2025e8":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"d572389229127c297dd1fa5ce4758e1cec41e799":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"962d04139994fce5193143ef35615499a9a96d78":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["b21422ff1d1d56499dec481f193b402e5e8def5b","833a7987bc1c94455fde83e3311f72bddedcfb93"],"300334dcd665e74e45788a3884e5989d4b4bab15":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"db610e9e698f94982d7a1af15a21d6a30ef96b9d":["d572389229127c297dd1fa5ce4758e1cec41e799"],"3bb13258feba31ab676502787ab2e1779f129b7a":["4bd5d0a5ac72666f0bcbd50b535d2cc70dbf584b"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["c5947ccd7ba3770dcba5a0713dbd5496678256d9","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}