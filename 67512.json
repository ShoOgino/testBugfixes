{"path":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#decRef(Collection[String]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#decRef(Collection[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#decRef(Collection[String]).mjava","sourceNew":"  void decRef(Collection<String> files) throws IOException {\n    assert locked();\n    for(final String file : files) {\n      decRef(file);\n    }\n  }\n\n","sourceOld":"  void decRef(Collection<String> files) throws IOException {\n    assert locked();\n    for(final String file : files) {\n      decRef(file);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cefe924a3b76c22b7df9a075329750871699af6b","date":1409757963,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#decRef(Collection[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#decRef(Collection[String]).mjava","sourceNew":"  /** Decrefs all provided files, even on exception; throws first exception hit, if any. */\n  void decRef(Collection<String> files) throws IOException {\n    assert locked();\n    Throwable firstThrowable = null;\n    for(final String file : files) {\n      try {\n        decRef(file);\n      } catch (Throwable t) {\n        if (firstThrowable == null) {\n          // Save first exception and throw it in the end, but be sure to finish decRef all files\n          firstThrowable = t;\n        }\n      }\n    }\n\n    // NOTE: does nothing if firstThrowable is null\n    IOUtils.reThrow(firstThrowable);\n  }\n\n","sourceOld":"  void decRef(Collection<String> files) throws IOException {\n    assert locked();\n    for(final String file : files) {\n      decRef(file);\n    }\n  }\n\n","bugFix":["ef82ff03e4016c705811b2658e81471a645c0e49"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7599427f762eb1b4265584fd6e96521e4a1a4f3c","date":1413100083,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#decRef(Collection[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#decRef(Collection[String]).mjava","sourceNew":"  /** Decrefs all provided files, even on exception; throws first exception hit, if any. */\n  void decRef(Collection<String> files) {\n    assert locked();\n    Throwable firstThrowable = null;\n    for(final String file : files) {\n      try {\n        decRef(file);\n      } catch (Throwable t) {\n        if (firstThrowable == null) {\n          // Save first exception and throw it in the end, but be sure to finish decRef all files\n          firstThrowable = t;\n        }\n      }\n    }\n\n    // NOTE: does nothing if firstThrowable is null\n    IOUtils.reThrowUnchecked(firstThrowable);\n  }\n\n","sourceOld":"  /** Decrefs all provided files, even on exception; throws first exception hit, if any. */\n  void decRef(Collection<String> files) throws IOException {\n    assert locked();\n    Throwable firstThrowable = null;\n    for(final String file : files) {\n      try {\n        decRef(file);\n      } catch (Throwable t) {\n        if (firstThrowable == null) {\n          // Save first exception and throw it in the end, but be sure to finish decRef all files\n          firstThrowable = t;\n        }\n      }\n    }\n\n    // NOTE: does nothing if firstThrowable is null\n    IOUtils.reThrow(firstThrowable);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#decRef(Collection[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#decRef(Collection[String]).mjava","sourceNew":"  /** Decrefs all provided files, even on exception; throws first exception hit, if any. */\n  void decRef(Collection<String> files) {\n    assert locked();\n    Throwable firstThrowable = null;\n    for(final String file : files) {\n      try {\n        decRef(file);\n      } catch (Throwable t) {\n        if (firstThrowable == null) {\n          // Save first exception and throw it in the end, but be sure to finish decRef all files\n          firstThrowable = t;\n        }\n      }\n    }\n\n    // NOTE: does nothing if firstThrowable is null\n    IOUtils.reThrowUnchecked(firstThrowable);\n  }\n\n","sourceOld":"  /** Decrefs all provided files, even on exception; throws first exception hit, if any. */\n  void decRef(Collection<String> files) throws IOException {\n    assert locked();\n    Throwable firstThrowable = null;\n    for(final String file : files) {\n      try {\n        decRef(file);\n      } catch (Throwable t) {\n        if (firstThrowable == null) {\n          // Save first exception and throw it in the end, but be sure to finish decRef all files\n          firstThrowable = t;\n        }\n      }\n    }\n\n    // NOTE: does nothing if firstThrowable is null\n    IOUtils.reThrow(firstThrowable);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"950882a2bd2a5f9dc16a154871584eaa643d882a","date":1436366563,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#decRef(Collection[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#decRef(Collection[String]).mjava","sourceNew":"  /** Decrefs all provided files, even on exception; throws first exception hit, if any. */\n  void decRef(Collection<String> files) {\n    assert locked();\n    Throwable firstThrowable = null;\n    for(final String file : files) {\n      try {\n        decRef(file);\n      } catch (Throwable t) {\n        if (firstThrowable == null) {\n          // Save first exception and throw it in the end, but be sure to finish decRef all files\n          firstThrowable = t;\n        }\n      }\n    }\n\n    try {\n      deletePendingFiles();\n    } catch (Throwable t) {\n      if (firstThrowable == null) {\n        // Save first exception and throw it in the end, but be sure to finish decRef all files\n        firstThrowable = t;\n      }\n    }\n\n    // NOTE: does nothing if firstThrowable is null\n    IOUtils.reThrowUnchecked(firstThrowable);\n  }\n\n","sourceOld":"  /** Decrefs all provided files, even on exception; throws first exception hit, if any. */\n  void decRef(Collection<String> files) {\n    assert locked();\n    Throwable firstThrowable = null;\n    for(final String file : files) {\n      try {\n        decRef(file);\n      } catch (Throwable t) {\n        if (firstThrowable == null) {\n          // Save first exception and throw it in the end, but be sure to finish decRef all files\n          firstThrowable = t;\n        }\n      }\n    }\n\n    // NOTE: does nothing if firstThrowable is null\n    IOUtils.reThrowUnchecked(firstThrowable);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#decRef(Collection[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#decRef(Collection[String]).mjava","sourceNew":"  /** Decrefs all provided files, even on exception; throws first exception hit, if any. */\n  void decRef(Collection<String> files) throws IOException {\n    assert locked();\n    Set<String> toDelete = new HashSet<>();\n    Throwable firstThrowable = null;\n    for(final String file : files) {\n      try {\n        if (decRef(file)) {\n          toDelete.add(file);\n        }\n      } catch (Throwable t) {\n        if (firstThrowable == null) {\n          // Save first exception and throw it in the end, but be sure to finish decRef all files\n          firstThrowable = t;\n        }\n      }\n    }\n\n    try {\n      deleteFiles(toDelete);\n    } catch (Throwable t) {\n      if (firstThrowable == null) {\n        // Save first exception and throw it in the end, but be sure to finish decRef all files\n        firstThrowable = t;\n      }\n    }\n\n    // NOTE: does nothing if firstThrowable is null\n    IOUtils.reThrow(firstThrowable);\n  }\n\n","sourceOld":"  /** Decrefs all provided files, even on exception; throws first exception hit, if any. */\n  void decRef(Collection<String> files) {\n    assert locked();\n    Throwable firstThrowable = null;\n    for(final String file : files) {\n      try {\n        decRef(file);\n      } catch (Throwable t) {\n        if (firstThrowable == null) {\n          // Save first exception and throw it in the end, but be sure to finish decRef all files\n          firstThrowable = t;\n        }\n      }\n    }\n\n    try {\n      deletePendingFiles();\n    } catch (Throwable t) {\n      if (firstThrowable == null) {\n        // Save first exception and throw it in the end, but be sure to finish decRef all files\n        firstThrowable = t;\n      }\n    }\n\n    // NOTE: does nothing if firstThrowable is null\n    IOUtils.reThrowUnchecked(firstThrowable);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#decRef(Collection[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#decRef(Collection[String]).mjava","sourceNew":"  /** Decrefs all provided files, even on exception; throws first exception hit, if any. */\n  void decRef(Collection<String> files) throws IOException {\n    assert locked();\n    Set<String> toDelete = new HashSet<>();\n    Throwable firstThrowable = null;\n    for(final String file : files) {\n      try {\n        if (decRef(file)) {\n          toDelete.add(file);\n        }\n      } catch (Throwable t) {\n        if (firstThrowable == null) {\n          // Save first exception and throw it in the end, but be sure to finish decRef all files\n          firstThrowable = t;\n        }\n      }\n    }\n\n    try {\n      deleteFiles(toDelete);\n    } catch (Throwable t) {\n      if (firstThrowable == null) {\n        // Save first exception and throw it in the end, but be sure to finish decRef all files\n        firstThrowable = t;\n      }\n    }\n\n    // NOTE: does nothing if firstThrowable is null\n    IOUtils.reThrow(firstThrowable);\n  }\n\n","sourceOld":"  /** Decrefs all provided files, even on exception; throws first exception hit, if any. */\n  void decRef(Collection<String> files) {\n    assert locked();\n    Throwable firstThrowable = null;\n    for(final String file : files) {\n      try {\n        decRef(file);\n      } catch (Throwable t) {\n        if (firstThrowable == null) {\n          // Save first exception and throw it in the end, but be sure to finish decRef all files\n          firstThrowable = t;\n        }\n      }\n    }\n\n    try {\n      deletePendingFiles();\n    } catch (Throwable t) {\n      if (firstThrowable == null) {\n        // Save first exception and throw it in the end, but be sure to finish decRef all files\n        firstThrowable = t;\n      }\n    }\n\n    // NOTE: does nothing if firstThrowable is null\n    IOUtils.reThrowUnchecked(firstThrowable);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#decRef(Collection[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#decRef(Collection[String]).mjava","sourceNew":"  /** Decrefs all provided files, even on exception; throws first exception hit, if any. */\n  void decRef(Collection<String> files) throws IOException {\n    assert locked();\n    Set<String> toDelete = new HashSet<>();\n    Throwable firstThrowable = null;\n    for(final String file : files) {\n      try {\n        if (decRef(file)) {\n          toDelete.add(file);\n        }\n      } catch (Throwable t) {\n        if (firstThrowable == null) {\n          // Save first exception and throw it in the end, but be sure to finish decRef all files\n          firstThrowable = t;\n        }\n      }\n    }\n\n    try {\n      deleteFiles(toDelete);\n    } catch (Throwable t) {\n      if (firstThrowable == null) {\n        // Save first exception and throw it in the end, but be sure to finish decRef all files\n        firstThrowable = t;\n      }\n    }\n\n    // NOTE: does nothing if firstThrowable is null\n    IOUtils.reThrow(firstThrowable);\n  }\n\n","sourceOld":"  /** Decrefs all provided files, even on exception; throws first exception hit, if any. */\n  void decRef(Collection<String> files) {\n    assert locked();\n    Throwable firstThrowable = null;\n    for(final String file : files) {\n      try {\n        decRef(file);\n      } catch (Throwable t) {\n        if (firstThrowable == null) {\n          // Save first exception and throw it in the end, but be sure to finish decRef all files\n          firstThrowable = t;\n        }\n      }\n    }\n\n    try {\n      deletePendingFiles();\n    } catch (Throwable t) {\n      if (firstThrowable == null) {\n        // Save first exception and throw it in the end, but be sure to finish decRef all files\n        firstThrowable = t;\n      }\n    }\n\n    // NOTE: does nothing if firstThrowable is null\n    IOUtils.reThrowUnchecked(firstThrowable);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#decRef(Collection[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#decRef(Collection[String]).mjava","sourceNew":"  /** Decrefs all provided files, even on exception; throws first exception hit, if any. */\n  void decRef(Collection<String> files) throws IOException {\n    assert locked();\n    Set<String> toDelete = new HashSet<>();\n    Throwable firstThrowable = null;\n    for(final String file : files) {\n      try {\n        if (decRef(file)) {\n          toDelete.add(file);\n        }\n      } catch (Throwable t) {\n        if (firstThrowable == null) {\n          // Save first exception and throw it in the end, but be sure to finish decRef all files\n          firstThrowable = t;\n        }\n      }\n    }\n\n    try {\n      deleteFiles(toDelete);\n    } catch (Throwable t) {\n      if (firstThrowable == null) {\n        // Save first exception and throw it in the end, but be sure to finish decRef all files\n        firstThrowable = t;\n      }\n    }\n\n    // NOTE: does nothing if firstThrowable is null\n    IOUtils.reThrow(firstThrowable);\n  }\n\n","sourceOld":"  /** Decrefs all provided files, even on exception; throws first exception hit, if any. */\n  void decRef(Collection<String> files) {\n    assert locked();\n    Throwable firstThrowable = null;\n    for(final String file : files) {\n      try {\n        decRef(file);\n      } catch (Throwable t) {\n        if (firstThrowable == null) {\n          // Save first exception and throw it in the end, but be sure to finish decRef all files\n          firstThrowable = t;\n        }\n      }\n    }\n\n    try {\n      deletePendingFiles();\n    } catch (Throwable t) {\n      if (firstThrowable == null) {\n        // Save first exception and throw it in the end, but be sure to finish decRef all files\n        firstThrowable = t;\n      }\n    }\n\n    // NOTE: does nothing if firstThrowable is null\n    IOUtils.reThrowUnchecked(firstThrowable);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2","date":1493374641,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#decRef(Collection[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#decRef(Collection[String]).mjava","sourceNew":"  /** Decrefs all provided files, even on exception; throws first exception hit, if any. */\n  void decRef(Collection<String> files) throws IOException {\n    assert locked();\n    Set<String> toDelete = new HashSet<>();\n    Throwable firstThrowable = null;\n    for(final String file : files) {\n      try {\n        if (decRef(file)) {\n          toDelete.add(file);\n        }\n      } catch (Throwable t) {\n        if (firstThrowable == null) {\n          // Save first exception and throw it in the end, but be sure to finish decRef all files\n          firstThrowable = t;\n        }\n      }\n    }\n\n    try {\n      deleteFiles(toDelete);\n    } catch (Throwable t) {\n      if (firstThrowable == null) {\n        // Save first exception and throw it in the end, but be sure to finish decRef all files\n        firstThrowable = t;\n      }\n    }\n\n    if (firstThrowable != null) {\n      throw IOUtils.rethrowAlways(firstThrowable);\n    }\n  }\n\n","sourceOld":"  /** Decrefs all provided files, even on exception; throws first exception hit, if any. */\n  void decRef(Collection<String> files) throws IOException {\n    assert locked();\n    Set<String> toDelete = new HashSet<>();\n    Throwable firstThrowable = null;\n    for(final String file : files) {\n      try {\n        if (decRef(file)) {\n          toDelete.add(file);\n        }\n      } catch (Throwable t) {\n        if (firstThrowable == null) {\n          // Save first exception and throw it in the end, but be sure to finish decRef all files\n          firstThrowable = t;\n        }\n      }\n    }\n\n    try {\n      deleteFiles(toDelete);\n    } catch (Throwable t) {\n      if (firstThrowable == null) {\n        // Save first exception and throw it in the end, but be sure to finish decRef all files\n        firstThrowable = t;\n      }\n    }\n\n    // NOTE: does nothing if firstThrowable is null\n    IOUtils.reThrow(firstThrowable);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#decRef(Collection[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#decRef(Collection[String]).mjava","sourceNew":"  /** Decrefs all provided files, even on exception; throws first exception hit, if any. */\n  void decRef(Collection<String> files) throws IOException {\n    assert locked();\n    Set<String> toDelete = new HashSet<>();\n    Throwable firstThrowable = null;\n    for(final String file : files) {\n      try {\n        if (decRef(file)) {\n          toDelete.add(file);\n        }\n      } catch (Throwable t) {\n        if (firstThrowable == null) {\n          // Save first exception and throw it in the end, but be sure to finish decRef all files\n          firstThrowable = t;\n        }\n      }\n    }\n\n    try {\n      deleteFiles(toDelete);\n    } catch (Throwable t) {\n      if (firstThrowable == null) {\n        // Save first exception and throw it in the end, but be sure to finish decRef all files\n        firstThrowable = t;\n      }\n    }\n\n    if (firstThrowable != null) {\n      throw IOUtils.rethrowAlways(firstThrowable);\n    }\n  }\n\n","sourceOld":"  /** Decrefs all provided files, even on exception; throws first exception hit, if any. */\n  void decRef(Collection<String> files) throws IOException {\n    assert locked();\n    Set<String> toDelete = new HashSet<>();\n    Throwable firstThrowable = null;\n    for(final String file : files) {\n      try {\n        if (decRef(file)) {\n          toDelete.add(file);\n        }\n      } catch (Throwable t) {\n        if (firstThrowable == null) {\n          // Save first exception and throw it in the end, but be sure to finish decRef all files\n          firstThrowable = t;\n        }\n      }\n    }\n\n    try {\n      deleteFiles(toDelete);\n    } catch (Throwable t) {\n      if (firstThrowable == null) {\n        // Save first exception and throw it in the end, but be sure to finish decRef all files\n        firstThrowable = t;\n      }\n    }\n\n    // NOTE: does nothing if firstThrowable is null\n    IOUtils.reThrow(firstThrowable);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14d66d86a8b184a86bcaebcf6e15fcef486e0876","date":1521539412,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#decRef(Collection[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#decRef(Collection[String]).mjava","sourceNew":"  /** Decrefs all provided files, even on exception; throws first exception hit, if any. */\n  void decRef(Collection<String> files) throws IOException {\n    assert locked();\n    Set<String> toDelete = new HashSet<>();\n    Throwable firstThrowable = null;\n    for(final String file : files) {\n      try {\n        if (decRef(file)) {\n          toDelete.add(file);\n        }\n      } catch (Throwable t) {\n        firstThrowable = IOUtils.useOrSuppress(firstThrowable, t);\n      }\n    }\n\n    try {\n      deleteFiles(toDelete);\n    } catch (Throwable t) {\n      firstThrowable = IOUtils.useOrSuppress(firstThrowable, t);\n    }\n\n    if (firstThrowable != null) {\n      throw IOUtils.rethrowAlways(firstThrowable);\n    }\n  }\n\n","sourceOld":"  /** Decrefs all provided files, even on exception; throws first exception hit, if any. */\n  void decRef(Collection<String> files) throws IOException {\n    assert locked();\n    Set<String> toDelete = new HashSet<>();\n    Throwable firstThrowable = null;\n    for(final String file : files) {\n      try {\n        if (decRef(file)) {\n          toDelete.add(file);\n        }\n      } catch (Throwable t) {\n        if (firstThrowable == null) {\n          // Save first exception and throw it in the end, but be sure to finish decRef all files\n          firstThrowable = t;\n        }\n      }\n    }\n\n    try {\n      deleteFiles(toDelete);\n    } catch (Throwable t) {\n      if (firstThrowable == null) {\n        // Save first exception and throw it in the end, but be sure to finish decRef all files\n        firstThrowable = t;\n      }\n    }\n\n    if (firstThrowable != null) {\n      throw IOUtils.rethrowAlways(firstThrowable);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","date":1521731438,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#decRef(Collection[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#decRef(Collection[String]).mjava","sourceNew":"  /** Decrefs all provided files, even on exception; throws first exception hit, if any. */\n  void decRef(Collection<String> files) throws IOException {\n    assert locked();\n    Set<String> toDelete = new HashSet<>();\n    Throwable firstThrowable = null;\n    for(final String file : files) {\n      try {\n        if (decRef(file)) {\n          toDelete.add(file);\n        }\n      } catch (Throwable t) {\n        firstThrowable = IOUtils.useOrSuppress(firstThrowable, t);\n      }\n    }\n\n    try {\n      deleteFiles(toDelete);\n    } catch (Throwable t) {\n      firstThrowable = IOUtils.useOrSuppress(firstThrowable, t);\n    }\n\n    if (firstThrowable != null) {\n      throw IOUtils.rethrowAlways(firstThrowable);\n    }\n  }\n\n","sourceOld":"  /** Decrefs all provided files, even on exception; throws first exception hit, if any. */\n  void decRef(Collection<String> files) throws IOException {\n    assert locked();\n    Set<String> toDelete = new HashSet<>();\n    Throwable firstThrowable = null;\n    for(final String file : files) {\n      try {\n        if (decRef(file)) {\n          toDelete.add(file);\n        }\n      } catch (Throwable t) {\n        if (firstThrowable == null) {\n          // Save first exception and throw it in the end, but be sure to finish decRef all files\n          firstThrowable = t;\n        }\n      }\n    }\n\n    try {\n      deleteFiles(toDelete);\n    } catch (Throwable t) {\n      if (firstThrowable == null) {\n        // Save first exception and throw it in the end, but be sure to finish decRef all files\n        firstThrowable = t;\n      }\n    }\n\n    if (firstThrowable != null) {\n      throw IOUtils.rethrowAlways(firstThrowable);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7599427f762eb1b4265584fd6e96521e4a1a4f3c":["cefe924a3b76c22b7df9a075329750871699af6b"],"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["97fc96e6cc460e0ec1fb904a9c7ecd80680780c2","14d66d86a8b184a86bcaebcf6e15fcef486e0876"],"55980207f1977bd1463465de1659b821347e2fa8":["cefe924a3b76c22b7df9a075329750871699af6b","7599427f762eb1b4265584fd6e96521e4a1a4f3c"],"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2":["5a207d19eac354d649c3f0e2cce070017c78125e"],"cefe924a3b76c22b7df9a075329750871699af6b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a207d19eac354d649c3f0e2cce070017c78125e":["950882a2bd2a5f9dc16a154871584eaa643d882a","b470f36a9372c97283360b1304eacbde22df6c0d"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["950882a2bd2a5f9dc16a154871584eaa643d882a","b470f36a9372c97283360b1304eacbde22df6c0d"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["5a207d19eac354d649c3f0e2cce070017c78125e","97fc96e6cc460e0ec1fb904a9c7ecd80680780c2"],"b470f36a9372c97283360b1304eacbde22df6c0d":["950882a2bd2a5f9dc16a154871584eaa643d882a","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"950882a2bd2a5f9dc16a154871584eaa643d882a":["7599427f762eb1b4265584fd6e96521e4a1a4f3c"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["950882a2bd2a5f9dc16a154871584eaa643d882a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"14d66d86a8b184a86bcaebcf6e15fcef486e0876":["97fc96e6cc460e0ec1fb904a9c7ecd80680780c2"]},"commit2Childs":{"7599427f762eb1b4265584fd6e96521e4a1a4f3c":["55980207f1977bd1463465de1659b821347e2fa8","950882a2bd2a5f9dc16a154871584eaa643d882a"],"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"55980207f1977bd1463465de1659b821347e2fa8":[],"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","e9017cf144952056066919f1ebc7897ff9bd71b1","14d66d86a8b184a86bcaebcf6e15fcef486e0876"],"cefe924a3b76c22b7df9a075329750871699af6b":["7599427f762eb1b4265584fd6e96521e4a1a4f3c","55980207f1977bd1463465de1659b821347e2fa8"],"5a207d19eac354d649c3f0e2cce070017c78125e":["97fc96e6cc460e0ec1fb904a9c7ecd80680780c2","e9017cf144952056066919f1ebc7897ff9bd71b1"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cefe924a3b76c22b7df9a075329750871699af6b"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"950882a2bd2a5f9dc16a154871584eaa643d882a":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3","b470f36a9372c97283360b1304eacbde22df6c0d","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["b470f36a9372c97283360b1304eacbde22df6c0d"],"14d66d86a8b184a86bcaebcf6e15fcef486e0876":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","1e6acbaae7af722f17204ceccf0f7db5753eccf3","e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}