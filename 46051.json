{"path":"contrib/gdata-server/src/java/org/apache/lucene/gdata/utils/ReflectionUtils#getPrimitiveWrapper(Class).mjava","commits":[{"id":"09fe963da2613c724ffe82353b4ca2364a1f93c6","date":1155249160,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/utils/ReflectionUtils#getPrimitiveWrapper(Class).mjava","pathOld":"/dev/null","sourceNew":"/**\n * Returns the wrapper type for the given primitive type. Wrappers can be\n * easily instantiated via reflection and will be boxed by the VM\n * @param primitive - the primitive type \n * @return - the corresponding wrapper type\n */\npublic static final Class getPrimitiveWrapper(Class primitive) {\n    if(primitive == null )\n        throw new ReflectionException(\"primitive must not be null\");\n    if(!primitive.isPrimitive())\n        throw new ReflectionException(\"given class is not a primitive\");\n                \n    if (primitive == Integer.TYPE)\n        return Integer.class;\n    if (primitive == Float.TYPE)\n        return Float.class;\n    if (primitive == Long.TYPE)\n        return Long.class;\n    if (primitive == Short.TYPE)\n        return Short.class;\n    if (primitive == Byte.TYPE)\n        return Byte.class;\n    if (primitive == Double.TYPE)\n        return Double.class;\n    if (primitive == Boolean.TYPE)\n        return Boolean.class;\n\n    return primitive;\n}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/utils/ReflectionUtils#getPrimitiveWrapper(Class).mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/utils/ReflectionUtils#getPrimitiveWrapper(Class).mjava","sourceNew":"/**\n * Returns the wrapper type for the given primitive type. Wrappers can be\n * easily instantiated via reflection and will be boxed by the VM\n * @param primitive - the primitive type \n * @return - the corresponding wrapper type\n */\npublic static final Class getPrimitiveWrapper(Class primitive) {\n    if(primitive == null )\n        throw new ReflectionException(\"primitive must not be null\");\n    if(!primitive.isPrimitive())\n        throw new ReflectionException(\"given class is not a primitive\");\n                \n    if (primitive == Integer.TYPE)\n        return Integer.class;\n    if (primitive == Float.TYPE)\n        return Float.class;\n    if (primitive == Long.TYPE)\n        return Long.class;\n    if (primitive == Short.TYPE)\n        return Short.class;\n    if (primitive == Byte.TYPE)\n        return Byte.class;\n    if (primitive == Double.TYPE)\n        return Double.class;\n    if (primitive == Boolean.TYPE)\n        return Boolean.class;\n\n    return primitive;\n}\n\n","sourceOld":"/**\n * Returns the wrapper type for the given primitive type. Wrappers can be\n * easily instantiated via reflection and will be boxed by the VM\n * @param primitive - the primitive type \n * @return - the corresponding wrapper type\n */\npublic static final Class getPrimitiveWrapper(Class primitive) {\n    if(primitive == null )\n        throw new ReflectionException(\"primitive must not be null\");\n    if(!primitive.isPrimitive())\n        throw new ReflectionException(\"given class is not a primitive\");\n                \n    if (primitive == Integer.TYPE)\n        return Integer.class;\n    if (primitive == Float.TYPE)\n        return Float.class;\n    if (primitive == Long.TYPE)\n        return Long.class;\n    if (primitive == Short.TYPE)\n        return Short.class;\n    if (primitive == Byte.TYPE)\n        return Byte.class;\n    if (primitive == Double.TYPE)\n        return Double.class;\n    if (primitive == Boolean.TYPE)\n        return Boolean.class;\n\n    return primitive;\n}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"09fe963da2613c724ffe82353b4ca2364a1f93c6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["09fe963da2613c724ffe82353b4ca2364a1f93c6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5824af871ba6863399636aa5989bfc0ef2ea448c"]},"commit2Childs":{"09fe963da2613c724ffe82353b4ca2364a1f93c6":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09fe963da2613c724ffe82353b4ca2364a1f93c6"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}