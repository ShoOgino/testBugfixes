{"path":"solr/core/src/java/org/apache/solr/security/HadoopAuthFilter#getCuratorClient(SolrZkClient).mjava","commits":[{"id":"29887daf839649150d96855b142b76f5c45d60d2","date":1482160504,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/HadoopAuthFilter#getCuratorClient(SolrZkClient).mjava","pathOld":"/dev/null","sourceNew":"  protected CuratorFramework getCuratorClient(SolrZkClient zkClient) {\n    // should we try to build a RetryPolicy off of the ZkController?\n    RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);\n    if (zkClient == null) {\n      throw new IllegalArgumentException(\"zkClient required\");\n    }\n    String zkHost = zkClient.getZkServerAddress();\n    String zkChroot = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): \"\";\n    String zkNamespace = zkChroot + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH;\n    zkNamespace = zkNamespace.startsWith(\"/\") ? zkNamespace.substring(1) : zkNamespace;\n    String zkConnectionString = zkHost.contains(\"/\")? zkHost.substring(0, zkHost.indexOf(\"/\")): zkHost;\n    SolrZkToCuratorCredentialsACLs curatorToSolrZk = new SolrZkToCuratorCredentialsACLs(zkClient);\n    final int connectionTimeoutMs = 30000; // this value is currently hard coded, see SOLR-7561.\n\n    curatorFramework = CuratorFrameworkFactory.builder()\n        .namespace(zkNamespace)\n        .connectString(zkConnectionString)\n        .retryPolicy(retryPolicy)\n        .aclProvider(curatorToSolrZk.getACLProvider())\n        .authorization(curatorToSolrZk.getAuthInfos())\n        .sessionTimeoutMs(zkClient.getZkClientTimeout())\n        .connectionTimeoutMs(connectionTimeoutMs)\n        .build();\n    curatorFramework.start();\n    return curatorFramework;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/security/HadoopAuthFilter#getCuratorClient(SolrZkClient).mjava","pathOld":"/dev/null","sourceNew":"  protected CuratorFramework getCuratorClient(SolrZkClient zkClient) {\n    // should we try to build a RetryPolicy off of the ZkController?\n    RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);\n    if (zkClient == null) {\n      throw new IllegalArgumentException(\"zkClient required\");\n    }\n    String zkHost = zkClient.getZkServerAddress();\n    String zkChroot = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): \"\";\n    String zkNamespace = zkChroot + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH;\n    zkNamespace = zkNamespace.startsWith(\"/\") ? zkNamespace.substring(1) : zkNamespace;\n    String zkConnectionString = zkHost.contains(\"/\")? zkHost.substring(0, zkHost.indexOf(\"/\")): zkHost;\n    SolrZkToCuratorCredentialsACLs curatorToSolrZk = new SolrZkToCuratorCredentialsACLs(zkClient);\n    final int connectionTimeoutMs = 30000; // this value is currently hard coded, see SOLR-7561.\n\n    curatorFramework = CuratorFrameworkFactory.builder()\n        .namespace(zkNamespace)\n        .connectString(zkConnectionString)\n        .retryPolicy(retryPolicy)\n        .aclProvider(curatorToSolrZk.getACLProvider())\n        .authorization(curatorToSolrZk.getAuthInfos())\n        .sessionTimeoutMs(zkClient.getZkClientTimeout())\n        .connectionTimeoutMs(connectionTimeoutMs)\n        .build();\n    curatorFramework.start();\n    return curatorFramework;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff7e60660726fd43b5f9d130e3de39e69252227a","date":1502275613,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/HadoopAuthFilter#getCuratorClient(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/HadoopAuthFilter#getCuratorClient(SolrZkClient).mjava","sourceNew":"  protected CuratorFramework getCuratorClient(SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    // should we try to build a RetryPolicy off of the ZkController?\n    RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);\n    if (zkClient == null) {\n      throw new IllegalArgumentException(\"zkClient required\");\n    }\n    String zkHost = zkClient.getZkServerAddress();\n    String zkChroot = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): \"\";\n    String zkNamespace = zkChroot + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH;\n    zkNamespace = zkNamespace.startsWith(\"/\") ? zkNamespace.substring(1) : zkNamespace;\n    String zkConnectionString = zkHost.contains(\"/\")? zkHost.substring(0, zkHost.indexOf(\"/\")): zkHost;\n    SolrZkToCuratorCredentialsACLs curatorToSolrZk = new SolrZkToCuratorCredentialsACLs(zkClient);\n    final int connectionTimeoutMs = 30000; // this value is currently hard coded, see SOLR-7561.\n\n    // Create /security znode upfront. Without this, the curator framework creates this directory path\n    // without the appropriate ACL configuration. This issue is possibly related to HADOOP-11973\n    try {\n      zkClient.makePath(SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH, CreateMode.PERSISTENT, true);\n\n    } catch (KeeperException ex) {\n      if (ex.code() != KeeperException.Code.NODEEXISTS) {\n        throw ex;\n      }\n    }\n\n    curatorFramework = CuratorFrameworkFactory.builder()\n        .namespace(zkNamespace)\n        .connectString(zkConnectionString)\n        .retryPolicy(retryPolicy)\n        .aclProvider(curatorToSolrZk.getACLProvider())\n        .authorization(curatorToSolrZk.getAuthInfos())\n        .sessionTimeoutMs(zkClient.getZkClientTimeout())\n        .connectionTimeoutMs(connectionTimeoutMs)\n        .build();\n    curatorFramework.start();\n    return curatorFramework;\n  }\n\n","sourceOld":"  protected CuratorFramework getCuratorClient(SolrZkClient zkClient) {\n    // should we try to build a RetryPolicy off of the ZkController?\n    RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);\n    if (zkClient == null) {\n      throw new IllegalArgumentException(\"zkClient required\");\n    }\n    String zkHost = zkClient.getZkServerAddress();\n    String zkChroot = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): \"\";\n    String zkNamespace = zkChroot + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH;\n    zkNamespace = zkNamespace.startsWith(\"/\") ? zkNamespace.substring(1) : zkNamespace;\n    String zkConnectionString = zkHost.contains(\"/\")? zkHost.substring(0, zkHost.indexOf(\"/\")): zkHost;\n    SolrZkToCuratorCredentialsACLs curatorToSolrZk = new SolrZkToCuratorCredentialsACLs(zkClient);\n    final int connectionTimeoutMs = 30000; // this value is currently hard coded, see SOLR-7561.\n\n    curatorFramework = CuratorFrameworkFactory.builder()\n        .namespace(zkNamespace)\n        .connectString(zkConnectionString)\n        .retryPolicy(retryPolicy)\n        .aclProvider(curatorToSolrZk.getACLProvider())\n        .authorization(curatorToSolrZk.getAuthInfos())\n        .sessionTimeoutMs(zkClient.getZkClientTimeout())\n        .connectionTimeoutMs(connectionTimeoutMs)\n        .build();\n    curatorFramework.start();\n    return curatorFramework;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58884af1f68e9d61c217c753fbd6266d86a63b14","date":1502363401,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/security/HadoopAuthFilter#getCuratorClient(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/HadoopAuthFilter#getCuratorClient(SolrZkClient).mjava","sourceNew":"  protected CuratorFramework getCuratorClient(SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    // should we try to build a RetryPolicy off of the ZkController?\n    RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);\n    if (zkClient == null) {\n      throw new IllegalArgumentException(\"zkClient required\");\n    }\n    String zkHost = zkClient.getZkServerAddress();\n    String zkChroot = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): \"\";\n    String zkNamespace = zkChroot + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH;\n    zkNamespace = zkNamespace.startsWith(\"/\") ? zkNamespace.substring(1) : zkNamespace;\n    String zkConnectionString = zkHost.contains(\"/\")? zkHost.substring(0, zkHost.indexOf(\"/\")): zkHost;\n    SolrZkToCuratorCredentialsACLs curatorToSolrZk = new SolrZkToCuratorCredentialsACLs(zkClient);\n    final int connectionTimeoutMs = 30000; // this value is currently hard coded, see SOLR-7561.\n\n    // Create /security znode upfront. Without this, the curator framework creates this directory path\n    // without the appropriate ACL configuration. This issue is possibly related to HADOOP-11973\n    try {\n      zkClient.makePath(SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH, CreateMode.PERSISTENT, true);\n\n    } catch (KeeperException ex) {\n      if (ex.code() != KeeperException.Code.NODEEXISTS) {\n        throw ex;\n      }\n    }\n\n    curatorFramework = CuratorFrameworkFactory.builder()\n        .namespace(zkNamespace)\n        .connectString(zkConnectionString)\n        .retryPolicy(retryPolicy)\n        .aclProvider(curatorToSolrZk.getACLProvider())\n        .authorization(curatorToSolrZk.getAuthInfos())\n        .sessionTimeoutMs(zkClient.getZkClientTimeout())\n        .connectionTimeoutMs(connectionTimeoutMs)\n        .build();\n    curatorFramework.start();\n    return curatorFramework;\n  }\n\n","sourceOld":"  protected CuratorFramework getCuratorClient(SolrZkClient zkClient) {\n    // should we try to build a RetryPolicy off of the ZkController?\n    RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);\n    if (zkClient == null) {\n      throw new IllegalArgumentException(\"zkClient required\");\n    }\n    String zkHost = zkClient.getZkServerAddress();\n    String zkChroot = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): \"\";\n    String zkNamespace = zkChroot + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH;\n    zkNamespace = zkNamespace.startsWith(\"/\") ? zkNamespace.substring(1) : zkNamespace;\n    String zkConnectionString = zkHost.contains(\"/\")? zkHost.substring(0, zkHost.indexOf(\"/\")): zkHost;\n    SolrZkToCuratorCredentialsACLs curatorToSolrZk = new SolrZkToCuratorCredentialsACLs(zkClient);\n    final int connectionTimeoutMs = 30000; // this value is currently hard coded, see SOLR-7561.\n\n    curatorFramework = CuratorFrameworkFactory.builder()\n        .namespace(zkNamespace)\n        .connectString(zkConnectionString)\n        .retryPolicy(retryPolicy)\n        .aclProvider(curatorToSolrZk.getACLProvider())\n        .authorization(curatorToSolrZk.getAuthInfos())\n        .sessionTimeoutMs(zkClient.getZkClientTimeout())\n        .connectionTimeoutMs(connectionTimeoutMs)\n        .build();\n    curatorFramework.start();\n    return curatorFramework;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","date":1502692251,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/security/HadoopAuthFilter#getCuratorClient(SolrZkClient).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/HadoopAuthFilter#getCuratorClient(SolrZkClient).mjava","sourceNew":"  protected CuratorFramework getCuratorClient(SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    // should we try to build a RetryPolicy off of the ZkController?\n    RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);\n    if (zkClient == null) {\n      throw new IllegalArgumentException(\"zkClient required\");\n    }\n    String zkHost = zkClient.getZkServerAddress();\n    String zkChroot = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): \"\";\n    String zkNamespace = zkChroot + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH;\n    zkNamespace = zkNamespace.startsWith(\"/\") ? zkNamespace.substring(1) : zkNamespace;\n    String zkConnectionString = zkHost.contains(\"/\")? zkHost.substring(0, zkHost.indexOf(\"/\")): zkHost;\n    SolrZkToCuratorCredentialsACLs curatorToSolrZk = new SolrZkToCuratorCredentialsACLs(zkClient);\n    final int connectionTimeoutMs = 30000; // this value is currently hard coded, see SOLR-7561.\n\n    // Create /security znode upfront. Without this, the curator framework creates this directory path\n    // without the appropriate ACL configuration. This issue is possibly related to HADOOP-11973\n    try {\n      zkClient.makePath(SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH, CreateMode.PERSISTENT, true);\n\n    } catch (KeeperException ex) {\n      if (ex.code() != KeeperException.Code.NODEEXISTS) {\n        throw ex;\n      }\n    }\n\n    curatorFramework = CuratorFrameworkFactory.builder()\n        .namespace(zkNamespace)\n        .connectString(zkConnectionString)\n        .retryPolicy(retryPolicy)\n        .aclProvider(curatorToSolrZk.getACLProvider())\n        .authorization(curatorToSolrZk.getAuthInfos())\n        .sessionTimeoutMs(zkClient.getZkClientTimeout())\n        .connectionTimeoutMs(connectionTimeoutMs)\n        .build();\n    curatorFramework.start();\n    return curatorFramework;\n  }\n\n","sourceOld":"  protected CuratorFramework getCuratorClient(SolrZkClient zkClient) {\n    // should we try to build a RetryPolicy off of the ZkController?\n    RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);\n    if (zkClient == null) {\n      throw new IllegalArgumentException(\"zkClient required\");\n    }\n    String zkHost = zkClient.getZkServerAddress();\n    String zkChroot = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): \"\";\n    String zkNamespace = zkChroot + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH;\n    zkNamespace = zkNamespace.startsWith(\"/\") ? zkNamespace.substring(1) : zkNamespace;\n    String zkConnectionString = zkHost.contains(\"/\")? zkHost.substring(0, zkHost.indexOf(\"/\")): zkHost;\n    SolrZkToCuratorCredentialsACLs curatorToSolrZk = new SolrZkToCuratorCredentialsACLs(zkClient);\n    final int connectionTimeoutMs = 30000; // this value is currently hard coded, see SOLR-7561.\n\n    curatorFramework = CuratorFrameworkFactory.builder()\n        .namespace(zkNamespace)\n        .connectString(zkConnectionString)\n        .retryPolicy(retryPolicy)\n        .aclProvider(curatorToSolrZk.getACLProvider())\n        .authorization(curatorToSolrZk.getAuthInfos())\n        .sessionTimeoutMs(zkClient.getZkClientTimeout())\n        .connectionTimeoutMs(connectionTimeoutMs)\n        .build();\n    curatorFramework.start();\n    return curatorFramework;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58884af1f68e9d61c217c753fbd6266d86a63b14":["29887daf839649150d96855b142b76f5c45d60d2","ff7e60660726fd43b5f9d130e3de39e69252227a"],"ff7e60660726fd43b5f9d130e3de39e69252227a":["29887daf839649150d96855b142b76f5c45d60d2"],"29887daf839649150d96855b142b76f5c45d60d2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","29887daf839649150d96855b142b76f5c45d60d2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["29887daf839649150d96855b142b76f5c45d60d2","ff7e60660726fd43b5f9d130e3de39e69252227a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ff7e60660726fd43b5f9d130e3de39e69252227a"]},"commit2Childs":{"58884af1f68e9d61c217c753fbd6266d86a63b14":[],"ff7e60660726fd43b5f9d130e3de39e69252227a":["58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29887daf839649150d96855b142b76f5c45d60d2":["58884af1f68e9d61c217c753fbd6266d86a63b14","ff7e60660726fd43b5f9d130e3de39e69252227a","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29887daf839649150d96855b142b76f5c45d60d2","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["58884af1f68e9d61c217c753fbd6266d86a63b14","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}