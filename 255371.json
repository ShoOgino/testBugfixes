{"path":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#testSingleMustMatchAll().mjava","commits":[{"id":"59a0f907db1bc6eb97b13f9c1ef2191d14b5e632","date":1449148233,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#testSingleMustMatchAll().mjava","pathOld":"/dev/null","sourceNew":"  public void testSingleMustMatchAll() throws IOException {\n    IndexSearcher searcher = newSearcher(new MultiReader());\n\n    BooleanQuery bq = new BooleanQuery.Builder()\n        .add(new MatchAllDocsQuery(), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n        .setDisableCoord(random().nextBoolean())\n        .build();\n    assertEquals(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"bar\"))), searcher.rewrite(bq));\n\n    bq = new BooleanQuery.Builder()\n        .add(new BoostQuery(new MatchAllDocsQuery(), 42), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n        .setDisableCoord(random().nextBoolean())\n        .build();\n    assertEquals(new BoostQuery(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"bar\"))), 42), searcher.rewrite(bq));\n\n    bq = new BooleanQuery.Builder()\n        .add(new MatchAllDocsQuery(), Occur.MUST)\n        .add(new MatchAllDocsQuery(), Occur.FILTER)\n        .setDisableCoord(random().nextBoolean())\n        .build();\n    assertEquals(new MatchAllDocsQuery(), searcher.rewrite(bq));\n    \n    bq = new BooleanQuery.Builder()\n        .add(new BoostQuery(new MatchAllDocsQuery(), 42), Occur.MUST)\n        .add(new MatchAllDocsQuery(), Occur.FILTER)\n        .setDisableCoord(random().nextBoolean())\n        .build();\n    assertEquals(new BoostQuery(new MatchAllDocsQuery(), 42), searcher.rewrite(bq));\n\n    bq = new BooleanQuery.Builder()\n        .add(new MatchAllDocsQuery(), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST_NOT)\n        .build();\n    assertEquals(bq, searcher.rewrite(bq));\n\n    bq = new BooleanQuery.Builder()\n        .add(new MatchAllDocsQuery(), Occur.MUST)\n        .add(new MatchAllDocsQuery(), Occur.FILTER)\n        .build();\n    assertEquals(new MatchAllDocsQuery(), searcher.rewrite(bq));\n\n    bq = new BooleanQuery.Builder()\n        .add(new MatchAllDocsQuery(), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.FILTER)\n        .setDisableCoord(random().nextBoolean())\n        .build();\n    Query expected = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.FILTER)\n        .build();\n    assertEquals(new ConstantScoreQuery(expected), searcher.rewrite(bq));\n\n    bq = new BooleanQuery.Builder()\n        .add(new MatchAllDocsQuery(), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.MUST_NOT)\n        .setDisableCoord(random().nextBoolean())\n        .build();\n    expected = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.MUST_NOT)\n        .build();\n    assertEquals(new ConstantScoreQuery(expected), searcher.rewrite(bq));\n\n    bq = new BooleanQuery.Builder()\n        .add(new MatchAllDocsQuery(), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.SHOULD)\n        .build();\n    assertEquals(bq, searcher.rewrite(bq));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8a0e442f7b61f811680273b25da95994a724466","date":1467878549,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#testSingleMustMatchAll().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#testSingleMustMatchAll().mjava","sourceNew":"  public void testSingleMustMatchAll() throws IOException {\n    IndexSearcher searcher = newSearcher(new MultiReader());\n\n    BooleanQuery bq = new BooleanQuery.Builder()\n        .add(new MatchAllDocsQuery(), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n        .build();\n    assertEquals(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"bar\"))), searcher.rewrite(bq));\n\n    bq = new BooleanQuery.Builder()\n        .add(new BoostQuery(new MatchAllDocsQuery(), 42), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n        .build();\n    assertEquals(new BoostQuery(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"bar\"))), 42), searcher.rewrite(bq));\n\n    bq = new BooleanQuery.Builder()\n        .add(new MatchAllDocsQuery(), Occur.MUST)\n        .add(new MatchAllDocsQuery(), Occur.FILTER)\n        .build();\n    assertEquals(new MatchAllDocsQuery(), searcher.rewrite(bq));\n    \n    bq = new BooleanQuery.Builder()\n        .add(new BoostQuery(new MatchAllDocsQuery(), 42), Occur.MUST)\n        .add(new MatchAllDocsQuery(), Occur.FILTER)\n        .build();\n    assertEquals(new BoostQuery(new MatchAllDocsQuery(), 42), searcher.rewrite(bq));\n\n    bq = new BooleanQuery.Builder()\n        .add(new MatchAllDocsQuery(), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST_NOT)\n        .build();\n    assertEquals(bq, searcher.rewrite(bq));\n\n    bq = new BooleanQuery.Builder()\n        .add(new MatchAllDocsQuery(), Occur.MUST)\n        .add(new MatchAllDocsQuery(), Occur.FILTER)\n        .build();\n    assertEquals(new MatchAllDocsQuery(), searcher.rewrite(bq));\n\n    bq = new BooleanQuery.Builder()\n        .add(new MatchAllDocsQuery(), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.FILTER)\n        .build();\n    Query expected = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.FILTER)\n        .build();\n    assertEquals(new ConstantScoreQuery(expected), searcher.rewrite(bq));\n\n    bq = new BooleanQuery.Builder()\n        .add(new MatchAllDocsQuery(), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.MUST_NOT)\n        .build();\n    expected = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.MUST_NOT)\n        .build();\n    assertEquals(new ConstantScoreQuery(expected), searcher.rewrite(bq));\n\n    bq = new BooleanQuery.Builder()\n        .add(new MatchAllDocsQuery(), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.SHOULD)\n        .build();\n    assertEquals(bq, searcher.rewrite(bq));\n  }\n\n","sourceOld":"  public void testSingleMustMatchAll() throws IOException {\n    IndexSearcher searcher = newSearcher(new MultiReader());\n\n    BooleanQuery bq = new BooleanQuery.Builder()\n        .add(new MatchAllDocsQuery(), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n        .setDisableCoord(random().nextBoolean())\n        .build();\n    assertEquals(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"bar\"))), searcher.rewrite(bq));\n\n    bq = new BooleanQuery.Builder()\n        .add(new BoostQuery(new MatchAllDocsQuery(), 42), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n        .setDisableCoord(random().nextBoolean())\n        .build();\n    assertEquals(new BoostQuery(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"bar\"))), 42), searcher.rewrite(bq));\n\n    bq = new BooleanQuery.Builder()\n        .add(new MatchAllDocsQuery(), Occur.MUST)\n        .add(new MatchAllDocsQuery(), Occur.FILTER)\n        .setDisableCoord(random().nextBoolean())\n        .build();\n    assertEquals(new MatchAllDocsQuery(), searcher.rewrite(bq));\n    \n    bq = new BooleanQuery.Builder()\n        .add(new BoostQuery(new MatchAllDocsQuery(), 42), Occur.MUST)\n        .add(new MatchAllDocsQuery(), Occur.FILTER)\n        .setDisableCoord(random().nextBoolean())\n        .build();\n    assertEquals(new BoostQuery(new MatchAllDocsQuery(), 42), searcher.rewrite(bq));\n\n    bq = new BooleanQuery.Builder()\n        .add(new MatchAllDocsQuery(), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST_NOT)\n        .build();\n    assertEquals(bq, searcher.rewrite(bq));\n\n    bq = new BooleanQuery.Builder()\n        .add(new MatchAllDocsQuery(), Occur.MUST)\n        .add(new MatchAllDocsQuery(), Occur.FILTER)\n        .build();\n    assertEquals(new MatchAllDocsQuery(), searcher.rewrite(bq));\n\n    bq = new BooleanQuery.Builder()\n        .add(new MatchAllDocsQuery(), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.FILTER)\n        .setDisableCoord(random().nextBoolean())\n        .build();\n    Query expected = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.FILTER)\n        .build();\n    assertEquals(new ConstantScoreQuery(expected), searcher.rewrite(bq));\n\n    bq = new BooleanQuery.Builder()\n        .add(new MatchAllDocsQuery(), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.MUST_NOT)\n        .setDisableCoord(random().nextBoolean())\n        .build();\n    expected = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.MUST_NOT)\n        .build();\n    assertEquals(new ConstantScoreQuery(expected), searcher.rewrite(bq));\n\n    bq = new BooleanQuery.Builder()\n        .add(new MatchAllDocsQuery(), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.SHOULD)\n        .build();\n    assertEquals(bq, searcher.rewrite(bq));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#testSingleMustMatchAll().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#testSingleMustMatchAll().mjava","sourceNew":"  public void testSingleMustMatchAll() throws IOException {\n    IndexSearcher searcher = newSearcher(new MultiReader());\n\n    BooleanQuery bq = new BooleanQuery.Builder()\n        .add(new MatchAllDocsQuery(), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n        .build();\n    assertEquals(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"bar\"))), searcher.rewrite(bq));\n\n    bq = new BooleanQuery.Builder()\n        .add(new BoostQuery(new MatchAllDocsQuery(), 42), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n        .build();\n    assertEquals(new BoostQuery(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"bar\"))), 42), searcher.rewrite(bq));\n\n    bq = new BooleanQuery.Builder()\n        .add(new MatchAllDocsQuery(), Occur.MUST)\n        .add(new MatchAllDocsQuery(), Occur.FILTER)\n        .build();\n    assertEquals(new MatchAllDocsQuery(), searcher.rewrite(bq));\n    \n    bq = new BooleanQuery.Builder()\n        .add(new BoostQuery(new MatchAllDocsQuery(), 42), Occur.MUST)\n        .add(new MatchAllDocsQuery(), Occur.FILTER)\n        .build();\n    assertEquals(new BoostQuery(new MatchAllDocsQuery(), 42), searcher.rewrite(bq));\n\n    bq = new BooleanQuery.Builder()\n        .add(new MatchAllDocsQuery(), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST_NOT)\n        .build();\n    assertEquals(bq, searcher.rewrite(bq));\n\n    bq = new BooleanQuery.Builder()\n        .add(new MatchAllDocsQuery(), Occur.MUST)\n        .add(new MatchAllDocsQuery(), Occur.FILTER)\n        .build();\n    assertEquals(new MatchAllDocsQuery(), searcher.rewrite(bq));\n\n    bq = new BooleanQuery.Builder()\n        .add(new MatchAllDocsQuery(), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.FILTER)\n        .build();\n    Query expected = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.FILTER)\n        .build();\n    assertEquals(new ConstantScoreQuery(expected), searcher.rewrite(bq));\n\n    bq = new BooleanQuery.Builder()\n        .add(new MatchAllDocsQuery(), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.MUST_NOT)\n        .build();\n    expected = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.MUST_NOT)\n        .build();\n    assertEquals(new ConstantScoreQuery(expected), searcher.rewrite(bq));\n\n    bq = new BooleanQuery.Builder()\n        .add(new MatchAllDocsQuery(), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.SHOULD)\n        .build();\n    assertEquals(bq, searcher.rewrite(bq));\n  }\n\n","sourceOld":"  public void testSingleMustMatchAll() throws IOException {\n    IndexSearcher searcher = newSearcher(new MultiReader());\n\n    BooleanQuery bq = new BooleanQuery.Builder()\n        .add(new MatchAllDocsQuery(), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n        .setDisableCoord(random().nextBoolean())\n        .build();\n    assertEquals(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"bar\"))), searcher.rewrite(bq));\n\n    bq = new BooleanQuery.Builder()\n        .add(new BoostQuery(new MatchAllDocsQuery(), 42), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n        .setDisableCoord(random().nextBoolean())\n        .build();\n    assertEquals(new BoostQuery(new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"bar\"))), 42), searcher.rewrite(bq));\n\n    bq = new BooleanQuery.Builder()\n        .add(new MatchAllDocsQuery(), Occur.MUST)\n        .add(new MatchAllDocsQuery(), Occur.FILTER)\n        .setDisableCoord(random().nextBoolean())\n        .build();\n    assertEquals(new MatchAllDocsQuery(), searcher.rewrite(bq));\n    \n    bq = new BooleanQuery.Builder()\n        .add(new BoostQuery(new MatchAllDocsQuery(), 42), Occur.MUST)\n        .add(new MatchAllDocsQuery(), Occur.FILTER)\n        .setDisableCoord(random().nextBoolean())\n        .build();\n    assertEquals(new BoostQuery(new MatchAllDocsQuery(), 42), searcher.rewrite(bq));\n\n    bq = new BooleanQuery.Builder()\n        .add(new MatchAllDocsQuery(), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST_NOT)\n        .build();\n    assertEquals(bq, searcher.rewrite(bq));\n\n    bq = new BooleanQuery.Builder()\n        .add(new MatchAllDocsQuery(), Occur.MUST)\n        .add(new MatchAllDocsQuery(), Occur.FILTER)\n        .build();\n    assertEquals(new MatchAllDocsQuery(), searcher.rewrite(bq));\n\n    bq = new BooleanQuery.Builder()\n        .add(new MatchAllDocsQuery(), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.FILTER)\n        .setDisableCoord(random().nextBoolean())\n        .build();\n    Query expected = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.FILTER)\n        .build();\n    assertEquals(new ConstantScoreQuery(expected), searcher.rewrite(bq));\n\n    bq = new BooleanQuery.Builder()\n        .add(new MatchAllDocsQuery(), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.MUST_NOT)\n        .setDisableCoord(random().nextBoolean())\n        .build();\n    expected = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER)\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.MUST_NOT)\n        .build();\n    assertEquals(new ConstantScoreQuery(expected), searcher.rewrite(bq));\n\n    bq = new BooleanQuery.Builder()\n        .add(new MatchAllDocsQuery(), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.SHOULD)\n        .build();\n    assertEquals(bq, searcher.rewrite(bq));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"59a0f907db1bc6eb97b13f9c1ef2191d14b5e632":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c8a0e442f7b61f811680273b25da95994a724466":["59a0f907db1bc6eb97b13f9c1ef2191d14b5e632"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["59a0f907db1bc6eb97b13f9c1ef2191d14b5e632","c8a0e442f7b61f811680273b25da95994a724466"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c8a0e442f7b61f811680273b25da95994a724466"]},"commit2Childs":{"59a0f907db1bc6eb97b13f9c1ef2191d14b5e632":["c8a0e442f7b61f811680273b25da95994a724466","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["59a0f907db1bc6eb97b13f9c1ef2191d14b5e632"],"c8a0e442f7b61f811680273b25da95994a724466":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}