{"path":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationDistributedZkTest#doTestReplicationAfterLeaderChange().mjava","commits":[{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationDistributedZkTest#doTestReplicationAfterLeaderChange().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Check that the replication manager is properly started after a change of leader.\n   * This test also checks that the log readers on the new leaders are initialised with\n   * the target's checkpoint.\n   */\n  public void doTestReplicationAfterLeaderChange() throws Exception {\n    this.clearSourceCollection();\n    this.clearTargetCollection();\n\n    log.info(\"Starting CDCR\");\n\n    // send start action to first shard\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n\n    log.info(\"Indexing 10 documents\");\n\n    int start = 0;\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (; start < 10; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    log.info(\"Querying source collection\");\n\n    assertEquals(10, getNumDocs(SOURCE_COLLECTION));\n\n    log.info(\"Waiting for replication\");\n\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    log.info(\"Querying target collection\");\n\n    commit(TARGET_COLLECTION);\n    assertEquals(10, getNumDocs(TARGET_COLLECTION));\n\n    log.info(\"Restarting target leaders\");\n\n    // Close all the leaders, then restart them\n    this.restartServer(shardToLeaderJetty.get(TARGET_COLLECTION).get(SHARD1));\n    this.restartServer(shardToLeaderJetty.get(TARGET_COLLECTION).get(SHARD2));\n\n    log.info(\"Restarting source leaders\");\n\n    // Close all the leaders, then restart them\n    this.restartServer(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1));\n    this.restartServer(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2));\n\n    log.info(\"Checking queue size of new source leaders\");\n\n    // If the log readers of the new leaders are initialised with the target's checkpoint, the\n    // queue size must be inferior to the current number of documents indexed.\n    // The queue might be not completely empty since the new target checkpoint is probably not the\n    // last document received\n    assertTrue(this.getQueueSize(SOURCE_COLLECTION, SHARD1) < 10);\n    assertTrue(this.getQueueSize(SOURCE_COLLECTION, SHARD2) < 10);\n\n    log.info(\"Indexing 100 documents\");\n\n    docs.clear();\n    for (; start < 110; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    log.info(\"Querying source collection\");\n\n    assertEquals(110, getNumDocs(SOURCE_COLLECTION));\n\n    log.info(\"Waiting for replication\");\n\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    log.info(\"Querying target collection\");\n\n    commit(TARGET_COLLECTION);\n    assertEquals(110, getNumDocs(TARGET_COLLECTION));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4dcd1fe49b76116e7d358993339fe8adbb030638","date":1437151093,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationDistributedZkTest#doTestReplicationAfterLeaderChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationDistributedZkTest#doTestReplicationAfterLeaderChange().mjava","sourceNew":"  /**\n   * Check that the replication manager is properly started after a change of leader.\n   * This test also checks that the log readers on the new leaders are initialised with\n   * the target's checkpoint.\n   */\n  public void doTestReplicationAfterLeaderChange() throws Exception {\n    this.clearSourceCollection();\n    this.clearTargetCollection();\n\n    log.info(\"Starting CDCR\");\n\n    // send start action to first shard\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    log.info(\"Indexing 10 documents\");\n\n    int start = 0;\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (; start < 10; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    log.info(\"Querying source collection\");\n\n    assertEquals(10, getNumDocs(SOURCE_COLLECTION));\n\n    log.info(\"Waiting for replication\");\n\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    log.info(\"Querying target collection\");\n\n    commit(TARGET_COLLECTION);\n    assertEquals(10, getNumDocs(TARGET_COLLECTION));\n\n    log.info(\"Restarting target leaders\");\n\n    // Close all the leaders, then restart them\n    this.restartServer(shardToLeaderJetty.get(TARGET_COLLECTION).get(SHARD1));\n    this.restartServer(shardToLeaderJetty.get(TARGET_COLLECTION).get(SHARD2));\n\n    log.info(\"Restarting source leaders\");\n\n    // Close all the leaders, then restart them\n    this.restartServer(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1));\n    this.restartServer(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2));\n\n    log.info(\"Checking queue size of new source leaders\");\n\n    // If the log readers of the new leaders are initialised with the target's checkpoint, the\n    // queue size must be inferior to the current number of documents indexed.\n    // The queue might be not completely empty since the new target checkpoint is probably not the\n    // last document received\n    assertTrue(this.getQueueSize(SOURCE_COLLECTION, SHARD1) < 10);\n    assertTrue(this.getQueueSize(SOURCE_COLLECTION, SHARD2) < 10);\n\n    log.info(\"Indexing 100 documents\");\n\n    docs.clear();\n    for (; start < 110; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    log.info(\"Querying source collection\");\n\n    assertEquals(110, getNumDocs(SOURCE_COLLECTION));\n\n    log.info(\"Waiting for replication\");\n\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    log.info(\"Querying target collection\");\n\n    commit(TARGET_COLLECTION);\n    assertEquals(110, getNumDocs(TARGET_COLLECTION));\n  }\n\n","sourceOld":"  /**\n   * Check that the replication manager is properly started after a change of leader.\n   * This test also checks that the log readers on the new leaders are initialised with\n   * the target's checkpoint.\n   */\n  public void doTestReplicationAfterLeaderChange() throws Exception {\n    this.clearSourceCollection();\n    this.clearTargetCollection();\n\n    log.info(\"Starting CDCR\");\n\n    // send start action to first shard\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n\n    log.info(\"Indexing 10 documents\");\n\n    int start = 0;\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (; start < 10; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    log.info(\"Querying source collection\");\n\n    assertEquals(10, getNumDocs(SOURCE_COLLECTION));\n\n    log.info(\"Waiting for replication\");\n\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    log.info(\"Querying target collection\");\n\n    commit(TARGET_COLLECTION);\n    assertEquals(10, getNumDocs(TARGET_COLLECTION));\n\n    log.info(\"Restarting target leaders\");\n\n    // Close all the leaders, then restart them\n    this.restartServer(shardToLeaderJetty.get(TARGET_COLLECTION).get(SHARD1));\n    this.restartServer(shardToLeaderJetty.get(TARGET_COLLECTION).get(SHARD2));\n\n    log.info(\"Restarting source leaders\");\n\n    // Close all the leaders, then restart them\n    this.restartServer(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1));\n    this.restartServer(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2));\n\n    log.info(\"Checking queue size of new source leaders\");\n\n    // If the log readers of the new leaders are initialised with the target's checkpoint, the\n    // queue size must be inferior to the current number of documents indexed.\n    // The queue might be not completely empty since the new target checkpoint is probably not the\n    // last document received\n    assertTrue(this.getQueueSize(SOURCE_COLLECTION, SHARD1) < 10);\n    assertTrue(this.getQueueSize(SOURCE_COLLECTION, SHARD2) < 10);\n\n    log.info(\"Indexing 100 documents\");\n\n    docs.clear();\n    for (; start < 110; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    log.info(\"Querying source collection\");\n\n    assertEquals(110, getNumDocs(SOURCE_COLLECTION));\n\n    log.info(\"Waiting for replication\");\n\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    log.info(\"Querying target collection\");\n\n    commit(TARGET_COLLECTION);\n    assertEquals(110, getNumDocs(TARGET_COLLECTION));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e586ff50ac71d5ef3a27ced78f69deb41ab35ad5","date":1446841099,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationDistributedZkTest#testReplicationAfterLeaderChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationDistributedZkTest#doTestReplicationAfterLeaderChange().mjava","sourceNew":"  /**\n   * Check that the replication manager is properly started after a change of leader.\n   * This test also checks that the log readers on the new leaders are initialised with\n   * the target's checkpoint.\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  public void testReplicationAfterLeaderChange() throws Exception {\n    log.info(\"Starting CDCR\");\n\n    // send start action to first shard\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    log.info(\"Indexing 10 documents\");\n\n    int start = 0;\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (; start < 10; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    log.info(\"Querying source collection\");\n\n    assertNumDocs(10, SOURCE_COLLECTION);\n\n    log.info(\"Waiting for replication\");\n\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    log.info(\"Querying target collection\");\n\n    commit(TARGET_COLLECTION);\n    assertNumDocs(10, TARGET_COLLECTION);\n\n    log.info(\"Restarting target leaders\");\n\n    // Close all the leaders, then restart them\n    this.restartServer(shardToLeaderJetty.get(TARGET_COLLECTION).get(SHARD1));\n    this.restartServer(shardToLeaderJetty.get(TARGET_COLLECTION).get(SHARD2));\n\n    log.info(\"Restarting source leaders\");\n\n    // Close all the leaders, then restart them\n    this.restartServer(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1));\n    this.restartServer(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2));\n\n    log.info(\"Checking queue size of new source leaders\");\n\n    // If the log readers of the new leaders are initialised with the target's checkpoint, the\n    // queue size must be inferior to the current number of documents indexed.\n    // The queue might be not completely empty since the new target checkpoint is probably not the\n    // last document received\n    assertTrue(this.getQueueSize(SOURCE_COLLECTION, SHARD1) < 10);\n    assertTrue(this.getQueueSize(SOURCE_COLLECTION, SHARD2) < 10);\n\n    log.info(\"Indexing 100 documents\");\n\n    docs.clear();\n    for (; start < 110; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    log.info(\"Querying source collection\");\n\n    assertNumDocs(110, SOURCE_COLLECTION);\n\n    log.info(\"Waiting for replication\");\n\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    log.info(\"Querying target collection\");\n\n    commit(TARGET_COLLECTION);\n    assertNumDocs(110, TARGET_COLLECTION);\n  }\n\n","sourceOld":"  /**\n   * Check that the replication manager is properly started after a change of leader.\n   * This test also checks that the log readers on the new leaders are initialised with\n   * the target's checkpoint.\n   */\n  public void doTestReplicationAfterLeaderChange() throws Exception {\n    this.clearSourceCollection();\n    this.clearTargetCollection();\n\n    log.info(\"Starting CDCR\");\n\n    // send start action to first shard\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    log.info(\"Indexing 10 documents\");\n\n    int start = 0;\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (; start < 10; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    log.info(\"Querying source collection\");\n\n    assertEquals(10, getNumDocs(SOURCE_COLLECTION));\n\n    log.info(\"Waiting for replication\");\n\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    log.info(\"Querying target collection\");\n\n    commit(TARGET_COLLECTION);\n    assertEquals(10, getNumDocs(TARGET_COLLECTION));\n\n    log.info(\"Restarting target leaders\");\n\n    // Close all the leaders, then restart them\n    this.restartServer(shardToLeaderJetty.get(TARGET_COLLECTION).get(SHARD1));\n    this.restartServer(shardToLeaderJetty.get(TARGET_COLLECTION).get(SHARD2));\n\n    log.info(\"Restarting source leaders\");\n\n    // Close all the leaders, then restart them\n    this.restartServer(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1));\n    this.restartServer(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2));\n\n    log.info(\"Checking queue size of new source leaders\");\n\n    // If the log readers of the new leaders are initialised with the target's checkpoint, the\n    // queue size must be inferior to the current number of documents indexed.\n    // The queue might be not completely empty since the new target checkpoint is probably not the\n    // last document received\n    assertTrue(this.getQueueSize(SOURCE_COLLECTION, SHARD1) < 10);\n    assertTrue(this.getQueueSize(SOURCE_COLLECTION, SHARD2) < 10);\n\n    log.info(\"Indexing 100 documents\");\n\n    docs.clear();\n    for (; start < 110; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    log.info(\"Querying source collection\");\n\n    assertEquals(110, getNumDocs(SOURCE_COLLECTION));\n\n    log.info(\"Waiting for replication\");\n\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    log.info(\"Querying target collection\");\n\n    commit(TARGET_COLLECTION);\n    assertEquals(110, getNumDocs(TARGET_COLLECTION));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e586ff50ac71d5ef3a27ced78f69deb41ab35ad5":["4dcd1fe49b76116e7d358993339fe8adbb030638"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4dcd1fe49b76116e7d358993339fe8adbb030638":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e586ff50ac71d5ef3a27ced78f69deb41ab35ad5"]},"commit2Childs":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["4dcd1fe49b76116e7d358993339fe8adbb030638"],"e586ff50ac71d5ef3a27ced78f69deb41ab35ad5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"4dcd1fe49b76116e7d358993339fe8adbb030638":["e586ff50ac71d5ef3a27ced78f69deb41ab35ad5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}