{"path":"lucene/core/src/java/org/apache/lucene/util/RamUsageEstimator#measureArraySize(Object,Set[Object]).mjava","commits":[{"id":"dd6c9e9b1251473f465b0443b56046b2658402da","date":1332082750,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/RamUsageEstimator#measureArraySize(Object,Set[Object]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return the deep size of an <code>array</code>, including\n   * sub-objects if there are any.\n   * \n   * @param seen A set of already seen objects. If <code>null</code> no references\n   *      are followed and this method returns shallow size.\n   */\n  private static long measureArraySize(Object array, Set<Object> seen) {\n    long size = NUM_BYTES_ARRAY_HEADER;\n    final int len = Array.getLength(array);\n    if (len > 0) {\n      Class<?> arrayElementClazz = array.getClass().getComponentType();\n      if (arrayElementClazz.isPrimitive()) {\n        size += (long) len * primitiveSizes.get(arrayElementClazz);\n      } else {\n        size += (long) NUM_BYTES_OBJECT_REF * len;\n        if (seen != null) {\n          for (int i = 0; i < len; i++) {\n            size += measureObjectSize(Array.get(array, i), seen);\n          }\n        }\n      }\n    }\n\n    return alignObjectSize(size);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10cd47aac3c4e8c583740a750335f8aab14555b3","date":1332522358,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/RamUsageEstimator#shallowSizeOfArray(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/RamUsageEstimator#measureArraySize(Object,Set[Object]).mjava","sourceNew":"  /**\n   * Return shallow size of any <code>array</code>.\n   */\n  private static long shallowSizeOfArray(Object array) {\n    long size = NUM_BYTES_ARRAY_HEADER;\n    final int len = Array.getLength(array);\n    if (len > 0) {\n      Class<?> arrayElementClazz = array.getClass().getComponentType();\n      if (arrayElementClazz.isPrimitive()) {\n        size += (long) len * primitiveSizes.get(arrayElementClazz);\n      } else {\n        size += (long) NUM_BYTES_OBJECT_REF * len;\n      }\n    }\n    return alignObjectSize(size);\n  }\n\n","sourceOld":"  /**\n   * Return the deep size of an <code>array</code>, including\n   * sub-objects if there are any.\n   * \n   * @param seen A set of already seen objects. If <code>null</code> no references\n   *      are followed and this method returns shallow size.\n   */\n  private static long measureArraySize(Object array, Set<Object> seen) {\n    long size = NUM_BYTES_ARRAY_HEADER;\n    final int len = Array.getLength(array);\n    if (len > 0) {\n      Class<?> arrayElementClazz = array.getClass().getComponentType();\n      if (arrayElementClazz.isPrimitive()) {\n        size += (long) len * primitiveSizes.get(arrayElementClazz);\n      } else {\n        size += (long) NUM_BYTES_OBJECT_REF * len;\n        if (seen != null) {\n          for (int i = 0; i < len; i++) {\n            size += measureObjectSize(Array.get(array, i), seen);\n          }\n        }\n      }\n    }\n\n    return alignObjectSize(size);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd6c9e9b1251473f465b0443b56046b2658402da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"10cd47aac3c4e8c583740a750335f8aab14555b3":["dd6c9e9b1251473f465b0443b56046b2658402da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["10cd47aac3c4e8c583740a750335f8aab14555b3"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd6c9e9b1251473f465b0443b56046b2658402da"],"dd6c9e9b1251473f465b0443b56046b2658402da":["10cd47aac3c4e8c583740a750335f8aab14555b3"],"10cd47aac3c4e8c583740a750335f8aab14555b3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}