{"path":"contrib/gdata-server/src/core/src/java/org/apache/lucene/gdata/search/index/IndexDocumentBuilderTask#call().mjava","commits":[{"id":"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe","date":1166036663,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/src/java/org/apache/lucene/gdata/search/index/IndexDocumentBuilderTask#call().mjava","pathOld":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/search/index/IndexDocumentBuilderTask#call().mjava","sourceNew":"    /**\n     * @see java.util.concurrent.Callable#call()\n     */\n    @SuppressWarnings(\"unchecked\")\n    public T call() throws GdataIndexerException {\n        \n        Collection<IndexSchemaField> fields = this.schema.getFields();\n        GDataIndexDocument document = new GDataIndexDocument(this.action,\n                this.entry.getId(),this.entry.getFeedId(), this.commitAfter,this.optimizeAfter);\n        if(this.action != IndexAction.DELETE){\n        int addedFields = 0;\n        for (IndexSchemaField field : fields) {\n            /*\n             * get the strategy to process the field\n             */\n            ContentStrategy strategy = ContentStrategy.getFieldStrategy(field);\n            if (LOG.isInfoEnabled())\n                LOG.info(\"Process indexable for \" + field);\n            try {\n                /*\n                 * get the indexable via the factory method to enable new /\n                 * different implementation of the interface (this could be a\n                 * faster dom impl e.g. dom4j)\n                 */\n                strategy.processIndexable(Indexable.getIndexable(this.entry));\n                addedFields++;\n            } catch (NotIndexableException e) {\n                LOG.warn(\"Can not create field for \" + field+\" field will be skipped -- reason: \", e);\n                continue;\n            }\n         \n            document.addField(strategy);\n\n        }\n        if(addedFields == 0)\n            throw new GdataIndexerException(\"No field added to document for Schema: \"+this.schema); \n        }\n        return (T)document;\n    }\n\n","sourceOld":"    /**\n     * @see java.util.concurrent.Callable#call()\n     */\n    @SuppressWarnings(\"unchecked\")\n    public T call() throws GdataIndexerException {\n        \n        Collection<IndexSchemaField> fields = this.schema.getFields();\n        GDataIndexDocument document = new GDataIndexDocument(this.action,\n                this.entry.getId(),this.entry.getFeedId(), this.commitAfter,this.optimizeAfter);\n        if(this.action != IndexAction.DELETE){\n        int addedFields = 0;\n        for (IndexSchemaField field : fields) {\n            /*\n             * get the strategy to process the field\n             */\n            ContentStrategy strategy = ContentStrategy.getFieldStrategy(field);\n            if (LOG.isInfoEnabled())\n                LOG.info(\"Process indexable for \" + field);\n            try {\n                /*\n                 * get the indexable via the factory method to enable new /\n                 * different implementation of the interface (this could be a\n                 * faster dom impl e.g. dom4j)\n                 */\n                strategy.processIndexable(Indexable.getIndexable(this.entry));\n                addedFields++;\n            } catch (NotIndexableException e) {\n                LOG.warn(\"Can not create field for \" + field+\" field will be skipped -- reason: \", e);\n                continue;\n            }\n         \n            document.addField(strategy);\n\n        }\n        if(addedFields == 0)\n            throw new GdataIndexerException(\"No field added to document for Schema: \"+this.schema); \n        }\n        return (T)document;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe","date":1195519587,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/gdata-server/src/core/src/java/org/apache/lucene/gdata/search/index/IndexDocumentBuilderTask#call().mjava","sourceNew":null,"sourceOld":"    /**\n     * @see java.util.concurrent.Callable#call()\n     */\n    @SuppressWarnings(\"unchecked\")\n    public T call() throws GdataIndexerException {\n        \n        Collection<IndexSchemaField> fields = this.schema.getFields();\n        GDataIndexDocument document = new GDataIndexDocument(this.action,\n                this.entry.getId(),this.entry.getFeedId(), this.commitAfter,this.optimizeAfter);\n        if(this.action != IndexAction.DELETE){\n        int addedFields = 0;\n        for (IndexSchemaField field : fields) {\n            /*\n             * get the strategy to process the field\n             */\n            ContentStrategy strategy = ContentStrategy.getFieldStrategy(field);\n            if (LOG.isInfoEnabled())\n                LOG.info(\"Process indexable for \" + field);\n            try {\n                /*\n                 * get the indexable via the factory method to enable new /\n                 * different implementation of the interface (this could be a\n                 * faster dom impl e.g. dom4j)\n                 */\n                strategy.processIndexable(Indexable.getIndexable(this.entry));\n                addedFields++;\n            } catch (NotIndexableException e) {\n                LOG.warn(\"Can not create field for \" + field+\" field will be skipped -- reason: \", e);\n                continue;\n            }\n         \n            document.addField(strategy);\n\n        }\n        if(addedFields == 0)\n            throw new GdataIndexerException(\"No field added to document for Schema: \"+this.schema); \n        }\n        return (T)document;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["353a38bbb8d8067d74d6039986c7ce44c2f6cdbe"]},"commit2Childs":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["353a38bbb8d8067d74d6039986c7ce44c2f6cdbe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}