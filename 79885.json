{"path":"lucene/core/src/test/org/apache/lucene/index/TestDimensionalValues#testWithExceptions().mjava","commits":[{"id":"ca792c26af46bd6c4a08d81117c60440cf6a7e3d","date":1445938295,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDimensionalValues#testWithExceptions().mjava","pathOld":"/dev/null","sourceNew":"  /** Make sure we close open files, delete temp files, etc., on exception */\n  public void testWithExceptions() throws Exception {\n    int numDocs = atLeast(10000);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, 30);\n    int numDims = TestUtil.nextInt(random(), 1, 5);\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    double maxMBHeap = 0.05;\n    // Keep retrying until we 1) we allow a big enough heap, and 2) we hit a random IOExc from MDW:\n    boolean done = false;\n    while (done == false) {\n      try (MockDirectoryWrapper dir = newMockFSDirectory(createTempDir())) {\n        try {\n          dir.setRandomIOExceptionRate(0.05);\n          dir.setRandomIOExceptionRateOnOpen(0.05);\n          if (dir instanceof MockDirectoryWrapper) {\n            dir.setEnableVirusScanner(false);\n          }\n          verify(dir, docValues, null, numDims, numBytesPerDim, 50, maxMBHeap);\n        } catch (AssertionError ae) {\n          if (ae.getMessage().contains(\"does not exist; files=\")) {\n            // OK: likely we threw the random IOExc when IW was asserting the commit files exist\n            done = true;\n          } else {\n            throw ae;\n          }\n        } catch (IllegalArgumentException iae) {\n          // This just means we got a too-small maxMB for the maxPointsInLeafNode; just retry w/ more heap\n          assertTrue(iae.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n          System.out.println(\"  more heap\");\n          maxMBHeap *= 1.25;\n        } catch (IOException ioe) {\n          if (ioe.getMessage().contains(\"a random IOException\")) {\n            // BKDWriter should fully clean up after itself:\n            done = true;\n          } else {\n            throw ioe;\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["71da933d30aea361ccc224d6544c451cbf49916d","71da933d30aea361ccc224d6544c451cbf49916d","71da933d30aea361ccc224d6544c451cbf49916d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1eee4175312c41f89aa23427f9e4edfc00deeaac","date":1446373190,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDimensionalValues#testWithExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDimensionalValues#testWithExceptions().mjava","sourceNew":"  /** Make sure we close open files, delete temp files, etc., on exception */\n  public void testWithExceptions() throws Exception {\n    int numDocs = atLeast(10000);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, 30);\n    int numDims = TestUtil.nextInt(random(), 1, 5);\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    // Keep retrying until we 1) we allow a big enough heap, and 2) we hit a random IOExc from MDW:\n    boolean done = false;\n    while (done == false) {\n      try (MockDirectoryWrapper dir = newMockFSDirectory(createTempDir())) {\n        try {\n          dir.setRandomIOExceptionRate(0.05);\n          dir.setRandomIOExceptionRateOnOpen(0.05);\n          if (dir instanceof MockDirectoryWrapper) {\n            dir.setEnableVirusScanner(false);\n          }\n          verify(dir, docValues, null, numDims, numBytesPerDim, true);\n        } catch (IllegalStateException ise) {\n          if (ise.getMessage().contains(\"this writer hit an unrecoverable error\")) {\n            Throwable cause = ise.getCause();\n            if (cause != null && cause.getMessage().contains(\"a random IOException\")) {\n              done = true;\n            } else {\n              throw ise;\n            }\n          } else {\n            throw ise;\n          }\n        } catch (AssertionError ae) {\n          if (ae.getMessage().contains(\"does not exist; files=\")) {\n            // OK: likely we threw the random IOExc when IW was asserting the commit files exist\n            done = true;\n          } else {\n            throw ae;\n          }\n        } catch (IllegalArgumentException iae) {\n          // This just means we got a too-small maxMB for the maxPointsInLeafNode; just retry w/ more heap\n          assertTrue(iae.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n        } catch (IOException ioe) {\n          String message = ioe.getMessage();\n          if (message.contains(\"a random IOException\") || message.contains(\"background merge hit exception\")) {\n            // BKDWriter should fully clean up after itself:\n            done = true;\n          } else {\n            throw ioe;\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Make sure we close open files, delete temp files, etc., on exception */\n  public void testWithExceptions() throws Exception {\n    int numDocs = atLeast(10000);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, 30);\n    int numDims = TestUtil.nextInt(random(), 1, 5);\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    double maxMBHeap = 0.05;\n    // Keep retrying until we 1) we allow a big enough heap, and 2) we hit a random IOExc from MDW:\n    boolean done = false;\n    while (done == false) {\n      try (MockDirectoryWrapper dir = newMockFSDirectory(createTempDir())) {\n        try {\n          dir.setRandomIOExceptionRate(0.05);\n          dir.setRandomIOExceptionRateOnOpen(0.05);\n          if (dir instanceof MockDirectoryWrapper) {\n            dir.setEnableVirusScanner(false);\n          }\n          verify(dir, docValues, null, numDims, numBytesPerDim, 50, maxMBHeap);\n        } catch (AssertionError ae) {\n          if (ae.getMessage().contains(\"does not exist; files=\")) {\n            // OK: likely we threw the random IOExc when IW was asserting the commit files exist\n            done = true;\n          } else {\n            throw ae;\n          }\n        } catch (IllegalArgumentException iae) {\n          // This just means we got a too-small maxMB for the maxPointsInLeafNode; just retry w/ more heap\n          assertTrue(iae.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n          System.out.println(\"  more heap\");\n          maxMBHeap *= 1.25;\n        } catch (IOException ioe) {\n          if (ioe.getMessage().contains(\"a random IOException\")) {\n            // BKDWriter should fully clean up after itself:\n            done = true;\n          } else {\n            throw ioe;\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDimensionalValues#testWithExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDimensionalValues#testWithExceptions().mjava","sourceNew":"  /** Make sure we close open files, delete temp files, etc., on exception */\n  public void testWithExceptions() throws Exception {\n    int numDocs = atLeast(10000);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, DimensionalValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, DimensionalValues.MAX_DIMENSIONS);\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    // Keep retrying until we 1) we allow a big enough heap, and 2) we hit a random IOExc from MDW:\n    boolean done = false;\n    while (done == false) {\n      try (MockDirectoryWrapper dir = newMockFSDirectory(createTempDir())) {\n        try {\n          dir.setRandomIOExceptionRate(0.05);\n          dir.setRandomIOExceptionRateOnOpen(0.05);\n          if (dir instanceof MockDirectoryWrapper) {\n            dir.setEnableVirusScanner(false);\n          }\n          verify(dir, docValues, null, numDims, numBytesPerDim, true);\n        } catch (IllegalStateException ise) {\n          if (ise.getMessage().contains(\"this writer hit an unrecoverable error\")) {\n            Throwable cause = ise.getCause();\n            if (cause != null && cause.getMessage().contains(\"a random IOException\")) {\n              done = true;\n            } else {\n              throw ise;\n            }\n          } else {\n            throw ise;\n          }\n        } catch (AssertionError ae) {\n          if (ae.getMessage().contains(\"does not exist; files=\")) {\n            // OK: likely we threw the random IOExc when IW was asserting the commit files exist\n            done = true;\n          } else {\n            throw ae;\n          }\n        } catch (IllegalArgumentException iae) {\n          // This just means we got a too-small maxMB for the maxPointsInLeafNode; just retry w/ more heap\n          assertTrue(iae.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n        } catch (IOException ioe) {\n          String message = ioe.getMessage();\n          if (message.contains(\"a random IOException\") || message.contains(\"background merge hit exception\")) {\n            // BKDWriter should fully clean up after itself:\n            done = true;\n          } else {\n            throw ioe;\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Make sure we close open files, delete temp files, etc., on exception */\n  public void testWithExceptions() throws Exception {\n    int numDocs = atLeast(10000);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, 30);\n    int numDims = TestUtil.nextInt(random(), 1, 5);\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    // Keep retrying until we 1) we allow a big enough heap, and 2) we hit a random IOExc from MDW:\n    boolean done = false;\n    while (done == false) {\n      try (MockDirectoryWrapper dir = newMockFSDirectory(createTempDir())) {\n        try {\n          dir.setRandomIOExceptionRate(0.05);\n          dir.setRandomIOExceptionRateOnOpen(0.05);\n          if (dir instanceof MockDirectoryWrapper) {\n            dir.setEnableVirusScanner(false);\n          }\n          verify(dir, docValues, null, numDims, numBytesPerDim, true);\n        } catch (IllegalStateException ise) {\n          if (ise.getMessage().contains(\"this writer hit an unrecoverable error\")) {\n            Throwable cause = ise.getCause();\n            if (cause != null && cause.getMessage().contains(\"a random IOException\")) {\n              done = true;\n            } else {\n              throw ise;\n            }\n          } else {\n            throw ise;\n          }\n        } catch (AssertionError ae) {\n          if (ae.getMessage().contains(\"does not exist; files=\")) {\n            // OK: likely we threw the random IOExc when IW was asserting the commit files exist\n            done = true;\n          } else {\n            throw ae;\n          }\n        } catch (IllegalArgumentException iae) {\n          // This just means we got a too-small maxMB for the maxPointsInLeafNode; just retry w/ more heap\n          assertTrue(iae.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n        } catch (IOException ioe) {\n          String message = ioe.getMessage();\n          if (message.contains(\"a random IOException\") || message.contains(\"background merge hit exception\")) {\n            // BKDWriter should fully clean up after itself:\n            done = true;\n          } else {\n            throw ioe;\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#testWithExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDimensionalValues#testWithExceptions().mjava","sourceNew":"  /** Make sure we close open files, delete temp files, etc., on exception */\n  public void testWithExceptions() throws Exception {\n    int numDocs = atLeast(10000);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, PointValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, PointValues.MAX_DIMENSIONS);\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    // Keep retrying until we 1) we allow a big enough heap, and 2) we hit a random IOExc from MDW:\n    boolean done = false;\n    while (done == false) {\n      try (MockDirectoryWrapper dir = newMockFSDirectory(createTempDir())) {\n        try {\n          dir.setRandomIOExceptionRate(0.05);\n          dir.setRandomIOExceptionRateOnOpen(0.05);\n          if (dir instanceof MockDirectoryWrapper) {\n            dir.setEnableVirusScanner(false);\n          }\n          verify(dir, docValues, null, numDims, numBytesPerDim, true);\n        } catch (IllegalStateException ise) {\n          if (ise.getMessage().contains(\"this writer hit an unrecoverable error\")) {\n            Throwable cause = ise.getCause();\n            if (cause != null && cause.getMessage().contains(\"a random IOException\")) {\n              done = true;\n            } else {\n              throw ise;\n            }\n          } else {\n            throw ise;\n          }\n        } catch (AssertionError ae) {\n          if (ae.getMessage().contains(\"does not exist; files=\")) {\n            // OK: likely we threw the random IOExc when IW was asserting the commit files exist\n            done = true;\n          } else {\n            throw ae;\n          }\n        } catch (IllegalArgumentException iae) {\n          // This just means we got a too-small maxMB for the maxPointsInLeafNode; just retry w/ more heap\n          assertTrue(iae.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n        } catch (IOException ioe) {\n          String message = ioe.getMessage();\n          if (message.contains(\"a random IOException\") || message.contains(\"background merge hit exception\")) {\n            // BKDWriter should fully clean up after itself:\n            done = true;\n          } else {\n            throw ioe;\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /** Make sure we close open files, delete temp files, etc., on exception */\n  public void testWithExceptions() throws Exception {\n    int numDocs = atLeast(10000);\n    int numBytesPerDim = TestUtil.nextInt(random(), 2, DimensionalValues.MAX_NUM_BYTES);\n    int numDims = TestUtil.nextInt(random(), 1, DimensionalValues.MAX_DIMENSIONS);\n\n    byte[][][] docValues = new byte[numDocs][][];\n\n    for(int docID=0;docID<numDocs;docID++) {\n      byte[][] values = new byte[numDims][];\n      for(int dim=0;dim<numDims;dim++) {\n        values[dim] = new byte[numBytesPerDim];\n        random().nextBytes(values[dim]);\n      }\n      docValues[docID] = values;\n    }\n\n    // Keep retrying until we 1) we allow a big enough heap, and 2) we hit a random IOExc from MDW:\n    boolean done = false;\n    while (done == false) {\n      try (MockDirectoryWrapper dir = newMockFSDirectory(createTempDir())) {\n        try {\n          dir.setRandomIOExceptionRate(0.05);\n          dir.setRandomIOExceptionRateOnOpen(0.05);\n          if (dir instanceof MockDirectoryWrapper) {\n            dir.setEnableVirusScanner(false);\n          }\n          verify(dir, docValues, null, numDims, numBytesPerDim, true);\n        } catch (IllegalStateException ise) {\n          if (ise.getMessage().contains(\"this writer hit an unrecoverable error\")) {\n            Throwable cause = ise.getCause();\n            if (cause != null && cause.getMessage().contains(\"a random IOException\")) {\n              done = true;\n            } else {\n              throw ise;\n            }\n          } else {\n            throw ise;\n          }\n        } catch (AssertionError ae) {\n          if (ae.getMessage().contains(\"does not exist; files=\")) {\n            // OK: likely we threw the random IOExc when IW was asserting the commit files exist\n            done = true;\n          } else {\n            throw ae;\n          }\n        } catch (IllegalArgumentException iae) {\n          // This just means we got a too-small maxMB for the maxPointsInLeafNode; just retry w/ more heap\n          assertTrue(iae.getMessage().contains(\"either increase maxMBSortInHeap or decrease maxPointsInLeafNode\"));\n        } catch (IOException ioe) {\n          String message = ioe.getMessage();\n          if (message.contains(\"a random IOException\") || message.contains(\"background merge hit exception\")) {\n            // BKDWriter should fully clean up after itself:\n            done = true;\n          } else {\n            throw ioe;\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["770342641f7b505eaa8dccdc666158bff2419109"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1eee4175312c41f89aa23427f9e4edfc00deeaac":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"770342641f7b505eaa8dccdc666158bff2419109":["1eee4175312c41f89aa23427f9e4edfc00deeaac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["1eee4175312c41f89aa23427f9e4edfc00deeaac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"1eee4175312c41f89aa23427f9e4edfc00deeaac":["770342641f7b505eaa8dccdc666158bff2419109"],"770342641f7b505eaa8dccdc666158bff2419109":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}