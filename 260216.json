{"path":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceQuery#createWeight(IndexSearcher,boolean,float).mjava","commits":[{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    Rectangle box = Rectangle.fromPointDistance(latitude, longitude, radiusMeters);\n    // create bounding box(es) for the distance range\n    // these are pre-encoded with LatLonPoint's encoding\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    // second set of longitude ranges to check (for cross-dateline case)\n    final byte minLon2[] = new byte[Integer.BYTES];\n\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n\n    // crosses dateline: split\n    if (box.crossesDateline()) {\n      // box1\n      NumericUtils.intToSortableBytes(Integer.MIN_VALUE, minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // box2\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon2, 0);\n    } else {\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // disable box2\n      NumericUtils.intToSortableBytes(Integer.MAX_VALUE, minLon2, 0);\n    }\n\n    // compute exact sort key: avoid any asin() computations\n    final double sortKey = GeoUtils.distanceQuerySortKey(radiusMeters);\n\n    final double axisLat = Rectangle.axisLat(latitude, radiusMeters);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues();\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n        \n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n\n        values.intersect(field,\n                         new IntersectVisitor() {\n\n                           DocIdSetBuilder.BulkAdder adder;\n\n                           @Override\n                           public void grow(int count) {\n                             adder = result.grow(count);\n                           }\n\n                           @Override\n                           public void visit(int docID) {\n                             adder.add(docID);\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             // bounding box check\n                             if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n                               // latitude out of bounding box range\n                               return;\n                             }\n\n                             if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                                  StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                                 && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n                               // longitude out of bounding box range\n                               return;\n                             }\n\n                             double docLatitude = decodeLatitude(packedValue, 0);\n                             double docLongitude = decodeLongitude(packedValue, Integer.BYTES);\n\n                             // its a match only if its sortKey <= our sortKey\n                             if (SloppyMath.haversinSortKey(latitude, longitude, docLatitude, docLongitude) <= sortKey) {\n                               adder.add(docID);\n                             }\n                           }\n                           \n                           // algorithm: we create a bounding box (two bounding boxes if we cross the dateline).\n                           // 1. check our bounding box(es) first. if the subtree is entirely outside of those, bail.\n                           // 2. check if the subtree is disjoint. it may cross the bounding box but not intersect with circle\n                           // 3. see if the subtree is fully contained. if the subtree is enormous along the x axis, wrapping half way around the world, etc: then this can't work, just go to step 4.\n                           // 4. recurse naively (subtrees crossing over circle edge)\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n                               // latitude out of bounding box range\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             }\n\n                             if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                                  StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                                 && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n                               // longitude out of bounding box range\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             }\n\n                             double latMin = decodeLatitude(minPackedValue, 0);\n                             double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n                             double latMax = decodeLatitude(maxPackedValue, 0);\n                             double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n                             if ((longitude < lonMin || longitude > lonMax) && (axisLat+ Rectangle.AXISLAT_ERROR < latMin || axisLat- Rectangle.AXISLAT_ERROR > latMax)) {\n                               // circle not fully inside / crossing axis\n                               if (SloppyMath.haversinSortKey(latitude, longitude, latMin, lonMin) > sortKey &&\n                                   SloppyMath.haversinSortKey(latitude, longitude, latMin, lonMax) > sortKey &&\n                                   SloppyMath.haversinSortKey(latitude, longitude, latMax, lonMin) > sortKey &&\n                                   SloppyMath.haversinSortKey(latitude, longitude, latMax, lonMax) > sortKey) {\n                                 // no points inside\n                                 return Relation.CELL_OUTSIDE_QUERY;\n                               }\n                             }\n\n                             if (lonMax - longitude < 90 && longitude - lonMin < 90 &&\n                                 SloppyMath.haversinSortKey(latitude, longitude, latMin, lonMin) <= sortKey &&\n                                 SloppyMath.haversinSortKey(latitude, longitude, latMin, lonMax) <= sortKey &&\n                                 SloppyMath.haversinSortKey(latitude, longitude, latMax, lonMin) <= sortKey &&\n                                 SloppyMath.haversinSortKey(latitude, longitude, latMax, lonMax) <= sortKey) {\n                               // we are fully enclosed, collect everything within this subtree\n                               return Relation.CELL_INSIDE_QUERY;\n                             } else {\n                               // recurse: its inside our bounding box(es), but not fully, or it wraps around.\n                               return Relation.CELL_CROSSES_QUERY;\n                             }\n                           }\n                         });\n\n        return new ConstantScoreScorer(this, score(), result.build().iterator());\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    Rectangle box = Rectangle.fromPointDistance(latitude, longitude, radiusMeters);\n    // create bounding box(es) for the distance range\n    // these are pre-encoded with LatLonPoint's encoding\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    // second set of longitude ranges to check (for cross-dateline case)\n    final byte minLon2[] = new byte[Integer.BYTES];\n\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n\n    // crosses dateline: split\n    if (box.crossesDateline()) {\n      // box1\n      NumericUtils.intToSortableBytes(Integer.MIN_VALUE, minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // box2\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon2, 0);\n    } else {\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // disable box2\n      NumericUtils.intToSortableBytes(Integer.MAX_VALUE, minLon2, 0);\n    }\n\n    // compute exact sort key: avoid any asin() computations\n    final double sortKey = GeoUtils.distanceQuerySortKey(radiusMeters);\n\n    final double axisLat = Rectangle.axisLat(latitude, radiusMeters);\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues();\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n        \n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n\n        values.intersect(field,\n                         new IntersectVisitor() {\n\n                           DocIdSetBuilder.BulkAdder adder;\n\n                           @Override\n                           public void grow(int count) {\n                             adder = result.grow(count);\n                           }\n\n                           @Override\n                           public void visit(int docID) {\n                             adder.add(docID);\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             // bounding box check\n                             if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n                               // latitude out of bounding box range\n                               return;\n                             }\n\n                             if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                                  StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                                 && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n                               // longitude out of bounding box range\n                               return;\n                             }\n\n                             double docLatitude = decodeLatitude(packedValue, 0);\n                             double docLongitude = decodeLongitude(packedValue, Integer.BYTES);\n\n                             // its a match only if its sortKey <= our sortKey\n                             if (SloppyMath.haversinSortKey(latitude, longitude, docLatitude, docLongitude) <= sortKey) {\n                               adder.add(docID);\n                             }\n                           }\n                           \n                           // algorithm: we create a bounding box (two bounding boxes if we cross the dateline).\n                           // 1. check our bounding box(es) first. if the subtree is entirely outside of those, bail.\n                           // 2. check if the subtree is disjoint. it may cross the bounding box but not intersect with circle\n                           // 3. see if the subtree is fully contained. if the subtree is enormous along the x axis, wrapping half way around the world, etc: then this can't work, just go to step 4.\n                           // 4. recurse naively (subtrees crossing over circle edge)\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n                               // latitude out of bounding box range\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             }\n\n                             if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                                  StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                                 && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n                               // longitude out of bounding box range\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             }\n\n                             double latMin = decodeLatitude(minPackedValue, 0);\n                             double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n                             double latMax = decodeLatitude(maxPackedValue, 0);\n                             double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n                             if ((longitude < lonMin || longitude > lonMax) && (axisLat+ Rectangle.AXISLAT_ERROR < latMin || axisLat- Rectangle.AXISLAT_ERROR > latMax)) {\n                               // circle not fully inside / crossing axis\n                               if (SloppyMath.haversinSortKey(latitude, longitude, latMin, lonMin) > sortKey &&\n                                   SloppyMath.haversinSortKey(latitude, longitude, latMin, lonMax) > sortKey &&\n                                   SloppyMath.haversinSortKey(latitude, longitude, latMax, lonMin) > sortKey &&\n                                   SloppyMath.haversinSortKey(latitude, longitude, latMax, lonMax) > sortKey) {\n                                 // no points inside\n                                 return Relation.CELL_OUTSIDE_QUERY;\n                               }\n                             }\n\n                             if (lonMax - longitude < 90 && longitude - lonMin < 90 &&\n                                 SloppyMath.haversinSortKey(latitude, longitude, latMin, lonMin) <= sortKey &&\n                                 SloppyMath.haversinSortKey(latitude, longitude, latMin, lonMax) <= sortKey &&\n                                 SloppyMath.haversinSortKey(latitude, longitude, latMax, lonMin) <= sortKey &&\n                                 SloppyMath.haversinSortKey(latitude, longitude, latMax, lonMax) <= sortKey) {\n                               // we are fully enclosed, collect everything within this subtree\n                               return Relation.CELL_INSIDE_QUERY;\n                             } else {\n                               // recurse: its inside our bounding box(es), but not fully, or it wraps around.\n                               return Relation.CELL_CROSSES_QUERY;\n                             }\n                           }\n                         });\n\n        return new ConstantScoreScorer(this, score(), result.build().iterator());\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"367f57e2ee85b7f7e28cfe73370a22cf67624f65","date":1476778467,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    Rectangle box = Rectangle.fromPointDistance(latitude, longitude, radiusMeters);\n    // create bounding box(es) for the distance range\n    // these are pre-encoded with LatLonPoint's encoding\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    // second set of longitude ranges to check (for cross-dateline case)\n    final byte minLon2[] = new byte[Integer.BYTES];\n\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n\n    // crosses dateline: split\n    if (box.crossesDateline()) {\n      // box1\n      NumericUtils.intToSortableBytes(Integer.MIN_VALUE, minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // box2\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon2, 0);\n    } else {\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // disable box2\n      NumericUtils.intToSortableBytes(Integer.MAX_VALUE, minLon2, 0);\n    }\n\n    // compute exact sort key: avoid any asin() computations\n    final double sortKey = GeoUtils.distanceQuerySortKey(radiusMeters);\n\n    final double axisLat = Rectangle.axisLat(latitude, radiusMeters);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n        \n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n\n        values.intersect(\n                         new IntersectVisitor() {\n\n                           DocIdSetBuilder.BulkAdder adder;\n\n                           @Override\n                           public void grow(int count) {\n                             adder = result.grow(count);\n                           }\n\n                           @Override\n                           public void visit(int docID) {\n                             adder.add(docID);\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             // bounding box check\n                             if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n                               // latitude out of bounding box range\n                               return;\n                             }\n\n                             if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                                  StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                                 && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n                               // longitude out of bounding box range\n                               return;\n                             }\n\n                             double docLatitude = decodeLatitude(packedValue, 0);\n                             double docLongitude = decodeLongitude(packedValue, Integer.BYTES);\n\n                             // its a match only if its sortKey <= our sortKey\n                             if (SloppyMath.haversinSortKey(latitude, longitude, docLatitude, docLongitude) <= sortKey) {\n                               adder.add(docID);\n                             }\n                           }\n                           \n                           // algorithm: we create a bounding box (two bounding boxes if we cross the dateline).\n                           // 1. check our bounding box(es) first. if the subtree is entirely outside of those, bail.\n                           // 2. check if the subtree is disjoint. it may cross the bounding box but not intersect with circle\n                           // 3. see if the subtree is fully contained. if the subtree is enormous along the x axis, wrapping half way around the world, etc: then this can't work, just go to step 4.\n                           // 4. recurse naively (subtrees crossing over circle edge)\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n                               // latitude out of bounding box range\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             }\n\n                             if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                                  StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                                 && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n                               // longitude out of bounding box range\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             }\n\n                             double latMin = decodeLatitude(minPackedValue, 0);\n                             double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n                             double latMax = decodeLatitude(maxPackedValue, 0);\n                             double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n                             if ((longitude < lonMin || longitude > lonMax) && (axisLat+ Rectangle.AXISLAT_ERROR < latMin || axisLat- Rectangle.AXISLAT_ERROR > latMax)) {\n                               // circle not fully inside / crossing axis\n                               if (SloppyMath.haversinSortKey(latitude, longitude, latMin, lonMin) > sortKey &&\n                                   SloppyMath.haversinSortKey(latitude, longitude, latMin, lonMax) > sortKey &&\n                                   SloppyMath.haversinSortKey(latitude, longitude, latMax, lonMin) > sortKey &&\n                                   SloppyMath.haversinSortKey(latitude, longitude, latMax, lonMax) > sortKey) {\n                                 // no points inside\n                                 return Relation.CELL_OUTSIDE_QUERY;\n                               }\n                             }\n\n                             if (lonMax - longitude < 90 && longitude - lonMin < 90 &&\n                                 SloppyMath.haversinSortKey(latitude, longitude, latMin, lonMin) <= sortKey &&\n                                 SloppyMath.haversinSortKey(latitude, longitude, latMin, lonMax) <= sortKey &&\n                                 SloppyMath.haversinSortKey(latitude, longitude, latMax, lonMin) <= sortKey &&\n                                 SloppyMath.haversinSortKey(latitude, longitude, latMax, lonMax) <= sortKey) {\n                               // we are fully enclosed, collect everything within this subtree\n                               return Relation.CELL_INSIDE_QUERY;\n                             } else {\n                               // recurse: its inside our bounding box(es), but not fully, or it wraps around.\n                               return Relation.CELL_CROSSES_QUERY;\n                             }\n                           }\n                         });\n\n        return new ConstantScoreScorer(this, score(), result.build().iterator());\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    Rectangle box = Rectangle.fromPointDistance(latitude, longitude, radiusMeters);\n    // create bounding box(es) for the distance range\n    // these are pre-encoded with LatLonPoint's encoding\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    // second set of longitude ranges to check (for cross-dateline case)\n    final byte minLon2[] = new byte[Integer.BYTES];\n\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n\n    // crosses dateline: split\n    if (box.crossesDateline()) {\n      // box1\n      NumericUtils.intToSortableBytes(Integer.MIN_VALUE, minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // box2\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon2, 0);\n    } else {\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // disable box2\n      NumericUtils.intToSortableBytes(Integer.MAX_VALUE, minLon2, 0);\n    }\n\n    // compute exact sort key: avoid any asin() computations\n    final double sortKey = GeoUtils.distanceQuerySortKey(radiusMeters);\n\n    final double axisLat = Rectangle.axisLat(latitude, radiusMeters);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues();\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n        \n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n\n        values.intersect(field,\n                         new IntersectVisitor() {\n\n                           DocIdSetBuilder.BulkAdder adder;\n\n                           @Override\n                           public void grow(int count) {\n                             adder = result.grow(count);\n                           }\n\n                           @Override\n                           public void visit(int docID) {\n                             adder.add(docID);\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             // bounding box check\n                             if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n                               // latitude out of bounding box range\n                               return;\n                             }\n\n                             if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                                  StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                                 && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n                               // longitude out of bounding box range\n                               return;\n                             }\n\n                             double docLatitude = decodeLatitude(packedValue, 0);\n                             double docLongitude = decodeLongitude(packedValue, Integer.BYTES);\n\n                             // its a match only if its sortKey <= our sortKey\n                             if (SloppyMath.haversinSortKey(latitude, longitude, docLatitude, docLongitude) <= sortKey) {\n                               adder.add(docID);\n                             }\n                           }\n                           \n                           // algorithm: we create a bounding box (two bounding boxes if we cross the dateline).\n                           // 1. check our bounding box(es) first. if the subtree is entirely outside of those, bail.\n                           // 2. check if the subtree is disjoint. it may cross the bounding box but not intersect with circle\n                           // 3. see if the subtree is fully contained. if the subtree is enormous along the x axis, wrapping half way around the world, etc: then this can't work, just go to step 4.\n                           // 4. recurse naively (subtrees crossing over circle edge)\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n                               // latitude out of bounding box range\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             }\n\n                             if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                                  StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                                 && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n                               // longitude out of bounding box range\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             }\n\n                             double latMin = decodeLatitude(minPackedValue, 0);\n                             double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n                             double latMax = decodeLatitude(maxPackedValue, 0);\n                             double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n                             if ((longitude < lonMin || longitude > lonMax) && (axisLat+ Rectangle.AXISLAT_ERROR < latMin || axisLat- Rectangle.AXISLAT_ERROR > latMax)) {\n                               // circle not fully inside / crossing axis\n                               if (SloppyMath.haversinSortKey(latitude, longitude, latMin, lonMin) > sortKey &&\n                                   SloppyMath.haversinSortKey(latitude, longitude, latMin, lonMax) > sortKey &&\n                                   SloppyMath.haversinSortKey(latitude, longitude, latMax, lonMin) > sortKey &&\n                                   SloppyMath.haversinSortKey(latitude, longitude, latMax, lonMax) > sortKey) {\n                                 // no points inside\n                                 return Relation.CELL_OUTSIDE_QUERY;\n                               }\n                             }\n\n                             if (lonMax - longitude < 90 && longitude - lonMin < 90 &&\n                                 SloppyMath.haversinSortKey(latitude, longitude, latMin, lonMin) <= sortKey &&\n                                 SloppyMath.haversinSortKey(latitude, longitude, latMin, lonMax) <= sortKey &&\n                                 SloppyMath.haversinSortKey(latitude, longitude, latMax, lonMin) <= sortKey &&\n                                 SloppyMath.haversinSortKey(latitude, longitude, latMax, lonMax) <= sortKey) {\n                               // we are fully enclosed, collect everything within this subtree\n                               return Relation.CELL_INSIDE_QUERY;\n                             } else {\n                               // recurse: its inside our bounding box(es), but not fully, or it wraps around.\n                               return Relation.CELL_CROSSES_QUERY;\n                             }\n                           }\n                         });\n\n        return new ConstantScoreScorer(this, score(), result.build().iterator());\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    Rectangle box = Rectangle.fromPointDistance(latitude, longitude, radiusMeters);\n    // create bounding box(es) for the distance range\n    // these are pre-encoded with LatLonPoint's encoding\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    // second set of longitude ranges to check (for cross-dateline case)\n    final byte minLon2[] = new byte[Integer.BYTES];\n\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n\n    // crosses dateline: split\n    if (box.crossesDateline()) {\n      // box1\n      NumericUtils.intToSortableBytes(Integer.MIN_VALUE, minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // box2\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon2, 0);\n    } else {\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // disable box2\n      NumericUtils.intToSortableBytes(Integer.MAX_VALUE, minLon2, 0);\n    }\n\n    // compute exact sort key: avoid any asin() computations\n    final double sortKey = GeoUtils.distanceQuerySortKey(radiusMeters);\n\n    final double axisLat = Rectangle.axisLat(latitude, radiusMeters);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n        \n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n\n        values.intersect(\n                         new IntersectVisitor() {\n\n                           DocIdSetBuilder.BulkAdder adder;\n\n                           @Override\n                           public void grow(int count) {\n                             adder = result.grow(count);\n                           }\n\n                           @Override\n                           public void visit(int docID) {\n                             adder.add(docID);\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             // bounding box check\n                             if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n                               // latitude out of bounding box range\n                               return;\n                             }\n\n                             if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                                  StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                                 && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n                               // longitude out of bounding box range\n                               return;\n                             }\n\n                             double docLatitude = decodeLatitude(packedValue, 0);\n                             double docLongitude = decodeLongitude(packedValue, Integer.BYTES);\n\n                             // its a match only if its sortKey <= our sortKey\n                             if (SloppyMath.haversinSortKey(latitude, longitude, docLatitude, docLongitude) <= sortKey) {\n                               adder.add(docID);\n                             }\n                           }\n                           \n                           // algorithm: we create a bounding box (two bounding boxes if we cross the dateline).\n                           // 1. check our bounding box(es) first. if the subtree is entirely outside of those, bail.\n                           // 2. check if the subtree is disjoint. it may cross the bounding box but not intersect with circle\n                           // 3. see if the subtree is fully contained. if the subtree is enormous along the x axis, wrapping half way around the world, etc: then this can't work, just go to step 4.\n                           // 4. recurse naively (subtrees crossing over circle edge)\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n                               // latitude out of bounding box range\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             }\n\n                             if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                                  StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                                 && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n                               // longitude out of bounding box range\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             }\n\n                             double latMin = decodeLatitude(minPackedValue, 0);\n                             double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n                             double latMax = decodeLatitude(maxPackedValue, 0);\n                             double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n                             if ((longitude < lonMin || longitude > lonMax) && (axisLat+ Rectangle.AXISLAT_ERROR < latMin || axisLat- Rectangle.AXISLAT_ERROR > latMax)) {\n                               // circle not fully inside / crossing axis\n                               if (SloppyMath.haversinSortKey(latitude, longitude, latMin, lonMin) > sortKey &&\n                                   SloppyMath.haversinSortKey(latitude, longitude, latMin, lonMax) > sortKey &&\n                                   SloppyMath.haversinSortKey(latitude, longitude, latMax, lonMin) > sortKey &&\n                                   SloppyMath.haversinSortKey(latitude, longitude, latMax, lonMax) > sortKey) {\n                                 // no points inside\n                                 return Relation.CELL_OUTSIDE_QUERY;\n                               }\n                             }\n\n                             if (lonMax - longitude < 90 && longitude - lonMin < 90 &&\n                                 SloppyMath.haversinSortKey(latitude, longitude, latMin, lonMin) <= sortKey &&\n                                 SloppyMath.haversinSortKey(latitude, longitude, latMin, lonMax) <= sortKey &&\n                                 SloppyMath.haversinSortKey(latitude, longitude, latMax, lonMin) <= sortKey &&\n                                 SloppyMath.haversinSortKey(latitude, longitude, latMax, lonMax) <= sortKey) {\n                               // we are fully enclosed, collect everything within this subtree\n                               return Relation.CELL_INSIDE_QUERY;\n                             } else {\n                               // recurse: its inside our bounding box(es), but not fully, or it wraps around.\n                               return Relation.CELL_CROSSES_QUERY;\n                             }\n                           }\n                         });\n\n        return new ConstantScoreScorer(this, score(), result.build().iterator());\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"827a82bc4dd5d485dbe63f69e8429ecff24cb602","date":1485435575,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    Rectangle box = Rectangle.fromPointDistance(latitude, longitude, radiusMeters);\n    // create bounding box(es) for the distance range\n    // these are pre-encoded with LatLonPoint's encoding\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    // second set of longitude ranges to check (for cross-dateline case)\n    final byte minLon2[] = new byte[Integer.BYTES];\n\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n\n    // crosses dateline: split\n    if (box.crossesDateline()) {\n      // box1\n      NumericUtils.intToSortableBytes(Integer.MIN_VALUE, minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // box2\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon2, 0);\n    } else {\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // disable box2\n      NumericUtils.intToSortableBytes(Integer.MAX_VALUE, minLon2, 0);\n    }\n\n    // compute exact sort key: avoid any asin() computations\n    final double sortKey = GeoUtils.distanceQuerySortKey(radiusMeters);\n\n    final double axisLat = Rectangle.axisLat(latitude, radiusMeters);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(false);\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n        \n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n        final IntersectVisitor visitor =\n                         new IntersectVisitor() {\n\n                           DocIdSetBuilder.BulkAdder adder;\n\n                           @Override\n                           public void grow(int count) {\n                             adder = result.grow(count);\n                           }\n\n                           @Override\n                           public void visit(int docID) {\n                             adder.add(docID);\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             // bounding box check\n                             if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n                               // latitude out of bounding box range\n                               return;\n                             }\n\n                             if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                                  StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                                 && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n                               // longitude out of bounding box range\n                               return;\n                             }\n\n                             int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n                             int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n                             if (distancePredicate.apply(docLatitude, docLongitude)) {\n                               adder.add(docID);\n                             }\n                           }\n                           \n                           // algorithm: we create a bounding box (two bounding boxes if we cross the dateline).\n                           // 1. check our bounding box(es) first. if the subtree is entirely outside of those, bail.\n                           // 2. check if the subtree is disjoint. it may cross the bounding box but not intersect with circle\n                           // 3. see if the subtree is fully contained. if the subtree is enormous along the x axis, wrapping half way around the world, etc: then this can't work, just go to step 4.\n                           // 4. recurse naively (subtrees crossing over circle edge)\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n                               // latitude out of bounding box range\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             }\n\n                             if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                                  StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                                 && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n                               // longitude out of bounding box range\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             }\n\n                             double latMin = decodeLatitude(minPackedValue, 0);\n                             double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n                             double latMax = decodeLatitude(maxPackedValue, 0);\n                             double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n                             return GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n                           }\n                         };\n        final Weight weight = this;\n        return new ScorerSupplier() {\n\n          long cost = -1;\n\n          @Override\n          public Scorer get(boolean randomAccess) throws IOException {\n            values.intersect(visitor);\n            return new ConstantScoreScorer(weight, score(), result.build().iterator());\n          }\n\n          @Override\n          public long cost() {\n            if (cost == -1) {\n              cost = values.estimatePointCount(visitor);\n            }\n            assert cost >= 0;\n            return cost;\n          }\n        };\n\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    Rectangle box = Rectangle.fromPointDistance(latitude, longitude, radiusMeters);\n    // create bounding box(es) for the distance range\n    // these are pre-encoded with LatLonPoint's encoding\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    // second set of longitude ranges to check (for cross-dateline case)\n    final byte minLon2[] = new byte[Integer.BYTES];\n\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n\n    // crosses dateline: split\n    if (box.crossesDateline()) {\n      // box1\n      NumericUtils.intToSortableBytes(Integer.MIN_VALUE, minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // box2\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon2, 0);\n    } else {\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // disable box2\n      NumericUtils.intToSortableBytes(Integer.MAX_VALUE, minLon2, 0);\n    }\n\n    // compute exact sort key: avoid any asin() computations\n    final double sortKey = GeoUtils.distanceQuerySortKey(radiusMeters);\n\n    final double axisLat = Rectangle.axisLat(latitude, radiusMeters);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n        \n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n\n        values.intersect(\n                         new IntersectVisitor() {\n\n                           DocIdSetBuilder.BulkAdder adder;\n\n                           @Override\n                           public void grow(int count) {\n                             adder = result.grow(count);\n                           }\n\n                           @Override\n                           public void visit(int docID) {\n                             adder.add(docID);\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             // bounding box check\n                             if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n                               // latitude out of bounding box range\n                               return;\n                             }\n\n                             if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                                  StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                                 && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n                               // longitude out of bounding box range\n                               return;\n                             }\n\n                             double docLatitude = decodeLatitude(packedValue, 0);\n                             double docLongitude = decodeLongitude(packedValue, Integer.BYTES);\n\n                             // its a match only if its sortKey <= our sortKey\n                             if (SloppyMath.haversinSortKey(latitude, longitude, docLatitude, docLongitude) <= sortKey) {\n                               adder.add(docID);\n                             }\n                           }\n                           \n                           // algorithm: we create a bounding box (two bounding boxes if we cross the dateline).\n                           // 1. check our bounding box(es) first. if the subtree is entirely outside of those, bail.\n                           // 2. check if the subtree is disjoint. it may cross the bounding box but not intersect with circle\n                           // 3. see if the subtree is fully contained. if the subtree is enormous along the x axis, wrapping half way around the world, etc: then this can't work, just go to step 4.\n                           // 4. recurse naively (subtrees crossing over circle edge)\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n                               // latitude out of bounding box range\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             }\n\n                             if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                                  StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                                 && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n                               // longitude out of bounding box range\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             }\n\n                             double latMin = decodeLatitude(minPackedValue, 0);\n                             double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n                             double latMax = decodeLatitude(maxPackedValue, 0);\n                             double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n                             if ((longitude < lonMin || longitude > lonMax) && (axisLat+ Rectangle.AXISLAT_ERROR < latMin || axisLat- Rectangle.AXISLAT_ERROR > latMax)) {\n                               // circle not fully inside / crossing axis\n                               if (SloppyMath.haversinSortKey(latitude, longitude, latMin, lonMin) > sortKey &&\n                                   SloppyMath.haversinSortKey(latitude, longitude, latMin, lonMax) > sortKey &&\n                                   SloppyMath.haversinSortKey(latitude, longitude, latMax, lonMin) > sortKey &&\n                                   SloppyMath.haversinSortKey(latitude, longitude, latMax, lonMax) > sortKey) {\n                                 // no points inside\n                                 return Relation.CELL_OUTSIDE_QUERY;\n                               }\n                             }\n\n                             if (lonMax - longitude < 90 && longitude - lonMin < 90 &&\n                                 SloppyMath.haversinSortKey(latitude, longitude, latMin, lonMin) <= sortKey &&\n                                 SloppyMath.haversinSortKey(latitude, longitude, latMin, lonMax) <= sortKey &&\n                                 SloppyMath.haversinSortKey(latitude, longitude, latMax, lonMin) <= sortKey &&\n                                 SloppyMath.haversinSortKey(latitude, longitude, latMax, lonMax) <= sortKey) {\n                               // we are fully enclosed, collect everything within this subtree\n                               return Relation.CELL_INSIDE_QUERY;\n                             } else {\n                               // recurse: its inside our bounding box(es), but not fully, or it wraps around.\n                               return Relation.CELL_CROSSES_QUERY;\n                             }\n                           }\n                         });\n\n        return new ConstantScoreScorer(this, score(), result.build().iterator());\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"598b5d23aa7c9732bf473c21a9cd309c44599394","date":1485530378,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    Rectangle box = Rectangle.fromPointDistance(latitude, longitude, radiusMeters);\n    // create bounding box(es) for the distance range\n    // these are pre-encoded with LatLonPoint's encoding\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    // second set of longitude ranges to check (for cross-dateline case)\n    final byte minLon2[] = new byte[Integer.BYTES];\n\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n\n    // crosses dateline: split\n    if (box.crossesDateline()) {\n      // box1\n      NumericUtils.intToSortableBytes(Integer.MIN_VALUE, minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // box2\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon2, 0);\n    } else {\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // disable box2\n      NumericUtils.intToSortableBytes(Integer.MAX_VALUE, minLon2, 0);\n    }\n\n    // compute exact sort key: avoid any asin() computations\n    final double sortKey = GeoUtils.distanceQuerySortKey(radiusMeters);\n\n    final double axisLat = Rectangle.axisLat(latitude, radiusMeters);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(false);\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n        \n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n        final IntersectVisitor visitor =\n                         new IntersectVisitor() {\n\n                           DocIdSetBuilder.BulkAdder adder;\n\n                           @Override\n                           public void grow(int count) {\n                             adder = result.grow(count);\n                           }\n\n                           @Override\n                           public void visit(int docID) {\n                             adder.add(docID);\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             // bounding box check\n                             if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n                               // latitude out of bounding box range\n                               return;\n                             }\n\n                             if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                                  StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                                 && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n                               // longitude out of bounding box range\n                               return;\n                             }\n\n                             int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n                             int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n                             if (distancePredicate.apply(docLatitude, docLongitude)) {\n                               adder.add(docID);\n                             }\n                           }\n                           \n                           // algorithm: we create a bounding box (two bounding boxes if we cross the dateline).\n                           // 1. check our bounding box(es) first. if the subtree is entirely outside of those, bail.\n                           // 2. check if the subtree is disjoint. it may cross the bounding box but not intersect with circle\n                           // 3. see if the subtree is fully contained. if the subtree is enormous along the x axis, wrapping half way around the world, etc: then this can't work, just go to step 4.\n                           // 4. recurse naively (subtrees crossing over circle edge)\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n                               // latitude out of bounding box range\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             }\n\n                             if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                                  StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                                 && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n                               // longitude out of bounding box range\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             }\n\n                             double latMin = decodeLatitude(minPackedValue, 0);\n                             double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n                             double latMax = decodeLatitude(maxPackedValue, 0);\n                             double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n                             return GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n                           }\n                         };\n        final Weight weight = this;\n        return new ScorerSupplier() {\n\n          long cost = -1;\n\n          @Override\n          public Scorer get(boolean randomAccess) throws IOException {\n            values.intersect(visitor);\n            return new ConstantScoreScorer(weight, score(), result.build().iterator());\n          }\n\n          @Override\n          public long cost() {\n            if (cost == -1) {\n              cost = values.estimatePointCount(visitor);\n            }\n            assert cost >= 0;\n            return cost;\n          }\n        };\n\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    Rectangle box = Rectangle.fromPointDistance(latitude, longitude, radiusMeters);\n    // create bounding box(es) for the distance range\n    // these are pre-encoded with LatLonPoint's encoding\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    // second set of longitude ranges to check (for cross-dateline case)\n    final byte minLon2[] = new byte[Integer.BYTES];\n\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n\n    // crosses dateline: split\n    if (box.crossesDateline()) {\n      // box1\n      NumericUtils.intToSortableBytes(Integer.MIN_VALUE, minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // box2\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon2, 0);\n    } else {\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // disable box2\n      NumericUtils.intToSortableBytes(Integer.MAX_VALUE, minLon2, 0);\n    }\n\n    // compute exact sort key: avoid any asin() computations\n    final double sortKey = GeoUtils.distanceQuerySortKey(radiusMeters);\n\n    final double axisLat = Rectangle.axisLat(latitude, radiusMeters);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n        \n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n\n        values.intersect(\n                         new IntersectVisitor() {\n\n                           DocIdSetBuilder.BulkAdder adder;\n\n                           @Override\n                           public void grow(int count) {\n                             adder = result.grow(count);\n                           }\n\n                           @Override\n                           public void visit(int docID) {\n                             adder.add(docID);\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             // bounding box check\n                             if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n                               // latitude out of bounding box range\n                               return;\n                             }\n\n                             if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                                  StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                                 && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n                               // longitude out of bounding box range\n                               return;\n                             }\n\n                             double docLatitude = decodeLatitude(packedValue, 0);\n                             double docLongitude = decodeLongitude(packedValue, Integer.BYTES);\n\n                             // its a match only if its sortKey <= our sortKey\n                             if (SloppyMath.haversinSortKey(latitude, longitude, docLatitude, docLongitude) <= sortKey) {\n                               adder.add(docID);\n                             }\n                           }\n                           \n                           // algorithm: we create a bounding box (two bounding boxes if we cross the dateline).\n                           // 1. check our bounding box(es) first. if the subtree is entirely outside of those, bail.\n                           // 2. check if the subtree is disjoint. it may cross the bounding box but not intersect with circle\n                           // 3. see if the subtree is fully contained. if the subtree is enormous along the x axis, wrapping half way around the world, etc: then this can't work, just go to step 4.\n                           // 4. recurse naively (subtrees crossing over circle edge)\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n                               // latitude out of bounding box range\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             }\n\n                             if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                                  StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                                 && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n                               // longitude out of bounding box range\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             }\n\n                             double latMin = decodeLatitude(minPackedValue, 0);\n                             double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n                             double latMax = decodeLatitude(maxPackedValue, 0);\n                             double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n                             if ((longitude < lonMin || longitude > lonMax) && (axisLat+ Rectangle.AXISLAT_ERROR < latMin || axisLat- Rectangle.AXISLAT_ERROR > latMax)) {\n                               // circle not fully inside / crossing axis\n                               if (SloppyMath.haversinSortKey(latitude, longitude, latMin, lonMin) > sortKey &&\n                                   SloppyMath.haversinSortKey(latitude, longitude, latMin, lonMax) > sortKey &&\n                                   SloppyMath.haversinSortKey(latitude, longitude, latMax, lonMin) > sortKey &&\n                                   SloppyMath.haversinSortKey(latitude, longitude, latMax, lonMax) > sortKey) {\n                                 // no points inside\n                                 return Relation.CELL_OUTSIDE_QUERY;\n                               }\n                             }\n\n                             if (lonMax - longitude < 90 && longitude - lonMin < 90 &&\n                                 SloppyMath.haversinSortKey(latitude, longitude, latMin, lonMin) <= sortKey &&\n                                 SloppyMath.haversinSortKey(latitude, longitude, latMin, lonMax) <= sortKey &&\n                                 SloppyMath.haversinSortKey(latitude, longitude, latMax, lonMin) <= sortKey &&\n                                 SloppyMath.haversinSortKey(latitude, longitude, latMax, lonMax) <= sortKey) {\n                               // we are fully enclosed, collect everything within this subtree\n                               return Relation.CELL_INSIDE_QUERY;\n                             } else {\n                               // recurse: its inside our bounding box(es), but not fully, or it wraps around.\n                               return Relation.CELL_CROSSES_QUERY;\n                             }\n                           }\n                         });\n\n        return new ConstantScoreScorer(this, score(), result.build().iterator());\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee49d43fb47965f24d4ad89e7a1bdcc10410d615","date":1485765906,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    Rectangle box = Rectangle.fromPointDistance(latitude, longitude, radiusMeters);\n    // create bounding box(es) for the distance range\n    // these are pre-encoded with LatLonPoint's encoding\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    // second set of longitude ranges to check (for cross-dateline case)\n    final byte minLon2[] = new byte[Integer.BYTES];\n\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n\n    // crosses dateline: split\n    if (box.crossesDateline()) {\n      // box1\n      NumericUtils.intToSortableBytes(Integer.MIN_VALUE, minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // box2\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon2, 0);\n    } else {\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // disable box2\n      NumericUtils.intToSortableBytes(Integer.MAX_VALUE, minLon2, 0);\n    }\n\n    // compute exact sort key: avoid any asin() computations\n    final double sortKey = GeoUtils.distanceQuerySortKey(radiusMeters);\n\n    final double axisLat = Rectangle.axisLat(latitude, radiusMeters);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(false);\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n        \n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n        final IntersectVisitor visitor =\n                         new IntersectVisitor() {\n\n                           DocIdSetBuilder.BulkAdder adder;\n\n                           @Override\n                           public void grow(int count) {\n                             adder = result.grow(count);\n                           }\n\n                           @Override\n                           public void visit(int docID) {\n                             adder.add(docID);\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             // bounding box check\n                             if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n                               // latitude out of bounding box range\n                               return;\n                             }\n\n                             if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                                  StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                                 && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n                               // longitude out of bounding box range\n                               return;\n                             }\n\n                             int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n                             int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n                             if (distancePredicate.test(docLatitude, docLongitude)) {\n                               adder.add(docID);\n                             }\n                           }\n                           \n                           // algorithm: we create a bounding box (two bounding boxes if we cross the dateline).\n                           // 1. check our bounding box(es) first. if the subtree is entirely outside of those, bail.\n                           // 2. check if the subtree is disjoint. it may cross the bounding box but not intersect with circle\n                           // 3. see if the subtree is fully contained. if the subtree is enormous along the x axis, wrapping half way around the world, etc: then this can't work, just go to step 4.\n                           // 4. recurse naively (subtrees crossing over circle edge)\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n                               // latitude out of bounding box range\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             }\n\n                             if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                                  StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                                 && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n                               // longitude out of bounding box range\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             }\n\n                             double latMin = decodeLatitude(minPackedValue, 0);\n                             double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n                             double latMax = decodeLatitude(maxPackedValue, 0);\n                             double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n                             return GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n                           }\n                         };\n        final Weight weight = this;\n        return new ScorerSupplier() {\n\n          long cost = -1;\n\n          @Override\n          public Scorer get(boolean randomAccess) throws IOException {\n            values.intersect(visitor);\n            return new ConstantScoreScorer(weight, score(), result.build().iterator());\n          }\n\n          @Override\n          public long cost() {\n            if (cost == -1) {\n              cost = values.estimatePointCount(visitor);\n            }\n            assert cost >= 0;\n            return cost;\n          }\n        };\n\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    Rectangle box = Rectangle.fromPointDistance(latitude, longitude, radiusMeters);\n    // create bounding box(es) for the distance range\n    // these are pre-encoded with LatLonPoint's encoding\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    // second set of longitude ranges to check (for cross-dateline case)\n    final byte minLon2[] = new byte[Integer.BYTES];\n\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n\n    // crosses dateline: split\n    if (box.crossesDateline()) {\n      // box1\n      NumericUtils.intToSortableBytes(Integer.MIN_VALUE, minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // box2\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon2, 0);\n    } else {\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // disable box2\n      NumericUtils.intToSortableBytes(Integer.MAX_VALUE, minLon2, 0);\n    }\n\n    // compute exact sort key: avoid any asin() computations\n    final double sortKey = GeoUtils.distanceQuerySortKey(radiusMeters);\n\n    final double axisLat = Rectangle.axisLat(latitude, radiusMeters);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(false);\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n        \n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n        final IntersectVisitor visitor =\n                         new IntersectVisitor() {\n\n                           DocIdSetBuilder.BulkAdder adder;\n\n                           @Override\n                           public void grow(int count) {\n                             adder = result.grow(count);\n                           }\n\n                           @Override\n                           public void visit(int docID) {\n                             adder.add(docID);\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             // bounding box check\n                             if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n                               // latitude out of bounding box range\n                               return;\n                             }\n\n                             if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                                  StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                                 && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n                               // longitude out of bounding box range\n                               return;\n                             }\n\n                             int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n                             int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n                             if (distancePredicate.apply(docLatitude, docLongitude)) {\n                               adder.add(docID);\n                             }\n                           }\n                           \n                           // algorithm: we create a bounding box (two bounding boxes if we cross the dateline).\n                           // 1. check our bounding box(es) first. if the subtree is entirely outside of those, bail.\n                           // 2. check if the subtree is disjoint. it may cross the bounding box but not intersect with circle\n                           // 3. see if the subtree is fully contained. if the subtree is enormous along the x axis, wrapping half way around the world, etc: then this can't work, just go to step 4.\n                           // 4. recurse naively (subtrees crossing over circle edge)\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n                               // latitude out of bounding box range\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             }\n\n                             if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                                  StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                                 && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n                               // longitude out of bounding box range\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             }\n\n                             double latMin = decodeLatitude(minPackedValue, 0);\n                             double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n                             double latMax = decodeLatitude(maxPackedValue, 0);\n                             double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n                             return GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n                           }\n                         };\n        final Weight weight = this;\n        return new ScorerSupplier() {\n\n          long cost = -1;\n\n          @Override\n          public Scorer get(boolean randomAccess) throws IOException {\n            values.intersect(visitor);\n            return new ConstantScoreScorer(weight, score(), result.build().iterator());\n          }\n\n          @Override\n          public long cost() {\n            if (cost == -1) {\n              cost = values.estimatePointCount(visitor);\n            }\n            assert cost >= 0;\n            return cost;\n          }\n        };\n\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    Rectangle box = Rectangle.fromPointDistance(latitude, longitude, radiusMeters);\n    // create bounding box(es) for the distance range\n    // these are pre-encoded with LatLonPoint's encoding\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    // second set of longitude ranges to check (for cross-dateline case)\n    final byte minLon2[] = new byte[Integer.BYTES];\n\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n\n    // crosses dateline: split\n    if (box.crossesDateline()) {\n      // box1\n      NumericUtils.intToSortableBytes(Integer.MIN_VALUE, minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // box2\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon2, 0);\n    } else {\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // disable box2\n      NumericUtils.intToSortableBytes(Integer.MAX_VALUE, minLon2, 0);\n    }\n\n    // compute exact sort key: avoid any asin() computations\n    final double sortKey = GeoUtils.distanceQuerySortKey(radiusMeters);\n\n    final double axisLat = Rectangle.axisLat(latitude, radiusMeters);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(false);\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n        \n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n        final IntersectVisitor visitor =\n                         new IntersectVisitor() {\n\n                           DocIdSetBuilder.BulkAdder adder;\n\n                           @Override\n                           public void grow(int count) {\n                             adder = result.grow(count);\n                           }\n\n                           @Override\n                           public void visit(int docID) {\n                             adder.add(docID);\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             // bounding box check\n                             if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n                               // latitude out of bounding box range\n                               return;\n                             }\n\n                             if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                                  StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                                 && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n                               // longitude out of bounding box range\n                               return;\n                             }\n\n                             int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n                             int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n                             if (distancePredicate.test(docLatitude, docLongitude)) {\n                               adder.add(docID);\n                             }\n                           }\n                           \n                           // algorithm: we create a bounding box (two bounding boxes if we cross the dateline).\n                           // 1. check our bounding box(es) first. if the subtree is entirely outside of those, bail.\n                           // 2. check if the subtree is disjoint. it may cross the bounding box but not intersect with circle\n                           // 3. see if the subtree is fully contained. if the subtree is enormous along the x axis, wrapping half way around the world, etc: then this can't work, just go to step 4.\n                           // 4. recurse naively (subtrees crossing over circle edge)\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n                               // latitude out of bounding box range\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             }\n\n                             if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                                  StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                                 && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n                               // longitude out of bounding box range\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             }\n\n                             double latMin = decodeLatitude(minPackedValue, 0);\n                             double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n                             double latMax = decodeLatitude(maxPackedValue, 0);\n                             double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n                             return GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n                           }\n                         };\n        final Weight weight = this;\n        return new ScorerSupplier() {\n\n          long cost = -1;\n\n          @Override\n          public Scorer get(boolean randomAccess) throws IOException {\n            values.intersect(visitor);\n            return new ConstantScoreScorer(weight, score(), result.build().iterator());\n          }\n\n          @Override\n          public long cost() {\n            if (cost == -1) {\n              cost = values.estimatePointCount(visitor);\n            }\n            assert cost >= 0;\n            return cost;\n          }\n        };\n\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    Rectangle box = Rectangle.fromPointDistance(latitude, longitude, radiusMeters);\n    // create bounding box(es) for the distance range\n    // these are pre-encoded with LatLonPoint's encoding\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    // second set of longitude ranges to check (for cross-dateline case)\n    final byte minLon2[] = new byte[Integer.BYTES];\n\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n\n    // crosses dateline: split\n    if (box.crossesDateline()) {\n      // box1\n      NumericUtils.intToSortableBytes(Integer.MIN_VALUE, minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // box2\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon2, 0);\n    } else {\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // disable box2\n      NumericUtils.intToSortableBytes(Integer.MAX_VALUE, minLon2, 0);\n    }\n\n    // compute exact sort key: avoid any asin() computations\n    final double sortKey = GeoUtils.distanceQuerySortKey(radiusMeters);\n\n    final double axisLat = Rectangle.axisLat(latitude, radiusMeters);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(false);\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n        \n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n        final IntersectVisitor visitor =\n                         new IntersectVisitor() {\n\n                           DocIdSetBuilder.BulkAdder adder;\n\n                           @Override\n                           public void grow(int count) {\n                             adder = result.grow(count);\n                           }\n\n                           @Override\n                           public void visit(int docID) {\n                             adder.add(docID);\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             // bounding box check\n                             if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n                               // latitude out of bounding box range\n                               return;\n                             }\n\n                             if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                                  StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                                 && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n                               // longitude out of bounding box range\n                               return;\n                             }\n\n                             int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n                             int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n                             if (distancePredicate.apply(docLatitude, docLongitude)) {\n                               adder.add(docID);\n                             }\n                           }\n                           \n                           // algorithm: we create a bounding box (two bounding boxes if we cross the dateline).\n                           // 1. check our bounding box(es) first. if the subtree is entirely outside of those, bail.\n                           // 2. check if the subtree is disjoint. it may cross the bounding box but not intersect with circle\n                           // 3. see if the subtree is fully contained. if the subtree is enormous along the x axis, wrapping half way around the world, etc: then this can't work, just go to step 4.\n                           // 4. recurse naively (subtrees crossing over circle edge)\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n                               // latitude out of bounding box range\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             }\n\n                             if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                                  StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                                 && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n                               // longitude out of bounding box range\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             }\n\n                             double latMin = decodeLatitude(minPackedValue, 0);\n                             double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n                             double latMax = decodeLatitude(maxPackedValue, 0);\n                             double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n                             return GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n                           }\n                         };\n        final Weight weight = this;\n        return new ScorerSupplier() {\n\n          long cost = -1;\n\n          @Override\n          public Scorer get(boolean randomAccess) throws IOException {\n            values.intersect(visitor);\n            return new ConstantScoreScorer(weight, score(), result.build().iterator());\n          }\n\n          @Override\n          public long cost() {\n            if (cost == -1) {\n              cost = values.estimatePointCount(visitor);\n            }\n            assert cost >= 0;\n            return cost;\n          }\n        };\n\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"faf3c558df29f740350b64a25b98edd8f680a1c0","date":1502104803,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    Rectangle box = Rectangle.fromPointDistance(latitude, longitude, radiusMeters);\n    // create bounding box(es) for the distance range\n    // these are pre-encoded with LatLonPoint's encoding\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    // second set of longitude ranges to check (for cross-dateline case)\n    final byte minLon2[] = new byte[Integer.BYTES];\n\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n\n    // crosses dateline: split\n    if (box.crossesDateline()) {\n      // box1\n      NumericUtils.intToSortableBytes(Integer.MIN_VALUE, minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // box2\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon2, 0);\n    } else {\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // disable box2\n      NumericUtils.intToSortableBytes(Integer.MAX_VALUE, minLon2, 0);\n    }\n\n    // compute exact sort key: avoid any asin() computations\n    final double sortKey = GeoUtils.distanceQuerySortKey(radiusMeters);\n\n    final double axisLat = Rectangle.axisLat(latitude, radiusMeters);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(false);\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n\n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n        final IntersectVisitor visitor = getIntersectVisitor(result);\n\n        final Weight weight = this;\n        return new ScorerSupplier() {\n\n          long cost = -1;\n\n          @Override\n          public Scorer get(boolean randomAccess) throws IOException {\n            if (values.getDocCount() == reader.maxDoc()\n                && values.getDocCount() == values.size()\n                && cost() > reader.maxDoc() / 2) {\n              // If all docs have exactly one value and the cost is greater\n              // than half the leaf size then maybe we can make things faster\n              // by computing the set of documents that do NOT match the range\n              final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n              result.set(0, reader.maxDoc());\n              int[] cost = new int[]{reader.maxDoc()};\n              values.intersect(getInverseIntersectVisitor(result, cost));\n              final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            values.intersect(visitor);\n            return new ConstantScoreScorer(weight, score(), result.build().iterator());\n          }\n\n          @Override\n          public long cost() {\n            if (cost == -1) {\n              cost = values.estimatePointCount(visitor);\n            }\n            assert cost >= 0;\n            return cost;\n          }\n        };\n\n      }\n\n      /**\n       * Create a visitor that collects documents matching the range.\n       */\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            // bounding box check\n            if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              return;\n            }\n\n            int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n            int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n            if (distancePredicate.test(docLatitude, docLongitude)) {\n              adder.add(docID);\n            }\n          }\n\n          // algorithm: we create a bounding box (two bounding boxes if we cross the dateline).\n          // 1. check our bounding box(es) first. if the subtree is entirely outside of those, bail.\n          // 2. check if the subtree is disjoint. it may cross the bounding box but not intersect with circle\n          // 3. see if the subtree is fully contained. if the subtree is enormous along the x axis, wrapping half way around the world, etc: then this can't work, just go to step 4.\n          // 4. recurse naively (subtrees crossing over circle edge)\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            double latMin = decodeLatitude(minPackedValue, 0);\n            double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n            double latMax = decodeLatitude(maxPackedValue, 0);\n            double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            return GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            // bounding box check\n            if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              result.clear(docID);\n              cost[0]--;\n              return;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              result.clear(docID);\n              cost[0]--;\n              return;\n            }\n\n            int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n            int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n            if (!distancePredicate.test(docLatitude, docLongitude)) {\n              result.clear(docID);\n              cost[0]--;\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_INSIDE_QUERY;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_INSIDE_QUERY;\n            }\n\n            double latMin = decodeLatitude(minPackedValue, 0);\n            double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n            double latMax = decodeLatitude(maxPackedValue, 0);\n            double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            Relation relation = GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n            switch (relation) {\n              case CELL_INSIDE_QUERY:\n                // all points match, skip this subtree\n                return Relation.CELL_OUTSIDE_QUERY;\n              case CELL_OUTSIDE_QUERY:\n                // none of the points match, clear all documents\n                return Relation.CELL_INSIDE_QUERY;\n              default:\n                return relation;\n            }\n          }\n\n        };\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    Rectangle box = Rectangle.fromPointDistance(latitude, longitude, radiusMeters);\n    // create bounding box(es) for the distance range\n    // these are pre-encoded with LatLonPoint's encoding\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    // second set of longitude ranges to check (for cross-dateline case)\n    final byte minLon2[] = new byte[Integer.BYTES];\n\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n\n    // crosses dateline: split\n    if (box.crossesDateline()) {\n      // box1\n      NumericUtils.intToSortableBytes(Integer.MIN_VALUE, minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // box2\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon2, 0);\n    } else {\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // disable box2\n      NumericUtils.intToSortableBytes(Integer.MAX_VALUE, minLon2, 0);\n    }\n\n    // compute exact sort key: avoid any asin() computations\n    final double sortKey = GeoUtils.distanceQuerySortKey(radiusMeters);\n\n    final double axisLat = Rectangle.axisLat(latitude, radiusMeters);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(false);\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n        \n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n        final IntersectVisitor visitor =\n                         new IntersectVisitor() {\n\n                           DocIdSetBuilder.BulkAdder adder;\n\n                           @Override\n                           public void grow(int count) {\n                             adder = result.grow(count);\n                           }\n\n                           @Override\n                           public void visit(int docID) {\n                             adder.add(docID);\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             // bounding box check\n                             if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n                               // latitude out of bounding box range\n                               return;\n                             }\n\n                             if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                                  StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                                 && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n                               // longitude out of bounding box range\n                               return;\n                             }\n\n                             int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n                             int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n                             if (distancePredicate.test(docLatitude, docLongitude)) {\n                               adder.add(docID);\n                             }\n                           }\n                           \n                           // algorithm: we create a bounding box (two bounding boxes if we cross the dateline).\n                           // 1. check our bounding box(es) first. if the subtree is entirely outside of those, bail.\n                           // 2. check if the subtree is disjoint. it may cross the bounding box but not intersect with circle\n                           // 3. see if the subtree is fully contained. if the subtree is enormous along the x axis, wrapping half way around the world, etc: then this can't work, just go to step 4.\n                           // 4. recurse naively (subtrees crossing over circle edge)\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n                               // latitude out of bounding box range\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             }\n\n                             if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                                  StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                                 && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n                               // longitude out of bounding box range\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             }\n\n                             double latMin = decodeLatitude(minPackedValue, 0);\n                             double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n                             double latMax = decodeLatitude(maxPackedValue, 0);\n                             double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n                             return GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n                           }\n                         };\n        final Weight weight = this;\n        return new ScorerSupplier() {\n\n          long cost = -1;\n\n          @Override\n          public Scorer get(boolean randomAccess) throws IOException {\n            values.intersect(visitor);\n            return new ConstantScoreScorer(weight, score(), result.build().iterator());\n          }\n\n          @Override\n          public long cost() {\n            if (cost == -1) {\n              cost = values.estimatePointCount(visitor);\n            }\n            assert cost >= 0;\n            return cost;\n          }\n        };\n\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    Rectangle box = Rectangle.fromPointDistance(latitude, longitude, radiusMeters);\n    // create bounding box(es) for the distance range\n    // these are pre-encoded with LatLonPoint's encoding\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    // second set of longitude ranges to check (for cross-dateline case)\n    final byte minLon2[] = new byte[Integer.BYTES];\n\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n\n    // crosses dateline: split\n    if (box.crossesDateline()) {\n      // box1\n      NumericUtils.intToSortableBytes(Integer.MIN_VALUE, minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // box2\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon2, 0);\n    } else {\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // disable box2\n      NumericUtils.intToSortableBytes(Integer.MAX_VALUE, minLon2, 0);\n    }\n\n    // compute exact sort key: avoid any asin() computations\n    final double sortKey = GeoUtils.distanceQuerySortKey(radiusMeters);\n\n    final double axisLat = Rectangle.axisLat(latitude, radiusMeters);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(false);\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n\n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n        final IntersectVisitor visitor = getIntersectVisitor(result);\n\n        final Weight weight = this;\n        return new ScorerSupplier() {\n\n          long cost = -1;\n\n          @Override\n          public Scorer get(boolean randomAccess) throws IOException {\n            if (values.getDocCount() == reader.maxDoc()\n                && values.getDocCount() == values.size()\n                && cost() > reader.maxDoc() / 2) {\n              // If all docs have exactly one value and the cost is greater\n              // than half the leaf size then maybe we can make things faster\n              // by computing the set of documents that do NOT match the range\n              final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n              result.set(0, reader.maxDoc());\n              int[] cost = new int[]{reader.maxDoc()};\n              values.intersect(getInverseIntersectVisitor(result, cost));\n              final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            values.intersect(visitor);\n            return new ConstantScoreScorer(weight, score(), result.build().iterator());\n          }\n\n          @Override\n          public long cost() {\n            if (cost == -1) {\n              cost = values.estimatePointCount(visitor);\n            }\n            assert cost >= 0;\n            return cost;\n          }\n        };\n\n      }\n\n      /**\n       * Create a visitor that collects documents matching the range.\n       */\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            // bounding box check\n            if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              return;\n            }\n\n            int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n            int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n            if (distancePredicate.test(docLatitude, docLongitude)) {\n              adder.add(docID);\n            }\n          }\n\n          // algorithm: we create a bounding box (two bounding boxes if we cross the dateline).\n          // 1. check our bounding box(es) first. if the subtree is entirely outside of those, bail.\n          // 2. check if the subtree is disjoint. it may cross the bounding box but not intersect with circle\n          // 3. see if the subtree is fully contained. if the subtree is enormous along the x axis, wrapping half way around the world, etc: then this can't work, just go to step 4.\n          // 4. recurse naively (subtrees crossing over circle edge)\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            double latMin = decodeLatitude(minPackedValue, 0);\n            double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n            double latMax = decodeLatitude(maxPackedValue, 0);\n            double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            return GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            // bounding box check\n            if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              result.clear(docID);\n              cost[0]--;\n              return;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              result.clear(docID);\n              cost[0]--;\n              return;\n            }\n\n            int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n            int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n            if (!distancePredicate.test(docLatitude, docLongitude)) {\n              result.clear(docID);\n              cost[0]--;\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_INSIDE_QUERY;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_INSIDE_QUERY;\n            }\n\n            double latMin = decodeLatitude(minPackedValue, 0);\n            double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n            double latMax = decodeLatitude(maxPackedValue, 0);\n            double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            Relation relation = GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n            switch (relation) {\n              case CELL_INSIDE_QUERY:\n                // all points match, skip this subtree\n                return Relation.CELL_OUTSIDE_QUERY;\n              case CELL_OUTSIDE_QUERY:\n                // none of the points match, clear all documents\n                return Relation.CELL_INSIDE_QUERY;\n              default:\n                return relation;\n            }\n          }\n\n        };\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    Rectangle box = Rectangle.fromPointDistance(latitude, longitude, radiusMeters);\n    // create bounding box(es) for the distance range\n    // these are pre-encoded with LatLonPoint's encoding\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    // second set of longitude ranges to check (for cross-dateline case)\n    final byte minLon2[] = new byte[Integer.BYTES];\n\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n\n    // crosses dateline: split\n    if (box.crossesDateline()) {\n      // box1\n      NumericUtils.intToSortableBytes(Integer.MIN_VALUE, minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // box2\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon2, 0);\n    } else {\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // disable box2\n      NumericUtils.intToSortableBytes(Integer.MAX_VALUE, minLon2, 0);\n    }\n\n    // compute exact sort key: avoid any asin() computations\n    final double sortKey = GeoUtils.distanceQuerySortKey(radiusMeters);\n\n    final double axisLat = Rectangle.axisLat(latitude, radiusMeters);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(false);\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n        \n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n        final IntersectVisitor visitor =\n                         new IntersectVisitor() {\n\n                           DocIdSetBuilder.BulkAdder adder;\n\n                           @Override\n                           public void grow(int count) {\n                             adder = result.grow(count);\n                           }\n\n                           @Override\n                           public void visit(int docID) {\n                             adder.add(docID);\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             // bounding box check\n                             if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n                               // latitude out of bounding box range\n                               return;\n                             }\n\n                             if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                                  StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                                 && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n                               // longitude out of bounding box range\n                               return;\n                             }\n\n                             int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n                             int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n                             if (distancePredicate.test(docLatitude, docLongitude)) {\n                               adder.add(docID);\n                             }\n                           }\n                           \n                           // algorithm: we create a bounding box (two bounding boxes if we cross the dateline).\n                           // 1. check our bounding box(es) first. if the subtree is entirely outside of those, bail.\n                           // 2. check if the subtree is disjoint. it may cross the bounding box but not intersect with circle\n                           // 3. see if the subtree is fully contained. if the subtree is enormous along the x axis, wrapping half way around the world, etc: then this can't work, just go to step 4.\n                           // 4. recurse naively (subtrees crossing over circle edge)\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n                               // latitude out of bounding box range\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             }\n\n                             if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                                  StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                                 && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n                               // longitude out of bounding box range\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             }\n\n                             double latMin = decodeLatitude(minPackedValue, 0);\n                             double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n                             double latMax = decodeLatitude(maxPackedValue, 0);\n                             double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n                             return GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n                           }\n                         };\n        final Weight weight = this;\n        return new ScorerSupplier() {\n\n          long cost = -1;\n\n          @Override\n          public Scorer get(boolean randomAccess) throws IOException {\n            values.intersect(visitor);\n            return new ConstantScoreScorer(weight, score(), result.build().iterator());\n          }\n\n          @Override\n          public long cost() {\n            if (cost == -1) {\n              cost = values.estimatePointCount(visitor);\n            }\n            assert cost >= 0;\n            return cost;\n          }\n        };\n\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24f3e9c0fc20b3107388ec853a6fbad9f891b461","date":1502359844,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    Rectangle box = Rectangle.fromPointDistance(latitude, longitude, radiusMeters);\n    // create bounding box(es) for the distance range\n    // these are pre-encoded with LatLonPoint's encoding\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    // second set of longitude ranges to check (for cross-dateline case)\n    final byte minLon2[] = new byte[Integer.BYTES];\n\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n\n    // crosses dateline: split\n    if (box.crossesDateline()) {\n      // box1\n      NumericUtils.intToSortableBytes(Integer.MIN_VALUE, minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // box2\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon2, 0);\n    } else {\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // disable box2\n      NumericUtils.intToSortableBytes(Integer.MAX_VALUE, minLon2, 0);\n    }\n\n    // compute exact sort key: avoid any asin() computations\n    final double sortKey = GeoUtils.distanceQuerySortKey(radiusMeters);\n\n    final double axisLat = Rectangle.axisLat(latitude, radiusMeters);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n\n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n        final IntersectVisitor visitor = getIntersectVisitor(result);\n\n        final Weight weight = this;\n        return new ScorerSupplier() {\n\n          long cost = -1;\n\n          @Override\n          public Scorer get(long leadCost) throws IOException {\n            if (values.getDocCount() == reader.maxDoc()\n                && values.getDocCount() == values.size()\n                && cost() > reader.maxDoc() / 2) {\n              // If all docs have exactly one value and the cost is greater\n              // than half the leaf size then maybe we can make things faster\n              // by computing the set of documents that do NOT match the range\n              final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n              result.set(0, reader.maxDoc());\n              int[] cost = new int[]{reader.maxDoc()};\n              values.intersect(getInverseIntersectVisitor(result, cost));\n              final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            values.intersect(visitor);\n            return new ConstantScoreScorer(weight, score(), result.build().iterator());\n          }\n\n          @Override\n          public long cost() {\n            if (cost == -1) {\n              cost = values.estimatePointCount(visitor);\n            }\n            assert cost >= 0;\n            return cost;\n          }\n        };\n\n      }\n\n      /**\n       * Create a visitor that collects documents matching the range.\n       */\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            // bounding box check\n            if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              return;\n            }\n\n            int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n            int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n            if (distancePredicate.test(docLatitude, docLongitude)) {\n              adder.add(docID);\n            }\n          }\n\n          // algorithm: we create a bounding box (two bounding boxes if we cross the dateline).\n          // 1. check our bounding box(es) first. if the subtree is entirely outside of those, bail.\n          // 2. check if the subtree is disjoint. it may cross the bounding box but not intersect with circle\n          // 3. see if the subtree is fully contained. if the subtree is enormous along the x axis, wrapping half way around the world, etc: then this can't work, just go to step 4.\n          // 4. recurse naively (subtrees crossing over circle edge)\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            double latMin = decodeLatitude(minPackedValue, 0);\n            double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n            double latMax = decodeLatitude(maxPackedValue, 0);\n            double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            return GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            // bounding box check\n            if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              result.clear(docID);\n              cost[0]--;\n              return;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              result.clear(docID);\n              cost[0]--;\n              return;\n            }\n\n            int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n            int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n            if (!distancePredicate.test(docLatitude, docLongitude)) {\n              result.clear(docID);\n              cost[0]--;\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_INSIDE_QUERY;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_INSIDE_QUERY;\n            }\n\n            double latMin = decodeLatitude(minPackedValue, 0);\n            double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n            double latMax = decodeLatitude(maxPackedValue, 0);\n            double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            Relation relation = GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n            switch (relation) {\n              case CELL_INSIDE_QUERY:\n                // all points match, skip this subtree\n                return Relation.CELL_OUTSIDE_QUERY;\n              case CELL_OUTSIDE_QUERY:\n                // none of the points match, clear all documents\n                return Relation.CELL_INSIDE_QUERY;\n              default:\n                return relation;\n            }\n          }\n\n        };\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    Rectangle box = Rectangle.fromPointDistance(latitude, longitude, radiusMeters);\n    // create bounding box(es) for the distance range\n    // these are pre-encoded with LatLonPoint's encoding\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    // second set of longitude ranges to check (for cross-dateline case)\n    final byte minLon2[] = new byte[Integer.BYTES];\n\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n\n    // crosses dateline: split\n    if (box.crossesDateline()) {\n      // box1\n      NumericUtils.intToSortableBytes(Integer.MIN_VALUE, minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // box2\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon2, 0);\n    } else {\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // disable box2\n      NumericUtils.intToSortableBytes(Integer.MAX_VALUE, minLon2, 0);\n    }\n\n    // compute exact sort key: avoid any asin() computations\n    final double sortKey = GeoUtils.distanceQuerySortKey(radiusMeters);\n\n    final double axisLat = Rectangle.axisLat(latitude, radiusMeters);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(false);\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n\n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n        final IntersectVisitor visitor = getIntersectVisitor(result);\n\n        final Weight weight = this;\n        return new ScorerSupplier() {\n\n          long cost = -1;\n\n          @Override\n          public Scorer get(boolean randomAccess) throws IOException {\n            if (values.getDocCount() == reader.maxDoc()\n                && values.getDocCount() == values.size()\n                && cost() > reader.maxDoc() / 2) {\n              // If all docs have exactly one value and the cost is greater\n              // than half the leaf size then maybe we can make things faster\n              // by computing the set of documents that do NOT match the range\n              final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n              result.set(0, reader.maxDoc());\n              int[] cost = new int[]{reader.maxDoc()};\n              values.intersect(getInverseIntersectVisitor(result, cost));\n              final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            values.intersect(visitor);\n            return new ConstantScoreScorer(weight, score(), result.build().iterator());\n          }\n\n          @Override\n          public long cost() {\n            if (cost == -1) {\n              cost = values.estimatePointCount(visitor);\n            }\n            assert cost >= 0;\n            return cost;\n          }\n        };\n\n      }\n\n      /**\n       * Create a visitor that collects documents matching the range.\n       */\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            // bounding box check\n            if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              return;\n            }\n\n            int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n            int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n            if (distancePredicate.test(docLatitude, docLongitude)) {\n              adder.add(docID);\n            }\n          }\n\n          // algorithm: we create a bounding box (two bounding boxes if we cross the dateline).\n          // 1. check our bounding box(es) first. if the subtree is entirely outside of those, bail.\n          // 2. check if the subtree is disjoint. it may cross the bounding box but not intersect with circle\n          // 3. see if the subtree is fully contained. if the subtree is enormous along the x axis, wrapping half way around the world, etc: then this can't work, just go to step 4.\n          // 4. recurse naively (subtrees crossing over circle edge)\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            double latMin = decodeLatitude(minPackedValue, 0);\n            double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n            double latMax = decodeLatitude(maxPackedValue, 0);\n            double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            return GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            // bounding box check\n            if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              result.clear(docID);\n              cost[0]--;\n              return;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              result.clear(docID);\n              cost[0]--;\n              return;\n            }\n\n            int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n            int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n            if (!distancePredicate.test(docLatitude, docLongitude)) {\n              result.clear(docID);\n              cost[0]--;\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_INSIDE_QUERY;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_INSIDE_QUERY;\n            }\n\n            double latMin = decodeLatitude(minPackedValue, 0);\n            double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n            double latMax = decodeLatitude(maxPackedValue, 0);\n            double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            Relation relation = GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n            switch (relation) {\n              case CELL_INSIDE_QUERY:\n                // all points match, skip this subtree\n                return Relation.CELL_OUTSIDE_QUERY;\n              case CELL_OUTSIDE_QUERY:\n                // none of the points match, clear all documents\n                return Relation.CELL_INSIDE_QUERY;\n              default:\n                return relation;\n            }\n          }\n\n        };\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d6ba405c7c8192661bdf7ce782181d12f3162a6","date":1502361392,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    Rectangle box = Rectangle.fromPointDistance(latitude, longitude, radiusMeters);\n    // create bounding box(es) for the distance range\n    // these are pre-encoded with LatLonPoint's encoding\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    // second set of longitude ranges to check (for cross-dateline case)\n    final byte minLon2[] = new byte[Integer.BYTES];\n\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n\n    // crosses dateline: split\n    if (box.crossesDateline()) {\n      // box1\n      NumericUtils.intToSortableBytes(Integer.MIN_VALUE, minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // box2\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon2, 0);\n    } else {\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // disable box2\n      NumericUtils.intToSortableBytes(Integer.MAX_VALUE, minLon2, 0);\n    }\n\n    // compute exact sort key: avoid any asin() computations\n    final double sortKey = GeoUtils.distanceQuerySortKey(radiusMeters);\n\n    final double axisLat = Rectangle.axisLat(latitude, radiusMeters);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n\n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n        final IntersectVisitor visitor = getIntersectVisitor(result);\n\n        final Weight weight = this;\n        return new ScorerSupplier() {\n\n          long cost = -1;\n\n          @Override\n          public Scorer get(long leadCost) throws IOException {\n            if (values.getDocCount() == reader.maxDoc()\n                && values.getDocCount() == values.size()\n                && cost() > reader.maxDoc() / 2) {\n              // If all docs have exactly one value and the cost is greater\n              // than half the leaf size then maybe we can make things faster\n              // by computing the set of documents that do NOT match the range\n              final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n              result.set(0, reader.maxDoc());\n              int[] cost = new int[]{reader.maxDoc()};\n              values.intersect(getInverseIntersectVisitor(result, cost));\n              final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            values.intersect(visitor);\n            return new ConstantScoreScorer(weight, score(), result.build().iterator());\n          }\n\n          @Override\n          public long cost() {\n            if (cost == -1) {\n              cost = values.estimatePointCount(visitor);\n            }\n            assert cost >= 0;\n            return cost;\n          }\n        };\n\n      }\n\n      /**\n       * Create a visitor that collects documents matching the range.\n       */\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            // bounding box check\n            if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              return;\n            }\n\n            int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n            int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n            if (distancePredicate.test(docLatitude, docLongitude)) {\n              adder.add(docID);\n            }\n          }\n\n          // algorithm: we create a bounding box (two bounding boxes if we cross the dateline).\n          // 1. check our bounding box(es) first. if the subtree is entirely outside of those, bail.\n          // 2. check if the subtree is disjoint. it may cross the bounding box but not intersect with circle\n          // 3. see if the subtree is fully contained. if the subtree is enormous along the x axis, wrapping half way around the world, etc: then this can't work, just go to step 4.\n          // 4. recurse naively (subtrees crossing over circle edge)\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            double latMin = decodeLatitude(minPackedValue, 0);\n            double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n            double latMax = decodeLatitude(maxPackedValue, 0);\n            double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            return GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            // bounding box check\n            if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              result.clear(docID);\n              cost[0]--;\n              return;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              result.clear(docID);\n              cost[0]--;\n              return;\n            }\n\n            int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n            int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n            if (!distancePredicate.test(docLatitude, docLongitude)) {\n              result.clear(docID);\n              cost[0]--;\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_INSIDE_QUERY;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_INSIDE_QUERY;\n            }\n\n            double latMin = decodeLatitude(minPackedValue, 0);\n            double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n            double latMax = decodeLatitude(maxPackedValue, 0);\n            double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            Relation relation = GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n            switch (relation) {\n              case CELL_INSIDE_QUERY:\n                // all points match, skip this subtree\n                return Relation.CELL_OUTSIDE_QUERY;\n              case CELL_OUTSIDE_QUERY:\n                // none of the points match, clear all documents\n                return Relation.CELL_INSIDE_QUERY;\n              default:\n                return relation;\n            }\n          }\n\n        };\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    Rectangle box = Rectangle.fromPointDistance(latitude, longitude, radiusMeters);\n    // create bounding box(es) for the distance range\n    // these are pre-encoded with LatLonPoint's encoding\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    // second set of longitude ranges to check (for cross-dateline case)\n    final byte minLon2[] = new byte[Integer.BYTES];\n\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n\n    // crosses dateline: split\n    if (box.crossesDateline()) {\n      // box1\n      NumericUtils.intToSortableBytes(Integer.MIN_VALUE, minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // box2\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon2, 0);\n    } else {\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // disable box2\n      NumericUtils.intToSortableBytes(Integer.MAX_VALUE, minLon2, 0);\n    }\n\n    // compute exact sort key: avoid any asin() computations\n    final double sortKey = GeoUtils.distanceQuerySortKey(radiusMeters);\n\n    final double axisLat = Rectangle.axisLat(latitude, radiusMeters);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(false);\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n\n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n        final IntersectVisitor visitor = getIntersectVisitor(result);\n\n        final Weight weight = this;\n        return new ScorerSupplier() {\n\n          long cost = -1;\n\n          @Override\n          public Scorer get(boolean randomAccess) throws IOException {\n            if (values.getDocCount() == reader.maxDoc()\n                && values.getDocCount() == values.size()\n                && cost() > reader.maxDoc() / 2) {\n              // If all docs have exactly one value and the cost is greater\n              // than half the leaf size then maybe we can make things faster\n              // by computing the set of documents that do NOT match the range\n              final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n              result.set(0, reader.maxDoc());\n              int[] cost = new int[]{reader.maxDoc()};\n              values.intersect(getInverseIntersectVisitor(result, cost));\n              final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            values.intersect(visitor);\n            return new ConstantScoreScorer(weight, score(), result.build().iterator());\n          }\n\n          @Override\n          public long cost() {\n            if (cost == -1) {\n              cost = values.estimatePointCount(visitor);\n            }\n            assert cost >= 0;\n            return cost;\n          }\n        };\n\n      }\n\n      /**\n       * Create a visitor that collects documents matching the range.\n       */\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            // bounding box check\n            if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              return;\n            }\n\n            int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n            int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n            if (distancePredicate.test(docLatitude, docLongitude)) {\n              adder.add(docID);\n            }\n          }\n\n          // algorithm: we create a bounding box (two bounding boxes if we cross the dateline).\n          // 1. check our bounding box(es) first. if the subtree is entirely outside of those, bail.\n          // 2. check if the subtree is disjoint. it may cross the bounding box but not intersect with circle\n          // 3. see if the subtree is fully contained. if the subtree is enormous along the x axis, wrapping half way around the world, etc: then this can't work, just go to step 4.\n          // 4. recurse naively (subtrees crossing over circle edge)\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            double latMin = decodeLatitude(minPackedValue, 0);\n            double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n            double latMax = decodeLatitude(maxPackedValue, 0);\n            double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            return GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            // bounding box check\n            if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              result.clear(docID);\n              cost[0]--;\n              return;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              result.clear(docID);\n              cost[0]--;\n              return;\n            }\n\n            int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n            int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n            if (!distancePredicate.test(docLatitude, docLongitude)) {\n              result.clear(docID);\n              cost[0]--;\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_INSIDE_QUERY;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_INSIDE_QUERY;\n            }\n\n            double latMin = decodeLatitude(minPackedValue, 0);\n            double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n            double latMax = decodeLatitude(maxPackedValue, 0);\n            double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            Relation relation = GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n            switch (relation) {\n              case CELL_INSIDE_QUERY:\n                // all points match, skip this subtree\n                return Relation.CELL_OUTSIDE_QUERY;\n              case CELL_OUTSIDE_QUERY:\n                // none of the points match, clear all documents\n                return Relation.CELL_INSIDE_QUERY;\n              default:\n                return relation;\n            }\n          }\n\n        };\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58884af1f68e9d61c217c753fbd6266d86a63b14","date":1502363401,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    Rectangle box = Rectangle.fromPointDistance(latitude, longitude, radiusMeters);\n    // create bounding box(es) for the distance range\n    // these are pre-encoded with LatLonPoint's encoding\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    // second set of longitude ranges to check (for cross-dateline case)\n    final byte minLon2[] = new byte[Integer.BYTES];\n\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n\n    // crosses dateline: split\n    if (box.crossesDateline()) {\n      // box1\n      NumericUtils.intToSortableBytes(Integer.MIN_VALUE, minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // box2\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon2, 0);\n    } else {\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // disable box2\n      NumericUtils.intToSortableBytes(Integer.MAX_VALUE, minLon2, 0);\n    }\n\n    // compute exact sort key: avoid any asin() computations\n    final double sortKey = GeoUtils.distanceQuerySortKey(radiusMeters);\n\n    final double axisLat = Rectangle.axisLat(latitude, radiusMeters);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n\n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n        final IntersectVisitor visitor = getIntersectVisitor(result);\n\n        final Weight weight = this;\n        return new ScorerSupplier() {\n\n          long cost = -1;\n\n          @Override\n          public Scorer get(long leadCost) throws IOException {\n            if (values.getDocCount() == reader.maxDoc()\n                && values.getDocCount() == values.size()\n                && cost() > reader.maxDoc() / 2) {\n              // If all docs have exactly one value and the cost is greater\n              // than half the leaf size then maybe we can make things faster\n              // by computing the set of documents that do NOT match the range\n              final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n              result.set(0, reader.maxDoc());\n              int[] cost = new int[]{reader.maxDoc()};\n              values.intersect(getInverseIntersectVisitor(result, cost));\n              final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            values.intersect(visitor);\n            return new ConstantScoreScorer(weight, score(), result.build().iterator());\n          }\n\n          @Override\n          public long cost() {\n            if (cost == -1) {\n              cost = values.estimatePointCount(visitor);\n            }\n            assert cost >= 0;\n            return cost;\n          }\n        };\n\n      }\n\n      /**\n       * Create a visitor that collects documents matching the range.\n       */\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            // bounding box check\n            if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              return;\n            }\n\n            int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n            int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n            if (distancePredicate.test(docLatitude, docLongitude)) {\n              adder.add(docID);\n            }\n          }\n\n          // algorithm: we create a bounding box (two bounding boxes if we cross the dateline).\n          // 1. check our bounding box(es) first. if the subtree is entirely outside of those, bail.\n          // 2. check if the subtree is disjoint. it may cross the bounding box but not intersect with circle\n          // 3. see if the subtree is fully contained. if the subtree is enormous along the x axis, wrapping half way around the world, etc: then this can't work, just go to step 4.\n          // 4. recurse naively (subtrees crossing over circle edge)\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            double latMin = decodeLatitude(minPackedValue, 0);\n            double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n            double latMax = decodeLatitude(maxPackedValue, 0);\n            double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            return GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            // bounding box check\n            if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              result.clear(docID);\n              cost[0]--;\n              return;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              result.clear(docID);\n              cost[0]--;\n              return;\n            }\n\n            int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n            int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n            if (!distancePredicate.test(docLatitude, docLongitude)) {\n              result.clear(docID);\n              cost[0]--;\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_INSIDE_QUERY;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_INSIDE_QUERY;\n            }\n\n            double latMin = decodeLatitude(minPackedValue, 0);\n            double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n            double latMax = decodeLatitude(maxPackedValue, 0);\n            double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            Relation relation = GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n            switch (relation) {\n              case CELL_INSIDE_QUERY:\n                // all points match, skip this subtree\n                return Relation.CELL_OUTSIDE_QUERY;\n              case CELL_OUTSIDE_QUERY:\n                // none of the points match, clear all documents\n                return Relation.CELL_INSIDE_QUERY;\n              default:\n                return relation;\n            }\n          }\n\n        };\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    Rectangle box = Rectangle.fromPointDistance(latitude, longitude, radiusMeters);\n    // create bounding box(es) for the distance range\n    // these are pre-encoded with LatLonPoint's encoding\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    // second set of longitude ranges to check (for cross-dateline case)\n    final byte minLon2[] = new byte[Integer.BYTES];\n\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n\n    // crosses dateline: split\n    if (box.crossesDateline()) {\n      // box1\n      NumericUtils.intToSortableBytes(Integer.MIN_VALUE, minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // box2\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon2, 0);\n    } else {\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // disable box2\n      NumericUtils.intToSortableBytes(Integer.MAX_VALUE, minLon2, 0);\n    }\n\n    // compute exact sort key: avoid any asin() computations\n    final double sortKey = GeoUtils.distanceQuerySortKey(radiusMeters);\n\n    final double axisLat = Rectangle.axisLat(latitude, radiusMeters);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(false);\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n        \n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n        final IntersectVisitor visitor =\n                         new IntersectVisitor() {\n\n                           DocIdSetBuilder.BulkAdder adder;\n\n                           @Override\n                           public void grow(int count) {\n                             adder = result.grow(count);\n                           }\n\n                           @Override\n                           public void visit(int docID) {\n                             adder.add(docID);\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             // bounding box check\n                             if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n                               // latitude out of bounding box range\n                               return;\n                             }\n\n                             if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                                  StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                                 && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n                               // longitude out of bounding box range\n                               return;\n                             }\n\n                             int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n                             int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n                             if (distancePredicate.test(docLatitude, docLongitude)) {\n                               adder.add(docID);\n                             }\n                           }\n                           \n                           // algorithm: we create a bounding box (two bounding boxes if we cross the dateline).\n                           // 1. check our bounding box(es) first. if the subtree is entirely outside of those, bail.\n                           // 2. check if the subtree is disjoint. it may cross the bounding box but not intersect with circle\n                           // 3. see if the subtree is fully contained. if the subtree is enormous along the x axis, wrapping half way around the world, etc: then this can't work, just go to step 4.\n                           // 4. recurse naively (subtrees crossing over circle edge)\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n                               // latitude out of bounding box range\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             }\n\n                             if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                                  StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                                 && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n                               // longitude out of bounding box range\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             }\n\n                             double latMin = decodeLatitude(minPackedValue, 0);\n                             double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n                             double latMax = decodeLatitude(maxPackedValue, 0);\n                             double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n                             return GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n                           }\n                         };\n        final Weight weight = this;\n        return new ScorerSupplier() {\n\n          long cost = -1;\n\n          @Override\n          public Scorer get(boolean randomAccess) throws IOException {\n            values.intersect(visitor);\n            return new ConstantScoreScorer(weight, score(), result.build().iterator());\n          }\n\n          @Override\n          public long cost() {\n            if (cost == -1) {\n              cost = values.estimatePointCount(visitor);\n            }\n            assert cost >= 0;\n            return cost;\n          }\n        };\n\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","date":1502692251,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    Rectangle box = Rectangle.fromPointDistance(latitude, longitude, radiusMeters);\n    // create bounding box(es) for the distance range\n    // these are pre-encoded with LatLonPoint's encoding\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    // second set of longitude ranges to check (for cross-dateline case)\n    final byte minLon2[] = new byte[Integer.BYTES];\n\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n\n    // crosses dateline: split\n    if (box.crossesDateline()) {\n      // box1\n      NumericUtils.intToSortableBytes(Integer.MIN_VALUE, minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // box2\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon2, 0);\n    } else {\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // disable box2\n      NumericUtils.intToSortableBytes(Integer.MAX_VALUE, minLon2, 0);\n    }\n\n    // compute exact sort key: avoid any asin() computations\n    final double sortKey = GeoUtils.distanceQuerySortKey(radiusMeters);\n\n    final double axisLat = Rectangle.axisLat(latitude, radiusMeters);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n\n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n        final IntersectVisitor visitor = getIntersectVisitor(result);\n\n        final Weight weight = this;\n        return new ScorerSupplier() {\n\n          long cost = -1;\n\n          @Override\n          public Scorer get(long leadCost) throws IOException {\n            if (values.getDocCount() == reader.maxDoc()\n                && values.getDocCount() == values.size()\n                && cost() > reader.maxDoc() / 2) {\n              // If all docs have exactly one value and the cost is greater\n              // than half the leaf size then maybe we can make things faster\n              // by computing the set of documents that do NOT match the range\n              final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n              result.set(0, reader.maxDoc());\n              int[] cost = new int[]{reader.maxDoc()};\n              values.intersect(getInverseIntersectVisitor(result, cost));\n              final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            values.intersect(visitor);\n            return new ConstantScoreScorer(weight, score(), result.build().iterator());\n          }\n\n          @Override\n          public long cost() {\n            if (cost == -1) {\n              cost = values.estimatePointCount(visitor);\n            }\n            assert cost >= 0;\n            return cost;\n          }\n        };\n\n      }\n\n      /**\n       * Create a visitor that collects documents matching the range.\n       */\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            // bounding box check\n            if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              return;\n            }\n\n            int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n            int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n            if (distancePredicate.test(docLatitude, docLongitude)) {\n              adder.add(docID);\n            }\n          }\n\n          // algorithm: we create a bounding box (two bounding boxes if we cross the dateline).\n          // 1. check our bounding box(es) first. if the subtree is entirely outside of those, bail.\n          // 2. check if the subtree is disjoint. it may cross the bounding box but not intersect with circle\n          // 3. see if the subtree is fully contained. if the subtree is enormous along the x axis, wrapping half way around the world, etc: then this can't work, just go to step 4.\n          // 4. recurse naively (subtrees crossing over circle edge)\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            double latMin = decodeLatitude(minPackedValue, 0);\n            double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n            double latMax = decodeLatitude(maxPackedValue, 0);\n            double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            return GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            // bounding box check\n            if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              result.clear(docID);\n              cost[0]--;\n              return;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              result.clear(docID);\n              cost[0]--;\n              return;\n            }\n\n            int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n            int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n            if (!distancePredicate.test(docLatitude, docLongitude)) {\n              result.clear(docID);\n              cost[0]--;\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_INSIDE_QUERY;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_INSIDE_QUERY;\n            }\n\n            double latMin = decodeLatitude(minPackedValue, 0);\n            double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n            double latMax = decodeLatitude(maxPackedValue, 0);\n            double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            Relation relation = GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n            switch (relation) {\n              case CELL_INSIDE_QUERY:\n                // all points match, skip this subtree\n                return Relation.CELL_OUTSIDE_QUERY;\n              case CELL_OUTSIDE_QUERY:\n                // none of the points match, clear all documents\n                return Relation.CELL_INSIDE_QUERY;\n              default:\n                return relation;\n            }\n          }\n\n        };\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    Rectangle box = Rectangle.fromPointDistance(latitude, longitude, radiusMeters);\n    // create bounding box(es) for the distance range\n    // these are pre-encoded with LatLonPoint's encoding\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    // second set of longitude ranges to check (for cross-dateline case)\n    final byte minLon2[] = new byte[Integer.BYTES];\n\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n\n    // crosses dateline: split\n    if (box.crossesDateline()) {\n      // box1\n      NumericUtils.intToSortableBytes(Integer.MIN_VALUE, minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // box2\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon2, 0);\n    } else {\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // disable box2\n      NumericUtils.intToSortableBytes(Integer.MAX_VALUE, minLon2, 0);\n    }\n\n    // compute exact sort key: avoid any asin() computations\n    final double sortKey = GeoUtils.distanceQuerySortKey(radiusMeters);\n\n    final double axisLat = Rectangle.axisLat(latitude, radiusMeters);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(false);\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n\n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n        final IntersectVisitor visitor = getIntersectVisitor(result);\n\n        final Weight weight = this;\n        return new ScorerSupplier() {\n\n          long cost = -1;\n\n          @Override\n          public Scorer get(boolean randomAccess) throws IOException {\n            if (values.getDocCount() == reader.maxDoc()\n                && values.getDocCount() == values.size()\n                && cost() > reader.maxDoc() / 2) {\n              // If all docs have exactly one value and the cost is greater\n              // than half the leaf size then maybe we can make things faster\n              // by computing the set of documents that do NOT match the range\n              final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n              result.set(0, reader.maxDoc());\n              int[] cost = new int[]{reader.maxDoc()};\n              values.intersect(getInverseIntersectVisitor(result, cost));\n              final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            values.intersect(visitor);\n            return new ConstantScoreScorer(weight, score(), result.build().iterator());\n          }\n\n          @Override\n          public long cost() {\n            if (cost == -1) {\n              cost = values.estimatePointCount(visitor);\n            }\n            assert cost >= 0;\n            return cost;\n          }\n        };\n\n      }\n\n      /**\n       * Create a visitor that collects documents matching the range.\n       */\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            // bounding box check\n            if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              return;\n            }\n\n            int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n            int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n            if (distancePredicate.test(docLatitude, docLongitude)) {\n              adder.add(docID);\n            }\n          }\n\n          // algorithm: we create a bounding box (two bounding boxes if we cross the dateline).\n          // 1. check our bounding box(es) first. if the subtree is entirely outside of those, bail.\n          // 2. check if the subtree is disjoint. it may cross the bounding box but not intersect with circle\n          // 3. see if the subtree is fully contained. if the subtree is enormous along the x axis, wrapping half way around the world, etc: then this can't work, just go to step 4.\n          // 4. recurse naively (subtrees crossing over circle edge)\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            double latMin = decodeLatitude(minPackedValue, 0);\n            double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n            double latMax = decodeLatitude(maxPackedValue, 0);\n            double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            return GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            // bounding box check\n            if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              result.clear(docID);\n              cost[0]--;\n              return;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              result.clear(docID);\n              cost[0]--;\n              return;\n            }\n\n            int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n            int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n            if (!distancePredicate.test(docLatitude, docLongitude)) {\n              result.clear(docID);\n              cost[0]--;\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_INSIDE_QUERY;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_INSIDE_QUERY;\n            }\n\n            double latMin = decodeLatitude(minPackedValue, 0);\n            double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n            double latMax = decodeLatitude(maxPackedValue, 0);\n            double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            Relation relation = GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n            switch (relation) {\n              case CELL_INSIDE_QUERY:\n                // all points match, skip this subtree\n                return Relation.CELL_OUTSIDE_QUERY;\n              case CELL_OUTSIDE_QUERY:\n                // none of the points match, clear all documents\n                return Relation.CELL_INSIDE_QUERY;\n              default:\n                return relation;\n            }\n          }\n\n        };\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"706a7a3396c030cc66dda92a0492eb492131c4c0","date":1509705614,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    Rectangle box = Rectangle.fromPointDistance(latitude, longitude, radiusMeters);\n    // create bounding box(es) for the distance range\n    // these are pre-encoded with LatLonPoint's encoding\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    // second set of longitude ranges to check (for cross-dateline case)\n    final byte minLon2[] = new byte[Integer.BYTES];\n\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n\n    // crosses dateline: split\n    if (box.crossesDateline()) {\n      // box1\n      NumericUtils.intToSortableBytes(Integer.MIN_VALUE, minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // box2\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon2, 0);\n    } else {\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // disable box2\n      NumericUtils.intToSortableBytes(Integer.MAX_VALUE, minLon2, 0);\n    }\n\n    // compute exact sort key: avoid any asin() computations\n    final double sortKey = GeoUtils.distanceQuerySortKey(radiusMeters);\n\n    final double axisLat = Rectangle.axisLat(latitude, radiusMeters);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n        return context.reader().getCoreCacheHelper();\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n\n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n        final IntersectVisitor visitor = getIntersectVisitor(result);\n\n        final Weight weight = this;\n        return new ScorerSupplier() {\n\n          long cost = -1;\n\n          @Override\n          public Scorer get(long leadCost) throws IOException {\n            if (values.getDocCount() == reader.maxDoc()\n                && values.getDocCount() == values.size()\n                && cost() > reader.maxDoc() / 2) {\n              // If all docs have exactly one value and the cost is greater\n              // than half the leaf size then maybe we can make things faster\n              // by computing the set of documents that do NOT match the range\n              final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n              result.set(0, reader.maxDoc());\n              int[] cost = new int[]{reader.maxDoc()};\n              values.intersect(getInverseIntersectVisitor(result, cost));\n              final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            values.intersect(visitor);\n            return new ConstantScoreScorer(weight, score(), result.build().iterator());\n          }\n\n          @Override\n          public long cost() {\n            if (cost == -1) {\n              cost = values.estimatePointCount(visitor);\n            }\n            assert cost >= 0;\n            return cost;\n          }\n        };\n\n      }\n\n      /**\n       * Create a visitor that collects documents matching the range.\n       */\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            // bounding box check\n            if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              return;\n            }\n\n            int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n            int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n            if (distancePredicate.test(docLatitude, docLongitude)) {\n              adder.add(docID);\n            }\n          }\n\n          // algorithm: we create a bounding box (two bounding boxes if we cross the dateline).\n          // 1. check our bounding box(es) first. if the subtree is entirely outside of those, bail.\n          // 2. check if the subtree is disjoint. it may cross the bounding box but not intersect with circle\n          // 3. see if the subtree is fully contained. if the subtree is enormous along the x axis, wrapping half way around the world, etc: then this can't work, just go to step 4.\n          // 4. recurse naively (subtrees crossing over circle edge)\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            double latMin = decodeLatitude(minPackedValue, 0);\n            double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n            double latMax = decodeLatitude(maxPackedValue, 0);\n            double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            return GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            // bounding box check\n            if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              result.clear(docID);\n              cost[0]--;\n              return;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              result.clear(docID);\n              cost[0]--;\n              return;\n            }\n\n            int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n            int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n            if (!distancePredicate.test(docLatitude, docLongitude)) {\n              result.clear(docID);\n              cost[0]--;\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_INSIDE_QUERY;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_INSIDE_QUERY;\n            }\n\n            double latMin = decodeLatitude(minPackedValue, 0);\n            double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n            double latMax = decodeLatitude(maxPackedValue, 0);\n            double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            Relation relation = GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n            switch (relation) {\n              case CELL_INSIDE_QUERY:\n                // all points match, skip this subtree\n                return Relation.CELL_OUTSIDE_QUERY;\n              case CELL_OUTSIDE_QUERY:\n                // none of the points match, clear all documents\n                return Relation.CELL_INSIDE_QUERY;\n              default:\n                return relation;\n            }\n          }\n\n        };\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    Rectangle box = Rectangle.fromPointDistance(latitude, longitude, radiusMeters);\n    // create bounding box(es) for the distance range\n    // these are pre-encoded with LatLonPoint's encoding\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    // second set of longitude ranges to check (for cross-dateline case)\n    final byte minLon2[] = new byte[Integer.BYTES];\n\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n\n    // crosses dateline: split\n    if (box.crossesDateline()) {\n      // box1\n      NumericUtils.intToSortableBytes(Integer.MIN_VALUE, minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // box2\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon2, 0);\n    } else {\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // disable box2\n      NumericUtils.intToSortableBytes(Integer.MAX_VALUE, minLon2, 0);\n    }\n\n    // compute exact sort key: avoid any asin() computations\n    final double sortKey = GeoUtils.distanceQuerySortKey(radiusMeters);\n\n    final double axisLat = Rectangle.axisLat(latitude, radiusMeters);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n\n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n        final IntersectVisitor visitor = getIntersectVisitor(result);\n\n        final Weight weight = this;\n        return new ScorerSupplier() {\n\n          long cost = -1;\n\n          @Override\n          public Scorer get(long leadCost) throws IOException {\n            if (values.getDocCount() == reader.maxDoc()\n                && values.getDocCount() == values.size()\n                && cost() > reader.maxDoc() / 2) {\n              // If all docs have exactly one value and the cost is greater\n              // than half the leaf size then maybe we can make things faster\n              // by computing the set of documents that do NOT match the range\n              final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n              result.set(0, reader.maxDoc());\n              int[] cost = new int[]{reader.maxDoc()};\n              values.intersect(getInverseIntersectVisitor(result, cost));\n              final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            values.intersect(visitor);\n            return new ConstantScoreScorer(weight, score(), result.build().iterator());\n          }\n\n          @Override\n          public long cost() {\n            if (cost == -1) {\n              cost = values.estimatePointCount(visitor);\n            }\n            assert cost >= 0;\n            return cost;\n          }\n        };\n\n      }\n\n      /**\n       * Create a visitor that collects documents matching the range.\n       */\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            // bounding box check\n            if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              return;\n            }\n\n            int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n            int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n            if (distancePredicate.test(docLatitude, docLongitude)) {\n              adder.add(docID);\n            }\n          }\n\n          // algorithm: we create a bounding box (two bounding boxes if we cross the dateline).\n          // 1. check our bounding box(es) first. if the subtree is entirely outside of those, bail.\n          // 2. check if the subtree is disjoint. it may cross the bounding box but not intersect with circle\n          // 3. see if the subtree is fully contained. if the subtree is enormous along the x axis, wrapping half way around the world, etc: then this can't work, just go to step 4.\n          // 4. recurse naively (subtrees crossing over circle edge)\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            double latMin = decodeLatitude(minPackedValue, 0);\n            double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n            double latMax = decodeLatitude(maxPackedValue, 0);\n            double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            return GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            // bounding box check\n            if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              result.clear(docID);\n              cost[0]--;\n              return;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              result.clear(docID);\n              cost[0]--;\n              return;\n            }\n\n            int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n            int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n            if (!distancePredicate.test(docLatitude, docLongitude)) {\n              result.clear(docID);\n              cost[0]--;\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_INSIDE_QUERY;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_INSIDE_QUERY;\n            }\n\n            double latMin = decodeLatitude(minPackedValue, 0);\n            double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n            double latMax = decodeLatitude(maxPackedValue, 0);\n            double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            Relation relation = GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n            switch (relation) {\n              case CELL_INSIDE_QUERY:\n                // all points match, skip this subtree\n                return Relation.CELL_OUTSIDE_QUERY;\n              case CELL_OUTSIDE_QUERY:\n                // none of the points match, clear all documents\n                return Relation.CELL_INSIDE_QUERY;\n              default:\n                return relation;\n            }\n          }\n\n        };\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    Rectangle box = Rectangle.fromPointDistance(latitude, longitude, radiusMeters);\n    // create bounding box(es) for the distance range\n    // these are pre-encoded with LatLonPoint's encoding\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    // second set of longitude ranges to check (for cross-dateline case)\n    final byte minLon2[] = new byte[Integer.BYTES];\n\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n\n    // crosses dateline: split\n    if (box.crossesDateline()) {\n      // box1\n      NumericUtils.intToSortableBytes(Integer.MIN_VALUE, minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // box2\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon2, 0);\n    } else {\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // disable box2\n      NumericUtils.intToSortableBytes(Integer.MAX_VALUE, minLon2, 0);\n    }\n\n    // compute exact sort key: avoid any asin() computations\n    final double sortKey = GeoUtils.distanceQuerySortKey(radiusMeters);\n\n    final double axisLat = Rectangle.axisLat(latitude, radiusMeters);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n        return context.reader().getCoreCacheHelper();\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n\n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n        final IntersectVisitor visitor = getIntersectVisitor(result);\n\n        final Weight weight = this;\n        return new ScorerSupplier() {\n\n          long cost = -1;\n\n          @Override\n          public Scorer get(long leadCost) throws IOException {\n            if (values.getDocCount() == reader.maxDoc()\n                && values.getDocCount() == values.size()\n                && cost() > reader.maxDoc() / 2) {\n              // If all docs have exactly one value and the cost is greater\n              // than half the leaf size then maybe we can make things faster\n              // by computing the set of documents that do NOT match the range\n              final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n              result.set(0, reader.maxDoc());\n              int[] cost = new int[]{reader.maxDoc()};\n              values.intersect(getInverseIntersectVisitor(result, cost));\n              final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            values.intersect(visitor);\n            return new ConstantScoreScorer(weight, score(), result.build().iterator());\n          }\n\n          @Override\n          public long cost() {\n            if (cost == -1) {\n              cost = values.estimatePointCount(visitor);\n            }\n            assert cost >= 0;\n            return cost;\n          }\n        };\n\n      }\n\n      /**\n       * Create a visitor that collects documents matching the range.\n       */\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            // bounding box check\n            if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              return;\n            }\n\n            int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n            int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n            if (distancePredicate.test(docLatitude, docLongitude)) {\n              adder.add(docID);\n            }\n          }\n\n          // algorithm: we create a bounding box (two bounding boxes if we cross the dateline).\n          // 1. check our bounding box(es) first. if the subtree is entirely outside of those, bail.\n          // 2. check if the subtree is disjoint. it may cross the bounding box but not intersect with circle\n          // 3. see if the subtree is fully contained. if the subtree is enormous along the x axis, wrapping half way around the world, etc: then this can't work, just go to step 4.\n          // 4. recurse naively (subtrees crossing over circle edge)\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            double latMin = decodeLatitude(minPackedValue, 0);\n            double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n            double latMax = decodeLatitude(maxPackedValue, 0);\n            double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            return GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            // bounding box check\n            if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              result.clear(docID);\n              cost[0]--;\n              return;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              result.clear(docID);\n              cost[0]--;\n              return;\n            }\n\n            int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n            int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n            if (!distancePredicate.test(docLatitude, docLongitude)) {\n              result.clear(docID);\n              cost[0]--;\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_INSIDE_QUERY;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_INSIDE_QUERY;\n            }\n\n            double latMin = decodeLatitude(minPackedValue, 0);\n            double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n            double latMax = decodeLatitude(maxPackedValue, 0);\n            double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            Relation relation = GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n            switch (relation) {\n              case CELL_INSIDE_QUERY:\n                // all points match, skip this subtree\n                return Relation.CELL_OUTSIDE_QUERY;\n              case CELL_OUTSIDE_QUERY:\n                // none of the points match, clear all documents\n                return Relation.CELL_INSIDE_QUERY;\n              default:\n                return relation;\n            }\n          }\n\n        };\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    Rectangle box = Rectangle.fromPointDistance(latitude, longitude, radiusMeters);\n    // create bounding box(es) for the distance range\n    // these are pre-encoded with LatLonPoint's encoding\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    // second set of longitude ranges to check (for cross-dateline case)\n    final byte minLon2[] = new byte[Integer.BYTES];\n\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n\n    // crosses dateline: split\n    if (box.crossesDateline()) {\n      // box1\n      NumericUtils.intToSortableBytes(Integer.MIN_VALUE, minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // box2\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon2, 0);\n    } else {\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // disable box2\n      NumericUtils.intToSortableBytes(Integer.MAX_VALUE, minLon2, 0);\n    }\n\n    // compute exact sort key: avoid any asin() computations\n    final double sortKey = GeoUtils.distanceQuerySortKey(radiusMeters);\n\n    final double axisLat = Rectangle.axisLat(latitude, radiusMeters);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n\n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n        final IntersectVisitor visitor = getIntersectVisitor(result);\n\n        final Weight weight = this;\n        return new ScorerSupplier() {\n\n          long cost = -1;\n\n          @Override\n          public Scorer get(long leadCost) throws IOException {\n            if (values.getDocCount() == reader.maxDoc()\n                && values.getDocCount() == values.size()\n                && cost() > reader.maxDoc() / 2) {\n              // If all docs have exactly one value and the cost is greater\n              // than half the leaf size then maybe we can make things faster\n              // by computing the set of documents that do NOT match the range\n              final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n              result.set(0, reader.maxDoc());\n              int[] cost = new int[]{reader.maxDoc()};\n              values.intersect(getInverseIntersectVisitor(result, cost));\n              final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            values.intersect(visitor);\n            return new ConstantScoreScorer(weight, score(), result.build().iterator());\n          }\n\n          @Override\n          public long cost() {\n            if (cost == -1) {\n              cost = values.estimatePointCount(visitor);\n            }\n            assert cost >= 0;\n            return cost;\n          }\n        };\n\n      }\n\n      /**\n       * Create a visitor that collects documents matching the range.\n       */\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            // bounding box check\n            if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              return;\n            }\n\n            int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n            int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n            if (distancePredicate.test(docLatitude, docLongitude)) {\n              adder.add(docID);\n            }\n          }\n\n          // algorithm: we create a bounding box (two bounding boxes if we cross the dateline).\n          // 1. check our bounding box(es) first. if the subtree is entirely outside of those, bail.\n          // 2. check if the subtree is disjoint. it may cross the bounding box but not intersect with circle\n          // 3. see if the subtree is fully contained. if the subtree is enormous along the x axis, wrapping half way around the world, etc: then this can't work, just go to step 4.\n          // 4. recurse naively (subtrees crossing over circle edge)\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            double latMin = decodeLatitude(minPackedValue, 0);\n            double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n            double latMax = decodeLatitude(maxPackedValue, 0);\n            double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            return GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            // bounding box check\n            if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              result.clear(docID);\n              cost[0]--;\n              return;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              result.clear(docID);\n              cost[0]--;\n              return;\n            }\n\n            int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n            int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n            if (!distancePredicate.test(docLatitude, docLongitude)) {\n              result.clear(docID);\n              cost[0]--;\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_INSIDE_QUERY;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_INSIDE_QUERY;\n            }\n\n            double latMin = decodeLatitude(minPackedValue, 0);\n            double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n            double latMax = decodeLatitude(maxPackedValue, 0);\n            double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            Relation relation = GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n            switch (relation) {\n              case CELL_INSIDE_QUERY:\n                // all points match, skip this subtree\n                return Relation.CELL_OUTSIDE_QUERY;\n              case CELL_OUTSIDE_QUERY:\n                // none of the points match, clear all documents\n                return Relation.CELL_INSIDE_QUERY;\n              default:\n                return relation;\n            }\n          }\n\n        };\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da1460d7a5dea2658e7b8e4f6e632e53ade440ac","date":1510316270,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    Rectangle box = Rectangle.fromPointDistance(latitude, longitude, radiusMeters);\n    // create bounding box(es) for the distance range\n    // these are pre-encoded with LatLonPoint's encoding\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    // second set of longitude ranges to check (for cross-dateline case)\n    final byte minLon2[] = new byte[Integer.BYTES];\n\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n\n    // crosses dateline: split\n    if (box.crossesDateline()) {\n      // box1\n      NumericUtils.intToSortableBytes(Integer.MIN_VALUE, minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // box2\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon2, 0);\n    } else {\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // disable box2\n      NumericUtils.intToSortableBytes(Integer.MAX_VALUE, minLon2, 0);\n    }\n\n    // compute exact sort key: avoid any asin() computations\n    final double sortKey = GeoUtils.distanceQuerySortKey(radiusMeters);\n\n    final double axisLat = Rectangle.axisLat(latitude, radiusMeters);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n\n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n        final IntersectVisitor visitor = getIntersectVisitor(result);\n\n        final Weight weight = this;\n        return new ScorerSupplier() {\n\n          long cost = -1;\n\n          @Override\n          public Scorer get(long leadCost) throws IOException {\n            if (values.getDocCount() == reader.maxDoc()\n                && values.getDocCount() == values.size()\n                && cost() > reader.maxDoc() / 2) {\n              // If all docs have exactly one value and the cost is greater\n              // than half the leaf size then maybe we can make things faster\n              // by computing the set of documents that do NOT match the range\n              final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n              result.set(0, reader.maxDoc());\n              int[] cost = new int[]{reader.maxDoc()};\n              values.intersect(getInverseIntersectVisitor(result, cost));\n              final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            values.intersect(visitor);\n            return new ConstantScoreScorer(weight, score(), result.build().iterator());\n          }\n\n          @Override\n          public long cost() {\n            if (cost == -1) {\n              cost = values.estimatePointCount(visitor);\n            }\n            assert cost >= 0;\n            return cost;\n          }\n        };\n\n      }\n\n      /**\n       * Create a visitor that collects documents matching the range.\n       */\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            // bounding box check\n            if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              return;\n            }\n\n            int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n            int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n            if (distancePredicate.test(docLatitude, docLongitude)) {\n              adder.add(docID);\n            }\n          }\n\n          // algorithm: we create a bounding box (two bounding boxes if we cross the dateline).\n          // 1. check our bounding box(es) first. if the subtree is entirely outside of those, bail.\n          // 2. check if the subtree is disjoint. it may cross the bounding box but not intersect with circle\n          // 3. see if the subtree is fully contained. if the subtree is enormous along the x axis, wrapping half way around the world, etc: then this can't work, just go to step 4.\n          // 4. recurse naively (subtrees crossing over circle edge)\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            double latMin = decodeLatitude(minPackedValue, 0);\n            double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n            double latMax = decodeLatitude(maxPackedValue, 0);\n            double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            return GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            // bounding box check\n            if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              result.clear(docID);\n              cost[0]--;\n              return;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              result.clear(docID);\n              cost[0]--;\n              return;\n            }\n\n            int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n            int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n            if (!distancePredicate.test(docLatitude, docLongitude)) {\n              result.clear(docID);\n              cost[0]--;\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_INSIDE_QUERY;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_INSIDE_QUERY;\n            }\n\n            double latMin = decodeLatitude(minPackedValue, 0);\n            double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n            double latMax = decodeLatitude(maxPackedValue, 0);\n            double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            Relation relation = GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n            switch (relation) {\n              case CELL_INSIDE_QUERY:\n                // all points match, skip this subtree\n                return Relation.CELL_OUTSIDE_QUERY;\n              case CELL_OUTSIDE_QUERY:\n                // none of the points match, clear all documents\n                return Relation.CELL_INSIDE_QUERY;\n              default:\n                return relation;\n            }\n          }\n\n        };\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    Rectangle box = Rectangle.fromPointDistance(latitude, longitude, radiusMeters);\n    // create bounding box(es) for the distance range\n    // these are pre-encoded with LatLonPoint's encoding\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    // second set of longitude ranges to check (for cross-dateline case)\n    final byte minLon2[] = new byte[Integer.BYTES];\n\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n\n    // crosses dateline: split\n    if (box.crossesDateline()) {\n      // box1\n      NumericUtils.intToSortableBytes(Integer.MIN_VALUE, minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // box2\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon2, 0);\n    } else {\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // disable box2\n      NumericUtils.intToSortableBytes(Integer.MAX_VALUE, minLon2, 0);\n    }\n\n    // compute exact sort key: avoid any asin() computations\n    final double sortKey = GeoUtils.distanceQuerySortKey(radiusMeters);\n\n    final double axisLat = Rectangle.axisLat(latitude, radiusMeters);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n        return context.reader().getCoreCacheHelper();\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n\n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n        final IntersectVisitor visitor = getIntersectVisitor(result);\n\n        final Weight weight = this;\n        return new ScorerSupplier() {\n\n          long cost = -1;\n\n          @Override\n          public Scorer get(long leadCost) throws IOException {\n            if (values.getDocCount() == reader.maxDoc()\n                && values.getDocCount() == values.size()\n                && cost() > reader.maxDoc() / 2) {\n              // If all docs have exactly one value and the cost is greater\n              // than half the leaf size then maybe we can make things faster\n              // by computing the set of documents that do NOT match the range\n              final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n              result.set(0, reader.maxDoc());\n              int[] cost = new int[]{reader.maxDoc()};\n              values.intersect(getInverseIntersectVisitor(result, cost));\n              final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            values.intersect(visitor);\n            return new ConstantScoreScorer(weight, score(), result.build().iterator());\n          }\n\n          @Override\n          public long cost() {\n            if (cost == -1) {\n              cost = values.estimatePointCount(visitor);\n            }\n            assert cost >= 0;\n            return cost;\n          }\n        };\n\n      }\n\n      /**\n       * Create a visitor that collects documents matching the range.\n       */\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            // bounding box check\n            if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              return;\n            }\n\n            int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n            int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n            if (distancePredicate.test(docLatitude, docLongitude)) {\n              adder.add(docID);\n            }\n          }\n\n          // algorithm: we create a bounding box (two bounding boxes if we cross the dateline).\n          // 1. check our bounding box(es) first. if the subtree is entirely outside of those, bail.\n          // 2. check if the subtree is disjoint. it may cross the bounding box but not intersect with circle\n          // 3. see if the subtree is fully contained. if the subtree is enormous along the x axis, wrapping half way around the world, etc: then this can't work, just go to step 4.\n          // 4. recurse naively (subtrees crossing over circle edge)\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            double latMin = decodeLatitude(minPackedValue, 0);\n            double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n            double latMax = decodeLatitude(maxPackedValue, 0);\n            double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            return GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            // bounding box check\n            if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              result.clear(docID);\n              cost[0]--;\n              return;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              result.clear(docID);\n              cost[0]--;\n              return;\n            }\n\n            int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n            int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n            if (!distancePredicate.test(docLatitude, docLongitude)) {\n              result.clear(docID);\n              cost[0]--;\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_INSIDE_QUERY;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_INSIDE_QUERY;\n            }\n\n            double latMin = decodeLatitude(minPackedValue, 0);\n            double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n            double latMax = decodeLatitude(maxPackedValue, 0);\n            double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            Relation relation = GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n            switch (relation) {\n              case CELL_INSIDE_QUERY:\n                // all points match, skip this subtree\n                return Relation.CELL_OUTSIDE_QUERY;\n              case CELL_OUTSIDE_QUERY:\n                // none of the points match, clear all documents\n                return Relation.CELL_INSIDE_QUERY;\n              default:\n                return relation;\n            }\n          }\n\n        };\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    Rectangle box = Rectangle.fromPointDistance(latitude, longitude, radiusMeters);\n    // create bounding box(es) for the distance range\n    // these are pre-encoded with LatLonPoint's encoding\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    // second set of longitude ranges to check (for cross-dateline case)\n    final byte minLon2[] = new byte[Integer.BYTES];\n\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n\n    // crosses dateline: split\n    if (box.crossesDateline()) {\n      // box1\n      NumericUtils.intToSortableBytes(Integer.MIN_VALUE, minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // box2\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon2, 0);\n    } else {\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // disable box2\n      NumericUtils.intToSortableBytes(Integer.MAX_VALUE, minLon2, 0);\n    }\n\n    // compute exact sort key: avoid any asin() computations\n    final double sortKey = GeoUtils.distanceQuerySortKey(radiusMeters);\n\n    final double axisLat = Rectangle.axisLat(latitude, radiusMeters);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n\n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n        final IntersectVisitor visitor = getIntersectVisitor(result);\n\n        final Weight weight = this;\n        return new ScorerSupplier() {\n\n          long cost = -1;\n\n          @Override\n          public Scorer get(long leadCost) throws IOException {\n            if (values.getDocCount() == reader.maxDoc()\n                && values.getDocCount() == values.size()\n                && cost() > reader.maxDoc() / 2) {\n              // If all docs have exactly one value and the cost is greater\n              // than half the leaf size then maybe we can make things faster\n              // by computing the set of documents that do NOT match the range\n              final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n              result.set(0, reader.maxDoc());\n              int[] cost = new int[]{reader.maxDoc()};\n              values.intersect(getInverseIntersectVisitor(result, cost));\n              final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            values.intersect(visitor);\n            return new ConstantScoreScorer(weight, score(), result.build().iterator());\n          }\n\n          @Override\n          public long cost() {\n            if (cost == -1) {\n              cost = values.estimatePointCount(visitor);\n            }\n            assert cost >= 0;\n            return cost;\n          }\n        };\n\n      }\n\n      /**\n       * Create a visitor that collects documents matching the range.\n       */\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            // bounding box check\n            if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              return;\n            }\n\n            int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n            int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n            if (distancePredicate.test(docLatitude, docLongitude)) {\n              adder.add(docID);\n            }\n          }\n\n          // algorithm: we create a bounding box (two bounding boxes if we cross the dateline).\n          // 1. check our bounding box(es) first. if the subtree is entirely outside of those, bail.\n          // 2. check if the subtree is disjoint. it may cross the bounding box but not intersect with circle\n          // 3. see if the subtree is fully contained. if the subtree is enormous along the x axis, wrapping half way around the world, etc: then this can't work, just go to step 4.\n          // 4. recurse naively (subtrees crossing over circle edge)\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            double latMin = decodeLatitude(minPackedValue, 0);\n            double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n            double latMax = decodeLatitude(maxPackedValue, 0);\n            double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            return GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            // bounding box check\n            if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              result.clear(docID);\n              cost[0]--;\n              return;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              result.clear(docID);\n              cost[0]--;\n              return;\n            }\n\n            int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n            int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n            if (!distancePredicate.test(docLatitude, docLongitude)) {\n              result.clear(docID);\n              cost[0]--;\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_INSIDE_QUERY;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_INSIDE_QUERY;\n            }\n\n            double latMin = decodeLatitude(minPackedValue, 0);\n            double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n            double latMax = decodeLatitude(maxPackedValue, 0);\n            double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            Relation relation = GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n            switch (relation) {\n              case CELL_INSIDE_QUERY:\n                // all points match, skip this subtree\n                return Relation.CELL_OUTSIDE_QUERY;\n              case CELL_OUTSIDE_QUERY:\n                // none of the points match, clear all documents\n                return Relation.CELL_INSIDE_QUERY;\n              default:\n                return relation;\n            }\n          }\n\n        };\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    Rectangle box = Rectangle.fromPointDistance(latitude, longitude, radiusMeters);\n    // create bounding box(es) for the distance range\n    // these are pre-encoded with LatLonPoint's encoding\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    // second set of longitude ranges to check (for cross-dateline case)\n    final byte minLon2[] = new byte[Integer.BYTES];\n\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n\n    // crosses dateline: split\n    if (box.crossesDateline()) {\n      // box1\n      NumericUtils.intToSortableBytes(Integer.MIN_VALUE, minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // box2\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon2, 0);\n    } else {\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // disable box2\n      NumericUtils.intToSortableBytes(Integer.MAX_VALUE, minLon2, 0);\n    }\n\n    // compute exact sort key: avoid any asin() computations\n    final double sortKey = GeoUtils.distanceQuerySortKey(radiusMeters);\n\n    final double axisLat = Rectangle.axisLat(latitude, radiusMeters);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n\n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n        final IntersectVisitor visitor = getIntersectVisitor(result);\n\n        final Weight weight = this;\n        return new ScorerSupplier() {\n\n          long cost = -1;\n\n          @Override\n          public Scorer get(long leadCost) throws IOException {\n            if (values.getDocCount() == reader.maxDoc()\n                && values.getDocCount() == values.size()\n                && cost() > reader.maxDoc() / 2) {\n              // If all docs have exactly one value and the cost is greater\n              // than half the leaf size then maybe we can make things faster\n              // by computing the set of documents that do NOT match the range\n              final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n              result.set(0, reader.maxDoc());\n              int[] cost = new int[]{reader.maxDoc()};\n              values.intersect(getInverseIntersectVisitor(result, cost));\n              final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            values.intersect(visitor);\n            return new ConstantScoreScorer(weight, score(), result.build().iterator());\n          }\n\n          @Override\n          public long cost() {\n            if (cost == -1) {\n              cost = values.estimatePointCount(visitor);\n            }\n            assert cost >= 0;\n            return cost;\n          }\n        };\n\n      }\n\n      /**\n       * Create a visitor that collects documents matching the range.\n       */\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            // bounding box check\n            if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              return;\n            }\n\n            int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n            int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n            if (distancePredicate.test(docLatitude, docLongitude)) {\n              adder.add(docID);\n            }\n          }\n\n          // algorithm: we create a bounding box (two bounding boxes if we cross the dateline).\n          // 1. check our bounding box(es) first. if the subtree is entirely outside of those, bail.\n          // 2. check if the subtree is disjoint. it may cross the bounding box but not intersect with circle\n          // 3. see if the subtree is fully contained. if the subtree is enormous along the x axis, wrapping half way around the world, etc: then this can't work, just go to step 4.\n          // 4. recurse naively (subtrees crossing over circle edge)\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            double latMin = decodeLatitude(minPackedValue, 0);\n            double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n            double latMax = decodeLatitude(maxPackedValue, 0);\n            double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            return GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            // bounding box check\n            if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              result.clear(docID);\n              cost[0]--;\n              return;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              result.clear(docID);\n              cost[0]--;\n              return;\n            }\n\n            int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n            int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n            if (!distancePredicate.test(docLatitude, docLongitude)) {\n              result.clear(docID);\n              cost[0]--;\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_INSIDE_QUERY;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_INSIDE_QUERY;\n            }\n\n            double latMin = decodeLatitude(minPackedValue, 0);\n            double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n            double latMax = decodeLatitude(maxPackedValue, 0);\n            double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            Relation relation = GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n            switch (relation) {\n              case CELL_INSIDE_QUERY:\n                // all points match, skip this subtree\n                return Relation.CELL_OUTSIDE_QUERY;\n              case CELL_OUTSIDE_QUERY:\n                // none of the points match, clear all documents\n                return Relation.CELL_INSIDE_QUERY;\n              default:\n                return relation;\n            }\n          }\n\n        };\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":["3c09c5c6cd995294d83f12c1bdf8d47d8e749f49","3c09c5c6cd995294d83f12c1bdf8d47d8e749f49"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointDistanceQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    Rectangle box = Rectangle.fromPointDistance(latitude, longitude, radiusMeters);\n    // create bounding box(es) for the distance range\n    // these are pre-encoded with LatLonPoint's encoding\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    // second set of longitude ranges to check (for cross-dateline case)\n    final byte minLon2[] = new byte[Integer.BYTES];\n\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n\n    // crosses dateline: split\n    if (box.crossesDateline()) {\n      // box1\n      NumericUtils.intToSortableBytes(Integer.MIN_VALUE, minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // box2\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon2, 0);\n    } else {\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // disable box2\n      NumericUtils.intToSortableBytes(Integer.MAX_VALUE, minLon2, 0);\n    }\n\n    // compute exact sort key: avoid any asin() computations\n    final double sortKey = GeoUtils.distanceQuerySortKey(radiusMeters);\n\n    final double axisLat = Rectangle.axisLat(latitude, radiusMeters);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n\n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n        final IntersectVisitor visitor = getIntersectVisitor(result);\n\n        final Weight weight = this;\n        return new ScorerSupplier() {\n\n          long cost = -1;\n\n          @Override\n          public Scorer get(long leadCost) throws IOException {\n            if (values.getDocCount() == reader.maxDoc()\n                && values.getDocCount() == values.size()\n                && cost() > reader.maxDoc() / 2) {\n              // If all docs have exactly one value and the cost is greater\n              // than half the leaf size then maybe we can make things faster\n              // by computing the set of documents that do NOT match the range\n              final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n              result.set(0, reader.maxDoc());\n              int[] cost = new int[]{reader.maxDoc()};\n              values.intersect(getInverseIntersectVisitor(result, cost));\n              final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            values.intersect(visitor);\n            return new ConstantScoreScorer(weight, score(), result.build().iterator());\n          }\n\n          @Override\n          public long cost() {\n            if (cost == -1) {\n              cost = values.estimatePointCount(visitor);\n            }\n            assert cost >= 0;\n            return cost;\n          }\n        };\n\n      }\n\n      /**\n       * Create a visitor that collects documents matching the range.\n       */\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            // bounding box check\n            if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              return;\n            }\n\n            int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n            int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n            if (distancePredicate.test(docLatitude, docLongitude)) {\n              adder.add(docID);\n            }\n          }\n\n          // algorithm: we create a bounding box (two bounding boxes if we cross the dateline).\n          // 1. check our bounding box(es) first. if the subtree is entirely outside of those, bail.\n          // 2. check if the subtree is disjoint. it may cross the bounding box but not intersect with circle\n          // 3. see if the subtree is fully contained. if the subtree is enormous along the x axis, wrapping half way around the world, etc: then this can't work, just go to step 4.\n          // 4. recurse naively (subtrees crossing over circle edge)\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            double latMin = decodeLatitude(minPackedValue, 0);\n            double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n            double latMax = decodeLatitude(maxPackedValue, 0);\n            double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            return GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            // bounding box check\n            if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              result.clear(docID);\n              cost[0]--;\n              return;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              result.clear(docID);\n              cost[0]--;\n              return;\n            }\n\n            int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n            int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n            if (!distancePredicate.test(docLatitude, docLongitude)) {\n              result.clear(docID);\n              cost[0]--;\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_INSIDE_QUERY;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_INSIDE_QUERY;\n            }\n\n            double latMin = decodeLatitude(minPackedValue, 0);\n            double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n            double latMax = decodeLatitude(maxPackedValue, 0);\n            double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            Relation relation = GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n            switch (relation) {\n              case CELL_INSIDE_QUERY:\n                // all points match, skip this subtree\n                return Relation.CELL_OUTSIDE_QUERY;\n              case CELL_OUTSIDE_QUERY:\n                // none of the points match, clear all documents\n                return Relation.CELL_INSIDE_QUERY;\n              default:\n                return relation;\n            }\n          }\n\n        };\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    Rectangle box = Rectangle.fromPointDistance(latitude, longitude, radiusMeters);\n    // create bounding box(es) for the distance range\n    // these are pre-encoded with LatLonPoint's encoding\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    // second set of longitude ranges to check (for cross-dateline case)\n    final byte minLon2[] = new byte[Integer.BYTES];\n\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n\n    // crosses dateline: split\n    if (box.crossesDateline()) {\n      // box1\n      NumericUtils.intToSortableBytes(Integer.MIN_VALUE, minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // box2\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon2, 0);\n    } else {\n      NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n      NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n      // disable box2\n      NumericUtils.intToSortableBytes(Integer.MAX_VALUE, minLon2, 0);\n    }\n\n    // compute exact sort key: avoid any asin() computations\n    final double sortKey = GeoUtils.distanceQuerySortKey(radiusMeters);\n\n    final double axisLat = Rectangle.axisLat(latitude, radiusMeters);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      final GeoEncodingUtils.DistancePredicate distancePredicate = GeoEncodingUtils.createDistancePredicate(latitude, longitude, radiusMeters);\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        ScorerSupplier scorerSupplier = scorerSupplier(context);\n        if (scorerSupplier == null) {\n          return null;\n        }\n        return scorerSupplier.get(Long.MAX_VALUE);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n\n      @Override\n      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n\n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n        final IntersectVisitor visitor = getIntersectVisitor(result);\n\n        final Weight weight = this;\n        return new ScorerSupplier() {\n\n          long cost = -1;\n\n          @Override\n          public Scorer get(long leadCost) throws IOException {\n            if (values.getDocCount() == reader.maxDoc()\n                && values.getDocCount() == values.size()\n                && cost() > reader.maxDoc() / 2) {\n              // If all docs have exactly one value and the cost is greater\n              // than half the leaf size then maybe we can make things faster\n              // by computing the set of documents that do NOT match the range\n              final FixedBitSet result = new FixedBitSet(reader.maxDoc());\n              result.set(0, reader.maxDoc());\n              int[] cost = new int[]{reader.maxDoc()};\n              values.intersect(getInverseIntersectVisitor(result, cost));\n              final DocIdSetIterator iterator = new BitSetIterator(result, cost[0]);\n              return new ConstantScoreScorer(weight, score(), iterator);\n            }\n            values.intersect(visitor);\n            return new ConstantScoreScorer(weight, score(), result.build().iterator());\n          }\n\n          @Override\n          public long cost() {\n            if (cost == -1) {\n              cost = values.estimatePointCount(visitor);\n            }\n            assert cost >= 0;\n            return cost;\n          }\n        };\n\n      }\n\n      /**\n       * Create a visitor that collects documents matching the range.\n       */\n      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {\n        return new IntersectVisitor() {\n\n          DocIdSetBuilder.BulkAdder adder;\n\n          @Override\n          public void grow(int count) {\n            adder = result.grow(count);\n          }\n\n          @Override\n          public void visit(int docID) {\n            adder.add(docID);\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            // bounding box check\n            if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              return;\n            }\n\n            int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n            int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n            if (distancePredicate.test(docLatitude, docLongitude)) {\n              adder.add(docID);\n            }\n          }\n\n          // algorithm: we create a bounding box (two bounding boxes if we cross the dateline).\n          // 1. check our bounding box(es) first. if the subtree is entirely outside of those, bail.\n          // 2. check if the subtree is disjoint. it may cross the bounding box but not intersect with circle\n          // 3. see if the subtree is fully contained. if the subtree is enormous along the x axis, wrapping half way around the world, etc: then this can't work, just go to step 4.\n          // 4. recurse naively (subtrees crossing over circle edge)\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              return Relation.CELL_OUTSIDE_QUERY;\n            }\n\n            double latMin = decodeLatitude(minPackedValue, 0);\n            double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n            double latMax = decodeLatitude(maxPackedValue, 0);\n            double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            return GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n          }\n        };\n      }\n\n      /**\n       * Create a visitor that clears documents that do NOT match the range.\n       */\n      private IntersectVisitor getInverseIntersectVisitor(FixedBitSet result, int[] cost) {\n        return new IntersectVisitor() {\n\n          @Override\n          public void visit(int docID) {\n            result.clear(docID);\n            cost[0]--;\n          }\n\n          @Override\n          public void visit(int docID, byte[] packedValue) {\n            // bounding box check\n            if (StringHelper.compare(Integer.BYTES, packedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              result.clear(docID);\n              cost[0]--;\n              return;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, packedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // longitude out of bounding box range\n              result.clear(docID);\n              cost[0]--;\n              return;\n            }\n\n            int docLatitude = NumericUtils.sortableBytesToInt(packedValue, 0);\n            int docLongitude = NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES);\n            if (!distancePredicate.test(docLatitude, docLongitude)) {\n              result.clear(docID);\n              cost[0]--;\n            }\n          }\n\n          @Override\n          public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n            if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_INSIDE_QUERY;\n            }\n\n            if ((StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0)\n                && StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon2, 0) < 0) {\n              // latitude out of bounding box range\n              return Relation.CELL_INSIDE_QUERY;\n            }\n\n            double latMin = decodeLatitude(minPackedValue, 0);\n            double lonMin = decodeLongitude(minPackedValue, Integer.BYTES);\n            double latMax = decodeLatitude(maxPackedValue, 0);\n            double lonMax = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n            Relation relation = GeoUtils.relate(latMin, latMax, lonMin, lonMax, latitude, longitude, sortKey, axisLat);\n            switch (relation) {\n              case CELL_INSIDE_QUERY:\n                // all points match, skip this subtree\n                return Relation.CELL_OUTSIDE_QUERY;\n              case CELL_OUTSIDE_QUERY:\n                // none of the points match, clear all documents\n                return Relation.CELL_INSIDE_QUERY;\n              default:\n                return relation;\n            }\n          }\n\n        };\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"706a7a3396c030cc66dda92a0492eb492131c4c0":["7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"598b5d23aa7c9732bf473c21a9cd309c44599394":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","827a82bc4dd5d485dbe63f69e8429ecff24cb602"],"24f3e9c0fc20b3107388ec853a6fbad9f891b461":["faf3c558df29f740350b64a25b98edd8f680a1c0"],"da1460d7a5dea2658e7b8e4f6e632e53ade440ac":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["7d6ba405c7c8192661bdf7ce782181d12f3162a6","706a7a3396c030cc66dda92a0492eb492131c4c0"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["598b5d23aa7c9732bf473c21a9cd309c44599394","ee49d43fb47965f24d4ad89e7a1bdcc10410d615"],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"ee49d43fb47965f24d4ad89e7a1bdcc10410d615":["827a82bc4dd5d485dbe63f69e8429ecff24cb602"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"417142ff08fda9cf0b72d5133e63097a166c6458":["da1460d7a5dea2658e7b8e4f6e632e53ade440ac","9fc47cb7b4346802411bb432f501ed0673d7119e"],"7d6ba405c7c8192661bdf7ce782181d12f3162a6":["faf3c558df29f740350b64a25b98edd8f680a1c0","24f3e9c0fc20b3107388ec853a6fbad9f891b461"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["ee49d43fb47965f24d4ad89e7a1bdcc10410d615","faf3c558df29f740350b64a25b98edd8f680a1c0"],"58884af1f68e9d61c217c753fbd6266d86a63b14":["ee49d43fb47965f24d4ad89e7a1bdcc10410d615","7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"faf3c558df29f740350b64a25b98edd8f680a1c0":["ee49d43fb47965f24d4ad89e7a1bdcc10410d615"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["da1460d7a5dea2658e7b8e4f6e632e53ade440ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["417142ff08fda9cf0b72d5133e63097a166c6458"],"827a82bc4dd5d485dbe63f69e8429ecff24cb602":["367f57e2ee85b7f7e28cfe73370a22cf67624f65"]},"commit2Childs":{"706a7a3396c030cc66dda92a0492eb492131c4c0":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"598b5d23aa7c9732bf473c21a9cd309c44599394":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"24f3e9c0fc20b3107388ec853a6fbad9f891b461":["7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"da1460d7a5dea2658e7b8e4f6e632e53ade440ac":["417142ff08fda9cf0b72d5133e63097a166c6458","9fc47cb7b4346802411bb432f501ed0673d7119e"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["da1460d7a5dea2658e7b8e4f6e632e53ade440ac"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","827a82bc4dd5d485dbe63f69e8429ecff24cb602"],"ee49d43fb47965f24d4ad89e7a1bdcc10410d615":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","58884af1f68e9d61c217c753fbd6266d86a63b14","faf3c558df29f740350b64a25b98edd8f680a1c0"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["598b5d23aa7c9732bf473c21a9cd309c44599394"],"417142ff08fda9cf0b72d5133e63097a166c6458":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7d6ba405c7c8192661bdf7ce782181d12f3162a6":["706a7a3396c030cc66dda92a0492eb492131c4c0","d523b8189b211dd1630166aa77b8c88bb48b3fcc","58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"58884af1f68e9d61c217c753fbd6266d86a63b14":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"faf3c558df29f740350b64a25b98edd8f680a1c0":["24f3e9c0fc20b3107388ec853a6fbad9f891b461","7d6ba405c7c8192661bdf7ce782181d12f3162a6","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"827a82bc4dd5d485dbe63f69e8429ecff24cb602":["598b5d23aa7c9732bf473c21a9cd309c44599394","ee49d43fb47965f24d4ad89e7a1bdcc10410d615"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}