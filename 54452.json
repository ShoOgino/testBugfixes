{"path":"lucene/core/src/test/org/apache/lucene/index/TestSimpleDocValuesIndexing#testLengthPrefixAcrossTwoPages().mjava","commits":[{"id":"55d38708477d49511977195bad066d9ced001005","date":1353348143,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSimpleDocValuesIndexing#testLengthPrefixAcrossTwoPages().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-3870\n  public void testLengthPrefixAcrossTwoPages() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    byte[] bytes = new byte[32764];\n    BytesRef b = new BytesRef();\n    b.bytes = bytes;\n    b.length = bytes.length;\n    doc.add(new DerefBytesDocValuesField(\"field\", b));\n    w.addDocument(doc);\n    bytes[0] = 1;\n    w.addDocument(doc);\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    Source s = getOnlySegmentReader(r).docValues(\"field\").getSource();\n\n    BytesRef bytes1 = s.getBytes(0, new BytesRef());\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 0;\n    assertEquals(b, bytes1);\n    \n    bytes1 = s.getBytes(1, new BytesRef());\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 1;\n    assertEquals(b, bytes1);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b156d846032fbeed5bbb6c45481d6dcab2339ec6","date":1358288319,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSimpleDocValuesIndexing#testLengthPrefixAcrossTwoPages().mjava","sourceNew":null,"sourceOld":"  // LUCENE-3870\n  public void testLengthPrefixAcrossTwoPages() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    byte[] bytes = new byte[32764];\n    BytesRef b = new BytesRef();\n    b.bytes = bytes;\n    b.length = bytes.length;\n    doc.add(new DerefBytesDocValuesField(\"field\", b));\n    w.addDocument(doc);\n    bytes[0] = 1;\n    w.addDocument(doc);\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    Source s = getOnlySegmentReader(r).docValues(\"field\").getSource();\n\n    BytesRef bytes1 = s.getBytes(0, new BytesRef());\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 0;\n    assertEquals(b, bytes1);\n    \n    bytes1 = s.getBytes(1, new BytesRef());\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 1;\n    assertEquals(b, bytes1);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"55d38708477d49511977195bad066d9ced001005":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b156d846032fbeed5bbb6c45481d6dcab2339ec6":["55d38708477d49511977195bad066d9ced001005"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["55d38708477d49511977195bad066d9ced001005","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"55d38708477d49511977195bad066d9ced001005":["b156d846032fbeed5bbb6c45481d6dcab2339ec6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b156d846032fbeed5bbb6c45481d6dcab2339ec6":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b156d846032fbeed5bbb6c45481d6dcab2339ec6"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}