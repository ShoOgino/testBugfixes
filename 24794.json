{"path":"solr/core/src/java/org/apache/solr/util/SimplePostTool.PageFetcher#readPageFromUrl(URL).mjava","commits":[{"id":"c2c3a504730329ae644b009dee43024116605d47","date":1345253449,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool.PageFetcher#readPageFromUrl(URL).mjava","pathOld":"/dev/null","sourceNew":"    public PageFetcherResult readPageFromUrl(URL u) {\n      PageFetcherResult res = new PageFetcherResult();\n      try {\n        if (isDisallowedByRobots(u)) {\n          warn(\"The URL \"+u+\" is disallowed by robots.txt and will not be crawled.\");\n          res.httpStatus = 403;\n          visited.add(u);\n          return res;\n        }\n        res.httpStatus = 404;\n        HttpURLConnection conn = (HttpURLConnection) u.openConnection();\n        conn.setRequestProperty(\"User-Agent\", \"SimplePostTool-crawler/\"+VERSION_OF_THIS_TOOL+\" (http://lucene.apache.org/solr/)\");\n        conn.setRequestProperty(\"Accept-Encoding\", \"gzip, deflate\");\n        conn.connect();\n        res.httpStatus = conn.getResponseCode();\n        if(!normalizeUrlEnding(conn.getURL().toString()).equals(normalizeUrlEnding(u.toString()))) {\n          info(\"The URL \"+u+\" caused a redirect to \"+conn.getURL());\n          u = conn.getURL();\n          res.redirectUrl = u;\n          visited.add(u);\n        }\n        if(res.httpStatus == 200) {\n          // Raw content type of form \"text/html; encoding=utf-8\"\n          String rawContentType = conn.getContentType();\n          String type = rawContentType.split(\";\")[0];\n          if(typeSupported(type)) {\n            String encoding = conn.getContentEncoding();\n            InputStream is;\n            if (encoding != null && encoding.equalsIgnoreCase(\"gzip\")) {\n              is = new GZIPInputStream(conn.getInputStream());\n            } else if (encoding != null && encoding.equalsIgnoreCase(\"deflate\")) {\n              is = new InflaterInputStream(conn.getInputStream(), new Inflater(true));\n            } else {\n              is = conn.getInputStream();\n            }\n            \n            // Read into memory, so that we later can pull links from the page without re-fetching \n            res.content = inputStreamToByteArray(is);\n            is.close();\n          } else {\n            warn(\"Skipping URL with unsupported type \"+type);\n            res.httpStatus = 415;\n          }\n        }\n      } catch(IOException e) {\n        warn(\"IOException when reading page from url \"+u+\": \"+e.getMessage());\n      }\n      return res;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70fa1c0f4d75735ff2e1485e059d9bc5efa50598","date":1345296911,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool.PageFetcher#readPageFromUrl(URL).mjava","pathOld":"/dev/null","sourceNew":"    public PageFetcherResult readPageFromUrl(URL u) {\n      PageFetcherResult res = new PageFetcherResult();\n      try {\n        if (isDisallowedByRobots(u)) {\n          warn(\"The URL \"+u+\" is disallowed by robots.txt and will not be crawled.\");\n          res.httpStatus = 403;\n          visited.add(u);\n          return res;\n        }\n        res.httpStatus = 404;\n        HttpURLConnection conn = (HttpURLConnection) u.openConnection();\n        conn.setRequestProperty(\"User-Agent\", \"SimplePostTool-crawler/\"+VERSION_OF_THIS_TOOL+\" (http://lucene.apache.org/solr/)\");\n        conn.setRequestProperty(\"Accept-Encoding\", \"gzip, deflate\");\n        conn.connect();\n        res.httpStatus = conn.getResponseCode();\n        if(!normalizeUrlEnding(conn.getURL().toString()).equals(normalizeUrlEnding(u.toString()))) {\n          info(\"The URL \"+u+\" caused a redirect to \"+conn.getURL());\n          u = conn.getURL();\n          res.redirectUrl = u;\n          visited.add(u);\n        }\n        if(res.httpStatus == 200) {\n          // Raw content type of form \"text/html; encoding=utf-8\"\n          String rawContentType = conn.getContentType();\n          String type = rawContentType.split(\";\")[0];\n          if(typeSupported(type)) {\n            String encoding = conn.getContentEncoding();\n            InputStream is;\n            if (encoding != null && encoding.equalsIgnoreCase(\"gzip\")) {\n              is = new GZIPInputStream(conn.getInputStream());\n            } else if (encoding != null && encoding.equalsIgnoreCase(\"deflate\")) {\n              is = new InflaterInputStream(conn.getInputStream(), new Inflater(true));\n            } else {\n              is = conn.getInputStream();\n            }\n            \n            // Read into memory, so that we later can pull links from the page without re-fetching \n            res.content = inputStreamToByteArray(is);\n            is.close();\n          } else {\n            warn(\"Skipping URL with unsupported type \"+type);\n            res.httpStatus = 415;\n          }\n        }\n      } catch(IOException e) {\n        warn(\"IOException when reading page from url \"+u+\": \"+e.getMessage());\n      }\n      return res;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"616c1830142ff5c1ddedec1ed898733b73c8e23b","date":1345368925,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool.PageFetcher#readPageFromUrl(URL).mjava","pathOld":"/dev/null","sourceNew":"    public PageFetcherResult readPageFromUrl(URL u) {\n      PageFetcherResult res = new PageFetcherResult();\n      try {\n        if (isDisallowedByRobots(u)) {\n          warn(\"The URL \"+u+\" is disallowed by robots.txt and will not be crawled.\");\n          res.httpStatus = 403;\n          visited.add(u);\n          return res;\n        }\n        res.httpStatus = 404;\n        HttpURLConnection conn = (HttpURLConnection) u.openConnection();\n        conn.setRequestProperty(\"User-Agent\", \"SimplePostTool-crawler/\"+VERSION_OF_THIS_TOOL+\" (http://lucene.apache.org/solr/)\");\n        conn.setRequestProperty(\"Accept-Encoding\", \"gzip, deflate\");\n        conn.connect();\n        res.httpStatus = conn.getResponseCode();\n        if(!normalizeUrlEnding(conn.getURL().toString()).equals(normalizeUrlEnding(u.toString()))) {\n          info(\"The URL \"+u+\" caused a redirect to \"+conn.getURL());\n          u = conn.getURL();\n          res.redirectUrl = u;\n          visited.add(u);\n        }\n        if(res.httpStatus == 200) {\n          // Raw content type of form \"text/html; encoding=utf-8\"\n          String rawContentType = conn.getContentType();\n          String type = rawContentType.split(\";\")[0];\n          if(typeSupported(type)) {\n            String encoding = conn.getContentEncoding();\n            InputStream is;\n            if (encoding != null && encoding.equalsIgnoreCase(\"gzip\")) {\n              is = new GZIPInputStream(conn.getInputStream());\n            } else if (encoding != null && encoding.equalsIgnoreCase(\"deflate\")) {\n              is = new InflaterInputStream(conn.getInputStream(), new Inflater(true));\n            } else {\n              is = conn.getInputStream();\n            }\n            \n            // Read into memory, so that we later can pull links from the page without re-fetching \n            res.content = inputStreamToByteArray(is);\n            is.close();\n          } else {\n            warn(\"Skipping URL with unsupported type \"+type);\n            res.httpStatus = 415;\n          }\n        }\n      } catch(IOException e) {\n        warn(\"IOException when reading page from url \"+u+\": \"+e.getMessage());\n      }\n      return res;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f8c4743d1128a3b02b5862b8c4da1a337004f9","date":1440551545,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool.PageFetcher#readPageFromUrl(URL).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool.PageFetcher#readPageFromUrl(URL).mjava","sourceNew":"    public PageFetcherResult readPageFromUrl(URL u) {\n      PageFetcherResult res = new PageFetcherResult();\n      try {\n        if (isDisallowedByRobots(u)) {\n          warn(\"The URL \"+u+\" is disallowed by robots.txt and will not be crawled.\");\n          res.httpStatus = 403;\n          visited.add(u);\n          return res;\n        }\n        res.httpStatus = 404;\n        HttpURLConnection conn = (HttpURLConnection) u.openConnection();\n        conn.setRequestProperty(\"User-Agent\", \"SimplePostTool-crawler/\"+VERSION_OF_THIS_TOOL+\" (http://lucene.apache.org/solr/)\");\n        conn.setRequestProperty(\"Accept-Encoding\", \"gzip, deflate\");\n        conn.connect();\n        res.httpStatus = conn.getResponseCode();\n        if(!normalizeUrlEnding(conn.getURL().toString()).equals(normalizeUrlEnding(u.toString()))) {\n          info(\"The URL \"+u+\" caused a redirect to \"+conn.getURL());\n          u = conn.getURL();\n          res.redirectUrl = u;\n          visited.add(u);\n        }\n        if(res.httpStatus == 200) {\n          // Raw content type of form \"text/html; encoding=utf-8\"\n          String rawContentType = conn.getContentType();\n          String type = rawContentType.split(\";\")[0];\n          if(typeSupported(type) || \"*\".equals(fileTypes)) {\n            String encoding = conn.getContentEncoding();\n            InputStream is;\n            if (encoding != null && encoding.equalsIgnoreCase(\"gzip\")) {\n              is = new GZIPInputStream(conn.getInputStream());\n            } else if (encoding != null && encoding.equalsIgnoreCase(\"deflate\")) {\n              is = new InflaterInputStream(conn.getInputStream(), new Inflater(true));\n            } else {\n              is = conn.getInputStream();\n            }\n            \n            // Read into memory, so that we later can pull links from the page without re-fetching \n            res.content = inputStreamToByteArray(is);\n            is.close();\n          } else {\n            warn(\"Skipping URL with unsupported type \"+type);\n            res.httpStatus = 415;\n          }\n        }\n      } catch(IOException e) {\n        warn(\"IOException when reading page from url \"+u+\": \"+e.getMessage());\n      }\n      return res;\n    }\n\n","sourceOld":"    public PageFetcherResult readPageFromUrl(URL u) {\n      PageFetcherResult res = new PageFetcherResult();\n      try {\n        if (isDisallowedByRobots(u)) {\n          warn(\"The URL \"+u+\" is disallowed by robots.txt and will not be crawled.\");\n          res.httpStatus = 403;\n          visited.add(u);\n          return res;\n        }\n        res.httpStatus = 404;\n        HttpURLConnection conn = (HttpURLConnection) u.openConnection();\n        conn.setRequestProperty(\"User-Agent\", \"SimplePostTool-crawler/\"+VERSION_OF_THIS_TOOL+\" (http://lucene.apache.org/solr/)\");\n        conn.setRequestProperty(\"Accept-Encoding\", \"gzip, deflate\");\n        conn.connect();\n        res.httpStatus = conn.getResponseCode();\n        if(!normalizeUrlEnding(conn.getURL().toString()).equals(normalizeUrlEnding(u.toString()))) {\n          info(\"The URL \"+u+\" caused a redirect to \"+conn.getURL());\n          u = conn.getURL();\n          res.redirectUrl = u;\n          visited.add(u);\n        }\n        if(res.httpStatus == 200) {\n          // Raw content type of form \"text/html; encoding=utf-8\"\n          String rawContentType = conn.getContentType();\n          String type = rawContentType.split(\";\")[0];\n          if(typeSupported(type)) {\n            String encoding = conn.getContentEncoding();\n            InputStream is;\n            if (encoding != null && encoding.equalsIgnoreCase(\"gzip\")) {\n              is = new GZIPInputStream(conn.getInputStream());\n            } else if (encoding != null && encoding.equalsIgnoreCase(\"deflate\")) {\n              is = new InflaterInputStream(conn.getInputStream(), new Inflater(true));\n            } else {\n              is = conn.getInputStream();\n            }\n            \n            // Read into memory, so that we later can pull links from the page without re-fetching \n            res.content = inputStreamToByteArray(is);\n            is.close();\n          } else {\n            warn(\"Skipping URL with unsupported type \"+type);\n            res.httpStatus = 415;\n          }\n        }\n      } catch(IOException e) {\n        warn(\"IOException when reading page from url \"+u+\": \"+e.getMessage());\n      }\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool.PageFetcher#readPageFromUrl(URL).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool.PageFetcher#readPageFromUrl(URL).mjava","sourceNew":"    public PageFetcherResult readPageFromUrl(URL u) {\n      PageFetcherResult res = new PageFetcherResult();\n      try {\n        if (isDisallowedByRobots(u)) {\n          warn(\"The URL \"+u+\" is disallowed by robots.txt and will not be crawled.\");\n          res.httpStatus = 403;\n          visited.add(u);\n          return res;\n        }\n        res.httpStatus = 404;\n        HttpURLConnection conn = (HttpURLConnection) u.openConnection();\n        conn.setRequestProperty(\"User-Agent\", \"SimplePostTool-crawler/\"+VERSION_OF_THIS_TOOL+\" (http://lucene.apache.org/solr/)\");\n        conn.setRequestProperty(\"Accept-Encoding\", \"gzip, deflate\");\n        conn.connect();\n        res.httpStatus = conn.getResponseCode();\n        if(!normalizeUrlEnding(conn.getURL().toString()).equals(normalizeUrlEnding(u.toString()))) {\n          info(\"The URL \"+u+\" caused a redirect to \"+conn.getURL());\n          u = conn.getURL();\n          res.redirectUrl = u;\n          visited.add(u);\n        }\n        if(res.httpStatus == 200) {\n          // Raw content type of form \"text/html; encoding=utf-8\"\n          String rawContentType = conn.getContentType();\n          String type = rawContentType.split(\";\")[0];\n          if(typeSupported(type) || \"*\".equals(fileTypes)) {\n            String encoding = conn.getContentEncoding();\n            InputStream is;\n            if (encoding != null && encoding.equalsIgnoreCase(\"gzip\")) {\n              is = new GZIPInputStream(conn.getInputStream());\n            } else if (encoding != null && encoding.equalsIgnoreCase(\"deflate\")) {\n              is = new InflaterInputStream(conn.getInputStream(), new Inflater(true));\n            } else {\n              is = conn.getInputStream();\n            }\n\n            // Read into memory, so that we later can pull links from the page without re-fetching\n            res.content = inputStreamToByteArray(is);\n            is.close();\n          } else {\n            warn(\"Skipping URL with unsupported type \"+type);\n            res.httpStatus = 415;\n          }\n        }\n      } catch(IOException e) {\n        warn(\"IOException when reading page from url \"+u+\": \"+e.getMessage());\n      }\n      return res;\n    }\n\n","sourceOld":"    public PageFetcherResult readPageFromUrl(URL u) {\n      PageFetcherResult res = new PageFetcherResult();\n      try {\n        if (isDisallowedByRobots(u)) {\n          warn(\"The URL \"+u+\" is disallowed by robots.txt and will not be crawled.\");\n          res.httpStatus = 403;\n          visited.add(u);\n          return res;\n        }\n        res.httpStatus = 404;\n        HttpURLConnection conn = (HttpURLConnection) u.openConnection();\n        conn.setRequestProperty(\"User-Agent\", \"SimplePostTool-crawler/\"+VERSION_OF_THIS_TOOL+\" (http://lucene.apache.org/solr/)\");\n        conn.setRequestProperty(\"Accept-Encoding\", \"gzip, deflate\");\n        conn.connect();\n        res.httpStatus = conn.getResponseCode();\n        if(!normalizeUrlEnding(conn.getURL().toString()).equals(normalizeUrlEnding(u.toString()))) {\n          info(\"The URL \"+u+\" caused a redirect to \"+conn.getURL());\n          u = conn.getURL();\n          res.redirectUrl = u;\n          visited.add(u);\n        }\n        if(res.httpStatus == 200) {\n          // Raw content type of form \"text/html; encoding=utf-8\"\n          String rawContentType = conn.getContentType();\n          String type = rawContentType.split(\";\")[0];\n          if(typeSupported(type) || \"*\".equals(fileTypes)) {\n            String encoding = conn.getContentEncoding();\n            InputStream is;\n            if (encoding != null && encoding.equalsIgnoreCase(\"gzip\")) {\n              is = new GZIPInputStream(conn.getInputStream());\n            } else if (encoding != null && encoding.equalsIgnoreCase(\"deflate\")) {\n              is = new InflaterInputStream(conn.getInputStream(), new Inflater(true));\n            } else {\n              is = conn.getInputStream();\n            }\n            \n            // Read into memory, so that we later can pull links from the page without re-fetching \n            res.content = inputStreamToByteArray(is);\n            is.close();\n          } else {\n            warn(\"Skipping URL with unsupported type \"+type);\n            res.httpStatus = 415;\n          }\n        }\n      } catch(IOException e) {\n        warn(\"IOException when reading page from url \"+u+\": \"+e.getMessage());\n      }\n      return res;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55f8c4743d1128a3b02b5862b8c4da1a337004f9":["c2c3a504730329ae644b009dee43024116605d47"],"616c1830142ff5c1ddedec1ed898733b73c8e23b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c2c3a504730329ae644b009dee43024116605d47"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c2c3a504730329ae644b009dee43024116605d47"],"c2c3a504730329ae644b009dee43024116605d47":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["55f8c4743d1128a3b02b5862b8c4da1a337004f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"]},"commit2Childs":{"55f8c4743d1128a3b02b5862b8c4da1a337004f9":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"616c1830142ff5c1ddedec1ed898733b73c8e23b":[],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":[],"c2c3a504730329ae644b009dee43024116605d47":["55f8c4743d1128a3b02b5862b8c4da1a337004f9","616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","c2c3a504730329ae644b009dee43024116605d47"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}