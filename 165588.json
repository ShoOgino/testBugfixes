{"path":"src/java/org/apache/lucene/search/PhrasePrefixQuery#createWeight(Searcher).mjava","commits":[{"id":"27274410c91546fcfc28e692abd2dd77ca99be4b","date":1042501834,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhrasePrefixQuery#createWeight(Searcher).mjava","pathOld":"/dev/null","sourceNew":"  protected Weight createWeight(Searcher searcher) {\n    return new PhrasePrefixWeight(searcher);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"917a0c943aa5659b50fffad7167c838653bd809d","date":1042572030,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhrasePrefixQuery#createWeight(Searcher).mjava","pathOld":"src/java/org/apache/lucene/search/PhrasePrefixQuery#createWeight(Searcher).mjava","sourceNew":"  protected Weight createWeight(Searcher searcher) {\n    if (termArrays.size() == 1) {                 // optimize one-term case\n      Term[] terms = (Term[])termArrays.get(0);\n      BooleanQuery boq = new BooleanQuery();\n      for (int i=0; i<terms.length; i++) {\n        boq.add(new TermQuery(terms[i]), false, false);\n      }\n      return boq.createWeight(searcher);\n    }\n    return new PhrasePrefixWeight(searcher);\n  }\n\n","sourceOld":"  protected Weight createWeight(Searcher searcher) {\n    return new PhrasePrefixWeight(searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53bfe453eca2201fdccfb5aede25065f10acc00e","date":1042581450,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhrasePrefixQuery#createWeight(Searcher).mjava","pathOld":"src/java/org/apache/lucene/search/PhrasePrefixQuery#createWeight(Searcher).mjava","sourceNew":"  protected Weight createWeight(Searcher searcher) {\n    if (termArrays.size() == 1) {                 // optimize one-term case\n      Term[] terms = (Term[])termArrays.get(0);\n      BooleanQuery boq = new BooleanQuery();\n      for (int i=0; i<terms.length; i++) {\n        boq.add(new TermQuery(terms[i]), false, false);\n      }\n      boq.setBoost(getBoost());\n      return boq.createWeight(searcher);\n    }\n    return new PhrasePrefixWeight(searcher);\n  }\n\n","sourceOld":"  protected Weight createWeight(Searcher searcher) {\n    if (termArrays.size() == 1) {                 // optimize one-term case\n      Term[] terms = (Term[])termArrays.get(0);\n      BooleanQuery boq = new BooleanQuery();\n      for (int i=0; i<terms.length; i++) {\n        boq.add(new TermQuery(terms[i]), false, false);\n      }\n      return boq.createWeight(searcher);\n    }\n    return new PhrasePrefixWeight(searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2db8da778bc059db762a1d91f6e41624d01f0c1d","date":1093638047,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhrasePrefixQuery#createWeight(Searcher).mjava","pathOld":"src/java/org/apache/lucene/search/PhrasePrefixQuery#createWeight(Searcher).mjava","sourceNew":"  protected Weight createWeight(Searcher searcher) {\n    if (termArrays.size() == 1) {                 // optimize one-term case\n      Term[] terms = (Term[])termArrays.get(0);\n      BooleanQuery boq = new BooleanQuery();\n      for (int i=0; i<terms.length; i++) {\n        boq.add(new TermQuery(terms[i]), BooleanClause.Occur.SHOULD);\n      }\n      boq.setBoost(getBoost());\n      return boq.createWeight(searcher);\n    }\n    return new PhrasePrefixWeight(searcher);\n  }\n\n","sourceOld":"  protected Weight createWeight(Searcher searcher) {\n    if (termArrays.size() == 1) {                 // optimize one-term case\n      Term[] terms = (Term[])termArrays.get(0);\n      BooleanQuery boq = new BooleanQuery();\n      for (int i=0; i<terms.length; i++) {\n        boq.add(new TermQuery(terms[i]), false, false);\n      }\n      boq.setBoost(getBoost());\n      return boq.createWeight(searcher);\n    }\n    return new PhrasePrefixWeight(searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcbc8ed27f45a5a299f8414d7a886340ce7bb3db","date":1110223587,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhrasePrefixQuery#createWeight(Searcher).mjava","pathOld":"src/java/org/apache/lucene/search/PhrasePrefixQuery#createWeight(Searcher).mjava","sourceNew":"  protected Weight createWeight(Searcher searcher) {\n    if (termArrays.size() == 1) {                 // optimize one-term case\n      Term[] terms = (Term[])termArrays.get(0);\n      BooleanQuery boq = new BooleanQuery(true);\n      for (int i=0; i<terms.length; i++) {\n        boq.add(new TermQuery(terms[i]), BooleanClause.Occur.SHOULD);\n      }\n      boq.setBoost(getBoost());\n      return boq.createWeight(searcher);\n    }\n    return new PhrasePrefixWeight(searcher);\n  }\n\n","sourceOld":"  protected Weight createWeight(Searcher searcher) {\n    if (termArrays.size() == 1) {                 // optimize one-term case\n      Term[] terms = (Term[])termArrays.get(0);\n      BooleanQuery boq = new BooleanQuery();\n      for (int i=0; i<terms.length; i++) {\n        boq.add(new TermQuery(terms[i]), BooleanClause.Occur.SHOULD);\n      }\n      boq.setBoost(getBoost());\n      return boq.createWeight(searcher);\n    }\n    return new PhrasePrefixWeight(searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402061809f3a4629ea0c449e33e9f94a9772f3c3","date":1113967712,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhrasePrefixQuery#createWeight(Searcher).mjava","pathOld":"src/java/org/apache/lucene/search/PhrasePrefixQuery#createWeight(Searcher).mjava","sourceNew":"  protected Weight createWeight(Searcher searcher) throws IOException {\n    if (termArrays.size() == 1) {                 // optimize one-term case\n      Term[] terms = (Term[])termArrays.get(0);\n      BooleanQuery boq = new BooleanQuery(true);\n      for (int i=0; i<terms.length; i++) {\n        boq.add(new TermQuery(terms[i]), BooleanClause.Occur.SHOULD);\n      }\n      boq.setBoost(getBoost());\n      return boq.createWeight(searcher);\n    }\n    return new PhrasePrefixWeight(searcher);\n  }\n\n","sourceOld":"  protected Weight createWeight(Searcher searcher) {\n    if (termArrays.size() == 1) {                 // optimize one-term case\n      Term[] terms = (Term[])termArrays.get(0);\n      BooleanQuery boq = new BooleanQuery(true);\n      for (int i=0; i<terms.length; i++) {\n        boq.add(new TermQuery(terms[i]), BooleanClause.Occur.SHOULD);\n      }\n      boq.setBoost(getBoost());\n      return boq.createWeight(searcher);\n    }\n    return new PhrasePrefixWeight(searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/PhrasePrefixQuery#createWeight(Searcher).mjava","sourceNew":null,"sourceOld":"  protected Weight createWeight(Searcher searcher) throws IOException {\n    if (termArrays.size() == 1) {                 // optimize one-term case\n      Term[] terms = (Term[])termArrays.get(0);\n      BooleanQuery boq = new BooleanQuery(true);\n      for (int i=0; i<terms.length; i++) {\n        boq.add(new TermQuery(terms[i]), BooleanClause.Occur.SHOULD);\n      }\n      boq.setBoost(getBoost());\n      return boq.createWeight(searcher);\n    }\n    return new PhrasePrefixWeight(searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"402061809f3a4629ea0c449e33e9f94a9772f3c3":["bcbc8ed27f45a5a299f8414d7a886340ce7bb3db"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["402061809f3a4629ea0c449e33e9f94a9772f3c3"],"27274410c91546fcfc28e692abd2dd77ca99be4b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"53bfe453eca2201fdccfb5aede25065f10acc00e":["917a0c943aa5659b50fffad7167c838653bd809d"],"917a0c943aa5659b50fffad7167c838653bd809d":["27274410c91546fcfc28e692abd2dd77ca99be4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"bcbc8ed27f45a5a299f8414d7a886340ce7bb3db":["2db8da778bc059db762a1d91f6e41624d01f0c1d"],"2db8da778bc059db762a1d91f6e41624d01f0c1d":["53bfe453eca2201fdccfb5aede25065f10acc00e"]},"commit2Childs":{"402061809f3a4629ea0c449e33e9f94a9772f3c3":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"27274410c91546fcfc28e692abd2dd77ca99be4b":["917a0c943aa5659b50fffad7167c838653bd809d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["27274410c91546fcfc28e692abd2dd77ca99be4b"],"53bfe453eca2201fdccfb5aede25065f10acc00e":["2db8da778bc059db762a1d91f6e41624d01f0c1d"],"917a0c943aa5659b50fffad7167c838653bd809d":["53bfe453eca2201fdccfb5aede25065f10acc00e"],"bcbc8ed27f45a5a299f8414d7a886340ce7bb3db":["402061809f3a4629ea0c449e33e9f94a9772f3c3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2db8da778bc059db762a1d91f6e41624d01f0c1d":["bcbc8ed27f45a5a299f8414d7a886340ce7bb3db"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}