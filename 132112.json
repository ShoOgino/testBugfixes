{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/SplitShardSuggester#init().mjava","commits":[{"id":"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1","date":1523453934,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/SplitShardSuggester#init().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  SolrRequest init() {\n    Set<Pair<String, String>> shards = (Set<Pair<String, String>>) hints.getOrDefault(Hint.COLL_SHARD, Collections.emptySet());\n    if (shards.isEmpty()) {\n      throw new RuntimeException(\"split-shard requires 'collection' and 'shard'\");\n    }\n    if (shards.size() > 1) {\n      throw new RuntimeException(\"split-shard requires exactly one pair of 'collection' and 'shard'\");\n    }\n    Pair<String, String> collShard = shards.iterator().next();\n    return CollectionAdminRequest.splitShard(collShard.first()).setShardName(collShard.second());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["383671a9fe2f5147abf22eb1ce56e3ca3d6eb133"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"43345f1452f9510f8aaadae6156fe0c834e7d957","date":1523483670,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/SplitShardSuggester#init().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  SolrRequest init() {\n    Set<Pair<String, String>> shards = (Set<Pair<String, String>>) hints.getOrDefault(Hint.COLL_SHARD, Collections.emptySet());\n    if (shards.isEmpty()) {\n      throw new RuntimeException(\"split-shard requires 'collection' and 'shard'\");\n    }\n    if (shards.size() > 1) {\n      throw new RuntimeException(\"split-shard requires exactly one pair of 'collection' and 'shard'\");\n    }\n    Pair<String, String> collShard = shards.iterator().next();\n    return CollectionAdminRequest.splitShard(collShard.first()).setShardName(collShard.second());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"383671a9fe2f5147abf22eb1ce56e3ca3d6eb133","date":1541008054,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/SplitShardSuggester#init().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/SplitShardSuggester#init().mjava","sourceNew":"  @Override\n  SolrRequest init() {\n    Set<Pair<String, String>> shards = (Set<Pair<String, String>>) hints.getOrDefault(Hint.COLL_SHARD, Collections.emptySet());\n    if (shards.isEmpty()) {\n      throw new RuntimeException(\"split-shard requires 'collection' and 'shard'\");\n    }\n    if (shards.size() > 1) {\n      throw new RuntimeException(\"split-shard requires exactly one pair of 'collection' and 'shard'\");\n    }\n    Pair<String, String> collShard = shards.iterator().next();\n    Map<String, Object> params = (Map<String, Object>)hints.getOrDefault(Hint.PARAMS, Collections.emptyMap());\n    CollectionAdminRequest.SplitShard req = CollectionAdminRequest.splitShard(collShard.first()).setShardName(collShard.second());\n    String splitMethod = (String)params.get(CommonAdminParams.SPLIT_METHOD);\n    if (splitMethod != null) {\n      req.setSplitMethod(splitMethod);\n    }\n    return req;\n  }\n\n","sourceOld":"  @Override\n  SolrRequest init() {\n    Set<Pair<String, String>> shards = (Set<Pair<String, String>>) hints.getOrDefault(Hint.COLL_SHARD, Collections.emptySet());\n    if (shards.isEmpty()) {\n      throw new RuntimeException(\"split-shard requires 'collection' and 'shard'\");\n    }\n    if (shards.size() > 1) {\n      throw new RuntimeException(\"split-shard requires exactly one pair of 'collection' and 'shard'\");\n    }\n    Pair<String, String> collShard = shards.iterator().next();\n    return CollectionAdminRequest.splitShard(collShard.first()).setShardName(collShard.second());\n  }\n\n","bugFix":["ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7cac1f2920f8057198f04505797cbabf74dd9a97","date":1546884894,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/SplitShardSuggester#init().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/SplitShardSuggester#init().mjava","sourceNew":"  @Override\n  SolrRequest init() {\n    Set<Pair<String, String>> shards = (Set<Pair<String, String>>) hints.getOrDefault(Hint.COLL_SHARD, Collections.emptySet());\n    if (shards.isEmpty()) {\n      throw new RuntimeException(\"split-shard requires 'collection' and 'shard'\");\n    }\n    if (shards.size() > 1) {\n      throw new RuntimeException(\"split-shard requires exactly one pair of 'collection' and 'shard'\");\n    }\n    Pair<String, String> collShard = shards.iterator().next();\n    Map<String, Object> params = (Map<String, Object>)hints.getOrDefault(Hint.PARAMS, Collections.emptyMap());\n    Float splitFuzz = (Float)params.get(CommonAdminParams.SPLIT_FUZZ);\n    CollectionAdminRequest.SplitShard req = CollectionAdminRequest.splitShard(collShard.first()).setShardName(collShard.second());\n    if (splitFuzz != null) {\n      req.setSplitFuzz(splitFuzz);\n    }\n    String splitMethod = (String)params.get(CommonAdminParams.SPLIT_METHOD);\n    if (splitMethod != null) {\n      req.setSplitMethod(splitMethod);\n    }\n    return req;\n  }\n\n","sourceOld":"  @Override\n  SolrRequest init() {\n    Set<Pair<String, String>> shards = (Set<Pair<String, String>>) hints.getOrDefault(Hint.COLL_SHARD, Collections.emptySet());\n    if (shards.isEmpty()) {\n      throw new RuntimeException(\"split-shard requires 'collection' and 'shard'\");\n    }\n    if (shards.size() > 1) {\n      throw new RuntimeException(\"split-shard requires exactly one pair of 'collection' and 'shard'\");\n    }\n    Pair<String, String> collShard = shards.iterator().next();\n    Map<String, Object> params = (Map<String, Object>)hints.getOrDefault(Hint.PARAMS, Collections.emptyMap());\n    CollectionAdminRequest.SplitShard req = CollectionAdminRequest.splitShard(collShard.first()).setShardName(collShard.second());\n    String splitMethod = (String)params.get(CommonAdminParams.SPLIT_METHOD);\n    if (splitMethod != null) {\n      req.setSplitMethod(splitMethod);\n    }\n    return req;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a97a72dc16d01fda8ca5c9e0264b3604e30ab539","date":1565639985,"type":3,"author":"Megan Carey","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/SplitShardSuggester#init().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/SplitShardSuggester#init().mjava","sourceNew":"  @Override\n  SolrRequest init() {\n    Set<Pair<String, String>> shards = (Set<Pair<String, String>>) hints.getOrDefault(Hint.COLL_SHARD, Collections.emptySet());\n    if (shards.isEmpty()) {\n      throw new RuntimeException(\"split-shard requires 'collection' and 'shard'\");\n    }\n    if (shards.size() > 1) {\n      throw new RuntimeException(\"split-shard requires exactly one pair of 'collection' and 'shard'\");\n    }\n    Pair<String, String> collShard = shards.iterator().next();\n    Map<String, Object> params = (Map<String, Object>)hints.getOrDefault(Hint.PARAMS, Collections.emptyMap());\n    Float splitFuzz = (Float)params.get(CommonAdminParams.SPLIT_FUZZ);\n    CollectionAdminRequest.SplitShard req = CollectionAdminRequest.splitShard(collShard.first()).setShardName(collShard.second());\n    if (splitFuzz != null) {\n      req.setSplitFuzz(splitFuzz);\n    }\n    String splitMethod = (String)params.get(CommonAdminParams.SPLIT_METHOD);\n    if (splitMethod != null) {\n      req.setSplitMethod(splitMethod);\n    }\n    Boolean splitByPrefix = (Boolean)params.get(CommonAdminParams.SPLIT_BY_PREFIX);\n    if (splitByPrefix != null) {\n      req.setSplitByPrefix(splitByPrefix);\n    }\n    return req;\n  }\n\n","sourceOld":"  @Override\n  SolrRequest init() {\n    Set<Pair<String, String>> shards = (Set<Pair<String, String>>) hints.getOrDefault(Hint.COLL_SHARD, Collections.emptySet());\n    if (shards.isEmpty()) {\n      throw new RuntimeException(\"split-shard requires 'collection' and 'shard'\");\n    }\n    if (shards.size() > 1) {\n      throw new RuntimeException(\"split-shard requires exactly one pair of 'collection' and 'shard'\");\n    }\n    Pair<String, String> collShard = shards.iterator().next();\n    Map<String, Object> params = (Map<String, Object>)hints.getOrDefault(Hint.PARAMS, Collections.emptyMap());\n    Float splitFuzz = (Float)params.get(CommonAdminParams.SPLIT_FUZZ);\n    CollectionAdminRequest.SplitShard req = CollectionAdminRequest.splitShard(collShard.first()).setShardName(collShard.second());\n    if (splitFuzz != null) {\n      req.setSplitFuzz(splitFuzz);\n    }\n    String splitMethod = (String)params.get(CommonAdminParams.SPLIT_METHOD);\n    if (splitMethod != null) {\n      req.setSplitMethod(splitMethod);\n    }\n    return req;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"527adea7ce767368d7317339023e18e39702132e","date":1592163810,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/SplitShardSuggester#init().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/SplitShardSuggester#init().mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"rawtypes\"})\n  SolrRequest init() {\n    @SuppressWarnings({\"unchecked\"})\n    Set<Pair<String, String>> shards = (Set<Pair<String, String>>) hints.getOrDefault(Hint.COLL_SHARD, Collections.emptySet());\n    if (shards.isEmpty()) {\n      throw new RuntimeException(\"split-shard requires 'collection' and 'shard'\");\n    }\n    if (shards.size() > 1) {\n      throw new RuntimeException(\"split-shard requires exactly one pair of 'collection' and 'shard'\");\n    }\n    Pair<String, String> collShard = shards.iterator().next();\n    @SuppressWarnings({\"unchecked\"})\n    Map<String, Object> params = (Map<String, Object>)hints.getOrDefault(Hint.PARAMS, Collections.emptyMap());\n    Float splitFuzz = (Float)params.get(CommonAdminParams.SPLIT_FUZZ);\n    CollectionAdminRequest.SplitShard req = CollectionAdminRequest.splitShard(collShard.first()).setShardName(collShard.second());\n    if (splitFuzz != null) {\n      req.setSplitFuzz(splitFuzz);\n    }\n    String splitMethod = (String)params.get(CommonAdminParams.SPLIT_METHOD);\n    if (splitMethod != null) {\n      req.setSplitMethod(splitMethod);\n    }\n    Boolean splitByPrefix = (Boolean)params.get(CommonAdminParams.SPLIT_BY_PREFIX);\n    if (splitByPrefix != null) {\n      req.setSplitByPrefix(splitByPrefix);\n    }\n    return req;\n  }\n\n","sourceOld":"  @Override\n  SolrRequest init() {\n    Set<Pair<String, String>> shards = (Set<Pair<String, String>>) hints.getOrDefault(Hint.COLL_SHARD, Collections.emptySet());\n    if (shards.isEmpty()) {\n      throw new RuntimeException(\"split-shard requires 'collection' and 'shard'\");\n    }\n    if (shards.size() > 1) {\n      throw new RuntimeException(\"split-shard requires exactly one pair of 'collection' and 'shard'\");\n    }\n    Pair<String, String> collShard = shards.iterator().next();\n    Map<String, Object> params = (Map<String, Object>)hints.getOrDefault(Hint.PARAMS, Collections.emptyMap());\n    Float splitFuzz = (Float)params.get(CommonAdminParams.SPLIT_FUZZ);\n    CollectionAdminRequest.SplitShard req = CollectionAdminRequest.splitShard(collShard.first()).setShardName(collShard.second());\n    if (splitFuzz != null) {\n      req.setSplitFuzz(splitFuzz);\n    }\n    String splitMethod = (String)params.get(CommonAdminParams.SPLIT_METHOD);\n    if (splitMethod != null) {\n      req.setSplitMethod(splitMethod);\n    }\n    Boolean splitByPrefix = (Boolean)params.get(CommonAdminParams.SPLIT_BY_PREFIX);\n    if (splitByPrefix != null) {\n      req.setSplitByPrefix(splitByPrefix);\n    }\n    return req;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/SplitShardSuggester#init().mjava","sourceNew":null,"sourceOld":"  @Override\n  @SuppressWarnings({\"rawtypes\"})\n  SolrRequest init() {\n    @SuppressWarnings({\"unchecked\"})\n    Set<Pair<String, String>> shards = (Set<Pair<String, String>>) hints.getOrDefault(Hint.COLL_SHARD, Collections.emptySet());\n    if (shards.isEmpty()) {\n      throw new RuntimeException(\"split-shard requires 'collection' and 'shard'\");\n    }\n    if (shards.size() > 1) {\n      throw new RuntimeException(\"split-shard requires exactly one pair of 'collection' and 'shard'\");\n    }\n    Pair<String, String> collShard = shards.iterator().next();\n    @SuppressWarnings({\"unchecked\"})\n    Map<String, Object> params = (Map<String, Object>)hints.getOrDefault(Hint.PARAMS, Collections.emptyMap());\n    Float splitFuzz = (Float)params.get(CommonAdminParams.SPLIT_FUZZ);\n    CollectionAdminRequest.SplitShard req = CollectionAdminRequest.splitShard(collShard.first()).setShardName(collShard.second());\n    if (splitFuzz != null) {\n      req.setSplitFuzz(splitFuzz);\n    }\n    String splitMethod = (String)params.get(CommonAdminParams.SPLIT_METHOD);\n    if (splitMethod != null) {\n      req.setSplitMethod(splitMethod);\n    }\n    Boolean splitByPrefix = (Boolean)params.get(CommonAdminParams.SPLIT_BY_PREFIX);\n    if (splitByPrefix != null) {\n      req.setSplitByPrefix(splitByPrefix);\n    }\n    return req;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"383671a9fe2f5147abf22eb1ce56e3ca3d6eb133":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"7cac1f2920f8057198f04505797cbabf74dd9a97":["383671a9fe2f5147abf22eb1ce56e3ca3d6eb133"],"3f504512a03d978990cbff30db0522b354e846db":["527adea7ce767368d7317339023e18e39702132e"],"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"527adea7ce767368d7317339023e18e39702132e":["a97a72dc16d01fda8ca5c9e0264b3604e30ab539"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"a97a72dc16d01fda8ca5c9e0264b3604e30ab539":["7cac1f2920f8057198f04505797cbabf74dd9a97"]},"commit2Childs":{"383671a9fe2f5147abf22eb1ce56e3ca3d6eb133":["7cac1f2920f8057198f04505797cbabf74dd9a97"],"7cac1f2920f8057198f04505797cbabf74dd9a97":["a97a72dc16d01fda8ca5c9e0264b3604e30ab539"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1","43345f1452f9510f8aaadae6156fe0c834e7d957"],"527adea7ce767368d7317339023e18e39702132e":["3f504512a03d978990cbff30db0522b354e846db"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["383671a9fe2f5147abf22eb1ce56e3ca3d6eb133"],"a97a72dc16d01fda8ca5c9e0264b3604e30ab539":["527adea7ce767368d7317339023e18e39702132e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}