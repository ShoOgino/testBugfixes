{"path":"solr/core/src/java/org/apache/solr/util/SolrCLI#main(String[]).mjava","commits":[{"id":"709714c6ee47950678dd2d2ef4e0473886909226","date":1407339661,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Runs a tool.\n   */\n  public static void main(String[] args) throws Exception {\n    if (args == null || args.length == 0 || args[0] == null || args[0].trim().length() == 0) {\n      System.err.println(\"Invalid command-line args! Must pass the name of a tool to run.\\n\"\n          + \"Supported tools:\\n\");\n      displayToolOptions(System.err);\n      System.exit(1);\n    }\n    \n    // Determine the tool\n    String toolType = args[0].trim().toLowerCase(Locale.ROOT);\n    Tool tool = newTool(toolType);\n    \n    String[] toolArgs = new String[args.length - 1];\n    System.arraycopy(args, 1, toolArgs, 0, toolArgs.length);    \n    \n    // process command-line args to configure this application\n    CommandLine cli = \n        processCommandLineArgs(joinCommonAndToolOptions(tool.getOptions()), toolArgs);\n\n    // run the tool\n    int exitCode = tool.runTool(cli);\n    \n    System.exit(exitCode);    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"209c0259a9b7087b2111411ec790d6557ef86307","date":1419393649,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#main(String[]).mjava","sourceNew":"  /**\n   * Runs a tool.\n   */\n  public static void main(String[] args) throws Exception {\n    if (args == null || args.length == 0 || args[0] == null || args[0].trim().length() == 0) {\n      System.err.println(\"Invalid command-line args! Must pass the name of a tool to run.\\n\"\n          + \"Supported tools:\\n\");\n      displayToolOptions(System.err);\n      System.exit(1);\n    }\n    \n    // Determine the tool\n    String toolType = args[0].trim().toLowerCase(Locale.ROOT);\n    Tool tool = newTool(toolType);\n    \n    String[] toolArgs = new String[args.length - 1];\n    System.arraycopy(args, 1, toolArgs, 0, toolArgs.length);    \n    \n    // process command-line args to configure this application\n    CommandLine cli = \n        processCommandLineArgs(joinCommonAndToolOptions(tool.getOptions()), toolArgs);\n\n    // run the tool\n    System.exit(tool.runTool(cli));\n  }\n\n","sourceOld":"  /**\n   * Runs a tool.\n   */\n  public static void main(String[] args) throws Exception {\n    if (args == null || args.length == 0 || args[0] == null || args[0].trim().length() == 0) {\n      System.err.println(\"Invalid command-line args! Must pass the name of a tool to run.\\n\"\n          + \"Supported tools:\\n\");\n      displayToolOptions(System.err);\n      System.exit(1);\n    }\n    \n    // Determine the tool\n    String toolType = args[0].trim().toLowerCase(Locale.ROOT);\n    Tool tool = newTool(toolType);\n    \n    String[] toolArgs = new String[args.length - 1];\n    System.arraycopy(args, 1, toolArgs, 0, toolArgs.length);    \n    \n    // process command-line args to configure this application\n    CommandLine cli = \n        processCommandLineArgs(joinCommonAndToolOptions(tool.getOptions()), toolArgs);\n\n    // run the tool\n    int exitCode = tool.runTool(cli);\n    \n    System.exit(exitCode);    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a39e2b1b10e1030ae81cfabe5ade68d2b9917c03","date":1421346288,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#main(String[]).mjava","sourceNew":"  /**\n   * Runs a tool.\n   */\n  public static void main(String[] args) throws Exception {\n    if (args == null || args.length == 0 || args[0] == null || args[0].trim().length() == 0) {\n      System.err.println(\"Invalid command-line args! Must pass the name of a tool to run.\\n\"\n          + \"Supported tools:\\n\");\n      displayToolOptions(System.err);\n      System.exit(1);\n    }\n    \n    // Determine the tool\n    String toolType = args[0].trim().toLowerCase(Locale.ROOT);\n    Tool tool = newTool(toolType);\n    \n    String[] toolArgs = new String[args.length - 1];\n    System.arraycopy(args, 1, toolArgs, 0, toolArgs.length);    \n    \n    // process command-line args to configure this application\n    CommandLine cli = \n        processCommandLineArgs(joinCommonAndToolOptions(tool.getOptions()), toolArgs);\n\n    // for SSL support, try to accommodate relative paths set for SSL store props\n    String solrInstallDir = System.getProperty(\"solr.install.dir\");\n    if (solrInstallDir != null) {\n      checkSslStoreSysProp(solrInstallDir, \"keyStore\");\n      checkSslStoreSysProp(solrInstallDir, \"trustStore\");\n    }\n\n    // run the tool\n    System.exit(tool.runTool(cli));\n  }\n\n","sourceOld":"  /**\n   * Runs a tool.\n   */\n  public static void main(String[] args) throws Exception {\n    if (args == null || args.length == 0 || args[0] == null || args[0].trim().length() == 0) {\n      System.err.println(\"Invalid command-line args! Must pass the name of a tool to run.\\n\"\n          + \"Supported tools:\\n\");\n      displayToolOptions(System.err);\n      System.exit(1);\n    }\n    \n    // Determine the tool\n    String toolType = args[0].trim().toLowerCase(Locale.ROOT);\n    Tool tool = newTool(toolType);\n    \n    String[] toolArgs = new String[args.length - 1];\n    System.arraycopy(args, 1, toolArgs, 0, toolArgs.length);    \n    \n    // process command-line args to configure this application\n    CommandLine cli = \n        processCommandLineArgs(joinCommonAndToolOptions(tool.getOptions()), toolArgs);\n\n    // run the tool\n    System.exit(tool.runTool(cli));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58b7eb80017f1c5b32035176b965fa0cc0287d04","date":1432069816,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#main(String[]).mjava","sourceNew":"  /**\n   * Runs a tool.\n   */\n  public static void main(String[] args) throws Exception {\n    if (args == null || args.length == 0 || args[0] == null || args[0].trim().length() == 0) {\n      System.err.println(\"Invalid command-line args! Must pass the name of a tool to run.\\n\"\n          + \"Supported tools:\\n\");\n      displayToolOptions(System.err);\n      System.exit(1);\n    }\n\n    String configurerClassName = System.getProperty(\"solr.authentication.httpclient.configurer\");\n    if (configurerClassName!=null) {\n      try {\n        Class c = Class.forName(configurerClassName);\n        HttpClientConfigurer configurer = (HttpClientConfigurer)c.newInstance();\n        HttpClientUtil.setConfigurer(configurer);\n        log.info(\"Set HttpClientConfigurer from: \"+configurerClassName);\n      } catch (Exception ex) {\n        throw new RuntimeException(\"Error during loading of configurer '\"+configurerClassName+\"'.\", ex);\n      }\n    }\n\n    // Determine the tool\n    String toolType = args[0].trim().toLowerCase(Locale.ROOT);\n    Tool tool = newTool(toolType);\n    \n    String[] toolArgs = new String[args.length - 1];\n    System.arraycopy(args, 1, toolArgs, 0, toolArgs.length);    \n    \n    // process command-line args to configure this application\n    CommandLine cli = \n        processCommandLineArgs(joinCommonAndToolOptions(tool.getOptions()), toolArgs);\n\n    // for SSL support, try to accommodate relative paths set for SSL store props\n    String solrInstallDir = System.getProperty(\"solr.install.dir\");\n    if (solrInstallDir != null) {\n      checkSslStoreSysProp(solrInstallDir, \"keyStore\");\n      checkSslStoreSysProp(solrInstallDir, \"trustStore\");\n    }\n\n    // run the tool\n    System.exit(tool.runTool(cli));\n  }\n\n","sourceOld":"  /**\n   * Runs a tool.\n   */\n  public static void main(String[] args) throws Exception {\n    if (args == null || args.length == 0 || args[0] == null || args[0].trim().length() == 0) {\n      System.err.println(\"Invalid command-line args! Must pass the name of a tool to run.\\n\"\n          + \"Supported tools:\\n\");\n      displayToolOptions(System.err);\n      System.exit(1);\n    }\n    \n    // Determine the tool\n    String toolType = args[0].trim().toLowerCase(Locale.ROOT);\n    Tool tool = newTool(toolType);\n    \n    String[] toolArgs = new String[args.length - 1];\n    System.arraycopy(args, 1, toolArgs, 0, toolArgs.length);    \n    \n    // process command-line args to configure this application\n    CommandLine cli = \n        processCommandLineArgs(joinCommonAndToolOptions(tool.getOptions()), toolArgs);\n\n    // for SSL support, try to accommodate relative paths set for SSL store props\n    String solrInstallDir = System.getProperty(\"solr.install.dir\");\n    if (solrInstallDir != null) {\n      checkSslStoreSysProp(solrInstallDir, \"keyStore\");\n      checkSslStoreSysProp(solrInstallDir, \"trustStore\");\n    }\n\n    // run the tool\n    System.exit(tool.runTool(cli));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca20be81c9284c840498143264e583ccbb8525a","date":1438705932,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#main(String[]).mjava","sourceNew":"  /**\n   * Runs a tool.\n   */\n  public static void main(String[] args) throws Exception {\n    if (args == null || args.length == 0 || args[0] == null || args[0].trim().length() == 0) {\n      System.err.println(\"Invalid command-line args! Must pass the name of a tool to run.\\n\"\n          + \"Supported tools:\\n\");\n      displayToolOptions(System.err);\n      exit(1);\n    }\n\n    String configurerClassName = System.getProperty(\"solr.authentication.httpclient.configurer\");\n    if (configurerClassName!=null) {\n      try {\n        Class c = Class.forName(configurerClassName);\n        HttpClientConfigurer configurer = (HttpClientConfigurer)c.newInstance();\n        HttpClientUtil.setConfigurer(configurer);\n        log.info(\"Set HttpClientConfigurer from: \"+configurerClassName);\n      } catch (Exception ex) {\n        throw new RuntimeException(\"Error during loading of configurer '\"+configurerClassName+\"'.\", ex);\n      }\n    }\n\n    // Determine the tool\n    String toolType = args[0].trim().toLowerCase(Locale.ROOT);\n    Tool tool = newTool(toolType);\n\n    // the parser doesn't like -D props\n    List<String> toolArgList = new ArrayList<String>();\n    List<String> dashDList = new ArrayList<String>();\n    for (int a=1; a < args.length; a++) {\n      String arg = args[a];\n      if (arg.startsWith(\"-D\")) {\n        dashDList.add(arg);\n      } else {\n        toolArgList.add(arg);\n      }\n    }\n    String[] toolArgs = toolArgList.toArray(new String[0]);\n\n    // process command-line args to configure this application\n    CommandLine cli = \n        processCommandLineArgs(joinCommonAndToolOptions(tool.getOptions()), toolArgs);\n\n    List argList = cli.getArgList();\n    argList.addAll(dashDList);\n\n    // for SSL support, try to accommodate relative paths set for SSL store props\n    String solrInstallDir = System.getProperty(\"solr.install.dir\");\n    if (solrInstallDir != null) {\n      checkSslStoreSysProp(solrInstallDir, \"keyStore\");\n      checkSslStoreSysProp(solrInstallDir, \"trustStore\");\n    }\n\n    // run the tool\n    exit(tool.runTool(cli));\n  }\n\n","sourceOld":"  /**\n   * Runs a tool.\n   */\n  public static void main(String[] args) throws Exception {\n    if (args == null || args.length == 0 || args[0] == null || args[0].trim().length() == 0) {\n      System.err.println(\"Invalid command-line args! Must pass the name of a tool to run.\\n\"\n          + \"Supported tools:\\n\");\n      displayToolOptions(System.err);\n      System.exit(1);\n    }\n\n    String configurerClassName = System.getProperty(\"solr.authentication.httpclient.configurer\");\n    if (configurerClassName!=null) {\n      try {\n        Class c = Class.forName(configurerClassName);\n        HttpClientConfigurer configurer = (HttpClientConfigurer)c.newInstance();\n        HttpClientUtil.setConfigurer(configurer);\n        log.info(\"Set HttpClientConfigurer from: \"+configurerClassName);\n      } catch (Exception ex) {\n        throw new RuntimeException(\"Error during loading of configurer '\"+configurerClassName+\"'.\", ex);\n      }\n    }\n\n    // Determine the tool\n    String toolType = args[0].trim().toLowerCase(Locale.ROOT);\n    Tool tool = newTool(toolType);\n    \n    String[] toolArgs = new String[args.length - 1];\n    System.arraycopy(args, 1, toolArgs, 0, toolArgs.length);    \n    \n    // process command-line args to configure this application\n    CommandLine cli = \n        processCommandLineArgs(joinCommonAndToolOptions(tool.getOptions()), toolArgs);\n\n    // for SSL support, try to accommodate relative paths set for SSL store props\n    String solrInstallDir = System.getProperty(\"solr.install.dir\");\n    if (solrInstallDir != null) {\n      checkSslStoreSysProp(solrInstallDir, \"keyStore\");\n      checkSslStoreSysProp(solrInstallDir, \"trustStore\");\n    }\n\n    // run the tool\n    System.exit(tool.runTool(cli));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecd88fb577abcc38c43fcdec15df8f2f3eb25a02","date":1440592390,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#main(String[]).mjava","sourceNew":"  /**\n   * Runs a tool.\n   */\n  public static void main(String[] args) throws Exception {\n    if (args == null || args.length == 0 || args[0] == null || args[0].trim().length() == 0) {\n      System.err.println(\"Invalid command-line args! Must pass the name of a tool to run.\\n\"\n          + \"Supported tools:\\n\");\n      displayToolOptions(System.err);\n      exit(1);\n    }\n\n    if (args.length == 1 && Arrays.asList(\"-v\",\"-version\",\"version\").contains(args[0])) {\n      // Simple version tool, no need for its own class\n      System.out.println(Version.LATEST);\n      exit(0);\n    }\n\n    String configurerClassName = System.getProperty(\"solr.authentication.httpclient.configurer\");\n    if (configurerClassName!=null) {\n      try {\n        Class c = Class.forName(configurerClassName);\n        HttpClientConfigurer configurer = (HttpClientConfigurer)c.newInstance();\n        HttpClientUtil.setConfigurer(configurer);\n        log.info(\"Set HttpClientConfigurer from: \"+configurerClassName);\n      } catch (Exception ex) {\n        throw new RuntimeException(\"Error during loading of configurer '\"+configurerClassName+\"'.\", ex);\n      }\n    }\n\n    // Determine the tool\n    String toolType = args[0].trim().toLowerCase(Locale.ROOT);\n    Tool tool = newTool(toolType);\n\n    // the parser doesn't like -D props\n    List<String> toolArgList = new ArrayList<String>();\n    List<String> dashDList = new ArrayList<String>();\n    for (int a=1; a < args.length; a++) {\n      String arg = args[a];\n      if (arg.startsWith(\"-D\")) {\n        dashDList.add(arg);\n      } else {\n        toolArgList.add(arg);\n      }\n    }\n    String[] toolArgs = toolArgList.toArray(new String[0]);\n\n    // process command-line args to configure this application\n    CommandLine cli = \n        processCommandLineArgs(joinCommonAndToolOptions(tool.getOptions()), toolArgs);\n\n    List argList = cli.getArgList();\n    argList.addAll(dashDList);\n\n    // for SSL support, try to accommodate relative paths set for SSL store props\n    String solrInstallDir = System.getProperty(\"solr.install.dir\");\n    if (solrInstallDir != null) {\n      checkSslStoreSysProp(solrInstallDir, \"keyStore\");\n      checkSslStoreSysProp(solrInstallDir, \"trustStore\");\n    }\n\n    // run the tool\n    exit(tool.runTool(cli));\n  }\n\n","sourceOld":"  /**\n   * Runs a tool.\n   */\n  public static void main(String[] args) throws Exception {\n    if (args == null || args.length == 0 || args[0] == null || args[0].trim().length() == 0) {\n      System.err.println(\"Invalid command-line args! Must pass the name of a tool to run.\\n\"\n          + \"Supported tools:\\n\");\n      displayToolOptions(System.err);\n      exit(1);\n    }\n\n    String configurerClassName = System.getProperty(\"solr.authentication.httpclient.configurer\");\n    if (configurerClassName!=null) {\n      try {\n        Class c = Class.forName(configurerClassName);\n        HttpClientConfigurer configurer = (HttpClientConfigurer)c.newInstance();\n        HttpClientUtil.setConfigurer(configurer);\n        log.info(\"Set HttpClientConfigurer from: \"+configurerClassName);\n      } catch (Exception ex) {\n        throw new RuntimeException(\"Error during loading of configurer '\"+configurerClassName+\"'.\", ex);\n      }\n    }\n\n    // Determine the tool\n    String toolType = args[0].trim().toLowerCase(Locale.ROOT);\n    Tool tool = newTool(toolType);\n\n    // the parser doesn't like -D props\n    List<String> toolArgList = new ArrayList<String>();\n    List<String> dashDList = new ArrayList<String>();\n    for (int a=1; a < args.length; a++) {\n      String arg = args[a];\n      if (arg.startsWith(\"-D\")) {\n        dashDList.add(arg);\n      } else {\n        toolArgList.add(arg);\n      }\n    }\n    String[] toolArgs = toolArgList.toArray(new String[0]);\n\n    // process command-line args to configure this application\n    CommandLine cli = \n        processCommandLineArgs(joinCommonAndToolOptions(tool.getOptions()), toolArgs);\n\n    List argList = cli.getArgList();\n    argList.addAll(dashDList);\n\n    // for SSL support, try to accommodate relative paths set for SSL store props\n    String solrInstallDir = System.getProperty(\"solr.install.dir\");\n    if (solrInstallDir != null) {\n      checkSslStoreSysProp(solrInstallDir, \"keyStore\");\n      checkSslStoreSysProp(solrInstallDir, \"trustStore\");\n    }\n\n    // run the tool\n    exit(tool.runTool(cli));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"688f23c47b3d5b61d795e3042013aa908716c068","date":1449761553,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#main(String[]).mjava","sourceNew":"  /**\n   * Runs a tool.\n   */\n  public static void main(String[] args) throws Exception {\n    if (args == null || args.length == 0 || args[0] == null || args[0].trim().length() == 0) {\n      System.err.println(\"Invalid command-line args! Must pass the name of a tool to run.\\n\"\n          + \"Supported tools:\\n\");\n      displayToolOptions();\n      exit(1);\n    }\n\n    if (args.length == 1 && Arrays.asList(\"-v\",\"-version\",\"version\").contains(args[0])) {\n      // Simple version tool, no need for its own class\n      System.out.println(Version.LATEST);\n      exit(0);\n    }\n\n    String configurerClassName = System.getProperty(\"solr.authentication.httpclient.configurer\");\n    if (configurerClassName!=null) {\n      try {\n        Class c = Class.forName(configurerClassName);\n        HttpClientConfigurer configurer = (HttpClientConfigurer)c.newInstance();\n        HttpClientUtil.setConfigurer(configurer);\n        log.info(\"Set HttpClientConfigurer from: \"+configurerClassName);\n      } catch (Exception ex) {\n        throw new RuntimeException(\"Error during loading of configurer '\"+configurerClassName+\"'.\", ex);\n      }\n    }\n\n    // Determine the tool\n    String toolType = args[0].trim().toLowerCase(Locale.ROOT);\n    Tool tool = newTool(toolType);\n\n    // the parser doesn't like -D props\n    List<String> toolArgList = new ArrayList<String>();\n    List<String> dashDList = new ArrayList<String>();\n    for (int a=1; a < args.length; a++) {\n      String arg = args[a];\n      if (arg.startsWith(\"-D\")) {\n        dashDList.add(arg);\n      } else {\n        toolArgList.add(arg);\n      }\n    }\n    String[] toolArgs = toolArgList.toArray(new String[0]);\n\n    // process command-line args to configure this application\n    CommandLine cli = \n        processCommandLineArgs(joinCommonAndToolOptions(tool.getOptions()), toolArgs);\n\n    List argList = cli.getArgList();\n    argList.addAll(dashDList);\n\n    // for SSL support, try to accommodate relative paths set for SSL store props\n    String solrInstallDir = System.getProperty(\"solr.install.dir\");\n    if (solrInstallDir != null) {\n      checkSslStoreSysProp(solrInstallDir, \"keyStore\");\n      checkSslStoreSysProp(solrInstallDir, \"trustStore\");\n    }\n\n    // run the tool\n    exit(tool.runTool(cli));\n  }\n\n","sourceOld":"  /**\n   * Runs a tool.\n   */\n  public static void main(String[] args) throws Exception {\n    if (args == null || args.length == 0 || args[0] == null || args[0].trim().length() == 0) {\n      System.err.println(\"Invalid command-line args! Must pass the name of a tool to run.\\n\"\n          + \"Supported tools:\\n\");\n      displayToolOptions(System.err);\n      exit(1);\n    }\n\n    if (args.length == 1 && Arrays.asList(\"-v\",\"-version\",\"version\").contains(args[0])) {\n      // Simple version tool, no need for its own class\n      System.out.println(Version.LATEST);\n      exit(0);\n    }\n\n    String configurerClassName = System.getProperty(\"solr.authentication.httpclient.configurer\");\n    if (configurerClassName!=null) {\n      try {\n        Class c = Class.forName(configurerClassName);\n        HttpClientConfigurer configurer = (HttpClientConfigurer)c.newInstance();\n        HttpClientUtil.setConfigurer(configurer);\n        log.info(\"Set HttpClientConfigurer from: \"+configurerClassName);\n      } catch (Exception ex) {\n        throw new RuntimeException(\"Error during loading of configurer '\"+configurerClassName+\"'.\", ex);\n      }\n    }\n\n    // Determine the tool\n    String toolType = args[0].trim().toLowerCase(Locale.ROOT);\n    Tool tool = newTool(toolType);\n\n    // the parser doesn't like -D props\n    List<String> toolArgList = new ArrayList<String>();\n    List<String> dashDList = new ArrayList<String>();\n    for (int a=1; a < args.length; a++) {\n      String arg = args[a];\n      if (arg.startsWith(\"-D\")) {\n        dashDList.add(arg);\n      } else {\n        toolArgList.add(arg);\n      }\n    }\n    String[] toolArgs = toolArgList.toArray(new String[0]);\n\n    // process command-line args to configure this application\n    CommandLine cli = \n        processCommandLineArgs(joinCommonAndToolOptions(tool.getOptions()), toolArgs);\n\n    List argList = cli.getArgList();\n    argList.addAll(dashDList);\n\n    // for SSL support, try to accommodate relative paths set for SSL store props\n    String solrInstallDir = System.getProperty(\"solr.install.dir\");\n    if (solrInstallDir != null) {\n      checkSslStoreSysProp(solrInstallDir, \"keyStore\");\n      checkSslStoreSysProp(solrInstallDir, \"trustStore\");\n    }\n\n    // run the tool\n    exit(tool.runTool(cli));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"859081acf00749f5dd462772c571d611d4a4d2db","date":1459527719,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#main(String[]).mjava","sourceNew":"  /**\n   * Runs a tool.\n   */\n  public static void main(String[] args) throws Exception {\n    if (args == null || args.length == 0 || args[0] == null || args[0].trim().length() == 0) {\n      System.err.println(\"Invalid command-line args! Must pass the name of a tool to run.\\n\"\n          + \"Supported tools:\\n\");\n      displayToolOptions();\n      exit(1);\n    }\n\n    if (args.length == 1 && Arrays.asList(\"-v\",\"-version\",\"version\").contains(args[0])) {\n      // Simple version tool, no need for its own class\n      System.out.println(Version.LATEST);\n      exit(0);\n    }\n\n    String builderClassName = System.getProperty(\"solr.authentication.httpclient.builder\");\n    if (builderClassName!=null) {\n      try {\n        Class c = Class.forName(builderClassName);\n        SolrHttpClientBuilder builder = (SolrHttpClientBuilder)c.newInstance();\n        HttpClientUtil.setHttpClientBuilder(builder);\n        log.info(\"Set HttpClientConfigurer from: \"+builderClassName);\n      } catch (Exception ex) {\n        throw new RuntimeException(\"Error during loading of configurer '\"+builderClassName+\"'.\", ex);\n      }\n    }\n\n    // Determine the tool\n    String toolType = args[0].trim().toLowerCase(Locale.ROOT);\n    Tool tool = newTool(toolType);\n\n    // the parser doesn't like -D props\n    List<String> toolArgList = new ArrayList<String>();\n    List<String> dashDList = new ArrayList<String>();\n    for (int a=1; a < args.length; a++) {\n      String arg = args[a];\n      if (arg.startsWith(\"-D\")) {\n        dashDList.add(arg);\n      } else {\n        toolArgList.add(arg);\n      }\n    }\n    String[] toolArgs = toolArgList.toArray(new String[0]);\n\n    // process command-line args to configure this application\n    CommandLine cli = \n        processCommandLineArgs(joinCommonAndToolOptions(tool.getOptions()), toolArgs);\n\n    List argList = cli.getArgList();\n    argList.addAll(dashDList);\n\n    // for SSL support, try to accommodate relative paths set for SSL store props\n    String solrInstallDir = System.getProperty(\"solr.install.dir\");\n    if (solrInstallDir != null) {\n      checkSslStoreSysProp(solrInstallDir, \"keyStore\");\n      checkSslStoreSysProp(solrInstallDir, \"trustStore\");\n    }\n\n    // run the tool\n    exit(tool.runTool(cli));\n  }\n\n","sourceOld":"  /**\n   * Runs a tool.\n   */\n  public static void main(String[] args) throws Exception {\n    if (args == null || args.length == 0 || args[0] == null || args[0].trim().length() == 0) {\n      System.err.println(\"Invalid command-line args! Must pass the name of a tool to run.\\n\"\n          + \"Supported tools:\\n\");\n      displayToolOptions();\n      exit(1);\n    }\n\n    if (args.length == 1 && Arrays.asList(\"-v\",\"-version\",\"version\").contains(args[0])) {\n      // Simple version tool, no need for its own class\n      System.out.println(Version.LATEST);\n      exit(0);\n    }\n\n    String configurerClassName = System.getProperty(\"solr.authentication.httpclient.configurer\");\n    if (configurerClassName!=null) {\n      try {\n        Class c = Class.forName(configurerClassName);\n        HttpClientConfigurer configurer = (HttpClientConfigurer)c.newInstance();\n        HttpClientUtil.setConfigurer(configurer);\n        log.info(\"Set HttpClientConfigurer from: \"+configurerClassName);\n      } catch (Exception ex) {\n        throw new RuntimeException(\"Error during loading of configurer '\"+configurerClassName+\"'.\", ex);\n      }\n    }\n\n    // Determine the tool\n    String toolType = args[0].trim().toLowerCase(Locale.ROOT);\n    Tool tool = newTool(toolType);\n\n    // the parser doesn't like -D props\n    List<String> toolArgList = new ArrayList<String>();\n    List<String> dashDList = new ArrayList<String>();\n    for (int a=1; a < args.length; a++) {\n      String arg = args[a];\n      if (arg.startsWith(\"-D\")) {\n        dashDList.add(arg);\n      } else {\n        toolArgList.add(arg);\n      }\n    }\n    String[] toolArgs = toolArgList.toArray(new String[0]);\n\n    // process command-line args to configure this application\n    CommandLine cli = \n        processCommandLineArgs(joinCommonAndToolOptions(tool.getOptions()), toolArgs);\n\n    List argList = cli.getArgList();\n    argList.addAll(dashDList);\n\n    // for SSL support, try to accommodate relative paths set for SSL store props\n    String solrInstallDir = System.getProperty(\"solr.install.dir\");\n    if (solrInstallDir != null) {\n      checkSslStoreSysProp(solrInstallDir, \"keyStore\");\n      checkSslStoreSysProp(solrInstallDir, \"trustStore\");\n    }\n\n    // run the tool\n    exit(tool.runTool(cli));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9272a617a9cbebf86be127014bbbacd7cf8f8e83","date":1467480344,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#main(String[]).mjava","sourceNew":"  /**\n   * Runs a tool.\n   */\n  public static void main(String[] args) throws Exception {\n    if (args == null || args.length == 0 || args[0] == null || args[0].trim().length() == 0) {\n      System.err.println(\"Invalid command-line args! Must pass the name of a tool to run.\\n\"\n          + \"Supported tools:\\n\");\n      displayToolOptions();\n      exit(1);\n    }\n\n    if (args.length == 1 && Arrays.asList(\"-v\",\"-version\",\"version\").contains(args[0])) {\n      // Simple version tool, no need for its own class\n      System.out.println(Version.LATEST);\n      exit(0);\n    }\n\n    String builderClassName = System.getProperty(\"solr.authentication.httpclient.builder\");\n    if (builderClassName!=null) {\n      try {\n        Class c = Class.forName(builderClassName);\n        SolrHttpClientBuilder builder = (SolrHttpClientBuilder)c.newInstance();\n        HttpClientUtil.setHttpClientBuilder(builder);\n        log.info(\"Set HttpClientConfigurer from: \"+builderClassName);\n      } catch (Exception ex) {\n        log.error(ex.getMessage());\n        throw new RuntimeException(\"Error during loading of configurer '\"+builderClassName+\"'.\", ex);\n      }\n    }\n\n    // Determine the tool\n    String toolType = args[0].trim().toLowerCase(Locale.ROOT);\n    Tool tool = newTool(toolType);\n\n    // the parser doesn't like -D props\n    List<String> toolArgList = new ArrayList<String>();\n    List<String> dashDList = new ArrayList<String>();\n    for (int a=1; a < args.length; a++) {\n      String arg = args[a];\n      if (arg.startsWith(\"-D\")) {\n        dashDList.add(arg);\n      } else {\n        toolArgList.add(arg);\n      }\n    }\n    String[] toolArgs = toolArgList.toArray(new String[0]);\n\n    // process command-line args to configure this application\n    CommandLine cli = \n        processCommandLineArgs(joinCommonAndToolOptions(tool.getOptions()), toolArgs);\n\n    List argList = cli.getArgList();\n    argList.addAll(dashDList);\n\n    // for SSL support, try to accommodate relative paths set for SSL store props\n    String solrInstallDir = System.getProperty(\"solr.install.dir\");\n    if (solrInstallDir != null) {\n      checkSslStoreSysProp(solrInstallDir, \"keyStore\");\n      checkSslStoreSysProp(solrInstallDir, \"trustStore\");\n    }\n\n    // run the tool\n    exit(tool.runTool(cli));\n  }\n\n","sourceOld":"  /**\n   * Runs a tool.\n   */\n  public static void main(String[] args) throws Exception {\n    if (args == null || args.length == 0 || args[0] == null || args[0].trim().length() == 0) {\n      System.err.println(\"Invalid command-line args! Must pass the name of a tool to run.\\n\"\n          + \"Supported tools:\\n\");\n      displayToolOptions();\n      exit(1);\n    }\n\n    if (args.length == 1 && Arrays.asList(\"-v\",\"-version\",\"version\").contains(args[0])) {\n      // Simple version tool, no need for its own class\n      System.out.println(Version.LATEST);\n      exit(0);\n    }\n\n    String builderClassName = System.getProperty(\"solr.authentication.httpclient.builder\");\n    if (builderClassName!=null) {\n      try {\n        Class c = Class.forName(builderClassName);\n        SolrHttpClientBuilder builder = (SolrHttpClientBuilder)c.newInstance();\n        HttpClientUtil.setHttpClientBuilder(builder);\n        log.info(\"Set HttpClientConfigurer from: \"+builderClassName);\n      } catch (Exception ex) {\n        throw new RuntimeException(\"Error during loading of configurer '\"+builderClassName+\"'.\", ex);\n      }\n    }\n\n    // Determine the tool\n    String toolType = args[0].trim().toLowerCase(Locale.ROOT);\n    Tool tool = newTool(toolType);\n\n    // the parser doesn't like -D props\n    List<String> toolArgList = new ArrayList<String>();\n    List<String> dashDList = new ArrayList<String>();\n    for (int a=1; a < args.length; a++) {\n      String arg = args[a];\n      if (arg.startsWith(\"-D\")) {\n        dashDList.add(arg);\n      } else {\n        toolArgList.add(arg);\n      }\n    }\n    String[] toolArgs = toolArgList.toArray(new String[0]);\n\n    // process command-line args to configure this application\n    CommandLine cli = \n        processCommandLineArgs(joinCommonAndToolOptions(tool.getOptions()), toolArgs);\n\n    List argList = cli.getArgList();\n    argList.addAll(dashDList);\n\n    // for SSL support, try to accommodate relative paths set for SSL store props\n    String solrInstallDir = System.getProperty(\"solr.install.dir\");\n    if (solrInstallDir != null) {\n      checkSslStoreSysProp(solrInstallDir, \"keyStore\");\n      checkSslStoreSysProp(solrInstallDir, \"trustStore\");\n    }\n\n    // run the tool\n    exit(tool.runTool(cli));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d1e9a21218cf0ffd81625a2f105dc388aa3097d","date":1476967652,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#main(String[]).mjava","sourceNew":"  /**\n   * Runs a tool.\n   */\n  public static void main(String[] args) throws Exception {\n    if (args == null || args.length == 0 || args[0] == null || args[0].trim().length() == 0) {\n      System.err.println(\"Invalid command-line args! Must pass the name of a tool to run.\\n\"\n          + \"Supported tools:\\n\");\n      displayToolOptions();\n      exit(1);\n    }\n\n    if (args.length == 1 && Arrays.asList(\"-v\",\"-version\",\"version\").contains(args[0])) {\n      // Simple version tool, no need for its own class\n      System.out.println(Version.LATEST);\n      exit(0);\n    }\n\n    Tool tool = findTool(args);\n    CommandLine cli = parseCmdLine(args, tool.getOptions());\n    System.exit(tool.runTool(cli));\n  }\n\n","sourceOld":"  /**\n   * Runs a tool.\n   */\n  public static void main(String[] args) throws Exception {\n    if (args == null || args.length == 0 || args[0] == null || args[0].trim().length() == 0) {\n      System.err.println(\"Invalid command-line args! Must pass the name of a tool to run.\\n\"\n          + \"Supported tools:\\n\");\n      displayToolOptions();\n      exit(1);\n    }\n\n    if (args.length == 1 && Arrays.asList(\"-v\",\"-version\",\"version\").contains(args[0])) {\n      // Simple version tool, no need for its own class\n      System.out.println(Version.LATEST);\n      exit(0);\n    }\n\n    String builderClassName = System.getProperty(\"solr.authentication.httpclient.builder\");\n    if (builderClassName!=null) {\n      try {\n        Class c = Class.forName(builderClassName);\n        SolrHttpClientBuilder builder = (SolrHttpClientBuilder)c.newInstance();\n        HttpClientUtil.setHttpClientBuilder(builder);\n        log.info(\"Set HttpClientConfigurer from: \"+builderClassName);\n      } catch (Exception ex) {\n        log.error(ex.getMessage());\n        throw new RuntimeException(\"Error during loading of configurer '\"+builderClassName+\"'.\", ex);\n      }\n    }\n\n    // Determine the tool\n    String toolType = args[0].trim().toLowerCase(Locale.ROOT);\n    Tool tool = newTool(toolType);\n\n    // the parser doesn't like -D props\n    List<String> toolArgList = new ArrayList<String>();\n    List<String> dashDList = new ArrayList<String>();\n    for (int a=1; a < args.length; a++) {\n      String arg = args[a];\n      if (arg.startsWith(\"-D\")) {\n        dashDList.add(arg);\n      } else {\n        toolArgList.add(arg);\n      }\n    }\n    String[] toolArgs = toolArgList.toArray(new String[0]);\n\n    // process command-line args to configure this application\n    CommandLine cli = \n        processCommandLineArgs(joinCommonAndToolOptions(tool.getOptions()), toolArgs);\n\n    List argList = cli.getArgList();\n    argList.addAll(dashDList);\n\n    // for SSL support, try to accommodate relative paths set for SSL store props\n    String solrInstallDir = System.getProperty(\"solr.install.dir\");\n    if (solrInstallDir != null) {\n      checkSslStoreSysProp(solrInstallDir, \"keyStore\");\n      checkSslStoreSysProp(solrInstallDir, \"trustStore\");\n    }\n\n    // run the tool\n    exit(tool.runTool(cli));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6b1b1219af145d9cbc08feaa968f7e515ab3f4e","date":1476974235,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#main(String[]).mjava","sourceNew":"  /**\n   * Runs a tool.\n   */\n  public static void main(String[] args) throws Exception {\n    if (args == null || args.length == 0 || args[0] == null || args[0].trim().length() == 0) {\n      System.err.println(\"Invalid command-line args! Must pass the name of a tool to run.\\n\"\n          + \"Supported tools:\\n\");\n      displayToolOptions();\n      exit(1);\n    }\n\n    if (args.length == 1 && Arrays.asList(\"-v\",\"-version\",\"version\").contains(args[0])) {\n      // Simple version tool, no need for its own class\n      System.out.println(Version.LATEST);\n      exit(0);\n    }\n\n    Tool tool = findTool(args);\n    CommandLine cli = parseCmdLine(args, tool.getOptions());\n    System.exit(tool.runTool(cli));\n  }\n\n","sourceOld":"  /**\n   * Runs a tool.\n   */\n  public static void main(String[] args) throws Exception {\n    if (args == null || args.length == 0 || args[0] == null || args[0].trim().length() == 0) {\n      System.err.println(\"Invalid command-line args! Must pass the name of a tool to run.\\n\"\n          + \"Supported tools:\\n\");\n      displayToolOptions();\n      exit(1);\n    }\n\n    if (args.length == 1 && Arrays.asList(\"-v\",\"-version\",\"version\").contains(args[0])) {\n      // Simple version tool, no need for its own class\n      System.out.println(Version.LATEST);\n      exit(0);\n    }\n\n    String builderClassName = System.getProperty(\"solr.authentication.httpclient.builder\");\n    if (builderClassName!=null) {\n      try {\n        Class c = Class.forName(builderClassName);\n        SolrHttpClientBuilder builder = (SolrHttpClientBuilder)c.newInstance();\n        HttpClientUtil.setHttpClientBuilder(builder);\n        log.info(\"Set HttpClientConfigurer from: \"+builderClassName);\n      } catch (Exception ex) {\n        log.error(ex.getMessage());\n        throw new RuntimeException(\"Error during loading of configurer '\"+builderClassName+\"'.\", ex);\n      }\n    }\n\n    // Determine the tool\n    String toolType = args[0].trim().toLowerCase(Locale.ROOT);\n    Tool tool = newTool(toolType);\n\n    // the parser doesn't like -D props\n    List<String> toolArgList = new ArrayList<String>();\n    List<String> dashDList = new ArrayList<String>();\n    for (int a=1; a < args.length; a++) {\n      String arg = args[a];\n      if (arg.startsWith(\"-D\")) {\n        dashDList.add(arg);\n      } else {\n        toolArgList.add(arg);\n      }\n    }\n    String[] toolArgs = toolArgList.toArray(new String[0]);\n\n    // process command-line args to configure this application\n    CommandLine cli = \n        processCommandLineArgs(joinCommonAndToolOptions(tool.getOptions()), toolArgs);\n\n    List argList = cli.getArgList();\n    argList.addAll(dashDList);\n\n    // for SSL support, try to accommodate relative paths set for SSL store props\n    String solrInstallDir = System.getProperty(\"solr.install.dir\");\n    if (solrInstallDir != null) {\n      checkSslStoreSysProp(solrInstallDir, \"keyStore\");\n      checkSslStoreSysProp(solrInstallDir, \"trustStore\");\n    }\n\n    // run the tool\n    exit(tool.runTool(cli));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#main(String[]).mjava","sourceNew":"  /**\n   * Runs a tool.\n   */\n  public static void main(String[] args) throws Exception {\n    if (args == null || args.length == 0 || args[0] == null || args[0].trim().length() == 0) {\n      System.err.println(\"Invalid command-line args! Must pass the name of a tool to run.\\n\"\n          + \"Supported tools:\\n\");\n      displayToolOptions();\n      exit(1);\n    }\n\n    if (args.length == 1 && Arrays.asList(\"-v\",\"-version\",\"version\").contains(args[0])) {\n      // Simple version tool, no need for its own class\n      System.out.println(Version.LATEST);\n      exit(0);\n    }\n\n    Tool tool = findTool(args);\n    CommandLine cli = parseCmdLine(args, tool.getOptions());\n    System.exit(tool.runTool(cli));\n  }\n\n","sourceOld":"  /**\n   * Runs a tool.\n   */\n  public static void main(String[] args) throws Exception {\n    if (args == null || args.length == 0 || args[0] == null || args[0].trim().length() == 0) {\n      System.err.println(\"Invalid command-line args! Must pass the name of a tool to run.\\n\"\n          + \"Supported tools:\\n\");\n      displayToolOptions();\n      exit(1);\n    }\n\n    if (args.length == 1 && Arrays.asList(\"-v\",\"-version\",\"version\").contains(args[0])) {\n      // Simple version tool, no need for its own class\n      System.out.println(Version.LATEST);\n      exit(0);\n    }\n\n    String builderClassName = System.getProperty(\"solr.authentication.httpclient.builder\");\n    if (builderClassName!=null) {\n      try {\n        Class c = Class.forName(builderClassName);\n        SolrHttpClientBuilder builder = (SolrHttpClientBuilder)c.newInstance();\n        HttpClientUtil.setHttpClientBuilder(builder);\n        log.info(\"Set HttpClientConfigurer from: \"+builderClassName);\n      } catch (Exception ex) {\n        throw new RuntimeException(\"Error during loading of configurer '\"+builderClassName+\"'.\", ex);\n      }\n    }\n\n    // Determine the tool\n    String toolType = args[0].trim().toLowerCase(Locale.ROOT);\n    Tool tool = newTool(toolType);\n\n    // the parser doesn't like -D props\n    List<String> toolArgList = new ArrayList<String>();\n    List<String> dashDList = new ArrayList<String>();\n    for (int a=1; a < args.length; a++) {\n      String arg = args[a];\n      if (arg.startsWith(\"-D\")) {\n        dashDList.add(arg);\n      } else {\n        toolArgList.add(arg);\n      }\n    }\n    String[] toolArgs = toolArgList.toArray(new String[0]);\n\n    // process command-line args to configure this application\n    CommandLine cli = \n        processCommandLineArgs(joinCommonAndToolOptions(tool.getOptions()), toolArgs);\n\n    List argList = cli.getArgList();\n    argList.addAll(dashDList);\n\n    // for SSL support, try to accommodate relative paths set for SSL store props\n    String solrInstallDir = System.getProperty(\"solr.install.dir\");\n    if (solrInstallDir != null) {\n      checkSslStoreSysProp(solrInstallDir, \"keyStore\");\n      checkSslStoreSysProp(solrInstallDir, \"trustStore\");\n    }\n\n    // run the tool\n    exit(tool.runTool(cli));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f85e0317037f2f84a7379222c6683b5d4b29a868","date":1494955156,"type":3,"author":"Mark Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#main(String[]).mjava","sourceNew":"  /**\n   * Runs a tool.\n   */\n  public static void main(String[] args) throws Exception {\n    if (args == null || args.length == 0 || args[0] == null || args[0].trim().length() == 0) {\n      System.err.println(\"Invalid command-line args! Must pass the name of a tool to run.\\n\"\n          + \"Supported tools:\\n\");\n      displayToolOptions();\n      exit(1);\n    }\n\n    if (args.length == 1 && Arrays.asList(\"-v\",\"-version\",\"version\").contains(args[0])) {\n      // Simple version tool, no need for its own class\n      System.out.println(Version.LATEST);\n      exit(0);\n    }\n\n    SSLConfigurationsFactory.current().init();\n\n    Tool tool = findTool(args);\n    CommandLine cli = parseCmdLine(args, tool.getOptions());\n    System.exit(tool.runTool(cli));\n  }\n\n","sourceOld":"  /**\n   * Runs a tool.\n   */\n  public static void main(String[] args) throws Exception {\n    if (args == null || args.length == 0 || args[0] == null || args[0].trim().length() == 0) {\n      System.err.println(\"Invalid command-line args! Must pass the name of a tool to run.\\n\"\n          + \"Supported tools:\\n\");\n      displayToolOptions();\n      exit(1);\n    }\n\n    if (args.length == 1 && Arrays.asList(\"-v\",\"-version\",\"version\").contains(args[0])) {\n      // Simple version tool, no need for its own class\n      System.out.println(Version.LATEST);\n      exit(0);\n    }\n\n    Tool tool = findTool(args);\n    CommandLine cli = parseCmdLine(args, tool.getOptions());\n    System.exit(tool.runTool(cli));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f","date":1495081498,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#main(String[]).mjava","sourceNew":"  /**\n   * Runs a tool.\n   */\n  public static void main(String[] args) throws Exception {\n    if (args == null || args.length == 0 || args[0] == null || args[0].trim().length() == 0) {\n      System.err.println(\"Invalid command-line args! Must pass the name of a tool to run.\\n\"\n          + \"Supported tools:\\n\");\n      displayToolOptions();\n      exit(1);\n    }\n\n    if (args.length == 1 && Arrays.asList(\"-v\",\"-version\",\"version\").contains(args[0])) {\n      // Simple version tool, no need for its own class\n      System.out.println(Version.LATEST);\n      exit(0);\n    }\n\n    SSLConfigurationsFactory.current().init();\n\n    Tool tool = findTool(args);\n    CommandLine cli = parseCmdLine(args, tool.getOptions());\n    System.exit(tool.runTool(cli));\n  }\n\n","sourceOld":"  /**\n   * Runs a tool.\n   */\n  public static void main(String[] args) throws Exception {\n    if (args == null || args.length == 0 || args[0] == null || args[0].trim().length() == 0) {\n      System.err.println(\"Invalid command-line args! Must pass the name of a tool to run.\\n\"\n          + \"Supported tools:\\n\");\n      displayToolOptions();\n      exit(1);\n    }\n\n    if (args.length == 1 && Arrays.asList(\"-v\",\"-version\",\"version\").contains(args[0])) {\n      // Simple version tool, no need for its own class\n      System.out.println(Version.LATEST);\n      exit(0);\n    }\n\n    Tool tool = findTool(args);\n    CommandLine cli = parseCmdLine(args, tool.getOptions());\n    System.exit(tool.runTool(cli));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#main(String[]).mjava","sourceNew":"  /**\n   * Runs a tool.\n   */\n  public static void main(String[] args) throws Exception {\n    if (args == null || args.length == 0 || args[0] == null || args[0].trim().length() == 0) {\n      System.err.println(\"Invalid command-line args! Must pass the name of a tool to run.\\n\"\n          + \"Supported tools:\\n\");\n      displayToolOptions();\n      exit(1);\n    }\n\n    if (args.length == 1 && Arrays.asList(\"-v\",\"-version\",\"version\").contains(args[0])) {\n      // Simple version tool, no need for its own class\n      System.out.println(Version.LATEST);\n      exit(0);\n    }\n\n    SSLConfigurationsFactory.current().init();\n\n    Tool tool = findTool(args);\n    CommandLine cli = parseCmdLine(args, tool.getOptions());\n    System.exit(tool.runTool(cli));\n  }\n\n","sourceOld":"  /**\n   * Runs a tool.\n   */\n  public static void main(String[] args) throws Exception {\n    if (args == null || args.length == 0 || args[0] == null || args[0].trim().length() == 0) {\n      System.err.println(\"Invalid command-line args! Must pass the name of a tool to run.\\n\"\n          + \"Supported tools:\\n\");\n      displayToolOptions();\n      exit(1);\n    }\n\n    if (args.length == 1 && Arrays.asList(\"-v\",\"-version\",\"version\").contains(args[0])) {\n      // Simple version tool, no need for its own class\n      System.out.println(Version.LATEST);\n      exit(0);\n    }\n\n    Tool tool = findTool(args);\n    CommandLine cli = parseCmdLine(args, tool.getOptions());\n    System.exit(tool.runTool(cli));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b79a5db147a1c6f95d1625ddbc3561ef56955225","date":1528848080,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#main(String[]).mjava","sourceNew":"  /**\n   * Runs a tool.\n   */\n  public static void main(String[] args) throws Exception {\n    if (args == null || args.length == 0 || args[0] == null || args[0].trim().length() == 0) {\n      System.err.println(\"Invalid command-line args! Must pass the name of a tool to run.\\n\"\n          + \"Supported tools:\\n\");\n      displayToolOptions();\n      exit(1);\n    }\n\n    if (args.length == 1 && Arrays.asList(\"-v\",\"-version\",\"version\").contains(args[0])) {\n      // Simple version tool, no need for its own class\n      System.out.println(Version.LATEST);\n      exit(0);\n    }\n\n    SSLConfigurationsFactory.current().init();\n\n    Tool tool = findTool(args);\n    CommandLine cli = parseCmdLine(args, tool.getOptions());\n    System.exit(tool.runTool(cli));\n  }\n\n","sourceOld":"  /**\n   * Runs a tool.\n   */\n  public static void main(String[] args) throws Exception {\n    if (args == null || args.length == 0 || args[0] == null || args[0].trim().length() == 0) {\n      System.err.println(\"Invalid command-line args! Must pass the name of a tool to run.\\n\"\n          + \"Supported tools:\\n\");\n      displayToolOptions();\n      exit(1);\n    }\n\n    if (args.length == 1 && Arrays.asList(\"-v\",\"-version\",\"version\").contains(args[0])) {\n      // Simple version tool, no need for its own class\n      System.out.println(Version.LATEST);\n      exit(0);\n    }\n\n    SSLConfigurationsFactory.current().init();\n\n    Tool tool = findTool(args);\n    CommandLine cli = parseCmdLine(args, tool.getOptions());\n    System.exit(tool.runTool(cli));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#main(String[]).mjava","sourceNew":"  /**\n   * Runs a tool.\n   */\n  public static void main(String[] args) throws Exception {\n    if (args == null || args.length == 0 || args[0] == null || args[0].trim().length() == 0) {\n      System.err.println(\"Invalid command-line args! Must pass the name of a tool to run.\\n\"\n          + \"Supported tools:\\n\");\n      displayToolOptions();\n      exit(1);\n    }\n\n    if (args.length == 1 && Arrays.asList(\"-v\",\"-version\",\"version\").contains(args[0])) {\n      // Simple version tool, no need for its own class\n      System.out.println(Version.LATEST);\n      exit(0);\n    }\n\n    SSLConfigurationsFactory.current().init();\n\n    Tool tool = findTool(args);\n    CommandLine cli = parseCmdLine(args, tool.getOptions());\n    System.exit(tool.runTool(cli));\n  }\n\n","sourceOld":"  /**\n   * Runs a tool.\n   */\n  public static void main(String[] args) throws Exception {\n    if (args == null || args.length == 0 || args[0] == null || args[0].trim().length() == 0) {\n      System.err.println(\"Invalid command-line args! Must pass the name of a tool to run.\\n\"\n          + \"Supported tools:\\n\");\n      displayToolOptions();\n      exit(1);\n    }\n\n    if (args.length == 1 && Arrays.asList(\"-v\",\"-version\",\"version\").contains(args[0])) {\n      // Simple version tool, no need for its own class\n      System.out.println(Version.LATEST);\n      exit(0);\n    }\n\n    SSLConfigurationsFactory.current().init();\n\n    Tool tool = findTool(args);\n    CommandLine cli = parseCmdLine(args, tool.getOptions());\n    System.exit(tool.runTool(cli));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#main(String[]).mjava","sourceNew":"  /**\n   * Runs a tool.\n   */\n  public static void main(String[] args) throws Exception {\n    if (args == null || args.length == 0 || args[0] == null || args[0].trim().length() == 0) {\n      System.err.println(\"Invalid command-line args! Must pass the name of a tool to run.\\n\"\n          + \"Supported tools:\\n\");\n      displayToolOptions();\n      exit(1);\n    }\n\n    if (args.length == 1 && Arrays.asList(\"-v\",\"-version\",\"version\").contains(args[0])) {\n      // Simple version tool, no need for its own class\n      System.out.println(Version.LATEST);\n      exit(0);\n    }\n\n    SSLConfigurationsFactory.current().init();\n\n    Tool tool = findTool(args);\n    CommandLine cli = parseCmdLine(args, tool.getOptions());\n    System.exit(tool.runTool(cli));\n  }\n\n","sourceOld":"  /**\n   * Runs a tool.\n   */\n  public static void main(String[] args) throws Exception {\n    if (args == null || args.length == 0 || args[0] == null || args[0].trim().length() == 0) {\n      System.err.println(\"Invalid command-line args! Must pass the name of a tool to run.\\n\"\n          + \"Supported tools:\\n\");\n      displayToolOptions();\n      exit(1);\n    }\n\n    if (args.length == 1 && Arrays.asList(\"-v\",\"-version\",\"version\").contains(args[0])) {\n      // Simple version tool, no need for its own class\n      System.out.println(Version.LATEST);\n      exit(0);\n    }\n\n    SSLConfigurationsFactory.current().init();\n\n    Tool tool = findTool(args);\n    CommandLine cli = parseCmdLine(args, tool.getOptions());\n    System.exit(tool.runTool(cli));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#main(String[]).mjava","sourceNew":"  /**\n   * Runs a tool.\n   */\n  public static void main(String[] args) throws Exception {\n    if (args == null || args.length == 0 || args[0] == null || args[0].trim().length() == 0) {\n      CLIO.err(\"Invalid command-line args! Must pass the name of a tool to run.\\n\"\n          + \"Supported tools:\\n\");\n      displayToolOptions();\n      exit(1);\n    }\n\n    if (args.length == 1 && Arrays.asList(\"-v\",\"-version\",\"version\").contains(args[0])) {\n      // Simple version tool, no need for its own class\n      CLIO.out(Version.LATEST.toString());\n      exit(0);\n    }\n\n    SSLConfigurationsFactory.current().init();\n\n    Tool tool = findTool(args);\n    CommandLine cli = parseCmdLine(args, tool.getOptions());\n    System.exit(tool.runTool(cli));\n  }\n\n","sourceOld":"  /**\n   * Runs a tool.\n   */\n  public static void main(String[] args) throws Exception {\n    if (args == null || args.length == 0 || args[0] == null || args[0].trim().length() == 0) {\n      System.err.println(\"Invalid command-line args! Must pass the name of a tool to run.\\n\"\n          + \"Supported tools:\\n\");\n      displayToolOptions();\n      exit(1);\n    }\n\n    if (args.length == 1 && Arrays.asList(\"-v\",\"-version\",\"version\").contains(args[0])) {\n      // Simple version tool, no need for its own class\n      System.out.println(Version.LATEST);\n      exit(0);\n    }\n\n    SSLConfigurationsFactory.current().init();\n\n    Tool tool = findTool(args);\n    CommandLine cli = parseCmdLine(args, tool.getOptions());\n    System.exit(tool.runTool(cli));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f85e0317037f2f84a7379222c6683b5d4b29a868":["c6b1b1219af145d9cbc08feaa968f7e515ab3f4e"],"58b7eb80017f1c5b32035176b965fa0cc0287d04":["a39e2b1b10e1030ae81cfabe5ade68d2b9917c03"],"ecd88fb577abcc38c43fcdec15df8f2f3eb25a02":["4ca20be81c9284c840498143264e583ccbb8525a"],"5d1e9a21218cf0ffd81625a2f105dc388aa3097d":["9272a617a9cbebf86be127014bbbacd7cf8f8e83"],"a39e2b1b10e1030ae81cfabe5ade68d2b9917c03":["209c0259a9b7087b2111411ec790d6557ef86307"],"c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f":["c6b1b1219af145d9cbc08feaa968f7e515ab3f4e","f85e0317037f2f84a7379222c6683b5d4b29a868"],"c6b1b1219af145d9cbc08feaa968f7e515ab3f4e":["9272a617a9cbebf86be127014bbbacd7cf8f8e83","5d1e9a21218cf0ffd81625a2f105dc388aa3097d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["859081acf00749f5dd462772c571d611d4a4d2db","5d1e9a21218cf0ffd81625a2f105dc388aa3097d"],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f"],"4ca20be81c9284c840498143264e583ccbb8525a":["58b7eb80017f1c5b32035176b965fa0cc0287d04"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["c6b1b1219af145d9cbc08feaa968f7e515ab3f4e","c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f"],"859081acf00749f5dd462772c571d611d4a4d2db":["688f23c47b3d5b61d795e3042013aa908716c068"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f","b79a5db147a1c6f95d1625ddbc3561ef56955225"],"688f23c47b3d5b61d795e3042013aa908716c068":["ecd88fb577abcc38c43fcdec15df8f2f3eb25a02"],"709714c6ee47950678dd2d2ef4e0473886909226":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9272a617a9cbebf86be127014bbbacd7cf8f8e83":["859081acf00749f5dd462772c571d611d4a4d2db"],"209c0259a9b7087b2111411ec790d6557ef86307":["709714c6ee47950678dd2d2ef4e0473886909226"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["b79a5db147a1c6f95d1625ddbc3561ef56955225"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f","b79a5db147a1c6f95d1625ddbc3561ef56955225"]},"commit2Childs":{"f85e0317037f2f84a7379222c6683b5d4b29a868":["c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f"],"58b7eb80017f1c5b32035176b965fa0cc0287d04":["4ca20be81c9284c840498143264e583ccbb8525a"],"ecd88fb577abcc38c43fcdec15df8f2f3eb25a02":["688f23c47b3d5b61d795e3042013aa908716c068"],"5d1e9a21218cf0ffd81625a2f105dc388aa3097d":["c6b1b1219af145d9cbc08feaa968f7e515ab3f4e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a39e2b1b10e1030ae81cfabe5ade68d2b9917c03":["58b7eb80017f1c5b32035176b965fa0cc0287d04"],"c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f":["b79a5db147a1c6f95d1625ddbc3561ef56955225","e9017cf144952056066919f1ebc7897ff9bd71b1","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"c6b1b1219af145d9cbc08feaa968f7e515ab3f4e":["f85e0317037f2f84a7379222c6683b5d4b29a868","c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f","e9017cf144952056066919f1ebc7897ff9bd71b1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"4ca20be81c9284c840498143264e583ccbb8525a":["ecd88fb577abcc38c43fcdec15df8f2f3eb25a02"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"859081acf00749f5dd462772c571d611d4a4d2db":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","9272a617a9cbebf86be127014bbbacd7cf8f8e83"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"688f23c47b3d5b61d795e3042013aa908716c068":["859081acf00749f5dd462772c571d611d4a4d2db"],"709714c6ee47950678dd2d2ef4e0473886909226":["209c0259a9b7087b2111411ec790d6557ef86307"],"9272a617a9cbebf86be127014bbbacd7cf8f8e83":["5d1e9a21218cf0ffd81625a2f105dc388aa3097d","c6b1b1219af145d9cbc08feaa968f7e515ab3f4e"],"209c0259a9b7087b2111411ec790d6557ef86307":["a39e2b1b10e1030ae81cfabe5ade68d2b9917c03"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["709714c6ee47950678dd2d2ef4e0473886909226"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e9017cf144952056066919f1ebc7897ff9bd71b1","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}