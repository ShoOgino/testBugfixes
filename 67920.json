{"path":"solr/core/src/java/org/apache/solr/analysis/MappingCharFilterFactory#parseRules(List[String],NormalizeCharMap.Builder).mjava","commits":[{"id":"b4e5bbc7f726dbcc466cb9b3c029d539a06f6545","date":1336310014,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/MappingCharFilterFactory#parseRules(List[String],NormalizeCharMap.Builder).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/MappingCharFilterFactory#parseRules(List[String],NormalizeCharMap).mjava","sourceNew":"  protected void parseRules( List<String> rules, NormalizeCharMap.Builder builder ){\n    for( String rule : rules ){\n      Matcher m = p.matcher( rule );\n      if( !m.find() )\n        throw new InitializationException(\"Invalid Mapping Rule : [\" + rule + \"], file = \" + mapping);\n      builder.add( parseString( m.group( 1 ) ), parseString( m.group( 2 ) ) );\n    }\n  }\n\n","sourceOld":"  protected void parseRules( List<String> rules, NormalizeCharMap normMap ){\n    for( String rule : rules ){\n      Matcher m = p.matcher( rule );\n      if( !m.find() )\n        throw new InitializationException(\"Invalid Mapping Rule : [\" + rule + \"], file = \" + mapping);\n      normMap.add( parseString( m.group( 1 ) ), parseString( m.group( 2 ) ) );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3241e06e642196396b80bb293acd9c0814d079e0","date":1343094999,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/MappingCharFilterFactory#parseRules(List[String],NormalizeCharMap.Builder).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/MappingCharFilterFactory#parseRules(List[String],NormalizeCharMap.Builder).mjava","sourceNew":"  protected void parseRules( List<String> rules, NormalizeCharMap.Builder builder ){\n    for( String rule : rules ){\n      Matcher m = p.matcher( rule );\n      if( !m.find() )\n        throw new InitializationException(\"Invalid Mapping Rule : [\" + rule + \"], file = \" + mapping);\n      builder.add( parseString( m.group( 1 ) ), parseString( m.group( 2 ) ) );\n    }\n  }\n\n","sourceOld":"  protected void parseRules( List<String> rules, NormalizeCharMap.Builder builder ){\n    for( String rule : rules ){\n      Matcher m = p.matcher( rule );\n      if( !m.find() )\n        throw new InitializationException(\"Invalid Mapping Rule : [\" + rule + \"], file = \" + mapping);\n      builder.add( parseString( m.group( 1 ) ), parseString( m.group( 2 ) ) );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/MappingCharFilterFactory#parseRules(List[String],NormalizeCharMap.Builder).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/MappingCharFilterFactory#parseRules(List[String],NormalizeCharMap.Builder).mjava","sourceNew":"  protected void parseRules( List<String> rules, NormalizeCharMap.Builder builder ){\n    for( String rule : rules ){\n      Matcher m = p.matcher( rule );\n      if( !m.find() )\n        throw new InitializationException(\"Invalid Mapping Rule : [\" + rule + \"], file = \" + mapping);\n      builder.add( parseString( m.group( 1 ) ), parseString( m.group( 2 ) ) );\n    }\n  }\n\n","sourceOld":"  protected void parseRules( List<String> rules, NormalizeCharMap.Builder builder ){\n    for( String rule : rules ){\n      Matcher m = p.matcher( rule );\n      if( !m.find() )\n        throw new InitializationException(\"Invalid Mapping Rule : [\" + rule + \"], file = \" + mapping);\n      builder.add( parseString( m.group( 1 ) ), parseString( m.group( 2 ) ) );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/analysis/MappingCharFilterFactory#parseRules(List[String],NormalizeCharMap.Builder).mjava","sourceNew":null,"sourceOld":"  protected void parseRules( List<String> rules, NormalizeCharMap.Builder builder ){\n    for( String rule : rules ){\n      Matcher m = p.matcher( rule );\n      if( !m.find() )\n        throw new InitializationException(\"Invalid Mapping Rule : [\" + rule + \"], file = \" + mapping);\n      builder.add( parseString( m.group( 1 ) ), parseString( m.group( 2 ) ) );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/analysis/MappingCharFilterFactory#parseRules(List[String],NormalizeCharMap.Builder).mjava","sourceNew":null,"sourceOld":"  protected void parseRules( List<String> rules, NormalizeCharMap.Builder builder ){\n    for( String rule : rules ){\n      Matcher m = p.matcher( rule );\n      if( !m.find() )\n        throw new InitializationException(\"Invalid Mapping Rule : [\" + rule + \"], file = \" + mapping);\n      builder.add( parseString( m.group( 1 ) ), parseString( m.group( 2 ) ) );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["b4e5bbc7f726dbcc466cb9b3c029d539a06f6545","5a1a22b1ad88b436661458df567f3fdb446392a4"],"b4e5bbc7f726dbcc466cb9b3c029d539a06f6545":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["b4e5bbc7f726dbcc466cb9b3c029d539a06f6545","5a1a22b1ad88b436661458df567f3fdb446392a4"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["b4e5bbc7f726dbcc466cb9b3c029d539a06f6545","3241e06e642196396b80bb293acd9c0814d079e0"],"3241e06e642196396b80bb293acd9c0814d079e0":["b4e5bbc7f726dbcc466cb9b3c029d539a06f6545"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a1a22b1ad88b436661458df567f3fdb446392a4"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"b4e5bbc7f726dbcc466cb9b3c029d539a06f6545":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","5a1a22b1ad88b436661458df567f3fdb446392a4","3241e06e642196396b80bb293acd9c0814d079e0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b4e5bbc7f726dbcc466cb9b3c029d539a06f6545"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"5a1a22b1ad88b436661458df567f3fdb446392a4":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3241e06e642196396b80bb293acd9c0814d079e0":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}