{"path":"solr/core/src/java/org/apache/solr/search/DocSlice#DocSlice(int,int,int[],float[],long,float,TotalHits.Relation).mjava","commits":[{"id":"640ded7811e1b7d29236a5e2934ec3cd266a8199","date":1588973147,"type":1,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSlice#DocSlice(int,int,int[],float[],long,float,TotalHits.Relation).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DocSlice#DocSlice(int,int,int[],float[],long,float).mjava","sourceNew":"  /**\n   * Primary constructor for a DocSlice instance.\n   *\n   * @param offset  starting offset for this range of docs\n   * @param len     length of results\n   * @param docs    array of docids starting at position 0\n   * @param scores  array of scores that corresponds to docs, may be null\n   * @param matches total number of matches for the query\n   * @param matchesRelation Indicates if {@code matches} is exact or an approximation\n   */\n  public DocSlice(int offset, int len, int[] docs, float[] scores, long matches, float maxScore, TotalHits.Relation matchesRelation) {\n    this.offset=offset;\n    this.len=len;\n    this.docs=docs;\n    this.scores=scores;\n    this.matches=matches;\n    this.maxScore=maxScore;\n    this.ramBytesUsed = BASE_RAM_BYTES_USED + (docs == null ? 0 : ((long)docs.length << 2)) + (scores == null ? 0 : ((long)scores.length<<2)+RamUsageEstimator.NUM_BYTES_ARRAY_HEADER);\n    this.matchesRelation = matchesRelation;\n  }\n\n","sourceOld":"  /**\n   * Primary constructor for a DocSlice instance.\n   *\n   * @param offset  starting offset for this range of docs\n   * @param len     length of results\n   * @param docs    array of docids starting at position 0\n   * @param scores  array of scores that corresponds to docs, may be null\n   * @param matches total number of matches for the query\n   */\n  public DocSlice(int offset, int len, int[] docs, float[] scores, long matches, float maxScore) {\n    this.offset=offset;\n    this.len=len;\n    this.docs=docs;\n    this.scores=scores;\n    this.matches=matches;\n    this.maxScore=maxScore;\n    this.ramBytesUsed = BASE_RAM_BYTES_USED + (docs == null ? 0 : ((long)docs.length << 2)) + (scores == null ? 0 : ((long)scores.length<<2)+RamUsageEstimator.NUM_BYTES_ARRAY_HEADER);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"640ded7811e1b7d29236a5e2934ec3cd266a8199":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["640ded7811e1b7d29236a5e2934ec3cd266a8199"]},"commit2Childs":{"640ded7811e1b7d29236a5e2934ec3cd266a8199":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["640ded7811e1b7d29236a5e2934ec3cd266a8199"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}