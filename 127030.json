{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateCollectionCmd#copyDefaultConfigSetTo(List[String],String).mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateCollectionCmd#copyDefaultConfigSetTo(List[String],String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CreateCollectionCmd#copyDefaultConfigSetTo(List[String],String).mjava","sourceNew":"  /**\n   * Copies the _default configset to the specified configset name (overwrites if pre-existing)\n   */\n  private void copyDefaultConfigSetTo(List<String> configNames, String targetConfig) {\n    ZkConfigManager configManager = new ZkConfigManager(ocmh.zkStateReader.getZkClient());\n\n    // if a configset named coll exists, delete the configset so that _default can be copied over\n    if (configNames.contains(targetConfig)) {\n      log.info(\"There exists a configset by the same name as the collection we're trying to create: \" + targetConfig +\n          \", deleting it so that we can copy the _default configs over and create the collection.\");\n      try {\n        configManager.deleteConfigDir(targetConfig);\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.INVALID_STATE, \"Error while deleting configset: \" + targetConfig, e);\n      }\n    } else {\n      log.info(\"Only _default config set found, using it.\");\n    }\n    // Copy _default into targetConfig\n    try {\n      configManager.copyConfigDir(ConfigSetsHandlerApi.DEFAULT_CONFIGSET_NAME, targetConfig, new HashSet<>());\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.INVALID_STATE, \"Error while copying _default to \" + targetConfig, e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Copies the _default configset to the specified configset name (overwrites if pre-existing)\n   */\n  private void copyDefaultConfigSetTo(List<String> configNames, String targetConfig) {\n    ZkConfigManager configManager = new ZkConfigManager(ocmh.zkStateReader.getZkClient());\n\n    // if a configset named coll exists, delete the configset so that _default can be copied over\n    if (configNames.contains(targetConfig)) {\n      log.info(\"There exists a configset by the same name as the collection we're trying to create: \" + targetConfig +\n          \", deleting it so that we can copy the _default configs over and create the collection.\");\n      try {\n        configManager.deleteConfigDir(targetConfig);\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.INVALID_STATE, \"Error while deleting configset: \" + targetConfig, e);\n      }\n    } else {\n      log.info(\"Only _default config set found, using it.\");\n    }\n    // Copy _default into targetConfig\n    try {\n      configManager.copyConfigDir(ConfigSetsHandlerApi.DEFAULT_CONFIGSET_NAME, targetConfig, new HashSet<>());\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.INVALID_STATE, \"Error while copying _default to \" + targetConfig, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca55a3e50e219d5a29f5cf027c67b3891c57d5b9","date":1516630721,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateCollectionCmd#copyDefaultConfigSetTo(List[String],String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateCollectionCmd#copyDefaultConfigSetTo(List[String],String).mjava","sourceNew":"  /**\n   * Copies the _default configset to the specified configset name (overwrites if pre-existing)\n   */\n  private void copyDefaultConfigSetTo(List<String> configNames, String targetConfig) {\n    ZkConfigManager configManager = new ZkConfigManager(ocmh.zkStateReader.getZkClient());\n\n    // if a configset named collection exists, re-use it\n    if (configNames.contains(targetConfig)) {\n      log.info(\"There exists a configset by the same name as the collection we're trying to create: \" + targetConfig +\n          \", re-using it.\");\n      return;\n    }\n    // Copy _default into targetConfig\n    try {\n      configManager.copyConfigDir(ConfigSetsHandlerApi.DEFAULT_CONFIGSET_NAME, targetConfig, new HashSet<>());\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.INVALID_STATE, \"Error while copying _default to \" + targetConfig, e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Copies the _default configset to the specified configset name (overwrites if pre-existing)\n   */\n  private void copyDefaultConfigSetTo(List<String> configNames, String targetConfig) {\n    ZkConfigManager configManager = new ZkConfigManager(ocmh.zkStateReader.getZkClient());\n\n    // if a configset named coll exists, delete the configset so that _default can be copied over\n    if (configNames.contains(targetConfig)) {\n      log.info(\"There exists a configset by the same name as the collection we're trying to create: \" + targetConfig +\n          \", deleting it so that we can copy the _default configs over and create the collection.\");\n      try {\n        configManager.deleteConfigDir(targetConfig);\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.INVALID_STATE, \"Error while deleting configset: \" + targetConfig, e);\n      }\n    } else {\n      log.info(\"Only _default config set found, using it.\");\n    }\n    // Copy _default into targetConfig\n    try {\n      configManager.copyConfigDir(ConfigSetsHandlerApi.DEFAULT_CONFIGSET_NAME, targetConfig, new HashSet<>());\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.INVALID_STATE, \"Error while copying _default to \" + targetConfig, e);\n    }\n  }\n\n","bugFix":["197bbedf08450ade98a11f4a0001448059666bec"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateCollectionCmd#copyDefaultConfigSetTo(List[String],String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Copies the _default configset to the specified configset name (overwrites if pre-existing)\n   */\n  private void copyDefaultConfigSetTo(List<String> configNames, String targetConfig) {\n    ZkConfigManager configManager = new ZkConfigManager(ocmh.zkStateReader.getZkClient());\n\n    // if a configset named collection exists, re-use it\n    if (configNames.contains(targetConfig)) {\n      log.info(\"There exists a configset by the same name as the collection we're trying to create: \" + targetConfig +\n          \", re-using it.\");\n      return;\n    }\n    // Copy _default into targetConfig\n    try {\n      configManager.copyConfigDir(ConfigSetsHandlerApi.DEFAULT_CONFIGSET_NAME, targetConfig, new HashSet<>());\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.INVALID_STATE, \"Error while copying _default to \" + targetConfig, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4abf821a41a2fdca2a1dea148999931d22e20529","date":1587749643,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateCollectionCmd#copyDefaultConfigSetTo(List[String],String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateCollectionCmd#copyDefaultConfigSetTo(List[String],String).mjava","sourceNew":"  /**\n   * Copies the _default configset to the specified configset name (overwrites if pre-existing)\n   */\n  private void copyDefaultConfigSetTo(List<String> configNames, String targetConfig) {\n    ZkConfigManager configManager = new ZkConfigManager(ocmh.zkStateReader.getZkClient());\n\n    // if a configset named collection exists, re-use it\n    if (configNames.contains(targetConfig)) {\n      log.info(\"There exists a configset by the same name as the collection we're trying to create: {}, re-using it.\", targetConfig);\n      return;\n    }\n    // Copy _default into targetConfig\n    try {\n      configManager.copyConfigDir(ConfigSetsHandlerApi.DEFAULT_CONFIGSET_NAME, targetConfig, new HashSet<>());\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.INVALID_STATE, \"Error while copying _default to \" + targetConfig, e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Copies the _default configset to the specified configset name (overwrites if pre-existing)\n   */\n  private void copyDefaultConfigSetTo(List<String> configNames, String targetConfig) {\n    ZkConfigManager configManager = new ZkConfigManager(ocmh.zkStateReader.getZkClient());\n\n    // if a configset named collection exists, re-use it\n    if (configNames.contains(targetConfig)) {\n      log.info(\"There exists a configset by the same name as the collection we're trying to create: \" + targetConfig +\n          \", re-using it.\");\n      return;\n    }\n    // Copy _default into targetConfig\n    try {\n      configManager.copyConfigDir(ConfigSetsHandlerApi.DEFAULT_CONFIGSET_NAME, targetConfig, new HashSet<>());\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.INVALID_STATE, \"Error while copying _default to \" + targetConfig, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1852cb03cf4922477072449dd9de2fab588d1adb","date":1600862151,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateCollectionCmd#copyDefaultConfigSetTo(List[String],String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateCollectionCmd#copyDefaultConfigSetTo(List[String],String).mjava","sourceNew":"  /**\n   * Copies the _default configset to the specified configset name (overwrites if pre-existing)\n   */\n  private void copyDefaultConfigSetTo(List<String> configNames, String targetConfig) {\n    ZkConfigManager configManager = new ZkConfigManager(ocmh.zkStateReader.getZkClient());\n\n    // if a configset named collection exists, re-use it\n    if (configNames.contains(targetConfig)) {\n      log.info(\"There exists a configset by the same name as the collection we're trying to create: {}, re-using it.\", targetConfig);\n      return;\n    }\n    // Copy _default into targetConfig\n    try {\n      configManager.copyConfigDir(DEFAULT_CONFIGSET_NAME, targetConfig, new HashSet<>());\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.INVALID_STATE, \"Error while copying _default to \" + targetConfig, e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Copies the _default configset to the specified configset name (overwrites if pre-existing)\n   */\n  private void copyDefaultConfigSetTo(List<String> configNames, String targetConfig) {\n    ZkConfigManager configManager = new ZkConfigManager(ocmh.zkStateReader.getZkClient());\n\n    // if a configset named collection exists, re-use it\n    if (configNames.contains(targetConfig)) {\n      log.info(\"There exists a configset by the same name as the collection we're trying to create: {}, re-using it.\", targetConfig);\n      return;\n    }\n    // Copy _default into targetConfig\n    try {\n      configManager.copyConfigDir(ConfigSetsHandlerApi.DEFAULT_CONFIGSET_NAME, targetConfig, new HashSet<>());\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.INVALID_STATE, \"Error while copying _default to \" + targetConfig, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ca55a3e50e219d5a29f5cf027c67b3891c57d5b9"],"4abf821a41a2fdca2a1dea148999931d22e20529":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ca55a3e50e219d5a29f5cf027c67b3891c57d5b9":["6146c07c0dee1ae1e42926167acd127fed5ef59d"],"1852cb03cf4922477072449dd9de2fab588d1adb":["4abf821a41a2fdca2a1dea148999931d22e20529"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1852cb03cf4922477072449dd9de2fab588d1adb"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["4abf821a41a2fdca2a1dea148999931d22e20529"],"4abf821a41a2fdca2a1dea148999931d22e20529":["1852cb03cf4922477072449dd9de2fab588d1adb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["ca55a3e50e219d5a29f5cf027c67b3891c57d5b9"],"ca55a3e50e219d5a29f5cf027c67b3891c57d5b9":["b94236357aaa22b76c10629851fe4e376e0cea82"],"1852cb03cf4922477072449dd9de2fab588d1adb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}