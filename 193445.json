{"path":"solr/core/src/java/org/apache/solr/handler/tagger/TermPrefixCursor#seekPrefix().mjava","commits":[{"id":"e091f281a6e026f8bb17aaf194efd0bbd3a7f549","date":1528221895,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/tagger/TermPrefixCursor#seekPrefix().mjava","pathOld":"/dev/null","sourceNew":"  /** Seeks to prefixBuf or the next term that is prefixed by prefixBuf plus the separator char.\n   * Sets docIds. **/\n  private boolean seekPrefix() throws IOException {\n    TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(prefixBuf);\n\n    docIds = null;//invalidate\n    switch (seekStatus) {\n      case END:\n        return false;\n\n      case FOUND:\n        postingsEnum = termsEnum.postings(postingsEnum, PostingsEnum.NONE);\n        docIds = postingsEnumToIntsRef(postingsEnum, liveDocs);\n        if (docIds.length > 0) {\n          return true;\n        }\n\n        //Pretend we didn't find it; go to next term\n        docIds = null;\n        if (termsEnum.next() == null) { // case END\n          return false;\n        }\n        //fall through to NOT_FOUND\n\n      case NOT_FOUND:\n        //termsEnum must start with prefixBuf to continue\n        BytesRef teTerm = termsEnum.term();\n\n        if (teTerm.length > prefixBuf.length) {\n          for (int i = 0; i < prefixBuf.length; i++) {\n            if (prefixBuf.bytes[prefixBuf.offset + i] != teTerm.bytes[teTerm.offset + i])\n              return false;\n          }\n          if (teTerm.bytes[teTerm.offset + prefixBuf.length] != SEPARATOR_CHAR)\n            return false;\n          return true;\n        }\n        return false;\n    }\n    throw new IllegalStateException(seekStatus.toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/tagger/TermPrefixCursor#seekPrefix().mjava","pathOld":"/dev/null","sourceNew":"  /** Seeks to prefixBuf or the next term that is prefixed by prefixBuf plus the separator char.\n   * Sets docIds. **/\n  private boolean seekPrefix() throws IOException {\n    TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(prefixBuf);\n\n    docIds = null;//invalidate\n    switch (seekStatus) {\n      case END:\n        return false;\n\n      case FOUND:\n        postingsEnum = termsEnum.postings(postingsEnum, PostingsEnum.NONE);\n        docIds = postingsEnumToIntsRef(postingsEnum, liveDocs);\n        if (docIds.length > 0) {\n          return true;\n        }\n\n        //Pretend we didn't find it; go to next term\n        docIds = null;\n        if (termsEnum.next() == null) { // case END\n          return false;\n        }\n        //fall through to NOT_FOUND\n\n      case NOT_FOUND:\n        //termsEnum must start with prefixBuf to continue\n        BytesRef teTerm = termsEnum.term();\n\n        if (teTerm.length > prefixBuf.length) {\n          for (int i = 0; i < prefixBuf.length; i++) {\n            if (prefixBuf.bytes[prefixBuf.offset + i] != teTerm.bytes[teTerm.offset + i])\n              return false;\n          }\n          if (teTerm.bytes[teTerm.offset + prefixBuf.length] != SEPARATOR_CHAR)\n            return false;\n          return true;\n        }\n        return false;\n    }\n    throw new IllegalStateException(seekStatus.toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/tagger/TermPrefixCursor#seekPrefix().mjava","pathOld":"/dev/null","sourceNew":"  /** Seeks to prefixBuf or the next term that is prefixed by prefixBuf plus the separator char.\n   * Sets docIds. **/\n  private boolean seekPrefix() throws IOException {\n    TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(prefixBuf);\n\n    docIds = null;//invalidate\n    switch (seekStatus) {\n      case END:\n        return false;\n\n      case FOUND:\n        postingsEnum = termsEnum.postings(postingsEnum, PostingsEnum.NONE);\n        docIds = postingsEnumToIntsRef(postingsEnum, liveDocs);\n        if (docIds.length > 0) {\n          return true;\n        }\n\n        //Pretend we didn't find it; go to next term\n        docIds = null;\n        if (termsEnum.next() == null) { // case END\n          return false;\n        }\n        //fall through to NOT_FOUND\n\n      case NOT_FOUND:\n        //termsEnum must start with prefixBuf to continue\n        BytesRef teTerm = termsEnum.term();\n\n        if (teTerm.length > prefixBuf.length) {\n          for (int i = 0; i < prefixBuf.length; i++) {\n            if (prefixBuf.bytes[prefixBuf.offset + i] != teTerm.bytes[teTerm.offset + i])\n              return false;\n          }\n          if (teTerm.bytes[teTerm.offset + prefixBuf.length] != SEPARATOR_CHAR)\n            return false;\n          return true;\n        }\n        return false;\n    }\n    throw new IllegalStateException(seekStatus.toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5","date":1591384964,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/tagger/TermPrefixCursor#seekPrefix().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/tagger/TermPrefixCursor#seekPrefix().mjava","sourceNew":"  /** Seeks to prefixBuf or the next term that is prefixed by prefixBuf plus the separator char.\n   * Sets docIds. **/\n  @SuppressWarnings({\"fallthrough\"})\n  private boolean seekPrefix() throws IOException {\n    TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(prefixBuf);\n\n    docIds = null;//invalidate\n    switch (seekStatus) {\n      case END:\n        return false;\n\n      case FOUND:\n        postingsEnum = termsEnum.postings(postingsEnum, PostingsEnum.NONE);\n        docIds = postingsEnumToIntsRef(postingsEnum, liveDocs);\n        if (docIds.length > 0) {\n          return true;\n        }\n\n        //Pretend we didn't find it; go to next term\n        docIds = null;\n        if (termsEnum.next() == null) { // case END\n          return false;\n        }\n        //fall through to NOT_FOUND\n\n      case NOT_FOUND:\n        //termsEnum must start with prefixBuf to continue\n        BytesRef teTerm = termsEnum.term();\n\n        if (teTerm.length > prefixBuf.length) {\n          for (int i = 0; i < prefixBuf.length; i++) {\n            if (prefixBuf.bytes[prefixBuf.offset + i] != teTerm.bytes[teTerm.offset + i])\n              return false;\n          }\n          if (teTerm.bytes[teTerm.offset + prefixBuf.length] != SEPARATOR_CHAR)\n            return false;\n          return true;\n        }\n        return false;\n    }\n    throw new IllegalStateException(seekStatus.toString());\n  }\n\n","sourceOld":"  /** Seeks to prefixBuf or the next term that is prefixed by prefixBuf plus the separator char.\n   * Sets docIds. **/\n  private boolean seekPrefix() throws IOException {\n    TermsEnum.SeekStatus seekStatus = termsEnum.seekCeil(prefixBuf);\n\n    docIds = null;//invalidate\n    switch (seekStatus) {\n      case END:\n        return false;\n\n      case FOUND:\n        postingsEnum = termsEnum.postings(postingsEnum, PostingsEnum.NONE);\n        docIds = postingsEnumToIntsRef(postingsEnum, liveDocs);\n        if (docIds.length > 0) {\n          return true;\n        }\n\n        //Pretend we didn't find it; go to next term\n        docIds = null;\n        if (termsEnum.next() == null) { // case END\n          return false;\n        }\n        //fall through to NOT_FOUND\n\n      case NOT_FOUND:\n        //termsEnum must start with prefixBuf to continue\n        BytesRef teTerm = termsEnum.term();\n\n        if (teTerm.length > prefixBuf.length) {\n          for (int i = 0; i < prefixBuf.length; i++) {\n            if (prefixBuf.bytes[prefixBuf.offset + i] != teTerm.bytes[teTerm.offset + i])\n              return false;\n          }\n          if (teTerm.bytes[teTerm.offset + prefixBuf.length] != SEPARATOR_CHAR)\n            return false;\n          return true;\n        }\n        return false;\n    }\n    throw new IllegalStateException(seekStatus.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["e091f281a6e026f8bb17aaf194efd0bbd3a7f549"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e091f281a6e026f8bb17aaf194efd0bbd3a7f549"],"f592209545c71895260367152601e9200399776d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e091f281a6e026f8bb17aaf194efd0bbd3a7f549"],"e091f281a6e026f8bb17aaf194efd0bbd3a7f549":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"]},"commit2Childs":{"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","e091f281a6e026f8bb17aaf194efd0bbd3a7f549"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"f592209545c71895260367152601e9200399776d":[],"e091f281a6e026f8bb17aaf194efd0bbd3a7f549":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}