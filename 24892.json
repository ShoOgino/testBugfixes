{"path":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#readBytes(long,byte[],int,int).mjava","commits":[{"id":"2b3cc2f5fa15326949acef967166394fb5b4a5e8","date":1359739263,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#readBytes(long,byte[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#readBytes(BytesRef,long,int).mjava","sourceNew":"  /**\n   * Reads bytes bytes out of the pool starting at the given offset with the given  \n   * length into the given byte array at offset <tt>off</tt>.\n   * <p>Note: this method allows to copy across block boundaries.</p>\n   */\n  public void readBytes(final long offset, final byte bytes[], final int off, final int length) {\n    if (length == 0) {\n      return;\n    }\n    int bytesOffset = off;\n    int bytesLength = length;\n    int bufferIndex = (int) (offset >> BYTE_BLOCK_SHIFT);\n    byte[] buffer = buffers[bufferIndex];\n    int pos = (int) (offset & BYTE_BLOCK_MASK);\n    int overflow = (pos + length) - BYTE_BLOCK_SIZE;\n    do {\n      if (overflow <= 0) {\n        System.arraycopy(buffer, pos, bytes, bytesOffset, bytesLength);\n        break;\n      } else {\n        final int bytesToCopy = length - overflow;\n        System.arraycopy(buffer, pos, bytes, bytesOffset, bytesToCopy);\n        pos = 0;\n        bytesLength -= bytesToCopy;\n        bytesOffset += bytesToCopy;\n        buffer = buffers[++bufferIndex];\n        overflow = overflow - BYTE_BLOCK_SIZE;\n      }\n    } while (true);\n  }\n\n","sourceOld":"  /**\n   * Reads bytes bytes out of the pool starting at the given offset with the given  \n   * length into the given {@link BytesRef} at offset <tt>0</tt>.\n   * <p>Note: this method allows to copy across block boundaries.</p>\n   */\n  public void readBytes(final BytesRef bytes, final long offset, final int length) {\n    bytes.offset = 0;\n    bytes.grow(length);\n    bytes.length = length;\n    if (length == 0) {\n      return;\n    }\n    int bufferIndex = (int) (offset >> BYTE_BLOCK_SHIFT);\n    byte[] buffer = buffers[bufferIndex];\n    int pos = (int) (offset & BYTE_BLOCK_MASK);\n    int overflow = (pos + length) - BYTE_BLOCK_SIZE;\n    do {\n      if (overflow <= 0) {\n        System.arraycopy(buffer, pos, bytes.bytes, bytes.offset, bytes.length);\n        bytes.length = length;\n        bytes.offset = 0;\n        break;\n      } else {\n        final int bytesToCopy = length - overflow;\n        System.arraycopy(buffer, pos, bytes.bytes, bytes.offset, bytesToCopy);\n        pos = 0;\n        bytes.length -= bytesToCopy;\n        bytes.offset += bytesToCopy;\n        buffer = buffers[++bufferIndex];\n        overflow = overflow - BYTE_BLOCK_SIZE;\n      }\n    } while (true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#readBytes(long,byte[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Reads bytes bytes out of the pool starting at the given offset with the given  \n   * length into the given byte array at offset <tt>off</tt>.\n   * <p>Note: this method allows to copy across block boundaries.</p>\n   */\n  public void readBytes(final long offset, final byte bytes[], final int off, final int length) {\n    if (length == 0) {\n      return;\n    }\n    int bytesOffset = off;\n    int bytesLength = length;\n    int bufferIndex = (int) (offset >> BYTE_BLOCK_SHIFT);\n    byte[] buffer = buffers[bufferIndex];\n    int pos = (int) (offset & BYTE_BLOCK_MASK);\n    int overflow = (pos + length) - BYTE_BLOCK_SIZE;\n    do {\n      if (overflow <= 0) {\n        System.arraycopy(buffer, pos, bytes, bytesOffset, bytesLength);\n        break;\n      } else {\n        final int bytesToCopy = length - overflow;\n        System.arraycopy(buffer, pos, bytes, bytesOffset, bytesToCopy);\n        pos = 0;\n        bytesLength -= bytesToCopy;\n        bytesOffset += bytesToCopy;\n        buffer = buffers[++bufferIndex];\n        overflow = overflow - BYTE_BLOCK_SIZE;\n      }\n    } while (true);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"22f56bf98bcc4bbd169ab6c3d65b65d9f84d8e57","date":1491925651,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#readBytes(long,byte[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#readBytes(long,byte[],int,int).mjava","sourceNew":"  /**\n   * Reads bytes bytes out of the pool starting at the given offset with the given  \n   * length into the given byte array at offset <tt>off</tt>.\n   * <p>Note: this method allows to copy across block boundaries.</p>\n   */\n  public void readBytes(final long offset, final byte bytes[], int bytesOffset, int bytesLength) {\n    int bytesLeft = bytesLength;\n    int bufferIndex = (int) (offset >> BYTE_BLOCK_SHIFT);\n    int pos = (int) (offset & BYTE_BLOCK_MASK);\n    while (bytesLeft > 0) {\n      byte[] buffer = buffers[bufferIndex++];\n      int chunk = Math.min(bytesLeft, BYTE_BLOCK_SIZE - pos);\n      System.arraycopy(buffer, pos, bytes, bytesOffset, chunk);\n      bytesOffset += chunk;\n      bytesLeft -= chunk;\n      pos = 0;\n    }\n  }\n\n","sourceOld":"  /**\n   * Reads bytes bytes out of the pool starting at the given offset with the given  \n   * length into the given byte array at offset <tt>off</tt>.\n   * <p>Note: this method allows to copy across block boundaries.</p>\n   */\n  public void readBytes(final long offset, final byte bytes[], final int off, final int length) {\n    if (length == 0) {\n      return;\n    }\n    int bytesOffset = off;\n    int bytesLength = length;\n    int bufferIndex = (int) (offset >> BYTE_BLOCK_SHIFT);\n    byte[] buffer = buffers[bufferIndex];\n    int pos = (int) (offset & BYTE_BLOCK_MASK);\n    int overflow = (pos + length) - BYTE_BLOCK_SIZE;\n    do {\n      if (overflow <= 0) {\n        System.arraycopy(buffer, pos, bytes, bytesOffset, bytesLength);\n        break;\n      } else {\n        final int bytesToCopy = length - overflow;\n        System.arraycopy(buffer, pos, bytes, bytesOffset, bytesToCopy);\n        pos = 0;\n        bytesLength -= bytesToCopy;\n        bytesOffset += bytesToCopy;\n        buffer = buffers[++bufferIndex];\n        overflow = overflow - BYTE_BLOCK_SIZE;\n      }\n    } while (true);\n  }\n\n","bugFix":["2b3cc2f5fa15326949acef967166394fb5b4a5e8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#readBytes(long,byte[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#readBytes(long,byte[],int,int).mjava","sourceNew":"  /**\n   * Reads bytes bytes out of the pool starting at the given offset with the given  \n   * length into the given byte array at offset <tt>off</tt>.\n   * <p>Note: this method allows to copy across block boundaries.</p>\n   */\n  public void readBytes(final long offset, final byte bytes[], int bytesOffset, int bytesLength) {\n    int bytesLeft = bytesLength;\n    int bufferIndex = (int) (offset >> BYTE_BLOCK_SHIFT);\n    int pos = (int) (offset & BYTE_BLOCK_MASK);\n    while (bytesLeft > 0) {\n      byte[] buffer = buffers[bufferIndex++];\n      int chunk = Math.min(bytesLeft, BYTE_BLOCK_SIZE - pos);\n      System.arraycopy(buffer, pos, bytes, bytesOffset, chunk);\n      bytesOffset += chunk;\n      bytesLeft -= chunk;\n      pos = 0;\n    }\n  }\n\n","sourceOld":"  /**\n   * Reads bytes bytes out of the pool starting at the given offset with the given  \n   * length into the given byte array at offset <tt>off</tt>.\n   * <p>Note: this method allows to copy across block boundaries.</p>\n   */\n  public void readBytes(final long offset, final byte bytes[], final int off, final int length) {\n    if (length == 0) {\n      return;\n    }\n    int bytesOffset = off;\n    int bytesLength = length;\n    int bufferIndex = (int) (offset >> BYTE_BLOCK_SHIFT);\n    byte[] buffer = buffers[bufferIndex];\n    int pos = (int) (offset & BYTE_BLOCK_MASK);\n    int overflow = (pos + length) - BYTE_BLOCK_SIZE;\n    do {\n      if (overflow <= 0) {\n        System.arraycopy(buffer, pos, bytes, bytesOffset, bytesLength);\n        break;\n      } else {\n        final int bytesToCopy = length - overflow;\n        System.arraycopy(buffer, pos, bytes, bytesOffset, bytesToCopy);\n        pos = 0;\n        bytesLength -= bytesToCopy;\n        bytesOffset += bytesToCopy;\n        buffer = buffers[++bufferIndex];\n        overflow = overflow - BYTE_BLOCK_SIZE;\n      }\n    } while (true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a","date":1550036130,"type":3,"author":"Bruno P. Kinoshita","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#readBytes(long,byte[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#readBytes(long,byte[],int,int).mjava","sourceNew":"  /**\n   * Reads bytes out of the pool starting at the given offset with the given  \n   * length into the given byte array at offset <tt>off</tt>.\n   * <p>Note: this method allows to copy across block boundaries.</p>\n   */\n  public void readBytes(final long offset, final byte bytes[], int bytesOffset, int bytesLength) {\n    int bytesLeft = bytesLength;\n    int bufferIndex = (int) (offset >> BYTE_BLOCK_SHIFT);\n    int pos = (int) (offset & BYTE_BLOCK_MASK);\n    while (bytesLeft > 0) {\n      byte[] buffer = buffers[bufferIndex++];\n      int chunk = Math.min(bytesLeft, BYTE_BLOCK_SIZE - pos);\n      System.arraycopy(buffer, pos, bytes, bytesOffset, chunk);\n      bytesOffset += chunk;\n      bytesLeft -= chunk;\n      pos = 0;\n    }\n  }\n\n","sourceOld":"  /**\n   * Reads bytes bytes out of the pool starting at the given offset with the given  \n   * length into the given byte array at offset <tt>off</tt>.\n   * <p>Note: this method allows to copy across block boundaries.</p>\n   */\n  public void readBytes(final long offset, final byte bytes[], int bytesOffset, int bytesLength) {\n    int bytesLeft = bytesLength;\n    int bufferIndex = (int) (offset >> BYTE_BLOCK_SHIFT);\n    int pos = (int) (offset & BYTE_BLOCK_MASK);\n    while (bytesLeft > 0) {\n      byte[] buffer = buffers[bufferIndex++];\n      int chunk = Math.min(bytesLeft, BYTE_BLOCK_SIZE - pos);\n      System.arraycopy(buffer, pos, bytes, bytesOffset, chunk);\n      bytesOffset += chunk;\n      bytesLeft -= chunk;\n      pos = 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e3751ad4cc85eb979419cf5469dfba266eae56a","date":1581046252,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#readBytes(long,byte[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#readBytes(long,byte[],int,int).mjava","sourceNew":"  /**\n   * Reads bytes out of the pool starting at the given offset with the given  \n   * length into the given byte array at offset <code>off</code>.\n   * <p>Note: this method allows to copy across block boundaries.</p>\n   */\n  public void readBytes(final long offset, final byte bytes[], int bytesOffset, int bytesLength) {\n    int bytesLeft = bytesLength;\n    int bufferIndex = (int) (offset >> BYTE_BLOCK_SHIFT);\n    int pos = (int) (offset & BYTE_BLOCK_MASK);\n    while (bytesLeft > 0) {\n      byte[] buffer = buffers[bufferIndex++];\n      int chunk = Math.min(bytesLeft, BYTE_BLOCK_SIZE - pos);\n      System.arraycopy(buffer, pos, bytes, bytesOffset, chunk);\n      bytesOffset += chunk;\n      bytesLeft -= chunk;\n      pos = 0;\n    }\n  }\n\n","sourceOld":"  /**\n   * Reads bytes out of the pool starting at the given offset with the given  \n   * length into the given byte array at offset <tt>off</tt>.\n   * <p>Note: this method allows to copy across block boundaries.</p>\n   */\n  public void readBytes(final long offset, final byte bytes[], int bytesOffset, int bytesLength) {\n    int bytesLeft = bytesLength;\n    int bufferIndex = (int) (offset >> BYTE_BLOCK_SHIFT);\n    int pos = (int) (offset & BYTE_BLOCK_MASK);\n    while (bytesLeft > 0) {\n      byte[] buffer = buffers[bufferIndex++];\n      int chunk = Math.min(bytesLeft, BYTE_BLOCK_SIZE - pos);\n      System.arraycopy(buffer, pos, bytes, bytesOffset, chunk);\n      bytesOffset += chunk;\n      bytesLeft -= chunk;\n      pos = 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"22f56bf98bcc4bbd169ab6c3d65b65d9f84d8e57":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"2b3cc2f5fa15326949acef967166394fb5b4a5e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9e3751ad4cc85eb979419cf5469dfba266eae56a":["d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a"],"d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a":["22f56bf98bcc4bbd169ab6c3d65b65d9f84d8e57"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2b3cc2f5fa15326949acef967166394fb5b4a5e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9e3751ad4cc85eb979419cf5469dfba266eae56a"]},"commit2Childs":{"22f56bf98bcc4bbd169ab6c3d65b65d9f84d8e57":["d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"2b3cc2f5fa15326949acef967166394fb5b4a5e8":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"9e3751ad4cc85eb979419cf5469dfba266eae56a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["22f56bf98bcc4bbd169ab6c3d65b65d9f84d8e57","54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a":["9e3751ad4cc85eb979419cf5469dfba266eae56a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2b3cc2f5fa15326949acef967166394fb5b4a5e8","d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}