{"path":"lucene/src/test/org/apache/lucene/index/TestTermsEnum#test().mjava","commits":[{"id":"0dbc7493b4f3e9c8bfa60028d6a4d82e2e9f0b67","date":1309449942,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermsEnum#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws Exception {\n    final LineFileDocs docs = new LineFileDocs(random);\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, d);\n    final int numDocs = atLeast(10);\n    for(int docCount=0;docCount<numDocs;docCount++) {\n      w.addDocument(docs.nextDoc());\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final List<BytesRef> terms = new ArrayList<BytesRef>();\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"body\").iterator();\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      terms.add(new BytesRef(term));\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + terms.size() + \" terms\");\n    }\n\n    int upto = -1;\n    final int iters = atLeast(200);\n    for(int iter=0;iter<iters;iter++) {\n      final boolean isEnd;\n      if (upto != -1 && random.nextBoolean()) {\n        // next\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter next\");\n        }\n        isEnd = termsEnum.next() == null;\n        upto++;\n        if (isEnd) {\n          if (VERBOSE) {\n            System.out.println(\"  end\");\n          }\n          assertEquals(upto, terms.size());\n          upto = -1;\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  got term=\" + termsEnum.term().utf8ToString() + \" expected=\" + terms.get(upto).utf8ToString());\n          }\n          assertTrue(upto < terms.size());\n          assertEquals(terms.get(upto), termsEnum.term());\n        }\n      } else {\n\n        final BytesRef target;\n        final String exists;\n        if (random.nextBoolean()) {\n          // likely fake term\n          if (random.nextBoolean()) {\n            target = new BytesRef(_TestUtil.randomSimpleString(random));\n          } else {\n            target = new BytesRef(_TestUtil.randomRealisticUnicodeString(random));\n          }\n          exists = \"likely not\";\n        } else {\n          // real term\n          target = terms.get(random.nextInt(terms.size()));\n          exists = \"yes\";\n        }\n\n        upto = Collections.binarySearch(terms, target);\n\n        if (random.nextBoolean()) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekCeil target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekCeil\n          final TermsEnum.SeekStatus status = termsEnum.seekCeil(target, random.nextBoolean());\n          if (VERBOSE) {\n            System.out.println(\"  got \" + status);\n          }\n          \n          if (upto < 0) {\n            upto = -(upto+1);\n            if (upto >= terms.size()) {\n              assertEquals(TermsEnum.SeekStatus.END, status);\n              upto = -1;\n            } else {\n              assertEquals(TermsEnum.SeekStatus.NOT_FOUND, status);\n              assertEquals(terms.get(upto), termsEnum.term());\n            }\n          } else {\n            assertEquals(TermsEnum.SeekStatus.FOUND, status);\n            assertEquals(terms.get(upto), termsEnum.term());\n          }\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekExact target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekExact\n          final boolean result = termsEnum.seekExact(target, false);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + result);\n          }\n          if (upto < 0) {\n            assertFalse(result);\n            upto = -1;\n          } else {\n            assertTrue(result);\n            assertEquals(target, termsEnum.term());\n          }\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermsEnum#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws Exception {\n    final LineFileDocs docs = new LineFileDocs(random);\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, d);\n    final int numDocs = atLeast(10);\n    for(int docCount=0;docCount<numDocs;docCount++) {\n      w.addDocument(docs.nextDoc());\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final List<BytesRef> terms = new ArrayList<BytesRef>();\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"body\").iterator();\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      terms.add(new BytesRef(term));\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + terms.size() + \" terms\");\n    }\n\n    int upto = -1;\n    final int iters = atLeast(200);\n    for(int iter=0;iter<iters;iter++) {\n      final boolean isEnd;\n      if (upto != -1 && random.nextBoolean()) {\n        // next\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter next\");\n        }\n        isEnd = termsEnum.next() == null;\n        upto++;\n        if (isEnd) {\n          if (VERBOSE) {\n            System.out.println(\"  end\");\n          }\n          assertEquals(upto, terms.size());\n          upto = -1;\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  got term=\" + termsEnum.term().utf8ToString() + \" expected=\" + terms.get(upto).utf8ToString());\n          }\n          assertTrue(upto < terms.size());\n          assertEquals(terms.get(upto), termsEnum.term());\n        }\n      } else {\n\n        final BytesRef target;\n        final String exists;\n        if (random.nextBoolean()) {\n          // likely fake term\n          if (random.nextBoolean()) {\n            target = new BytesRef(_TestUtil.randomSimpleString(random));\n          } else {\n            target = new BytesRef(_TestUtil.randomRealisticUnicodeString(random));\n          }\n          exists = \"likely not\";\n        } else {\n          // real term\n          target = terms.get(random.nextInt(terms.size()));\n          exists = \"yes\";\n        }\n\n        upto = Collections.binarySearch(terms, target);\n\n        if (random.nextBoolean()) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekCeil target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekCeil\n          final TermsEnum.SeekStatus status = termsEnum.seekCeil(target, random.nextBoolean());\n          if (VERBOSE) {\n            System.out.println(\"  got \" + status);\n          }\n          \n          if (upto < 0) {\n            upto = -(upto+1);\n            if (upto >= terms.size()) {\n              assertEquals(TermsEnum.SeekStatus.END, status);\n              upto = -1;\n            } else {\n              assertEquals(TermsEnum.SeekStatus.NOT_FOUND, status);\n              assertEquals(terms.get(upto), termsEnum.term());\n            }\n          } else {\n            assertEquals(TermsEnum.SeekStatus.FOUND, status);\n            assertEquals(terms.get(upto), termsEnum.term());\n          }\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekExact target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekExact\n          final boolean result = termsEnum.seekExact(target, false);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + result);\n          }\n          if (upto < 0) {\n            assertFalse(result);\n            upto = -1;\n          } else {\n            assertTrue(result);\n            assertEquals(target, termsEnum.term());\n          }\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermsEnum#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws Exception {\n    final LineFileDocs docs = new LineFileDocs(random);\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, d);\n    final int numDocs = atLeast(10);\n    for(int docCount=0;docCount<numDocs;docCount++) {\n      w.addDocument(docs.nextDoc());\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final List<BytesRef> terms = new ArrayList<BytesRef>();\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"body\").iterator();\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      terms.add(new BytesRef(term));\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + terms.size() + \" terms\");\n    }\n\n    int upto = -1;\n    final int iters = atLeast(200);\n    for(int iter=0;iter<iters;iter++) {\n      final boolean isEnd;\n      if (upto != -1 && random.nextBoolean()) {\n        // next\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter next\");\n        }\n        isEnd = termsEnum.next() == null;\n        upto++;\n        if (isEnd) {\n          if (VERBOSE) {\n            System.out.println(\"  end\");\n          }\n          assertEquals(upto, terms.size());\n          upto = -1;\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  got term=\" + termsEnum.term().utf8ToString() + \" expected=\" + terms.get(upto).utf8ToString());\n          }\n          assertTrue(upto < terms.size());\n          assertEquals(terms.get(upto), termsEnum.term());\n        }\n      } else {\n\n        final BytesRef target;\n        final String exists;\n        if (random.nextBoolean()) {\n          // likely fake term\n          if (random.nextBoolean()) {\n            target = new BytesRef(_TestUtil.randomSimpleString(random));\n          } else {\n            target = new BytesRef(_TestUtil.randomRealisticUnicodeString(random));\n          }\n          exists = \"likely not\";\n        } else {\n          // real term\n          target = terms.get(random.nextInt(terms.size()));\n          exists = \"yes\";\n        }\n\n        upto = Collections.binarySearch(terms, target);\n\n        if (random.nextBoolean()) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekCeil target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekCeil\n          final TermsEnum.SeekStatus status = termsEnum.seekCeil(target, random.nextBoolean());\n          if (VERBOSE) {\n            System.out.println(\"  got \" + status);\n          }\n          \n          if (upto < 0) {\n            upto = -(upto+1);\n            if (upto >= terms.size()) {\n              assertEquals(TermsEnum.SeekStatus.END, status);\n              upto = -1;\n            } else {\n              assertEquals(TermsEnum.SeekStatus.NOT_FOUND, status);\n              assertEquals(terms.get(upto), termsEnum.term());\n            }\n          } else {\n            assertEquals(TermsEnum.SeekStatus.FOUND, status);\n            assertEquals(terms.get(upto), termsEnum.term());\n          }\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekExact target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekExact\n          final boolean result = termsEnum.seekExact(target, false);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + result);\n          }\n          if (upto < 0) {\n            assertFalse(result);\n            upto = -1;\n          } else {\n            assertTrue(result);\n            assertEquals(target, termsEnum.term());\n          }\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermsEnum#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermsEnum#test().mjava","sourceNew":"  public void test() throws Exception {\n    final LineFileDocs docs = new LineFileDocs(random);\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, d);\n    final int numDocs = atLeast(10);\n    for(int docCount=0;docCount<numDocs;docCount++) {\n      w.addDocument(docs.nextDoc());\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final List<BytesRef> terms = new ArrayList<BytesRef>();\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"body\").iterator(null);\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      terms.add(new BytesRef(term));\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + terms.size() + \" terms\");\n    }\n\n    int upto = -1;\n    final int iters = atLeast(200);\n    for(int iter=0;iter<iters;iter++) {\n      final boolean isEnd;\n      if (upto != -1 && random.nextBoolean()) {\n        // next\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter next\");\n        }\n        isEnd = termsEnum.next() == null;\n        upto++;\n        if (isEnd) {\n          if (VERBOSE) {\n            System.out.println(\"  end\");\n          }\n          assertEquals(upto, terms.size());\n          upto = -1;\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  got term=\" + termsEnum.term().utf8ToString() + \" expected=\" + terms.get(upto).utf8ToString());\n          }\n          assertTrue(upto < terms.size());\n          assertEquals(terms.get(upto), termsEnum.term());\n        }\n      } else {\n\n        final BytesRef target;\n        final String exists;\n        if (random.nextBoolean()) {\n          // likely fake term\n          if (random.nextBoolean()) {\n            target = new BytesRef(_TestUtil.randomSimpleString(random));\n          } else {\n            target = new BytesRef(_TestUtil.randomRealisticUnicodeString(random));\n          }\n          exists = \"likely not\";\n        } else {\n          // real term\n          target = terms.get(random.nextInt(terms.size()));\n          exists = \"yes\";\n        }\n\n        upto = Collections.binarySearch(terms, target);\n\n        if (random.nextBoolean()) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekCeil target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekCeil\n          final TermsEnum.SeekStatus status = termsEnum.seekCeil(target, random.nextBoolean());\n          if (VERBOSE) {\n            System.out.println(\"  got \" + status);\n          }\n          \n          if (upto < 0) {\n            upto = -(upto+1);\n            if (upto >= terms.size()) {\n              assertEquals(TermsEnum.SeekStatus.END, status);\n              upto = -1;\n            } else {\n              assertEquals(TermsEnum.SeekStatus.NOT_FOUND, status);\n              assertEquals(terms.get(upto), termsEnum.term());\n            }\n          } else {\n            assertEquals(TermsEnum.SeekStatus.FOUND, status);\n            assertEquals(terms.get(upto), termsEnum.term());\n          }\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekExact target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekExact\n          final boolean result = termsEnum.seekExact(target, false);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + result);\n          }\n          if (upto < 0) {\n            assertFalse(result);\n            upto = -1;\n          } else {\n            assertTrue(result);\n            assertEquals(target, termsEnum.term());\n          }\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    final LineFileDocs docs = new LineFileDocs(random);\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, d);\n    final int numDocs = atLeast(10);\n    for(int docCount=0;docCount<numDocs;docCount++) {\n      w.addDocument(docs.nextDoc());\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final List<BytesRef> terms = new ArrayList<BytesRef>();\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"body\").iterator();\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      terms.add(new BytesRef(term));\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + terms.size() + \" terms\");\n    }\n\n    int upto = -1;\n    final int iters = atLeast(200);\n    for(int iter=0;iter<iters;iter++) {\n      final boolean isEnd;\n      if (upto != -1 && random.nextBoolean()) {\n        // next\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter next\");\n        }\n        isEnd = termsEnum.next() == null;\n        upto++;\n        if (isEnd) {\n          if (VERBOSE) {\n            System.out.println(\"  end\");\n          }\n          assertEquals(upto, terms.size());\n          upto = -1;\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  got term=\" + termsEnum.term().utf8ToString() + \" expected=\" + terms.get(upto).utf8ToString());\n          }\n          assertTrue(upto < terms.size());\n          assertEquals(terms.get(upto), termsEnum.term());\n        }\n      } else {\n\n        final BytesRef target;\n        final String exists;\n        if (random.nextBoolean()) {\n          // likely fake term\n          if (random.nextBoolean()) {\n            target = new BytesRef(_TestUtil.randomSimpleString(random));\n          } else {\n            target = new BytesRef(_TestUtil.randomRealisticUnicodeString(random));\n          }\n          exists = \"likely not\";\n        } else {\n          // real term\n          target = terms.get(random.nextInt(terms.size()));\n          exists = \"yes\";\n        }\n\n        upto = Collections.binarySearch(terms, target);\n\n        if (random.nextBoolean()) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekCeil target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekCeil\n          final TermsEnum.SeekStatus status = termsEnum.seekCeil(target, random.nextBoolean());\n          if (VERBOSE) {\n            System.out.println(\"  got \" + status);\n          }\n          \n          if (upto < 0) {\n            upto = -(upto+1);\n            if (upto >= terms.size()) {\n              assertEquals(TermsEnum.SeekStatus.END, status);\n              upto = -1;\n            } else {\n              assertEquals(TermsEnum.SeekStatus.NOT_FOUND, status);\n              assertEquals(terms.get(upto), termsEnum.term());\n            }\n          } else {\n            assertEquals(TermsEnum.SeekStatus.FOUND, status);\n            assertEquals(terms.get(upto), termsEnum.term());\n          }\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekExact target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekExact\n          final boolean result = termsEnum.seekExact(target, false);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + result);\n          }\n          if (upto < 0) {\n            assertFalse(result);\n            upto = -1;\n          } else {\n            assertTrue(result);\n            assertEquals(target, termsEnum.term());\n          }\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6e919043fa85ee891123768dd655a98edbbf63c","date":1322225413,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestTermsEnum#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermsEnum#test().mjava","sourceNew":"  public void test() throws Exception {\n    final LineFileDocs docs = new LineFileDocs(random);\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, d);\n    final int numDocs = atLeast(10);\n    for(int docCount=0;docCount<numDocs;docCount++) {\n      w.addDocument(docs.nextDoc());\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final List<BytesRef> terms = new ArrayList<BytesRef>();\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"body\").iterator(null);\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      terms.add(BytesRef.deepCopyOf(term));\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + terms.size() + \" terms\");\n    }\n\n    int upto = -1;\n    final int iters = atLeast(200);\n    for(int iter=0;iter<iters;iter++) {\n      final boolean isEnd;\n      if (upto != -1 && random.nextBoolean()) {\n        // next\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter next\");\n        }\n        isEnd = termsEnum.next() == null;\n        upto++;\n        if (isEnd) {\n          if (VERBOSE) {\n            System.out.println(\"  end\");\n          }\n          assertEquals(upto, terms.size());\n          upto = -1;\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  got term=\" + termsEnum.term().utf8ToString() + \" expected=\" + terms.get(upto).utf8ToString());\n          }\n          assertTrue(upto < terms.size());\n          assertEquals(terms.get(upto), termsEnum.term());\n        }\n      } else {\n\n        final BytesRef target;\n        final String exists;\n        if (random.nextBoolean()) {\n          // likely fake term\n          if (random.nextBoolean()) {\n            target = new BytesRef(_TestUtil.randomSimpleString(random));\n          } else {\n            target = new BytesRef(_TestUtil.randomRealisticUnicodeString(random));\n          }\n          exists = \"likely not\";\n        } else {\n          // real term\n          target = terms.get(random.nextInt(terms.size()));\n          exists = \"yes\";\n        }\n\n        upto = Collections.binarySearch(terms, target);\n\n        if (random.nextBoolean()) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekCeil target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekCeil\n          final TermsEnum.SeekStatus status = termsEnum.seekCeil(target, random.nextBoolean());\n          if (VERBOSE) {\n            System.out.println(\"  got \" + status);\n          }\n          \n          if (upto < 0) {\n            upto = -(upto+1);\n            if (upto >= terms.size()) {\n              assertEquals(TermsEnum.SeekStatus.END, status);\n              upto = -1;\n            } else {\n              assertEquals(TermsEnum.SeekStatus.NOT_FOUND, status);\n              assertEquals(terms.get(upto), termsEnum.term());\n            }\n          } else {\n            assertEquals(TermsEnum.SeekStatus.FOUND, status);\n            assertEquals(terms.get(upto), termsEnum.term());\n          }\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekExact target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekExact\n          final boolean result = termsEnum.seekExact(target, false);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + result);\n          }\n          if (upto < 0) {\n            assertFalse(result);\n            upto = -1;\n          } else {\n            assertTrue(result);\n            assertEquals(target, termsEnum.term());\n          }\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    final LineFileDocs docs = new LineFileDocs(random);\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, d);\n    final int numDocs = atLeast(10);\n    for(int docCount=0;docCount<numDocs;docCount++) {\n      w.addDocument(docs.nextDoc());\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final List<BytesRef> terms = new ArrayList<BytesRef>();\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"body\").iterator(null);\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      terms.add(new BytesRef(term));\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + terms.size() + \" terms\");\n    }\n\n    int upto = -1;\n    final int iters = atLeast(200);\n    for(int iter=0;iter<iters;iter++) {\n      final boolean isEnd;\n      if (upto != -1 && random.nextBoolean()) {\n        // next\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter next\");\n        }\n        isEnd = termsEnum.next() == null;\n        upto++;\n        if (isEnd) {\n          if (VERBOSE) {\n            System.out.println(\"  end\");\n          }\n          assertEquals(upto, terms.size());\n          upto = -1;\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  got term=\" + termsEnum.term().utf8ToString() + \" expected=\" + terms.get(upto).utf8ToString());\n          }\n          assertTrue(upto < terms.size());\n          assertEquals(terms.get(upto), termsEnum.term());\n        }\n      } else {\n\n        final BytesRef target;\n        final String exists;\n        if (random.nextBoolean()) {\n          // likely fake term\n          if (random.nextBoolean()) {\n            target = new BytesRef(_TestUtil.randomSimpleString(random));\n          } else {\n            target = new BytesRef(_TestUtil.randomRealisticUnicodeString(random));\n          }\n          exists = \"likely not\";\n        } else {\n          // real term\n          target = terms.get(random.nextInt(terms.size()));\n          exists = \"yes\";\n        }\n\n        upto = Collections.binarySearch(terms, target);\n\n        if (random.nextBoolean()) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekCeil target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekCeil\n          final TermsEnum.SeekStatus status = termsEnum.seekCeil(target, random.nextBoolean());\n          if (VERBOSE) {\n            System.out.println(\"  got \" + status);\n          }\n          \n          if (upto < 0) {\n            upto = -(upto+1);\n            if (upto >= terms.size()) {\n              assertEquals(TermsEnum.SeekStatus.END, status);\n              upto = -1;\n            } else {\n              assertEquals(TermsEnum.SeekStatus.NOT_FOUND, status);\n              assertEquals(terms.get(upto), termsEnum.term());\n            }\n          } else {\n            assertEquals(TermsEnum.SeekStatus.FOUND, status);\n            assertEquals(terms.get(upto), termsEnum.term());\n          }\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekExact target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekExact\n          final boolean result = termsEnum.seekExact(target, false);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + result);\n          }\n          if (upto < 0) {\n            assertFalse(result);\n            upto = -1;\n          } else {\n            assertTrue(result);\n            assertEquals(target, termsEnum.term());\n          }\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTermsEnum#test().mjava","sourceNew":"  public void test() throws Exception {\n    final LineFileDocs docs = new LineFileDocs(random);\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, d);\n    final int numDocs = atLeast(10);\n    for(int docCount=0;docCount<numDocs;docCount++) {\n      w.addDocument(docs.nextDoc());\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final List<BytesRef> terms = new ArrayList<BytesRef>();\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"body\").iterator(null);\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      terms.add(BytesRef.deepCopyOf(term));\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + terms.size() + \" terms\");\n    }\n\n    int upto = -1;\n    final int iters = atLeast(200);\n    for(int iter=0;iter<iters;iter++) {\n      final boolean isEnd;\n      if (upto != -1 && random.nextBoolean()) {\n        // next\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter next\");\n        }\n        isEnd = termsEnum.next() == null;\n        upto++;\n        if (isEnd) {\n          if (VERBOSE) {\n            System.out.println(\"  end\");\n          }\n          assertEquals(upto, terms.size());\n          upto = -1;\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  got term=\" + termsEnum.term().utf8ToString() + \" expected=\" + terms.get(upto).utf8ToString());\n          }\n          assertTrue(upto < terms.size());\n          assertEquals(terms.get(upto), termsEnum.term());\n        }\n      } else {\n\n        final BytesRef target;\n        final String exists;\n        if (random.nextBoolean()) {\n          // likely fake term\n          if (random.nextBoolean()) {\n            target = new BytesRef(_TestUtil.randomSimpleString(random));\n          } else {\n            target = new BytesRef(_TestUtil.randomRealisticUnicodeString(random));\n          }\n          exists = \"likely not\";\n        } else {\n          // real term\n          target = terms.get(random.nextInt(terms.size()));\n          exists = \"yes\";\n        }\n\n        upto = Collections.binarySearch(terms, target);\n\n        if (random.nextBoolean()) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekCeil target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekCeil\n          final TermsEnum.SeekStatus status = termsEnum.seekCeil(target, random.nextBoolean());\n          if (VERBOSE) {\n            System.out.println(\"  got \" + status);\n          }\n          \n          if (upto < 0) {\n            upto = -(upto+1);\n            if (upto >= terms.size()) {\n              assertEquals(TermsEnum.SeekStatus.END, status);\n              upto = -1;\n            } else {\n              assertEquals(TermsEnum.SeekStatus.NOT_FOUND, status);\n              assertEquals(terms.get(upto), termsEnum.term());\n            }\n          } else {\n            assertEquals(TermsEnum.SeekStatus.FOUND, status);\n            assertEquals(terms.get(upto), termsEnum.term());\n          }\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekExact target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekExact\n          final boolean result = termsEnum.seekExact(target, false);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + result);\n          }\n          if (upto < 0) {\n            assertFalse(result);\n            upto = -1;\n          } else {\n            assertTrue(result);\n            assertEquals(target, termsEnum.term());\n          }\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    final LineFileDocs docs = new LineFileDocs(random);\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, d);\n    final int numDocs = atLeast(10);\n    for(int docCount=0;docCount<numDocs;docCount++) {\n      w.addDocument(docs.nextDoc());\n    }\n    final IndexReader r = w.getReader();\n    w.close();\n\n    final List<BytesRef> terms = new ArrayList<BytesRef>();\n    final TermsEnum termsEnum = MultiFields.getTerms(r, \"body\").iterator(null);\n    BytesRef term;\n    while((term = termsEnum.next()) != null) {\n      terms.add(BytesRef.deepCopyOf(term));\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + terms.size() + \" terms\");\n    }\n\n    int upto = -1;\n    final int iters = atLeast(200);\n    for(int iter=0;iter<iters;iter++) {\n      final boolean isEnd;\n      if (upto != -1 && random.nextBoolean()) {\n        // next\n        if (VERBOSE) {\n          System.out.println(\"TEST: iter next\");\n        }\n        isEnd = termsEnum.next() == null;\n        upto++;\n        if (isEnd) {\n          if (VERBOSE) {\n            System.out.println(\"  end\");\n          }\n          assertEquals(upto, terms.size());\n          upto = -1;\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"  got term=\" + termsEnum.term().utf8ToString() + \" expected=\" + terms.get(upto).utf8ToString());\n          }\n          assertTrue(upto < terms.size());\n          assertEquals(terms.get(upto), termsEnum.term());\n        }\n      } else {\n\n        final BytesRef target;\n        final String exists;\n        if (random.nextBoolean()) {\n          // likely fake term\n          if (random.nextBoolean()) {\n            target = new BytesRef(_TestUtil.randomSimpleString(random));\n          } else {\n            target = new BytesRef(_TestUtil.randomRealisticUnicodeString(random));\n          }\n          exists = \"likely not\";\n        } else {\n          // real term\n          target = terms.get(random.nextInt(terms.size()));\n          exists = \"yes\";\n        }\n\n        upto = Collections.binarySearch(terms, target);\n\n        if (random.nextBoolean()) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekCeil target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekCeil\n          final TermsEnum.SeekStatus status = termsEnum.seekCeil(target, random.nextBoolean());\n          if (VERBOSE) {\n            System.out.println(\"  got \" + status);\n          }\n          \n          if (upto < 0) {\n            upto = -(upto+1);\n            if (upto >= terms.size()) {\n              assertEquals(TermsEnum.SeekStatus.END, status);\n              upto = -1;\n            } else {\n              assertEquals(TermsEnum.SeekStatus.NOT_FOUND, status);\n              assertEquals(terms.get(upto), termsEnum.term());\n            }\n          } else {\n            assertEquals(TermsEnum.SeekStatus.FOUND, status);\n            assertEquals(terms.get(upto), termsEnum.term());\n          }\n        } else {\n          if (VERBOSE) {\n            System.out.println(\"TEST: iter seekExact target=\" + target.utf8ToString() + \" exists=\" + exists);\n          }\n          // seekExact\n          final boolean result = termsEnum.seekExact(target, false);\n          if (VERBOSE) {\n            System.out.println(\"  got \" + result);\n          }\n          if (upto < 0) {\n            assertFalse(result);\n            upto = -1;\n          } else {\n            assertTrue(result);\n            assertEquals(target, termsEnum.term());\n          }\n        }\n      }\n    }\n\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e6e919043fa85ee891123768dd655a98edbbf63c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["0dbc7493b4f3e9c8bfa60028d6a4d82e2e9f0b67"],"0dbc7493b4f3e9c8bfa60028d6a4d82e2e9f0b67":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0dbc7493b4f3e9c8bfa60028d6a4d82e2e9f0b67"],"e6e919043fa85ee891123768dd655a98edbbf63c":["3cc749c053615f5871f3b95715fe292f34e70a53"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0dbc7493b4f3e9c8bfa60028d6a4d82e2e9f0b67"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0dbc7493b4f3e9c8bfa60028d6a4d82e2e9f0b67","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"3cc749c053615f5871f3b95715fe292f34e70a53":["e6e919043fa85ee891123768dd655a98edbbf63c"],"0dbc7493b4f3e9c8bfa60028d6a4d82e2e9f0b67":["3cc749c053615f5871f3b95715fe292f34e70a53","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"e6e919043fa85ee891123768dd655a98edbbf63c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}