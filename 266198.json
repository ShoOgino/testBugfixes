{"path":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile2#testClonedStreamsClosing().mjava","commits":[{"id":"f382b2e9f4ca7dbe98e2f15da70983ecfc02b171","date":1412231650,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile2#testClonedStreamsClosing().mjava","pathOld":"/dev/null","sourceNew":"  public void testClonedStreamsClosing() throws IOException {\n    CompoundFileDirectory cr = new CompoundFileDirectory(id, dir, \"f.comp\", newIOContext(random()), false);\n    \n    // basic clone\n    IndexInput expected = dir.openInput(\"f11\", newIOContext(random()));\n    \n    IndexInput one = cr.openInput(\"f11\", newIOContext(random()));\n    \n    IndexInput two = one.clone();\n    \n    TestCompoundFile.assertSameStreams(\"basic clone one\", expected, one);\n    expected.seek(0);\n    TestCompoundFile.assertSameStreams(\"basic clone two\", expected, two);\n    \n    // Now close the first stream\n    one.close();\n    \n    // The following should really fail since we couldn't expect to\n    // access a file once close has been called on it (regardless of\n    // buffering and/or clone magic)\n    expected.seek(0);\n    two.seek(0);\n    TestCompoundFile.assertSameStreams(\"basic clone two/2\", expected, two);\n    \n    // Now close the compound reader\n    cr.close();\n    \n    // The following may also fail since the compound stream is closed\n    expected.seek(0);\n    two.seek(0);\n    //assertSameStreams(\"basic clone two/3\", expected, two);\n    \n    // Now close the second clone\n    two.close();\n    expected.seek(0);\n    //assertSameStreams(\"basic clone two/4\", expected, two);\n    \n    expected.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"989d940c4bf402188f4f0ae13736836885227383","date":1412263633,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile2#testClonedStreamsClosing().mjava","sourceNew":null,"sourceOld":"  public void testClonedStreamsClosing() throws IOException {\n    CompoundFileDirectory cr = new CompoundFileDirectory(id, dir, \"f.comp\", newIOContext(random()), false);\n    \n    // basic clone\n    IndexInput expected = dir.openInput(\"f11\", newIOContext(random()));\n    \n    IndexInput one = cr.openInput(\"f11\", newIOContext(random()));\n    \n    IndexInput two = one.clone();\n    \n    TestCompoundFile.assertSameStreams(\"basic clone one\", expected, one);\n    expected.seek(0);\n    TestCompoundFile.assertSameStreams(\"basic clone two\", expected, two);\n    \n    // Now close the first stream\n    one.close();\n    \n    // The following should really fail since we couldn't expect to\n    // access a file once close has been called on it (regardless of\n    // buffering and/or clone magic)\n    expected.seek(0);\n    two.seek(0);\n    TestCompoundFile.assertSameStreams(\"basic clone two/2\", expected, two);\n    \n    // Now close the compound reader\n    cr.close();\n    \n    // The following may also fail since the compound stream is closed\n    expected.seek(0);\n    two.seek(0);\n    //assertSameStreams(\"basic clone two/3\", expected, two);\n    \n    // Now close the second clone\n    two.close();\n    expected.seek(0);\n    //assertSameStreams(\"basic clone two/4\", expected, two);\n    \n    expected.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"989d940c4bf402188f4f0ae13736836885227383":["f382b2e9f4ca7dbe98e2f15da70983ecfc02b171"],"f382b2e9f4ca7dbe98e2f15da70983ecfc02b171":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"989d940c4bf402188f4f0ae13736836885227383":[],"f382b2e9f4ca7dbe98e2f15da70983ecfc02b171":["989d940c4bf402188f4f0ae13736836885227383"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f382b2e9f4ca7dbe98e2f15da70983ecfc02b171","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["989d940c4bf402188f4f0ae13736836885227383","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}