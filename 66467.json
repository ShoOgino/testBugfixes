{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene54/TestLucene54DocValuesFormat#doTestTermsEnumRandom(int,int,int).mjava","commits":[{"id":"a870f9917149dc600c4ad4417d615c1795de5864","date":1445975387,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene54/TestLucene54DocValuesFormat#doTestTermsEnumRandom(int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  // TODO: try to refactor this and some termsenum tests into the base class.\n  // to do this we need to fix the test class to get a DVF not a Codec so we can setup\n  // the postings format correctly.\n  private void doTestTermsEnumRandom(int numDocs, int minLength, int maxLength) throws Exception {\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    // set to duel against a codec which has ordinals:\n    final PostingsFormat pf = TestUtil.getPostingsFormatWithOrds(random());\n    final DocValuesFormat dv = new Lucene54DocValuesFormat();\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        return pf;\n      }\n\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return dv;\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length = TestUtil.nextInt(random(), minLength, maxLength);\n      int numValues = random().nextInt(17);\n      // create a random list of strings\n      List<String> values = new ArrayList<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(TestUtil.randomSimpleString(random(), minLength, length));\n      }\n      \n      // add in any order to the indexed field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : values) {\n        doc.add(newStringField(\"indexed\", v, Field.Store.NO));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered2 = new ArrayList<>(values);\n      Collections.shuffle(unordered2, random());\n      for (String v : unordered2) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare per-segment\n    DirectoryReader ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      Terms terms = r.terms(\"indexed\");\n      if (terms != null) {\n        SortedSetDocValues ssdv = r.getSortedSetDocValues(\"dv\");\n        assertEquals(terms.size(), ssdv.getValueCount());\n        TermsEnum expected = terms.iterator();\n        TermsEnum actual = r.getSortedSetDocValues(\"dv\").termsEnum();\n        assertEquals(terms.size(), expected, actual);\n\n        doTestSortedSetEnumAdvanceIndependently(ssdv);\n      }\n    }\n    ir.close();\n    \n    writer.forceMerge(1);\n    \n    // now compare again after the merge\n    ir = writer.getReader();\n    LeafReader ar = getOnlySegmentReader(ir);\n    Terms terms = ar.terms(\"indexed\");\n    if (terms != null) {\n      assertEquals(terms.size(), ar.getSortedSetDocValues(\"dv\").getValueCount());\n      TermsEnum expected = terms.iterator();\n      TermsEnum actual = ar.getSortedSetDocValues(\"dv\").termsEnum();\n      assertEquals(terms.size(), expected, actual);\n    }\n    ir.close();\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene54/TestLucene54DocValuesFormat#doTestTermsEnumRandom(int,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene54/TestLucene54DocValuesFormat#doTestTermsEnumRandom(int,int,int).mjava","sourceNew":"  // TODO: try to refactor this and some termsenum tests into the base class.\n  // to do this we need to fix the test class to get a DVF not a Codec so we can setup\n  // the postings format correctly.\n  private void doTestTermsEnumRandom(int numDocs, int minLength, int maxLength) throws Exception {\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    // set to duel against a codec which has ordinals:\n    final PostingsFormat pf = TestUtil.getPostingsFormatWithOrds(random());\n    final DocValuesFormat dv = new Lucene54DocValuesFormat();\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        return pf;\n      }\n\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return dv;\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length = TestUtil.nextInt(random(), minLength, maxLength);\n      int numValues = random().nextInt(17);\n      // create a random list of strings\n      List<String> values = new ArrayList<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(TestUtil.randomSimpleString(random(), minLength, length));\n      }\n      \n      // add in any order to the indexed field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : values) {\n        doc.add(newStringField(\"indexed\", v, Field.Store.NO));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered2 = new ArrayList<>(values);\n      Collections.shuffle(unordered2, random());\n      for (String v : unordered2) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare per-segment\n    DirectoryReader ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      Terms terms = r.terms(\"indexed\");\n      if (terms != null) {\n        SortedSetDocValues ssdv = r.getSortedSetDocValues(\"dv\");\n        assertEquals(terms.size(), ssdv.getValueCount());\n        TermsEnum expected = terms.iterator();\n        TermsEnum actual = r.getSortedSetDocValues(\"dv\").termsEnum();\n        assertEquals(terms.size(), expected, actual);\n\n        doTestSortedSetEnumAdvanceIndependently(ssdv);\n      }\n    }\n    ir.close();\n    \n    writer.forceMerge(1);\n    \n    // now compare again after the merge\n    ir = writer.getReader();\n    LeafReader ar = getOnlyLeafReader(ir);\n    Terms terms = ar.terms(\"indexed\");\n    if (terms != null) {\n      assertEquals(terms.size(), ar.getSortedSetDocValues(\"dv\").getValueCount());\n      TermsEnum expected = terms.iterator();\n      TermsEnum actual = ar.getSortedSetDocValues(\"dv\").termsEnum();\n      assertEquals(terms.size(), expected, actual);\n    }\n    ir.close();\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // TODO: try to refactor this and some termsenum tests into the base class.\n  // to do this we need to fix the test class to get a DVF not a Codec so we can setup\n  // the postings format correctly.\n  private void doTestTermsEnumRandom(int numDocs, int minLength, int maxLength) throws Exception {\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    // set to duel against a codec which has ordinals:\n    final PostingsFormat pf = TestUtil.getPostingsFormatWithOrds(random());\n    final DocValuesFormat dv = new Lucene54DocValuesFormat();\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        return pf;\n      }\n\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return dv;\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length = TestUtil.nextInt(random(), minLength, maxLength);\n      int numValues = random().nextInt(17);\n      // create a random list of strings\n      List<String> values = new ArrayList<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(TestUtil.randomSimpleString(random(), minLength, length));\n      }\n      \n      // add in any order to the indexed field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : values) {\n        doc.add(newStringField(\"indexed\", v, Field.Store.NO));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered2 = new ArrayList<>(values);\n      Collections.shuffle(unordered2, random());\n      for (String v : unordered2) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare per-segment\n    DirectoryReader ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      Terms terms = r.terms(\"indexed\");\n      if (terms != null) {\n        SortedSetDocValues ssdv = r.getSortedSetDocValues(\"dv\");\n        assertEquals(terms.size(), ssdv.getValueCount());\n        TermsEnum expected = terms.iterator();\n        TermsEnum actual = r.getSortedSetDocValues(\"dv\").termsEnum();\n        assertEquals(terms.size(), expected, actual);\n\n        doTestSortedSetEnumAdvanceIndependently(ssdv);\n      }\n    }\n    ir.close();\n    \n    writer.forceMerge(1);\n    \n    // now compare again after the merge\n    ir = writer.getReader();\n    LeafReader ar = getOnlySegmentReader(ir);\n    Terms terms = ar.terms(\"indexed\");\n    if (terms != null) {\n      assertEquals(terms.size(), ar.getSortedSetDocValues(\"dv\").getValueCount());\n      TermsEnum expected = terms.iterator();\n      TermsEnum actual = ar.getSortedSetDocValues(\"dv\").termsEnum();\n      assertEquals(terms.size(), expected, actual);\n    }\n    ir.close();\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":["a870f9917149dc600c4ad4417d615c1795de5864"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","date":1475755647,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene54/TestLucene54DocValuesFormat#doTestTermsEnumRandom(int,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene54/TestLucene54DocValuesFormat#doTestTermsEnumRandom(int,int,int).mjava","sourceNew":"  // TODO: try to refactor this and some termsenum tests into the base class.\n  // to do this we need to fix the test class to get a DVF not a Codec so we can setup\n  // the postings format correctly.\n  private void doTestTermsEnumRandom(int numDocs, int minLength, int maxLength) throws Exception {\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    // set to duel against a codec which has ordinals:\n    final PostingsFormat pf = TestUtil.getPostingsFormatWithOrds(random());\n    final DocValuesFormat dv = new Lucene54DocValuesFormat();\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        return pf;\n      }\n\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return dv;\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length = TestUtil.nextInt(random(), minLength, maxLength);\n      int numValues = random().nextInt(17);\n      // create a random list of strings\n      List<String> values = new ArrayList<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(TestUtil.randomSimpleString(random(), minLength, length));\n      }\n      \n      // add in any order to the indexed field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : values) {\n        doc.add(newStringField(\"indexed\", v, Field.Store.NO));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered2 = new ArrayList<>(values);\n      Collections.shuffle(unordered2, random());\n      for (String v : unordered2) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare per-segment\n    DirectoryReader ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      Terms terms = r.terms(\"indexed\");\n      if (terms != null) {\n        SortedSetDocValues ssdv = r.getSortedSetDocValues(\"dv\");\n        assertEquals(terms.size(), ssdv.getValueCount());\n        TermsEnum expected = terms.iterator();\n        TermsEnum actual = r.getSortedSetDocValues(\"dv\").termsEnum();\n        assertEquals(terms.size(), expected, actual);\n\n        doTestSortedSetEnumAdvanceIndependently(ssdv);\n      }\n    }\n    ir.close();\n    \n    writer.forceMerge(1);\n    \n    // now compare again after the merge\n    ir = writer.getReader();\n    LeafReader ar = getOnlyLeafReader(ir);\n    Terms terms = ar.terms(\"indexed\");\n    if (terms != null) {\n      assertEquals(terms.size(), ar.getSortedSetDocValues(\"dv\").getValueCount());\n      TermsEnum expected = terms.iterator();\n      TermsEnum actual = ar.getSortedSetDocValues(\"dv\").termsEnum();\n      assertEquals(terms.size(), expected, actual);\n    }\n    ir.close();\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // TODO: try to refactor this and some termsenum tests into the base class.\n  // to do this we need to fix the test class to get a DVF not a Codec so we can setup\n  // the postings format correctly.\n  private void doTestTermsEnumRandom(int numDocs, int minLength, int maxLength) throws Exception {\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    // set to duel against a codec which has ordinals:\n    final PostingsFormat pf = TestUtil.getPostingsFormatWithOrds(random());\n    final DocValuesFormat dv = new Lucene54DocValuesFormat();\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        return pf;\n      }\n\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return dv;\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length = TestUtil.nextInt(random(), minLength, maxLength);\n      int numValues = random().nextInt(17);\n      // create a random list of strings\n      List<String> values = new ArrayList<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(TestUtil.randomSimpleString(random(), minLength, length));\n      }\n      \n      // add in any order to the indexed field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : values) {\n        doc.add(newStringField(\"indexed\", v, Field.Store.NO));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered2 = new ArrayList<>(values);\n      Collections.shuffle(unordered2, random());\n      for (String v : unordered2) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare per-segment\n    DirectoryReader ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      Terms terms = r.terms(\"indexed\");\n      if (terms != null) {\n        SortedSetDocValues ssdv = r.getSortedSetDocValues(\"dv\");\n        assertEquals(terms.size(), ssdv.getValueCount());\n        TermsEnum expected = terms.iterator();\n        TermsEnum actual = r.getSortedSetDocValues(\"dv\").termsEnum();\n        assertEquals(terms.size(), expected, actual);\n\n        doTestSortedSetEnumAdvanceIndependently(ssdv);\n      }\n    }\n    ir.close();\n    \n    writer.forceMerge(1);\n    \n    // now compare again after the merge\n    ir = writer.getReader();\n    LeafReader ar = getOnlyLeafReader(ir);\n    Terms terms = ar.terms(\"indexed\");\n    if (terms != null) {\n      assertEquals(terms.size(), ar.getSortedSetDocValues(\"dv\").getValueCount());\n      TermsEnum expected = terms.iterator();\n      TermsEnum actual = ar.getSortedSetDocValues(\"dv\").termsEnum();\n      assertEquals(terms.size(), expected, actual);\n    }\n    ir.close();\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene54/TestLucene54DocValuesFormat#doTestTermsEnumRandom(int,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene54/TestLucene54DocValuesFormat#doTestTermsEnumRandom(int,int,int).mjava","sourceNew":"  // TODO: try to refactor this and some termsenum tests into the base class.\n  // to do this we need to fix the test class to get a DVF not a Codec so we can setup\n  // the postings format correctly.\n  private void doTestTermsEnumRandom(int numDocs, int minLength, int maxLength) throws Exception {\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    // set to duel against a codec which has ordinals:\n    final PostingsFormat pf = TestUtil.getPostingsFormatWithOrds(random());\n    final DocValuesFormat dv = new Lucene54DocValuesFormat();\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        return pf;\n      }\n\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return dv;\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length = TestUtil.nextInt(random(), minLength, maxLength);\n      int numValues = random().nextInt(17);\n      // create a random list of strings\n      List<String> values = new ArrayList<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(TestUtil.randomSimpleString(random(), minLength, length));\n      }\n      \n      // add in any order to the indexed field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : values) {\n        doc.add(newStringField(\"indexed\", v, Field.Store.NO));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered2 = new ArrayList<>(values);\n      Collections.shuffle(unordered2, random());\n      for (String v : unordered2) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare per-segment\n    DirectoryReader ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      Terms terms = r.terms(\"indexed\");\n      if (terms != null) {\n        SortedSetDocValues ssdv = r.getSortedSetDocValues(\"dv\");\n        assertEquals(terms.size(), ssdv.getValueCount());\n        TermsEnum expected = terms.iterator();\n        TermsEnum actual = r.getSortedSetDocValues(\"dv\").termsEnum();\n        assertEquals(terms.size(), expected, actual);\n\n        doTestSortedSetEnumAdvanceIndependently(ssdv);\n      }\n    }\n    ir.close();\n    \n    writer.forceMerge(1);\n    \n    // now compare again after the merge\n    ir = writer.getReader();\n    LeafReader ar = getOnlyLeafReader(ir);\n    Terms terms = ar.terms(\"indexed\");\n    if (terms != null) {\n      assertEquals(terms.size(), ar.getSortedSetDocValues(\"dv\").getValueCount());\n      TermsEnum expected = terms.iterator();\n      TermsEnum actual = ar.getSortedSetDocValues(\"dv\").termsEnum();\n      assertEquals(terms.size(), expected, actual);\n    }\n    ir.close();\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // TODO: try to refactor this and some termsenum tests into the base class.\n  // to do this we need to fix the test class to get a DVF not a Codec so we can setup\n  // the postings format correctly.\n  private void doTestTermsEnumRandom(int numDocs, int minLength, int maxLength) throws Exception {\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    // set to duel against a codec which has ordinals:\n    final PostingsFormat pf = TestUtil.getPostingsFormatWithOrds(random());\n    final DocValuesFormat dv = new Lucene54DocValuesFormat();\n    conf.setCodec(new AssertingCodec() {\n      @Override\n      public PostingsFormat getPostingsFormatForField(String field) {\n        return pf;\n      }\n\n      @Override\n      public DocValuesFormat getDocValuesFormatForField(String field) {\n        return dv;\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length = TestUtil.nextInt(random(), minLength, maxLength);\n      int numValues = random().nextInt(17);\n      // create a random list of strings\n      List<String> values = new ArrayList<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(TestUtil.randomSimpleString(random(), minLength, length));\n      }\n      \n      // add in any order to the indexed field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : values) {\n        doc.add(newStringField(\"indexed\", v, Field.Store.NO));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered2 = new ArrayList<>(values);\n      Collections.shuffle(unordered2, random());\n      for (String v : unordered2) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare per-segment\n    DirectoryReader ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      Terms terms = r.terms(\"indexed\");\n      if (terms != null) {\n        SortedSetDocValues ssdv = r.getSortedSetDocValues(\"dv\");\n        assertEquals(terms.size(), ssdv.getValueCount());\n        TermsEnum expected = terms.iterator();\n        TermsEnum actual = r.getSortedSetDocValues(\"dv\").termsEnum();\n        assertEquals(terms.size(), expected, actual);\n\n        doTestSortedSetEnumAdvanceIndependently(ssdv);\n      }\n    }\n    ir.close();\n    \n    writer.forceMerge(1);\n    \n    // now compare again after the merge\n    ir = writer.getReader();\n    LeafReader ar = getOnlyLeafReader(ir);\n    Terms terms = ar.terms(\"indexed\");\n    if (terms != null) {\n      assertEquals(terms.size(), ar.getSortedSetDocValues(\"dv\").getValueCount());\n      TermsEnum expected = terms.iterator();\n      TermsEnum actual = ar.getSortedSetDocValues(\"dv\").termsEnum();\n      assertEquals(terms.size(), expected, actual);\n    }\n    ir.close();\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["a870f9917149dc600c4ad4417d615c1795de5864"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a870f9917149dc600c4ad4417d615c1795de5864":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"]},"commit2Childs":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a870f9917149dc600c4ad4417d615c1795de5864"],"a870f9917149dc600c4ad4417d615c1795de5864":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}