{"path":"lucene/backwards/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#scorer(IndexReader,boolean,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#scorer(IndexReader,boolean,boolean).mjava","pathOld":"backwards/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#scorer(IndexReader,boolean,boolean).mjava","sourceNew":"    @Override\n    public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder, boolean topScorer)\n        throws IOException {\n      List<Scorer> required = new ArrayList<Scorer>();\n      List<Scorer> prohibited = new ArrayList<Scorer>();\n      List<Scorer> optional = new ArrayList<Scorer>();\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Weight w  : weights) {\n        BooleanClause c =  cIter.next();\n        Scorer subScorer = w.scorer(reader, true, false);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          required.add(subScorer);\n        } else if (c.isProhibited()) {\n          prohibited.add(subScorer);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n      \n      // Check if we can return a BooleanScorer\n      if (!scoreDocsInOrder && topScorer && required.size() == 0 && prohibited.size() < 32) {\n        return new BooleanScorer(similarity, minNrShouldMatch, optional, prohibited);\n      }\n      \n      if (required.size() == 0 && optional.size() == 0) {\n        // no required and optional clauses.\n        return null;\n      } else if (optional.size() < minNrShouldMatch) {\n        // either >1 req scorer, or there are 0 req scorers and at least 1\n        // optional scorer. Therefore if there are not enough optional scorers\n        // no documents will be matched by the query\n        return null;\n      }\n      \n      // Return a BooleanScorer2\n      return new BooleanScorer2(similarity, minNrShouldMatch, required, prohibited, optional);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder, boolean topScorer)\n        throws IOException {\n      List<Scorer> required = new ArrayList<Scorer>();\n      List<Scorer> prohibited = new ArrayList<Scorer>();\n      List<Scorer> optional = new ArrayList<Scorer>();\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Weight w  : weights) {\n        BooleanClause c =  cIter.next();\n        Scorer subScorer = w.scorer(reader, true, false);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          required.add(subScorer);\n        } else if (c.isProhibited()) {\n          prohibited.add(subScorer);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n      \n      // Check if we can return a BooleanScorer\n      if (!scoreDocsInOrder && topScorer && required.size() == 0 && prohibited.size() < 32) {\n        return new BooleanScorer(similarity, minNrShouldMatch, optional, prohibited);\n      }\n      \n      if (required.size() == 0 && optional.size() == 0) {\n        // no required and optional clauses.\n        return null;\n      } else if (optional.size() < minNrShouldMatch) {\n        // either >1 req scorer, or there are 0 req scorers and at least 1\n        // optional scorer. Therefore if there are not enough optional scorers\n        // no documents will be matched by the query\n        return null;\n      }\n      \n      // Return a BooleanScorer2\n      return new BooleanScorer2(similarity, minNrShouldMatch, required, prohibited, optional);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#scorer(IndexReader,boolean,boolean).mjava","sourceNew":null,"sourceOld":"    @Override\n    public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder, boolean topScorer)\n        throws IOException {\n      List<Scorer> required = new ArrayList<Scorer>();\n      List<Scorer> prohibited = new ArrayList<Scorer>();\n      List<Scorer> optional = new ArrayList<Scorer>();\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Weight w  : weights) {\n        BooleanClause c =  cIter.next();\n        Scorer subScorer = w.scorer(reader, true, false);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          required.add(subScorer);\n        } else if (c.isProhibited()) {\n          prohibited.add(subScorer);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n      \n      // Check if we can return a BooleanScorer\n      if (!scoreDocsInOrder && topScorer && required.size() == 0 && prohibited.size() < 32) {\n        return new BooleanScorer(similarity, minNrShouldMatch, optional, prohibited);\n      }\n      \n      if (required.size() == 0 && optional.size() == 0) {\n        // no required and optional clauses.\n        return null;\n      } else if (optional.size() < minNrShouldMatch) {\n        // either >1 req scorer, or there are 0 req scorers and at least 1\n        // optional scorer. Therefore if there are not enough optional scorers\n        // no documents will be matched by the query\n        return null;\n      }\n      \n      // Return a BooleanScorer2\n      return new BooleanScorer2(similarity, minNrShouldMatch, required, prohibited, optional);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}