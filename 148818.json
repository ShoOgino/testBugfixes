{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/CloudSolrStream#parseComp(String,Map).mjava","commits":[{"id":"42f03b407cd85abd6edd2a1fe7cab9990164aa4b","date":1427303865,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/CloudSolrStream#parseComp(String,Map).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/CloudSolrStream#parseComp(String).mjava","sourceNew":"  private Comparator<Tuple> parseComp(String sort, Map params) throws IOException {\n\n    String fl = (String)params.get(\"fl\");\n    String[] fls = fl.split(\",\");\n    HashSet fieldSet = new HashSet();\n    for(String f : fls) {\n      fieldSet.add(f.trim()); //Handle spaces in the field list.\n    }\n\n    String[] sorts = sort.split(\",\");\n    Comparator[] comps = new Comparator[sorts.length];\n    for(int i=0; i<sorts.length; i++) {\n      String s = sorts[i];\n      String[] spec = s.trim().split(\"\\\\s+\"); //This should take into account spaces in the sort spec.\n\n      if(!fieldSet.contains(spec[0])) {\n        throw new IOException(\"Fields in the sort spec must be included in the field list:\"+spec[0]);\n      }\n\n      if(spec[1].trim().equalsIgnoreCase(\"asc\")) {\n        comps[i] = new AscFieldComp(spec[0]);\n      } else {\n        comps[i] = new DescFieldComp(spec[0]);\n      }\n    }\n\n    if(comps.length > 1) {\n      return new MultiComp(comps);\n    } else {\n      return comps[0];\n    }\n  }\n\n","sourceOld":"  private Comparator<Tuple> parseComp(String sort) {\n    String[] sorts = sort.split(\",\");\n    Comparator[] comps = new Comparator[sorts.length];\n    for(int i=0; i<sorts.length; i++) {\n      String s = sorts[i];\n      String[] spec = s.split(\" \");\n      if(spec[1].trim().equalsIgnoreCase(\"asc\")) {\n        comps[i] = new AscFieldComp(spec[0]);\n      } else {\n        comps[i] = new DescFieldComp(spec[0]);\n      }\n    }\n\n    if(comps.length > 1) {\n      return new MultiComp(comps);\n    } else {\n      return comps[0];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/CloudSolrStream#parseComp(String,Map).mjava","pathOld":"/dev/null","sourceNew":"  private Comparator<Tuple> parseComp(String sort, Map params) throws IOException {\n\n    String fl = (String)params.get(\"fl\");\n    String[] fls = fl.split(\",\");\n    HashSet fieldSet = new HashSet();\n    for(String f : fls) {\n      fieldSet.add(f.trim()); //Handle spaces in the field list.\n    }\n\n    String[] sorts = sort.split(\",\");\n    Comparator[] comps = new Comparator[sorts.length];\n    for(int i=0; i<sorts.length; i++) {\n      String s = sorts[i];\n      String[] spec = s.trim().split(\"\\\\s+\"); //This should take into account spaces in the sort spec.\n\n      if(!fieldSet.contains(spec[0])) {\n        throw new IOException(\"Fields in the sort spec must be included in the field list:\"+spec[0]);\n      }\n\n      if(spec[1].trim().equalsIgnoreCase(\"asc\")) {\n        comps[i] = new AscFieldComp(spec[0]);\n      } else {\n        comps[i] = new DescFieldComp(spec[0]);\n      }\n    }\n\n    if(comps.length > 1) {\n      return new MultiComp(comps);\n    } else {\n      return comps[0];\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f00f1c5fad501b66705121feb623f8cfbb6712f9","date":1431347838,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#parseComp(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/CloudSolrStream#parseComp(String,Map).mjava","sourceNew":"  private Comparator<Tuple> parseComp(String sort, String fl) throws IOException {\n\n    String[] fls = fl.split(\",\");\n    HashSet fieldSet = new HashSet();\n    for(String f : fls) {\n      fieldSet.add(f.trim()); //Handle spaces in the field list.\n    }\n\n    String[] sorts = sort.split(\",\");\n    Comparator[] comps = new Comparator[sorts.length];\n    for(int i=0; i<sorts.length; i++) {\n      String s = sorts[i];\n\n      String[] spec = s.trim().split(\"\\\\s+\"); //This should take into account spaces in the sort spec.\n      \n      String fieldName = spec[0].trim();\n      String order = spec[1].trim();\n      \n      if(!fieldSet.contains(spec[0])) {\n        throw new IOException(\"Fields in the sort spec must be included in the field list:\"+spec[0]);\n      }\n      \n      // if there's an alias for the field then use the alias\n      if(null != fieldMappings && fieldMappings.containsKey(fieldName)){\n        fieldName = fieldMappings.get(fieldName);\n      }\n      \n      comps[i] = new FieldComparator(fieldName, order.equalsIgnoreCase(\"asc\") ? ComparatorOrder.ASCENDING : ComparatorOrder.DESCENDING);\n    }\n\n    if(comps.length > 1) {\n      return new MultiComp(comps);\n    } else {\n      return comps[0];\n    }\n  }\n\n","sourceOld":"  private Comparator<Tuple> parseComp(String sort, Map params) throws IOException {\n\n    String fl = (String)params.get(\"fl\");\n    String[] fls = fl.split(\",\");\n    HashSet fieldSet = new HashSet();\n    for(String f : fls) {\n      fieldSet.add(f.trim()); //Handle spaces in the field list.\n    }\n\n    String[] sorts = sort.split(\",\");\n    Comparator[] comps = new Comparator[sorts.length];\n    for(int i=0; i<sorts.length; i++) {\n      String s = sorts[i];\n      String[] spec = s.trim().split(\"\\\\s+\"); //This should take into account spaces in the sort spec.\n\n      if(!fieldSet.contains(spec[0])) {\n        throw new IOException(\"Fields in the sort spec must be included in the field list:\"+spec[0]);\n      }\n\n      if(spec[1].trim().equalsIgnoreCase(\"asc\")) {\n        comps[i] = new AscFieldComp(spec[0]);\n      } else {\n        comps[i] = new DescFieldComp(spec[0]);\n      }\n    }\n\n    if(comps.length > 1) {\n      return new MultiComp(comps);\n    } else {\n      return comps[0];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["42f03b407cd85abd6edd2a1fe7cab9990164aa4b"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","42f03b407cd85abd6edd2a1fe7cab9990164aa4b"],"42f03b407cd85abd6edd2a1fe7cab9990164aa4b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f00f1c5fad501b66705121feb623f8cfbb6712f9"]},"commit2Childs":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"42f03b407cd85abd6edd2a1fe7cab9990164aa4b":["f00f1c5fad501b66705121feb623f8cfbb6712f9","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","42f03b407cd85abd6edd2a1fe7cab9990164aa4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}