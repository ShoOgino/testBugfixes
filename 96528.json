{"path":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#testEquals().mjava","commits":[{"id":"0445bcd8433e331f296f5502fc089b336cbac3a6","date":1322630375,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#testEquals().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * checks the two indexes are equivalent\n   */\n  public void testEquals() throws Exception {\n    assertReaderStatistics(leftReader, rightReader);\n    assertFields(MultiFields.getFields(leftReader), MultiFields.getFields(rightReader));\n    assertNorms(leftReader, rightReader);\n    assertStoredFields(leftReader, rightReader);\n    assertTermVectors(leftReader, rightReader);\n    assertDocValues(leftReader, rightReader);\n    assertDeletedDocs(leftReader, rightReader);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8be580b58bcc650d428f3f22de81cadcf51d650a","date":1325279655,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#testEquals().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#testEquals().mjava","sourceNew":"  /**\n   * checks the two indexes are equivalent\n   */\n  public void testEquals() throws Exception {\n    assertReaderStatistics(leftReader, rightReader);\n    assertFields(MultiFields.getFields(leftReader), MultiFields.getFields(rightReader), true);\n    assertNorms(leftReader, rightReader);\n    assertStoredFields(leftReader, rightReader);\n    assertTermVectors(leftReader, rightReader);\n    assertDocValues(leftReader, rightReader);\n    assertDeletedDocs(leftReader, rightReader);\n  }\n\n","sourceOld":"  /**\n   * checks the two indexes are equivalent\n   */\n  public void testEquals() throws Exception {\n    assertReaderStatistics(leftReader, rightReader);\n    assertFields(MultiFields.getFields(leftReader), MultiFields.getFields(rightReader));\n    assertNorms(leftReader, rightReader);\n    assertStoredFields(leftReader, rightReader);\n    assertTermVectors(leftReader, rightReader);\n    assertDocValues(leftReader, rightReader);\n    assertDeletedDocs(leftReader, rightReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#testEquals().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#testEquals().mjava","sourceNew":"  /**\n   * checks the two indexes are equivalent\n   */\n  public void testEquals() throws Exception {\n    assertReaderStatistics(leftReader, rightReader);\n    assertFields(MultiFields.getFields(leftReader), MultiFields.getFields(rightReader), true);\n    assertNorms(leftReader, rightReader);\n    assertStoredFields(leftReader, rightReader);\n    assertTermVectors(leftReader, rightReader);\n    assertDocValues(leftReader, rightReader);\n    assertDeletedDocs(leftReader, rightReader);\n  }\n\n","sourceOld":"  /**\n   * checks the two indexes are equivalent\n   */\n  public void testEquals() throws Exception {\n    assertReaderStatistics(leftReader, rightReader);\n    assertFields(MultiFields.getFields(leftReader), MultiFields.getFields(rightReader), true);\n    assertNorms(leftReader, rightReader);\n    assertStoredFields(leftReader, rightReader);\n    assertTermVectors(leftReader, rightReader);\n    assertDocValues(leftReader, rightReader);\n    assertDeletedDocs(leftReader, rightReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0445bcd8433e331f296f5502fc089b336cbac3a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8be580b58bcc650d428f3f22de81cadcf51d650a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8be580b58bcc650d428f3f22de81cadcf51d650a":["0445bcd8433e331f296f5502fc089b336cbac3a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"0445bcd8433e331f296f5502fc089b336cbac3a6":["8be580b58bcc650d428f3f22de81cadcf51d650a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0445bcd8433e331f296f5502fc089b336cbac3a6"],"8be580b58bcc650d428f3f22de81cadcf51d650a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}