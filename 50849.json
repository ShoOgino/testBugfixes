{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#read().mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#read().mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#read().mjava","sourceNew":"  public int read() throws IOException {\n    // TODO: Do we ever want to preserve CDATA sections?\n    // where do we have to worry about them?\n    // <![ CDATA [ unescaped markup ]]>\n    if (numWhitespace > 0){\n      numEaten += numWhitespace;\n      addOffCorrectMap(numReturned, numEaten);\n      numWhitespace = 0;\n    }\n    numReturned++;\n    //do not limit this one by the READAHEAD\n    while(true) {\n      int lastNumRead = numRead;\n      int ch = next();\n\n      switch (ch) {\n        case '&':\n          saveState();\n          ch = readEntity();\n          if (ch>=0) return ch;\n          if (ch==MISMATCH) {\n            restoreState();\n\n            return '&';\n          }\n          break;\n\n        case '<':\n          saveState();\n          ch = next();\n          int ret = MISMATCH;\n          if (ch=='!') {\n            ret = readBang(false);\n          } else if (ch=='/') {\n            ret = readName(true);\n            if (ret==MATCH) {\n              ch=nextSkipWS();\n              ret= ch=='>' ? MATCH : MISMATCH;\n            }\n          } else if (isAlpha(ch)) {\n            push(ch);\n            ret = readTag();\n          } else if (ch=='?') {\n            ret = readProcessingInstruction();\n          }\n\n          // matched something to be discarded, so break\n          // from this case and continue in the loop\n          if (ret==MATCH) {\n            //break;//was\n            //return whitespace from\n            numWhitespace = (numRead - lastNumRead) - 1;//tack on the -1 since we are returning a space right now\n            return ' ';\n          }\n\n          // didn't match any HTML constructs, so roll back\n          // the stream state and just return '<'\n          restoreState();\n          return '<';\n\n        default: return ch;\n      }\n\n    }\n\n\n  }\n\n","sourceOld":"  public int read() throws IOException {\n    // TODO: Do we ever want to preserve CDATA sections?\n    // where do we have to worry about them?\n    // <![ CDATA [ unescaped markup ]]>\n    if (numWhitespace > 0){\n      numEaten += numWhitespace;\n      addOffCorrectMap(numReturned, numEaten);\n      numWhitespace = 0;\n    }\n    numReturned++;\n    //do not limit this one by the READAHEAD\n    while(true) {\n      int lastNumRead = numRead;\n      int ch = next();\n\n      switch (ch) {\n        case '&':\n          saveState();\n          ch = readEntity();\n          if (ch>=0) return ch;\n          if (ch==MISMATCH) {\n            restoreState();\n\n            return '&';\n          }\n          break;\n\n        case '<':\n          saveState();\n          ch = next();\n          int ret = MISMATCH;\n          if (ch=='!') {\n            ret = readBang(false);\n          } else if (ch=='/') {\n            ret = readName(true);\n            if (ret==MATCH) {\n              ch=nextSkipWS();\n              ret= ch=='>' ? MATCH : MISMATCH;\n            }\n          } else if (isAlpha(ch)) {\n            push(ch);\n            ret = readTag();\n          } else if (ch=='?') {\n            ret = readProcessingInstruction();\n          }\n\n          // matched something to be discarded, so break\n          // from this case and continue in the loop\n          if (ret==MATCH) {\n            //break;//was\n            //return whitespace from\n            numWhitespace = (numRead - lastNumRead) - 1;//tack on the -1 since we are returning a space right now\n            return ' ';\n          }\n\n          // didn't match any HTML constructs, so roll back\n          // the stream state and just return '<'\n          restoreState();\n          return '<';\n\n        default: return ch;\n      }\n\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","date":1296400215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#read().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#read().mjava","sourceNew":"  @Override\n  public int read() throws IOException {\n    // TODO: Do we ever want to preserve CDATA sections?\n    // where do we have to worry about them?\n    // <![ CDATA [ unescaped markup ]]>\n    if (numWhitespace > 0){\n      numEaten += numWhitespace;\n      addOffCorrectMap(numReturned, numEaten);\n      numWhitespace = 0;\n    }\n    numReturned++;\n    //do not limit this one by the READAHEAD\n    while(true) {\n      int lastNumRead = numRead;\n      int ch = next();\n\n      switch (ch) {\n        case '&':\n          saveState();\n          ch = readEntity();\n          if (ch>=0) return ch;\n          if (ch==MISMATCH) {\n            restoreState();\n\n            return '&';\n          }\n          break;\n\n        case '<':\n          saveState();\n          ch = next();\n          int ret = MISMATCH;\n          if (ch=='!') {\n            ret = readBang(false);\n          } else if (ch=='/') {\n            ret = readName(true);\n            if (ret==MATCH) {\n              ch=nextSkipWS();\n              ret= ch=='>' ? MATCH : MISMATCH;\n            }\n          } else if (isAlpha(ch)) {\n            push(ch);\n            ret = readTag();\n          } else if (ch=='?') {\n            ret = readProcessingInstruction();\n          }\n\n          // matched something to be discarded, so break\n          // from this case and continue in the loop\n          if (ret==MATCH) {\n            //break;//was\n            //return whitespace from\n            numWhitespace = (numRead - lastNumRead) - 1;//tack on the -1 since we are returning a space right now\n            return ' ';\n          }\n\n          // didn't match any HTML constructs, so roll back\n          // the stream state and just return '<'\n          restoreState();\n          return '<';\n\n        default: return ch;\n      }\n\n    }\n\n\n  }\n\n","sourceOld":"  public int read() throws IOException {\n    // TODO: Do we ever want to preserve CDATA sections?\n    // where do we have to worry about them?\n    // <![ CDATA [ unescaped markup ]]>\n    if (numWhitespace > 0){\n      numEaten += numWhitespace;\n      addOffCorrectMap(numReturned, numEaten);\n      numWhitespace = 0;\n    }\n    numReturned++;\n    //do not limit this one by the READAHEAD\n    while(true) {\n      int lastNumRead = numRead;\n      int ch = next();\n\n      switch (ch) {\n        case '&':\n          saveState();\n          ch = readEntity();\n          if (ch>=0) return ch;\n          if (ch==MISMATCH) {\n            restoreState();\n\n            return '&';\n          }\n          break;\n\n        case '<':\n          saveState();\n          ch = next();\n          int ret = MISMATCH;\n          if (ch=='!') {\n            ret = readBang(false);\n          } else if (ch=='/') {\n            ret = readName(true);\n            if (ret==MATCH) {\n              ch=nextSkipWS();\n              ret= ch=='>' ? MATCH : MISMATCH;\n            }\n          } else if (isAlpha(ch)) {\n            push(ch);\n            ret = readTag();\n          } else if (ch=='?') {\n            ret = readProcessingInstruction();\n          }\n\n          // matched something to be discarded, so break\n          // from this case and continue in the loop\n          if (ret==MATCH) {\n            //break;//was\n            //return whitespace from\n            numWhitespace = (numRead - lastNumRead) - 1;//tack on the -1 since we are returning a space right now\n            return ' ';\n          }\n\n          // didn't match any HTML constructs, so roll back\n          // the stream state and just return '<'\n          restoreState();\n          return '<';\n\n        default: return ch;\n      }\n\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#read().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#read().mjava","sourceNew":"  @Override\n  public int read() throws IOException {\n    // TODO: Do we ever want to preserve CDATA sections?\n    // where do we have to worry about them?\n    // <![ CDATA [ unescaped markup ]]>\n    if (numWhitespace > 0){\n      numEaten += numWhitespace;\n      addOffCorrectMap(numReturned, numEaten);\n      numWhitespace = 0;\n    }\n    numReturned++;\n    //do not limit this one by the READAHEAD\n    while(true) {\n      int lastNumRead = numRead;\n      int ch = next();\n\n      switch (ch) {\n        case '&':\n          saveState();\n          ch = readEntity();\n          if (ch>=0) return ch;\n          if (ch==MISMATCH) {\n            restoreState();\n\n            return '&';\n          }\n          break;\n\n        case '<':\n          saveState();\n          ch = next();\n          int ret = MISMATCH;\n          if (ch=='!') {\n            ret = readBang(false);\n          } else if (ch=='/') {\n            ret = readName(true);\n            if (ret==MATCH) {\n              ch=nextSkipWS();\n              ret= ch=='>' ? MATCH : MISMATCH;\n            }\n          } else if (isAlpha(ch)) {\n            push(ch);\n            ret = readTag();\n          } else if (ch=='?') {\n            ret = readProcessingInstruction();\n          }\n\n          // matched something to be discarded, so break\n          // from this case and continue in the loop\n          if (ret==MATCH) {\n            //break;//was\n            //return whitespace from\n            numWhitespace = (numRead - lastNumRead) - 1;//tack on the -1 since we are returning a space right now\n            return ' ';\n          }\n\n          // didn't match any HTML constructs, so roll back\n          // the stream state and just return '<'\n          restoreState();\n          return '<';\n\n        default: return ch;\n      }\n\n    }\n\n\n  }\n\n","sourceOld":"  public int read() throws IOException {\n    // TODO: Do we ever want to preserve CDATA sections?\n    // where do we have to worry about them?\n    // <![ CDATA [ unescaped markup ]]>\n    if (numWhitespace > 0){\n      numEaten += numWhitespace;\n      addOffCorrectMap(numReturned, numEaten);\n      numWhitespace = 0;\n    }\n    numReturned++;\n    //do not limit this one by the READAHEAD\n    while(true) {\n      int lastNumRead = numRead;\n      int ch = next();\n\n      switch (ch) {\n        case '&':\n          saveState();\n          ch = readEntity();\n          if (ch>=0) return ch;\n          if (ch==MISMATCH) {\n            restoreState();\n\n            return '&';\n          }\n          break;\n\n        case '<':\n          saveState();\n          ch = next();\n          int ret = MISMATCH;\n          if (ch=='!') {\n            ret = readBang(false);\n          } else if (ch=='/') {\n            ret = readName(true);\n            if (ret==MATCH) {\n              ch=nextSkipWS();\n              ret= ch=='>' ? MATCH : MISMATCH;\n            }\n          } else if (isAlpha(ch)) {\n            push(ch);\n            ret = readTag();\n          } else if (ch=='?') {\n            ret = readProcessingInstruction();\n          }\n\n          // matched something to be discarded, so break\n          // from this case and continue in the loop\n          if (ret==MATCH) {\n            //break;//was\n            //return whitespace from\n            numWhitespace = (numRead - lastNumRead) - 1;//tack on the -1 since we are returning a space right now\n            return ' ';\n          }\n\n          // didn't match any HTML constructs, so roll back\n          // the stream state and just return '<'\n          restoreState();\n          return '<';\n\n        default: return ch;\n      }\n\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#read().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#read().mjava","sourceNew":"  @Override\n  public int read() throws IOException {\n    // TODO: Do we ever want to preserve CDATA sections?\n    // where do we have to worry about them?\n    // <![ CDATA [ unescaped markup ]]>\n    if (numWhitespace > 0){\n      numEaten += numWhitespace;\n      addOffCorrectMap(numReturned, numEaten);\n      numWhitespace = 0;\n    }\n    numReturned++;\n    //do not limit this one by the READAHEAD\n    while(true) {\n      int lastNumRead = numRead;\n      int ch = next();\n\n      switch (ch) {\n        case '&':\n          saveState();\n          ch = readEntity();\n          if (ch>=0) return ch;\n          if (ch==MISMATCH) {\n            restoreState();\n\n            return '&';\n          }\n          break;\n\n        case '<':\n          saveState();\n          ch = next();\n          int ret = MISMATCH;\n          if (ch=='!') {\n            ret = readBang(false);\n          } else if (ch=='/') {\n            ret = readName(true);\n            if (ret==MATCH) {\n              ch=nextSkipWS();\n              ret= ch=='>' ? MATCH : MISMATCH;\n            }\n          } else if (isAlpha(ch)) {\n            push(ch);\n            ret = readTag();\n          } else if (ch=='?') {\n            ret = readProcessingInstruction();\n          }\n\n          // matched something to be discarded, so break\n          // from this case and continue in the loop\n          if (ret==MATCH) {\n            //break;//was\n            //return whitespace from\n            numWhitespace = (numRead - lastNumRead) - 1;//tack on the -1 since we are returning a space right now\n            return ' ';\n          }\n\n          // didn't match any HTML constructs, so roll back\n          // the stream state and just return '<'\n          restoreState();\n          return '<';\n\n        default: return ch;\n      }\n\n    }\n\n\n  }\n\n","sourceOld":"  public int read() throws IOException {\n    // TODO: Do we ever want to preserve CDATA sections?\n    // where do we have to worry about them?\n    // <![ CDATA [ unescaped markup ]]>\n    if (numWhitespace > 0){\n      numEaten += numWhitespace;\n      addOffCorrectMap(numReturned, numEaten);\n      numWhitespace = 0;\n    }\n    numReturned++;\n    //do not limit this one by the READAHEAD\n    while(true) {\n      int lastNumRead = numRead;\n      int ch = next();\n\n      switch (ch) {\n        case '&':\n          saveState();\n          ch = readEntity();\n          if (ch>=0) return ch;\n          if (ch==MISMATCH) {\n            restoreState();\n\n            return '&';\n          }\n          break;\n\n        case '<':\n          saveState();\n          ch = next();\n          int ret = MISMATCH;\n          if (ch=='!') {\n            ret = readBang(false);\n          } else if (ch=='/') {\n            ret = readName(true);\n            if (ret==MATCH) {\n              ch=nextSkipWS();\n              ret= ch=='>' ? MATCH : MISMATCH;\n            }\n          } else if (isAlpha(ch)) {\n            push(ch);\n            ret = readTag();\n          } else if (ch=='?') {\n            ret = readProcessingInstruction();\n          }\n\n          // matched something to be discarded, so break\n          // from this case and continue in the loop\n          if (ret==MATCH) {\n            //break;//was\n            //return whitespace from\n            numWhitespace = (numRead - lastNumRead) - 1;//tack on the -1 since we are returning a space right now\n            return ' ';\n          }\n\n          // didn't match any HTML constructs, so roll back\n          // the stream state and just return '<'\n          restoreState();\n          return '<';\n\n        default: return ch;\n      }\n\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3a908bacd530957eaa6d2dfebdd534afd9ac60e","date":1327209646,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#read().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#read().mjava","sourceNew":"  @Override\n  public int read() throws IOException {\n    if (outputSegment.isRead()) {\n      if (zzAtEOF) {\n        return -1;\n      }\n      int ch = nextChar();\n      ++outputCharCount;\n      return ch;\n    }\n    int ch = outputSegment.nextChar();\n    ++outputCharCount;\n    return ch;\n  }\n\n","sourceOld":"  @Override\n  public int read() throws IOException {\n    // TODO: Do we ever want to preserve CDATA sections?\n    // where do we have to worry about them?\n    // <![ CDATA [ unescaped markup ]]>\n    if (numWhitespace > 0){\n      numEaten += numWhitespace;\n      addOffCorrectMap(numReturned, numEaten);\n      numWhitespace = 0;\n    }\n    numReturned++;\n    //do not limit this one by the READAHEAD\n    while(true) {\n      int lastNumRead = numRead;\n      int ch = next();\n\n      switch (ch) {\n        case '&':\n          saveState();\n          ch = readEntity();\n          if (ch>=0) return ch;\n          if (ch==MISMATCH) {\n            restoreState();\n\n            return '&';\n          }\n          break;\n\n        case '<':\n          saveState();\n          ch = next();\n          int ret = MISMATCH;\n          if (ch=='!') {\n            ret = readBang(false);\n          } else if (ch=='/') {\n            ret = readName(true);\n            if (ret==MATCH) {\n              ch=nextSkipWS();\n              ret= ch=='>' ? MATCH : MISMATCH;\n            }\n          } else if (isAlpha(ch)) {\n            push(ch);\n            ret = readTag();\n          } else if (ch=='?') {\n            ret = readProcessingInstruction();\n          }\n\n          // matched something to be discarded, so break\n          // from this case and continue in the loop\n          if (ret==MATCH) {\n            //break;//was\n            //return whitespace from\n            numWhitespace = (numRead - lastNumRead) - 1;//tack on the -1 since we are returning a space right now\n            return ' ';\n          }\n\n          // didn't match any HTML constructs, so roll back\n          // the stream state and just return '<'\n          restoreState();\n          return '<';\n\n        default: return ch;\n      }\n\n    }\n\n\n  }\n\n","bugFix":["187b932e3f791668d245124e03d899af557d22df","796f0d3bc33e21ecefaedc718af98547d2bfc355","9a5d21cb8e4aa4634e67bbdf56393d526d86f446","0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"579dc30b5d3235c34cda518b2b6018d71a61879c","date":1327235122,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#read().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#read().mjava","sourceNew":"  @Override\n  public int read() throws IOException {\n    if (outputSegment.isRead()) {\n      if (zzAtEOF) {\n        return -1;\n      }\n      int ch = nextChar();\n      ++outputCharCount;\n      return ch;\n    }\n    int ch = outputSegment.nextChar();\n    ++outputCharCount;\n    return ch;\n  }\n\n","sourceOld":"  @Override\n  public int read() throws IOException {\n    // TODO: Do we ever want to preserve CDATA sections?\n    // where do we have to worry about them?\n    // <![ CDATA [ unescaped markup ]]>\n    if (numWhitespace > 0){\n      numEaten += numWhitespace;\n      addOffCorrectMap(numReturned, numEaten);\n      numWhitespace = 0;\n    }\n    numReturned++;\n    //do not limit this one by the READAHEAD\n    while(true) {\n      int lastNumRead = numRead;\n      int ch = next();\n\n      switch (ch) {\n        case '&':\n          saveState();\n          ch = readEntity();\n          if (ch>=0) return ch;\n          if (ch==MISMATCH) {\n            restoreState();\n\n            return '&';\n          }\n          break;\n\n        case '<':\n          saveState();\n          ch = next();\n          int ret = MISMATCH;\n          if (ch=='!') {\n            ret = readBang(false);\n          } else if (ch=='/') {\n            ret = readName(true);\n            if (ret==MATCH) {\n              ch=nextSkipWS();\n              ret= ch=='>' ? MATCH : MISMATCH;\n            }\n          } else if (isAlpha(ch)) {\n            push(ch);\n            ret = readTag();\n          } else if (ch=='?') {\n            ret = readProcessingInstruction();\n          }\n\n          // matched something to be discarded, so break\n          // from this case and continue in the loop\n          if (ret==MATCH) {\n            //break;//was\n            //return whitespace from\n            numWhitespace = (numRead - lastNumRead) - 1;//tack on the -1 since we are returning a space right now\n            return ' ';\n          }\n\n          // didn't match any HTML constructs, so roll back\n          // the stream state and just return '<'\n          restoreState();\n          return '<';\n\n        default: return ch;\n      }\n\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#read().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#read().mjava","sourceNew":"  @Override\n  public int read() throws IOException {\n    if (outputSegment.isRead()) {\n      if (zzAtEOF) {\n        return -1;\n      }\n      int ch = nextChar();\n      ++outputCharCount;\n      return ch;\n    }\n    int ch = outputSegment.nextChar();\n    ++outputCharCount;\n    return ch;\n  }\n\n","sourceOld":"  @Override\n  public int read() throws IOException {\n    // TODO: Do we ever want to preserve CDATA sections?\n    // where do we have to worry about them?\n    // <![ CDATA [ unescaped markup ]]>\n    if (numWhitespace > 0){\n      numEaten += numWhitespace;\n      addOffCorrectMap(numReturned, numEaten);\n      numWhitespace = 0;\n    }\n    numReturned++;\n    //do not limit this one by the READAHEAD\n    while(true) {\n      int lastNumRead = numRead;\n      int ch = next();\n\n      switch (ch) {\n        case '&':\n          saveState();\n          ch = readEntity();\n          if (ch>=0) return ch;\n          if (ch==MISMATCH) {\n            restoreState();\n\n            return '&';\n          }\n          break;\n\n        case '<':\n          saveState();\n          ch = next();\n          int ret = MISMATCH;\n          if (ch=='!') {\n            ret = readBang(false);\n          } else if (ch=='/') {\n            ret = readName(true);\n            if (ret==MATCH) {\n              ch=nextSkipWS();\n              ret= ch=='>' ? MATCH : MISMATCH;\n            }\n          } else if (isAlpha(ch)) {\n            push(ch);\n            ret = readTag();\n          } else if (ch=='?') {\n            ret = readProcessingInstruction();\n          }\n\n          // matched something to be discarded, so break\n          // from this case and continue in the loop\n          if (ret==MATCH) {\n            //break;//was\n            //return whitespace from\n            numWhitespace = (numRead - lastNumRead) - 1;//tack on the -1 since we are returning a space right now\n            return ' ';\n          }\n\n          // didn't match any HTML constructs, so roll back\n          // the stream state and just return '<'\n          restoreState();\n          return '<';\n\n        default: return ch;\n      }\n\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#read().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter#read().mjava","sourceNew":"  @Override\n  public int read() throws IOException {\n    if (outputSegment.isRead()) {\n      if (zzAtEOF) {\n        return -1;\n      }\n      int ch = nextChar();\n      ++outputCharCount;\n      return ch;\n    }\n    int ch = outputSegment.nextChar();\n    ++outputCharCount;\n    return ch;\n  }\n\n","sourceOld":"  @Override\n  public int read() throws IOException {\n    if (outputSegment.isRead()) {\n      if (zzAtEOF) {\n        return -1;\n      }\n      int ch = nextChar();\n      ++outputCharCount;\n      return ch;\n    }\n    int ch = outputSegment.nextChar();\n    ++outputCharCount;\n    return ch;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e3a908bacd530957eaa6d2dfebdd534afd9ac60e"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["0f080986da691a3bba7b757f43ab72cdc82b57ce","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","e3a908bacd530957eaa6d2dfebdd534afd9ac60e"],"e3a908bacd530957eaa6d2dfebdd534afd9ac60e":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"579dc30b5d3235c34cda518b2b6018d71a61879c":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","e3a908bacd530957eaa6d2dfebdd534afd9ac60e"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["0f080986da691a3bba7b757f43ab72cdc82b57ce","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["29ef99d61cda9641b6250bf9567329a6e65f901d","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","e3a908bacd530957eaa6d2dfebdd534afd9ac60e","579dc30b5d3235c34cda518b2b6018d71a61879c","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"e3a908bacd530957eaa6d2dfebdd534afd9ac60e":["b89678825b68eccaf09e6ab71675fc0b0af1e099","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","579dc30b5d3235c34cda518b2b6018d71a61879c"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"579dc30b5d3235c34cda518b2b6018d71a61879c":[],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","579dc30b5d3235c34cda518b2b6018d71a61879c","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}