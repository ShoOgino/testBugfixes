{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSignificantTermsStream().mjava","commits":[{"id":"f67c3a1123a063e580a2e6ec51b9eb7c273666ce","date":1487877483,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSignificantTermsStream().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSignificantTermsStream() throws Exception {\n\n    Assume.assumeTrue(!useAlias);\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    for (int i = 0; i < 5000; i++) {\n      updateRequest.add(id, \"a\"+i, \"test_t\", \"a b c d m l\");\n    }\n\n    for (int i = 0; i < 5000; i++) {\n      updateRequest.add(id, \"b\"+i, \"test_t\", \"a b e f\");\n    }\n\n    for (int i = 0; i < 900; i++) {\n      updateRequest.add(id, \"c\"+i, \"test_t\", \"c\");\n    }\n\n    for (int i = 0; i < 600; i++) {\n      updateRequest.add(id, \"d\"+i, \"test_t\", \"d\");\n    }\n\n    for (int i = 0; i < 500; i++) {\n      updateRequest.add(id, \"e\"+i, \"test_t\", \"m\");\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class);\n\n    String significantTerms = \"significantTerms(collection1, q=\\\"id:a*\\\",  field=\\\"test_t\\\", limit=3, minTermLength=1, maxDocFreq=\\\".5\\\")\";\n    stream = factory.constructStream(significantTerms);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertTrue(tuples.get(0).get(\"term\").equals(\"l\"));\n    assertTrue(tuples.get(0).getLong(\"background\") == 5000);\n    assertTrue(tuples.get(0).getLong(\"foreground\") == 5000);\n\n\n    assertTrue(tuples.get(1).get(\"term\").equals(\"m\"));\n    assertTrue(tuples.get(1).getLong(\"background\") == 5500);\n    assertTrue(tuples.get(1).getLong(\"foreground\") == 5000);\n\n    assertTrue(tuples.get(2).get(\"term\").equals(\"d\"));\n    assertTrue(tuples.get(2).getLong(\"background\") == 5600);\n    assertTrue(tuples.get(2).getLong(\"foreground\") == 5000);\n\n    //Test maxDocFreq\n    significantTerms = \"significantTerms(collection1, q=\\\"id:a*\\\",  field=\\\"test_t\\\", limit=3, maxDocFreq=2650, minTermLength=1)\";\n    stream = factory.constructStream(significantTerms);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    assertTrue(tuples.get(0).get(\"term\").equals(\"l\"));\n    assertTrue(tuples.get(0).getLong(\"background\") == 5000);\n    assertTrue(tuples.get(0).getLong(\"foreground\") == 5000);\n\n    //Test maxDocFreq percentage\n\n    significantTerms = \"significantTerms(collection1, q=\\\"id:a*\\\",  field=\\\"test_t\\\", limit=3, maxDocFreq=\\\".45\\\", minTermLength=1)\";\n    stream = factory.constructStream(significantTerms);\n    tuples = getTuples(stream);\n    assert(tuples.size() == 1);\n    assertTrue(tuples.get(0).get(\"term\").equals(\"l\"));\n    assertTrue(tuples.get(0).getLong(\"background\") == 5000);\n    assertTrue(tuples.get(0).getLong(\"foreground\") == 5000);\n\n\n    //Test min doc freq\n    significantTerms = \"significantTerms(collection1, q=\\\"id:a*\\\",  field=\\\"test_t\\\", limit=3, minDocFreq=\\\"2700\\\", minTermLength=1, maxDocFreq=\\\".5\\\")\";\n    stream = factory.constructStream(significantTerms);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n    assertTrue(tuples.get(0).get(\"term\").equals(\"m\"));\n    assertTrue(tuples.get(0).getLong(\"background\") == 5500);\n    assertTrue(tuples.get(0).getLong(\"foreground\") == 5000);\n\n    assertTrue(tuples.get(1).get(\"term\").equals(\"d\"));\n    assertTrue(tuples.get(1).getLong(\"background\") == 5600);\n    assertTrue(tuples.get(1).getLong(\"foreground\") == 5000);\n\n    assertTrue(tuples.get(2).get(\"term\").equals(\"c\"));\n    assertTrue(tuples.get(2).getLong(\"background\") == 5900);\n    assertTrue(tuples.get(2).getLong(\"foreground\") == 5000);\n\n\n    //Test min doc freq percent\n    significantTerms = \"significantTerms(collection1, q=\\\"id:a*\\\",  field=\\\"test_t\\\", limit=3, minDocFreq=\\\".478\\\", minTermLength=1, maxDocFreq=\\\".5\\\")\";\n    stream = factory.constructStream(significantTerms);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n\n    assertTrue(tuples.get(0).get(\"term\").equals(\"c\"));\n    assertTrue(tuples.get(0).getLong(\"background\") == 5900);\n    assertTrue(tuples.get(0).getLong(\"foreground\") == 5000);\n\n\n    //Test limit\n\n    significantTerms = \"significantTerms(collection1, q=\\\"id:a*\\\",  field=\\\"test_t\\\", limit=2, minDocFreq=\\\"2700\\\", minTermLength=1, maxDocFreq=\\\".5\\\")\";\n    stream = factory.constructStream(significantTerms);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 2);\n\n    assertTrue(tuples.get(0).get(\"term\").equals(\"m\"));\n    assertTrue(tuples.get(0).getLong(\"background\") == 5500);\n    assertTrue(tuples.get(0).getLong(\"foreground\") == 5000);\n\n    assertTrue(tuples.get(1).get(\"term\").equals(\"d\"));\n    assertTrue(tuples.get(1).getLong(\"background\") == 5600);\n    assertTrue(tuples.get(1).getLong(\"foreground\") == 5000);\n\n    //Test term length\n\n    significantTerms = \"significantTerms(collection1, q=\\\"id:a*\\\",  field=\\\"test_t\\\", limit=2, minDocFreq=\\\"2700\\\", minTermLength=2)\";\n    stream = factory.constructStream(significantTerms);\n    tuples = getTuples(stream);\n    assert(tuples.size() == 0);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e5922fb6b9f0e49b31ce0436420a7f4392031c4","date":1489025486,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSignificantTermsStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSignificantTermsStream().mjava","sourceNew":"  @Test\n  public void testSignificantTermsStream() throws Exception {\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    for (int i = 0; i < 5000; i++) {\n      updateRequest.add(id, \"a\"+i, \"test_t\", \"a b c d m l\");\n    }\n\n    for (int i = 0; i < 5000; i++) {\n      updateRequest.add(id, \"b\"+i, \"test_t\", \"a b e f\");\n    }\n\n    for (int i = 0; i < 900; i++) {\n      updateRequest.add(id, \"c\"+i, \"test_t\", \"c\");\n    }\n\n    for (int i = 0; i < 600; i++) {\n      updateRequest.add(id, \"d\"+i, \"test_t\", \"d\");\n    }\n\n    for (int i = 0; i < 500; i++) {\n      updateRequest.add(id, \"e\"+i, \"test_t\", \"m\");\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withDefaultZkHost(cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    streamContext.setSolrClientCache(cache);\n    try {\n\n      String significantTerms = \"significantTerms(collection1, q=\\\"id:a*\\\",  field=\\\"test_t\\\", limit=3, minTermLength=1, maxDocFreq=\\\".5\\\")\";\n      stream = factory.constructStream(significantTerms);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n      assertTrue(tuples.get(0).get(\"term\").equals(\"l\"));\n      assertTrue(tuples.get(0).getLong(\"background\") == 5000);\n      assertTrue(tuples.get(0).getLong(\"foreground\") == 5000);\n\n\n      assertTrue(tuples.get(1).get(\"term\").equals(\"m\"));\n      assertTrue(tuples.get(1).getLong(\"background\") == 5500);\n      assertTrue(tuples.get(1).getLong(\"foreground\") == 5000);\n\n      assertTrue(tuples.get(2).get(\"term\").equals(\"d\"));\n      assertTrue(tuples.get(2).getLong(\"background\") == 5600);\n      assertTrue(tuples.get(2).getLong(\"foreground\") == 5000);\n\n      //Test maxDocFreq\n      significantTerms = \"significantTerms(collection1, q=\\\"id:a*\\\",  field=\\\"test_t\\\", limit=3, maxDocFreq=2650, minTermLength=1)\";\n      stream = factory.constructStream(significantTerms);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 1);\n      assertTrue(tuples.get(0).get(\"term\").equals(\"l\"));\n      assertTrue(tuples.get(0).getLong(\"background\") == 5000);\n      assertTrue(tuples.get(0).getLong(\"foreground\") == 5000);\n\n      //Test maxDocFreq percentage\n\n      significantTerms = \"significantTerms(collection1, q=\\\"id:a*\\\",  field=\\\"test_t\\\", limit=3, maxDocFreq=\\\".45\\\", minTermLength=1)\";\n      stream = factory.constructStream(significantTerms);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assert (tuples.size() == 1);\n      assertTrue(tuples.get(0).get(\"term\").equals(\"l\"));\n      assertTrue(tuples.get(0).getLong(\"background\") == 5000);\n      assertTrue(tuples.get(0).getLong(\"foreground\") == 5000);\n\n\n      //Test min doc freq\n      significantTerms = \"significantTerms(collection1, q=\\\"id:a*\\\",  field=\\\"test_t\\\", limit=3, minDocFreq=\\\"2700\\\", minTermLength=1, maxDocFreq=\\\".5\\\")\";\n      stream = factory.constructStream(significantTerms);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n\n      assertTrue(tuples.get(0).get(\"term\").equals(\"m\"));\n      assertTrue(tuples.get(0).getLong(\"background\") == 5500);\n      assertTrue(tuples.get(0).getLong(\"foreground\") == 5000);\n\n      assertTrue(tuples.get(1).get(\"term\").equals(\"d\"));\n      assertTrue(tuples.get(1).getLong(\"background\") == 5600);\n      assertTrue(tuples.get(1).getLong(\"foreground\") == 5000);\n\n      assertTrue(tuples.get(2).get(\"term\").equals(\"c\"));\n      assertTrue(tuples.get(2).getLong(\"background\") == 5900);\n      assertTrue(tuples.get(2).getLong(\"foreground\") == 5000);\n\n\n      //Test min doc freq percent\n      significantTerms = \"significantTerms(collection1, q=\\\"id:a*\\\",  field=\\\"test_t\\\", limit=3, minDocFreq=\\\".478\\\", minTermLength=1, maxDocFreq=\\\".5\\\")\";\n      stream = factory.constructStream(significantTerms);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 1);\n\n      assertTrue(tuples.get(0).get(\"term\").equals(\"c\"));\n      assertTrue(tuples.get(0).getLong(\"background\") == 5900);\n      assertTrue(tuples.get(0).getLong(\"foreground\") == 5000);\n\n      //Test limit\n\n      significantTerms = \"significantTerms(collection1, q=\\\"id:a*\\\",  field=\\\"test_t\\\", limit=2, minDocFreq=\\\"2700\\\", minTermLength=1, maxDocFreq=\\\".5\\\")\";\n      stream = factory.constructStream(significantTerms);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 2);\n\n      assertTrue(tuples.get(0).get(\"term\").equals(\"m\"));\n      assertTrue(tuples.get(0).getLong(\"background\") == 5500);\n      assertTrue(tuples.get(0).getLong(\"foreground\") == 5000);\n\n      assertTrue(tuples.get(1).get(\"term\").equals(\"d\"));\n      assertTrue(tuples.get(1).getLong(\"background\") == 5600);\n      assertTrue(tuples.get(1).getLong(\"foreground\") == 5000);\n\n      //Test term length\n\n      significantTerms = \"significantTerms(collection1, q=\\\"id:a*\\\",  field=\\\"test_t\\\", limit=2, minDocFreq=\\\"2700\\\", minTermLength=2)\";\n      stream = factory.constructStream(significantTerms);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assert (tuples.size() == 0);\n\n\n      //Test with shards parameter\n      List<String> shardUrls = TupleStream.getShards(cluster.getZkServer().getZkAddress(), COLLECTIONORALIAS, streamContext);\n\n      Map<String, List<String>> shardsMap = new HashMap();\n      shardsMap.put(\"myCollection\", shardUrls);\n      StreamContext context = new StreamContext();\n      context.put(\"shards\", shardsMap);\n      context.setSolrClientCache(cache);\n      significantTerms = \"significantTerms(myCollection, q=\\\"id:a*\\\",  field=\\\"test_t\\\", limit=2, minDocFreq=\\\"2700\\\", minTermLength=1, maxDocFreq=\\\".5\\\")\";\n      stream = factory.constructStream(significantTerms);\n      stream.setStreamContext(context);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 2);\n\n      assertTrue(tuples.get(0).get(\"term\").equals(\"m\"));\n      assertTrue(tuples.get(0).getLong(\"background\") == 5500);\n      assertTrue(tuples.get(0).getLong(\"foreground\") == 5000);\n\n      assertTrue(tuples.get(1).get(\"term\").equals(\"d\"));\n      assertTrue(tuples.get(1).getLong(\"background\") == 5600);\n      assertTrue(tuples.get(1).getLong(\"foreground\") == 5000);\n\n      //Execersise the /stream hander\n\n      //Add the shards http parameter for the myCollection\n      StringBuilder buf = new StringBuilder();\n      for (String shardUrl : shardUrls) {\n        if (buf.length() > 0) {\n          buf.append(\",\");\n        }\n        buf.append(shardUrl);\n      }\n\n      ModifiableSolrParams solrParams = new ModifiableSolrParams();\n      solrParams.add(\"qt\", \"/stream\");\n      solrParams.add(\"expr\", significantTerms);\n      solrParams.add(\"myCollection.shards\", buf.toString());\n      SolrStream solrStream = new SolrStream(shardUrls.get(0), solrParams);\n      tuples = getTuples(solrStream);\n      assert (tuples.size() == 2);\n\n      assertTrue(tuples.get(0).get(\"term\").equals(\"m\"));\n      assertTrue(tuples.get(0).getLong(\"background\") == 5500);\n      assertTrue(tuples.get(0).getLong(\"foreground\") == 5000);\n\n      assertTrue(tuples.get(1).get(\"term\").equals(\"d\"));\n      assertTrue(tuples.get(1).getLong(\"background\") == 5600);\n      assertTrue(tuples.get(1).getLong(\"foreground\") == 5000);\n\n      //Add a negative test to prove that it cannot find slices if shards parameter is removed\n\n      try {\n        ModifiableSolrParams solrParamsBad = new ModifiableSolrParams();\n        solrParamsBad.add(\"qt\", \"/stream\");\n        solrParamsBad.add(\"expr\", significantTerms);\n        solrStream = new SolrStream(shardUrls.get(0), solrParamsBad);\n        tuples = getTuples(solrStream);\n        throw new Exception(\"Exception should have been thrown above\");\n      } catch (IOException e) {\n        assertTrue(e.getMessage().contains(\"Slices not found for myCollection\"));\n      }\n    } finally {\n      cache.close();\n    }\n\n\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testSignificantTermsStream() throws Exception {\n\n    Assume.assumeTrue(!useAlias);\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    for (int i = 0; i < 5000; i++) {\n      updateRequest.add(id, \"a\"+i, \"test_t\", \"a b c d m l\");\n    }\n\n    for (int i = 0; i < 5000; i++) {\n      updateRequest.add(id, \"b\"+i, \"test_t\", \"a b e f\");\n    }\n\n    for (int i = 0; i < 900; i++) {\n      updateRequest.add(id, \"c\"+i, \"test_t\", \"c\");\n    }\n\n    for (int i = 0; i < 600; i++) {\n      updateRequest.add(id, \"d\"+i, \"test_t\", \"d\");\n    }\n\n    for (int i = 0; i < 500; i++) {\n      updateRequest.add(id, \"e\"+i, \"test_t\", \"m\");\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class);\n\n    String significantTerms = \"significantTerms(collection1, q=\\\"id:a*\\\",  field=\\\"test_t\\\", limit=3, minTermLength=1, maxDocFreq=\\\".5\\\")\";\n    stream = factory.constructStream(significantTerms);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n    assertTrue(tuples.get(0).get(\"term\").equals(\"l\"));\n    assertTrue(tuples.get(0).getLong(\"background\") == 5000);\n    assertTrue(tuples.get(0).getLong(\"foreground\") == 5000);\n\n\n    assertTrue(tuples.get(1).get(\"term\").equals(\"m\"));\n    assertTrue(tuples.get(1).getLong(\"background\") == 5500);\n    assertTrue(tuples.get(1).getLong(\"foreground\") == 5000);\n\n    assertTrue(tuples.get(2).get(\"term\").equals(\"d\"));\n    assertTrue(tuples.get(2).getLong(\"background\") == 5600);\n    assertTrue(tuples.get(2).getLong(\"foreground\") == 5000);\n\n    //Test maxDocFreq\n    significantTerms = \"significantTerms(collection1, q=\\\"id:a*\\\",  field=\\\"test_t\\\", limit=3, maxDocFreq=2650, minTermLength=1)\";\n    stream = factory.constructStream(significantTerms);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n    assertTrue(tuples.get(0).get(\"term\").equals(\"l\"));\n    assertTrue(tuples.get(0).getLong(\"background\") == 5000);\n    assertTrue(tuples.get(0).getLong(\"foreground\") == 5000);\n\n    //Test maxDocFreq percentage\n\n    significantTerms = \"significantTerms(collection1, q=\\\"id:a*\\\",  field=\\\"test_t\\\", limit=3, maxDocFreq=\\\".45\\\", minTermLength=1)\";\n    stream = factory.constructStream(significantTerms);\n    tuples = getTuples(stream);\n    assert(tuples.size() == 1);\n    assertTrue(tuples.get(0).get(\"term\").equals(\"l\"));\n    assertTrue(tuples.get(0).getLong(\"background\") == 5000);\n    assertTrue(tuples.get(0).getLong(\"foreground\") == 5000);\n\n\n    //Test min doc freq\n    significantTerms = \"significantTerms(collection1, q=\\\"id:a*\\\",  field=\\\"test_t\\\", limit=3, minDocFreq=\\\"2700\\\", minTermLength=1, maxDocFreq=\\\".5\\\")\";\n    stream = factory.constructStream(significantTerms);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 3);\n\n    assertTrue(tuples.get(0).get(\"term\").equals(\"m\"));\n    assertTrue(tuples.get(0).getLong(\"background\") == 5500);\n    assertTrue(tuples.get(0).getLong(\"foreground\") == 5000);\n\n    assertTrue(tuples.get(1).get(\"term\").equals(\"d\"));\n    assertTrue(tuples.get(1).getLong(\"background\") == 5600);\n    assertTrue(tuples.get(1).getLong(\"foreground\") == 5000);\n\n    assertTrue(tuples.get(2).get(\"term\").equals(\"c\"));\n    assertTrue(tuples.get(2).getLong(\"background\") == 5900);\n    assertTrue(tuples.get(2).getLong(\"foreground\") == 5000);\n\n\n    //Test min doc freq percent\n    significantTerms = \"significantTerms(collection1, q=\\\"id:a*\\\",  field=\\\"test_t\\\", limit=3, minDocFreq=\\\".478\\\", minTermLength=1, maxDocFreq=\\\".5\\\")\";\n    stream = factory.constructStream(significantTerms);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 1);\n\n    assertTrue(tuples.get(0).get(\"term\").equals(\"c\"));\n    assertTrue(tuples.get(0).getLong(\"background\") == 5900);\n    assertTrue(tuples.get(0).getLong(\"foreground\") == 5000);\n\n\n    //Test limit\n\n    significantTerms = \"significantTerms(collection1, q=\\\"id:a*\\\",  field=\\\"test_t\\\", limit=2, minDocFreq=\\\"2700\\\", minTermLength=1, maxDocFreq=\\\".5\\\")\";\n    stream = factory.constructStream(significantTerms);\n    tuples = getTuples(stream);\n\n    assert(tuples.size() == 2);\n\n    assertTrue(tuples.get(0).get(\"term\").equals(\"m\"));\n    assertTrue(tuples.get(0).getLong(\"background\") == 5500);\n    assertTrue(tuples.get(0).getLong(\"foreground\") == 5000);\n\n    assertTrue(tuples.get(1).get(\"term\").equals(\"d\"));\n    assertTrue(tuples.get(1).getLong(\"background\") == 5600);\n    assertTrue(tuples.get(1).getLong(\"foreground\") == 5000);\n\n    //Test term length\n\n    significantTerms = \"significantTerms(collection1, q=\\\"id:a*\\\",  field=\\\"test_t\\\", limit=2, minDocFreq=\\\"2700\\\", minTermLength=2)\";\n    stream = factory.constructStream(significantTerms);\n    tuples = getTuples(stream);\n    assert(tuples.size() == 0);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSignificantTermsStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSignificantTermsStream().mjava","sourceNew":"  @Test\n  public void testSignificantTermsStream() throws Exception {\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    for (int i = 0; i < 5000; i++) {\n      updateRequest.add(id, \"a\"+i, \"test_t\", \"a b c d m l\");\n    }\n\n    for (int i = 0; i < 5000; i++) {\n      updateRequest.add(id, \"b\"+i, \"test_t\", \"a b e f\");\n    }\n\n    for (int i = 0; i < 900; i++) {\n      updateRequest.add(id, \"c\"+i, \"test_t\", \"c\");\n    }\n\n    for (int i = 0; i < 600; i++) {\n      updateRequest.add(id, \"d\"+i, \"test_t\", \"d\");\n    }\n\n    for (int i = 0; i < 500; i++) {\n      updateRequest.add(id, \"e\"+i, \"test_t\", \"m\");\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withDefaultZkHost(cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    streamContext.setSolrClientCache(cache);\n    try {\n\n      String significantTerms = \"significantTerms(collection1, q=\\\"id:a*\\\",  field=\\\"test_t\\\", limit=3, minTermLength=1, maxDocFreq=\\\".5\\\")\";\n      stream = factory.constructStream(significantTerms);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n      assertTrue(tuples.get(0).get(\"term\").equals(\"l\"));\n      assertTrue(tuples.get(0).getLong(\"background\") == 5000);\n      assertTrue(tuples.get(0).getLong(\"foreground\") == 5000);\n\n\n      assertTrue(tuples.get(1).get(\"term\").equals(\"m\"));\n      assertTrue(tuples.get(1).getLong(\"background\") == 5500);\n      assertTrue(tuples.get(1).getLong(\"foreground\") == 5000);\n\n      assertTrue(tuples.get(2).get(\"term\").equals(\"d\"));\n      assertTrue(tuples.get(2).getLong(\"background\") == 5600);\n      assertTrue(tuples.get(2).getLong(\"foreground\") == 5000);\n\n      //Test maxDocFreq\n      significantTerms = \"significantTerms(collection1, q=\\\"id:a*\\\",  field=\\\"test_t\\\", limit=3, maxDocFreq=2650, minTermLength=1)\";\n      stream = factory.constructStream(significantTerms);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 1);\n      assertTrue(tuples.get(0).get(\"term\").equals(\"l\"));\n      assertTrue(tuples.get(0).getLong(\"background\") == 5000);\n      assertTrue(tuples.get(0).getLong(\"foreground\") == 5000);\n\n      //Test maxDocFreq percentage\n\n      significantTerms = \"significantTerms(collection1, q=\\\"id:a*\\\",  field=\\\"test_t\\\", limit=3, maxDocFreq=\\\".45\\\", minTermLength=1)\";\n      stream = factory.constructStream(significantTerms);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assert (tuples.size() == 1);\n      assertTrue(tuples.get(0).get(\"term\").equals(\"l\"));\n      assertTrue(tuples.get(0).getLong(\"background\") == 5000);\n      assertTrue(tuples.get(0).getLong(\"foreground\") == 5000);\n\n\n      //Test min doc freq\n      significantTerms = \"significantTerms(collection1, q=\\\"id:a*\\\",  field=\\\"test_t\\\", limit=3, minDocFreq=\\\"2700\\\", minTermLength=1, maxDocFreq=\\\".5\\\")\";\n      stream = factory.constructStream(significantTerms);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n\n      assertTrue(tuples.get(0).get(\"term\").equals(\"m\"));\n      assertTrue(tuples.get(0).getLong(\"background\") == 5500);\n      assertTrue(tuples.get(0).getLong(\"foreground\") == 5000);\n\n      assertTrue(tuples.get(1).get(\"term\").equals(\"d\"));\n      assertTrue(tuples.get(1).getLong(\"background\") == 5600);\n      assertTrue(tuples.get(1).getLong(\"foreground\") == 5000);\n\n      assertTrue(tuples.get(2).get(\"term\").equals(\"c\"));\n      assertTrue(tuples.get(2).getLong(\"background\") == 5900);\n      assertTrue(tuples.get(2).getLong(\"foreground\") == 5000);\n\n\n      //Test min doc freq percent\n      significantTerms = \"significantTerms(collection1, q=\\\"id:a*\\\",  field=\\\"test_t\\\", limit=3, minDocFreq=\\\".478\\\", minTermLength=1, maxDocFreq=\\\".5\\\")\";\n      stream = factory.constructStream(significantTerms);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 1);\n\n      assertTrue(tuples.get(0).get(\"term\").equals(\"c\"));\n      assertTrue(tuples.get(0).getLong(\"background\") == 5900);\n      assertTrue(tuples.get(0).getLong(\"foreground\") == 5000);\n\n      //Test limit\n\n      significantTerms = \"significantTerms(collection1, q=\\\"id:a*\\\",  field=\\\"test_t\\\", limit=2, minDocFreq=\\\"2700\\\", minTermLength=1, maxDocFreq=\\\".5\\\")\";\n      stream = factory.constructStream(significantTerms);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 2);\n\n      assertTrue(tuples.get(0).get(\"term\").equals(\"m\"));\n      assertTrue(tuples.get(0).getLong(\"background\") == 5500);\n      assertTrue(tuples.get(0).getLong(\"foreground\") == 5000);\n\n      assertTrue(tuples.get(1).get(\"term\").equals(\"d\"));\n      assertTrue(tuples.get(1).getLong(\"background\") == 5600);\n      assertTrue(tuples.get(1).getLong(\"foreground\") == 5000);\n\n      //Test term length\n\n      significantTerms = \"significantTerms(collection1, q=\\\"id:a*\\\",  field=\\\"test_t\\\", limit=2, minDocFreq=\\\"2700\\\", minTermLength=2)\";\n      stream = factory.constructStream(significantTerms);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assert (tuples.size() == 0);\n\n\n      //Test with shards parameter\n      List<String> shardUrls = TupleStream.getShards(cluster.getZkServer().getZkAddress(), COLLECTIONORALIAS, streamContext);\n\n      Map<String, List<String>> shardsMap = new HashMap();\n      shardsMap.put(\"myCollection\", shardUrls);\n      StreamContext context = new StreamContext();\n      context.put(\"shards\", shardsMap);\n      context.setSolrClientCache(cache);\n      significantTerms = \"significantTerms(myCollection, q=\\\"id:a*\\\",  field=\\\"test_t\\\", limit=2, minDocFreq=\\\"2700\\\", minTermLength=1, maxDocFreq=\\\".5\\\")\";\n      stream = factory.constructStream(significantTerms);\n      stream.setStreamContext(context);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 2);\n\n      assertTrue(tuples.get(0).get(\"term\").equals(\"m\"));\n      assertTrue(tuples.get(0).getLong(\"background\") == 5500);\n      assertTrue(tuples.get(0).getLong(\"foreground\") == 5000);\n\n      assertTrue(tuples.get(1).get(\"term\").equals(\"d\"));\n      assertTrue(tuples.get(1).getLong(\"background\") == 5600);\n      assertTrue(tuples.get(1).getLong(\"foreground\") == 5000);\n\n      //Execersise the /stream hander\n\n      //Add the shards http parameter for the myCollection\n      StringBuilder buf = new StringBuilder();\n      for (String shardUrl : shardUrls) {\n        if (buf.length() > 0) {\n          buf.append(\",\");\n        }\n        buf.append(shardUrl);\n      }\n\n      ModifiableSolrParams solrParams = new ModifiableSolrParams();\n      solrParams.add(\"qt\", \"/stream\");\n      solrParams.add(\"expr\", significantTerms);\n      solrParams.add(\"myCollection.shards\", buf.toString());\n      SolrStream solrStream = new SolrStream(shardUrls.get(0), solrParams);\n      tuples = getTuples(solrStream);\n      assert (tuples.size() == 2);\n\n      assertTrue(tuples.get(0).get(\"term\").equals(\"m\"));\n      assertTrue(tuples.get(0).getLong(\"background\") == 5500);\n      assertTrue(tuples.get(0).getLong(\"foreground\") == 5000);\n\n      assertTrue(tuples.get(1).get(\"term\").equals(\"d\"));\n      assertTrue(tuples.get(1).getLong(\"background\") == 5600);\n      assertTrue(tuples.get(1).getLong(\"foreground\") == 5000);\n\n      //Add a negative test to prove that it cannot find slices if shards parameter is removed\n\n      try {\n        ModifiableSolrParams solrParamsBad = new ModifiableSolrParams();\n        solrParamsBad.add(\"qt\", \"/stream\");\n        solrParamsBad.add(\"expr\", significantTerms);\n        solrStream = new SolrStream(shardUrls.get(0), solrParamsBad);\n        tuples = getTuples(solrStream);\n        throw new Exception(\"Exception should have been thrown above\");\n      } catch (IOException e) {\n        assertTrue(e.getMessage().contains(\"Slices not found for myCollection\"));\n      }\n    } finally {\n      cache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSignificantTermsStream() throws Exception {\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    for (int i = 0; i < 5000; i++) {\n      updateRequest.add(id, \"a\"+i, \"test_t\", \"a b c d m l\");\n    }\n\n    for (int i = 0; i < 5000; i++) {\n      updateRequest.add(id, \"b\"+i, \"test_t\", \"a b e f\");\n    }\n\n    for (int i = 0; i < 900; i++) {\n      updateRequest.add(id, \"c\"+i, \"test_t\", \"c\");\n    }\n\n    for (int i = 0; i < 600; i++) {\n      updateRequest.add(id, \"d\"+i, \"test_t\", \"d\");\n    }\n\n    for (int i = 0; i < 500; i++) {\n      updateRequest.add(id, \"e\"+i, \"test_t\", \"m\");\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withDefaultZkHost(cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    streamContext.setSolrClientCache(cache);\n    try {\n\n      String significantTerms = \"significantTerms(collection1, q=\\\"id:a*\\\",  field=\\\"test_t\\\", limit=3, minTermLength=1, maxDocFreq=\\\".5\\\")\";\n      stream = factory.constructStream(significantTerms);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n      assertTrue(tuples.get(0).get(\"term\").equals(\"l\"));\n      assertTrue(tuples.get(0).getLong(\"background\") == 5000);\n      assertTrue(tuples.get(0).getLong(\"foreground\") == 5000);\n\n\n      assertTrue(tuples.get(1).get(\"term\").equals(\"m\"));\n      assertTrue(tuples.get(1).getLong(\"background\") == 5500);\n      assertTrue(tuples.get(1).getLong(\"foreground\") == 5000);\n\n      assertTrue(tuples.get(2).get(\"term\").equals(\"d\"));\n      assertTrue(tuples.get(2).getLong(\"background\") == 5600);\n      assertTrue(tuples.get(2).getLong(\"foreground\") == 5000);\n\n      //Test maxDocFreq\n      significantTerms = \"significantTerms(collection1, q=\\\"id:a*\\\",  field=\\\"test_t\\\", limit=3, maxDocFreq=2650, minTermLength=1)\";\n      stream = factory.constructStream(significantTerms);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 1);\n      assertTrue(tuples.get(0).get(\"term\").equals(\"l\"));\n      assertTrue(tuples.get(0).getLong(\"background\") == 5000);\n      assertTrue(tuples.get(0).getLong(\"foreground\") == 5000);\n\n      //Test maxDocFreq percentage\n\n      significantTerms = \"significantTerms(collection1, q=\\\"id:a*\\\",  field=\\\"test_t\\\", limit=3, maxDocFreq=\\\".45\\\", minTermLength=1)\";\n      stream = factory.constructStream(significantTerms);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assert (tuples.size() == 1);\n      assertTrue(tuples.get(0).get(\"term\").equals(\"l\"));\n      assertTrue(tuples.get(0).getLong(\"background\") == 5000);\n      assertTrue(tuples.get(0).getLong(\"foreground\") == 5000);\n\n\n      //Test min doc freq\n      significantTerms = \"significantTerms(collection1, q=\\\"id:a*\\\",  field=\\\"test_t\\\", limit=3, minDocFreq=\\\"2700\\\", minTermLength=1, maxDocFreq=\\\".5\\\")\";\n      stream = factory.constructStream(significantTerms);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n\n      assertTrue(tuples.get(0).get(\"term\").equals(\"m\"));\n      assertTrue(tuples.get(0).getLong(\"background\") == 5500);\n      assertTrue(tuples.get(0).getLong(\"foreground\") == 5000);\n\n      assertTrue(tuples.get(1).get(\"term\").equals(\"d\"));\n      assertTrue(tuples.get(1).getLong(\"background\") == 5600);\n      assertTrue(tuples.get(1).getLong(\"foreground\") == 5000);\n\n      assertTrue(tuples.get(2).get(\"term\").equals(\"c\"));\n      assertTrue(tuples.get(2).getLong(\"background\") == 5900);\n      assertTrue(tuples.get(2).getLong(\"foreground\") == 5000);\n\n\n      //Test min doc freq percent\n      significantTerms = \"significantTerms(collection1, q=\\\"id:a*\\\",  field=\\\"test_t\\\", limit=3, minDocFreq=\\\".478\\\", minTermLength=1, maxDocFreq=\\\".5\\\")\";\n      stream = factory.constructStream(significantTerms);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 1);\n\n      assertTrue(tuples.get(0).get(\"term\").equals(\"c\"));\n      assertTrue(tuples.get(0).getLong(\"background\") == 5900);\n      assertTrue(tuples.get(0).getLong(\"foreground\") == 5000);\n\n      //Test limit\n\n      significantTerms = \"significantTerms(collection1, q=\\\"id:a*\\\",  field=\\\"test_t\\\", limit=2, minDocFreq=\\\"2700\\\", minTermLength=1, maxDocFreq=\\\".5\\\")\";\n      stream = factory.constructStream(significantTerms);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 2);\n\n      assertTrue(tuples.get(0).get(\"term\").equals(\"m\"));\n      assertTrue(tuples.get(0).getLong(\"background\") == 5500);\n      assertTrue(tuples.get(0).getLong(\"foreground\") == 5000);\n\n      assertTrue(tuples.get(1).get(\"term\").equals(\"d\"));\n      assertTrue(tuples.get(1).getLong(\"background\") == 5600);\n      assertTrue(tuples.get(1).getLong(\"foreground\") == 5000);\n\n      //Test term length\n\n      significantTerms = \"significantTerms(collection1, q=\\\"id:a*\\\",  field=\\\"test_t\\\", limit=2, minDocFreq=\\\"2700\\\", minTermLength=2)\";\n      stream = factory.constructStream(significantTerms);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assert (tuples.size() == 0);\n\n\n      //Test with shards parameter\n      List<String> shardUrls = TupleStream.getShards(cluster.getZkServer().getZkAddress(), COLLECTIONORALIAS, streamContext);\n\n      Map<String, List<String>> shardsMap = new HashMap();\n      shardsMap.put(\"myCollection\", shardUrls);\n      StreamContext context = new StreamContext();\n      context.put(\"shards\", shardsMap);\n      context.setSolrClientCache(cache);\n      significantTerms = \"significantTerms(myCollection, q=\\\"id:a*\\\",  field=\\\"test_t\\\", limit=2, minDocFreq=\\\"2700\\\", minTermLength=1, maxDocFreq=\\\".5\\\")\";\n      stream = factory.constructStream(significantTerms);\n      stream.setStreamContext(context);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 2);\n\n      assertTrue(tuples.get(0).get(\"term\").equals(\"m\"));\n      assertTrue(tuples.get(0).getLong(\"background\") == 5500);\n      assertTrue(tuples.get(0).getLong(\"foreground\") == 5000);\n\n      assertTrue(tuples.get(1).get(\"term\").equals(\"d\"));\n      assertTrue(tuples.get(1).getLong(\"background\") == 5600);\n      assertTrue(tuples.get(1).getLong(\"foreground\") == 5000);\n\n      //Execersise the /stream hander\n\n      //Add the shards http parameter for the myCollection\n      StringBuilder buf = new StringBuilder();\n      for (String shardUrl : shardUrls) {\n        if (buf.length() > 0) {\n          buf.append(\",\");\n        }\n        buf.append(shardUrl);\n      }\n\n      ModifiableSolrParams solrParams = new ModifiableSolrParams();\n      solrParams.add(\"qt\", \"/stream\");\n      solrParams.add(\"expr\", significantTerms);\n      solrParams.add(\"myCollection.shards\", buf.toString());\n      SolrStream solrStream = new SolrStream(shardUrls.get(0), solrParams);\n      tuples = getTuples(solrStream);\n      assert (tuples.size() == 2);\n\n      assertTrue(tuples.get(0).get(\"term\").equals(\"m\"));\n      assertTrue(tuples.get(0).getLong(\"background\") == 5500);\n      assertTrue(tuples.get(0).getLong(\"foreground\") == 5000);\n\n      assertTrue(tuples.get(1).get(\"term\").equals(\"d\"));\n      assertTrue(tuples.get(1).getLong(\"background\") == 5600);\n      assertTrue(tuples.get(1).getLong(\"foreground\") == 5000);\n\n      //Add a negative test to prove that it cannot find slices if shards parameter is removed\n\n      try {\n        ModifiableSolrParams solrParamsBad = new ModifiableSolrParams();\n        solrParamsBad.add(\"qt\", \"/stream\");\n        solrParamsBad.add(\"expr\", significantTerms);\n        solrStream = new SolrStream(shardUrls.get(0), solrParamsBad);\n        tuples = getTuples(solrStream);\n        throw new Exception(\"Exception should have been thrown above\");\n      } catch (IOException e) {\n        assertTrue(e.getMessage().contains(\"Slices not found for myCollection\"));\n      }\n    } finally {\n      cache.close();\n    }\n\n\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSignificantTermsStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSignificantTermsStream().mjava","sourceNew":"  @Test\n  public void testSignificantTermsStream() throws Exception {\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    for (int i = 0; i < 5000; i++) {\n      updateRequest.add(id, \"a\"+i, \"test_t\", \"a b c d m l\");\n    }\n\n    for (int i = 0; i < 5000; i++) {\n      updateRequest.add(id, \"b\"+i, \"test_t\", \"a b e f\");\n    }\n\n    for (int i = 0; i < 900; i++) {\n      updateRequest.add(id, \"c\"+i, \"test_t\", \"c\");\n    }\n\n    for (int i = 0; i < 600; i++) {\n      updateRequest.add(id, \"d\"+i, \"test_t\", \"d\");\n    }\n\n    for (int i = 0; i < 500; i++) {\n      updateRequest.add(id, \"e\"+i, \"test_t\", \"m\");\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withDefaultZkHost(cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    streamContext.setSolrClientCache(cache);\n    try {\n\n      String significantTerms = \"significantTerms(collection1, q=\\\"id:a*\\\",  field=\\\"test_t\\\", limit=3, minTermLength=1, maxDocFreq=\\\".5\\\")\";\n      stream = factory.constructStream(significantTerms);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n      assertTrue(tuples.get(0).get(\"term\").equals(\"l\"));\n      assertTrue(tuples.get(0).getLong(\"background\") == 5000);\n      assertTrue(tuples.get(0).getLong(\"foreground\") == 5000);\n\n\n      assertTrue(tuples.get(1).get(\"term\").equals(\"m\"));\n      assertTrue(tuples.get(1).getLong(\"background\") == 5500);\n      assertTrue(tuples.get(1).getLong(\"foreground\") == 5000);\n\n      assertTrue(tuples.get(2).get(\"term\").equals(\"d\"));\n      assertTrue(tuples.get(2).getLong(\"background\") == 5600);\n      assertTrue(tuples.get(2).getLong(\"foreground\") == 5000);\n\n      //Test maxDocFreq\n      significantTerms = \"significantTerms(collection1, q=\\\"id:a*\\\",  field=\\\"test_t\\\", limit=3, maxDocFreq=2650, minTermLength=1)\";\n      stream = factory.constructStream(significantTerms);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 1);\n      assertTrue(tuples.get(0).get(\"term\").equals(\"l\"));\n      assertTrue(tuples.get(0).getLong(\"background\") == 5000);\n      assertTrue(tuples.get(0).getLong(\"foreground\") == 5000);\n\n      //Test maxDocFreq percentage\n\n      significantTerms = \"significantTerms(collection1, q=\\\"id:a*\\\",  field=\\\"test_t\\\", limit=3, maxDocFreq=\\\".45\\\", minTermLength=1)\";\n      stream = factory.constructStream(significantTerms);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assert (tuples.size() == 1);\n      assertTrue(tuples.get(0).get(\"term\").equals(\"l\"));\n      assertTrue(tuples.get(0).getLong(\"background\") == 5000);\n      assertTrue(tuples.get(0).getLong(\"foreground\") == 5000);\n\n\n      //Test min doc freq\n      significantTerms = \"significantTerms(collection1, q=\\\"id:a*\\\",  field=\\\"test_t\\\", limit=3, minDocFreq=\\\"2700\\\", minTermLength=1, maxDocFreq=\\\".5\\\")\";\n      stream = factory.constructStream(significantTerms);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n\n      assertTrue(tuples.get(0).get(\"term\").equals(\"m\"));\n      assertTrue(tuples.get(0).getLong(\"background\") == 5500);\n      assertTrue(tuples.get(0).getLong(\"foreground\") == 5000);\n\n      assertTrue(tuples.get(1).get(\"term\").equals(\"d\"));\n      assertTrue(tuples.get(1).getLong(\"background\") == 5600);\n      assertTrue(tuples.get(1).getLong(\"foreground\") == 5000);\n\n      assertTrue(tuples.get(2).get(\"term\").equals(\"c\"));\n      assertTrue(tuples.get(2).getLong(\"background\") == 5900);\n      assertTrue(tuples.get(2).getLong(\"foreground\") == 5000);\n\n\n      //Test min doc freq percent\n      significantTerms = \"significantTerms(collection1, q=\\\"id:a*\\\",  field=\\\"test_t\\\", limit=3, minDocFreq=\\\".478\\\", minTermLength=1, maxDocFreq=\\\".5\\\")\";\n      stream = factory.constructStream(significantTerms);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 1);\n\n      assertTrue(tuples.get(0).get(\"term\").equals(\"c\"));\n      assertTrue(tuples.get(0).getLong(\"background\") == 5900);\n      assertTrue(tuples.get(0).getLong(\"foreground\") == 5000);\n\n      //Test limit\n\n      significantTerms = \"significantTerms(collection1, q=\\\"id:a*\\\",  field=\\\"test_t\\\", limit=2, minDocFreq=\\\"2700\\\", minTermLength=1, maxDocFreq=\\\".5\\\")\";\n      stream = factory.constructStream(significantTerms);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 2);\n\n      assertTrue(tuples.get(0).get(\"term\").equals(\"m\"));\n      assertTrue(tuples.get(0).getLong(\"background\") == 5500);\n      assertTrue(tuples.get(0).getLong(\"foreground\") == 5000);\n\n      assertTrue(tuples.get(1).get(\"term\").equals(\"d\"));\n      assertTrue(tuples.get(1).getLong(\"background\") == 5600);\n      assertTrue(tuples.get(1).getLong(\"foreground\") == 5000);\n\n      //Test term length\n\n      significantTerms = \"significantTerms(collection1, q=\\\"id:a*\\\",  field=\\\"test_t\\\", limit=2, minDocFreq=\\\"2700\\\", minTermLength=2)\";\n      stream = factory.constructStream(significantTerms);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assert (tuples.size() == 0);\n\n\n      //Test with shards parameter\n      List<String> shardUrls = TupleStream.getShards(cluster.getZkServer().getZkAddress(), COLLECTIONORALIAS, streamContext);\n\n      Map<String, List<String>> shardsMap = new HashMap<>();\n      shardsMap.put(\"myCollection\", shardUrls);\n      StreamContext context = new StreamContext();\n      context.put(\"shards\", shardsMap);\n      context.setSolrClientCache(cache);\n      significantTerms = \"significantTerms(myCollection, q=\\\"id:a*\\\",  field=\\\"test_t\\\", limit=2, minDocFreq=\\\"2700\\\", minTermLength=1, maxDocFreq=\\\".5\\\")\";\n      stream = factory.constructStream(significantTerms);\n      stream.setStreamContext(context);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 2);\n\n      assertTrue(tuples.get(0).get(\"term\").equals(\"m\"));\n      assertTrue(tuples.get(0).getLong(\"background\") == 5500);\n      assertTrue(tuples.get(0).getLong(\"foreground\") == 5000);\n\n      assertTrue(tuples.get(1).get(\"term\").equals(\"d\"));\n      assertTrue(tuples.get(1).getLong(\"background\") == 5600);\n      assertTrue(tuples.get(1).getLong(\"foreground\") == 5000);\n\n      //Execersise the /stream hander\n\n      //Add the shards http parameter for the myCollection\n      StringBuilder buf = new StringBuilder();\n      for (String shardUrl : shardUrls) {\n        if (buf.length() > 0) {\n          buf.append(\",\");\n        }\n        buf.append(shardUrl);\n      }\n\n      ModifiableSolrParams solrParams = new ModifiableSolrParams();\n      solrParams.add(\"qt\", \"/stream\");\n      solrParams.add(\"expr\", significantTerms);\n      solrParams.add(\"myCollection.shards\", buf.toString());\n      SolrStream solrStream = new SolrStream(shardUrls.get(0), solrParams);\n      tuples = getTuples(solrStream);\n      assert (tuples.size() == 2);\n\n      assertTrue(tuples.get(0).get(\"term\").equals(\"m\"));\n      assertTrue(tuples.get(0).getLong(\"background\") == 5500);\n      assertTrue(tuples.get(0).getLong(\"foreground\") == 5000);\n\n      assertTrue(tuples.get(1).get(\"term\").equals(\"d\"));\n      assertTrue(tuples.get(1).getLong(\"background\") == 5600);\n      assertTrue(tuples.get(1).getLong(\"foreground\") == 5000);\n\n      //Add a negative test to prove that it cannot find slices if shards parameter is removed\n\n      try {\n        ModifiableSolrParams solrParamsBad = new ModifiableSolrParams();\n        solrParamsBad.add(\"qt\", \"/stream\");\n        solrParamsBad.add(\"expr\", significantTerms);\n        solrStream = new SolrStream(shardUrls.get(0), solrParamsBad);\n        tuples = getTuples(solrStream);\n        throw new Exception(\"Exception should have been thrown above\");\n      } catch (IOException e) {\n        assertTrue(e.getMessage().contains(\"Slices not found for myCollection\"));\n      }\n    } finally {\n      cache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSignificantTermsStream() throws Exception {\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    for (int i = 0; i < 5000; i++) {\n      updateRequest.add(id, \"a\"+i, \"test_t\", \"a b c d m l\");\n    }\n\n    for (int i = 0; i < 5000; i++) {\n      updateRequest.add(id, \"b\"+i, \"test_t\", \"a b e f\");\n    }\n\n    for (int i = 0; i < 900; i++) {\n      updateRequest.add(id, \"c\"+i, \"test_t\", \"c\");\n    }\n\n    for (int i = 0; i < 600; i++) {\n      updateRequest.add(id, \"d\"+i, \"test_t\", \"d\");\n    }\n\n    for (int i = 0; i < 500; i++) {\n      updateRequest.add(id, \"e\"+i, \"test_t\", \"m\");\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n        .withDefaultZkHost(cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache cache = new SolrClientCache();\n    streamContext.setSolrClientCache(cache);\n    try {\n\n      String significantTerms = \"significantTerms(collection1, q=\\\"id:a*\\\",  field=\\\"test_t\\\", limit=3, minTermLength=1, maxDocFreq=\\\".5\\\")\";\n      stream = factory.constructStream(significantTerms);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n      assertTrue(tuples.get(0).get(\"term\").equals(\"l\"));\n      assertTrue(tuples.get(0).getLong(\"background\") == 5000);\n      assertTrue(tuples.get(0).getLong(\"foreground\") == 5000);\n\n\n      assertTrue(tuples.get(1).get(\"term\").equals(\"m\"));\n      assertTrue(tuples.get(1).getLong(\"background\") == 5500);\n      assertTrue(tuples.get(1).getLong(\"foreground\") == 5000);\n\n      assertTrue(tuples.get(2).get(\"term\").equals(\"d\"));\n      assertTrue(tuples.get(2).getLong(\"background\") == 5600);\n      assertTrue(tuples.get(2).getLong(\"foreground\") == 5000);\n\n      //Test maxDocFreq\n      significantTerms = \"significantTerms(collection1, q=\\\"id:a*\\\",  field=\\\"test_t\\\", limit=3, maxDocFreq=2650, minTermLength=1)\";\n      stream = factory.constructStream(significantTerms);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 1);\n      assertTrue(tuples.get(0).get(\"term\").equals(\"l\"));\n      assertTrue(tuples.get(0).getLong(\"background\") == 5000);\n      assertTrue(tuples.get(0).getLong(\"foreground\") == 5000);\n\n      //Test maxDocFreq percentage\n\n      significantTerms = \"significantTerms(collection1, q=\\\"id:a*\\\",  field=\\\"test_t\\\", limit=3, maxDocFreq=\\\".45\\\", minTermLength=1)\";\n      stream = factory.constructStream(significantTerms);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assert (tuples.size() == 1);\n      assertTrue(tuples.get(0).get(\"term\").equals(\"l\"));\n      assertTrue(tuples.get(0).getLong(\"background\") == 5000);\n      assertTrue(tuples.get(0).getLong(\"foreground\") == 5000);\n\n\n      //Test min doc freq\n      significantTerms = \"significantTerms(collection1, q=\\\"id:a*\\\",  field=\\\"test_t\\\", limit=3, minDocFreq=\\\"2700\\\", minTermLength=1, maxDocFreq=\\\".5\\\")\";\n      stream = factory.constructStream(significantTerms);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 3);\n\n      assertTrue(tuples.get(0).get(\"term\").equals(\"m\"));\n      assertTrue(tuples.get(0).getLong(\"background\") == 5500);\n      assertTrue(tuples.get(0).getLong(\"foreground\") == 5000);\n\n      assertTrue(tuples.get(1).get(\"term\").equals(\"d\"));\n      assertTrue(tuples.get(1).getLong(\"background\") == 5600);\n      assertTrue(tuples.get(1).getLong(\"foreground\") == 5000);\n\n      assertTrue(tuples.get(2).get(\"term\").equals(\"c\"));\n      assertTrue(tuples.get(2).getLong(\"background\") == 5900);\n      assertTrue(tuples.get(2).getLong(\"foreground\") == 5000);\n\n\n      //Test min doc freq percent\n      significantTerms = \"significantTerms(collection1, q=\\\"id:a*\\\",  field=\\\"test_t\\\", limit=3, minDocFreq=\\\".478\\\", minTermLength=1, maxDocFreq=\\\".5\\\")\";\n      stream = factory.constructStream(significantTerms);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 1);\n\n      assertTrue(tuples.get(0).get(\"term\").equals(\"c\"));\n      assertTrue(tuples.get(0).getLong(\"background\") == 5900);\n      assertTrue(tuples.get(0).getLong(\"foreground\") == 5000);\n\n      //Test limit\n\n      significantTerms = \"significantTerms(collection1, q=\\\"id:a*\\\",  field=\\\"test_t\\\", limit=2, minDocFreq=\\\"2700\\\", minTermLength=1, maxDocFreq=\\\".5\\\")\";\n      stream = factory.constructStream(significantTerms);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 2);\n\n      assertTrue(tuples.get(0).get(\"term\").equals(\"m\"));\n      assertTrue(tuples.get(0).getLong(\"background\") == 5500);\n      assertTrue(tuples.get(0).getLong(\"foreground\") == 5000);\n\n      assertTrue(tuples.get(1).get(\"term\").equals(\"d\"));\n      assertTrue(tuples.get(1).getLong(\"background\") == 5600);\n      assertTrue(tuples.get(1).getLong(\"foreground\") == 5000);\n\n      //Test term length\n\n      significantTerms = \"significantTerms(collection1, q=\\\"id:a*\\\",  field=\\\"test_t\\\", limit=2, minDocFreq=\\\"2700\\\", minTermLength=2)\";\n      stream = factory.constructStream(significantTerms);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assert (tuples.size() == 0);\n\n\n      //Test with shards parameter\n      List<String> shardUrls = TupleStream.getShards(cluster.getZkServer().getZkAddress(), COLLECTIONORALIAS, streamContext);\n\n      Map<String, List<String>> shardsMap = new HashMap();\n      shardsMap.put(\"myCollection\", shardUrls);\n      StreamContext context = new StreamContext();\n      context.put(\"shards\", shardsMap);\n      context.setSolrClientCache(cache);\n      significantTerms = \"significantTerms(myCollection, q=\\\"id:a*\\\",  field=\\\"test_t\\\", limit=2, minDocFreq=\\\"2700\\\", minTermLength=1, maxDocFreq=\\\".5\\\")\";\n      stream = factory.constructStream(significantTerms);\n      stream.setStreamContext(context);\n      tuples = getTuples(stream);\n\n      assert (tuples.size() == 2);\n\n      assertTrue(tuples.get(0).get(\"term\").equals(\"m\"));\n      assertTrue(tuples.get(0).getLong(\"background\") == 5500);\n      assertTrue(tuples.get(0).getLong(\"foreground\") == 5000);\n\n      assertTrue(tuples.get(1).get(\"term\").equals(\"d\"));\n      assertTrue(tuples.get(1).getLong(\"background\") == 5600);\n      assertTrue(tuples.get(1).getLong(\"foreground\") == 5000);\n\n      //Execersise the /stream hander\n\n      //Add the shards http parameter for the myCollection\n      StringBuilder buf = new StringBuilder();\n      for (String shardUrl : shardUrls) {\n        if (buf.length() > 0) {\n          buf.append(\",\");\n        }\n        buf.append(shardUrl);\n      }\n\n      ModifiableSolrParams solrParams = new ModifiableSolrParams();\n      solrParams.add(\"qt\", \"/stream\");\n      solrParams.add(\"expr\", significantTerms);\n      solrParams.add(\"myCollection.shards\", buf.toString());\n      SolrStream solrStream = new SolrStream(shardUrls.get(0), solrParams);\n      tuples = getTuples(solrStream);\n      assert (tuples.size() == 2);\n\n      assertTrue(tuples.get(0).get(\"term\").equals(\"m\"));\n      assertTrue(tuples.get(0).getLong(\"background\") == 5500);\n      assertTrue(tuples.get(0).getLong(\"foreground\") == 5000);\n\n      assertTrue(tuples.get(1).get(\"term\").equals(\"d\"));\n      assertTrue(tuples.get(1).getLong(\"background\") == 5600);\n      assertTrue(tuples.get(1).getLong(\"foreground\") == 5000);\n\n      //Add a negative test to prove that it cannot find slices if shards parameter is removed\n\n      try {\n        ModifiableSolrParams solrParamsBad = new ModifiableSolrParams();\n        solrParamsBad.add(\"qt\", \"/stream\");\n        solrParamsBad.add(\"expr\", significantTerms);\n        solrStream = new SolrStream(shardUrls.get(0), solrParamsBad);\n        tuples = getTuples(solrStream);\n        throw new Exception(\"Exception should have been thrown above\");\n      } catch (IOException e) {\n        assertTrue(e.getMessage().contains(\"Slices not found for myCollection\"));\n      }\n    } finally {\n      cache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"3e5922fb6b9f0e49b31ce0436420a7f4392031c4":["f67c3a1123a063e580a2e6ec51b9eb7c273666ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f67c3a1123a063e580a2e6ec51b9eb7c273666ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["3e5922fb6b9f0e49b31ce0436420a7f4392031c4"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3e5922fb6b9f0e49b31ce0436420a7f4392031c4":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f67c3a1123a063e580a2e6ec51b9eb7c273666ce"],"f67c3a1123a063e580a2e6ec51b9eb7c273666ce":["3e5922fb6b9f0e49b31ce0436420a7f4392031c4"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["9ba1b632c041956c93c41aa1143d16a567014891"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}