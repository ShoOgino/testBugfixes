{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/TestDrillSideways#getTopNOrds(int[],String[],int).mjava","commits":[{"id":"fb8457dd0880f5547d70dbf40ea4f1c5e7787798","date":1363378339,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestDrillSideways#getTopNOrds(int[],String[],int).mjava","pathOld":"/dev/null","sourceNew":"  private int[] getTopNOrds(final int[] counts, final String[] values, int topN) {\n    final int[] ids = new int[counts.length];\n    for(int i=0;i<ids.length;i++) {\n      ids[i] = i;\n    }\n\n    // Naive (on purpose, to reduce bug in tester/gold):\n    // sort all ids, then return top N slice:\n    new SorterTemplate() {\n\n      private int pivot;\n\n      @Override\n      protected void swap(int i, int j) {\n        int id = ids[i];\n        ids[i] = ids[j];\n        ids[j] = id;\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        int counti = counts[ids[i]];\n        int countj = counts[ids[j]];\n        // Sort by count descending...\n        if (counti > countj) {\n          return -1;\n        } else if (counti < countj) {\n          return 1;\n        } else {\n          // ... then by label ascending:\n          return new BytesRef(values[ids[i]]).compareTo(new BytesRef(values[ids[j]]));\n        }\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        pivot = ids[i];\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        int counti = counts[pivot];\n        int countj = counts[ids[j]];\n        // Sort by count descending...\n        if (counti > countj) {\n          return -1;\n        } else if (counti < countj) {\n          return 1;\n        } else {\n          // ... then by ord ascending:\n          return new BytesRef(values[pivot]).compareTo(new BytesRef(values[ids[j]]));\n        }\n      }\n    }.mergeSort(0, ids.length-1);\n\n    if (topN > ids.length) {\n      topN = ids.length;\n    }\n\n    int numSet = topN;\n    for(int i=0;i<topN;i++) {\n      if (counts[ids[i]] == 0) {\n        numSet = i;\n        break;\n      }\n    }\n\n    int[] topNIDs = new int[numSet];\n    System.arraycopy(ids, 0, topNIDs, 0, topNIDs.length);\n    return topNIDs;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dcc555744b1a581a4beccd0b75f8d3fe49735a2f","date":1367588265,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestDrillSideways#getTopNOrds(int[],String[],int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestDrillSideways#getTopNOrds(int[],String[],int).mjava","sourceNew":"  private int[] getTopNOrds(final int[] counts, final String[] values, int topN) {\n    final int[] ids = new int[counts.length];\n    for(int i=0;i<ids.length;i++) {\n      ids[i] = i;\n    }\n\n    // Naive (on purpose, to reduce bug in tester/gold):\n    // sort all ids, then return top N slice:\n    new InPlaceMergeSorter() {\n\n      @Override\n      protected void swap(int i, int j) {\n        int id = ids[i];\n        ids[i] = ids[j];\n        ids[j] = id;\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        int counti = counts[ids[i]];\n        int countj = counts[ids[j]];\n        // Sort by count descending...\n        if (counti > countj) {\n          return -1;\n        } else if (counti < countj) {\n          return 1;\n        } else {\n          // ... then by label ascending:\n          return new BytesRef(values[ids[i]]).compareTo(new BytesRef(values[ids[j]]));\n        }\n      }\n\n    }.sort(0, ids.length);\n\n    if (topN > ids.length) {\n      topN = ids.length;\n    }\n\n    int numSet = topN;\n    for(int i=0;i<topN;i++) {\n      if (counts[ids[i]] == 0) {\n        numSet = i;\n        break;\n      }\n    }\n\n    int[] topNIDs = new int[numSet];\n    System.arraycopy(ids, 0, topNIDs, 0, topNIDs.length);\n    return topNIDs;\n  }\n\n","sourceOld":"  private int[] getTopNOrds(final int[] counts, final String[] values, int topN) {\n    final int[] ids = new int[counts.length];\n    for(int i=0;i<ids.length;i++) {\n      ids[i] = i;\n    }\n\n    // Naive (on purpose, to reduce bug in tester/gold):\n    // sort all ids, then return top N slice:\n    new SorterTemplate() {\n\n      private int pivot;\n\n      @Override\n      protected void swap(int i, int j) {\n        int id = ids[i];\n        ids[i] = ids[j];\n        ids[j] = id;\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        int counti = counts[ids[i]];\n        int countj = counts[ids[j]];\n        // Sort by count descending...\n        if (counti > countj) {\n          return -1;\n        } else if (counti < countj) {\n          return 1;\n        } else {\n          // ... then by label ascending:\n          return new BytesRef(values[ids[i]]).compareTo(new BytesRef(values[ids[j]]));\n        }\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        pivot = ids[i];\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        int counti = counts[pivot];\n        int countj = counts[ids[j]];\n        // Sort by count descending...\n        if (counti > countj) {\n          return -1;\n        } else if (counti < countj) {\n          return 1;\n        } else {\n          // ... then by ord ascending:\n          return new BytesRef(values[pivot]).compareTo(new BytesRef(values[ids[j]]));\n        }\n      }\n    }.mergeSort(0, ids.length-1);\n\n    if (topN > ids.length) {\n      topN = ids.length;\n    }\n\n    int numSet = topN;\n    for(int i=0;i<topN;i++) {\n      if (counts[ids[i]] == 0) {\n        numSet = i;\n        break;\n      }\n    }\n\n    int[] topNIDs = new int[numSet];\n    System.arraycopy(ids, 0, topNIDs, 0, topNIDs.length);\n    return topNIDs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce7aff7772c162c15d520e31af46c555f60d5c3b","date":1385135519,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestDrillSideways#getTopNOrds(int[],String[],int).mjava","sourceNew":null,"sourceOld":"  private int[] getTopNOrds(final int[] counts, final String[] values, int topN) {\n    final int[] ids = new int[counts.length];\n    for(int i=0;i<ids.length;i++) {\n      ids[i] = i;\n    }\n\n    // Naive (on purpose, to reduce bug in tester/gold):\n    // sort all ids, then return top N slice:\n    new InPlaceMergeSorter() {\n\n      @Override\n      protected void swap(int i, int j) {\n        int id = ids[i];\n        ids[i] = ids[j];\n        ids[j] = id;\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        int counti = counts[ids[i]];\n        int countj = counts[ids[j]];\n        // Sort by count descending...\n        if (counti > countj) {\n          return -1;\n        } else if (counti < countj) {\n          return 1;\n        } else {\n          // ... then by label ascending:\n          return new BytesRef(values[ids[i]]).compareTo(new BytesRef(values[ids[j]]));\n        }\n      }\n\n    }.sort(0, ids.length);\n\n    if (topN > ids.length) {\n      topN = ids.length;\n    }\n\n    int numSet = topN;\n    for(int i=0;i<topN;i++) {\n      if (counts[ids[i]] == 0) {\n        numSet = i;\n        break;\n      }\n    }\n\n    int[] topNIDs = new int[numSet];\n    System.arraycopy(ids, 0, topNIDs, 0, topNIDs.length);\n    return topNIDs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestDrillSideways#getTopNOrds(int[],String[],int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestDrillSideways#getTopNOrds(int[],String[],int).mjava","sourceNew":"  private int[] getTopNOrds(final int[] counts, final String[] values, int topN) {\n    final int[] ids = new int[counts.length];\n    for(int i=0;i<ids.length;i++) {\n      ids[i] = i;\n    }\n\n    // Naive (on purpose, to reduce bug in tester/gold):\n    // sort all ids, then return top N slice:\n    new InPlaceMergeSorter() {\n\n      @Override\n      protected void swap(int i, int j) {\n        int id = ids[i];\n        ids[i] = ids[j];\n        ids[j] = id;\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        int counti = counts[ids[i]];\n        int countj = counts[ids[j]];\n        // Sort by count descending...\n        if (counti > countj) {\n          return -1;\n        } else if (counti < countj) {\n          return 1;\n        } else {\n          // ... then by label ascending:\n          return new BytesRef(values[ids[i]]).compareTo(new BytesRef(values[ids[j]]));\n        }\n      }\n\n    }.sort(0, ids.length);\n\n    if (topN > ids.length) {\n      topN = ids.length;\n    }\n\n    int numSet = topN;\n    for(int i=0;i<topN;i++) {\n      if (counts[ids[i]] == 0) {\n        numSet = i;\n        break;\n      }\n    }\n\n    int[] topNIDs = new int[numSet];\n    System.arraycopy(ids, 0, topNIDs, 0, topNIDs.length);\n    return topNIDs;\n  }\n\n","sourceOld":"  private int[] getTopNOrds(final int[] counts, final String[] values, int topN) {\n    final int[] ids = new int[counts.length];\n    for(int i=0;i<ids.length;i++) {\n      ids[i] = i;\n    }\n\n    // Naive (on purpose, to reduce bug in tester/gold):\n    // sort all ids, then return top N slice:\n    new InPlaceMergeSorter() {\n\n      @Override\n      protected void swap(int i, int j) {\n        int id = ids[i];\n        ids[i] = ids[j];\n        ids[j] = id;\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        int counti = counts[ids[i]];\n        int countj = counts[ids[j]];\n        // Sort by count descending...\n        if (counti > countj) {\n          return -1;\n        } else if (counti < countj) {\n          return 1;\n        } else {\n          // ... then by label ascending:\n          return new BytesRef(values[ids[i]]).compareTo(new BytesRef(values[ids[j]]));\n        }\n      }\n\n    }.sort(0, ids.length);\n\n    if (topN > ids.length) {\n      topN = ids.length;\n    }\n\n    int numSet = topN;\n    for(int i=0;i<topN;i++) {\n      if (counts[ids[i]] == 0) {\n        numSet = i;\n        break;\n      }\n    }\n\n    int[] topNIDs = new int[numSet];\n    System.arraycopy(ids, 0, topNIDs, 0, topNIDs.length);\n    return topNIDs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["fb8457dd0880f5547d70dbf40ea4f1c5e7787798"],"ce7aff7772c162c15d520e31af46c555f60d5c3b":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f","ce7aff7772c162c15d520e31af46c555f60d5c3b"],"fb8457dd0880f5547d70dbf40ea4f1c5e7787798":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb8457dd0880f5547d70dbf40ea4f1c5e7787798"],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["ce7aff7772c162c15d520e31af46c555f60d5c3b","3cc728b07df73b197e6d940d27f9b08b63918f13"],"ce7aff7772c162c15d520e31af46c555f60d5c3b":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fb8457dd0880f5547d70dbf40ea4f1c5e7787798":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}