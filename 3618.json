{"path":"solr/core/src/java/org/apache/solr/core/RequestHandlers#initHandlersFromConfig(SolrConfig,List[PluginInfo]).mjava","commits":[{"id":"2336740b200d02b6a5fb18b70454dd9aa26f5b47","date":1407004842,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestHandlers#initHandlersFromConfig(SolrConfig,List[PluginInfo]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/RequestHandlers#initHandlersFromConfig(SolrConfig).mjava","sourceNew":"  /**\n   * Read solrconfig.xml and register the appropriate handlers\n   * \n   * This function should <b>only</b> be called from the SolrCore constructor.  It is\n   * not intended as a public API.\n   * \n   * While the normal runtime registration contract is that handlers MUST be initialized\n   * before they are registered, this function does not do that exactly.\n   *\n   * This function registers all handlers first and then calls init() for each one.\n   *\n   * This is OK because this function is only called at startup and there is no chance that\n   * a handler could be asked to handle a request before it is initialized.\n   * \n   * The advantage to this approach is that handlers can know what path they are registered\n   * to and what other handlers are available at startup.\n   * \n   * Handlers will be registered and initialized in the order they appear in solrconfig.xml\n   */\n\n  void initHandlersFromConfig(SolrConfig config, List<PluginInfo> implicits){\n    // use link map so we iterate in the same order\n    Map<PluginInfo,SolrRequestHandler> handlers = new LinkedHashMap<>();\n    ArrayList<PluginInfo> infos = new ArrayList<>(implicits);\n    infos.addAll(config.getPluginInfos(SolrRequestHandler.class.getName()));\n    for (PluginInfo info : infos) {\n      try {\n        SolrRequestHandler requestHandler;\n        String startup = info.attributes.get(\"startup\") ;\n        if( startup != null ) {\n          if( \"lazy\".equals(startup) ) {\n            log.info(\"adding lazy requestHandler: \" + info.className);\n            requestHandler = new LazyRequestHandlerWrapper( core, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+startup+\"' for: \"+info.className );\n          }\n        } else {\n          requestHandler = core.createRequestHandler(info.className);\n        }\n        handlers.put(info,requestHandler);\n        SolrRequestHandler old = register(info.name, requestHandler);\n        if(old != null) {\n          log.warn(\"Multiple requestHandler registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault()){\n          old = register(\"\",requestHandler);\n          if(old != null)\n            log.warn(\"Multiple default requestHandler registered\" + \" ignoring: \" + old.getClass().getName()); \n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception ex) {\n          throw new SolrException\n            (ErrorCode.SERVER_ERROR, \"RequestHandler init failure\", ex);\n      }\n    }\n\n    // we've now registered all handlers, time to init them in the same order\n    for (Map.Entry<PluginInfo,SolrRequestHandler> entry : handlers.entrySet()) {\n      PluginInfo info = entry.getKey();\n      SolrRequestHandler requestHandler = entry.getValue();\n      if (requestHandler instanceof PluginInfoInitialized) {\n        ((PluginInfoInitialized) requestHandler).init(info);\n      } else{\n        requestHandler.init(info.initArgs);\n      }\n    }\n\n    if(get(\"\") == null) register(\"\", get(\"/select\"));//defacto default handler\n    if(get(\"\") == null) register(\"\", get(\"standard\"));//old default handler name; TODO remove?\n    if(get(\"\") == null)\n      log.warn(\"no default request handler is registered (either '/select' or 'standard')\");\n  }\n\n","sourceOld":"  /**\n   * Read solrconfig.xml and register the appropriate handlers\n   * \n   * This function should <b>only</b> be called from the SolrCore constructor.  It is\n   * not intended as a public API.\n   * \n   * While the normal runtime registration contract is that handlers MUST be initialized\n   * before they are registered, this function does not do that exactly.\n   *\n   * This function registers all handlers first and then calls init() for each one.\n   *\n   * This is OK because this function is only called at startup and there is no chance that\n   * a handler could be asked to handle a request before it is initialized.\n   * \n   * The advantage to this approach is that handlers can know what path they are registered\n   * to and what other handlers are available at startup.\n   * \n   * Handlers will be registered and initialized in the order they appear in solrconfig.xml\n   */\n\n  void initHandlersFromConfig(SolrConfig config ){\n    // use link map so we iterate in the same order\n    Map<PluginInfo,SolrRequestHandler> handlers = new LinkedHashMap<>();\n    for (PluginInfo info : config.getPluginInfos(SolrRequestHandler.class.getName())) {\n      try {\n        SolrRequestHandler requestHandler;\n        String startup = info.attributes.get(\"startup\") ;\n        if( startup != null ) {\n          if( \"lazy\".equals(startup) ) {\n            log.info(\"adding lazy requestHandler: \" + info.className);\n            requestHandler = new LazyRequestHandlerWrapper( core, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+startup+\"' for: \"+info.className );\n          }\n        } else {\n          requestHandler = core.createRequestHandler(info.className);\n        }\n        handlers.put(info,requestHandler);\n        SolrRequestHandler old = register(info.name, requestHandler);\n        if(old != null) {\n          log.warn(\"Multiple requestHandler registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault()){\n          old = register(\"\",requestHandler);\n          if(old != null)\n            log.warn(\"Multiple default requestHandler registered\" + \" ignoring: \" + old.getClass().getName()); \n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception ex) {\n          throw new SolrException\n            (ErrorCode.SERVER_ERROR, \"RequestHandler init failure\", ex);\n      }\n    }\n\n    // we've now registered all handlers, time to init them in the same order\n    for (Map.Entry<PluginInfo,SolrRequestHandler> entry : handlers.entrySet()) {\n      PluginInfo info = entry.getKey();\n      SolrRequestHandler requestHandler = entry.getValue();\n      if (requestHandler instanceof PluginInfoInitialized) {\n        ((PluginInfoInitialized) requestHandler).init(info);\n      } else{\n        requestHandler.init(info.initArgs);\n      }\n    }\n\n    if(get(\"\") == null) register(\"\", get(\"/select\"));//defacto default handler\n    if(get(\"\") == null) register(\"\", get(\"standard\"));//old default handler name; TODO remove?\n    if(get(\"\") == null)\n      log.warn(\"no default request handler is registered (either '/select' or 'standard')\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f7392e322590b1c5c54beda8e0dc4dac5a0dc70","date":1409367206,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestHandlers#initHandlersFromConfig(SolrConfig,List[PluginInfo]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/RequestHandlers#initHandlersFromConfig(SolrConfig,List[PluginInfo]).mjava","sourceNew":"  /**\n   * Read solrconfig.xml and register the appropriate handlers\n   * \n   * This function should <b>only</b> be called from the SolrCore constructor.  It is\n   * not intended as a public API.\n   * \n   * While the normal runtime registration contract is that handlers MUST be initialized\n   * before they are registered, this function does not do that exactly.\n   *\n   * This function registers all handlers first and then calls init() for each one.\n   *\n   * This is OK because this function is only called at startup and there is no chance that\n   * a handler could be asked to handle a request before it is initialized.\n   * \n   * The advantage to this approach is that handlers can know what path they are registered\n   * to and what other handlers are available at startup.\n   * \n   * Handlers will be registered and initialized in the order they appear in solrconfig.xml\n   */\n\n  void initHandlersFromConfig(SolrConfig config, List<PluginInfo> implicits){\n    // use link map so we iterate in the same order\n    Map<PluginInfo,SolrRequestHandler> handlers = new LinkedHashMap<>();\n    ArrayList<PluginInfo> infos = new ArrayList<>(implicits);\n    infos.addAll(config.getPluginInfos(SolrRequestHandler.class.getName()));\n    for (PluginInfo info : infos) {\n      try {\n        SolrRequestHandler requestHandler;\n        String startup = info.attributes.get(\"startup\") ;\n        if( startup != null ) {\n          if( \"lazy\".equals(startup) ) {\n            log.info(\"adding lazy requestHandler: \" + info.className);\n            requestHandler = new LazyRequestHandlerWrapper( core, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+startup+\"' for: \"+info.className );\n          }\n        } else {\n          requestHandler = core.createRequestHandler(info.className);\n        }\n        handlers.put(info,requestHandler);\n        SolrRequestHandler old = register(info.name, requestHandler);\n        if(old != null) {\n          log.warn(\"Multiple requestHandler registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault()){\n          old = register(\"\",requestHandler);\n          if(old != null)\n            log.warn(\"Multiple default requestHandler registered\" + \" ignoring: \" + old.getClass().getName()); \n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception ex) {\n          throw new SolrException\n            (ErrorCode.SERVER_ERROR, \"RequestHandler init failure\", ex);\n      }\n    }\n\n    // we've now registered all handlers, time to init them in the same order\n    for (Map.Entry<PluginInfo,SolrRequestHandler> entry : handlers.entrySet()) {\n      PluginInfo info = entry.getKey();\n      SolrRequestHandler requestHandler = entry.getValue();\n      info = applyParamSet(config, info);\n      if (requestHandler instanceof PluginInfoInitialized) {\n       ((PluginInfoInitialized) requestHandler).init(info);\n      } else{\n        requestHandler.init(info.initArgs);\n      }\n    }\n\n    if(get(\"\") == null) register(\"\", get(\"/select\"));//defacto default handler\n    if(get(\"\") == null) register(\"\", get(\"standard\"));//old default handler name; TODO remove?\n    if(get(\"\") == null)\n      log.warn(\"no default request handler is registered (either '/select' or 'standard')\");\n  }\n\n","sourceOld":"  /**\n   * Read solrconfig.xml and register the appropriate handlers\n   * \n   * This function should <b>only</b> be called from the SolrCore constructor.  It is\n   * not intended as a public API.\n   * \n   * While the normal runtime registration contract is that handlers MUST be initialized\n   * before they are registered, this function does not do that exactly.\n   *\n   * This function registers all handlers first and then calls init() for each one.\n   *\n   * This is OK because this function is only called at startup and there is no chance that\n   * a handler could be asked to handle a request before it is initialized.\n   * \n   * The advantage to this approach is that handlers can know what path they are registered\n   * to and what other handlers are available at startup.\n   * \n   * Handlers will be registered and initialized in the order they appear in solrconfig.xml\n   */\n\n  void initHandlersFromConfig(SolrConfig config, List<PluginInfo> implicits){\n    // use link map so we iterate in the same order\n    Map<PluginInfo,SolrRequestHandler> handlers = new LinkedHashMap<>();\n    ArrayList<PluginInfo> infos = new ArrayList<>(implicits);\n    infos.addAll(config.getPluginInfos(SolrRequestHandler.class.getName()));\n    for (PluginInfo info : infos) {\n      try {\n        SolrRequestHandler requestHandler;\n        String startup = info.attributes.get(\"startup\") ;\n        if( startup != null ) {\n          if( \"lazy\".equals(startup) ) {\n            log.info(\"adding lazy requestHandler: \" + info.className);\n            requestHandler = new LazyRequestHandlerWrapper( core, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+startup+\"' for: \"+info.className );\n          }\n        } else {\n          requestHandler = core.createRequestHandler(info.className);\n        }\n        handlers.put(info,requestHandler);\n        SolrRequestHandler old = register(info.name, requestHandler);\n        if(old != null) {\n          log.warn(\"Multiple requestHandler registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault()){\n          old = register(\"\",requestHandler);\n          if(old != null)\n            log.warn(\"Multiple default requestHandler registered\" + \" ignoring: \" + old.getClass().getName()); \n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception ex) {\n          throw new SolrException\n            (ErrorCode.SERVER_ERROR, \"RequestHandler init failure\", ex);\n      }\n    }\n\n    // we've now registered all handlers, time to init them in the same order\n    for (Map.Entry<PluginInfo,SolrRequestHandler> entry : handlers.entrySet()) {\n      PluginInfo info = entry.getKey();\n      SolrRequestHandler requestHandler = entry.getValue();\n      if (requestHandler instanceof PluginInfoInitialized) {\n        ((PluginInfoInitialized) requestHandler).init(info);\n      } else{\n        requestHandler.init(info.initArgs);\n      }\n    }\n\n    if(get(\"\") == null) register(\"\", get(\"/select\"));//defacto default handler\n    if(get(\"\") == null) register(\"\", get(\"standard\"));//old default handler name; TODO remove?\n    if(get(\"\") == null)\n      log.warn(\"no default request handler is registered (either '/select' or 'standard')\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0b463b2750e9aca574e46d932564b95190237cd","date":1410401293,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestHandlers#initHandlersFromConfig(SolrConfig,List[PluginInfo]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/RequestHandlers#initHandlersFromConfig(SolrConfig,List[PluginInfo]).mjava","sourceNew":"  /**\n   * Read solrconfig.xml and register the appropriate handlers\n   * \n   * This function should <b>only</b> be called from the SolrCore constructor.  It is\n   * not intended as a public API.\n   * \n   * While the normal runtime registration contract is that handlers MUST be initialized\n   * before they are registered, this function does not do that exactly.\n   *\n   * This function registers all handlers first and then calls init() for each one.\n   *\n   * This is OK because this function is only called at startup and there is no chance that\n   * a handler could be asked to handle a request before it is initialized.\n   * \n   * The advantage to this approach is that handlers can know what path they are registered\n   * to and what other handlers are available at startup.\n   * \n   * Handlers will be registered and initialized in the order they appear in solrconfig.xml\n   */\n\n  void initHandlersFromConfig(SolrConfig config, List<PluginInfo> implicits){\n    // use link map so we iterate in the same order\n    Map<PluginInfo,SolrRequestHandler> handlers = new LinkedHashMap<>();\n    Map<String, PluginInfo> implicitInfoMap= new HashMap<>();\n    //deduping implicit and explicit requesthandlers\n    for (PluginInfo info : implicits) implicitInfoMap.put(info.name,info);\n    for (PluginInfo info : config.getPluginInfos(SolrRequestHandler.class.getName()))\n      if(implicitInfoMap.containsKey(info.name)) implicitInfoMap.remove(info.name);\n    ArrayList<PluginInfo> infos = new ArrayList<>(implicitInfoMap.values());\n    infos.addAll(config.getPluginInfos(SolrRequestHandler.class.getName()));\n    for (PluginInfo info : infos) {\n      try {\n        SolrRequestHandler requestHandler;\n        String startup = info.attributes.get(\"startup\") ;\n        if( startup != null ) {\n          if( \"lazy\".equals(startup) ) {\n            log.info(\"adding lazy requestHandler: \" + info.className);\n            requestHandler = new LazyRequestHandlerWrapper( core, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+startup+\"' for: \"+info.className );\n          }\n        } else {\n          requestHandler = core.createRequestHandler(info.className);\n        }\n        handlers.put(info,requestHandler);\n        SolrRequestHandler old = register(info.name, requestHandler);\n        if(old != null) {\n          log.warn(\"Multiple requestHandler registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault()){\n          old = register(\"\",requestHandler);\n          if(old != null)\n            log.warn(\"Multiple default requestHandler registered\" + \" ignoring: \" + old.getClass().getName()); \n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception ex) {\n          throw new SolrException\n            (ErrorCode.SERVER_ERROR, \"RequestHandler init failure\", ex);\n      }\n    }\n\n    // we've now registered all handlers, time to init them in the same order\n    for (Map.Entry<PluginInfo,SolrRequestHandler> entry : handlers.entrySet()) {\n      PluginInfo info = entry.getKey();\n      SolrRequestHandler requestHandler = entry.getValue();\n      info = applyParamSet(config, info);\n      if (requestHandler instanceof PluginInfoInitialized) {\n       ((PluginInfoInitialized) requestHandler).init(info);\n      } else{\n        requestHandler.init(info.initArgs);\n      }\n    }\n\n    if(get(\"\") == null) register(\"\", get(\"/select\"));//defacto default handler\n    if(get(\"\") == null) register(\"\", get(\"standard\"));//old default handler name; TODO remove?\n    if(get(\"\") == null)\n      log.warn(\"no default request handler is registered (either '/select' or 'standard')\");\n  }\n\n","sourceOld":"  /**\n   * Read solrconfig.xml and register the appropriate handlers\n   * \n   * This function should <b>only</b> be called from the SolrCore constructor.  It is\n   * not intended as a public API.\n   * \n   * While the normal runtime registration contract is that handlers MUST be initialized\n   * before they are registered, this function does not do that exactly.\n   *\n   * This function registers all handlers first and then calls init() for each one.\n   *\n   * This is OK because this function is only called at startup and there is no chance that\n   * a handler could be asked to handle a request before it is initialized.\n   * \n   * The advantage to this approach is that handlers can know what path they are registered\n   * to and what other handlers are available at startup.\n   * \n   * Handlers will be registered and initialized in the order they appear in solrconfig.xml\n   */\n\n  void initHandlersFromConfig(SolrConfig config, List<PluginInfo> implicits){\n    // use link map so we iterate in the same order\n    Map<PluginInfo,SolrRequestHandler> handlers = new LinkedHashMap<>();\n    ArrayList<PluginInfo> infos = new ArrayList<>(implicits);\n    infos.addAll(config.getPluginInfos(SolrRequestHandler.class.getName()));\n    for (PluginInfo info : infos) {\n      try {\n        SolrRequestHandler requestHandler;\n        String startup = info.attributes.get(\"startup\") ;\n        if( startup != null ) {\n          if( \"lazy\".equals(startup) ) {\n            log.info(\"adding lazy requestHandler: \" + info.className);\n            requestHandler = new LazyRequestHandlerWrapper( core, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+startup+\"' for: \"+info.className );\n          }\n        } else {\n          requestHandler = core.createRequestHandler(info.className);\n        }\n        handlers.put(info,requestHandler);\n        SolrRequestHandler old = register(info.name, requestHandler);\n        if(old != null) {\n          log.warn(\"Multiple requestHandler registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault()){\n          old = register(\"\",requestHandler);\n          if(old != null)\n            log.warn(\"Multiple default requestHandler registered\" + \" ignoring: \" + old.getClass().getName()); \n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception ex) {\n          throw new SolrException\n            (ErrorCode.SERVER_ERROR, \"RequestHandler init failure\", ex);\n      }\n    }\n\n    // we've now registered all handlers, time to init them in the same order\n    for (Map.Entry<PluginInfo,SolrRequestHandler> entry : handlers.entrySet()) {\n      PluginInfo info = entry.getKey();\n      SolrRequestHandler requestHandler = entry.getValue();\n      info = applyParamSet(config, info);\n      if (requestHandler instanceof PluginInfoInitialized) {\n       ((PluginInfoInitialized) requestHandler).init(info);\n      } else{\n        requestHandler.init(info.initArgs);\n      }\n    }\n\n    if(get(\"\") == null) register(\"\", get(\"/select\"));//defacto default handler\n    if(get(\"\") == null) register(\"\", get(\"standard\"));//old default handler name; TODO remove?\n    if(get(\"\") == null)\n      log.warn(\"no default request handler is registered (either '/select' or 'standard')\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8f9fd570bc31c72df35ff9374f45131e8e74d0c","date":1415015820,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestHandlers#initHandlersFromConfig(SolrConfig,List[PluginInfo]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/RequestHandlers#initHandlersFromConfig(SolrConfig,List[PluginInfo]).mjava","sourceNew":"  /**\n   * Read solrconfig.xml and register the appropriate handlers\n   * \n   * This function should <b>only</b> be called from the SolrCore constructor.  It is\n   * not intended as a public API.\n   * \n   * While the normal runtime registration contract is that handlers MUST be initialized\n   * before they are registered, this function does not do that exactly.\n   *\n   * This function registers all handlers first and then calls init() for each one.\n   *\n   * This is OK because this function is only called at startup and there is no chance that\n   * a handler could be asked to handle a request before it is initialized.\n   * \n   * The advantage to this approach is that handlers can know what path they are registered\n   * to and what other handlers are available at startup.\n   * \n   * Handlers will be registered and initialized in the order they appear in solrconfig.xml\n   */\n\n  void initHandlersFromConfig(SolrConfig config, List<PluginInfo> implicits){\n    // use link map so we iterate in the same order\n    Map<PluginInfo,SolrRequestHandler> handlers = new LinkedHashMap<>();\n    Map<String, PluginInfo> implicitInfoMap= new HashMap<>();\n    //deduping implicit and explicit requesthandlers\n    for (PluginInfo info : implicits) implicitInfoMap.put(info.name,info);\n    for (PluginInfo info : config.getPluginInfos(SolrRequestHandler.class.getName()))\n      if(implicitInfoMap.containsKey(info.name)) implicitInfoMap.remove(info.name);\n    ArrayList<PluginInfo> infos = new ArrayList<>(implicitInfoMap.values());\n    infos.addAll(config.getPluginInfos(SolrRequestHandler.class.getName()));\n    for (PluginInfo info : infos) {\n      try {\n        SolrRequestHandler requestHandler;\n        String startup = info.attributes.get(\"startup\") ;\n        if( startup != null ) {\n          if( \"lazy\".equals(startup) ) {\n            log.info(\"adding lazy requestHandler: \" + info.className);\n            requestHandler = new LazyRequestHandlerWrapper( core, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+startup+\"' for: \"+info.className );\n          }\n        } else {\n          requestHandler = core.createRequestHandler(info.className);\n        }\n        handlers.put(info,requestHandler);\n        SolrRequestHandler old = register(info.name, requestHandler);\n        if(old != null) {\n          log.warn(\"Multiple requestHandler registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault()){\n          old = register(\"\",requestHandler);\n          if(old != null)\n            log.warn(\"Multiple default requestHandler registered\" + \" ignoring: \" + old.getClass().getName()); \n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception ex) {\n          throw new SolrException\n            (ErrorCode.SERVER_ERROR, \"RequestHandler init failure\", ex);\n      }\n    }\n\n    // we've now registered all handlers, time to init them in the same order\n    for (Map.Entry<PluginInfo,SolrRequestHandler> entry : handlers.entrySet()) {\n      PluginInfo info = entry.getKey();\n      SolrRequestHandler requestHandler = entry.getValue();\n      info = applyInitParams(config, info);\n      if (requestHandler instanceof PluginInfoInitialized) {\n       ((PluginInfoInitialized) requestHandler).init(info);\n      } else{\n        requestHandler.init(info.initArgs);\n      }\n    }\n\n    if(get(\"\") == null) register(\"\", get(\"/select\"));//defacto default handler\n    if(get(\"\") == null) register(\"\", get(\"standard\"));//old default handler name; TODO remove?\n    if(get(\"\") == null)\n      log.warn(\"no default request handler is registered (either '/select' or 'standard')\");\n  }\n\n","sourceOld":"  /**\n   * Read solrconfig.xml and register the appropriate handlers\n   * \n   * This function should <b>only</b> be called from the SolrCore constructor.  It is\n   * not intended as a public API.\n   * \n   * While the normal runtime registration contract is that handlers MUST be initialized\n   * before they are registered, this function does not do that exactly.\n   *\n   * This function registers all handlers first and then calls init() for each one.\n   *\n   * This is OK because this function is only called at startup and there is no chance that\n   * a handler could be asked to handle a request before it is initialized.\n   * \n   * The advantage to this approach is that handlers can know what path they are registered\n   * to and what other handlers are available at startup.\n   * \n   * Handlers will be registered and initialized in the order they appear in solrconfig.xml\n   */\n\n  void initHandlersFromConfig(SolrConfig config, List<PluginInfo> implicits){\n    // use link map so we iterate in the same order\n    Map<PluginInfo,SolrRequestHandler> handlers = new LinkedHashMap<>();\n    Map<String, PluginInfo> implicitInfoMap= new HashMap<>();\n    //deduping implicit and explicit requesthandlers\n    for (PluginInfo info : implicits) implicitInfoMap.put(info.name,info);\n    for (PluginInfo info : config.getPluginInfos(SolrRequestHandler.class.getName()))\n      if(implicitInfoMap.containsKey(info.name)) implicitInfoMap.remove(info.name);\n    ArrayList<PluginInfo> infos = new ArrayList<>(implicitInfoMap.values());\n    infos.addAll(config.getPluginInfos(SolrRequestHandler.class.getName()));\n    for (PluginInfo info : infos) {\n      try {\n        SolrRequestHandler requestHandler;\n        String startup = info.attributes.get(\"startup\") ;\n        if( startup != null ) {\n          if( \"lazy\".equals(startup) ) {\n            log.info(\"adding lazy requestHandler: \" + info.className);\n            requestHandler = new LazyRequestHandlerWrapper( core, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+startup+\"' for: \"+info.className );\n          }\n        } else {\n          requestHandler = core.createRequestHandler(info.className);\n        }\n        handlers.put(info,requestHandler);\n        SolrRequestHandler old = register(info.name, requestHandler);\n        if(old != null) {\n          log.warn(\"Multiple requestHandler registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault()){\n          old = register(\"\",requestHandler);\n          if(old != null)\n            log.warn(\"Multiple default requestHandler registered\" + \" ignoring: \" + old.getClass().getName()); \n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception ex) {\n          throw new SolrException\n            (ErrorCode.SERVER_ERROR, \"RequestHandler init failure\", ex);\n      }\n    }\n\n    // we've now registered all handlers, time to init them in the same order\n    for (Map.Entry<PluginInfo,SolrRequestHandler> entry : handlers.entrySet()) {\n      PluginInfo info = entry.getKey();\n      SolrRequestHandler requestHandler = entry.getValue();\n      info = applyParamSet(config, info);\n      if (requestHandler instanceof PluginInfoInitialized) {\n       ((PluginInfoInitialized) requestHandler).init(info);\n      } else{\n        requestHandler.init(info.initArgs);\n      }\n    }\n\n    if(get(\"\") == null) register(\"\", get(\"/select\"));//defacto default handler\n    if(get(\"\") == null) register(\"\", get(\"standard\"));//old default handler name; TODO remove?\n    if(get(\"\") == null)\n      log.warn(\"no default request handler is registered (either '/select' or 'standard')\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e56881a4ebc3438313e3c008a7124ba0f8ecc7bf","date":1416997673,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RequestHandlers#initHandlersFromConfig(SolrConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/RequestHandlers#initHandlersFromConfig(SolrConfig,List[PluginInfo]).mjava","sourceNew":"  /**\n   * Read solrconfig.xml and register the appropriate handlers\n   * \n   * This function should <b>only</b> be called from the SolrCore constructor.  It is\n   * not intended as a public API.\n   * \n   * While the normal runtime registration contract is that handlers MUST be initialized\n   * before they are registered, this function does not do that exactly.\n   *\n   * This function registers all handlers first and then calls init() for each one.\n   *\n   * This is OK because this function is only called at startup and there is no chance that\n   * a handler could be asked to handle a request before it is initialized.\n   * \n   * The advantage to this approach is that handlers can know what path they are registered\n   * to and what other handlers are available at startup.\n   * \n   * Handlers will be registered and initialized in the order they appear in solrconfig.xml\n   */\n\n  void initHandlersFromConfig(SolrConfig config){\n    List<PluginInfo> implicits = PluginsRegistry.getHandlers(core);\n    // use link map so we iterate in the same order\n    Map<PluginInfo,SolrRequestHandler> handlers = new LinkedHashMap<>();\n    Map<String, PluginInfo> implicitInfoMap= new HashMap<>();\n    //deduping implicit and explicit requesthandlers\n    for (PluginInfo info : implicits) implicitInfoMap.put(info.name,info);\n    for (PluginInfo info : config.getPluginInfos(SolrRequestHandler.class.getName()))\n      if(implicitInfoMap.containsKey(info.name)) implicitInfoMap.remove(info.name);\n    ArrayList<PluginInfo> infos = new ArrayList<>(implicitInfoMap.values());\n    infos.addAll(config.getPluginInfos(SolrRequestHandler.class.getName()));\n    for (PluginInfo info : infos) {\n      try {\n        SolrRequestHandler requestHandler;\n        String startup = info.attributes.get(\"startup\") ;\n        if( startup != null ) {\n          if( \"lazy\".equals(startup) ) {\n            log.info(\"adding lazy requestHandler: \" + info.className);\n            requestHandler = new LazyRequestHandlerWrapper( core, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+startup+\"' for: \"+info.className );\n          }\n        } else {\n          requestHandler = core.createRequestHandler(info.className);\n        }\n        handlers.put(info,requestHandler);\n        SolrRequestHandler old = register(info.name, requestHandler);\n        if(old != null) {\n          log.warn(\"Multiple requestHandler registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault()){\n          old = register(\"\",requestHandler);\n          if(old != null)\n            log.warn(\"Multiple default requestHandler registered\" + \" ignoring: \" + old.getClass().getName()); \n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception ex) {\n          throw new SolrException\n            (ErrorCode.SERVER_ERROR, \"RequestHandler init failure\", ex);\n      }\n    }\n\n    // we've now registered all handlers, time to init them in the same order\n    for (Map.Entry<PluginInfo,SolrRequestHandler> entry : handlers.entrySet()) {\n      PluginInfo info = entry.getKey();\n      SolrRequestHandler requestHandler = entry.getValue();\n      info = applyInitParams(config, info);\n      if (requestHandler instanceof PluginInfoInitialized) {\n       ((PluginInfoInitialized) requestHandler).init(info);\n      } else{\n        requestHandler.init(info.initArgs);\n      }\n    }\n\n    if(get(\"\") == null) register(\"\", get(\"/select\"));//defacto default handler\n    if(get(\"\") == null) register(\"\", get(\"standard\"));//old default handler name; TODO remove?\n    if(get(\"\") == null)\n      log.warn(\"no default request handler is registered (either '/select' or 'standard')\");\n  }\n\n","sourceOld":"  /**\n   * Read solrconfig.xml and register the appropriate handlers\n   * \n   * This function should <b>only</b> be called from the SolrCore constructor.  It is\n   * not intended as a public API.\n   * \n   * While the normal runtime registration contract is that handlers MUST be initialized\n   * before they are registered, this function does not do that exactly.\n   *\n   * This function registers all handlers first and then calls init() for each one.\n   *\n   * This is OK because this function is only called at startup and there is no chance that\n   * a handler could be asked to handle a request before it is initialized.\n   * \n   * The advantage to this approach is that handlers can know what path they are registered\n   * to and what other handlers are available at startup.\n   * \n   * Handlers will be registered and initialized in the order they appear in solrconfig.xml\n   */\n\n  void initHandlersFromConfig(SolrConfig config, List<PluginInfo> implicits){\n    // use link map so we iterate in the same order\n    Map<PluginInfo,SolrRequestHandler> handlers = new LinkedHashMap<>();\n    Map<String, PluginInfo> implicitInfoMap= new HashMap<>();\n    //deduping implicit and explicit requesthandlers\n    for (PluginInfo info : implicits) implicitInfoMap.put(info.name,info);\n    for (PluginInfo info : config.getPluginInfos(SolrRequestHandler.class.getName()))\n      if(implicitInfoMap.containsKey(info.name)) implicitInfoMap.remove(info.name);\n    ArrayList<PluginInfo> infos = new ArrayList<>(implicitInfoMap.values());\n    infos.addAll(config.getPluginInfos(SolrRequestHandler.class.getName()));\n    for (PluginInfo info : infos) {\n      try {\n        SolrRequestHandler requestHandler;\n        String startup = info.attributes.get(\"startup\") ;\n        if( startup != null ) {\n          if( \"lazy\".equals(startup) ) {\n            log.info(\"adding lazy requestHandler: \" + info.className);\n            requestHandler = new LazyRequestHandlerWrapper( core, info.className, info.initArgs );\n          } else {\n            throw new Exception( \"Unknown startup value: '\"+startup+\"' for: \"+info.className );\n          }\n        } else {\n          requestHandler = core.createRequestHandler(info.className);\n        }\n        handlers.put(info,requestHandler);\n        SolrRequestHandler old = register(info.name, requestHandler);\n        if(old != null) {\n          log.warn(\"Multiple requestHandler registered to the same name: \" + info.name + \" ignoring: \" + old.getClass().getName());\n        }\n        if(info.isDefault()){\n          old = register(\"\",requestHandler);\n          if(old != null)\n            log.warn(\"Multiple default requestHandler registered\" + \" ignoring: \" + old.getClass().getName()); \n        }\n        log.info(\"created \"+info.name+\": \" + info.className);\n      } catch (Exception ex) {\n          throw new SolrException\n            (ErrorCode.SERVER_ERROR, \"RequestHandler init failure\", ex);\n      }\n    }\n\n    // we've now registered all handlers, time to init them in the same order\n    for (Map.Entry<PluginInfo,SolrRequestHandler> entry : handlers.entrySet()) {\n      PluginInfo info = entry.getKey();\n      SolrRequestHandler requestHandler = entry.getValue();\n      info = applyInitParams(config, info);\n      if (requestHandler instanceof PluginInfoInitialized) {\n       ((PluginInfoInitialized) requestHandler).init(info);\n      } else{\n        requestHandler.init(info.initArgs);\n      }\n    }\n\n    if(get(\"\") == null) register(\"\", get(\"/select\"));//defacto default handler\n    if(get(\"\") == null) register(\"\", get(\"standard\"));//old default handler name; TODO remove?\n    if(get(\"\") == null)\n      log.warn(\"no default request handler is registered (either '/select' or 'standard')\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2336740b200d02b6a5fb18b70454dd9aa26f5b47":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e56881a4ebc3438313e3c008a7124ba0f8ecc7bf":["c8f9fd570bc31c72df35ff9374f45131e8e74d0c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c0b463b2750e9aca574e46d932564b95190237cd":["0f7392e322590b1c5c54beda8e0dc4dac5a0dc70"],"c8f9fd570bc31c72df35ff9374f45131e8e74d0c":["c0b463b2750e9aca574e46d932564b95190237cd"],"0f7392e322590b1c5c54beda8e0dc4dac5a0dc70":["2336740b200d02b6a5fb18b70454dd9aa26f5b47"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e56881a4ebc3438313e3c008a7124ba0f8ecc7bf"]},"commit2Childs":{"2336740b200d02b6a5fb18b70454dd9aa26f5b47":["0f7392e322590b1c5c54beda8e0dc4dac5a0dc70"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2336740b200d02b6a5fb18b70454dd9aa26f5b47"],"e56881a4ebc3438313e3c008a7124ba0f8ecc7bf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c0b463b2750e9aca574e46d932564b95190237cd":["c8f9fd570bc31c72df35ff9374f45131e8e74d0c"],"c8f9fd570bc31c72df35ff9374f45131e8e74d0c":["e56881a4ebc3438313e3c008a7124ba0f8ecc7bf"],"0f7392e322590b1c5c54beda8e0dc4dac5a0dc70":["c0b463b2750e9aca574e46d932564b95190237cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}