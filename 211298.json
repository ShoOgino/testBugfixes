{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#addNormsField(FieldInfo,Iterable[Number]).mjava","commits":[{"id":"bc8f80fee115148a0e4a0574560be06b494de821","date":1412069872,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#addNormsField(FieldInfo,Iterable[Number]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void addNormsField(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeVInt(field.number);\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    // TODO: more efficient?\n    NormMap uniqueValues = new NormMap();\n    \n    int count = 0;\n    int missingCount = 0;\n    \n    for (Number nv : values) {\n      if (nv == null) {\n        throw new IllegalStateException(\"illegal norms data for field \" + field.name + \", got null for value: \" + count);\n      }\n      final long v = nv.longValue();\n      if (v == 0) {\n        missingCount++;\n      }\n      \n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n      \n      if (uniqueValues != null) {\n        if (uniqueValues.add(v)) {\n          if (uniqueValues.size > 256) {\n            uniqueValues = null;\n          }\n        }\n      }\n      count++;\n    }\n    if (uniqueValues != null && uniqueValues.size == 1) {\n      // 0 bpv\n      addConstant(minValue);\n    } else if (count > 256 && missingCount > count * INDIRECT_THRESHOLD) {\n      // sparse encoding\n      addIndirect(field, values, count, missingCount);\n    } else if (uniqueValues != null) {\n      // small number of unique values: this is the typical case:\n      FormatAndBits compression = fastestFormatAndBits(uniqueValues.size-1);\n      \n      if (compression.bitsPerValue == 8 && minValue >= Byte.MIN_VALUE && maxValue <= Byte.MAX_VALUE) {\n        addUncompressed(values, count);\n      } else {\n        addTableCompressed(values, compression, count, uniqueValues);\n      }\n    } else {\n      addDeltaCompressed(values, count);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#addNormsField(FieldInfo,Iterable[Number]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void addNormsField(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeVInt(field.number);\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    // TODO: more efficient?\n    NormMap uniqueValues = new NormMap();\n    \n    int count = 0;\n    int missingCount = 0;\n    \n    for (Number nv : values) {\n      if (nv == null) {\n        throw new IllegalStateException(\"illegal norms data for field \" + field.name + \", got null for value: \" + count);\n      }\n      final long v = nv.longValue();\n      if (v == 0) {\n        missingCount++;\n      }\n      \n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n      \n      if (uniqueValues != null) {\n        if (uniqueValues.add(v)) {\n          if (uniqueValues.size > 256) {\n            uniqueValues = null;\n          }\n        }\n      }\n      count++;\n    }\n    if (uniqueValues != null && uniqueValues.size == 1) {\n      // 0 bpv\n      addConstant(minValue);\n    } else if (count > 256 && missingCount > count * INDIRECT_THRESHOLD) {\n      // sparse encoding\n      addIndirect(field, values, count, missingCount);\n    } else if (uniqueValues != null) {\n      // small number of unique values: this is the typical case:\n      FormatAndBits compression = fastestFormatAndBits(uniqueValues.size-1);\n      \n      if (compression.bitsPerValue == 8 && minValue >= Byte.MIN_VALUE && maxValue <= Byte.MAX_VALUE) {\n        addUncompressed(values, count);\n      } else {\n        addTableCompressed(values, compression, count, uniqueValues);\n      }\n    } else {\n      addDeltaCompressed(values, count);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e15c57be968dbcac6fd3f87af0bd26a8f023e069","date":1413564565,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#addNormsField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#addNormsField(FieldInfo,Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addNormsField(FieldInfo field, Iterable<Number> values) throws IOException {\n    writeNormsField(field, values, 0);\n  }\n\n","sourceOld":"  @Override\n  public void addNormsField(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeVInt(field.number);\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    // TODO: more efficient?\n    NormMap uniqueValues = new NormMap();\n    \n    int count = 0;\n    int missingCount = 0;\n    \n    for (Number nv : values) {\n      if (nv == null) {\n        throw new IllegalStateException(\"illegal norms data for field \" + field.name + \", got null for value: \" + count);\n      }\n      final long v = nv.longValue();\n      if (v == 0) {\n        missingCount++;\n      }\n      \n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n      \n      if (uniqueValues != null) {\n        if (uniqueValues.add(v)) {\n          if (uniqueValues.size > 256) {\n            uniqueValues = null;\n          }\n        }\n      }\n      count++;\n    }\n    if (uniqueValues != null && uniqueValues.size == 1) {\n      // 0 bpv\n      addConstant(minValue);\n    } else if (count > 256 && missingCount > count * INDIRECT_THRESHOLD) {\n      // sparse encoding\n      addIndirect(field, values, count, missingCount);\n    } else if (uniqueValues != null) {\n      // small number of unique values: this is the typical case:\n      FormatAndBits compression = fastestFormatAndBits(uniqueValues.size-1);\n      \n      if (compression.bitsPerValue == 8 && minValue >= Byte.MIN_VALUE && maxValue <= Byte.MAX_VALUE) {\n        addUncompressed(values, count);\n      } else {\n        addTableCompressed(values, compression, count, uniqueValues);\n      }\n    } else {\n      addDeltaCompressed(values, count);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#addNormsField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#addNormsField(FieldInfo,Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addNormsField(FieldInfo field, Iterable<Number> values) throws IOException {\n    writeNormsField(field, values, 0);\n  }\n\n","sourceOld":"  @Override\n  public void addNormsField(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeVInt(field.number);\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    // TODO: more efficient?\n    NormMap uniqueValues = new NormMap();\n    \n    int count = 0;\n    int missingCount = 0;\n    \n    for (Number nv : values) {\n      if (nv == null) {\n        throw new IllegalStateException(\"illegal norms data for field \" + field.name + \", got null for value: \" + count);\n      }\n      final long v = nv.longValue();\n      if (v == 0) {\n        missingCount++;\n      }\n      \n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n      \n      if (uniqueValues != null) {\n        if (uniqueValues.add(v)) {\n          if (uniqueValues.size > 256) {\n            uniqueValues = null;\n          }\n        }\n      }\n      count++;\n    }\n    if (uniqueValues != null && uniqueValues.size == 1) {\n      // 0 bpv\n      addConstant(minValue);\n    } else if (count > 256 && missingCount > count * INDIRECT_THRESHOLD) {\n      // sparse encoding\n      addIndirect(field, values, count, missingCount);\n    } else if (uniqueValues != null) {\n      // small number of unique values: this is the typical case:\n      FormatAndBits compression = fastestFormatAndBits(uniqueValues.size-1);\n      \n      if (compression.bitsPerValue == 8 && minValue >= Byte.MIN_VALUE && maxValue <= Byte.MAX_VALUE) {\n        addUncompressed(values, count);\n      } else {\n        addTableCompressed(values, compression, count, uniqueValues);\n      }\n    } else {\n      addDeltaCompressed(values, count);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9","date":1434069165,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#addNormsField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#addNormsField(FieldInfo,Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addNormsField(FieldInfo field, Iterable<Number> values) throws IOException {\n    writeNormsField(field, values, 0);\n  }\n\n","sourceOld":"  @Override\n  public void addNormsField(FieldInfo field, Iterable<Number> values) throws IOException {\n    writeNormsField(field, values, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"bc8f80fee115148a0e4a0574560be06b494de821":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9bb9a29a5e71a90295f175df8919802993142c9a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bc8f80fee115148a0e4a0574560be06b494de821"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e15c57be968dbcac6fd3f87af0bd26a8f023e069":["bc8f80fee115148a0e4a0574560be06b494de821"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["9bb9a29a5e71a90295f175df8919802993142c9a","e15c57be968dbcac6fd3f87af0bd26a8f023e069"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9"]},"commit2Childs":{"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bc8f80fee115148a0e4a0574560be06b494de821":["9bb9a29a5e71a90295f175df8919802993142c9a","e15c57be968dbcac6fd3f87af0bd26a8f023e069"],"9bb9a29a5e71a90295f175df8919802993142c9a":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bc8f80fee115148a0e4a0574560be06b494de821","9bb9a29a5e71a90295f175df8919802993142c9a"],"e15c57be968dbcac6fd3f87af0bd26a8f023e069":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}