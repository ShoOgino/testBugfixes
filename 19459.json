{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#load(byte[],Set[String]).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#load(byte[],Set[String]).mjava","pathOld":"/dev/null","sourceNew":"\tpublic static CloudState load(byte[] bytes, Set<String> liveNodes) throws KeeperException, InterruptedException {\n    if (bytes == null || bytes.length == 0) {\n      return new CloudState(liveNodes, Collections.<String, Map<String,Slice>>emptyMap());\n    }\n    \n    LinkedHashMap<String, Object> stateMap = (LinkedHashMap<String, Object>) ZkStateReader.fromJSON(bytes);\n    HashMap<String,Map<String, Slice>> state = new HashMap<String,Map<String,Slice>>();\n\n    for(String collectionName: stateMap.keySet()){\n      Map<String, Object> collection = (Map<String, Object>)stateMap.get(collectionName);\n      Map<String, Slice> slices = new LinkedHashMap<String,Slice>();\n      for(String sliceName: collection.keySet()) {\n        Map<String, Map<String, String>> sliceMap = (Map<String, Map<String, String>>)collection.get(sliceName);\n        Map<String, ZkNodeProps> shards = new LinkedHashMap<String,ZkNodeProps>();\n        for(String shardName: sliceMap.keySet()) {\n          shards.put(shardName, new ZkNodeProps(sliceMap.get(shardName)));\n        }\n        Slice slice = new Slice(sliceName, shards);\n        slices.put(sliceName, slice);\n      }\n      state.put(collectionName, slices);\n    }\n    return new CloudState(liveNodes, state);\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#load(byte[],Set[String]).mjava","pathOld":"/dev/null","sourceNew":"\tpublic static CloudState load(byte[] bytes, Set<String> liveNodes) throws KeeperException, InterruptedException {\n    if (bytes == null || bytes.length == 0) {\n      return new CloudState(liveNodes, Collections.<String, Map<String,Slice>>emptyMap());\n    }\n    \n    LinkedHashMap<String, Object> stateMap = (LinkedHashMap<String, Object>) ZkStateReader.fromJSON(bytes);\n    HashMap<String,Map<String, Slice>> state = new HashMap<String,Map<String,Slice>>();\n\n    for(String collectionName: stateMap.keySet()){\n      Map<String, Object> collection = (Map<String, Object>)stateMap.get(collectionName);\n      Map<String, Slice> slices = new LinkedHashMap<String,Slice>();\n      for(String sliceName: collection.keySet()) {\n        Map<String, Map<String, String>> sliceMap = (Map<String, Map<String, String>>)collection.get(sliceName);\n        Map<String, ZkNodeProps> shards = new LinkedHashMap<String,ZkNodeProps>();\n        for(String shardName: sliceMap.keySet()) {\n          shards.put(shardName, new ZkNodeProps(sliceMap.get(shardName)));\n        }\n        Slice slice = new Slice(sliceName, shards);\n        slices.put(sliceName, slice);\n      }\n      state.put(collectionName, slices);\n    }\n    return new CloudState(liveNodes, state);\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#load(byte[],Set[String]).mjava","pathOld":"/dev/null","sourceNew":"\tpublic static CloudState load(byte[] bytes, Set<String> liveNodes) throws KeeperException, InterruptedException {\n    if (bytes == null || bytes.length == 0) {\n      return new CloudState(liveNodes, Collections.<String, Map<String,Slice>>emptyMap());\n    }\n    \n    LinkedHashMap<String, Object> stateMap = (LinkedHashMap<String, Object>) ZkStateReader.fromJSON(bytes);\n    HashMap<String,Map<String, Slice>> state = new HashMap<String,Map<String,Slice>>();\n\n    for(String collectionName: stateMap.keySet()){\n      Map<String, Object> collection = (Map<String, Object>)stateMap.get(collectionName);\n      Map<String, Slice> slices = new LinkedHashMap<String,Slice>();\n      for(String sliceName: collection.keySet()) {\n        Map<String, Map<String, String>> sliceMap = (Map<String, Map<String, String>>)collection.get(sliceName);\n        Map<String, ZkNodeProps> shards = new LinkedHashMap<String,ZkNodeProps>();\n        for(String shardName: sliceMap.keySet()) {\n          shards.put(shardName, new ZkNodeProps(sliceMap.get(shardName)));\n        }\n        Slice slice = new Slice(sliceName, shards);\n        slices.put(sliceName, slice);\n      }\n      state.put(collectionName, slices);\n    }\n    return new CloudState(liveNodes, state);\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81363494a48d3b6215bf1e37c1fe754c3e67f3fe","date":1338972402,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#load(byte[],Set[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#load(byte[],Set[String]).mjava","sourceNew":"\t/**\n\t * Create CloudState from json string that is typically stored in zookeeper.\n\t */\n\tpublic static CloudState load(byte[] bytes, Set<String> liveNodes) throws KeeperException, InterruptedException {\n    if (bytes == null || bytes.length == 0) {\n      return new CloudState(liveNodes, Collections.<String, Map<String,Slice>>emptyMap());\n    }\n    \n    LinkedHashMap<String, Object> stateMap = (LinkedHashMap<String, Object>) ZkStateReader.fromJSON(bytes);\n    HashMap<String,Map<String, Slice>> state = new HashMap<String,Map<String,Slice>>();\n\n    for(String collectionName: stateMap.keySet()){\n      Map<String, Object> collection = (Map<String, Object>)stateMap.get(collectionName);\n      Map<String, Slice> slices = new LinkedHashMap<String,Slice>();\n      for(String sliceName: collection.keySet()) {\n        Map<String, Map<String, String>> sliceMap = (Map<String, Map<String, String>>)collection.get(sliceName);\n        Map<String, ZkNodeProps> shards = new LinkedHashMap<String,ZkNodeProps>();\n        for(String shardName: sliceMap.keySet()) {\n          shards.put(shardName, new ZkNodeProps(sliceMap.get(shardName)));\n        }\n        Slice slice = new Slice(sliceName, shards);\n        slices.put(sliceName, slice);\n      }\n      state.put(collectionName, slices);\n    }\n    return new CloudState(liveNodes, state);\n\t}\n\n","sourceOld":"\tpublic static CloudState load(byte[] bytes, Set<String> liveNodes) throws KeeperException, InterruptedException {\n    if (bytes == null || bytes.length == 0) {\n      return new CloudState(liveNodes, Collections.<String, Map<String,Slice>>emptyMap());\n    }\n    \n    LinkedHashMap<String, Object> stateMap = (LinkedHashMap<String, Object>) ZkStateReader.fromJSON(bytes);\n    HashMap<String,Map<String, Slice>> state = new HashMap<String,Map<String,Slice>>();\n\n    for(String collectionName: stateMap.keySet()){\n      Map<String, Object> collection = (Map<String, Object>)stateMap.get(collectionName);\n      Map<String, Slice> slices = new LinkedHashMap<String,Slice>();\n      for(String sliceName: collection.keySet()) {\n        Map<String, Map<String, String>> sliceMap = (Map<String, Map<String, String>>)collection.get(sliceName);\n        Map<String, ZkNodeProps> shards = new LinkedHashMap<String,ZkNodeProps>();\n        for(String shardName: sliceMap.keySet()) {\n          shards.put(shardName, new ZkNodeProps(sliceMap.get(shardName)));\n        }\n        Slice slice = new Slice(sliceName, shards);\n        slices.put(sliceName, slice);\n      }\n      state.put(collectionName, slices);\n    }\n    return new CloudState(liveNodes, state);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#load(byte[],Set[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#load(byte[],Set[String]).mjava","sourceNew":"\t/**\n\t * Create CloudState from json string that is typically stored in zookeeper.\n\t */\n\tpublic static CloudState load(byte[] bytes, Set<String> liveNodes) {\n    if (bytes == null || bytes.length == 0) {\n      return new CloudState(liveNodes, Collections.<String, Map<String,Slice>>emptyMap());\n    }\n    \n    LinkedHashMap<String, Object> stateMap = (LinkedHashMap<String, Object>) ZkStateReader.fromJSON(bytes);\n    HashMap<String,Map<String, Slice>> state = new HashMap<String,Map<String,Slice>>();\n\n    for(String collectionName: stateMap.keySet()){\n      Map<String, Object> collection = (Map<String, Object>)stateMap.get(collectionName);\n      Map<String, Slice> slices = new LinkedHashMap<String,Slice>();\n      for(String sliceName: collection.keySet()) {\n        Map<String, Map<String, String>> sliceMap = (Map<String, Map<String, String>>)collection.get(sliceName);\n        Map<String, ZkNodeProps> shards = new LinkedHashMap<String,ZkNodeProps>();\n        for(String shardName: sliceMap.keySet()) {\n          shards.put(shardName, new ZkNodeProps(sliceMap.get(shardName)));\n        }\n        Slice slice = new Slice(sliceName, shards);\n        slices.put(sliceName, slice);\n      }\n      state.put(collectionName, slices);\n    }\n    return new CloudState(liveNodes, state);\n\t}\n\n","sourceOld":"\t/**\n\t * Create CloudState from json string that is typically stored in zookeeper.\n\t */\n\tpublic static CloudState load(byte[] bytes, Set<String> liveNodes) throws KeeperException, InterruptedException {\n    if (bytes == null || bytes.length == 0) {\n      return new CloudState(liveNodes, Collections.<String, Map<String,Slice>>emptyMap());\n    }\n    \n    LinkedHashMap<String, Object> stateMap = (LinkedHashMap<String, Object>) ZkStateReader.fromJSON(bytes);\n    HashMap<String,Map<String, Slice>> state = new HashMap<String,Map<String,Slice>>();\n\n    for(String collectionName: stateMap.keySet()){\n      Map<String, Object> collection = (Map<String, Object>)stateMap.get(collectionName);\n      Map<String, Slice> slices = new LinkedHashMap<String,Slice>();\n      for(String sliceName: collection.keySet()) {\n        Map<String, Map<String, String>> sliceMap = (Map<String, Map<String, String>>)collection.get(sliceName);\n        Map<String, ZkNodeProps> shards = new LinkedHashMap<String,ZkNodeProps>();\n        for(String shardName: sliceMap.keySet()) {\n          shards.put(shardName, new ZkNodeProps(sliceMap.get(shardName)));\n        }\n        Slice slice = new Slice(sliceName, shards);\n        slices.put(sliceName, slice);\n      }\n      state.put(collectionName, slices);\n    }\n    return new CloudState(liveNodes, state);\n\t}\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#load(byte[],Set[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#load(byte[],Set[String]).mjava","sourceNew":"\t/**\n\t * Create CloudState from json string that is typically stored in zookeeper.\n\t */\n\tpublic static CloudState load(byte[] bytes, Set<String> liveNodes) {\n    if (bytes == null || bytes.length == 0) {\n      return new CloudState(liveNodes, Collections.<String, Map<String,Slice>>emptyMap());\n    }\n    \n    LinkedHashMap<String, Object> stateMap = (LinkedHashMap<String, Object>) ZkStateReader.fromJSON(bytes);\n    HashMap<String,Map<String, Slice>> state = new HashMap<String,Map<String,Slice>>();\n\n    for(String collectionName: stateMap.keySet()){\n      Map<String, Object> collection = (Map<String, Object>)stateMap.get(collectionName);\n      Map<String, Slice> slices = new LinkedHashMap<String,Slice>();\n      for(String sliceName: collection.keySet()) {\n        Map<String, Map<String, String>> sliceMap = (Map<String, Map<String, String>>)collection.get(sliceName);\n        Map<String, ZkNodeProps> shards = new LinkedHashMap<String,ZkNodeProps>();\n        for(String shardName: sliceMap.keySet()) {\n          shards.put(shardName, new ZkNodeProps(sliceMap.get(shardName)));\n        }\n        Slice slice = new Slice(sliceName, shards);\n        slices.put(sliceName, slice);\n      }\n      state.put(collectionName, slices);\n    }\n    return new CloudState(liveNodes, state);\n\t}\n\n","sourceOld":"\t/**\n\t * Create CloudState from json string that is typically stored in zookeeper.\n\t */\n\tpublic static CloudState load(byte[] bytes, Set<String> liveNodes) throws KeeperException, InterruptedException {\n    if (bytes == null || bytes.length == 0) {\n      return new CloudState(liveNodes, Collections.<String, Map<String,Slice>>emptyMap());\n    }\n    \n    LinkedHashMap<String, Object> stateMap = (LinkedHashMap<String, Object>) ZkStateReader.fromJSON(bytes);\n    HashMap<String,Map<String, Slice>> state = new HashMap<String,Map<String,Slice>>();\n\n    for(String collectionName: stateMap.keySet()){\n      Map<String, Object> collection = (Map<String, Object>)stateMap.get(collectionName);\n      Map<String, Slice> slices = new LinkedHashMap<String,Slice>();\n      for(String sliceName: collection.keySet()) {\n        Map<String, Map<String, String>> sliceMap = (Map<String, Map<String, String>>)collection.get(sliceName);\n        Map<String, ZkNodeProps> shards = new LinkedHashMap<String,ZkNodeProps>();\n        for(String shardName: sliceMap.keySet()) {\n          shards.put(shardName, new ZkNodeProps(sliceMap.get(shardName)));\n        }\n        Slice slice = new Slice(sliceName, shards);\n        slices.put(sliceName, slice);\n      }\n      state.put(collectionName, slices);\n    }\n    return new CloudState(liveNodes, state);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(byte[],Set[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#load(byte[],Set[String]).mjava","sourceNew":"\t/**\n\t * Create ClusterState from json string that is typically stored in zookeeper.\n\t */\n\tpublic static ClusterState load(byte[] bytes, Set<String> liveNodes) {\n    if (bytes == null || bytes.length == 0) {\n      return new ClusterState(liveNodes, Collections.<String, Map<String,Slice>>emptyMap());\n    }\n    \n    LinkedHashMap<String, Object> stateMap = (LinkedHashMap<String, Object>) ZkStateReader.fromJSON(bytes);\n    HashMap<String,Map<String, Slice>> state = new HashMap<String,Map<String,Slice>>();\n\n    for(String collectionName: stateMap.keySet()){\n      Map<String, Object> collection = (Map<String, Object>)stateMap.get(collectionName);\n      Map<String, Slice> slices = new LinkedHashMap<String,Slice>();\n      for(String sliceName: collection.keySet()) {\n        Map<String, Map<String, String>> sliceMap = (Map<String, Map<String, String>>)collection.get(sliceName);\n        Map<String, ZkNodeProps> shards = new LinkedHashMap<String,ZkNodeProps>();\n        for(String shardName: sliceMap.keySet()) {\n          shards.put(shardName, new ZkNodeProps(sliceMap.get(shardName)));\n        }\n        Slice slice = new Slice(sliceName, shards);\n        slices.put(sliceName, slice);\n      }\n      state.put(collectionName, slices);\n    }\n    return new ClusterState(liveNodes, state);\n\t}\n\n","sourceOld":"\t/**\n\t * Create CloudState from json string that is typically stored in zookeeper.\n\t */\n\tpublic static CloudState load(byte[] bytes, Set<String> liveNodes) {\n    if (bytes == null || bytes.length == 0) {\n      return new CloudState(liveNodes, Collections.<String, Map<String,Slice>>emptyMap());\n    }\n    \n    LinkedHashMap<String, Object> stateMap = (LinkedHashMap<String, Object>) ZkStateReader.fromJSON(bytes);\n    HashMap<String,Map<String, Slice>> state = new HashMap<String,Map<String,Slice>>();\n\n    for(String collectionName: stateMap.keySet()){\n      Map<String, Object> collection = (Map<String, Object>)stateMap.get(collectionName);\n      Map<String, Slice> slices = new LinkedHashMap<String,Slice>();\n      for(String sliceName: collection.keySet()) {\n        Map<String, Map<String, String>> sliceMap = (Map<String, Map<String, String>>)collection.get(sliceName);\n        Map<String, ZkNodeProps> shards = new LinkedHashMap<String,ZkNodeProps>();\n        for(String shardName: sliceMap.keySet()) {\n          shards.put(shardName, new ZkNodeProps(sliceMap.get(shardName)));\n        }\n        Slice slice = new Slice(sliceName, shards);\n        slices.put(sliceName, slice);\n      }\n      state.put(collectionName, slices);\n    }\n    return new CloudState(liveNodes, state);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(byte[],Set[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#load(byte[],Set[String]).mjava","sourceNew":"\t/**\n\t * Create ClusterState from json string that is typically stored in zookeeper.\n\t */\n\tpublic static ClusterState load(byte[] bytes, Set<String> liveNodes) {\n    if (bytes == null || bytes.length == 0) {\n      return new ClusterState(liveNodes, Collections.<String, Map<String,Slice>>emptyMap());\n    }\n    \n    LinkedHashMap<String, Object> stateMap = (LinkedHashMap<String, Object>) ZkStateReader.fromJSON(bytes);\n    HashMap<String,Map<String, Slice>> state = new HashMap<String,Map<String,Slice>>();\n\n    for(String collectionName: stateMap.keySet()){\n      Map<String, Object> collection = (Map<String, Object>)stateMap.get(collectionName);\n      Map<String, Slice> slices = new LinkedHashMap<String,Slice>();\n      for(String sliceName: collection.keySet()) {\n        Map<String, Map<String, String>> sliceMap = (Map<String, Map<String, String>>)collection.get(sliceName);\n        Map<String, ZkNodeProps> shards = new LinkedHashMap<String,ZkNodeProps>();\n        for(String shardName: sliceMap.keySet()) {\n          shards.put(shardName, new ZkNodeProps(sliceMap.get(shardName)));\n        }\n        Slice slice = new Slice(sliceName, shards);\n        slices.put(sliceName, slice);\n      }\n      state.put(collectionName, slices);\n    }\n    return new ClusterState(liveNodes, state);\n\t}\n\n","sourceOld":"\t/**\n\t * Create CloudState from json string that is typically stored in zookeeper.\n\t */\n\tpublic static CloudState load(byte[] bytes, Set<String> liveNodes) {\n    if (bytes == null || bytes.length == 0) {\n      return new CloudState(liveNodes, Collections.<String, Map<String,Slice>>emptyMap());\n    }\n    \n    LinkedHashMap<String, Object> stateMap = (LinkedHashMap<String, Object>) ZkStateReader.fromJSON(bytes);\n    HashMap<String,Map<String, Slice>> state = new HashMap<String,Map<String,Slice>>();\n\n    for(String collectionName: stateMap.keySet()){\n      Map<String, Object> collection = (Map<String, Object>)stateMap.get(collectionName);\n      Map<String, Slice> slices = new LinkedHashMap<String,Slice>();\n      for(String sliceName: collection.keySet()) {\n        Map<String, Map<String, String>> sliceMap = (Map<String, Map<String, String>>)collection.get(sliceName);\n        Map<String, ZkNodeProps> shards = new LinkedHashMap<String,ZkNodeProps>();\n        for(String shardName: sliceMap.keySet()) {\n          shards.put(shardName, new ZkNodeProps(sliceMap.get(shardName)));\n        }\n        Slice slice = new Slice(sliceName, shards);\n        slices.put(sliceName, slice);\n      }\n      state.put(collectionName, slices);\n    }\n    return new CloudState(liveNodes, state);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#load(byte[],Set[String]).mjava","sourceNew":null,"sourceOld":"\t/**\n\t * Create CloudState from json string that is typically stored in zookeeper.\n\t */\n\tpublic static CloudState load(byte[] bytes, Set<String> liveNodes) {\n    if (bytes == null || bytes.length == 0) {\n      return new CloudState(liveNodes, Collections.<String, Map<String,Slice>>emptyMap());\n    }\n    \n    LinkedHashMap<String, Object> stateMap = (LinkedHashMap<String, Object>) ZkStateReader.fromJSON(bytes);\n    HashMap<String,Map<String, Slice>> state = new HashMap<String,Map<String,Slice>>();\n\n    for(String collectionName: stateMap.keySet()){\n      Map<String, Object> collection = (Map<String, Object>)stateMap.get(collectionName);\n      Map<String, Slice> slices = new LinkedHashMap<String,Slice>();\n      for(String sliceName: collection.keySet()) {\n        Map<String, Map<String, String>> sliceMap = (Map<String, Map<String, String>>)collection.get(sliceName);\n        Map<String, ZkNodeProps> shards = new LinkedHashMap<String,ZkNodeProps>();\n        for(String shardName: sliceMap.keySet()) {\n          shards.put(shardName, new ZkNodeProps(sliceMap.get(shardName)));\n        }\n        Slice slice = new Slice(sliceName, shards);\n        slices.put(sliceName, slice);\n      }\n      state.put(collectionName, slices);\n    }\n    return new CloudState(liveNodes, state);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f767f8c99eaedb984df754fe61f21c5de260f94":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"81363494a48d3b6215bf1e37c1fe754c3e67f3fe":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["81363494a48d3b6215bf1e37c1fe754c3e67f3fe","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","3f767f8c99eaedb984df754fe61f21c5de260f94"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["81363494a48d3b6215bf1e37c1fe754c3e67f3fe"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["fe33227f6805edab2036cbb80645cc4e2d1fa424","3f767f8c99eaedb984df754fe61f21c5de260f94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f767f8c99eaedb984df754fe61f21c5de260f94"]},"commit2Childs":{"3f767f8c99eaedb984df754fe61f21c5de260f94":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"81363494a48d3b6215bf1e37c1fe754c3e67f3fe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["8fd5be977c105554c6a7b68afcdbc511439723ab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["81363494a48d3b6215bf1e37c1fe754c3e67f3fe","0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3f767f8c99eaedb984df754fe61f21c5de260f94","fe33227f6805edab2036cbb80645cc4e2d1fa424","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","d6f074e73200c07d54f242d3880a8da5a35ff97b","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}