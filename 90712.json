{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign.LegacyAssignStrategy#assign(SolrCloudManager,AssignRequest).mjava","commits":[{"id":"e9f71a1c6c905e9489b4d25c83c8d628d978a8ea","date":1538045138,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign.LegacyAssignStrategy#assign(SolrCloudManager,AssignRequest).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public List<ReplicaPosition> assign(SolrCloudManager solrCloudManager, AssignRequest assignRequest) throws Assign.AssignmentException, IOException, InterruptedException {\n      ClusterState clusterState = solrCloudManager.getClusterStateProvider().getClusterState();\n      List<String> nodeList = assignRequest.nodes;\n\n      HashMap<String, Assign.ReplicaCount> nodeNameVsShardCount = Assign.getNodeNameVsShardCount(assignRequest.collectionName, clusterState, assignRequest.nodes);\n      if (nodeList == null || nodeList.isEmpty()) {\n        ArrayList<Assign.ReplicaCount> sortedNodeList = new ArrayList<>(nodeNameVsShardCount.values());\n        sortedNodeList.sort(Comparator.comparingInt(Assign.ReplicaCount::weight));\n        nodeList = sortedNodeList.stream().map(replicaCount -> replicaCount.nodeName).collect(Collectors.toList());\n      }\n\n      int i = 0;\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (String aShard : assignRequest.shardNames)\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, assignRequest.numNrtReplicas,\n            Replica.Type.TLOG, assignRequest.numTlogReplicas,\n            Replica.Type.PULL, assignRequest.numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++) {\n            result.add(new ReplicaPosition(aShard, j, e.getKey(), nodeList.get(i % nodeList.size())));\n            i++;\n          }\n        }\n      return result;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76574dac4558817234ef087dd38728569cc93bff","date":1591547057,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign.LegacyAssignStrategy#assign(SolrCloudManager,AssignRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign.LegacyAssignStrategy#assign(SolrCloudManager,AssignRequest).mjava","sourceNew":"    @Override\n    public List<ReplicaPosition> assign(SolrCloudManager solrCloudManager, AssignRequest assignRequest) throws Assign.AssignmentException, IOException, InterruptedException {\n      ClusterState clusterState = solrCloudManager.getClusterStateProvider().getClusterState();\n      List<String> nodeList = assignRequest.nodes; // can this be empty list?\n\n      if (nodeList == null || nodeList.isEmpty()) {\n        HashMap<String, Assign.ReplicaCount> nodeNameVsShardCount =\n            Assign.getNodeNameVsShardCount(assignRequest.collectionName, clusterState, nodeList);\n        // if nodelist was empty, this map will be empty too. (passing null above however gets a full map)\n        ArrayList<Assign.ReplicaCount> sortedNodeList = new ArrayList<>(nodeNameVsShardCount.values());\n        sortedNodeList.sort(Comparator.comparingInt(Assign.ReplicaCount::weight));\n        nodeList = sortedNodeList.stream().map(replicaCount -> replicaCount.nodeName).collect(Collectors.toList());\n      }\n\n      int i = 0;\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (String aShard : assignRequest.shardNames) {\n        for (Map.Entry<Replica.Type, Integer> e : countsPerReplicaType(assignRequest).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++) {\n            // TODO: not sure if we can receive an non-null, empty assingRequest.nodes,\n            //  but if we do this appears to result in a div/0. Also not sure if empty should be\n            //  same as null or an error  (with better message) here.\n            result.add(new ReplicaPosition(aShard, j, e.getKey(), nodeList.get(i % nodeList.size())));\n            i++;\n          }\n        }\n      }\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public List<ReplicaPosition> assign(SolrCloudManager solrCloudManager, AssignRequest assignRequest) throws Assign.AssignmentException, IOException, InterruptedException {\n      ClusterState clusterState = solrCloudManager.getClusterStateProvider().getClusterState();\n      List<String> nodeList = assignRequest.nodes;\n\n      HashMap<String, Assign.ReplicaCount> nodeNameVsShardCount = Assign.getNodeNameVsShardCount(assignRequest.collectionName, clusterState, assignRequest.nodes);\n      if (nodeList == null || nodeList.isEmpty()) {\n        ArrayList<Assign.ReplicaCount> sortedNodeList = new ArrayList<>(nodeNameVsShardCount.values());\n        sortedNodeList.sort(Comparator.comparingInt(Assign.ReplicaCount::weight));\n        nodeList = sortedNodeList.stream().map(replicaCount -> replicaCount.nodeName).collect(Collectors.toList());\n      }\n\n      int i = 0;\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (String aShard : assignRequest.shardNames)\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, assignRequest.numNrtReplicas,\n            Replica.Type.TLOG, assignRequest.numTlogReplicas,\n            Replica.Type.PULL, assignRequest.numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++) {\n            result.add(new ReplicaPosition(aShard, j, e.getKey(), nodeList.get(i % nodeList.size())));\n            i++;\n          }\n        }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8946843123ed22c63230024259fe1a8bfa7ab71","date":1591549365,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign.LegacyAssignStrategy#assign(SolrCloudManager,AssignRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign.LegacyAssignStrategy#assign(SolrCloudManager,AssignRequest).mjava","sourceNew":"    @Override\n    public List<ReplicaPosition> assign(SolrCloudManager solrCloudManager, AssignRequest assignRequest) throws Assign.AssignmentException, IOException, InterruptedException {\n      ClusterState clusterState = solrCloudManager.getClusterStateProvider().getClusterState();\n      List<String> nodeList = assignRequest.nodes;\n\n      HashMap<String, Assign.ReplicaCount> nodeNameVsShardCount = Assign.getNodeNameVsShardCount(assignRequest.collectionName, clusterState, assignRequest.nodes);\n      if (nodeList == null || nodeList.isEmpty()) {\n        ArrayList<Assign.ReplicaCount> sortedNodeList = new ArrayList<>(nodeNameVsShardCount.values());\n        sortedNodeList.sort(Comparator.comparingInt(Assign.ReplicaCount::weight));\n        nodeList = sortedNodeList.stream().map(replicaCount -> replicaCount.nodeName).collect(Collectors.toList());\n      }\n\n      int i = 0;\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (String aShard : assignRequest.shardNames)\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, assignRequest.numNrtReplicas,\n            Replica.Type.TLOG, assignRequest.numTlogReplicas,\n            Replica.Type.PULL, assignRequest.numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++) {\n            result.add(new ReplicaPosition(aShard, j, e.getKey(), nodeList.get(i % nodeList.size())));\n            i++;\n          }\n        }\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public List<ReplicaPosition> assign(SolrCloudManager solrCloudManager, AssignRequest assignRequest) throws Assign.AssignmentException, IOException, InterruptedException {\n      ClusterState clusterState = solrCloudManager.getClusterStateProvider().getClusterState();\n      List<String> nodeList = assignRequest.nodes; // can this be empty list?\n\n      if (nodeList == null || nodeList.isEmpty()) {\n        HashMap<String, Assign.ReplicaCount> nodeNameVsShardCount =\n            Assign.getNodeNameVsShardCount(assignRequest.collectionName, clusterState, nodeList);\n        // if nodelist was empty, this map will be empty too. (passing null above however gets a full map)\n        ArrayList<Assign.ReplicaCount> sortedNodeList = new ArrayList<>(nodeNameVsShardCount.values());\n        sortedNodeList.sort(Comparator.comparingInt(Assign.ReplicaCount::weight));\n        nodeList = sortedNodeList.stream().map(replicaCount -> replicaCount.nodeName).collect(Collectors.toList());\n      }\n\n      int i = 0;\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (String aShard : assignRequest.shardNames) {\n        for (Map.Entry<Replica.Type, Integer> e : countsPerReplicaType(assignRequest).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++) {\n            // TODO: not sure if we can receive an non-null, empty assingRequest.nodes,\n            //  but if we do this appears to result in a div/0. Also not sure if empty should be\n            //  same as null or an error  (with better message) here.\n            result.add(new ReplicaPosition(aShard, j, e.getKey(), nodeList.get(i % nodeList.size())));\n            i++;\n          }\n        }\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"762e7d1b8822c5271a29e9f308660638d1501c08","date":1592065068,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign.LegacyAssignStrategy#assign(SolrCloudManager,AssignRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/Assign.LegacyAssignStrategy#assign(SolrCloudManager,AssignRequest).mjava","sourceNew":"    @Override\n    public List<ReplicaPosition> assign(SolrCloudManager solrCloudManager, AssignRequest assignRequest) throws Assign.AssignmentException, IOException, InterruptedException {\n      ClusterState clusterState = solrCloudManager.getClusterStateProvider().getClusterState();\n      List<String> nodeList = assignRequest.nodes; // can this be empty list?\n\n      if (nodeList == null || nodeList.isEmpty()) {\n        HashMap<String, Assign.ReplicaCount> nodeNameVsShardCount =\n            Assign.getNodeNameVsShardCount(assignRequest.collectionName, clusterState, nodeList);\n        // if nodelist was empty, this map will be empty too. (passing null above however gets a full map)\n        ArrayList<Assign.ReplicaCount> sortedNodeList = new ArrayList<>(nodeNameVsShardCount.values());\n        sortedNodeList.sort(Comparator.comparingInt(Assign.ReplicaCount::weight));\n        nodeList = sortedNodeList.stream().map(replicaCount -> replicaCount.nodeName).collect(Collectors.toList());\n      }\n\n      // otherwise we get a div/0 below\n      assert !nodeList.isEmpty();\n\n      int i = 0;\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (String aShard : assignRequest.shardNames) {\n        for (Map.Entry<Replica.Type, Integer> e : countsPerReplicaType(assignRequest).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++) {\n            result.add(new ReplicaPosition(aShard, j, e.getKey(), nodeList.get(i % nodeList.size())));\n            i++;\n          }\n        }\n      }\n      return result;\n    }\n\n","sourceOld":"    @Override\n    public List<ReplicaPosition> assign(SolrCloudManager solrCloudManager, AssignRequest assignRequest) throws Assign.AssignmentException, IOException, InterruptedException {\n      ClusterState clusterState = solrCloudManager.getClusterStateProvider().getClusterState();\n      List<String> nodeList = assignRequest.nodes;\n\n      HashMap<String, Assign.ReplicaCount> nodeNameVsShardCount = Assign.getNodeNameVsShardCount(assignRequest.collectionName, clusterState, assignRequest.nodes);\n      if (nodeList == null || nodeList.isEmpty()) {\n        ArrayList<Assign.ReplicaCount> sortedNodeList = new ArrayList<>(nodeNameVsShardCount.values());\n        sortedNodeList.sort(Comparator.comparingInt(Assign.ReplicaCount::weight));\n        nodeList = sortedNodeList.stream().map(replicaCount -> replicaCount.nodeName).collect(Collectors.toList());\n      }\n\n      int i = 0;\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (String aShard : assignRequest.shardNames)\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, assignRequest.numNrtReplicas,\n            Replica.Type.TLOG, assignRequest.numTlogReplicas,\n            Replica.Type.PULL, assignRequest.numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++) {\n            result.add(new ReplicaPosition(aShard, j, e.getKey(), nodeList.get(i % nodeList.size())));\n            i++;\n          }\n        }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9f71a1c6c905e9489b4d25c83c8d628d978a8ea":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"76574dac4558817234ef087dd38728569cc93bff":["e9f71a1c6c905e9489b4d25c83c8d628d978a8ea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"762e7d1b8822c5271a29e9f308660638d1501c08":["e8946843123ed22c63230024259fe1a8bfa7ab71"],"e8946843123ed22c63230024259fe1a8bfa7ab71":["76574dac4558817234ef087dd38728569cc93bff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["762e7d1b8822c5271a29e9f308660638d1501c08"]},"commit2Childs":{"e9f71a1c6c905e9489b4d25c83c8d628d978a8ea":["76574dac4558817234ef087dd38728569cc93bff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9f71a1c6c905e9489b4d25c83c8d628d978a8ea"],"76574dac4558817234ef087dd38728569cc93bff":["e8946843123ed22c63230024259fe1a8bfa7ab71"],"762e7d1b8822c5271a29e9f308660638d1501c08":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e8946843123ed22c63230024259fe1a8bfa7ab71":["762e7d1b8822c5271a29e9f308660638d1501c08"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}