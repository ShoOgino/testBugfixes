{"path":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#addFlushableState(ThreadState).mjava","commits":[{"id":"c00afe74a80796ed1f30a9509b150ff104746a1f","date":1312881735,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#addFlushableState(ThreadState).mjava","pathOld":"/dev/null","sourceNew":"  void addFlushableState(ThreadState perThread) {\n    if (documentsWriter.infoStream != null) {\n      documentsWriter.message(\"FC: \" + Thread.currentThread().getName() + \": addFlushableState \" + perThread.perThread);\n    }\n    final DocumentsWriterPerThread dwpt = perThread.perThread;\n    assert perThread.isHeldByCurrentThread();\n    assert perThread.isActive();\n    assert fullFlush;\n    assert dwpt.deleteQueue != documentsWriter.deleteQueue;\n    if (dwpt.getNumDocsInRAM() > 0) {\n      synchronized(this) {\n        if (!perThread.flushPending) {\n          setFlushPending(perThread);\n        }\n        final DocumentsWriterPerThread flushingDWPT = internalTryCheckOutForFlush(perThread);\n        assert flushingDWPT != null : \"DWPT must never be null here since we hold the lock and it holds documents\";\n        assert dwpt == flushingDWPT : \"flushControl returned different DWPT\";\n        fullFlushBuffer.add(flushingDWPT);\n      }\n    } else {\n      if (closed) {\n        perThread.resetWriter(null); // make this state inactive\n      } else {\n        dwpt.initialize();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#addFlushableState(ThreadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#addFlushableState(ThreadState).mjava","sourceNew":"  void addFlushableState(ThreadState perThread) {\n    if (documentsWriter.infoStream != null) {\n      documentsWriter.infoStream.message(\"DWFC\", Thread.currentThread().getName() + \": addFlushableState \" + perThread.perThread);\n    }\n    final DocumentsWriterPerThread dwpt = perThread.perThread;\n    assert perThread.isHeldByCurrentThread();\n    assert perThread.isActive();\n    assert fullFlush;\n    assert dwpt.deleteQueue != documentsWriter.deleteQueue;\n    if (dwpt.getNumDocsInRAM() > 0) {\n      synchronized(this) {\n        if (!perThread.flushPending) {\n          setFlushPending(perThread);\n        }\n        final DocumentsWriterPerThread flushingDWPT = internalTryCheckOutForFlush(perThread);\n        assert flushingDWPT != null : \"DWPT must never be null here since we hold the lock and it holds documents\";\n        assert dwpt == flushingDWPT : \"flushControl returned different DWPT\";\n        fullFlushBuffer.add(flushingDWPT);\n      }\n    } else {\n      if (closed) {\n        perThread.resetWriter(null); // make this state inactive\n      } else {\n        dwpt.initialize();\n      }\n    }\n  }\n\n","sourceOld":"  void addFlushableState(ThreadState perThread) {\n    if (documentsWriter.infoStream != null) {\n      documentsWriter.message(\"FC: \" + Thread.currentThread().getName() + \": addFlushableState \" + perThread.perThread);\n    }\n    final DocumentsWriterPerThread dwpt = perThread.perThread;\n    assert perThread.isHeldByCurrentThread();\n    assert perThread.isActive();\n    assert fullFlush;\n    assert dwpt.deleteQueue != documentsWriter.deleteQueue;\n    if (dwpt.getNumDocsInRAM() > 0) {\n      synchronized(this) {\n        if (!perThread.flushPending) {\n          setFlushPending(perThread);\n        }\n        final DocumentsWriterPerThread flushingDWPT = internalTryCheckOutForFlush(perThread);\n        assert flushingDWPT != null : \"DWPT must never be null here since we hold the lock and it holds documents\";\n        assert dwpt == flushingDWPT : \"flushControl returned different DWPT\";\n        fullFlushBuffer.add(flushingDWPT);\n      }\n    } else {\n      if (closed) {\n        perThread.resetWriter(null); // make this state inactive\n      } else {\n        dwpt.initialize();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58c6bbc222f074c844e736e6fb23647e3db9cfe3","date":1322743940,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#addFlushableState(ThreadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#addFlushableState(ThreadState).mjava","sourceNew":"  void addFlushableState(ThreadState perThread) {\n    if (documentsWriter.infoStream.isEnabled(\"DWFC\")) {\n      documentsWriter.infoStream.message(\"DWFC\", Thread.currentThread().getName() + \": addFlushableState \" + perThread.perThread);\n    }\n    final DocumentsWriterPerThread dwpt = perThread.perThread;\n    assert perThread.isHeldByCurrentThread();\n    assert perThread.isActive();\n    assert fullFlush;\n    assert dwpt.deleteQueue != documentsWriter.deleteQueue;\n    if (dwpt.getNumDocsInRAM() > 0) {\n      synchronized(this) {\n        if (!perThread.flushPending) {\n          setFlushPending(perThread);\n        }\n        final DocumentsWriterPerThread flushingDWPT = internalTryCheckOutForFlush(perThread);\n        assert flushingDWPT != null : \"DWPT must never be null here since we hold the lock and it holds documents\";\n        assert dwpt == flushingDWPT : \"flushControl returned different DWPT\";\n        fullFlushBuffer.add(flushingDWPT);\n      }\n    } else {\n      if (closed) {\n        perThread.resetWriter(null); // make this state inactive\n      } else {\n        dwpt.initialize();\n      }\n    }\n  }\n\n","sourceOld":"  void addFlushableState(ThreadState perThread) {\n    if (documentsWriter.infoStream != null) {\n      documentsWriter.infoStream.message(\"DWFC\", Thread.currentThread().getName() + \": addFlushableState \" + perThread.perThread);\n    }\n    final DocumentsWriterPerThread dwpt = perThread.perThread;\n    assert perThread.isHeldByCurrentThread();\n    assert perThread.isActive();\n    assert fullFlush;\n    assert dwpt.deleteQueue != documentsWriter.deleteQueue;\n    if (dwpt.getNumDocsInRAM() > 0) {\n      synchronized(this) {\n        if (!perThread.flushPending) {\n          setFlushPending(perThread);\n        }\n        final DocumentsWriterPerThread flushingDWPT = internalTryCheckOutForFlush(perThread);\n        assert flushingDWPT != null : \"DWPT must never be null here since we hold the lock and it holds documents\";\n        assert dwpt == flushingDWPT : \"flushControl returned different DWPT\";\n        fullFlushBuffer.add(flushingDWPT);\n      }\n    } else {\n      if (closed) {\n        perThread.resetWriter(null); // make this state inactive\n      } else {\n        dwpt.initialize();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#addFlushableState(ThreadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#addFlushableState(ThreadState).mjava","sourceNew":"  void addFlushableState(ThreadState perThread) {\n    if (documentsWriter.infoStream.isEnabled(\"DWFC\")) {\n      documentsWriter.infoStream.message(\"DWFC\", Thread.currentThread().getName() + \": addFlushableState \" + perThread.perThread);\n    }\n    final DocumentsWriterPerThread dwpt = perThread.perThread;\n    assert perThread.isHeldByCurrentThread();\n    assert perThread.isActive();\n    assert fullFlush;\n    assert dwpt.deleteQueue != documentsWriter.deleteQueue;\n    if (dwpt.getNumDocsInRAM() > 0) {\n      synchronized(this) {\n        if (!perThread.flushPending) {\n          setFlushPending(perThread);\n        }\n        final DocumentsWriterPerThread flushingDWPT = internalTryCheckOutForFlush(perThread);\n        assert flushingDWPT != null : \"DWPT must never be null here since we hold the lock and it holds documents\";\n        assert dwpt == flushingDWPT : \"flushControl returned different DWPT\";\n        fullFlushBuffer.add(flushingDWPT);\n      }\n    } else {\n      if (closed) {\n        perThread.resetWriter(null); // make this state inactive\n      } else {\n        dwpt.initialize();\n      }\n    }\n  }\n\n","sourceOld":"  void addFlushableState(ThreadState perThread) {\n    if (documentsWriter.infoStream.isEnabled(\"DWFC\")) {\n      documentsWriter.infoStream.message(\"DWFC\", Thread.currentThread().getName() + \": addFlushableState \" + perThread.perThread);\n    }\n    final DocumentsWriterPerThread dwpt = perThread.perThread;\n    assert perThread.isHeldByCurrentThread();\n    assert perThread.isActive();\n    assert fullFlush;\n    assert dwpt.deleteQueue != documentsWriter.deleteQueue;\n    if (dwpt.getNumDocsInRAM() > 0) {\n      synchronized(this) {\n        if (!perThread.flushPending) {\n          setFlushPending(perThread);\n        }\n        final DocumentsWriterPerThread flushingDWPT = internalTryCheckOutForFlush(perThread);\n        assert flushingDWPT != null : \"DWPT must never be null here since we hold the lock and it holds documents\";\n        assert dwpt == flushingDWPT : \"flushControl returned different DWPT\";\n        fullFlushBuffer.add(flushingDWPT);\n      }\n    } else {\n      if (closed) {\n        perThread.resetWriter(null); // make this state inactive\n      } else {\n        dwpt.initialize();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["06584e6e98d592b34e1329b384182f368d2025e8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"06584e6e98d592b34e1329b384182f368d2025e8":["c00afe74a80796ed1f30a9509b150ff104746a1f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c00afe74a80796ed1f30a9509b150ff104746a1f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"06584e6e98d592b34e1329b384182f368d2025e8":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c00afe74a80796ed1f30a9509b150ff104746a1f"],"c00afe74a80796ed1f30a9509b150ff104746a1f":["06584e6e98d592b34e1329b384182f368d2025e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}