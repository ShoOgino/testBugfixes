{"path":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseHS.SolrInstance#start().mjava","commits":[{"id":"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","date":1426480823,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseHS.SolrInstance#start().mjava","pathOld":"/dev/null","sourceNew":"    public void start() throws Exception {\n      if (!homeCreated) {\n        createHome();\n      }\n\n      if (jetty == null) {\n        jetty = new JettySolrRunner(baseDir.getAbsolutePath(), \"/solr\", port, solrconfigFile, schemaFile, true, null, null, null);\n      }\n\n      // silly stuff included from solrconfig.snippet.randomindexconfig.xml\n      System.setProperty(\"solr.tests.maxBufferedDocs\", String.valueOf(100000));\n\n      jetty.start();\n      port = jetty.getLocalPort();\n      log.info(\"===> Started solr server port=\" + port + \" home=\"+getBaseDir());\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseHS.SolrInstance#start().mjava","pathOld":"/dev/null","sourceNew":"    public void start() throws Exception {\n      if (!homeCreated) {\n        createHome();\n      }\n\n      if (jetty == null) {\n        jetty = new JettySolrRunner(baseDir.getAbsolutePath(), \"/solr\", port, solrconfigFile, schemaFile, true, null, null, null);\n      }\n\n      // silly stuff included from solrconfig.snippet.randomindexconfig.xml\n      System.setProperty(\"solr.tests.maxBufferedDocs\", String.valueOf(100000));\n\n      jetty.start();\n      port = jetty.getLocalPort();\n      log.info(\"===> Started solr server port=\" + port + \" home=\"+getBaseDir());\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"733eaf468f18297b1bcc51031353bdfdd1913bdf","date":1456928540,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseHS.SolrInstance#start().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseHS.SolrInstance#start().mjava","sourceNew":"    public void start() throws Exception {\n      if (!homeCreated) {\n        createHome();\n      }\n\n      if (jetty == null) {\n        JettyConfig jettyConfig = JettyConfig.builder()\n            .stopAtShutdown(true)\n            .setContext(\"/solr\")\n            .setPort(port)\n            .withSSLConfig(sslConfig)\n            .build();\n        Properties nodeProperties = new Properties();\n        nodeProperties.setProperty(\"solrconfig\", solrconfigFile);\n        nodeProperties.setProperty(CoreDescriptor.CORE_SCHEMA, schemaFile);\n        jetty = new JettySolrRunner(baseDir.getAbsolutePath(), nodeProperties, jettyConfig);\n      }\n\n      // silly stuff included from solrconfig.snippet.randomindexconfig.xml\n      System.setProperty(\"solr.tests.maxBufferedDocs\", String.valueOf(100000));\n\n      jetty.start();\n      port = jetty.getLocalPort();\n      log.info(\"===> Started solr server port=\" + port + \" home=\"+getBaseDir());\n    }\n\n","sourceOld":"    public void start() throws Exception {\n      if (!homeCreated) {\n        createHome();\n      }\n\n      if (jetty == null) {\n        jetty = new JettySolrRunner(baseDir.getAbsolutePath(), \"/solr\", port, solrconfigFile, schemaFile, true, null, null, null);\n      }\n\n      // silly stuff included from solrconfig.snippet.randomindexconfig.xml\n      System.setProperty(\"solr.tests.maxBufferedDocs\", String.valueOf(100000));\n\n      jetty.start();\n      port = jetty.getLocalPort();\n      log.info(\"===> Started solr server port=\" + port + \" home=\"+getBaseDir());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseHS.SolrInstance#start().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseHS.SolrInstance#start().mjava","sourceNew":"    public void start() throws Exception {\n      if (!homeCreated) {\n        createHome();\n      }\n\n      if (jetty == null) {\n        JettyConfig jettyConfig = JettyConfig.builder()\n            .stopAtShutdown(true)\n            .setContext(\"/solr\")\n            .setPort(port)\n            .withSSLConfig(sslConfig)\n            .build();\n        Properties nodeProperties = new Properties();\n        nodeProperties.setProperty(\"solrconfig\", solrconfigFile);\n        nodeProperties.setProperty(CoreDescriptor.CORE_SCHEMA, schemaFile);\n        jetty = new JettySolrRunner(baseDir.getAbsolutePath(), nodeProperties, jettyConfig);\n      }\n\n      // silly stuff included from solrconfig.snippet.randomindexconfig.xml\n      System.setProperty(\"solr.tests.maxBufferedDocs\", String.valueOf(100000));\n\n      jetty.start();\n      port = jetty.getLocalPort();\n      log.info(\"===> Started solr server port=\" + port + \" home=\"+getBaseDir());\n    }\n\n","sourceOld":"    public void start() throws Exception {\n      if (!homeCreated) {\n        createHome();\n      }\n\n      if (jetty == null) {\n        jetty = new JettySolrRunner(baseDir.getAbsolutePath(), \"/solr\", port, solrconfigFile, schemaFile, true, null, null, null);\n      }\n\n      // silly stuff included from solrconfig.snippet.randomindexconfig.xml\n      System.setProperty(\"solr.tests.maxBufferedDocs\", String.valueOf(100000));\n\n      jetty.start();\n      port = jetty.getLocalPort();\n      log.info(\"===> Started solr server port=\" + port + \" home=\"+getBaseDir());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a77e5e21cbd575a8240b0e3926164f15295f4e8","date":1544979500,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseHS.SolrInstance#start().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseHS.SolrInstance#start().mjava","sourceNew":"    public void start() throws Exception {\n      if (!homeCreated) {\n        createHome();\n      }\n\n      if (jetty == null) {\n        JettyConfig jettyConfig = JettyConfig.builder()\n            .stopAtShutdown(true)\n            .setContext(\"/solr\")\n            .setPort(port)\n            .withSSLConfig(sslConfig.buildServerSSLConfig())\n            .build();\n        Properties nodeProperties = new Properties();\n        nodeProperties.setProperty(\"solrconfig\", solrconfigFile);\n        nodeProperties.setProperty(CoreDescriptor.CORE_SCHEMA, schemaFile);\n        jetty = new JettySolrRunner(baseDir.getAbsolutePath(), nodeProperties, jettyConfig);\n      }\n\n      // silly stuff included from solrconfig.snippet.randomindexconfig.xml\n      System.setProperty(\"solr.tests.maxBufferedDocs\", String.valueOf(100000));\n\n      jetty.start();\n      port = jetty.getLocalPort();\n      log.info(\"===> Started solr server port=\" + port + \" home=\"+getBaseDir());\n    }\n\n","sourceOld":"    public void start() throws Exception {\n      if (!homeCreated) {\n        createHome();\n      }\n\n      if (jetty == null) {\n        JettyConfig jettyConfig = JettyConfig.builder()\n            .stopAtShutdown(true)\n            .setContext(\"/solr\")\n            .setPort(port)\n            .withSSLConfig(sslConfig)\n            .build();\n        Properties nodeProperties = new Properties();\n        nodeProperties.setProperty(\"solrconfig\", solrconfigFile);\n        nodeProperties.setProperty(CoreDescriptor.CORE_SCHEMA, schemaFile);\n        jetty = new JettySolrRunner(baseDir.getAbsolutePath(), nodeProperties, jettyConfig);\n      }\n\n      // silly stuff included from solrconfig.snippet.randomindexconfig.xml\n      System.setProperty(\"solr.tests.maxBufferedDocs\", String.valueOf(100000));\n\n      jetty.start();\n      port = jetty.getLocalPort();\n      log.info(\"===> Started solr server port=\" + port + \" home=\"+getBaseDir());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d51e7db479b42602c7e23ba871b177387268179","date":1547581497,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseHS.SolrInstance#start().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseHS.SolrInstance#start().mjava","sourceNew":"    public void start() throws Exception {\n      if (!homeCreated) {\n        createHome();\n      }\n\n      if (jetty == null) {\n        JettyConfig jettyConfig = JettyConfig.builder()\n            .stopAtShutdown(true)\n            .setContext(\"/solr\")\n            .setPort(port)\n            .withSSLConfig(sslConfig.buildServerSSLConfig())\n            .build();\n        Properties nodeProperties = new Properties();\n        nodeProperties.setProperty(\"solrconfig\", solrconfigFile);\n        nodeProperties.setProperty(CoreDescriptor.CORE_SCHEMA, schemaFile);\n        jetty = new JettySolrRunner(baseDir.getAbsolutePath(), nodeProperties, jettyConfig);\n      }\n\n      // silly stuff included from solrconfig.snippet.randomindexconfig.xml\n      System.setProperty(\"solr.tests.maxBufferedDocs\", String.valueOf(100000));\n      \n      // If we want to run with whitelist list, this must be explicitly set to true for the test\n      // otherwise we disable the check\n      if (System.getProperty(SYSTEM_PROPERTY_SOLR_DISABLE_SHARDS_WHITELIST) == null) {\n        systemSetPropertySolrDisableShardsWhitelist(\"true\");\n      }\n\n      jetty.start();\n      port = jetty.getLocalPort();\n      log.info(\"===> Started solr server port=\" + port + \" home=\"+getBaseDir());\n    }\n\n","sourceOld":"    public void start() throws Exception {\n      if (!homeCreated) {\n        createHome();\n      }\n\n      if (jetty == null) {\n        JettyConfig jettyConfig = JettyConfig.builder()\n            .stopAtShutdown(true)\n            .setContext(\"/solr\")\n            .setPort(port)\n            .withSSLConfig(sslConfig.buildServerSSLConfig())\n            .build();\n        Properties nodeProperties = new Properties();\n        nodeProperties.setProperty(\"solrconfig\", solrconfigFile);\n        nodeProperties.setProperty(CoreDescriptor.CORE_SCHEMA, schemaFile);\n        jetty = new JettySolrRunner(baseDir.getAbsolutePath(), nodeProperties, jettyConfig);\n      }\n\n      // silly stuff included from solrconfig.snippet.randomindexconfig.xml\n      System.setProperty(\"solr.tests.maxBufferedDocs\", String.valueOf(100000));\n\n      jetty.start();\n      port = jetty.getLocalPort();\n      log.info(\"===> Started solr server port=\" + port + \" home=\"+getBaseDir());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseHS.SolrInstance#start().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseHS.SolrInstance#start().mjava","sourceNew":"    public void start() throws Exception {\n      if (!homeCreated) {\n        createHome();\n      }\n\n      if (jetty == null) {\n        JettyConfig jettyConfig = JettyConfig.builder()\n            .stopAtShutdown(true)\n            .setContext(\"/solr\")\n            .setPort(port)\n            .withSSLConfig(sslConfig.buildServerSSLConfig())\n            .build();\n        Properties nodeProperties = new Properties();\n        nodeProperties.setProperty(\"solrconfig\", solrconfigFile);\n        nodeProperties.setProperty(CoreDescriptor.CORE_SCHEMA, schemaFile);\n        jetty = new JettySolrRunner(baseDir.getAbsolutePath(), nodeProperties, jettyConfig);\n      }\n\n      // silly stuff included from solrconfig.snippet.randomindexconfig.xml\n      System.setProperty(\"solr.tests.maxBufferedDocs\", String.valueOf(100000));\n      \n      // If we want to run with whitelist list, this must be explicitly set to true for the test\n      // otherwise we disable the check\n      if (System.getProperty(SYSTEM_PROPERTY_SOLR_DISABLE_SHARDS_WHITELIST) == null) {\n        systemSetPropertySolrDisableShardsWhitelist(\"true\");\n      }\n\n      jetty.start();\n      port = jetty.getLocalPort();\n      if (log.isInfoEnabled()) {\n        log.info(\"===> Started solr server port={} home={}\", port, getBaseDir());\n      }\n    }\n\n","sourceOld":"    public void start() throws Exception {\n      if (!homeCreated) {\n        createHome();\n      }\n\n      if (jetty == null) {\n        JettyConfig jettyConfig = JettyConfig.builder()\n            .stopAtShutdown(true)\n            .setContext(\"/solr\")\n            .setPort(port)\n            .withSSLConfig(sslConfig.buildServerSSLConfig())\n            .build();\n        Properties nodeProperties = new Properties();\n        nodeProperties.setProperty(\"solrconfig\", solrconfigFile);\n        nodeProperties.setProperty(CoreDescriptor.CORE_SCHEMA, schemaFile);\n        jetty = new JettySolrRunner(baseDir.getAbsolutePath(), nodeProperties, jettyConfig);\n      }\n\n      // silly stuff included from solrconfig.snippet.randomindexconfig.xml\n      System.setProperty(\"solr.tests.maxBufferedDocs\", String.valueOf(100000));\n      \n      // If we want to run with whitelist list, this must be explicitly set to true for the test\n      // otherwise we disable the check\n      if (System.getProperty(SYSTEM_PROPERTY_SOLR_DISABLE_SHARDS_WHITELIST) == null) {\n        systemSetPropertySolrDisableShardsWhitelist(\"true\");\n      }\n\n      jetty.start();\n      port = jetty.getLocalPort();\n      log.info(\"===> Started solr server port=\" + port + \" home=\"+getBaseDir());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d51e7db479b42602c7e23ba871b177387268179":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","733eaf468f18297b1bcc51031353bdfdd1913bdf"],"733eaf468f18297b1bcc51031353bdfdd1913bdf":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["4d51e7db479b42602c7e23ba871b177387268179"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"]},"commit2Childs":{"4d51e7db479b42602c7e23ba871b177387268179":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["4d51e7db479b42602c7e23ba871b177387268179"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cf1a614098b46c9c22afebd7b898ae4d1d2fc273","733eaf468f18297b1bcc51031353bdfdd1913bdf"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"733eaf468f18297b1bcc51031353bdfdd1913bdf":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}