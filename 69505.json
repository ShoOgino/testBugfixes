{"path":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkDVIterator(FieldInfo,int,DocValuesIteratorSupplier).mjava","commits":[{"id":"11134e449dabe11d6d0ff6a564d84b82cbe93722","date":1477299083,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkDVIterator(FieldInfo,int,DocValuesIteratorSupplier).mjava","pathOld":"/dev/null","sourceNew":"  private static void checkDVIterator(FieldInfo fi, int maxDoc, DocValuesIteratorSupplier producer) throws IOException {\n    String field = fi.name;\n\n    // Check advance\n    DocValuesIterator it1 = producer.get(fi);\n    DocValuesIterator it2 = producer.get(fi);\n    int i = 0;\n    for (int doc = it1.nextDoc(); ; doc = it1.nextDoc()) {\n\n      if (i++ % 10 == 1) {\n        int doc2 = it2.advance(doc - 1);\n        if (doc2 < doc - 1) {\n          throw new RuntimeException(\"dv iterator field=\" + field + \": doc=\" + (doc-1) + \" went backwords (got: \" + doc2 + \")\");\n        }\n        if (doc2 == doc - 1) {\n          doc2 = it2.nextDoc();\n        }\n        if (doc2 != doc) {\n          throw new RuntimeException(\"dv iterator field=\" + field + \": doc=\" + doc + \" was not found through advance() (got: \" + doc2 + \")\");\n        }\n        if (it2.docID() != doc) {\n          throw new RuntimeException(\"dv iterator field=\" + field + \": doc=\" + doc + \" reports wrong doc ID (got: \" + it2.docID() + \")\");\n        }\n      }\n\n      if (doc == NO_MORE_DOCS) {\n        break;\n      }\n    }\n\n    // Check advanceExact\n    it1 = producer.get(fi);\n    it2 = producer.get(fi);\n    i = 0;\n    int lastDoc = -1;\n    for (int doc = it1.nextDoc(); doc != NO_MORE_DOCS ; doc = it1.nextDoc()) {\n\n      if (i++ % 13 == 1) {\n        boolean found = it2.advanceExact(doc - 1);\n        if ((doc - 1 == lastDoc) != found) {\n          throw new RuntimeException(\"dv iterator field=\" + field + \": doc=\" + (doc-1) + \" disagrees about whether document exists (got: \" + found + \")\");\n        }\n        if (it2.docID() != doc - 1) {\n          throw new RuntimeException(\"dv iterator field=\" + field + \": doc=\" + (doc-1) + \" reports wrong doc ID (got: \" + it2.docID() + \")\");\n        }\n        \n        boolean found2 = it2.advanceExact(doc - 1);\n        if (found != found2) {\n          throw new RuntimeException(\"dv iterator field=\" + field + \": doc=\" + (doc-1) + \" has unstable advanceExact\");\n        }\n\n        if (i % 1 == 0) {\n          int doc2 = it2.nextDoc();\n          if (doc != doc2) {\n            throw new RuntimeException(\"dv iterator field=\" + field + \": doc=\" + doc + \" was not found through advance() (got: \" + doc2 + \")\");\n          }\n          if (it2.docID() != doc) {\n            throw new RuntimeException(\"dv iterator field=\" + field + \": doc=\" + doc + \" reports wrong doc ID (got: \" + it2.docID() + \")\");\n          }\n        }\n      }\n\n      lastDoc = doc;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["145f5e2aaab030809edc847355fc5a1b35954dcc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d2714c85633b642b29871cf5ff8d17d3ba7bfd76","date":1477307753,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkDVIterator(FieldInfo,int,DocValuesIteratorSupplier).mjava","pathOld":"/dev/null","sourceNew":"  private static void checkDVIterator(FieldInfo fi, int maxDoc, DocValuesIteratorSupplier producer) throws IOException {\n    String field = fi.name;\n\n    // Check advance\n    DocValuesIterator it1 = producer.get(fi);\n    DocValuesIterator it2 = producer.get(fi);\n    int i = 0;\n    for (int doc = it1.nextDoc(); ; doc = it1.nextDoc()) {\n\n      if (i++ % 10 == 1) {\n        int doc2 = it2.advance(doc - 1);\n        if (doc2 < doc - 1) {\n          throw new RuntimeException(\"dv iterator field=\" + field + \": doc=\" + (doc-1) + \" went backwords (got: \" + doc2 + \")\");\n        }\n        if (doc2 == doc - 1) {\n          doc2 = it2.nextDoc();\n        }\n        if (doc2 != doc) {\n          throw new RuntimeException(\"dv iterator field=\" + field + \": doc=\" + doc + \" was not found through advance() (got: \" + doc2 + \")\");\n        }\n        if (it2.docID() != doc) {\n          throw new RuntimeException(\"dv iterator field=\" + field + \": doc=\" + doc + \" reports wrong doc ID (got: \" + it2.docID() + \")\");\n        }\n      }\n\n      if (doc == NO_MORE_DOCS) {\n        break;\n      }\n    }\n\n    // Check advanceExact\n    it1 = producer.get(fi);\n    it2 = producer.get(fi);\n    i = 0;\n    int lastDoc = -1;\n    for (int doc = it1.nextDoc(); doc != NO_MORE_DOCS ; doc = it1.nextDoc()) {\n\n      if (i++ % 13 == 1) {\n        boolean found = it2.advanceExact(doc - 1);\n        if ((doc - 1 == lastDoc) != found) {\n          throw new RuntimeException(\"dv iterator field=\" + field + \": doc=\" + (doc-1) + \" disagrees about whether document exists (got: \" + found + \")\");\n        }\n        if (it2.docID() != doc - 1) {\n          throw new RuntimeException(\"dv iterator field=\" + field + \": doc=\" + (doc-1) + \" reports wrong doc ID (got: \" + it2.docID() + \")\");\n        }\n        \n        boolean found2 = it2.advanceExact(doc - 1);\n        if (found != found2) {\n          throw new RuntimeException(\"dv iterator field=\" + field + \": doc=\" + (doc-1) + \" has unstable advanceExact\");\n        }\n\n        if (i % 1 == 0) {\n          int doc2 = it2.nextDoc();\n          if (doc != doc2) {\n            throw new RuntimeException(\"dv iterator field=\" + field + \": doc=\" + doc + \" was not found through advance() (got: \" + doc2 + \")\");\n          }\n          if (it2.docID() != doc) {\n            throw new RuntimeException(\"dv iterator field=\" + field + \": doc=\" + doc + \" reports wrong doc ID (got: \" + it2.docID() + \")\");\n          }\n        }\n      }\n\n      lastDoc = doc;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkDVIterator(FieldInfo,int,DocValuesIteratorSupplier).mjava","pathOld":"/dev/null","sourceNew":"  private static void checkDVIterator(FieldInfo fi, int maxDoc, DocValuesIteratorSupplier producer) throws IOException {\n    String field = fi.name;\n\n    // Check advance\n    DocValuesIterator it1 = producer.get(fi);\n    DocValuesIterator it2 = producer.get(fi);\n    int i = 0;\n    for (int doc = it1.nextDoc(); ; doc = it1.nextDoc()) {\n\n      if (i++ % 10 == 1) {\n        int doc2 = it2.advance(doc - 1);\n        if (doc2 < doc - 1) {\n          throw new RuntimeException(\"dv iterator field=\" + field + \": doc=\" + (doc-1) + \" went backwords (got: \" + doc2 + \")\");\n        }\n        if (doc2 == doc - 1) {\n          doc2 = it2.nextDoc();\n        }\n        if (doc2 != doc) {\n          throw new RuntimeException(\"dv iterator field=\" + field + \": doc=\" + doc + \" was not found through advance() (got: \" + doc2 + \")\");\n        }\n        if (it2.docID() != doc) {\n          throw new RuntimeException(\"dv iterator field=\" + field + \": doc=\" + doc + \" reports wrong doc ID (got: \" + it2.docID() + \")\");\n        }\n      }\n\n      if (doc == NO_MORE_DOCS) {\n        break;\n      }\n    }\n\n    // Check advanceExact\n    it1 = producer.get(fi);\n    it2 = producer.get(fi);\n    i = 0;\n    int lastDoc = -1;\n    for (int doc = it1.nextDoc(); doc != NO_MORE_DOCS ; doc = it1.nextDoc()) {\n\n      if (i++ % 13 == 1) {\n        boolean found = it2.advanceExact(doc - 1);\n        if ((doc - 1 == lastDoc) != found) {\n          throw new RuntimeException(\"dv iterator field=\" + field + \": doc=\" + (doc-1) + \" disagrees about whether document exists (got: \" + found + \")\");\n        }\n        if (it2.docID() != doc - 1) {\n          throw new RuntimeException(\"dv iterator field=\" + field + \": doc=\" + (doc-1) + \" reports wrong doc ID (got: \" + it2.docID() + \")\");\n        }\n        \n        boolean found2 = it2.advanceExact(doc - 1);\n        if (found != found2) {\n          throw new RuntimeException(\"dv iterator field=\" + field + \": doc=\" + (doc-1) + \" has unstable advanceExact\");\n        }\n\n        if (i % 1 == 0) {\n          int doc2 = it2.nextDoc();\n          if (doc != doc2) {\n            throw new RuntimeException(\"dv iterator field=\" + field + \": doc=\" + doc + \" was not found through advance() (got: \" + doc2 + \")\");\n          }\n          if (it2.docID() != doc) {\n            throw new RuntimeException(\"dv iterator field=\" + field + \": doc=\" + doc + \" reports wrong doc ID (got: \" + it2.docID() + \")\");\n          }\n        }\n      }\n\n      lastDoc = doc;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"145f5e2aaab030809edc847355fc5a1b35954dcc","date":1513770484,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkDVIterator(FieldInfo,int,DocValuesIteratorSupplier).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkDVIterator(FieldInfo,int,DocValuesIteratorSupplier).mjava","sourceNew":"  private static void checkDVIterator(FieldInfo fi, int maxDoc, DocValuesIteratorSupplier producer) throws IOException {\n    String field = fi.name;\n\n    // Check advance\n    DocValuesIterator it1 = producer.get(fi);\n    DocValuesIterator it2 = producer.get(fi);\n    int i = 0;\n    for (int doc = it1.nextDoc(); ; doc = it1.nextDoc()) {\n\n      if (i++ % 10 == 1) {\n        int doc2 = it2.advance(doc - 1);\n        if (doc2 < doc - 1) {\n          throw new RuntimeException(\"dv iterator field=\" + field + \": doc=\" + (doc-1) + \" went backwords (got: \" + doc2 + \")\");\n        }\n        if (doc2 == doc - 1) {\n          doc2 = it2.nextDoc();\n        }\n        if (doc2 != doc) {\n          throw new RuntimeException(\"dv iterator field=\" + field + \": doc=\" + doc + \" was not found through advance() (got: \" + doc2 + \")\");\n        }\n        if (it2.docID() != doc) {\n          throw new RuntimeException(\"dv iterator field=\" + field + \": doc=\" + doc + \" reports wrong doc ID (got: \" + it2.docID() + \")\");\n        }\n      }\n\n      if (doc == NO_MORE_DOCS) {\n        break;\n      }\n    }\n\n    // Check advanceExact\n    it1 = producer.get(fi);\n    it2 = producer.get(fi);\n    i = 0;\n    int lastDoc = -1;\n    for (int doc = it1.nextDoc(); doc != NO_MORE_DOCS ; doc = it1.nextDoc()) {\n\n      if (i++ % 13 == 1) {\n        boolean found = it2.advanceExact(doc - 1);\n        if ((doc - 1 == lastDoc) != found) {\n          throw new RuntimeException(\"dv iterator field=\" + field + \": doc=\" + (doc-1) + \" disagrees about whether document exists (got: \" + found + \")\");\n        }\n        if (it2.docID() != doc - 1) {\n          throw new RuntimeException(\"dv iterator field=\" + field + \": doc=\" + (doc-1) + \" reports wrong doc ID (got: \" + it2.docID() + \")\");\n        }\n        \n        boolean found2 = it2.advanceExact(doc - 1);\n        if (found != found2) {\n          throw new RuntimeException(\"dv iterator field=\" + field + \": doc=\" + (doc-1) + \" has unstable advanceExact\");\n        }\n\n        if (i % 2 == 0) {\n          int doc2 = it2.nextDoc();\n          if (doc != doc2) {\n            throw new RuntimeException(\"dv iterator field=\" + field + \": doc=\" + doc + \" was not found through advance() (got: \" + doc2 + \")\");\n          }\n          if (it2.docID() != doc) {\n            throw new RuntimeException(\"dv iterator field=\" + field + \": doc=\" + doc + \" reports wrong doc ID (got: \" + it2.docID() + \")\");\n          }\n        }\n      }\n\n      lastDoc = doc;\n    }\n  }\n\n","sourceOld":"  private static void checkDVIterator(FieldInfo fi, int maxDoc, DocValuesIteratorSupplier producer) throws IOException {\n    String field = fi.name;\n\n    // Check advance\n    DocValuesIterator it1 = producer.get(fi);\n    DocValuesIterator it2 = producer.get(fi);\n    int i = 0;\n    for (int doc = it1.nextDoc(); ; doc = it1.nextDoc()) {\n\n      if (i++ % 10 == 1) {\n        int doc2 = it2.advance(doc - 1);\n        if (doc2 < doc - 1) {\n          throw new RuntimeException(\"dv iterator field=\" + field + \": doc=\" + (doc-1) + \" went backwords (got: \" + doc2 + \")\");\n        }\n        if (doc2 == doc - 1) {\n          doc2 = it2.nextDoc();\n        }\n        if (doc2 != doc) {\n          throw new RuntimeException(\"dv iterator field=\" + field + \": doc=\" + doc + \" was not found through advance() (got: \" + doc2 + \")\");\n        }\n        if (it2.docID() != doc) {\n          throw new RuntimeException(\"dv iterator field=\" + field + \": doc=\" + doc + \" reports wrong doc ID (got: \" + it2.docID() + \")\");\n        }\n      }\n\n      if (doc == NO_MORE_DOCS) {\n        break;\n      }\n    }\n\n    // Check advanceExact\n    it1 = producer.get(fi);\n    it2 = producer.get(fi);\n    i = 0;\n    int lastDoc = -1;\n    for (int doc = it1.nextDoc(); doc != NO_MORE_DOCS ; doc = it1.nextDoc()) {\n\n      if (i++ % 13 == 1) {\n        boolean found = it2.advanceExact(doc - 1);\n        if ((doc - 1 == lastDoc) != found) {\n          throw new RuntimeException(\"dv iterator field=\" + field + \": doc=\" + (doc-1) + \" disagrees about whether document exists (got: \" + found + \")\");\n        }\n        if (it2.docID() != doc - 1) {\n          throw new RuntimeException(\"dv iterator field=\" + field + \": doc=\" + (doc-1) + \" reports wrong doc ID (got: \" + it2.docID() + \")\");\n        }\n        \n        boolean found2 = it2.advanceExact(doc - 1);\n        if (found != found2) {\n          throw new RuntimeException(\"dv iterator field=\" + field + \": doc=\" + (doc-1) + \" has unstable advanceExact\");\n        }\n\n        if (i % 1 == 0) {\n          int doc2 = it2.nextDoc();\n          if (doc != doc2) {\n            throw new RuntimeException(\"dv iterator field=\" + field + \": doc=\" + doc + \" was not found through advance() (got: \" + doc2 + \")\");\n          }\n          if (it2.docID() != doc) {\n            throw new RuntimeException(\"dv iterator field=\" + field + \": doc=\" + doc + \" reports wrong doc ID (got: \" + it2.docID() + \")\");\n          }\n        }\n      }\n\n      lastDoc = doc;\n    }\n  }\n\n","bugFix":["11134e449dabe11d6d0ff6a564d84b82cbe93722"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"11134e449dabe11d6d0ff6a564d84b82cbe93722":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"145f5e2aaab030809edc847355fc5a1b35954dcc":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","11134e449dabe11d6d0ff6a564d84b82cbe93722"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["145f5e2aaab030809edc847355fc5a1b35954dcc"]},"commit2Childs":{"11134e449dabe11d6d0ff6a564d84b82cbe93722":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["11134e449dabe11d6d0ff6a564d84b82cbe93722","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"145f5e2aaab030809edc847355fc5a1b35954dcc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","145f5e2aaab030809edc847355fc5a1b35954dcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}