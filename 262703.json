{"path":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsReader#seekDir(IndexInput,long).mjava","commits":[{"id":"5ad80176d91a6f70fe93880e43dfd697dc4e63ed","date":1400176913,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsReader#seekDir(IndexInput,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader#seekDir(IndexInput,long).mjava","sourceNew":"  /** Seek {@code input} to the directory offset. */\n  private void seekDir(IndexInput input, long dirOffset)\n      throws IOException {\n    if (version >= BlockTreeTermsWriter.VERSION_CHECKSUM) {\n      input.seek(input.length() - CodecUtil.footerLength() - 8);\n      dirOffset = input.readLong();\n    } else if (version >= BlockTreeTermsWriter.VERSION_APPEND_ONLY) {\n      input.seek(input.length() - 8);\n      dirOffset = input.readLong();\n    }\n    input.seek(dirOffset);\n  }\n\n","sourceOld":"  /** Seek {@code input} to the directory offset. */\n  private void seekDir(IndexInput input, long dirOffset)\n      throws IOException {\n    if (version >= BlockTreeTermsWriter.VERSION_CHECKSUM) {\n      input.seek(input.length() - CodecUtil.footerLength() - 8);\n      dirOffset = input.readLong();\n    } else if (version >= BlockTreeTermsWriter.VERSION_APPEND_ONLY) {\n      input.seek(input.length() - 8);\n      dirOffset = input.readLong();\n    }\n    input.seek(dirOffset);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d637064d608752565d4f9f41b2497dfdfdde50e","date":1400798123,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsReader#seekDir(IndexInput,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader#seekDir(IndexInput,long).mjava","sourceNew":"  /** Seek {@code input} to the directory offset. */\n  private void seekDir(IndexInput input, long dirOffset)\n      throws IOException {\n    if (version >= BlockTreeTermsWriter.VERSION_CHECKSUM) {\n      input.seek(input.length() - CodecUtil.footerLength() - 8);\n      dirOffset = input.readLong();\n    } else if (version >= BlockTreeTermsWriter.VERSION_APPEND_ONLY) {\n      input.seek(input.length() - 8);\n      dirOffset = input.readLong();\n    }\n    input.seek(dirOffset);\n  }\n\n","sourceOld":"  /** Seek {@code input} to the directory offset. */\n  private void seekDir(IndexInput input, long dirOffset)\n      throws IOException {\n    if (version >= BlockTreeTermsWriter.VERSION_CHECKSUM) {\n      input.seek(input.length() - CodecUtil.footerLength() - 8);\n      dirOffset = input.readLong();\n    } else if (version >= BlockTreeTermsWriter.VERSION_APPEND_ONLY) {\n      input.seek(input.length() - 8);\n      dirOffset = input.readLong();\n    }\n    input.seek(dirOffset);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0628077afea69a2955260949478afabab8e500d8","date":1413915332,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsReader#seekDir(IndexInput,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsReader#seekDir(IndexInput,long).mjava","sourceNew":"  /** Seek {@code input} to the directory offset. */\n  private void seekDir(IndexInput input, long dirOffset)\n      throws IOException {\n    input.seek(input.length() - CodecUtil.footerLength() - 8);\n    dirOffset = input.readLong();\n    input.seek(dirOffset);\n  }\n\n","sourceOld":"  /** Seek {@code input} to the directory offset. */\n  private void seekDir(IndexInput input, long dirOffset)\n      throws IOException {\n    if (version >= BlockTreeTermsWriter.VERSION_CHECKSUM) {\n      input.seek(input.length() - CodecUtil.footerLength() - 8);\n      dirOffset = input.readLong();\n    } else if (version >= BlockTreeTermsWriter.VERSION_APPEND_ONLY) {\n      input.seek(input.length() - 8);\n      dirOffset = input.readLong();\n    }\n    input.seek(dirOffset);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsReader#seekDir(IndexInput,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsReader#seekDir(IndexInput,long).mjava","sourceNew":"  /** Seek {@code input} to the directory offset. */\n  private void seekDir(IndexInput input, long dirOffset)\n      throws IOException {\n    input.seek(input.length() - CodecUtil.footerLength() - 8);\n    dirOffset = input.readLong();\n    input.seek(dirOffset);\n  }\n\n","sourceOld":"  /** Seek {@code input} to the directory offset. */\n  private void seekDir(IndexInput input, long dirOffset)\n      throws IOException {\n    if (version >= BlockTreeTermsWriter.VERSION_CHECKSUM) {\n      input.seek(input.length() - CodecUtil.footerLength() - 8);\n      dirOffset = input.readLong();\n    } else if (version >= BlockTreeTermsWriter.VERSION_APPEND_ONLY) {\n      input.seek(input.length() - 8);\n      dirOffset = input.readLong();\n    }\n    input.seek(dirOffset);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8a04f59ee63f5c8b6c0486e823ed24346ddaa29","date":1496918402,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsReader#seekDir(IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsReader#seekDir(IndexInput,long).mjava","sourceNew":"  /** Seek {@code input} to the directory offset. */\n  private static void seekDir(IndexInput input) throws IOException {\n    input.seek(input.length() - CodecUtil.footerLength() - 8);\n    long offset = input.readLong();\n    input.seek(offset);\n  }\n\n","sourceOld":"  /** Seek {@code input} to the directory offset. */\n  private void seekDir(IndexInput input, long dirOffset)\n      throws IOException {\n    input.seek(input.length() - CodecUtil.footerLength() - 8);\n    dirOffset = input.readLong();\n    input.seek(dirOffset);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsReader#seekDir(IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsReader#seekDir(IndexInput,long).mjava","sourceNew":"  /** Seek {@code input} to the directory offset. */\n  private static void seekDir(IndexInput input) throws IOException {\n    input.seek(input.length() - CodecUtil.footerLength() - 8);\n    long offset = input.readLong();\n    input.seek(offset);\n  }\n\n","sourceOld":"  /** Seek {@code input} to the directory offset. */\n  private void seekDir(IndexInput input, long dirOffset)\n      throws IOException {\n    input.seek(input.length() - CodecUtil.footerLength() - 8);\n    dirOffset = input.readLong();\n    input.seek(dirOffset);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsReader#seekDir(IndexInput,long).mjava","sourceNew":null,"sourceOld":"  /** Seek {@code input} to the directory offset. */\n  private void seekDir(IndexInput input, long dirOffset)\n      throws IOException {\n    input.seek(input.length() - CodecUtil.footerLength() - 8);\n    dirOffset = input.readLong();\n    input.seek(dirOffset);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d637064d608752565d4f9f41b2497dfdfdde50e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5ad80176d91a6f70fe93880e43dfd697dc4e63ed"],"5ad80176d91a6f70fe93880e43dfd697dc4e63ed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["4d637064d608752565d4f9f41b2497dfdfdde50e","0628077afea69a2955260949478afabab8e500d8"],"0628077afea69a2955260949478afabab8e500d8":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"28288370235ed02234a64753cdbf0c6ec096304a":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","a8a04f59ee63f5c8b6c0486e823ed24346ddaa29"],"a8a04f59ee63f5c8b6c0486e823ed24346ddaa29":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","a8a04f59ee63f5c8b6c0486e823ed24346ddaa29"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"4d637064d608752565d4f9f41b2497dfdfdde50e":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","0628077afea69a2955260949478afabab8e500d8"],"5ad80176d91a6f70fe93880e43dfd697dc4e63ed":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d637064d608752565d4f9f41b2497dfdfdde50e","5ad80176d91a6f70fe93880e43dfd697dc4e63ed"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["28288370235ed02234a64753cdbf0c6ec096304a","a8a04f59ee63f5c8b6c0486e823ed24346ddaa29","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"0628077afea69a2955260949478afabab8e500d8":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a8a04f59ee63f5c8b6c0486e823ed24346ddaa29":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}