{"path":"lucene/facet/src/java/org/apache/lucene/facet/index/OrdinalMappingAtomicReader.OrdinalMappingDocsAndPositionsEnum#getPayload().mjava","commits":[{"id":"bc124b3b129ef11a255212f3af482b771c5b3a6c","date":1344947616,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/OrdinalMappingAtomicReader.OrdinalMappingDocsAndPositionsEnum#getPayload().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public BytesRef getPayload() throws IOException {\n      BytesRef payload = super.getPayload();\n      if (payload == null) {\n        return payload;\n      } else {\n        InputStream is = new ByteArrayInputStream(payload.bytes, payload.offset, payload.length);\n        decoder.reInit(is);\n        os.reset();\n        encoder.reInit(os);\n        long ordinal;\n        while ((ordinal = decoder.decode()) != IntDecoder.EOS) {\n          int newOrdinal = ordinalMap[(int)ordinal];\n          encoder.encode(newOrdinal);      \n        }\n        encoder.close();\n        // TODO (Facet): avoid copy?\n        byte out[] = os.toByteArray();\n        payloadOut.bytes = out;\n        payloadOut.offset = 0;\n        payloadOut.length = out.length;\n        return payloadOut;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/OrdinalMappingAtomicReader.OrdinalMappingDocsAndPositionsEnum#getPayload().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public BytesRef getPayload() throws IOException {\n      BytesRef payload = super.getPayload();\n      if (payload == null) {\n        return payload;\n      } else {\n        InputStream is = new ByteArrayInputStream(payload.bytes, payload.offset, payload.length);\n        decoder.reInit(is);\n        os.reset();\n        encoder.reInit(os);\n        long ordinal;\n        while ((ordinal = decoder.decode()) != IntDecoder.EOS) {\n          int newOrdinal = ordinalMap[(int)ordinal];\n          encoder.encode(newOrdinal);      \n        }\n        encoder.close();\n        // TODO (Facet): avoid copy?\n        byte out[] = os.toByteArray();\n        payloadOut.bytes = out;\n        payloadOut.offset = 0;\n        payloadOut.length = out.length;\n        return payloadOut;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/OrdinalMappingAtomicReader.OrdinalMappingDocsAndPositionsEnum#getPayload().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public BytesRef getPayload() throws IOException {\n      BytesRef payload = super.getPayload();\n      if (payload == null) {\n        return payload;\n      } else {\n        InputStream is = new ByteArrayInputStream(payload.bytes, payload.offset, payload.length);\n        decoder.reInit(is);\n        os.reset();\n        encoder.reInit(os);\n        long ordinal;\n        while ((ordinal = decoder.decode()) != IntDecoder.EOS) {\n          int newOrdinal = ordinalMap[(int)ordinal];\n          encoder.encode(newOrdinal);      \n        }\n        encoder.close();\n        // TODO (Facet): avoid copy?\n        byte out[] = os.toByteArray();\n        payloadOut.bytes = out;\n        payloadOut.offset = 0;\n        payloadOut.length = out.length;\n        return payloadOut;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bceb02c33032dd9bbf107cd06d0b74e5db4f110a","date":1357909746,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/OrdinalMappingAtomicReader.OrdinalMappingDocsAndPositionsEnum#getPayload().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/OrdinalMappingAtomicReader.OrdinalMappingDocsAndPositionsEnum#getPayload().mjava","sourceNew":"    @Override\n    public BytesRef getPayload() throws IOException {\n      BytesRef payload = super.getPayload();\n      if (payload == null) {\n        return payload;\n      } else {\n        decoder.decode(payload, ordinals);\n        \n        // map the ordinals\n        for (int i = 0; i < ordinals.length; i++) {\n          ordinals.ints[i] = ordinalMap[ordinals.ints[i]];\n        }\n        \n        encoder.encode(ordinals, payloadOut);\n        return payloadOut;\n      }\n    }\n\n","sourceOld":"    @Override\n    public BytesRef getPayload() throws IOException {\n      BytesRef payload = super.getPayload();\n      if (payload == null) {\n        return payload;\n      } else {\n        InputStream is = new ByteArrayInputStream(payload.bytes, payload.offset, payload.length);\n        decoder.reInit(is);\n        os.reset();\n        encoder.reInit(os);\n        long ordinal;\n        while ((ordinal = decoder.decode()) != IntDecoder.EOS) {\n          int newOrdinal = ordinalMap[(int)ordinal];\n          encoder.encode(newOrdinal);      \n        }\n        encoder.close();\n        // TODO (Facet): avoid copy?\n        byte out[] = os.toByteArray();\n        payloadOut.bytes = out;\n        payloadOut.offset = 0;\n        payloadOut.length = out.length;\n        return payloadOut;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/OrdinalMappingAtomicReader.OrdinalMappingDocsAndPositionsEnum#getPayload().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/OrdinalMappingAtomicReader.OrdinalMappingDocsAndPositionsEnum#getPayload().mjava","sourceNew":"    @Override\n    public BytesRef getPayload() throws IOException {\n      BytesRef payload = super.getPayload();\n      if (payload == null) {\n        return payload;\n      } else {\n        decoder.decode(payload, ordinals);\n        \n        // map the ordinals\n        for (int i = 0; i < ordinals.length; i++) {\n          ordinals.ints[i] = ordinalMap[ordinals.ints[i]];\n        }\n        \n        encoder.encode(ordinals, payloadOut);\n        return payloadOut;\n      }\n    }\n\n","sourceOld":"    @Override\n    public BytesRef getPayload() throws IOException {\n      BytesRef payload = super.getPayload();\n      if (payload == null) {\n        return payload;\n      } else {\n        InputStream is = new ByteArrayInputStream(payload.bytes, payload.offset, payload.length);\n        decoder.reInit(is);\n        os.reset();\n        encoder.reInit(os);\n        long ordinal;\n        while ((ordinal = decoder.decode()) != IntDecoder.EOS) {\n          int newOrdinal = ordinalMap[(int)ordinal];\n          encoder.encode(newOrdinal);      \n        }\n        encoder.close();\n        // TODO (Facet): avoid copy?\n        byte out[] = os.toByteArray();\n        payloadOut.bytes = out;\n        payloadOut.offset = 0;\n        payloadOut.length = out.length;\n        return payloadOut;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c2cd18c7da6f499a33f06fc89c07a463ec074c0","date":1358329431,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/OrdinalMappingAtomicReader.OrdinalMappingSource#getBytes(int,BytesRef).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/OrdinalMappingAtomicReader.OrdinalMappingDocsAndPositionsEnum#getPayload().mjava","sourceNew":"    @SuppressWarnings(\"synthetic-access\")\n    @Override\n    public BytesRef getBytes(int docID, BytesRef ref) {\n      ref = delegate.getBytes(docID, ref);\n      if (ref == null || ref.length == 0) {\n        return ref;\n      } else {\n        decoder.decode(ref, ordinals);\n        \n        // map the ordinals\n        for (int i = 0; i < ordinals.length; i++) {\n          ordinals.ints[i] = ordinalMap[ordinals.ints[i]];\n        }\n        \n        encoder.encode(ordinals, ref);\n        return ref;\n      }\n    }\n\n","sourceOld":"    @Override\n    public BytesRef getPayload() throws IOException {\n      BytesRef payload = super.getPayload();\n      if (payload == null) {\n        return payload;\n      } else {\n        decoder.decode(payload, ordinals);\n        \n        // map the ordinals\n        for (int i = 0; i < ordinals.length; i++) {\n          ordinals.ints[i] = ordinalMap[ordinals.ints[i]];\n        }\n        \n        encoder.encode(ordinals, payloadOut);\n        return payloadOut;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/OrdinalMappingAtomicReader.OrdinalMappingSource#getBytes(int,BytesRef).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/OrdinalMappingAtomicReader.OrdinalMappingDocsAndPositionsEnum#getPayload().mjava","sourceNew":"    @SuppressWarnings(\"synthetic-access\")\n    @Override\n    public BytesRef getBytes(int docID, BytesRef ref) {\n      ref = delegate.getBytes(docID, ref);\n      if (ref == null || ref.length == 0) {\n        return ref;\n      } else {\n        decoder.decode(ref, ordinals);\n        \n        // map the ordinals\n        for (int i = 0; i < ordinals.length; i++) {\n          ordinals.ints[i] = ordinalMap[ordinals.ints[i]];\n        }\n        \n        encoder.encode(ordinals, ref);\n        return ref;\n      }\n    }\n\n","sourceOld":"    @Override\n    public BytesRef getPayload() throws IOException {\n      BytesRef payload = super.getPayload();\n      if (payload == null) {\n        return payload;\n      } else {\n        decoder.decode(payload, ordinals);\n        \n        // map the ordinals\n        for (int i = 0; i < ordinals.length; i++) {\n          ordinals.ints[i] = ordinalMap[ordinals.ints[i]];\n        }\n        \n        encoder.encode(ordinals, payloadOut);\n        return payloadOut;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c4015cd39dff8d4dec562d909f9766debac53aa6":["4e6354dd7c71fe122926fc53d7d29f715b1283db","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"bceb02c33032dd9bbf107cd06d0b74e5db4f110a":["bc124b3b129ef11a255212f3af482b771c5b3a6c"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bc124b3b129ef11a255212f3af482b771c5b3a6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bc124b3b129ef11a255212f3af482b771c5b3a6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bc124b3b129ef11a255212f3af482b771c5b3a6c"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["bceb02c33032dd9bbf107cd06d0b74e5db4f110a"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["bc124b3b129ef11a255212f3af482b771c5b3a6c","bceb02c33032dd9bbf107cd06d0b74e5db4f110a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6c2cd18c7da6f499a33f06fc89c07a463ec074c0"]},"commit2Childs":{"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"bceb02c33032dd9bbf107cd06d0b74e5db4f110a":["6c2cd18c7da6f499a33f06fc89c07a463ec074c0","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","bc124b3b129ef11a255212f3af482b771c5b3a6c","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"bc124b3b129ef11a255212f3af482b771c5b3a6c":["bceb02c33032dd9bbf107cd06d0b74e5db4f110a","b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["c4015cd39dff8d4dec562d909f9766debac53aa6"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["c4015cd39dff8d4dec562d909f9766debac53aa6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c4015cd39dff8d4dec562d909f9766debac53aa6","b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}