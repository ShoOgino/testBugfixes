{"path":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","commits":[{"id":"3bf3bb51868790b9ae23c224583047716308a017","date":1473233468,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#doExtraTests(MiniSolrCloudCluster,SolrZkClient,ZkStateReader,CloudSolrClient,String).mjava","sourceNew":"  @Test\n  public void testBasicAuth() throws Exception {\n\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      randomJetty.start();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n      genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\",\"4\");\n      UpdateRequest update = new UpdateRequest();\n      update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      update.add(doc);\n      update.setCommitWithin(100);\n      cluster.getSolrClient().request(update, COLLECTION);\n\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + PKIAuthenticationPlugin.PATH + \"?wt=json\", \"key\", NOT_NULL_PREDICATE, 20);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void doExtraTests(MiniSolrCloudCluster miniCluster, SolrZkClient zkClient, ZkStateReader zkStateReader,\n                              CloudSolrClient cloudSolrClient, String defaultCollName) throws Exception {\n\n\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n\n    String old = cloudSolrClient.getDefaultCollection();\n    cloudSolrClient.setDefaultCollection(null);\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n      String baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient.setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      boolean found = false;\n      for (JettySolrRunner jettySolrRunner : miniCluster.getJettySolrRunners()) {\n        if(baseUrl.contains(String.valueOf(jettySolrRunner.getLocalPort()))){\n          found = true;\n          jettySolrRunner.stop();\n          jettySolrRunner.start();\n          verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n          break;\n        }\n      }\n\n      assertTrue(\"No server found to restart , looking for : \"+baseUrl , found);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n      genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n      try {\n        cloudSolrClient.request(genericReq);\n        fail(\"Should have failed with a 401\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n      }\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n\n      baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(defaultCollName);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cloudSolrClient.request(CollectionAdminRequest.reloadCollection(defaultCollName)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cloudSolrClient.request(CollectionAdminRequest.reloadCollection(defaultCollName)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n\n      cloudSolrClient.setDefaultCollection(old);\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\",\"4\");\n      UpdateRequest update = new UpdateRequest();\n      update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      update.add(doc);\n      update.setCommitWithin(100);\n      cloudSolrClient.request(update);\n\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + PKIAuthenticationPlugin.PATH + \"?wt=json\", \"key\", NOT_NULL_PREDICATE, 20);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5797edf204835cbec74c0ff24f0b9ebc8aa5441b","date":1473408169,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","sourceNew":"  @Test\n  public void testBasicAuth() throws Exception {\n\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      randomJetty.start(false);\n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n      genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\",\"4\");\n      UpdateRequest update = new UpdateRequest();\n      update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      update.add(doc);\n      update.setCommitWithin(100);\n      cluster.getSolrClient().request(update, COLLECTION);\n\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + PKIAuthenticationPlugin.PATH + \"?wt=json\", \"key\", NOT_NULL_PREDICATE, 20);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBasicAuth() throws Exception {\n\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      randomJetty.start();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n      genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\",\"4\");\n      UpdateRequest update = new UpdateRequest();\n      update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      update.add(doc);\n      update.setCommitWithin(100);\n      cluster.getSolrClient().request(update, COLLECTION);\n\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + PKIAuthenticationPlugin.PATH + \"?wt=json\", \"key\", NOT_NULL_PREDICATE, 20);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","bugFix":["3bf3bb51868790b9ae23c224583047716308a017"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89424def13674ea17829b41c5883c54ecc31a132","date":1473767373,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#doExtraTests(MiniSolrCloudCluster,SolrZkClient,ZkStateReader,CloudSolrClient,String).mjava","sourceNew":"  @Test\n  public void testBasicAuth() throws Exception {\n\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      randomJetty.start(false);\n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n      genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\",\"4\");\n      UpdateRequest update = new UpdateRequest();\n      update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      update.add(doc);\n      update.setCommitWithin(100);\n      cluster.getSolrClient().request(update, COLLECTION);\n\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + PKIAuthenticationPlugin.PATH + \"?wt=json\", \"key\", NOT_NULL_PREDICATE, 20);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void doExtraTests(MiniSolrCloudCluster miniCluster, SolrZkClient zkClient, ZkStateReader zkStateReader,\n                              CloudSolrClient cloudSolrClient, String defaultCollName) throws Exception {\n\n\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n\n    String old = cloudSolrClient.getDefaultCollection();\n    cloudSolrClient.setDefaultCollection(null);\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n      String baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient.setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      boolean found = false;\n      for (JettySolrRunner jettySolrRunner : miniCluster.getJettySolrRunners()) {\n        if(baseUrl.contains(String.valueOf(jettySolrRunner.getLocalPort()))){\n          found = true;\n          jettySolrRunner.stop();\n          jettySolrRunner.start();\n          verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n          break;\n        }\n      }\n\n      assertTrue(\"No server found to restart , looking for : \"+baseUrl , found);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n      genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n      try {\n        cloudSolrClient.request(genericReq);\n        fail(\"Should have failed with a 401\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n      }\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n\n      baseUrl = getRandomReplica(zkStateReader.getClusterState().getCollection(defaultCollName), random()).getStr(BASE_URL_PROP);\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(defaultCollName);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cloudSolrClient.request(CollectionAdminRequest.reloadCollection(defaultCollName)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cloudSolrClient.request(CollectionAdminRequest.reloadCollection(defaultCollName)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n\n      cloudSolrClient.setDefaultCollection(old);\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\",\"4\");\n      UpdateRequest update = new UpdateRequest();\n      update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      update.add(doc);\n      update.setCommitWithin(100);\n      cloudSolrClient.request(update);\n\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + PKIAuthenticationPlugin.PATH + \"?wt=json\", \"key\", NOT_NULL_PREDICATE, 20);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBasicAuth() throws Exception {\n\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      randomJetty.start(false);\n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n      genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\",\"4\");\n      UpdateRequest update = new UpdateRequest();\n      update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      update.add(doc);\n      update.setCommitWithin(100);\n      cluster.getSolrClient().request(update, COLLECTION);\n\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + PKIAuthenticationPlugin.PATH + \"?wt=json\", \"key\", NOT_NULL_PREDICATE, 20);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBasicAuth() throws Exception {\n\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      randomJetty.start(false);\n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n      genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\",\"4\");\n      UpdateRequest update = new UpdateRequest();\n      update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      update.add(doc);\n      update.setCommitWithin(100);\n      cluster.getSolrClient().request(update, COLLECTION);\n\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + PKIAuthenticationPlugin.PATH + \"?wt=json\", \"key\", NOT_NULL_PREDICATE, 20);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"88bc4985c282c4086425237f691ed9fb95021bbc","date":1477469197,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","sourceNew":"  @Test\n  public void testBasicAuth() throws Exception {\n\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      randomJetty.start(false);\n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n      genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\",\"4\");\n      UpdateRequest update = new UpdateRequest();\n      update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      update.add(doc);\n      update.setCommitWithin(100);\n      cluster.getSolrClient().request(update, COLLECTION);\n\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key?wt=json\", \"key\", NOT_NULL_PREDICATE, 20);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBasicAuth() throws Exception {\n\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      randomJetty.start(false);\n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n      genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\",\"4\");\n      UpdateRequest update = new UpdateRequest();\n      update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      update.add(doc);\n      update.setCommitWithin(100);\n      cluster.getSolrClient().request(update, COLLECTION);\n\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + PKIAuthenticationPlugin.PATH + \"?wt=json\", \"key\", NOT_NULL_PREDICATE, 20);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","sourceNew":"  @Test\n  public void testBasicAuth() throws Exception {\n\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      randomJetty.start(false);\n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n      genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\",\"4\");\n      UpdateRequest update = new UpdateRequest();\n      update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      update.add(doc);\n      update.setCommitWithin(100);\n      cluster.getSolrClient().request(update, COLLECTION);\n\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key?wt=json\", \"key\", NOT_NULL_PREDICATE, 20);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBasicAuth() throws Exception {\n\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      randomJetty.start(false);\n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n      genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\",\"4\");\n      UpdateRequest update = new UpdateRequest();\n      update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      update.add(doc);\n      update.setCommitWithin(100);\n      cluster.getSolrClient().request(update, COLLECTION);\n\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + PKIAuthenticationPlugin.PATH + \"?wt=json\", \"key\", NOT_NULL_PREDICATE, 20);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcf710a8fcd590cf55c855d422c7a10fce3e6117","date":1485842253,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","sourceNew":"  @Test\n  public void testBasicAuth() throws Exception {\n\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(random().nextBoolean()){\n      authcPrefix = \"/v2/cluster/security/authentication\";\n      authzPrefix = \"/v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      randomJetty.start(false);\n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n      genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\",\"4\");\n      UpdateRequest update = new UpdateRequest();\n      update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      update.add(doc);\n      update.setCommitWithin(100);\n      cluster.getSolrClient().request(update, COLLECTION);\n\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key?wt=json\", \"key\", NOT_NULL_PREDICATE, 20);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBasicAuth() throws Exception {\n\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      randomJetty.start(false);\n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n      genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\",\"4\");\n      UpdateRequest update = new UpdateRequest();\n      update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      update.add(doc);\n      update.setCommitWithin(100);\n      cluster.getSolrClient().request(update, COLLECTION);\n\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key?wt=json\", \"key\", NOT_NULL_PREDICATE, 20);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","sourceNew":"  @Test\n  public void testBasicAuth() throws Exception {\n\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(random().nextBoolean()){\n      authcPrefix = \"/v2/cluster/security/authentication\";\n      authzPrefix = \"/v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      randomJetty.start(false);\n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n      genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\",\"4\");\n      UpdateRequest update = new UpdateRequest();\n      update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      update.add(doc);\n      update.setCommitWithin(100);\n      cluster.getSolrClient().request(update, COLLECTION);\n\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key?wt=json\", \"key\", NOT_NULL_PREDICATE, 20);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBasicAuth() throws Exception {\n\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      randomJetty.start(false);\n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n      genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\",\"4\");\n      UpdateRequest update = new UpdateRequest();\n      update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      update.add(doc);\n      update.setCommitWithin(100);\n      cluster.getSolrClient().request(update, COLLECTION);\n\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key?wt=json\", \"key\", NOT_NULL_PREDICATE, 20);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ab788212d72a7c436e5ef349ca99fe3c8fc78b","date":1489203052,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","sourceNew":"  @Test\n  public void testBasicAuth() throws Exception {\n\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(random().nextBoolean()){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      randomJetty.start(false);\n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n      genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\",\"4\");\n      UpdateRequest update = new UpdateRequest();\n      update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      update.add(doc);\n      update.setCommitWithin(100);\n      cluster.getSolrClient().request(update, COLLECTION);\n\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key?wt=json\", \"key\", NOT_NULL_PREDICATE, 20);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBasicAuth() throws Exception {\n\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(random().nextBoolean()){\n      authcPrefix = \"/v2/cluster/security/authentication\";\n      authzPrefix = \"/v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      randomJetty.start(false);\n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n      genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\",\"4\");\n      UpdateRequest update = new UpdateRequest();\n      update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      update.add(doc);\n      update.setCommitWithin(100);\n      cluster.getSolrClient().request(update, COLLECTION);\n\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key?wt=json\", \"key\", NOT_NULL_PREDICATE, 20);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"767d389403b701039ee599ec2ac8a838f45d8cb7","date":1494468363,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","sourceNew":"  @Test\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      randomJetty.start(false);\n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n      }\n\n\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\",\"4\");\n      UpdateRequest update = new UpdateRequest();\n      update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      update.add(doc);\n      update.setCommitWithin(100);\n      cluster.getSolrClient().request(update, COLLECTION);\n\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key?wt=json\", \"key\", NOT_NULL_PREDICATE, 20);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBasicAuth() throws Exception {\n\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(random().nextBoolean()){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      randomJetty.start(false);\n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n      genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\",\"4\");\n      UpdateRequest update = new UpdateRequest();\n      update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      update.add(doc);\n      update.setCommitWithin(100);\n      cluster.getSolrClient().request(update, COLLECTION);\n\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key?wt=json\", \"key\", NOT_NULL_PREDICATE, 20);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b31ebc7a867ddea79d438a8fca876a94e644d11a","date":1494496172,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","sourceNew":"  @Test\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      randomJetty.start(false);\n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n      }\n\n\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\",\"4\");\n      UpdateRequest update = new UpdateRequest();\n      update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      update.add(doc);\n      update.setCommitWithin(100);\n      cluster.getSolrClient().request(update, COLLECTION);\n\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key?wt=json\", \"key\", NOT_NULL_PREDICATE, 20);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBasicAuth() throws Exception {\n\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(random().nextBoolean()){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      randomJetty.start(false);\n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n      genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\",\"4\");\n      UpdateRequest update = new UpdateRequest();\n      update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      update.add(doc);\n      update.setCommitWithin(100);\n      cluster.getSolrClient().request(update, COLLECTION);\n\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key?wt=json\", \"key\", NOT_NULL_PREDICATE, 20);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","sourceNew":"  @Test\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      randomJetty.start(false);\n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n      }\n\n\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\",\"4\");\n      UpdateRequest update = new UpdateRequest();\n      update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      update.add(doc);\n      update.setCommitWithin(100);\n      cluster.getSolrClient().request(update, COLLECTION);\n\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key?wt=json\", \"key\", NOT_NULL_PREDICATE, 20);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBasicAuth() throws Exception {\n\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(random().nextBoolean()){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      randomJetty.start(false);\n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      GenericSolrRequest genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n      genericReq.setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\",\"4\");\n      UpdateRequest update = new UpdateRequest();\n      update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      update.add(doc);\n      update.setCommitWithin(100);\n      cluster.getSolrClient().request(update, COLLECTION);\n\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key?wt=json\", \"key\", NOT_NULL_PREDICATE, 20);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac1e7fa558287a811ea07634d815ee7b1c541284","date":1500910922,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","sourceNew":"  @Test\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      randomJetty.start(false);\n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n      }\n\n\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\",\"4\");\n      UpdateRequest update = new UpdateRequest();\n      update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      update.add(doc);\n      update.setCommitWithin(100);\n      cluster.getSolrClient().request(update, COLLECTION);\n\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      randomJetty.start(false);\n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n      }\n\n\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\",\"4\");\n      UpdateRequest update = new UpdateRequest();\n      update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      update.add(doc);\n      update.setCommitWithin(100);\n      cluster.getSolrClient().request(update, COLLECTION);\n\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key?wt=json\", \"key\", NOT_NULL_PREDICATE, 20);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","sourceNew":"  @Test\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      randomJetty.start(false);\n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n      }\n\n\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\",\"4\");\n      UpdateRequest update = new UpdateRequest();\n      update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      update.add(doc);\n      update.setCommitWithin(100);\n      cluster.getSolrClient().request(update, COLLECTION);\n\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      randomJetty.start(false);\n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n      }\n\n\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\",\"4\");\n      UpdateRequest update = new UpdateRequest();\n      update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      update.add(doc);\n      update.setCommitWithin(100);\n      cluster.getSolrClient().request(update, COLLECTION);\n\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key?wt=json\", \"key\", NOT_NULL_PREDICATE, 20);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","sourceNew":"  @Test\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      randomJetty.start(false);\n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n      }\n\n\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\",\"4\");\n      UpdateRequest update = new UpdateRequest();\n      update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      update.add(doc);\n      update.setCommitWithin(100);\n      cluster.getSolrClient().request(update, COLLECTION);\n\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      randomJetty.start(false);\n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n      }\n\n\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\",\"4\");\n      UpdateRequest update = new UpdateRequest();\n      update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      update.add(doc);\n      update.setCommitWithin(100);\n      cluster.getSolrClient().request(update, COLLECTION);\n\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key?wt=json\", \"key\", NOT_NULL_PREDICATE, 20);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1294c21b1991388ed74f71be7130aeb17d48acbc","date":1510680317,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","sourceNew":"  @Test\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      randomJetty.start(false);\n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\",\"4\");\n      UpdateRequest update = new UpdateRequest();\n      update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      update.add(doc);\n      update.setCommitWithin(100);\n      cluster.getSolrClient().request(update, COLLECTION);\n\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      randomJetty.start(false);\n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentStreams(Collections.singletonList(new ContentStreamBase.ByteArrayStream(command.getBytes(UTF_8), \"\")));\n      }\n\n\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\",\"4\");\n      UpdateRequest update = new UpdateRequest();\n      update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      update.add(doc);\n      update.setCommitWithin(100);\n      cluster.getSolrClient().request(update, COLLECTION);\n\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43ad790248d7f7daee5d9cced548c546f37c7218","date":1527269998,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      randomJetty.start(false);\n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\",\"4\");\n      UpdateRequest update = new UpdateRequest();\n      update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      update.add(doc);\n      update.setCommitWithin(100);\n      cluster.getSolrClient().request(update, COLLECTION);\n\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      randomJetty.start(false);\n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\",\"4\");\n      UpdateRequest update = new UpdateRequest();\n      update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      update.add(doc);\n      update.setCommitWithin(100);\n      cluster.getSolrClient().request(update, COLLECTION);\n\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2d6b868457b26b5a2145b8441b1cfcfc0692b02","date":1534307099,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","sourceNew":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      randomJetty.start(false);\n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\",\"4\");\n      UpdateRequest update = new UpdateRequest();\n      update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      update.add(doc);\n      update.setCommitWithin(100);\n      cluster.getSolrClient().request(update, COLLECTION);\n\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      randomJetty.start(false);\n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\",\"4\");\n      UpdateRequest update = new UpdateRequest();\n      update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      update.add(doc);\n      update.setCommitWithin(100);\n      cluster.getSolrClient().request(update, COLLECTION);\n\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","sourceNew":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start(false);\n      \n      cluster.waitForAllNodes(30);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\",\"4\");\n      UpdateRequest update = new UpdateRequest();\n      update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      update.add(doc);\n      update.setCommitWithin(100);\n      cluster.getSolrClient().request(update, COLLECTION);\n\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      randomJetty.start(false);\n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\",\"4\");\n      UpdateRequest update = new UpdateRequest();\n      update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      update.add(doc);\n      update.setCommitWithin(100);\n      cluster.getSolrClient().request(update, COLLECTION);\n\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85397dd93927c17347c6bf89800cd0fc566c2d03","date":1544610812,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","sourceNew":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start(false);\n      \n      cluster.waitForAllNodes(30);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(6, 2, 4, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(9, 3, 6, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(11, 4, 7, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertAuthMetricsMinimums(15, 5, 9, 1, 0, 0);\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\",\"4\");\n      UpdateRequest update = new UpdateRequest();\n      update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      update.add(doc);\n      update.setCommitWithin(100);\n      cluster.getSolrClient().request(update, COLLECTION);\n\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(18, 8, 9, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(20, 8, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(4, 4, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(21, 9, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(7, 7, 0, 0, 0, 0);\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start(false);\n      \n      cluster.waitForAllNodes(30);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n\n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\",\"4\");\n      UpdateRequest update = new UpdateRequest();\n      update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      update.add(doc);\n      update.setCommitWithin(100);\n      cluster.getSolrClient().request(update, COLLECTION);\n\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb2fdf8e419623d01c2500e64f326b01ea4b760b","date":1544656477,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","sourceNew":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start(false);\n      \n      cluster.waitForAllNodes(30);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(6, 2, 4, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(9, 3, 6, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(11, 4, 7, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertAuthMetricsMinimums(15, 5, 9, 1, 0, 0);\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\",\"4\");\n      UpdateRequest update = new UpdateRequest();\n      update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      update.add(doc);\n      update.setCommitWithin(100);\n      cluster.getSolrClient().request(update, COLLECTION);\n\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(18, 8, 9, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(20, 8, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(21, 9, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(6, 6, 0, 0, 0, 0);\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start(false);\n      \n      cluster.waitForAllNodes(30);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(6, 2, 4, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(9, 3, 6, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(11, 4, 7, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertAuthMetricsMinimums(15, 5, 9, 1, 0, 0);\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\",\"4\");\n      UpdateRequest update = new UpdateRequest();\n      update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      update.add(doc);\n      update.setCommitWithin(100);\n      cluster.getSolrClient().request(update, COLLECTION);\n\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(18, 8, 9, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(20, 8, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(4, 4, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(21, 9, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(7, 7, 0, 0, 0, 0);\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db9b1bed7bcc60ad5785234a3fa3bf799f1e41fd","date":1544662223,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","sourceNew":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start();\n      \n      cluster.waitForAllNodes(30);\n      \n      cluster.waitForActiveCollection(COLLECTION, 3, 3);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n      // avoid bad connection races due to shutdown\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeExpiredConnections();\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeIdleConnections(1, TimeUnit.MILLISECONDS);\n      \n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(5, 2, 3, 0, 0, 0);\n\n      Thread.sleep(2000); // sad little wait to try and avoid other clients from hitting http noresponse after jetty restart\n      \n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(8, 3, 5, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(10, 4, 6, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertAuthMetricsMinimums(14, 5, 8, 1, 0, 0);\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\",\"4\");\n      UpdateRequest update = new UpdateRequest();\n      update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      update.add(doc);\n      update.setCommitWithin(100);\n      cluster.getSolrClient().request(update, COLLECTION);\n\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(17, 8, 8, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(19, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(20, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(5, 5, 0, 0, 0, 0);\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start(false);\n      \n      cluster.waitForAllNodes(30);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n\n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(6, 2, 4, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(9, 3, 6, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(11, 4, 7, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertAuthMetricsMinimums(15, 5, 9, 1, 0, 0);\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\",\"4\");\n      UpdateRequest update = new UpdateRequest();\n      update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      update.add(doc);\n      update.setCommitWithin(100);\n      cluster.getSolrClient().request(update, COLLECTION);\n\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(18, 8, 9, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(20, 8, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(21, 9, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(6, 6, 0, 0, 0, 0);\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4bb519c79b76e52145e37b6681a7012525ed5f4b","date":1544694716,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","sourceNew":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start();\n      \n      cluster.waitForAllNodes(30);\n      \n      cluster.waitForActiveCollection(COLLECTION, 3, 3);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n      // avoid bad connection races due to shutdown\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeExpiredConnections();\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeIdleConnections(1, TimeUnit.MILLISECONDS);\n      \n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(5, 2, 3, 0, 0, 0);\n\n      Thread.sleep(2000); // sad little wait to try and avoid other clients from hitting http noresponse after jetty restart\n      \n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(8, 3, 5, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(10, 4, 6, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertAuthMetricsMinimums(14, 5, 8, 1, 0, 0);\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"4\");\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(17, 8, 8, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(19, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(20, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"5\");\n      assertAuthMetricsMinimums(23, 11, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(14, 14, 0, 0, 0, 0);\n\n      // Validate forwardCredentials\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(24, 12, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(18, 18, 0, 0, 0, 0);\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { forwardCredentials: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/forwardCredentials\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(31, 19, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(18, 18, 0, 0, 0, 0);\n      \n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start();\n      \n      cluster.waitForAllNodes(30);\n      \n      cluster.waitForActiveCollection(COLLECTION, 3, 3);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n      // avoid bad connection races due to shutdown\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeExpiredConnections();\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeIdleConnections(1, TimeUnit.MILLISECONDS);\n      \n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(5, 2, 3, 0, 0, 0);\n\n      Thread.sleep(2000); // sad little wait to try and avoid other clients from hitting http noresponse after jetty restart\n      \n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(8, 3, 5, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(10, 4, 6, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertAuthMetricsMinimums(14, 5, 8, 1, 0, 0);\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\",\"4\");\n      UpdateRequest update = new UpdateRequest();\n      update.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      update.add(doc);\n      update.setCommitWithin(100);\n      cluster.getSolrClient().request(update, COLLECTION);\n\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(17, 8, 8, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(19, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(20, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(5, 5, 0, 0, 0, 0);\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["6bb1e55267dc3975be328fddeb53509a50d37457"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1a77e5e21cbd575a8240b0e3926164f15295f4e8","date":1544979500,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","sourceNew":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start();\n      \n      cluster.waitForAllNodes(30);\n      \n      cluster.waitForActiveCollection(COLLECTION, 3, 3);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n      // avoid bad connection races due to shutdown\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeExpiredConnections();\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeIdleConnections(1, TimeUnit.MILLISECONDS);\n      \n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(5, 2, 3, 0, 0, 0);\n\n      Thread.sleep(2000); // sad little wait to try and avoid other clients from hitting http noresponse after jetty restart\n      \n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(8, 3, 5, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(10, 4, 6, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertAuthMetricsMinimums(14, 5, 8, 1, 0, 0);\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      UpdateRequest del = new UpdateRequest().deleteByQuery(\"*:*\");\n      del.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      del.setCommitWithin(10);\n      del.process(cluster.getSolrClient(), COLLECTION);\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"4\");\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(17, 8, 8, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(19, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(20, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"5\");\n      assertAuthMetricsMinimums(23, 11, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(14, 14, 0, 0, 0, 0);\n\n      // Validate forwardCredentials\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(24, 12, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(18, 18, 0, 0, 0, 0);\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { forwardCredentials: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/forwardCredentials\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(31, 19, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(18, 18, 0, 0, 0, 0);\n      \n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start();\n      \n      cluster.waitForAllNodes(30);\n      \n      cluster.waitForActiveCollection(COLLECTION, 3, 3);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n      // avoid bad connection races due to shutdown\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeExpiredConnections();\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeIdleConnections(1, TimeUnit.MILLISECONDS);\n      \n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(5, 2, 3, 0, 0, 0);\n\n      Thread.sleep(2000); // sad little wait to try and avoid other clients from hitting http noresponse after jetty restart\n      \n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(8, 3, 5, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(10, 4, 6, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertAuthMetricsMinimums(14, 5, 8, 1, 0, 0);\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"4\");\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(17, 8, 8, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(19, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(20, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"5\");\n      assertAuthMetricsMinimums(23, 11, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(14, 14, 0, 0, 0, 0);\n\n      // Validate forwardCredentials\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(24, 12, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(18, 18, 0, 0, 0, 0);\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { forwardCredentials: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/forwardCredentials\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(31, 19, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(18, 18, 0, 0, 0, 0);\n      \n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8d35c84fdef07284c122012ca4000d3b7285a66e","date":1545962630,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","sourceNew":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start();\n      \n      cluster.waitForAllNodes(30);\n      \n      cluster.waitForActiveCollection(COLLECTION, 3, 3);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n      // avoid bad connection races due to shutdown\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeExpiredConnections();\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeIdleConnections(1, TimeUnit.MILLISECONDS);\n      \n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(5, 2, 3, 0, 0, 0);\n\n      Thread.sleep(2000); // sad little wait to try and avoid other clients from hitting http noresponse after jetty restart\n      \n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(8, 3, 5, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(10, 4, 6, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertAuthMetricsMinimums(14, 5, 8, 1, 0, 0);\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      UpdateRequest del = new UpdateRequest().deleteByQuery(\"*:*\");\n      del.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      del.setCommitWithin(10);\n      del.process(cluster.getSolrClient(), COLLECTION);\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"4\");\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(17, 8, 8, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(19, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(20, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"5\");\n      assertAuthMetricsMinimums(23, 11, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(14, 14, 0, 0, 0, 0);\n\n      // Validate forwardCredentials\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(24, 12, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(18, 18, 0, 0, 0, 0);\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { forwardCredentials: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/forwardCredentials\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(31, 19, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(18, 18, 0, 0, 0, 0);\n      \n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start();\n      \n      cluster.waitForAllNodes(30);\n      \n      cluster.waitForActiveCollection(COLLECTION, 3, 3);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n      // avoid bad connection races due to shutdown\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeExpiredConnections();\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeIdleConnections(1, TimeUnit.MILLISECONDS);\n      \n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(5, 2, 3, 0, 0, 0);\n\n      Thread.sleep(2000); // sad little wait to try and avoid other clients from hitting http noresponse after jetty restart\n      \n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(8, 3, 5, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(10, 4, 6, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertAuthMetricsMinimums(14, 5, 8, 1, 0, 0);\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      UpdateRequest del = new UpdateRequest().deleteByQuery(\"*:*\");\n      del.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      del.setCommitWithin(10);\n      del.process(cluster.getSolrClient(), COLLECTION);\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"4\");\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(17, 8, 8, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(19, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(20, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"5\");\n      assertAuthMetricsMinimums(23, 11, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(14, 14, 0, 0, 0, 0);\n\n      // Validate forwardCredentials\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(24, 12, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(18, 18, 0, 0, 0, 0);\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { forwardCredentials: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/forwardCredentials\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(31, 19, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(18, 18, 0, 0, 0, 0);\n      \n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5a10d4a0423ccdc7c84efa89beeef9a56c01d0e1","date":1546418643,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","sourceNew":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n//  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start();\n      \n      cluster.waitForAllNodes(30);\n      \n      cluster.waitForActiveCollection(COLLECTION, 3, 3);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n      // avoid bad connection races due to shutdown\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeExpiredConnections();\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeIdleConnections(1, TimeUnit.MILLISECONDS);\n      \n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(5, 2, 3, 0, 0, 0);\n\n      Thread.sleep(2000); // sad little wait to try and avoid other clients from hitting http noresponse after jetty restart\n      \n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(8, 3, 5, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(10, 4, 6, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertAuthMetricsMinimums(14, 5, 8, 1, 0, 0);\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      UpdateRequest del = new UpdateRequest().deleteByQuery(\"*:*\");\n      del.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      del.setCommitWithin(10);\n      del.process(cluster.getSolrClient(), COLLECTION);\n\n      //Test for SOLR-12514. Create a new jetty . This jetty does not have the collection.\n      //Make a request to that jetty and it should fail\n      JettySolrRunner aNewJetty = cluster.startJettySolrRunner();\n      try {\n        del = new UpdateRequest().deleteByQuery(\"*:*\");\n        del.process(aNewJetty.newClient(), COLLECTION);\n        fail(\"This should not have succeeded without credentials\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertTrue(e.getMessage().contains(\"Unauthorized request\"));\n      } finally {\n        cluster.stopJettySolrRunner(aNewJetty);\n      }\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"4\");\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(17, 8, 8, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(19, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(20, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"5\");\n      assertAuthMetricsMinimums(23, 11, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(14, 14, 0, 0, 0, 0);\n\n      // Validate forwardCredentials\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(24, 12, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(18, 18, 0, 0, 0, 0);\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { forwardCredentials: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/forwardCredentials\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(31, 19, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(18, 18, 0, 0, 0, 0);\n      \n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start();\n      \n      cluster.waitForAllNodes(30);\n      \n      cluster.waitForActiveCollection(COLLECTION, 3, 3);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n      // avoid bad connection races due to shutdown\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeExpiredConnections();\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeIdleConnections(1, TimeUnit.MILLISECONDS);\n      \n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(5, 2, 3, 0, 0, 0);\n\n      Thread.sleep(2000); // sad little wait to try and avoid other clients from hitting http noresponse after jetty restart\n      \n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(8, 3, 5, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(10, 4, 6, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertAuthMetricsMinimums(14, 5, 8, 1, 0, 0);\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      UpdateRequest del = new UpdateRequest().deleteByQuery(\"*:*\");\n      del.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      del.setCommitWithin(10);\n      del.process(cluster.getSolrClient(), COLLECTION);\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"4\");\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(17, 8, 8, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(19, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(20, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"5\");\n      assertAuthMetricsMinimums(23, 11, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(14, 14, 0, 0, 0, 0);\n\n      // Validate forwardCredentials\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(24, 12, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(18, 18, 0, 0, 0, 0);\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { forwardCredentials: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/forwardCredentials\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(31, 19, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(18, 18, 0, 0, 0, 0);\n      \n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["d450c0530a2765633277b632c29c54e190e3cb7e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cca96e80333ca9020d81619455b85e134d6d4622","date":1546418980,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","sourceNew":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start();\n      \n      cluster.waitForAllNodes(30);\n      \n      cluster.waitForActiveCollection(COLLECTION, 3, 3);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n      // avoid bad connection races due to shutdown\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeExpiredConnections();\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeIdleConnections(1, TimeUnit.MILLISECONDS);\n      \n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(5, 2, 3, 0, 0, 0);\n\n      Thread.sleep(2000); // sad little wait to try and avoid other clients from hitting http noresponse after jetty restart\n      \n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(8, 3, 5, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(10, 4, 6, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertAuthMetricsMinimums(14, 5, 8, 1, 0, 0);\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      UpdateRequest del = new UpdateRequest().deleteByQuery(\"*:*\");\n      del.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      del.setCommitWithin(10);\n      del.process(cluster.getSolrClient(), COLLECTION);\n\n      //Test for SOLR-12514. Create a new jetty . This jetty does not have the collection.\n      //Make a request to that jetty and it should fail\n      JettySolrRunner aNewJetty = cluster.startJettySolrRunner();\n      try {\n        del = new UpdateRequest().deleteByQuery(\"*:*\");\n        del.process(aNewJetty.newClient(), COLLECTION);\n        fail(\"This should not have succeeded without credentials\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertTrue(e.getMessage().contains(\"Unauthorized request\"));\n      } finally {\n        cluster.stopJettySolrRunner(aNewJetty);\n      }\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"4\");\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(17, 8, 8, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(19, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(20, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"5\");\n      assertAuthMetricsMinimums(23, 11, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(14, 14, 0, 0, 0, 0);\n\n      // Validate forwardCredentials\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(24, 12, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(18, 18, 0, 0, 0, 0);\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { forwardCredentials: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/forwardCredentials\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(31, 19, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(18, 18, 0, 0, 0, 0);\n      \n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n//  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start();\n      \n      cluster.waitForAllNodes(30);\n      \n      cluster.waitForActiveCollection(COLLECTION, 3, 3);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n      // avoid bad connection races due to shutdown\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeExpiredConnections();\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeIdleConnections(1, TimeUnit.MILLISECONDS);\n      \n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(5, 2, 3, 0, 0, 0);\n\n      Thread.sleep(2000); // sad little wait to try and avoid other clients from hitting http noresponse after jetty restart\n      \n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(8, 3, 5, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(10, 4, 6, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertAuthMetricsMinimums(14, 5, 8, 1, 0, 0);\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      UpdateRequest del = new UpdateRequest().deleteByQuery(\"*:*\");\n      del.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      del.setCommitWithin(10);\n      del.process(cluster.getSolrClient(), COLLECTION);\n\n      //Test for SOLR-12514. Create a new jetty . This jetty does not have the collection.\n      //Make a request to that jetty and it should fail\n      JettySolrRunner aNewJetty = cluster.startJettySolrRunner();\n      try {\n        del = new UpdateRequest().deleteByQuery(\"*:*\");\n        del.process(aNewJetty.newClient(), COLLECTION);\n        fail(\"This should not have succeeded without credentials\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertTrue(e.getMessage().contains(\"Unauthorized request\"));\n      } finally {\n        cluster.stopJettySolrRunner(aNewJetty);\n      }\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"4\");\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(17, 8, 8, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(19, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(20, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"5\");\n      assertAuthMetricsMinimums(23, 11, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(14, 14, 0, 0, 0, 0);\n\n      // Validate forwardCredentials\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(24, 12, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(18, 18, 0, 0, 0, 0);\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { forwardCredentials: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/forwardCredentials\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(31, 19, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(18, 18, 0, 0, 0, 0);\n      \n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4865c4af9862963461c8fa37140d7f1720c03a55","date":1546523971,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","sourceNew":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start();\n      \n      cluster.waitForAllNodes(30);\n      \n      cluster.waitForActiveCollection(COLLECTION, 3, 3);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n      // avoid bad connection races due to shutdown\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeExpiredConnections();\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeIdleConnections(1, TimeUnit.MILLISECONDS);\n      \n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(5, 2, 3, 0, 0, 0);\n\n      Thread.sleep(2000); // sad little wait to try and avoid other clients from hitting http noresponse after jetty restart\n      \n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(8, 3, 5, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(10, 4, 6, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertAuthMetricsMinimums(14, 5, 8, 1, 0, 0);\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      UpdateRequest del = new UpdateRequest().deleteByQuery(\"*:*\");\n      del.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      del.setCommitWithin(10);\n      del.process(cluster.getSolrClient(), COLLECTION);\n\n      //Test for SOLR-12514. Create a new jetty . This jetty does not have the collection.\n      //Make a request to that jetty and it should fail\n      JettySolrRunner aNewJetty = cluster.startJettySolrRunner();\n      SolrClient aNewClient = aNewJetty.newClient();\n      try {\n        del = new UpdateRequest().deleteByQuery(\"*:*\");\n        del.process(aNewClient, COLLECTION);\n        fail(\"This should not have succeeded without credentials\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertTrue(e.getMessage().contains(\"Unauthorized request\"));\n      } finally {\n        aNewClient.close();\n        cluster.stopJettySolrRunner(aNewJetty);\n      }\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"4\");\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(17, 8, 8, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(19, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(20, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"5\");\n      assertAuthMetricsMinimums(23, 11, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(14, 14, 0, 0, 0, 0);\n\n      // Validate forwardCredentials\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(24, 12, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(18, 18, 0, 0, 0, 0);\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { forwardCredentials: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/forwardCredentials\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(31, 19, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(18, 18, 0, 0, 0, 0);\n      \n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start();\n      \n      cluster.waitForAllNodes(30);\n      \n      cluster.waitForActiveCollection(COLLECTION, 3, 3);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n      // avoid bad connection races due to shutdown\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeExpiredConnections();\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeIdleConnections(1, TimeUnit.MILLISECONDS);\n      \n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(5, 2, 3, 0, 0, 0);\n\n      Thread.sleep(2000); // sad little wait to try and avoid other clients from hitting http noresponse after jetty restart\n      \n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(8, 3, 5, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(10, 4, 6, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertAuthMetricsMinimums(14, 5, 8, 1, 0, 0);\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      UpdateRequest del = new UpdateRequest().deleteByQuery(\"*:*\");\n      del.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      del.setCommitWithin(10);\n      del.process(cluster.getSolrClient(), COLLECTION);\n\n      //Test for SOLR-12514. Create a new jetty . This jetty does not have the collection.\n      //Make a request to that jetty and it should fail\n      JettySolrRunner aNewJetty = cluster.startJettySolrRunner();\n      try {\n        del = new UpdateRequest().deleteByQuery(\"*:*\");\n        del.process(aNewJetty.newClient(), COLLECTION);\n        fail(\"This should not have succeeded without credentials\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertTrue(e.getMessage().contains(\"Unauthorized request\"));\n      } finally {\n        cluster.stopJettySolrRunner(aNewJetty);\n      }\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"4\");\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(17, 8, 8, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(19, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(20, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"5\");\n      assertAuthMetricsMinimums(23, 11, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(14, 14, 0, 0, 0, 0);\n\n      // Validate forwardCredentials\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(24, 12, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(18, 18, 0, 0, 0, 0);\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { forwardCredentials: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/forwardCredentials\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(31, 19, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(18, 18, 0, 0, 0, 0);\n      \n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0094db1bc17297deebfd847f9aa10d42a7b987e5","date":1546573852,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","sourceNew":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start();\n      \n      cluster.waitForAllNodes(30);\n      \n      cluster.waitForActiveCollection(COLLECTION, 3, 3);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n      // avoid bad connection races due to shutdown\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeExpiredConnections();\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeIdleConnections(1, TimeUnit.MILLISECONDS);\n      \n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(5, 2, 3, 0, 0, 0);\n\n      Thread.sleep(2000); // sad little wait to try and avoid other clients from hitting http noresponse after jetty restart\n      \n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(8, 3, 5, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(10, 4, 6, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertAuthMetricsMinimums(14, 5, 8, 1, 0, 0);\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      UpdateRequest del = new UpdateRequest().deleteByQuery(\"*:*\");\n      del.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      del.setCommitWithin(10);\n      del.process(cluster.getSolrClient(), COLLECTION);\n\n      //Test for SOLR-12514. Create a new jetty . This jetty does not have the collection.\n      //Make a request to that jetty and it should fail\n      JettySolrRunner aNewJetty = cluster.startJettySolrRunner();\n      SolrClient aNewClient = aNewJetty.newClient();\n      try {\n        UpdateRequest delQuery = null;\n        delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n        del.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n        delQuery.process(aNewClient, COLLECTION);//this should succeed\n\n        delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n        delQuery.process(aNewClient, COLLECTION);\n        fail(\"This should not have succeeded without credentials\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertTrue(e.getMessage().contains(\"Unauthorized request\"));\n      } finally {\n        aNewClient.close();\n        cluster.stopJettySolrRunner(aNewJetty);\n      }\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"4\");\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(17, 8, 8, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(19, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(20, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"5\");\n      assertAuthMetricsMinimums(23, 11, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(14, 14, 0, 0, 0, 0);\n\n      // Validate forwardCredentials\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(24, 12, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(18, 18, 0, 0, 0, 0);\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { forwardCredentials: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/forwardCredentials\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(31, 19, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(18, 18, 0, 0, 0, 0);\n      \n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start();\n      \n      cluster.waitForAllNodes(30);\n      \n      cluster.waitForActiveCollection(COLLECTION, 3, 3);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n      // avoid bad connection races due to shutdown\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeExpiredConnections();\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeIdleConnections(1, TimeUnit.MILLISECONDS);\n      \n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(5, 2, 3, 0, 0, 0);\n\n      Thread.sleep(2000); // sad little wait to try and avoid other clients from hitting http noresponse after jetty restart\n      \n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(8, 3, 5, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(10, 4, 6, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertAuthMetricsMinimums(14, 5, 8, 1, 0, 0);\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      UpdateRequest del = new UpdateRequest().deleteByQuery(\"*:*\");\n      del.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      del.setCommitWithin(10);\n      del.process(cluster.getSolrClient(), COLLECTION);\n\n      //Test for SOLR-12514. Create a new jetty . This jetty does not have the collection.\n      //Make a request to that jetty and it should fail\n      JettySolrRunner aNewJetty = cluster.startJettySolrRunner();\n      SolrClient aNewClient = aNewJetty.newClient();\n      try {\n        del = new UpdateRequest().deleteByQuery(\"*:*\");\n        del.process(aNewClient, COLLECTION);\n        fail(\"This should not have succeeded without credentials\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertTrue(e.getMessage().contains(\"Unauthorized request\"));\n      } finally {\n        aNewClient.close();\n        cluster.stopJettySolrRunner(aNewJetty);\n      }\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"4\");\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(17, 8, 8, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(19, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(20, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"5\");\n      assertAuthMetricsMinimums(23, 11, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(14, 14, 0, 0, 0, 0);\n\n      // Validate forwardCredentials\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(24, 12, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(18, 18, 0, 0, 0, 0);\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { forwardCredentials: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/forwardCredentials\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(31, 19, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(18, 18, 0, 0, 0, 0);\n      \n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["16a1bbda4a49d74d4c9df2eba45b180565fffeab"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d8207e91facaea9baa165547a003b8b5a8ad74a8","date":1546574177,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","sourceNew":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start();\n      \n      cluster.waitForAllNodes(30);\n      \n      cluster.waitForActiveCollection(COLLECTION, 3, 3);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n      // avoid bad connection races due to shutdown\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeExpiredConnections();\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeIdleConnections(1, TimeUnit.MILLISECONDS);\n      \n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(5, 2, 3, 0, 0, 0);\n\n      Thread.sleep(2000); // sad little wait to try and avoid other clients from hitting http noresponse after jetty restart\n      \n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(8, 3, 5, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(10, 4, 6, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertAuthMetricsMinimums(14, 5, 8, 1, 0, 0);\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      UpdateRequest del = new UpdateRequest().deleteByQuery(\"*:*\");\n      del.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      del.setCommitWithin(10);\n      del.process(cluster.getSolrClient(), COLLECTION);\n\n      //Test for SOLR-12514. Create a new jetty . This jetty does not have the collection.\n      //Make a request to that jetty and it should fail\n      JettySolrRunner aNewJetty = cluster.startJettySolrRunner();\n      SolrClient aNewClient = aNewJetty.newClient();\n      try {\n        UpdateRequest delQuery = null;\n        delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n        delQuery.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n        delQuery.process(aNewClient, COLLECTION);//this should succeed\n\n        delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n        delQuery.process(aNewClient, COLLECTION);\n        fail(\"This should not have succeeded without credentials\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertTrue(e.getMessage().contains(\"Unauthorized request\"));\n      } finally {\n        aNewClient.close();\n        cluster.stopJettySolrRunner(aNewJetty);\n      }\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"4\");\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(17, 8, 8, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(19, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(20, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"5\");\n      assertAuthMetricsMinimums(23, 11, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(14, 14, 0, 0, 0, 0);\n\n      // Validate forwardCredentials\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(24, 12, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(18, 18, 0, 0, 0, 0);\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { forwardCredentials: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/forwardCredentials\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(31, 19, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(18, 18, 0, 0, 0, 0);\n      \n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start();\n      \n      cluster.waitForAllNodes(30);\n      \n      cluster.waitForActiveCollection(COLLECTION, 3, 3);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n      // avoid bad connection races due to shutdown\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeExpiredConnections();\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeIdleConnections(1, TimeUnit.MILLISECONDS);\n      \n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(5, 2, 3, 0, 0, 0);\n\n      Thread.sleep(2000); // sad little wait to try and avoid other clients from hitting http noresponse after jetty restart\n      \n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(8, 3, 5, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(10, 4, 6, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertAuthMetricsMinimums(14, 5, 8, 1, 0, 0);\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      UpdateRequest del = new UpdateRequest().deleteByQuery(\"*:*\");\n      del.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      del.setCommitWithin(10);\n      del.process(cluster.getSolrClient(), COLLECTION);\n\n      //Test for SOLR-12514. Create a new jetty . This jetty does not have the collection.\n      //Make a request to that jetty and it should fail\n      JettySolrRunner aNewJetty = cluster.startJettySolrRunner();\n      SolrClient aNewClient = aNewJetty.newClient();\n      try {\n        UpdateRequest delQuery = null;\n        delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n        del.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n        delQuery.process(aNewClient, COLLECTION);//this should succeed\n\n        delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n        delQuery.process(aNewClient, COLLECTION);\n        fail(\"This should not have succeeded without credentials\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertTrue(e.getMessage().contains(\"Unauthorized request\"));\n      } finally {\n        aNewClient.close();\n        cluster.stopJettySolrRunner(aNewJetty);\n      }\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"4\");\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(17, 8, 8, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(19, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(20, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"5\");\n      assertAuthMetricsMinimums(23, 11, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(14, 14, 0, 0, 0, 0);\n\n      // Validate forwardCredentials\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(24, 12, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(18, 18, 0, 0, 0, 0);\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { forwardCredentials: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/forwardCredentials\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(31, 19, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(18, 18, 0, 0, 0, 0);\n      \n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["16a1bbda4a49d74d4c9df2eba45b180565fffeab"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"16a1bbda4a49d74d4c9df2eba45b180565fffeab","date":1546677088,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","sourceNew":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start();\n      \n      cluster.waitForAllNodes(30);\n      \n      cluster.waitForActiveCollection(COLLECTION, 3, 3);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n      // avoid bad connection races due to shutdown\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeExpiredConnections();\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeIdleConnections(1, TimeUnit.MILLISECONDS);\n      \n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(5, 2, 3, 0, 0, 0);\n\n      Thread.sleep(2000); // sad little wait to try and avoid other clients from hitting http noresponse after jetty restart\n      \n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(8, 3, 5, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(10, 4, 6, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertAuthMetricsMinimums(14, 5, 8, 1, 0, 0);\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      UpdateRequest del = new UpdateRequest().deleteByQuery(\"*:*\");\n      del.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      del.setCommitWithin(10);\n      del.process(cluster.getSolrClient(), COLLECTION);\n\n      //Test for SOLR-12514. Create a new jetty . This jetty does not have the collection.\n      //Make a request to that jetty and it should fail\n      JettySolrRunner aNewJetty = cluster.startJettySolrRunner();\n      SolrClient aNewClient = aNewJetty.newClient();\n      UpdateRequest delQuery = null;\n      delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n      delQuery.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      delQuery.process(aNewClient, COLLECTION);//this should succeed\n      try {\n        delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n        delQuery.process(aNewClient, COLLECTION);\n        fail(\"This should not have succeeded without credentials\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertTrue(e.getMessage().contains(\"Unauthorized request\"));\n      } finally {\n        aNewClient.close();\n        cluster.stopJettySolrRunner(aNewJetty);\n      }\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"4\");\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(17, 8, 8, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(19, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(20, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"5\");\n      assertAuthMetricsMinimums(23, 11, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(14, 14, 0, 0, 0, 0);\n\n      // Validate forwardCredentials\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(24, 12, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(18, 18, 0, 0, 0, 0);\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { forwardCredentials: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/forwardCredentials\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(31, 19, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(18, 18, 0, 0, 0, 0);\n      \n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start();\n      \n      cluster.waitForAllNodes(30);\n      \n      cluster.waitForActiveCollection(COLLECTION, 3, 3);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n      // avoid bad connection races due to shutdown\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeExpiredConnections();\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeIdleConnections(1, TimeUnit.MILLISECONDS);\n      \n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(5, 2, 3, 0, 0, 0);\n\n      Thread.sleep(2000); // sad little wait to try and avoid other clients from hitting http noresponse after jetty restart\n      \n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(8, 3, 5, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(10, 4, 6, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertAuthMetricsMinimums(14, 5, 8, 1, 0, 0);\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      UpdateRequest del = new UpdateRequest().deleteByQuery(\"*:*\");\n      del.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      del.setCommitWithin(10);\n      del.process(cluster.getSolrClient(), COLLECTION);\n\n      //Test for SOLR-12514. Create a new jetty . This jetty does not have the collection.\n      //Make a request to that jetty and it should fail\n      JettySolrRunner aNewJetty = cluster.startJettySolrRunner();\n      SolrClient aNewClient = aNewJetty.newClient();\n      try {\n        UpdateRequest delQuery = null;\n        delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n        delQuery.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n        delQuery.process(aNewClient, COLLECTION);//this should succeed\n\n        delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n        delQuery.process(aNewClient, COLLECTION);\n        fail(\"This should not have succeeded without credentials\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertTrue(e.getMessage().contains(\"Unauthorized request\"));\n      } finally {\n        aNewClient.close();\n        cluster.stopJettySolrRunner(aNewJetty);\n      }\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"4\");\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(17, 8, 8, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(19, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(20, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"5\");\n      assertAuthMetricsMinimums(23, 11, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(14, 14, 0, 0, 0, 0);\n\n      // Validate forwardCredentials\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(24, 12, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(18, 18, 0, 0, 0, 0);\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { forwardCredentials: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/forwardCredentials\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(31, 19, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(18, 18, 0, 0, 0, 0);\n      \n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","bugFix":["d8207e91facaea9baa165547a003b8b5a8ad74a8","0094db1bc17297deebfd847f9aa10d42a7b987e5"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb3e075eaa5788b2762ec235bf72b069cefe3f50","date":1548244981,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","sourceNew":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start();\n      \n      cluster.waitForAllNodes(30);\n      \n      cluster.waitForActiveCollection(COLLECTION, 3, 3);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n      // avoid bad connection races due to shutdown\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeExpiredConnections();\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeIdleConnections(1, TimeUnit.MILLISECONDS);\n      \n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setAuthorizationHeader(httpPost, makeBasicAuthHeader(\"solr\", \"SolrRocks\"));\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(5, 2, 3, 0, 0, 0);\n\n      Thread.sleep(2000); // sad little wait to try and avoid other clients from hitting http noresponse after jetty restart\n      \n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(8, 3, 5, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(10, 4, 6, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertAuthMetricsMinimums(14, 5, 8, 1, 0, 0);\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      UpdateRequest del = new UpdateRequest().deleteByQuery(\"*:*\");\n      del.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      del.setCommitWithin(10);\n      del.process(cluster.getSolrClient(), COLLECTION);\n\n      //Test for SOLR-12514. Create a new jetty . This jetty does not have the collection.\n      //Make a request to that jetty and it should fail\n      JettySolrRunner aNewJetty = cluster.startJettySolrRunner();\n      SolrClient aNewClient = aNewJetty.newClient();\n      UpdateRequest delQuery = null;\n      delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n      delQuery.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      delQuery.process(aNewClient, COLLECTION);//this should succeed\n      try {\n        delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n        delQuery.process(aNewClient, COLLECTION);\n        fail(\"This should not have succeeded without credentials\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertTrue(e.getMessage().contains(\"Unauthorized request\"));\n      } finally {\n        aNewClient.close();\n        cluster.stopJettySolrRunner(aNewJetty);\n      }\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"4\");\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(17, 8, 8, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(19, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(20, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"5\");\n      assertAuthMetricsMinimums(23, 11, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(14, 14, 0, 0, 0, 0);\n\n      // Validate forwardCredentials\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(24, 12, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(18, 18, 0, 0, 0, 0);\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { forwardCredentials: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/forwardCredentials\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(31, 19, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(18, 18, 0, 0, 0, 0);\n      \n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start();\n      \n      cluster.waitForAllNodes(30);\n      \n      cluster.waitForActiveCollection(COLLECTION, 3, 3);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n      // avoid bad connection races due to shutdown\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeExpiredConnections();\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeIdleConnections(1, TimeUnit.MILLISECONDS);\n      \n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(5, 2, 3, 0, 0, 0);\n\n      Thread.sleep(2000); // sad little wait to try and avoid other clients from hitting http noresponse after jetty restart\n      \n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(8, 3, 5, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(10, 4, 6, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertAuthMetricsMinimums(14, 5, 8, 1, 0, 0);\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      UpdateRequest del = new UpdateRequest().deleteByQuery(\"*:*\");\n      del.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      del.setCommitWithin(10);\n      del.process(cluster.getSolrClient(), COLLECTION);\n\n      //Test for SOLR-12514. Create a new jetty . This jetty does not have the collection.\n      //Make a request to that jetty and it should fail\n      JettySolrRunner aNewJetty = cluster.startJettySolrRunner();\n      SolrClient aNewClient = aNewJetty.newClient();\n      UpdateRequest delQuery = null;\n      delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n      delQuery.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      delQuery.process(aNewClient, COLLECTION);//this should succeed\n      try {\n        delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n        delQuery.process(aNewClient, COLLECTION);\n        fail(\"This should not have succeeded without credentials\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertTrue(e.getMessage().contains(\"Unauthorized request\"));\n      } finally {\n        aNewClient.close();\n        cluster.stopJettySolrRunner(aNewJetty);\n      }\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"4\");\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(17, 8, 8, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(19, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(20, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"5\");\n      assertAuthMetricsMinimums(23, 11, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(14, 14, 0, 0, 0, 0);\n\n      // Validate forwardCredentials\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(24, 12, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(18, 18, 0, 0, 0, 0);\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { forwardCredentials: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/forwardCredentials\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(31, 19, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(18, 18, 0, 0, 0, 0);\n      \n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2682a1cd25864ccdc1b44bf047bd08700f28ba06","date":1548321910,"type":3,"author":"Tommaso Teofili","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","sourceNew":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start();\n      \n      cluster.waitForAllNodes(30);\n      \n      cluster.waitForActiveCollection(COLLECTION, 3, 3);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n      // avoid bad connection races due to shutdown\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeExpiredConnections();\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeIdleConnections(1, TimeUnit.MILLISECONDS);\n      \n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setAuthorizationHeader(httpPost, makeBasicAuthHeader(\"solr\", \"SolrRocks\"));\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(5, 2, 3, 0, 0, 0);\n\n      Thread.sleep(2000); // sad little wait to try and avoid other clients from hitting http noresponse after jetty restart\n      \n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(8, 3, 5, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(10, 4, 6, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertAuthMetricsMinimums(14, 5, 8, 1, 0, 0);\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      UpdateRequest del = new UpdateRequest().deleteByQuery(\"*:*\");\n      del.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      del.setCommitWithin(10);\n      del.process(cluster.getSolrClient(), COLLECTION);\n\n      //Test for SOLR-12514. Create a new jetty . This jetty does not have the collection.\n      //Make a request to that jetty and it should fail\n      JettySolrRunner aNewJetty = cluster.startJettySolrRunner();\n      SolrClient aNewClient = aNewJetty.newClient();\n      UpdateRequest delQuery = null;\n      delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n      delQuery.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      delQuery.process(aNewClient, COLLECTION);//this should succeed\n      try {\n        delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n        delQuery.process(aNewClient, COLLECTION);\n        fail(\"This should not have succeeded without credentials\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertTrue(e.getMessage().contains(\"Unauthorized request\"));\n      } finally {\n        aNewClient.close();\n        cluster.stopJettySolrRunner(aNewJetty);\n      }\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"4\");\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(17, 8, 8, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(19, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(20, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"5\");\n      assertAuthMetricsMinimums(23, 11, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(14, 14, 0, 0, 0, 0);\n\n      // Validate forwardCredentials\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(24, 12, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(18, 18, 0, 0, 0, 0);\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { forwardCredentials: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/forwardCredentials\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(31, 19, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(18, 18, 0, 0, 0, 0);\n      \n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start();\n      \n      cluster.waitForAllNodes(30);\n      \n      cluster.waitForActiveCollection(COLLECTION, 3, 3);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n      // avoid bad connection races due to shutdown\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeExpiredConnections();\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeIdleConnections(1, TimeUnit.MILLISECONDS);\n      \n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setBasicAuthHeader(httpPost, \"solr\", \"SolrRocks\");\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(5, 2, 3, 0, 0, 0);\n\n      Thread.sleep(2000); // sad little wait to try and avoid other clients from hitting http noresponse after jetty restart\n      \n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(8, 3, 5, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(10, 4, 6, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertAuthMetricsMinimums(14, 5, 8, 1, 0, 0);\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      UpdateRequest del = new UpdateRequest().deleteByQuery(\"*:*\");\n      del.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      del.setCommitWithin(10);\n      del.process(cluster.getSolrClient(), COLLECTION);\n\n      //Test for SOLR-12514. Create a new jetty . This jetty does not have the collection.\n      //Make a request to that jetty and it should fail\n      JettySolrRunner aNewJetty = cluster.startJettySolrRunner();\n      SolrClient aNewClient = aNewJetty.newClient();\n      UpdateRequest delQuery = null;\n      delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n      delQuery.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      delQuery.process(aNewClient, COLLECTION);//this should succeed\n      try {\n        delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n        delQuery.process(aNewClient, COLLECTION);\n        fail(\"This should not have succeeded without credentials\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertTrue(e.getMessage().contains(\"Unauthorized request\"));\n      } finally {\n        aNewClient.close();\n        cluster.stopJettySolrRunner(aNewJetty);\n      }\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"4\");\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(17, 8, 8, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(19, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(20, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"5\");\n      assertAuthMetricsMinimums(23, 11, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(14, 14, 0, 0, 0, 0);\n\n      // Validate forwardCredentials\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(24, 12, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(18, 18, 0, 0, 0, 0);\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { forwardCredentials: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/forwardCredentials\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(31, 19, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(18, 18, 0, 0, 0, 0);\n      \n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5c929d2716fa79d443b93a82adb1da5b578ebd8","date":1550428858,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","sourceNew":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start();\n      \n      cluster.waitForAllNodes(30);\n      \n      cluster.waitForActiveCollection(COLLECTION, 3, 3);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n      // avoid bad connection races due to shutdown\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeExpiredConnections();\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeIdleConnections(1, TimeUnit.MILLISECONDS);\n      \n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setAuthorizationHeader(httpPost, makeBasicAuthHeader(\"solr\", \"SolrRocks\"));\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(5, 2, 3, 0, 0, 0);\n\n      Thread.sleep(2000); // sad little wait to try and avoid other clients from hitting http noresponse after jetty restart\n      \n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(8, 3, 5, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(10, 4, 6, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertAuthMetricsMinimums(14, 5, 8, 1, 0, 0);\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      UpdateRequest del = new UpdateRequest().deleteByQuery(\"*:*\");\n      del.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      del.setCommitWithin(10);\n      del.process(cluster.getSolrClient(), COLLECTION);\n\n      //Test for SOLR-12514. Create a new jetty . This jetty does not have the collection.\n      //Make a request to that jetty and it should fail\n      JettySolrRunner aNewJetty = cluster.startJettySolrRunner();\n      SolrClient aNewClient = aNewJetty.newClient();\n      UpdateRequest delQuery = null;\n      delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n      delQuery.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      delQuery.process(aNewClient, COLLECTION);//this should succeed\n      try {\n        delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n        delQuery.process(aNewClient, COLLECTION);\n        fail(\"This should not have succeeded without credentials\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertTrue(e.getMessage().contains(\"Unauthorized request\"));\n      } finally {\n        aNewClient.close();\n        cluster.stopJettySolrRunner(aNewJetty);\n      }\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"4\");\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(17, 8, 8, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(19, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(20, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"5\");\n      assertAuthMetricsMinimums(23, 11, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(14, 14, 0, 0, 0, 0);\n\n      // Validate forwardCredentials\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(24, 12, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(18, 18, 0, 0, 0, 0);\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { forwardCredentials: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/forwardCredentials\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(31, 19, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(18, 18, 0, 0, 0, 0);\n      \n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start();\n      \n      cluster.waitForAllNodes(30);\n      \n      cluster.waitForActiveCollection(COLLECTION, 3, 3);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n      // avoid bad connection races due to shutdown\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeExpiredConnections();\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeIdleConnections(1, TimeUnit.MILLISECONDS);\n      \n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setAuthorizationHeader(httpPost, makeBasicAuthHeader(\"solr\", \"SolrRocks\"));\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(5, 2, 3, 0, 0, 0);\n\n      Thread.sleep(2000); // sad little wait to try and avoid other clients from hitting http noresponse after jetty restart\n      \n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(8, 3, 5, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(10, 4, 6, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertAuthMetricsMinimums(14, 5, 8, 1, 0, 0);\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      UpdateRequest del = new UpdateRequest().deleteByQuery(\"*:*\");\n      del.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      del.setCommitWithin(10);\n      del.process(cluster.getSolrClient(), COLLECTION);\n\n      //Test for SOLR-12514. Create a new jetty . This jetty does not have the collection.\n      //Make a request to that jetty and it should fail\n      JettySolrRunner aNewJetty = cluster.startJettySolrRunner();\n      SolrClient aNewClient = aNewJetty.newClient();\n      UpdateRequest delQuery = null;\n      delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n      delQuery.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      delQuery.process(aNewClient, COLLECTION);//this should succeed\n      try {\n        delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n        delQuery.process(aNewClient, COLLECTION);\n        fail(\"This should not have succeeded without credentials\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertTrue(e.getMessage().contains(\"Unauthorized request\"));\n      } finally {\n        aNewClient.close();\n        cluster.stopJettySolrRunner(aNewJetty);\n      }\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"4\");\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(17, 8, 8, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(19, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(20, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"5\");\n      assertAuthMetricsMinimums(23, 11, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(14, 14, 0, 0, 0, 0);\n\n      // Validate forwardCredentials\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(24, 12, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(18, 18, 0, 0, 0, 0);\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { forwardCredentials: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/forwardCredentials\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(31, 19, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(18, 18, 0, 0, 0, 0);\n      \n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"73d1467175b0c041295320312cbb1dbba0bb86eb","date":1559889257,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","sourceNew":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-13526\") // 2019-06-07\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start();\n      \n      cluster.waitForAllNodes(30);\n      \n      cluster.waitForActiveCollection(COLLECTION, 3, 3);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n      // avoid bad connection races due to shutdown\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeExpiredConnections();\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeIdleConnections(1, TimeUnit.MILLISECONDS);\n      \n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setAuthorizationHeader(httpPost, makeBasicAuthHeader(\"solr\", \"SolrRocks\"));\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(5, 2, 3, 0, 0, 0);\n\n      Thread.sleep(2000); // sad little wait to try and avoid other clients from hitting http noresponse after jetty restart\n      \n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(8, 3, 5, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(10, 4, 6, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertAuthMetricsMinimums(14, 5, 8, 1, 0, 0);\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      UpdateRequest del = new UpdateRequest().deleteByQuery(\"*:*\");\n      del.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      del.setCommitWithin(10);\n      del.process(cluster.getSolrClient(), COLLECTION);\n\n      //Test for SOLR-12514. Create a new jetty . This jetty does not have the collection.\n      //Make a request to that jetty and it should fail\n      JettySolrRunner aNewJetty = cluster.startJettySolrRunner();\n      SolrClient aNewClient = aNewJetty.newClient();\n      UpdateRequest delQuery = null;\n      delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n      delQuery.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      delQuery.process(aNewClient, COLLECTION);//this should succeed\n      try {\n        delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n        delQuery.process(aNewClient, COLLECTION);\n        fail(\"This should not have succeeded without credentials\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertTrue(e.getMessage().contains(\"Unauthorized request\"));\n      } finally {\n        aNewClient.close();\n        cluster.stopJettySolrRunner(aNewJetty);\n      }\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"4\");\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(17, 8, 8, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(19, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(20, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"5\");\n      assertAuthMetricsMinimums(23, 11, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(14, 14, 0, 0, 0, 0);\n\n      // Validate forwardCredentials\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(24, 12, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(18, 18, 0, 0, 0, 0);\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { forwardCredentials: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/forwardCredentials\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(31, 19, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(18, 18, 0, 0, 0, 0);\n      \n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start();\n      \n      cluster.waitForAllNodes(30);\n      \n      cluster.waitForActiveCollection(COLLECTION, 3, 3);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n      // avoid bad connection races due to shutdown\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeExpiredConnections();\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeIdleConnections(1, TimeUnit.MILLISECONDS);\n      \n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setAuthorizationHeader(httpPost, makeBasicAuthHeader(\"solr\", \"SolrRocks\"));\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(5, 2, 3, 0, 0, 0);\n\n      Thread.sleep(2000); // sad little wait to try and avoid other clients from hitting http noresponse after jetty restart\n      \n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(8, 3, 5, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(10, 4, 6, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertAuthMetricsMinimums(14, 5, 8, 1, 0, 0);\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      UpdateRequest del = new UpdateRequest().deleteByQuery(\"*:*\");\n      del.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      del.setCommitWithin(10);\n      del.process(cluster.getSolrClient(), COLLECTION);\n\n      //Test for SOLR-12514. Create a new jetty . This jetty does not have the collection.\n      //Make a request to that jetty and it should fail\n      JettySolrRunner aNewJetty = cluster.startJettySolrRunner();\n      SolrClient aNewClient = aNewJetty.newClient();\n      UpdateRequest delQuery = null;\n      delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n      delQuery.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      delQuery.process(aNewClient, COLLECTION);//this should succeed\n      try {\n        delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n        delQuery.process(aNewClient, COLLECTION);\n        fail(\"This should not have succeeded without credentials\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertTrue(e.getMessage().contains(\"Unauthorized request\"));\n      } finally {\n        aNewClient.close();\n        cluster.stopJettySolrRunner(aNewJetty);\n      }\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"4\");\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(17, 8, 8, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(19, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(20, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"5\");\n      assertAuthMetricsMinimums(23, 11, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(14, 14, 0, 0, 0, 0);\n\n      // Validate forwardCredentials\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(24, 12, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(18, 18, 0, 0, 0, 0);\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { forwardCredentials: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/forwardCredentials\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(31, 19, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(18, 18, 0, 0, 0, 0);\n      \n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["e4d551dd5406e7a716dc72acae21169c24942299"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e4d551dd5406e7a716dc72acae21169c24942299","date":1560243780,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","sourceNew":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start();\n      \n      cluster.waitForAllNodes(30);\n      \n      cluster.waitForActiveCollection(COLLECTION, 3, 3);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n      // avoid bad connection races due to shutdown\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeExpiredConnections();\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeIdleConnections(1, TimeUnit.MILLISECONDS);\n      \n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setAuthorizationHeader(httpPost, makeBasicAuthHeader(\"solr\", \"SolrRocks\"));\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(5, 2, 3, 0, 0, 0);\n\n      Thread.sleep(2000); // sad little wait to try and avoid other clients from hitting http noresponse after jetty restart\n      \n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(8, 3, 5, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(10, 4, 6, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertAuthMetricsMinimums(14, 5, 8, 1, 0, 0);\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      UpdateRequest del = new UpdateRequest().deleteByQuery(\"*:*\");\n      del.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      del.setCommitWithin(10);\n      del.process(cluster.getSolrClient(), COLLECTION);\n\n      //Test for SOLR-12514. Create a new jetty . This jetty does not have the collection.\n      //Make a request to that jetty and it should fail\n      JettySolrRunner aNewJetty = cluster.startJettySolrRunner();\n      SolrClient aNewClient = aNewJetty.newClient();\n      UpdateRequest delQuery = null;\n      delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n      delQuery.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      delQuery.process(aNewClient, COLLECTION);//this should succeed\n      try {\n        delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n        delQuery.process(aNewClient, COLLECTION);\n        fail(\"This should not have succeeded without credentials\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertTrue(e.getMessage().contains(\"Unauthorized request\"));\n      } finally {\n        aNewClient.close();\n        cluster.stopJettySolrRunner(aNewJetty);\n      }\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"4\");\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(17, 8, 8, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(19, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(20, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"5\");\n      assertAuthMetricsMinimums(23, 11, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(14, 14, 0, 0, 0, 0);\n\n      // Validate forwardCredentials\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(24, 12, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(18, 18, 0, 0, 0, 0);\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { forwardCredentials: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/forwardCredentials\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(31, 19, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(18, 18, 0, 0, 0, 0);\n      \n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-13526\") // 2019-06-07\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start();\n      \n      cluster.waitForAllNodes(30);\n      \n      cluster.waitForActiveCollection(COLLECTION, 3, 3);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n      // avoid bad connection races due to shutdown\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeExpiredConnections();\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeIdleConnections(1, TimeUnit.MILLISECONDS);\n      \n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setAuthorizationHeader(httpPost, makeBasicAuthHeader(\"solr\", \"SolrRocks\"));\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(5, 2, 3, 0, 0, 0);\n\n      Thread.sleep(2000); // sad little wait to try and avoid other clients from hitting http noresponse after jetty restart\n      \n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(8, 3, 5, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(10, 4, 6, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertAuthMetricsMinimums(14, 5, 8, 1, 0, 0);\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      UpdateRequest del = new UpdateRequest().deleteByQuery(\"*:*\");\n      del.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      del.setCommitWithin(10);\n      del.process(cluster.getSolrClient(), COLLECTION);\n\n      //Test for SOLR-12514. Create a new jetty . This jetty does not have the collection.\n      //Make a request to that jetty and it should fail\n      JettySolrRunner aNewJetty = cluster.startJettySolrRunner();\n      SolrClient aNewClient = aNewJetty.newClient();\n      UpdateRequest delQuery = null;\n      delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n      delQuery.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      delQuery.process(aNewClient, COLLECTION);//this should succeed\n      try {\n        delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n        delQuery.process(aNewClient, COLLECTION);\n        fail(\"This should not have succeeded without credentials\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertTrue(e.getMessage().contains(\"Unauthorized request\"));\n      } finally {\n        aNewClient.close();\n        cluster.stopJettySolrRunner(aNewJetty);\n      }\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"4\");\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(17, 8, 8, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(19, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(20, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"5\");\n      assertAuthMetricsMinimums(23, 11, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(14, 14, 0, 0, 0, 0);\n\n      // Validate forwardCredentials\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(24, 12, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(18, 18, 0, 0, 0, 0);\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { forwardCredentials: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/forwardCredentials\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(31, 19, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(18, 18, 0, 0, 0, 0);\n      \n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","bugFix":["73d1467175b0c041295320312cbb1dbba0bb86eb"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6bb1e55267dc3975be328fddeb53509a50d37457","date":1561474467,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","sourceNew":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start();\n      \n      cluster.waitForAllNodes(30);\n      \n      cluster.waitForActiveCollection(COLLECTION, 3, 3);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n      // avoid bad connection races due to shutdown\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeExpiredConnections();\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeIdleConnections(1, TimeUnit.MILLISECONDS);\n      \n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setAuthorizationHeader(httpPost, makeBasicAuthHeader(\"solr\", \"SolrRocks\"));\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(5, 2, 3, 0, 0, 0);\n\n      Thread.sleep(2000); // sad little wait to try and avoid other clients from hitting http noresponse after jetty restart\n      \n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(8, 3, 5, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(10, 4, 6, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertAuthMetricsMinimums(14, 5, 8, 1, 0, 0);\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      UpdateRequest del = new UpdateRequest().deleteByQuery(\"*:*\");\n      del.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      del.setCommitWithin(10);\n      del.process(cluster.getSolrClient(), COLLECTION);\n\n      //Test for SOLR-12514. Create a new jetty . This jetty does not have the collection.\n      //Make a request to that jetty and it should fail\n      JettySolrRunner aNewJetty = cluster.startJettySolrRunner();\n      SolrClient aNewClient = aNewJetty.newClient();\n      UpdateRequest delQuery = null;\n      delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n      delQuery.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      delQuery.process(aNewClient, COLLECTION);//this should succeed\n      try {\n        delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n        delQuery.process(aNewClient, COLLECTION);\n        fail(\"This should not have succeeded without credentials\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertTrue(e.getMessage().contains(\"Unauthorized request\"));\n      } finally {\n        aNewClient.close();\n        cluster.stopJettySolrRunner(aNewJetty);\n      }\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"4\");\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(17, 8, 8, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(19, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(20, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"5\");\n      assertAuthMetricsMinimums(23, 11, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(14, 14, 0, 0, 0, 0);\n\n      // Reindex collection depends on streaming request that needs to authenticate against new collection\n      CollectionAdminRequest.ReindexCollection reindexReq = CollectionAdminRequest.reindexCollection(COLLECTION);\n      reindexReq.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(reindexReq, COLLECTION);\n      assertAuthMetricsMinimums(24, 12, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(15, 15, 0, 0, 0, 0);\n\n      // Validate forwardCredentials\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(25, 13, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(19, 19, 0, 0, 0, 0);\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { forwardCredentials: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/forwardCredentials\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(32, 20, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(19, 19, 0, 0, 0, 0);\n      \n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start();\n      \n      cluster.waitForAllNodes(30);\n      \n      cluster.waitForActiveCollection(COLLECTION, 3, 3);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n      // avoid bad connection races due to shutdown\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeExpiredConnections();\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeIdleConnections(1, TimeUnit.MILLISECONDS);\n      \n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setAuthorizationHeader(httpPost, makeBasicAuthHeader(\"solr\", \"SolrRocks\"));\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(5, 2, 3, 0, 0, 0);\n\n      Thread.sleep(2000); // sad little wait to try and avoid other clients from hitting http noresponse after jetty restart\n      \n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(8, 3, 5, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(10, 4, 6, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertAuthMetricsMinimums(14, 5, 8, 1, 0, 0);\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      UpdateRequest del = new UpdateRequest().deleteByQuery(\"*:*\");\n      del.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      del.setCommitWithin(10);\n      del.process(cluster.getSolrClient(), COLLECTION);\n\n      //Test for SOLR-12514. Create a new jetty . This jetty does not have the collection.\n      //Make a request to that jetty and it should fail\n      JettySolrRunner aNewJetty = cluster.startJettySolrRunner();\n      SolrClient aNewClient = aNewJetty.newClient();\n      UpdateRequest delQuery = null;\n      delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n      delQuery.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      delQuery.process(aNewClient, COLLECTION);//this should succeed\n      try {\n        delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n        delQuery.process(aNewClient, COLLECTION);\n        fail(\"This should not have succeeded without credentials\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertTrue(e.getMessage().contains(\"Unauthorized request\"));\n      } finally {\n        aNewClient.close();\n        cluster.stopJettySolrRunner(aNewJetty);\n      }\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"4\");\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(17, 8, 8, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(19, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(20, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"5\");\n      assertAuthMetricsMinimums(23, 11, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(14, 14, 0, 0, 0, 0);\n\n      // Validate forwardCredentials\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(24, 12, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(18, 18, 0, 0, 0, 0);\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { forwardCredentials: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/forwardCredentials\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(31, 19, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(18, 18, 0, 0, 0, 0);\n      \n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","bugFix":["4bb519c79b76e52145e37b6681a7012525ed5f4b"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"741969fe89a5d7ff8fb5c8e7934b2cf427060de6","date":1564043448,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","sourceNew":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start();\n      \n      cluster.waitForAllNodes(30);\n      \n      cluster.waitForActiveCollection(COLLECTION, 3, 3);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\")\n            .withPayload(command)\n            .withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n      // avoid bad connection races due to shutdown\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeExpiredConnections();\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeIdleConnections(1, TimeUnit.MILLISECONDS);\n      \n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setAuthorizationHeader(httpPost, makeBasicAuthHeader(\"solr\", \"SolrRocks\"));\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(5, 2, 3, 0, 0, 0);\n\n      Thread.sleep(2000); // sad little wait to try and avoid other clients from hitting http noresponse after jetty restart\n      \n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(8, 3, 5, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(10, 4, 6, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertAuthMetricsMinimums(14, 5, 8, 1, 0, 0);\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      UpdateRequest del = new UpdateRequest().deleteByQuery(\"*:*\");\n      del.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      del.setCommitWithin(10);\n      del.process(cluster.getSolrClient(), COLLECTION);\n\n      //Test for SOLR-12514. Create a new jetty . This jetty does not have the collection.\n      //Make a request to that jetty and it should fail\n      JettySolrRunner aNewJetty = cluster.startJettySolrRunner();\n      SolrClient aNewClient = aNewJetty.newClient();\n      UpdateRequest delQuery = null;\n      delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n      delQuery.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      delQuery.process(aNewClient, COLLECTION);//this should succeed\n      try {\n        delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n        delQuery.process(aNewClient, COLLECTION);\n        fail(\"This should not have succeeded without credentials\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertTrue(e.getMessage().contains(\"Unauthorized request\"));\n      } finally {\n        aNewClient.close();\n        cluster.stopJettySolrRunner(aNewJetty);\n      }\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"4\");\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(17, 8, 8, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(19, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(20, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"5\");\n      assertAuthMetricsMinimums(23, 11, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(14, 14, 0, 0, 0, 0);\n\n      // Reindex collection depends on streaming request that needs to authenticate against new collection\n      CollectionAdminRequest.ReindexCollection reindexReq = CollectionAdminRequest.reindexCollection(COLLECTION);\n      reindexReq.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(reindexReq, COLLECTION);\n      assertAuthMetricsMinimums(24, 12, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(15, 15, 0, 0, 0, 0);\n\n      // Validate forwardCredentials\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(25, 13, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(19, 19, 0, 0, 0, 0);\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { forwardCredentials: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/forwardCredentials\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(32, 20, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(19, 19, 0, 0, 0, 0);\n      \n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start();\n      \n      cluster.waitForAllNodes(30);\n      \n      cluster.waitForActiveCollection(COLLECTION, 3, 3);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n      // avoid bad connection races due to shutdown\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeExpiredConnections();\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeIdleConnections(1, TimeUnit.MILLISECONDS);\n      \n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setAuthorizationHeader(httpPost, makeBasicAuthHeader(\"solr\", \"SolrRocks\"));\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(5, 2, 3, 0, 0, 0);\n\n      Thread.sleep(2000); // sad little wait to try and avoid other clients from hitting http noresponse after jetty restart\n      \n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(8, 3, 5, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(10, 4, 6, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertAuthMetricsMinimums(14, 5, 8, 1, 0, 0);\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      UpdateRequest del = new UpdateRequest().deleteByQuery(\"*:*\");\n      del.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      del.setCommitWithin(10);\n      del.process(cluster.getSolrClient(), COLLECTION);\n\n      //Test for SOLR-12514. Create a new jetty . This jetty does not have the collection.\n      //Make a request to that jetty and it should fail\n      JettySolrRunner aNewJetty = cluster.startJettySolrRunner();\n      SolrClient aNewClient = aNewJetty.newClient();\n      UpdateRequest delQuery = null;\n      delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n      delQuery.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      delQuery.process(aNewClient, COLLECTION);//this should succeed\n      try {\n        delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n        delQuery.process(aNewClient, COLLECTION);\n        fail(\"This should not have succeeded without credentials\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertTrue(e.getMessage().contains(\"Unauthorized request\"));\n      } finally {\n        aNewClient.close();\n        cluster.stopJettySolrRunner(aNewJetty);\n      }\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"4\");\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(17, 8, 8, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(19, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(20, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"5\");\n      assertAuthMetricsMinimums(23, 11, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(14, 14, 0, 0, 0, 0);\n\n      // Reindex collection depends on streaming request that needs to authenticate against new collection\n      CollectionAdminRequest.ReindexCollection reindexReq = CollectionAdminRequest.reindexCollection(COLLECTION);\n      reindexReq.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(reindexReq, COLLECTION);\n      assertAuthMetricsMinimums(24, 12, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(15, 15, 0, 0, 0, 0);\n\n      // Validate forwardCredentials\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(25, 13, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(19, 19, 0, 0, 0, 0);\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { forwardCredentials: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/forwardCredentials\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(32, 20, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(19, 19, 0, 0, 0, 0);\n      \n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","sourceNew":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start();\n      \n      cluster.waitForAllNodes(30);\n      \n      cluster.waitForActiveCollection(COLLECTION, 3, 3);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\")\n            .withPayload(command)\n            .withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n      // avoid bad connection races due to shutdown\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeExpiredConnections();\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeIdleConnections(1, TimeUnit.MILLISECONDS);\n      \n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setAuthorizationHeader(httpPost, makeBasicAuthHeader(\"solr\", \"SolrRocks\"));\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(5, 2, 3, 0, 0, 0);\n\n      Thread.sleep(2000); // sad little wait to try and avoid other clients from hitting http noresponse after jetty restart\n      \n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(8, 3, 5, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(10, 4, 6, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        expectThrows(HttpSolrClient.RemoteSolrException.class, () -> solrClient.request(reload));\n        reload.setMethod(SolrRequest.METHOD.POST);\n        expectThrows(HttpSolrClient.RemoteSolrException.class, () -> solrClient.request(reload));\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n      });\n      assertAuthMetricsMinimums(14, 5, 8, 1, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      UpdateRequest del = new UpdateRequest().deleteByQuery(\"*:*\");\n      del.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      del.setCommitWithin(10);\n      del.process(cluster.getSolrClient(), COLLECTION);\n\n      //Test for SOLR-12514. Create a new jetty . This jetty does not have the collection.\n      //Make a request to that jetty and it should fail\n      JettySolrRunner aNewJetty = cluster.startJettySolrRunner();\n      SolrClient aNewClient = aNewJetty.newClient();\n      UpdateRequest delQuery = null;\n      delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n      delQuery.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      delQuery.process(aNewClient, COLLECTION);//this should succeed\n      try {\n        HttpSolrClient.RemoteSolrException e = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n          new UpdateRequest().deleteByQuery(\"*:*\").process(aNewClient, COLLECTION);\n        });\n        assertTrue(e.getMessage().contains(\"Unauthorized request\"));\n      } finally {\n        aNewClient.close();\n        cluster.stopJettySolrRunner(aNewJetty);\n      }\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"4\");\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(17, 8, 8, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(19, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(20, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"5\");\n      assertAuthMetricsMinimums(23, 11, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(14, 14, 0, 0, 0, 0);\n\n      // Reindex collection depends on streaming request that needs to authenticate against new collection\n      CollectionAdminRequest.ReindexCollection reindexReq = CollectionAdminRequest.reindexCollection(COLLECTION);\n      reindexReq.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(reindexReq, COLLECTION);\n      assertAuthMetricsMinimums(24, 12, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(15, 15, 0, 0, 0, 0);\n\n      // Validate forwardCredentials\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(25, 13, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(19, 19, 0, 0, 0, 0);\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { forwardCredentials: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/forwardCredentials\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(32, 20, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(19, 19, 0, 0, 0, 0);\n      \n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start();\n      \n      cluster.waitForAllNodes(30);\n      \n      cluster.waitForActiveCollection(COLLECTION, 3, 3);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\")\n            .withPayload(command)\n            .withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n      // avoid bad connection races due to shutdown\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeExpiredConnections();\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeIdleConnections(1, TimeUnit.MILLISECONDS);\n      \n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setAuthorizationHeader(httpPost, makeBasicAuthHeader(\"solr\", \"SolrRocks\"));\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(5, 2, 3, 0, 0, 0);\n\n      Thread.sleep(2000); // sad little wait to try and avoid other clients from hitting http noresponse after jetty restart\n      \n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(8, 3, 5, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(10, 4, 6, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertAuthMetricsMinimums(14, 5, 8, 1, 0, 0);\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      UpdateRequest del = new UpdateRequest().deleteByQuery(\"*:*\");\n      del.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      del.setCommitWithin(10);\n      del.process(cluster.getSolrClient(), COLLECTION);\n\n      //Test for SOLR-12514. Create a new jetty . This jetty does not have the collection.\n      //Make a request to that jetty and it should fail\n      JettySolrRunner aNewJetty = cluster.startJettySolrRunner();\n      SolrClient aNewClient = aNewJetty.newClient();\n      UpdateRequest delQuery = null;\n      delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n      delQuery.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      delQuery.process(aNewClient, COLLECTION);//this should succeed\n      try {\n        delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n        delQuery.process(aNewClient, COLLECTION);\n        fail(\"This should not have succeeded without credentials\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertTrue(e.getMessage().contains(\"Unauthorized request\"));\n      } finally {\n        aNewClient.close();\n        cluster.stopJettySolrRunner(aNewJetty);\n      }\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"4\");\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(17, 8, 8, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(19, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(20, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"5\");\n      assertAuthMetricsMinimums(23, 11, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(14, 14, 0, 0, 0, 0);\n\n      // Reindex collection depends on streaming request that needs to authenticate against new collection\n      CollectionAdminRequest.ReindexCollection reindexReq = CollectionAdminRequest.reindexCollection(COLLECTION);\n      reindexReq.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(reindexReq, COLLECTION);\n      assertAuthMetricsMinimums(24, 12, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(15, 15, 0, 0, 0, 0);\n\n      // Validate forwardCredentials\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(25, 13, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(19, 19, 0, 0, 0, 0);\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { forwardCredentials: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/forwardCredentials\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(32, 20, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(19, 19, 0, 0, 0, 0);\n      \n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","sourceNew":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start();\n      \n      cluster.waitForAllNodes(30);\n      \n      cluster.waitForActiveCollection(COLLECTION, 3, 3);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\")\n            .withPayload(command)\n            .withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n      // avoid bad connection races due to shutdown\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeExpiredConnections();\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeIdleConnections(1, TimeUnit.MILLISECONDS);\n      \n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setAuthorizationHeader(httpPost, makeBasicAuthHeader(\"solr\", \"SolrRocks\"));\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(5, 2, 3, 0, 0, 0);\n\n      Thread.sleep(2000); // sad little wait to try and avoid other clients from hitting http noresponse after jetty restart\n      \n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(8, 3, 5, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(10, 4, 6, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        expectThrows(HttpSolrClient.RemoteSolrException.class, () -> solrClient.request(reload));\n        reload.setMethod(SolrRequest.METHOD.POST);\n        expectThrows(HttpSolrClient.RemoteSolrException.class, () -> solrClient.request(reload));\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n      });\n      assertAuthMetricsMinimums(14, 5, 8, 1, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      UpdateRequest del = new UpdateRequest().deleteByQuery(\"*:*\");\n      del.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      del.setCommitWithin(10);\n      del.process(cluster.getSolrClient(), COLLECTION);\n\n      //Test for SOLR-12514. Create a new jetty . This jetty does not have the collection.\n      //Make a request to that jetty and it should fail\n      JettySolrRunner aNewJetty = cluster.startJettySolrRunner();\n      SolrClient aNewClient = aNewJetty.newClient();\n      UpdateRequest delQuery = null;\n      delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n      delQuery.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      delQuery.process(aNewClient, COLLECTION);//this should succeed\n      try {\n        HttpSolrClient.RemoteSolrException e = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n          new UpdateRequest().deleteByQuery(\"*:*\").process(aNewClient, COLLECTION);\n        });\n        assertTrue(e.getMessage().contains(\"Unauthorized request\"));\n      } finally {\n        aNewClient.close();\n        cluster.stopJettySolrRunner(aNewJetty);\n      }\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"4\");\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(17, 8, 8, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(19, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(20, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"5\");\n      assertAuthMetricsMinimums(23, 11, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(14, 14, 0, 0, 0, 0);\n\n      // Reindex collection depends on streaming request that needs to authenticate against new collection\n      CollectionAdminRequest.ReindexCollection reindexReq = CollectionAdminRequest.reindexCollection(COLLECTION);\n      reindexReq.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(reindexReq, COLLECTION);\n      assertAuthMetricsMinimums(24, 12, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(15, 15, 0, 0, 0, 0);\n\n      // Validate forwardCredentials\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(25, 13, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(19, 19, 0, 0, 0, 0);\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { forwardCredentials: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/forwardCredentials\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(32, 20, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(19, 19, 0, 0, 0, 0);\n      \n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start();\n      \n      cluster.waitForAllNodes(30);\n      \n      cluster.waitForActiveCollection(COLLECTION, 3, 3);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\")\n            .withPayload(command)\n            .withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n      // avoid bad connection races due to shutdown\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeExpiredConnections();\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeIdleConnections(1, TimeUnit.MILLISECONDS);\n      \n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setAuthorizationHeader(httpPost, makeBasicAuthHeader(\"solr\", \"SolrRocks\"));\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(5, 2, 3, 0, 0, 0);\n\n      Thread.sleep(2000); // sad little wait to try and avoid other clients from hitting http noresponse after jetty restart\n      \n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(8, 3, 5, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(10, 4, 6, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertAuthMetricsMinimums(14, 5, 8, 1, 0, 0);\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      UpdateRequest del = new UpdateRequest().deleteByQuery(\"*:*\");\n      del.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      del.setCommitWithin(10);\n      del.process(cluster.getSolrClient(), COLLECTION);\n\n      //Test for SOLR-12514. Create a new jetty . This jetty does not have the collection.\n      //Make a request to that jetty and it should fail\n      JettySolrRunner aNewJetty = cluster.startJettySolrRunner();\n      SolrClient aNewClient = aNewJetty.newClient();\n      UpdateRequest delQuery = null;\n      delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n      delQuery.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      delQuery.process(aNewClient, COLLECTION);//this should succeed\n      try {\n        delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n        delQuery.process(aNewClient, COLLECTION);\n        fail(\"This should not have succeeded without credentials\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertTrue(e.getMessage().contains(\"Unauthorized request\"));\n      } finally {\n        aNewClient.close();\n        cluster.stopJettySolrRunner(aNewJetty);\n      }\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"4\");\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(17, 8, 8, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(19, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(20, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"5\");\n      assertAuthMetricsMinimums(23, 11, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(14, 14, 0, 0, 0, 0);\n\n      // Reindex collection depends on streaming request that needs to authenticate against new collection\n      CollectionAdminRequest.ReindexCollection reindexReq = CollectionAdminRequest.reindexCollection(COLLECTION);\n      reindexReq.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(reindexReq, COLLECTION);\n      assertAuthMetricsMinimums(24, 12, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(15, 15, 0, 0, 0, 0);\n\n      // Validate forwardCredentials\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(25, 13, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(19, 19, 0, 0, 0, 0);\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { forwardCredentials: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/forwardCredentials\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(32, 20, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(19, 19, 0, 0, 0, 0);\n      \n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","sourceNew":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start();\n      \n      cluster.waitForAllNodes(30);\n      \n      cluster.waitForActiveCollection(COLLECTION, 3, 3);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\")\n            .withPayload(command)\n            .withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n      // avoid bad connection races due to shutdown\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeExpiredConnections();\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeIdleConnections(1, TimeUnit.MILLISECONDS);\n      \n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setAuthorizationHeader(httpPost, makeBasicAuthHeader(\"solr\", \"SolrRocks\"));\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(5, 2, 3, 0, 0, 0);\n\n      Thread.sleep(2000); // sad little wait to try and avoid other clients from hitting http noresponse after jetty restart\n      \n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(8, 3, 5, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(10, 4, 6, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        expectThrows(HttpSolrClient.RemoteSolrException.class, () -> solrClient.request(reload));\n        reload.setMethod(SolrRequest.METHOD.POST);\n        expectThrows(HttpSolrClient.RemoteSolrException.class, () -> solrClient.request(reload));\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n      });\n      assertAuthMetricsMinimums(14, 5, 8, 1, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      UpdateRequest del = new UpdateRequest().deleteByQuery(\"*:*\");\n      del.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      del.setCommitWithin(10);\n      del.process(cluster.getSolrClient(), COLLECTION);\n\n      //Test for SOLR-12514. Create a new jetty . This jetty does not have the collection.\n      //Make a request to that jetty and it should fail\n      JettySolrRunner aNewJetty = cluster.startJettySolrRunner();\n      SolrClient aNewClient = aNewJetty.newClient();\n      UpdateRequest delQuery = null;\n      delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n      delQuery.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      delQuery.process(aNewClient, COLLECTION);//this should succeed\n      try {\n        HttpSolrClient.RemoteSolrException e = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n          new UpdateRequest().deleteByQuery(\"*:*\").process(aNewClient, COLLECTION);\n        });\n        assertTrue(e.getMessage().contains(\"Unauthorized request\"));\n      } finally {\n        aNewClient.close();\n        cluster.stopJettySolrRunner(aNewJetty);\n      }\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"4\");\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(17, 8, 8, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(19, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(20, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"5\");\n      assertAuthMetricsMinimums(23, 11, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(14, 14, 0, 0, 0, 0);\n\n      // Reindex collection depends on streaming request that needs to authenticate against new collection\n      CollectionAdminRequest.ReindexCollection reindexReq = CollectionAdminRequest.reindexCollection(COLLECTION);\n      reindexReq.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(reindexReq, COLLECTION);\n      assertAuthMetricsMinimums(24, 12, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(15, 15, 0, 0, 0, 0);\n\n      // Validate forwardCredentials\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(25, 13, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(19, 19, 0, 0, 0, 0);\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { forwardCredentials: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/forwardCredentials\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(32, 20, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(19, 19, 0, 0, 0, 0);\n      \n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start();\n      \n      cluster.waitForAllNodes(30);\n      \n      cluster.waitForActiveCollection(COLLECTION, 3, 3);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\")\n            .withPayload(command)\n            .withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n      // avoid bad connection races due to shutdown\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeExpiredConnections();\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeIdleConnections(1, TimeUnit.MILLISECONDS);\n      \n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setAuthorizationHeader(httpPost, makeBasicAuthHeader(\"solr\", \"SolrRocks\"));\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(5, 2, 3, 0, 0, 0);\n\n      Thread.sleep(2000); // sad little wait to try and avoid other clients from hitting http noresponse after jetty restart\n      \n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(8, 3, 5, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(10, 4, 6, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n        reload.setMethod(SolrRequest.METHOD.POST);\n        try {\n          rsp = solrClient.request(reload);\n          fail(\"must have failed\");\n        } catch (HttpSolrClient.RemoteSolrException e) {\n\n        }\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      try {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n        fail(\"This should not succeed\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertAuthMetricsMinimums(14, 5, 8, 1, 0, 0);\n      }\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      UpdateRequest del = new UpdateRequest().deleteByQuery(\"*:*\");\n      del.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      del.setCommitWithin(10);\n      del.process(cluster.getSolrClient(), COLLECTION);\n\n      //Test for SOLR-12514. Create a new jetty . This jetty does not have the collection.\n      //Make a request to that jetty and it should fail\n      JettySolrRunner aNewJetty = cluster.startJettySolrRunner();\n      SolrClient aNewClient = aNewJetty.newClient();\n      UpdateRequest delQuery = null;\n      delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n      delQuery.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      delQuery.process(aNewClient, COLLECTION);//this should succeed\n      try {\n        delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n        delQuery.process(aNewClient, COLLECTION);\n        fail(\"This should not have succeeded without credentials\");\n      } catch (HttpSolrClient.RemoteSolrException e) {\n        assertTrue(e.getMessage().contains(\"Unauthorized request\"));\n      } finally {\n        aNewClient.close();\n        cluster.stopJettySolrRunner(aNewJetty);\n      }\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"4\");\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(17, 8, 8, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(19, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(20, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"5\");\n      assertAuthMetricsMinimums(23, 11, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(14, 14, 0, 0, 0, 0);\n\n      // Reindex collection depends on streaming request that needs to authenticate against new collection\n      CollectionAdminRequest.ReindexCollection reindexReq = CollectionAdminRequest.reindexCollection(COLLECTION);\n      reindexReq.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(reindexReq, COLLECTION);\n      assertAuthMetricsMinimums(24, 12, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(15, 15, 0, 0, 0, 0);\n\n      // Validate forwardCredentials\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(25, 13, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(19, 19, 0, 0, 0, 0);\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { forwardCredentials: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/forwardCredentials\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(32, 20, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(19, 19, 0, 0, 0, 0);\n      \n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"173104badc305e417297852d42351ba4694a2ad5","date":1565129306,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","sourceNew":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start();\n      \n      cluster.waitForAllNodes(30);\n      \n      cluster.waitForActiveCollection(COLLECTION, 3, 3);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\")\n            .withPayload(command)\n            .withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n      // avoid bad connection races due to shutdown\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeExpiredConnections();\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeIdleConnections(1, TimeUnit.MILLISECONDS);\n      \n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setAuthorizationHeader(httpPost, makeBasicAuthHeader(\"solr\", \"SolrRocks\"));\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(5, 2, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(8, 3, 5, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(10, 4, 6, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        expectThrows(HttpSolrClient.RemoteSolrException.class, () -> solrClient.request(reload));\n        reload.setMethod(SolrRequest.METHOD.POST);\n        expectThrows(HttpSolrClient.RemoteSolrException.class, () -> solrClient.request(reload));\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n      });\n      assertAuthMetricsMinimums(14, 5, 8, 1, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      UpdateRequest del = new UpdateRequest().deleteByQuery(\"*:*\");\n      del.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      del.setCommitWithin(10);\n      del.process(cluster.getSolrClient(), COLLECTION);\n\n      //Test for SOLR-12514. Create a new jetty . This jetty does not have the collection.\n      //Make a request to that jetty and it should fail\n      JettySolrRunner aNewJetty = cluster.startJettySolrRunner();\n      SolrClient aNewClient = aNewJetty.newClient();\n      UpdateRequest delQuery = null;\n      delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n      delQuery.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      delQuery.process(aNewClient, COLLECTION);//this should succeed\n      try {\n        HttpSolrClient.RemoteSolrException e = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n          new UpdateRequest().deleteByQuery(\"*:*\").process(aNewClient, COLLECTION);\n        });\n        assertTrue(e.getMessage().contains(\"Unauthorized request\"));\n      } finally {\n        aNewClient.close();\n        cluster.stopJettySolrRunner(aNewJetty);\n      }\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"4\");\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(17, 8, 8, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(19, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(20, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"5\");\n      assertAuthMetricsMinimums(23, 11, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(14, 14, 0, 0, 0, 0);\n\n      // Reindex collection depends on streaming request that needs to authenticate against new collection\n      CollectionAdminRequest.ReindexCollection reindexReq = CollectionAdminRequest.reindexCollection(COLLECTION);\n      reindexReq.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(reindexReq, COLLECTION);\n      assertAuthMetricsMinimums(24, 12, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(15, 15, 0, 0, 0, 0);\n\n      // Validate forwardCredentials\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(25, 13, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(19, 19, 0, 0, 0, 0);\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { forwardCredentials: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/forwardCredentials\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(32, 20, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(19, 19, 0, 0, 0, 0);\n      \n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start();\n      \n      cluster.waitForAllNodes(30);\n      \n      cluster.waitForActiveCollection(COLLECTION, 3, 3);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\")\n            .withPayload(command)\n            .withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n      // avoid bad connection races due to shutdown\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeExpiredConnections();\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeIdleConnections(1, TimeUnit.MILLISECONDS);\n      \n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setAuthorizationHeader(httpPost, makeBasicAuthHeader(\"solr\", \"SolrRocks\"));\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(5, 2, 3, 0, 0, 0);\n\n      Thread.sleep(2000); // sad little wait to try and avoid other clients from hitting http noresponse after jetty restart\n      \n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(8, 3, 5, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(10, 4, 6, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        expectThrows(HttpSolrClient.RemoteSolrException.class, () -> solrClient.request(reload));\n        reload.setMethod(SolrRequest.METHOD.POST);\n        expectThrows(HttpSolrClient.RemoteSolrException.class, () -> solrClient.request(reload));\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n      });\n      assertAuthMetricsMinimums(14, 5, 8, 1, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      UpdateRequest del = new UpdateRequest().deleteByQuery(\"*:*\");\n      del.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      del.setCommitWithin(10);\n      del.process(cluster.getSolrClient(), COLLECTION);\n\n      //Test for SOLR-12514. Create a new jetty . This jetty does not have the collection.\n      //Make a request to that jetty and it should fail\n      JettySolrRunner aNewJetty = cluster.startJettySolrRunner();\n      SolrClient aNewClient = aNewJetty.newClient();\n      UpdateRequest delQuery = null;\n      delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n      delQuery.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      delQuery.process(aNewClient, COLLECTION);//this should succeed\n      try {\n        HttpSolrClient.RemoteSolrException e = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n          new UpdateRequest().deleteByQuery(\"*:*\").process(aNewClient, COLLECTION);\n        });\n        assertTrue(e.getMessage().contains(\"Unauthorized request\"));\n      } finally {\n        aNewClient.close();\n        cluster.stopJettySolrRunner(aNewJetty);\n      }\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"4\");\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(17, 8, 8, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(19, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(20, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"5\");\n      assertAuthMetricsMinimums(23, 11, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(14, 14, 0, 0, 0, 0);\n\n      // Reindex collection depends on streaming request that needs to authenticate against new collection\n      CollectionAdminRequest.ReindexCollection reindexReq = CollectionAdminRequest.reindexCollection(COLLECTION);\n      reindexReq.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(reindexReq, COLLECTION);\n      assertAuthMetricsMinimums(24, 12, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(15, 15, 0, 0, 0, 0);\n\n      // Validate forwardCredentials\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(25, 13, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(19, 19, 0, 0, 0, 0);\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { forwardCredentials: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/forwardCredentials\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(32, 20, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(19, 19, 0, 0, 0, 0);\n      \n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","sourceNew":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start();\n      \n      cluster.waitForAllNodes(30);\n      \n      cluster.waitForActiveCollection(COLLECTION, 3, 3);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n      // avoid bad connection races due to shutdown\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeExpiredConnections();\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeIdleConnections(1, TimeUnit.MILLISECONDS);\n      \n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setAuthorizationHeader(httpPost, makeBasicAuthHeader(\"solr\", \"SolrRocks\"));\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(5, 2, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(8, 3, 5, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(10, 4, 6, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        expectThrows(HttpSolrClient.RemoteSolrException.class, () -> solrClient.request(reload));\n        reload.setMethod(SolrRequest.METHOD.POST);\n        expectThrows(HttpSolrClient.RemoteSolrException.class, () -> solrClient.request(reload));\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n      });\n      assertAuthMetricsMinimums(14, 5, 8, 1, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      UpdateRequest del = new UpdateRequest().deleteByQuery(\"*:*\");\n      del.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      del.setCommitWithin(10);\n      del.process(cluster.getSolrClient(), COLLECTION);\n\n      //Test for SOLR-12514. Create a new jetty . This jetty does not have the collection.\n      //Make a request to that jetty and it should fail\n      JettySolrRunner aNewJetty = cluster.startJettySolrRunner();\n      SolrClient aNewClient = aNewJetty.newClient();\n      UpdateRequest delQuery = null;\n      delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n      delQuery.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      delQuery.process(aNewClient, COLLECTION);//this should succeed\n      try {\n        HttpSolrClient.RemoteSolrException e = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n          new UpdateRequest().deleteByQuery(\"*:*\").process(aNewClient, COLLECTION);\n        });\n        assertTrue(e.getMessage().contains(\"Unauthorized request\"));\n      } finally {\n        aNewClient.close();\n        cluster.stopJettySolrRunner(aNewJetty);\n      }\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"4\");\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(17, 8, 8, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(19, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(20, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"5\");\n      assertAuthMetricsMinimums(23, 11, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(14, 14, 0, 0, 0, 0);\n\n      // Reindex collection depends on streaming request that needs to authenticate against new collection\n      CollectionAdminRequest.ReindexCollection reindexReq = CollectionAdminRequest.reindexCollection(COLLECTION);\n      reindexReq.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(reindexReq, COLLECTION);\n      assertAuthMetricsMinimums(24, 12, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(15, 15, 0, 0, 0, 0);\n\n      // Validate forwardCredentials\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(25, 13, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(19, 19, 0, 0, 0, 0);\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { forwardCredentials: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/forwardCredentials\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(32, 20, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(19, 19, 0, 0, 0, 0);\n      \n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start();\n      \n      cluster.waitForAllNodes(30);\n      \n      cluster.waitForActiveCollection(COLLECTION, 3, 3);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\")\n            .withPayload(command)\n            .withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n      // avoid bad connection races due to shutdown\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeExpiredConnections();\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeIdleConnections(1, TimeUnit.MILLISECONDS);\n      \n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setAuthorizationHeader(httpPost, makeBasicAuthHeader(\"solr\", \"SolrRocks\"));\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(5, 2, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(8, 3, 5, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(10, 4, 6, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        expectThrows(HttpSolrClient.RemoteSolrException.class, () -> solrClient.request(reload));\n        reload.setMethod(SolrRequest.METHOD.POST);\n        expectThrows(HttpSolrClient.RemoteSolrException.class, () -> solrClient.request(reload));\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n      });\n      assertAuthMetricsMinimums(14, 5, 8, 1, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      UpdateRequest del = new UpdateRequest().deleteByQuery(\"*:*\");\n      del.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      del.setCommitWithin(10);\n      del.process(cluster.getSolrClient(), COLLECTION);\n\n      //Test for SOLR-12514. Create a new jetty . This jetty does not have the collection.\n      //Make a request to that jetty and it should fail\n      JettySolrRunner aNewJetty = cluster.startJettySolrRunner();\n      SolrClient aNewClient = aNewJetty.newClient();\n      UpdateRequest delQuery = null;\n      delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n      delQuery.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      delQuery.process(aNewClient, COLLECTION);//this should succeed\n      try {\n        HttpSolrClient.RemoteSolrException e = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n          new UpdateRequest().deleteByQuery(\"*:*\").process(aNewClient, COLLECTION);\n        });\n        assertTrue(e.getMessage().contains(\"Unauthorized request\"));\n      } finally {\n        aNewClient.close();\n        cluster.stopJettySolrRunner(aNewJetty);\n      }\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"4\");\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(17, 8, 8, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(19, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(20, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"5\");\n      assertAuthMetricsMinimums(23, 11, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(14, 14, 0, 0, 0, 0);\n\n      // Reindex collection depends on streaming request that needs to authenticate against new collection\n      CollectionAdminRequest.ReindexCollection reindexReq = CollectionAdminRequest.reindexCollection(COLLECTION);\n      reindexReq.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(reindexReq, COLLECTION);\n      assertAuthMetricsMinimums(24, 12, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(15, 15, 0, 0, 0, 0);\n\n      // Validate forwardCredentials\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(25, 13, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(19, 19, 0, 0, 0, 0);\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { forwardCredentials: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/forwardCredentials\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(32, 20, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(19, 19, 0, 0, 0, 0);\n      \n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","sourceNew":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start();\n      \n      cluster.waitForAllNodes(30);\n      \n      cluster.waitForActiveCollection(COLLECTION, 3, 3);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n      // avoid bad connection races due to shutdown\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeExpiredConnections();\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeIdleConnections(1, TimeUnit.MILLISECONDS);\n      \n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setAuthorizationHeader(httpPost, makeBasicAuthHeader(\"solr\", \"SolrRocks\"));\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(5, 2, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(8, 3, 5, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(10, 4, 6, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        expectThrows(HttpSolrClient.RemoteSolrException.class, () -> solrClient.request(reload));\n        reload.setMethod(SolrRequest.METHOD.POST);\n        expectThrows(HttpSolrClient.RemoteSolrException.class, () -> solrClient.request(reload));\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n      });\n      assertAuthMetricsMinimums(14, 5, 8, 1, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      UpdateRequest del = new UpdateRequest().deleteByQuery(\"*:*\");\n      del.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      del.setCommitWithin(10);\n      del.process(cluster.getSolrClient(), COLLECTION);\n\n      //Test for SOLR-12514. Create a new jetty . This jetty does not have the collection.\n      //Make a request to that jetty and it should fail\n      JettySolrRunner aNewJetty = cluster.startJettySolrRunner();\n      SolrClient aNewClient = aNewJetty.newClient();\n      UpdateRequest delQuery = null;\n      delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n      delQuery.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      delQuery.process(aNewClient, COLLECTION);//this should succeed\n      try {\n        HttpSolrClient.RemoteSolrException e = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n          new UpdateRequest().deleteByQuery(\"*:*\").process(aNewClient, COLLECTION);\n        });\n        assertTrue(e.getMessage().contains(\"Unauthorized request\"));\n      } finally {\n        aNewClient.close();\n        cluster.stopJettySolrRunner(aNewJetty);\n      }\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"4\");\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(17, 8, 8, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(19, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(20, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"5\");\n      assertAuthMetricsMinimums(23, 11, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(14, 14, 0, 0, 0, 0);\n\n      // Reindex collection depends on streaming request that needs to authenticate against new collection\n      CollectionAdminRequest.ReindexCollection reindexReq = CollectionAdminRequest.reindexCollection(COLLECTION);\n      reindexReq.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(reindexReq, COLLECTION);\n      assertAuthMetricsMinimums(24, 12, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(15, 15, 0, 0, 0, 0);\n\n      // Validate forwardCredentials\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(25, 13, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(19, 19, 0, 0, 0, 0);\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { forwardCredentials: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/forwardCredentials\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(32, 20, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(19, 19, 0, 0, 0, 0);\n      \n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start();\n      \n      cluster.waitForAllNodes(30);\n      \n      cluster.waitForActiveCollection(COLLECTION, 3, 3);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\")\n            .withPayload(command)\n            .withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n      // avoid bad connection races due to shutdown\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeExpiredConnections();\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeIdleConnections(1, TimeUnit.MILLISECONDS);\n      \n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setAuthorizationHeader(httpPost, makeBasicAuthHeader(\"solr\", \"SolrRocks\"));\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(5, 2, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(8, 3, 5, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(10, 4, 6, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        expectThrows(HttpSolrClient.RemoteSolrException.class, () -> solrClient.request(reload));\n        reload.setMethod(SolrRequest.METHOD.POST);\n        expectThrows(HttpSolrClient.RemoteSolrException.class, () -> solrClient.request(reload));\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n      });\n      assertAuthMetricsMinimums(14, 5, 8, 1, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      UpdateRequest del = new UpdateRequest().deleteByQuery(\"*:*\");\n      del.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      del.setCommitWithin(10);\n      del.process(cluster.getSolrClient(), COLLECTION);\n\n      //Test for SOLR-12514. Create a new jetty . This jetty does not have the collection.\n      //Make a request to that jetty and it should fail\n      JettySolrRunner aNewJetty = cluster.startJettySolrRunner();\n      SolrClient aNewClient = aNewJetty.newClient();\n      UpdateRequest delQuery = null;\n      delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n      delQuery.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      delQuery.process(aNewClient, COLLECTION);//this should succeed\n      try {\n        HttpSolrClient.RemoteSolrException e = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n          new UpdateRequest().deleteByQuery(\"*:*\").process(aNewClient, COLLECTION);\n        });\n        assertTrue(e.getMessage().contains(\"Unauthorized request\"));\n      } finally {\n        aNewClient.close();\n        cluster.stopJettySolrRunner(aNewJetty);\n      }\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"4\");\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(17, 8, 8, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(19, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(20, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"5\");\n      assertAuthMetricsMinimums(23, 11, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(14, 14, 0, 0, 0, 0);\n\n      // Reindex collection depends on streaming request that needs to authenticate against new collection\n      CollectionAdminRequest.ReindexCollection reindexReq = CollectionAdminRequest.reindexCollection(COLLECTION);\n      reindexReq.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(reindexReq, COLLECTION);\n      assertAuthMetricsMinimums(24, 12, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(15, 15, 0, 0, 0, 0);\n\n      // Validate forwardCredentials\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(25, 13, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(19, 19, 0, 0, 0, 0);\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { forwardCredentials: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/forwardCredentials\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(32, 20, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(19, 19, 0, 0, 0, 0);\n      \n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d450c0530a2765633277b632c29c54e190e3cb7e","date":1571265874,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","sourceNew":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  @LogLevel(\"org.apache.solr.security=DEBUG\")\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start();\n      \n      cluster.waitForAllNodes(30);\n      \n      cluster.waitForActiveCollection(COLLECTION, 3, 3);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n      // avoid bad connection races due to shutdown\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeExpiredConnections();\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeIdleConnections(1, TimeUnit.MILLISECONDS);\n      \n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setAuthorizationHeader(httpPost, makeBasicAuthHeader(\"solr\", \"SolrRocks\"));\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(5, 2, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(8, 3, 5, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(10, 4, 6, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        expectThrows(HttpSolrClient.RemoteSolrException.class, () -> solrClient.request(reload));\n        reload.setMethod(SolrRequest.METHOD.POST);\n        expectThrows(HttpSolrClient.RemoteSolrException.class, () -> solrClient.request(reload));\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n      });\n      assertAuthMetricsMinimums(14, 5, 8, 1, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      UpdateRequest del = new UpdateRequest().deleteByQuery(\"*:*\");\n      del.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      del.setCommitWithin(10);\n      del.process(cluster.getSolrClient(), COLLECTION);\n\n      //Test for SOLR-12514. Create a new jetty . This jetty does not have the collection.\n      //Make a request to that jetty and it should fail\n      JettySolrRunner aNewJetty = cluster.startJettySolrRunner();\n      SolrClient aNewClient = aNewJetty.newClient();\n      UpdateRequest delQuery = null;\n      delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n      delQuery.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      delQuery.process(aNewClient, COLLECTION);//this should succeed\n      try {\n        HttpSolrClient.RemoteSolrException e = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n          new UpdateRequest().deleteByQuery(\"*:*\").process(aNewClient, COLLECTION);\n        });\n        assertTrue(e.getMessage(), e.getMessage().contains(\"Authentication failed\"));\n      } finally {\n        aNewClient.close();\n        cluster.stopJettySolrRunner(aNewJetty);\n      }\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"4\");\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(17, 8, 8, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(19, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(20, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"5\");\n      assertAuthMetricsMinimums(23, 11, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(14, 14, 0, 0, 0, 0);\n\n      // Reindex collection depends on streaming request that needs to authenticate against new collection\n      CollectionAdminRequest.ReindexCollection reindexReq = CollectionAdminRequest.reindexCollection(COLLECTION);\n      reindexReq.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(reindexReq, COLLECTION);\n      assertAuthMetricsMinimums(24, 12, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(15, 15, 0, 0, 0, 0);\n\n      // Validate forwardCredentials\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(25, 13, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(19, 19, 0, 0, 0, 0);\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { forwardCredentials: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/forwardCredentials\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(32, 20, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(19, 19, 0, 0, 0, 0);\n      \n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start();\n      \n      cluster.waitForAllNodes(30);\n      \n      cluster.waitForActiveCollection(COLLECTION, 3, 3);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n      // avoid bad connection races due to shutdown\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeExpiredConnections();\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeIdleConnections(1, TimeUnit.MILLISECONDS);\n      \n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setAuthorizationHeader(httpPost, makeBasicAuthHeader(\"solr\", \"SolrRocks\"));\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(5, 2, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(8, 3, 5, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(10, 4, 6, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        expectThrows(HttpSolrClient.RemoteSolrException.class, () -> solrClient.request(reload));\n        reload.setMethod(SolrRequest.METHOD.POST);\n        expectThrows(HttpSolrClient.RemoteSolrException.class, () -> solrClient.request(reload));\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n      });\n      assertAuthMetricsMinimums(14, 5, 8, 1, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      UpdateRequest del = new UpdateRequest().deleteByQuery(\"*:*\");\n      del.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      del.setCommitWithin(10);\n      del.process(cluster.getSolrClient(), COLLECTION);\n\n      //Test for SOLR-12514. Create a new jetty . This jetty does not have the collection.\n      //Make a request to that jetty and it should fail\n      JettySolrRunner aNewJetty = cluster.startJettySolrRunner();\n      SolrClient aNewClient = aNewJetty.newClient();\n      UpdateRequest delQuery = null;\n      delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n      delQuery.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      delQuery.process(aNewClient, COLLECTION);//this should succeed\n      try {\n        HttpSolrClient.RemoteSolrException e = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n          new UpdateRequest().deleteByQuery(\"*:*\").process(aNewClient, COLLECTION);\n        });\n        assertTrue(e.getMessage().contains(\"Unauthorized request\"));\n      } finally {\n        aNewClient.close();\n        cluster.stopJettySolrRunner(aNewJetty);\n      }\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"4\");\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(17, 8, 8, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(19, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(20, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"5\");\n      assertAuthMetricsMinimums(23, 11, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(14, 14, 0, 0, 0, 0);\n\n      // Reindex collection depends on streaming request that needs to authenticate against new collection\n      CollectionAdminRequest.ReindexCollection reindexReq = CollectionAdminRequest.reindexCollection(COLLECTION);\n      reindexReq.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(reindexReq, COLLECTION);\n      assertAuthMetricsMinimums(24, 12, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(15, 15, 0, 0, 0, 0);\n\n      // Validate forwardCredentials\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(25, 13, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(19, 19, 0, 0, 0, 0);\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { forwardCredentials: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/forwardCredentials\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(32, 20, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(19, 19, 0, 0, 0, 0);\n      \n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","bugFix":["5a10d4a0423ccdc7c84efa89beeef9a56c01d0e1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db96734b79e26d948b59f68bd4564c4836a71acf","date":1585375566,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","sourceNew":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  @LogLevel(\"org.apache.solr.security=DEBUG\")\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start();\n      \n      cluster.waitForAllNodes(30);\n      \n      cluster.waitForActiveCollection(COLLECTION, 3, 3);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n      // avoid bad connection races due to shutdown\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeExpiredConnections();\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeIdleConnections(1, TimeUnit.MILLISECONDS);\n      \n      BaseHttpSolrClient.RemoteSolrException exp = expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setAuthorizationHeader(httpPost, makeBasicAuthHeader(\"solr\", \"SolrRocks\"));\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(5, 2, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(8, 3, 5, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(10, 4, 6, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> solrClient.request(reload));\n        reload.setMethod(SolrRequest.METHOD.POST);\n        expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> solrClient.request(reload));\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n      });\n      assertAuthMetricsMinimums(14, 5, 8, 1, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      UpdateRequest del = new UpdateRequest().deleteByQuery(\"*:*\");\n      del.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      del.setCommitWithin(10);\n      del.process(cluster.getSolrClient(), COLLECTION);\n\n      //Test for SOLR-12514. Create a new jetty . This jetty does not have the collection.\n      //Make a request to that jetty and it should fail\n      JettySolrRunner aNewJetty = cluster.startJettySolrRunner();\n      SolrClient aNewClient = aNewJetty.newClient();\n      UpdateRequest delQuery = null;\n      delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n      delQuery.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      delQuery.process(aNewClient, COLLECTION);//this should succeed\n      try {\n        BaseHttpSolrClient.RemoteSolrException e = expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> {\n          new UpdateRequest().deleteByQuery(\"*:*\").process(aNewClient, COLLECTION);\n        });\n        assertTrue(e.getMessage(), e.getMessage().contains(\"Authentication failed\"));\n      } finally {\n        aNewClient.close();\n        cluster.stopJettySolrRunner(aNewJetty);\n      }\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"4\");\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(17, 8, 8, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(19, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(20, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"5\");\n      assertAuthMetricsMinimums(23, 11, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(14, 14, 0, 0, 0, 0);\n\n      // Reindex collection depends on streaming request that needs to authenticate against new collection\n      CollectionAdminRequest.ReindexCollection reindexReq = CollectionAdminRequest.reindexCollection(COLLECTION);\n      reindexReq.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(reindexReq, COLLECTION);\n      assertAuthMetricsMinimums(24, 12, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(15, 15, 0, 0, 0, 0);\n\n      // Validate forwardCredentials\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(25, 13, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(19, 19, 0, 0, 0, 0);\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { forwardCredentials: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/forwardCredentials\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(32, 20, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(19, 19, 0, 0, 0, 0);\n      \n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  @LogLevel(\"org.apache.solr.security=DEBUG\")\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start();\n      \n      cluster.waitForAllNodes(30);\n      \n      cluster.waitForActiveCollection(COLLECTION, 3, 3);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n      // avoid bad connection races due to shutdown\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeExpiredConnections();\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeIdleConnections(1, TimeUnit.MILLISECONDS);\n      \n      HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setAuthorizationHeader(httpPost, makeBasicAuthHeader(\"solr\", \"SolrRocks\"));\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(5, 2, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(8, 3, 5, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(10, 4, 6, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        expectThrows(HttpSolrClient.RemoteSolrException.class, () -> solrClient.request(reload));\n        reload.setMethod(SolrRequest.METHOD.POST);\n        expectThrows(HttpSolrClient.RemoteSolrException.class, () -> solrClient.request(reload));\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n      });\n      assertAuthMetricsMinimums(14, 5, 8, 1, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      UpdateRequest del = new UpdateRequest().deleteByQuery(\"*:*\");\n      del.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      del.setCommitWithin(10);\n      del.process(cluster.getSolrClient(), COLLECTION);\n\n      //Test for SOLR-12514. Create a new jetty . This jetty does not have the collection.\n      //Make a request to that jetty and it should fail\n      JettySolrRunner aNewJetty = cluster.startJettySolrRunner();\n      SolrClient aNewClient = aNewJetty.newClient();\n      UpdateRequest delQuery = null;\n      delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n      delQuery.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      delQuery.process(aNewClient, COLLECTION);//this should succeed\n      try {\n        HttpSolrClient.RemoteSolrException e = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n          new UpdateRequest().deleteByQuery(\"*:*\").process(aNewClient, COLLECTION);\n        });\n        assertTrue(e.getMessage(), e.getMessage().contains(\"Authentication failed\"));\n      } finally {\n        aNewClient.close();\n        cluster.stopJettySolrRunner(aNewJetty);\n      }\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"4\");\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(17, 8, 8, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(19, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(20, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"5\");\n      assertAuthMetricsMinimums(23, 11, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(14, 14, 0, 0, 0, 0);\n\n      // Reindex collection depends on streaming request that needs to authenticate against new collection\n      CollectionAdminRequest.ReindexCollection reindexReq = CollectionAdminRequest.reindexCollection(COLLECTION);\n      reindexReq.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(reindexReq, COLLECTION);\n      assertAuthMetricsMinimums(24, 12, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(15, 15, 0, 0, 0, 0);\n\n      // Validate forwardCredentials\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(25, 13, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(19, 19, 0, 0, 0, 0);\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { forwardCredentials: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/forwardCredentials\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(32, 20, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(19, 19, 0, 0, 0, 0);\n      \n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","sourceNew":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  @LogLevel(\"org.apache.solr.security=DEBUG\")\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start();\n      \n      cluster.waitForAllNodes(30);\n      \n      cluster.waitForActiveCollection(COLLECTION, 3, 3);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n      // avoid bad connection races due to shutdown\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeExpiredConnections();\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeIdleConnections(1, TimeUnit.MILLISECONDS);\n      \n      BaseHttpSolrClient.RemoteSolrException exp = expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setAuthorizationHeader(httpPost, makeBasicAuthHeader(\"solr\", \"SolrRocks\"));\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(5, 2, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(8, 3, 5, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(10, 4, 6, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> solrClient.request(reload));\n        reload.setMethod(SolrRequest.METHOD.POST);\n        expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> solrClient.request(reload));\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n      });\n      assertAuthMetricsMinimums(14, 5, 8, 1, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      UpdateRequest del = new UpdateRequest().deleteByQuery(\"*:*\");\n      del.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      del.setCommitWithin(10);\n      del.process(cluster.getSolrClient(), COLLECTION);\n\n      //Test for SOLR-12514. Create a new jetty . This jetty does not have the collection.\n      //Make a request to that jetty and it should fail\n      JettySolrRunner aNewJetty = cluster.startJettySolrRunner();\n      SolrClient aNewClient = aNewJetty.newClient();\n      UpdateRequest delQuery = null;\n      delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n      delQuery.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      delQuery.process(aNewClient, COLLECTION);//this should succeed\n      try {\n        BaseHttpSolrClient.RemoteSolrException e = expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> {\n          new UpdateRequest().deleteByQuery(\"*:*\").process(aNewClient, COLLECTION);\n        });\n        assertTrue(e.getMessage(), e.getMessage().contains(\"Authentication failed\"));\n      } finally {\n        aNewClient.close();\n        cluster.stopJettySolrRunner(aNewJetty);\n      }\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"4\");\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(17, 8, 8, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: {}; stdout from tool prior to failure: {}\"\n            , e, baos.toString(StandardCharsets.UTF_8.name())); // logOk\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(19, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(20, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"5\");\n      assertAuthMetricsMinimums(23, 11, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(14, 14, 0, 0, 0, 0);\n\n      // Reindex collection depends on streaming request that needs to authenticate against new collection\n      CollectionAdminRequest.ReindexCollection reindexReq = CollectionAdminRequest.reindexCollection(COLLECTION);\n      reindexReq.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(reindexReq, COLLECTION);\n      assertAuthMetricsMinimums(24, 12, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(15, 15, 0, 0, 0, 0);\n\n      // Validate forwardCredentials\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(25, 13, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(19, 19, 0, 0, 0, 0);\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { forwardCredentials: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/forwardCredentials\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(32, 20, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(19, 19, 0, 0, 0, 0);\n      \n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  @LogLevel(\"org.apache.solr.security=DEBUG\")\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start();\n      \n      cluster.waitForAllNodes(30);\n      \n      cluster.waitForActiveCollection(COLLECTION, 3, 3);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n      // avoid bad connection races due to shutdown\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeExpiredConnections();\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeIdleConnections(1, TimeUnit.MILLISECONDS);\n      \n      BaseHttpSolrClient.RemoteSolrException exp = expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setAuthorizationHeader(httpPost, makeBasicAuthHeader(\"solr\", \"SolrRocks\"));\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(5, 2, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(8, 3, 5, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(10, 4, 6, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> solrClient.request(reload));\n        reload.setMethod(SolrRequest.METHOD.POST);\n        expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> solrClient.request(reload));\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n      });\n      assertAuthMetricsMinimums(14, 5, 8, 1, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      UpdateRequest del = new UpdateRequest().deleteByQuery(\"*:*\");\n      del.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      del.setCommitWithin(10);\n      del.process(cluster.getSolrClient(), COLLECTION);\n\n      //Test for SOLR-12514. Create a new jetty . This jetty does not have the collection.\n      //Make a request to that jetty and it should fail\n      JettySolrRunner aNewJetty = cluster.startJettySolrRunner();\n      SolrClient aNewClient = aNewJetty.newClient();\n      UpdateRequest delQuery = null;\n      delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n      delQuery.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      delQuery.process(aNewClient, COLLECTION);//this should succeed\n      try {\n        BaseHttpSolrClient.RemoteSolrException e = expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> {\n          new UpdateRequest().deleteByQuery(\"*:*\").process(aNewClient, COLLECTION);\n        });\n        assertTrue(e.getMessage(), e.getMessage().contains(\"Authentication failed\"));\n      } finally {\n        aNewClient.close();\n        cluster.stopJettySolrRunner(aNewJetty);\n      }\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"4\");\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(17, 8, 8, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: \" + e +\n            \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(19, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(20, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"5\");\n      assertAuthMetricsMinimums(23, 11, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(14, 14, 0, 0, 0, 0);\n\n      // Reindex collection depends on streaming request that needs to authenticate against new collection\n      CollectionAdminRequest.ReindexCollection reindexReq = CollectionAdminRequest.reindexCollection(COLLECTION);\n      reindexReq.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(reindexReq, COLLECTION);\n      assertAuthMetricsMinimums(24, 12, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(15, 15, 0, 0, 0, 0);\n\n      // Validate forwardCredentials\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(25, 13, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(19, 19, 0, 0, 0, 0);\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { forwardCredentials: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/forwardCredentials\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(32, 20, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(19, 19, 0, 0, 0, 0);\n      \n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","sourceNew":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  @LogLevel(\"org.apache.solr.security=DEBUG\")\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start();\n      \n      cluster.waitForAllNodes(30);\n      \n      cluster.waitForActiveCollection(COLLECTION, 3, 3);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      @SuppressWarnings({\"rawtypes\"})\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n      // avoid bad connection races due to shutdown\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeExpiredConnections();\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeIdleConnections(1, TimeUnit.MILLISECONDS);\n      \n      BaseHttpSolrClient.RemoteSolrException exp = expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setAuthorizationHeader(httpPost, makeBasicAuthHeader(\"solr\", \"SolrRocks\"));\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(5, 2, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(8, 3, 5, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(10, 4, 6, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> solrClient.request(reload));\n        reload.setMethod(SolrRequest.METHOD.POST);\n        expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> solrClient.request(reload));\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n      });\n      assertAuthMetricsMinimums(14, 5, 8, 1, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      UpdateRequest del = new UpdateRequest().deleteByQuery(\"*:*\");\n      del.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      del.setCommitWithin(10);\n      del.process(cluster.getSolrClient(), COLLECTION);\n\n      //Test for SOLR-12514. Create a new jetty . This jetty does not have the collection.\n      //Make a request to that jetty and it should fail\n      JettySolrRunner aNewJetty = cluster.startJettySolrRunner();\n      SolrClient aNewClient = aNewJetty.newClient();\n      UpdateRequest delQuery = null;\n      delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n      delQuery.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      delQuery.process(aNewClient, COLLECTION);//this should succeed\n      try {\n        BaseHttpSolrClient.RemoteSolrException e = expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> {\n          new UpdateRequest().deleteByQuery(\"*:*\").process(aNewClient, COLLECTION);\n        });\n        assertTrue(e.getMessage(), e.getMessage().contains(\"Authentication failed\"));\n      } finally {\n        aNewClient.close();\n        cluster.stopJettySolrRunner(aNewJetty);\n      }\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"4\");\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(17, 8, 8, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        @SuppressWarnings({\"rawtypes\"})\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: {}; stdout from tool prior to failure: {}\"\n            , e, baos.toString(StandardCharsets.UTF_8.name())); // logOk\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(19, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(20, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"5\");\n      assertAuthMetricsMinimums(23, 11, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(14, 14, 0, 0, 0, 0);\n\n      // Reindex collection depends on streaming request that needs to authenticate against new collection\n      CollectionAdminRequest.ReindexCollection reindexReq = CollectionAdminRequest.reindexCollection(COLLECTION);\n      reindexReq.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(reindexReq, COLLECTION);\n      assertAuthMetricsMinimums(24, 12, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(15, 15, 0, 0, 0, 0);\n\n      // Validate forwardCredentials\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(25, 13, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(19, 19, 0, 0, 0, 0);\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { forwardCredentials: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/forwardCredentials\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(32, 20, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(19, 19, 0, 0, 0, 0);\n      \n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  @LogLevel(\"org.apache.solr.security=DEBUG\")\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start();\n      \n      cluster.waitForAllNodes(30);\n      \n      cluster.waitForActiveCollection(COLLECTION, 3, 3);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n      // avoid bad connection races due to shutdown\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeExpiredConnections();\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeIdleConnections(1, TimeUnit.MILLISECONDS);\n      \n      BaseHttpSolrClient.RemoteSolrException exp = expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setAuthorizationHeader(httpPost, makeBasicAuthHeader(\"solr\", \"SolrRocks\"));\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(5, 2, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(8, 3, 5, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(10, 4, 6, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> solrClient.request(reload));\n        reload.setMethod(SolrRequest.METHOD.POST);\n        expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> solrClient.request(reload));\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n      });\n      assertAuthMetricsMinimums(14, 5, 8, 1, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      UpdateRequest del = new UpdateRequest().deleteByQuery(\"*:*\");\n      del.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      del.setCommitWithin(10);\n      del.process(cluster.getSolrClient(), COLLECTION);\n\n      //Test for SOLR-12514. Create a new jetty . This jetty does not have the collection.\n      //Make a request to that jetty and it should fail\n      JettySolrRunner aNewJetty = cluster.startJettySolrRunner();\n      SolrClient aNewClient = aNewJetty.newClient();\n      UpdateRequest delQuery = null;\n      delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n      delQuery.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      delQuery.process(aNewClient, COLLECTION);//this should succeed\n      try {\n        BaseHttpSolrClient.RemoteSolrException e = expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> {\n          new UpdateRequest().deleteByQuery(\"*:*\").process(aNewClient, COLLECTION);\n        });\n        assertTrue(e.getMessage(), e.getMessage().contains(\"Authentication failed\"));\n      } finally {\n        aNewClient.close();\n        cluster.stopJettySolrRunner(aNewJetty);\n      }\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"4\");\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(17, 8, 8, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: {}; stdout from tool prior to failure: {}\"\n            , e, baos.toString(StandardCharsets.UTF_8.name())); // logOk\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(19, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(20, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"5\");\n      assertAuthMetricsMinimums(23, 11, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(14, 14, 0, 0, 0, 0);\n\n      // Reindex collection depends on streaming request that needs to authenticate against new collection\n      CollectionAdminRequest.ReindexCollection reindexReq = CollectionAdminRequest.reindexCollection(COLLECTION);\n      reindexReq.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(reindexReq, COLLECTION);\n      assertAuthMetricsMinimums(24, 12, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(15, 15, 0, 0, 0, 0);\n\n      // Validate forwardCredentials\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(25, 13, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(19, 19, 0, 0, 0, 0);\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { forwardCredentials: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/forwardCredentials\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(32, 20, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(19, 19, 0, 0, 0, 0);\n      \n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2d19164145b2a65acf62a657c75f4a249b649c0","date":1601732857,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest#testBasicAuth().mjava","sourceNew":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  @LogLevel(\"org.apache.solr.security=DEBUG\")\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start();\n      \n      cluster.waitForAllNodes(30);\n      \n      cluster.waitForActiveCollection(COLLECTION, 3, 3);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      @SuppressWarnings({\"rawtypes\"})\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n      // avoid bad connection races due to shutdown\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeExpiredConnections();\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeIdleConnections(1, TimeUnit.MILLISECONDS);\n      \n      BaseHttpSolrClient.RemoteSolrException exp = expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setAuthorizationHeader(httpPost, makeBasicAuthHeader(\"solr\", \"SolrRocks\"));\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(5, 2, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(8, 3, 5, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(10, 4, 6, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> solrClient.request(reload));\n        reload.setMethod(SolrRequest.METHOD.POST);\n        expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> solrClient.request(reload));\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n      });\n      assertAuthMetricsMinimums(14, 5, 8, 1, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      UpdateRequest del = new UpdateRequest().deleteByQuery(\"*:*\");\n      del.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      del.setCommitWithin(10);\n      del.process(cluster.getSolrClient(), COLLECTION);\n\n      //Test for SOLR-12514. Create a new jetty . This jetty does not have the collection.\n      //Make a request to that jetty and it should fail\n      JettySolrRunner aNewJetty = cluster.startJettySolrRunner();\n      SolrClient aNewClient = aNewJetty.newClient();\n      UpdateRequest delQuery = null;\n      delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n      delQuery.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      delQuery.process(aNewClient, COLLECTION);//this should succeed\n      try {\n        BaseHttpSolrClient.RemoteSolrException e = expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> {\n          new UpdateRequest().deleteByQuery(\"*:*\").process(aNewClient, COLLECTION);\n        });\n        assertTrue(e.getMessage(), e.getMessage().contains(\"Authentication failed\"));\n      } finally {\n        aNewClient.close();\n        cluster.stopJettySolrRunner(aNewJetty);\n      }\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"4\");\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(17, 8, 8, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        @SuppressWarnings({\"rawtypes\"})\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: {}; stdout from tool prior to failure: {}\"\n            , e, baos.toString(StandardCharsets.UTF_8.name())); // nowarn\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(19, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(20, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"5\");\n      assertAuthMetricsMinimums(23, 11, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(14, 14, 0, 0, 0, 0);\n\n      // Reindex collection depends on streaming request that needs to authenticate against new collection\n      CollectionAdminRequest.ReindexCollection reindexReq = CollectionAdminRequest.reindexCollection(COLLECTION);\n      reindexReq.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(reindexReq, COLLECTION);\n      assertAuthMetricsMinimums(24, 12, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(15, 15, 0, 0, 0, 0);\n\n      // Validate forwardCredentials\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(25, 13, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(19, 19, 0, 0, 0, 0);\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { forwardCredentials: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/forwardCredentials\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(32, 20, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(19, 19, 0, 0, 0, 0);\n      \n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  //commented 9-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // annotated on: 24-Dec-2018\n  @LogLevel(\"org.apache.solr.security=DEBUG\")\n  public void testBasicAuth() throws Exception {\n    boolean isUseV2Api = random().nextBoolean();\n    String authcPrefix = \"/admin/authentication\";\n    String authzPrefix = \"/admin/authorization\";\n    if(isUseV2Api){\n      authcPrefix = \"/____v2/cluster/security/authentication\";\n      authzPrefix = \"/____v2/cluster/security/authorization\";\n    }\n\n    NamedList<Object> rsp;\n    HttpClient cl = null;\n    try {\n      cl = HttpClientUtil.createClient(null);\n\n      JettySolrRunner randomJetty = cluster.getRandomJetty(random());\n      String baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"/errorMessages\", null, 20);\n      zkClient().setData(\"/security.json\", STD_CONF.replaceAll(\"'\", \"\\\"\").getBytes(UTF_8), true);\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n\n      randomJetty.stop();\n      \n      cluster.waitForJettyToStop(randomJetty);\n      \n      randomJetty.start();\n      \n      cluster.waitForAllNodes(30);\n      \n      cluster.waitForActiveCollection(COLLECTION, 3, 3);\n      \n      baseUrl = randomJetty.getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/class\", \"solr.BasicAuthPlugin\", 20);\n      assertNumberOfMetrics(16); // Basic auth metrics available\n      assertAuthMetricsMinimums(1, 0, 1, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      String command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsCool'}\\n\" +\n          \"}\";\n\n      @SuppressWarnings({\"rawtypes\"})\n      final SolrRequest genericReq;\n      if (isUseV2Api) {\n        genericReq = new V2Request.Builder(\"/cluster/security/authentication\").withMethod(SolrRequest.METHOD.POST).build();\n      } else {\n        genericReq = new GenericSolrRequest(SolrRequest.METHOD.POST, authcPrefix, new ModifiableSolrParams());\n        ((GenericSolrRequest)genericReq).setContentWriter(new StringPayloadContentWriter(command, CommonParams.JSON_MIME));\n      }\n\n      // avoid bad connection races due to shutdown\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeExpiredConnections();\n      cluster.getSolrClient().getHttpClient().getConnectionManager().closeIdleConnections(1, TimeUnit.MILLISECONDS);\n      \n      BaseHttpSolrClient.RemoteSolrException exp = expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(genericReq);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(2, 0, 2, 0, 0, 0);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      \n      command = \"{\\n\" +\n          \"'set-user': {'harry':'HarryIsUberCool'}\\n\" +\n          \"}\";\n\n      HttpPost httpPost = new HttpPost(baseUrl + authcPrefix);\n      setAuthorizationHeader(httpPost, makeBasicAuthHeader(\"solr\", \"SolrRocks\"));\n      httpPost.setEntity(new ByteArrayEntity(command.getBytes(UTF_8)));\n      httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication.enabled\", \"true\", 20);\n      HttpResponse r = cl.execute(httpPost);\n      int statusCode = r.getStatusLine().getStatusCode();\n      Utils.consumeFully(r.getEntity());\n      assertEquals(\"proper_cred sent, but access denied\", 200, statusCode);\n      assertPkiAuthMetricsMinimums(0, 0, 0, 0, 0, 0);\n      assertAuthMetricsMinimums(4, 1, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/credentials/harry\", NOT_NULL_PREDICATE, 20);\n      command = \"{\\n\" +\n          \"'set-user-role': {'harry':'admin'}\\n\" +\n          \"}\";\n\n      executeCommand(baseUrl + authzPrefix, cl,command, \"solr\", \"SolrRocks\");\n      assertAuthMetricsMinimums(5, 2, 3, 0, 0, 0);\n\n      baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/user-role/harry\", NOT_NULL_PREDICATE, 20);\n\n      executeCommand(baseUrl + authzPrefix, cl, Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"collection\", \"x\",\n              \"path\", \"/update/*\",\n              \"role\", \"dev\"))), \"harry\", \"HarryIsUberCool\" );\n\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[1]/collection\", \"x\", 20);\n      assertAuthMetricsMinimums(8, 3, 5, 0, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,Utils.toJSONString(singletonMap(\"set-permission\", Utils.makeMap\n          (\"name\", \"collection-admin-edit\", \"role\", \"admin\"))), \"harry\", \"HarryIsUberCool\"  );\n      verifySecurityStatus(cl, baseUrl + authzPrefix, \"authorization/permissions[2]/name\", \"collection-admin-edit\", 20);\n      assertAuthMetricsMinimums(10, 4, 6, 0, 0, 0);\n\n      CollectionAdminRequest.Reload reload = CollectionAdminRequest.reloadCollection(COLLECTION);\n\n      try (HttpSolrClient solrClient = getHttpSolrClient(baseUrl)) {\n        expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> solrClient.request(reload));\n        reload.setMethod(SolrRequest.METHOD.POST);\n        expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> solrClient.request(reload));\n      }\n      cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n          .setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\"));\n\n      expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().request(CollectionAdminRequest.reloadCollection(COLLECTION)\n            .setBasicAuthCredentials(\"harry\", \"Cool12345\"));\n      });\n      assertAuthMetricsMinimums(14, 5, 8, 1, 0, 0);\n\n      executeCommand(baseUrl + authzPrefix, cl,\"{set-permission : { name : update , role : admin}}\", \"harry\", \"HarryIsUberCool\");\n\n      UpdateRequest del = new UpdateRequest().deleteByQuery(\"*:*\");\n      del.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      del.setCommitWithin(10);\n      del.process(cluster.getSolrClient(), COLLECTION);\n\n      //Test for SOLR-12514. Create a new jetty . This jetty does not have the collection.\n      //Make a request to that jetty and it should fail\n      JettySolrRunner aNewJetty = cluster.startJettySolrRunner();\n      SolrClient aNewClient = aNewJetty.newClient();\n      UpdateRequest delQuery = null;\n      delQuery = new UpdateRequest().deleteByQuery(\"*:*\");\n      delQuery.setBasicAuthCredentials(\"harry\",\"HarryIsUberCool\");\n      delQuery.process(aNewClient, COLLECTION);//this should succeed\n      try {\n        BaseHttpSolrClient.RemoteSolrException e = expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> {\n          new UpdateRequest().deleteByQuery(\"*:*\").process(aNewClient, COLLECTION);\n        });\n        assertTrue(e.getMessage(), e.getMessage().contains(\"Authentication failed\"));\n      } finally {\n        aNewClient.close();\n        cluster.stopJettySolrRunner(aNewJetty);\n      }\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"4\");\n\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/blockUnknown\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + \"/admin/info/key\", \"key\", NOT_NULL_PREDICATE, 20);\n      assertAuthMetricsMinimums(17, 8, 8, 1, 0, 0);\n\n      String[] toolArgs = new String[]{\n          \"status\", \"-solr\", baseUrl};\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n      SolrCLI.StatusTool tool = new SolrCLI.StatusTool(stdoutSim);\n      try {\n        System.setProperty(\"basicauth\", \"harry:HarryIsUberCool\");\n        tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n        @SuppressWarnings({\"rawtypes\"})\n        Map obj = (Map) Utils.fromJSON(new ByteArrayInputStream(baos.toByteArray()));\n        assertTrue(obj.containsKey(\"version\"));\n        assertTrue(obj.containsKey(\"startTime\"));\n        assertTrue(obj.containsKey(\"uptime\"));\n        assertTrue(obj.containsKey(\"memory\"));\n      } catch (Exception e) {\n        log.error(\"RunExampleTool failed due to: {}; stdout from tool prior to failure: {}\"\n            , e, baos.toString(StandardCharsets.UTF_8.name())); // logOk\n      }\n\n      SolrParams params = new MapSolrParams(Collections.singletonMap(\"q\", \"*:*\"));\n      // Query that fails due to missing credentials\n      exp = expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> {\n        cluster.getSolrClient().query(COLLECTION, params);\n      });\n      assertEquals(401, exp.code());\n      assertAuthMetricsMinimums(19, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(3, 3, 0, 0, 0, 0);\n\n      // Query that succeeds\n      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, \"/select\", params);\n      req.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(req, COLLECTION);\n      \n      assertAuthMetricsMinimums(20, 8, 8, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(10, 10, 0, 0, 0, 0);\n\n      addDocument(\"harry\",\"HarryIsUberCool\",\"id\", \"5\");\n      assertAuthMetricsMinimums(23, 11, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(14, 14, 0, 0, 0, 0);\n\n      // Reindex collection depends on streaming request that needs to authenticate against new collection\n      CollectionAdminRequest.ReindexCollection reindexReq = CollectionAdminRequest.reindexCollection(COLLECTION);\n      reindexReq.setBasicAuthCredentials(\"harry\", \"HarryIsUberCool\");\n      cluster.getSolrClient().request(reindexReq, COLLECTION);\n      assertAuthMetricsMinimums(24, 12, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(15, 15, 0, 0, 0, 0);\n\n      // Validate forwardCredentials\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(25, 13, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(19, 19, 0, 0, 0, 0);\n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { forwardCredentials: true}}\", \"harry\", \"HarryIsUberCool\");\n      verifySecurityStatus(cl, baseUrl + authcPrefix, \"authentication/forwardCredentials\", \"true\", 20, \"harry\", \"HarryIsUberCool\");\n      assertEquals(1, executeQuery(params(\"q\", \"id:5\"), \"harry\", \"HarryIsUberCool\").getResults().getNumFound());\n      assertAuthMetricsMinimums(32, 20, 9, 1, 2, 0);\n      assertPkiAuthMetricsMinimums(19, 19, 0, 0, 0, 0);\n      \n      executeCommand(baseUrl + authcPrefix, cl, \"{set-property : { blockUnknown: false}}\", \"harry\", \"HarryIsUberCool\");\n    } finally {\n      if (cl != null) {\n        HttpClientUtil.close(cl);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b31ebc7a867ddea79d438a8fca876a94e644d11a":["a8ab788212d72a7c436e5ef349ca99fe3c8fc78b","767d389403b701039ee599ec2ac8a838f45d8cb7"],"741969fe89a5d7ff8fb5c8e7934b2cf427060de6":["6bb1e55267dc3975be328fddeb53509a50d37457"],"db9b1bed7bcc60ad5785234a3fa3bf799f1e41fd":["eb2fdf8e419623d01c2500e64f326b01ea4b760b"],"e4d551dd5406e7a716dc72acae21169c24942299":["73d1467175b0c041295320312cbb1dbba0bb86eb"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["db96734b79e26d948b59f68bd4564c4836a71acf"],"5797edf204835cbec74c0ff24f0b9ebc8aa5441b":["3bf3bb51868790b9ae23c224583047716308a017"],"e98520789adb1d5ad05afb4956eca0944a929688":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"89424def13674ea17829b41c5883c54ecc31a132":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5797edf204835cbec74c0ff24f0b9ebc8aa5441b"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a8ab788212d72a7c436e5ef349ca99fe3c8fc78b","767d389403b701039ee599ec2ac8a838f45d8cb7"],"16a1bbda4a49d74d4c9df2eba45b180565fffeab":["d8207e91facaea9baa165547a003b8b5a8ad74a8"],"5a10d4a0423ccdc7c84efa89beeef9a56c01d0e1":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["741969fe89a5d7ff8fb5c8e7934b2cf427060de6","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"eb2fdf8e419623d01c2500e64f326b01ea4b760b":["85397dd93927c17347c6bf89800cd0fc566c2d03"],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":["16a1bbda4a49d74d4c9df2eba45b180565fffeab","bb3e075eaa5788b2762ec235bf72b069cefe3f50"],"1294c21b1991388ed74f71be7130aeb17d48acbc":["a52341299179de5479672f7cf518bf4b173f34b3"],"43ad790248d7f7daee5d9cced548c546f37c7218":["1294c21b1991388ed74f71be7130aeb17d48acbc"],"f8061ddd97f3352007d927dae445884a6f3d857b":["741969fe89a5d7ff8fb5c8e7934b2cf427060de6","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"bb3e075eaa5788b2762ec235bf72b069cefe3f50":["16a1bbda4a49d74d4c9df2eba45b180565fffeab"],"a8ab788212d72a7c436e5ef349ca99fe3c8fc78b":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","88bc4985c282c4086425237f691ed9fb95021bbc"],"db96734b79e26d948b59f68bd4564c4836a71acf":["d450c0530a2765633277b632c29c54e190e3cb7e"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["741969fe89a5d7ff8fb5c8e7934b2cf427060de6"],"d2d6b868457b26b5a2145b8441b1cfcfc0692b02":["43ad790248d7f7daee5d9cced548c546f37c7218"],"73d1467175b0c041295320312cbb1dbba0bb86eb":["b5c929d2716fa79d443b93a82adb1da5b578ebd8"],"4bb519c79b76e52145e37b6681a7012525ed5f4b":["db9b1bed7bcc60ad5785234a3fa3bf799f1e41fd"],"d450c0530a2765633277b632c29c54e190e3cb7e":["c44cc06c26e456fe9c215072b79fce30babe3975"],"3bf3bb51868790b9ae23c224583047716308a017":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d8207e91facaea9baa165547a003b8b5a8ad74a8":["0094db1bc17297deebfd847f9aa10d42a7b987e5"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["d2d6b868457b26b5a2145b8441b1cfcfc0692b02"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"b5c929d2716fa79d443b93a82adb1da5b578ebd8":["bb3e075eaa5788b2762ec235bf72b069cefe3f50"],"c44cc06c26e456fe9c215072b79fce30babe3975":["173104badc305e417297852d42351ba4694a2ad5"],"173104badc305e417297852d42351ba4694a2ad5":["d1a307447328c95a00248512b40d7a5ff12ecd6a"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["4bb519c79b76e52145e37b6681a7012525ed5f4b"],"85397dd93927c17347c6bf89800cd0fc566c2d03":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89424def13674ea17829b41c5883c54ecc31a132"],"b2d19164145b2a65acf62a657c75f4a249b649c0":["e98520789adb1d5ad05afb4956eca0944a929688"],"0094db1bc17297deebfd847f9aa10d42a7b987e5":["4865c4af9862963461c8fa37140d7f1720c03a55"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["767d389403b701039ee599ec2ac8a838f45d8cb7"],"6bb1e55267dc3975be328fddeb53509a50d37457":["e4d551dd5406e7a716dc72acae21169c24942299"],"cca96e80333ca9020d81619455b85e134d6d4622":["5a10d4a0423ccdc7c84efa89beeef9a56c01d0e1"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["88bc4985c282c4086425237f691ed9fb95021bbc"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["e9017cf144952056066919f1ebc7897ff9bd71b1","ac1e7fa558287a811ea07634d815ee7b1c541284"],"767d389403b701039ee599ec2ac8a838f45d8cb7":["a8ab788212d72a7c436e5ef349ca99fe3c8fc78b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4865c4af9862963461c8fa37140d7f1720c03a55":["cca96e80333ca9020d81619455b85e134d6d4622"],"a52341299179de5479672f7cf518bf4b173f34b3":["767d389403b701039ee599ec2ac8a838f45d8cb7","ac1e7fa558287a811ea07634d815ee7b1c541284"],"88bc4985c282c4086425237f691ed9fb95021bbc":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b2d19164145b2a65acf62a657c75f4a249b649c0"],"b0b597c65628ca9e73913a07e81691f8229bae35":["173104badc305e417297852d42351ba4694a2ad5","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"b31ebc7a867ddea79d438a8fca876a94e644d11a":[],"741969fe89a5d7ff8fb5c8e7934b2cf427060de6":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"db9b1bed7bcc60ad5785234a3fa3bf799f1e41fd":["4bb519c79b76e52145e37b6681a7012525ed5f4b"],"e4d551dd5406e7a716dc72acae21169c24942299":["6bb1e55267dc3975be328fddeb53509a50d37457"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["e98520789adb1d5ad05afb4956eca0944a929688"],"5797edf204835cbec74c0ff24f0b9ebc8aa5441b":["89424def13674ea17829b41c5883c54ecc31a132"],"e98520789adb1d5ad05afb4956eca0944a929688":["b2d19164145b2a65acf62a657c75f4a249b649c0"],"89424def13674ea17829b41c5883c54ecc31a132":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["936cdd5882761db3b844afd6f84ab81cbb011a75"],"16a1bbda4a49d74d4c9df2eba45b180565fffeab":["2682a1cd25864ccdc1b44bf047bd08700f28ba06","bb3e075eaa5788b2762ec235bf72b069cefe3f50"],"5a10d4a0423ccdc7c84efa89beeef9a56c01d0e1":["cca96e80333ca9020d81619455b85e134d6d4622"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"eb2fdf8e419623d01c2500e64f326b01ea4b760b":["db9b1bed7bcc60ad5785234a3fa3bf799f1e41fd"],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":[],"1294c21b1991388ed74f71be7130aeb17d48acbc":["43ad790248d7f7daee5d9cced548c546f37c7218"],"43ad790248d7f7daee5d9cced548c546f37c7218":["d2d6b868457b26b5a2145b8441b1cfcfc0692b02"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"bb3e075eaa5788b2762ec235bf72b069cefe3f50":["2682a1cd25864ccdc1b44bf047bd08700f28ba06","b5c929d2716fa79d443b93a82adb1da5b578ebd8"],"a8ab788212d72a7c436e5ef349ca99fe3c8fc78b":["b31ebc7a867ddea79d438a8fca876a94e644d11a","e9017cf144952056066919f1ebc7897ff9bd71b1","767d389403b701039ee599ec2ac8a838f45d8cb7"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"db96734b79e26d948b59f68bd4564c4836a71acf":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","173104badc305e417297852d42351ba4694a2ad5"],"d2d6b868457b26b5a2145b8441b1cfcfc0692b02":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"73d1467175b0c041295320312cbb1dbba0bb86eb":["e4d551dd5406e7a716dc72acae21169c24942299"],"4bb519c79b76e52145e37b6681a7012525ed5f4b":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"3bf3bb51868790b9ae23c224583047716308a017":["5797edf204835cbec74c0ff24f0b9ebc8aa5441b"],"d450c0530a2765633277b632c29c54e190e3cb7e":["db96734b79e26d948b59f68bd4564c4836a71acf"],"d8207e91facaea9baa165547a003b8b5a8ad74a8":["16a1bbda4a49d74d4c9df2eba45b180565fffeab"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["85397dd93927c17347c6bf89800cd0fc566c2d03"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"b5c929d2716fa79d443b93a82adb1da5b578ebd8":["73d1467175b0c041295320312cbb1dbba0bb86eb"],"c44cc06c26e456fe9c215072b79fce30babe3975":["d450c0530a2765633277b632c29c54e190e3cb7e","b0b597c65628ca9e73913a07e81691f8229bae35"],"173104badc305e417297852d42351ba4694a2ad5":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["5a10d4a0423ccdc7c84efa89beeef9a56c01d0e1"],"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"85397dd93927c17347c6bf89800cd0fc566c2d03":["eb2fdf8e419623d01c2500e64f326b01ea4b760b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["89424def13674ea17829b41c5883c54ecc31a132","3bf3bb51868790b9ae23c224583047716308a017","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","88bc4985c282c4086425237f691ed9fb95021bbc"],"b2d19164145b2a65acf62a657c75f4a249b649c0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0094db1bc17297deebfd847f9aa10d42a7b987e5":["d8207e91facaea9baa165547a003b8b5a8ad74a8"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["936cdd5882761db3b844afd6f84ab81cbb011a75","a52341299179de5479672f7cf518bf4b173f34b3"],"6bb1e55267dc3975be328fddeb53509a50d37457":["741969fe89a5d7ff8fb5c8e7934b2cf427060de6"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["a8ab788212d72a7c436e5ef349ca99fe3c8fc78b","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"cca96e80333ca9020d81619455b85e134d6d4622":["4865c4af9862963461c8fa37140d7f1720c03a55"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"767d389403b701039ee599ec2ac8a838f45d8cb7":["b31ebc7a867ddea79d438a8fca876a94e644d11a","e9017cf144952056066919f1ebc7897ff9bd71b1","ac1e7fa558287a811ea07634d815ee7b1c541284","a52341299179de5479672f7cf518bf4b173f34b3"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"4865c4af9862963461c8fa37140d7f1720c03a55":["0094db1bc17297deebfd847f9aa10d42a7b987e5"],"a52341299179de5479672f7cf518bf4b173f34b3":["1294c21b1991388ed74f71be7130aeb17d48acbc"],"88bc4985c282c4086425237f691ed9fb95021bbc":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["b31ebc7a867ddea79d438a8fca876a94e644d11a","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","2682a1cd25864ccdc1b44bf047bd08700f28ba06","f8061ddd97f3352007d927dae445884a6f3d857b","7c3523a0ab04c3002eee3896c75ea5f10f388bcc","936cdd5882761db3b844afd6f84ab81cbb011a75","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}