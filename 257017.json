{"path":"lucene/core/src/java/org/apache/lucene/codecs/TermsConsumer#merge(MergeState,IndexOptions,TermsEnum).mjava","commits":[{"id":"6de04d4fe93277012dfab5984e08a38de091bcd1","date":1359464792,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/TermsConsumer#merge(MergeState,IndexOptions,TermsEnum).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/TermsConsumer#merge(MergeState,TermsEnum).mjava","sourceNew":"  /** Default merge impl */\n  public void merge(MergeState mergeState, IndexOptions indexOptions, TermsEnum termsEnum) throws IOException {\n\n    BytesRef term;\n    assert termsEnum != null;\n    long sumTotalTermFreq = 0;\n    long sumDocFreq = 0;\n    long sumDFsinceLastAbortCheck = 0;\n    FixedBitSet visitedDocs = new FixedBitSet(mergeState.segmentInfo.getDocCount());\n\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      if (docsEnum == null) {\n        docsEnum = new MappingMultiDocsEnum();\n      }\n      docsEnum.setMergeState(mergeState);\n\n      MultiDocsEnum docsEnumIn = null;\n\n      while((term = termsEnum.next()) != null) {\n        // We can pass null for liveDocs, because the\n        // mapping enum will skip the non-live docs:\n        docsEnumIn = (MultiDocsEnum) termsEnum.docs(null, docsEnumIn, DocsEnum.FLAG_NONE);\n        if (docsEnumIn != null) {\n          docsEnum.reset(docsEnumIn);\n          final PostingsConsumer postingsConsumer = startTerm(term);\n          final TermStats stats = postingsConsumer.merge(mergeState, indexOptions, docsEnum, visitedDocs);\n          if (stats.docFreq > 0) {\n            finishTerm(term, stats);\n            sumTotalTermFreq += stats.docFreq;\n            sumDFsinceLastAbortCheck += stats.docFreq;\n            sumDocFreq += stats.docFreq;\n            if (sumDFsinceLastAbortCheck > 60000) {\n              mergeState.checkAbort.work(sumDFsinceLastAbortCheck/5.0);\n              sumDFsinceLastAbortCheck = 0;\n            }\n          }\n        }\n      }\n    } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n      if (docsAndFreqsEnum == null) {\n        docsAndFreqsEnum = new MappingMultiDocsEnum();\n      }\n      docsAndFreqsEnum.setMergeState(mergeState);\n\n      MultiDocsEnum docsAndFreqsEnumIn = null;\n\n      while((term = termsEnum.next()) != null) {\n        // We can pass null for liveDocs, because the\n        // mapping enum will skip the non-live docs:\n        docsAndFreqsEnumIn = (MultiDocsEnum) termsEnum.docs(null, docsAndFreqsEnumIn);\n        assert docsAndFreqsEnumIn != null;\n        docsAndFreqsEnum.reset(docsAndFreqsEnumIn);\n        final PostingsConsumer postingsConsumer = startTerm(term);\n        final TermStats stats = postingsConsumer.merge(mergeState, indexOptions, docsAndFreqsEnum, visitedDocs);\n        if (stats.docFreq > 0) {\n          finishTerm(term, stats);\n          sumTotalTermFreq += stats.totalTermFreq;\n          sumDFsinceLastAbortCheck += stats.docFreq;\n          sumDocFreq += stats.docFreq;\n          if (sumDFsinceLastAbortCheck > 60000) {\n            mergeState.checkAbort.work(sumDFsinceLastAbortCheck/5.0);\n            sumDFsinceLastAbortCheck = 0;\n          }\n        }\n      }\n    } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      if (postingsEnum == null) {\n        postingsEnum = new MappingMultiDocsAndPositionsEnum();\n      }\n      postingsEnum.setMergeState(mergeState);\n      MultiDocsAndPositionsEnum postingsEnumIn = null;\n      while((term = termsEnum.next()) != null) {\n        // We can pass null for liveDocs, because the\n        // mapping enum will skip the non-live docs:\n        postingsEnumIn = (MultiDocsAndPositionsEnum) termsEnum.docsAndPositions(null, postingsEnumIn, DocsAndPositionsEnum.FLAG_PAYLOADS);\n        assert postingsEnumIn != null;\n        postingsEnum.reset(postingsEnumIn);\n\n        final PostingsConsumer postingsConsumer = startTerm(term);\n        final TermStats stats = postingsConsumer.merge(mergeState, indexOptions, postingsEnum, visitedDocs);\n        if (stats.docFreq > 0) {\n          finishTerm(term, stats);\n          sumTotalTermFreq += stats.totalTermFreq;\n          sumDFsinceLastAbortCheck += stats.docFreq;\n          sumDocFreq += stats.docFreq;\n          if (sumDFsinceLastAbortCheck > 60000) {\n            mergeState.checkAbort.work(sumDFsinceLastAbortCheck/5.0);\n            sumDFsinceLastAbortCheck = 0;\n          }\n        }\n      }\n    } else {\n      assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n      if (postingsEnum == null) {\n        postingsEnum = new MappingMultiDocsAndPositionsEnum();\n      }\n      postingsEnum.setMergeState(mergeState);\n      MultiDocsAndPositionsEnum postingsEnumIn = null;\n      while((term = termsEnum.next()) != null) {\n        // We can pass null for liveDocs, because the\n        // mapping enum will skip the non-live docs:\n        postingsEnumIn = (MultiDocsAndPositionsEnum) termsEnum.docsAndPositions(null, postingsEnumIn);\n        assert postingsEnumIn != null;\n        postingsEnum.reset(postingsEnumIn);\n\n        final PostingsConsumer postingsConsumer = startTerm(term);\n        final TermStats stats = postingsConsumer.merge(mergeState, indexOptions, postingsEnum, visitedDocs);\n        if (stats.docFreq > 0) {\n          finishTerm(term, stats);\n          sumTotalTermFreq += stats.totalTermFreq;\n          sumDFsinceLastAbortCheck += stats.docFreq;\n          sumDocFreq += stats.docFreq;\n          if (sumDFsinceLastAbortCheck > 60000) {\n            mergeState.checkAbort.work(sumDFsinceLastAbortCheck/5.0);\n            sumDFsinceLastAbortCheck = 0;\n          }\n        }\n      }\n    }\n    finish(indexOptions == IndexOptions.DOCS_ONLY ? -1 : sumTotalTermFreq, sumDocFreq, visitedDocs.cardinality());\n  }\n\n","sourceOld":"  /** Default merge impl */\n  public void merge(MergeState mergeState, TermsEnum termsEnum) throws IOException {\n\n    BytesRef term;\n    assert termsEnum != null;\n    long sumTotalTermFreq = 0;\n    long sumDocFreq = 0;\n    long sumDFsinceLastAbortCheck = 0;\n    FixedBitSet visitedDocs = new FixedBitSet(mergeState.segmentInfo.getDocCount());\n\n    IndexOptions indexOptions = mergeState.fieldInfo.getIndexOptions();\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      if (docsEnum == null) {\n        docsEnum = new MappingMultiDocsEnum();\n      }\n      docsEnum.setMergeState(mergeState);\n\n      MultiDocsEnum docsEnumIn = null;\n\n      while((term = termsEnum.next()) != null) {\n        // We can pass null for liveDocs, because the\n        // mapping enum will skip the non-live docs:\n        docsEnumIn = (MultiDocsEnum) termsEnum.docs(null, docsEnumIn, DocsEnum.FLAG_NONE);\n        if (docsEnumIn != null) {\n          docsEnum.reset(docsEnumIn);\n          final PostingsConsumer postingsConsumer = startTerm(term);\n          final TermStats stats = postingsConsumer.merge(mergeState, docsEnum, visitedDocs);\n          if (stats.docFreq > 0) {\n            finishTerm(term, stats);\n            sumTotalTermFreq += stats.docFreq;\n            sumDFsinceLastAbortCheck += stats.docFreq;\n            sumDocFreq += stats.docFreq;\n            if (sumDFsinceLastAbortCheck > 60000) {\n              mergeState.checkAbort.work(sumDFsinceLastAbortCheck/5.0);\n              sumDFsinceLastAbortCheck = 0;\n            }\n          }\n        }\n      }\n    } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n      if (docsAndFreqsEnum == null) {\n        docsAndFreqsEnum = new MappingMultiDocsEnum();\n      }\n      docsAndFreqsEnum.setMergeState(mergeState);\n\n      MultiDocsEnum docsAndFreqsEnumIn = null;\n\n      while((term = termsEnum.next()) != null) {\n        // We can pass null for liveDocs, because the\n        // mapping enum will skip the non-live docs:\n        docsAndFreqsEnumIn = (MultiDocsEnum) termsEnum.docs(null, docsAndFreqsEnumIn);\n        assert docsAndFreqsEnumIn != null;\n        docsAndFreqsEnum.reset(docsAndFreqsEnumIn);\n        final PostingsConsumer postingsConsumer = startTerm(term);\n        final TermStats stats = postingsConsumer.merge(mergeState, docsAndFreqsEnum, visitedDocs);\n        if (stats.docFreq > 0) {\n          finishTerm(term, stats);\n          sumTotalTermFreq += stats.totalTermFreq;\n          sumDFsinceLastAbortCheck += stats.docFreq;\n          sumDocFreq += stats.docFreq;\n          if (sumDFsinceLastAbortCheck > 60000) {\n            mergeState.checkAbort.work(sumDFsinceLastAbortCheck/5.0);\n            sumDFsinceLastAbortCheck = 0;\n          }\n        }\n      }\n    } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      if (postingsEnum == null) {\n        postingsEnum = new MappingMultiDocsAndPositionsEnum();\n      }\n      postingsEnum.setMergeState(mergeState);\n      MultiDocsAndPositionsEnum postingsEnumIn = null;\n      while((term = termsEnum.next()) != null) {\n        // We can pass null for liveDocs, because the\n        // mapping enum will skip the non-live docs:\n        postingsEnumIn = (MultiDocsAndPositionsEnum) termsEnum.docsAndPositions(null, postingsEnumIn, DocsAndPositionsEnum.FLAG_PAYLOADS);\n        assert postingsEnumIn != null;\n        postingsEnum.reset(postingsEnumIn);\n\n        final PostingsConsumer postingsConsumer = startTerm(term);\n        final TermStats stats = postingsConsumer.merge(mergeState, postingsEnum, visitedDocs);\n        if (stats.docFreq > 0) {\n          finishTerm(term, stats);\n          sumTotalTermFreq += stats.totalTermFreq;\n          sumDFsinceLastAbortCheck += stats.docFreq;\n          sumDocFreq += stats.docFreq;\n          if (sumDFsinceLastAbortCheck > 60000) {\n            mergeState.checkAbort.work(sumDFsinceLastAbortCheck/5.0);\n            sumDFsinceLastAbortCheck = 0;\n          }\n        }\n      }\n    } else {\n      assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n      if (postingsEnum == null) {\n        postingsEnum = new MappingMultiDocsAndPositionsEnum();\n      }\n      postingsEnum.setMergeState(mergeState);\n      MultiDocsAndPositionsEnum postingsEnumIn = null;\n      while((term = termsEnum.next()) != null) {\n        // We can pass null for liveDocs, because the\n        // mapping enum will skip the non-live docs:\n        postingsEnumIn = (MultiDocsAndPositionsEnum) termsEnum.docsAndPositions(null, postingsEnumIn);\n        assert postingsEnumIn != null;\n        postingsEnum.reset(postingsEnumIn);\n\n        final PostingsConsumer postingsConsumer = startTerm(term);\n        final TermStats stats = postingsConsumer.merge(mergeState, postingsEnum, visitedDocs);\n        if (stats.docFreq > 0) {\n          finishTerm(term, stats);\n          sumTotalTermFreq += stats.totalTermFreq;\n          sumDFsinceLastAbortCheck += stats.docFreq;\n          sumDocFreq += stats.docFreq;\n          if (sumDFsinceLastAbortCheck > 60000) {\n            mergeState.checkAbort.work(sumDFsinceLastAbortCheck/5.0);\n            sumDFsinceLastAbortCheck = 0;\n          }\n        }\n      }\n    }\n    finish(indexOptions == IndexOptions.DOCS_ONLY ? -1 : sumTotalTermFreq, sumDocFreq, visitedDocs.cardinality());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/TermsConsumer#merge(MergeState,IndexOptions,TermsEnum).mjava","pathOld":"/dev/null","sourceNew":"  /** Default merge impl */\n  public void merge(MergeState mergeState, IndexOptions indexOptions, TermsEnum termsEnum) throws IOException {\n\n    BytesRef term;\n    assert termsEnum != null;\n    long sumTotalTermFreq = 0;\n    long sumDocFreq = 0;\n    long sumDFsinceLastAbortCheck = 0;\n    FixedBitSet visitedDocs = new FixedBitSet(mergeState.segmentInfo.getDocCount());\n\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      if (docsEnum == null) {\n        docsEnum = new MappingMultiDocsEnum();\n      }\n      docsEnum.setMergeState(mergeState);\n\n      MultiDocsEnum docsEnumIn = null;\n\n      while((term = termsEnum.next()) != null) {\n        // We can pass null for liveDocs, because the\n        // mapping enum will skip the non-live docs:\n        docsEnumIn = (MultiDocsEnum) termsEnum.docs(null, docsEnumIn, DocsEnum.FLAG_NONE);\n        if (docsEnumIn != null) {\n          docsEnum.reset(docsEnumIn);\n          final PostingsConsumer postingsConsumer = startTerm(term);\n          final TermStats stats = postingsConsumer.merge(mergeState, indexOptions, docsEnum, visitedDocs);\n          if (stats.docFreq > 0) {\n            finishTerm(term, stats);\n            sumTotalTermFreq += stats.docFreq;\n            sumDFsinceLastAbortCheck += stats.docFreq;\n            sumDocFreq += stats.docFreq;\n            if (sumDFsinceLastAbortCheck > 60000) {\n              mergeState.checkAbort.work(sumDFsinceLastAbortCheck/5.0);\n              sumDFsinceLastAbortCheck = 0;\n            }\n          }\n        }\n      }\n    } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n      if (docsAndFreqsEnum == null) {\n        docsAndFreqsEnum = new MappingMultiDocsEnum();\n      }\n      docsAndFreqsEnum.setMergeState(mergeState);\n\n      MultiDocsEnum docsAndFreqsEnumIn = null;\n\n      while((term = termsEnum.next()) != null) {\n        // We can pass null for liveDocs, because the\n        // mapping enum will skip the non-live docs:\n        docsAndFreqsEnumIn = (MultiDocsEnum) termsEnum.docs(null, docsAndFreqsEnumIn);\n        assert docsAndFreqsEnumIn != null;\n        docsAndFreqsEnum.reset(docsAndFreqsEnumIn);\n        final PostingsConsumer postingsConsumer = startTerm(term);\n        final TermStats stats = postingsConsumer.merge(mergeState, indexOptions, docsAndFreqsEnum, visitedDocs);\n        if (stats.docFreq > 0) {\n          finishTerm(term, stats);\n          sumTotalTermFreq += stats.totalTermFreq;\n          sumDFsinceLastAbortCheck += stats.docFreq;\n          sumDocFreq += stats.docFreq;\n          if (sumDFsinceLastAbortCheck > 60000) {\n            mergeState.checkAbort.work(sumDFsinceLastAbortCheck/5.0);\n            sumDFsinceLastAbortCheck = 0;\n          }\n        }\n      }\n    } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      if (postingsEnum == null) {\n        postingsEnum = new MappingMultiDocsAndPositionsEnum();\n      }\n      postingsEnum.setMergeState(mergeState);\n      MultiDocsAndPositionsEnum postingsEnumIn = null;\n      while((term = termsEnum.next()) != null) {\n        // We can pass null for liveDocs, because the\n        // mapping enum will skip the non-live docs:\n        postingsEnumIn = (MultiDocsAndPositionsEnum) termsEnum.docsAndPositions(null, postingsEnumIn, DocsAndPositionsEnum.FLAG_PAYLOADS);\n        assert postingsEnumIn != null;\n        postingsEnum.reset(postingsEnumIn);\n\n        final PostingsConsumer postingsConsumer = startTerm(term);\n        final TermStats stats = postingsConsumer.merge(mergeState, indexOptions, postingsEnum, visitedDocs);\n        if (stats.docFreq > 0) {\n          finishTerm(term, stats);\n          sumTotalTermFreq += stats.totalTermFreq;\n          sumDFsinceLastAbortCheck += stats.docFreq;\n          sumDocFreq += stats.docFreq;\n          if (sumDFsinceLastAbortCheck > 60000) {\n            mergeState.checkAbort.work(sumDFsinceLastAbortCheck/5.0);\n            sumDFsinceLastAbortCheck = 0;\n          }\n        }\n      }\n    } else {\n      assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n      if (postingsEnum == null) {\n        postingsEnum = new MappingMultiDocsAndPositionsEnum();\n      }\n      postingsEnum.setMergeState(mergeState);\n      MultiDocsAndPositionsEnum postingsEnumIn = null;\n      while((term = termsEnum.next()) != null) {\n        // We can pass null for liveDocs, because the\n        // mapping enum will skip the non-live docs:\n        postingsEnumIn = (MultiDocsAndPositionsEnum) termsEnum.docsAndPositions(null, postingsEnumIn);\n        assert postingsEnumIn != null;\n        postingsEnum.reset(postingsEnumIn);\n\n        final PostingsConsumer postingsConsumer = startTerm(term);\n        final TermStats stats = postingsConsumer.merge(mergeState, indexOptions, postingsEnum, visitedDocs);\n        if (stats.docFreq > 0) {\n          finishTerm(term, stats);\n          sumTotalTermFreq += stats.totalTermFreq;\n          sumDFsinceLastAbortCheck += stats.docFreq;\n          sumDocFreq += stats.docFreq;\n          if (sumDFsinceLastAbortCheck > 60000) {\n            mergeState.checkAbort.work(sumDFsinceLastAbortCheck/5.0);\n            sumDFsinceLastAbortCheck = 0;\n          }\n        }\n      }\n    }\n    finish(indexOptions == IndexOptions.DOCS_ONLY ? -1 : sumTotalTermFreq, sumDocFreq, visitedDocs.cardinality());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","date":1379624229,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/TermsConsumer#merge(MergeState,IndexOptions,TermsEnum).mjava","sourceNew":null,"sourceOld":"  /** Default merge impl */\n  public void merge(MergeState mergeState, IndexOptions indexOptions, TermsEnum termsEnum) throws IOException {\n\n    BytesRef term;\n    assert termsEnum != null;\n    long sumTotalTermFreq = 0;\n    long sumDocFreq = 0;\n    long sumDFsinceLastAbortCheck = 0;\n    FixedBitSet visitedDocs = new FixedBitSet(mergeState.segmentInfo.getDocCount());\n\n    if (indexOptions == IndexOptions.DOCS_ONLY) {\n      if (docsEnum == null) {\n        docsEnum = new MappingMultiDocsEnum();\n      }\n      docsEnum.setMergeState(mergeState);\n\n      MultiDocsEnum docsEnumIn = null;\n\n      while((term = termsEnum.next()) != null) {\n        // We can pass null for liveDocs, because the\n        // mapping enum will skip the non-live docs:\n        docsEnumIn = (MultiDocsEnum) termsEnum.docs(null, docsEnumIn, DocsEnum.FLAG_NONE);\n        if (docsEnumIn != null) {\n          docsEnum.reset(docsEnumIn);\n          final PostingsConsumer postingsConsumer = startTerm(term);\n          final TermStats stats = postingsConsumer.merge(mergeState, indexOptions, docsEnum, visitedDocs);\n          if (stats.docFreq > 0) {\n            finishTerm(term, stats);\n            sumTotalTermFreq += stats.docFreq;\n            sumDFsinceLastAbortCheck += stats.docFreq;\n            sumDocFreq += stats.docFreq;\n            if (sumDFsinceLastAbortCheck > 60000) {\n              mergeState.checkAbort.work(sumDFsinceLastAbortCheck/5.0);\n              sumDFsinceLastAbortCheck = 0;\n            }\n          }\n        }\n      }\n    } else if (indexOptions == IndexOptions.DOCS_AND_FREQS) {\n      if (docsAndFreqsEnum == null) {\n        docsAndFreqsEnum = new MappingMultiDocsEnum();\n      }\n      docsAndFreqsEnum.setMergeState(mergeState);\n\n      MultiDocsEnum docsAndFreqsEnumIn = null;\n\n      while((term = termsEnum.next()) != null) {\n        // We can pass null for liveDocs, because the\n        // mapping enum will skip the non-live docs:\n        docsAndFreqsEnumIn = (MultiDocsEnum) termsEnum.docs(null, docsAndFreqsEnumIn);\n        assert docsAndFreqsEnumIn != null;\n        docsAndFreqsEnum.reset(docsAndFreqsEnumIn);\n        final PostingsConsumer postingsConsumer = startTerm(term);\n        final TermStats stats = postingsConsumer.merge(mergeState, indexOptions, docsAndFreqsEnum, visitedDocs);\n        if (stats.docFreq > 0) {\n          finishTerm(term, stats);\n          sumTotalTermFreq += stats.totalTermFreq;\n          sumDFsinceLastAbortCheck += stats.docFreq;\n          sumDocFreq += stats.docFreq;\n          if (sumDFsinceLastAbortCheck > 60000) {\n            mergeState.checkAbort.work(sumDFsinceLastAbortCheck/5.0);\n            sumDFsinceLastAbortCheck = 0;\n          }\n        }\n      }\n    } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      if (postingsEnum == null) {\n        postingsEnum = new MappingMultiDocsAndPositionsEnum();\n      }\n      postingsEnum.setMergeState(mergeState);\n      MultiDocsAndPositionsEnum postingsEnumIn = null;\n      while((term = termsEnum.next()) != null) {\n        // We can pass null for liveDocs, because the\n        // mapping enum will skip the non-live docs:\n        postingsEnumIn = (MultiDocsAndPositionsEnum) termsEnum.docsAndPositions(null, postingsEnumIn, DocsAndPositionsEnum.FLAG_PAYLOADS);\n        assert postingsEnumIn != null;\n        postingsEnum.reset(postingsEnumIn);\n\n        final PostingsConsumer postingsConsumer = startTerm(term);\n        final TermStats stats = postingsConsumer.merge(mergeState, indexOptions, postingsEnum, visitedDocs);\n        if (stats.docFreq > 0) {\n          finishTerm(term, stats);\n          sumTotalTermFreq += stats.totalTermFreq;\n          sumDFsinceLastAbortCheck += stats.docFreq;\n          sumDocFreq += stats.docFreq;\n          if (sumDFsinceLastAbortCheck > 60000) {\n            mergeState.checkAbort.work(sumDFsinceLastAbortCheck/5.0);\n            sumDFsinceLastAbortCheck = 0;\n          }\n        }\n      }\n    } else {\n      assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS;\n      if (postingsEnum == null) {\n        postingsEnum = new MappingMultiDocsAndPositionsEnum();\n      }\n      postingsEnum.setMergeState(mergeState);\n      MultiDocsAndPositionsEnum postingsEnumIn = null;\n      while((term = termsEnum.next()) != null) {\n        // We can pass null for liveDocs, because the\n        // mapping enum will skip the non-live docs:\n        postingsEnumIn = (MultiDocsAndPositionsEnum) termsEnum.docsAndPositions(null, postingsEnumIn);\n        assert postingsEnumIn != null;\n        postingsEnum.reset(postingsEnumIn);\n\n        final PostingsConsumer postingsConsumer = startTerm(term);\n        final TermStats stats = postingsConsumer.merge(mergeState, indexOptions, postingsEnum, visitedDocs);\n        if (stats.docFreq > 0) {\n          finishTerm(term, stats);\n          sumTotalTermFreq += stats.totalTermFreq;\n          sumDFsinceLastAbortCheck += stats.docFreq;\n          sumDocFreq += stats.docFreq;\n          if (sumDFsinceLastAbortCheck > 60000) {\n            mergeState.checkAbort.work(sumDFsinceLastAbortCheck/5.0);\n            sumDFsinceLastAbortCheck = 0;\n          }\n        }\n      }\n    }\n    finish(indexOptions == IndexOptions.DOCS_ONLY ? -1 : sumTotalTermFreq, sumDocFreq, visitedDocs.cardinality());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6de04d4fe93277012dfab5984e08a38de091bcd1"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6de04d4fe93277012dfab5984e08a38de091bcd1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","6de04d4fe93277012dfab5984e08a38de091bcd1"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6de04d4fe93277012dfab5984e08a38de091bcd1":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}