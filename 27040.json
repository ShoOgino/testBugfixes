{"path":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(Query,DocSet).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(Query,DocSet).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(Query,DocSet).mjava","sourceNew":"  /**\n   * Returns the set of document ids matching both the query and the filter.\n   * This method is cache-aware and attempts to retrieve the answer from the cache if possible.\n   * If the answer was not cached, it may have been inserted into the cache as a result of this call.\n   * <p>\n   *\n   * @param query\n   * @param filter may be null\n   * @return DocSet meeting the specified criteria, should <b>not</b> be modified by the caller.\n   */\n  public DocSet getDocSet(Query query, DocSet filter) throws IOException {\n    if (filter==null) return getDocSet(query);\n\n    if (query instanceof ExtendedQuery) {\n      ExtendedQuery eq = (ExtendedQuery)query;\n      if (!eq.getCache()) {\n        if (query instanceof WrappedQuery) {\n          query = ((WrappedQuery)query).getWrappedQuery();\n        }\n        query = QueryUtils.makeQueryable(query);\n        return getDocSetNC(query, filter);\n      }\n    }\n\n    // Negative query if absolute value different from original\n    Query absQ = QueryUtils.getAbs(query);\n    boolean positive = absQ==query;\n\n    DocSet first;\n    if (filterCache != null) {\n      first = filterCache.get(absQ);\n      if (first==null) {\n        first = getDocSetNC(absQ,null);\n        filterCache.put(absQ,first);\n      }\n      return positive ? first.intersection(filter) : filter.andNot(first);\n    }\n\n    // If there isn't a cache, then do a single filtered query if positive.\n    return positive ? getDocSetNC(absQ,filter) : filter.andNot(getPositiveDocSet(absQ));\n  }\n\n","sourceOld":"  /**\n   * Returns the set of document ids matching both the query and the filter.\n   * This method is cache-aware and attempts to retrieve the answer from the cache if possible.\n   * If the answer was not cached, it may have been inserted into the cache as a result of this call.\n   * <p>\n   *\n   * @param query\n   * @param filter may be null\n   * @return DocSet meeting the specified criteria, should <b>not</b> be modified by the caller.\n   */\n  public DocSet getDocSet(Query query, DocSet filter) throws IOException {\n    if (filter==null) return getDocSet(query);\n\n    if (query instanceof ExtendedQuery) {\n      ExtendedQuery eq = (ExtendedQuery)query;\n      if (!eq.getCache()) {\n        if (query instanceof WrappedQuery) {\n          query = ((WrappedQuery)query).getWrappedQuery();\n        }\n        query = QueryUtils.makeQueryable(query);\n        return getDocSetNC(query, filter);\n      }\n    }\n\n    // Negative query if absolute value different from original\n    Query absQ = QueryUtils.getAbs(query);\n    boolean positive = absQ==query;\n\n    DocSet first;\n    if (filterCache != null) {\n      first = filterCache.get(absQ);\n      if (first==null) {\n        first = getDocSetNC(absQ,null);\n        filterCache.put(absQ,first);\n      }\n      return positive ? first.intersection(filter) : filter.andNot(first);\n    }\n\n    // If there isn't a cache, then do a single filtered query if positive.\n    return positive ? getDocSetNC(absQ,filter) : filter.andNot(getPositiveDocSet(absQ));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(Query,DocSet).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(Query,DocSet).mjava","sourceNew":"  /**\n   * Returns the set of document ids matching both the query and the filter.\n   * This method is cache-aware and attempts to retrieve the answer from the cache if possible.\n   * If the answer was not cached, it may have been inserted into the cache as a result of this call.\n   * <p>\n   *\n   * @param query\n   * @param filter may be null\n   * @return DocSet meeting the specified criteria, should <b>not</b> be modified by the caller.\n   */\n  public DocSet getDocSet(Query query, DocSet filter) throws IOException {\n    if (filter==null) return getDocSet(query);\n\n    if (query instanceof ExtendedQuery) {\n      ExtendedQuery eq = (ExtendedQuery)query;\n      if (!eq.getCache()) {\n        if (query instanceof WrappedQuery) {\n          query = ((WrappedQuery)query).getWrappedQuery();\n        }\n        query = QueryUtils.makeQueryable(query);\n        return getDocSetNC(query, filter);\n      }\n    }\n\n    // Negative query if absolute value different from original\n    Query absQ = QueryUtils.getAbs(query);\n    boolean positive = absQ==query;\n\n    DocSet first;\n    if (filterCache != null) {\n      first = filterCache.get(absQ);\n      if (first==null) {\n        first = getDocSetNC(absQ,null);\n        filterCache.put(absQ,first);\n      }\n      return positive ? first.intersection(filter) : filter.andNot(first);\n    }\n\n    // If there isn't a cache, then do a single filtered query if positive.\n    return positive ? getDocSetNC(absQ,filter) : filter.andNot(getPositiveDocSet(absQ));\n  }\n\n","sourceOld":"  /**\n   * Returns the set of document ids matching both the query and the filter.\n   * This method is cache-aware and attempts to retrieve the answer from the cache if possible.\n   * If the answer was not cached, it may have been inserted into the cache as a result of this call.\n   * <p>\n   *\n   * @param query\n   * @param filter may be null\n   * @return DocSet meeting the specified criteria, should <b>not</b> be modified by the caller.\n   */\n  public DocSet getDocSet(Query query, DocSet filter) throws IOException {\n    if (filter==null) return getDocSet(query);\n\n    if (query instanceof ExtendedQuery) {\n      ExtendedQuery eq = (ExtendedQuery)query;\n      if (!eq.getCache()) {\n        if (query instanceof WrappedQuery) {\n          query = ((WrappedQuery)query).getWrappedQuery();\n        }\n        query = QueryUtils.makeQueryable(query);\n        return getDocSetNC(query, filter);\n      }\n    }\n\n    // Negative query if absolute value different from original\n    Query absQ = QueryUtils.getAbs(query);\n    boolean positive = absQ==query;\n\n    DocSet first;\n    if (filterCache != null) {\n      first = filterCache.get(absQ);\n      if (first==null) {\n        first = getDocSetNC(absQ,null);\n        filterCache.put(absQ,first);\n      }\n      return positive ? first.intersection(filter) : filter.andNot(first);\n    }\n\n    // If there isn't a cache, then do a single filtered query if positive.\n    return positive ? getDocSetNC(absQ,filter) : filter.andNot(getPositiveDocSet(absQ));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(Query,DocSet).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(Query,DocSet).mjava","sourceNew":"  /**\n   * Returns the set of document ids matching both the query and the filter.\n   * This method is cache-aware and attempts to retrieve the answer from the cache if possible.\n   * If the answer was not cached, it may have been inserted into the cache as a result of this call.\n   * <p>\n   *\n   * @param query\n   * @param filter may be null\n   * @return DocSet meeting the specified criteria, should <b>not</b> be modified by the caller.\n   */\n  public DocSet getDocSet(Query query, DocSet filter) throws IOException {\n    if (filter==null) return getDocSet(query);\n\n    if (query instanceof ExtendedQuery) {\n      ExtendedQuery eq = (ExtendedQuery)query;\n      if (!eq.getCache()) {\n        if (query instanceof WrappedQuery) {\n          query = ((WrappedQuery)query).getWrappedQuery();\n        }\n        query = QueryUtils.makeQueryable(query);\n        return getDocSetNC(query, filter);\n      }\n    }\n\n    // Negative query if absolute value different from original\n    Query absQ = QueryUtils.getAbs(query);\n    boolean positive = absQ==query;\n\n    DocSet first;\n    if (filterCache != null) {\n      first = filterCache.get(absQ);\n      if (first==null) {\n        first = getDocSetNC(absQ,null);\n        filterCache.put(absQ,first);\n      }\n      return positive ? first.intersection(filter) : filter.andNot(first);\n    }\n\n    // If there isn't a cache, then do a single filtered query if positive.\n    return positive ? getDocSetNC(absQ,filter) : filter.andNot(getPositiveDocSet(absQ));\n  }\n\n","sourceOld":"  /**\n   * Returns the set of document ids matching both the query and the filter.\n   * This method is cache-aware and attempts to retrieve the answer from the cache if possible.\n   * If the answer was not cached, it may have been inserted into the cache as a result of this call.\n   * <p>\n   *\n   * @param query\n   * @param filter may be null\n   * @return DocSet meeting the specified criteria, should <b>not</b> be modified by the caller.\n   */\n  public DocSet getDocSet(Query query, DocSet filter) throws IOException {\n    if (filter==null) return getDocSet(query);\n\n    if (query instanceof ExtendedQuery) {\n      ExtendedQuery eq = (ExtendedQuery)query;\n      if (!eq.getCache()) {\n        if (query instanceof WrappedQuery) {\n          query = ((WrappedQuery)query).getWrappedQuery();\n        }\n        query = QueryUtils.makeQueryable(query);\n        return getDocSetNC(query, filter);\n      }\n    }\n\n    // Negative query if absolute value different from original\n    Query absQ = QueryUtils.getAbs(query);\n    boolean positive = absQ==query;\n\n    DocSet first;\n    if (filterCache != null) {\n      first = filterCache.get(absQ);\n      if (first==null) {\n        first = getDocSetNC(absQ,null);\n        filterCache.put(absQ,first);\n      }\n      return positive ? first.intersection(filter) : filter.andNot(first);\n    }\n\n    // If there isn't a cache, then do a single filtered query if positive.\n    return positive ? getDocSetNC(absQ,filter) : filter.andNot(getPositiveDocSet(absQ));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(Query,DocSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(Query,DocSet).mjava","sourceNew":"  /**\n   * Returns the set of document ids matching both the query and the filter.\n   * This method is cache-aware and attempts to retrieve the answer from the cache if possible.\n   * If the answer was not cached, it may have been inserted into the cache as a result of this call.\n   * <p>\n   *\n   * @param filter may be null\n   * @return DocSet meeting the specified criteria, should <b>not</b> be modified by the caller.\n   */\n  public DocSet getDocSet(Query query, DocSet filter) throws IOException {\n    if (filter==null) return getDocSet(query);\n\n    if (query instanceof ExtendedQuery) {\n      ExtendedQuery eq = (ExtendedQuery)query;\n      if (!eq.getCache()) {\n        if (query instanceof WrappedQuery) {\n          query = ((WrappedQuery)query).getWrappedQuery();\n        }\n        query = QueryUtils.makeQueryable(query);\n        return getDocSetNC(query, filter);\n      }\n    }\n\n    // Negative query if absolute value different from original\n    Query absQ = QueryUtils.getAbs(query);\n    boolean positive = absQ==query;\n\n    DocSet first;\n    if (filterCache != null) {\n      first = filterCache.get(absQ);\n      if (first==null) {\n        first = getDocSetNC(absQ,null);\n        filterCache.put(absQ,first);\n      }\n      return positive ? first.intersection(filter) : filter.andNot(first);\n    }\n\n    // If there isn't a cache, then do a single filtered query if positive.\n    return positive ? getDocSetNC(absQ,filter) : filter.andNot(getPositiveDocSet(absQ));\n  }\n\n","sourceOld":"  /**\n   * Returns the set of document ids matching both the query and the filter.\n   * This method is cache-aware and attempts to retrieve the answer from the cache if possible.\n   * If the answer was not cached, it may have been inserted into the cache as a result of this call.\n   * <p>\n   *\n   * @param query\n   * @param filter may be null\n   * @return DocSet meeting the specified criteria, should <b>not</b> be modified by the caller.\n   */\n  public DocSet getDocSet(Query query, DocSet filter) throws IOException {\n    if (filter==null) return getDocSet(query);\n\n    if (query instanceof ExtendedQuery) {\n      ExtendedQuery eq = (ExtendedQuery)query;\n      if (!eq.getCache()) {\n        if (query instanceof WrappedQuery) {\n          query = ((WrappedQuery)query).getWrappedQuery();\n        }\n        query = QueryUtils.makeQueryable(query);\n        return getDocSetNC(query, filter);\n      }\n    }\n\n    // Negative query if absolute value different from original\n    Query absQ = QueryUtils.getAbs(query);\n    boolean positive = absQ==query;\n\n    DocSet first;\n    if (filterCache != null) {\n      first = filterCache.get(absQ);\n      if (first==null) {\n        first = getDocSetNC(absQ,null);\n        filterCache.put(absQ,first);\n      }\n      return positive ? first.intersection(filter) : filter.andNot(first);\n    }\n\n    // If there isn't a cache, then do a single filtered query if positive.\n    return positive ? getDocSetNC(absQ,filter) : filter.andNot(getPositiveDocSet(absQ));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac9de183adbc9483681f275ac1e2d92ed19f52e1","date":1452414626,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(Query,DocSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#getDocSet(Query,DocSet).mjava","sourceNew":"  /**\n   * Returns the set of document ids matching both the query and the filter. This method is cache-aware and attempts to\n   * retrieve the answer from the cache if possible. If the answer was not cached, it may have been inserted into the\n   * cache as a result of this call.\n   * <p>\n   *\n   * @param filter\n   *          may be null\n   * @return DocSet meeting the specified criteria, should <b>not</b> be modified by the caller.\n   */\n  public DocSet getDocSet(Query query, DocSet filter) throws IOException {\n    if (filter == null) return getDocSet(query);\n\n    if (query instanceof ExtendedQuery) {\n      ExtendedQuery eq = (ExtendedQuery) query;\n      if (!eq.getCache()) {\n        if (query instanceof WrappedQuery) {\n          query = ((WrappedQuery) query).getWrappedQuery();\n        }\n        query = QueryUtils.makeQueryable(query);\n        return getDocSetNC(query, filter);\n      }\n    }\n\n    // Negative query if absolute value different from original\n    Query absQ = QueryUtils.getAbs(query);\n    boolean positive = absQ == query;\n\n    DocSet first;\n    if (filterCache != null) {\n      first = filterCache.get(absQ);\n      if (first == null) {\n        first = getDocSetNC(absQ, null);\n        filterCache.put(absQ, first);\n      }\n      return positive ? first.intersection(filter) : filter.andNot(first);\n    }\n\n    // If there isn't a cache, then do a single filtered query if positive.\n    return positive ? getDocSetNC(absQ, filter) : filter.andNot(getPositiveDocSet(absQ));\n  }\n\n","sourceOld":"  /**\n   * Returns the set of document ids matching both the query and the filter.\n   * This method is cache-aware and attempts to retrieve the answer from the cache if possible.\n   * If the answer was not cached, it may have been inserted into the cache as a result of this call.\n   * <p>\n   *\n   * @param filter may be null\n   * @return DocSet meeting the specified criteria, should <b>not</b> be modified by the caller.\n   */\n  public DocSet getDocSet(Query query, DocSet filter) throws IOException {\n    if (filter==null) return getDocSet(query);\n\n    if (query instanceof ExtendedQuery) {\n      ExtendedQuery eq = (ExtendedQuery)query;\n      if (!eq.getCache()) {\n        if (query instanceof WrappedQuery) {\n          query = ((WrappedQuery)query).getWrappedQuery();\n        }\n        query = QueryUtils.makeQueryable(query);\n        return getDocSetNC(query, filter);\n      }\n    }\n\n    // Negative query if absolute value different from original\n    Query absQ = QueryUtils.getAbs(query);\n    boolean positive = absQ==query;\n\n    DocSet first;\n    if (filterCache != null) {\n      first = filterCache.get(absQ);\n      if (first==null) {\n        first = getDocSetNC(absQ,null);\n        filterCache.put(absQ,first);\n      }\n      return positive ? first.intersection(filter) : filter.andNot(first);\n    }\n\n    // If there isn't a cache, then do a single filtered query if positive.\n    return positive ? getDocSetNC(absQ,filter) : filter.andNot(getPositiveDocSet(absQ));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ac9de183adbc9483681f275ac1e2d92ed19f52e1":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ac9de183adbc9483681f275ac1e2d92ed19f52e1"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["ac9de183adbc9483681f275ac1e2d92ed19f52e1"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ac9de183adbc9483681f275ac1e2d92ed19f52e1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}