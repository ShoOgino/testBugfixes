{"path":"solr/core/src/java/org/apache/solr/handler/component/DateFacetProcessor#getFacetDateCounts(String,NamedList[Object]).mjava","commits":[{"id":"22d0a81a05eba47d5e18976f17d88306b218cc22","date":1436341569,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/DateFacetProcessor#getFacetDateCounts(String,NamedList[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetDateCounts(String,NamedList[Object]).mjava","sourceNew":"  /**\n   * @deprecated Use getFacetRangeCounts which is more generalized\n   */\n  @Deprecated\n  public void getFacetDateCounts(String dateFacet, NamedList<Object> resOuter)\n      throws IOException {\n\n    final IndexSchema schema = searcher.getSchema();\n\n    ParsedParams parsed = null;\n    try {\n      parsed = parseParams(FacetParams.FACET_DATE, dateFacet);\n    } catch (SyntaxError syntaxError) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, syntaxError);\n    }\n\n    final SolrParams params = parsed.params;\n    final SolrParams required = parsed.required;\n    final String key = parsed.key;\n    final String f = parsed.facetValue;\n\n    final NamedList<Object> resInner = new SimpleOrderedMap<>();\n    resOuter.add(key, resInner);\n    final SchemaField sf = schema.getField(f);\n    if (!(sf.getType() instanceof TrieDateField)) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Can not date facet on a field which is not a TrieDateField: \" + f);\n    }\n    final TrieDateField ft = (TrieDateField) sf.getType();\n    final String startS\n        = required.getFieldParam(f, FacetParams.FACET_DATE_START);\n    final Date start;\n    try {\n      start = ft.parseMath(null, startS);\n    } catch (SolrException e) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'start' is not a valid Date string: \" + startS, e);\n    }\n    final String endS\n        = required.getFieldParam(f, FacetParams.FACET_DATE_END);\n    Date end; // not final, hardend may change this\n    try {\n      end = ft.parseMath(null, endS);\n    } catch (SolrException e) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'end' is not a valid Date string: \" + endS, e);\n    }\n\n    if (end.before(start)) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'end' comes before 'start': \" + endS + \" < \" + startS);\n    }\n\n    final String gap = required.getFieldParam(f, FacetParams.FACET_DATE_GAP);\n    final DateMathParser dmp = new DateMathParser();\n\n    final int minCount = params.getFieldInt(f, FacetParams.FACET_MINCOUNT, 0);\n\n    String[] iStrs = params.getFieldParams(f, FacetParams.FACET_DATE_INCLUDE);\n    // Legacy support for default of [lower,upper,edge] for date faceting\n    // this is not handled by FacetRangeInclude.parseParam because\n    // range faceting has differnet defaults\n    final EnumSet<FacetParams.FacetRangeInclude> include =\n        (null == iStrs || 0 == iStrs.length) ?\n            EnumSet.of(FacetParams.FacetRangeInclude.LOWER,\n                FacetParams.FacetRangeInclude.UPPER,\n                FacetParams.FacetRangeInclude.EDGE)\n            : FacetParams.FacetRangeInclude.parseParam(iStrs);\n\n    try {\n      Date low = start;\n      while (low.before(end)) {\n        dmp.setNow(low);\n        String label = ft.toExternal(low);\n\n        Date high = dmp.parseMath(gap);\n        if (end.before(high)) {\n          if (params.getFieldBool(f, FacetParams.FACET_DATE_HARD_END, false)) {\n            high = end;\n          } else {\n            end = high;\n          }\n        }\n        if (high.before(low)) {\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"date facet infinite loop (is gap negative?)\");\n        }\n        if (high.equals(low)) {\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"date facet infinite loop: gap is effectively zero\");\n        }\n        final boolean includeLower =\n            (include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n                (include.contains(FacetParams.FacetRangeInclude.EDGE) && low.equals(start)));\n        final boolean includeUpper =\n            (include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n                (include.contains(FacetParams.FacetRangeInclude.EDGE) && high.equals(end)));\n\n        final int count = rangeCount(parsed, sf, low, high, includeLower, includeUpper);\n        if (count >= minCount) {\n          resInner.add(label, count);\n        }\n        low = high;\n      }\n    } catch (java.text.ParseException e) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'gap' is not a valid Date Math string: \" + gap, e);\n    }\n\n    // explicitly return the gap and end so all the counts\n    // (including before/after/between) are meaningful - even if mincount\n    // has removed the neighboring ranges\n    resInner.add(\"gap\", gap);\n    resInner.add(\"start\", start);\n    resInner.add(\"end\", end);\n\n    final String[] othersP =\n        params.getFieldParams(f, FacetParams.FACET_DATE_OTHER);\n    if (null != othersP && 0 < othersP.length) {\n      final Set<FacetParams.FacetRangeOther> others = EnumSet.noneOf(FacetParams.FacetRangeOther.class);\n\n      for (final String o : othersP) {\n        others.add(FacetParams.FacetRangeOther.get(o));\n      }\n\n      // no matter what other values are listed, we don't do\n      // anything if \"none\" is specified.\n      if (!others.contains(FacetParams.FacetRangeOther.NONE)) {\n        boolean all = others.contains(FacetParams.FacetRangeOther.ALL);\n\n        if (all || others.contains(FacetParams.FacetRangeOther.BEFORE)) {\n          // include upper bound if \"outer\" or if first gap doesn't already include it\n          resInner.add(FacetParams.FacetRangeOther.BEFORE.toString(),\n              rangeCount(parsed, sf, null, start,\n                  false,\n                  (include.contains(FacetParams.FacetRangeInclude.OUTER) ||\n                      (!(include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n                          include.contains(FacetParams.FacetRangeInclude.EDGE))))));\n        }\n        if (all || others.contains(FacetParams.FacetRangeOther.AFTER)) {\n          // include lower bound if \"outer\" or if last gap doesn't already include it\n          resInner.add(FacetParams.FacetRangeOther.AFTER.toString(),\n              rangeCount(parsed, sf, end, null,\n                  (include.contains(FacetParams.FacetRangeInclude.OUTER) ||\n                      (!(include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n                          include.contains(FacetParams.FacetRangeInclude.EDGE)))),\n                  false));\n        }\n        if (all || others.contains(FacetParams.FacetRangeOther.BETWEEN)) {\n          resInner.add(FacetParams.FacetRangeOther.BETWEEN.toString(),\n              rangeCount(parsed, sf, start, end,\n                  (include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n                      include.contains(FacetParams.FacetRangeInclude.EDGE)),\n                  (include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n                      include.contains(FacetParams.FacetRangeInclude.EDGE))));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @deprecated Use getFacetRangeCounts which is more generalized\n   */\n  @Deprecated\n  public void getFacetDateCounts(String dateFacet, NamedList<Object> resOuter)\n      throws IOException, SyntaxError {\n\n    final IndexSchema schema = searcher.getSchema();\n\n    final ParsedParams parsed = parseParams(FacetParams.FACET_DATE, dateFacet);\n    final SolrParams params = parsed.params;\n    final SolrParams required = parsed.required;\n    final String key = parsed.key;\n    final String f = parsed.facetValue;\n\n    final NamedList<Object> resInner = new SimpleOrderedMap<>();\n    resOuter.add(key, resInner);\n    final SchemaField sf = schema.getField(f);\n    if (! (sf.getType() instanceof TrieDateField)) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Can not date facet on a field which is not a TrieDateField: \" + f);\n    }\n    final TrieDateField ft = (TrieDateField) sf.getType();\n    final String startS\n        = required.getFieldParam(f,FacetParams.FACET_DATE_START);\n    final Date start;\n    try {\n      start = ft.parseMath(null, startS);\n    } catch (SolrException e) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'start' is not a valid Date string: \" + startS, e);\n    }\n    final String endS\n        = required.getFieldParam(f,FacetParams.FACET_DATE_END);\n    Date end; // not final, hardend may change this\n    try {\n      end = ft.parseMath(null, endS);\n    } catch (SolrException e) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'end' is not a valid Date string: \" + endS, e);\n    }\n\n    if (end.before(start)) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'end' comes before 'start': \"+endS+\" < \"+startS);\n    }\n\n    final String gap = required.getFieldParam(f,FacetParams.FACET_DATE_GAP);\n    final DateMathParser dmp = new DateMathParser();\n\n    final int minCount = params.getFieldInt(f,FacetParams.FACET_MINCOUNT, 0);\n\n    String[] iStrs = params.getFieldParams(f,FacetParams.FACET_DATE_INCLUDE);\n    // Legacy support for default of [lower,upper,edge] for date faceting\n    // this is not handled by FacetRangeInclude.parseParam because\n    // range faceting has differnet defaults\n    final EnumSet<FacetRangeInclude> include = \n      (null == iStrs || 0 == iStrs.length ) ?\n      EnumSet.of(FacetRangeInclude.LOWER, \n                 FacetRangeInclude.UPPER, \n                 FacetRangeInclude.EDGE)\n      : FacetRangeInclude.parseParam(iStrs);\n\n    try {\n      Date low = start;\n      while (low.before(end)) {\n        dmp.setNow(low);\n        String label = ft.toExternal(low);\n\n        Date high = dmp.parseMath(gap);\n        if (end.before(high)) {\n          if (params.getFieldBool(f,FacetParams.FACET_DATE_HARD_END,false)) {\n            high = end;\n          } else {\n            end = high;\n          }\n        }\n        if (high.before(low)) {\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"date facet infinite loop (is gap negative?)\");\n        }\n        if (high.equals(low)) {\n          throw new SolrException\n            (SolrException.ErrorCode.BAD_REQUEST,\n             \"date facet infinite loop: gap is effectively zero\");\n        }\n        final boolean includeLower =\n            (include.contains(FacetRangeInclude.LOWER) ||\n                (include.contains(FacetRangeInclude.EDGE) && low.equals(start)));\n        final boolean includeUpper =\n            (include.contains(FacetRangeInclude.UPPER) ||\n                (include.contains(FacetRangeInclude.EDGE) && high.equals(end)));\n\n        final int count = rangeCount(parsed,sf,low,high,includeLower,includeUpper);\n        if (count >= minCount) {\n          resInner.add(label, count);\n        }\n        low = high;\n      }\n    } catch (java.text.ParseException e) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'gap' is not a valid Date Math string: \" + gap, e);\n    }\n\n    // explicitly return the gap and end so all the counts\n    // (including before/after/between) are meaningful - even if mincount\n    // has removed the neighboring ranges\n    resInner.add(\"gap\", gap);\n    resInner.add(\"start\", start);\n    resInner.add(\"end\", end);\n\n    final String[] othersP =\n        params.getFieldParams(f,FacetParams.FACET_DATE_OTHER);\n    if (null != othersP && 0 < othersP.length ) {\n      final Set<FacetRangeOther> others = EnumSet.noneOf(FacetRangeOther.class);\n\n      for (final String o : othersP) {\n        others.add(FacetRangeOther.get(o));\n      }\n\n      // no matter what other values are listed, we don't do\n      // anything if \"none\" is specified.\n      if (! others.contains(FacetRangeOther.NONE) ) {\n        boolean all = others.contains(FacetRangeOther.ALL);\n\n        if (all || others.contains(FacetRangeOther.BEFORE)) {\n          // include upper bound if \"outer\" or if first gap doesn't already include it\n          resInner.add(FacetRangeOther.BEFORE.toString(),\n              rangeCount(parsed,sf,null,start,\n                  false,\n                  (include.contains(FacetRangeInclude.OUTER) ||\n                      (! (include.contains(FacetRangeInclude.LOWER) ||\n                          include.contains(FacetRangeInclude.EDGE))))));\n        }\n        if (all || others.contains(FacetRangeOther.AFTER)) {\n          // include lower bound if \"outer\" or if last gap doesn't already include it\n          resInner.add(FacetRangeOther.AFTER.toString(),\n              rangeCount(parsed,sf,end,null,\n                  (include.contains(FacetRangeInclude.OUTER) ||\n                      (! (include.contains(FacetRangeInclude.UPPER) ||\n                          include.contains(FacetRangeInclude.EDGE)))),\n                  false));\n        }\n        if (all || others.contains(FacetRangeOther.BETWEEN)) {\n          resInner.add(FacetRangeOther.BETWEEN.toString(),\n              rangeCount(parsed,sf,start,end,\n                  (include.contains(FacetRangeInclude.LOWER) ||\n                      include.contains(FacetRangeInclude.EDGE)),\n                  (include.contains(FacetRangeInclude.UPPER) ||\n                      include.contains(FacetRangeInclude.EDGE))));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c38a05f7a7b43c2dabbd25f12f9941c64bb2331","date":1437383270,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/DateFacetProcessor#getFacetDateCounts(String,NamedList[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/DateFacetProcessor#getFacetDateCounts(String,NamedList[Object]).mjava","sourceNew":"  /**\n   * @deprecated Use getFacetRangeCounts which is more generalized\n   */\n  @Deprecated\n  public void getFacetDateCounts(String dateFacet, NamedList<Object> resOuter)\n      throws IOException {\n\n    final IndexSchema schema = searcher.getSchema();\n\n    ParsedParams parsed = null;\n    try {\n      parsed = parseParams(FacetParams.FACET_DATE, dateFacet);\n    } catch (SyntaxError syntaxError) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, syntaxError);\n    }\n\n    final SolrParams params = parsed.params;\n    final SolrParams required = parsed.required;\n    final String key = parsed.key;\n    final String f = parsed.facetValue;\n\n    final NamedList<Object> resInner = new SimpleOrderedMap<>();\n    resOuter.add(key, resInner);\n    final SchemaField sf = schema.getField(f);\n    if (!(sf.getType() instanceof TrieDateField)) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Can not date facet on a field which is not a TrieDateField: \" + f);\n    }\n    final String startS\n        = required.getFieldParam(f, FacetParams.FACET_DATE_START);\n    final Date start;\n    try {\n      start = DateFormatUtil.parseMath(null, startS);\n    } catch (SolrException e) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'start' is not a valid Date string: \" + startS, e);\n    }\n    final String endS\n        = required.getFieldParam(f, FacetParams.FACET_DATE_END);\n    Date end; // not final, hardend may change this\n    try {\n      end = DateFormatUtil.parseMath(null, endS);\n    } catch (SolrException e) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'end' is not a valid Date string: \" + endS, e);\n    }\n\n    if (end.before(start)) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'end' comes before 'start': \" + endS + \" < \" + startS);\n    }\n\n    final String gap = required.getFieldParam(f, FacetParams.FACET_DATE_GAP);\n    final DateMathParser dmp = new DateMathParser();\n\n    final int minCount = params.getFieldInt(f, FacetParams.FACET_MINCOUNT, 0);\n\n    String[] iStrs = params.getFieldParams(f, FacetParams.FACET_DATE_INCLUDE);\n    // Legacy support for default of [lower,upper,edge] for date faceting\n    // this is not handled by FacetRangeInclude.parseParam because\n    // range faceting has differnet defaults\n    final EnumSet<FacetParams.FacetRangeInclude> include =\n        (null == iStrs || 0 == iStrs.length) ?\n            EnumSet.of(FacetParams.FacetRangeInclude.LOWER,\n                FacetParams.FacetRangeInclude.UPPER,\n                FacetParams.FacetRangeInclude.EDGE)\n            : FacetParams.FacetRangeInclude.parseParam(iStrs);\n\n    try {\n      Date low = start;\n      while (low.before(end)) {\n        dmp.setNow(low);\n        String label = DateFormatUtil.formatExternal(low);\n\n        Date high = dmp.parseMath(gap);\n        if (end.before(high)) {\n          if (params.getFieldBool(f, FacetParams.FACET_DATE_HARD_END, false)) {\n            high = end;\n          } else {\n            end = high;\n          }\n        }\n        if (high.before(low)) {\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"date facet infinite loop (is gap negative?)\");\n        }\n        if (high.equals(low)) {\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"date facet infinite loop: gap is effectively zero\");\n        }\n        final boolean includeLower =\n            (include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n                (include.contains(FacetParams.FacetRangeInclude.EDGE) && low.equals(start)));\n        final boolean includeUpper =\n            (include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n                (include.contains(FacetParams.FacetRangeInclude.EDGE) && high.equals(end)));\n\n        final int count = rangeCount(parsed, sf, low, high, includeLower, includeUpper);\n        if (count >= minCount) {\n          resInner.add(label, count);\n        }\n        low = high;\n      }\n    } catch (java.text.ParseException e) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'gap' is not a valid Date Math string: \" + gap, e);\n    }\n\n    // explicitly return the gap and end so all the counts\n    // (including before/after/between) are meaningful - even if mincount\n    // has removed the neighboring ranges\n    resInner.add(\"gap\", gap);\n    resInner.add(\"start\", start);\n    resInner.add(\"end\", end);\n\n    final String[] othersP =\n        params.getFieldParams(f, FacetParams.FACET_DATE_OTHER);\n    if (null != othersP && 0 < othersP.length) {\n      final Set<FacetParams.FacetRangeOther> others = EnumSet.noneOf(FacetParams.FacetRangeOther.class);\n\n      for (final String o : othersP) {\n        others.add(FacetParams.FacetRangeOther.get(o));\n      }\n\n      // no matter what other values are listed, we don't do\n      // anything if \"none\" is specified.\n      if (!others.contains(FacetParams.FacetRangeOther.NONE)) {\n        boolean all = others.contains(FacetParams.FacetRangeOther.ALL);\n\n        if (all || others.contains(FacetParams.FacetRangeOther.BEFORE)) {\n          // include upper bound if \"outer\" or if first gap doesn't already include it\n          resInner.add(FacetParams.FacetRangeOther.BEFORE.toString(),\n              rangeCount(parsed, sf, null, start,\n                  false,\n                  (include.contains(FacetParams.FacetRangeInclude.OUTER) ||\n                      (!(include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n                          include.contains(FacetParams.FacetRangeInclude.EDGE))))));\n        }\n        if (all || others.contains(FacetParams.FacetRangeOther.AFTER)) {\n          // include lower bound if \"outer\" or if last gap doesn't already include it\n          resInner.add(FacetParams.FacetRangeOther.AFTER.toString(),\n              rangeCount(parsed, sf, end, null,\n                  (include.contains(FacetParams.FacetRangeInclude.OUTER) ||\n                      (!(include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n                          include.contains(FacetParams.FacetRangeInclude.EDGE)))),\n                  false));\n        }\n        if (all || others.contains(FacetParams.FacetRangeOther.BETWEEN)) {\n          resInner.add(FacetParams.FacetRangeOther.BETWEEN.toString(),\n              rangeCount(parsed, sf, start, end,\n                  (include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n                      include.contains(FacetParams.FacetRangeInclude.EDGE)),\n                  (include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n                      include.contains(FacetParams.FacetRangeInclude.EDGE))));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @deprecated Use getFacetRangeCounts which is more generalized\n   */\n  @Deprecated\n  public void getFacetDateCounts(String dateFacet, NamedList<Object> resOuter)\n      throws IOException {\n\n    final IndexSchema schema = searcher.getSchema();\n\n    ParsedParams parsed = null;\n    try {\n      parsed = parseParams(FacetParams.FACET_DATE, dateFacet);\n    } catch (SyntaxError syntaxError) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, syntaxError);\n    }\n\n    final SolrParams params = parsed.params;\n    final SolrParams required = parsed.required;\n    final String key = parsed.key;\n    final String f = parsed.facetValue;\n\n    final NamedList<Object> resInner = new SimpleOrderedMap<>();\n    resOuter.add(key, resInner);\n    final SchemaField sf = schema.getField(f);\n    if (!(sf.getType() instanceof TrieDateField)) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Can not date facet on a field which is not a TrieDateField: \" + f);\n    }\n    final TrieDateField ft = (TrieDateField) sf.getType();\n    final String startS\n        = required.getFieldParam(f, FacetParams.FACET_DATE_START);\n    final Date start;\n    try {\n      start = ft.parseMath(null, startS);\n    } catch (SolrException e) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'start' is not a valid Date string: \" + startS, e);\n    }\n    final String endS\n        = required.getFieldParam(f, FacetParams.FACET_DATE_END);\n    Date end; // not final, hardend may change this\n    try {\n      end = ft.parseMath(null, endS);\n    } catch (SolrException e) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'end' is not a valid Date string: \" + endS, e);\n    }\n\n    if (end.before(start)) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'end' comes before 'start': \" + endS + \" < \" + startS);\n    }\n\n    final String gap = required.getFieldParam(f, FacetParams.FACET_DATE_GAP);\n    final DateMathParser dmp = new DateMathParser();\n\n    final int minCount = params.getFieldInt(f, FacetParams.FACET_MINCOUNT, 0);\n\n    String[] iStrs = params.getFieldParams(f, FacetParams.FACET_DATE_INCLUDE);\n    // Legacy support for default of [lower,upper,edge] for date faceting\n    // this is not handled by FacetRangeInclude.parseParam because\n    // range faceting has differnet defaults\n    final EnumSet<FacetParams.FacetRangeInclude> include =\n        (null == iStrs || 0 == iStrs.length) ?\n            EnumSet.of(FacetParams.FacetRangeInclude.LOWER,\n                FacetParams.FacetRangeInclude.UPPER,\n                FacetParams.FacetRangeInclude.EDGE)\n            : FacetParams.FacetRangeInclude.parseParam(iStrs);\n\n    try {\n      Date low = start;\n      while (low.before(end)) {\n        dmp.setNow(low);\n        String label = ft.toExternal(low);\n\n        Date high = dmp.parseMath(gap);\n        if (end.before(high)) {\n          if (params.getFieldBool(f, FacetParams.FACET_DATE_HARD_END, false)) {\n            high = end;\n          } else {\n            end = high;\n          }\n        }\n        if (high.before(low)) {\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"date facet infinite loop (is gap negative?)\");\n        }\n        if (high.equals(low)) {\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"date facet infinite loop: gap is effectively zero\");\n        }\n        final boolean includeLower =\n            (include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n                (include.contains(FacetParams.FacetRangeInclude.EDGE) && low.equals(start)));\n        final boolean includeUpper =\n            (include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n                (include.contains(FacetParams.FacetRangeInclude.EDGE) && high.equals(end)));\n\n        final int count = rangeCount(parsed, sf, low, high, includeLower, includeUpper);\n        if (count >= minCount) {\n          resInner.add(label, count);\n        }\n        low = high;\n      }\n    } catch (java.text.ParseException e) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'gap' is not a valid Date Math string: \" + gap, e);\n    }\n\n    // explicitly return the gap and end so all the counts\n    // (including before/after/between) are meaningful - even if mincount\n    // has removed the neighboring ranges\n    resInner.add(\"gap\", gap);\n    resInner.add(\"start\", start);\n    resInner.add(\"end\", end);\n\n    final String[] othersP =\n        params.getFieldParams(f, FacetParams.FACET_DATE_OTHER);\n    if (null != othersP && 0 < othersP.length) {\n      final Set<FacetParams.FacetRangeOther> others = EnumSet.noneOf(FacetParams.FacetRangeOther.class);\n\n      for (final String o : othersP) {\n        others.add(FacetParams.FacetRangeOther.get(o));\n      }\n\n      // no matter what other values are listed, we don't do\n      // anything if \"none\" is specified.\n      if (!others.contains(FacetParams.FacetRangeOther.NONE)) {\n        boolean all = others.contains(FacetParams.FacetRangeOther.ALL);\n\n        if (all || others.contains(FacetParams.FacetRangeOther.BEFORE)) {\n          // include upper bound if \"outer\" or if first gap doesn't already include it\n          resInner.add(FacetParams.FacetRangeOther.BEFORE.toString(),\n              rangeCount(parsed, sf, null, start,\n                  false,\n                  (include.contains(FacetParams.FacetRangeInclude.OUTER) ||\n                      (!(include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n                          include.contains(FacetParams.FacetRangeInclude.EDGE))))));\n        }\n        if (all || others.contains(FacetParams.FacetRangeOther.AFTER)) {\n          // include lower bound if \"outer\" or if last gap doesn't already include it\n          resInner.add(FacetParams.FacetRangeOther.AFTER.toString(),\n              rangeCount(parsed, sf, end, null,\n                  (include.contains(FacetParams.FacetRangeInclude.OUTER) ||\n                      (!(include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n                          include.contains(FacetParams.FacetRangeInclude.EDGE)))),\n                  false));\n        }\n        if (all || others.contains(FacetParams.FacetRangeOther.BETWEEN)) {\n          resInner.add(FacetParams.FacetRangeOther.BETWEEN.toString(),\n              rangeCount(parsed, sf, start, end,\n                  (include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n                      include.contains(FacetParams.FacetRangeInclude.EDGE)),\n                  (include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n                      include.contains(FacetParams.FacetRangeInclude.EDGE))));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15cb24c5fa70ba12290e43b3aa0feab5582863ee","date":1457033685,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/component/DateFacetProcessor#getFacetDateCounts(String,NamedList[Object]).mjava","sourceNew":null,"sourceOld":"  /**\n   * @deprecated Use getFacetRangeCounts which is more generalized\n   */\n  @Deprecated\n  public void getFacetDateCounts(String dateFacet, NamedList<Object> resOuter)\n      throws IOException {\n\n    final IndexSchema schema = searcher.getSchema();\n\n    ParsedParams parsed = null;\n    try {\n      parsed = parseParams(FacetParams.FACET_DATE, dateFacet);\n    } catch (SyntaxError syntaxError) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, syntaxError);\n    }\n\n    final SolrParams params = parsed.params;\n    final SolrParams required = parsed.required;\n    final String key = parsed.key;\n    final String f = parsed.facetValue;\n\n    final NamedList<Object> resInner = new SimpleOrderedMap<>();\n    resOuter.add(key, resInner);\n    final SchemaField sf = schema.getField(f);\n    if (!(sf.getType() instanceof TrieDateField)) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Can not date facet on a field which is not a TrieDateField: \" + f);\n    }\n    final String startS\n        = required.getFieldParam(f, FacetParams.FACET_DATE_START);\n    final Date start;\n    try {\n      start = DateFormatUtil.parseMath(null, startS);\n    } catch (SolrException e) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'start' is not a valid Date string: \" + startS, e);\n    }\n    final String endS\n        = required.getFieldParam(f, FacetParams.FACET_DATE_END);\n    Date end; // not final, hardend may change this\n    try {\n      end = DateFormatUtil.parseMath(null, endS);\n    } catch (SolrException e) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'end' is not a valid Date string: \" + endS, e);\n    }\n\n    if (end.before(start)) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'end' comes before 'start': \" + endS + \" < \" + startS);\n    }\n\n    final String gap = required.getFieldParam(f, FacetParams.FACET_DATE_GAP);\n    final DateMathParser dmp = new DateMathParser();\n\n    final int minCount = params.getFieldInt(f, FacetParams.FACET_MINCOUNT, 0);\n\n    String[] iStrs = params.getFieldParams(f, FacetParams.FACET_DATE_INCLUDE);\n    // Legacy support for default of [lower,upper,edge] for date faceting\n    // this is not handled by FacetRangeInclude.parseParam because\n    // range faceting has differnet defaults\n    final EnumSet<FacetParams.FacetRangeInclude> include =\n        (null == iStrs || 0 == iStrs.length) ?\n            EnumSet.of(FacetParams.FacetRangeInclude.LOWER,\n                FacetParams.FacetRangeInclude.UPPER,\n                FacetParams.FacetRangeInclude.EDGE)\n            : FacetParams.FacetRangeInclude.parseParam(iStrs);\n\n    try {\n      Date low = start;\n      while (low.before(end)) {\n        dmp.setNow(low);\n        String label = DateFormatUtil.formatExternal(low);\n\n        Date high = dmp.parseMath(gap);\n        if (end.before(high)) {\n          if (params.getFieldBool(f, FacetParams.FACET_DATE_HARD_END, false)) {\n            high = end;\n          } else {\n            end = high;\n          }\n        }\n        if (high.before(low)) {\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"date facet infinite loop (is gap negative?)\");\n        }\n        if (high.equals(low)) {\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"date facet infinite loop: gap is effectively zero\");\n        }\n        final boolean includeLower =\n            (include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n                (include.contains(FacetParams.FacetRangeInclude.EDGE) && low.equals(start)));\n        final boolean includeUpper =\n            (include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n                (include.contains(FacetParams.FacetRangeInclude.EDGE) && high.equals(end)));\n\n        final int count = rangeCount(parsed, sf, low, high, includeLower, includeUpper);\n        if (count >= minCount) {\n          resInner.add(label, count);\n        }\n        low = high;\n      }\n    } catch (java.text.ParseException e) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'gap' is not a valid Date Math string: \" + gap, e);\n    }\n\n    // explicitly return the gap and end so all the counts\n    // (including before/after/between) are meaningful - even if mincount\n    // has removed the neighboring ranges\n    resInner.add(\"gap\", gap);\n    resInner.add(\"start\", start);\n    resInner.add(\"end\", end);\n\n    final String[] othersP =\n        params.getFieldParams(f, FacetParams.FACET_DATE_OTHER);\n    if (null != othersP && 0 < othersP.length) {\n      final Set<FacetParams.FacetRangeOther> others = EnumSet.noneOf(FacetParams.FacetRangeOther.class);\n\n      for (final String o : othersP) {\n        others.add(FacetParams.FacetRangeOther.get(o));\n      }\n\n      // no matter what other values are listed, we don't do\n      // anything if \"none\" is specified.\n      if (!others.contains(FacetParams.FacetRangeOther.NONE)) {\n        boolean all = others.contains(FacetParams.FacetRangeOther.ALL);\n\n        if (all || others.contains(FacetParams.FacetRangeOther.BEFORE)) {\n          // include upper bound if \"outer\" or if first gap doesn't already include it\n          resInner.add(FacetParams.FacetRangeOther.BEFORE.toString(),\n              rangeCount(parsed, sf, null, start,\n                  false,\n                  (include.contains(FacetParams.FacetRangeInclude.OUTER) ||\n                      (!(include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n                          include.contains(FacetParams.FacetRangeInclude.EDGE))))));\n        }\n        if (all || others.contains(FacetParams.FacetRangeOther.AFTER)) {\n          // include lower bound if \"outer\" or if last gap doesn't already include it\n          resInner.add(FacetParams.FacetRangeOther.AFTER.toString(),\n              rangeCount(parsed, sf, end, null,\n                  (include.contains(FacetParams.FacetRangeInclude.OUTER) ||\n                      (!(include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n                          include.contains(FacetParams.FacetRangeInclude.EDGE)))),\n                  false));\n        }\n        if (all || others.contains(FacetParams.FacetRangeOther.BETWEEN)) {\n          resInner.add(FacetParams.FacetRangeOther.BETWEEN.toString(),\n              rangeCount(parsed, sf, start, end,\n                  (include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n                      include.contains(FacetParams.FacetRangeInclude.EDGE)),\n                  (include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n                      include.contains(FacetParams.FacetRangeInclude.EDGE))));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/component/DateFacetProcessor#getFacetDateCounts(String,NamedList[Object]).mjava","sourceNew":null,"sourceOld":"  /**\n   * @deprecated Use getFacetRangeCounts which is more generalized\n   */\n  @Deprecated\n  public void getFacetDateCounts(String dateFacet, NamedList<Object> resOuter)\n      throws IOException {\n\n    final IndexSchema schema = searcher.getSchema();\n\n    ParsedParams parsed = null;\n    try {\n      parsed = parseParams(FacetParams.FACET_DATE, dateFacet);\n    } catch (SyntaxError syntaxError) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, syntaxError);\n    }\n\n    final SolrParams params = parsed.params;\n    final SolrParams required = parsed.required;\n    final String key = parsed.key;\n    final String f = parsed.facetValue;\n\n    final NamedList<Object> resInner = new SimpleOrderedMap<>();\n    resOuter.add(key, resInner);\n    final SchemaField sf = schema.getField(f);\n    if (!(sf.getType() instanceof TrieDateField)) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Can not date facet on a field which is not a TrieDateField: \" + f);\n    }\n    final String startS\n        = required.getFieldParam(f, FacetParams.FACET_DATE_START);\n    final Date start;\n    try {\n      start = DateFormatUtil.parseMath(null, startS);\n    } catch (SolrException e) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'start' is not a valid Date string: \" + startS, e);\n    }\n    final String endS\n        = required.getFieldParam(f, FacetParams.FACET_DATE_END);\n    Date end; // not final, hardend may change this\n    try {\n      end = DateFormatUtil.parseMath(null, endS);\n    } catch (SolrException e) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'end' is not a valid Date string: \" + endS, e);\n    }\n\n    if (end.before(start)) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'end' comes before 'start': \" + endS + \" < \" + startS);\n    }\n\n    final String gap = required.getFieldParam(f, FacetParams.FACET_DATE_GAP);\n    final DateMathParser dmp = new DateMathParser();\n\n    final int minCount = params.getFieldInt(f, FacetParams.FACET_MINCOUNT, 0);\n\n    String[] iStrs = params.getFieldParams(f, FacetParams.FACET_DATE_INCLUDE);\n    // Legacy support for default of [lower,upper,edge] for date faceting\n    // this is not handled by FacetRangeInclude.parseParam because\n    // range faceting has differnet defaults\n    final EnumSet<FacetParams.FacetRangeInclude> include =\n        (null == iStrs || 0 == iStrs.length) ?\n            EnumSet.of(FacetParams.FacetRangeInclude.LOWER,\n                FacetParams.FacetRangeInclude.UPPER,\n                FacetParams.FacetRangeInclude.EDGE)\n            : FacetParams.FacetRangeInclude.parseParam(iStrs);\n\n    try {\n      Date low = start;\n      while (low.before(end)) {\n        dmp.setNow(low);\n        String label = DateFormatUtil.formatExternal(low);\n\n        Date high = dmp.parseMath(gap);\n        if (end.before(high)) {\n          if (params.getFieldBool(f, FacetParams.FACET_DATE_HARD_END, false)) {\n            high = end;\n          } else {\n            end = high;\n          }\n        }\n        if (high.before(low)) {\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"date facet infinite loop (is gap negative?)\");\n        }\n        if (high.equals(low)) {\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"date facet infinite loop: gap is effectively zero\");\n        }\n        final boolean includeLower =\n            (include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n                (include.contains(FacetParams.FacetRangeInclude.EDGE) && low.equals(start)));\n        final boolean includeUpper =\n            (include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n                (include.contains(FacetParams.FacetRangeInclude.EDGE) && high.equals(end)));\n\n        final int count = rangeCount(parsed, sf, low, high, includeLower, includeUpper);\n        if (count >= minCount) {\n          resInner.add(label, count);\n        }\n        low = high;\n      }\n    } catch (java.text.ParseException e) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'gap' is not a valid Date Math string: \" + gap, e);\n    }\n\n    // explicitly return the gap and end so all the counts\n    // (including before/after/between) are meaningful - even if mincount\n    // has removed the neighboring ranges\n    resInner.add(\"gap\", gap);\n    resInner.add(\"start\", start);\n    resInner.add(\"end\", end);\n\n    final String[] othersP =\n        params.getFieldParams(f, FacetParams.FACET_DATE_OTHER);\n    if (null != othersP && 0 < othersP.length) {\n      final Set<FacetParams.FacetRangeOther> others = EnumSet.noneOf(FacetParams.FacetRangeOther.class);\n\n      for (final String o : othersP) {\n        others.add(FacetParams.FacetRangeOther.get(o));\n      }\n\n      // no matter what other values are listed, we don't do\n      // anything if \"none\" is specified.\n      if (!others.contains(FacetParams.FacetRangeOther.NONE)) {\n        boolean all = others.contains(FacetParams.FacetRangeOther.ALL);\n\n        if (all || others.contains(FacetParams.FacetRangeOther.BEFORE)) {\n          // include upper bound if \"outer\" or if first gap doesn't already include it\n          resInner.add(FacetParams.FacetRangeOther.BEFORE.toString(),\n              rangeCount(parsed, sf, null, start,\n                  false,\n                  (include.contains(FacetParams.FacetRangeInclude.OUTER) ||\n                      (!(include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n                          include.contains(FacetParams.FacetRangeInclude.EDGE))))));\n        }\n        if (all || others.contains(FacetParams.FacetRangeOther.AFTER)) {\n          // include lower bound if \"outer\" or if last gap doesn't already include it\n          resInner.add(FacetParams.FacetRangeOther.AFTER.toString(),\n              rangeCount(parsed, sf, end, null,\n                  (include.contains(FacetParams.FacetRangeInclude.OUTER) ||\n                      (!(include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n                          include.contains(FacetParams.FacetRangeInclude.EDGE)))),\n                  false));\n        }\n        if (all || others.contains(FacetParams.FacetRangeOther.BETWEEN)) {\n          resInner.add(FacetParams.FacetRangeOther.BETWEEN.toString(),\n              rangeCount(parsed, sf, start, end,\n                  (include.contains(FacetParams.FacetRangeInclude.LOWER) ||\n                      include.contains(FacetParams.FacetRangeInclude.EDGE)),\n                  (include.contains(FacetParams.FacetRangeInclude.UPPER) ||\n                      include.contains(FacetParams.FacetRangeInclude.EDGE))));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"15cb24c5fa70ba12290e43b3aa0feab5582863ee":["0c38a05f7a7b43c2dabbd25f12f9941c64bb2331"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"22d0a81a05eba47d5e18976f17d88306b218cc22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["0c38a05f7a7b43c2dabbd25f12f9941c64bb2331","15cb24c5fa70ba12290e43b3aa0feab5582863ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"0c38a05f7a7b43c2dabbd25f12f9941c64bb2331":["22d0a81a05eba47d5e18976f17d88306b218cc22"]},"commit2Childs":{"15cb24c5fa70ba12290e43b3aa0feab5582863ee":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["22d0a81a05eba47d5e18976f17d88306b218cc22"],"22d0a81a05eba47d5e18976f17d88306b218cc22":["0c38a05f7a7b43c2dabbd25f12f9941c64bb2331"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0c38a05f7a7b43c2dabbd25f12f9941c64bb2331":["15cb24c5fa70ba12290e43b3aa0feab5582863ee","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}