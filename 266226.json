{"path":"solr/core/src/java/org/apache/solr/metrics/rrd/SolrRrdBackendFactory#open(String,boolean).mjava","commits":[{"id":"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","date":1527582939,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/rrd/SolrRrdBackendFactory#open(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Open (or get) a backend.\n   * @param path backend path (without URI scheme)\n   * @param readOnly if true then the backend will never be synchronized to Solr,\n   *                 and updates will be silently ignored. Read-only backends can\n   *                 be safely closed and discarded after use.\n   * @return an instance of Solr backend.\n   * @throws IOException on Solr error when retrieving existing data\n   */\n  @Override\n  protected synchronized RrdBackend open(String path, boolean readOnly) throws IOException {\n    ensureOpen();\n    SolrRrdBackend backend = backends.computeIfAbsent(path, p -> new SolrRrdBackend(p, readOnly, this));\n    if (backend.isReadOnly()) {\n      if (readOnly) {\n        return backend;\n      } else {\n        // replace it with a writable one\n        backend = new SolrRrdBackend(path, readOnly, this);\n        backends.put(path, backend);\n        return backend;\n      }\n    } else {\n      if (readOnly) {\n        // return a throwaway unregistered read-only copy\n        return new SolrRrdBackend(backend);\n      } else {\n        return backend;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58d29562959e4f9c21557f699a0d964bb0c98f8e","date":1556102028,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/rrd/SolrRrdBackendFactory#open(String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/rrd/SolrRrdBackendFactory#open(String,boolean).mjava","sourceNew":"//  @Override\n//  protected URI getRootUri() {\n//    try {\n//      return new URI(\"solr\", null, null, null);\n//    } catch (URISyntaxException e) {\n//      throw new RuntimeException(\"Impossible error\", e);\n//    }\n//  }\n//\n  /**\n   * Open (or get) a backend.\n   * @param path backend path (without URI scheme)\n   * @param readOnly if true then the backend will never be synchronized to Solr,\n   *                 and updates will be silently ignored. Read-only backends can\n   *                 be safely closed and discarded after use.\n   * @return an instance of Solr backend.\n   * @throws IOException on Solr error when retrieving existing data\n   */\n  @Override\n  protected synchronized RrdBackend open(String path, boolean readOnly) throws IOException {\n    ensureOpen();\n    SolrRrdBackend backend = backends.computeIfAbsent(path, p -> new SolrRrdBackend(p, readOnly, this));\n    if (backend.isReadOnly()) {\n      if (readOnly) {\n        return backend;\n      } else {\n        // replace it with a writable one\n        backend = new SolrRrdBackend(path, readOnly, this);\n        backends.put(path, backend);\n        return backend;\n      }\n    } else {\n      if (readOnly) {\n        // return a throwaway unregistered read-only copy\n        return new SolrRrdBackend(backend);\n      } else {\n        return backend;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Open (or get) a backend.\n   * @param path backend path (without URI scheme)\n   * @param readOnly if true then the backend will never be synchronized to Solr,\n   *                 and updates will be silently ignored. Read-only backends can\n   *                 be safely closed and discarded after use.\n   * @return an instance of Solr backend.\n   * @throws IOException on Solr error when retrieving existing data\n   */\n  @Override\n  protected synchronized RrdBackend open(String path, boolean readOnly) throws IOException {\n    ensureOpen();\n    SolrRrdBackend backend = backends.computeIfAbsent(path, p -> new SolrRrdBackend(p, readOnly, this));\n    if (backend.isReadOnly()) {\n      if (readOnly) {\n        return backend;\n      } else {\n        // replace it with a writable one\n        backend = new SolrRrdBackend(path, readOnly, this);\n        backends.put(path, backend);\n        return backend;\n      }\n    } else {\n      if (readOnly) {\n        // return a throwaway unregistered read-only copy\n        return new SolrRrdBackend(backend);\n      } else {\n        return backend;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58d29562959e4f9c21557f699a0d964bb0c98f8e":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["58d29562959e4f9c21557f699a0d964bb0c98f8e"]},"commit2Childs":{"58d29562959e4f9c21557f699a0d964bb0c98f8e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["58d29562959e4f9c21557f699a0d964bb0c98f8e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}