{"path":"solr/core/src/test/org/apache/solr/core/CachingDirectoryFactoryTest.GetDirThread#run().mjava","commits":[{"id":"a57105180ca080c421baaa15400fcce41a615791","date":1362949009,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/CachingDirectoryFactoryTest.GetDirThread#run().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void run() {\n      random = random();\n      while (!stop) {\n        try {\n          Thread.sleep(random.nextInt(50) + 1);\n        } catch (InterruptedException e1) {\n          throw new RuntimeException(e1);\n        }\n        try {\n          String path = \"path\" + random.nextInt(20);\n          synchronized (dirs) {\n            Tracker tracker = dirs.get(path);\n            if (tracker == null) {\n              tracker = new Tracker();\n              tracker.path = path;\n              tracker.dir = df.get(path, DirContext.DEFAULT, null);\n              dirs.put(path, tracker);\n            } else {\n              tracker.dir = df.get(path, DirContext.DEFAULT, null);\n            }\n            tracker.refCnt.incrementAndGet();\n          }\n          \n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["058801f8673d53a5abac8088204860ec29a40f0d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b97a32ef0f7ada102673c4b42228da75f324b52b","date":1362975614,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/CachingDirectoryFactoryTest.GetDirThread#run().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/CachingDirectoryFactoryTest.GetDirThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      random = random();\n      while (!stop) {\n        try {\n          Thread.sleep(random.nextInt(50) + 1);\n        } catch (InterruptedException e1) {\n          throw new RuntimeException(e1);\n        }\n        try {\n          String path = \"path\" + random.nextInt(20);\n          synchronized (dirs) {\n            Tracker tracker = dirs.get(path);\n            if (tracker == null) {\n              tracker = new Tracker();\n              tracker.path = path;\n              tracker.dir = df.get(path, DirContext.DEFAULT, null);\n              dirs.put(path, tracker);\n            } else {\n              if (random.nextInt(10) > 6) {\n                Tracker oldTracker = new Tracker();\n                oldTracker.refCnt = new AtomicInteger(tracker.refCnt.get());\n                oldTracker.path = tracker.path;\n                oldTracker.dir = tracker.dir;\n                oldDirs.add(oldTracker);\n                \n                tracker.dir = df.get(path, DirContext.DEFAULT, null, true);\n                tracker.refCnt = new AtomicInteger(0);\n              } else {\n                tracker.dir = df.get(path, DirContext.DEFAULT, null);\n              }\n            }\n            tracker.refCnt.incrementAndGet();\n          }\n          \n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      random = random();\n      while (!stop) {\n        try {\n          Thread.sleep(random.nextInt(50) + 1);\n        } catch (InterruptedException e1) {\n          throw new RuntimeException(e1);\n        }\n        try {\n          String path = \"path\" + random.nextInt(20);\n          synchronized (dirs) {\n            Tracker tracker = dirs.get(path);\n            if (tracker == null) {\n              tracker = new Tracker();\n              tracker.path = path;\n              tracker.dir = df.get(path, DirContext.DEFAULT, null);\n              dirs.put(path, tracker);\n            } else {\n              tracker.dir = df.get(path, DirContext.DEFAULT, null);\n            }\n            tracker.refCnt.incrementAndGet();\n          }\n          \n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54f9a16329716fa08b653c53f1c3dfc6b284d2cc","date":1363905854,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/CachingDirectoryFactoryTest.GetDirThread#run().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/CachingDirectoryFactoryTest.GetDirThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      random = random();\n      while (!stop) {\n        try {\n          Thread.sleep(random.nextInt(50) + 1);\n        } catch (InterruptedException e1) {\n          throw new RuntimeException(e1);\n        }\n        try {\n          String path = \"path\" + random.nextInt(20);\n          synchronized (dirs) {\n            Tracker tracker = dirs.get(path);\n            if (tracker == null) {\n              tracker = new Tracker();\n              tracker.path = path;\n              tracker.dir = df.get(path, DirContext.DEFAULT, null);\n              dirs.put(path, tracker);\n            } else {\n              tracker.dir = df.get(path, DirContext.DEFAULT, null);\n            }\n            tracker.refCnt.incrementAndGet();\n          }\n          \n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      random = random();\n      while (!stop) {\n        try {\n          Thread.sleep(random.nextInt(50) + 1);\n        } catch (InterruptedException e1) {\n          throw new RuntimeException(e1);\n        }\n        try {\n          String path = \"path\" + random.nextInt(20);\n          synchronized (dirs) {\n            Tracker tracker = dirs.get(path);\n            if (tracker == null) {\n              tracker = new Tracker();\n              tracker.path = path;\n              tracker.dir = df.get(path, DirContext.DEFAULT, null);\n              dirs.put(path, tracker);\n            } else {\n              if (random.nextInt(10) > 6) {\n                Tracker oldTracker = new Tracker();\n                oldTracker.refCnt = new AtomicInteger(tracker.refCnt.get());\n                oldTracker.path = tracker.path;\n                oldTracker.dir = tracker.dir;\n                oldDirs.add(oldTracker);\n                \n                tracker.dir = df.get(path, DirContext.DEFAULT, null, true);\n                tracker.refCnt = new AtomicInteger(0);\n              } else {\n                tracker.dir = df.get(path, DirContext.DEFAULT, null);\n              }\n            }\n            tracker.refCnt.incrementAndGet();\n          }\n          \n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0471d0887ea55e42e2ed693cd5656136e34e3c25","date":1363930474,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/CachingDirectoryFactoryTest.GetDirThread#run().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/CachingDirectoryFactoryTest.GetDirThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      random = random();\n      while (!stop) {\n        try {\n          Thread.sleep(random.nextInt(350) + 1);\n        } catch (InterruptedException e1) {\n          throw new RuntimeException(e1);\n        }\n        try {\n          String path = \"path\" + random.nextInt(20);\n          synchronized (dirs) {\n            Tracker tracker = dirs.get(path);\n            if (tracker == null) {\n              tracker = new Tracker();\n              tracker.path = path;\n              tracker.dir = df.get(path, DirContext.DEFAULT, null);\n              dirs.put(path, tracker);\n            } else {\n              tracker.dir = df.get(path, DirContext.DEFAULT, null);\n            }\n            tracker.refCnt.incrementAndGet();\n          }\n          \n        } catch (AlreadyClosedException e) {\n          log.warn(\"Cannot get dir, factory is already closed\");\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      random = random();\n      while (!stop) {\n        try {\n          Thread.sleep(random.nextInt(50) + 1);\n        } catch (InterruptedException e1) {\n          throw new RuntimeException(e1);\n        }\n        try {\n          String path = \"path\" + random.nextInt(20);\n          synchronized (dirs) {\n            Tracker tracker = dirs.get(path);\n            if (tracker == null) {\n              tracker = new Tracker();\n              tracker.path = path;\n              tracker.dir = df.get(path, DirContext.DEFAULT, null);\n              dirs.put(path, tracker);\n            } else {\n              tracker.dir = df.get(path, DirContext.DEFAULT, null);\n            }\n            tracker.refCnt.incrementAndGet();\n          }\n          \n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"058801f8673d53a5abac8088204860ec29a40f0d","date":1364178882,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/CachingDirectoryFactoryTest.GetDirThread#run().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/CachingDirectoryFactoryTest.GetDirThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      random = random();\n      while (!stop) {\n        try {\n          Thread.sleep(random.nextInt(350) + 1);\n        } catch (InterruptedException e1) {\n          throw new RuntimeException(e1);\n        }\n        try {\n          String path;\n          if (random.nextBoolean()) {\n            path = \"path\" + random.nextInt(20);\n          } else {\n            if (random.nextBoolean()) {\n              path = \"path\" + random.nextInt(20) + \"/\" + random.nextInt(20);\n            } else {\n              path = \"path\" + random.nextInt(20) + \"/\" + random.nextInt(20) + \"/\" + random.nextInt(20);\n            }\n          }\n          synchronized (dirs) {\n            Tracker tracker = dirs.get(path);\n            if (tracker == null) {\n              tracker = new Tracker();\n              tracker.path = path;\n              tracker.dir = df.get(path, DirContext.DEFAULT, null);\n              dirs.put(path, tracker);\n            } else {\n              tracker.dir = df.get(path, DirContext.DEFAULT, null);\n            }\n            tracker.refCnt.incrementAndGet();\n          }\n          \n        } catch (AlreadyClosedException e) {\n          log.warn(\"Cannot get dir, factory is already closed\");\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      random = random();\n      while (!stop) {\n        try {\n          Thread.sleep(random.nextInt(350) + 1);\n        } catch (InterruptedException e1) {\n          throw new RuntimeException(e1);\n        }\n        try {\n          String path = \"path\" + random.nextInt(20);\n          synchronized (dirs) {\n            Tracker tracker = dirs.get(path);\n            if (tracker == null) {\n              tracker = new Tracker();\n              tracker.path = path;\n              tracker.dir = df.get(path, DirContext.DEFAULT, null);\n              dirs.put(path, tracker);\n            } else {\n              tracker.dir = df.get(path, DirContext.DEFAULT, null);\n            }\n            tracker.refCnt.incrementAndGet();\n          }\n          \n        } catch (AlreadyClosedException e) {\n          log.warn(\"Cannot get dir, factory is already closed\");\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n","bugFix":["a57105180ca080c421baaa15400fcce41a615791"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42a5f916afbd74e1875b20198b0925849fc7091d","date":1410737177,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/CachingDirectoryFactoryTest.GetDirThread#run().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/CachingDirectoryFactoryTest.GetDirThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      random = random();\n      while (!stop) {\n        try {\n          Thread.sleep(random.nextInt(350) + 1);\n        } catch (InterruptedException e1) {\n          throw new RuntimeException(e1);\n        }\n        try {\n          String path;\n          if (random.nextBoolean()) {\n            path = \"path\" + random.nextInt(20);\n          } else {\n            if (random.nextBoolean()) {\n              path = \"path\" + random.nextInt(20) + \"/\" + random.nextInt(20);\n            } else {\n              path = \"path\" + random.nextInt(20) + \"/\" + random.nextInt(20) + \"/\" + random.nextInt(20);\n            }\n          }\n          synchronized (dirs) {\n            Tracker tracker = dirs.get(path);\n            if (tracker == null) {\n              tracker = new Tracker();\n              tracker.path = path;\n              tracker.dir = df.get(path, DirContext.DEFAULT, \"single\");\n              dirs.put(path, tracker);\n            } else {\n              tracker.dir = df.get(path, DirContext.DEFAULT, \"single\");\n            }\n            tracker.refCnt.incrementAndGet();\n          }\n          \n        } catch (AlreadyClosedException e) {\n          log.warn(\"Cannot get dir, factory is already closed\");\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      random = random();\n      while (!stop) {\n        try {\n          Thread.sleep(random.nextInt(350) + 1);\n        } catch (InterruptedException e1) {\n          throw new RuntimeException(e1);\n        }\n        try {\n          String path;\n          if (random.nextBoolean()) {\n            path = \"path\" + random.nextInt(20);\n          } else {\n            if (random.nextBoolean()) {\n              path = \"path\" + random.nextInt(20) + \"/\" + random.nextInt(20);\n            } else {\n              path = \"path\" + random.nextInt(20) + \"/\" + random.nextInt(20) + \"/\" + random.nextInt(20);\n            }\n          }\n          synchronized (dirs) {\n            Tracker tracker = dirs.get(path);\n            if (tracker == null) {\n              tracker = new Tracker();\n              tracker.path = path;\n              tracker.dir = df.get(path, DirContext.DEFAULT, null);\n              dirs.put(path, tracker);\n            } else {\n              tracker.dir = df.get(path, DirContext.DEFAULT, null);\n            }\n            tracker.refCnt.incrementAndGet();\n          }\n          \n        } catch (AlreadyClosedException e) {\n          log.warn(\"Cannot get dir, factory is already closed\");\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b3091e174423680e7d6cce5f858d48cd5410bcf","date":1452177279,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/CachingDirectoryFactoryTest.GetDirThread#run().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/CachingDirectoryFactoryTest.GetDirThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      random = random();\n      while (!stop) {\n        try {\n          Thread.sleep(random.nextInt(350) + 1);\n        } catch (InterruptedException e1) {\n          throw new RuntimeException(e1);\n        }\n        try {\n          String path;\n          if (random.nextBoolean()) {\n            path = \"path\" + random.nextInt(20);\n          } else {\n            if (random.nextBoolean()) {\n              path = \"path\" + random.nextInt(20) + \"/\" + random.nextInt(20);\n            } else {\n              path = \"path\" + random.nextInt(20) + \"/\" + random.nextInt(20) + \"/\" + random.nextInt(20);\n            }\n          }\n          synchronized (dirs) {\n            Tracker tracker = dirs.get(path);\n            if (tracker == null) {\n              tracker = new Tracker();\n              tracker.path = path;\n              tracker.dir = df.get(path, DirContext.DEFAULT, DirectoryFactory.LOCK_TYPE_SINGLE);\n              dirs.put(path, tracker);\n            } else {\n              tracker.dir = df.get(path, DirContext.DEFAULT, DirectoryFactory.LOCK_TYPE_SINGLE);\n            }\n            tracker.refCnt.incrementAndGet();\n          }\n          \n        } catch (AlreadyClosedException e) {\n          log.warn(\"Cannot get dir, factory is already closed\");\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      random = random();\n      while (!stop) {\n        try {\n          Thread.sleep(random.nextInt(350) + 1);\n        } catch (InterruptedException e1) {\n          throw new RuntimeException(e1);\n        }\n        try {\n          String path;\n          if (random.nextBoolean()) {\n            path = \"path\" + random.nextInt(20);\n          } else {\n            if (random.nextBoolean()) {\n              path = \"path\" + random.nextInt(20) + \"/\" + random.nextInt(20);\n            } else {\n              path = \"path\" + random.nextInt(20) + \"/\" + random.nextInt(20) + \"/\" + random.nextInt(20);\n            }\n          }\n          synchronized (dirs) {\n            Tracker tracker = dirs.get(path);\n            if (tracker == null) {\n              tracker = new Tracker();\n              tracker.path = path;\n              tracker.dir = df.get(path, DirContext.DEFAULT, \"single\");\n              dirs.put(path, tracker);\n            } else {\n              tracker.dir = df.get(path, DirContext.DEFAULT, \"single\");\n            }\n            tracker.refCnt.incrementAndGet();\n          }\n          \n        } catch (AlreadyClosedException e) {\n          log.warn(\"Cannot get dir, factory is already closed\");\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"058801f8673d53a5abac8088204860ec29a40f0d":["0471d0887ea55e42e2ed693cd5656136e34e3c25"],"b97a32ef0f7ada102673c4b42228da75f324b52b":["a57105180ca080c421baaa15400fcce41a615791"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"54f9a16329716fa08b653c53f1c3dfc6b284d2cc":["b97a32ef0f7ada102673c4b42228da75f324b52b"],"42a5f916afbd74e1875b20198b0925849fc7091d":["058801f8673d53a5abac8088204860ec29a40f0d"],"a57105180ca080c421baaa15400fcce41a615791":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2b3091e174423680e7d6cce5f858d48cd5410bcf":["42a5f916afbd74e1875b20198b0925849fc7091d"],"0471d0887ea55e42e2ed693cd5656136e34e3c25":["54f9a16329716fa08b653c53f1c3dfc6b284d2cc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2b3091e174423680e7d6cce5f858d48cd5410bcf"]},"commit2Childs":{"058801f8673d53a5abac8088204860ec29a40f0d":["42a5f916afbd74e1875b20198b0925849fc7091d"],"b97a32ef0f7ada102673c4b42228da75f324b52b":["54f9a16329716fa08b653c53f1c3dfc6b284d2cc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a57105180ca080c421baaa15400fcce41a615791"],"54f9a16329716fa08b653c53f1c3dfc6b284d2cc":["0471d0887ea55e42e2ed693cd5656136e34e3c25"],"42a5f916afbd74e1875b20198b0925849fc7091d":["2b3091e174423680e7d6cce5f858d48cd5410bcf"],"a57105180ca080c421baaa15400fcce41a615791":["b97a32ef0f7ada102673c4b42228da75f324b52b"],"2b3091e174423680e7d6cce5f858d48cd5410bcf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0471d0887ea55e42e2ed693cd5656136e34e3c25":["058801f8673d53a5abac8088204860ec29a40f0d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}