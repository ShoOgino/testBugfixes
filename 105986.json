{"path":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#doTestMergedStats().mjava","commits":[{"id":"56b81df095c14686efbc8ec09364a4a2d5f7db03","date":1458138880,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#doTestMergedStats().mjava","pathOld":"/dev/null","sourceNew":"  private void doTestMergedStats() throws IOException {\n    final int numDims = TestUtil.nextInt(random(), 1, 8);\n    final int numBytesPerDim = TestUtil.nextInt(random(), 1, 16);\n    Directory dir = new RAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(null));\n    final int numDocs = TestUtil.nextInt(random(), 10, 20);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      final int numPoints = random().nextInt(3);\n      for (int j = 0; j < numPoints; ++j) {\n        doc.add(new BinaryPoint(\"field\", randomBinaryValue(numDims, numBytesPerDim)));\n      }\n      w.addDocument(doc);\n      if (random().nextBoolean()) {\n        DirectoryReader.open(w).close();\n      }\n    }\n\n    final IndexReader reader1 = DirectoryReader.open(w);\n    w.forceMerge(1);\n    final IndexReader reader2 = DirectoryReader.open(w);\n    final PointValues expected = getOnlyLeafReader(reader2).getPointValues();\n    if (expected == null) {\n      assertNull(PointValues.getMinPackedValue(reader1, \"field\"));\n      assertNull(PointValues.getMaxPackedValue(reader1, \"field\"));\n      assertEquals(0, PointValues.getDocCount(reader1, \"field\"));\n      assertEquals(0, PointValues.size(reader1, \"field\"));\n    } else {\n      assertArrayEquals(\n          expected.getMinPackedValue(\"field\"),\n          PointValues.getMinPackedValue(reader1, \"field\"));\n      assertArrayEquals(\n          expected.getMaxPackedValue(\"field\"),\n          PointValues.getMaxPackedValue(reader1, \"field\"));\n      assertEquals(expected.getDocCount(\"field\"), PointValues.getDocCount(reader1, \"field\"));\n      assertEquals(expected.size(\"field\"),  PointValues.size(reader1, \"field\"));\n    }\n    IOUtils.close(w, reader1, reader2, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"367f57e2ee85b7f7e28cfe73370a22cf67624f65","date":1476778467,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#doTestMergedStats().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#doTestMergedStats().mjava","sourceNew":"  private void doTestMergedStats() throws IOException {\n    final int numDims = TestUtil.nextInt(random(), 1, 8);\n    final int numBytesPerDim = TestUtil.nextInt(random(), 1, 16);\n    Directory dir = new RAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(null));\n    final int numDocs = TestUtil.nextInt(random(), 10, 20);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      final int numPoints = random().nextInt(3);\n      for (int j = 0; j < numPoints; ++j) {\n        doc.add(new BinaryPoint(\"field\", randomBinaryValue(numDims, numBytesPerDim)));\n      }\n      w.addDocument(doc);\n      if (random().nextBoolean()) {\n        DirectoryReader.open(w).close();\n      }\n    }\n\n    final IndexReader reader1 = DirectoryReader.open(w);\n    w.forceMerge(1);\n    final IndexReader reader2 = DirectoryReader.open(w);\n    final PointValues expected = getOnlyLeafReader(reader2).getPointValues(\"field\");\n    if (expected == null) {\n      assertNull(PointValues.getMinPackedValue(reader1, \"field\"));\n      assertNull(PointValues.getMaxPackedValue(reader1, \"field\"));\n      assertEquals(0, PointValues.getDocCount(reader1, \"field\"));\n      assertEquals(0, PointValues.size(reader1, \"field\"));\n    } else {\n      assertArrayEquals(\n          expected.getMinPackedValue(),\n          PointValues.getMinPackedValue(reader1, \"field\"));\n      assertArrayEquals(\n          expected.getMaxPackedValue(),\n          PointValues.getMaxPackedValue(reader1, \"field\"));\n      assertEquals(expected.getDocCount(), PointValues.getDocCount(reader1, \"field\"));\n      assertEquals(expected.size(),  PointValues.size(reader1, \"field\"));\n    }\n    IOUtils.close(w, reader1, reader2, dir);\n  }\n\n","sourceOld":"  private void doTestMergedStats() throws IOException {\n    final int numDims = TestUtil.nextInt(random(), 1, 8);\n    final int numBytesPerDim = TestUtil.nextInt(random(), 1, 16);\n    Directory dir = new RAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(null));\n    final int numDocs = TestUtil.nextInt(random(), 10, 20);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      final int numPoints = random().nextInt(3);\n      for (int j = 0; j < numPoints; ++j) {\n        doc.add(new BinaryPoint(\"field\", randomBinaryValue(numDims, numBytesPerDim)));\n      }\n      w.addDocument(doc);\n      if (random().nextBoolean()) {\n        DirectoryReader.open(w).close();\n      }\n    }\n\n    final IndexReader reader1 = DirectoryReader.open(w);\n    w.forceMerge(1);\n    final IndexReader reader2 = DirectoryReader.open(w);\n    final PointValues expected = getOnlyLeafReader(reader2).getPointValues();\n    if (expected == null) {\n      assertNull(PointValues.getMinPackedValue(reader1, \"field\"));\n      assertNull(PointValues.getMaxPackedValue(reader1, \"field\"));\n      assertEquals(0, PointValues.getDocCount(reader1, \"field\"));\n      assertEquals(0, PointValues.size(reader1, \"field\"));\n    } else {\n      assertArrayEquals(\n          expected.getMinPackedValue(\"field\"),\n          PointValues.getMinPackedValue(reader1, \"field\"));\n      assertArrayEquals(\n          expected.getMaxPackedValue(\"field\"),\n          PointValues.getMaxPackedValue(reader1, \"field\"));\n      assertEquals(expected.getDocCount(\"field\"), PointValues.getDocCount(reader1, \"field\"));\n      assertEquals(expected.size(\"field\"),  PointValues.size(reader1, \"field\"));\n    }\n    IOUtils.close(w, reader1, reader2, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#doTestMergedStats().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#doTestMergedStats().mjava","sourceNew":"  private void doTestMergedStats() throws IOException {\n    final int numDims = TestUtil.nextInt(random(), 1, 8);\n    final int numBytesPerDim = TestUtil.nextInt(random(), 1, 16);\n    Directory dir = new RAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(null));\n    final int numDocs = TestUtil.nextInt(random(), 10, 20);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      final int numPoints = random().nextInt(3);\n      for (int j = 0; j < numPoints; ++j) {\n        doc.add(new BinaryPoint(\"field\", randomBinaryValue(numDims, numBytesPerDim)));\n      }\n      w.addDocument(doc);\n      if (random().nextBoolean()) {\n        DirectoryReader.open(w).close();\n      }\n    }\n\n    final IndexReader reader1 = DirectoryReader.open(w);\n    w.forceMerge(1);\n    final IndexReader reader2 = DirectoryReader.open(w);\n    final PointValues expected = getOnlyLeafReader(reader2).getPointValues(\"field\");\n    if (expected == null) {\n      assertNull(PointValues.getMinPackedValue(reader1, \"field\"));\n      assertNull(PointValues.getMaxPackedValue(reader1, \"field\"));\n      assertEquals(0, PointValues.getDocCount(reader1, \"field\"));\n      assertEquals(0, PointValues.size(reader1, \"field\"));\n    } else {\n      assertArrayEquals(\n          expected.getMinPackedValue(),\n          PointValues.getMinPackedValue(reader1, \"field\"));\n      assertArrayEquals(\n          expected.getMaxPackedValue(),\n          PointValues.getMaxPackedValue(reader1, \"field\"));\n      assertEquals(expected.getDocCount(), PointValues.getDocCount(reader1, \"field\"));\n      assertEquals(expected.size(),  PointValues.size(reader1, \"field\"));\n    }\n    IOUtils.close(w, reader1, reader2, dir);\n  }\n\n","sourceOld":"  private void doTestMergedStats() throws IOException {\n    final int numDims = TestUtil.nextInt(random(), 1, 8);\n    final int numBytesPerDim = TestUtil.nextInt(random(), 1, 16);\n    Directory dir = new RAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(null));\n    final int numDocs = TestUtil.nextInt(random(), 10, 20);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      final int numPoints = random().nextInt(3);\n      for (int j = 0; j < numPoints; ++j) {\n        doc.add(new BinaryPoint(\"field\", randomBinaryValue(numDims, numBytesPerDim)));\n      }\n      w.addDocument(doc);\n      if (random().nextBoolean()) {\n        DirectoryReader.open(w).close();\n      }\n    }\n\n    final IndexReader reader1 = DirectoryReader.open(w);\n    w.forceMerge(1);\n    final IndexReader reader2 = DirectoryReader.open(w);\n    final PointValues expected = getOnlyLeafReader(reader2).getPointValues();\n    if (expected == null) {\n      assertNull(PointValues.getMinPackedValue(reader1, \"field\"));\n      assertNull(PointValues.getMaxPackedValue(reader1, \"field\"));\n      assertEquals(0, PointValues.getDocCount(reader1, \"field\"));\n      assertEquals(0, PointValues.size(reader1, \"field\"));\n    } else {\n      assertArrayEquals(\n          expected.getMinPackedValue(\"field\"),\n          PointValues.getMinPackedValue(reader1, \"field\"));\n      assertArrayEquals(\n          expected.getMaxPackedValue(\"field\"),\n          PointValues.getMaxPackedValue(reader1, \"field\"));\n      assertEquals(expected.getDocCount(\"field\"), PointValues.getDocCount(reader1, \"field\"));\n      assertEquals(expected.size(\"field\"),  PointValues.size(reader1, \"field\"));\n    }\n    IOUtils.close(w, reader1, reader2, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d77dafd89756a5161d244985903e3487ca109182","date":1548679743,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#doTestMergedStats().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#doTestMergedStats().mjava","sourceNew":"  private void doTestMergedStats() throws IOException {\n    final int numDims = TestUtil.nextInt(random(), 1, 8);\n    final int numBytesPerDim = TestUtil.nextInt(random(), 1, 16);\n    Directory dir = new ByteBuffersDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(null));\n    final int numDocs = TestUtil.nextInt(random(), 10, 20);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      final int numPoints = random().nextInt(3);\n      for (int j = 0; j < numPoints; ++j) {\n        doc.add(new BinaryPoint(\"field\", randomBinaryValue(numDims, numBytesPerDim)));\n      }\n      w.addDocument(doc);\n      if (random().nextBoolean()) {\n        DirectoryReader.open(w).close();\n      }\n    }\n\n    final IndexReader reader1 = DirectoryReader.open(w);\n    w.forceMerge(1);\n    final IndexReader reader2 = DirectoryReader.open(w);\n    final PointValues expected = getOnlyLeafReader(reader2).getPointValues(\"field\");\n    if (expected == null) {\n      assertNull(PointValues.getMinPackedValue(reader1, \"field\"));\n      assertNull(PointValues.getMaxPackedValue(reader1, \"field\"));\n      assertEquals(0, PointValues.getDocCount(reader1, \"field\"));\n      assertEquals(0, PointValues.size(reader1, \"field\"));\n    } else {\n      assertArrayEquals(\n          expected.getMinPackedValue(),\n          PointValues.getMinPackedValue(reader1, \"field\"));\n      assertArrayEquals(\n          expected.getMaxPackedValue(),\n          PointValues.getMaxPackedValue(reader1, \"field\"));\n      assertEquals(expected.getDocCount(), PointValues.getDocCount(reader1, \"field\"));\n      assertEquals(expected.size(),  PointValues.size(reader1, \"field\"));\n    }\n    IOUtils.close(w, reader1, reader2, dir);\n  }\n\n","sourceOld":"  private void doTestMergedStats() throws IOException {\n    final int numDims = TestUtil.nextInt(random(), 1, 8);\n    final int numBytesPerDim = TestUtil.nextInt(random(), 1, 16);\n    Directory dir = new RAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(null));\n    final int numDocs = TestUtil.nextInt(random(), 10, 20);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      final int numPoints = random().nextInt(3);\n      for (int j = 0; j < numPoints; ++j) {\n        doc.add(new BinaryPoint(\"field\", randomBinaryValue(numDims, numBytesPerDim)));\n      }\n      w.addDocument(doc);\n      if (random().nextBoolean()) {\n        DirectoryReader.open(w).close();\n      }\n    }\n\n    final IndexReader reader1 = DirectoryReader.open(w);\n    w.forceMerge(1);\n    final IndexReader reader2 = DirectoryReader.open(w);\n    final PointValues expected = getOnlyLeafReader(reader2).getPointValues(\"field\");\n    if (expected == null) {\n      assertNull(PointValues.getMinPackedValue(reader1, \"field\"));\n      assertNull(PointValues.getMaxPackedValue(reader1, \"field\"));\n      assertEquals(0, PointValues.getDocCount(reader1, \"field\"));\n      assertEquals(0, PointValues.size(reader1, \"field\"));\n    } else {\n      assertArrayEquals(\n          expected.getMinPackedValue(),\n          PointValues.getMinPackedValue(reader1, \"field\"));\n      assertArrayEquals(\n          expected.getMaxPackedValue(),\n          PointValues.getMaxPackedValue(reader1, \"field\"));\n      assertEquals(expected.getDocCount(), PointValues.getDocCount(reader1, \"field\"));\n      assertEquals(expected.size(),  PointValues.size(reader1, \"field\"));\n    }\n    IOUtils.close(w, reader1, reader2, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d77dafd89756a5161d244985903e3487ca109182":["367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["56b81df095c14686efbc8ec09364a4a2d5f7db03"],"56b81df095c14686efbc8ec09364a4a2d5f7db03":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["56b81df095c14686efbc8ec09364a4a2d5f7db03","367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d77dafd89756a5161d244985903e3487ca109182"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["56b81df095c14686efbc8ec09364a4a2d5f7db03"],"d77dafd89756a5161d244985903e3487ca109182":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["d77dafd89756a5161d244985903e3487ca109182","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"56b81df095c14686efbc8ec09364a4a2d5f7db03":["367f57e2ee85b7f7e28cfe73370a22cf67624f65","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}