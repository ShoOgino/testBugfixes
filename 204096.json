{"path":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestIndexClose#testLeaks().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestIndexClose#testLeaks().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestIndexClose#testLeaks().mjava","sourceNew":"  @Test\n  public void testLeaks() throws Exception {\n    LeakChecker checker = new LeakChecker();\n    Directory dir = newDirectory();\n    DirectoryTaxonomyWriter tw = checker.openWriter(dir);\n    tw.close();\n    assertEquals(0, checker.nopen());\n\n    tw = checker.openWriter(dir);\n    tw.addCategory(new CategoryPath(\"animal\", \"dog\"));\n    tw.close();\n    assertEquals(0, checker.nopen());\n\n    DirectoryTaxonomyReader tr = checker.openReader(dir);\n    tr.getPath(1);\n    tr.refresh();\n    tr.close();\n    assertEquals(0, checker.nopen());\n\n    tr = checker.openReader(dir);\n    tw = checker.openWriter(dir);\n    tw.addCategory(new CategoryPath(\"animal\", \"cat\"));\n    tr.refresh();\n    tw.commit();\n    tw.close();\n    tr.refresh();\n    tr.close();\n    assertEquals(0, checker.nopen());\n\n    tw = checker.openWriter(dir);\n    for (int i=0; i<10000; i++) {\n      tw.addCategory(new CategoryPath(\"number\", Integer.toString(i)));\n    }\n    tw.close();\n    assertEquals(0, checker.nopen());\n    tw = checker.openWriter(dir);\n    for (int i=0; i<10000; i++) {\n      tw.addCategory(new CategoryPath(\"number\", Integer.toString(i*2)));\n    }\n    tw.close();\n    assertEquals(0, checker.nopen());\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testLeaks() throws Exception {\n    LeakChecker checker = new LeakChecker();\n    Directory dir = newDirectory();\n    DirectoryTaxonomyWriter tw = checker.openWriter(dir);\n    tw.close();\n    assertEquals(0, checker.nopen());\n\n    tw = checker.openWriter(dir);\n    tw.addCategory(new CategoryPath(\"animal\", \"dog\"));\n    tw.close();\n    assertEquals(0, checker.nopen());\n\n    DirectoryTaxonomyReader tr = checker.openReader(dir);\n    tr.getPath(1);\n    tr.refresh();\n    tr.close();\n    assertEquals(0, checker.nopen());\n\n    tr = checker.openReader(dir);\n    tw = checker.openWriter(dir);\n    tw.addCategory(new CategoryPath(\"animal\", \"cat\"));\n    tr.refresh();\n    tw.commit();\n    tw.close();\n    tr.refresh();\n    tr.close();\n    assertEquals(0, checker.nopen());\n\n    tw = checker.openWriter(dir);\n    for (int i=0; i<10000; i++) {\n      tw.addCategory(new CategoryPath(\"number\", Integer.toString(i)));\n    }\n    tw.close();\n    assertEquals(0, checker.nopen());\n    tw = checker.openWriter(dir);\n    for (int i=0; i<10000; i++) {\n      tw.addCategory(new CategoryPath(\"number\", Integer.toString(i*2)));\n    }\n    tw.close();\n    assertEquals(0, checker.nopen());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"119bc02554a192b2954b73d79389ec441257b624","date":1337232699,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestIndexClose#testLeaks().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testLeaks() throws Exception {\n    LeakChecker checker = new LeakChecker();\n    Directory dir = newDirectory();\n    DirectoryTaxonomyWriter tw = checker.openWriter(dir);\n    tw.close();\n    assertEquals(0, checker.nopen());\n\n    tw = checker.openWriter(dir);\n    tw.addCategory(new CategoryPath(\"animal\", \"dog\"));\n    tw.close();\n    assertEquals(0, checker.nopen());\n\n    DirectoryTaxonomyReader tr = checker.openReader(dir);\n    tr.getPath(1);\n    tr.refresh();\n    tr.close();\n    assertEquals(0, checker.nopen());\n\n    tr = checker.openReader(dir);\n    tw = checker.openWriter(dir);\n    tw.addCategory(new CategoryPath(\"animal\", \"cat\"));\n    tr.refresh();\n    tw.commit();\n    tw.close();\n    tr.refresh();\n    tr.close();\n    assertEquals(0, checker.nopen());\n\n    tw = checker.openWriter(dir);\n    for (int i=0; i<10000; i++) {\n      tw.addCategory(new CategoryPath(\"number\", Integer.toString(i)));\n    }\n    tw.close();\n    assertEquals(0, checker.nopen());\n    tw = checker.openWriter(dir);\n    for (int i=0; i<10000; i++) {\n      tw.addCategory(new CategoryPath(\"number\", Integer.toString(i*2)));\n    }\n    tw.close();\n    assertEquals(0, checker.nopen());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef0d8a69209261514c5739c770bba706c2308450","date":1337607597,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestIndexClose#testLeaks().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testLeaks() throws Exception {\n    LeakChecker checker = new LeakChecker();\n    Directory dir = newDirectory();\n    DirectoryTaxonomyWriter tw = checker.openWriter(dir);\n    tw.close();\n    assertEquals(0, checker.nopen());\n\n    tw = checker.openWriter(dir);\n    tw.addCategory(new CategoryPath(\"animal\", \"dog\"));\n    tw.close();\n    assertEquals(0, checker.nopen());\n\n    DirectoryTaxonomyReader tr = checker.openReader(dir);\n    tr.getPath(1);\n    tr.refresh();\n    tr.close();\n    assertEquals(0, checker.nopen());\n\n    tr = checker.openReader(dir);\n    tw = checker.openWriter(dir);\n    tw.addCategory(new CategoryPath(\"animal\", \"cat\"));\n    tr.refresh();\n    tw.commit();\n    tw.close();\n    tr.refresh();\n    tr.close();\n    assertEquals(0, checker.nopen());\n\n    tw = checker.openWriter(dir);\n    for (int i=0; i<10000; i++) {\n      tw.addCategory(new CategoryPath(\"number\", Integer.toString(i)));\n    }\n    tw.close();\n    assertEquals(0, checker.nopen());\n    tw = checker.openWriter(dir);\n    for (int i=0; i<10000; i++) {\n      tw.addCategory(new CategoryPath(\"number\", Integer.toString(i*2)));\n    }\n    tw.close();\n    assertEquals(0, checker.nopen());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"119bc02554a192b2954b73d79389ec441257b624":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ef0d8a69209261514c5739c770bba706c2308450":["b89678825b68eccaf09e6ab71675fc0b0af1e099","119bc02554a192b2954b73d79389ec441257b624"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["119bc02554a192b2954b73d79389ec441257b624"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["119bc02554a192b2954b73d79389ec441257b624","ef0d8a69209261514c5739c770bba706c2308450"],"119bc02554a192b2954b73d79389ec441257b624":["ef0d8a69209261514c5739c770bba706c2308450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"ef0d8a69209261514c5739c770bba706c2308450":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ef0d8a69209261514c5739c770bba706c2308450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}