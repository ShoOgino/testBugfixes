{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testExecutorStream().mjava","commits":[{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testExecutorStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testExecutorStream().mjava","sourceNew":"  @Test\n  public void testExecutorStream() throws Exception {\n    CollectionAdminRequest.createCollection(\"workQueue\", \"conf\", 2, 1).processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"workQueue\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n    CollectionAdminRequest.createCollection(\"mainCorpus\", \"conf\", 2, 1).processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"mainCorpus\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n    CollectionAdminRequest.createCollection(\"destination\", \"conf\", 2, 1).processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"destination\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    UpdateRequest workRequest = new UpdateRequest();\n    UpdateRequest dataRequest = new UpdateRequest();\n\n\n    for (int i = 0; i < 500; i++) {\n      workRequest.add(id, String.valueOf(i), \"expr_s\", \"update(destination, batchSize=50, search(mainCorpus, q=id:\"+i+\", rows=1, sort=\\\"id asc\\\", fl=\\\"id, body_t, field_i\\\"))\");\n      dataRequest.add(id, String.valueOf(i), \"body_t\", \"hello world \"+i, \"field_i\", Integer.toString(i));\n    }\n\n    workRequest.commit(cluster.getSolrClient(), \"workQueue\");\n    dataRequest.commit(cluster.getSolrClient(), \"mainCorpus\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/destination\";\n    TupleStream executorStream;\n    ModifiableSolrParams paramsLoc;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"workQueue\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"mainCorpus\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"destination\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"update\", UpdateStream.class);\n\n    String executorExpression = \"executor(threads=3, search(workQueue, q=\\\"*:*\\\", fl=\\\"id, expr_s\\\", rows=1000, sort=\\\"id desc\\\"))\";\n    executorStream = factory.constructStream(executorExpression);\n\n    StreamContext context = new StreamContext();\n    SolrClientCache clientCache = new SolrClientCache();\n    context.setSolrClientCache(clientCache);\n    executorStream.setStreamContext(context);\n    getTuples(executorStream);\n    //Destination collection should now contain all the records in the main corpus.\n    cluster.getSolrClient().commit(\"destination\");\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", \"search(destination, q=\\\"*:*\\\", fl=\\\"id, body_t, field_i\\\", rows=1000, sort=\\\"field_i asc\\\")\");\n    paramsLoc.set(\"qt\",\"/stream\");\n\n    SolrStream solrStream = new SolrStream(url, paramsLoc);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 500);\n    for(int i=0; i<500; i++) {\n      Tuple tuple = tuples.get(i);\n      long ivalue = tuple.getLong(\"field_i\");\n      String body = tuple.getString(\"body_t\");\n      assertTrue(ivalue == i);\n      assertTrue(body.equals(\"hello world \"+i));\n    }\n\n    solrStream.close();\n    clientCache.close();\n    CollectionAdminRequest.deleteCollection(\"workQueue\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"mainCorpus\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"destination\").process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  public void testExecutorStream() throws Exception {\n    CollectionAdminRequest.createCollection(\"workQueue\", \"conf\", 2, 1).processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"workQueue\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n    CollectionAdminRequest.createCollection(\"mainCorpus\", \"conf\", 2, 1).processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"mainCorpus\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n    CollectionAdminRequest.createCollection(\"destination\", \"conf\", 2, 1).processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"destination\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    UpdateRequest workRequest = new UpdateRequest();\n    UpdateRequest dataRequest = new UpdateRequest();\n\n\n    for (int i = 0; i < 500; i++) {\n      workRequest.add(id, String.valueOf(i), \"expr_s\", \"update(destination, batchSize=50, search(mainCorpus, q=id:\"+i+\", rows=1, sort=\\\"id asc\\\", fl=\\\"id, body_t, field_i\\\"))\");\n      dataRequest.add(id, String.valueOf(i), \"body_t\", \"hello world \"+i, \"field_i\", Integer.toString(i));\n    }\n\n    workRequest.commit(cluster.getSolrClient(), \"workQueue\");\n    dataRequest.commit(cluster.getSolrClient(), \"mainCorpus\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/destination\";\n    TupleStream executorStream;\n    ModifiableSolrParams paramsLoc;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"workQueue\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"mainCorpus\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"destination\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"update\", UpdateStream.class);\n\n    String executorExpression = \"executor(threads=3, search(workQueue, q=\\\"*:*\\\", fl=\\\"id, expr_s\\\", rows=1000, sort=\\\"id desc\\\"))\";\n    executorStream = factory.constructStream(executorExpression);\n\n    StreamContext context = new StreamContext();\n    SolrClientCache clientCache = new SolrClientCache();\n    context.setSolrClientCache(clientCache);\n    executorStream.setStreamContext(context);\n    getTuples(executorStream);\n    //Destination collection should now contain all the records in the main corpus.\n    cluster.getSolrClient().commit(\"destination\");\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", \"search(destination, q=\\\"*:*\\\", fl=\\\"id, body_t, field_i\\\", rows=1000, sort=\\\"field_i asc\\\")\");\n    paramsLoc.set(\"qt\",\"/stream\");\n\n    SolrStream solrStream = new SolrStream(url, paramsLoc);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 500);\n    for(int i=0; i<500; i++) {\n      Tuple tuple = tuples.get(i);\n      long ivalue = tuple.getLong(\"field_i\");\n      String body = tuple.getString(\"body_t\");\n      assertTrue(ivalue == i);\n      assertTrue(body.equals(\"hello world \"+i));\n    }\n\n    solrStream.close();\n    clientCache.close();\n    CollectionAdminRequest.deleteCollection(\"workQueue\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"mainCorpus\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"destination\").process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108","date":1533256859,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testExecutorStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testExecutorStream().mjava","sourceNew":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testExecutorStream() throws Exception {\n    CollectionAdminRequest.createCollection(\"workQueue\", \"conf\", 2, 1).processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"workQueue\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n    CollectionAdminRequest.createCollection(\"mainCorpus\", \"conf\", 2, 1).processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"mainCorpus\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n    CollectionAdminRequest.createCollection(\"destination\", \"conf\", 2, 1).processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"destination\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    UpdateRequest workRequest = new UpdateRequest();\n    UpdateRequest dataRequest = new UpdateRequest();\n\n\n    for (int i = 0; i < 500; i++) {\n      workRequest.add(id, String.valueOf(i), \"expr_s\", \"update(destination, batchSize=50, search(mainCorpus, q=id:\"+i+\", rows=1, sort=\\\"id asc\\\", fl=\\\"id, body_t, field_i\\\"))\");\n      dataRequest.add(id, String.valueOf(i), \"body_t\", \"hello world \"+i, \"field_i\", Integer.toString(i));\n    }\n\n    workRequest.commit(cluster.getSolrClient(), \"workQueue\");\n    dataRequest.commit(cluster.getSolrClient(), \"mainCorpus\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/destination\";\n    TupleStream executorStream;\n    ModifiableSolrParams paramsLoc;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"workQueue\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"mainCorpus\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"destination\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"update\", UpdateStream.class);\n\n    String executorExpression = \"executor(threads=3, search(workQueue, q=\\\"*:*\\\", fl=\\\"id, expr_s\\\", rows=1000, sort=\\\"id desc\\\"))\";\n    executorStream = factory.constructStream(executorExpression);\n\n    StreamContext context = new StreamContext();\n    SolrClientCache clientCache = new SolrClientCache();\n    context.setSolrClientCache(clientCache);\n    executorStream.setStreamContext(context);\n    getTuples(executorStream);\n    //Destination collection should now contain all the records in the main corpus.\n    cluster.getSolrClient().commit(\"destination\");\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", \"search(destination, q=\\\"*:*\\\", fl=\\\"id, body_t, field_i\\\", rows=1000, sort=\\\"field_i asc\\\")\");\n    paramsLoc.set(\"qt\",\"/stream\");\n\n    SolrStream solrStream = new SolrStream(url, paramsLoc);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 500);\n    for(int i=0; i<500; i++) {\n      Tuple tuple = tuples.get(i);\n      long ivalue = tuple.getLong(\"field_i\");\n      String body = tuple.getString(\"body_t\");\n      assertTrue(ivalue == i);\n      assertTrue(body.equals(\"hello world \"+i));\n    }\n\n    solrStream.close();\n    clientCache.close();\n    CollectionAdminRequest.deleteCollection(\"workQueue\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"mainCorpus\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"destination\").process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  public void testExecutorStream() throws Exception {\n    CollectionAdminRequest.createCollection(\"workQueue\", \"conf\", 2, 1).processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"workQueue\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n    CollectionAdminRequest.createCollection(\"mainCorpus\", \"conf\", 2, 1).processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"mainCorpus\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n    CollectionAdminRequest.createCollection(\"destination\", \"conf\", 2, 1).processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"destination\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    UpdateRequest workRequest = new UpdateRequest();\n    UpdateRequest dataRequest = new UpdateRequest();\n\n\n    for (int i = 0; i < 500; i++) {\n      workRequest.add(id, String.valueOf(i), \"expr_s\", \"update(destination, batchSize=50, search(mainCorpus, q=id:\"+i+\", rows=1, sort=\\\"id asc\\\", fl=\\\"id, body_t, field_i\\\"))\");\n      dataRequest.add(id, String.valueOf(i), \"body_t\", \"hello world \"+i, \"field_i\", Integer.toString(i));\n    }\n\n    workRequest.commit(cluster.getSolrClient(), \"workQueue\");\n    dataRequest.commit(cluster.getSolrClient(), \"mainCorpus\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/destination\";\n    TupleStream executorStream;\n    ModifiableSolrParams paramsLoc;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"workQueue\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"mainCorpus\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"destination\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"update\", UpdateStream.class);\n\n    String executorExpression = \"executor(threads=3, search(workQueue, q=\\\"*:*\\\", fl=\\\"id, expr_s\\\", rows=1000, sort=\\\"id desc\\\"))\";\n    executorStream = factory.constructStream(executorExpression);\n\n    StreamContext context = new StreamContext();\n    SolrClientCache clientCache = new SolrClientCache();\n    context.setSolrClientCache(clientCache);\n    executorStream.setStreamContext(context);\n    getTuples(executorStream);\n    //Destination collection should now contain all the records in the main corpus.\n    cluster.getSolrClient().commit(\"destination\");\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", \"search(destination, q=\\\"*:*\\\", fl=\\\"id, body_t, field_i\\\", rows=1000, sort=\\\"field_i asc\\\")\");\n    paramsLoc.set(\"qt\",\"/stream\");\n\n    SolrStream solrStream = new SolrStream(url, paramsLoc);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 500);\n    for(int i=0; i<500; i++) {\n      Tuple tuple = tuples.get(i);\n      long ivalue = tuple.getLong(\"field_i\");\n      String body = tuple.getString(\"body_t\");\n      assertTrue(ivalue == i);\n      assertTrue(body.equals(\"hello world \"+i));\n    }\n\n    solrStream.close();\n    clientCache.close();\n    CollectionAdminRequest.deleteCollection(\"workQueue\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"mainCorpus\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"destination\").process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testExecutorStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testExecutorStream().mjava","sourceNew":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testExecutorStream() throws Exception {\n    CollectionAdminRequest.createCollection(\"workQueue\", \"conf\", 2, 1).processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    cluster.waitForActiveCollection(\"workQueue\", 2, 2);\n    CollectionAdminRequest.createCollection(\"mainCorpus\", \"conf\", 2, 1).processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    cluster.waitForActiveCollection(\"mainCorpus\", 2, 2);\n    CollectionAdminRequest.createCollection(\"destination\", \"conf\", 2, 1).processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    cluster.waitForActiveCollection(\"destination\", 2, 2);\n\n    UpdateRequest workRequest = new UpdateRequest();\n    UpdateRequest dataRequest = new UpdateRequest();\n\n\n    for (int i = 0; i < 500; i++) {\n      workRequest.add(id, String.valueOf(i), \"expr_s\", \"update(destination, batchSize=50, search(mainCorpus, q=id:\"+i+\", rows=1, sort=\\\"id asc\\\", fl=\\\"id, body_t, field_i\\\"))\");\n      dataRequest.add(id, String.valueOf(i), \"body_t\", \"hello world \"+i, \"field_i\", Integer.toString(i));\n    }\n\n    workRequest.commit(cluster.getSolrClient(), \"workQueue\");\n    dataRequest.commit(cluster.getSolrClient(), \"mainCorpus\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/destination\";\n    TupleStream executorStream;\n    ModifiableSolrParams paramsLoc;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"workQueue\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"mainCorpus\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"destination\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"update\", UpdateStream.class);\n\n    String executorExpression = \"executor(threads=3, search(workQueue, q=\\\"*:*\\\", fl=\\\"id, expr_s\\\", rows=1000, sort=\\\"id desc\\\"))\";\n    executorStream = factory.constructStream(executorExpression);\n\n    StreamContext context = new StreamContext();\n    SolrClientCache clientCache = new SolrClientCache();\n    context.setSolrClientCache(clientCache);\n    executorStream.setStreamContext(context);\n    getTuples(executorStream);\n    //Destination collection should now contain all the records in the main corpus.\n    cluster.getSolrClient().commit(\"destination\");\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", \"search(destination, q=\\\"*:*\\\", fl=\\\"id, body_t, field_i\\\", rows=1000, sort=\\\"field_i asc\\\")\");\n    paramsLoc.set(\"qt\",\"/stream\");\n\n    SolrStream solrStream = new SolrStream(url, paramsLoc);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 500);\n    for(int i=0; i<500; i++) {\n      Tuple tuple = tuples.get(i);\n      long ivalue = tuple.getLong(\"field_i\");\n      String body = tuple.getString(\"body_t\");\n      assertTrue(ivalue == i);\n      assertTrue(body.equals(\"hello world \"+i));\n    }\n\n    solrStream.close();\n    clientCache.close();\n    CollectionAdminRequest.deleteCollection(\"workQueue\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"mainCorpus\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"destination\").process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testExecutorStream() throws Exception {\n    CollectionAdminRequest.createCollection(\"workQueue\", \"conf\", 2, 1).processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"workQueue\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n    CollectionAdminRequest.createCollection(\"mainCorpus\", \"conf\", 2, 1).processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"mainCorpus\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n    CollectionAdminRequest.createCollection(\"destination\", \"conf\", 2, 1).processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"destination\", cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n\n    UpdateRequest workRequest = new UpdateRequest();\n    UpdateRequest dataRequest = new UpdateRequest();\n\n\n    for (int i = 0; i < 500; i++) {\n      workRequest.add(id, String.valueOf(i), \"expr_s\", \"update(destination, batchSize=50, search(mainCorpus, q=id:\"+i+\", rows=1, sort=\\\"id asc\\\", fl=\\\"id, body_t, field_i\\\"))\");\n      dataRequest.add(id, String.valueOf(i), \"body_t\", \"hello world \"+i, \"field_i\", Integer.toString(i));\n    }\n\n    workRequest.commit(cluster.getSolrClient(), \"workQueue\");\n    dataRequest.commit(cluster.getSolrClient(), \"mainCorpus\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/destination\";\n    TupleStream executorStream;\n    ModifiableSolrParams paramsLoc;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"workQueue\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"mainCorpus\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"destination\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"update\", UpdateStream.class);\n\n    String executorExpression = \"executor(threads=3, search(workQueue, q=\\\"*:*\\\", fl=\\\"id, expr_s\\\", rows=1000, sort=\\\"id desc\\\"))\";\n    executorStream = factory.constructStream(executorExpression);\n\n    StreamContext context = new StreamContext();\n    SolrClientCache clientCache = new SolrClientCache();\n    context.setSolrClientCache(clientCache);\n    executorStream.setStreamContext(context);\n    getTuples(executorStream);\n    //Destination collection should now contain all the records in the main corpus.\n    cluster.getSolrClient().commit(\"destination\");\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", \"search(destination, q=\\\"*:*\\\", fl=\\\"id, body_t, field_i\\\", rows=1000, sort=\\\"field_i asc\\\")\");\n    paramsLoc.set(\"qt\",\"/stream\");\n\n    SolrStream solrStream = new SolrStream(url, paramsLoc);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 500);\n    for(int i=0; i<500; i++) {\n      Tuple tuple = tuples.get(i);\n      long ivalue = tuple.getLong(\"field_i\");\n      String body = tuple.getString(\"body_t\");\n      assertTrue(ivalue == i);\n      assertTrue(body.equals(\"hello world \"+i));\n    }\n\n    solrStream.close();\n    clientCache.close();\n    CollectionAdminRequest.deleteCollection(\"workQueue\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"mainCorpus\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"destination\").process(cluster.getSolrClient());\n  }\n\n","bugFix":["5c9480bf8e52feb02af9b7fa13bf50929da7900b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d35c84fdef07284c122012ca4000d3b7285a66e","date":1545962630,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testExecutorStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testExecutorStream().mjava","sourceNew":"  @Test\n  // commented out on: 24-Dec-2018   @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testExecutorStream() throws Exception {\n    CollectionAdminRequest.createCollection(\"workQueue\", \"conf\", 2, 1).processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    cluster.waitForActiveCollection(\"workQueue\", 2, 2);\n    CollectionAdminRequest.createCollection(\"mainCorpus\", \"conf\", 2, 1).processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    cluster.waitForActiveCollection(\"mainCorpus\", 2, 2);\n    CollectionAdminRequest.createCollection(\"destination\", \"conf\", 2, 1).processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    cluster.waitForActiveCollection(\"destination\", 2, 2);\n\n    UpdateRequest workRequest = new UpdateRequest();\n    UpdateRequest dataRequest = new UpdateRequest();\n\n\n    for (int i = 0; i < 500; i++) {\n      workRequest.add(id, String.valueOf(i), \"expr_s\", \"update(destination, batchSize=50, search(mainCorpus, q=id:\"+i+\", rows=1, sort=\\\"id asc\\\", fl=\\\"id, body_t, field_i\\\"))\");\n      dataRequest.add(id, String.valueOf(i), \"body_t\", \"hello world \"+i, \"field_i\", Integer.toString(i));\n    }\n\n    workRequest.commit(cluster.getSolrClient(), \"workQueue\");\n    dataRequest.commit(cluster.getSolrClient(), \"mainCorpus\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/destination\";\n    TupleStream executorStream;\n    ModifiableSolrParams paramsLoc;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"workQueue\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"mainCorpus\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"destination\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"update\", UpdateStream.class);\n\n    String executorExpression = \"executor(threads=3, search(workQueue, q=\\\"*:*\\\", fl=\\\"id, expr_s\\\", rows=1000, sort=\\\"id desc\\\"))\";\n    executorStream = factory.constructStream(executorExpression);\n\n    StreamContext context = new StreamContext();\n    SolrClientCache clientCache = new SolrClientCache();\n    context.setSolrClientCache(clientCache);\n    executorStream.setStreamContext(context);\n    getTuples(executorStream);\n    //Destination collection should now contain all the records in the main corpus.\n    cluster.getSolrClient().commit(\"destination\");\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", \"search(destination, q=\\\"*:*\\\", fl=\\\"id, body_t, field_i\\\", rows=1000, sort=\\\"field_i asc\\\")\");\n    paramsLoc.set(\"qt\",\"/stream\");\n\n    SolrStream solrStream = new SolrStream(url, paramsLoc);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 500);\n    for(int i=0; i<500; i++) {\n      Tuple tuple = tuples.get(i);\n      long ivalue = tuple.getLong(\"field_i\");\n      String body = tuple.getString(\"body_t\");\n      assertTrue(ivalue == i);\n      assertTrue(body.equals(\"hello world \"+i));\n    }\n\n    solrStream.close();\n    clientCache.close();\n    CollectionAdminRequest.deleteCollection(\"workQueue\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"mainCorpus\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"destination\").process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testExecutorStream() throws Exception {\n    CollectionAdminRequest.createCollection(\"workQueue\", \"conf\", 2, 1).processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    cluster.waitForActiveCollection(\"workQueue\", 2, 2);\n    CollectionAdminRequest.createCollection(\"mainCorpus\", \"conf\", 2, 1).processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    cluster.waitForActiveCollection(\"mainCorpus\", 2, 2);\n    CollectionAdminRequest.createCollection(\"destination\", \"conf\", 2, 1).processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    cluster.waitForActiveCollection(\"destination\", 2, 2);\n\n    UpdateRequest workRequest = new UpdateRequest();\n    UpdateRequest dataRequest = new UpdateRequest();\n\n\n    for (int i = 0; i < 500; i++) {\n      workRequest.add(id, String.valueOf(i), \"expr_s\", \"update(destination, batchSize=50, search(mainCorpus, q=id:\"+i+\", rows=1, sort=\\\"id asc\\\", fl=\\\"id, body_t, field_i\\\"))\");\n      dataRequest.add(id, String.valueOf(i), \"body_t\", \"hello world \"+i, \"field_i\", Integer.toString(i));\n    }\n\n    workRequest.commit(cluster.getSolrClient(), \"workQueue\");\n    dataRequest.commit(cluster.getSolrClient(), \"mainCorpus\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/destination\";\n    TupleStream executorStream;\n    ModifiableSolrParams paramsLoc;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"workQueue\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"mainCorpus\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"destination\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"update\", UpdateStream.class);\n\n    String executorExpression = \"executor(threads=3, search(workQueue, q=\\\"*:*\\\", fl=\\\"id, expr_s\\\", rows=1000, sort=\\\"id desc\\\"))\";\n    executorStream = factory.constructStream(executorExpression);\n\n    StreamContext context = new StreamContext();\n    SolrClientCache clientCache = new SolrClientCache();\n    context.setSolrClientCache(clientCache);\n    executorStream.setStreamContext(context);\n    getTuples(executorStream);\n    //Destination collection should now contain all the records in the main corpus.\n    cluster.getSolrClient().commit(\"destination\");\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", \"search(destination, q=\\\"*:*\\\", fl=\\\"id, body_t, field_i\\\", rows=1000, sort=\\\"field_i asc\\\")\");\n    paramsLoc.set(\"qt\",\"/stream\");\n\n    SolrStream solrStream = new SolrStream(url, paramsLoc);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 500);\n    for(int i=0; i<500; i++) {\n      Tuple tuple = tuples.get(i);\n      long ivalue = tuple.getLong(\"field_i\");\n      String body = tuple.getString(\"body_t\");\n      assertTrue(ivalue == i);\n      assertTrue(body.equals(\"hello world \"+i));\n    }\n\n    solrStream.close();\n    clientCache.close();\n    CollectionAdminRequest.deleteCollection(\"workQueue\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"mainCorpus\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"destination\").process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a1cae9aea470e88146567017129e8280d21ca76","date":1563504024,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testExecutorStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testExecutorStream().mjava","sourceNew":"  @Test\n  public void testExecutorStream() throws Exception {\n    CollectionAdminRequest.createCollection(\"workQueue\", \"conf\", 2, 1).processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    cluster.waitForActiveCollection(\"workQueue\", 2, 2);\n    CollectionAdminRequest.createCollection(\"mainCorpus\", \"conf\", 2, 1).processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    cluster.waitForActiveCollection(\"mainCorpus\", 2, 2);\n    CollectionAdminRequest.createCollection(\"destination\", \"conf\", 2, 1).processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    cluster.waitForActiveCollection(\"destination\", 2, 2);\n\n    UpdateRequest workRequest = new UpdateRequest();\n    UpdateRequest dataRequest = new UpdateRequest();\n\n\n    for (int i = 0; i < 500; i++) {\n      workRequest.add(id, String.valueOf(i), \"expr_s\", \"update(destination, batchSize=50, search(mainCorpus, q=id:\"+i+\", rows=1, sort=\\\"id asc\\\", fl=\\\"id, body_t, field_i\\\"))\");\n      dataRequest.add(id, String.valueOf(i), \"body_t\", \"hello world \"+i, \"field_i\", Integer.toString(i));\n    }\n\n    workRequest.commit(cluster.getSolrClient(), \"workQueue\");\n    dataRequest.commit(cluster.getSolrClient(), \"mainCorpus\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/destination\";\n    TupleStream executorStream;\n    ModifiableSolrParams paramsLoc;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"workQueue\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"mainCorpus\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"destination\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"update\", UpdateStream.class);\n\n    String executorExpression = \"executor(threads=3, search(workQueue, q=\\\"*:*\\\", fl=\\\"id, expr_s\\\", rows=1000, sort=\\\"id desc\\\"))\";\n    executorStream = factory.constructStream(executorExpression);\n\n    StreamContext context = new StreamContext();\n    SolrClientCache clientCache = new SolrClientCache();\n    context.setSolrClientCache(clientCache);\n    executorStream.setStreamContext(context);\n    getTuples(executorStream);\n    //Destination collection should now contain all the records in the main corpus.\n    cluster.getSolrClient().commit(\"destination\");\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", \"search(destination, q=\\\"*:*\\\", fl=\\\"id, body_t, field_i\\\", rows=1000, sort=\\\"field_i asc\\\")\");\n    paramsLoc.set(\"qt\",\"/stream\");\n\n    SolrStream solrStream = new SolrStream(url, paramsLoc);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 500);\n    for(int i=0; i<500; i++) {\n      Tuple tuple = tuples.get(i);\n      long ivalue = tuple.getLong(\"field_i\");\n      String body = tuple.getString(\"body_t\");\n      assertTrue(ivalue == i);\n      assertTrue(body.equals(\"hello world \"+i));\n    }\n\n    solrStream.close();\n    clientCache.close();\n    CollectionAdminRequest.deleteCollection(\"workQueue\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"mainCorpus\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"destination\").process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  // commented out on: 24-Dec-2018   @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testExecutorStream() throws Exception {\n    CollectionAdminRequest.createCollection(\"workQueue\", \"conf\", 2, 1).processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    cluster.waitForActiveCollection(\"workQueue\", 2, 2);\n    CollectionAdminRequest.createCollection(\"mainCorpus\", \"conf\", 2, 1).processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    cluster.waitForActiveCollection(\"mainCorpus\", 2, 2);\n    CollectionAdminRequest.createCollection(\"destination\", \"conf\", 2, 1).processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    cluster.waitForActiveCollection(\"destination\", 2, 2);\n\n    UpdateRequest workRequest = new UpdateRequest();\n    UpdateRequest dataRequest = new UpdateRequest();\n\n\n    for (int i = 0; i < 500; i++) {\n      workRequest.add(id, String.valueOf(i), \"expr_s\", \"update(destination, batchSize=50, search(mainCorpus, q=id:\"+i+\", rows=1, sort=\\\"id asc\\\", fl=\\\"id, body_t, field_i\\\"))\");\n      dataRequest.add(id, String.valueOf(i), \"body_t\", \"hello world \"+i, \"field_i\", Integer.toString(i));\n    }\n\n    workRequest.commit(cluster.getSolrClient(), \"workQueue\");\n    dataRequest.commit(cluster.getSolrClient(), \"mainCorpus\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/destination\";\n    TupleStream executorStream;\n    ModifiableSolrParams paramsLoc;\n\n    StreamFactory factory = new StreamFactory()\n        .withCollectionZkHost(\"workQueue\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"mainCorpus\", cluster.getZkServer().getZkAddress())\n        .withCollectionZkHost(\"destination\", cluster.getZkServer().getZkAddress())\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"update\", UpdateStream.class);\n\n    String executorExpression = \"executor(threads=3, search(workQueue, q=\\\"*:*\\\", fl=\\\"id, expr_s\\\", rows=1000, sort=\\\"id desc\\\"))\";\n    executorStream = factory.constructStream(executorExpression);\n\n    StreamContext context = new StreamContext();\n    SolrClientCache clientCache = new SolrClientCache();\n    context.setSolrClientCache(clientCache);\n    executorStream.setStreamContext(context);\n    getTuples(executorStream);\n    //Destination collection should now contain all the records in the main corpus.\n    cluster.getSolrClient().commit(\"destination\");\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", \"search(destination, q=\\\"*:*\\\", fl=\\\"id, body_t, field_i\\\", rows=1000, sort=\\\"field_i asc\\\")\");\n    paramsLoc.set(\"qt\",\"/stream\");\n\n    SolrStream solrStream = new SolrStream(url, paramsLoc);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 500);\n    for(int i=0; i<500; i++) {\n      Tuple tuple = tuples.get(i);\n      long ivalue = tuple.getLong(\"field_i\");\n      String body = tuple.getString(\"body_t\");\n      assertTrue(ivalue == i);\n      assertTrue(body.equals(\"hello world \"+i));\n    }\n\n    solrStream.close();\n    clientCache.close();\n    CollectionAdminRequest.deleteCollection(\"workQueue\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"mainCorpus\").process(cluster.getSolrClient());\n    CollectionAdminRequest.deleteCollection(\"destination\").process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["05a3c9b5f1dfb39879069eb1dac3ca104d3e4108"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8a1cae9aea470e88146567017129e8280d21ca76":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8a1cae9aea470e88146567017129e8280d21ca76"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8a1cae9aea470e88146567017129e8280d21ca76":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["05a3c9b5f1dfb39879069eb1dac3ca104d3e4108"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["8a1cae9aea470e88146567017129e8280d21ca76"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}