{"path":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheWithThreads#test2().mjava","commits":[{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheWithThreads#test2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesWithThreads#test2().mjava","sourceNew":"  public void test2() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = TestUtil.randomSimpleString(random);\n      } else {\n        s = TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedDocValuesField(\"stringdv\", br));\n      doc.add(new NumericDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.shutdown();\n    \n    final AtomicReader sr = getOnlySegmentReader(r);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final int NUM_THREADS = TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            final NumericDocValues docIDToID;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              docIDToID = sr.getNumericDocValues(\"id\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final SortedDocValues source;\n              source = stringDVDirect;\n              final BytesRef scratch = new BytesRef();\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                source.get(docID, scratch);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), scratch);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test2() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = TestUtil.randomSimpleString(random);\n      } else {\n        s = TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedDocValuesField(\"stringdv\", br));\n      doc.add(new NumericDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.shutdown();\n    \n    final AtomicReader sr = getOnlySegmentReader(r);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final int NUM_THREADS = TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            final NumericDocValues docIDToID;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              docIDToID = sr.getNumericDocValues(\"id\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final SortedDocValues source;\n              source = stringDVDirect;\n              final BytesRef scratch = new BytesRef();\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                source.get(docID, scratch);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), scratch);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheWithThreads#test2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesWithThreads#test2().mjava","sourceNew":"  public void test2() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = TestUtil.randomSimpleString(random);\n      } else {\n        s = TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedDocValuesField(\"stringdv\", br));\n      doc.add(new NumericDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.shutdown();\n    \n    final AtomicReader sr = getOnlySegmentReader(r);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final int NUM_THREADS = TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            final NumericDocValues docIDToID;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              docIDToID = sr.getNumericDocValues(\"id\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final SortedDocValues source;\n              source = stringDVDirect;\n              final BytesRef scratch = new BytesRef();\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                source.get(docID, scratch);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), scratch);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test2() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = TestUtil.randomSimpleString(random);\n      } else {\n        s = TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedDocValuesField(\"stringdv\", br));\n      doc.add(new NumericDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.shutdown();\n    \n    final AtomicReader sr = getOnlySegmentReader(r);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final int NUM_THREADS = TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            final NumericDocValues docIDToID;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              docIDToID = sr.getNumericDocValues(\"id\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final SortedDocValues source;\n              source = stringDVDirect;\n              final BytesRef scratch = new BytesRef();\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                source.get(docID, scratch);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), scratch);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheWithThreads#test2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesWithThreads#test2().mjava","sourceNew":"  public void test2() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = TestUtil.randomSimpleString(random);\n      } else {\n        s = TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedDocValuesField(\"stringdv\", br));\n      doc.add(new NumericDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.shutdown();\n    \n    final AtomicReader sr = getOnlySegmentReader(r);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final int NUM_THREADS = TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            final NumericDocValues docIDToID;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              docIDToID = sr.getNumericDocValues(\"id\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final SortedDocValues source;\n              source = stringDVDirect;\n              final BytesRef scratch = new BytesRef();\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                source.get(docID, scratch);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), scratch);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test2() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = TestUtil.randomSimpleString(random);\n      } else {\n        s = TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedDocValuesField(\"stringdv\", br));\n      doc.add(new NumericDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.shutdown();\n    \n    final AtomicReader sr = getOnlySegmentReader(r);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final int NUM_THREADS = TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            final NumericDocValues docIDToID;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              docIDToID = sr.getNumericDocValues(\"id\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final SortedDocValues source;\n              source = stringDVDirect;\n              final BytesRef scratch = new BytesRef();\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                source.get(docID, scratch);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), scratch);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheWithThreads#test2().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheWithThreads#test2().mjava","sourceNew":"  public void test2() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = TestUtil.randomSimpleString(random);\n      } else {\n        s = TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedDocValuesField(\"stringdv\", br));\n      doc.add(new NumericDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.shutdown();\n    \n    final AtomicReader sr = getOnlySegmentReader(r);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final int NUM_THREADS = TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            final NumericDocValues docIDToID;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              docIDToID = sr.getNumericDocValues(\"id\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final SortedDocValues source;\n              source = stringDVDirect;\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                BytesRef term = source.get(docID);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), term);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test2() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = TestUtil.randomSimpleString(random);\n      } else {\n        s = TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedDocValuesField(\"stringdv\", br));\n      doc.add(new NumericDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.shutdown();\n    \n    final AtomicReader sr = getOnlySegmentReader(r);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final int NUM_THREADS = TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            final NumericDocValues docIDToID;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              docIDToID = sr.getNumericDocValues(\"id\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final SortedDocValues source;\n              source = stringDVDirect;\n              final BytesRef scratch = new BytesRef();\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                source.get(docID, scratch);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), scratch);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheWithThreads#test2().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheWithThreads#test2().mjava","sourceNew":"  public void test2() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = TestUtil.randomSimpleString(random);\n      } else {\n        s = TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedDocValuesField(\"stringdv\", br));\n      doc.add(new NumericDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final AtomicReader sr = getOnlySegmentReader(r);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final int NUM_THREADS = TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            final NumericDocValues docIDToID;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              docIDToID = sr.getNumericDocValues(\"id\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final SortedDocValues source;\n              source = stringDVDirect;\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                BytesRef term = source.get(docID);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), term);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test2() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = TestUtil.randomSimpleString(random);\n      } else {\n        s = TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedDocValuesField(\"stringdv\", br));\n      doc.add(new NumericDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.shutdown();\n    \n    final AtomicReader sr = getOnlySegmentReader(r);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final int NUM_THREADS = TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            final NumericDocValues docIDToID;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              docIDToID = sr.getNumericDocValues(\"id\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final SortedDocValues source;\n              source = stringDVDirect;\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                BytesRef term = source.get(docID);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), term);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheWithThreads#test2().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheWithThreads#test2().mjava","sourceNew":"  public void test2() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = TestUtil.randomSimpleString(random);\n      } else {\n        s = TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedDocValuesField(\"stringdv\", br));\n      doc.add(new NumericDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final LeafReader sr = getOnlySegmentReader(r);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final int NUM_THREADS = TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            final NumericDocValues docIDToID;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              docIDToID = sr.getNumericDocValues(\"id\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final SortedDocValues source;\n              source = stringDVDirect;\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                BytesRef term = source.get(docID);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), term);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test2() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = TestUtil.randomSimpleString(random);\n      } else {\n        s = TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedDocValuesField(\"stringdv\", br));\n      doc.add(new NumericDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final AtomicReader sr = getOnlySegmentReader(r);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final int NUM_THREADS = TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            final NumericDocValues docIDToID;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              docIDToID = sr.getNumericDocValues(\"id\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final SortedDocValues source;\n              source = stringDVDirect;\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                BytesRef term = source.get(docID);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), term);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheWithThreads#test2().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheWithThreads#test2().mjava","sourceNew":"  public void test2() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = TestUtil.randomSimpleString(random);\n      } else {\n        s = TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedDocValuesField(\"stringdv\", br));\n      doc.add(new NumericDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final LeafReader sr = getOnlyLeafReader(r);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final int NUM_THREADS = TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            final NumericDocValues docIDToID;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              docIDToID = sr.getNumericDocValues(\"id\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final SortedDocValues source;\n              source = stringDVDirect;\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                BytesRef term = source.get(docID);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), term);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test2() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = TestUtil.randomSimpleString(random);\n      } else {\n        s = TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedDocValuesField(\"stringdv\", br));\n      doc.add(new NumericDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final LeafReader sr = getOnlySegmentReader(r);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final int NUM_THREADS = TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            final NumericDocValues docIDToID;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              docIDToID = sr.getNumericDocValues(\"id\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final SortedDocValues source;\n              source = stringDVDirect;\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                BytesRef term = source.get(docID);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), term);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheWithThreads#test2().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheWithThreads#test2().mjava","sourceNew":"  public void test2() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = TestUtil.randomSimpleString(random);\n      } else {\n        s = TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedDocValuesField(\"stringdv\", br));\n      doc.add(new NumericDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final LeafReader sr = getOnlyLeafReader(r);\n\n    final long END_TIME = System.nanoTime() + TimeUnit.NANOSECONDS.convert((TEST_NIGHTLY ? 30 : 1), TimeUnit.SECONDS);\n\n    final int NUM_THREADS = TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            final NumericDocValues docIDToID;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              docIDToID = sr.getNumericDocValues(\"id\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.nanoTime() < END_TIME) {\n              final SortedDocValues source;\n              source = stringDVDirect;\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                BytesRef term = source.get(docID);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), term);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test2() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = TestUtil.randomSimpleString(random);\n      } else {\n        s = TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedDocValuesField(\"stringdv\", br));\n      doc.add(new NumericDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final LeafReader sr = getOnlyLeafReader(r);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final int NUM_THREADS = TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            final NumericDocValues docIDToID;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              docIDToID = sr.getNumericDocValues(\"id\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final SortedDocValues source;\n              source = stringDVDirect;\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                BytesRef term = source.get(docID);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), term);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheWithThreads#test2().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheWithThreads#test2().mjava","sourceNew":"  public void test2() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = TestUtil.randomSimpleString(random);\n      } else {\n        s = TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedDocValuesField(\"stringdv\", br));\n      doc.add(new NumericDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final LeafReader sr = getOnlyLeafReader(r);\n\n    final long END_TIME = System.nanoTime() + TimeUnit.NANOSECONDS.convert((TEST_NIGHTLY ? 30 : 1), TimeUnit.SECONDS);\n\n    final int NUM_THREADS = TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            final NumericDocValues docIDToID;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              docIDToID = sr.getNumericDocValues(\"id\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.nanoTime() < END_TIME) {\n              final SortedDocValues source;\n              source = stringDVDirect;\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                BytesRef term = source.get(docID);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), term);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test2() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = TestUtil.randomSimpleString(random);\n      } else {\n        s = TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedDocValuesField(\"stringdv\", br));\n      doc.add(new NumericDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final LeafReader sr = getOnlyLeafReader(r);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final int NUM_THREADS = TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            final NumericDocValues docIDToID;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              docIDToID = sr.getNumericDocValues(\"id\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final SortedDocValues source;\n              source = stringDVDirect;\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                BytesRef term = source.get(docID);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), term);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheWithThreads#test2().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheWithThreads#test2().mjava","sourceNew":"  public void test2() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = TestUtil.randomSimpleString(random);\n      } else {\n        s = TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedDocValuesField(\"stringdv\", br));\n      doc.add(new NumericDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final LeafReader sr = getOnlyLeafReader(r);\n\n    final long END_TIME = System.nanoTime() + TimeUnit.NANOSECONDS.convert((TEST_NIGHTLY ? 30 : 1), TimeUnit.SECONDS);\n\n    final int NUM_THREADS = TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            final NumericDocValues docIDToID;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              docIDToID = sr.getNumericDocValues(\"id\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.nanoTime() < END_TIME) {\n              final SortedDocValues source;\n              source = stringDVDirect;\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                BytesRef term = source.get(docID);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), term);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test2() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = TestUtil.randomSimpleString(random);\n      } else {\n        s = TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedDocValuesField(\"stringdv\", br));\n      doc.add(new NumericDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final LeafReader sr = getOnlyLeafReader(r);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final int NUM_THREADS = TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            final NumericDocValues docIDToID;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              docIDToID = sr.getNumericDocValues(\"id\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final SortedDocValues source;\n              source = stringDVDirect;\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                BytesRef term = source.get(docID);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), term);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheWithThreads#test2().mjava","sourceNew":null,"sourceOld":"  public void test2() throws Exception {\n    Random random = random();\n    final int NUM_DOCS = atLeast(100);\n    final Directory dir = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    final boolean allowDups = random.nextBoolean();\n    final Set<String> seen = new HashSet<>();\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_DOCS=\" + NUM_DOCS + \" allowDups=\" + allowDups);\n    }\n    int numDocs = 0;\n    final List<BytesRef> docValues = new ArrayList<>();\n\n    // TODO: deletions\n    while (numDocs < NUM_DOCS) {\n      final String s;\n      if (random.nextBoolean()) {\n        s = TestUtil.randomSimpleString(random);\n      } else {\n        s = TestUtil.randomUnicodeString(random);\n      }\n      final BytesRef br = new BytesRef(s);\n\n      if (!allowDups) {\n        if (seen.contains(s)) {\n          continue;\n        }\n        seen.add(s);\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + numDocs + \": s=\" + s);\n      }\n      \n      final Document doc = new Document();\n      doc.add(new SortedDocValuesField(\"stringdv\", br));\n      doc.add(new NumericDocValuesField(\"id\", numDocs));\n      docValues.add(br);\n      writer.addDocument(doc);\n      numDocs++;\n\n      if (random.nextInt(40) == 17) {\n        // force flush\n        writer.getReader().close();\n      }\n    }\n\n    writer.forceMerge(1);\n    final DirectoryReader r = writer.getReader();\n    writer.close();\n    \n    final LeafReader sr = getOnlyLeafReader(r);\n\n    final long END_TIME = System.currentTimeMillis() + (TEST_NIGHTLY ? 30 : 1);\n\n    final int NUM_THREADS = TestUtil.nextInt(random(), 1, 10);\n    Thread[] threads = new Thread[NUM_THREADS];\n    for(int thread=0;thread<NUM_THREADS;thread++) {\n      threads[thread] = new Thread() {\n          @Override\n          public void run() {\n            Random random = random();            \n            final SortedDocValues stringDVDirect;\n            final NumericDocValues docIDToID;\n            try {\n              stringDVDirect = sr.getSortedDocValues(\"stringdv\");\n              docIDToID = sr.getNumericDocValues(\"id\");\n              assertNotNull(stringDVDirect);\n            } catch (IOException ioe) {\n              throw new RuntimeException(ioe);\n            }\n            while(System.currentTimeMillis() < END_TIME) {\n              final SortedDocValues source;\n              source = stringDVDirect;\n\n              for(int iter=0;iter<100;iter++) {\n                final int docID = random.nextInt(sr.maxDoc());\n                BytesRef term = source.get(docID);\n                assertEquals(docValues.get((int) docIDToID.get(docID)), term);\n              }\n            }\n          }\n        };\n      threads[thread].start();\n    }\n\n    for(Thread thread : threads) {\n      thread.join();\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"83870855d82aba6819217abeff5a40779dbb28b4":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","0e121d43b5a10f2df530f406f935102656e9c4e8"],"56572ec06f1407c066d6b7399413178b33176cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","93dd449115a9247533e44bab47e8429e5dccbc6d"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","0e121d43b5a10f2df530f406f935102656e9c4e8"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e121d43b5a10f2df530f406f935102656e9c4e8"]},"commit2Childs":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"56572ec06f1407c066d6b7399413178b33176cd8":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","56572ec06f1407c066d6b7399413178b33176cd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8","93dd449115a9247533e44bab47e8429e5dccbc6d"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","56572ec06f1407c066d6b7399413178b33176cd8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}