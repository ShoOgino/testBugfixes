{"path":"src/test/org/apache/lucene/search/function/TestCustomScoreQuery#doTestCustomScore(String,FieldScoreQuery.Type,double).mjava","commits":[{"id":"3f74570911bfdb9f7b01948745dcd67c69676c0e","date":1181060975,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/function/TestCustomScoreQuery#doTestCustomScore(String,FieldScoreQuery.Type,double).mjava","pathOld":"/dev/null","sourceNew":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore (String field, FieldScoreQuery.Type tp, double dboost) throws CorruptIndexException, Exception {\n    float boost = (float) dboost;\n    IndexSearcher s = new IndexSearcher(dir);\n    FieldScoreQuery qValSrc = new FieldScoreQuery(field,tp); // a query that would score by the field\n    QueryParser qp = new QueryParser(TEXT_FIELD,anlzr); \n    String qtxt = \"bleeding person chain knowledge\"; // from the doc texts in FunctionQuerySetup.\n    \n    // regular (boolean) query.\n    Query q1 = qp.parse(qtxt); \n    log(q1);\n    \n    // custom query, that should score the same as q1.\n    CustomScoreQuery q2CustomNeutral = new CustomScoreQuery(q1);\n    q2CustomNeutral.setBoost(boost);\n    log(q2CustomNeutral);\n    \n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1,qValSrc);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n    \n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomScoreQuery(q1,qValSrc) {\n      /*(non-Javadoc) @see org.apache.lucene.search.function.CustomScoreQuery#name() */\n      public String name() {\n        return \"customAdd\";\n      }\n      /*(non-Javadoc) @see org.apache.lucene.search.function.CustomScoreQuery#customScore(int, float, float) */\n      public float customScore(int doc, float subQueryScore, float valSrcScore) {\n        return subQueryScore + valSrcScore;\n      }\n      /* (non-Javadoc)@see org.apache.lucene.search.function.CustomScoreQuery#customExplain(int, org.apache.lucene.search.Explanation, org.apache.lucene.search.Explanation)*/\n      public Explanation customExplain(int doc, Explanation subQueryExpl, Explanation valSrcExpl) {\n        float valSrcScore = valSrcExpl==null ? 0 : valSrcExpl.getValue();\n        Explanation exp = new Explanation( valSrcScore + subQueryExpl.getValue(), \"custom score: sum of:\");\n        exp.addDetail(subQueryExpl);\n        if (valSrcExpl != null) {\n          exp.addDetail(valSrcExpl);\n        }\n        return exp;      \n      } \n    };\n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomScoreQuery(q1,qValSrc) {\n      /*(non-Javadoc) @see org.apache.lucene.search.function.CustomScoreQuery#name() */\n      public String name() {\n        return \"customMulAdd\";\n      }\n      /*(non-Javadoc) @see org.apache.lucene.search.function.CustomScoreQuery#customScore(int, float, float) */\n      public float customScore(int doc, float subQueryScore, float valSrcScore) {\n        return (1 + subQueryScore) * valSrcScore;\n      } \n      /* (non-Javadoc)@see org.apache.lucene.search.function.CustomScoreQuery#customExplain(int, org.apache.lucene.search.Explanation, org.apache.lucene.search.Explanation)*/\n      public Explanation customExplain(int doc, Explanation subQueryExpl, Explanation valSrcExpl) {\n        Explanation exp = new Explanation(1 + subQueryExpl.getValue(), \"sum of:\");\n        exp.addDetail(subQueryExpl);\n        exp.addDetail(new Explanation(1,\"const 1\"));\n        if (valSrcExpl == null) {\n          exp.setDescription(\"CustomMulAdd, sum of:\");\n          return exp;\n        }\n        Explanation exp2 = new Explanation(valSrcExpl.getValue() * exp.getValue(), \"custom score: product of:\");\n        exp2.addDetail(valSrcExpl);\n        exp2.addDetail(exp);\n        return exp2;      \n      } \n    };\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1,null,1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral,null,1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul,null,1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd,null,1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd,null,1000);\n    \n    // put results in map so we can verify the scores although they have changed\n    HashMap h1 = topDocsToMap(td1);\n    HashMap h2CustomNeutral = topDocsToMap(td2CustomNeutral);\n    HashMap h3CustomMul = topDocsToMap(td3CustomMul);\n    HashMap h4CustomAdd = topDocsToMap(td4CustomAdd);\n    HashMap h5CustomMulAdd = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["2a10390f57e4f8d3ada1cb03f9d43ce1bd13ebd7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"89fe79450a321df64750e98df6442d2c4d30da52","date":1197527307,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/function/TestCustomScoreQuery#doTestCustomScore(String,FieldScoreQuery.Type,double).mjava","pathOld":"src/test/org/apache/lucene/search/function/TestCustomScoreQuery#doTestCustomScore(String,FieldScoreQuery.Type,double).mjava","sourceNew":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore (String field, FieldScoreQuery.Type tp, double dboost) throws CorruptIndexException, Exception {\n    float boost = (float) dboost;\n    IndexSearcher s = new IndexSearcher(dir);\n    FieldScoreQuery qValSrc = new FieldScoreQuery(field,tp); // a query that would score by the field\n    QueryParser qp = new QueryParser(TEXT_FIELD,anlzr); \n    String qtxt = \"first aid text\"; // from the doc texts in FunctionQuerySetup.\n    \n    // regular (boolean) query.\n    Query q1 = qp.parse(qtxt); \n    log(q1);\n    \n    // custom query, that should score the same as q1.\n    CustomScoreQuery q2CustomNeutral = new CustomScoreQuery(q1);\n    q2CustomNeutral.setBoost(boost);\n    log(q2CustomNeutral);\n    \n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1,qValSrc);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n    \n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1,qValSrc); \n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1,qValSrc,qValSrc);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1,null,1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral,null,1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul,null,1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd,null,1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd,null,1000);\n    \n    // put results in map so we can verify the scores although they have changed\n    HashMap h1 = topDocsToMap(td1);\n    HashMap h2CustomNeutral = topDocsToMap(td2CustomNeutral);\n    HashMap h3CustomMul = topDocsToMap(td3CustomMul);\n    HashMap h4CustomAdd = topDocsToMap(td4CustomAdd);\n    HashMap h5CustomMulAdd = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n  }\n\n","sourceOld":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore (String field, FieldScoreQuery.Type tp, double dboost) throws CorruptIndexException, Exception {\n    float boost = (float) dboost;\n    IndexSearcher s = new IndexSearcher(dir);\n    FieldScoreQuery qValSrc = new FieldScoreQuery(field,tp); // a query that would score by the field\n    QueryParser qp = new QueryParser(TEXT_FIELD,anlzr); \n    String qtxt = \"bleeding person chain knowledge\"; // from the doc texts in FunctionQuerySetup.\n    \n    // regular (boolean) query.\n    Query q1 = qp.parse(qtxt); \n    log(q1);\n    \n    // custom query, that should score the same as q1.\n    CustomScoreQuery q2CustomNeutral = new CustomScoreQuery(q1);\n    q2CustomNeutral.setBoost(boost);\n    log(q2CustomNeutral);\n    \n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1,qValSrc);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n    \n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomScoreQuery(q1,qValSrc) {\n      /*(non-Javadoc) @see org.apache.lucene.search.function.CustomScoreQuery#name() */\n      public String name() {\n        return \"customAdd\";\n      }\n      /*(non-Javadoc) @see org.apache.lucene.search.function.CustomScoreQuery#customScore(int, float, float) */\n      public float customScore(int doc, float subQueryScore, float valSrcScore) {\n        return subQueryScore + valSrcScore;\n      }\n      /* (non-Javadoc)@see org.apache.lucene.search.function.CustomScoreQuery#customExplain(int, org.apache.lucene.search.Explanation, org.apache.lucene.search.Explanation)*/\n      public Explanation customExplain(int doc, Explanation subQueryExpl, Explanation valSrcExpl) {\n        float valSrcScore = valSrcExpl==null ? 0 : valSrcExpl.getValue();\n        Explanation exp = new Explanation( valSrcScore + subQueryExpl.getValue(), \"custom score: sum of:\");\n        exp.addDetail(subQueryExpl);\n        if (valSrcExpl != null) {\n          exp.addDetail(valSrcExpl);\n        }\n        return exp;      \n      } \n    };\n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomScoreQuery(q1,qValSrc) {\n      /*(non-Javadoc) @see org.apache.lucene.search.function.CustomScoreQuery#name() */\n      public String name() {\n        return \"customMulAdd\";\n      }\n      /*(non-Javadoc) @see org.apache.lucene.search.function.CustomScoreQuery#customScore(int, float, float) */\n      public float customScore(int doc, float subQueryScore, float valSrcScore) {\n        return (1 + subQueryScore) * valSrcScore;\n      } \n      /* (non-Javadoc)@see org.apache.lucene.search.function.CustomScoreQuery#customExplain(int, org.apache.lucene.search.Explanation, org.apache.lucene.search.Explanation)*/\n      public Explanation customExplain(int doc, Explanation subQueryExpl, Explanation valSrcExpl) {\n        Explanation exp = new Explanation(1 + subQueryExpl.getValue(), \"sum of:\");\n        exp.addDetail(subQueryExpl);\n        exp.addDetail(new Explanation(1,\"const 1\"));\n        if (valSrcExpl == null) {\n          exp.setDescription(\"CustomMulAdd, sum of:\");\n          return exp;\n        }\n        Explanation exp2 = new Explanation(valSrcExpl.getValue() * exp.getValue(), \"custom score: product of:\");\n        exp2.addDetail(valSrcExpl);\n        exp2.addDetail(exp);\n        return exp2;      \n      } \n    };\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1,null,1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral,null,1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul,null,1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd,null,1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd,null,1000);\n    \n    // put results in map so we can verify the scores although they have changed\n    HashMap h1 = topDocsToMap(td1);\n    HashMap h2CustomNeutral = topDocsToMap(td2CustomNeutral);\n    HashMap h3CustomMul = topDocsToMap(td3CustomMul);\n    HashMap h4CustomAdd = topDocsToMap(td4CustomAdd);\n    HashMap h5CustomMulAdd = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/function/TestCustomScoreQuery#doTestCustomScore(String,FieldScoreQuery.Type,double).mjava","pathOld":"src/test/org/apache/lucene/search/function/TestCustomScoreQuery#doTestCustomScore(String,FieldScoreQuery.Type,double).mjava","sourceNew":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore (String field, FieldScoreQuery.Type tp, double dboost) throws CorruptIndexException, Exception {\n    float boost = (float) dboost;\n    IndexSearcher s = new IndexSearcher(dir, true);\n    FieldScoreQuery qValSrc = new FieldScoreQuery(field,tp); // a query that would score by the field\n    QueryParser qp = new QueryParser(TEXT_FIELD,anlzr); \n    String qtxt = \"first aid text\"; // from the doc texts in FunctionQuerySetup.\n    \n    // regular (boolean) query.\n    Query q1 = qp.parse(qtxt); \n    log(q1);\n    \n    // custom query, that should score the same as q1.\n    CustomScoreQuery q2CustomNeutral = new CustomScoreQuery(q1);\n    q2CustomNeutral.setBoost(boost);\n    log(q2CustomNeutral);\n    \n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1,qValSrc);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n    \n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1,qValSrc); \n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1,qValSrc,qValSrc);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1,null,1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral,null,1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul,null,1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd,null,1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd,null,1000);\n    \n    // put results in map so we can verify the scores although they have changed\n    HashMap h1 = topDocsToMap(td1);\n    HashMap h2CustomNeutral = topDocsToMap(td2CustomNeutral);\n    HashMap h3CustomMul = topDocsToMap(td3CustomMul);\n    HashMap h4CustomAdd = topDocsToMap(td4CustomAdd);\n    HashMap h5CustomMulAdd = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n  }\n\n","sourceOld":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore (String field, FieldScoreQuery.Type tp, double dboost) throws CorruptIndexException, Exception {\n    float boost = (float) dboost;\n    IndexSearcher s = new IndexSearcher(dir);\n    FieldScoreQuery qValSrc = new FieldScoreQuery(field,tp); // a query that would score by the field\n    QueryParser qp = new QueryParser(TEXT_FIELD,anlzr); \n    String qtxt = \"first aid text\"; // from the doc texts in FunctionQuerySetup.\n    \n    // regular (boolean) query.\n    Query q1 = qp.parse(qtxt); \n    log(q1);\n    \n    // custom query, that should score the same as q1.\n    CustomScoreQuery q2CustomNeutral = new CustomScoreQuery(q1);\n    q2CustomNeutral.setBoost(boost);\n    log(q2CustomNeutral);\n    \n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1,qValSrc);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n    \n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1,qValSrc); \n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1,qValSrc,qValSrc);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1,null,1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral,null,1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul,null,1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd,null,1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd,null,1000);\n    \n    // put results in map so we can verify the scores although they have changed\n    HashMap h1 = topDocsToMap(td1);\n    HashMap h2CustomNeutral = topDocsToMap(td2CustomNeutral);\n    HashMap h3CustomMul = topDocsToMap(td3CustomMul);\n    HashMap h4CustomAdd = topDocsToMap(td4CustomAdd);\n    HashMap h5CustomMulAdd = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/function/TestCustomScoreQuery#doTestCustomScore(String,FieldScoreQuery.Type,double).mjava","pathOld":"src/test/org/apache/lucene/search/function/TestCustomScoreQuery#doTestCustomScore(String,FieldScoreQuery.Type,double).mjava","sourceNew":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore (String field, FieldScoreQuery.Type tp, double dboost) throws CorruptIndexException, Exception {\n    float boost = (float) dboost;\n    IndexSearcher s = new IndexSearcher(dir, true);\n    FieldScoreQuery qValSrc = new FieldScoreQuery(field,tp); // a query that would score by the field\n    QueryParser qp = new QueryParser(TEXT_FIELD,anlzr); \n    String qtxt = \"first aid text\"; // from the doc texts in FunctionQuerySetup.\n    \n    // regular (boolean) query.\n    Query q1 = qp.parse(qtxt); \n    log(q1);\n    \n    // custom query, that should score the same as q1.\n    CustomScoreQuery q2CustomNeutral = new CustomScoreQuery(q1);\n    q2CustomNeutral.setBoost(boost);\n    log(q2CustomNeutral);\n    \n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1,qValSrc);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n    \n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1,qValSrc); \n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1,qValSrc,qValSrc);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1,null,1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral,null,1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul,null,1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd,null,1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd,null,1000);\n    \n    // put results in map so we can verify the scores although they have changed\n    HashMap h1 = topDocsToMap(td1);\n    HashMap h2CustomNeutral = topDocsToMap(td2CustomNeutral);\n    HashMap h3CustomMul = topDocsToMap(td3CustomMul);\n    HashMap h4CustomAdd = topDocsToMap(td4CustomAdd);\n    HashMap h5CustomMulAdd = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n  }\n\n","sourceOld":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore (String field, FieldScoreQuery.Type tp, double dboost) throws CorruptIndexException, Exception {\n    float boost = (float) dboost;\n    IndexSearcher s = new IndexSearcher(dir);\n    FieldScoreQuery qValSrc = new FieldScoreQuery(field,tp); // a query that would score by the field\n    QueryParser qp = new QueryParser(TEXT_FIELD,anlzr); \n    String qtxt = \"first aid text\"; // from the doc texts in FunctionQuerySetup.\n    \n    // regular (boolean) query.\n    Query q1 = qp.parse(qtxt); \n    log(q1);\n    \n    // custom query, that should score the same as q1.\n    CustomScoreQuery q2CustomNeutral = new CustomScoreQuery(q1);\n    q2CustomNeutral.setBoost(boost);\n    log(q2CustomNeutral);\n    \n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1,qValSrc);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n    \n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1,qValSrc); \n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1,qValSrc,qValSrc);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1,null,1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral,null,1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul,null,1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd,null,1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd,null,1000);\n    \n    // put results in map so we can verify the scores although they have changed\n    HashMap h1 = topDocsToMap(td1);\n    HashMap h2CustomNeutral = topDocsToMap(td2CustomNeutral);\n    HashMap h3CustomMul = topDocsToMap(td3CustomMul);\n    HashMap h4CustomAdd = topDocsToMap(td4CustomAdd);\n    HashMap h5CustomMulAdd = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/function/TestCustomScoreQuery#doTestCustomScore(String,FieldScoreQuery.Type,double).mjava","pathOld":"src/test/org/apache/lucene/search/function/TestCustomScoreQuery#doTestCustomScore(String,FieldScoreQuery.Type,double).mjava","sourceNew":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore (String field, FieldScoreQuery.Type tp, double dboost) throws CorruptIndexException, Exception {\n    float boost = (float) dboost;\n    IndexSearcher s = new IndexSearcher(dir, true);\n    FieldScoreQuery qValSrc = new FieldScoreQuery(field,tp); // a query that would score by the field\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, TEXT_FIELD,anlzr); \n    String qtxt = \"first aid text\"; // from the doc texts in FunctionQuerySetup.\n    \n    // regular (boolean) query.\n    Query q1 = qp.parse(qtxt); \n    log(q1);\n    \n    // custom query, that should score the same as q1.\n    CustomScoreQuery q2CustomNeutral = new CustomScoreQuery(q1);\n    q2CustomNeutral.setBoost(boost);\n    log(q2CustomNeutral);\n    \n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1,qValSrc);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n    \n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1,qValSrc); \n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1,qValSrc,qValSrc);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1,null,1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral,null,1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul,null,1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd,null,1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd,null,1000);\n    \n    // put results in map so we can verify the scores although they have changed\n    HashMap h1 = topDocsToMap(td1);\n    HashMap h2CustomNeutral = topDocsToMap(td2CustomNeutral);\n    HashMap h3CustomMul = topDocsToMap(td3CustomMul);\n    HashMap h4CustomAdd = topDocsToMap(td4CustomAdd);\n    HashMap h5CustomMulAdd = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n  }\n\n","sourceOld":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore (String field, FieldScoreQuery.Type tp, double dboost) throws CorruptIndexException, Exception {\n    float boost = (float) dboost;\n    IndexSearcher s = new IndexSearcher(dir, true);\n    FieldScoreQuery qValSrc = new FieldScoreQuery(field,tp); // a query that would score by the field\n    QueryParser qp = new QueryParser(TEXT_FIELD,anlzr); \n    String qtxt = \"first aid text\"; // from the doc texts in FunctionQuerySetup.\n    \n    // regular (boolean) query.\n    Query q1 = qp.parse(qtxt); \n    log(q1);\n    \n    // custom query, that should score the same as q1.\n    CustomScoreQuery q2CustomNeutral = new CustomScoreQuery(q1);\n    q2CustomNeutral.setBoost(boost);\n    log(q2CustomNeutral);\n    \n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1,qValSrc);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n    \n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1,qValSrc); \n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1,qValSrc,qValSrc);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1,null,1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral,null,1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul,null,1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd,null,1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd,null,1000);\n    \n    // put results in map so we can verify the scores although they have changed\n    HashMap h1 = topDocsToMap(td1);\n    HashMap h2CustomNeutral = topDocsToMap(td2CustomNeutral);\n    HashMap h3CustomMul = topDocsToMap(td3CustomMul);\n    HashMap h4CustomAdd = topDocsToMap(td4CustomAdd);\n    HashMap h5CustomMulAdd = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/function/TestCustomScoreQuery#doTestCustomScore(String,FieldScoreQuery.Type,double).mjava","pathOld":"src/test/org/apache/lucene/search/function/TestCustomScoreQuery#doTestCustomScore(String,FieldScoreQuery.Type,double).mjava","sourceNew":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore (String field, FieldScoreQuery.Type tp, double dboost) throws CorruptIndexException, Exception {\n    float boost = (float) dboost;\n    IndexSearcher s = new IndexSearcher(dir, true);\n    FieldScoreQuery qValSrc = new FieldScoreQuery(field,tp); // a query that would score by the field\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, TEXT_FIELD,anlzr); \n    String qtxt = \"first aid text\"; // from the doc texts in FunctionQuerySetup.\n    \n    // regular (boolean) query.\n    Query q1 = qp.parse(qtxt); \n    log(q1);\n    \n    // custom query, that should score the same as q1.\n    CustomScoreQuery q2CustomNeutral = new CustomScoreQuery(q1);\n    q2CustomNeutral.setBoost(boost);\n    log(q2CustomNeutral);\n    \n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1,qValSrc);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n    \n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1,qValSrc); \n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1,qValSrc,qValSrc);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1,null,1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral,null,1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul,null,1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd,null,1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd,null,1000);\n    \n    // put results in map so we can verify the scores although they have changed\n    HashMap<Integer,Float> h1               = topDocsToMap(td1);\n    HashMap<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    HashMap<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    HashMap<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    HashMap<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n  }\n\n","sourceOld":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore (String field, FieldScoreQuery.Type tp, double dboost) throws CorruptIndexException, Exception {\n    float boost = (float) dboost;\n    IndexSearcher s = new IndexSearcher(dir, true);\n    FieldScoreQuery qValSrc = new FieldScoreQuery(field,tp); // a query that would score by the field\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, TEXT_FIELD,anlzr); \n    String qtxt = \"first aid text\"; // from the doc texts in FunctionQuerySetup.\n    \n    // regular (boolean) query.\n    Query q1 = qp.parse(qtxt); \n    log(q1);\n    \n    // custom query, that should score the same as q1.\n    CustomScoreQuery q2CustomNeutral = new CustomScoreQuery(q1);\n    q2CustomNeutral.setBoost(boost);\n    log(q2CustomNeutral);\n    \n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1,qValSrc);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n    \n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1,qValSrc); \n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1,qValSrc,qValSrc);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1,null,1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral,null,1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul,null,1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd,null,1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd,null,1000);\n    \n    // put results in map so we can verify the scores although they have changed\n    HashMap h1 = topDocsToMap(td1);\n    HashMap h2CustomNeutral = topDocsToMap(td2CustomNeutral);\n    HashMap h3CustomMul = topDocsToMap(td3CustomMul);\n    HashMap h4CustomAdd = topDocsToMap(td4CustomAdd);\n    HashMap h5CustomMulAdd = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"777b7ef341decfee8757f492d8a154637cd7a384","date":1260037647,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/function/TestCustomScoreQuery#doTestCustomScore(String,FieldScoreQuery.Type,double).mjava","pathOld":"src/test/org/apache/lucene/search/function/TestCustomScoreQuery#doTestCustomScore(String,FieldScoreQuery.Type,double).mjava","sourceNew":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(String field, FieldScoreQuery.Type tp, double dboost) throws Exception, ParseException {\n    float boost = (float) dboost;\n    IndexSearcher s = new IndexSearcher(dir, true);\n    FieldScoreQuery qValSrc = new FieldScoreQuery(field, tp); // a query that would score by the field\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, TEXT_FIELD, anlzr);\n    String qtxt = \"first aid text\"; // from the doc texts in FunctionQuerySetup.\n\n    // regular (boolean) query.\n    Query q1 = qp.parse(qtxt);\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    Query q2CustomNeutral = new CustomScoreQuery(q1);\n    q2CustomNeutral.setBoost(boost);\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1, qValSrc);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1, qValSrc);\n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1, qValSrc, qValSrc);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, null, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, null, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, null, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, null, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, null, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n  }\n\n","sourceOld":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore (String field, FieldScoreQuery.Type tp, double dboost) throws CorruptIndexException, Exception {\n    float boost = (float) dboost;\n    IndexSearcher s = new IndexSearcher(dir, true);\n    FieldScoreQuery qValSrc = new FieldScoreQuery(field,tp); // a query that would score by the field\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, TEXT_FIELD,anlzr); \n    String qtxt = \"first aid text\"; // from the doc texts in FunctionQuerySetup.\n    \n    // regular (boolean) query.\n    Query q1 = qp.parse(qtxt); \n    log(q1);\n    \n    // custom query, that should score the same as q1.\n    CustomScoreQuery q2CustomNeutral = new CustomScoreQuery(q1);\n    q2CustomNeutral.setBoost(boost);\n    log(q2CustomNeutral);\n    \n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1,qValSrc);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n    \n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1,qValSrc); \n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1,qValSrc,qValSrc);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1,null,1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral,null,1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul,null,1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd,null,1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd,null,1000);\n    \n    // put results in map so we can verify the scores although they have changed\n    HashMap<Integer,Float> h1               = topDocsToMap(td1);\n    HashMap<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    HashMap<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    HashMap<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    HashMap<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n  }\n\n","bugFix":null,"bugIntro":["2a10390f57e4f8d3ada1cb03f9d43ce1bd13ebd7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/function/TestCustomScoreQuery#doTestCustomScore(String,FieldScoreQuery.Type,double).mjava","pathOld":"src/test/org/apache/lucene/search/function/TestCustomScoreQuery#doTestCustomScore(String,FieldScoreQuery.Type,double).mjava","sourceNew":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(String field, FieldScoreQuery.Type tp, double dboost) throws Exception, ParseException {\n    float boost = (float) dboost;\n    IndexSearcher s = new IndexSearcher(dir, true);\n    FieldScoreQuery qValSrc = new FieldScoreQuery(field, tp); // a query that would score by the field\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD, anlzr);\n    String qtxt = \"first aid text\"; // from the doc texts in FunctionQuerySetup.\n\n    // regular (boolean) query.\n    Query q1 = qp.parse(qtxt);\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    Query q2CustomNeutral = new CustomScoreQuery(q1);\n    q2CustomNeutral.setBoost(boost);\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1, qValSrc);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1, qValSrc);\n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1, qValSrc, qValSrc);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, null, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, null, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, null, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, null, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, null, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n  }\n\n","sourceOld":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(String field, FieldScoreQuery.Type tp, double dboost) throws Exception, ParseException {\n    float boost = (float) dboost;\n    IndexSearcher s = new IndexSearcher(dir, true);\n    FieldScoreQuery qValSrc = new FieldScoreQuery(field, tp); // a query that would score by the field\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, TEXT_FIELD, anlzr);\n    String qtxt = \"first aid text\"; // from the doc texts in FunctionQuerySetup.\n\n    // regular (boolean) query.\n    Query q1 = qp.parse(qtxt);\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    Query q2CustomNeutral = new CustomScoreQuery(q1);\n    q2CustomNeutral.setBoost(boost);\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1, qValSrc);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1, qValSrc);\n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1, qValSrc, qValSrc);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, null, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, null, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, null, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, null, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, null, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/function/TestCustomScoreQuery#doTestCustomScore(String,FieldScoreQuery.Type,double).mjava","pathOld":"src/test/org/apache/lucene/search/function/TestCustomScoreQuery#doTestCustomScore(String,FieldScoreQuery.Type,double).mjava","sourceNew":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(String field, FieldScoreQuery.Type tp, double dboost) throws Exception, ParseException {\n    float boost = (float) dboost;\n    IndexSearcher s = new IndexSearcher(dir, true);\n    FieldScoreQuery qValSrc = new FieldScoreQuery(field, tp); // a query that would score by the field\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD, anlzr);\n    String qtxt = \"first aid text\"; // from the doc texts in FunctionQuerySetup.\n\n    // regular (boolean) query.\n    Query q1 = qp.parse(qtxt);\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    Query q2CustomNeutral = new CustomScoreQuery(q1);\n    q2CustomNeutral.setBoost(boost);\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1, qValSrc);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1, qValSrc);\n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1, qValSrc, qValSrc);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, null, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, null, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, null, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, null, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, null, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n  }\n\n","sourceOld":"  // Test that FieldScoreQuery returns docs with expected score.\n  private void doTestCustomScore(String field, FieldScoreQuery.Type tp, double dboost) throws Exception, ParseException {\n    float boost = (float) dboost;\n    IndexSearcher s = new IndexSearcher(dir, true);\n    FieldScoreQuery qValSrc = new FieldScoreQuery(field, tp); // a query that would score by the field\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD, anlzr);\n    String qtxt = \"first aid text\"; // from the doc texts in FunctionQuerySetup.\n\n    // regular (boolean) query.\n    Query q1 = qp.parse(qtxt);\n    log(q1);\n\n    // custom query, that should score the same as q1.\n    Query q2CustomNeutral = new CustomScoreQuery(q1);\n    q2CustomNeutral.setBoost(boost);\n    log(q2CustomNeutral);\n\n    // custom query, that should (by default) multiply the scores of q1 by that of the field\n    CustomScoreQuery q3CustomMul = new CustomScoreQuery(q1, qValSrc);\n    q3CustomMul.setStrict(true);\n    q3CustomMul.setBoost(boost);\n    log(q3CustomMul);\n\n    // custom query, that should add the scores of q1 to that of the field\n    CustomScoreQuery q4CustomAdd = new CustomAddQuery(q1, qValSrc);\n    q4CustomAdd.setStrict(true);\n    q4CustomAdd.setBoost(boost);\n    log(q4CustomAdd);\n\n    // custom query, that multiplies and adds the field score to that of q1\n    CustomScoreQuery q5CustomMulAdd = new CustomMulAddQuery(q1, qValSrc, qValSrc);\n    q5CustomMulAdd.setStrict(true);\n    q5CustomMulAdd.setBoost(boost);\n    log(q5CustomMulAdd);\n\n    // do al the searches \n    TopDocs td1 = s.search(q1, null, 1000);\n    TopDocs td2CustomNeutral = s.search(q2CustomNeutral, null, 1000);\n    TopDocs td3CustomMul = s.search(q3CustomMul, null, 1000);\n    TopDocs td4CustomAdd = s.search(q4CustomAdd, null, 1000);\n    TopDocs td5CustomMulAdd = s.search(q5CustomMulAdd, null, 1000);\n\n    // put results in map so we can verify the scores although they have changed\n    Map<Integer,Float> h1               = topDocsToMap(td1);\n    Map<Integer,Float> h2CustomNeutral  = topDocsToMap(td2CustomNeutral);\n    Map<Integer,Float> h3CustomMul      = topDocsToMap(td3CustomMul);\n    Map<Integer,Float> h4CustomAdd      = topDocsToMap(td4CustomAdd);\n    Map<Integer,Float> h5CustomMulAdd   = topDocsToMap(td5CustomMulAdd);\n    \n    verifyResults(boost, s, \n        h1, h2CustomNeutral, h3CustomMul, h4CustomAdd, h5CustomMulAdd,\n        q1, q2CustomNeutral, q3CustomMul, q4CustomAdd, q5CustomMulAdd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["89fe79450a321df64750e98df6442d2c4d30da52"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["777b7ef341decfee8757f492d8a154637cd7a384"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["89fe79450a321df64750e98df6442d2c4d30da52","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"3f74570911bfdb9f7b01948745dcd67c69676c0e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"777b7ef341decfee8757f492d8a154637cd7a384":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"89fe79450a321df64750e98df6442d2c4d30da52":["3f74570911bfdb9f7b01948745dcd67c69676c0e"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["ba1116b3450a9c1642c89445d131b37344055245"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"ba1116b3450a9c1642c89445d131b37344055245":["0a046c0c310bc77931fc8441bd920053b607dd14"]},"commit2Childs":{"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3f74570911bfdb9f7b01948745dcd67c69676c0e"],"0a046c0c310bc77931fc8441bd920053b607dd14":["ba1116b3450a9c1642c89445d131b37344055245"],"3f74570911bfdb9f7b01948745dcd67c69676c0e":["89fe79450a321df64750e98df6442d2c4d30da52"],"89fe79450a321df64750e98df6442d2c4d30da52":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"777b7ef341decfee8757f492d8a154637cd7a384":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["777b7ef341decfee8757f492d8a154637cd7a384"],"ba1116b3450a9c1642c89445d131b37344055245":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}