{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testSimple().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testSimple().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testSimple().mjava","sourceNew":"  /**\n   * Strait forward test: Adding specific documents with specific facets and\n   * counting them in the most basic form.\n   */\n  @Test\n  public void testSimple() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n\n      // do different facet counts and compare to control\n      FacetSearchParams sParams = getFacetedSearchParams(partitionSize);\n      \n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\"), 100));\n      CountFacetRequest cfra = new CountFacetRequest(new CategoryPath(\"a\"), 100);\n      cfra.setDepth(3);\n      sParams.addFacetRequest(cfra);\n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\", \"b\"), 100));\n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\", \"b\", \"1\"), 100));\n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\", \"c\"), 100));\n\n      FacetsCollector fc = new FacetsCollector(sParams, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      long start = System.currentTimeMillis();\n      List<FacetResult> facetResults = fc.getFacetResults();\n      long end = System.currentTimeMillis();\n\n      if (VERBOSE) {\n        System.out.println(\"Time: \" + (end - start));\n      }\n\n      FacetResult fr = facetResults.get(0);\n      FacetResultNode parentRes = fr.getFacetResultNode();\n      assertEquals(13.0, parentRes.getValue(), Double.MIN_VALUE);\n      FacetResultNode[] frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].getValue(), Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].getValue(), Double.MIN_VALUE);\n\n      fr = facetResults.get(1);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(13.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].getValue(), Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, frn[2].getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, frn[3].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[4].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[5].getValue(), Double.MIN_VALUE);\n\n      fr = facetResults.get(2);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(7.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(2.0, frn[0].getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, frn[1].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[2].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[3].getValue(), Double.MIN_VALUE);\n\n      fr = facetResults.get(3);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(2.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(0, frn.length);\n\n      fr = facetResults.get(4);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(6.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(1.0, frn[0].getValue(), Double.MIN_VALUE);\n      closeAll();\n    }\n  }\n\n","sourceOld":"  /**\n   * Strait forward test: Adding specific documents with specific facets and\n   * counting them in the most basic form.\n   */\n  @Test\n  public void testSimple() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n\n      // do different facet counts and compare to control\n      FacetSearchParams sParams = getFacetedSearchParams(partitionSize);\n      \n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\"), 100));\n      CountFacetRequest cfra = new CountFacetRequest(new CategoryPath(\"a\"), 100);\n      cfra.setDepth(3);\n      sParams.addFacetRequest(cfra);\n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\", \"b\"), 100));\n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\", \"b\", \"1\"), 100));\n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\", \"c\"), 100));\n\n      FacetsCollector fc = new FacetsCollector(sParams, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      long start = System.currentTimeMillis();\n      List<FacetResult> facetResults = fc.getFacetResults();\n      long end = System.currentTimeMillis();\n\n      if (VERBOSE) {\n        System.out.println(\"Time: \" + (end - start));\n      }\n\n      FacetResult fr = facetResults.get(0);\n      FacetResultNode parentRes = fr.getFacetResultNode();\n      assertEquals(13.0, parentRes.getValue(), Double.MIN_VALUE);\n      FacetResultNode[] frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].getValue(), Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].getValue(), Double.MIN_VALUE);\n\n      fr = facetResults.get(1);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(13.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].getValue(), Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, frn[2].getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, frn[3].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[4].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[5].getValue(), Double.MIN_VALUE);\n\n      fr = facetResults.get(2);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(7.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(2.0, frn[0].getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, frn[1].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[2].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[3].getValue(), Double.MIN_VALUE);\n\n      fr = facetResults.get(3);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(2.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(0, frn.length);\n\n      fr = facetResults.get(4);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(6.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(1.0, frn[0].getValue(), Double.MIN_VALUE);\n      closeAll();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"551a8665af55f08d0001b0d58ed4bd81a8b8258f","date":1354706854,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testSimple().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testSimple().mjava","sourceNew":"  /**\n   * Straightforward test: Adding specific documents with specific facets and\n   * counting them in the most basic form.\n   */\n  @Test\n  public void testSimple() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n\n      // do different facet counts and compare to control\n      FacetSearchParams sParams = getFacetedSearchParams(partitionSize);\n      \n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\"), 100));\n      CountFacetRequest cfra = new CountFacetRequest(new CategoryPath(\"a\"), 100);\n      cfra.setDepth(3);\n      // makes it easier to check the results in the test.\n      cfra.setResultMode(ResultMode.GLOBAL_FLAT);\n      sParams.addFacetRequest(cfra);\n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\", \"b\"), 100));\n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\", \"b\", \"1\"), 100));\n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\", \"c\"), 100));\n\n      FacetsCollector fc = new FacetsCollector(sParams, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      long start = System.currentTimeMillis();\n      List<FacetResult> facetResults = fc.getFacetResults();\n      long end = System.currentTimeMillis();\n\n      if (VERBOSE) {\n        System.out.println(\"Time: \" + (end - start));\n      }\n\n      FacetResult fr = facetResults.get(0);\n      FacetResultNode parentRes = fr.getFacetResultNode();\n      assertEquals(13.0, parentRes.getValue(), Double.MIN_VALUE);\n      FacetResultNode[] frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].getValue(), Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].getValue(), Double.MIN_VALUE);\n\n      fr = facetResults.get(1);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(13.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].getValue(), Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, frn[2].getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, frn[3].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[4].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[5].getValue(), Double.MIN_VALUE);\n\n      fr = facetResults.get(2);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(7.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(2.0, frn[0].getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, frn[1].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[2].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[3].getValue(), Double.MIN_VALUE);\n\n      fr = facetResults.get(3);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(2.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(0, frn.length);\n\n      fr = facetResults.get(4);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(6.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(1.0, frn[0].getValue(), Double.MIN_VALUE);\n      closeAll();\n    }\n  }\n\n","sourceOld":"  /**\n   * Strait forward test: Adding specific documents with specific facets and\n   * counting them in the most basic form.\n   */\n  @Test\n  public void testSimple() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n\n      // do different facet counts and compare to control\n      FacetSearchParams sParams = getFacetedSearchParams(partitionSize);\n      \n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\"), 100));\n      CountFacetRequest cfra = new CountFacetRequest(new CategoryPath(\"a\"), 100);\n      cfra.setDepth(3);\n      sParams.addFacetRequest(cfra);\n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\", \"b\"), 100));\n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\", \"b\", \"1\"), 100));\n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\", \"c\"), 100));\n\n      FacetsCollector fc = new FacetsCollector(sParams, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      long start = System.currentTimeMillis();\n      List<FacetResult> facetResults = fc.getFacetResults();\n      long end = System.currentTimeMillis();\n\n      if (VERBOSE) {\n        System.out.println(\"Time: \" + (end - start));\n      }\n\n      FacetResult fr = facetResults.get(0);\n      FacetResultNode parentRes = fr.getFacetResultNode();\n      assertEquals(13.0, parentRes.getValue(), Double.MIN_VALUE);\n      FacetResultNode[] frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].getValue(), Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].getValue(), Double.MIN_VALUE);\n\n      fr = facetResults.get(1);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(13.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].getValue(), Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, frn[2].getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, frn[3].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[4].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[5].getValue(), Double.MIN_VALUE);\n\n      fr = facetResults.get(2);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(7.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(2.0, frn[0].getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, frn[1].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[2].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[3].getValue(), Double.MIN_VALUE);\n\n      fr = facetResults.get(3);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(2.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(0, frn.length);\n\n      fr = facetResults.get(4);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(6.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(1.0, frn[0].getValue(), Double.MIN_VALUE);\n      closeAll();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testSimple().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testSimple().mjava","sourceNew":"  /**\n   * Straightforward test: Adding specific documents with specific facets and\n   * counting them in the most basic form.\n   */\n  @Test\n  public void testSimple() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n\n      // do different facet counts and compare to control\n      FacetSearchParams sParams = getFacetedSearchParams(partitionSize);\n      \n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\"), 100));\n      CountFacetRequest cfra = new CountFacetRequest(new CategoryPath(\"a\"), 100);\n      cfra.setDepth(3);\n      // makes it easier to check the results in the test.\n      cfra.setResultMode(ResultMode.GLOBAL_FLAT);\n      sParams.addFacetRequest(cfra);\n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\", \"b\"), 100));\n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\", \"b\", \"1\"), 100));\n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\", \"c\"), 100));\n\n      FacetsCollector fc = new FacetsCollector(sParams, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      long start = System.currentTimeMillis();\n      List<FacetResult> facetResults = fc.getFacetResults();\n      long end = System.currentTimeMillis();\n\n      if (VERBOSE) {\n        System.out.println(\"Time: \" + (end - start));\n      }\n\n      FacetResult fr = facetResults.get(0);\n      FacetResultNode parentRes = fr.getFacetResultNode();\n      assertEquals(13.0, parentRes.getValue(), Double.MIN_VALUE);\n      FacetResultNode[] frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].getValue(), Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].getValue(), Double.MIN_VALUE);\n\n      fr = facetResults.get(1);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(13.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].getValue(), Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, frn[2].getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, frn[3].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[4].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[5].getValue(), Double.MIN_VALUE);\n\n      fr = facetResults.get(2);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(7.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(2.0, frn[0].getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, frn[1].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[2].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[3].getValue(), Double.MIN_VALUE);\n\n      fr = facetResults.get(3);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(2.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(0, frn.length);\n\n      fr = facetResults.get(4);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(6.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(1.0, frn[0].getValue(), Double.MIN_VALUE);\n      closeAll();\n    }\n  }\n\n","sourceOld":"  /**\n   * Strait forward test: Adding specific documents with specific facets and\n   * counting them in the most basic form.\n   */\n  @Test\n  public void testSimple() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n\n      // do different facet counts and compare to control\n      FacetSearchParams sParams = getFacetedSearchParams(partitionSize);\n      \n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\"), 100));\n      CountFacetRequest cfra = new CountFacetRequest(new CategoryPath(\"a\"), 100);\n      cfra.setDepth(3);\n      sParams.addFacetRequest(cfra);\n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\", \"b\"), 100));\n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\", \"b\", \"1\"), 100));\n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\", \"c\"), 100));\n\n      FacetsCollector fc = new FacetsCollector(sParams, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      long start = System.currentTimeMillis();\n      List<FacetResult> facetResults = fc.getFacetResults();\n      long end = System.currentTimeMillis();\n\n      if (VERBOSE) {\n        System.out.println(\"Time: \" + (end - start));\n      }\n\n      FacetResult fr = facetResults.get(0);\n      FacetResultNode parentRes = fr.getFacetResultNode();\n      assertEquals(13.0, parentRes.getValue(), Double.MIN_VALUE);\n      FacetResultNode[] frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].getValue(), Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].getValue(), Double.MIN_VALUE);\n\n      fr = facetResults.get(1);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(13.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].getValue(), Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, frn[2].getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, frn[3].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[4].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[5].getValue(), Double.MIN_VALUE);\n\n      fr = facetResults.get(2);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(7.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(2.0, frn[0].getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, frn[1].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[2].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[3].getValue(), Double.MIN_VALUE);\n\n      fr = facetResults.get(3);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(2.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(0, frn.length);\n\n      fr = facetResults.get(4);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(6.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(1.0, frn[0].getValue(), Double.MIN_VALUE);\n      closeAll();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4c6c7f3cda7a0595cabd16e5e9107ca29852708","date":1355402234,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testSimple().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testSimple().mjava","sourceNew":"  /**\n   * Straightforward test: Adding specific documents with specific facets and\n   * counting them in the most basic form.\n   */\n  @Test\n  public void testSimple() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n\n      List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\"), 100));\n      CountFacetRequest cfra = new CountFacetRequest(new CategoryPath(\"a\"), 100);\n      cfra.setDepth(3);\n      // makes it easier to check the results in the test.\n      cfra.setResultMode(ResultMode.GLOBAL_FLAT);\n      facetRequests.add(cfra);\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\", \"b\"), 100));\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\", \"b\", \"1\"), 100));\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\", \"c\"), 100));\n      \n      // do different facet counts and compare to control\n      FacetSearchParams sParams = getFacetSearchParams(facetRequests, getFacetIndexingParams(partitionSize));\n\n      FacetsCollector fc = new FacetsCollector(sParams, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      long start = System.currentTimeMillis();\n      List<FacetResult> facetResults = fc.getFacetResults();\n      long end = System.currentTimeMillis();\n\n      if (VERBOSE) {\n        System.out.println(\"Time: \" + (end - start));\n      }\n\n      FacetResult fr = facetResults.get(0);\n      FacetResultNode parentRes = fr.getFacetResultNode();\n      assertEquals(13.0, parentRes.getValue(), Double.MIN_VALUE);\n      FacetResultNode[] frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].getValue(), Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].getValue(), Double.MIN_VALUE);\n\n      fr = facetResults.get(1);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(13.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].getValue(), Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, frn[2].getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, frn[3].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[4].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[5].getValue(), Double.MIN_VALUE);\n\n      fr = facetResults.get(2);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(7.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(2.0, frn[0].getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, frn[1].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[2].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[3].getValue(), Double.MIN_VALUE);\n\n      fr = facetResults.get(3);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(2.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(0, frn.length);\n\n      fr = facetResults.get(4);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(6.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(1.0, frn[0].getValue(), Double.MIN_VALUE);\n      closeAll();\n    }\n  }\n\n","sourceOld":"  /**\n   * Straightforward test: Adding specific documents with specific facets and\n   * counting them in the most basic form.\n   */\n  @Test\n  public void testSimple() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n\n      // do different facet counts and compare to control\n      FacetSearchParams sParams = getFacetedSearchParams(partitionSize);\n      \n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\"), 100));\n      CountFacetRequest cfra = new CountFacetRequest(new CategoryPath(\"a\"), 100);\n      cfra.setDepth(3);\n      // makes it easier to check the results in the test.\n      cfra.setResultMode(ResultMode.GLOBAL_FLAT);\n      sParams.addFacetRequest(cfra);\n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\", \"b\"), 100));\n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\", \"b\", \"1\"), 100));\n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\", \"c\"), 100));\n\n      FacetsCollector fc = new FacetsCollector(sParams, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      long start = System.currentTimeMillis();\n      List<FacetResult> facetResults = fc.getFacetResults();\n      long end = System.currentTimeMillis();\n\n      if (VERBOSE) {\n        System.out.println(\"Time: \" + (end - start));\n      }\n\n      FacetResult fr = facetResults.get(0);\n      FacetResultNode parentRes = fr.getFacetResultNode();\n      assertEquals(13.0, parentRes.getValue(), Double.MIN_VALUE);\n      FacetResultNode[] frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].getValue(), Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].getValue(), Double.MIN_VALUE);\n\n      fr = facetResults.get(1);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(13.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].getValue(), Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, frn[2].getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, frn[3].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[4].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[5].getValue(), Double.MIN_VALUE);\n\n      fr = facetResults.get(2);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(7.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(2.0, frn[0].getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, frn[1].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[2].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[3].getValue(), Double.MIN_VALUE);\n\n      fr = facetResults.get(3);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(2.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(0, frn.length);\n\n      fr = facetResults.get(4);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(6.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(1.0, frn[0].getValue(), Double.MIN_VALUE);\n      closeAll();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testSimple().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testSimple().mjava","sourceNew":"  /**\n   * Straightforward test: Adding specific documents with specific facets and\n   * counting them in the most basic form.\n   */\n  @Test\n  public void testSimple() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n\n      List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\"), 100));\n      CountFacetRequest cfra = new CountFacetRequest(new CategoryPath(\"a\"), 100);\n      cfra.setDepth(3);\n      // makes it easier to check the results in the test.\n      cfra.setResultMode(ResultMode.GLOBAL_FLAT);\n      facetRequests.add(cfra);\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\", \"b\"), 100));\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\", \"b\", \"1\"), 100));\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\", \"c\"), 100));\n      \n      // do different facet counts and compare to control\n      FacetSearchParams sParams = getFacetSearchParams(facetRequests, getFacetIndexingParams(partitionSize));\n\n      FacetsCollector fc = new FacetsCollector(sParams, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      long start = System.currentTimeMillis();\n      List<FacetResult> facetResults = fc.getFacetResults();\n      long end = System.currentTimeMillis();\n\n      if (VERBOSE) {\n        System.out.println(\"Time: \" + (end - start));\n      }\n\n      FacetResult fr = facetResults.get(0);\n      FacetResultNode parentRes = fr.getFacetResultNode();\n      assertEquals(13.0, parentRes.getValue(), Double.MIN_VALUE);\n      FacetResultNode[] frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].getValue(), Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].getValue(), Double.MIN_VALUE);\n\n      fr = facetResults.get(1);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(13.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].getValue(), Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, frn[2].getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, frn[3].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[4].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[5].getValue(), Double.MIN_VALUE);\n\n      fr = facetResults.get(2);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(7.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(2.0, frn[0].getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, frn[1].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[2].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[3].getValue(), Double.MIN_VALUE);\n\n      fr = facetResults.get(3);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(2.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(0, frn.length);\n\n      fr = facetResults.get(4);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(6.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(1.0, frn[0].getValue(), Double.MIN_VALUE);\n      closeAll();\n    }\n  }\n\n","sourceOld":"  /**\n   * Straightforward test: Adding specific documents with specific facets and\n   * counting them in the most basic form.\n   */\n  @Test\n  public void testSimple() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n\n      // do different facet counts and compare to control\n      FacetSearchParams sParams = getFacetedSearchParams(partitionSize);\n      \n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\"), 100));\n      CountFacetRequest cfra = new CountFacetRequest(new CategoryPath(\"a\"), 100);\n      cfra.setDepth(3);\n      // makes it easier to check the results in the test.\n      cfra.setResultMode(ResultMode.GLOBAL_FLAT);\n      sParams.addFacetRequest(cfra);\n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\", \"b\"), 100));\n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\", \"b\", \"1\"), 100));\n      sParams.addFacetRequest(new CountFacetRequest(new CategoryPath(\"a\", \"c\"), 100));\n\n      FacetsCollector fc = new FacetsCollector(sParams, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      long start = System.currentTimeMillis();\n      List<FacetResult> facetResults = fc.getFacetResults();\n      long end = System.currentTimeMillis();\n\n      if (VERBOSE) {\n        System.out.println(\"Time: \" + (end - start));\n      }\n\n      FacetResult fr = facetResults.get(0);\n      FacetResultNode parentRes = fr.getFacetResultNode();\n      assertEquals(13.0, parentRes.getValue(), Double.MIN_VALUE);\n      FacetResultNode[] frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].getValue(), Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].getValue(), Double.MIN_VALUE);\n\n      fr = facetResults.get(1);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(13.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].getValue(), Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, frn[2].getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, frn[3].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[4].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[5].getValue(), Double.MIN_VALUE);\n\n      fr = facetResults.get(2);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(7.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(2.0, frn[0].getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, frn[1].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[2].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[3].getValue(), Double.MIN_VALUE);\n\n      fr = facetResults.get(3);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(2.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(0, frn.length);\n\n      fr = facetResults.get(4);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(6.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(1.0, frn[0].getValue(), Double.MIN_VALUE);\n      closeAll();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"811cdb4a80352766eb0c762e48972707a924e5cd","date":1358767313,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testSimple().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testSimple().mjava","sourceNew":"  /**\n   * Straightforward test: Adding specific documents with specific facets and\n   * counting them in the most basic form.\n   */\n  @Test\n  public void testSimple() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n\n      List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\"), 100));\n      CountFacetRequest cfra = new CountFacetRequest(new CategoryPath(\"a\"), 100);\n      cfra.setDepth(3);\n      // makes it easier to check the results in the test.\n      cfra.setResultMode(ResultMode.GLOBAL_FLAT);\n      facetRequests.add(cfra);\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\", \"b\"), 100));\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\", \"b\", \"1\"), 100));\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\", \"c\"), 100));\n      \n      // do different facet counts and compare to control\n      FacetSearchParams sParams = getFacetSearchParams(facetRequests, getFacetIndexingParams(partitionSize));\n\n      FacetsCollector fc = new FacetsCollector(sParams, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      List<FacetResult> facetResults = fc.getFacetResults();\n\n      FacetResult fr = facetResults.get(0);\n      FacetResultNode parentRes = fr.getFacetResultNode();\n      assertEquals(13.0, parentRes.value, Double.MIN_VALUE);\n      FacetResultNode[] frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].value, Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].value, Double.MIN_VALUE);\n\n      fr = facetResults.get(1);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(13.0, parentRes.value, Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].value, Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].value, Double.MIN_VALUE);\n      assertEquals(2.0, frn[2].value, Double.MIN_VALUE);\n      assertEquals(2.0, frn[3].value, Double.MIN_VALUE);\n      assertEquals(1.0, frn[4].value, Double.MIN_VALUE);\n      assertEquals(1.0, frn[5].value, Double.MIN_VALUE);\n\n      fr = facetResults.get(2);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(7.0, parentRes.value, Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(2.0, frn[0].value, Double.MIN_VALUE);\n      assertEquals(2.0, frn[1].value, Double.MIN_VALUE);\n      assertEquals(1.0, frn[2].value, Double.MIN_VALUE);\n      assertEquals(1.0, frn[3].value, Double.MIN_VALUE);\n\n      fr = facetResults.get(3);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(2.0, parentRes.value, Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(0, frn.length);\n\n      fr = facetResults.get(4);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(6.0, parentRes.value, Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(1.0, frn[0].value, Double.MIN_VALUE);\n      closeAll();\n    }\n  }\n\n","sourceOld":"  /**\n   * Straightforward test: Adding specific documents with specific facets and\n   * counting them in the most basic form.\n   */\n  @Test\n  public void testSimple() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n\n      List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\"), 100));\n      CountFacetRequest cfra = new CountFacetRequest(new CategoryPath(\"a\"), 100);\n      cfra.setDepth(3);\n      // makes it easier to check the results in the test.\n      cfra.setResultMode(ResultMode.GLOBAL_FLAT);\n      facetRequests.add(cfra);\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\", \"b\"), 100));\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\", \"b\", \"1\"), 100));\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\", \"c\"), 100));\n      \n      // do different facet counts and compare to control\n      FacetSearchParams sParams = getFacetSearchParams(facetRequests, getFacetIndexingParams(partitionSize));\n\n      FacetsCollector fc = new FacetsCollector(sParams, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      long start = System.currentTimeMillis();\n      List<FacetResult> facetResults = fc.getFacetResults();\n      long end = System.currentTimeMillis();\n\n      if (VERBOSE) {\n        System.out.println(\"Time: \" + (end - start));\n      }\n\n      FacetResult fr = facetResults.get(0);\n      FacetResultNode parentRes = fr.getFacetResultNode();\n      assertEquals(13.0, parentRes.getValue(), Double.MIN_VALUE);\n      FacetResultNode[] frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].getValue(), Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].getValue(), Double.MIN_VALUE);\n\n      fr = facetResults.get(1);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(13.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].getValue(), Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, frn[2].getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, frn[3].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[4].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[5].getValue(), Double.MIN_VALUE);\n\n      fr = facetResults.get(2);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(7.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(2.0, frn[0].getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, frn[1].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[2].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[3].getValue(), Double.MIN_VALUE);\n\n      fr = facetResults.get(3);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(2.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(0, frn.length);\n\n      fr = facetResults.get(4);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(6.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(1.0, frn[0].getValue(), Double.MIN_VALUE);\n      closeAll();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d","date":1358784296,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testSimple().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testSimple().mjava","sourceNew":"  /**\n   * Straightforward test: Adding specific documents with specific facets and\n   * counting them in the most basic form.\n   */\n  @Test\n  public void testSimple() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n\n      List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\"), 100));\n      CountFacetRequest cfra = new CountFacetRequest(new CategoryPath(\"a\"), 100);\n      cfra.setDepth(3);\n      // makes it easier to check the results in the test.\n      cfra.setResultMode(ResultMode.GLOBAL_FLAT);\n      facetRequests.add(cfra);\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\", \"b\"), 100));\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\", \"b\", \"1\"), 100));\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\", \"c\"), 100));\n      \n      // do different facet counts and compare to control\n      FacetSearchParams sParams = getFacetSearchParams(facetRequests, getFacetIndexingParams(partitionSize));\n\n      FacetsCollector fc = new StandardFacetsCollector(sParams, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      List<FacetResult> facetResults = fc.getFacetResults();\n\n      FacetResult fr = facetResults.get(0);\n      FacetResultNode parentRes = fr.getFacetResultNode();\n      assertEquals(13.0, parentRes.value, Double.MIN_VALUE);\n      FacetResultNode[] frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].value, Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].value, Double.MIN_VALUE);\n\n      fr = facetResults.get(1);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(13.0, parentRes.value, Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].value, Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].value, Double.MIN_VALUE);\n      assertEquals(2.0, frn[2].value, Double.MIN_VALUE);\n      assertEquals(2.0, frn[3].value, Double.MIN_VALUE);\n      assertEquals(1.0, frn[4].value, Double.MIN_VALUE);\n      assertEquals(1.0, frn[5].value, Double.MIN_VALUE);\n\n      fr = facetResults.get(2);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(7.0, parentRes.value, Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(2.0, frn[0].value, Double.MIN_VALUE);\n      assertEquals(2.0, frn[1].value, Double.MIN_VALUE);\n      assertEquals(1.0, frn[2].value, Double.MIN_VALUE);\n      assertEquals(1.0, frn[3].value, Double.MIN_VALUE);\n\n      fr = facetResults.get(3);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(2.0, parentRes.value, Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(0, frn.length);\n\n      fr = facetResults.get(4);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(6.0, parentRes.value, Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(1.0, frn[0].value, Double.MIN_VALUE);\n      closeAll();\n    }\n  }\n\n","sourceOld":"  /**\n   * Straightforward test: Adding specific documents with specific facets and\n   * counting them in the most basic form.\n   */\n  @Test\n  public void testSimple() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n\n      List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\"), 100));\n      CountFacetRequest cfra = new CountFacetRequest(new CategoryPath(\"a\"), 100);\n      cfra.setDepth(3);\n      // makes it easier to check the results in the test.\n      cfra.setResultMode(ResultMode.GLOBAL_FLAT);\n      facetRequests.add(cfra);\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\", \"b\"), 100));\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\", \"b\", \"1\"), 100));\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\", \"c\"), 100));\n      \n      // do different facet counts and compare to control\n      FacetSearchParams sParams = getFacetSearchParams(facetRequests, getFacetIndexingParams(partitionSize));\n\n      FacetsCollector fc = new FacetsCollector(sParams, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      List<FacetResult> facetResults = fc.getFacetResults();\n\n      FacetResult fr = facetResults.get(0);\n      FacetResultNode parentRes = fr.getFacetResultNode();\n      assertEquals(13.0, parentRes.value, Double.MIN_VALUE);\n      FacetResultNode[] frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].value, Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].value, Double.MIN_VALUE);\n\n      fr = facetResults.get(1);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(13.0, parentRes.value, Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].value, Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].value, Double.MIN_VALUE);\n      assertEquals(2.0, frn[2].value, Double.MIN_VALUE);\n      assertEquals(2.0, frn[3].value, Double.MIN_VALUE);\n      assertEquals(1.0, frn[4].value, Double.MIN_VALUE);\n      assertEquals(1.0, frn[5].value, Double.MIN_VALUE);\n\n      fr = facetResults.get(2);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(7.0, parentRes.value, Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(2.0, frn[0].value, Double.MIN_VALUE);\n      assertEquals(2.0, frn[1].value, Double.MIN_VALUE);\n      assertEquals(1.0, frn[2].value, Double.MIN_VALUE);\n      assertEquals(1.0, frn[3].value, Double.MIN_VALUE);\n\n      fr = facetResults.get(3);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(2.0, parentRes.value, Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(0, frn.length);\n\n      fr = facetResults.get(4);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(6.0, parentRes.value, Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(1.0, frn[0].value, Double.MIN_VALUE);\n      closeAll();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testSimple().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testSimple().mjava","sourceNew":"  /**\n   * Straightforward test: Adding specific documents with specific facets and\n   * counting them in the most basic form.\n   */\n  @Test\n  public void testSimple() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n\n      List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\"), 100));\n      CountFacetRequest cfra = new CountFacetRequest(new CategoryPath(\"a\"), 100);\n      cfra.setDepth(3);\n      // makes it easier to check the results in the test.\n      cfra.setResultMode(ResultMode.GLOBAL_FLAT);\n      facetRequests.add(cfra);\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\", \"b\"), 100));\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\", \"b\", \"1\"), 100));\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\", \"c\"), 100));\n      \n      // do different facet counts and compare to control\n      FacetSearchParams sParams = getFacetSearchParams(facetRequests, getFacetIndexingParams(partitionSize));\n\n      FacetsCollector fc = new StandardFacetsCollector(sParams, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      List<FacetResult> facetResults = fc.getFacetResults();\n\n      FacetResult fr = facetResults.get(0);\n      FacetResultNode parentRes = fr.getFacetResultNode();\n      assertEquals(13.0, parentRes.value, Double.MIN_VALUE);\n      FacetResultNode[] frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].value, Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].value, Double.MIN_VALUE);\n\n      fr = facetResults.get(1);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(13.0, parentRes.value, Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].value, Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].value, Double.MIN_VALUE);\n      assertEquals(2.0, frn[2].value, Double.MIN_VALUE);\n      assertEquals(2.0, frn[3].value, Double.MIN_VALUE);\n      assertEquals(1.0, frn[4].value, Double.MIN_VALUE);\n      assertEquals(1.0, frn[5].value, Double.MIN_VALUE);\n\n      fr = facetResults.get(2);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(7.0, parentRes.value, Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(2.0, frn[0].value, Double.MIN_VALUE);\n      assertEquals(2.0, frn[1].value, Double.MIN_VALUE);\n      assertEquals(1.0, frn[2].value, Double.MIN_VALUE);\n      assertEquals(1.0, frn[3].value, Double.MIN_VALUE);\n\n      fr = facetResults.get(3);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(2.0, parentRes.value, Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(0, frn.length);\n\n      fr = facetResults.get(4);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(6.0, parentRes.value, Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(1.0, frn[0].value, Double.MIN_VALUE);\n      closeAll();\n    }\n  }\n\n","sourceOld":"  /**\n   * Straightforward test: Adding specific documents with specific facets and\n   * counting them in the most basic form.\n   */\n  @Test\n  public void testSimple() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n\n      List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\"), 100));\n      CountFacetRequest cfra = new CountFacetRequest(new CategoryPath(\"a\"), 100);\n      cfra.setDepth(3);\n      // makes it easier to check the results in the test.\n      cfra.setResultMode(ResultMode.GLOBAL_FLAT);\n      facetRequests.add(cfra);\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\", \"b\"), 100));\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\", \"b\", \"1\"), 100));\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\", \"c\"), 100));\n      \n      // do different facet counts and compare to control\n      FacetSearchParams sParams = getFacetSearchParams(facetRequests, getFacetIndexingParams(partitionSize));\n\n      FacetsCollector fc = new FacetsCollector(sParams, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      long start = System.currentTimeMillis();\n      List<FacetResult> facetResults = fc.getFacetResults();\n      long end = System.currentTimeMillis();\n\n      if (VERBOSE) {\n        System.out.println(\"Time: \" + (end - start));\n      }\n\n      FacetResult fr = facetResults.get(0);\n      FacetResultNode parentRes = fr.getFacetResultNode();\n      assertEquals(13.0, parentRes.getValue(), Double.MIN_VALUE);\n      FacetResultNode[] frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].getValue(), Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].getValue(), Double.MIN_VALUE);\n\n      fr = facetResults.get(1);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(13.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].getValue(), Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, frn[2].getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, frn[3].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[4].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[5].getValue(), Double.MIN_VALUE);\n\n      fr = facetResults.get(2);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(7.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(2.0, frn[0].getValue(), Double.MIN_VALUE);\n      assertEquals(2.0, frn[1].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[2].getValue(), Double.MIN_VALUE);\n      assertEquals(1.0, frn[3].getValue(), Double.MIN_VALUE);\n\n      fr = facetResults.get(3);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(2.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(0, frn.length);\n\n      fr = facetResults.get(4);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(6.0, parentRes.getValue(), Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(1.0, frn[0].getValue(), Double.MIN_VALUE);\n      closeAll();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"239f79ed06f0979cfe1911ec5fba32b94fda43c1","date":1359553898,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testSimple().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testSimple().mjava","sourceNew":"  /**\n   * Straightforward test: Adding specific documents with specific facets and\n   * counting them in the most basic form.\n   */\n  @Test\n  public void testSimple() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      FacetIndexingParams fip = getFacetIndexingParams(partitionSize);\n      OrdinalPolicy op = fip.getCategoryListParams(null).getOrdinalPolicy(null);\n      initIndex(fip);\n\n      List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\"), 100));\n      CountFacetRequest cfra = new CountFacetRequest(new CategoryPath(\"a\"), 100);\n      cfra.setDepth(3);\n      // makes it easier to check the results in the test.\n      cfra.setResultMode(ResultMode.GLOBAL_FLAT);\n      facetRequests.add(cfra);\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\", \"b\"), 100));\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\", \"b\", \"1\"), 100));\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\", \"c\"), 100));\n      \n      // do different facet counts and compare to control\n      FacetSearchParams sParams = getFacetSearchParams(facetRequests, fip);\n      \n      FacetsCollector fc = new StandardFacetsCollector(sParams, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      List<FacetResult> facetResults = fc.getFacetResults();\n      \n      FacetResult fr = facetResults.get(0);\n      FacetResultNode parentRes = fr.getFacetResultNode();\n      if (op == OrdinalPolicy.ALL_PARENTS) {\n        assertEquals(13.0, parentRes.value, Double.MIN_VALUE);\n      }\n      FacetResultNode[] frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].value, Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].value, Double.MIN_VALUE);\n\n      fr = facetResults.get(1);\n      parentRes = fr.getFacetResultNode();\n      if (op == OrdinalPolicy.ALL_PARENTS) {\n        assertEquals(13.0, parentRes.value, Double.MIN_VALUE);\n      }\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].value, Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].value, Double.MIN_VALUE);\n      assertEquals(2.0, frn[2].value, Double.MIN_VALUE);\n      assertEquals(2.0, frn[3].value, Double.MIN_VALUE);\n      assertEquals(1.0, frn[4].value, Double.MIN_VALUE);\n      assertEquals(1.0, frn[5].value, Double.MIN_VALUE);\n\n      fr = facetResults.get(2);\n      parentRes = fr.getFacetResultNode();\n      if (op == OrdinalPolicy.ALL_PARENTS) {\n        assertEquals(7.0, parentRes.value, Double.MIN_VALUE);\n      }\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(2.0, frn[0].value, Double.MIN_VALUE);\n      assertEquals(2.0, frn[1].value, Double.MIN_VALUE);\n      assertEquals(1.0, frn[2].value, Double.MIN_VALUE);\n      assertEquals(1.0, frn[3].value, Double.MIN_VALUE);\n\n      fr = facetResults.get(3);\n      parentRes = fr.getFacetResultNode();\n      if (op == OrdinalPolicy.ALL_PARENTS) {\n        assertEquals(2.0, parentRes.value, Double.MIN_VALUE);\n      }\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(0, frn.length);\n\n      fr = facetResults.get(4);\n      parentRes = fr.getFacetResultNode();\n      if (op == OrdinalPolicy.ALL_PARENTS) {\n        assertEquals(6.0, parentRes.value, Double.MIN_VALUE);\n      }\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(1.0, frn[0].value, Double.MIN_VALUE);\n      closeAll();\n    }\n  }\n\n","sourceOld":"  /**\n   * Straightforward test: Adding specific documents with specific facets and\n   * counting them in the most basic form.\n   */\n  @Test\n  public void testSimple() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n\n      List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\"), 100));\n      CountFacetRequest cfra = new CountFacetRequest(new CategoryPath(\"a\"), 100);\n      cfra.setDepth(3);\n      // makes it easier to check the results in the test.\n      cfra.setResultMode(ResultMode.GLOBAL_FLAT);\n      facetRequests.add(cfra);\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\", \"b\"), 100));\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\", \"b\", \"1\"), 100));\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\", \"c\"), 100));\n      \n      // do different facet counts and compare to control\n      FacetSearchParams sParams = getFacetSearchParams(facetRequests, getFacetIndexingParams(partitionSize));\n\n      FacetsCollector fc = new StandardFacetsCollector(sParams, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      List<FacetResult> facetResults = fc.getFacetResults();\n\n      FacetResult fr = facetResults.get(0);\n      FacetResultNode parentRes = fr.getFacetResultNode();\n      assertEquals(13.0, parentRes.value, Double.MIN_VALUE);\n      FacetResultNode[] frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].value, Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].value, Double.MIN_VALUE);\n\n      fr = facetResults.get(1);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(13.0, parentRes.value, Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].value, Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].value, Double.MIN_VALUE);\n      assertEquals(2.0, frn[2].value, Double.MIN_VALUE);\n      assertEquals(2.0, frn[3].value, Double.MIN_VALUE);\n      assertEquals(1.0, frn[4].value, Double.MIN_VALUE);\n      assertEquals(1.0, frn[5].value, Double.MIN_VALUE);\n\n      fr = facetResults.get(2);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(7.0, parentRes.value, Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(2.0, frn[0].value, Double.MIN_VALUE);\n      assertEquals(2.0, frn[1].value, Double.MIN_VALUE);\n      assertEquals(1.0, frn[2].value, Double.MIN_VALUE);\n      assertEquals(1.0, frn[3].value, Double.MIN_VALUE);\n\n      fr = facetResults.get(3);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(2.0, parentRes.value, Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(0, frn.length);\n\n      fr = facetResults.get(4);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(6.0, parentRes.value, Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(1.0, frn[0].value, Double.MIN_VALUE);\n      closeAll();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61d5f95d14e5b9b046998c51e16709a398c15226","date":1359603451,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testSimple().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testSimple().mjava","sourceNew":"  /**\n   * Straightforward test: Adding specific documents with specific facets and\n   * counting them in the most basic form.\n   */\n  @Test\n  public void testSimple() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      FacetIndexingParams fip = getFacetIndexingParams(partitionSize);\n      OrdinalPolicy op = fip.getCategoryListParams(null).getOrdinalPolicy(null);\n      initIndex(fip);\n\n      List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\"), 100));\n      CountFacetRequest cfra = new CountFacetRequest(new CategoryPath(\"a\"), 100);\n      cfra.setDepth(3);\n      // makes it easier to check the results in the test.\n      cfra.setResultMode(ResultMode.GLOBAL_FLAT);\n      facetRequests.add(cfra);\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\", \"b\"), 100));\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\", \"b\", \"1\"), 100));\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\", \"c\"), 100));\n      \n      // do different facet counts and compare to control\n      FacetSearchParams sParams = getFacetSearchParams(facetRequests, fip);\n      \n      FacetsCollector fc = new StandardFacetsCollector(sParams, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      List<FacetResult> facetResults = fc.getFacetResults();\n      \n      FacetResult fr = facetResults.get(0);\n      FacetResultNode parentRes = fr.getFacetResultNode();\n      if (op == OrdinalPolicy.ALL_PARENTS) {\n        assertEquals(13.0, parentRes.value, Double.MIN_VALUE);\n      }\n      FacetResultNode[] frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].value, Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].value, Double.MIN_VALUE);\n\n      fr = facetResults.get(1);\n      parentRes = fr.getFacetResultNode();\n      if (op == OrdinalPolicy.ALL_PARENTS) {\n        assertEquals(13.0, parentRes.value, Double.MIN_VALUE);\n      }\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].value, Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].value, Double.MIN_VALUE);\n      assertEquals(2.0, frn[2].value, Double.MIN_VALUE);\n      assertEquals(2.0, frn[3].value, Double.MIN_VALUE);\n      assertEquals(1.0, frn[4].value, Double.MIN_VALUE);\n      assertEquals(1.0, frn[5].value, Double.MIN_VALUE);\n\n      fr = facetResults.get(2);\n      parentRes = fr.getFacetResultNode();\n      if (op == OrdinalPolicy.ALL_PARENTS) {\n        assertEquals(7.0, parentRes.value, Double.MIN_VALUE);\n      }\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(2.0, frn[0].value, Double.MIN_VALUE);\n      assertEquals(2.0, frn[1].value, Double.MIN_VALUE);\n      assertEquals(1.0, frn[2].value, Double.MIN_VALUE);\n      assertEquals(1.0, frn[3].value, Double.MIN_VALUE);\n\n      fr = facetResults.get(3);\n      parentRes = fr.getFacetResultNode();\n      if (op == OrdinalPolicy.ALL_PARENTS) {\n        assertEquals(2.0, parentRes.value, Double.MIN_VALUE);\n      }\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(0, frn.length);\n\n      fr = facetResults.get(4);\n      parentRes = fr.getFacetResultNode();\n      if (op == OrdinalPolicy.ALL_PARENTS) {\n        assertEquals(6.0, parentRes.value, Double.MIN_VALUE);\n      }\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(1.0, frn[0].value, Double.MIN_VALUE);\n      closeAll();\n    }\n  }\n\n","sourceOld":"  /**\n   * Straightforward test: Adding specific documents with specific facets and\n   * counting them in the most basic form.\n   */\n  @Test\n  public void testSimple() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n\n      List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\"), 100));\n      CountFacetRequest cfra = new CountFacetRequest(new CategoryPath(\"a\"), 100);\n      cfra.setDepth(3);\n      // makes it easier to check the results in the test.\n      cfra.setResultMode(ResultMode.GLOBAL_FLAT);\n      facetRequests.add(cfra);\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\", \"b\"), 100));\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\", \"b\", \"1\"), 100));\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\", \"c\"), 100));\n      \n      // do different facet counts and compare to control\n      FacetSearchParams sParams = getFacetSearchParams(facetRequests, getFacetIndexingParams(partitionSize));\n\n      FacetsCollector fc = new StandardFacetsCollector(sParams, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      List<FacetResult> facetResults = fc.getFacetResults();\n\n      FacetResult fr = facetResults.get(0);\n      FacetResultNode parentRes = fr.getFacetResultNode();\n      assertEquals(13.0, parentRes.value, Double.MIN_VALUE);\n      FacetResultNode[] frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].value, Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].value, Double.MIN_VALUE);\n\n      fr = facetResults.get(1);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(13.0, parentRes.value, Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].value, Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].value, Double.MIN_VALUE);\n      assertEquals(2.0, frn[2].value, Double.MIN_VALUE);\n      assertEquals(2.0, frn[3].value, Double.MIN_VALUE);\n      assertEquals(1.0, frn[4].value, Double.MIN_VALUE);\n      assertEquals(1.0, frn[5].value, Double.MIN_VALUE);\n\n      fr = facetResults.get(2);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(7.0, parentRes.value, Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(2.0, frn[0].value, Double.MIN_VALUE);\n      assertEquals(2.0, frn[1].value, Double.MIN_VALUE);\n      assertEquals(1.0, frn[2].value, Double.MIN_VALUE);\n      assertEquals(1.0, frn[3].value, Double.MIN_VALUE);\n\n      fr = facetResults.get(3);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(2.0, parentRes.value, Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(0, frn.length);\n\n      fr = facetResults.get(4);\n      parentRes = fr.getFacetResultNode();\n      assertEquals(6.0, parentRes.value, Double.MIN_VALUE);\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(1.0, frn[0].value, Double.MIN_VALUE);\n      closeAll();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"571abba77e55fea386a38c0024f72ffa5b37a9ad","date":1360272747,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testSimple().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testSimple().mjava","sourceNew":"  /**\n   * Straightforward test: Adding specific documents with specific facets and\n   * counting them in the most basic form.\n   */\n  @Test\n  public void testSimple() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      FacetIndexingParams fip = getFacetIndexingParams(partitionSize);\n      OrdinalPolicy op = fip.getCategoryListParams(null).getOrdinalPolicy(null);\n      initIndex(fip);\n\n      List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\"), 100));\n      CountFacetRequest cfra = new CountFacetRequest(new CategoryPath(\"a\"), 100);\n      cfra.setDepth(3);\n      // makes it easier to check the results in the test.\n      cfra.setResultMode(ResultMode.GLOBAL_FLAT);\n      facetRequests.add(cfra);\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\", \"b\"), 100));\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\", \"b\", \"1\"), 100));\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\", \"c\"), 100));\n      \n      // do different facet counts and compare to control\n      FacetSearchParams sParams = getFacetSearchParams(facetRequests, fip);\n      FacetsCollector fc = FacetsCollector.create(sParams, indexReader, taxoReader);\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      List<FacetResult> facetResults = fc.getFacetResults();\n      \n      FacetResult fr = facetResults.get(0);\n      FacetResultNode parentRes = fr.getFacetResultNode();\n      if (op == OrdinalPolicy.ALL_PARENTS) {\n        assertEquals(13.0, parentRes.value, Double.MIN_VALUE);\n      }\n      FacetResultNode[] frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].value, Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].value, Double.MIN_VALUE);\n\n      fr = facetResults.get(1);\n      parentRes = fr.getFacetResultNode();\n      if (op == OrdinalPolicy.ALL_PARENTS) {\n        assertEquals(13.0, parentRes.value, Double.MIN_VALUE);\n      }\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].value, Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].value, Double.MIN_VALUE);\n      assertEquals(2.0, frn[2].value, Double.MIN_VALUE);\n      assertEquals(2.0, frn[3].value, Double.MIN_VALUE);\n      assertEquals(1.0, frn[4].value, Double.MIN_VALUE);\n      assertEquals(1.0, frn[5].value, Double.MIN_VALUE);\n\n      fr = facetResults.get(2);\n      parentRes = fr.getFacetResultNode();\n      if (op == OrdinalPolicy.ALL_PARENTS) {\n        assertEquals(7.0, parentRes.value, Double.MIN_VALUE);\n      }\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(2.0, frn[0].value, Double.MIN_VALUE);\n      assertEquals(2.0, frn[1].value, Double.MIN_VALUE);\n      assertEquals(1.0, frn[2].value, Double.MIN_VALUE);\n      assertEquals(1.0, frn[3].value, Double.MIN_VALUE);\n\n      fr = facetResults.get(3);\n      parentRes = fr.getFacetResultNode();\n      if (op == OrdinalPolicy.ALL_PARENTS) {\n        assertEquals(2.0, parentRes.value, Double.MIN_VALUE);\n      }\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(0, frn.length);\n\n      fr = facetResults.get(4);\n      parentRes = fr.getFacetResultNode();\n      if (op == OrdinalPolicy.ALL_PARENTS) {\n        assertEquals(6.0, parentRes.value, Double.MIN_VALUE);\n      }\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(1.0, frn[0].value, Double.MIN_VALUE);\n      closeAll();\n    }\n  }\n\n","sourceOld":"  /**\n   * Straightforward test: Adding specific documents with specific facets and\n   * counting them in the most basic form.\n   */\n  @Test\n  public void testSimple() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      FacetIndexingParams fip = getFacetIndexingParams(partitionSize);\n      OrdinalPolicy op = fip.getCategoryListParams(null).getOrdinalPolicy(null);\n      initIndex(fip);\n\n      List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\"), 100));\n      CountFacetRequest cfra = new CountFacetRequest(new CategoryPath(\"a\"), 100);\n      cfra.setDepth(3);\n      // makes it easier to check the results in the test.\n      cfra.setResultMode(ResultMode.GLOBAL_FLAT);\n      facetRequests.add(cfra);\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\", \"b\"), 100));\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\", \"b\", \"1\"), 100));\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\", \"c\"), 100));\n      \n      // do different facet counts and compare to control\n      FacetSearchParams sParams = getFacetSearchParams(facetRequests, fip);\n      \n      FacetsCollector fc = new StandardFacetsCollector(sParams, indexReader, taxoReader) {\n        @Override\n        protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader, TaxonomyReader taxonomyReader) {\n          FacetsAccumulator fa = new StandardFacetsAccumulator(facetSearchParams, indexReader, taxonomyReader);\n          fa.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n          return fa;\n        }\n      };\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      List<FacetResult> facetResults = fc.getFacetResults();\n      \n      FacetResult fr = facetResults.get(0);\n      FacetResultNode parentRes = fr.getFacetResultNode();\n      if (op == OrdinalPolicy.ALL_PARENTS) {\n        assertEquals(13.0, parentRes.value, Double.MIN_VALUE);\n      }\n      FacetResultNode[] frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].value, Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].value, Double.MIN_VALUE);\n\n      fr = facetResults.get(1);\n      parentRes = fr.getFacetResultNode();\n      if (op == OrdinalPolicy.ALL_PARENTS) {\n        assertEquals(13.0, parentRes.value, Double.MIN_VALUE);\n      }\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].value, Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].value, Double.MIN_VALUE);\n      assertEquals(2.0, frn[2].value, Double.MIN_VALUE);\n      assertEquals(2.0, frn[3].value, Double.MIN_VALUE);\n      assertEquals(1.0, frn[4].value, Double.MIN_VALUE);\n      assertEquals(1.0, frn[5].value, Double.MIN_VALUE);\n\n      fr = facetResults.get(2);\n      parentRes = fr.getFacetResultNode();\n      if (op == OrdinalPolicy.ALL_PARENTS) {\n        assertEquals(7.0, parentRes.value, Double.MIN_VALUE);\n      }\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(2.0, frn[0].value, Double.MIN_VALUE);\n      assertEquals(2.0, frn[1].value, Double.MIN_VALUE);\n      assertEquals(1.0, frn[2].value, Double.MIN_VALUE);\n      assertEquals(1.0, frn[3].value, Double.MIN_VALUE);\n\n      fr = facetResults.get(3);\n      parentRes = fr.getFacetResultNode();\n      if (op == OrdinalPolicy.ALL_PARENTS) {\n        assertEquals(2.0, parentRes.value, Double.MIN_VALUE);\n      }\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(0, frn.length);\n\n      fr = facetResults.get(4);\n      parentRes = fr.getFacetResultNode();\n      if (op == OrdinalPolicy.ALL_PARENTS) {\n        assertEquals(6.0, parentRes.value, Double.MIN_VALUE);\n      }\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(1.0, frn[0].value, Double.MIN_VALUE);\n      closeAll();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testSimple().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testSimple().mjava","sourceNew":"  /**\n   * Straightforward test: Adding specific documents with specific facets and\n   * counting them in the most basic form.\n   */\n  @Test\n  public void testSimple() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      FacetIndexingParams fip = getFacetIndexingParams(partitionSize);\n      OrdinalPolicy op = fip.getCategoryListParams(null).getOrdinalPolicy(null);\n      initIndex(fip);\n\n      List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n      facetRequests.add(new CountFacetRequest(new FacetLabel(\"a\"), 100));\n      CountFacetRequest cfra = new CountFacetRequest(new FacetLabel(\"a\"), 100);\n      cfra.setDepth(3);\n      // makes it easier to check the results in the test.\n      cfra.setResultMode(ResultMode.GLOBAL_FLAT);\n      facetRequests.add(cfra);\n      facetRequests.add(new CountFacetRequest(new FacetLabel(\"a\", \"b\"), 100));\n      facetRequests.add(new CountFacetRequest(new FacetLabel(\"a\", \"b\", \"1\"), 100));\n      facetRequests.add(new CountFacetRequest(new FacetLabel(\"a\", \"c\"), 100));\n      \n      // do different facet counts and compare to control\n      FacetSearchParams sParams = getFacetSearchParams(facetRequests, fip);\n      FacetsCollector fc = FacetsCollector.create(sParams, indexReader, taxoReader);\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      List<FacetResult> facetResults = fc.getFacetResults();\n      \n      FacetResult fr = facetResults.get(0);\n      FacetResultNode parentRes = fr.getFacetResultNode();\n      if (op == OrdinalPolicy.ALL_PARENTS) {\n        assertEquals(13.0, parentRes.value, Double.MIN_VALUE);\n      }\n      FacetResultNode[] frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].value, Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].value, Double.MIN_VALUE);\n\n      fr = facetResults.get(1);\n      parentRes = fr.getFacetResultNode();\n      if (op == OrdinalPolicy.ALL_PARENTS) {\n        assertEquals(13.0, parentRes.value, Double.MIN_VALUE);\n      }\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].value, Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].value, Double.MIN_VALUE);\n      assertEquals(2.0, frn[2].value, Double.MIN_VALUE);\n      assertEquals(2.0, frn[3].value, Double.MIN_VALUE);\n      assertEquals(1.0, frn[4].value, Double.MIN_VALUE);\n      assertEquals(1.0, frn[5].value, Double.MIN_VALUE);\n\n      fr = facetResults.get(2);\n      parentRes = fr.getFacetResultNode();\n      if (op == OrdinalPolicy.ALL_PARENTS) {\n        assertEquals(7.0, parentRes.value, Double.MIN_VALUE);\n      }\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(2.0, frn[0].value, Double.MIN_VALUE);\n      assertEquals(2.0, frn[1].value, Double.MIN_VALUE);\n      assertEquals(1.0, frn[2].value, Double.MIN_VALUE);\n      assertEquals(1.0, frn[3].value, Double.MIN_VALUE);\n\n      fr = facetResults.get(3);\n      parentRes = fr.getFacetResultNode();\n      if (op == OrdinalPolicy.ALL_PARENTS) {\n        assertEquals(2.0, parentRes.value, Double.MIN_VALUE);\n      }\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(0, frn.length);\n\n      fr = facetResults.get(4);\n      parentRes = fr.getFacetResultNode();\n      if (op == OrdinalPolicy.ALL_PARENTS) {\n        assertEquals(6.0, parentRes.value, Double.MIN_VALUE);\n      }\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(1.0, frn[0].value, Double.MIN_VALUE);\n      closeAll();\n    }\n  }\n\n","sourceOld":"  /**\n   * Straightforward test: Adding specific documents with specific facets and\n   * counting them in the most basic form.\n   */\n  @Test\n  public void testSimple() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      FacetIndexingParams fip = getFacetIndexingParams(partitionSize);\n      OrdinalPolicy op = fip.getCategoryListParams(null).getOrdinalPolicy(null);\n      initIndex(fip);\n\n      List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\"), 100));\n      CountFacetRequest cfra = new CountFacetRequest(new CategoryPath(\"a\"), 100);\n      cfra.setDepth(3);\n      // makes it easier to check the results in the test.\n      cfra.setResultMode(ResultMode.GLOBAL_FLAT);\n      facetRequests.add(cfra);\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\", \"b\"), 100));\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\", \"b\", \"1\"), 100));\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\", \"c\"), 100));\n      \n      // do different facet counts and compare to control\n      FacetSearchParams sParams = getFacetSearchParams(facetRequests, fip);\n      FacetsCollector fc = FacetsCollector.create(sParams, indexReader, taxoReader);\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      List<FacetResult> facetResults = fc.getFacetResults();\n      \n      FacetResult fr = facetResults.get(0);\n      FacetResultNode parentRes = fr.getFacetResultNode();\n      if (op == OrdinalPolicy.ALL_PARENTS) {\n        assertEquals(13.0, parentRes.value, Double.MIN_VALUE);\n      }\n      FacetResultNode[] frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].value, Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].value, Double.MIN_VALUE);\n\n      fr = facetResults.get(1);\n      parentRes = fr.getFacetResultNode();\n      if (op == OrdinalPolicy.ALL_PARENTS) {\n        assertEquals(13.0, parentRes.value, Double.MIN_VALUE);\n      }\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].value, Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].value, Double.MIN_VALUE);\n      assertEquals(2.0, frn[2].value, Double.MIN_VALUE);\n      assertEquals(2.0, frn[3].value, Double.MIN_VALUE);\n      assertEquals(1.0, frn[4].value, Double.MIN_VALUE);\n      assertEquals(1.0, frn[5].value, Double.MIN_VALUE);\n\n      fr = facetResults.get(2);\n      parentRes = fr.getFacetResultNode();\n      if (op == OrdinalPolicy.ALL_PARENTS) {\n        assertEquals(7.0, parentRes.value, Double.MIN_VALUE);\n      }\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(2.0, frn[0].value, Double.MIN_VALUE);\n      assertEquals(2.0, frn[1].value, Double.MIN_VALUE);\n      assertEquals(1.0, frn[2].value, Double.MIN_VALUE);\n      assertEquals(1.0, frn[3].value, Double.MIN_VALUE);\n\n      fr = facetResults.get(3);\n      parentRes = fr.getFacetResultNode();\n      if (op == OrdinalPolicy.ALL_PARENTS) {\n        assertEquals(2.0, parentRes.value, Double.MIN_VALUE);\n      }\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(0, frn.length);\n\n      fr = facetResults.get(4);\n      parentRes = fr.getFacetResultNode();\n      if (op == OrdinalPolicy.ALL_PARENTS) {\n        assertEquals(6.0, parentRes.value, Double.MIN_VALUE);\n      }\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(1.0, frn[0].value, Double.MIN_VALUE);\n      closeAll();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testSimple().mjava","sourceNew":null,"sourceOld":"  /**\n   * Straightforward test: Adding specific documents with specific facets and\n   * counting them in the most basic form.\n   */\n  @Test\n  public void testSimple() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      FacetIndexingParams fip = getFacetIndexingParams(partitionSize);\n      OrdinalPolicy op = fip.getCategoryListParams(null).getOrdinalPolicy(null);\n      initIndex(fip);\n\n      List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n      facetRequests.add(new CountFacetRequest(new FacetLabel(\"a\"), 100));\n      CountFacetRequest cfra = new CountFacetRequest(new FacetLabel(\"a\"), 100);\n      cfra.setDepth(3);\n      // makes it easier to check the results in the test.\n      cfra.setResultMode(ResultMode.GLOBAL_FLAT);\n      facetRequests.add(cfra);\n      facetRequests.add(new CountFacetRequest(new FacetLabel(\"a\", \"b\"), 100));\n      facetRequests.add(new CountFacetRequest(new FacetLabel(\"a\", \"b\", \"1\"), 100));\n      facetRequests.add(new CountFacetRequest(new FacetLabel(\"a\", \"c\"), 100));\n      \n      // do different facet counts and compare to control\n      FacetSearchParams sParams = getFacetSearchParams(facetRequests, fip);\n      FacetsCollector fc = FacetsCollector.create(sParams, indexReader, taxoReader);\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      List<FacetResult> facetResults = fc.getFacetResults();\n      \n      FacetResult fr = facetResults.get(0);\n      FacetResultNode parentRes = fr.getFacetResultNode();\n      if (op == OrdinalPolicy.ALL_PARENTS) {\n        assertEquals(13.0, parentRes.value, Double.MIN_VALUE);\n      }\n      FacetResultNode[] frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].value, Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].value, Double.MIN_VALUE);\n\n      fr = facetResults.get(1);\n      parentRes = fr.getFacetResultNode();\n      if (op == OrdinalPolicy.ALL_PARENTS) {\n        assertEquals(13.0, parentRes.value, Double.MIN_VALUE);\n      }\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].value, Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].value, Double.MIN_VALUE);\n      assertEquals(2.0, frn[2].value, Double.MIN_VALUE);\n      assertEquals(2.0, frn[3].value, Double.MIN_VALUE);\n      assertEquals(1.0, frn[4].value, Double.MIN_VALUE);\n      assertEquals(1.0, frn[5].value, Double.MIN_VALUE);\n\n      fr = facetResults.get(2);\n      parentRes = fr.getFacetResultNode();\n      if (op == OrdinalPolicy.ALL_PARENTS) {\n        assertEquals(7.0, parentRes.value, Double.MIN_VALUE);\n      }\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(2.0, frn[0].value, Double.MIN_VALUE);\n      assertEquals(2.0, frn[1].value, Double.MIN_VALUE);\n      assertEquals(1.0, frn[2].value, Double.MIN_VALUE);\n      assertEquals(1.0, frn[3].value, Double.MIN_VALUE);\n\n      fr = facetResults.get(3);\n      parentRes = fr.getFacetResultNode();\n      if (op == OrdinalPolicy.ALL_PARENTS) {\n        assertEquals(2.0, parentRes.value, Double.MIN_VALUE);\n      }\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(0, frn.length);\n\n      fr = facetResults.get(4);\n      parentRes = fr.getFacetResultNode();\n      if (op == OrdinalPolicy.ALL_PARENTS) {\n        assertEquals(6.0, parentRes.value, Double.MIN_VALUE);\n      }\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(1.0, frn[0].value, Double.MIN_VALUE);\n      closeAll();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTopKResultsHandler#testSimple().mjava","sourceNew":null,"sourceOld":"  /**\n   * Straightforward test: Adding specific documents with specific facets and\n   * counting them in the most basic form.\n   */\n  @Test\n  public void testSimple() throws Exception {\n    for (int partitionSize : partitionSizes) {\n      FacetIndexingParams fip = getFacetIndexingParams(partitionSize);\n      OrdinalPolicy op = fip.getCategoryListParams(null).getOrdinalPolicy(null);\n      initIndex(fip);\n\n      List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\"), 100));\n      CountFacetRequest cfra = new CountFacetRequest(new CategoryPath(\"a\"), 100);\n      cfra.setDepth(3);\n      // makes it easier to check the results in the test.\n      cfra.setResultMode(ResultMode.GLOBAL_FLAT);\n      facetRequests.add(cfra);\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\", \"b\"), 100));\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\", \"b\", \"1\"), 100));\n      facetRequests.add(new CountFacetRequest(new CategoryPath(\"a\", \"c\"), 100));\n      \n      // do different facet counts and compare to control\n      FacetSearchParams sParams = getFacetSearchParams(facetRequests, fip);\n      FacetsCollector fc = FacetsCollector.create(sParams, indexReader, taxoReader);\n      \n      searcher.search(new MatchAllDocsQuery(), fc);\n      List<FacetResult> facetResults = fc.getFacetResults();\n      \n      FacetResult fr = facetResults.get(0);\n      FacetResultNode parentRes = fr.getFacetResultNode();\n      if (op == OrdinalPolicy.ALL_PARENTS) {\n        assertEquals(13.0, parentRes.value, Double.MIN_VALUE);\n      }\n      FacetResultNode[] frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].value, Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].value, Double.MIN_VALUE);\n\n      fr = facetResults.get(1);\n      parentRes = fr.getFacetResultNode();\n      if (op == OrdinalPolicy.ALL_PARENTS) {\n        assertEquals(13.0, parentRes.value, Double.MIN_VALUE);\n      }\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(7.0, frn[0].value, Double.MIN_VALUE);\n      assertEquals(6.0, frn[1].value, Double.MIN_VALUE);\n      assertEquals(2.0, frn[2].value, Double.MIN_VALUE);\n      assertEquals(2.0, frn[3].value, Double.MIN_VALUE);\n      assertEquals(1.0, frn[4].value, Double.MIN_VALUE);\n      assertEquals(1.0, frn[5].value, Double.MIN_VALUE);\n\n      fr = facetResults.get(2);\n      parentRes = fr.getFacetResultNode();\n      if (op == OrdinalPolicy.ALL_PARENTS) {\n        assertEquals(7.0, parentRes.value, Double.MIN_VALUE);\n      }\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(2.0, frn[0].value, Double.MIN_VALUE);\n      assertEquals(2.0, frn[1].value, Double.MIN_VALUE);\n      assertEquals(1.0, frn[2].value, Double.MIN_VALUE);\n      assertEquals(1.0, frn[3].value, Double.MIN_VALUE);\n\n      fr = facetResults.get(3);\n      parentRes = fr.getFacetResultNode();\n      if (op == OrdinalPolicy.ALL_PARENTS) {\n        assertEquals(2.0, parentRes.value, Double.MIN_VALUE);\n      }\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(0, frn.length);\n\n      fr = facetResults.get(4);\n      parentRes = fr.getFacetResultNode();\n      if (op == OrdinalPolicy.ALL_PARENTS) {\n        assertEquals(6.0, parentRes.value, Double.MIN_VALUE);\n      }\n      frn = resultNodesAsArray(parentRes);\n      assertEquals(1.0, frn[0].value, Double.MIN_VALUE);\n      closeAll();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d":["811cdb4a80352766eb0c762e48972707a924e5cd"],"d33e19a97046248623a7591aeaa6547233fd15e2":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"551a8665af55f08d0001b0d58ed4bd81a8b8258f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"407687e67faf6e1f02a211ca078d8e3eed631027":["b89678825b68eccaf09e6ab71675fc0b0af1e099","551a8665af55f08d0001b0d58ed4bd81a8b8258f"],"07155cdd910937cdf6877e48884d5782845c8b8b":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["239f79ed06f0979cfe1911ec5fba32b94fda43c1"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"61d5f95d14e5b9b046998c51e16709a398c15226":["07155cdd910937cdf6877e48884d5782845c8b8b","239f79ed06f0979cfe1911ec5fba32b94fda43c1"],"d4c6c7f3cda7a0595cabd16e5e9107ca29852708":["551a8665af55f08d0001b0d58ed4bd81a8b8258f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"239f79ed06f0979cfe1911ec5fba32b94fda43c1":["f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["571abba77e55fea386a38c0024f72ffa5b37a9ad","d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"811cdb4a80352766eb0c762e48972707a924e5cd":["d4c6c7f3cda7a0595cabd16e5e9107ca29852708"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["07155cdd910937cdf6877e48884d5782845c8b8b"],"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d":["07155cdd910937cdf6877e48884d5782845c8b8b","239f79ed06f0979cfe1911ec5fba32b94fda43c1"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"551a8665af55f08d0001b0d58ed4bd81a8b8258f":["407687e67faf6e1f02a211ca078d8e3eed631027","d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"07155cdd910937cdf6877e48884d5782845c8b8b":["61d5f95d14e5b9b046998c51e16709a398c15226"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["c190847801a50f4dd20fd639bdc29b54ea3b288b","3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["d33e19a97046248623a7591aeaa6547233fd15e2"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["551a8665af55f08d0001b0d58ed4bd81a8b8258f","407687e67faf6e1f02a211ca078d8e3eed631027"],"61d5f95d14e5b9b046998c51e16709a398c15226":[],"d4c6c7f3cda7a0595cabd16e5e9107ca29852708":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","811cdb4a80352766eb0c762e48972707a924e5cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"239f79ed06f0979cfe1911ec5fba32b94fda43c1":["571abba77e55fea386a38c0024f72ffa5b37a9ad","61d5f95d14e5b9b046998c51e16709a398c15226"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"811cdb4a80352766eb0c762e48972707a924e5cd":["f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["61d5f95d14e5b9b046998c51e16709a398c15226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}