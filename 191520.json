{"path":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#getElevationProvider(IndexReader,SolrCore).mjava","commits":[{"id":"2ad458affd82a1d762eb506003907d9363a333cb","date":1528558344,"type":0,"author":"broustant","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#getElevationProvider(IndexReader,SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Gets the {@link ElevationProvider} from the data dir or from the cache.\n   *\n   * @return The cached or loaded {@link ElevationProvider}.\n   * @throws java.io.IOException                  If the configuration resource cannot be found, or if an I/O error occurs while analyzing the triggering queries.\n   * @throws org.xml.sax.SAXException                 If the configuration resource is not a valid XML content.\n   * @throws javax.xml.parsers.ParserConfigurationException If the configuration resource is not a valid XML configuration.\n   * @throws RuntimeException             If the configuration resource is not an XML content of the expected format\n   *                                      (either {@link RuntimeException} or {@link org.apache.solr.common.SolrException}).\n   */\n  @VisibleForTesting\n  ElevationProvider getElevationProvider(IndexReader reader, SolrCore core) throws Exception {\n    synchronized (elevationProviderCache) {\n      ElevationProvider elevationProvider;\n      elevationProvider = elevationProviderCache.get(null);\n      if (elevationProvider != null) return elevationProvider;\n\n      elevationProvider = elevationProviderCache.get(reader);\n      if (elevationProvider == null) {\n        Exception loadingException = null;\n        boolean resourceAccessIssue = false;\n        try {\n          elevationProvider = loadElevationProvider(core);\n        } catch (IOException e) {\n          loadingException = e;\n          resourceAccessIssue = true;\n        } catch (Exception e) {\n          loadingException = e;\n        }\n        boolean shouldCache = true;\n        if (loadingException != null) {\n          elevationProvider = handleConfigLoadingException(loadingException, resourceAccessIssue);\n          if (elevationProvider == null) {\n            elevationProvider = NO_OP_ELEVATION_PROVIDER;\n            shouldCache = false;\n          }\n        }\n        if (shouldCache) {\n          elevationProviderCache.put(reader, elevationProvider);\n        }\n      }\n      assert elevationProvider != null;\n      return elevationProvider;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#getElevationProvider(IndexReader,SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Gets the {@link ElevationProvider} from the data dir or from the cache.\n   *\n   * @return The cached or loaded {@link ElevationProvider}.\n   * @throws java.io.IOException                  If the configuration resource cannot be found, or if an I/O error occurs while analyzing the triggering queries.\n   * @throws org.xml.sax.SAXException                 If the configuration resource is not a valid XML content.\n   * @throws javax.xml.parsers.ParserConfigurationException If the configuration resource is not a valid XML configuration.\n   * @throws RuntimeException             If the configuration resource is not an XML content of the expected format\n   *                                      (either {@link RuntimeException} or {@link org.apache.solr.common.SolrException}).\n   */\n  @VisibleForTesting\n  ElevationProvider getElevationProvider(IndexReader reader, SolrCore core) throws Exception {\n    synchronized (elevationProviderCache) {\n      ElevationProvider elevationProvider;\n      elevationProvider = elevationProviderCache.get(null);\n      if (elevationProvider != null) return elevationProvider;\n\n      elevationProvider = elevationProviderCache.get(reader);\n      if (elevationProvider == null) {\n        Exception loadingException = null;\n        boolean resourceAccessIssue = false;\n        try {\n          elevationProvider = loadElevationProvider(core);\n        } catch (IOException e) {\n          loadingException = e;\n          resourceAccessIssue = true;\n        } catch (Exception e) {\n          loadingException = e;\n        }\n        boolean shouldCache = true;\n        if (loadingException != null) {\n          elevationProvider = handleConfigLoadingException(loadingException, resourceAccessIssue);\n          if (elevationProvider == null) {\n            elevationProvider = NO_OP_ELEVATION_PROVIDER;\n            shouldCache = false;\n          }\n        }\n        if (shouldCache) {\n          elevationProviderCache.put(reader, elevationProvider);\n        }\n      }\n      assert elevationProvider != null;\n      return elevationProvider;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#getElevationProvider(IndexReader,SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Gets the {@link ElevationProvider} from the data dir or from the cache.\n   *\n   * @return The cached or loaded {@link ElevationProvider}.\n   * @throws java.io.IOException                  If the configuration resource cannot be found, or if an I/O error occurs while analyzing the triggering queries.\n   * @throws org.xml.sax.SAXException                 If the configuration resource is not a valid XML content.\n   * @throws javax.xml.parsers.ParserConfigurationException If the configuration resource is not a valid XML configuration.\n   * @throws RuntimeException             If the configuration resource is not an XML content of the expected format\n   *                                      (either {@link RuntimeException} or {@link org.apache.solr.common.SolrException}).\n   */\n  @VisibleForTesting\n  ElevationProvider getElevationProvider(IndexReader reader, SolrCore core) throws Exception {\n    synchronized (elevationProviderCache) {\n      ElevationProvider elevationProvider;\n      elevationProvider = elevationProviderCache.get(null);\n      if (elevationProvider != null) return elevationProvider;\n\n      elevationProvider = elevationProviderCache.get(reader);\n      if (elevationProvider == null) {\n        Exception loadingException = null;\n        boolean resourceAccessIssue = false;\n        try {\n          elevationProvider = loadElevationProvider(core);\n        } catch (IOException e) {\n          loadingException = e;\n          resourceAccessIssue = true;\n        } catch (Exception e) {\n          loadingException = e;\n        }\n        boolean shouldCache = true;\n        if (loadingException != null) {\n          elevationProvider = handleConfigLoadingException(loadingException, resourceAccessIssue);\n          if (elevationProvider == null) {\n            elevationProvider = NO_OP_ELEVATION_PROVIDER;\n            shouldCache = false;\n          }\n        }\n        if (shouldCache) {\n          elevationProviderCache.put(reader, elevationProvider);\n        }\n      }\n      assert elevationProvider != null;\n      return elevationProvider;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2ad458affd82a1d762eb506003907d9363a333cb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2ad458affd82a1d762eb506003907d9363a333cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2ad458affd82a1d762eb506003907d9363a333cb"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2ad458affd82a1d762eb506003907d9363a333cb"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","2ad458affd82a1d762eb506003907d9363a333cb","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"2ad458affd82a1d762eb506003907d9363a333cb":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}