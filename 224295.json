{"path":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDiscover().mjava","commits":[{"id":"a0cf46558b3f7708ed3a21e174b9e11cd30e26be","date":1365551184,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDiscover().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testPropertiesFile().mjava","sourceNew":"  // Test the basic setup, create some dirs with core.properties files in them, but solr.xml has discoverCores\n  // set and insure that we find all the cores and can load them.\n  @Test\n  public void testDiscover() throws Exception {\n    setMeUp();\n    addSolrXml();\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(makeCorePropFile(\"core1\", false, true));\n    addCoreWithProps(makeCorePropFile(\"core2\", false, false));\n\n    // I suspect what we're adding in here is a \"configset\" rather than a schema or solrconfig.\n    //\n    addCoreWithProps(makeCorePropFile(\"lazy1\", true, false));\n\n    CoreContainer cc = init();\n    try {\n      Properties props = cc.containerProperties;\n\n      assertEquals(\"/admin/cores\", cc.getAdminPath());\n      assertEquals(\"defcore\", cc.getDefaultCoreName());\n      assertEquals(\"222.333.444.555\", cc.getHost());\n      assertEquals(\"6000\", cc.getHostPort());\n      assertEquals(\"solrprop\", cc.getHostContext());\n      assertEquals(20, cc.getZkClientTimeout());\n\n      TestLazyCores.checkInCores(cc, \"core1\");\n      TestLazyCores.checkNotInCores(cc, \"lazy1\", \"core2\", \"collection1\");\n\n      SolrCore core1 = cc.getCore(\"core1\");\n\n      // Let's assert we did the right thing for implicit properties too.\n      CoreDescriptor desc = core1.getCoreDescriptor();\n      assertEquals(\"core1\", desc.getProperty(\"solr.core.name\"));\n\n      // This is too long and ugly to put in. Besides, it varies.\n      assertNotNull(desc.getProperty(\"solr.core.instanceDir\"));\n\n      assertEquals(\"stuffandnonsense\", desc.getProperty(\"solr.core.dataDir\"));\n      assertEquals(\"solrconfig-minimal.xml\", desc.getProperty(\"solr.core.configName\"));\n      assertEquals(\"schema-tiny.xml\", desc.getProperty(\"solr.core.schemaName\"));\n\n      SolrCore core2 = cc.getCore(\"core2\");\n      SolrCore lazy1 = cc.getCore(\"lazy1\");\n      TestLazyCores.checkInCores(cc, \"core1\", \"core2\", \"lazy1\");\n      core1.close();\n      core2.close();\n      lazy1.close();\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  // Test the basic setup, create some dirs with core.properties files in them, but solr.xml has discoverCores\n  // set and insure that we find all the cores and can load them.\n  @Test\n  public void testPropertiesFile() throws Exception {\n    setMeUp();\n    addSolrXml();\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(makeCorePropFile(\"core1\", false, true));\n    addCoreWithProps(makeCorePropFile(\"core2\", false, false));\n\n    // I suspect what we're adding in here is a \"configset\" rather than a schema or solrconfig.\n    //\n    addCoreWithProps(makeCorePropFile(\"lazy1\", true, false));\n\n    CoreContainer cc = init();\n    try {\n      Properties props = cc.containerProperties;\n\n      assertEquals(\"/admin/cores\", cc.getAdminPath());\n      assertEquals(\"defcore\", cc.getDefaultCoreName());\n      assertEquals(\"222.333.444.555\", cc.getHost());\n      assertEquals(\"6000\", cc.getHostPort());\n      assertEquals(\"solrprop\", cc.getHostContext());\n      assertEquals(20, cc.getZkClientTimeout());\n\n      TestLazyCores.checkInCores(cc, \"core1\");\n      TestLazyCores.checkNotInCores(cc, \"lazy1\", \"core2\", \"collection1\");\n\n      SolrCore core1 = cc.getCore(\"core1\");\n\n      // Let's assert we did the right thing for implicit properties too.\n      CoreDescriptor desc = core1.getCoreDescriptor();\n      assertEquals(\"core1\", desc.getProperty(\"solr.core.name\"));\n\n      // This is too long and ugly to put in. Besides, it varies.\n      assertNotNull(desc.getProperty(\"solr.core.instanceDir\"));\n\n      assertEquals(\"stuffandnonsense\", desc.getProperty(\"solr.core.dataDir\"));\n      assertEquals(\"solrconfig-minimal.xml\", desc.getProperty(\"solr.core.configName\"));\n      assertEquals(\"schema-tiny.xml\", desc.getProperty(\"solr.core.schemaName\"));\n\n      SolrCore core2 = cc.getCore(\"core2\");\n      SolrCore lazy1 = cc.getCore(\"lazy1\");\n      TestLazyCores.checkInCores(cc, \"core1\", \"core2\", \"lazy1\");\n      core1.close();\n      core2.close();\n      lazy1.close();\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e475642767c688ede5728d7918326f70b4e0bf3a","date":1366072489,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDiscovery().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDiscover().mjava","sourceNew":"  // Test the basic setup, create some dirs with core.properties files in them, but solr.xml has discoverCores\n  // set and insure that we find all the cores and can load them.\n  @Test\n  public void testDiscovery() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(makeCorePropFile(\"core1\", false, true, \"dataDir=core1\"));\n    addCoreWithProps(makeCorePropFile(\"core2\", false, false, \"dataDir=core2\"));\n\n    // I suspect what we're adding in here is a \"configset\" rather than a schema or solrconfig.\n    //\n    addCoreWithProps(makeCorePropFile(\"lazy1\", true, false, \"dataDir=lazy1\"));\n\n    CoreContainer cc = init();\n    try {\n      assertNull(\"adminPath no longer allowed in solr.xml\", cc.getAdminPath());\n      assertNull(\"defaultCore no longer allowed in solr.xml\", cc.getDefaultCoreName());\n\n      assertEquals(\"222.333.444.555\", cc.getHost());\n      assertEquals(\"6000\", cc.getHostPort());\n      assertEquals(\"solrprop\", cc.getHostContext());\n      assertEquals(20, cc.getZkClientTimeout());\n\n      TestLazyCores.checkInCores(cc, \"core1\");\n      TestLazyCores.checkNotInCores(cc, \"lazy1\", \"core2\", \"collection1\");\n\n      SolrCore core1 = cc.getCore(\"core1\");\n\n      // Let's assert we did the right thing for implicit properties too.\n      CoreDescriptor desc = core1.getCoreDescriptor();\n      assertEquals(\"core1\", desc.getProperty(\"solr.core.name\"));\n\n      // Prove we're ignoring this even though it's set in the properties file\n      assertFalse(\"InstanceDir should be ignored\", desc.getProperty(\"solr.core.instanceDir\").contains(\"totallybogus\"));\n\n      // This is too long and ugly to put in. Besides, it varies.\n      assertNotNull(desc.getProperty(\"solr.core.instanceDir\"));\n\n      assertEquals(\"core1\", desc.getProperty(\"solr.core.dataDir\"));\n      assertEquals(\"solrconfig-minimal.xml\", desc.getProperty(\"solr.core.configName\"));\n      assertEquals(\"schema-tiny.xml\", desc.getProperty(\"solr.core.schemaName\"));\n\n      SolrCore core2 = cc.getCore(\"core2\");\n      SolrCore lazy1 = cc.getCore(\"lazy1\");\n      TestLazyCores.checkInCores(cc, \"core1\", \"core2\", \"lazy1\");\n      core1.close();\n      core2.close();\n      lazy1.close();\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  // Test the basic setup, create some dirs with core.properties files in them, but solr.xml has discoverCores\n  // set and insure that we find all the cores and can load them.\n  @Test\n  public void testDiscover() throws Exception {\n    setMeUp();\n    addSolrXml();\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(makeCorePropFile(\"core1\", false, true));\n    addCoreWithProps(makeCorePropFile(\"core2\", false, false));\n\n    // I suspect what we're adding in here is a \"configset\" rather than a schema or solrconfig.\n    //\n    addCoreWithProps(makeCorePropFile(\"lazy1\", true, false));\n\n    CoreContainer cc = init();\n    try {\n      Properties props = cc.containerProperties;\n\n      assertEquals(\"/admin/cores\", cc.getAdminPath());\n      assertEquals(\"defcore\", cc.getDefaultCoreName());\n      assertEquals(\"222.333.444.555\", cc.getHost());\n      assertEquals(\"6000\", cc.getHostPort());\n      assertEquals(\"solrprop\", cc.getHostContext());\n      assertEquals(20, cc.getZkClientTimeout());\n\n      TestLazyCores.checkInCores(cc, \"core1\");\n      TestLazyCores.checkNotInCores(cc, \"lazy1\", \"core2\", \"collection1\");\n\n      SolrCore core1 = cc.getCore(\"core1\");\n\n      // Let's assert we did the right thing for implicit properties too.\n      CoreDescriptor desc = core1.getCoreDescriptor();\n      assertEquals(\"core1\", desc.getProperty(\"solr.core.name\"));\n\n      // This is too long and ugly to put in. Besides, it varies.\n      assertNotNull(desc.getProperty(\"solr.core.instanceDir\"));\n\n      assertEquals(\"stuffandnonsense\", desc.getProperty(\"solr.core.dataDir\"));\n      assertEquals(\"solrconfig-minimal.xml\", desc.getProperty(\"solr.core.configName\"));\n      assertEquals(\"schema-tiny.xml\", desc.getProperty(\"solr.core.schemaName\"));\n\n      SolrCore core2 = cc.getCore(\"core2\");\n      SolrCore lazy1 = cc.getCore(\"lazy1\");\n      TestLazyCores.checkInCores(cc, \"core1\", \"core2\", \"lazy1\");\n      core1.close();\n      core2.close();\n      lazy1.close();\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["f5d1cc8d16a148260af030c38f50f1873f02e11d"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0cf46558b3f7708ed3a21e174b9e11cd30e26be":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e475642767c688ede5728d7918326f70b4e0bf3a":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e475642767c688ede5728d7918326f70b4e0bf3a"]},"commit2Childs":{"a0cf46558b3f7708ed3a21e174b9e11cd30e26be":["e475642767c688ede5728d7918326f70b4e0bf3a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be"],"e475642767c688ede5728d7918326f70b4e0bf3a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}