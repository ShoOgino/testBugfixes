{"path":"solr/core/src/java/org/apache/solr/util/stats/InstrumentedHttpRequestExecutor#getNameFor(HttpRequest).mjava","commits":[{"id":"16fa358573e3c2508728b3c7c438a8c19a3f0ae4","date":1482846144,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/InstrumentedHttpRequestExecutor#getNameFor(HttpRequest).mjava","pathOld":"/dev/null","sourceNew":"  private String getNameFor(HttpRequest request) {\n    try {\n      final RequestLine requestLine = request.getRequestLine();\n      String schemeHostPort = null;\n      if (request instanceof HttpRequestWrapper) {\n        HttpRequestWrapper wrapper = (HttpRequestWrapper) request;\n        schemeHostPort = wrapper.getTarget().getSchemeName() + \"://\" + wrapper.getTarget().getHostName() + \":\" +  wrapper.getTarget().getPort();\n      }\n      final URIBuilder url = new URIBuilder(requestLine.getUri());\n      return SolrMetricManager.mkName((schemeHostPort != null ? schemeHostPort : \"\") + url.removeQuery().build().toString() + \".\" + methodNameString(request), scope);\n    } catch (URISyntaxException e) {\n      throw new IllegalArgumentException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/InstrumentedHttpRequestExecutor#getNameFor(HttpRequest).mjava","pathOld":"/dev/null","sourceNew":"  private String getNameFor(HttpRequest request) {\n    try {\n      final RequestLine requestLine = request.getRequestLine();\n      String schemeHostPort = null;\n      if (request instanceof HttpRequestWrapper) {\n        HttpRequestWrapper wrapper = (HttpRequestWrapper) request;\n        schemeHostPort = wrapper.getTarget().getSchemeName() + \"://\" + wrapper.getTarget().getHostName() + \":\" +  wrapper.getTarget().getPort();\n      }\n      final URIBuilder url = new URIBuilder(requestLine.getUri());\n      return SolrMetricManager.mkName((schemeHostPort != null ? schemeHostPort : \"\") + url.removeQuery().build().toString() + \".\" + methodNameString(request), scope);\n    } catch (URISyntaxException e) {\n      throw new IllegalArgumentException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d51d8b74f1cc69d82280461200ad315617b5870c","date":1483637919,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/InstrumentedHttpRequestExecutor#getNameFor(HttpRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/InstrumentedHttpRequestExecutor#getNameFor(HttpRequest).mjava","sourceNew":"  private String getNameFor(HttpRequest request) {\n    try {\n      final RequestLine requestLine = request.getRequestLine();\n      String schemeHostPort = null;\n      if (request instanceof HttpRequestWrapper) {\n        HttpRequestWrapper wrapper = (HttpRequestWrapper) request;\n        if (wrapper.getTarget() != null)  {\n          schemeHostPort = wrapper.getTarget().getSchemeName() + \"://\" + wrapper.getTarget().getHostName() + \":\" +  wrapper.getTarget().getPort();\n        }\n      }\n      final URIBuilder url = new URIBuilder(requestLine.getUri());\n      return SolrMetricManager.mkName((schemeHostPort != null ? schemeHostPort : \"\") + url.removeQuery().build().toString() + \".\" + methodNameString(request), scope);\n    } catch (URISyntaxException e) {\n      throw new IllegalArgumentException(e);\n    }\n  }\n\n","sourceOld":"  private String getNameFor(HttpRequest request) {\n    try {\n      final RequestLine requestLine = request.getRequestLine();\n      String schemeHostPort = null;\n      if (request instanceof HttpRequestWrapper) {\n        HttpRequestWrapper wrapper = (HttpRequestWrapper) request;\n        schemeHostPort = wrapper.getTarget().getSchemeName() + \"://\" + wrapper.getTarget().getHostName() + \":\" +  wrapper.getTarget().getPort();\n      }\n      final URIBuilder url = new URIBuilder(requestLine.getUri());\n      return SolrMetricManager.mkName((schemeHostPort != null ? schemeHostPort : \"\") + url.removeQuery().build().toString() + \".\" + methodNameString(request), scope);\n    } catch (URISyntaxException e) {\n      throw new IllegalArgumentException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"491c9672ec42582fe43960452dbd37f1c80fe0f0","date":1483739222,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/InstrumentedHttpRequestExecutor#getNameFor(HttpRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/InstrumentedHttpRequestExecutor#getNameFor(HttpRequest).mjava","sourceNew":"  private String getNameFor(HttpRequest request) {\n    try {\n      final RequestLine requestLine = request.getRequestLine();\n      String schemeHostPort = null;\n      if (request instanceof HttpRequestWrapper) {\n        HttpRequestWrapper wrapper = (HttpRequestWrapper) request;\n        if (wrapper.getTarget() != null)  {\n          schemeHostPort = wrapper.getTarget().getSchemeName() + \"://\" + wrapper.getTarget().getHostName() + \":\" +  wrapper.getTarget().getPort();\n        }\n      }\n      final URIBuilder url = new URIBuilder(requestLine.getUri());\n      return SolrMetricManager.mkName((schemeHostPort != null ? schemeHostPort : \"\") + url.removeQuery().build().toString() + \".\" + methodNameString(request), scope);\n    } catch (URISyntaxException e) {\n      throw new IllegalArgumentException(e);\n    }\n  }\n\n","sourceOld":"  private String getNameFor(HttpRequest request) {\n    try {\n      final RequestLine requestLine = request.getRequestLine();\n      String schemeHostPort = null;\n      if (request instanceof HttpRequestWrapper) {\n        HttpRequestWrapper wrapper = (HttpRequestWrapper) request;\n        schemeHostPort = wrapper.getTarget().getSchemeName() + \"://\" + wrapper.getTarget().getHostName() + \":\" +  wrapper.getTarget().getPort();\n      }\n      final URIBuilder url = new URIBuilder(requestLine.getUri());\n      return SolrMetricManager.mkName((schemeHostPort != null ? schemeHostPort : \"\") + url.removeQuery().build().toString() + \".\" + methodNameString(request), scope);\n    } catch (URISyntaxException e) {\n      throw new IllegalArgumentException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc0351e5a64998aa87ebea3be11fca66075eb1b0","date":1484206200,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/util/stats/InstrumentedHttpRequestExecutor#getNameFor(HttpRequest).mjava","sourceNew":null,"sourceOld":"  private String getNameFor(HttpRequest request) {\n    try {\n      final RequestLine requestLine = request.getRequestLine();\n      String schemeHostPort = null;\n      if (request instanceof HttpRequestWrapper) {\n        HttpRequestWrapper wrapper = (HttpRequestWrapper) request;\n        if (wrapper.getTarget() != null)  {\n          schemeHostPort = wrapper.getTarget().getSchemeName() + \"://\" + wrapper.getTarget().getHostName() + \":\" +  wrapper.getTarget().getPort();\n        }\n      }\n      final URIBuilder url = new URIBuilder(requestLine.getUri());\n      return SolrMetricManager.mkName((schemeHostPort != null ? schemeHostPort : \"\") + url.removeQuery().build().toString() + \".\" + methodNameString(request), scope);\n    } catch (URISyntaxException e) {\n      throw new IllegalArgumentException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/util/stats/InstrumentedHttpRequestExecutor#getNameFor(HttpRequest).mjava","sourceNew":null,"sourceOld":"  private String getNameFor(HttpRequest request) {\n    try {\n      final RequestLine requestLine = request.getRequestLine();\n      String schemeHostPort = null;\n      if (request instanceof HttpRequestWrapper) {\n        HttpRequestWrapper wrapper = (HttpRequestWrapper) request;\n        if (wrapper.getTarget() != null)  {\n          schemeHostPort = wrapper.getTarget().getSchemeName() + \"://\" + wrapper.getTarget().getHostName() + \":\" +  wrapper.getTarget().getPort();\n        }\n      }\n      final URIBuilder url = new URIBuilder(requestLine.getUri());\n      return SolrMetricManager.mkName((schemeHostPort != null ? schemeHostPort : \"\") + url.removeQuery().build().toString() + \".\" + methodNameString(request), scope);\n    } catch (URISyntaxException e) {\n      throw new IllegalArgumentException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["491c9672ec42582fe43960452dbd37f1c80fe0f0","fc0351e5a64998aa87ebea3be11fca66075eb1b0"],"d51d8b74f1cc69d82280461200ad315617b5870c":["16fa358573e3c2508728b3c7c438a8c19a3f0ae4"],"fc0351e5a64998aa87ebea3be11fca66075eb1b0":["d51d8b74f1cc69d82280461200ad315617b5870c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fc0351e5a64998aa87ebea3be11fca66075eb1b0"],"16fa358573e3c2508728b3c7c438a8c19a3f0ae4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","16fa358573e3c2508728b3c7c438a8c19a3f0ae4"],"491c9672ec42582fe43960452dbd37f1c80fe0f0":["f03e4bed5023ec3ef93a771b8888cae991cf448d","d51d8b74f1cc69d82280461200ad315617b5870c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["16fa358573e3c2508728b3c7c438a8c19a3f0ae4","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"d51d8b74f1cc69d82280461200ad315617b5870c":["fc0351e5a64998aa87ebea3be11fca66075eb1b0","491c9672ec42582fe43960452dbd37f1c80fe0f0"],"fc0351e5a64998aa87ebea3be11fca66075eb1b0":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"491c9672ec42582fe43960452dbd37f1c80fe0f0":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"16fa358573e3c2508728b3c7c438a8c19a3f0ae4":["d51d8b74f1cc69d82280461200ad315617b5870c","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["491c9672ec42582fe43960452dbd37f1c80fe0f0"]},"heads":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}