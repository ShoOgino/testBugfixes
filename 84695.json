{"path":"solr/core/src/java/org/apache/solr/schema/CurrencyValue#strValue().mjava","commits":[{"id":"6409f24cc7d96b04fb1c932845092b0e307fb5d4","date":1515972624,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyValue#strValue().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a string representing the currency value such as \"3.14,USD\" for\n   * a CurrencyValue of $3.14 USD.\n   */\n  public String strValue() {\n    int digits = 0;\n    try {\n      Currency currency =\n        Currency.getInstance(this.getCurrencyCode());\n      if (currency == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Invalid currency code \" + this.getCurrencyCode());\n  }\n      digits = currency.getDefaultFractionDigits();\n}\n    catch(IllegalArgumentException exception) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Invalid currency code \" + this.getCurrencyCode());\n    }\n\n    String amount = Long.toString(this.getAmount());\n    if (this.getAmount() == 0) {\n      amount += \"000000\".substring(0,digits);\n    }\n    return\n      amount.substring(0, amount.length() - digits)\n      + \".\" + amount.substring(amount.length() - digits)\n      + \",\" +  this.getCurrencyCode();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyValue#strValue().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a string representing the currency value such as \"3.14,USD\" for\n   * a CurrencyValue of $3.14 USD.\n   */\n  public String strValue() {\n    int digits = 0;\n    try {\n      Currency currency =\n        Currency.getInstance(this.getCurrencyCode());\n      if (currency == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Invalid currency code \" + this.getCurrencyCode());\n  }\n      digits = currency.getDefaultFractionDigits();\n}\n    catch(IllegalArgumentException exception) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Invalid currency code \" + this.getCurrencyCode());\n    }\n\n    String amount = Long.toString(this.getAmount());\n    if (this.getAmount() == 0) {\n      amount += \"000000\".substring(0,digits);\n    }\n    return\n      amount.substring(0, amount.length() - digits)\n      + \".\" + amount.substring(amount.length() - digits)\n      + \",\" +  this.getCurrencyCode();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6409f24cc7d96b04fb1c932845092b0e307fb5d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6409f24cc7d96b04fb1c932845092b0e307fb5d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6409f24cc7d96b04fb1c932845092b0e307fb5d4"],"6409f24cc7d96b04fb1c932845092b0e307fb5d4":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}